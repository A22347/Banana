
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e7 be 00 00       	call   c000bf07 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 e3 01 00       	call   c001e328 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a8 ee 01 c0       	mov    ebx,0xc001eea8
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 ee 01 c0    	cmp    ebx,0xc001eeb0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 0c 28 02 c0       	mov    eax,0xc002280c
c0000049:	3d 0c 28 02 c0       	cmp    eax,0xc002280c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 0c 28 02 c0       	push   0xc002280c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 0c 28 02 c0       	mov    eax,0xc002280c
c0000075:	2d 0c 28 02 c0       	sub    eax,0xc002280c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 0c 28 02 c0       	push   0xc002280c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d ac 29 02 c0 00 	cmp    BYTE PTR ds:0xc00229ac,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 ee 01 c0       	mov    ebx,0xc001eeb8
c00000bb:	81 eb b4 ee 01 c0    	sub    ebx,0xc001eeb4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 ee 01 c0       	mov    esi,0xc001eeb4
c00000ca:	a1 b0 29 02 c0       	mov    eax,ds:0xc00229b0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 b0 29 02 c0       	mov    ds:0xc00229b0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 b0 29 02 c0       	mov    eax,ds:0xc00229b0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 0c 28 02 c0       	push   0xc002280c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 ac 29 02 c0 01 	mov    BYTE PTR ds:0xc00229ac,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b4 29 02 c0       	push   0xc00229b4
c000012c:	68 0c 28 02 c0       	push   0xc002280c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 55 e9 00 00       	call   c000ebb4 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 c3 6f 01 00       	call   c001722c <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 af 73 01 00       	call   c001763f <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 55 7b 01 00       	call   c0017dee <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 84 6f 01 00       	call   c001722c <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 f0 2d 02 c0 	lgdtd  ds:0xc0022df0
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 67 0a 01 c0       	mov    ecx,0xc0010a67
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 67 0a 01 c0       	mov    ecx,0xc0010a67
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d cc 29 02 c0    	mov    ebx,DWORD PTR ds:0xc00229cc
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 cc 29 02 c0       	mov    ds:0xc00229cc,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 cc 29 02 c0       	mov    eax,ds:0xc00229cc
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 cc 29 02 c0    	mov    DWORD PTR ds:0xc00229cc,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 c0 ee 01 c0 02 	test   BYTE PTR [edx-0x3ffe1140],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 c0 ee 01 c0 01 	test   BYTE PTR [edx-0x3ffe1140],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 c0 ee 01 c0 08 	test   BYTE PTR [edx-0x3ffe1140],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 c0 ee 01 c0 04 	test   BYTE PTR [edi-0x3ffe1140],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 c0 ee 01 c0 01 	test   BYTE PTR [edx-0x3ffe1140],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d e0 29 02 c0    	mov    ecx,DWORD PTR ds:0xc00229e0
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d e0 29 02 c0    	mov    DWORD PTR ds:0xc00229e0,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 e4 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd61c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 e4 29 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd61c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d e0 29 02 c0    	mov    DWORD PTR ds:0xc00229e0,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 0c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a0c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 1c 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022a1c
c0000b8d:	c7 42 0c 14 2a 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022a14
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 1c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a1c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 0c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a0c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 e0 29 02 c0 02 	test   BYTE PTR ds:0xc00229e0,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 f7 ad 00 00       	call   c000ba65 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 39 ad 00 00       	call   c000ba65 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 23 ad 00 00       	call   c000ba65 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 ff ac 00 00       	call   c000ba65 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d e0 29 02 c0    	mov    edi,DWORD PTR ds:0xc00229e0
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 e4 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd61c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 e4 29 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd61c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 14 2a 02 c0 	lea    edx,[eax*8-0x3ffdd5ec]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 20 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022a20
c0000f0f:	81 fb 14 2a 02 c0    	cmp    ebx,0xc0022a14
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 14 2a 02 c0       	cmp    eax,0xc0022a14
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 10 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a10,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 1c 2a 02 c0       	mov    ds:0xc0022a1c,eax
c0000f4b:	a3 20 2a 02 c0       	mov    ds:0xc0022a20,eax
c0000f50:	a3 10 2a 02 c0       	mov    ds:0xc0022a10,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 14 2a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022a14
c0000f5e:	c7 40 0c 14 2a 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022a14
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 20 2a 02 c0       	mov    ds:0xc0022a20,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 14 2a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022a14
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 d8 29 02 c0 	lea    ebp,[edx*4-0x3ffdd628]
c0000faf:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 e0 29 02 c0 	lea    ecx,[edx*4-0x3ffdd620]
c0000fca:	8b 14 95 e0 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd620]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 14 2d 02 c0 	or     DWORD PTR [edi*4-0x3ffdd2ec],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 14 2a 02 c0 	lea    eax,[eax*8-0x3ffdd5ec]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 1c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a1c,ecx
c0001084:	89 0d 20 2a 02 c0    	mov    DWORD PTR ds:0xc0022a20,ecx
c000108a:	c7 41 08 14 2a 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022a14
c0001091:	c7 41 0c 14 2a 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022a14
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 0c 2a 02 c0 	lea    edx,[ecx*8-0x3ffdd5f4]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 14 2d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd2ec]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 14 2d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd2ec]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 0c 2a 02 c0 	lea    edx,[eax*4-0x3ffdd5f4]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 14 2d 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdd2ec],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 1c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a1c,edi
c0001157:	89 3d 20 2a 02 c0    	mov    DWORD PTR ds:0xc0022a20,edi
c000115d:	c7 47 08 14 2a 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022a14
c0001164:	c7 47 0c 14 2a 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022a14
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 10 2a 02 c0    	mov    DWORD PTR ds:0xc0022a10,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 0c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a0c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba e0 29 02 c0       	mov    edx,0xc00229e0
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d e0 29 02 c0 00 	cmp    DWORD PTR ds:0xc00229e0,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 34 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022d34
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 34 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d34,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 34 2d 02 c0    	mov    DWORD PTR ds:0xc0022d34,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 0c 2a 02 c0    	cmp    DWORD PTR ds:0xc0022a0c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 0c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a0c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d e0 29 02 c0 00 	cmp    DWORD PTR ds:0xc00229e0,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 3c 2d 02 c0    	push   DWORD PTR ds:0xc0022d3c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d e0 29 02 c0 00 	cmp    DWORD PTR ds:0xc00229e0,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 3c 2d 02 c0       	mov    eax,ds:0xc0022d3c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 0c 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022a0c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 e4 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd61c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 14 2a 02 c0       	mov    eax,0xc0022a14
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 0c 2d 02 c0       	cmp    eax,0xc0022d0c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 48 2d 02 c0       	mov    eax,ds:0xc0022d48
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 30 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022d30
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 44 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022d44
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 54 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022d54
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 e0 29 02 c0       	mov    eax,0xc00229e0
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 c4 ef 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe103c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 e0 29 02 c0       	mov    eax,ds:0xc00229e0
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 e0 29 02 c0       	mov    ds:0xc00229e0,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 24 2d 02 c0    	mov    DWORD PTR ds:0xc0022d24,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 28 2d 02 c0    	mov    DWORD PTR ds:0xc0022d28,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 2c 2d 02 c0    	mov    DWORD PTR ds:0xc0022d2c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 34 2d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022d34,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 80 42 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbd80]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 8f 7b 01 00       	jmp    c00194e8 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 80 42 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbd80]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 c0 7b 01 00       	jmp    c001952f <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 80 42 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbd80]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 e8 7b 01 00       	jmp    c0019576 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 5b c4 01 00       	call   c001e0cc <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 e0 f0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0f20]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 e0 f0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0f20]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba e0 ef 01 c0       	mov    edx,0xc001efe0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba 00 f1 01 c0       	mov    edx,0xc001f100
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba 0c f1 01 c0       	mov    edx,0xc001f10c
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba f0 f0 01 c0       	mov    edx,0xc001f0f0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 80 2d 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdd280]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 60 2d 02 c0    	mov    ax,ds:0xc0022d60
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 60 2d 02 c0    	mov    ds:0xc0022d60,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 58 b2 01 00       	call   c001e0cc <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 12 f1 01 c0       	mov    eax,0xc001f112
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 60 f0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0fa0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 1b f1 01 c0       	mov    eax,0xc001f11b
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 e0 f0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0f20]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 23 9c 01 00       	call   c001e0cc <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba f0 f0 01 c0       	mov    edx,0xc001f0f0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba e0 ef 01 c0       	mov    edx,0xc001efe0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 80 2d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd280]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 80 2d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd280],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 ea 85 01 00       	call   c001e0cc <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 d0 85 01 00       	call   c001e0cc <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 37 f0 01 c0       	mov    eax,0xc001f037
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 30 f0 01 c0       	mov    eax,0xc001f030
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 80 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd280]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be 20 f0 01 c0       	mov    esi,0xc001f020
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 13 6d 01 00       	call   c001e0cc <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba 00 f1 01 c0       	mov    edx,0xc001f100
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba 00 f0 01 c0       	mov    edx,0xc001f000
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba 10 f0 01 c0       	mov    edx,0xc001f010
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba 22 f1 01 c0       	mov    edx,0xc001f122
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba 2e f1 01 c0       	mov    edx,0xc001f12e
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 42 f1 01 c0       	mov    edx,0xc001f142
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 48 3a 00 00       	call   c000bc18 <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 42 3a 00 00       	call   c000bc28 <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 60 f4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f460
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 60 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f460
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 60 f2 01 c0       	mov    eax,0xc001f260
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 a0 f1 01 c0       	mov    eax,0xc001f1a0
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 60 f1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ea0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 20 fa 01 c0    	fld    QWORD PTR ds:0xc001fa20
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d 28 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa28
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 43 37 00 00       	call   c000bc28 <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 2d 37 00 00       	call   c000bc28 <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 40 fa 01 c0    	fld    DWORD PTR ds:0xc001fa40
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 1b 5d 01 00       	call   c001e2f0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 30 fa 01 c0    	fld    QWORD PTR ds:0xc001fa30
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 d1 33 00 00       	call   c000bc48 <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 6c 33 00 00       	call   c000bc28 <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 c0 f9 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0640]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 44 fa 01 c0    	fld    DWORD PTR ds:0xc001fa44
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 48 fa 01 c0    	fld    DWORD PTR ds:0xc001fa48
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 38 fa 01 c0    	fcom   QWORD PTR ds:0xc001fa38
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 4c fa 01 c0    	fld    DWORD PTR ds:0xc001fa4c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 59 58 01 00       	call   c001e310 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 50 fa 01 c0    	fld    DWORD PTR ds:0xc001fa50
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 48 fa 01 c0    	fld    DWORD PTR ds:0xc001fa48
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 38 fa 01 c0    	fcom   QWORD PTR ds:0xc001fa38
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 4c fa 01 c0    	fld    DWORD PTR ds:0xc001fa4c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 cd 57 01 00       	call   c001e310 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 20 fa 01 c0    	fld    QWORD PTR ds:0xc001fa20
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d 28 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa28
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 5a 57 01 00       	call   c001e310 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 26 56 01 00       	call   c001e2f0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 98 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa98
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 bf 55 01 00       	call   c001e310 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 4c 55 01 00       	call   c001e2f0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 98 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa98
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 54 fa 01 c0       	mov    eax,0xc001fa54
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 68 fa 01 c0       	mov    eax,0xc001fa68
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 3f 2d 00 00       	call   c000bc28 <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 41 2d 00 00       	call   c000bc48 <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f1e:	83 ec 0c             	sub    esp,0xc
c0008f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 20 fa 01 c0    	fld    QWORD PTR ds:0xc001fa20
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d 28 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa28
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 28 fc 01 c0    	fld    DWORD PTR ds:0xc001fc28
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 a0 fa 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0560]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 bc fa 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0544]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 d8 fa 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0528]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 2c fc 01 c0    	fld    DWORD PTR ds:0xc001fc2c
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 be 48 01 00       	jmp    c001e310 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 9b 48 01 00       	call   c001e310 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 30 fc 01 c0    	fld    DWORD PTR ds:0xc001fc30
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 46 46 01 00       	call   c001e310 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 11 46 01 00       	call   c001e310 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 98 fa 01 c0    	fadd   QWORD PTR ds:0xc001fa98
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 23 45 01 00       	call   c001e2f0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d 20 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc20
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 86 44 01 00       	call   c001e310 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 30 fc 01 c0    	fld    DWORD PTR ds:0xc001fc30
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 c2 43 01 00       	call   c001e310 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 8d 43 01 00       	call   c001e310 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 98 fa 01 c0    	fadd   QWORD PTR ds:0xc001fa98
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 9f 42 01 00       	call   c001e2f0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d 20 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc20
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 07 42 01 00       	call   c001e310 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 30 fc 01 c0    	fld    DWORD PTR ds:0xc001fc30
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 43 41 01 00       	call   c001e310 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 0e 41 01 00       	call   c001e310 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 98 fa 01 c0    	fadd   QWORD PTR ds:0xc001fa98
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 20 40 01 00       	call   c001e2f0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d 20 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc20
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 88 3f 01 00       	call   c001e310 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 30 fc 01 c0    	fld    DWORD PTR ds:0xc001fc30
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 c4 3e 01 00       	call   c001e310 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 8f 3e 01 00       	call   c001e310 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 98 fa 01 c0    	fadd   QWORD PTR ds:0xc001fa98
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 a1 3d 01 00       	call   c001e2f0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d 20 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc20
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 09 3d 01 00       	call   c001e310 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 30 fc 01 c0    	fld    DWORD PTR ds:0xc001fc30
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 45 3c 01 00       	call   c001e310 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 10 3c 01 00       	call   c001e310 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 98 fa 01 c0    	fadd   QWORD PTR ds:0xc001fa98
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 29 3b 01 00       	call   c001e2f0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d 20 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fc20
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 8b 3a 01 00       	call   c001e310 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 00 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0500]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 f4 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe050c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 42 13 00 00       	call   c000bc28 <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 20 fa 01 c0    	fld    QWORD PTR ds:0xc001fa20
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d 28 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa28
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 1e 39 01 00       	call   c001e310 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 f2 37 01 00       	call   c001e2f0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 98 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa98
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 97 37 01 00       	call   c001e310 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 24 37 01 00       	call   c001e2f0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 98 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fa98
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 34 fc 01 c0       	mov    eax,0xc001fc34
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 45 fc 01 c0       	mov    eax,0xc001fc45
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 2d 0f 00 00       	call   c000bc28 <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 2f 0f 00 00       	call   c000bc48 <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad30:	83 ec 0c             	sub    esp,0xc
c000ad33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 e5 55 00 00       	call   c0010360 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 7c fc 01 c0       	push   0xc001fc7c
c000adb1:	50                   	push   eax
c000adb2:	e8 23 56 00 00       	call   c00103da <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba f8 fc 01 c0       	mov    edx,0xc001fcf8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 00 c7 00 00       	call   c001760c <lockScheduler()>
c000af0c:	e8 2f ca 00 00       	call   c0017940 <schedule()>
c000af11:	e8 f8 c6 00 00       	call   c001760e <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 cc 3d 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 b4 41 02 c0    	push   DWORD PTR ds:0xc00241b4
c000af33:	68 85 fc 01 c0       	push   0xc001fc85
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 2c c5 00 00       	call   c001746c <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 a5 b5 00 c0       	push   0xc000b5a5
c000af4f:	56                   	push   esi
c000af50:	e8 e1 c7 00 00       	call   c0017736 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 7c 81 01 c0       	push   0xc001817c
c000af5e:	ff 35 b4 41 02 c0    	push   DWORD PTR ds:0xc00241b4
c000af64:	e8 cd c7 00 00       	call   c0017736 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c000af71:	c6 05 ed 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022ded,0x1
c000af78:	e8 bd 41 00 00       	call   c000f13a <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 68 af 00 00       	call   c0015efc <setupSystemCalls()>
c000af94:	e8 9f 4c 00 00       	call   c000fc38 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 93 53 00 00       	call   c0010334 <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d e8 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022de8
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 92 fc 01 c0       	push   0xc001fc92
c000afb0:	e8 f9 c0 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 43 c2 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 d4 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cd4
c000afc5:	e8 15 3e 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 34 cc 00 00       	call   c0017c0b <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 01 2e 02 c0 04 	test   BYTE PTR ds:0xc0022e01,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 61 2d 01 00       	call   c001dd96 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 1b 8b 00 00       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 f4 8a 00 00       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 d2 8a 00 00       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 b0 8a 00 00       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 00 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022e00,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 d9 89 00 00       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 b4 89 00 00       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 e5 2b 01 00       	call   c001dd50 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 b2 2b 01 00       	call   c001dd40 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 cf 89 00 00       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 ae fc 01 c0       	push   0xc001fcae
c000b1e8:	e8 5b 97 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 b4 fc 01 c0       	push   0xc001fcb4
c000b220:	e8 23 97 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 00 2e 02 c0 04 	test   BYTE PTR ds:0xc0022e00,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 20 22 02 c0 	sete   BYTE PTR ds:0xc0022220
c000b284:	e8 67 3a 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 8f 7f 00 00       	call   c0013222 <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 48 4f 00 00       	call   c00101ea <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 30 3a 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 8c 89 00 00       	call   c0013c56 <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 11 4f 00 00       	call   c00101ea <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 5d 54 00 00       	call   c0010752 <setupFPU()>
c000b2f5:	83 ec 08             	sub    esp,0x8
c000b2f8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fe:	50                   	push   eax
c000b2ff:	53                   	push   ebx
c000b300:	e8 e5 4e 00 00       	call   c00101ea <Device::addChild(Device*)>
c000b305:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b30d:	6a 00                	push   0x0
c000b30f:	6a 00                	push   0x0
c000b311:	6a 00                	push   0x0
c000b313:	50                   	push   eax
c000b314:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b317:	83 c4 14             	add    esp,0x14
c000b31a:	68 dc af 00 c0       	push   0xc000afdc
c000b31f:	e8 12 c5 00 00       	call   c0017836 <setupMultitasking(void (*)())>
c000b324:	83 c4 14             	add    esp,0x14
c000b327:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b32c:	5b                   	pop    ebx
c000b32d:	5e                   	pop    esi
c000b32e:	c3                   	ret    
c000b32f:	90                   	nop

c000b330 <Computer::disableNMI()>:
c000b330:	6a 00                	push   0x0
c000b332:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b336:	e8 15 ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b33b:	58                   	pop    eax
c000b33c:	5a                   	pop    edx
c000b33d:	c3                   	ret    

c000b33e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b342:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b349:	19 c0                	sbb    eax,eax
c000b34b:	83 e0 80             	and    eax,0xffffff80
c000b34e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b352:	e6 70                	out    0x70,al
c000b354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b358:	e6 71                	out    0x71,al
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <Computer::handleNMI()>:
c000b35c:	56                   	push   esi
c000b35d:	53                   	push   ebx
c000b35e:	83 ec 10             	sub    esp,0x10
c000b361:	e4 92                	in     al,0x92
c000b363:	89 c6                	mov    esi,eax
c000b365:	e4 61                	in     al,0x61
c000b367:	68 ba fc 01 c0       	push   0xc001fcba
c000b36c:	88 c3                	mov    bl,al
c000b36e:	e8 6c 3a 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	83 e6 10             	and    esi,0x10
c000b379:	75 0d                	jne    c000b388 <Computer::handleNMI()+0x2c>
c000b37b:	f6 c3 40             	test   bl,0x40
c000b37e:	75 1d                	jne    c000b39d <Computer::handleNMI()+0x41>
c000b380:	84 db                	test   bl,bl
c000b382:	78 2d                	js     c000b3b1 <Computer::handleNMI()+0x55>
c000b384:	58                   	pop    eax
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	68 cb fc 01 c0       	push   0xc001fccb
c000b390:	e8 b3 95 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	f6 c3 40             	test   bl,0x40
c000b39b:	74 e3                	je     c000b380 <Computer::handleNMI()+0x24>
c000b39d:	83 ec 0c             	sub    esp,0xc
c000b3a0:	68 d8 fc 01 c0       	push   0xc001fcd8
c000b3a5:	e8 9e 95 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	84 db                	test   bl,bl
c000b3af:	79 d3                	jns    c000b384 <Computer::handleNMI()+0x28>
c000b3b1:	c7 44 24 10 e2 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fce2
c000b3b9:	5a                   	pop    edx
c000b3ba:	5b                   	pop    ebx
c000b3bb:	5e                   	pop    esi
c000b3bc:	e9 87 95 00 00       	jmp    c0014948 <Krnl::panic(char const*)>
c000b3c1:	90                   	nop

c000b3c2 <Computer::setDiskActivityLight(int, bool)>:
c000b3c2:	56                   	push   esi
c000b3c3:	53                   	push   ebx
c000b3c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3c8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3cd:	77 1b                	ja     c000b3ea <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3cf:	e4 92                	in     al,0x92
c000b3d1:	bb 40 00 00 00       	mov    ebx,0x40
c000b3d6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3da:	89 da                	mov    edx,ebx
c000b3dc:	d3 e2                	shl    edx,cl
c000b3de:	89 f1                	mov    ecx,esi
c000b3e0:	f7 d2                	not    edx
c000b3e2:	d3 e3                	shl    ebx,cl
c000b3e4:	21 d0                	and    eax,edx
c000b3e6:	09 d8                	or     eax,ebx
c000b3e8:	e6 92                	out    0x92,al
c000b3ea:	5b                   	pop    ebx
c000b3eb:	5e                   	pop    esi
c000b3ec:	c3                   	ret    
c000b3ed:	90                   	nop

c000b3ee <GDTEntry::setBase(unsigned int)>:
c000b3ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3f6:	89 c1                	mov    ecx,eax
c000b3f8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b3fc:	c1 e9 10             	shr    ecx,0x10
c000b3ff:	c1 e8 18             	shr    eax,0x18
c000b402:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b405:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b408:	c3                   	ret    
c000b409:	90                   	nop

c000b40a <GDTEntry::setLimit(unsigned int)>:
c000b40a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b40e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b412:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b415:	66 89 01             	mov    WORD PTR [ecx],ax
c000b418:	83 e2 f0             	and    edx,0xfffffff0
c000b41b:	c1 e8 10             	shr    eax,0x10
c000b41e:	83 e0 0f             	and    eax,0xf
c000b421:	09 d0                	or     eax,edx
c000b423:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b426:	c3                   	ret    
c000b427:	90                   	nop

c000b428 <GDT::GDT()>:
c000b428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b436:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b43c:	90                   	nop
c000b43d:	c3                   	ret    

c000b43e <GDT::addEntry(GDTEntry)>:
c000b43e:	53                   	push   ebx
c000b43f:	83 ec 0c             	sub    esp,0xc
c000b442:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b446:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b448:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b44f:	52                   	push   edx
c000b450:	50                   	push   eax
c000b451:	68 1c fd 01 c0       	push   0xc001fd1c
c000b456:	e8 84 39 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000b45b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b45d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b461:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b465:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b469:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b46d:	8d 50 01             	lea    edx,[eax+0x1]
c000b470:	c1 e0 03             	shl    eax,0x3
c000b473:	89 13                	mov    DWORD PTR [ebx],edx
c000b475:	83 c4 18             	add    esp,0x18
c000b478:	5b                   	pop    ebx
c000b479:	c3                   	ret    

c000b47a <GDT::getNumberOfEntries()>:
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b480:	c3                   	ret    
c000b481:	90                   	nop

c000b482 <GDT::flush()>:
c000b482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b486:	8b 10                	mov    edx,DWORD PTR [eax]
c000b488:	83 c0 04             	add    eax,0x4
c000b48b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b492:	a3 f2 2d 02 c0       	mov    ds:0xc0022df2,eax
c000b497:	66 89 15 f0 2d 02 c0 	mov    WORD PTR ds:0xc0022df0,dx
c000b49e:	e9 90 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a3:	90                   	nop

c000b4a4 <GDT::setup()>:
c000b4a4:	55                   	push   ebp
c000b4a5:	57                   	push   edi
c000b4a6:	56                   	push   esi
c000b4a7:	53                   	push   ebx
c000b4a8:	83 ec 3c             	sub    esp,0x3c
c000b4ab:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4af:	6a 00                	push   0x0
c000b4b1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4b5:	53                   	push   ebx
c000b4b6:	e8 33 ff ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000b4bb:	6a 00                	push   0x0
c000b4bd:	53                   	push   ebx
c000b4be:	e8 47 ff ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000b4c3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4cb:	6a 00                	push   0x0
c000b4cd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d1:	53                   	push   ebx
c000b4d2:	e8 17 ff ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000b4d7:	68 ff ff ff 00       	push   0xffffff
c000b4dc:	53                   	push   ebx
c000b4dd:	e8 28 ff ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000b4e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4e6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4eb:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4f4:	83 c4 20             	add    esp,0x20
c000b4f7:	6a 00                	push   0x0
c000b4f9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b4fd:	53                   	push   ebx
c000b4fe:	e8 eb fe ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000b503:	68 ff ff ff 00       	push   0xffffff
c000b508:	53                   	push   ebx
c000b509:	e8 fc fe ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000b50e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b512:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b516:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b51a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b51e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b522:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b527:	0d 00 92 c0 00       	or     eax,0xc09200
c000b52c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b530:	89 d8                	mov    eax,ebx
c000b532:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b536:	80 cc 60             	or     ah,0x60
c000b539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b53d:	83 c4 0c             	add    esp,0xc
c000b540:	89 f8                	mov    eax,edi
c000b542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b546:	80 cc 60             	or     ah,0x60
c000b549:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54d:	89 c7                	mov    edi,eax
c000b54f:	55                   	push   ebp
c000b550:	e8 e9 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b555:	83 c4 0c             	add    esp,0xc
c000b558:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b55c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b560:	55                   	push   ebp
c000b561:	e8 d8 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b566:	83 c4 0c             	add    esp,0xc
c000b569:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b56d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b571:	55                   	push   ebp
c000b572:	e8 c7 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b577:	83 c4 0c             	add    esp,0xc
c000b57a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b57e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b582:	53                   	push   ebx
c000b583:	51                   	push   ecx
c000b584:	55                   	push   ebp
c000b585:	e8 b4 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b58a:	83 c4 0c             	add    esp,0xc
c000b58d:	57                   	push   edi
c000b58e:	56                   	push   esi
c000b58f:	55                   	push   ebp
c000b590:	e8 a9 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b595:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b598:	e8 e5 fe ff ff       	call   c000b482 <GDT::flush()>
c000b59d:	83 c4 4c             	add    esp,0x4c
c000b5a0:	5b                   	pop    ebx
c000b5a1:	5e                   	pop    esi
c000b5a2:	5f                   	pop    edi
c000b5a3:	5d                   	pop    ebp
c000b5a4:	c3                   	ret    

c000b5a5 <idleFunction(void*)>:
c000b5a5:	53                   	push   ebx
c000b5a6:	83 ec 08             	sub    esp,0x8
c000b5a9:	e8 60 c0 00 00       	call   c001760e <unlockScheduler()>
c000b5ae:	e8 8f 86 00 00       	call   c0013c42 <thisCPU()>
c000b5b3:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5ba:	74 41                	je     c000b5fd <idleFunction(void*)+0x58>
c000b5bc:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c000b5c1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5c8:	74 33                	je     c000b5fd <idleFunction(void*)+0x58>
c000b5ca:	31 db                	xor    ebx,ebx
c000b5cc:	52                   	push   edx
c000b5cd:	52                   	push   edx
c000b5ce:	68 e1 00 00 00       	push   0xe1
c000b5d3:	50                   	push   eax
c000b5d4:	e8 ed fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5d9:	53                   	push   ebx
c000b5da:	83 e0 02             	and    eax,0x2
c000b5dd:	50                   	push   eax
c000b5de:	68 e1 00 00 00       	push   0xe1
c000b5e3:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c000b5e9:	e8 04 fc ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5ee:	83 c4 20             	add    esp,0x20
c000b5f1:	e8 5a 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5f6:	e8 95 2d 01 00       	call   c001e390 <idleCommon()>
c000b5fb:	eb f4                	jmp    c000b5f1 <idleFunction(void*)+0x4c>
c000b5fd:	fb                   	sti    
c000b5fe:	f4                   	hlt    
c000b5ff:	e8 8c 2d 01 00       	call   c001e390 <idleCommon()>
c000b604:	eb f7                	jmp    c000b5fd <idleFunction(void*)+0x58>

c000b606 <IDTEntry::IDTEntry(bool)>:
c000b606:	83 ec 04             	sub    esp,0x4
c000b609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b60d:	88 04 24             	mov    BYTE PTR [esp],al
c000b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b614:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b61a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b626:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b629:	83 e2 f0             	and    edx,0xfffffff0
c000b62c:	83 ca 0e             	or     edx,0xe
c000b62f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b636:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b639:	83 e2 ef             	and    edx,0xffffffef
c000b63c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b63f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b643:	74 04                	je     c000b649 <IDTEntry::IDTEntry(bool)+0x43>
c000b645:	b2 03                	mov    dl,0x3
c000b647:	eb 02                	jmp    c000b64b <IDTEntry::IDTEntry(bool)+0x45>
c000b649:	b2 00                	mov    dl,0x0
c000b64b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64f:	83 e2 03             	and    edx,0x3
c000b652:	88 d1                	mov    cl,dl
c000b654:	c1 e1 05             	shl    ecx,0x5
c000b657:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b65a:	83 e2 9f             	and    edx,0xffffff9f
c000b65d:	09 ca                	or     edx,ecx
c000b65f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b666:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b669:	83 ca 80             	or     edx,0xffffff80
c000b66c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b66f:	90                   	nop
c000b670:	83 c4 04             	add    esp,0x4
c000b673:	c3                   	ret    

c000b674 <IDTEntry::setOffset(unsigned int)>:
c000b674:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b67c:	66 89 02             	mov    WORD PTR [edx],ax
c000b67f:	c1 e8 10             	shr    eax,0x10
c000b682:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <IDT::IDT()>:
c000b688:	90                   	nop
c000b689:	c3                   	ret    

c000b68a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b68e:	83 c0 30             	add    eax,0x30
c000b691:	c3                   	ret    

c000b692 <IDT::addEntry(IDTEntry, int)>:
c000b692:	53                   	push   ebx
c000b693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b697:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b69b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b69f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6a6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6aa:	5b                   	pop    ebx
c000b6ab:	c3                   	ret    

c000b6ac <IDT::addEntry(int, void (*)(), bool)>:
c000b6ac:	53                   	push   ebx
c000b6ad:	83 ec 10             	sub    esp,0x10
c000b6b0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6b5:	50                   	push   eax
c000b6b6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6ba:	53                   	push   ebx
c000b6bb:	e8 46 ff ff ff       	call   c000b606 <IDTEntry::IDTEntry(bool)>
c000b6c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6c4:	53                   	push   ebx
c000b6c5:	e8 aa ff ff ff       	call   c000b674 <IDTEntry::setOffset(unsigned int)>
c000b6ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6da:	e8 b3 ff ff ff       	call   c000b692 <IDT::addEntry(IDTEntry, int)>
c000b6df:	83 c4 30             	add    esp,0x30
c000b6e2:	5b                   	pop    ebx
c000b6e3:	c3                   	ret    

c000b6e4 <IDT::flush()>:
c000b6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e8:	66 c7 05 f8 2d 02 c0 ff 07 	mov    WORD PTR ds:0xc0022df8,0x7ff
c000b6f1:	a3 fa 2d 02 c0       	mov    ds:0xc0022dfa,eax
c000b6f6:	0f 01 1d f8 2d 02 c0 	lidtd  ds:0xc0022df8
c000b6fd:	c3                   	ret    

c000b6fe <IDT::setup()>:
c000b6fe:	57                   	push   edi
c000b6ff:	56                   	push   esi
c000b700:	53                   	push   ebx
c000b701:	83 ec 10             	sub    esp,0x10
c000b704:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b708:	6a 00                	push   0x0
c000b70a:	68 53 03 00 c0       	push   0xc0000353
c000b70f:	6a 00                	push   0x0
c000b711:	53                   	push   ebx
c000b712:	e8 95 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b717:	6a 00                	push   0x0
c000b719:	68 63 03 00 c0       	push   0xc0000363
c000b71e:	6a 01                	push   0x1
c000b720:	53                   	push   ebx
c000b721:	e8 86 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b726:	83 c4 20             	add    esp,0x20
c000b729:	6a 00                	push   0x0
c000b72b:	68 6d 03 00 c0       	push   0xc000036d
c000b730:	6a 02                	push   0x2
c000b732:	53                   	push   ebx
c000b733:	e8 74 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b738:	6a 00                	push   0x0
c000b73a:	68 77 03 00 c0       	push   0xc0000377
c000b73f:	6a 03                	push   0x3
c000b741:	53                   	push   ebx
c000b742:	e8 65 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b747:	83 c4 20             	add    esp,0x20
c000b74a:	6a 00                	push   0x0
c000b74c:	68 81 03 00 c0       	push   0xc0000381
c000b751:	6a 04                	push   0x4
c000b753:	53                   	push   ebx
c000b754:	e8 53 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b759:	6a 00                	push   0x0
c000b75b:	68 8b 03 00 c0       	push   0xc000038b
c000b760:	6a 05                	push   0x5
c000b762:	53                   	push   ebx
c000b763:	e8 44 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b768:	83 c4 20             	add    esp,0x20
c000b76b:	6a 00                	push   0x0
c000b76d:	68 95 03 00 c0       	push   0xc0000395
c000b772:	6a 06                	push   0x6
c000b774:	53                   	push   ebx
c000b775:	e8 32 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b77a:	6a 00                	push   0x0
c000b77c:	68 9f 03 00 c0       	push   0xc000039f
c000b781:	6a 07                	push   0x7
c000b783:	53                   	push   ebx
c000b784:	e8 23 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b789:	83 c4 20             	add    esp,0x20
c000b78c:	6a 00                	push   0x0
c000b78e:	68 a9 03 00 c0       	push   0xc00003a9
c000b793:	6a 08                	push   0x8
c000b795:	53                   	push   ebx
c000b796:	e8 11 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b79b:	6a 00                	push   0x0
c000b79d:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a2:	6a 09                	push   0x9
c000b7a4:	53                   	push   ebx
c000b7a5:	e8 02 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7aa:	83 c4 20             	add    esp,0x20
c000b7ad:	6a 00                	push   0x0
c000b7af:	68 bb 03 00 c0       	push   0xc00003bb
c000b7b4:	6a 0a                	push   0xa
c000b7b6:	53                   	push   ebx
c000b7b7:	e8 f0 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7bc:	6a 00                	push   0x0
c000b7be:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c3:	6a 0b                	push   0xb
c000b7c5:	53                   	push   ebx
c000b7c6:	e8 e1 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7cb:	83 c4 20             	add    esp,0x20
c000b7ce:	6a 00                	push   0x0
c000b7d0:	68 cb 03 00 c0       	push   0xc00003cb
c000b7d5:	6a 0c                	push   0xc
c000b7d7:	53                   	push   ebx
c000b7d8:	e8 cf fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7dd:	6a 00                	push   0x0
c000b7df:	68 d3 03 00 c0       	push   0xc00003d3
c000b7e4:	6a 0d                	push   0xd
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 c0 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7ec:	83 c4 20             	add    esp,0x20
c000b7ef:	6a 00                	push   0x0
c000b7f1:	68 db 03 00 c0       	push   0xc00003db
c000b7f6:	6a 0e                	push   0xe
c000b7f8:	53                   	push   ebx
c000b7f9:	e8 ae fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7fe:	6a 00                	push   0x0
c000b800:	68 e3 03 00 c0       	push   0xc00003e3
c000b805:	6a 0f                	push   0xf
c000b807:	53                   	push   ebx
c000b808:	e8 9f fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b80d:	83 c4 20             	add    esp,0x20
c000b810:	6a 00                	push   0x0
c000b812:	68 ed 03 00 c0       	push   0xc00003ed
c000b817:	6a 10                	push   0x10
c000b819:	53                   	push   ebx
c000b81a:	e8 8d fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b81f:	6a 00                	push   0x0
c000b821:	68 f7 03 00 c0       	push   0xc00003f7
c000b826:	6a 11                	push   0x11
c000b828:	53                   	push   ebx
c000b829:	e8 7e fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b82e:	83 c4 20             	add    esp,0x20
c000b831:	6a 00                	push   0x0
c000b833:	68 01 04 00 c0       	push   0xc0000401
c000b838:	6a 12                	push   0x12
c000b83a:	53                   	push   ebx
c000b83b:	e8 6c fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b840:	6a 01                	push   0x1
c000b842:	68 0b 04 00 c0       	push   0xc000040b
c000b847:	6a 60                	push   0x60
c000b849:	53                   	push   ebx
c000b84a:	e8 5d fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b84f:	83 c4 20             	add    esp,0x20
c000b852:	6a 00                	push   0x0
c000b854:	68 15 04 00 c0       	push   0xc0000415
c000b859:	6a 20                	push   0x20
c000b85b:	53                   	push   ebx
c000b85c:	e8 4b fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b861:	6a 00                	push   0x0
c000b863:	68 1f 04 00 c0       	push   0xc000041f
c000b868:	6a 21                	push   0x21
c000b86a:	53                   	push   ebx
c000b86b:	e8 3c fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b870:	83 c4 20             	add    esp,0x20
c000b873:	6a 00                	push   0x0
c000b875:	68 29 04 00 c0       	push   0xc0000429
c000b87a:	6a 22                	push   0x22
c000b87c:	53                   	push   ebx
c000b87d:	e8 2a fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b882:	6a 00                	push   0x0
c000b884:	68 33 04 00 c0       	push   0xc0000433
c000b889:	6a 23                	push   0x23
c000b88b:	53                   	push   ebx
c000b88c:	e8 1b fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b891:	83 c4 20             	add    esp,0x20
c000b894:	6a 00                	push   0x0
c000b896:	68 3d 04 00 c0       	push   0xc000043d
c000b89b:	6a 24                	push   0x24
c000b89d:	53                   	push   ebx
c000b89e:	e8 09 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8a3:	6a 00                	push   0x0
c000b8a5:	68 47 04 00 c0       	push   0xc0000447
c000b8aa:	6a 25                	push   0x25
c000b8ac:	53                   	push   ebx
c000b8ad:	e8 fa fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8b2:	83 c4 20             	add    esp,0x20
c000b8b5:	6a 00                	push   0x0
c000b8b7:	68 51 04 00 c0       	push   0xc0000451
c000b8bc:	6a 26                	push   0x26
c000b8be:	53                   	push   ebx
c000b8bf:	e8 e8 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8c4:	6a 00                	push   0x0
c000b8c6:	68 5b 04 00 c0       	push   0xc000045b
c000b8cb:	6a 27                	push   0x27
c000b8cd:	53                   	push   ebx
c000b8ce:	e8 d9 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8d3:	83 c4 20             	add    esp,0x20
c000b8d6:	6a 00                	push   0x0
c000b8d8:	68 65 04 00 c0       	push   0xc0000465
c000b8dd:	6a 28                	push   0x28
c000b8df:	53                   	push   ebx
c000b8e0:	e8 c7 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8e5:	6a 00                	push   0x0
c000b8e7:	68 6f 04 00 c0       	push   0xc000046f
c000b8ec:	6a 29                	push   0x29
c000b8ee:	53                   	push   ebx
c000b8ef:	e8 b8 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8f4:	83 c4 20             	add    esp,0x20
c000b8f7:	6a 00                	push   0x0
c000b8f9:	68 79 04 00 c0       	push   0xc0000479
c000b8fe:	6a 2a                	push   0x2a
c000b900:	53                   	push   ebx
c000b901:	e8 a6 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b906:	6a 00                	push   0x0
c000b908:	68 83 04 00 c0       	push   0xc0000483
c000b90d:	6a 2b                	push   0x2b
c000b90f:	53                   	push   ebx
c000b910:	e8 97 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b915:	83 c4 20             	add    esp,0x20
c000b918:	6a 00                	push   0x0
c000b91a:	68 8d 04 00 c0       	push   0xc000048d
c000b91f:	6a 2c                	push   0x2c
c000b921:	53                   	push   ebx
c000b922:	e8 85 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b927:	6a 00                	push   0x0
c000b929:	68 97 04 00 c0       	push   0xc0000497
c000b92e:	6a 2d                	push   0x2d
c000b930:	53                   	push   ebx
c000b931:	e8 76 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b936:	83 c4 20             	add    esp,0x20
c000b939:	6a 00                	push   0x0
c000b93b:	68 a1 04 00 c0       	push   0xc00004a1
c000b940:	6a 2e                	push   0x2e
c000b942:	53                   	push   ebx
c000b943:	e8 64 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b948:	6a 00                	push   0x0
c000b94a:	68 ab 04 00 c0       	push   0xc00004ab
c000b94f:	6a 2f                	push   0x2f
c000b951:	53                   	push   ebx
c000b952:	e8 55 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b957:	83 c4 20             	add    esp,0x20
c000b95a:	6a 00                	push   0x0
c000b95c:	68 b5 04 00 c0       	push   0xc00004b5
c000b961:	6a 30                	push   0x30
c000b963:	53                   	push   ebx
c000b964:	e8 43 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b969:	6a 00                	push   0x0
c000b96b:	68 bf 04 00 c0       	push   0xc00004bf
c000b970:	6a 31                	push   0x31
c000b972:	53                   	push   ebx
c000b973:	e8 34 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b978:	83 c4 20             	add    esp,0x20
c000b97b:	6a 00                	push   0x0
c000b97d:	68 c9 04 00 c0       	push   0xc00004c9
c000b982:	6a 32                	push   0x32
c000b984:	53                   	push   ebx
c000b985:	e8 22 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b98a:	6a 00                	push   0x0
c000b98c:	68 d3 04 00 c0       	push   0xc00004d3
c000b991:	6a 33                	push   0x33
c000b993:	53                   	push   ebx
c000b994:	e8 13 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b999:	83 c4 20             	add    esp,0x20
c000b99c:	6a 00                	push   0x0
c000b99e:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a3:	6a 34                	push   0x34
c000b9a5:	53                   	push   ebx
c000b9a6:	e8 01 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9ab:	6a 00                	push   0x0
c000b9ad:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b2:	6a 35                	push   0x35
c000b9b4:	53                   	push   ebx
c000b9b5:	e8 f2 fc ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9ba:	83 c4 20             	add    esp,0x20
c000b9bd:	6a 00                	push   0x0
c000b9bf:	68 f1 04 00 c0       	push   0xc00004f1
c000b9c4:	6a 36                	push   0x36
c000b9c6:	53                   	push   ebx
c000b9c7:	e8 e0 fc ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9cc:	6a 00                	push   0x0
c000b9ce:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d3:	6a 37                	push   0x37
c000b9d5:	53                   	push   ebx
c000b9d6:	e8 d1 fc ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9db:	83 c4 20             	add    esp,0x20
c000b9de:	e8 0c 23 00 00       	call   c000dcef <Virt::getAKernelVAS()>
c000b9e3:	52                   	push   edx
c000b9e4:	6a 03                	push   0x3
c000b9e6:	6a 02                	push   0x2
c000b9e8:	50                   	push   eax
c000b9e9:	e8 a8 28 00 00       	call   c000e296 <VAS::allocatePages(int, int)>
c000b9ee:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9f5:	89 c6                	mov    esi,eax
c000b9f7:	e8 f4 32 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000b9fc:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba02:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba05:	89 c7                	mov    edi,eax
c000ba07:	e8 3a 1c 00 00       	call   c000d646 <TSS::TSS()>
c000ba0c:	83 c4 0c             	add    esp,0xc
c000ba0f:	68 a9 03 00 c0       	push   0xc00003a9
c000ba14:	56                   	push   esi
c000ba15:	57                   	push   edi
c000ba16:	e8 6b 1c 00 00       	call   c000d686 <TSS::setup(unsigned long, unsigned long)>
c000ba1b:	59                   	pop    ecx
c000ba1c:	89 c6                	mov    esi,eax
c000ba1e:	5f                   	pop    edi
c000ba1f:	6a 00                	push   0x0
c000ba21:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba25:	50                   	push   eax
c000ba26:	e8 db fb ff ff       	call   c000b606 <IDTEntry::IDTEntry(bool)>
c000ba2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba2f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba34:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba3b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba45:	80 ce 05             	or     dh,0x5
c000ba48:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba53:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba59:	e8 86 fc ff ff       	call   c000b6e4 <IDT::flush()>
c000ba5e:	83 c4 20             	add    esp,0x20
c000ba61:	5b                   	pop    ebx
c000ba62:	5e                   	pop    esi
c000ba63:	5f                   	pop    edi
c000ba64:	c3                   	ret    

c000ba65 <sbrk>:
c000ba65:	55                   	push   ebp
c000ba66:	57                   	push   edi
c000ba67:	56                   	push   esi
c000ba68:	53                   	push   ebx
c000ba69:	83 ec 1c             	sub    esp,0x1c
c000ba6c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba70:	85 db                	test   ebx,ebx
c000ba72:	74 37                	je     c000baab <sbrk+0x46>
c000ba74:	78 3f                	js     c000bab5 <sbrk+0x50>
c000ba76:	e8 c7 81 00 00       	call   c0013c42 <thisCPU()>
c000ba7b:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba81:	83 e0 01             	and    eax,0x1
c000ba84:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba88:	a1 fc 21 02 c0       	mov    eax,ds:0xc00221fc
c000ba8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba91:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba97:	89 d8                	mov    eax,ebx
c000ba99:	78 35                	js     c000bad0 <sbrk+0x6b>
c000ba9b:	c1 f8 0c             	sar    eax,0xc
c000ba9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baa2:	89 c7                	mov    edi,eax
c000baa4:	be 00 00 00 00       	mov    esi,0x0
c000baa9:	eb 3c                	jmp    c000bae7 <sbrk+0x82>
c000baab:	a1 fc 21 02 c0       	mov    eax,ds:0xc00221fc
c000bab0:	e9 ad 00 00 00       	jmp    c000bb62 <sbrk+0xfd>
c000bab5:	83 ec 08             	sub    esp,0x8
c000bab8:	53                   	push   ebx
c000bab9:	68 38 fd 01 c0       	push   0xc001fd38
c000babe:	e8 1c 33 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000bac3:	83 c4 10             	add    esp,0x10
c000bac6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bacb:	e9 92 00 00 00       	jmp    c000bb62 <sbrk+0xfd>
c000bad0:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bad6:	eb c3                	jmp    c000ba9b <sbrk+0x36>
c000bad8:	81 05 fc 21 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00221fc,0x1000
c000bae2:	46                   	inc    esi
c000bae3:	39 f7                	cmp    edi,esi
c000bae5:	74 34                	je     c000bb1b <sbrk+0xb6>
c000bae7:	e8 03 22 00 00       	call   c000dcef <Virt::getAKernelVAS()>
c000baec:	89 c3                	mov    ebx,eax
c000baee:	8b 2d fc 21 02 c0    	mov    ebp,DWORD PTR ds:0xc00221fc
c000baf4:	e8 c9 06 00 00       	call   c000c1c2 <Phys::allocatePage()>
c000baf9:	68 01 04 00 00       	push   0x401
c000bafe:	55                   	push   ebp
c000baff:	50                   	push   eax
c000bb00:	53                   	push   ebx
c000bb01:	e8 90 26 00 00       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb0e:	74 c8                	je     c000bad8 <sbrk+0x73>
c000bb10:	8b 1d fc 21 02 c0    	mov    ebx,DWORD PTR ds:0xc00221fc
c000bb16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb19:	eb bd                	jmp    c000bad8 <sbrk+0x73>
c000bb1b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb20:	74 48                	je     c000bb6a <sbrk+0x105>
c000bb22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb26:	89 d3                	mov    ebx,edx
c000bb28:	c1 eb 0a             	shr    ebx,0xa
c000bb2b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb31:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb3b:	c1 e0 0c             	shl    eax,0xc
c000bb3e:	01 d0                	add    eax,edx
c000bb40:	c1 e8 0a             	shr    eax,0xa
c000bb43:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb48:	2d 00 00 40 00       	sub    eax,0x400000
c000bb4d:	39 c3                	cmp    ebx,eax
c000bb4f:	77 0d                	ja     c000bb5e <sbrk+0xf9>
c000bb51:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb54:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb5a:	39 d8                	cmp    eax,ebx
c000bb5c:	73 f3                	jae    c000bb51 <sbrk+0xec>
c000bb5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb62:	83 c4 1c             	add    esp,0x1c
c000bb65:	5b                   	pop    ebx
c000bb66:	5e                   	pop    esi
c000bb67:	5f                   	pop    edi
c000bb68:	5d                   	pop    ebp
c000bb69:	c3                   	ret    
c000bb6a:	e8 36 28 01 00       	call   c001e3a5 <CPU::readCR3()>
c000bb6f:	83 ec 0c             	sub    esp,0xc
c000bb72:	50                   	push   eax
c000bb73:	e8 3f 28 01 00       	call   c001e3b7 <CPU::writeCR3(unsigned long)>
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	eb e1                	jmp    c000bb5e <sbrk+0xf9>

c000bb7d <mmap>:
c000bb7d:	83 ec 18             	sub    esp,0x18
c000bb80:	68 68 fd 01 c0       	push   0xc001fd68
c000bb85:	e8 be 8d 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000bb8a:	b8 00 00 00 00       	mov    eax,0x0
c000bb8f:	83 c4 1c             	add    esp,0x1c
c000bb92:	c3                   	ret    

c000bb93 <munmap>:
c000bb93:	83 ec 18             	sub    esp,0x18
c000bb96:	68 6d fd 01 c0       	push   0xc001fd6d
c000bb9b:	e8 a8 8d 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000bba0:	b8 00 00 00 00       	mov    eax,0x0
c000bba5:	83 c4 1c             	add    esp,0x1c
c000bba8:	c3                   	ret    

c000bba9 <liballoc_lock()>:
c000bba9:	83 ec 0c             	sub    esp,0xc
c000bbac:	e8 5b ba 00 00       	call   c001760c <lockScheduler()>
c000bbb1:	b8 00 00 00 00       	mov    eax,0x0
c000bbb6:	83 c4 0c             	add    esp,0xc
c000bbb9:	c3                   	ret    

c000bbba <liballoc_unlock()>:
c000bbba:	83 ec 0c             	sub    esp,0xc
c000bbbd:	e8 4c ba 00 00       	call   c001760e <unlockScheduler()>
c000bbc2:	b8 00 00 00 00       	mov    eax,0x0
c000bbc7:	83 c4 0c             	add    esp,0xc
c000bbca:	c3                   	ret    

c000bbcb <liballoc_alloc(int)>:
c000bbcb:	83 ec 0c             	sub    esp,0xc
c000bbce:	e8 1c 21 00 00       	call   c000dcef <Virt::getAKernelVAS()>
c000bbd3:	83 ec 04             	sub    esp,0x4
c000bbd6:	6a 01                	push   0x1
c000bbd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbdc:	50                   	push   eax
c000bbdd:	e8 b4 26 00 00       	call   c000e296 <VAS::allocatePages(int, int)>
c000bbe2:	83 c4 1c             	add    esp,0x1c
c000bbe5:	c3                   	ret    

c000bbe6 <liballoc_free(void*, int)>:
c000bbe6:	83 ec 0c             	sub    esp,0xc
c000bbe9:	e8 01 21 00 00       	call   c000dcef <Virt::getAKernelVAS()>
c000bbee:	83 ec 08             	sub    esp,0x8
c000bbf1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf5:	50                   	push   eax
c000bbf6:	e8 bd 23 00 00       	call   c000dfb8 <VAS::freeAllocatedPages(unsigned long)>
c000bbfb:	b8 00 00 00 00       	mov    eax,0x0
c000bc00:	83 c4 1c             	add    esp,0x1c
c000bc03:	c3                   	ret    

c000bc04 <realloc>:
c000bc04:	83 ec 14             	sub    esp,0x14
c000bc07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc0f:	e8 6d 57 ff ff       	call   c0001381 <dlrealloc>
c000bc14:	83 c4 1c             	add    esp,0x1c
c000bc17:	c3                   	ret    

c000bc18 <malloc>:
c000bc18:	83 ec 18             	sub    esp,0x18
c000bc1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc1f:	e8 20 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc24:	83 c4 1c             	add    esp,0x1c
c000bc27:	c3                   	ret    

c000bc28 <free>:
c000bc28:	83 ec 18             	sub    esp,0x18
c000bc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2f:	e8 b5 4e ff ff       	call   c0000ae9 <dlfree>
c000bc34:	83 c4 1c             	add    esp,0x1c
c000bc37:	c3                   	ret    

c000bc38 <rfree>:
c000bc38:	83 ec 18             	sub    esp,0x18
c000bc3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3f:	e8 e4 ff ff ff       	call   c000bc28 <free>
c000bc44:	83 c4 1c             	add    esp,0x1c
c000bc47:	c3                   	ret    

c000bc48 <calloc>:
c000bc48:	56                   	push   esi
c000bc49:	53                   	push   ebx
c000bc4a:	83 ec 10             	sub    esp,0x10
c000bc4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc51:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc56:	53                   	push   ebx
c000bc57:	e8 bc ff ff ff       	call   c000bc18 <malloc>
c000bc5c:	89 c6                	mov    esi,eax
c000bc5e:	83 c4 0c             	add    esp,0xc
c000bc61:	53                   	push   ebx
c000bc62:	6a 00                	push   0x0
c000bc64:	50                   	push   eax
c000bc65:	e8 9e 49 ff ff       	call   c0000608 <memset>
c000bc6a:	89 f0                	mov    eax,esi
c000bc6c:	83 c4 14             	add    esp,0x14
c000bc6f:	5b                   	pop    ebx
c000bc70:	5e                   	pop    esi
c000bc71:	c3                   	ret    

c000bc72 <hwTextMode_loadInData(VgaText*)>:
c000bc72:	57                   	push   edi
c000bc73:	56                   	push   esi
c000bc74:	53                   	push   ebx
c000bc75:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc79:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc7f:	85 c0                	test   eax,eax
c000bc81:	7e 30                	jle    c000bcb3 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc83:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc86:	31 f6                	xor    esi,esi
c000bc88:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc8b:	31 c0                	xor    eax,eax
c000bc8d:	c1 e1 05             	shl    ecx,0x5
c000bc90:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc96:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bc9a:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bc9e:	40                   	inc    eax
c000bc9f:	83 f8 50             	cmp    eax,0x50
c000bca2:	75 f2                	jne    c000bc96 <hwTextMode_loadInData(VgaText*)+0x24>
c000bca4:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bcaa:	46                   	inc    esi
c000bcab:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bcb1:	7f d5                	jg     c000bc88 <hwTextMode_loadInData(VgaText*)+0x16>
c000bcb3:	5b                   	pop    ebx
c000bcb4:	5e                   	pop    esi
c000bcb5:	5f                   	pop    edi
c000bcb6:	c3                   	ret    

c000bcb7 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bcb7:	56                   	push   esi
c000bcb8:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcbd:	53                   	push   ebx
c000bcbe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcc6:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bccc:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcd2:	c1 e0 04             	shl    eax,0x4
c000bcd5:	83 e6 0f             	and    esi,0xf
c000bcd8:	0f b6 c0             	movzx  eax,al
c000bcdb:	41                   	inc    ecx
c000bcdc:	09 f0                	or     eax,esi
c000bcde:	83 c2 02             	add    edx,0x2
c000bce1:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bce5:	c1 e0 08             	shl    eax,0x8
c000bce8:	09 f0                	or     eax,esi
c000bcea:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcee:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bcf4:	75 d0                	jne    c000bcc6 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bcf6:	5b                   	pop    ebx
c000bcf7:	5e                   	pop    esi
c000bcf8:	c3                   	ret    

c000bcf9 <hwTextMode_showCursor(VgaText*, bool)>:
c000bcf9:	56                   	push   esi
c000bcfa:	53                   	push   ebx
c000bcfb:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bd00:	74 38                	je     c000bd3a <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bd02:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bd07:	b0 0a                	mov    al,0xa
c000bd09:	89 da                	mov    edx,ebx
c000bd0b:	ee                   	out    dx,al
c000bd0c:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bd11:	89 ca                	mov    edx,ecx
c000bd13:	ec                   	in     al,dx
c000bd14:	b2 0f                	mov    dl,0xf
c000bd16:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd1a:	83 e0 c0             	and    eax,0xffffffc0
c000bd1d:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd23:	09 d0                	or     eax,edx
c000bd25:	89 ca                	mov    edx,ecx
c000bd27:	ee                   	out    dx,al
c000bd28:	b0 0b                	mov    al,0xb
c000bd2a:	89 da                	mov    edx,ebx
c000bd2c:	ee                   	out    dx,al
c000bd2d:	89 ca                	mov    edx,ecx
c000bd2f:	ec                   	in     al,dx
c000bd30:	83 e0 e0             	and    eax,0xffffffe0
c000bd33:	83 c8 0f             	or     eax,0xf
c000bd36:	ee                   	out    dx,al
c000bd37:	5b                   	pop    ebx
c000bd38:	5e                   	pop    esi
c000bd39:	c3                   	ret    
c000bd3a:	b0 0a                	mov    al,0xa
c000bd3c:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd41:	ee                   	out    dx,al
c000bd42:	b0 20                	mov    al,0x20
c000bd44:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd49:	ee                   	out    dx,al
c000bd4a:	5b                   	pop    ebx
c000bd4b:	5e                   	pop    esi
c000bd4c:	c3                   	ret    

c000bd4d <hwTextMode_update(VgaText*)>:
c000bd4d:	c3                   	ret    

c000bd4e <hwTextMode_updateCursor(VgaText*)>:
c000bd4e:	56                   	push   esi
c000bd4f:	b9 19 00 00 00       	mov    ecx,0x19
c000bd54:	53                   	push   ebx
c000bd55:	be d4 03 00 00       	mov    esi,0x3d4
c000bd5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd5e:	89 f2                	mov    edx,esi
c000bd60:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd66:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd6c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd6f:	c1 e1 04             	shl    ecx,0x4
c000bd72:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd78:	b0 0f                	mov    al,0xf
c000bd7a:	ee                   	out    dx,al
c000bd7b:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd80:	88 c8                	mov    al,cl
c000bd82:	89 da                	mov    edx,ebx
c000bd84:	ee                   	out    dx,al
c000bd85:	b0 0e                	mov    al,0xe
c000bd87:	89 f2                	mov    edx,esi
c000bd89:	ee                   	out    dx,al
c000bd8a:	89 c8                	mov    eax,ecx
c000bd8c:	89 da                	mov    edx,ebx
c000bd8e:	66 c1 e8 08          	shr    ax,0x8
c000bd92:	ee                   	out    dx,al
c000bd93:	5b                   	pop    ebx
c000bd94:	5e                   	pop    esi
c000bd95:	c3                   	ret    

c000bd96 <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd96:	ba da 03 00 00       	mov    edx,0x3da
c000bd9b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bda0:	75 18                	jne    c000bdba <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bda2:	ec                   	in     al,dx
c000bda3:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bda8:	b0 30                	mov    al,0x30
c000bdaa:	89 ca                	mov    edx,ecx
c000bdac:	ee                   	out    dx,al
c000bdad:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb2:	ec                   	in     al,dx
c000bdb3:	83 c8 08             	or     eax,0x8
c000bdb6:	89 ca                	mov    edx,ecx
c000bdb8:	ee                   	out    dx,al
c000bdb9:	c3                   	ret    
c000bdba:	ec                   	in     al,dx
c000bdbb:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdc0:	b0 30                	mov    al,0x30
c000bdc2:	89 ca                	mov    edx,ecx
c000bdc4:	ee                   	out    dx,al
c000bdc5:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdca:	ec                   	in     al,dx
c000bdcb:	83 e0 f7             	and    eax,0xfffffff7
c000bdce:	89 ca                	mov    edx,ecx
c000bdd0:	ee                   	out    dx,al
c000bdd1:	c3                   	ret    

c000bdd2 <hwTextMode_scrollScreen(VgaText*)>:
c000bdd2:	55                   	push   ebp
c000bdd3:	bd 02 00 00 00       	mov    ebp,0x2
c000bdd8:	57                   	push   edi
c000bdd9:	56                   	push   esi
c000bdda:	53                   	push   ebx
c000bddb:	83 ec 1c             	sub    esp,0x1c
c000bdde:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bde6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdea:	31 c0                	xor    eax,eax
c000bdec:	eb 0b                	jmp    c000bdf9 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bdee:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bdf4:	74 57                	je     c000be4d <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bdf6:	43                   	inc    ebx
c000bdf7:	89 f0                	mov    eax,esi
c000bdf9:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000bdff:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000be05:	88 13                	mov    BYTE PTR [ebx],dl
c000be07:	8d 70 01             	lea    esi,[eax+0x1]
c000be0a:	83 fd 18             	cmp    ebp,0x18
c000be0d:	75 df                	jne    c000bdee <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000be0f:	a8 01                	test   al,0x1
c000be11:	75 13                	jne    c000be26 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be13:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be16:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be1c:	75 d8                	jne    c000bdf6 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be1e:	83 c4 1c             	add    esp,0x1c
c000be21:	5b                   	pop    ebx
c000be22:	5e                   	pop    esi
c000be23:	5f                   	pop    edi
c000be24:	5d                   	pop    ebp
c000be25:	c3                   	ret    
c000be26:	83 ec 08             	sub    esp,0x8
c000be29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be2d:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be34:	50                   	push   eax
c000be35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be39:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be40:	50                   	push   eax
c000be41:	e8 e0 0a 00 00       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000be46:	83 c4 10             	add    esp,0x10
c000be49:	88 07                	mov    BYTE PTR [edi],al
c000be4b:	eb c9                	jmp    c000be16 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be4d:	45                   	inc    ebp
c000be4e:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be56:	eb 8e                	jmp    c000bde6 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be58 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be58:	56                   	push   esi
c000be59:	53                   	push   ebx
c000be5a:	83 ec 0c             	sub    esp,0xc
c000be5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be61:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be65:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be6a:	50                   	push   eax
c000be6b:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be70:	50                   	push   eax
c000be71:	e8 b0 0a 00 00       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000be76:	5a                   	pop    edx
c000be77:	0f b6 c0             	movzx  eax,al
c000be7a:	59                   	pop    ecx
c000be7b:	50                   	push   eax
c000be7c:	89 f0                	mov    eax,esi
c000be7e:	0f be f0             	movsx  esi,al
c000be81:	56                   	push   esi
c000be82:	e8 45 0b 00 00       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000be87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be8b:	ba 19 00 00 00       	mov    edx,0x19
c000be90:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be96:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be99:	8d 14 92             	lea    edx,[edx+edx*4]
c000be9c:	c1 e1 04             	shl    ecx,0x4
c000be9f:	c1 e2 04             	shl    edx,0x4
c000bea2:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000bea6:	01 ca                	add    edx,ecx
c000bea8:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000beb0:	83 c4 14             	add    esp,0x14
c000beb3:	5b                   	pop    ebx
c000beb4:	5e                   	pop    esi
c000beb5:	c3                   	ret    

c000beb6 <setupTextMode()>:
c000beb6:	c7 05 98 2e 02 c0 96 bd 00 c0 	mov    DWORD PTR ds:0xc0022e98,0xc000bd96
c000bec0:	c7 05 84 2e 02 c0 72 bc 00 c0 	mov    DWORD PTR ds:0xc0022e84,0xc000bc72
c000beca:	c7 05 80 2e 02 c0 b7 bc 00 c0 	mov    DWORD PTR ds:0xc0022e80,0xc000bcb7
c000bed4:	c7 05 8c 2e 02 c0 d2 bd 00 c0 	mov    DWORD PTR ds:0xc0022e8c,0xc000bdd2
c000bede:	c7 05 94 2e 02 c0 f9 bc 00 c0 	mov    DWORD PTR ds:0xc0022e94,0xc000bcf9
c000bee8:	c7 05 88 2e 02 c0 4d bd 00 c0 	mov    DWORD PTR ds:0xc0022e88,0xc000bd4d
c000bef2:	c7 05 90 2e 02 c0 4e bd 00 c0 	mov    DWORD PTR ds:0xc0022e90,0xc000bd4e
c000befc:	c7 05 9c 2e 02 c0 58 be 00 c0 	mov    DWORD PTR ds:0xc0022e9c,0xc000be58
c000bf06:	c3                   	ret    

c000bf07 <kernel_main>:
c000bf07:	57                   	push   edi
c000bf08:	bf f9 03 00 00       	mov    edi,0x3f9
c000bf0d:	56                   	push   esi
c000bf0e:	31 f6                	xor    esi,esi
c000bf10:	53                   	push   ebx
c000bf11:	83 ec 10             	sub    esp,0x10
c000bf14:	e8 67 08 00 00       	call   c000c780 <installVgaTextImplementation()>
c000bf19:	e8 98 ff ff ff       	call   c000beb6 <setupTextMode()>
c000bf1e:	89 f0                	mov    eax,esi
c000bf20:	89 fa                	mov    edx,edi
c000bf22:	ee                   	out    dx,al
c000bf23:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf28:	b0 80                	mov    al,0x80
c000bf2a:	89 da                	mov    edx,ebx
c000bf2c:	ee                   	out    dx,al
c000bf2d:	b1 03                	mov    cl,0x3
c000bf2f:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf34:	88 c8                	mov    al,cl
c000bf36:	ee                   	out    dx,al
c000bf37:	89 f0                	mov    eax,esi
c000bf39:	89 fa                	mov    edx,edi
c000bf3b:	ee                   	out    dx,al
c000bf3c:	88 c8                	mov    al,cl
c000bf3e:	89 da                	mov    edx,ebx
c000bf40:	ee                   	out    dx,al
c000bf41:	b0 c7                	mov    al,0xc7
c000bf43:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf48:	ee                   	out    dx,al
c000bf49:	b0 0b                	mov    al,0xb
c000bf4b:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf50:	ee                   	out    dx,al
c000bf51:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf56:	83 ec 0c             	sub    esp,0xc
c000bf59:	05 ff 0f 00 00       	add    eax,0xfff
c000bf5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf63:	50                   	push   eax
c000bf64:	e8 4d 03 00 00       	call   c000c2b6 <Phys::physicalMemorySetup(unsigned int)>
c000bf69:	e8 02 1d 00 00       	call   c000dc70 <Virt::virtualMemorySetup()>
c000bf6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf7d:	75 0e                	jne    c000bf8d <kernel_main+0x86>
c000bf7f:	89 d8                	mov    eax,ebx
c000bf81:	25 48 03 00 00       	and    eax,0x348
c000bf86:	3d 00 03 00 00       	cmp    eax,0x300
c000bf8b:	74 10                	je     c000bf9d <kernel_main+0x96>
c000bf8d:	83 ec 0c             	sub    esp,0xc
c000bf90:	68 13 11 02 c0       	push   0xc0021113
c000bf95:	e8 ae 89 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000bf9a:	83 c4 10             	add    esp,0x10
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	89 1d 00 2e 02 c0    	mov    DWORD PTR ds:0xc0022e00,ebx
c000bfa6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bfaa:	53                   	push   ebx
c000bfab:	e8 6a 1e 00 00       	call   c000de1a <VAS::VAS()>
c000bfb0:	89 1d bc 2e 02 c0    	mov    DWORD PTR ds:0xc0022ebc,ebx
c000bfb6:	e8 65 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfbb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfc2:	e8 29 2d 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000bfc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfca:	89 c6                	mov    esi,eax
c000bfcc:	e8 d1 ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfd1:	6a 00                	push   0x0
c000bfd3:	89 35 e8 2d 02 c0    	mov    DWORD PTR ds:0xc0022de8,esi
c000bfd9:	6a 00                	push   0x0
c000bfdb:	6a 00                	push   0x0
c000bfdd:	56                   	push   esi
c000bfde:	e8 85 f2 ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000bfe3:	83 c4 14             	add    esp,0x14
c000bfe6:	53                   	push   ebx
c000bfe7:	e8 3e 20 00 00       	call   c000e02a <VAS::~VAS()>
c000bfec:	c7 04 24 74 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd74
c000bff3:	e8 50 89 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000bff8:	83 c4 20             	add    esp,0x20
c000bffb:	5b                   	pop    ebx
c000bffc:	5e                   	pop    esi
c000bffd:	5f                   	pop    edi
c000bffe:	c3                   	ret    

c000bfff <Phys::allocateDMA(unsigned long)>:
c000bfff:	55                   	push   ebp
c000c000:	31 d2                	xor    edx,edx
c000c002:	57                   	push   edi
c000c003:	31 ed                	xor    ebp,ebp
c000c005:	56                   	push   esi
c000c006:	31 c9                	xor    ecx,ecx
c000c008:	53                   	push   ebx
c000c009:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c00d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c013:	31 c0                	xor    eax,eax
c000c015:	c1 ee 0c             	shr    esi,0xc
c000c018:	eb 17                	jmp    c000c031 <Phys::allocateDMA(unsigned long)+0x32>
c000c01a:	85 c9                	test   ecx,ecx
c000c01c:	75 04                	jne    c000c022 <Phys::allocateDMA(unsigned long)+0x23>
c000c01e:	89 d5                	mov    ebp,edx
c000c020:	89 d0                	mov    eax,edx
c000c022:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c025:	39 de                	cmp    esi,ebx
c000c027:	74 20                	je     c000c049 <Phys::allocateDMA(unsigned long)+0x4a>
c000c029:	42                   	inc    edx
c000c02a:	89 d9                	mov    ecx,ebx
c000c02c:	83 fa 2f             	cmp    edx,0x2f
c000c02f:	7f 11                	jg     c000c042 <Phys::allocateDMA(unsigned long)+0x43>
c000c031:	80 ba 40 2e 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdd1c0],0x0
c000c038:	74 e0                	je     c000c01a <Phys::allocateDMA(unsigned long)+0x1b>
c000c03a:	31 c9                	xor    ecx,ecx
c000c03c:	42                   	inc    edx
c000c03d:	83 fa 2f             	cmp    edx,0x2f
c000c040:	7e ef                	jle    c000c031 <Phys::allocateDMA(unsigned long)+0x32>
c000c042:	5b                   	pop    ebx
c000c043:	31 c0                	xor    eax,eax
c000c045:	5e                   	pop    esi
c000c046:	5f                   	pop    edi
c000c047:	5d                   	pop    ebp
c000c048:	c3                   	ret    
c000c049:	8d 14 30             	lea    edx,[eax+esi*1]
c000c04c:	89 d7                	mov    edi,edx
c000c04e:	4f                   	dec    edi
c000c04f:	79 03                	jns    c000c054 <Phys::allocateDMA(unsigned long)+0x55>
c000c051:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c054:	c1 ff 04             	sar    edi,0x4
c000c057:	89 c2                	mov    edx,eax
c000c059:	c1 fa 04             	sar    edx,0x4
c000c05c:	39 fa                	cmp    edx,edi
c000c05e:	75 2f                	jne    c000c08f <Phys::allocateDMA(unsigned long)+0x90>
c000c060:	85 db                	test   ebx,ebx
c000c062:	74 1a                	je     c000c07e <Phys::allocateDMA(unsigned long)+0x7f>
c000c064:	be 40 2e 02 c0       	mov    esi,0xc0022e40
c000c069:	8d 90 40 2e 02 c0    	lea    edx,[eax-0x3ffdd1c0]
c000c06f:	f7 d6                	not    esi
c000c071:	29 c6                	sub    esi,eax
c000c073:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c076:	42                   	inc    edx
c000c077:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c07a:	39 d9                	cmp    ecx,ebx
c000c07c:	7f f5                	jg     c000c073 <Phys::allocateDMA(unsigned long)+0x74>
c000c07e:	85 ff                	test   edi,edi
c000c080:	74 13                	je     c000c095 <Phys::allocateDMA(unsigned long)+0x96>
c000c082:	5b                   	pop    ebx
c000c083:	05 50 20 0c 00       	add    eax,0xc2050
c000c088:	5e                   	pop    esi
c000c089:	c1 e0 0c             	shl    eax,0xc
c000c08c:	5f                   	pop    edi
c000c08d:	5d                   	pop    ebp
c000c08e:	c3                   	ret    
c000c08f:	89 ea                	mov    edx,ebp
c000c091:	31 c9                	xor    ecx,ecx
c000c093:	eb a7                	jmp    c000c03c <Phys::allocateDMA(unsigned long)+0x3d>
c000c095:	5b                   	pop    ebx
c000c096:	c1 e0 0c             	shl    eax,0xc
c000c099:	5e                   	pop    esi
c000c09a:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c09f:	5f                   	pop    edi
c000c0a0:	5d                   	pop    ebp
c000c0a1:	c3                   	ret    

c000c0a2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0aa:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c0b0:	c1 e9 0c             	shr    ecx,0xc
c000c0b3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0b8:	76 25                	jbe    c000c0df <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0ba:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0bf:	c1 e8 0c             	shr    eax,0xc
c000c0c2:	8d 50 10             	lea    edx,[eax+0x10]
c000c0c5:	85 c9                	test   ecx,ecx
c000c0c7:	74 15                	je     c000c0de <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0c9:	8d 82 40 2e 02 c0    	lea    eax,[edx-0x3ffdd1c0]
c000c0cf:	8d 94 11 40 2e 02 c0 	lea    edx,[ecx+edx*1-0x3ffdd1c0]
c000c0d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0d9:	40                   	inc    eax
c000c0da:	39 d0                	cmp    eax,edx
c000c0dc:	75 f8                	jne    c000c0d6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0de:	c3                   	ret    
c000c0df:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0e5:	c1 ea 0c             	shr    edx,0xc
c000c0e8:	eb db                	jmp    c000c0c5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0ea <Phys::setPageState(unsigned long, bool)>:
c000c0ea:	56                   	push   esi
c000c0eb:	ba 01 00 00 00       	mov    edx,0x1
c000c0f0:	53                   	push   ebx
c000c0f1:	8b 35 00 22 02 c0    	mov    esi,DWORD PTR ds:0xc0022200
c000c0f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c0ff:	89 c8                	mov    eax,ecx
c000c101:	83 e1 07             	and    ecx,0x7
c000c104:	c1 e8 03             	shr    eax,0x3
c000c107:	d3 e3                	shl    ebx,cl
c000c109:	01 c6                	add    esi,eax
c000c10b:	d3 e2                	shl    edx,cl
c000c10d:	f7 d2                	not    edx
c000c10f:	20 16                	and    BYTE PTR [esi],dl
c000c111:	03 05 00 22 02 c0    	add    eax,DWORD PTR ds:0xc0022200
c000c117:	08 18                	or     BYTE PTR [eax],bl
c000c119:	5b                   	pop    ebx
c000c11a:	5e                   	pop    esi
c000c11b:	c3                   	ret    

c000c11c <Phys::getPageState(unsigned long)>:
c000c11c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c120:	8b 15 00 22 02 c0    	mov    edx,DWORD PTR ds:0xc0022200
c000c126:	89 c8                	mov    eax,ecx
c000c128:	83 e1 07             	and    ecx,0x7
c000c12b:	c1 e8 03             	shr    eax,0x3
c000c12e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c132:	d3 f8                	sar    eax,cl
c000c134:	83 e0 01             	and    eax,0x1
c000c137:	c3                   	ret    

c000c138 <Phys::freePage(unsigned long)>:
c000c138:	53                   	push   ebx
c000c139:	83 ec 08             	sub    esp,0x8
c000c13c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c140:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c146:	76 57                	jbe    c000c19f <Phys::freePage(unsigned long)+0x67>
c000c148:	c1 eb 0c             	shr    ebx,0xc
c000c14b:	53                   	push   ebx
c000c14c:	e8 cb ff ff ff       	call   c000c11c <Phys::getPageState(unsigned long)>
c000c151:	5a                   	pop    edx
c000c152:	84 c0                	test   al,al
c000c154:	74 5b                	je     c000c1b1 <Phys::freePage(unsigned long)+0x79>
c000c156:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000c15b:	48                   	dec    eax
c000c15c:	a3 2c 2e 02 c0       	mov    ds:0xc0022e2c,eax
c000c161:	8d 04 80             	lea    eax,[eax+eax*4]
c000c164:	8d 04 80             	lea    eax,[eax+eax*4]
c000c167:	c1 e0 02             	shl    eax,0x2
c000c16a:	99                   	cdq    
c000c16b:	f7 3d 30 2e 02 c0    	idiv   DWORD PTR ds:0xc0022e30
c000c171:	39 05 28 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e28,eax
c000c177:	75 13                	jne    c000c18c <Phys::freePage(unsigned long)+0x54>
c000c179:	83 ec 08             	sub    esp,0x8
c000c17c:	6a 00                	push   0x0
c000c17e:	53                   	push   ebx
c000c17f:	e8 66 ff ff ff       	call   c000c0ea <Phys::setPageState(unsigned long, bool)>
c000c184:	83 c4 10             	add    esp,0x10
c000c187:	83 c4 08             	add    esp,0x8
c000c18a:	5b                   	pop    ebx
c000c18b:	c3                   	ret    
c000c18c:	83 ec 0c             	sub    esp,0xc
c000c18f:	a3 28 2e 02 c0       	mov    ds:0xc0022e28,eax
c000c194:	50                   	push   eax
c000c195:	e8 7a 09 00 00       	call   c000cb14 <VgaText::updateRAMUsageDisplay(int)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	eb da                	jmp    c000c179 <Phys::freePage(unsigned long)+0x41>
c000c19f:	68 00 10 00 00       	push   0x1000
c000c1a4:	53                   	push   ebx
c000c1a5:	e8 f8 fe ff ff       	call   c000c0a2 <Phys::freeDMA(unsigned long, unsigned long)>
c000c1aa:	59                   	pop    ecx
c000c1ab:	5b                   	pop    ebx
c000c1ac:	83 c4 08             	add    esp,0x8
c000c1af:	5b                   	pop    ebx
c000c1b0:	c3                   	ret    
c000c1b1:	c7 44 24 10 8f fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd8f
c000c1b9:	83 c4 08             	add    esp,0x8
c000c1bc:	5b                   	pop    ebx
c000c1bd:	e9 86 87 00 00       	jmp    c0014948 <Krnl::panic(char const*)>

c000c1c2 <Phys::allocatePage()>:
c000c1c2:	56                   	push   esi
c000c1c3:	53                   	push   ebx
c000c1c4:	51                   	push   ecx
c000c1c5:	8b 35 20 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e20
c000c1cb:	89 f3                	mov    ebx,esi
c000c1cd:	eb 0a                	jmp    c000c1d9 <Phys::allocatePage()+0x17>
c000c1cf:	89 1d 20 2e 02 c0    	mov    DWORD PTR ds:0xc0022e20,ebx
c000c1d5:	39 de                	cmp    esi,ebx
c000c1d7:	74 24                	je     c000c1fd <Phys::allocatePage()+0x3b>
c000c1d9:	53                   	push   ebx
c000c1da:	e8 3d ff ff ff       	call   c000c11c <Phys::getPageState(unsigned long)>
c000c1df:	5a                   	pop    edx
c000c1e0:	84 c0                	test   al,al
c000c1e2:	74 4e                	je     c000c232 <Phys::allocatePage()+0x70>
c000c1e4:	43                   	inc    ebx
c000c1e5:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1eb:	75 e2                	jne    c000c1cf <Phys::allocatePage()+0xd>
c000c1ed:	31 db                	xor    ebx,ebx
c000c1ef:	c7 05 20 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e20,0x0
c000c1f9:	39 de                	cmp    esi,ebx
c000c1fb:	75 dc                	jne    c000c1d9 <Phys::allocatePage()+0x17>
c000c1fd:	83 ec 0c             	sub    esp,0xc
c000c200:	68 00 10 00 00       	push   0x1000
c000c205:	e8 f5 fd ff ff       	call   c000bfff <Phys::allocateDMA(unsigned long)>
c000c20a:	83 c4 10             	add    esp,0x10
c000c20d:	85 c0                	test   eax,eax
c000c20f:	75 56                	jne    c000c267 <Phys::allocatePage()+0xa5>
c000c211:	83 ec 0c             	sub    esp,0xc
c000c214:	68 a5 fd 01 c0       	push   0xc001fda5
c000c219:	e8 2a 87 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000c21e:	83 c4 10             	add    esp,0x10
c000c221:	8b 1d 20 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e20
c000c227:	53                   	push   ebx
c000c228:	e8 ef fe ff ff       	call   c000c11c <Phys::getPageState(unsigned long)>
c000c22d:	5a                   	pop    edx
c000c22e:	84 c0                	test   al,al
c000c230:	75 b2                	jne    c000c1e4 <Phys::allocatePage()+0x22>
c000c232:	6a 01                	push   0x1
c000c234:	53                   	push   ebx
c000c235:	e8 b0 fe ff ff       	call   c000c0ea <Phys::setPageState(unsigned long, bool)>
c000c23a:	a1 2c 2e 02 c0       	mov    eax,ds:0xc0022e2c
c000c23f:	59                   	pop    ecx
c000c240:	40                   	inc    eax
c000c241:	5b                   	pop    ebx
c000c242:	a3 2c 2e 02 c0       	mov    ds:0xc0022e2c,eax
c000c247:	8d 04 80             	lea    eax,[eax+eax*4]
c000c24a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c24d:	c1 e0 02             	shl    eax,0x2
c000c250:	99                   	cdq    
c000c251:	f7 3d 30 2e 02 c0    	idiv   DWORD PTR ds:0xc0022e30
c000c257:	39 05 28 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e28,eax
c000c25d:	75 0c                	jne    c000c26b <Phys::allocatePage()+0xa9>
c000c25f:	a1 20 2e 02 c0       	mov    eax,ds:0xc0022e20
c000c264:	c1 e0 0c             	shl    eax,0xc
c000c267:	5a                   	pop    edx
c000c268:	5b                   	pop    ebx
c000c269:	5e                   	pop    esi
c000c26a:	c3                   	ret    
c000c26b:	83 ec 0c             	sub    esp,0xc
c000c26e:	a3 28 2e 02 c0       	mov    ds:0xc0022e28,eax
c000c273:	50                   	push   eax
c000c274:	e8 9b 08 00 00       	call   c000cb14 <VgaText::updateRAMUsageDisplay(int)>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	eb e1                	jmp    c000c25f <Phys::allocatePage()+0x9d>

c000c27e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c27e:	56                   	push   esi
c000c27f:	53                   	push   ebx
c000c280:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c284:	39 1d 24 2e 02 c0    	cmp    DWORD PTR ds:0xc0022e24,ebx
c000c28a:	73 06                	jae    c000c292 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c28c:	89 1d 24 2e 02 c0    	mov    DWORD PTR ds:0xc0022e24,ebx
c000c292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c296:	c1 eb 0c             	shr    ebx,0xc
c000c299:	c1 e8 0c             	shr    eax,0xc
c000c29c:	39 d8                	cmp    eax,ebx
c000c29e:	73 13                	jae    c000c2b3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c2a0:	6a 00                	push   0x0
c000c2a2:	8d 70 01             	lea    esi,[eax+0x1]
c000c2a5:	50                   	push   eax
c000c2a6:	e8 3f fe ff ff       	call   c000c0ea <Phys::setPageState(unsigned long, bool)>
c000c2ab:	5a                   	pop    edx
c000c2ac:	89 f0                	mov    eax,esi
c000c2ae:	59                   	pop    ecx
c000c2af:	39 f3                	cmp    ebx,esi
c000c2b1:	75 ed                	jne    c000c2a0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2b3:	5b                   	pop    ebx
c000c2b4:	5e                   	pop    esi
c000c2b5:	c3                   	ret    

c000c2b6 <Phys::physicalMemorySetup(unsigned int)>:
c000c2b6:	55                   	push   ebp
c000c2b7:	57                   	push   edi
c000c2b8:	56                   	push   esi
c000c2b9:	53                   	push   ebx
c000c2ba:	31 db                	xor    ebx,ebx
c000c2bc:	83 ec 30             	sub    esp,0x30
c000c2bf:	6a 30                	push   0x30
c000c2c1:	6a 00                	push   0x0
c000c2c3:	68 40 2e 02 c0       	push   0xc0022e40
c000c2c8:	e8 3b 43 ff ff       	call   c0000608 <memset>
c000c2cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2d6:	05 00 10 00 00       	add    eax,0x1000
c000c2db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 ec 08             	sub    esp,0x8
c000c2e5:	6a 01                	push   0x1
c000c2e7:	53                   	push   ebx
c000c2e8:	43                   	inc    ebx
c000c2e9:	e8 fc fd ff ff       	call   c000c0ea <Phys::setPageState(unsigned long, bool)>
c000c2ee:	83 c4 10             	add    esp,0x10
c000c2f1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2f7:	75 e9                	jne    c000c2e2 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2f9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c300:	66 85 c0             	test   ax,ax
c000c303:	0f 84 28 01 00 00    	je     c000c431 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c309:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c30d:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c313:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c318:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c31e:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c324:	89 f1                	mov    ecx,esi
c000c326:	89 fb                	mov    ebx,edi
c000c328:	01 c1                	add    ecx,eax
c000c32a:	89 d5                	mov    ebp,edx
c000c32c:	11 d3                	adc    ebx,edx
c000c32e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c331:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c335:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c339:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c33f:	09 dd                	or     ebp,ebx
c000c341:	0f 85 fa 00 00 00    	jne    c000c441 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c347:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c34b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c353:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c35b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c35f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c367:	eb 45                	jmp    c000c3ae <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c369:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c36d:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c376:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c37a:	0f 84 c1 00 00 00    	je     c000c441 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c380:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c384:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c387:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c38a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c38d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c390:	89 c1                	mov    ecx,eax
c000c392:	89 d3                	mov    ebx,edx
c000c394:	01 f1                	add    ecx,esi
c000c396:	11 fb                	adc    ebx,edi
c000c398:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c39b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c39f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c3a2:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3a6:	09 d3                	or     ebx,edx
c000c3a8:	0f 85 93 00 00 00    	jne    c000c441 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c3ae:	49                   	dec    ecx
c000c3af:	75 b8                	jne    c000c369 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3b4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3b8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3bc:	39 e9                	cmp    ecx,ebp
c000c3be:	89 d9                	mov    ecx,ebx
c000c3c0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3c4:	72 a3                	jb     c000c369 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3c6:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3cb:	39 f1                	cmp    ecx,esi
c000c3cd:	b9 00 00 00 00       	mov    ecx,0x0
c000c3d2:	19 f9                	sbb    ecx,edi
c000c3d4:	73 93                	jae    c000c369 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3d6:	39 e8                	cmp    eax,ebp
c000c3d8:	89 d1                	mov    ecx,edx
c000c3da:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3de:	73 13                	jae    c000c3f3 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3e0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3e7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3ef:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3f3:	83 ec 08             	sub    esp,0x8
c000c3f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c3fa:	50                   	push   eax
c000c3fb:	e8 7e fe ff ff       	call   c000c27e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c400:	83 c4 0c             	add    esp,0xc
c000c403:	89 fa                	mov    edx,edi
c000c405:	89 f0                	mov    eax,esi
c000c407:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c40b:	03 05 30 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022e30
c000c411:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c418:	a3 30 2e 02 c0       	mov    ds:0xc0022e30,eax
c000c41d:	52                   	push   edx
c000c41e:	50                   	push   eax
c000c41f:	68 c1 fd 01 c0       	push   0xc001fdc1
c000c424:	e8 b6 29 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000c429:	83 c4 10             	add    esp,0x10
c000c42c:	e9 38 ff ff ff       	jmp    c000c369 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c431:	83 ec 0c             	sub    esp,0xc
c000c434:	68 b3 fd 01 c0       	push   0xc001fdb3
c000c439:	e8 0a 85 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000c43e:	83 c4 10             	add    esp,0x10
c000c441:	bb 40 01 00 00       	mov    ebx,0x140
c000c446:	83 ec 08             	sub    esp,0x8
c000c449:	6a 00                	push   0x0
c000c44b:	53                   	push   ebx
c000c44c:	43                   	inc    ebx
c000c44d:	e8 98 fc ff ff       	call   c000c0ea <Phys::setPageState(unsigned long, bool)>
c000c452:	ff 05 30 2e 02 c0    	inc    DWORD PTR ds:0xc0022e30
c000c458:	83 c4 10             	add    esp,0x10
c000c45b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c461:	75 e3                	jne    c000c446 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c463:	83 c4 2c             	add    esp,0x2c
c000c466:	5b                   	pop    ebx
c000c467:	5e                   	pop    esi
c000c468:	5f                   	pop    edi
c000c469:	5d                   	pop    ebp
c000c46a:	c3                   	ret    
c000c46b:	90                   	nop

c000c46c <Pipe::isAtty()>:
c000c46c:	31 c0                	xor    eax,eax
c000c46e:	c3                   	ret    
c000c46f:	90                   	nop

c000c470 <Pipe::~Pipe()>:
c000c470:	83 ec 0c             	sub    esp,0xc
c000c473:	ba 20 fe 01 c0       	mov    edx,0xc001fe20
c000c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47c:	89 10                	mov    DWORD PTR [eax],edx
c000c47e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c482:	83 ec 0c             	sub    esp,0xc
c000c485:	50                   	push   eax
c000c486:	e8 f5 14 00 00       	call   c000d980 <UnixFile::~UnixFile()>
c000c48b:	83 c4 10             	add    esp,0x10
c000c48e:	90                   	nop
c000c48f:	83 c4 0c             	add    esp,0xc
c000c492:	c3                   	ret    
c000c493:	90                   	nop

c000c494 <Pipe::~Pipe()>:
c000c494:	83 ec 0c             	sub    esp,0xc
c000c497:	83 ec 0c             	sub    esp,0xc
c000c49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c49e:	e8 cd ff ff ff       	call   c000c470 <Pipe::~Pipe()>
c000c4a3:	83 c4 10             	add    esp,0x10
c000c4a6:	83 ec 08             	sub    esp,0x8
c000c4a9:	6a 20                	push   0x20
c000c4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4af:	e8 4b 28 00 00       	call   c000ecff <operator delete(void*, unsigned long)>
c000c4b4:	83 c4 10             	add    esp,0x10
c000c4b7:	83 c4 0c             	add    esp,0xc
c000c4ba:	c3                   	ret    
c000c4bb:	90                   	nop

c000c4bc <Pipe::read(unsigned long long, void*, int*)>:
c000c4bc:	55                   	push   ebp
c000c4bd:	57                   	push   edi
c000c4be:	56                   	push   esi
c000c4bf:	53                   	push   ebx
c000c4c0:	83 ec 1c             	sub    esp,0x1c
c000c4c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4cf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4d2:	89 c8                	mov    eax,ecx
c000c4d4:	99                   	cdq    
c000c4d5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4d9:	74 19                	je     c000c4f4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4db:	39 f9                	cmp    ecx,edi
c000c4dd:	89 d1                	mov    ecx,edx
c000c4df:	19 f1                	sbb    ecx,esi
c000c4e1:	73 11                	jae    c000c4f4 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4e3:	e8 24 b1 00 00       	call   c001760c <lockScheduler()>
c000c4e8:	e8 53 b4 00 00       	call   c0017940 <schedule()>
c000c4ed:	e8 1c b1 00 00       	call   c001760e <unlockScheduler()>
c000c4f2:	eb db                	jmp    c000c4cf <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4f4:	39 f8                	cmp    eax,edi
c000c4f6:	89 d1                	mov    ecx,edx
c000c4f8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c4fc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c500:	19 f1                	sbb    ecx,esi
c000c502:	73 08                	jae    c000c50c <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c504:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c508:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c50c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c50f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c512:	29 c6                	sub    esi,eax
c000c514:	89 f1                	mov    ecx,esi
c000c516:	c1 f9 1f             	sar    ecx,0x1f
c000c519:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c51d:	89 ca                	mov    edx,ecx
c000c51f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c523:	19 d1                	sbb    ecx,edx
c000c525:	73 04                	jae    c000c52b <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c527:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c52b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c52f:	89 fd                	mov    ebp,edi
c000c531:	29 f5                	sub    ebp,esi
c000c533:	85 f6                	test   esi,esi
c000c535:	74 12                	je     c000c549 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c537:	52                   	push   edx
c000c538:	56                   	push   esi
c000c539:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c53c:	50                   	push   eax
c000c53d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c541:	e8 8c 40 ff ff       	call   c00005d2 <memcpy>
c000c546:	83 c4 10             	add    esp,0x10
c000c549:	85 ed                	test   ebp,ebp
c000c54b:	74 12                	je     c000c55f <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c54d:	50                   	push   eax
c000c54e:	55                   	push   ebp
c000c54f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c552:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c556:	56                   	push   esi
c000c557:	e8 76 40 ff ff       	call   c00005d2 <memcpy>
c000c55c:	83 c4 10             	add    esp,0x10
c000c55f:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c562:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c565:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c568:	99                   	cdq    
c000c569:	89 f7                	mov    edi,esi
c000c56b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c56f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c573:	c1 ff 1f             	sar    edi,0x1f
c000c576:	57                   	push   edi
c000c577:	56                   	push   esi
c000c578:	52                   	push   edx
c000c579:	50                   	push   eax
c000c57a:	e8 4d 1c 01 00       	call   c001e1cc <__umoddi3>
c000c57f:	83 c4 10             	add    esp,0x10
c000c582:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c585:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c58a:	75 10                	jne    c000c59c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c58c:	83 ec 0c             	sub    esp,0xc
c000c58f:	68 dd fd 01 c0       	push   0xc001fddd
c000c594:	e8 af 83 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000c599:	83 c4 10             	add    esp,0x10
c000c59c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c5a4:	89 10                	mov    DWORD PTR [eax],edx
c000c5a6:	83 c4 1c             	add    esp,0x1c
c000c5a9:	31 c0                	xor    eax,eax
c000c5ab:	5b                   	pop    ebx
c000c5ac:	5e                   	pop    esi
c000c5ad:	5f                   	pop    edi
c000c5ae:	5d                   	pop    ebp
c000c5af:	c3                   	ret    

c000c5b0 <Pipe::write(unsigned long long, void*, int*)>:
c000c5b0:	55                   	push   ebp
c000c5b1:	57                   	push   edi
c000c5b2:	56                   	push   esi
c000c5b3:	53                   	push   ebx
c000c5b4:	83 ec 1c             	sub    esp,0x1c
c000c5b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5c6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5c9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d0:	89 de                	mov    esi,ebx
c000c5d2:	89 df                	mov    edi,ebx
c000c5d4:	c1 ff 1f             	sar    edi,0x1f
c000c5d7:	01 c6                	add    esi,eax
c000c5d9:	89 c8                	mov    eax,ecx
c000c5db:	11 d7                	adc    edi,edx
c000c5dd:	99                   	cdq    
c000c5de:	39 f1                	cmp    ecx,esi
c000c5e0:	89 d0                	mov    eax,edx
c000c5e2:	19 f8                	sbb    eax,edi
c000c5e4:	b8 01 00 00 00       	mov    eax,0x1
c000c5e9:	0f 82 80 00 00 00    	jb     c000c66f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5f2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5f5:	01 d8                	add    eax,ebx
c000c5f7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c5fb:	99                   	cdq    
c000c5fc:	f7 f9                	idiv   ecx
c000c5fe:	29 d1                	sub    ecx,edx
c000c600:	89 d7                	mov    edi,edx
c000c602:	89 c8                	mov    eax,ecx
c000c604:	99                   	cdq    
c000c605:	39 ce                	cmp    esi,ecx
c000c607:	19 d3                	sbb    ebx,edx
c000c609:	bb 00 00 00 00       	mov    ebx,0x0
c000c60e:	72 04                	jb     c000c614 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c610:	89 f3                	mov    ebx,esi
c000c612:	29 cb                	sub    ebx,ecx
c000c614:	89 f1                	mov    ecx,esi
c000c616:	29 d9                	sub    ecx,ebx
c000c618:	74 1a                	je     c000c634 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c61a:	52                   	push   edx
c000c61b:	51                   	push   ecx
c000c61c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c620:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c624:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c627:	57                   	push   edi
c000c628:	e8 a5 3f ff ff       	call   c00005d2 <memcpy>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c634:	85 db                	test   ebx,ebx
c000c636:	74 12                	je     c000c64a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c638:	50                   	push   eax
c000c639:	53                   	push   ebx
c000c63a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c63e:	51                   	push   ecx
c000c63f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c642:	e8 8b 3f ff ff       	call   c00005d2 <memcpy>
c000c647:	83 c4 10             	add    esp,0x10
c000c64a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c64d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c652:	75 10                	jne    c000c664 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c654:	83 ec 0c             	sub    esp,0xc
c000c657:	68 f9 fd 01 c0       	push   0xc001fdf9
c000c65c:	e8 e7 82 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000c661:	83 c4 10             	add    esp,0x10
c000c664:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c668:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c66b:	89 38                	mov    DWORD PTR [eax],edi
c000c66d:	31 c0                	xor    eax,eax
c000c66f:	83 c4 1c             	add    esp,0x1c
c000c672:	5b                   	pop    ebx
c000c673:	5e                   	pop    esi
c000c674:	5f                   	pop    edi
c000c675:	5d                   	pop    ebp
c000c676:	c3                   	ret    
c000c677:	90                   	nop

c000c678 <Pipe::Pipe(int)>:
c000c678:	83 ec 0c             	sub    esp,0xc
c000c67b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c67f:	83 ec 08             	sub    esp,0x8
c000c682:	6a 00                	push   0x0
c000c684:	50                   	push   eax
c000c685:	e8 92 12 00 00       	call   c000d91c <UnixFile::UnixFile(int)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	ba 20 fe 01 c0       	mov    edx,0xc001fe20
c000c692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c696:	89 10                	mov    DWORD PTR [eax],edx
c000c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c69c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6b2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6bd:	83 ec 0c             	sub    esp,0xc
c000c6c0:	50                   	push   eax
c000c6c1:	e8 52 f5 ff ff       	call   c000bc18 <malloc>
c000c6c6:	83 c4 10             	add    esp,0x10
c000c6c9:	89 c2                	mov    edx,eax
c000c6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6d6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6da:	90                   	nop
c000c6db:	83 c4 0c             	add    esp,0xc
c000c6de:	c3                   	ret    
c000c6df:	90                   	nop

c000c6e0 <VgaText::isAtty()>:
c000c6e0:	b0 01                	mov    al,0x1
c000c6e2:	c3                   	ret    
c000c6e3:	90                   	nop

c000c6e4 <VgaText::~VgaText()>:
c000c6e4:	83 ec 0c             	sub    esp,0xc
c000c6e7:	ba dc fe 01 c0       	mov    edx,0xc001fedc
c000c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f0:	89 10                	mov    DWORD PTR [eax],edx
c000c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6f6:	83 ec 0c             	sub    esp,0xc
c000c6f9:	50                   	push   eax
c000c6fa:	e8 81 12 00 00       	call   c000d980 <UnixFile::~UnixFile()>
c000c6ff:	83 c4 10             	add    esp,0x10
c000c702:	90                   	nop
c000c703:	83 c4 0c             	add    esp,0xc
c000c706:	c3                   	ret    
c000c707:	90                   	nop

c000c708 <VgaText::~VgaText()>:
c000c708:	83 ec 0c             	sub    esp,0xc
c000c70b:	83 ec 0c             	sub    esp,0xc
c000c70e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c712:	e8 cd ff ff ff       	call   c000c6e4 <VgaText::~VgaText()>
c000c717:	83 c4 10             	add    esp,0x10
c000c71a:	83 ec 08             	sub    esp,0x8
c000c71d:	68 60 12 00 00       	push   0x1260
c000c722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c726:	e8 d4 25 00 00       	call   c000ecff <operator delete(void*, unsigned long)>
c000c72b:	83 c4 10             	add    esp,0x10
c000c72e:	83 c4 0c             	add    esp,0xc
c000c731:	c3                   	ret    

c000c732 <VgaText::read(unsigned long long, void*, int*)>:
c000c732:	83 ec 10             	sub    esp,0x10
c000c735:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c741:	e8 28 51 00 00       	call   c001186e <readKeyboard(VgaText*, char*, unsigned long)>
c000c746:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c74a:	89 02                	mov    DWORD PTR [edx],eax
c000c74c:	31 c0                	xor    eax,eax
c000c74e:	83 c4 1c             	add    esp,0x1c
c000c751:	c3                   	ret    

c000c752 <setTerminalScrollLock(bool)>:
c000c752:	c3                   	ret    

c000c753 <addToTerminalCycle(VgaText*)>:
c000c753:	8b 15 a0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ea0
c000c759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c75d:	85 d2                	test   edx,edx
c000c75f:	75 0c                	jne    c000c76d <addToTerminalCycle(VgaText*)+0x1a>
c000c761:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c767:	a3 a0 2e 02 c0       	mov    ds:0xc0022ea0,eax
c000c76c:	c3                   	ret    
c000c76d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c773:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c779:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c77f:	c3                   	ret    

c000c780 <installVgaTextImplementation()>:
c000c780:	83 ec 10             	sub    esp,0x10
c000c783:	6a 20                	push   0x20
c000c785:	6a 00                	push   0x0
c000c787:	68 80 2e 02 c0       	push   0xc0022e80
c000c78c:	e8 77 3e ff ff       	call   c0000608 <memset>
c000c791:	83 c4 1c             	add    esp,0x1c
c000c794:	c3                   	ret    

c000c795 <scrollTerminalScrollLock(int)>:
c000c795:	c3                   	ret    

c000c796 <VgaText::load()>:
c000c796:	53                   	push   ebx
c000c797:	31 c0                	xor    eax,eax
c000c799:	83 ec 58             	sub    esp,0x58
c000c79c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c7a0:	89 e2                	mov    edx,esp
c000c7a2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c7a6:	40                   	inc    eax
c000c7a7:	83 f8 50             	cmp    eax,0x50
c000c7aa:	75 f6                	jne    c000c7a2 <VgaText::load()+0xc>
c000c7ac:	31 c0                	xor    eax,eax
c000c7ae:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7b5:	84 c9                	test   cl,cl
c000c7b7:	74 06                	je     c000c7bf <VgaText::load()+0x29>
c000c7b9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7bc:	40                   	inc    eax
c000c7bd:	eb ef                	jmp    c000c7ae <VgaText::load()+0x18>
c000c7bf:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7c5:	85 c0                	test   eax,eax
c000c7c7:	74 09                	je     c000c7d2 <VgaText::load()+0x3c>
c000c7c9:	51                   	push   ecx
c000c7ca:	51                   	push   ecx
c000c7cb:	52                   	push   edx
c000c7cc:	53                   	push   ebx
c000c7cd:	ff d0                	call   eax
c000c7cf:	83 c4 10             	add    esp,0x10
c000c7d2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7d8:	85 c0                	test   eax,eax
c000c7da:	74 09                	je     c000c7e5 <VgaText::load()+0x4f>
c000c7dc:	83 ec 0c             	sub    esp,0xc
c000c7df:	53                   	push   ebx
c000c7e0:	ff d0                	call   eax
c000c7e2:	83 c4 10             	add    esp,0x10
c000c7e5:	83 c4 58             	add    esp,0x58
c000c7e8:	5b                   	pop    ebx
c000c7e9:	c3                   	ret    

c000c7ea <VgaText::updateCursor()>:
c000c7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7ee:	39 05 a4 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ea4,eax
c000c7f4:	75 0c                	jne    c000c802 <VgaText::updateCursor()+0x18>
c000c7f6:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c7fc:	85 c0                	test   eax,eax
c000c7fe:	74 02                	je     c000c802 <VgaText::updateCursor()+0x18>
c000c800:	ff e0                	jmp    eax
c000c802:	c3                   	ret    
c000c803:	90                   	nop

c000c804 <VgaText::showCursor(bool)>:
c000c804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c808:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c80c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c812:	c3                   	ret    
c000c813:	90                   	nop

c000c814 <VgaText::disableBlink(bool)>:
c000c814:	56                   	push   esi
c000c815:	53                   	push   ebx
c000c816:	51                   	push   ecx
c000c817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c81b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c81f:	39 1d a4 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ea4,ebx
c000c825:	75 18                	jne    c000c83f <VgaText::disableBlink(bool)+0x2b>
c000c827:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c82d:	85 c0                	test   eax,eax
c000c82f:	74 0e                	je     c000c83f <VgaText::disableBlink(bool)+0x2b>
c000c831:	89 f1                	mov    ecx,esi
c000c833:	52                   	push   edx
c000c834:	52                   	push   edx
c000c835:	0f b6 d1             	movzx  edx,cl
c000c838:	52                   	push   edx
c000c839:	53                   	push   ebx
c000c83a:	ff d0                	call   eax
c000c83c:	83 c4 10             	add    esp,0x10
c000c83f:	89 f0                	mov    eax,esi
c000c841:	83 f0 01             	xor    eax,0x1
c000c844:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c84a:	58                   	pop    eax
c000c84b:	5b                   	pop    ebx
c000c84c:	5e                   	pop    esi
c000c84d:	c3                   	ret    

c000c84e <VgaText::doANSI_SGR(int)>:
c000c84e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c856:	85 d2                	test   edx,edx
c000c858:	75 14                	jne    c000c86e <VgaText::doANSI_SGR(int)+0x20>
c000c85a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c860:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c866:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c86c:	eb 65                	jmp    c000c8d3 <VgaText::doANSI_SGR(int)+0x85>
c000c86e:	83 fa 07             	cmp    edx,0x7
c000c871:	75 14                	jne    c000c887 <VgaText::doANSI_SGR(int)+0x39>
c000c873:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c879:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c87f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c885:	eb 4c                	jmp    c000c8d3 <VgaText::doANSI_SGR(int)+0x85>
c000c887:	83 fa 1b             	cmp    edx,0x1b
c000c88a:	74 ce                	je     c000c85a <VgaText::doANSI_SGR(int)+0xc>
c000c88c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c88f:	83 f9 07             	cmp    ecx,0x7
c000c892:	77 09                	ja     c000c89d <VgaText::doANSI_SGR(int)+0x4f>
c000c894:	8b 14 8d 40 22 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdddc0]
c000c89b:	eb 20                	jmp    c000c8bd <VgaText::doANSI_SGR(int)+0x6f>
c000c89d:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c8a0:	83 f9 07             	cmp    ecx,0x7
c000c8a3:	77 09                	ja     c000c8ae <VgaText::doANSI_SGR(int)+0x60>
c000c8a5:	8b 14 8d 40 22 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdddc0]
c000c8ac:	eb 25                	jmp    c000c8d3 <VgaText::doANSI_SGR(int)+0x85>
c000c8ae:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c8b1:	83 f9 07             	cmp    ecx,0x7
c000c8b4:	77 0e                	ja     c000c8c4 <VgaText::doANSI_SGR(int)+0x76>
c000c8b6:	8b 14 95 f8 20 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf08]
c000c8bd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8c3:	c3                   	ret    
c000c8c4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8c7:	83 f9 07             	cmp    ecx,0x7
c000c8ca:	77 0d                	ja     c000c8d9 <VgaText::doANSI_SGR(int)+0x8b>
c000c8cc:	8b 14 95 d0 20 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffddf30]
c000c8d3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8d9:	c3                   	ret    

c000c8da <VgaText::setDefaultBgColour(VgaColour)>:
c000c8da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e2:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8e8:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8ee:	c3                   	ret    
c000c8ef:	90                   	nop

c000c8f0 <VgaText::setDefaultFgColour(VgaColour)>:
c000c8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8f8:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c8fe:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c904:	c3                   	ret    
c000c905:	90                   	nop

c000c906 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c906:	53                   	push   ebx
c000c907:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c90b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c90f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c913:	51                   	push   ecx
c000c914:	e8 c1 ff ff ff       	call   c000c8da <VgaText::setDefaultBgColour(VgaColour)>
c000c919:	58                   	pop    eax
c000c91a:	5a                   	pop    edx
c000c91b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c91f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c923:	5b                   	pop    ebx
c000c924:	eb ca                	jmp    c000c8f0 <VgaText::setDefaultFgColour(VgaColour)>

c000c926 <VgaText::combineColours(unsigned char, unsigned char)>:
c000c926:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c92a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c92f:	83 e0 0f             	and    eax,0xf
c000c932:	c1 e2 04             	shl    edx,0x4
c000c935:	09 d0                	or     eax,edx
c000c937:	c3                   	ret    

c000c938 <VgaText::scrollScreen()>:
c000c938:	57                   	push   edi
c000c939:	56                   	push   esi
c000c93a:	be 01 00 00 00       	mov    esi,0x1
c000c93f:	53                   	push   ebx
c000c940:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c944:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c94a:	31 ff                	xor    edi,edi
c000c94c:	01 d9                	add    ecx,ebx
c000c94e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c951:	83 fe 17             	cmp    esi,0x17
c000c954:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c95a:	75 28                	jne    c000c984 <VgaText::scrollScreen()+0x4c>
c000c95c:	f7 c7 01 00 00 00    	test   edi,0x1
c000c962:	74 1c                	je     c000c980 <VgaText::scrollScreen()+0x48>
c000c964:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c96b:	50                   	push   eax
c000c96c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c973:	50                   	push   eax
c000c974:	e8 ad ff ff ff       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000c979:	5a                   	pop    edx
c000c97a:	5a                   	pop    edx
c000c97b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c97e:	eb 04                	jmp    c000c984 <VgaText::scrollScreen()+0x4c>
c000c980:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c984:	47                   	inc    edi
c000c985:	41                   	inc    ecx
c000c986:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c98c:	75 c0                	jne    c000c94e <VgaText::scrollScreen()+0x16>
c000c98e:	46                   	inc    esi
c000c98f:	83 fe 18             	cmp    esi,0x18
c000c992:	75 b0                	jne    c000c944 <VgaText::scrollScreen()+0xc>
c000c994:	39 1d a4 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ea4,ebx
c000c99a:	75 24                	jne    c000c9c0 <VgaText::scrollScreen()+0x88>
c000c99c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c9a3:	74 08                	je     c000c9ad <VgaText::scrollScreen()+0x75>
c000c9a5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c9ab:	eb 13                	jmp    c000c9c0 <VgaText::scrollScreen()+0x88>
c000c9ad:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9b3:	85 c0                	test   eax,eax
c000c9b5:	74 09                	je     c000c9c0 <VgaText::scrollScreen()+0x88>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	53                   	push   ebx
c000c9bb:	ff d0                	call   eax
c000c9bd:	83 c4 10             	add    esp,0x10
c000c9c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9c4:	5b                   	pop    ebx
c000c9c5:	5e                   	pop    esi
c000c9c6:	5f                   	pop    edi
c000c9c7:	e9 1e fe ff ff       	jmp    c000c7ea <VgaText::updateCursor()>

c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9d1:	c1 e0 08             	shl    eax,0x8
c000c9d4:	89 c2                	mov    edx,eax
c000c9d6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9db:	09 d0                	or     eax,edx
c000c9dd:	c3                   	ret    

c000c9de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9de:	53                   	push   ebx
c000c9df:	83 ec 08             	sub    esp,0x8
c000c9e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9e6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9eb:	50                   	push   eax
c000c9ec:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9f1:	50                   	push   eax
c000c9f2:	e8 2f ff ff ff       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000c9f7:	5a                   	pop    edx
c000c9f8:	0f b6 c0             	movzx  eax,al
c000c9fb:	5b                   	pop    ebx
c000c9fc:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ca01:	50                   	push   eax
c000ca02:	53                   	push   ebx
c000ca03:	e8 c4 ff ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000ca08:	5a                   	pop    edx
c000ca09:	5a                   	pop    edx
c000ca0a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ca10:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca14:	0f b7 d2             	movzx  edx,dx
c000ca17:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca1c:	39 0d a4 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ea4,ecx
c000ca22:	75 14                	jne    c000ca38 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca24:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca2a:	85 c0                	test   eax,eax
c000ca2c:	74 0a                	je     c000ca38 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca2e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca32:	83 c4 08             	add    esp,0x8
c000ca35:	5b                   	pop    ebx
c000ca36:	ff e0                	jmp    eax
c000ca38:	83 c4 08             	add    esp,0x8
c000ca3b:	5b                   	pop    ebx
c000ca3c:	c3                   	ret    
c000ca3d:	90                   	nop

c000ca3e <VgaText::getCursorX()>:
c000ca3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca42:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca48:	c3                   	ret    
c000ca49:	90                   	nop

c000ca4a <VgaText::getCursorY()>:
c000ca4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca4e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca54:	c3                   	ret    
c000ca55:	90                   	nop

c000ca56 <VgaText::setCursor(int, int)>:
c000ca56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca5e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca68:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca6e:	e9 77 fd ff ff       	jmp    c000c7ea <VgaText::updateCursor()>
c000ca73:	90                   	nop

c000ca74 <VgaText::setCursorX(int)>:
c000ca74:	83 ec 10             	sub    esp,0x10
c000ca77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca7b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca85:	50                   	push   eax
c000ca86:	e8 cb ff ff ff       	call   c000ca56 <VgaText::setCursor(int, int)>
c000ca8b:	83 c4 1c             	add    esp,0x1c
c000ca8e:	c3                   	ret    
c000ca8f:	90                   	nop

c000ca90 <VgaText::setCursorY(int)>:
c000ca90:	83 ec 10             	sub    esp,0x10
c000ca93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca9b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000caa1:	50                   	push   eax
c000caa2:	e8 af ff ff ff       	call   c000ca56 <VgaText::setCursor(int, int)>
c000caa7:	83 c4 1c             	add    esp,0x1c
c000caaa:	c3                   	ret    
c000caab:	90                   	nop

c000caac <VgaText::incrementCursor(bool)>:
c000caac:	56                   	push   esi
c000caad:	53                   	push   ebx
c000caae:	51                   	push   ecx
c000caaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cab7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cabd:	40                   	inc    eax
c000cabe:	83 f8 50             	cmp    eax,0x50
c000cac1:	74 08                	je     c000cacb <VgaText::incrementCursor(bool)+0x1f>
c000cac3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cac9:	eb 33                	jmp    c000cafe <VgaText::incrementCursor(bool)+0x52>
c000cacb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cad1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cadb:	8d 50 01             	lea    edx,[eax+0x1]
c000cade:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cae4:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000caea:	75 12                	jne    c000cafe <VgaText::incrementCursor(bool)+0x52>
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000caf5:	53                   	push   ebx
c000caf6:	e8 3d fe ff ff       	call   c000c938 <VgaText::scrollScreen()>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	89 f0                	mov    eax,esi
c000cb00:	84 c0                	test   al,al
c000cb02:	74 0c                	je     c000cb10 <VgaText::incrementCursor(bool)+0x64>
c000cb04:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cb08:	5a                   	pop    edx
c000cb09:	5b                   	pop    ebx
c000cb0a:	5e                   	pop    esi
c000cb0b:	e9 da fc ff ff       	jmp    c000c7ea <VgaText::updateCursor()>
c000cb10:	58                   	pop    eax
c000cb11:	5b                   	pop    ebx
c000cb12:	5e                   	pop    esi
c000cb13:	c3                   	ret    

c000cb14 <VgaText::updateRAMUsageDisplay(int)>:
c000cb14:	53                   	push   ebx
c000cb15:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb1a:	6a 0f                	push   0xf
c000cb1c:	6a 00                	push   0x0
c000cb1e:	e8 03 fe ff ff       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000cb23:	5a                   	pop    edx
c000cb24:	59                   	pop    ecx
c000cb25:	0f b6 c8             	movzx  ecx,al
c000cb28:	51                   	push   ecx
c000cb29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb2d:	99                   	cdq    
c000cb2e:	f7 fb                	idiv   ebx
c000cb30:	89 d3                	mov    ebx,edx
c000cb32:	83 c0 30             	add    eax,0x30
c000cb35:	83 c3 30             	add    ebx,0x30
c000cb38:	0f be c0             	movsx  eax,al
c000cb3b:	0f b6 db             	movzx  ebx,bl
c000cb3e:	50                   	push   eax
c000cb3f:	e8 88 fe ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cb44:	5a                   	pop    edx
c000cb45:	5a                   	pop    edx
c000cb46:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb4c:	51                   	push   ecx
c000cb4d:	53                   	push   ebx
c000cb4e:	e8 79 fe ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cb53:	5b                   	pop    ebx
c000cb54:	5a                   	pop    edx
c000cb55:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb5b:	51                   	push   ecx
c000cb5c:	6a 25                	push   0x25
c000cb5e:	e8 69 fe ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cb63:	59                   	pop    ecx
c000cb64:	5b                   	pop    ebx
c000cb65:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb6b:	5b                   	pop    ebx
c000cb6c:	c3                   	ret    
c000cb6d:	90                   	nop

c000cb6e <VgaText::updateDiskUsage()>:
c000cb6e:	55                   	push   ebp
c000cb6f:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb74:	57                   	push   edi
c000cb75:	56                   	push   esi
c000cb76:	53                   	push   ebx
c000cb77:	6a 0f                	push   0xf
c000cb79:	6a 00                	push   0x0
c000cb7b:	e8 a6 fd ff ff       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000cb80:	5a                   	pop    edx
c000cb81:	0f b6 d8             	movzx  ebx,al
c000cb84:	59                   	pop    ecx
c000cb85:	a1 04 4b 02 c0       	mov    eax,ds:0xc0024b04
c000cb8a:	53                   	push   ebx
c000cb8b:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb90:	99                   	cdq    
c000cb91:	f7 fd                	idiv   ebp
c000cb93:	99                   	cdq    
c000cb94:	f7 f9                	idiv   ecx
c000cb96:	8d 42 30             	lea    eax,[edx+0x30]
c000cb99:	0f b6 c0             	movzx  eax,al
c000cb9c:	50                   	push   eax
c000cb9d:	e8 2a fe ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cba2:	5e                   	pop    esi
c000cba3:	5f                   	pop    edi
c000cba4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cbaa:	bf e8 03 00 00       	mov    edi,0x3e8
c000cbaf:	53                   	push   ebx
c000cbb0:	a1 04 4b 02 c0       	mov    eax,ds:0xc0024b04
c000cbb5:	99                   	cdq    
c000cbb6:	f7 ff                	idiv   edi
c000cbb8:	99                   	cdq    
c000cbb9:	f7 f9                	idiv   ecx
c000cbbb:	8d 42 30             	lea    eax,[edx+0x30]
c000cbbe:	0f b6 c0             	movzx  eax,al
c000cbc1:	50                   	push   eax
c000cbc2:	e8 05 fe ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cbc7:	5a                   	pop    edx
c000cbc8:	5e                   	pop    esi
c000cbc9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbcf:	be 64 00 00 00       	mov    esi,0x64
c000cbd4:	53                   	push   ebx
c000cbd5:	a1 04 4b 02 c0       	mov    eax,ds:0xc0024b04
c000cbda:	99                   	cdq    
c000cbdb:	f7 fe                	idiv   esi
c000cbdd:	99                   	cdq    
c000cbde:	f7 f9                	idiv   ecx
c000cbe0:	8d 42 30             	lea    eax,[edx+0x30]
c000cbe3:	0f b6 c0             	movzx  eax,al
c000cbe6:	50                   	push   eax
c000cbe7:	e8 e0 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cbec:	5a                   	pop    edx
c000cbed:	5a                   	pop    edx
c000cbee:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbf4:	53                   	push   ebx
c000cbf5:	a1 04 4b 02 c0       	mov    eax,ds:0xc0024b04
c000cbfa:	99                   	cdq    
c000cbfb:	f7 f9                	idiv   ecx
c000cbfd:	99                   	cdq    
c000cbfe:	f7 f9                	idiv   ecx
c000cc00:	8d 42 30             	lea    eax,[edx+0x30]
c000cc03:	0f b6 c0             	movzx  eax,al
c000cc06:	50                   	push   eax
c000cc07:	e8 c0 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cc0c:	5a                   	pop    edx
c000cc0d:	5a                   	pop    edx
c000cc0e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc14:	53                   	push   ebx
c000cc15:	a1 04 4b 02 c0       	mov    eax,ds:0xc0024b04
c000cc1a:	99                   	cdq    
c000cc1b:	f7 f9                	idiv   ecx
c000cc1d:	8d 42 30             	lea    eax,[edx+0x30]
c000cc20:	0f b6 c0             	movzx  eax,al
c000cc23:	50                   	push   eax
c000cc24:	e8 a3 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cc29:	5a                   	pop    edx
c000cc2a:	5a                   	pop    edx
c000cc2b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc31:	53                   	push   ebx
c000cc32:	a1 00 4b 02 c0       	mov    eax,ds:0xc0024b00
c000cc37:	99                   	cdq    
c000cc38:	f7 fd                	idiv   ebp
c000cc3a:	99                   	cdq    
c000cc3b:	f7 f9                	idiv   ecx
c000cc3d:	8d 42 30             	lea    eax,[edx+0x30]
c000cc40:	0f b6 c0             	movzx  eax,al
c000cc43:	50                   	push   eax
c000cc44:	e8 83 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cc49:	5d                   	pop    ebp
c000cc4a:	5a                   	pop    edx
c000cc4b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc51:	53                   	push   ebx
c000cc52:	a1 00 4b 02 c0       	mov    eax,ds:0xc0024b00
c000cc57:	99                   	cdq    
c000cc58:	f7 ff                	idiv   edi
c000cc5a:	99                   	cdq    
c000cc5b:	f7 f9                	idiv   ecx
c000cc5d:	8d 42 30             	lea    eax,[edx+0x30]
c000cc60:	0f b6 c0             	movzx  eax,al
c000cc63:	50                   	push   eax
c000cc64:	e8 63 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cc69:	5f                   	pop    edi
c000cc6a:	5d                   	pop    ebp
c000cc6b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc71:	53                   	push   ebx
c000cc72:	a1 00 4b 02 c0       	mov    eax,ds:0xc0024b00
c000cc77:	99                   	cdq    
c000cc78:	f7 fe                	idiv   esi
c000cc7a:	99                   	cdq    
c000cc7b:	f7 f9                	idiv   ecx
c000cc7d:	8d 42 30             	lea    eax,[edx+0x30]
c000cc80:	0f b6 c0             	movzx  eax,al
c000cc83:	50                   	push   eax
c000cc84:	e8 43 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cc89:	5a                   	pop    edx
c000cc8a:	5e                   	pop    esi
c000cc8b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc91:	53                   	push   ebx
c000cc92:	a1 00 4b 02 c0       	mov    eax,ds:0xc0024b00
c000cc97:	99                   	cdq    
c000cc98:	f7 f9                	idiv   ecx
c000cc9a:	99                   	cdq    
c000cc9b:	f7 f9                	idiv   ecx
c000cc9d:	8d 42 30             	lea    eax,[edx+0x30]
c000cca0:	0f b6 c0             	movzx  eax,al
c000cca3:	50                   	push   eax
c000cca4:	e8 23 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000cca9:	5f                   	pop    edi
c000ccaa:	5d                   	pop    ebp
c000ccab:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000ccb1:	53                   	push   ebx
c000ccb2:	a1 00 4b 02 c0       	mov    eax,ds:0xc0024b00
c000ccb7:	99                   	cdq    
c000ccb8:	f7 f9                	idiv   ecx
c000ccba:	83 c2 30             	add    edx,0x30
c000ccbd:	0f b6 d2             	movzx  edx,dl
c000ccc0:	52                   	push   edx
c000ccc1:	e8 06 fd ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000ccc6:	5a                   	pop    edx
c000ccc7:	59                   	pop    ecx
c000ccc8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccce:	5b                   	pop    ebx
c000cccf:	5e                   	pop    esi
c000ccd0:	5f                   	pop    edi
c000ccd1:	5d                   	pop    ebp
c000ccd2:	c3                   	ret    
c000ccd3:	90                   	nop

c000ccd4 <VgaText::updateTitle()>:
c000ccd4:	53                   	push   ebx
c000ccd5:	31 c0                	xor    eax,eax
c000ccd7:	83 ec 58             	sub    esp,0x58
c000ccda:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000ccde:	89 e1                	mov    ecx,esp
c000cce0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000cce4:	40                   	inc    eax
c000cce5:	83 f8 50             	cmp    eax,0x50
c000cce8:	75 f6                	jne    c000cce0 <VgaText::updateTitle()+0xc>
c000ccea:	31 c0                	xor    eax,eax
c000ccec:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000ccf3:	84 db                	test   bl,bl
c000ccf5:	74 06                	je     c000ccfd <VgaText::updateTitle()+0x29>
c000ccf7:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000ccfa:	40                   	inc    eax
c000ccfb:	eb ef                	jmp    c000ccec <VgaText::updateTitle()+0x18>
c000ccfd:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000cd03:	85 c0                	test   eax,eax
c000cd05:	74 09                	je     c000cd10 <VgaText::updateTitle()+0x3c>
c000cd07:	53                   	push   ebx
c000cd08:	53                   	push   ebx
c000cd09:	51                   	push   ecx
c000cd0a:	52                   	push   edx
c000cd0b:	ff d0                	call   eax
c000cd0d:	83 c4 10             	add    esp,0x10
c000cd10:	e8 59 fe ff ff       	call   c000cb6e <VgaText::updateDiskUsage()>
c000cd15:	83 c4 58             	add    esp,0x58
c000cd18:	5b                   	pop    ebx
c000cd19:	c3                   	ret    

c000cd1a <VgaText::setTitleTextColour(VgaColour)>:
c000cd1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd22:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd28:	eb aa                	jmp    c000ccd4 <VgaText::updateTitle()>

c000cd2a <VgaText::setTitleColour(VgaColour)>:
c000cd2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd32:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd38:	eb 9a                	jmp    c000ccd4 <VgaText::updateTitle()>

c000cd3a <VgaText::setTitle(char*)>:
c000cd3a:	53                   	push   ebx
c000cd3b:	83 ec 10             	sub    esp,0x10
c000cd3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd46:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd4c:	50                   	push   eax
c000cd4d:	e8 55 39 ff ff       	call   c00006a7 <strcpy>
c000cd52:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd56:	83 c4 18             	add    esp,0x18
c000cd59:	5b                   	pop    ebx
c000cd5a:	e9 75 ff ff ff       	jmp    c000ccd4 <VgaText::updateTitle()>
c000cd5f:	90                   	nop

c000cd60 <VgaText::decrementCursor(bool)>:
c000cd60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd68:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd6e:	85 c0                	test   eax,eax
c000cd70:	74 07                	je     c000cd79 <VgaText::decrementCursor(bool)+0x19>
c000cd72:	48                   	dec    eax
c000cd73:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd79:	84 c9                	test   cl,cl
c000cd7b:	74 09                	je     c000cd86 <VgaText::decrementCursor(bool)+0x26>
c000cd7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd81:	e9 64 fa ff ff       	jmp    c000c7ea <VgaText::updateCursor()>
c000cd86:	c3                   	ret    
c000cd87:	90                   	nop

c000cd88 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd88:	53                   	push   ebx
c000cd89:	83 ec 08             	sub    esp,0x8
c000cd8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd98:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cd9c:	3c 07                	cmp    al,0x7
c000cd9e:	75 2a                	jne    c000cdca <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cda0:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c000cda5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cdad:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cdb5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdc1:	83 c4 08             	add    esp,0x8
c000cdc4:	5b                   	pop    ebx
c000cdc5:	e9 00 2e 00 00       	jmp    c000fbca <Buzzer::beep(int, int, bool)>
c000cdca:	3c 0d                	cmp    al,0xd
c000cdcc:	75 0c                	jne    c000cdda <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdce:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdd8:	eb 3b                	jmp    c000ce15 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cdda:	3c 0a                	cmp    al,0xa
c000cddc:	75 40                	jne    c000ce1e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cdde:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cde4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdee:	8d 50 01             	lea    edx,[eax+0x1]
c000cdf1:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cdf7:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cdfd:	75 12                	jne    c000ce11 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000cdff:	83 ec 0c             	sub    esp,0xc
c000ce02:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ce08:	53                   	push   ebx
c000ce09:	e8 2a fb ff ff       	call   c000c938 <VgaText::scrollScreen()>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce15:	83 c4 08             	add    esp,0x8
c000ce18:	5b                   	pop    ebx
c000ce19:	e9 cc f9 ff ff       	jmp    c000c7ea <VgaText::updateCursor()>
c000ce1e:	3c 08                	cmp    al,0x8
c000ce20:	75 31                	jne    c000ce53 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce22:	50                   	push   eax
c000ce23:	50                   	push   eax
c000ce24:	6a 01                	push   0x1
c000ce26:	53                   	push   ebx
c000ce27:	e8 34 ff ff ff       	call   c000cd60 <VgaText::decrementCursor(bool)>
c000ce2c:	5a                   	pop    edx
c000ce2d:	59                   	pop    ecx
c000ce2e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce34:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce3a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce40:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce46:	6a 20                	push   0x20
c000ce48:	53                   	push   ebx
c000ce49:	e8 90 fb ff ff       	call   c000c9de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce4e:	83 c4 28             	add    esp,0x28
c000ce51:	5b                   	pop    ebx
c000ce52:	c3                   	ret    
c000ce53:	83 ec 08             	sub    esp,0x8
c000ce56:	0f be c0             	movsx  eax,al
c000ce59:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce5f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce65:	51                   	push   ecx
c000ce66:	52                   	push   edx
c000ce67:	50                   	push   eax
c000ce68:	53                   	push   ebx
c000ce69:	e8 70 fb ff ff       	call   c000c9de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce6e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce72:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce7a:	83 c4 28             	add    esp,0x28
c000ce7d:	5b                   	pop    ebx
c000ce7e:	e9 29 fc ff ff       	jmp    c000caac <VgaText::incrementCursor(bool)>
c000ce83:	90                   	nop

c000ce84 <VgaText::isShowingCursor()>:
c000ce84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce88:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce8e:	c3                   	ret    
c000ce8f:	90                   	nop

c000ce90 <VgaText::isBlinkDisabled()>:
c000ce90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce94:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000ce9a:	83 f0 01             	xor    eax,0x1
c000ce9d:	c3                   	ret    

c000ce9e <VgaText::setCursorHeight(int)>:
c000ce9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cea2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cea6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ceac:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000ceb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ceb7:	e9 48 f9 ff ff       	jmp    c000c804 <VgaText::showCursor(bool)>

c000cebc <VgaText::getCursorHeight()>:
c000cebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec0:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000cec6:	c3                   	ret    

c000cec7 <setActiveTerminal(VgaText*)>:
c000cec7:	53                   	push   ebx
c000cec8:	83 ec 08             	sub    esp,0x8
c000cecb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cecf:	85 db                	test   ebx,ebx
c000ced1:	75 11                	jne    c000cee4 <setActiveTerminal(VgaText*)+0x1d>
c000ced3:	c7 44 24 10 34 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fe34
c000cedb:	83 c4 08             	add    esp,0x8
c000cede:	5b                   	pop    ebx
c000cedf:	e9 64 7a 00 00       	jmp    c0014948 <Krnl::panic(char const*)>
c000cee4:	50                   	push   eax
c000cee5:	50                   	push   eax
c000cee6:	53                   	push   ebx
c000cee7:	68 42 fe 01 c0       	push   0xc001fe42
c000ceec:	e8 ee 1e 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000cef1:	a1 a4 2e 02 c0       	mov    eax,ds:0xc0022ea4
c000cef6:	83 c4 10             	add    esp,0x10
c000cef9:	85 c0                	test   eax,eax
c000cefb:	74 0c                	je     c000cf09 <setActiveTerminal(VgaText*)+0x42>
c000cefd:	83 ec 0c             	sub    esp,0xc
c000cf00:	50                   	push   eax
c000cf01:	e8 e4 f8 ff ff       	call   c000c7ea <VgaText::updateCursor()>
c000cf06:	83 c4 10             	add    esp,0x10
c000cf09:	89 1d a4 2e 02 c0    	mov    DWORD PTR ds:0xc0022ea4,ebx
c000cf0f:	51                   	push   ecx
c000cf10:	51                   	push   ecx
c000cf11:	53                   	push   ebx
c000cf12:	68 5a fe 01 c0       	push   0xc001fe5a
c000cf17:	e8 c3 1e 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000cf1c:	83 c4 0c             	add    esp,0xc
c000cf1f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf25:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf2b:	53                   	push   ebx
c000cf2c:	e8 25 fb ff ff       	call   c000ca56 <VgaText::setCursor(int, int)>
c000cf31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf34:	e8 57 ff ff ff       	call   c000ce90 <VgaText::isBlinkDisabled()>
c000cf39:	5a                   	pop    edx
c000cf3a:	0f b6 c0             	movzx  eax,al
c000cf3d:	59                   	pop    ecx
c000cf3e:	50                   	push   eax
c000cf3f:	53                   	push   ebx
c000cf40:	e8 cf f8 ff ff       	call   c000c814 <VgaText::disableBlink(bool)>
c000cf45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf48:	e8 6f ff ff ff       	call   c000cebc <VgaText::getCursorHeight()>
c000cf4d:	5a                   	pop    edx
c000cf4e:	59                   	pop    ecx
c000cf4f:	50                   	push   eax
c000cf50:	53                   	push   ebx
c000cf51:	e8 48 ff ff ff       	call   c000ce9e <VgaText::setCursorHeight(int)>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf60:	75 0a                	jne    c000cf6c <setActiveTerminal(VgaText*)+0xa5>
c000cf62:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf6c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf70:	83 c4 08             	add    esp,0x8
c000cf73:	5b                   	pop    ebx
c000cf74:	e9 1d f8 ff ff       	jmp    c000c796 <VgaText::load()>

c000cf79 <doTerminalCycle()>:
c000cf79:	83 ec 18             	sub    esp,0x18
c000cf7c:	a1 a0 2e 02 c0       	mov    eax,ds:0xc0022ea0
c000cf81:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf87:	50                   	push   eax
c000cf88:	a3 a0 2e 02 c0       	mov    ds:0xc0022ea0,eax
c000cf8d:	e8 35 ff ff ff       	call   c000cec7 <setActiveTerminal(VgaText*)>
c000cf92:	83 c4 1c             	add    esp,0x1c
c000cf95:	c3                   	ret    

c000cf96 <VgaText::doUpdate()>:
c000cf96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf9a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cfa0:	85 c0                	test   eax,eax
c000cfa2:	74 02                	je     c000cfa6 <VgaText::doUpdate()+0x10>
c000cfa4:	ff e0                	jmp    eax
c000cfa6:	c3                   	ret    
c000cfa7:	90                   	nop

c000cfa8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cfa8:	55                   	push   ebp
c000cfa9:	57                   	push   edi
c000cfaa:	56                   	push   esi
c000cfab:	53                   	push   ebx
c000cfac:	83 ec 1c             	sub    esp,0x1c
c000cfaf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfb3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfb8:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfbf:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfc2:	50                   	push   eax
c000cfc3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfc8:	50                   	push   eax
c000cfc9:	e8 58 f9 ff ff       	call   c000c926 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfce:	59                   	pop    ecx
c000cfcf:	0f b6 c0             	movzx  eax,al
c000cfd2:	5b                   	pop    ebx
c000cfd3:	31 c9                	xor    ecx,ecx
c000cfd5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfdd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfe1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfeb:	0f b7 db             	movzx  ebx,bx
c000cfee:	01 db                	add    ebx,ebx
c000cff0:	01 fb                	add    ebx,edi
c000cff2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cff5:	84 c0                	test   al,al
c000cff7:	0f 84 38 01 00 00    	je     c000d135 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000cffd:	3c 0d                	cmp    al,0xd
c000cfff:	75 0f                	jne    c000d010 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d001:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d00b:	e9 1f 01 00 00       	jmp    c000d12f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d010:	3c 0a                	cmp    al,0xa
c000d012:	75 5b                	jne    c000d06f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d014:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d01a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d024:	8d 48 01             	lea    ecx,[eax+0x1]
c000d027:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d02d:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d033:	75 12                	jne    c000d047 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d035:	83 ec 0c             	sub    esp,0xc
c000d038:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d03e:	55                   	push   ebp
c000d03f:	e8 f4 f8 ff ff       	call   c000c938 <VgaText::scrollScreen()>
c000d044:	83 c4 10             	add    esp,0x10
c000d047:	83 ec 0c             	sub    esp,0xc
c000d04a:	55                   	push   ebp
c000d04b:	e8 9a f7 ff ff       	call   c000c7ea <VgaText::updateCursor()>
c000d050:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d058:	83 c4 10             	add    esp,0x10
c000d05b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d061:	31 c9                	xor    ecx,ecx
c000d063:	0f b7 db             	movzx  ebx,bx
c000d066:	01 db                	add    ebx,ebx
c000d068:	01 fb                	add    ebx,edi
c000d06a:	e9 c0 00 00 00       	jmp    c000d12f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d06f:	3c 08                	cmp    al,0x8
c000d071:	75 4e                	jne    c000d0c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d073:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d077:	53                   	push   ebx
c000d078:	53                   	push   ebx
c000d079:	6a 01                	push   0x1
c000d07b:	55                   	push   ebp
c000d07c:	e8 df fc ff ff       	call   c000cd60 <VgaText::decrementCursor(bool)>
c000d081:	58                   	pop    eax
c000d082:	5a                   	pop    edx
c000d083:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d089:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d08f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d095:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d09b:	6a 20                	push   0x20
c000d09d:	55                   	push   ebp
c000d09e:	e8 3b f9 ff ff       	call   c000c9de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d0a3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d0ab:	83 c4 20             	add    esp,0x20
c000d0ae:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0b4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0b8:	0f b7 db             	movzx  ebx,bx
c000d0bb:	01 db                	add    ebx,ebx
c000d0bd:	01 fb                	add    ebx,edi
c000d0bf:	eb 6e                	jmp    c000d12f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0c1:	51                   	push   ecx
c000d0c2:	51                   	push   ecx
c000d0c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0c7:	50                   	push   eax
c000d0c8:	e8 ff f8 ff ff       	call   c000c9cc <VgaText::combineCharAndColour(char, unsigned char)>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0d3:	39 2d a4 2e 02 c0    	cmp    DWORD PTR ds:0xc0022ea4,ebp
c000d0d9:	75 2a                	jne    c000d105 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0db:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0e1:	85 c0                	test   eax,eax
c000d0e3:	74 20                	je     c000d105 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0e5:	52                   	push   edx
c000d0e6:	52                   	push   edx
c000d0e7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0ed:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0fb:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d0fe:	51                   	push   ecx
c000d0ff:	55                   	push   ebp
c000d100:	ff d0                	call   eax
c000d102:	83 c4 20             	add    esp,0x20
c000d105:	83 c3 02             	add    ebx,0x2
c000d108:	50                   	push   eax
c000d109:	50                   	push   eax
c000d10a:	6a 00                	push   0x0
c000d10c:	55                   	push   ebp
c000d10d:	e8 9a f9 ff ff       	call   c000caac <VgaText::incrementCursor(bool)>
c000d112:	83 c4 10             	add    esp,0x10
c000d115:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d11c:	75 0f                	jne    c000d12d <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d11e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d126:	0f b7 db             	movzx  ebx,bx
c000d129:	01 db                	add    ebx,ebx
c000d12b:	01 fb                	add    ebx,edi
c000d12d:	b1 01                	mov    cl,0x1
c000d12f:	46                   	inc    esi
c000d130:	e9 bd fe ff ff       	jmp    c000cff2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d135:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d139:	83 ec 0c             	sub    esp,0xc
c000d13c:	55                   	push   ebp
c000d13d:	e8 a8 f6 ff ff       	call   c000c7ea <VgaText::updateCursor()>
c000d142:	83 c4 10             	add    esp,0x10
c000d145:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d149:	84 c9                	test   cl,cl
c000d14b:	74 0c                	je     c000d159 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d14d:	83 ec 0c             	sub    esp,0xc
c000d150:	55                   	push   ebp
c000d151:	e8 40 fe ff ff       	call   c000cf96 <VgaText::doUpdate()>
c000d156:	83 c4 10             	add    esp,0x10
c000d159:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d160:	83 c4 1c             	add    esp,0x1c
c000d163:	5b                   	pop    ebx
c000d164:	5e                   	pop    esi
c000d165:	5f                   	pop    edi
c000d166:	5d                   	pop    ebp
c000d167:	c3                   	ret    

c000d168 <VgaText::clearScreen()>:
c000d168:	57                   	push   edi
c000d169:	56                   	push   esi
c000d16a:	31 f6                	xor    esi,esi
c000d16c:	53                   	push   ebx
c000d16d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d171:	52                   	push   edx
c000d172:	6a 00                	push   0x0
c000d174:	6a 00                	push   0x0
c000d176:	53                   	push   ebx
c000d177:	e8 da f8 ff ff       	call   c000ca56 <VgaText::setCursor(int, int)>
c000d17c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d183:	83 c4 10             	add    esp,0x10
c000d186:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d18c:	7e 26                	jle    c000d1b4 <VgaText::clearScreen()+0x4c>
c000d18e:	31 ff                	xor    edi,edi
c000d190:	50                   	push   eax
c000d191:	50                   	push   eax
c000d192:	56                   	push   esi
c000d193:	57                   	push   edi
c000d194:	47                   	inc    edi
c000d195:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d19b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d1a1:	6a 20                	push   0x20
c000d1a3:	53                   	push   ebx
c000d1a4:	e8 35 f8 ff ff       	call   c000c9de <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d1a9:	83 c4 20             	add    esp,0x20
c000d1ac:	83 ff 50             	cmp    edi,0x50
c000d1af:	75 df                	jne    c000d190 <VgaText::clearScreen()+0x28>
c000d1b1:	46                   	inc    esi
c000d1b2:	eb d2                	jmp    c000d186 <VgaText::clearScreen()+0x1e>
c000d1b4:	83 ec 0c             	sub    esp,0xc
c000d1b7:	53                   	push   ebx
c000d1b8:	e8 d9 fd ff ff       	call   c000cf96 <VgaText::doUpdate()>
c000d1bd:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	5b                   	pop    ebx
c000d1c8:	5e                   	pop    esi
c000d1c9:	5f                   	pop    edi
c000d1ca:	c3                   	ret    
c000d1cb:	90                   	nop

c000d1cc <VgaText::putchar(char)>:
c000d1cc:	56                   	push   esi
c000d1cd:	53                   	push   ebx
c000d1ce:	83 ec 14             	sub    esp,0x14
c000d1d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1d9:	3c 5b                	cmp    al,0x5b
c000d1db:	75 21                	jne    c000d1fe <VgaText::putchar(char)+0x32>
c000d1dd:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1e4:	74 28                	je     c000d20e <VgaText::putchar(char)+0x42>
c000d1e6:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1ef:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1f9:	e9 e2 00 00 00       	jmp    c000d2e0 <VgaText::putchar(char)+0x114>
c000d1fe:	3c 1b                	cmp    al,0x1b
c000d200:	75 0c                	jne    c000d20e <VgaText::putchar(char)+0x42>
c000d202:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d209:	e9 d2 00 00 00       	jmp    c000d2e0 <VgaText::putchar(char)+0x114>
c000d20e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d214:	84 c9                	test   cl,cl
c000d216:	0f 84 ab 00 00 00    	je     c000d2c7 <VgaText::putchar(char)+0xfb>
c000d21c:	8d 50 c0             	lea    edx,[eax-0x40]
c000d21f:	80 fa 3e             	cmp    dl,0x3e
c000d222:	0f 87 82 00 00 00    	ja     c000d2aa <VgaText::putchar(char)+0xde>
c000d228:	3c 6d                	cmp    al,0x6d
c000d22a:	75 4d                	jne    c000d279 <VgaText::putchar(char)+0xad>
c000d22c:	31 f6                	xor    esi,esi
c000d22e:	31 d2                	xor    edx,edx
c000d230:	31 c0                	xor    eax,eax
c000d232:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d238:	7e 30                	jle    c000d26a <VgaText::putchar(char)+0x9e>
c000d23a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d242:	80 fa 3b             	cmp    dl,0x3b
c000d245:	75 17                	jne    c000d25e <VgaText::putchar(char)+0x92>
c000d247:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d24b:	50                   	push   eax
c000d24c:	53                   	push   ebx
c000d24d:	e8 fc f5 ff ff       	call   c000c84e <VgaText::doANSI_SGR(int)>
c000d252:	59                   	pop    ecx
c000d253:	31 d2                	xor    edx,edx
c000d255:	58                   	pop    eax
c000d256:	31 c0                	xor    eax,eax
c000d258:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d25c:	eb 09                	jmp    c000d267 <VgaText::putchar(char)+0x9b>
c000d25e:	6b c0 0a             	imul   eax,eax,0xa
c000d261:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d265:	88 ca                	mov    dl,cl
c000d267:	46                   	inc    esi
c000d268:	eb c8                	jmp    c000d232 <VgaText::putchar(char)+0x66>
c000d26a:	84 d2                	test   dl,dl
c000d26c:	74 31                	je     c000d29f <VgaText::putchar(char)+0xd3>
c000d26e:	50                   	push   eax
c000d26f:	53                   	push   ebx
c000d270:	e8 d9 f5 ff ff       	call   c000c84e <VgaText::doANSI_SGR(int)>
c000d275:	58                   	pop    eax
c000d276:	5a                   	pop    edx
c000d277:	eb 26                	jmp    c000d29f <VgaText::putchar(char)+0xd3>
c000d279:	3c 4a                	cmp    al,0x4a
c000d27b:	75 22                	jne    c000d29f <VgaText::putchar(char)+0xd3>
c000d27d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d284:	75 19                	jne    c000d29f <VgaText::putchar(char)+0xd3>
c000d286:	83 ec 0c             	sub    esp,0xc
c000d289:	53                   	push   ebx
c000d28a:	e8 d9 fe ff ff       	call   c000d168 <VgaText::clearScreen()>
c000d28f:	83 c4 0c             	add    esp,0xc
c000d292:	6a 00                	push   0x0
c000d294:	6a 00                	push   0x0
c000d296:	53                   	push   ebx
c000d297:	e8 ba f7 ff ff       	call   c000ca56 <VgaText::setCursor(int, int)>
c000d29c:	83 c4 10             	add    esp,0x10
c000d29f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d2a8:	eb 36                	jmp    c000d2e0 <VgaText::putchar(char)+0x114>
c000d2aa:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d2b0:	83 fa 0e             	cmp    edx,0xe
c000d2b3:	7f 2b                	jg     c000d2e0 <VgaText::putchar(char)+0x114>
c000d2b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2b8:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2be:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2c5:	eb 19                	jmp    c000d2e0 <VgaText::putchar(char)+0x114>
c000d2c7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2cd:	0f be c0             	movsx  eax,al
c000d2d0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2d6:	50                   	push   eax
c000d2d7:	53                   	push   ebx
c000d2d8:	e8 ab fa ff ff       	call   c000cd88 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2dd:	83 c4 10             	add    esp,0x10
c000d2e0:	83 c4 14             	add    esp,0x14
c000d2e3:	5b                   	pop    ebx
c000d2e4:	5e                   	pop    esi
c000d2e5:	c3                   	ret    

c000d2e6 <VgaText::puts(char const*)>:
c000d2e6:	53                   	push   ebx
c000d2e7:	83 ec 08             	sub    esp,0x8
c000d2ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2ee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2f1:	84 c0                	test   al,al
c000d2f3:	74 12                	je     c000d307 <VgaText::puts(char const*)+0x21>
c000d2f5:	43                   	inc    ebx
c000d2f6:	51                   	push   ecx
c000d2f7:	51                   	push   ecx
c000d2f8:	50                   	push   eax
c000d2f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fd:	e8 ca fe ff ff       	call   c000d1cc <VgaText::putchar(char)>
c000d302:	83 c4 10             	add    esp,0x10
c000d305:	eb e7                	jmp    c000d2ee <VgaText::puts(char const*)+0x8>
c000d307:	83 c4 08             	add    esp,0x8
c000d30a:	5b                   	pop    ebx
c000d30b:	c3                   	ret    

c000d30c <VgaText::putx(unsigned int)>:
c000d30c:	57                   	push   edi
c000d30d:	b9 11 00 00 00       	mov    ecx,0x11
c000d312:	56                   	push   esi
c000d313:	be 76 fe 01 c0       	mov    esi,0xc001fe76
c000d318:	53                   	push   ebx
c000d319:	83 ec 20             	sub    esp,0x20
c000d31c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d320:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d324:	fc                   	cld    
c000d325:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d327:	be 08 00 00 00       	mov    esi,0x8
c000d32c:	50                   	push   eax
c000d32d:	50                   	push   eax
c000d32e:	89 d8                	mov    eax,ebx
c000d330:	c1 e3 04             	shl    ebx,0x4
c000d333:	c1 e8 1c             	shr    eax,0x1c
c000d336:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d33b:	50                   	push   eax
c000d33c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d340:	e8 87 fe ff ff       	call   c000d1cc <VgaText::putchar(char)>
c000d345:	83 c4 10             	add    esp,0x10
c000d348:	4e                   	dec    esi
c000d349:	75 e1                	jne    c000d32c <VgaText::putx(unsigned int)+0x20>
c000d34b:	83 c4 20             	add    esp,0x20
c000d34e:	5b                   	pop    ebx
c000d34f:	5e                   	pop    esi
c000d350:	5f                   	pop    edi
c000d351:	c3                   	ret    

c000d352 <VgaText::VgaText(char const*)>:
c000d352:	57                   	push   edi
c000d353:	56                   	push   esi
c000d354:	53                   	push   ebx
c000d355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d359:	83 ec 08             	sub    esp,0x8
c000d35c:	6a 00                	push   0x0
c000d35e:	50                   	push   eax
c000d35f:	e8 b8 05 00 00       	call   c000d91c <UnixFile::UnixFile(int)>
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	ba dc fe 01 c0       	mov    edx,0xc001fedc
c000d36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d370:	89 10                	mov    DWORD PTR [eax],edx
c000d372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d376:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d384:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d392:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d39d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a8:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b6:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c4:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3cf:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3da:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3e0:	bb 80 2e 02 c0       	mov    ebx,0xc0022e80
c000d3e5:	b8 08 00 00 00       	mov    eax,0x8
c000d3ea:	fc                   	cld    
c000d3eb:	89 d7                	mov    edi,edx
c000d3ed:	89 de                	mov    esi,ebx
c000d3ef:	89 c1                	mov    ecx,eax
c000d3f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3f7:	05 1e 10 00 00       	add    eax,0x101e
c000d3fc:	83 ec 08             	sub    esp,0x8
c000d3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d403:	50                   	push   eax
c000d404:	e8 9e 32 ff ff       	call   c00006a7 <strcpy>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d410:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d41e:	83 c0 0c             	add    eax,0xc
c000d421:	83 ec 04             	sub    esp,0x4
c000d424:	68 00 0f 00 00       	push   0xf00
c000d429:	6a 00                	push   0x0
c000d42b:	50                   	push   eax
c000d42c:	e8 d7 31 ff ff       	call   c0000608 <memset>
c000d431:	83 c4 10             	add    esp,0x10
c000d434:	83 ec 04             	sub    esp,0x4
c000d437:	6a 00                	push   0x0
c000d439:	6a 07                	push   0x7
c000d43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d43f:	e8 c2 f4 ff ff       	call   c000c906 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d444:	83 c4 10             	add    esp,0x10
c000d447:	83 ec 08             	sub    esp,0x8
c000d44a:	6a 02                	push   0x2
c000d44c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d450:	e8 49 fa ff ff       	call   c000ce9e <VgaText::setCursorHeight(int)>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	83 ec 04             	sub    esp,0x4
c000d45b:	6a 00                	push   0x0
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	e8 ee f5 ff ff       	call   c000ca56 <VgaText::setCursor(int, int)>
c000d468:	83 c4 10             	add    esp,0x10
c000d46b:	83 ec 08             	sub    esp,0x8
c000d46e:	6a 01                	push   0x1
c000d470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d474:	e8 8b f3 ff ff       	call   c000c804 <VgaText::showCursor(bool)>
c000d479:	83 c4 10             	add    esp,0x10
c000d47c:	83 ec 08             	sub    esp,0x8
c000d47f:	6a 01                	push   0x1
c000d481:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d485:	e8 8a f3 ff ff       	call   c000c814 <VgaText::disableBlink(bool)>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d494:	e8 cf fc ff ff       	call   c000d168 <VgaText::clearScreen()>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a0:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ab:	05 9e 10 00 00       	add    eax,0x109e
c000d4b0:	83 ec 04             	sub    esp,0x4
c000d4b3:	68 96 00 00 00       	push   0x96
c000d4b8:	6a 00                	push   0x0
c000d4ba:	50                   	push   eax
c000d4bb:	e8 48 31 ff ff       	call   c0000608 <memset>
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c7:	05 34 11 00 00       	add    eax,0x1134
c000d4cc:	83 ec 04             	sub    esp,0x4
c000d4cf:	68 2c 01 00 00       	push   0x12c
c000d4d4:	6a 00                	push   0x0
c000d4d6:	50                   	push   eax
c000d4d7:	e8 2c 31 ff ff       	call   c0000608 <memset>
c000d4dc:	83 c4 10             	add    esp,0x10
c000d4df:	90                   	nop
c000d4e0:	5b                   	pop    ebx
c000d4e1:	5e                   	pop    esi
c000d4e2:	5f                   	pop    edi
c000d4e3:	c3                   	ret    

c000d4e4 <VgaText::receiveKey(unsigned char)>:
c000d4e4:	55                   	push   ebp
c000d4e5:	57                   	push   edi
c000d4e6:	56                   	push   esi
c000d4e7:	53                   	push   ebx
c000d4e8:	83 ec 1c             	sub    esp,0x1c
c000d4eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4f3:	84 db                	test   bl,bl
c000d4f5:	0f 84 c9 00 00 00    	je     c000d5c4 <VgaText::receiveKey(unsigned char)+0xe0>
c000d4fb:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d501:	80 fb 08             	cmp    bl,0x8
c000d504:	75 2c                	jne    c000d532 <VgaText::receiveKey(unsigned char)+0x4e>
c000d506:	83 ec 0c             	sub    esp,0xc
c000d509:	57                   	push   edi
c000d50a:	e8 16 31 ff ff       	call   c0000625 <strlen>
c000d50f:	83 c4 10             	add    esp,0x10
c000d512:	85 c0                	test   eax,eax
c000d514:	74 41                	je     c000d557 <VgaText::receiveKey(unsigned char)+0x73>
c000d516:	50                   	push   eax
c000d517:	50                   	push   eax
c000d518:	6a 08                	push   0x8
c000d51a:	56                   	push   esi
c000d51b:	e8 ac fc ff ff       	call   c000d1cc <VgaText::putchar(char)>
c000d520:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d523:	e8 fd 30 ff ff       	call   c0000625 <strlen>
c000d528:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d530:	eb 22                	jmp    c000d554 <VgaText::receiveKey(unsigned char)+0x70>
c000d532:	0f be c3             	movsx  eax,bl
c000d535:	52                   	push   edx
c000d536:	52                   	push   edx
c000d537:	50                   	push   eax
c000d538:	56                   	push   esi
c000d539:	e8 8e fc ff ff       	call   c000d1cc <VgaText::putchar(char)>
c000d53e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d542:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d547:	59                   	pop    ecx
c000d548:	5d                   	pop    ebp
c000d549:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d54d:	50                   	push   eax
c000d54e:	57                   	push   edi
c000d54f:	e8 0a 32 ff ff       	call   c000075e <strcat>
c000d554:	83 c4 10             	add    esp,0x10
c000d557:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d55e:	75 05                	jne    c000d565 <VgaText::receiveKey(unsigned char)+0x81>
c000d560:	80 fb 0a             	cmp    bl,0xa
c000d563:	75 53                	jne    c000d5b8 <VgaText::receiveKey(unsigned char)+0xd4>
c000d565:	83 ec 0c             	sub    esp,0xc
c000d568:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d56e:	53                   	push   ebx
c000d56f:	e8 b1 30 ff ff       	call   c0000625 <strlen>
c000d574:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d577:	89 c5                	mov    ebp,eax
c000d579:	e8 a7 30 ff ff       	call   c0000625 <strlen>
c000d57e:	83 c4 10             	add    esp,0x10
c000d581:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d585:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d58a:	76 10                	jbe    c000d59c <VgaText::receiveKey(unsigned char)+0xb8>
c000d58c:	83 ec 0c             	sub    esp,0xc
c000d58f:	68 87 fe 01 c0       	push   0xc001fe87
c000d594:	e8 af 73 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000d599:	83 c4 10             	add    esp,0x10
c000d59c:	50                   	push   eax
c000d59d:	50                   	push   eax
c000d59e:	57                   	push   edi
c000d59f:	53                   	push   ebx
c000d5a0:	e8 b9 31 ff ff       	call   c000075e <strcat>
c000d5a5:	83 c4 0c             	add    esp,0xc
c000d5a8:	68 96 00 00 00       	push   0x96
c000d5ad:	6a 00                	push   0x0
c000d5af:	57                   	push   edi
c000d5b0:	e8 53 30 ff ff       	call   c0000608 <memset>
c000d5b5:	83 c4 10             	add    esp,0x10
c000d5b8:	83 ec 0c             	sub    esp,0xc
c000d5bb:	56                   	push   esi
c000d5bc:	e8 d5 f9 ff ff       	call   c000cf96 <VgaText::doUpdate()>
c000d5c1:	83 c4 10             	add    esp,0x10
c000d5c4:	83 c4 1c             	add    esp,0x1c
c000d5c7:	5b                   	pop    ebx
c000d5c8:	5e                   	pop    esi
c000d5c9:	5f                   	pop    edi
c000d5ca:	5d                   	pop    ebp
c000d5cb:	c3                   	ret    

c000d5cc <VgaText::write(unsigned long long, void*, int*)>:
c000d5cc:	55                   	push   ebp
c000d5cd:	57                   	push   edi
c000d5ce:	56                   	push   esi
c000d5cf:	53                   	push   ebx
c000d5d0:	83 ec 0c             	sub    esp,0xc
c000d5d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5d7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5db:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5df:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5e6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5e9:	39 eb                	cmp    ebx,ebp
c000d5eb:	74 13                	je     c000d600 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5ed:	43                   	inc    ebx
c000d5ee:	50                   	push   eax
c000d5ef:	50                   	push   eax
c000d5f0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5f4:	50                   	push   eax
c000d5f5:	56                   	push   esi
c000d5f6:	e8 d1 fb ff ff       	call   c000d1cc <VgaText::putchar(char)>
c000d5fb:	83 c4 10             	add    esp,0x10
c000d5fe:	eb e9                	jmp    c000d5e9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d600:	83 ec 0c             	sub    esp,0xc
c000d603:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d60a:	56                   	push   esi
c000d60b:	e8 86 f9 ff ff       	call   c000cf96 <VgaText::doUpdate()>
c000d610:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d614:	89 38                	mov    DWORD PTR [eax],edi
c000d616:	83 c4 1c             	add    esp,0x1c
c000d619:	31 c0                	xor    eax,eax
c000d61b:	5b                   	pop    ebx
c000d61c:	5e                   	pop    esi
c000d61d:	5f                   	pop    edi
c000d61e:	5d                   	pop    ebp
c000d61f:	c3                   	ret    

c000d620 <newTerminal(char*)>:
c000d620:	83 ec 28             	sub    esp,0x28
c000d623:	68 60 12 00 00       	push   0x1260
c000d628:	e8 c3 16 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000d62d:	5a                   	pop    edx
c000d62e:	59                   	pop    ecx
c000d62f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d633:	50                   	push   eax
c000d634:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d638:	e8 15 fd ff ff       	call   c000d352 <VgaText::VgaText(char const*)>
c000d63d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d641:	83 c4 2c             	add    esp,0x2c
c000d644:	c3                   	ret    
c000d645:	90                   	nop

c000d646 <TSS::TSS()>:
c000d646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d64a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d651:	90                   	nop
c000d652:	c3                   	ret    
c000d653:	90                   	nop

c000d654 <TSS::setESP(unsigned long)>:
c000d654:	55                   	push   ebp
c000d655:	89 e5                	mov    ebp,esp
c000d657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d65d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d660:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d663:	90                   	nop
c000d664:	5d                   	pop    ebp
c000d665:	c3                   	ret    

c000d666 <TSS::flush()>:
c000d666:	55                   	push   ebp
c000d667:	89 e5                	mov    ebp,esp
c000d669:	83 ec 10             	sub    esp,0x10
c000d66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d671:	83 c8 03             	or     eax,0x3
c000d674:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d678:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d67c:	66 89 d0             	mov    ax,dx
c000d67f:	0f 00 d8             	ltr    ax
c000d682:	90                   	nop
c000d683:	c9                   	leave  
c000d684:	c3                   	ret    
c000d685:	90                   	nop

c000d686 <TSS::setup(unsigned long, unsigned long)>:
c000d686:	55                   	push   ebp
c000d687:	89 e5                	mov    ebp,esp
c000d689:	53                   	push   ebx
c000d68a:	83 ec 14             	sub    esp,0x14
c000d68d:	83 ec 0c             	sub    esp,0xc
c000d690:	6a 68                	push   0x68
c000d692:	e8 81 e5 ff ff       	call   c000bc18 <malloc>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	89 c2                	mov    edx,eax
c000d69c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6a8:	83 ec 04             	sub    esp,0x4
c000d6ab:	6a 68                	push   0x68
c000d6ad:	6a 00                	push   0x0
c000d6af:	50                   	push   eax
c000d6b0:	e8 53 2f ff ff       	call   c0000608 <memset>
c000d6b5:	83 c4 10             	add    esp,0x10
c000d6b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6be:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ca:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e2:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ee:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6fa:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d703:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d706:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d70c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d712:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d715:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d71b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d71e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d721:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d727:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d72a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d734:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d737:	e8 69 0c 01 00       	call   c001e3a5 <CPU::readCR3()>
c000d73c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d73f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d742:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d745:	83 ec 08             	sub    esp,0x8
c000d748:	50                   	push   eax
c000d749:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d74c:	50                   	push   eax
c000d74d:	e8 9c dc ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000d752:	83 c4 10             	add    esp,0x10
c000d755:	83 ec 08             	sub    esp,0x8
c000d758:	6a 68                	push   0x68
c000d75a:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d75d:	50                   	push   eax
c000d75e:	e8 a7 dc ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000d763:	83 c4 10             	add    esp,0x10
c000d766:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d76a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d76d:	83 e0 0f             	and    eax,0xf
c000d770:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d773:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d776:	83 c8 40             	or     eax,0x40
c000d779:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d77c:	e8 c1 64 00 00       	call   c0013c42 <thisCPU()>
c000d781:	05 78 01 00 00       	add    eax,0x178
c000d786:	83 ec 04             	sub    esp,0x4
c000d789:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d78c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d78f:	50                   	push   eax
c000d790:	e8 a9 dc ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000d795:	83 c4 10             	add    esp,0x10
c000d798:	89 c2                	mov    edx,eax
c000d79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d79d:	89 10                	mov    DWORD PTR [eax],edx
c000d79f:	e8 9e 64 00 00       	call   c0013c42 <thisCPU()>
c000d7a4:	05 78 01 00 00       	add    eax,0x178
c000d7a9:	83 ec 0c             	sub    esp,0xc
c000d7ac:	50                   	push   eax
c000d7ad:	e8 d0 dc ff ff       	call   c000b482 <GDT::flush()>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7ba:	83 ec 08             	sub    esp,0x8
c000d7bd:	50                   	push   eax
c000d7be:	68 f0 fe 01 c0       	push   0xc001fef0
c000d7c3:	e8 17 16 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000d7c8:	83 c4 10             	add    esp,0x10
c000d7cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7d0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7d3:	c9                   	leave  
c000d7d4:	c3                   	ret    
c000d7d5:	90                   	nop

c000d7d6 <ReservedFilename::isAtty()>:
c000d7d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7da:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d7dd:	31 c0                	xor    eax,eax
c000d7df:	83 fa 08             	cmp    edx,0x8
c000d7e2:	74 06                	je     c000d7ea <ReservedFilename::isAtty()+0x14>
c000d7e4:	83 fa 06             	cmp    edx,0x6
c000d7e7:	0f 94 c0             	sete   al
c000d7ea:	c3                   	ret    
c000d7eb:	90                   	nop

c000d7ec <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7ec:	55                   	push   ebp
c000d7ed:	57                   	push   edi
c000d7ee:	56                   	push   esi
c000d7ef:	53                   	push   ebx
c000d7f0:	83 ec 0c             	sub    esp,0xc
c000d7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d802:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d806:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d80a:	83 f8 08             	cmp    eax,0x8
c000d80d:	75 08                	jne    c000d817 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c000d80f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d815:	eb 5c                	jmp    c000d873 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c000d817:	83 f8 06             	cmp    eax,0x6
c000d81a:	75 3d                	jne    c000d859 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c000d81c:	83 ec 0c             	sub    esp,0xc
c000d81f:	68 0e ff 01 c0       	push   0xc001ff0e
c000d824:	e8 b6 15 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000d829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d82e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d831:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d837:	8b 10                	mov    edx,DWORD PTR [eax]
c000d839:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d83d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d841:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d845:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d849:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d84d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d850:	83 c4 1c             	add    esp,0x1c
c000d853:	5b                   	pop    ebx
c000d854:	5e                   	pop    esi
c000d855:	5f                   	pop    edi
c000d856:	5d                   	pop    ebp
c000d857:	ff e0                	jmp    eax
c000d859:	89 c2                	mov    edx,eax
c000d85b:	83 e2 fd             	and    edx,0xfffffffd
c000d85e:	83 fa 05             	cmp    edx,0x5
c000d861:	74 ac                	je     c000d80f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000d863:	8d 50 f5             	lea    edx,[eax-0xb]
c000d866:	83 fa 08             	cmp    edx,0x8
c000d869:	76 a4                	jbe    c000d80f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000d86b:	83 e8 15             	sub    eax,0x15
c000d86e:	83 f8 08             	cmp    eax,0x8
c000d871:	76 9c                	jbe    c000d80f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000d873:	83 c4 0c             	add    esp,0xc
c000d876:	31 c0                	xor    eax,eax
c000d878:	5b                   	pop    ebx
c000d879:	5e                   	pop    esi
c000d87a:	5f                   	pop    edi
c000d87b:	5d                   	pop    ebp
c000d87c:	c3                   	ret    
c000d87d:	90                   	nop

c000d87e <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d87e:	55                   	push   ebp
c000d87f:	57                   	push   edi
c000d880:	56                   	push   esi
c000d881:	53                   	push   ebx
c000d882:	83 ec 0c             	sub    esp,0xc
c000d885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d889:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d88d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d890:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d894:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d898:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d89c:	83 f8 08             	cmp    eax,0x8
c000d89f:	75 08                	jne    c000d8a9 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c000d8a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8a7:	eb 60                	jmp    c000d909 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c000d8a9:	83 f8 06             	cmp    eax,0x6
c000d8ac:	75 3d                	jne    c000d8eb <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c000d8ae:	83 ec 0c             	sub    esp,0xc
c000d8b1:	68 1b ff 01 c0       	push   0xc001ff1b
c000d8b6:	e8 24 15 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000d8bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8cb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8cf:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8d3:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8d7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8df:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d8e2:	83 c4 1c             	add    esp,0x1c
c000d8e5:	5b                   	pop    ebx
c000d8e6:	5e                   	pop    esi
c000d8e7:	5f                   	pop    edi
c000d8e8:	5d                   	pop    ebp
c000d8e9:	ff e0                	jmp    eax
c000d8eb:	83 f8 05             	cmp    eax,0x5
c000d8ee:	75 04                	jne    c000d8f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c000d8f0:	89 33                	mov    DWORD PTR [ebx],esi
c000d8f2:	eb 15                	jmp    c000d909 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c000d8f4:	83 f8 07             	cmp    eax,0x7
c000d8f7:	74 a8                	je     c000d8a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000d8f9:	8d 50 f5             	lea    edx,[eax-0xb]
c000d8fc:	83 fa 08             	cmp    edx,0x8
c000d8ff:	76 a0                	jbe    c000d8a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000d901:	83 e8 15             	sub    eax,0x15
c000d904:	83 f8 08             	cmp    eax,0x8
c000d907:	76 98                	jbe    c000d8a1 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000d909:	83 c4 0c             	add    esp,0xc
c000d90c:	31 c0                	xor    eax,eax
c000d90e:	5b                   	pop    ebx
c000d90f:	5e                   	pop    esi
c000d910:	5f                   	pop    edi
c000d911:	5d                   	pop    ebp
c000d912:	c3                   	ret    
c000d913:	90                   	nop

c000d914 <UnixFile::getFileDescriptor()>:
c000d914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d918:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d91b:	c3                   	ret    

c000d91c <UnixFile::UnixFile(int)>:
c000d91c:	83 ec 0c             	sub    esp,0xc
c000d91f:	ba f8 ff 01 c0       	mov    edx,0xc001fff8
c000d924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d928:	89 10                	mov    DWORD PTR [eax],edx
c000d92a:	a1 80 22 02 c0       	mov    eax,ds:0xc0022280
c000d92f:	8d 50 01             	lea    edx,[eax+0x1]
c000d932:	89 15 80 22 02 c0    	mov    DWORD PTR ds:0xc0022280,edx
c000d938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d93c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d93f:	83 ec 08             	sub    esp,0x8
c000d942:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d946:	68 b0 2e 02 c0       	push   0xc0022eb0
c000d94b:	e8 ca 0a 01 00       	call   c001e41a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d950:	83 c4 10             	add    esp,0x10
c000d953:	90                   	nop
c000d954:	83 c4 0c             	add    esp,0xc
c000d957:	c3                   	ret    

c000d958 <ReservedFilename::ReservedFilename(int)>:
c000d958:	83 ec 0c             	sub    esp,0xc
c000d95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d95f:	83 ec 08             	sub    esp,0x8
c000d962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d966:	50                   	push   eax
c000d967:	e8 b0 ff ff ff       	call   c000d91c <UnixFile::UnixFile(int)>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	ba 14 00 02 c0       	mov    edx,0xc0020014
c000d974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d978:	89 10                	mov    DWORD PTR [eax],edx
c000d97a:	90                   	nop
c000d97b:	83 c4 0c             	add    esp,0xc
c000d97e:	c3                   	ret    
c000d97f:	90                   	nop

c000d980 <UnixFile::~UnixFile()>:
c000d980:	83 ec 1c             	sub    esp,0x1c
c000d983:	ba f8 ff 01 c0       	mov    edx,0xc001fff8
c000d988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98c:	89 10                	mov    DWORD PTR [eax],edx
c000d98e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000d996:	83 ec 0c             	sub    esp,0xc
c000d999:	68 b0 2e 02 c0       	push   0xc0022eb0
c000d99e:	e8 4b 0b 01 00       	call   c001e4ee <LinkedList<UnixFile>::getFirstElement()>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9aa:	83 ec 0c             	sub    esp,0xc
c000d9ad:	68 b0 2e 02 c0       	push   0xc0022eb0
c000d9b2:	e8 3f 0b 01 00       	call   c001e4f6 <LinkedList<UnixFile>::removeFirst()>
c000d9b7:	83 c4 10             	add    esp,0x10
c000d9ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9be:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000d9c2:	74 3d                	je     c000da01 <UnixFile::~UnixFile()+0x81>
c000d9c4:	83 ec 08             	sub    esp,0x8
c000d9c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9cb:	68 b0 2e 02 c0       	push   0xc0022eb0
c000d9d0:	e8 45 0a 01 00       	call   c001e41a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9dc:	8d 50 01             	lea    edx,[eax+0x1]
c000d9df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9e3:	3d 88 13 00 00       	cmp    eax,0x1388
c000d9e8:	0f 94 c0             	sete   al
c000d9eb:	84 c0                	test   al,al
c000d9ed:	74 a7                	je     c000d996 <UnixFile::~UnixFile()+0x16>
c000d9ef:	83 ec 0c             	sub    esp,0xc
c000d9f2:	68 d0 ff 01 c0       	push   0xc001ffd0
c000d9f7:	e8 4c 6f 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	eb 95                	jmp    c000d996 <UnixFile::~UnixFile()+0x16>
c000da01:	90                   	nop
c000da02:	83 c4 1c             	add    esp,0x1c
c000da05:	c3                   	ret    

c000da06 <UnixFile::~UnixFile()>:
c000da06:	83 ec 0c             	sub    esp,0xc
c000da09:	83 ec 0c             	sub    esp,0xc
c000da0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da10:	e8 6b ff ff ff       	call   c000d980 <UnixFile::~UnixFile()>
c000da15:	83 c4 10             	add    esp,0x10
c000da18:	83 ec 08             	sub    esp,0x8
c000da1b:	6a 0c                	push   0xc
c000da1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da21:	e8 d9 12 00 00       	call   c000ecff <operator delete(void*, unsigned long)>
c000da26:	83 c4 10             	add    esp,0x10
c000da29:	83 c4 0c             	add    esp,0xc
c000da2c:	c3                   	ret    
c000da2d:	90                   	nop

c000da2e <ReservedFilename::~ReservedFilename()>:
c000da2e:	83 ec 0c             	sub    esp,0xc
c000da31:	ba 14 00 02 c0       	mov    edx,0xc0020014
c000da36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3a:	89 10                	mov    DWORD PTR [eax],edx
c000da3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	50                   	push   eax
c000da44:	e8 37 ff ff ff       	call   c000d980 <UnixFile::~UnixFile()>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	90                   	nop
c000da4d:	83 c4 0c             	add    esp,0xc
c000da50:	c3                   	ret    
c000da51:	90                   	nop

c000da52 <ReservedFilename::~ReservedFilename()>:
c000da52:	83 ec 0c             	sub    esp,0xc
c000da55:	83 ec 0c             	sub    esp,0xc
c000da58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5c:	e8 cd ff ff ff       	call   c000da2e <ReservedFilename::~ReservedFilename()>
c000da61:	83 c4 10             	add    esp,0x10
c000da64:	83 ec 08             	sub    esp,0x8
c000da67:	6a 0c                	push   0xc
c000da69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6d:	e8 8d 12 00 00       	call   c000ecff <operator delete(void*, unsigned long)>
c000da72:	83 c4 10             	add    esp,0x10
c000da75:	83 c4 0c             	add    esp,0xc
c000da78:	c3                   	ret    

c000da79 <getFromFileDescriptor(int)>:
c000da79:	83 ec 18             	sub    esp,0x18
c000da7c:	68 b0 2e 02 c0       	push   0xc0022eb0
c000da81:	e8 68 0a 01 00       	call   c001e4ee <LinkedList<UnixFile>::getFirstElement()>
c000da86:	83 c4 10             	add    esp,0x10
c000da89:	85 c0                	test   eax,eax
c000da8b:	74 18                	je     c000daa5 <getFromFileDescriptor(int)+0x2c>
c000da8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da91:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c000da94:	74 0f                	je     c000daa5 <getFromFileDescriptor(int)+0x2c>
c000da96:	52                   	push   edx
c000da97:	52                   	push   edx
c000da98:	50                   	push   eax
c000da99:	68 b0 2e 02 c0       	push   0xc0022eb0
c000da9e:	e8 f5 0a 01 00       	call   c001e598 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000daa3:	eb e1                	jmp    c000da86 <getFromFileDescriptor(int)+0xd>
c000daa5:	83 c4 0c             	add    esp,0xc
c000daa8:	c3                   	ret    

c000daa9 <__static_initialization_and_destruction_0(int, int)>:
c000daa9:	83 ec 0c             	sub    esp,0xc
c000daac:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dab1:	75 34                	jne    c000dae7 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dab3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dabb:	75 2a                	jne    c000dae7 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dabd:	83 ec 0c             	sub    esp,0xc
c000dac0:	68 b0 2e 02 c0       	push   0xc0022eb0
c000dac5:	e8 f8 08 01 00       	call   c001e3c2 <LinkedList<UnixFile>::LinkedList()>
c000daca:	83 c4 10             	add    esp,0x10
c000dacd:	83 ec 04             	sub    esp,0x4
c000dad0:	68 f8 21 02 c0       	push   0xc00221f8
c000dad5:	68 b0 2e 02 c0       	push   0xc0022eb0
c000dada:	68 c0 e3 01 c0       	push   0xc001e3c0
c000dadf:	e8 97 11 00 00       	call   c000ec7b <__cxa_atexit>
c000dae4:	83 c4 10             	add    esp,0x10
c000dae7:	90                   	nop
c000dae8:	83 c4 0c             	add    esp,0xc
c000daeb:	c3                   	ret    

c000daec <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000daec:	83 ec 0c             	sub    esp,0xc
c000daef:	83 ec 08             	sub    esp,0x8
c000daf2:	68 ff ff 00 00       	push   0xffff
c000daf7:	6a 01                	push   0x1
c000daf9:	e8 ab ff ff ff       	call   c000daa9 <__static_initialization_and_destruction_0(int, int)>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	83 c4 0c             	add    esp,0xc
c000db04:	c3                   	ret    
c000db05:	90                   	nop

c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000db06:	53                   	push   ebx
c000db07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db0b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000db0f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000db15:	89 c8                	mov    eax,ecx
c000db17:	d1 e8                	shr    eax,1
c000db19:	03 05 88 22 02 c0    	add    eax,DWORD PTR ds:0xc0022288
c000db1f:	83 e1 01             	and    ecx,0x1
c000db22:	8a 10                	mov    dl,BYTE PTR [eax]
c000db24:	75 09                	jne    c000db2f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000db26:	83 e2 f0             	and    edx,0xfffffff0
c000db29:	09 da                	or     edx,ebx
c000db2b:	88 10                	mov    BYTE PTR [eax],dl
c000db2d:	5b                   	pop    ebx
c000db2e:	c3                   	ret    
c000db2f:	c1 e3 04             	shl    ebx,0x4
c000db32:	83 e2 0f             	and    edx,0xf
c000db35:	09 da                	or     edx,ebx
c000db37:	88 10                	mov    BYTE PTR [eax],dl
c000db39:	5b                   	pop    ebx
c000db3a:	c3                   	ret    

c000db3b <Virt::getPageState(unsigned long)>:
c000db3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db3f:	8b 0d 88 22 02 c0    	mov    ecx,DWORD PTR ds:0xc0022288
c000db45:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000db4b:	89 d0                	mov    eax,edx
c000db4d:	d1 e8                	shr    eax,1
c000db4f:	83 e2 01             	and    edx,0x1
c000db52:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000db55:	75 04                	jne    c000db5b <Virt::getPageState(unsigned long)+0x20>
c000db57:	83 e0 0f             	and    eax,0xf
c000db5a:	c3                   	ret    
c000db5b:	c0 e8 04             	shr    al,0x4
c000db5e:	c3                   	ret    

c000db5f <Virt::allocateKernelVirtualPages(int)>:
c000db5f:	55                   	push   ebp
c000db60:	31 ed                	xor    ebp,ebp
c000db62:	57                   	push   edi
c000db63:	56                   	push   esi
c000db64:	53                   	push   ebx
c000db65:	31 db                	xor    ebx,ebx
c000db67:	83 ec 1c             	sub    esp,0x1c
c000db6a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000db6e:	8b 3d 84 22 02 c0    	mov    edi,DWORD PTR ds:0xc0022284
c000db74:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000db79:	57                   	push   edi
c000db7a:	e8 bc ff ff ff       	call   c000db3b <Virt::getPageState(unsigned long)>
c000db7f:	5a                   	pop    edx
c000db80:	84 c0                	test   al,al
c000db82:	75 3a                	jne    c000dbbe <Virt::allocateKernelVirtualPages(int)+0x5f>
c000db84:	85 db                	test   ebx,ebx
c000db86:	75 02                	jne    c000db8a <Virt::allocateKernelVirtualPages(int)+0x2b>
c000db88:	89 fd                	mov    ebp,edi
c000db8a:	43                   	inc    ebx
c000db8b:	39 f3                	cmp    ebx,esi
c000db8d:	74 5a                	je     c000dbe9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000db8f:	47                   	inc    edi
c000db90:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000db96:	76 31                	jbe    c000dbc9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000db98:	c7 05 84 22 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022284,0xc8000
c000dba2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dba7:	75 28                	jne    c000dbd1 <Virt::allocateKernelVirtualPages(int)+0x72>
c000dba9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000dbae:	bf 00 80 0c 00       	mov    edi,0xc8000
c000dbb3:	57                   	push   edi
c000dbb4:	e8 82 ff ff ff       	call   c000db3b <Virt::getPageState(unsigned long)>
c000dbb9:	5a                   	pop    edx
c000dbba:	84 c0                	test   al,al
c000dbbc:	74 c6                	je     c000db84 <Virt::allocateKernelVirtualPages(int)+0x25>
c000dbbe:	31 db                	xor    ebx,ebx
c000dbc0:	47                   	inc    edi
c000dbc1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dbc7:	77 cf                	ja     c000db98 <Virt::allocateKernelVirtualPages(int)+0x39>
c000dbc9:	89 3d 84 22 02 c0    	mov    DWORD PTR ds:0xc0022284,edi
c000dbcf:	eb a8                	jmp    c000db79 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dbd1:	83 ec 0c             	sub    esp,0xc
c000dbd4:	68 28 00 02 c0       	push   0xc0020028
c000dbd9:	e8 6a 6d 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000dbde:	8b 3d 84 22 02 c0    	mov    edi,DWORD PTR ds:0xc0022284
c000dbe4:	83 c4 10             	add    esp,0x10
c000dbe7:	eb 90                	jmp    c000db79 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dbe9:	89 2d 84 22 02 c0    	mov    DWORD PTR ds:0xc0022284,ebp
c000dbef:	4b                   	dec    ebx
c000dbf0:	74 5f                	je     c000dc51 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000dbf2:	85 f6                	test   esi,esi
c000dbf4:	74 3d                	je     c000dc33 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dbf6:	89 e8                	mov    eax,ebp
c000dbf8:	31 db                	xor    ebx,ebx
c000dbfa:	8d 7e ff             	lea    edi,[esi-0x1]
c000dbfd:	eb 14                	jmp    c000dc13 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000dbff:	6a 01                	push   0x1
c000dc01:	43                   	inc    ebx
c000dc02:	50                   	push   eax
c000dc03:	e8 fe fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc08:	58                   	pop    eax
c000dc09:	39 f3                	cmp    ebx,esi
c000dc0b:	5a                   	pop    edx
c000dc0c:	74 25                	je     c000dc33 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000dc0e:	a1 84 22 02 c0       	mov    eax,ds:0xc0022284
c000dc13:	8d 50 01             	lea    edx,[eax+0x1]
c000dc16:	85 db                	test   ebx,ebx
c000dc18:	89 15 84 22 02 c0    	mov    DWORD PTR ds:0xc0022284,edx
c000dc1e:	74 20                	je     c000dc40 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000dc20:	39 df                	cmp    edi,ebx
c000dc22:	75 db                	jne    c000dbff <Virt::allocateKernelVirtualPages(int)+0xa0>
c000dc24:	6a 03                	push   0x3
c000dc26:	43                   	inc    ebx
c000dc27:	50                   	push   eax
c000dc28:	e8 d9 fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc2d:	59                   	pop    ecx
c000dc2e:	39 f3                	cmp    ebx,esi
c000dc30:	58                   	pop    eax
c000dc31:	75 db                	jne    c000dc0e <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dc33:	83 c4 1c             	add    esp,0x1c
c000dc36:	89 e8                	mov    eax,ebp
c000dc38:	5b                   	pop    ebx
c000dc39:	c1 e0 0c             	shl    eax,0xc
c000dc3c:	5e                   	pop    esi
c000dc3d:	5f                   	pop    edi
c000dc3e:	5d                   	pop    ebp
c000dc3f:	c3                   	ret    
c000dc40:	6a 02                	push   0x2
c000dc42:	bb 01 00 00 00       	mov    ebx,0x1
c000dc47:	50                   	push   eax
c000dc48:	e8 b9 fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc4d:	58                   	pop    eax
c000dc4e:	5a                   	pop    edx
c000dc4f:	eb bd                	jmp    c000dc0e <Virt::allocateKernelVirtualPages(int)+0xaf>
c000dc51:	6a 04                	push   0x4
c000dc53:	8d 45 01             	lea    eax,[ebp+0x1]
c000dc56:	55                   	push   ebp
c000dc57:	a3 84 22 02 c0       	mov    ds:0xc0022284,eax
c000dc5c:	e8 a5 fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc61:	59                   	pop    ecx
c000dc62:	89 e8                	mov    eax,ebp
c000dc64:	5b                   	pop    ebx
c000dc65:	c1 e0 0c             	shl    eax,0xc
c000dc68:	83 c4 1c             	add    esp,0x1c
c000dc6b:	5b                   	pop    ebx
c000dc6c:	5e                   	pop    esi
c000dc6d:	5f                   	pop    edi
c000dc6e:	5d                   	pop    ebp
c000dc6f:	c3                   	ret    

c000dc70 <Virt::virtualMemorySetup()>:
c000dc70:	53                   	push   ebx
c000dc71:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dc76:	83 ec 08             	sub    esp,0x8
c000dc79:	6a 0f                	push   0xf
c000dc7b:	53                   	push   ebx
c000dc7c:	43                   	inc    ebx
c000dc7d:	e8 84 fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dc82:	59                   	pop    ecx
c000dc83:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dc89:	58                   	pop    eax
c000dc8a:	75 ed                	jne    c000dc79 <Virt::virtualMemorySetup()+0x9>
c000dc8c:	83 ec 08             	sub    esp,0x8
c000dc8f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000dc94:	68 00 00 00 c8       	push   0xc8000000
c000dc99:	68 d3 01 02 c0       	push   0xc00201d3
c000dc9e:	e8 3c 11 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000dca3:	58                   	pop    eax
c000dca4:	5a                   	pop    edx
c000dca5:	68 00 f0 ff ef       	push   0xeffff000
c000dcaa:	68 e7 01 02 c0       	push   0xc00201e7
c000dcaf:	e8 2b 11 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000dcb4:	83 c4 10             	add    esp,0x10
c000dcb7:	83 ec 08             	sub    esp,0x8
c000dcba:	6a 00                	push   0x0
c000dcbc:	53                   	push   ebx
c000dcbd:	43                   	inc    ebx
c000dcbe:	e8 43 fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dcc3:	83 c4 10             	add    esp,0x10
c000dcc6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000dccc:	75 e9                	jne    c000dcb7 <Virt::virtualMemorySetup()+0x47>
c000dcce:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000dcd3:	83 ec 08             	sub    esp,0x8
c000dcd6:	6a 0f                	push   0xf
c000dcd8:	53                   	push   ebx
c000dcd9:	43                   	inc    ebx
c000dcda:	e8 27 fe ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dcdf:	83 c4 10             	add    esp,0x10
c000dce2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000dce8:	75 e9                	jne    c000dcd3 <Virt::virtualMemorySetup()+0x63>
c000dcea:	83 c4 08             	add    esp,0x8
c000dced:	5b                   	pop    ebx
c000dcee:	c3                   	ret    

c000dcef <Virt::getAKernelVAS()>:
c000dcef:	a1 bc 2e 02 c0       	mov    eax,ds:0xc0022ebc
c000dcf4:	c3                   	ret    

c000dcf5 <Virt::setupPageSwapping(int)>:
c000dcf5:	57                   	push   edi
c000dcf6:	56                   	push   esi
c000dcf7:	53                   	push   ebx
c000dcf8:	83 ec 1c             	sub    esp,0x1c
c000dcfb:	68 14 01 00 00       	push   0x114
c000dd00:	e8 eb 0f 00 00       	call   c000ecf0 <operator new(unsigned long)>
c000dd05:	83 c4 0c             	add    esp,0xc
c000dd08:	89 c6                	mov    esi,eax
c000dd0a:	ff 35 b4 41 02 c0    	push   DWORD PTR ds:0xc00241b4
c000dd10:	68 fb 01 02 c0       	push   0xc00201fb
c000dd15:	50                   	push   eax
c000dd16:	e8 f3 15 00 00       	call   c000f30e <File::File(char const*, Process*)>
c000dd1b:	89 34 24             	mov    DWORD PTR [esp],esi
c000dd1e:	e8 c7 17 00 00       	call   c000f4ea <File::unlink()>
c000dd23:	58                   	pop    eax
c000dd24:	5a                   	pop    edx
c000dd25:	6a 12                	push   0x12
c000dd27:	56                   	push   esi
c000dd28:	e8 45 16 00 00       	call   c000f372 <File::open(FileOpenMode)>
c000dd2d:	83 c4 10             	add    esp,0x10
c000dd30:	85 c0                	test   eax,eax
c000dd32:	0f 85 bf 00 00 00    	jne    c000ddf7 <Virt::setupPageSwapping(int)+0x102>
c000dd38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dd3c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd44:	c1 e3 08             	shl    ebx,0x8
c000dd47:	83 ec 0c             	sub    esp,0xc
c000dd4a:	68 00 00 01 00       	push   0x10000
c000dd4f:	e8 c4 de ff ff       	call   c000bc18 <malloc>
c000dd54:	83 c4 0c             	add    esp,0xc
c000dd57:	89 c7                	mov    edi,eax
c000dd59:	68 00 00 01 00       	push   0x10000
c000dd5e:	6a 00                	push   0x0
c000dd60:	50                   	push   eax
c000dd61:	e8 a2 28 ff ff       	call   c0000608 <memset>
c000dd66:	83 c4 10             	add    esp,0x10
c000dd69:	85 db                	test   ebx,ebx
c000dd6b:	79 03                	jns    c000dd70 <Virt::setupPageSwapping(int)+0x7b>
c000dd6d:	83 c3 0f             	add    ebx,0xf
c000dd70:	c1 fb 04             	sar    ebx,0x4
c000dd73:	4b                   	dec    ebx
c000dd74:	83 fb ff             	cmp    ebx,0xffffffff
c000dd77:	74 4b                	je     c000ddc4 <Virt::setupPageSwapping(int)+0xcf>
c000dd79:	83 ec 0c             	sub    esp,0xc
c000dd7c:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd7e:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd82:	52                   	push   edx
c000dd83:	57                   	push   edi
c000dd84:	6a 00                	push   0x0
c000dd86:	68 00 00 01 00       	push   0x10000
c000dd8b:	56                   	push   esi
c000dd8c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000dd8f:	83 c4 20             	add    esp,0x20
c000dd92:	85 c0                	test   eax,eax
c000dd94:	75 4e                	jne    c000dde4 <Virt::setupPageSwapping(int)+0xef>
c000dd96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd9a:	3d 00 00 01 00       	cmp    eax,0x10000
c000dd9f:	74 d2                	je     c000dd73 <Virt::setupPageSwapping(int)+0x7e>
c000dda1:	83 ec 08             	sub    esp,0x8
c000dda4:	4b                   	dec    ebx
c000dda5:	50                   	push   eax
c000dda6:	68 4e 02 02 c0       	push   0xc002024e
c000ddab:	e8 2f 10 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000ddb0:	c7 04 24 57 02 02 c0 	mov    DWORD PTR [esp],0xc0020257
c000ddb7:	e8 8c 6b 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000ddbc:	83 c4 10             	add    esp,0x10
c000ddbf:	83 fb ff             	cmp    ebx,0xffffffff
c000ddc2:	75 b5                	jne    c000dd79 <Virt::setupPageSwapping(int)+0x84>
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	56                   	push   esi
c000ddc8:	e8 03 16 00 00       	call   c000f3d0 <File::close()>
c000ddcd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddd0:	e8 63 de ff ff       	call   c000bc38 <rfree>
c000ddd5:	89 34 24             	mov    DWORD PTR [esp],esi
c000ddd8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ddda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dddd:	83 c4 20             	add    esp,0x20
c000dde0:	5b                   	pop    ebx
c000dde1:	5e                   	pop    esi
c000dde2:	5f                   	pop    edi
c000dde3:	c3                   	ret    
c000dde4:	83 ec 08             	sub    esp,0x8
c000dde7:	50                   	push   eax
c000dde8:	68 36 02 02 c0       	push   0xc0020236
c000dded:	e8 ed 0f 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	eb 9f                	jmp    c000dd96 <Virt::setupPageSwapping(int)+0xa1>
c000ddf7:	83 ec 08             	sub    esp,0x8
c000ddfa:	50                   	push   eax
c000ddfb:	68 12 02 02 c0       	push   0xc0020212
c000de00:	e8 da 0f 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000de05:	c7 04 24 1b 02 02 c0 	mov    DWORD PTR [esp],0xc002021b
c000de0c:	e8 37 6b 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000de11:	83 c4 10             	add    esp,0x10
c000de14:	e9 1f ff ff ff       	jmp    c000dd38 <Virt::setupPageSwapping(int)+0x43>
c000de19:	90                   	nop

c000de1a <VAS::VAS()>:
c000de1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000de25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de29:	a3 bc 2e 02 c0       	mov    ds:0xc0022ebc,eax
c000de2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de32:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000de36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de3a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000de3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de41:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000de48:	90                   	nop
c000de49:	c3                   	ret    

c000de4a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000de4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4e:	89 c2                	mov    edx,eax
c000de50:	c1 e8 0a             	shr    eax,0xa
c000de53:	c1 ea 16             	shr    edx,0x16
c000de56:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000de5b:	19 c9                	sbb    ecx,ecx
c000de5d:	c1 e2 0c             	shl    edx,0xc
c000de60:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000de66:	25 fc 0f 00 00       	and    eax,0xffc
c000de6b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000de72:	01 d0                	add    eax,edx
c000de74:	c3                   	ret    
c000de75:	90                   	nop

c000de76 <VAS::getPageTableEntry(unsigned long)>:
c000de76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000de7a:	89 ca                	mov    edx,ecx
c000de7c:	c1 e9 0a             	shr    ecx,0xa
c000de7f:	c1 ea 16             	shr    edx,0x16
c000de82:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000de88:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000de8e:	c1 e0 0c             	shl    eax,0xc
c000de91:	8d 04 08             	lea    eax,[eax+ecx*1]
c000de94:	c3                   	ret    

c000de95 <Virt::freeKernelVirtualPages(unsigned long)>:
c000de95:	57                   	push   edi
c000de96:	56                   	push   esi
c000de97:	be 01 00 00 00       	mov    esi,0x1
c000de9c:	53                   	push   ebx
c000de9d:	83 ec 10             	sub    esp,0x10
c000dea0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000dea4:	c1 eb 0c             	shr    ebx,0xc
c000dea7:	eb 3f                	jmp    c000dee8 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000dea9:	e8 41 fe ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000deae:	83 ec 08             	sub    esp,0x8
c000deb1:	57                   	push   edi
c000deb2:	50                   	push   eax
c000deb3:	e8 be ff ff ff       	call   c000de76 <VAS::getPageTableEntry(unsigned long)>
c000deb8:	83 c4 10             	add    esp,0x10
c000debb:	8b 00                	mov    eax,DWORD PTR [eax]
c000debd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000dec1:	f6 c4 04             	test   ah,0x4
c000dec4:	75 5f                	jne    c000df25 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000dec6:	80 fa 04             	cmp    dl,0x4
c000dec9:	74 78                	je     c000df43 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000decb:	80 fa 02             	cmp    dl,0x2
c000dece:	0f 84 88 00 00 00    	je     c000df5c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ded4:	80 fa 03             	cmp    dl,0x3
c000ded7:	0f 84 ad 00 00 00    	je     c000df8a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000dedd:	fe ca                	dec    dl
c000dedf:	0f 84 92 00 00 00    	je     c000df77 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000dee5:	43                   	inc    ebx
c000dee6:	31 f6                	xor    esi,esi
c000dee8:	53                   	push   ebx
c000dee9:	e8 4d fc ff ff       	call   c000db3b <Virt::getPageState(unsigned long)>
c000deee:	5f                   	pop    edi
c000deef:	89 df                	mov    edi,ebx
c000def1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000def5:	c1 e7 0c             	shl    edi,0xc
c000def8:	84 c0                	test   al,al
c000defa:	75 ad                	jne    c000dea9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	68 5d 02 02 c0       	push   0xc002025d
c000df04:	e8 3f 6a 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000df09:	e8 e1 fd ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000df0e:	5a                   	pop    edx
c000df0f:	59                   	pop    ecx
c000df10:	57                   	push   edi
c000df11:	50                   	push   eax
c000df12:	e8 5f ff ff ff       	call   c000de76 <VAS::getPageTableEntry(unsigned long)>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000df1c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000df20:	f6 c4 04             	test   ah,0x4
c000df23:	74 c0                	je     c000dee5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000df25:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000df29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	50                   	push   eax
c000df32:	e8 01 e2 ff ff       	call   c000c138 <Phys::freePage(unsigned long)>
c000df37:	83 c4 10             	add    esp,0x10
c000df3a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000df3e:	80 fa 04             	cmp    dl,0x4
c000df41:	75 88                	jne    c000decb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000df43:	89 f0                	mov    eax,esi
c000df45:	84 c0                	test   al,al
c000df47:	75 47                	jne    c000df90 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000df49:	c7 44 24 20 48 00 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020048
c000df51:	83 c4 10             	add    esp,0x10
c000df54:	5b                   	pop    ebx
c000df55:	5e                   	pop    esi
c000df56:	5f                   	pop    edi
c000df57:	e9 ec 69 00 00       	jmp    c0014948 <Krnl::panic(char const*)>
c000df5c:	89 f0                	mov    eax,esi
c000df5e:	84 c0                	test   al,al
c000df60:	75 15                	jne    c000df77 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000df62:	83 ec 0c             	sub    esp,0xc
c000df65:	68 79 02 02 c0       	push   0xc0020279
c000df6a:	e8 d9 69 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	e9 6e ff ff ff       	jmp    c000dee5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000df77:	83 ec 08             	sub    esp,0x8
c000df7a:	6a 00                	push   0x0
c000df7c:	53                   	push   ebx
c000df7d:	e8 84 fb ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	e9 5b ff ff ff       	jmp    c000dee5 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000df8a:	89 f0                	mov    eax,esi
c000df8c:	84 c0                	test   al,al
c000df8e:	75 15                	jne    c000dfa5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000df90:	83 ec 08             	sub    esp,0x8
c000df93:	6a 00                	push   0x0
c000df95:	53                   	push   ebx
c000df96:	e8 6b fb ff ff       	call   c000db06 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	5b                   	pop    ebx
c000dfa2:	5e                   	pop    esi
c000dfa3:	5f                   	pop    edi
c000dfa4:	c3                   	ret    
c000dfa5:	c7 44 24 20 95 02 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020295
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	5b                   	pop    ebx
c000dfb1:	5e                   	pop    esi
c000dfb2:	5f                   	pop    edi
c000dfb3:	e9 90 69 00 00       	jmp    c0014948 <Krnl::panic(char const*)>

c000dfb8 <VAS::freeAllocatedPages(unsigned long)>:
c000dfb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dfc0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000dfc4:	74 09                	je     c000dfcf <VAS::freeAllocatedPages(unsigned long)+0x17>
c000dfc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfca:	e9 c6 fe ff ff       	jmp    c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c000dfcf:	c7 44 24 04 6c 00 02 c0 	mov    DWORD PTR [esp+0x4],0xc002006c
c000dfd7:	e9 03 0e 00 00       	jmp    c000eddf <Dbg::kprintf(char const*, ...)>

c000dfdc <VAS::virtualToPhysical(unsigned long)>:
c000dfdc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dfe0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dfe4:	e8 8d fe ff ff       	call   c000de76 <VAS::getPageTableEntry(unsigned long)>
c000dfe9:	5a                   	pop    edx
c000dfea:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfec:	59                   	pop    ecx
c000dfed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000dff2:	c3                   	ret    
c000dff3:	90                   	nop

c000dff4 <VAS::mapOtherVASIn(bool, VAS*)>:
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000dffc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e000:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e007:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e00a:	19 c0                	sbb    eax,eax
c000e00c:	83 ca 03             	or     edx,0x3
c000e00f:	83 e0 fc             	and    eax,0xfffffffc
c000e012:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e019:	e8 87 03 01 00       	call   c001e3a5 <CPU::readCR3()>
c000e01e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e022:	83 c4 0c             	add    esp,0xc
c000e025:	e9 8d 03 01 00       	jmp    c001e3b7 <CPU::writeCR3(unsigned long)>

c000e02a <VAS::~VAS()>:
c000e02a:	83 ec 2c             	sub    esp,0x2c
c000e02d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e035:	e8 d2 95 00 00       	call   c001760c <lockScheduler()>
c000e03a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e03f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e041:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e044:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e04a:	83 ec 04             	sub    esp,0x4
c000e04d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e051:	6a 01                	push   0x1
c000e053:	50                   	push   eax
c000e054:	e8 9b ff ff ff       	call   c000dff4 <VAS::mapOtherVASIn(bool, VAS*)>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e064:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e06c:	0f 8f d7 00 00 00    	jg     c000e149 <VAS::~VAS()+0x11f>
c000e072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e076:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e079:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e07d:	c1 e2 02             	shl    edx,0x2
c000e080:	01 d0                	add    eax,edx
c000e082:	8b 00                	mov    eax,DWORD PTR [eax]
c000e084:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08c:	83 e0 01             	and    eax,0x1
c000e08f:	0f 84 ab 00 00 00    	je     c000e140 <VAS::~VAS()+0x116>
c000e095:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e09d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e0a5:	7f 75                	jg     c000e11c <VAS::~VAS()+0xf2>
c000e0a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0ab:	c1 e0 0a             	shl    eax,0xa
c000e0ae:	89 c2                	mov    edx,eax
c000e0b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e0b4:	01 d0                	add    eax,edx
c000e0b6:	c1 e0 0c             	shl    eax,0xc
c000e0b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0bd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e0c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e0c7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e0cd:	83 ec 04             	sub    esp,0x4
c000e0d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0d4:	6a 01                	push   0x1
c000e0d6:	50                   	push   eax
c000e0d7:	e8 6e fd ff ff       	call   c000de4a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e0dc:	83 c4 10             	add    esp,0x10
c000e0df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0f1:	25 01 04 00 00       	and    eax,0x401
c000e0f6:	3d 01 04 00 00       	cmp    eax,0x401
c000e0fb:	75 19                	jne    c000e116 <VAS::~VAS()+0xec>
c000e0fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e101:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e106:	83 ec 0c             	sub    esp,0xc
c000e109:	50                   	push   eax
c000e10a:	e8 29 e0 ff ff       	call   c000c138 <Phys::freePage(unsigned long)>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e116:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e11a:	eb 81                	jmp    c000e09d <VAS::~VAS()+0x73>
c000e11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e120:	25 00 04 00 00       	and    eax,0x400
c000e125:	74 19                	je     c000e140 <VAS::~VAS()+0x116>
c000e127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e130:	83 ec 0c             	sub    esp,0xc
c000e133:	50                   	push   eax
c000e134:	e8 ff df ff ff       	call   c000c138 <Phys::freePage(unsigned long)>
c000e139:	83 c4 10             	add    esp,0x10
c000e13c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e140:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e144:	e9 1b ff ff ff       	jmp    c000e064 <VAS::~VAS()+0x3a>
c000e149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e14d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e150:	83 ec 0c             	sub    esp,0xc
c000e153:	50                   	push   eax
c000e154:	e8 3c fd ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e159:	83 c4 10             	add    esp,0x10
c000e15c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e160:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e163:	83 ec 0c             	sub    esp,0xc
c000e166:	50                   	push   eax
c000e167:	e8 cc df ff ff       	call   c000c138 <Phys::freePage(unsigned long)>
c000e16c:	83 c4 10             	add    esp,0x10
c000e16f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e177:	c1 e0 02             	shl    eax,0x2
c000e17a:	83 ec 08             	sub    esp,0x8
c000e17d:	50                   	push   eax
c000e17e:	68 90 00 02 c0       	push   0xc0020090
c000e183:	e8 57 0c 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e188:	83 c4 10             	add    esp,0x10
c000e18b:	e8 7e 94 00 00       	call   c001760e <unlockScheduler()>
c000e190:	90                   	nop
c000e191:	83 c4 2c             	add    esp,0x2c
c000e194:	c3                   	ret    
c000e195:	90                   	nop

c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e196:	55                   	push   ebp
c000e197:	57                   	push   edi
c000e198:	56                   	push   esi
c000e199:	53                   	push   ebx
c000e19a:	83 ec 1c             	sub    esp,0x1c
c000e19d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e1a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e1a5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e1ab:	77 08                	ja     c000e1b5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e1ad:	0f 20 d8             	mov    eax,cr3
c000e1b0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e1b3:	75 47                	jne    c000e1fc <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e1b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e1b9:	09 d8                	or     eax,ebx
c000e1bb:	a9 ff 0f 00 00       	test   eax,0xfff
c000e1c0:	75 57                	jne    c000e219 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e1c2:	89 de                	mov    esi,ebx
c000e1c4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e1c7:	c1 ee 16             	shr    esi,0x16
c000e1ca:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e1d1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e1d5:	74 54                	je     c000e22b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e1d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1db:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e1e1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1e5:	c1 e6 0c             	shl    esi,0xc
c000e1e8:	c1 eb 0a             	shr    ebx,0xa
c000e1eb:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e1f1:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e1f4:	83 c4 1c             	add    esp,0x1c
c000e1f7:	5b                   	pop    ebx
c000e1f8:	5e                   	pop    esi
c000e1f9:	5f                   	pop    edi
c000e1fa:	5d                   	pop    ebp
c000e1fb:	c3                   	ret    
c000e1fc:	83 ec 0c             	sub    esp,0xc
c000e1ff:	68 b0 00 02 c0       	push   0xc00200b0
c000e204:	e8 d6 0b 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e209:	83 c4 10             	add    esp,0x10
c000e20c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e210:	09 d8                	or     eax,ebx
c000e212:	a9 ff 0f 00 00       	test   eax,0xfff
c000e217:	74 a9                	je     c000e1c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e219:	83 ec 0c             	sub    esp,0xc
c000e21c:	68 18 01 02 c0       	push   0xc0020118
c000e221:	e8 22 67 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	eb 97                	jmp    c000e1c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e22b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22f:	e8 8e df ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e234:	89 c5                	mov    ebp,eax
c000e236:	e8 b4 fa ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000e23b:	83 ec 0c             	sub    esp,0xc
c000e23e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e242:	6a 01                	push   0x1
c000e244:	e8 16 f9 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e249:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e250:	6a 01                	push   0x1
c000e252:	50                   	push   eax
c000e253:	55                   	push   ebp
c000e254:	81 cd 07 04 00 00    	or     ebp,0x407
c000e25a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e25e:	51                   	push   ecx
c000e25f:	e8 1e 02 00 00       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e264:	83 c4 1c             	add    esp,0x1c
c000e267:	68 00 10 00 00       	push   0x1000
c000e26c:	6a 00                	push   0x0
c000e26e:	50                   	push   eax
c000e26f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e273:	e8 90 23 ff ff       	call   c0000608 <memset>
c000e278:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e27c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e27f:	e8 11 fc ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e284:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e288:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e28b:	83 c4 10             	add    esp,0x10
c000e28e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e291:	e9 41 ff ff ff       	jmp    c000e1d7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e296 <VAS::allocatePages(int, int)>:
c000e296:	55                   	push   ebp
c000e297:	57                   	push   edi
c000e298:	56                   	push   esi
c000e299:	53                   	push   ebx
c000e29a:	83 ec 1c             	sub    esp,0x1c
c000e29d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e2a1:	e8 9c 59 00 00       	call   c0013c42 <thisCPU()>
c000e2a6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e2ac:	83 e0 01             	and    eax,0x1
c000e2af:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e2b3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e2b7:	0f 85 d7 00 00 00    	jne    c000e394 <VAS::allocatePages(int, int)+0xfe>
c000e2bd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e2c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2c4:	85 c0                	test   eax,eax
c000e2c6:	0f 84 ac 00 00 00    	je     c000e378 <VAS::allocatePages(int, int)+0xe2>
c000e2cc:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e2d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e2d4:	c1 e6 0c             	shl    esi,0xc
c000e2d7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e2db:	85 c0                	test   eax,eax
c000e2dd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e2e0:	7e 33                	jle    c000e315 <VAS::allocatePages(int, int)+0x7f>
c000e2e2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e2e6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e2ea:	81 cd 00 04 00 00    	or     ebp,0x400
c000e2f0:	e8 cd de ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e2f5:	55                   	push   ebp
c000e2f6:	53                   	push   ebx
c000e2f7:	50                   	push   eax
c000e2f8:	57                   	push   edi
c000e2f9:	e8 98 fe ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e2fe:	83 c4 10             	add    esp,0x10
c000e301:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e306:	74 03                	je     c000e30b <VAS::allocatePages(int, int)+0x75>
c000e308:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e30b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e311:	39 de                	cmp    esi,ebx
c000e313:	75 db                	jne    c000e2f0 <VAS::allocatePages(int, int)+0x5a>
c000e315:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e31a:	74 3f                	je     c000e35b <VAS::allocatePages(int, int)+0xc5>
c000e31c:	c1 ee 0a             	shr    esi,0xa
c000e31f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e323:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e329:	c1 eb 0a             	shr    ebx,0xa
c000e32c:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e332:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e338:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e33e:	39 f3                	cmp    ebx,esi
c000e340:	77 0d                	ja     c000e34f <VAS::allocatePages(int, int)+0xb9>
c000e342:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e345:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e34b:	39 de                	cmp    esi,ebx
c000e34d:	73 f3                	jae    c000e342 <VAS::allocatePages(int, int)+0xac>
c000e34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e353:	83 c4 1c             	add    esp,0x1c
c000e356:	5b                   	pop    ebx
c000e357:	5e                   	pop    esi
c000e358:	5f                   	pop    edi
c000e359:	5d                   	pop    ebp
c000e35a:	c3                   	ret    
c000e35b:	e8 45 00 01 00       	call   c001e3a5 <CPU::readCR3()>
c000e360:	83 ec 0c             	sub    esp,0xc
c000e363:	50                   	push   eax
c000e364:	e8 4e 00 01 00       	call   c001e3b7 <CPU::writeCR3(unsigned long)>
c000e369:	83 c4 10             	add    esp,0x10
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	83 c4 1c             	add    esp,0x1c
c000e373:	5b                   	pop    ebx
c000e374:	5e                   	pop    esi
c000e375:	5f                   	pop    edi
c000e376:	5d                   	pop    ebp
c000e377:	c3                   	ret    
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	68 3c 01 02 c0       	push   0xc002013c
c000e380:	e8 c3 65 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000e385:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e388:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e38c:	83 c4 10             	add    esp,0x10
c000e38f:	e9 38 ff ff ff       	jmp    c000e2cc <VAS::allocatePages(int, int)+0x36>
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e39b:	e8 bf f7 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e3a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e3a4:	83 c4 10             	add    esp,0x10
c000e3a7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e3ac:	0f 87 94 00 00 00    	ja     c000e446 <VAS::allocatePages(int, int)+0x1b0>
c000e3b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e3b6:	85 d2                	test   edx,edx
c000e3b8:	7e 3c                	jle    c000e3f6 <VAS::allocatePages(int, int)+0x160>
c000e3ba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e3be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e3c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3c6:	c1 e5 0c             	shl    ebp,0xc
c000e3c9:	81 ce 00 04 00 00    	or     esi,0x400
c000e3cf:	01 dd                	add    ebp,ebx
c000e3d1:	e8 ec dd ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e3d6:	56                   	push   esi
c000e3d7:	53                   	push   ebx
c000e3d8:	50                   	push   eax
c000e3d9:	57                   	push   edi
c000e3da:	e8 b7 fd ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e3df:	83 c4 10             	add    esp,0x10
c000e3e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e3e7:	74 03                	je     c000e3ec <VAS::allocatePages(int, int)+0x156>
c000e3e9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e3ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e3f2:	39 dd                	cmp    ebp,ebx
c000e3f4:	75 db                	jne    c000e3d1 <VAS::allocatePages(int, int)+0x13b>
c000e3f6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e3fb:	0f 84 5a ff ff ff    	je     c000e35b <VAS::allocatePages(int, int)+0xc5>
c000e401:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e405:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e409:	89 d3                	mov    ebx,edx
c000e40b:	c1 e0 0c             	shl    eax,0xc
c000e40e:	c1 eb 0a             	shr    ebx,0xa
c000e411:	01 d0                	add    eax,edx
c000e413:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e419:	c1 e8 0a             	shr    eax,0xa
c000e41c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e422:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e427:	2d 00 00 40 00       	sub    eax,0x400000
c000e42c:	39 c3                	cmp    ebx,eax
c000e42e:	0f 87 1b ff ff ff    	ja     c000e34f <VAS::allocatePages(int, int)+0xb9>
c000e434:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e437:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e43d:	39 d8                	cmp    eax,ebx
c000e43f:	73 f3                	jae    c000e434 <VAS::allocatePages(int, int)+0x19e>
c000e441:	e9 09 ff ff ff       	jmp    c000e34f <VAS::allocatePages(int, int)+0xb9>
c000e446:	e8 f7 57 00 00       	call   c0013c42 <thisCPU()>
c000e44b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e452:	0f 84 5a ff ff ff    	je     c000e3b2 <VAS::allocatePages(int, int)+0x11c>
c000e458:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e460:	e9 4d ff ff ff       	jmp    c000e3b2 <VAS::allocatePages(int, int)+0x11c>
c000e465:	90                   	nop

c000e466 <VAS::setCPUSpecific(unsigned long)>:
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	6a 05                	push   0x5
c000e46b:	68 00 00 40 c2       	push   0xc2400000
c000e470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e478:	e8 19 fd ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e47d:	83 c4 1c             	add    esp,0x1c
c000e480:	c3                   	ret    
c000e481:	90                   	nop

c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e482:	55                   	push   ebp
c000e483:	57                   	push   edi
c000e484:	56                   	push   esi
c000e485:	53                   	push   ebx
c000e486:	83 ec 1c             	sub    esp,0x1c
c000e489:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e48d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e491:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e495:	e8 a8 57 00 00       	call   c0013c42 <thisCPU()>
c000e49a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4a0:	83 e0 01             	and    eax,0x1
c000e4a3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e4a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4ab:	85 c0                	test   eax,eax
c000e4ad:	7e 39                	jle    c000e4e8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e4af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4b3:	89 f3                	mov    ebx,esi
c000e4b5:	c1 e0 0c             	shl    eax,0xc
c000e4b8:	01 f0                	add    eax,esi
c000e4ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4be:	55                   	push   ebp
c000e4bf:	53                   	push   ebx
c000e4c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4c4:	29 f0                	sub    eax,esi
c000e4c6:	01 d8                	add    eax,ebx
c000e4c8:	50                   	push   eax
c000e4c9:	57                   	push   edi
c000e4ca:	e8 c7 fc ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e4cf:	83 c4 10             	add    esp,0x10
c000e4d2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4d7:	74 03                	je     c000e4dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e4d9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e4dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e4e2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e4e6:	75 d6                	jne    c000e4be <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e4e8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e4ed:	74 42                	je     c000e531 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e4ef:	89 f3                	mov    ebx,esi
c000e4f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4f5:	c1 eb 0a             	shr    ebx,0xa
c000e4f8:	c1 e0 0c             	shl    eax,0xc
c000e4fb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e501:	01 f0                	add    eax,esi
c000e503:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e509:	c1 e8 0a             	shr    eax,0xa
c000e50c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e511:	2d 00 00 40 00       	sub    eax,0x400000
c000e516:	39 c3                	cmp    ebx,eax
c000e518:	77 0d                	ja     c000e527 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e51a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e51d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e523:	39 d8                	cmp    eax,ebx
c000e525:	73 f3                	jae    c000e51a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e527:	83 c4 1c             	add    esp,0x1c
c000e52a:	89 f0                	mov    eax,esi
c000e52c:	5b                   	pop    ebx
c000e52d:	5e                   	pop    esi
c000e52e:	5f                   	pop    edi
c000e52f:	5d                   	pop    ebp
c000e530:	c3                   	ret    
c000e531:	e8 6f fe 00 00       	call   c001e3a5 <CPU::readCR3()>
c000e536:	83 ec 0c             	sub    esp,0xc
c000e539:	50                   	push   eax
c000e53a:	e8 78 fe 00 00       	call   c001e3b7 <CPU::writeCR3(unsigned long)>
c000e53f:	89 f0                	mov    eax,esi
c000e541:	83 c4 10             	add    esp,0x10
c000e544:	83 c4 1c             	add    esp,0x1c
c000e547:	5b                   	pop    ebx
c000e548:	5e                   	pop    esi
c000e549:	5f                   	pop    edi
c000e54a:	5d                   	pop    ebp
c000e54b:	c3                   	ret    

c000e54c <VAS::VAS(VAS*)>:
c000e54c:	53                   	push   ebx
c000e54d:	83 ec 38             	sub    esp,0x38
c000e550:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e554:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e55b:	e8 d3 90 00 00       	call   c0017633 <lockStuff()>
c000e560:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e564:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e567:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e56b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e56e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e572:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e575:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e579:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e57c:	e8 41 dc ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e581:	89 c2                	mov    edx,eax
c000e583:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e587:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e58a:	e8 60 f7 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000e58f:	89 c3                	mov    ebx,eax
c000e591:	83 ec 0c             	sub    esp,0xc
c000e594:	6a 01                	push   0x1
c000e596:	e8 c4 f5 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e59b:	83 c4 10             	add    esp,0x10
c000e59e:	89 c2                	mov    edx,eax
c000e5a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e5a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5a7:	83 ec 0c             	sub    esp,0xc
c000e5aa:	6a 03                	push   0x3
c000e5ac:	6a 01                	push   0x1
c000e5ae:	52                   	push   edx
c000e5af:	50                   	push   eax
c000e5b0:	53                   	push   ebx
c000e5b1:	e8 cc fe ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5b6:	83 c4 20             	add    esp,0x20
c000e5b9:	89 c2                	mov    edx,eax
c000e5bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e5bf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5c2:	83 ec 04             	sub    esp,0x4
c000e5c5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e5c9:	6a 01                	push   0x1
c000e5cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e5cf:	e8 20 fa ff ff       	call   c000dff4 <VAS::mapOtherVASIn(bool, VAS*)>
c000e5d4:	83 c4 10             	add    esp,0x10
c000e5d7:	83 ec 0c             	sub    esp,0xc
c000e5da:	6a 01                	push   0x1
c000e5dc:	e8 7e f5 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e5e1:	83 c4 10             	add    esp,0x10
c000e5e4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5e8:	83 ec 0c             	sub    esp,0xc
c000e5eb:	6a 01                	push   0x1
c000e5ed:	e8 6d f5 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e5f2:	83 c4 10             	add    esp,0x10
c000e5f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e601:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e609:	0f 8f 5e 02 00 00    	jg     c000e86d <VAS::VAS(VAS*)+0x321>
c000e60f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e614:	8b 00                	mov    eax,DWORD PTR [eax]
c000e616:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e619:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e61f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e622:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e626:	c1 e2 02             	shl    edx,0x2
c000e629:	01 d0                	add    eax,edx
c000e62b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e62d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e631:	83 ec 08             	sub    esp,0x8
c000e634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e638:	68 af 02 02 c0       	push   0xc00202af
c000e63d:	e8 9d 07 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e649:	25 01 04 00 00       	and    eax,0x401
c000e64e:	3d 01 04 00 00       	cmp    eax,0x401
c000e653:	0f 85 e5 01 00 00    	jne    c000e83e <VAS::VAS(VAS*)+0x2f2>
c000e659:	83 ec 0c             	sub    esp,0xc
c000e65c:	68 c0 02 02 c0       	push   0xc00202c0
c000e661:	e8 79 07 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e666:	83 c4 10             	add    esp,0x10
c000e669:	e8 54 db ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e66e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e672:	83 ec 08             	sub    esp,0x8
c000e675:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e679:	68 d6 02 02 c0       	push   0xc00202d6
c000e67e:	e8 5c 07 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e683:	83 c4 10             	add    esp,0x10
c000e686:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e68a:	25 ff 0f 00 00       	and    eax,0xfff
c000e68f:	89 c1                	mov    ecx,eax
c000e691:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e695:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e698:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e69c:	c1 e2 02             	shl    edx,0x2
c000e69f:	01 c2                	add    edx,eax
c000e6a1:	89 c8                	mov    eax,ecx
c000e6a3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e6a7:	89 02                	mov    DWORD PTR [edx],eax
c000e6a9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e6b1:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e6b9:	0f 8f a5 01 00 00    	jg     c000e864 <VAS::VAS(VAS*)+0x318>
c000e6bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6c3:	c1 e0 0a             	shl    eax,0xa
c000e6c6:	89 c2                	mov    edx,eax
c000e6c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6cc:	01 d0                	add    eax,edx
c000e6ce:	c1 e0 0c             	shl    eax,0xc
c000e6d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e6d5:	83 ec 08             	sub    esp,0x8
c000e6d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e6e0:	e8 91 f7 ff ff       	call   c000de76 <VAS::getPageTableEntry(unsigned long)>
c000e6e5:	83 c4 10             	add    esp,0x10
c000e6e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6ee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6f8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6fe:	83 ec 04             	sub    esp,0x4
c000e701:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e705:	6a 01                	push   0x1
c000e707:	50                   	push   eax
c000e708:	e8 3d f7 ff ff       	call   c000de4a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e70d:	83 c4 10             	add    esp,0x10
c000e710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e714:	83 ec 04             	sub    esp,0x4
c000e717:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e71b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e71f:	68 68 01 02 c0       	push   0xc0020168
c000e724:	e8 b6 06 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e729:	83 c4 10             	add    esp,0x10
c000e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e730:	25 01 04 00 00       	and    eax,0x401
c000e735:	3d 01 04 00 00       	cmp    eax,0x401
c000e73a:	0f 85 db 00 00 00    	jne    c000e81b <VAS::VAS(VAS*)+0x2cf>
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	68 e5 02 02 c0       	push   0xc00202e5
c000e748:	e8 92 06 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	e8 6d da ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e759:	83 ec 08             	sub    esp,0x8
c000e75c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e760:	68 f4 02 02 c0       	push   0xc00202f4
c000e765:	e8 75 06 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e76a:	83 c4 10             	add    esp,0x10
c000e76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e771:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e776:	83 ec 08             	sub    esp,0x8
c000e779:	50                   	push   eax
c000e77a:	68 08 03 02 c0       	push   0xc0020308
c000e77f:	e8 5b 06 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e784:	83 c4 10             	add    esp,0x10
c000e787:	e8 63 f5 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	6a 03                	push   0x3
c000e791:	6a 01                	push   0x1
c000e793:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e797:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e79b:	50                   	push   eax
c000e79c:	e8 e1 fc ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7a1:	83 c4 20             	add    esp,0x20
c000e7a4:	e8 46 f5 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000e7a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e7ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	6a 03                	push   0x3
c000e7b8:	6a 01                	push   0x1
c000e7ba:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e7be:	52                   	push   edx
c000e7bf:	50                   	push   eax
c000e7c0:	e8 bd fc ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7c5:	83 c4 20             	add    esp,0x20
c000e7c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d0:	83 ec 04             	sub    esp,0x4
c000e7d3:	68 00 10 00 00       	push   0x1000
c000e7d8:	52                   	push   edx
c000e7d9:	50                   	push   eax
c000e7da:	e8 f3 1d ff ff       	call   c00005d2 <memcpy>
c000e7df:	83 c4 10             	add    esp,0x10
c000e7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e6:	25 ff 0f 00 00       	and    eax,0xfff
c000e7eb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e7ef:	89 c2                	mov    edx,eax
c000e7f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7f5:	89 10                	mov    DWORD PTR [eax],edx
c000e7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fb:	25 ff 0f 00 00       	and    eax,0xfff
c000e800:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e804:	83 ec 04             	sub    esp,0x4
c000e807:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e80b:	50                   	push   eax
c000e80c:	68 8c 01 02 c0       	push   0xc002018c
c000e811:	e8 c9 05 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e816:	83 c4 10             	add    esp,0x10
c000e819:	eb 1a                	jmp    c000e835 <VAS::VAS(VAS*)+0x2e9>
c000e81b:	83 ec 0c             	sub    esp,0xc
c000e81e:	68 1c 03 02 c0       	push   0xc002031c
c000e823:	e8 b7 05 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e828:	83 c4 10             	add    esp,0x10
c000e82b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e82f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e833:	89 10                	mov    DWORD PTR [eax],edx
c000e835:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000e839:	e9 73 fe ff ff       	jmp    c000e6b1 <VAS::VAS(VAS*)+0x165>
c000e83e:	83 ec 0c             	sub    esp,0xc
c000e841:	68 20 03 02 c0       	push   0xc0020320
c000e846:	e8 94 05 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000e84b:	83 c4 10             	add    esp,0x10
c000e84e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e852:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e855:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e859:	c1 e2 02             	shl    edx,0x2
c000e85c:	01 c2                	add    edx,eax
c000e85e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e862:	89 02                	mov    DWORD PTR [edx],eax
c000e864:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e868:	e9 94 fd ff ff       	jmp    c000e601 <VAS::VAS(VAS*)+0xb5>
c000e86d:	83 ec 0c             	sub    esp,0xc
c000e870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e874:	e8 1c f6 ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e879:	83 c4 10             	add    esp,0x10
c000e87c:	83 ec 0c             	sub    esp,0xc
c000e87f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e883:	e8 0d f6 ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e888:	83 c4 10             	add    esp,0x10
c000e88b:	e8 35 91 00 00       	call   c00179c5 <unlockStuff()>
c000e890:	90                   	nop
c000e891:	83 c4 38             	add    esp,0x38
c000e894:	5b                   	pop    ebx
c000e895:	c3                   	ret    

c000e896 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000e896:	55                   	push   ebp
c000e897:	57                   	push   edi
c000e898:	56                   	push   esi
c000e899:	53                   	push   ebx
c000e89a:	83 ec 1c             	sub    esp,0x1c
c000e89d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8a1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e8a5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000e8a9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e8ad:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8b2:	75 4a                	jne    c000e8fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000e8b4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e8b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8bb:	c1 eb 16             	shr    ebx,0x16
c000e8be:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000e8c5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000e8c9:	74 4d                	je     c000e918 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000e8cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8cf:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000e8d3:	c1 e8 0a             	shr    eax,0xa
c000e8d6:	80 fa 01             	cmp    dl,0x1
c000e8d9:	19 d2                	sbb    edx,edx
c000e8db:	c1 e3 0c             	shl    ebx,0xc
c000e8de:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000e8e2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000e8e8:	25 fc 0f 00 00       	and    eax,0xffc
c000e8ed:	01 d8                	add    eax,ebx
c000e8ef:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000e8f6:	83 c4 1c             	add    esp,0x1c
c000e8f9:	5b                   	pop    ebx
c000e8fa:	5e                   	pop    esi
c000e8fb:	5f                   	pop    edi
c000e8fc:	5d                   	pop    ebp
c000e8fd:	c3                   	ret    
c000e8fe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e902:	83 ec 0c             	sub    esp,0xc
c000e905:	68 b0 01 02 c0       	push   0xc00201b0
c000e90a:	e8 39 60 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e916:	eb 9c                	jmp    c000e8b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000e918:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e91c:	e8 a1 d8 ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e921:	89 c5                	mov    ebp,eax
c000e923:	e8 c7 f3 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e92f:	6a 01                	push   0x1
c000e931:	e8 29 f2 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e936:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e93d:	6a 01                	push   0x1
c000e93f:	50                   	push   eax
c000e940:	55                   	push   ebp
c000e941:	81 cd 07 04 00 00    	or     ebp,0x407
c000e947:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e94b:	51                   	push   ecx
c000e94c:	e8 31 fb ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e951:	83 c4 1c             	add    esp,0x1c
c000e954:	68 00 10 00 00       	push   0x1000
c000e959:	6a 00                	push   0x0
c000e95b:	50                   	push   eax
c000e95c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e960:	e8 a3 1c ff ff       	call   c0000608 <memset>
c000e965:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e969:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e96c:	e8 24 f5 ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c000e971:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e974:	83 c4 10             	add    esp,0x10
c000e977:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000e97a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e97e:	e9 48 ff ff ff       	jmp    c000e8cb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000e983:	90                   	nop

c000e984 <VAS::VAS(bool)>:
c000e984:	53                   	push   ebx
c000e985:	83 ec 28             	sub    esp,0x28
c000e988:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e98c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e990:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e994:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e99b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e99f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000e9a3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e9a6:	e8 17 d8 ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000e9ab:	89 c2                	mov    edx,eax
c000e9ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e9b4:	e8 36 f3 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c000e9b9:	89 c3                	mov    ebx,eax
c000e9bb:	83 ec 0c             	sub    esp,0xc
c000e9be:	6a 01                	push   0x1
c000e9c0:	e8 9a f1 ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c000e9c5:	83 c4 10             	add    esp,0x10
c000e9c8:	89 c2                	mov    edx,eax
c000e9ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e9d1:	83 ec 0c             	sub    esp,0xc
c000e9d4:	6a 03                	push   0x3
c000e9d6:	6a 01                	push   0x1
c000e9d8:	52                   	push   edx
c000e9d9:	50                   	push   eax
c000e9da:	53                   	push   ebx
c000e9db:	e8 a2 fa ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9e0:	83 c4 20             	add    esp,0x20
c000e9e3:	89 c2                	mov    edx,eax
c000e9e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e9ec:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e9f4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000e9fc:	7f 1c                	jg     c000ea1a <VAS::VAS(bool)+0x96>
c000e9fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea09:	c1 e2 02             	shl    edx,0x2
c000ea0c:	01 d0                	add    eax,edx
c000ea0e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ea14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ea18:	eb da                	jmp    c000e9f4 <VAS::VAS(bool)+0x70>
c000ea1a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ea22:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ea2a:	7f 71                	jg     c000ea9d <VAS::VAS(bool)+0x119>
c000ea2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea30:	2d 00 02 00 00       	sub    eax,0x200
c000ea35:	c1 e0 0c             	shl    eax,0xc
c000ea38:	83 c8 03             	or     eax,0x3
c000ea3b:	89 c3                	mov    ebx,eax
c000ea3d:	e8 00 52 00 00       	call   c0013c42 <thisCPU()>
c000ea42:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ea48:	83 e0 10             	and    eax,0x10
c000ea4b:	84 c0                	test   al,al
c000ea4d:	74 07                	je     c000ea56 <VAS::VAS(bool)+0xd2>
c000ea4f:	b8 00 01 00 00       	mov    eax,0x100
c000ea54:	eb 05                	jmp    c000ea5b <VAS::VAS(bool)+0xd7>
c000ea56:	b8 00 00 00 00       	mov    eax,0x0
c000ea5b:	09 d8                	or     eax,ebx
c000ea5d:	89 c1                	mov    ecx,eax
c000ea5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea66:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea6a:	c1 e2 02             	shl    edx,0x2
c000ea6d:	01 d0                	add    eax,edx
c000ea6f:	89 ca                	mov    edx,ecx
c000ea71:	89 10                	mov    DWORD PTR [eax],edx
c000ea73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea77:	2d 40 03 00 00       	sub    eax,0x340
c000ea7c:	83 f8 7f             	cmp    eax,0x7f
c000ea7f:	77 16                	ja     c000ea97 <VAS::VAS(bool)+0x113>
c000ea81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea8c:	c1 e2 02             	shl    edx,0x2
c000ea8f:	01 d0                	add    eax,edx
c000ea91:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ea97:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ea9b:	eb 85                	jmp    c000ea22 <VAS::VAS(bool)+0x9e>
c000ea9d:	e8 a0 51 00 00       	call   c0013c42 <thisCPU()>
c000eaa2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eaa8:	83 e0 10             	and    eax,0x10
c000eaab:	84 c0                	test   al,al
c000eaad:	74 07                	je     c000eab6 <VAS::VAS(bool)+0x132>
c000eaaf:	b8 03 41 00 00       	mov    eax,0x4103
c000eab4:	eb 05                	jmp    c000eabb <VAS::VAS(bool)+0x137>
c000eab6:	b8 03 40 00 00       	mov    eax,0x4003
c000eabb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eabf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eac2:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eac8:	89 02                	mov    DWORD PTR [edx],eax
c000eaca:	e8 73 51 00 00       	call   c0013c42 <thisCPU()>
c000eacf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ead5:	83 ec 08             	sub    esp,0x8
c000ead8:	50                   	push   eax
c000ead9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eadd:	e8 84 f9 ff ff       	call   c000e466 <VAS::setCPUSpecific(unsigned long)>
c000eae2:	83 c4 10             	add    esp,0x10
c000eae5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eae9:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eaec:	e8 51 51 00 00       	call   c0013c42 <thisCPU()>
c000eaf1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eaf7:	83 e0 10             	and    eax,0x10
c000eafa:	84 c0                	test   al,al
c000eafc:	74 07                	je     c000eb05 <VAS::VAS(bool)+0x181>
c000eafe:	b8 00 01 00 00       	mov    eax,0x100
c000eb03:	eb 05                	jmp    c000eb0a <VAS::VAS(bool)+0x186>
c000eb05:	b8 00 00 00 00       	mov    eax,0x0
c000eb0a:	09 d8                	or     eax,ebx
c000eb0c:	89 c2                	mov    edx,eax
c000eb0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eb15:	05 fc 0f 00 00       	add    eax,0xffc
c000eb1a:	83 ca 03             	or     edx,0x3
c000eb1d:	89 10                	mov    DWORD PTR [eax],edx
c000eb1f:	e8 1e 51 00 00       	call   c0013c42 <thisCPU()>
c000eb24:	83 ec 0c             	sub    esp,0xc
c000eb27:	50                   	push   eax
c000eb28:	e8 9f 19 00 00       	call   c00104cc <Device::getName()>
c000eb2d:	83 c4 10             	add    esp,0x10
c000eb30:	83 ec 08             	sub    esp,0x8
c000eb33:	68 30 03 02 c0       	push   0xc0020330
c000eb38:	50                   	push   eax
c000eb39:	e8 ba 1b ff ff       	call   c00006f8 <strcmp>
c000eb3e:	83 c4 10             	add    esp,0x10
c000eb41:	85 c0                	test   eax,eax
c000eb43:	0f 94 c0             	sete   al
c000eb46:	84 c0                	test   al,al
c000eb48:	74 64                	je     c000ebae <VAS::VAS(bool)+0x22a>
c000eb4a:	e8 a0 8a 00 00       	call   c00175ef <disableIRQs()>
c000eb4f:	e8 ee 50 00 00       	call   c0013c42 <thisCPU()>
c000eb54:	05 7c 09 00 00       	add    eax,0x97c
c000eb59:	83 ec 0c             	sub    esp,0xc
c000eb5c:	50                   	push   eax
c000eb5d:	e8 28 cb ff ff       	call   c000b68a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eb62:	83 c4 10             	add    esp,0x10
c000eb65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb6a:	89 c3                	mov    ebx,eax
c000eb6c:	e8 d1 50 00 00       	call   c0013c42 <thisCPU()>
c000eb71:	05 7c 09 00 00       	add    eax,0x97c
c000eb76:	83 ec 0c             	sub    esp,0xc
c000eb79:	50                   	push   eax
c000eb7a:	e8 0b cb ff ff       	call   c000b68a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eb7f:	83 c4 10             	add    esp,0x10
c000eb82:	83 ec 08             	sub    esp,0x8
c000eb85:	50                   	push   eax
c000eb86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb8a:	e8 e7 f2 ff ff       	call   c000de76 <VAS::getPageTableEntry(unsigned long)>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb94:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb99:	6a 11                	push   0x11
c000eb9b:	53                   	push   ebx
c000eb9c:	50                   	push   eax
c000eb9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eba1:	e8 f0 f5 ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	e8 4f 8a 00 00       	call   c00175fd <enableIRQs()>
c000ebae:	90                   	nop
c000ebaf:	83 c4 28             	add    esp,0x28
c000ebb2:	5b                   	pop    ebx
c000ebb3:	c3                   	ret    

c000ebb4 <mapVASFirstTime>:
c000ebb4:	55                   	push   ebp
c000ebb5:	57                   	push   edi
c000ebb6:	56                   	push   esi
c000ebb7:	53                   	push   ebx
c000ebb8:	83 ec 0c             	sub    esp,0xc
c000ebbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ebc0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ebc3:	4a                   	dec    edx
c000ebc4:	0f 84 99 00 00 00    	je     c000ec63 <mapVASFirstTime+0xaf>
c000ebca:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ebcd:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ebd0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ebd5:	c1 e5 15             	shl    ebp,0x15
c000ebd8:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ebdd:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ebe3:	29 eb                	sub    ebx,ebp
c000ebe5:	29 ee                	sub    esi,ebp
c000ebe7:	e8 d6 d5 ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000ebec:	83 ec 0c             	sub    esp,0xc
c000ebef:	68 03 04 00 00       	push   0x403
c000ebf4:	6a 01                	push   0x1
c000ebf6:	53                   	push   ebx
c000ebf7:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ebfd:	50                   	push   eax
c000ebfe:	57                   	push   edi
c000ebff:	e8 7e f8 ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec04:	83 c4 20             	add    esp,0x20
c000ec07:	39 f3                	cmp    ebx,esi
c000ec09:	75 dc                	jne    c000ebe7 <mapVASFirstTime+0x33>
c000ec0b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ec10:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ec15:	29 ee                	sub    esi,ebp
c000ec17:	29 e8                	sub    eax,ebp
c000ec19:	89 c5                	mov    ebp,eax
c000ec1b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ec1f:	19 db                	sbb    ebx,ebx
c000ec21:	e8 9c d5 ff ff       	call   c000c1c2 <Phys::allocatePage()>
c000ec26:	83 e3 04             	and    ebx,0x4
c000ec29:	83 ec 0c             	sub    esp,0xc
c000ec2c:	81 c3 03 04 00 00    	add    ebx,0x403
c000ec32:	53                   	push   ebx
c000ec33:	6a 01                	push   0x1
c000ec35:	56                   	push   esi
c000ec36:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ec3c:	50                   	push   eax
c000ec3d:	57                   	push   edi
c000ec3e:	e8 3f f8 ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec43:	83 c4 20             	add    esp,0x20
c000ec46:	39 f5                	cmp    ebp,esi
c000ec48:	75 d1                	jne    c000ec1b <mapVASFirstTime+0x67>
c000ec4a:	e8 56 f7 00 00       	call   c001e3a5 <CPU::readCR3()>
c000ec4f:	83 ec 0c             	sub    esp,0xc
c000ec52:	50                   	push   eax
c000ec53:	e8 5f f7 00 00       	call   c001e3b7 <CPU::writeCR3(unsigned long)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	83 c4 0c             	add    esp,0xc
c000ec5e:	5b                   	pop    ebx
c000ec5f:	5e                   	pop    esi
c000ec60:	5f                   	pop    edi
c000ec61:	5d                   	pop    ebp
c000ec62:	c3                   	ret    
c000ec63:	83 ec 0c             	sub    esp,0xc
c000ec66:	68 3e 03 02 c0       	push   0xc002033e
c000ec6b:	e8 6f 01 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000ec70:	83 c4 10             	add    esp,0x10
c000ec73:	83 c4 0c             	add    esp,0xc
c000ec76:	5b                   	pop    ebx
c000ec77:	5e                   	pop    esi
c000ec78:	5f                   	pop    edi
c000ec79:	5d                   	pop    ebp
c000ec7a:	c3                   	ret    

c000ec7b <__cxa_atexit>:
c000ec7b:	31 c0                	xor    eax,eax
c000ec7d:	c3                   	ret    

c000ec7e <__cxa_finalize>:
c000ec7e:	c3                   	ret    

c000ec7f <__stack_chk_fail>:
c000ec7f:	55                   	push   ebp
c000ec80:	89 e5                	mov    ebp,esp
c000ec82:	83 ec 10             	sub    esp,0x10
c000ec85:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ec88:	68 57 03 02 c0       	push   0xc0020357
c000ec8d:	e8 4d 01 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000ec92:	58                   	pop    eax
c000ec93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ec96:	5a                   	pop    edx
c000ec97:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ec9a:	68 57 03 02 c0       	push   0xc0020357
c000ec9f:	e8 3b 01 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000eca4:	59                   	pop    ecx
c000eca5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eca8:	5a                   	pop    edx
c000eca9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ecae:	68 57 03 02 c0       	push   0xc0020357
c000ecb3:	e8 27 01 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000ecb8:	59                   	pop    ecx
c000ecb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ecbc:	5a                   	pop    edx
c000ecbd:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecbf:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ecc4:	68 57 03 02 c0       	push   0xc0020357
c000ecc9:	e8 11 01 00 00       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c000ecce:	c7 04 24 5f 03 02 c0 	mov    DWORD PTR [esp],0xc002035f
c000ecd5:	e8 6e 5c 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000ecda:	83 c4 10             	add    esp,0x10
c000ecdd:	c9                   	leave  
c000ecde:	c3                   	ret    

c000ecdf <__cxa_pure_virtual>:
c000ecdf:	83 ec 18             	sub    esp,0x18
c000ece2:	68 77 03 02 c0       	push   0xc0020377
c000ece7:	e8 5c 5c 00 00       	call   c0014948 <Krnl::panic(char const*)>
c000ecec:	83 c4 1c             	add    esp,0x1c
c000ecef:	c3                   	ret    

c000ecf0 <operator new(unsigned long)>:
c000ecf0:	e9 23 cf ff ff       	jmp    c000bc18 <malloc>

c000ecf5 <operator new[](unsigned long)>:
c000ecf5:	e9 1e cf ff ff       	jmp    c000bc18 <malloc>

c000ecfa <operator delete(void*)>:
c000ecfa:	e9 39 cf ff ff       	jmp    c000bc38 <rfree>

c000ecff <operator delete(void*, unsigned long)>:
c000ecff:	e9 34 cf ff ff       	jmp    c000bc38 <rfree>

c000ed04 <operator delete[](void*)>:
c000ed04:	e9 2f cf ff ff       	jmp    c000bc38 <rfree>

c000ed09 <operator delete[](void*, unsigned long)>:
c000ed09:	e9 2a cf ff ff       	jmp    c000bc38 <rfree>

c000ed0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ed0e:	57                   	push   edi
c000ed0f:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ed14:	56                   	push   esi
c000ed15:	be 8c 03 02 c0       	mov    esi,0xc002038c
c000ed1a:	53                   	push   ebx
c000ed1b:	83 ec 40             	sub    esp,0x40
c000ed1e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ed22:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ed26:	fc                   	cld    
c000ed27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ed29:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ed2d:	83 f9 3e             	cmp    ecx,0x3e
c000ed30:	7e 05                	jle    c000ed37 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ed32:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ed37:	89 df                	mov    edi,ebx
c000ed39:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ed3d:	eb 02                	jmp    c000ed41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ed3f:	89 c7                	mov    edi,eax
c000ed41:	31 d2                	xor    edx,edx
c000ed43:	46                   	inc    esi
c000ed44:	89 f8                	mov    eax,edi
c000ed46:	f7 f1                	div    ecx
c000ed48:	39 cf                	cmp    edi,ecx
c000ed4a:	73 f3                	jae    c000ed3f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ed4c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ed4f:	eb 02                	jmp    c000ed53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ed51:	89 c3                	mov    ebx,eax
c000ed53:	31 d2                	xor    edx,edx
c000ed55:	4e                   	dec    esi
c000ed56:	89 d8                	mov    eax,ebx
c000ed58:	f7 f1                	div    ecx
c000ed5a:	39 cb                	cmp    ebx,ecx
c000ed5c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ed60:	88 16                	mov    BYTE PTR [esi],dl
c000ed62:	73 ed                	jae    c000ed51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ed64:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed68:	83 c4 40             	add    esp,0x40
c000ed6b:	5b                   	pop    ebx
c000ed6c:	5e                   	pop    esi
c000ed6d:	5f                   	pop    edi
c000ed6e:	c3                   	ret    

c000ed6f <Dbg::logc(char)>:
c000ed6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed73:	ba fd 03 00 00       	mov    edx,0x3fd
c000ed78:	ec                   	in     al,dx
c000ed79:	a8 20                	test   al,0x20
c000ed7b:	74 fb                	je     c000ed78 <Dbg::logc(char)+0x9>
c000ed7d:	ba f8 03 00 00       	mov    edx,0x3f8
c000ed82:	88 c8                	mov    al,cl
c000ed84:	ee                   	out    dx,al
c000ed85:	c3                   	ret    

c000ed86 <Dbg::logs(char*)>:
c000ed86:	53                   	push   ebx
c000ed87:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed8b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ed8e:	84 c0                	test   al,al
c000ed90:	74 0f                	je     c000eda1 <Dbg::logs(char*)+0x1b>
c000ed92:	50                   	push   eax
c000ed93:	43                   	inc    ebx
c000ed94:	e8 d6 ff ff ff       	call   c000ed6f <Dbg::logc(char)>
c000ed99:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ed9c:	5a                   	pop    edx
c000ed9d:	84 c0                	test   al,al
c000ed9f:	75 f1                	jne    c000ed92 <Dbg::logs(char*)+0xc>
c000eda1:	5b                   	pop    ebx
c000eda2:	c3                   	ret    

c000eda3 <Dbg::logWriteInt(unsigned int)>:
c000eda3:	83 ec 10             	sub    esp,0x10
c000eda6:	6a 0a                	push   0xa
c000eda8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000edac:	50                   	push   eax
c000edad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edb1:	e8 58 ff ff ff       	call   c000ed0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000edb6:	50                   	push   eax
c000edb7:	e8 ca ff ff ff       	call   c000ed86 <Dbg::logs(char*)>
c000edbc:	83 c4 20             	add    esp,0x20
c000edbf:	c3                   	ret    

c000edc0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000edc0:	83 ec 10             	sub    esp,0x10
c000edc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edc7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000edcb:	50                   	push   eax
c000edcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edd0:	e8 39 ff ff ff       	call   c000ed0e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000edd5:	50                   	push   eax
c000edd6:	e8 ab ff ff ff       	call   c000ed86 <Dbg::logs(char*)>
c000eddb:	83 c4 20             	add    esp,0x20
c000edde:	c3                   	ret    

c000eddf <Dbg::kprintf(char const*, ...)>:
c000eddf:	55                   	push   ebp
c000ede0:	57                   	push   edi
c000ede1:	56                   	push   esi
c000ede2:	53                   	push   ebx
c000ede3:	83 ec 0c             	sub    esp,0xc
c000ede6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000edea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000edee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edf2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000edf5:	84 c0                	test   al,al
c000edf7:	74 4a                	je     c000ee43 <Dbg::kprintf(char const*, ...)+0x64>
c000edf9:	31 db                	xor    ebx,ebx
c000edfb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000edfe:	3c 25                	cmp    al,0x25
c000ee00:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ee03:	0f 85 e4 00 00 00    	jne    c000eeed <Dbg::kprintf(char const*, ...)+0x10e>
c000ee09:	83 c3 02             	add    ebx,0x2
c000ee0c:	8a 07                	mov    al,BYTE PTR [edi]
c000ee0e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ee11:	83 e8 25             	sub    eax,0x25
c000ee14:	3c 53                	cmp    al,0x53
c000ee16:	0f 87 ba 00 00 00    	ja     c000eed6 <Dbg::kprintf(char const*, ...)+0xf7>
c000ee1c:	0f b6 c0             	movzx  eax,al
c000ee1f:	ff 24 85 cc 03 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfc34]
c000ee26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee2a:	89 c8                	mov    eax,ecx
c000ee2c:	83 c1 04             	add    ecx,0x4
c000ee2f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee33:	ff 30                	push   DWORD PTR [eax]
c000ee35:	e8 4c ff ff ff       	call   c000ed86 <Dbg::logs(char*)>
c000ee3a:	58                   	pop    eax
c000ee3b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000ee3f:	84 c0                	test   al,al
c000ee41:	75 b8                	jne    c000edfb <Dbg::kprintf(char const*, ...)+0x1c>
c000ee43:	83 c4 0c             	add    esp,0xc
c000ee46:	5b                   	pop    ebx
c000ee47:	5e                   	pop    esi
c000ee48:	5f                   	pop    edi
c000ee49:	5d                   	pop    ebp
c000ee4a:	c3                   	ret    
c000ee4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee4f:	89 d0                	mov    eax,edx
c000ee51:	83 c2 04             	add    edx,0x4
c000ee54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ee58:	ff 30                	push   DWORD PTR [eax]
c000ee5a:	e8 44 ff ff ff       	call   c000eda3 <Dbg::logWriteInt(unsigned int)>
c000ee5f:	58                   	pop    eax
c000ee60:	eb d9                	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000ee62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee66:	89 d0                	mov    eax,edx
c000ee68:	83 c2 04             	add    edx,0x4
c000ee6b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ee6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ee72:	50                   	push   eax
c000ee73:	e8 f7 fe ff ff       	call   c000ed6f <Dbg::logc(char)>
c000ee78:	58                   	pop    eax
c000ee79:	eb c0                	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000ee7b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee7f:	89 c8                	mov    eax,ecx
c000ee81:	83 c1 04             	add    ecx,0x4
c000ee84:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee88:	ff 30                	push   DWORD PTR [eax]
c000ee8a:	e8 14 ff ff ff       	call   c000eda3 <Dbg::logWriteInt(unsigned int)>
c000ee8f:	5f                   	pop    edi
c000ee90:	eb a9                	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000ee92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee96:	89 c8                	mov    eax,ecx
c000ee98:	83 c1 04             	add    ecx,0x4
c000ee9b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ee9f:	6a 10                	push   0x10
c000eea1:	ff 30                	push   DWORD PTR [eax]
c000eea3:	e8 18 ff ff ff       	call   c000edc0 <Dbg::logWriteIntBase(unsigned int, int)>
c000eea8:	59                   	pop    ecx
c000eea9:	5f                   	pop    edi
c000eeaa:	eb 8f                	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000eeac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eeb0:	89 d0                	mov    eax,edx
c000eeb2:	83 c2 08             	add    edx,0x8
c000eeb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000eeb9:	6a 10                	push   0x10
c000eebb:	ff 30                	push   DWORD PTR [eax]
c000eebd:	e8 fe fe ff ff       	call   c000edc0 <Dbg::logWriteIntBase(unsigned int, int)>
c000eec2:	58                   	pop    eax
c000eec3:	5a                   	pop    edx
c000eec4:	e9 72 ff ff ff       	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000eec9:	6a 25                	push   0x25
c000eecb:	e8 9f fe ff ff       	call   c000ed6f <Dbg::logc(char)>
c000eed0:	58                   	pop    eax
c000eed1:	e9 65 ff ff ff       	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000eed6:	6a 25                	push   0x25
c000eed8:	e8 92 fe ff ff       	call   c000ed6f <Dbg::logc(char)>
c000eedd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000eee0:	50                   	push   eax
c000eee1:	e8 89 fe ff ff       	call   c000ed6f <Dbg::logc(char)>
c000eee6:	5a                   	pop    edx
c000eee7:	59                   	pop    ecx
c000eee8:	e9 4e ff ff ff       	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000eeed:	50                   	push   eax
c000eeee:	89 eb                	mov    ebx,ebp
c000eef0:	e8 7a fe ff ff       	call   c000ed6f <Dbg::logc(char)>
c000eef5:	89 fd                	mov    ebp,edi
c000eef7:	58                   	pop    eax
c000eef8:	e9 3e ff ff ff       	jmp    c000ee3b <Dbg::kprintf(char const*, ...)+0x5c>
c000eefd:	90                   	nop

c000eefe <File::read(unsigned long long, void*, int*)>:
c000eefe:	53                   	push   ebx
c000eeff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef03:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ef07:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ef0e:	3c 19                	cmp    al,0x19
c000ef10:	77 35                	ja     c000ef47 <File::read(unsigned long long, void*, int*)+0x49>
c000ef12:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c000ef19:	85 c0                	test   eax,eax
c000ef1b:	74 2a                	je     c000ef47 <File::read(unsigned long long, void*, int*)+0x49>
c000ef1d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ef23:	85 c0                	test   eax,eax
c000ef25:	74 20                	je     c000ef47 <File::read(unsigned long long, void*, int*)+0x49>
c000ef27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ef2b:	74 21                	je     c000ef4e <File::read(unsigned long long, void*, int*)+0x50>
c000ef2d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef2f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef33:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef41:	5b                   	pop    ebx
c000ef42:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ef45:	ff e0                	jmp    eax
c000ef47:	b8 0b 00 00 00       	mov    eax,0xb
c000ef4c:	eb 05                	jmp    c000ef53 <File::read(unsigned long long, void*, int*)+0x55>
c000ef4e:	b8 05 00 00 00       	mov    eax,0x5
c000ef53:	5b                   	pop    ebx
c000ef54:	c3                   	ret    
c000ef55:	90                   	nop

c000ef56 <File::write(unsigned long long, void*, int*)>:
c000ef56:	53                   	push   ebx
c000ef57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ef5f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ef66:	3c 19                	cmp    al,0x19
c000ef68:	77 35                	ja     c000ef9f <File::write(unsigned long long, void*, int*)+0x49>
c000ef6a:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c000ef71:	85 c0                	test   eax,eax
c000ef73:	74 2a                	je     c000ef9f <File::write(unsigned long long, void*, int*)+0x49>
c000ef75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ef7b:	85 c0                	test   eax,eax
c000ef7d:	74 20                	je     c000ef9f <File::write(unsigned long long, void*, int*)+0x49>
c000ef7f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ef83:	74 21                	je     c000efa6 <File::write(unsigned long long, void*, int*)+0x50>
c000ef85:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ef87:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ef8b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ef91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ef99:	5b                   	pop    ebx
c000ef9a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ef9d:	ff e0                	jmp    eax
c000ef9f:	b8 0b 00 00 00       	mov    eax,0xb
c000efa4:	eb 05                	jmp    c000efab <File::write(unsigned long long, void*, int*)+0x55>
c000efa6:	b8 05 00 00 00       	mov    eax,0x5
c000efab:	5b                   	pop    ebx
c000efac:	c3                   	ret    
c000efad:	90                   	nop

c000efae <Directory::read(unsigned long long, void*, int*)>:
c000efae:	53                   	push   ebx
c000efaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efb3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000efb7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000efbe:	3c 19                	cmp    al,0x19
c000efc0:	77 35                	ja     c000eff7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000efc2:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c000efc9:	85 c0                	test   eax,eax
c000efcb:	74 2a                	je     c000eff7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000efcd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000efd3:	85 c0                	test   eax,eax
c000efd5:	74 20                	je     c000eff7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000efd7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000efdb:	74 21                	je     c000effe <Directory::read(unsigned long long, void*, int*)+0x50>
c000efdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000efdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000efe3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000efe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eff1:	5b                   	pop    ebx
c000eff2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000eff5:	ff e0                	jmp    eax
c000eff7:	b8 0b 00 00 00       	mov    eax,0xb
c000effc:	eb 05                	jmp    c000f003 <Directory::read(unsigned long long, void*, int*)+0x55>
c000effe:	b8 05 00 00 00       	mov    eax,0x5
c000f003:	5b                   	pop    ebx
c000f004:	c3                   	ret    
c000f005:	90                   	nop

c000f006 <Directory::write(unsigned long long, void*, int*)>:
c000f006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f00a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f011:	b8 0b 00 00 00       	mov    eax,0xb
c000f016:	80 fa 19             	cmp    dl,0x19
c000f019:	77 18                	ja     c000f033 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f01b:	8b 14 95 60 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcca0]
c000f022:	85 d2                	test   edx,edx
c000f024:	74 0d                	je     c000f033 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f026:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f02d:	19 c0                	sbb    eax,eax
c000f02f:	83 e0 0a             	and    eax,0xa
c000f032:	40                   	inc    eax
c000f033:	c3                   	ret    

c000f034 <File::isAtty()>:
c000f034:	31 c0                	xor    eax,eax
c000f036:	c3                   	ret    
c000f037:	90                   	nop

c000f038 <Directory::isAtty()>:
c000f038:	31 c0                	xor    eax,eax
c000f03a:	c3                   	ret    
c000f03b:	90                   	nop

c000f03c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f03c:	b8 0a 00 00 00       	mov    eax,0xa
c000f041:	c3                   	ret    

c000f042 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f042:	b8 0a 00 00 00       	mov    eax,0xa
c000f047:	c3                   	ret    

c000f048 <File::~File()>:
c000f048:	83 ec 0c             	sub    esp,0xc
c000f04b:	ba 88 05 02 c0       	mov    edx,0xc0020588
c000f050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f054:	89 10                	mov    DWORD PTR [eax],edx
c000f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f05a:	83 ec 0c             	sub    esp,0xc
c000f05d:	50                   	push   eax
c000f05e:	e8 1d e9 ff ff       	call   c000d980 <UnixFile::~UnixFile()>
c000f063:	83 c4 10             	add    esp,0x10
c000f066:	90                   	nop
c000f067:	83 c4 0c             	add    esp,0xc
c000f06a:	c3                   	ret    
c000f06b:	90                   	nop

c000f06c <File::~File()>:
c000f06c:	83 ec 0c             	sub    esp,0xc
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f076:	e8 cd ff ff ff       	call   c000f048 <File::~File()>
c000f07b:	83 c4 10             	add    esp,0x10
c000f07e:	83 ec 08             	sub    esp,0x8
c000f081:	68 14 01 00 00       	push   0x114
c000f086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f08a:	e8 70 fc ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c000f08f:	83 c4 10             	add    esp,0x10
c000f092:	83 c4 0c             	add    esp,0xc
c000f095:	c3                   	ret    

c000f096 <Directory::~Directory()>:
c000f096:	83 ec 0c             	sub    esp,0xc
c000f099:	ba a4 05 02 c0       	mov    edx,0xc00205a4
c000f09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a2:	89 10                	mov    DWORD PTR [eax],edx
c000f0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a8:	83 ec 0c             	sub    esp,0xc
c000f0ab:	50                   	push   eax
c000f0ac:	e8 cf e8 ff ff       	call   c000d980 <UnixFile::~UnixFile()>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	90                   	nop
c000f0b5:	83 c4 0c             	add    esp,0xc
c000f0b8:	c3                   	ret    
c000f0b9:	90                   	nop

c000f0ba <Directory::~Directory()>:
c000f0ba:	83 ec 0c             	sub    esp,0xc
c000f0bd:	83 ec 0c             	sub    esp,0xc
c000f0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0c4:	e8 cd ff ff ff       	call   c000f096 <Directory::~Directory()>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	83 ec 08             	sub    esp,0x8
c000f0cf:	68 14 01 00 00       	push   0x114
c000f0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0d8:	e8 22 fc ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	83 c4 0c             	add    esp,0xc
c000f0e3:	c3                   	ret    

c000f0e4 <Filesystem::Filesystem()>:
c000f0e4:	ba 24 05 02 c0       	mov    edx,0xc0020524
c000f0e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ed:	89 10                	mov    DWORD PTR [eax],edx
c000f0ef:	8b 15 c0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec0
c000f0f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	a3 c0 2e 02 c0       	mov    ds:0xc0022ec0,eax
c000f105:	90                   	nop
c000f106:	c3                   	ret    
c000f107:	90                   	nop

c000f108 <Filesystem::~Filesystem()>:
c000f108:	ba 24 05 02 c0       	mov    edx,0xc0020524
c000f10d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f111:	89 10                	mov    DWORD PTR [eax],edx
c000f113:	90                   	nop
c000f114:	c3                   	ret    
c000f115:	90                   	nop

c000f116 <Filesystem::~Filesystem()>:
c000f116:	83 ec 0c             	sub    esp,0xc
c000f119:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f11d:	e8 e6 ff ff ff       	call   c000f108 <Filesystem::~Filesystem()>
c000f122:	83 c4 04             	add    esp,0x4
c000f125:	83 ec 08             	sub    esp,0x8
c000f128:	6a 08                	push   0x8
c000f12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f12e:	e8 cc fb ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c000f133:	83 c4 10             	add    esp,0x10
c000f136:	83 c4 0c             	add    esp,0xc
c000f139:	c3                   	ret    

c000f13a <initVFS()>:
c000f13a:	83 ec 18             	sub    esp,0x18
c000f13d:	6a 08                	push   0x8
c000f13f:	e8 ac fb ff ff       	call   c000ecf0 <operator new(unsigned long)>
c000f144:	89 04 24             	mov    DWORD PTR [esp],eax
c000f147:	e8 2e a5 00 00       	call   c001967a <FAT::FAT()>
c000f14c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f153:	e8 98 fb ff ff       	call   c000ecf0 <operator new(unsigned long)>
c000f158:	89 04 24             	mov    DWORD PTR [esp],eax
c000f15b:	e8 24 b7 00 00       	call   c001a884 <ISO9660::ISO9660()>
c000f160:	83 c4 1c             	add    esp,0x1c
c000f163:	c3                   	ret    

c000f164 <standardiseFiles(char*, char const*, char const*)>:
c000f164:	55                   	push   ebp
c000f165:	57                   	push   edi
c000f166:	56                   	push   esi
c000f167:	53                   	push   ebx
c000f168:	81 ec 10 04 00 00    	sub    esp,0x410
c000f16e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f175:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f17c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f183:	68 00 04 00 00       	push   0x400
c000f188:	6a 00                	push   0x0
c000f18a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f18e:	56                   	push   esi
c000f18f:	e8 74 14 ff ff       	call   c0000608 <memset>
c000f194:	83 c4 10             	add    esp,0x10
c000f197:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f19b:	75 0b                	jne    c000f1a8 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f19d:	50                   	push   eax
c000f19e:	50                   	push   eax
c000f19f:	57                   	push   edi
c000f1a0:	56                   	push   esi
c000f1a1:	e8 01 15 ff ff       	call   c00006a7 <strcpy>
c000f1a6:	eb 41                	jmp    c000f1e9 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f1a8:	8a 07                	mov    al,BYTE PTR [edi]
c000f1aa:	3c 5c                	cmp    al,0x5c
c000f1ac:	74 04                	je     c000f1b2 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f1ae:	3c 2f                	cmp    al,0x2f
c000f1b0:	75 18                	jne    c000f1ca <standardiseFiles(char*, char const*, char const*)+0x66>
c000f1b2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f1b5:	3c 60                	cmp    al,0x60
c000f1b7:	7e 03                	jle    c000f1bc <standardiseFiles(char*, char const*, char const*)+0x58>
c000f1b9:	83 e8 20             	sub    eax,0x20
c000f1bc:	88 04 24             	mov    BYTE PTR [esp],al
c000f1bf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f1c6:	50                   	push   eax
c000f1c7:	50                   	push   eax
c000f1c8:	eb 18                	jmp    c000f1e2 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f1ca:	50                   	push   eax
c000f1cb:	50                   	push   eax
c000f1cc:	55                   	push   ebp
c000f1cd:	56                   	push   esi
c000f1ce:	e8 d4 14 ff ff       	call   c00006a7 <strcpy>
c000f1d3:	5a                   	pop    edx
c000f1d4:	59                   	pop    ecx
c000f1d5:	68 60 15 02 c0       	push   0xc0021560
c000f1da:	56                   	push   esi
c000f1db:	e8 7e 15 ff ff       	call   c000075e <strcat>
c000f1e0:	5d                   	pop    ebp
c000f1e1:	58                   	pop    eax
c000f1e2:	57                   	push   edi
c000f1e3:	56                   	push   esi
c000f1e4:	e8 75 15 ff ff       	call   c000075e <strcat>
c000f1e9:	83 c4 10             	add    esp,0x10
c000f1ec:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f1ef:	3c 60                	cmp    al,0x60
c000f1f1:	7e 03                	jle    c000f1f6 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f1f3:	83 e8 20             	sub    eax,0x20
c000f1f6:	88 04 24             	mov    BYTE PTR [esp],al
c000f1f9:	88 03                	mov    BYTE PTR [ebx],al
c000f1fb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f202:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f208:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f20c:	bf 03 00 00 00       	mov    edi,0x3
c000f211:	b8 03 00 00 00       	mov    eax,0x3
c000f216:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f219:	84 d2                	test   dl,dl
c000f21b:	0f 84 91 00 00 00    	je     c000f2b2 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f221:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f224:	80 fa 5c             	cmp    dl,0x5c
c000f227:	74 05                	je     c000f22e <standardiseFiles(char*, char const*, char const*)+0xca>
c000f229:	80 fa 2f             	cmp    dl,0x2f
c000f22c:	75 12                	jne    c000f240 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f22e:	89 c5                	mov    ebp,eax
c000f230:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f235:	74 09                	je     c000f240 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f237:	40                   	inc    eax
c000f238:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f23c:	89 cf                	mov    edi,ecx
c000f23e:	eb d6                	jmp    c000f216 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f240:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f245:	75 5b                	jne    c000f2a2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f247:	80 fa 2e             	cmp    dl,0x2e
c000f24a:	75 56                	jne    c000f2a2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f24c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f250:	74 19                	je     c000f26b <standardiseFiles(char*, char const*, char const*)+0x107>
c000f252:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f257:	74 53                	je     c000f2ac <standardiseFiles(char*, char const*, char const*)+0x148>
c000f259:	89 f9                	mov    ecx,edi
c000f25b:	41                   	inc    ecx
c000f25c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f25f:	80 fa 2f             	cmp    dl,0x2f
c000f262:	74 f7                	je     c000f25b <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f264:	80 fa 5c             	cmp    dl,0x5c
c000f267:	74 f2                	je     c000f25b <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f269:	eb d1                	jmp    c000f23c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f26b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f270:	74 3a                	je     c000f2ac <standardiseFiles(char*, char const*, char const*)+0x148>
c000f272:	83 f8 03             	cmp    eax,0x3
c000f275:	74 c5                	je     c000f23c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f277:	41                   	inc    ecx
c000f278:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f27b:	80 fa 2f             	cmp    dl,0x2f
c000f27e:	74 f7                	je     c000f277 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f280:	80 fa 5c             	cmp    dl,0x5c
c000f283:	74 f2                	je     c000f277 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f285:	48                   	dec    eax
c000f286:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f28a:	75 06                	jne    c000f292 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f28c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f290:	eb f3                	jmp    c000f285 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f292:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f296:	74 07                	je     c000f29f <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f298:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f29c:	48                   	dec    eax
c000f29d:	eb f3                	jmp    c000f292 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f29f:	40                   	inc    eax
c000f2a0:	eb 9a                	jmp    c000f23c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2a2:	80 fa 2f             	cmp    dl,0x2f
c000f2a5:	74 95                	je     c000f23c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2a7:	80 fa 5c             	cmp    dl,0x5c
c000f2aa:	74 90                	je     c000f23c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2ac:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f2af:	40                   	inc    eax
c000f2b0:	eb 8a                	jmp    c000f23c <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f2b2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f2b6:	83 ec 0c             	sub    esp,0xc
c000f2b9:	53                   	push   ebx
c000f2ba:	e8 66 13 ff ff       	call   c0000625 <strlen>
c000f2bf:	83 c4 10             	add    esp,0x10
c000f2c2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f2c7:	75 26                	jne    c000f2ef <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f2c9:	83 ec 0c             	sub    esp,0xc
c000f2cc:	53                   	push   ebx
c000f2cd:	e8 53 13 ff ff       	call   c0000625 <strlen>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f2da:	74 26                	je     c000f302 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f2dc:	83 ec 0c             	sub    esp,0xc
c000f2df:	53                   	push   ebx
c000f2e0:	e8 40 13 ff ff       	call   c0000625 <strlen>
c000f2e5:	83 c4 10             	add    esp,0x10
c000f2e8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f2ed:	eb c7                	jmp    c000f2b6 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f2ef:	83 ec 0c             	sub    esp,0xc
c000f2f2:	53                   	push   ebx
c000f2f3:	e8 2d 13 ff ff       	call   c0000625 <strlen>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f300:	74 c7                	je     c000f2c9 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f302:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f308:	5b                   	pop    ebx
c000f309:	5e                   	pop    esi
c000f30a:	5f                   	pop    edi
c000f30b:	5d                   	pop    ebp
c000f30c:	c3                   	ret    
c000f30d:	90                   	nop

c000f30e <File::File(char const*, Process*)>:
c000f30e:	83 ec 0c             	sub    esp,0xc
c000f311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f315:	83 ec 08             	sub    esp,0x8
c000f318:	6a 00                	push   0x0
c000f31a:	50                   	push   eax
c000f31b:	e8 fc e5 ff ff       	call   c000d91c <UnixFile::UnixFile(int)>
c000f320:	83 c4 10             	add    esp,0x10
c000f323:	ba 88 05 02 c0       	mov    edx,0xc0020588
c000f328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32c:	89 10                	mov    DWORD PTR [eax],edx
c000f32e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f332:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f33c:	83 c0 0d             	add    eax,0xd
c000f33f:	83 ec 04             	sub    esp,0x4
c000f342:	52                   	push   edx
c000f343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f347:	50                   	push   eax
c000f348:	e8 17 fe ff ff       	call   c000f164 <standardiseFiles(char*, char const*, char const*)>
c000f34d:	83 c4 10             	add    esp,0x10
c000f350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f354:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f357:	8d 50 bf             	lea    edx,[eax-0x41]
c000f35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f368:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f36c:	90                   	nop
c000f36d:	83 c4 0c             	add    esp,0xc
c000f370:	c3                   	ret    
c000f371:	90                   	nop

c000f372 <File::open(FileOpenMode)>:
c000f372:	53                   	push   ebx
c000f373:	b8 0b 00 00 00       	mov    eax,0xb
c000f378:	83 ec 08             	sub    esp,0x8
c000f37b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f37f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f386:	80 fa 19             	cmp    dl,0x19
c000f389:	77 40                	ja     c000f3cb <File::open(FileOpenMode)+0x59>
c000f38b:	8b 14 95 60 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcca0]
c000f392:	85 d2                	test   edx,edx
c000f394:	74 35                	je     c000f3cb <File::open(FileOpenMode)+0x59>
c000f396:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f39c:	85 d2                	test   edx,edx
c000f39e:	74 2b                	je     c000f3cb <File::open(FileOpenMode)+0x59>
c000f3a0:	b8 06 00 00 00       	mov    eax,0x6
c000f3a5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f3a9:	75 20                	jne    c000f3cb <File::open(FileOpenMode)+0x59>
c000f3ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000f3ad:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f3b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3b7:	51                   	push   ecx
c000f3b8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f3bb:	51                   	push   ecx
c000f3bc:	52                   	push   edx
c000f3bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f3c0:	83 c4 10             	add    esp,0x10
c000f3c3:	85 c0                	test   eax,eax
c000f3c5:	75 04                	jne    c000f3cb <File::open(FileOpenMode)+0x59>
c000f3c7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f3cb:	83 c4 08             	add    esp,0x8
c000f3ce:	5b                   	pop    ebx
c000f3cf:	c3                   	ret    

c000f3d0 <File::close()>:
c000f3d0:	53                   	push   ebx
c000f3d1:	b8 0b 00 00 00       	mov    eax,0xb
c000f3d6:	83 ec 08             	sub    esp,0x8
c000f3d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f3dd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f3e4:	80 fa 19             	cmp    dl,0x19
c000f3e7:	77 41                	ja     c000f42a <File::close()+0x5a>
c000f3e9:	8b 1c 95 60 33 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcca0]
c000f3f0:	85 db                	test   ebx,ebx
c000f3f2:	74 36                	je     c000f42a <File::close()+0x5a>
c000f3f4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f3fb:	74 2d                	je     c000f42a <File::close()+0x5a>
c000f3fd:	b8 05 00 00 00       	mov    eax,0x5
c000f402:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f406:	74 22                	je     c000f42a <File::close()+0x5a>
c000f408:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f40c:	8b 04 95 60 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcca0]
c000f413:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f419:	53                   	push   ebx
c000f41a:	53                   	push   ebx
c000f41b:	8b 10                	mov    edx,DWORD PTR [eax]
c000f41d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f423:	50                   	push   eax
c000f424:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f427:	83 c4 10             	add    esp,0x10
c000f42a:	83 c4 08             	add    esp,0x8
c000f42d:	5b                   	pop    ebx
c000f42e:	c3                   	ret    
c000f42f:	90                   	nop

c000f430 <File::seek(unsigned long long)>:
c000f430:	56                   	push   esi
c000f431:	53                   	push   ebx
c000f432:	b8 0b 00 00 00       	mov    eax,0xb
c000f437:	51                   	push   ecx
c000f438:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f43c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f440:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f447:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f44b:	80 fa 19             	cmp    dl,0x19
c000f44e:	77 31                	ja     c000f481 <File::seek(unsigned long long)+0x51>
c000f450:	8b 14 95 60 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcca0]
c000f457:	85 d2                	test   edx,edx
c000f459:	74 26                	je     c000f481 <File::seek(unsigned long long)+0x51>
c000f45b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f461:	85 d2                	test   edx,edx
c000f463:	74 1c                	je     c000f481 <File::seek(unsigned long long)+0x51>
c000f465:	b8 05 00 00 00       	mov    eax,0x5
c000f46a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f46e:	74 11                	je     c000f481 <File::seek(unsigned long long)+0x51>
c000f470:	8b 02                	mov    eax,DWORD PTR [edx]
c000f472:	53                   	push   ebx
c000f473:	51                   	push   ecx
c000f474:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f47a:	52                   	push   edx
c000f47b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f47e:	83 c4 10             	add    esp,0x10
c000f481:	5a                   	pop    edx
c000f482:	5b                   	pop    ebx
c000f483:	5e                   	pop    esi
c000f484:	c3                   	ret    
c000f485:	90                   	nop

c000f486 <File::tell(unsigned long long*)>:
c000f486:	83 ec 0c             	sub    esp,0xc
c000f489:	b8 0b 00 00 00       	mov    eax,0xb
c000f48e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f492:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f499:	80 fa 19             	cmp    dl,0x19
c000f49c:	77 34                	ja     c000f4d2 <File::tell(unsigned long long*)+0x4c>
c000f49e:	8b 14 95 60 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcca0]
c000f4a5:	85 d2                	test   edx,edx
c000f4a7:	74 29                	je     c000f4d2 <File::tell(unsigned long long*)+0x4c>
c000f4a9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f4af:	85 d2                	test   edx,edx
c000f4b1:	74 1f                	je     c000f4d2 <File::tell(unsigned long long*)+0x4c>
c000f4b3:	b8 05 00 00 00       	mov    eax,0x5
c000f4b8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f4bc:	74 14                	je     c000f4d2 <File::tell(unsigned long long*)+0x4c>
c000f4be:	50                   	push   eax
c000f4bf:	8b 02                	mov    eax,DWORD PTR [edx]
c000f4c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4c5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f4cb:	52                   	push   edx
c000f4cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f4cf:	83 c4 10             	add    esp,0x10
c000f4d2:	83 c4 0c             	add    esp,0xc
c000f4d5:	c3                   	ret    

c000f4d6 <File::rewind()>:
c000f4d6:	83 ec 10             	sub    esp,0x10
c000f4d9:	6a 00                	push   0x0
c000f4db:	6a 00                	push   0x0
c000f4dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e1:	e8 4a ff ff ff       	call   c000f430 <File::seek(unsigned long long)>
c000f4e6:	83 c4 1c             	add    esp,0x1c
c000f4e9:	c3                   	ret    

c000f4ea <File::unlink()>:
c000f4ea:	83 ec 0c             	sub    esp,0xc
c000f4ed:	b8 0b 00 00 00       	mov    eax,0xb
c000f4f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f4fd:	80 f9 19             	cmp    cl,0x19
c000f500:	77 2f                	ja     c000f531 <File::unlink()+0x47>
c000f502:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f509:	85 c9                	test   ecx,ecx
c000f50b:	74 24                	je     c000f531 <File::unlink()+0x47>
c000f50d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f513:	85 c9                	test   ecx,ecx
c000f515:	74 1a                	je     c000f531 <File::unlink()+0x47>
c000f517:	b8 06 00 00 00       	mov    eax,0x6
c000f51c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f520:	75 0f                	jne    c000f531 <File::unlink()+0x47>
c000f522:	83 c2 0d             	add    edx,0xd
c000f525:	50                   	push   eax
c000f526:	50                   	push   eax
c000f527:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f529:	52                   	push   edx
c000f52a:	51                   	push   ecx
c000f52b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f52e:	83 c4 10             	add    esp,0x10
c000f531:	83 c4 0c             	add    esp,0xc
c000f534:	c3                   	ret    
c000f535:	90                   	nop

c000f536 <File::rename(char const*)>:
c000f536:	83 ec 0c             	sub    esp,0xc
c000f539:	b8 0b 00 00 00       	mov    eax,0xb
c000f53e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f542:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f549:	80 f9 19             	cmp    cl,0x19
c000f54c:	77 32                	ja     c000f580 <File::rename(char const*)+0x4a>
c000f54e:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f555:	85 c9                	test   ecx,ecx
c000f557:	74 27                	je     c000f580 <File::rename(char const*)+0x4a>
c000f559:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f55f:	85 c9                	test   ecx,ecx
c000f561:	74 1d                	je     c000f580 <File::rename(char const*)+0x4a>
c000f563:	b8 06 00 00 00       	mov    eax,0x6
c000f568:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f56c:	75 12                	jne    c000f580 <File::rename(char const*)+0x4a>
c000f56e:	83 c2 0d             	add    edx,0xd
c000f571:	50                   	push   eax
c000f572:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f574:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f578:	52                   	push   edx
c000f579:	51                   	push   ecx
c000f57a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	83 c4 0c             	add    esp,0xc
c000f583:	c3                   	ret    

c000f584 <File::chfatattr(unsigned char, unsigned char)>:
c000f584:	57                   	push   edi
c000f585:	b8 0b 00 00 00       	mov    eax,0xb
c000f58a:	56                   	push   esi
c000f58b:	53                   	push   ebx
c000f58c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f590:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f594:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f59b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f59f:	80 f9 19             	cmp    cl,0x19
c000f5a2:	77 37                	ja     c000f5db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5a4:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f5ab:	85 c9                	test   ecx,ecx
c000f5ad:	74 2c                	je     c000f5db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5af:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f5b5:	85 c9                	test   ecx,ecx
c000f5b7:	74 22                	je     c000f5db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5b9:	b8 06 00 00 00       	mov    eax,0x6
c000f5be:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f5c2:	75 17                	jne    c000f5db <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f5c4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f5c6:	89 f0                	mov    eax,esi
c000f5c8:	83 c2 0d             	add    edx,0xd
c000f5cb:	0f b6 f0             	movzx  esi,al
c000f5ce:	0f b6 db             	movzx  ebx,bl
c000f5d1:	56                   	push   esi
c000f5d2:	53                   	push   ebx
c000f5d3:	52                   	push   edx
c000f5d4:	51                   	push   ecx
c000f5d5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f5d8:	83 c4 10             	add    esp,0x10
c000f5db:	5b                   	pop    ebx
c000f5dc:	5e                   	pop    esi
c000f5dd:	5f                   	pop    edi
c000f5de:	c3                   	ret    
c000f5df:	90                   	nop

c000f5e0 <File::exists()>:
c000f5e0:	83 ec 0c             	sub    esp,0xc
c000f5e3:	31 c0                	xor    eax,eax
c000f5e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5e9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f5f0:	80 f9 19             	cmp    cl,0x19
c000f5f3:	77 24                	ja     c000f619 <File::exists()+0x39>
c000f5f5:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f5fc:	85 c9                	test   ecx,ecx
c000f5fe:	74 19                	je     c000f619 <File::exists()+0x39>
c000f600:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f606:	85 c9                	test   ecx,ecx
c000f608:	74 0f                	je     c000f619 <File::exists()+0x39>
c000f60a:	83 c2 0d             	add    edx,0xd
c000f60d:	50                   	push   eax
c000f60e:	50                   	push   eax
c000f60f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f611:	52                   	push   edx
c000f612:	51                   	push   ecx
c000f613:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f616:	83 c4 10             	add    esp,0x10
c000f619:	83 c4 0c             	add    esp,0xc
c000f61c:	c3                   	ret    
c000f61d:	90                   	nop

c000f61e <File::stat(unsigned long long*, bool*)>:
c000f61e:	56                   	push   esi
c000f61f:	53                   	push   ebx
c000f620:	50                   	push   eax
c000f621:	b8 0b 00 00 00       	mov    eax,0xb
c000f626:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f62a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f62e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f635:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f639:	80 f9 19             	cmp    cl,0x19
c000f63c:	77 3d                	ja     c000f67b <File::stat(unsigned long long*, bool*)+0x5d>
c000f63e:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f645:	85 c9                	test   ecx,ecx
c000f647:	74 32                	je     c000f67b <File::stat(unsigned long long*, bool*)+0x5d>
c000f649:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f64f:	85 c9                	test   ecx,ecx
c000f651:	74 28                	je     c000f67b <File::stat(unsigned long long*, bool*)+0x5d>
c000f653:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f655:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f659:	74 13                	je     c000f66e <File::stat(unsigned long long*, bool*)+0x50>
c000f65b:	83 ec 04             	sub    esp,0x4
c000f65e:	56                   	push   esi
c000f65f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f665:	51                   	push   ecx
c000f666:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f669:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f66c:	eb 0a                	jmp    c000f678 <File::stat(unsigned long long*, bool*)+0x5a>
c000f66e:	53                   	push   ebx
c000f66f:	83 c2 0d             	add    edx,0xd
c000f672:	56                   	push   esi
c000f673:	52                   	push   edx
c000f674:	51                   	push   ecx
c000f675:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f678:	83 c4 10             	add    esp,0x10
c000f67b:	5a                   	pop    edx
c000f67c:	5b                   	pop    ebx
c000f67d:	5e                   	pop    esi
c000f67e:	c3                   	ret    

c000f67f <getcwd(Process*, char*, int)>:
c000f67f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f683:	31 c0                	xor    eax,eax
c000f685:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f688:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f68c:	7d 15                	jge    c000f6a3 <getcwd(Process*, char*, int)+0x24>
c000f68e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f692:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f699:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f69c:	84 c9                	test   cl,cl
c000f69e:	74 06                	je     c000f6a6 <getcwd(Process*, char*, int)+0x27>
c000f6a0:	40                   	inc    eax
c000f6a1:	eb e2                	jmp    c000f685 <getcwd(Process*, char*, int)+0x6>
c000f6a3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f6a6:	31 c0                	xor    eax,eax
c000f6a8:	c3                   	ret    

c000f6a9 <setcwd(Process*, char*)>:
c000f6a9:	55                   	push   ebp
c000f6aa:	57                   	push   edi
c000f6ab:	56                   	push   esi
c000f6ac:	53                   	push   ebx
c000f6ad:	81 ec 20 02 00 00    	sub    esp,0x220
c000f6b3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f6ba:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f6c0:	57                   	push   edi
c000f6c1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f6c8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f6cc:	56                   	push   esi
c000f6cd:	e8 92 fa ff ff       	call   c000f164 <standardiseFiles(char*, char const*, char const*)>
c000f6d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000f6d5:	e8 4b 0f ff ff       	call   c0000625 <strlen>
c000f6da:	83 c4 10             	add    esp,0x10
c000f6dd:	83 f8 02             	cmp    eax,0x2
c000f6e0:	77 17                	ja     c000f6f9 <setcwd(Process*, char*)+0x50>
c000f6e2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f6e7:	83 e8 41             	sub    eax,0x41
c000f6ea:	83 f8 19             	cmp    eax,0x19
c000f6ed:	76 24                	jbe    c000f713 <setcwd(Process*, char*)+0x6a>
c000f6ef:	b8 03 00 00 00       	mov    eax,0x3
c000f6f4:	e9 cb 00 00 00       	jmp    c000f7c4 <setcwd(Process*, char*)+0x11b>
c000f6f9:	83 ec 0c             	sub    esp,0xc
c000f6fc:	56                   	push   esi
c000f6fd:	e8 23 0f ff ff       	call   c0000625 <strlen>
c000f702:	83 c4 10             	add    esp,0x10
c000f705:	83 f8 03             	cmp    eax,0x3
c000f708:	75 33                	jne    c000f73d <setcwd(Process*, char*)+0x94>
c000f70a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f70f:	75 2c                	jne    c000f73d <setcwd(Process*, char*)+0x94>
c000f711:	eb cf                	jmp    c000f6e2 <setcwd(Process*, char*)+0x39>
c000f713:	8b 14 85 60 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcca0]
c000f71a:	b8 05 00 00 00       	mov    eax,0x5
c000f71f:	85 d2                	test   edx,edx
c000f721:	0f 84 9d 00 00 00    	je     c000f7c4 <setcwd(Process*, char*)+0x11b>
c000f727:	b8 06 00 00 00       	mov    eax,0x6
c000f72c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f733:	0f 84 8b 00 00 00    	je     c000f7c4 <setcwd(Process*, char*)+0x11b>
c000f739:	51                   	push   ecx
c000f73a:	51                   	push   ecx
c000f73b:	eb 7b                	jmp    c000f7b8 <setcwd(Process*, char*)+0x10f>
c000f73d:	83 ec 0c             	sub    esp,0xc
c000f740:	68 14 01 00 00       	push   0x114
c000f745:	e8 a6 f5 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c000f74a:	83 c4 0c             	add    esp,0xc
c000f74d:	89 c3                	mov    ebx,eax
c000f74f:	55                   	push   ebp
c000f750:	56                   	push   esi
c000f751:	50                   	push   eax
c000f752:	e8 b7 fb ff ff       	call   c000f30e <File::File(char const*, Process*)>
c000f757:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f75c:	83 c4 0c             	add    esp,0xc
c000f75f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f763:	50                   	push   eax
c000f764:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f768:	50                   	push   eax
c000f769:	53                   	push   ebx
c000f76a:	e8 af fe ff ff       	call   c000f61e <File::stat(unsigned long long*, bool*)>
c000f76f:	83 c4 10             	add    esp,0x10
c000f772:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f774:	83 f8 02             	cmp    eax,0x2
c000f777:	75 09                	jne    c000f782 <setcwd(Process*, char*)+0xd9>
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	53                   	push   ebx
c000f77d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f780:	eb 0d                	jmp    c000f78f <setcwd(Process*, char*)+0xe6>
c000f782:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f785:	85 c0                	test   eax,eax
c000f787:	74 10                	je     c000f799 <setcwd(Process*, char*)+0xf0>
c000f789:	83 ec 0c             	sub    esp,0xc
c000f78c:	53                   	push   ebx
c000f78d:	ff d2                	call   edx
c000f78f:	83 c4 10             	add    esp,0x10
c000f792:	b8 01 00 00 00       	mov    eax,0x1
c000f797:	eb 2b                	jmp    c000f7c4 <setcwd(Process*, char*)+0x11b>
c000f799:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f79e:	75 10                	jne    c000f7b0 <setcwd(Process*, char*)+0x107>
c000f7a0:	83 ec 0c             	sub    esp,0xc
c000f7a3:	53                   	push   ebx
c000f7a4:	ff d2                	call   edx
c000f7a6:	83 c4 10             	add    esp,0x10
c000f7a9:	b8 02 00 00 00       	mov    eax,0x2
c000f7ae:	eb 14                	jmp    c000f7c4 <setcwd(Process*, char*)+0x11b>
c000f7b0:	83 ec 0c             	sub    esp,0xc
c000f7b3:	53                   	push   ebx
c000f7b4:	ff d2                	call   edx
c000f7b6:	58                   	pop    eax
c000f7b7:	5a                   	pop    edx
c000f7b8:	56                   	push   esi
c000f7b9:	57                   	push   edi
c000f7ba:	e8 e8 0e ff ff       	call   c00006a7 <strcpy>
c000f7bf:	83 c4 10             	add    esp,0x10
c000f7c2:	31 c0                	xor    eax,eax
c000f7c4:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f7ca:	5b                   	pop    ebx
c000f7cb:	5e                   	pop    esi
c000f7cc:	5f                   	pop    edi
c000f7cd:	5d                   	pop    ebp
c000f7ce:	c3                   	ret    
c000f7cf:	90                   	nop

c000f7d0 <Directory::Directory(char const*, Process*)>:
c000f7d0:	83 ec 0c             	sub    esp,0xc
c000f7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d7:	83 ec 08             	sub    esp,0x8
c000f7da:	6a 00                	push   0x0
c000f7dc:	50                   	push   eax
c000f7dd:	e8 3a e1 ff ff       	call   c000d91c <UnixFile::UnixFile(int)>
c000f7e2:	83 c4 10             	add    esp,0x10
c000f7e5:	ba a4 05 02 c0       	mov    edx,0xc00205a4
c000f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ee:	89 10                	mov    DWORD PTR [eax],edx
c000f7f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7f4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fe:	83 c0 0d             	add    eax,0xd
c000f801:	83 ec 04             	sub    esp,0x4
c000f804:	52                   	push   edx
c000f805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f809:	50                   	push   eax
c000f80a:	e8 55 f9 ff ff       	call   c000f164 <standardiseFiles(char*, char const*, char const*)>
c000f80f:	83 c4 10             	add    esp,0x10
c000f812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f816:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f819:	8d 50 bf             	lea    edx,[eax-0x41]
c000f81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f820:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f82a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f82e:	90                   	nop
c000f82f:	83 c4 0c             	add    esp,0xc
c000f832:	c3                   	ret    
c000f833:	90                   	nop

c000f834 <Directory::open()>:
c000f834:	53                   	push   ebx
c000f835:	b8 0b 00 00 00       	mov    eax,0xb
c000f83a:	83 ec 08             	sub    esp,0x8
c000f83d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f841:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f848:	80 fa 19             	cmp    dl,0x19
c000f84b:	77 3d                	ja     c000f88a <Directory::open()+0x56>
c000f84d:	8b 14 95 60 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcca0]
c000f854:	85 d2                	test   edx,edx
c000f856:	74 32                	je     c000f88a <Directory::open()+0x56>
c000f858:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f85e:	85 d2                	test   edx,edx
c000f860:	74 28                	je     c000f88a <Directory::open()+0x56>
c000f862:	b8 06 00 00 00       	mov    eax,0x6
c000f867:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f86b:	75 1d                	jne    c000f88a <Directory::open()+0x56>
c000f86d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f873:	50                   	push   eax
c000f874:	8b 02                	mov    eax,DWORD PTR [edx]
c000f876:	51                   	push   ecx
c000f877:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f87a:	51                   	push   ecx
c000f87b:	52                   	push   edx
c000f87c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000f87f:	83 c4 10             	add    esp,0x10
c000f882:	85 c0                	test   eax,eax
c000f884:	75 04                	jne    c000f88a <Directory::open()+0x56>
c000f886:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f88a:	83 c4 08             	add    esp,0x8
c000f88d:	5b                   	pop    ebx
c000f88e:	c3                   	ret    
c000f88f:	90                   	nop

c000f890 <Directory::close()>:
c000f890:	53                   	push   ebx
c000f891:	b8 0b 00 00 00       	mov    eax,0xb
c000f896:	83 ec 08             	sub    esp,0x8
c000f899:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f89d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8a4:	80 fa 19             	cmp    dl,0x19
c000f8a7:	77 41                	ja     c000f8ea <Directory::close()+0x5a>
c000f8a9:	8b 1c 95 60 33 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcca0]
c000f8b0:	85 db                	test   ebx,ebx
c000f8b2:	74 36                	je     c000f8ea <Directory::close()+0x5a>
c000f8b4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f8bb:	74 2d                	je     c000f8ea <Directory::close()+0x5a>
c000f8bd:	b8 05 00 00 00       	mov    eax,0x5
c000f8c2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8c6:	74 22                	je     c000f8ea <Directory::close()+0x5a>
c000f8c8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f8cc:	8b 04 95 60 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcca0]
c000f8d3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f8d9:	53                   	push   ebx
c000f8da:	53                   	push   ebx
c000f8db:	8b 10                	mov    edx,DWORD PTR [eax]
c000f8dd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f8e3:	50                   	push   eax
c000f8e4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000f8e7:	83 c4 10             	add    esp,0x10
c000f8ea:	83 c4 08             	add    esp,0x8
c000f8ed:	5b                   	pop    ebx
c000f8ee:	c3                   	ret    
c000f8ef:	90                   	nop

c000f8f0 <Directory::unlink()>:
c000f8f0:	83 ec 0c             	sub    esp,0xc
c000f8f3:	b8 0b 00 00 00       	mov    eax,0xb
c000f8f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f903:	80 f9 19             	cmp    cl,0x19
c000f906:	77 2f                	ja     c000f937 <Directory::unlink()+0x47>
c000f908:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f90f:	85 c9                	test   ecx,ecx
c000f911:	74 24                	je     c000f937 <Directory::unlink()+0x47>
c000f913:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f919:	85 c9                	test   ecx,ecx
c000f91b:	74 1a                	je     c000f937 <Directory::unlink()+0x47>
c000f91d:	b8 06 00 00 00       	mov    eax,0x6
c000f922:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f926:	75 0f                	jne    c000f937 <Directory::unlink()+0x47>
c000f928:	83 c2 0d             	add    edx,0xd
c000f92b:	50                   	push   eax
c000f92c:	50                   	push   eax
c000f92d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f92f:	52                   	push   edx
c000f930:	51                   	push   ecx
c000f931:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f934:	83 c4 10             	add    esp,0x10
c000f937:	83 c4 0c             	add    esp,0xc
c000f93a:	c3                   	ret    
c000f93b:	90                   	nop

c000f93c <Directory::rename(char const*)>:
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	b8 0b 00 00 00       	mov    eax,0xb
c000f944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f948:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f94f:	80 f9 19             	cmp    cl,0x19
c000f952:	77 32                	ja     c000f986 <Directory::rename(char const*)+0x4a>
c000f954:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f95b:	85 c9                	test   ecx,ecx
c000f95d:	74 27                	je     c000f986 <Directory::rename(char const*)+0x4a>
c000f95f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f965:	85 c9                	test   ecx,ecx
c000f967:	74 1d                	je     c000f986 <Directory::rename(char const*)+0x4a>
c000f969:	b8 06 00 00 00       	mov    eax,0x6
c000f96e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f972:	75 12                	jne    c000f986 <Directory::rename(char const*)+0x4a>
c000f974:	83 c2 0d             	add    edx,0xd
c000f977:	50                   	push   eax
c000f978:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f97a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f97e:	52                   	push   edx
c000f97f:	51                   	push   ecx
c000f980:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f983:	83 c4 10             	add    esp,0x10
c000f986:	83 c4 0c             	add    esp,0xc
c000f989:	c3                   	ret    

c000f98a <Directory::exists()>:
c000f98a:	83 ec 0c             	sub    esp,0xc
c000f98d:	31 c0                	xor    eax,eax
c000f98f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f993:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f99a:	80 f9 19             	cmp    cl,0x19
c000f99d:	77 24                	ja     c000f9c3 <Directory::exists()+0x39>
c000f99f:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000f9a6:	85 c9                	test   ecx,ecx
c000f9a8:	74 19                	je     c000f9c3 <Directory::exists()+0x39>
c000f9aa:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9b0:	85 c9                	test   ecx,ecx
c000f9b2:	74 0f                	je     c000f9c3 <Directory::exists()+0x39>
c000f9b4:	83 c2 0d             	add    edx,0xd
c000f9b7:	50                   	push   eax
c000f9b8:	50                   	push   eax
c000f9b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9bb:	52                   	push   edx
c000f9bc:	51                   	push   ecx
c000f9bd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	83 c4 0c             	add    esp,0xc
c000f9c6:	c3                   	ret    
c000f9c7:	90                   	nop

c000f9c8 <Directory::read(dirent*)>:
c000f9c8:	83 ec 1c             	sub    esp,0x1c
c000f9cb:	b8 0b 00 00 00       	mov    eax,0xb
c000f9d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f9d4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f9db:	80 fa 19             	cmp    dl,0x19
c000f9de:	77 30                	ja     c000fa10 <Directory::read(dirent*)+0x48>
c000f9e0:	8b 14 95 60 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcca0]
c000f9e7:	85 d2                	test   edx,edx
c000f9e9:	74 25                	je     c000fa10 <Directory::read(dirent*)+0x48>
c000f9eb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f9f2:	74 1c                	je     c000fa10 <Directory::read(dirent*)+0x48>
c000f9f4:	83 ec 0c             	sub    esp,0xc
c000f9f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9f9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000f9fd:	52                   	push   edx
c000f9fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fa02:	6a 00                	push   0x0
c000fa04:	68 10 01 00 00       	push   0x110
c000fa09:	51                   	push   ecx
c000fa0a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fa0d:	83 c4 20             	add    esp,0x20
c000fa10:	83 c4 1c             	add    esp,0x1c
c000fa13:	c3                   	ret    

c000fa14 <Directory::create()>:
c000fa14:	83 ec 0c             	sub    esp,0xc
c000fa17:	b8 0b 00 00 00       	mov    eax,0xb
c000fa1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa27:	80 f9 19             	cmp    cl,0x19
c000fa2a:	77 2f                	ja     c000fa5b <Directory::create()+0x47>
c000fa2c:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000fa33:	85 c9                	test   ecx,ecx
c000fa35:	74 24                	je     c000fa5b <Directory::create()+0x47>
c000fa37:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa3d:	85 c9                	test   ecx,ecx
c000fa3f:	74 1a                	je     c000fa5b <Directory::create()+0x47>
c000fa41:	b8 06 00 00 00       	mov    eax,0x6
c000fa46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa4a:	75 0f                	jne    c000fa5b <Directory::create()+0x47>
c000fa4c:	83 c2 0d             	add    edx,0xd
c000fa4f:	50                   	push   eax
c000fa50:	50                   	push   eax
c000fa51:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa53:	52                   	push   edx
c000fa54:	51                   	push   ecx
c000fa55:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fa58:	83 c4 10             	add    esp,0x10
c000fa5b:	83 c4 0c             	add    esp,0xc
c000fa5e:	c3                   	ret    
c000fa5f:	90                   	nop

c000fa60 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fa60:	b8 0a 00 00 00       	mov    eax,0xa
c000fa65:	c3                   	ret    

c000fa66 <Bus::Bus(char const*)>:
c000fa66:	83 ec 0c             	sub    esp,0xc
c000fa69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa6d:	83 ec 08             	sub    esp,0x8
c000fa70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa74:	50                   	push   eax
c000fa75:	e8 60 09 00 00       	call   c00103da <Device::Device(char const*)>
c000fa7a:	83 c4 10             	add    esp,0x10
c000fa7d:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa86:	89 10                	mov    DWORD PTR [eax],edx
c000fa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa8c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fa96:	90                   	nop
c000fa97:	83 c4 0c             	add    esp,0xc
c000fa9a:	c3                   	ret    
c000fa9b:	90                   	nop

c000fa9c <Bus::~Bus()>:
c000fa9c:	83 ec 0c             	sub    esp,0xc
c000fa9f:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000faa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faa8:	89 10                	mov    DWORD PTR [eax],edx
c000faaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faae:	83 ec 0c             	sub    esp,0xc
c000fab1:	50                   	push   eax
c000fab2:	e8 d5 05 00 00       	call   c001008c <Device::~Device()>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	90                   	nop
c000fabb:	83 c4 0c             	add    esp,0xc
c000fabe:	c3                   	ret    
c000fabf:	90                   	nop

c000fac0 <Bus::~Bus()>:
c000fac0:	83 ec 0c             	sub    esp,0xc
c000fac3:	83 ec 0c             	sub    esp,0xc
c000fac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faca:	e8 cd ff ff ff       	call   c000fa9c <Bus::~Bus()>
c000facf:	83 c4 10             	add    esp,0x10
c000fad2:	83 ec 08             	sub    esp,0x8
c000fad5:	68 58 01 00 00       	push   0x158
c000fada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fade:	e8 1c f2 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c000fae3:	83 c4 10             	add    esp,0x10
c000fae6:	83 c4 0c             	add    esp,0xc
c000fae9:	c3                   	ret    

c000faea <Buzzer::Buzzer(char const*)>:
c000faea:	83 ec 0c             	sub    esp,0xc
c000faed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faf1:	83 ec 08             	sub    esp,0x8
c000faf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faf8:	50                   	push   eax
c000faf9:	e8 dc 08 00 00       	call   c00103da <Device::Device(char const*)>
c000fafe:	83 c4 10             	add    esp,0x10
c000fb01:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000fb06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb0a:	89 10                	mov    DWORD PTR [eax],edx
c000fb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb10:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb1e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fb28:	90                   	nop
c000fb29:	83 c4 0c             	add    esp,0xc
c000fb2c:	c3                   	ret    
c000fb2d:	90                   	nop

c000fb2e <Buzzer::~Buzzer()>:
c000fb2e:	83 ec 0c             	sub    esp,0xc
c000fb31:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000fb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb3a:	89 10                	mov    DWORD PTR [eax],edx
c000fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	50                   	push   eax
c000fb44:	e8 43 05 00 00       	call   c001008c <Device::~Device()>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	90                   	nop
c000fb4d:	83 c4 0c             	add    esp,0xc
c000fb50:	c3                   	ret    
c000fb51:	90                   	nop

c000fb52 <Buzzer::~Buzzer()>:
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	83 ec 0c             	sub    esp,0xc
c000fb58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb5c:	e8 cd ff ff ff       	call   c000fb2e <Buzzer::~Buzzer()>
c000fb61:	83 c4 10             	add    esp,0x10
c000fb64:	83 ec 08             	sub    esp,0x8
c000fb67:	68 5c 01 00 00       	push   0x15c
c000fb6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb70:	e8 8a f1 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	83 c4 0c             	add    esp,0xc
c000fb7b:	c3                   	ret    

c000fb7c <Buzzer::stop()>:
c000fb7c:	83 ec 14             	sub    esp,0x14
c000fb7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb83:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb85:	6a 00                	push   0x0
c000fb87:	50                   	push   eax
c000fb88:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fb8b:	83 c4 1c             	add    esp,0x1c
c000fb8e:	c3                   	ret    

c000fb8f <beepThread(void*)>:
c000fb8f:	53                   	push   ebx
c000fb90:	83 ec 08             	sub    esp,0x8
c000fb93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb97:	e8 72 7a 00 00       	call   c001760e <unlockScheduler()>
c000fb9c:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fba1:	52                   	push   edx
c000fba2:	52                   	push   edx
c000fba3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fba9:	52                   	push   edx
c000fbaa:	50                   	push   eax
c000fbab:	e8 15 81 00 00       	call   c0017cc5 <nanoSleep(unsigned long long)>
c000fbb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb3:	e8 c4 ff ff ff       	call   c000fb7c <Buzzer::stop()>
c000fbb8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fbc0:	83 c4 18             	add    esp,0x18
c000fbc3:	5b                   	pop    ebx
c000fbc4:	e9 42 80 00 00       	jmp    c0017c0b <blockTask(TaskState)>
c000fbc9:	90                   	nop

c000fbca <Buzzer::beep(int, int, bool)>:
c000fbca:	57                   	push   edi
c000fbcb:	56                   	push   esi
c000fbcc:	53                   	push   ebx
c000fbcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fbd9:	52                   	push   edx
c000fbda:	52                   	push   edx
c000fbdb:	8b 06                	mov    eax,DWORD PTR [esi]
c000fbdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbe1:	56                   	push   esi
c000fbe2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	89 f8                	mov    eax,edi
c000fbea:	84 c0                	test   al,al
c000fbec:	74 1f                	je     c000fc0d <Buzzer::beep(int, int, bool)+0x43>
c000fbee:	50                   	push   eax
c000fbef:	50                   	push   eax
c000fbf0:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fbf6:	99                   	cdq    
c000fbf7:	52                   	push   edx
c000fbf8:	50                   	push   eax
c000fbf9:	e8 c7 80 00 00       	call   c0017cc5 <nanoSleep(unsigned long long)>
c000fbfe:	83 c4 10             	add    esp,0x10
c000fc01:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fc05:	5b                   	pop    ebx
c000fc06:	5e                   	pop    esi
c000fc07:	5f                   	pop    edi
c000fc08:	e9 6f ff ff ff       	jmp    c000fb7c <Buzzer::stop()>
c000fc0d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fc13:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c000fc18:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fc20:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc24:	c7 44 24 14 8f fb 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fb8f
c000fc2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fc30:	5b                   	pop    ebx
c000fc31:	5e                   	pop    esi
c000fc32:	5f                   	pop    edi
c000fc33:	e9 fe 7a 00 00       	jmp    c0017736 <Process::createThread(void (*)(void*), void*, int)>

c000fc38 <loadClockSettings()>:
c000fc38:	c7 05 cc 2e 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0022ecc,0xa
c000fc42:	c6 05 c9 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ec9,0x0
c000fc49:	c6 05 c8 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ec8,0x1
c000fc50:	c3                   	ret    
c000fc51:	90                   	nop

c000fc52 <Clock::Clock(char const*)>:
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc59:	83 ec 08             	sub    esp,0x8
c000fc5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc60:	50                   	push   eax
c000fc61:	e8 74 07 00 00       	call   c00103da <Device::Device(char const*)>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	89 10                	mov    DWORD PTR [eax],edx
c000fc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc78:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fc82:	90                   	nop
c000fc83:	83 c4 0c             	add    esp,0xc
c000fc86:	c3                   	ret    
c000fc87:	90                   	nop

c000fc88 <Clock::~Clock()>:
c000fc88:	83 ec 0c             	sub    esp,0xc
c000fc8b:	ba 1c 06 02 c0       	mov    edx,0xc002061c
c000fc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc94:	89 10                	mov    DWORD PTR [eax],edx
c000fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	50                   	push   eax
c000fc9e:	e8 e9 03 00 00       	call   c001008c <Device::~Device()>
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	90                   	nop
c000fca7:	83 c4 0c             	add    esp,0xc
c000fcaa:	c3                   	ret    
c000fcab:	90                   	nop

c000fcac <Clock::~Clock()>:
c000fcac:	83 ec 0c             	sub    esp,0xc
c000fcaf:	83 ec 0c             	sub    esp,0xc
c000fcb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcb6:	e8 cd ff ff ff       	call   c000fc88 <Clock::~Clock()>
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	83 ec 08             	sub    esp,0x8
c000fcc1:	68 58 01 00 00       	push   0x158
c000fcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcca:	e8 30 f0 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	83 c4 0c             	add    esp,0xc
c000fcd5:	c3                   	ret    

c000fcd6 <Clock::timeInSecondsLocal()>:
c000fcd6:	53                   	push   ebx
c000fcd7:	83 ec 14             	sub    esp,0x14
c000fcda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fcde:	8b 10                	mov    edx,DWORD PTR [eax]
c000fce0:	50                   	push   eax
c000fce1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fce4:	0f b6 0d c8 2e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022ec8
c000fceb:	03 0d cc 2e 02 c0    	add    ecx,DWORD PTR ds:0xc0022ecc
c000fcf1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fcf7:	89 cb                	mov    ebx,ecx
c000fcf9:	c1 fb 1f             	sar    ebx,0x1f
c000fcfc:	01 c8                	add    eax,ecx
c000fcfe:	11 da                	adc    edx,ebx
c000fd00:	83 c4 10             	add    esp,0x10
c000fd03:	31 c9                	xor    ecx,ecx
c000fd05:	80 3d c9 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ec9,0x0
c000fd0c:	74 05                	je     c000fd13 <Clock::timeInSecondsLocal()+0x3d>
c000fd0e:	b9 08 07 00 00       	mov    ecx,0x708
c000fd13:	31 db                	xor    ebx,ebx
c000fd15:	01 c8                	add    eax,ecx
c000fd17:	11 da                	adc    edx,ebx
c000fd19:	83 c4 08             	add    esp,0x8
c000fd1c:	5b                   	pop    ebx
c000fd1d:	c3                   	ret    

c000fd1e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000fd1e:	57                   	push   edi
c000fd1f:	56                   	push   esi
c000fd20:	53                   	push   ebx
c000fd21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fd25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fd29:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd2f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000fd32:	0f b6 05 c8 2e 02 c0 	movzx  eax,BYTE PTR ds:0xc0022ec8
c000fd39:	03 05 cc 2e 02 c0    	add    eax,DWORD PTR ds:0xc0022ecc
c000fd3f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000fd45:	99                   	cdq    
c000fd46:	29 c6                	sub    esi,eax
c000fd48:	19 d7                	sbb    edi,edx
c000fd4a:	89 f0                	mov    eax,esi
c000fd4c:	89 fa                	mov    edx,edi
c000fd4e:	31 f6                	xor    esi,esi
c000fd50:	80 3d c9 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ec9,0x0
c000fd57:	74 05                	je     c000fd5e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000fd59:	be 08 07 00 00       	mov    esi,0x708
c000fd5e:	31 ff                	xor    edi,edi
c000fd60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fd64:	29 f0                	sub    eax,esi
c000fd66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fd6a:	19 fa                	sbb    edx,edi
c000fd6c:	89 d8                	mov    eax,ebx
c000fd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fd72:	5b                   	pop    ebx
c000fd73:	5e                   	pop    esi
c000fd74:	5f                   	pop    edi
c000fd75:	ff e0                	jmp    eax

c000fd77 <datetimeToSeconds(datetime_t)>:
c000fd77:	55                   	push   ebp
c000fd78:	57                   	push   edi
c000fd79:	56                   	push   esi
c000fd7a:	53                   	push   ebx
c000fd7b:	83 ec 14             	sub    esp,0x14
c000fd7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000fd82:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fd86:	89 d3                	mov    ebx,edx
c000fd88:	0f b6 c6             	movzx  eax,dh
c000fd8b:	c1 eb 10             	shr    ebx,0x10
c000fd8e:	48                   	dec    eax
c000fd8f:	66 81 eb 6c 07       	sub    bx,0x76c
c000fd94:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000fd98:	0f b6 f5             	movzx  esi,ch
c000fd9b:	89 cf                	mov    edi,ecx
c000fd9d:	6b f6 3c             	imul   esi,esi,0x3c
c000fda0:	c1 ef 10             	shr    edi,0x10
c000fda3:	0f b6 c9             	movzx  ecx,cl
c000fda6:	89 f8                	mov    eax,edi
c000fda8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fdae:	0f b6 f8             	movzx  edi,al
c000fdb1:	0f b6 d2             	movzx  edx,dl
c000fdb4:	01 fe                	add    esi,edi
c000fdb6:	01 f1                	add    ecx,esi
c000fdb8:	0f b7 f3             	movzx  esi,bx
c000fdbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fdbf:	c1 f9 1f             	sar    ecx,0x1f
c000fdc2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000fdc7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fdcb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000fdd0:	8b 0c 8d 60 06 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf9a0]
c000fdd7:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000fddb:	76 29                	jbe    c000fe06 <datetimeToSeconds(datetime_t)+0x8f>
c000fddd:	f6 c3 03             	test   bl,0x3
c000fde0:	75 24                	jne    c000fe06 <datetimeToSeconds(datetime_t)+0x8f>
c000fde2:	31 d2                	xor    edx,edx
c000fde4:	bf 64 00 00 00       	mov    edi,0x64
c000fde9:	89 d8                	mov    eax,ebx
c000fdeb:	66 f7 f7             	div    di
c000fdee:	66 85 d2             	test   dx,dx
c000fdf1:	75 12                	jne    c000fe05 <datetimeToSeconds(datetime_t)+0x8e>
c000fdf3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fdf9:	bf 90 01 00 00       	mov    edi,0x190
c000fdfe:	99                   	cdq    
c000fdff:	f7 ff                	idiv   edi
c000fe01:	85 d2                	test   edx,edx
c000fe03:	75 01                	jne    c000fe06 <datetimeToSeconds(datetime_t)+0x8f>
c000fe05:	41                   	inc    ecx
c000fe06:	66 83 fb 46          	cmp    bx,0x46
c000fe0a:	76 45                	jbe    c000fe51 <datetimeToSeconds(datetime_t)+0xda>
c000fe0c:	bb 46 00 00 00       	mov    ebx,0x46
c000fe11:	bf 64 00 00 00       	mov    edi,0x64
c000fe16:	bd 90 01 00 00       	mov    ebp,0x190
c000fe1b:	b8 6d 01 00 00       	mov    eax,0x16d
c000fe20:	f6 c3 03             	test   bl,0x3
c000fe23:	75 23                	jne    c000fe48 <datetimeToSeconds(datetime_t)+0xd1>
c000fe25:	89 d8                	mov    eax,ebx
c000fe27:	99                   	cdq    
c000fe28:	f7 ff                	idiv   edi
c000fe2a:	b8 6e 01 00 00       	mov    eax,0x16e
c000fe2f:	85 d2                	test   edx,edx
c000fe31:	75 15                	jne    c000fe48 <datetimeToSeconds(datetime_t)+0xd1>
c000fe33:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000fe39:	99                   	cdq    
c000fe3a:	f7 fd                	idiv   ebp
c000fe3c:	83 fa 01             	cmp    edx,0x1
c000fe3f:	19 c0                	sbb    eax,eax
c000fe41:	f7 d0                	not    eax
c000fe43:	05 6e 01 00 00       	add    eax,0x16e
c000fe48:	01 c1                	add    ecx,eax
c000fe4a:	43                   	inc    ebx
c000fe4b:	39 f3                	cmp    ebx,esi
c000fe4d:	7c cc                	jl     c000fe1b <datetimeToSeconds(datetime_t)+0xa4>
c000fe4f:	eb 35                	jmp    c000fe86 <datetimeToSeconds(datetime_t)+0x10f>
c000fe51:	74 33                	je     c000fe86 <datetimeToSeconds(datetime_t)+0x10f>
c000fe53:	b8 45 00 00 00       	mov    eax,0x45
c000fe58:	89 c2                	mov    edx,eax
c000fe5a:	83 e2 03             	and    edx,0x3
c000fe5d:	39 f0                	cmp    eax,esi
c000fe5f:	7e 0f                	jle    c000fe70 <datetimeToSeconds(datetime_t)+0xf9>
c000fe61:	83 fa 01             	cmp    edx,0x1
c000fe64:	19 d2                	sbb    edx,edx
c000fe66:	48                   	dec    eax
c000fe67:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000fe6e:	eb e8                	jmp    c000fe58 <datetimeToSeconds(datetime_t)+0xe1>
c000fe70:	b8 6d 01 00 00       	mov    eax,0x16d
c000fe75:	85 d2                	test   edx,edx
c000fe77:	75 0b                	jne    c000fe84 <datetimeToSeconds(datetime_t)+0x10d>
c000fe79:	66 83 fb 01          	cmp    bx,0x1
c000fe7d:	19 c0                	sbb    eax,eax
c000fe7f:	05 6e 01 00 00       	add    eax,0x16e
c000fe84:	29 c1                	sub    ecx,eax
c000fe86:	b8 80 51 01 00       	mov    eax,0x15180
c000fe8b:	f7 e9                	imul   ecx
c000fe8d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fe91:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fe95:	83 c4 14             	add    esp,0x14
c000fe98:	5b                   	pop    ebx
c000fe99:	5e                   	pop    esi
c000fe9a:	5f                   	pop    edi
c000fe9b:	5d                   	pop    ebp
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000fe9e:	57                   	push   edi
c000fe9f:	56                   	push   esi
c000fea0:	53                   	push   ebx
c000fea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fea5:	8b 06                	mov    eax,DWORD PTR [esi]
c000fea7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000feaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb2:	e8 c0 fe ff ff       	call   c000fd77 <datetimeToSeconds(datetime_t)>
c000feb7:	59                   	pop    ecx
c000feb8:	0f b6 0d c8 2e 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022ec8
c000febf:	5b                   	pop    ebx
c000fec0:	03 0d cc 2e 02 c0    	add    ecx,DWORD PTR ds:0xc0022ecc
c000fec6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fecc:	89 cb                	mov    ebx,ecx
c000fece:	c1 fb 1f             	sar    ebx,0x1f
c000fed1:	29 c8                	sub    eax,ecx
c000fed3:	19 da                	sbb    edx,ebx
c000fed5:	31 c9                	xor    ecx,ecx
c000fed7:	80 3d c9 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ec9,0x0
c000fede:	74 05                	je     c000fee5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000fee0:	b9 08 07 00 00       	mov    ecx,0x708
c000fee5:	31 db                	xor    ebx,ebx
c000fee7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000feeb:	29 c8                	sub    eax,ecx
c000feed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fef1:	19 da                	sbb    edx,ebx
c000fef3:	89 f8                	mov    eax,edi
c000fef5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000fef9:	5b                   	pop    ebx
c000fefa:	5e                   	pop    esi
c000fefb:	5f                   	pop    edi
c000fefc:	ff e0                	jmp    eax

c000fefe <secondsToDatetime(unsigned long long)>:
c000fefe:	55                   	push   ebp
c000feff:	57                   	push   edi
c000ff00:	56                   	push   esi
c000ff01:	53                   	push   ebx
c000ff02:	83 ec 1c             	sub    esp,0x1c
c000ff05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ff09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ff11:	6a 00                	push   0x0
c000ff13:	68 80 51 01 00       	push   0x15180
c000ff18:	55                   	push   ebp
c000ff19:	57                   	push   edi
c000ff1a:	e8 ad e1 00 00       	call   c001e0cc <__udivdi3>
c000ff1f:	83 c4 10             	add    esp,0x10
c000ff22:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000ff28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff2c:	6a 00                	push   0x0
c000ff2e:	68 80 51 01 00       	push   0x15180
c000ff33:	55                   	push   ebp
c000ff34:	57                   	push   edi
c000ff35:	bf 10 0e 00 00       	mov    edi,0xe10
c000ff3a:	e8 8d e2 00 00       	call   c001e1cc <__umoddi3>
c000ff3f:	83 c4 10             	add    esp,0x10
c000ff42:	99                   	cdq    
c000ff43:	f7 ff                	idiv   edi
c000ff45:	bf 3c 00 00 00       	mov    edi,0x3c
c000ff4a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000ff4d:	89 d0                	mov    eax,edx
c000ff4f:	99                   	cdq    
c000ff50:	f7 ff                	idiv   edi
c000ff52:	85 db                	test   ebx,ebx
c000ff54:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000ff57:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000ff5a:	79 11                	jns    c000ff6d <secondsToDatetime(unsigned long long)+0x6f>
c000ff5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff60:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000ff66:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ff6b:	eb 07                	jmp    c000ff74 <secondsToDatetime(unsigned long long)+0x76>
c000ff6d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000ff72:	89 d8                	mov    eax,ebx
c000ff74:	bf b4 05 00 00       	mov    edi,0x5b4
c000ff79:	99                   	cdq    
c000ff7a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000ff7f:	f7 f9                	idiv   ecx
c000ff81:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000ff86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff8a:	31 d2                	xor    edx,edx
c000ff8c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ff94:	01 c3                	add    ebx,eax
c000ff96:	89 d8                	mov    eax,ebx
c000ff98:	f7 f1                	div    ecx
c000ff9a:	31 d2                	xor    edx,edx
c000ff9c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000ff9f:	89 d8                	mov    eax,ebx
c000ffa1:	f7 f7                	div    edi
c000ffa3:	31 d2                	xor    edx,edx
c000ffa5:	29 c1                	sub    ecx,eax
c000ffa7:	89 d8                	mov    eax,ebx
c000ffa9:	f7 f5                	div    ebp
c000ffab:	bd 6d 01 00 00       	mov    ebp,0x16d
c000ffb0:	29 c1                	sub    ecx,eax
c000ffb2:	31 d2                	xor    edx,edx
c000ffb4:	89 c8                	mov    eax,ecx
c000ffb6:	f7 f5                	div    ebp
c000ffb8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000ffbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffc1:	31 d2                	xor    edx,edx
c000ffc3:	89 c8                	mov    eax,ecx
c000ffc5:	f7 f5                	div    ebp
c000ffc7:	31 d2                	xor    edx,edx
c000ffc9:	01 c3                	add    ebx,eax
c000ffcb:	89 c8                	mov    eax,ecx
c000ffcd:	f7 f7                	div    edi
c000ffcf:	bf 99 00 00 00       	mov    edi,0x99
c000ffd4:	29 c3                	sub    ebx,eax
c000ffd6:	31 d2                	xor    edx,edx
c000ffd8:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000ffe0:	29 c3                	sub    ebx,eax
c000ffe2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ffe5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000ffe8:	bb 05 00 00 00       	mov    ebx,0x5
c000ffed:	83 c1 02             	add    ecx,0x2
c000fff0:	89 c8                	mov    eax,ecx
c000fff2:	f7 f7                	div    edi
c000fff4:	31 d2                	xor    edx,edx
c000fff6:	89 c7                	mov    edi,eax
c000fff8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000fffe:	83 c0 02             	add    eax,0x2
c0010001:	f7 f3                	div    ebx
c0010003:	89 eb                	mov    ebx,ebp
c0010005:	29 c3                	sub    ebx,eax
c0010007:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001000d:	88 1e                	mov    BYTE PTR [esi],bl
c001000f:	19 c0                	sbb    eax,eax
c0010011:	31 d2                	xor    edx,edx
c0010013:	83 e0 0c             	and    eax,0xc
c0010016:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001001a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010022:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010026:	83 f9 01             	cmp    ecx,0x1
c0010029:	0f 96 c2             	setbe  dl
c001002c:	41                   	inc    ecx
c001002d:	01 d0                	add    eax,edx
c001002f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010032:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010036:	83 c4 1c             	add    esp,0x1c
c0010039:	89 f0                	mov    eax,esi
c001003b:	5b                   	pop    ebx
c001003c:	5e                   	pop    esi
c001003d:	5f                   	pop    edi
c001003e:	5d                   	pop    ebp
c001003f:	c2 04 00             	ret    0x4

c0010042 <Clock::timeInDatetimeLocal()>:
c0010042:	53                   	push   ebx
c0010043:	83 ec 14             	sub    esp,0x14
c0010046:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001004a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001004e:	e8 83 fc ff ff       	call   c000fcd6 <Clock::timeInSecondsLocal()>
c0010053:	83 c4 0c             	add    esp,0xc
c0010056:	52                   	push   edx
c0010057:	50                   	push   eax
c0010058:	53                   	push   ebx
c0010059:	e8 a0 fe ff ff       	call   c000fefe <secondsToDatetime(unsigned long long)>
c001005e:	89 d8                	mov    eax,ebx
c0010060:	83 c4 14             	add    esp,0x14
c0010063:	5b                   	pop    ebx
c0010064:	c2 04 00             	ret    0x4
c0010067:	90                   	nop

c0010068 <Device::hibernate()>:
c0010068:	c3                   	ret    
c0010069:	90                   	nop

c001006a <Device::wake()>:
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <Device::detect()>:
c001006c:	c3                   	ret    
c001006d:	90                   	nop

c001006e <Device::disableLegacy()>:
c001006e:	c3                   	ret    
c001006f:	90                   	nop

c0010070 <Device::powerSaving(PowerSavingLevel)>:
c0010070:	c3                   	ret    
c0010071:	90                   	nop

c0010072 <DriverlessDevice::close(int, int, void*)>:
c0010072:	31 c0                	xor    eax,eax
c0010074:	c3                   	ret    
c0010075:	90                   	nop

c0010076 <DriverlessDevice::detect()>:
c0010076:	c3                   	ret    
c0010077:	90                   	nop

c0010078 <DriverlessDevice::open(int, int, void*)>:
c0010078:	83 ec 18             	sub    esp,0x18
c001007b:	68 90 06 02 c0       	push   0xc0020690
c0010080:	e8 c3 48 00 00       	call   c0014948 <Krnl::panic(char const*)>
c0010085:	83 c8 ff             	or     eax,0xffffffff
c0010088:	83 c4 1c             	add    esp,0x1c
c001008b:	c3                   	ret    

c001008c <Device::~Device()>:
c001008c:	ba b8 06 02 c0       	mov    edx,0xc00206b8
c0010091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010095:	89 10                	mov    DWORD PTR [eax],edx
c0010097:	90                   	nop
c0010098:	c3                   	ret    
c0010099:	90                   	nop

c001009a <Device::~Device()>:
c001009a:	83 ec 0c             	sub    esp,0xc
c001009d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00100a1:	e8 e6 ff ff ff       	call   c001008c <Device::~Device()>
c00100a6:	83 c4 04             	add    esp,0x4
c00100a9:	83 ec 08             	sub    esp,0x8
c00100ac:	68 58 01 00 00       	push   0x158
c00100b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b5:	e8 45 ec ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00100ba:	83 c4 10             	add    esp,0x10
c00100bd:	83 c4 0c             	add    esp,0xc
c00100c0:	c3                   	ret    
c00100c1:	90                   	nop

c00100c2 <Device::findAndLoadDriver()>:
c00100c2:	c3                   	ret    
c00100c3:	90                   	nop

c00100c4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00100c4:	57                   	push   edi
c00100c5:	b9 09 00 00 00       	mov    ecx,0x9
c00100ca:	56                   	push   esi
c00100cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00100cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c00100d3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00100dd:	81 c7 18 01 00 00    	add    edi,0x118
c00100e3:	fc                   	cld    
c00100e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00100e6:	5e                   	pop    esi
c00100e7:	5f                   	pop    edi
c00100e8:	c3                   	ret    
c00100e9:	90                   	nop

c00100ea <Device::preOpenACPI(void*, char*, char*)>:
c00100ea:	56                   	push   esi
c00100eb:	53                   	push   ebx
c00100ec:	83 ec 08             	sub    esp,0x8
c00100ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00100f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00100f7:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010105:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001010b:	6a 1e                	push   0x1e
c001010d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010113:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010117:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001011d:	50                   	push   eax
c001011e:	e8 af 04 ff ff       	call   c00005d2 <memcpy>
c0010123:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010127:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001012b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010133:	83 c4 14             	add    esp,0x14
c0010136:	5b                   	pop    ebx
c0010137:	5e                   	pop    esi
c0010138:	e9 95 04 ff ff       	jmp    c00005d2 <memcpy>
c001013d:	90                   	nop

c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001013e:	55                   	push   ebp
c001013f:	57                   	push   edi
c0010140:	56                   	push   esi
c0010141:	53                   	push   ebx
c0010142:	83 ec 0c             	sub    esp,0xc
c0010145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010149:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001014d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010151:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010155:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001015a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010161:	75 0b                	jne    c001016e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010163:	8b 00                	mov    eax,DWORD PTR [eax]
c0010165:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010169:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001016c:	eb 24                	jmp    c0010192 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001016e:	e8 cf 3a 00 00       	call   c0013c42 <thisCPU()>
c0010173:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010179:	8b 10                	mov    edx,DWORD PTR [eax]
c001017b:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001017f:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010183:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010187:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001018b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001018f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010192:	83 c4 0c             	add    esp,0xc
c0010195:	5b                   	pop    ebx
c0010196:	5e                   	pop    esi
c0010197:	5f                   	pop    edi
c0010198:	5d                   	pop    ebp
c0010199:	ff e0                	jmp    eax
c001019b:	90                   	nop

c001019c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001019c:	57                   	push   edi
c001019d:	56                   	push   esi
c001019e:	53                   	push   ebx
c001019f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00101ab:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00101b0:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00101b7:	75 0b                	jne    c00101c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00101b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00101bb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00101bf:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00101c2:	eb 20                	jmp    c00101e4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00101c4:	e8 79 3a 00 00       	call   c0013c42 <thisCPU()>
c00101c9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00101cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00101d1:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00101d5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101d9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00101dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101e1:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00101e4:	5b                   	pop    ebx
c00101e5:	5e                   	pop    esi
c00101e6:	5f                   	pop    edi
c00101e7:	ff e0                	jmp    eax
c00101e9:	90                   	nop

c00101ea <Device::addChild(Device*)>:
c00101ea:	53                   	push   ebx
c00101eb:	83 ec 08             	sub    esp,0x8
c00101ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00101fc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010202:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010204:	85 d2                	test   edx,edx
c0010206:	74 04                	je     c001020c <Device::addChild(Device*)+0x22>
c0010208:	89 d3                	mov    ebx,edx
c001020a:	eb f6                	jmp    c0010202 <Device::addChild(Device*)+0x18>
c001020c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	6a 08                	push   0x8
c0010214:	e8 d7 ea ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0010219:	89 03                	mov    DWORD PTR [ebx],eax
c001021b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010221:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010228:	83 c4 18             	add    esp,0x18
c001022b:	5b                   	pop    ebx
c001022c:	c3                   	ret    
c001022d:	90                   	nop

c001022e <Device::removeAllChildren()>:
c001022e:	56                   	push   esi
c001022f:	53                   	push   ebx
c0010230:	52                   	push   edx
c0010231:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010235:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001023b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001023e:	74 17                	je     c0010257 <Device::removeAllChildren()+0x29>
c0010240:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010243:	85 c0                	test   eax,eax
c0010245:	74 0c                	je     c0010253 <Device::removeAllChildren()+0x25>
c0010247:	83 ec 0c             	sub    esp,0xc
c001024a:	8b 10                	mov    edx,DWORD PTR [eax]
c001024c:	50                   	push   eax
c001024d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010250:	83 c4 10             	add    esp,0x10
c0010253:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010255:	eb e4                	jmp    c001023b <Device::removeAllChildren()+0xd>
c0010257:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001025d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010263:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010269:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010270:	58                   	pop    eax
c0010271:	5b                   	pop    ebx
c0010272:	5e                   	pop    esi
c0010273:	c3                   	ret    

c0010274 <Device::hibernateAll()>:
c0010274:	53                   	push   ebx
c0010275:	83 ec 14             	sub    esp,0x14
c0010278:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001027c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001027e:	53                   	push   ebx
c001027f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010282:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010288:	83 c4 10             	add    esp,0x10
c001028b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001028e:	74 0f                	je     c001029f <Device::hibernateAll()+0x2b>
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010296:	e8 d9 ff ff ff       	call   c0010274 <Device::hibernateAll()>
c001029b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001029d:	eb e9                	jmp    c0010288 <Device::hibernateAll()+0x14>
c001029f:	83 c4 08             	add    esp,0x8
c00102a2:	5b                   	pop    ebx
c00102a3:	c3                   	ret    

c00102a4 <Device::wakeAll()>:
c00102a4:	53                   	push   ebx
c00102a5:	83 ec 14             	sub    esp,0x14
c00102a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00102ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102ae:	53                   	push   ebx
c00102af:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00102b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00102be:	74 0f                	je     c00102cf <Device::wakeAll()+0x2b>
c00102c0:	83 ec 0c             	sub    esp,0xc
c00102c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102c6:	e8 d9 ff ff ff       	call   c00102a4 <Device::wakeAll()>
c00102cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102cd:	eb e9                	jmp    c00102b8 <Device::wakeAll()+0x14>
c00102cf:	83 c4 08             	add    esp,0x8
c00102d2:	5b                   	pop    ebx
c00102d3:	c3                   	ret    

c00102d4 <Device::detectAll()>:
c00102d4:	53                   	push   ebx
c00102d5:	83 ec 14             	sub    esp,0x14
c00102d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00102dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102de:	53                   	push   ebx
c00102df:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00102e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00102e8:	83 c4 10             	add    esp,0x10
c00102eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00102ee:	74 0f                	je     c00102ff <Device::detectAll()+0x2b>
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00102f6:	e8 d9 ff ff ff       	call   c00102d4 <Device::detectAll()>
c00102fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00102fd:	eb e9                	jmp    c00102e8 <Device::detectAll()+0x14>
c00102ff:	83 c4 08             	add    esp,0x8
c0010302:	5b                   	pop    ebx
c0010303:	c3                   	ret    

c0010304 <Device::disableLegacyAll()>:
c0010304:	53                   	push   ebx
c0010305:	83 ec 14             	sub    esp,0x14
c0010308:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001030c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001030e:	53                   	push   ebx
c001030f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010312:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001031e:	74 0f                	je     c001032f <Device::disableLegacyAll()+0x2b>
c0010320:	83 ec 0c             	sub    esp,0xc
c0010323:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010326:	e8 d9 ff ff ff       	call   c0010304 <Device::disableLegacyAll()>
c001032b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001032d:	eb e9                	jmp    c0010318 <Device::disableLegacyAll()+0x14>
c001032f:	83 c4 08             	add    esp,0x8
c0010332:	5b                   	pop    ebx
c0010333:	c3                   	ret    

c0010334 <Device::loadDriversForAll()>:
c0010334:	53                   	push   ebx
c0010335:	83 ec 08             	sub    esp,0x8
c0010338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001033c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010342:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010344:	85 db                	test   ebx,ebx
c0010346:	74 12                	je     c001035a <Device::loadDriversForAll()+0x26>
c0010348:	83 ec 0c             	sub    esp,0xc
c001034b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001034e:	e8 e1 ff ff ff       	call   c0010334 <Device::loadDriversForAll()>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	89 d8                	mov    eax,ebx
c0010358:	eb e8                	jmp    c0010342 <Device::loadDriversForAll()+0xe>
c001035a:	83 c4 08             	add    esp,0x8
c001035d:	5b                   	pop    ebx
c001035e:	c3                   	ret    
c001035f:	90                   	nop

c0010360 <Device::closeAll()>:
c0010360:	53                   	push   ebx
c0010361:	83 ec 08             	sub    esp,0x8
c0010364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010368:	8b 03                	mov    eax,DWORD PTR [ebx]
c001036a:	6a 00                	push   0x0
c001036c:	6a 00                	push   0x0
c001036e:	6a 00                	push   0x0
c0010370:	53                   	push   ebx
c0010371:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010374:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010380:	74 0f                	je     c0010391 <Device::closeAll()+0x31>
c0010382:	83 ec 0c             	sub    esp,0xc
c0010385:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010388:	e8 d3 ff ff ff       	call   c0010360 <Device::closeAll()>
c001038d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001038f:	eb e9                	jmp    c001037a <Device::closeAll()+0x1a>
c0010391:	83 c4 08             	add    esp,0x8
c0010394:	5b                   	pop    ebx
c0010395:	c3                   	ret    

c0010396 <Device::powerSavingAll(PowerSavingLevel)>:
c0010396:	56                   	push   esi
c0010397:	53                   	push   ebx
c0010398:	83 ec 0c             	sub    esp,0xc
c001039b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001039f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00103a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103a5:	56                   	push   esi
c00103a6:	53                   	push   ebx
c00103a7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00103aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00103b6:	74 0f                	je     c00103c7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00103b8:	52                   	push   edx
c00103b9:	52                   	push   edx
c00103ba:	56                   	push   esi
c00103bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00103be:	e8 d3 ff ff ff       	call   c0010396 <Device::powerSavingAll(PowerSavingLevel)>
c00103c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00103c5:	eb e9                	jmp    c00103b0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00103c7:	58                   	pop    eax
c00103c8:	5b                   	pop    ebx
c00103c9:	5e                   	pop    esi
c00103ca:	c3                   	ret    
c00103cb:	90                   	nop

c00103cc <Device::setName(char const*)>:
c00103cc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00103d4:	e9 ce 02 ff ff       	jmp    c00006a7 <strcpy>
c00103d9:	90                   	nop

c00103da <Device::Device(char const*)>:
c00103da:	83 ec 0c             	sub    esp,0xc
c00103dd:	ba b8 06 02 c0       	mov    edx,0xc00206b8
c00103e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103e6:	89 10                	mov    DWORD PTR [eax],edx
c00103e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00103f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010408:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010416:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010420:	83 ec 08             	sub    esp,0x8
c0010423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001042b:	e8 9c ff ff ff       	call   c00103cc <Device::setName(char const*)>
c0010430:	83 c4 10             	add    esp,0x10
c0010433:	83 ec 0c             	sub    esp,0xc
c0010436:	6a 08                	push   0x8
c0010438:	e8 b3 e8 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001043d:	83 c4 10             	add    esp,0x10
c0010440:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010446:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001044d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010451:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001045b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010461:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010471:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010487:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001048e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010492:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001049c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00104aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00104b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00104c6:	90                   	nop
c00104c7:	83 c4 0c             	add    esp,0xc
c00104ca:	c3                   	ret    
c00104cb:	90                   	nop

c00104cc <Device::getName()>:
c00104cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d0:	05 d0 00 00 00       	add    eax,0xd0
c00104d5:	c3                   	ret    

c00104d6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	83 ec 08             	sub    esp,0x8
c00104e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e4:	50                   	push   eax
c00104e5:	e8 f0 fe ff ff       	call   c00103da <Device::Device(char const*)>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	ba e4 06 02 c0       	mov    edx,0xc00206e4
c00104f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f6:	89 10                	mov    DWORD PTR [eax],edx
c00104f8:	90                   	nop
c00104f9:	83 c4 0c             	add    esp,0xc
c00104fc:	c3                   	ret    
c00104fd:	90                   	nop

c00104fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00104fe:	57                   	push   edi
c00104ff:	56                   	push   esi
c0010500:	53                   	push   ebx
c0010501:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010505:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010509:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001050d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010513:	75 0c                	jne    c0010521 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010515:	52                   	push   edx
c0010516:	52                   	push   edx
c0010517:	53                   	push   ebx
c0010518:	56                   	push   esi
c0010519:	e8 c6 e0 00 00       	call   c001e5e4 <LinkedList<Device>::addElement(Device*)>
c001051e:	83 c4 10             	add    esp,0x10
c0010521:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010527:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001052a:	74 12                	je     c001053e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001052c:	50                   	push   eax
c001052d:	57                   	push   edi
c001052e:	56                   	push   esi
c001052f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010532:	e8 c7 ff ff ff       	call   c00104fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010537:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010539:	83 c4 10             	add    esp,0x10
c001053c:	eb e9                	jmp    c0010527 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001053e:	5b                   	pop    ebx
c001053f:	5e                   	pop    esi
c0010540:	5f                   	pop    edi
c0010541:	c3                   	ret    

c0010542 <getDevicesOfType(DeviceType)>:
c0010542:	53                   	push   ebx
c0010543:	83 ec 14             	sub    esp,0x14
c0010546:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001054a:	53                   	push   ebx
c001054b:	e8 70 e1 00 00       	call   c001e6c0 <LinkedList<Device>::LinkedList()>
c0010550:	83 c4 0c             	add    esp,0xc
c0010553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010557:	53                   	push   ebx
c0010558:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c001055e:	e8 9b ff ff ff       	call   c00104fe <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010563:	89 d8                	mov    eax,ebx
c0010565:	83 c4 18             	add    esp,0x18
c0010568:	5b                   	pop    ebx
c0010569:	c2 04 00             	ret    0x4

c001056c <HardDiskController::HardDiskController(char const*)>:
c001056c:	83 ec 0c             	sub    esp,0xc
c001056f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010573:	83 ec 08             	sub    esp,0x8
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	50                   	push   eax
c001057b:	e8 5a fe ff ff       	call   c00103da <Device::Device(char const*)>
c0010580:	83 c4 10             	add    esp,0x10
c0010583:	ba 10 07 02 c0       	mov    edx,0xc0020710
c0010588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058c:	89 10                	mov    DWORD PTR [eax],edx
c001058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010592:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001059c:	90                   	nop
c001059d:	83 c4 0c             	add    esp,0xc
c00105a0:	c3                   	ret    
c00105a1:	90                   	nop

c00105a2 <HardDiskController::~HardDiskController()>:
c00105a2:	83 ec 0c             	sub    esp,0xc
c00105a5:	ba 10 07 02 c0       	mov    edx,0xc0020710
c00105aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ae:	89 10                	mov    DWORD PTR [eax],edx
c00105b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b4:	83 ec 0c             	sub    esp,0xc
c00105b7:	50                   	push   eax
c00105b8:	e8 cf fa ff ff       	call   c001008c <Device::~Device()>
c00105bd:	83 c4 10             	add    esp,0x10
c00105c0:	90                   	nop
c00105c1:	83 c4 0c             	add    esp,0xc
c00105c4:	c3                   	ret    
c00105c5:	90                   	nop

c00105c6 <HardDiskController::~HardDiskController()>:
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	83 ec 0c             	sub    esp,0xc
c00105cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d0:	e8 cd ff ff ff       	call   c00105a2 <HardDiskController::~HardDiskController()>
c00105d5:	83 c4 10             	add    esp,0x10
c00105d8:	83 ec 08             	sub    esp,0x8
c00105db:	68 58 01 00 00       	push   0x158
c00105e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105e4:	e8 16 e7 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00105e9:	83 c4 10             	add    esp,0x10
c00105ec:	83 c4 0c             	add    esp,0xc
c00105ef:	c3                   	ret    

c00105f0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00105f0:	83 ec 0c             	sub    esp,0xc
c00105f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f7:	83 ec 08             	sub    esp,0x8
c00105fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105fe:	50                   	push   eax
c00105ff:	e8 d6 fd ff ff       	call   c00103da <Device::Device(char const*)>
c0010604:	83 c4 10             	add    esp,0x10
c0010607:	ba 3c 07 02 c0       	mov    edx,0xc002073c
c001060c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010610:	89 10                	mov    DWORD PTR [eax],edx
c0010612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010616:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001061d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010621:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001063e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010648:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010652:	90                   	nop
c0010653:	83 c4 0c             	add    esp,0xc
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <PhysicalDisk::startCache()>:
c0010658:	56                   	push   esi
c0010659:	53                   	push   ebx
c001065a:	83 ec 10             	sub    esp,0x10
c001065d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010661:	6a 30                	push   0x30
c0010663:	e8 88 e6 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0010668:	89 c6                	mov    esi,eax
c001066a:	58                   	pop    eax
c001066b:	5a                   	pop    edx
c001066c:	53                   	push   ebx
c001066d:	56                   	push   esi
c001066e:	e8 bb 1d 00 00       	call   c001242e <VCache::VCache(PhysicalDisk*)>
c0010673:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010679:	83 c4 14             	add    esp,0x14
c001067c:	5b                   	pop    ebx
c001067d:	5e                   	pop    esi
c001067e:	c3                   	ret    
c001067f:	90                   	nop

c0010680 <PhysicalDisk::~PhysicalDisk()>:
c0010680:	83 ec 0c             	sub    esp,0xc
c0010683:	ba 3c 07 02 c0       	mov    edx,0xc002073c
c0010688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068c:	89 10                	mov    DWORD PTR [eax],edx
c001068e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010692:	83 ec 0c             	sub    esp,0xc
c0010695:	50                   	push   eax
c0010696:	e8 f1 f9 ff ff       	call   c001008c <Device::~Device()>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	90                   	nop
c001069f:	83 c4 0c             	add    esp,0xc
c00106a2:	c3                   	ret    
c00106a3:	90                   	nop

c00106a4 <PhysicalDisk::~PhysicalDisk()>:
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	83 ec 0c             	sub    esp,0xc
c00106aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ae:	e8 cd ff ff ff       	call   c0010680 <PhysicalDisk::~PhysicalDisk()>
c00106b3:	83 c4 10             	add    esp,0x10
c00106b6:	83 ec 08             	sub    esp,0x8
c00106b9:	68 6c 01 00 00       	push   0x16c
c00106be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c2:	e8 38 e6 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00106c7:	83 c4 10             	add    esp,0x10
c00106ca:	83 c4 0c             	add    esp,0xc
c00106cd:	c3                   	ret    

c00106ce <FPU::FPU(char const*)>:
c00106ce:	83 ec 0c             	sub    esp,0xc
c00106d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d5:	83 ec 08             	sub    esp,0x8
c00106d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106dc:	50                   	push   eax
c00106dd:	e8 f8 fc ff ff       	call   c00103da <Device::Device(char const*)>
c00106e2:	83 c4 10             	add    esp,0x10
c00106e5:	ba 78 07 02 c0       	mov    edx,0xc0020778
c00106ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106ee:	89 10                	mov    DWORD PTR [eax],edx
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00106fe:	90                   	nop
c00106ff:	83 c4 0c             	add    esp,0xc
c0010702:	c3                   	ret    
c0010703:	90                   	nop

c0010704 <FPU::~FPU()>:
c0010704:	83 ec 0c             	sub    esp,0xc
c0010707:	ba 78 07 02 c0       	mov    edx,0xc0020778
c001070c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010710:	89 10                	mov    DWORD PTR [eax],edx
c0010712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010716:	83 ec 0c             	sub    esp,0xc
c0010719:	50                   	push   eax
c001071a:	e8 6d f9 ff ff       	call   c001008c <Device::~Device()>
c001071f:	83 c4 10             	add    esp,0x10
c0010722:	90                   	nop
c0010723:	83 c4 0c             	add    esp,0xc
c0010726:	c3                   	ret    
c0010727:	90                   	nop

c0010728 <FPU::~FPU()>:
c0010728:	83 ec 0c             	sub    esp,0xc
c001072b:	83 ec 0c             	sub    esp,0xc
c001072e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010732:	e8 cd ff ff ff       	call   c0010704 <FPU::~FPU()>
c0010737:	83 c4 10             	add    esp,0x10
c001073a:	83 ec 08             	sub    esp,0x8
c001073d:	68 58 01 00 00       	push   0x158
c0010742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010746:	e8 b4 e5 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001074b:	83 c4 10             	add    esp,0x10
c001074e:	83 c4 0c             	add    esp,0xc
c0010751:	c3                   	ret    

c0010752 <setupFPU()>:
c0010752:	53                   	push   ebx
c0010753:	83 ec 08             	sub    esp,0x8
c0010756:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001075b:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010762:	74 19                	je     c001077d <setupFPU()+0x2b>
c0010764:	83 ec 0c             	sub    esp,0xc
c0010767:	68 58 01 00 00       	push   0x158
c001076c:	e8 7f e5 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0010771:	89 c3                	mov    ebx,eax
c0010773:	89 04 24             	mov    DWORD PTR [esp],eax
c0010776:	e8 25 c6 00 00       	call   c001cda0 <AVX::AVX()>
c001077b:	eb 5b                	jmp    c00107d8 <setupFPU()+0x86>
c001077d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010783:	84 c0                	test   al,al
c0010785:	79 19                	jns    c00107a0 <setupFPU()+0x4e>
c0010787:	83 ec 0c             	sub    esp,0xc
c001078a:	68 58 01 00 00       	push   0x158
c001078f:	e8 5c e5 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0010794:	89 c3                	mov    ebx,eax
c0010796:	89 04 24             	mov    DWORD PTR [esp],eax
c0010799:	e8 28 c7 00 00       	call   c001cec6 <SSE::SSE()>
c001079e:	eb 38                	jmp    c00107d8 <setupFPU()+0x86>
c00107a0:	a8 20                	test   al,0x20
c00107a2:	74 19                	je     c00107bd <setupFPU()+0x6b>
c00107a4:	83 ec 0c             	sub    esp,0xc
c00107a7:	68 58 01 00 00       	push   0x158
c00107ac:	e8 3f e5 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00107b1:	89 c3                	mov    ebx,eax
c00107b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00107b6:	e8 75 c6 00 00       	call   c001ce30 <MMX::MMX()>
c00107bb:	eb 1b                	jmp    c00107d8 <setupFPU()+0x86>
c00107bd:	a8 10                	test   al,0x10
c00107bf:	74 1c                	je     c00107dd <setupFPU()+0x8b>
c00107c1:	83 ec 0c             	sub    esp,0xc
c00107c4:	68 58 01 00 00       	push   0x158
c00107c9:	e8 22 e5 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00107ce:	89 c3                	mov    ebx,eax
c00107d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00107d3:	e8 7c c7 00 00       	call   c001cf54 <x87::x87()>
c00107d8:	83 c4 10             	add    esp,0x10
c00107db:	eb 12                	jmp    c00107ef <setupFPU()+0x9d>
c00107dd:	83 ec 0c             	sub    esp,0xc
c00107e0:	31 db                	xor    ebx,ebx
c00107e2:	68 68 07 02 c0       	push   0xc0020768
c00107e7:	e8 5c 41 00 00       	call   c0014948 <Krnl::panic(char const*)>
c00107ec:	83 c4 10             	add    esp,0x10
c00107ef:	89 d8                	mov    eax,ebx
c00107f1:	83 c4 08             	add    esp,0x8
c00107f4:	5b                   	pop    ebx
c00107f5:	c3                   	ret    

c00107f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00107f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00107fe:	c1 e0 04             	shl    eax,0x4
c0010801:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010805:	8d 50 10             	lea    edx,[eax+0x10]
c0010808:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001080e:	74 08                	je     c0010818 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010810:	83 c0 04             	add    eax,0x4
c0010813:	39 d0                	cmp    eax,edx
c0010815:	75 f1                	jne    c0010808 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010817:	c3                   	ret    
c0010818:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010822:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001082c:	eb e2                	jmp    c0010810 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001082e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001082e:	57                   	push   edi
c001082f:	31 c0                	xor    eax,eax
c0010831:	56                   	push   esi
c0010832:	53                   	push   ebx
c0010833:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010837:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001083b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001083f:	89 da                	mov    edx,ebx
c0010841:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010845:	c1 e2 04             	shl    edx,0x4
c0010848:	01 ca                	add    edx,ecx
c001084a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010852:	74 16                	je     c001086a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010854:	40                   	inc    eax
c0010855:	83 f8 04             	cmp    eax,0x4
c0010858:	75 f0                	jne    c001084a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001085a:	c7 44 24 10 a8 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207a8
c0010862:	5b                   	pop    ebx
c0010863:	5e                   	pop    esi
c0010864:	5f                   	pop    edi
c0010865:	e9 de 40 00 00       	jmp    c0014948 <Krnl::panic(char const*)>
c001086a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001086d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010870:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010876:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001087c:	5b                   	pop    ebx
c001087d:	5e                   	pop    esi
c001087e:	5f                   	pop    edi
c001087f:	c3                   	ret    

c0010880 <doubleFault(regs*, void*)>:
c0010880:	c7 44 24 04 d8 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208d8
c0010888:	e9 bb 40 00 00       	jmp    c0014948 <Krnl::panic(char const*)>
c001088d:	90                   	nop

c001088e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001088e:	56                   	push   esi
c001088f:	53                   	push   ebx
c0010890:	50                   	push   eax
c0010891:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010895:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010899:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001089e:	75 35                	jne    c00108d5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00108a0:	8d 43 20             	lea    eax,[ebx+0x20]
c00108a3:	31 d2                	xor    edx,edx
c00108a5:	89 c1                	mov    ecx,eax
c00108a7:	c1 e1 04             	shl    ecx,0x4
c00108aa:	01 f1                	add    ecx,esi
c00108ac:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00108b4:	74 3e                	je     c00108f4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00108b6:	42                   	inc    edx
c00108b7:	83 fa 04             	cmp    edx,0x4
c00108ba:	75 f0                	jne    c00108ac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00108bc:	83 ec 0c             	sub    esp,0xc
c00108bf:	68 1c 08 02 c0       	push   0xc002081c
c00108c4:	e8 7f 40 00 00       	call   c0014948 <Krnl::panic(char const*)>
c00108c9:	83 c4 10             	add    esp,0x10
c00108cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108d1:	5a                   	pop    edx
c00108d2:	5b                   	pop    ebx
c00108d3:	5e                   	pop    esi
c00108d4:	c3                   	ret    
c00108d5:	83 ec 0c             	sub    esp,0xc
c00108d8:	56                   	push   esi
c00108d9:	e8 ee fb ff ff       	call   c00104cc <Device::getName()>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108e4:	75 ba                	jne    c00108a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00108e6:	83 fb 0f             	cmp    ebx,0xf
c00108e9:	7f 29                	jg     c0010914 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00108eb:	0f b6 9b 40 25 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffddac0]
c00108f2:	eb ac                	jmp    c00108a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00108f4:	8d 04 82             	lea    eax,[edx+eax*4]
c00108f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00108fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00108fe:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010904:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010908:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001090e:	89 d8                	mov    eax,ebx
c0010910:	5a                   	pop    edx
c0010911:	5b                   	pop    ebx
c0010912:	5e                   	pop    esi
c0010913:	c3                   	ret    
c0010914:	83 ec 0c             	sub    esp,0xc
c0010917:	68 e4 07 02 c0       	push   0xc00207e4
c001091c:	e8 27 40 00 00       	call   c0014948 <Krnl::panic(char const*)>
c0010921:	83 c4 10             	add    esp,0x10
c0010924:	e9 77 ff ff ff       	jmp    c00108a0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010929:	90                   	nop

c001092a <InterruptController::clearAllHandlers(int, bool)>:
c001092a:	56                   	push   esi
c001092b:	53                   	push   ebx
c001092c:	52                   	push   edx
c001092d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010931:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010935:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001093a:	75 61                	jne    c001099d <InterruptController::clearAllHandlers(int, bool)+0x73>
c001093c:	8d 46 20             	lea    eax,[esi+0x20]
c001093f:	c1 e6 04             	shl    esi,0x4
c0010942:	c1 e0 04             	shl    eax,0x4
c0010945:	01 de                	add    esi,ebx
c0010947:	01 d8                	add    eax,ebx
c0010949:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010953:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001095d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010967:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010971:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001097b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010985:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001098f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010999:	58                   	pop    eax
c001099a:	5b                   	pop    ebx
c001099b:	5e                   	pop    esi
c001099c:	c3                   	ret    
c001099d:	83 ec 0c             	sub    esp,0xc
c00109a0:	53                   	push   ebx
c00109a1:	e8 26 fb ff ff       	call   c00104cc <Device::getName()>
c00109a6:	83 c4 10             	add    esp,0x10
c00109a9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00109ac:	75 8e                	jne    c001093c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00109ae:	83 fe 0f             	cmp    esi,0xf
c00109b1:	7f 09                	jg     c00109bc <InterruptController::clearAllHandlers(int, bool)+0x92>
c00109b3:	0f b6 b6 40 25 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffddac0]
c00109ba:	eb 80                	jmp    c001093c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	68 58 08 02 c0       	push   0xc0020858
c00109c4:	e8 7f 3f 00 00       	call   c0014948 <Krnl::panic(char const*)>
c00109c9:	83 c4 10             	add    esp,0x10
c00109cc:	e9 6b ff ff ff       	jmp    c001093c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00109d1:	90                   	nop

c00109d2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00109d2:	56                   	push   esi
c00109d3:	53                   	push   ebx
c00109d4:	52                   	push   edx
c00109d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00109dd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00109e2:	75 3a                	jne    c0010a1e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00109e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e8:	8d 50 20             	lea    edx,[eax+0x20]
c00109eb:	c1 e2 04             	shl    edx,0x4
c00109ee:	8d 04 16             	lea    eax,[esi+edx*1]
c00109f1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00109f5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00109fb:	74 0b                	je     c0010a08 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00109fd:	83 c0 04             	add    eax,0x4
c0010a00:	39 d0                	cmp    eax,edx
c0010a02:	75 f1                	jne    c00109f5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010a04:	58                   	pop    eax
c0010a05:	5b                   	pop    ebx
c0010a06:	5e                   	pop    esi
c0010a07:	c3                   	ret    
c0010a08:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a12:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a1c:	eb df                	jmp    c00109fd <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010a1e:	83 ec 0c             	sub    esp,0xc
c0010a21:	56                   	push   esi
c0010a22:	e8 a5 fa ff ff       	call   c00104cc <Device::getName()>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010a2d:	75 b5                	jne    c00109e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010a2f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010a34:	7f 11                	jg     c0010a47 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010a36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a3a:	0f b6 80 40 25 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddac0]
c0010a41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a45:	eb 9d                	jmp    c00109e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010a47:	83 ec 0c             	sub    esp,0xc
c0010a4a:	68 58 08 02 c0       	push   0xc0020858
c0010a4f:	e8 f4 3e 00 00       	call   c0014948 <Krnl::panic(char const*)>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	eb 8b                	jmp    c00109e4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010a59 <nmiHandler(regs*, void*)>:
c0010a59:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0010a5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010a62:	e9 f5 a8 ff ff       	jmp    c000b35c <Computer::handleNMI()>

c0010a67 <int_handler>:
c0010a67:	55                   	push   ebp
c0010a68:	57                   	push   edi
c0010a69:	56                   	push   esi
c0010a6a:	53                   	push   ebx
c0010a6b:	83 ec 0c             	sub    esp,0xc
c0010a6e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a72:	80 3d b0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b0,0x0
c0010a79:	74 0b                	je     c0010a86 <int_handler+0x1f>
c0010a7b:	fa                   	cli    
c0010a7c:	f4                   	hlt    
c0010a7d:	80 3d b0 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237b0,0x0
c0010a84:	75 f5                	jne    c0010a7b <int_handler+0x14>
c0010a86:	e8 b7 31 00 00       	call   c0013c42 <thisCPU()>
c0010a8b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010a8e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010a94:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010a97:	83 f8 17             	cmp    eax,0x17
c0010a9a:	77 13                	ja     c0010aaf <int_handler+0x48>
c0010a9c:	83 ec 08             	sub    esp,0x8
c0010a9f:	8b 17                	mov    edx,DWORD PTR [edi]
c0010aa1:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010aa4:	0f b6 c0             	movzx  eax,al
c0010aa7:	50                   	push   eax
c0010aa8:	57                   	push   edi
c0010aa9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	83 c3 15             	add    ebx,0x15
c0010ab2:	c1 e3 04             	shl    ebx,0x4
c0010ab5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010ab9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010ac0:	31 db                	xor    ebx,ebx
c0010ac2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010ac6:	85 c0                	test   eax,eax
c0010ac8:	74 13                	je     c0010add <int_handler+0x76>
c0010aca:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010acd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010ad1:	74 1c                	je     c0010aef <int_handler+0x88>
c0010ad3:	83 ec 08             	sub    esp,0x8
c0010ad6:	52                   	push   edx
c0010ad7:	56                   	push   esi
c0010ad8:	ff d0                	call   eax
c0010ada:	83 c4 10             	add    esp,0x10
c0010add:	43                   	inc    ebx
c0010ade:	83 fb 04             	cmp    ebx,0x4
c0010ae1:	75 df                	jne    c0010ac2 <int_handler+0x5b>
c0010ae3:	83 c4 0c             	add    esp,0xc
c0010ae6:	31 c0                	xor    eax,eax
c0010ae8:	5b                   	pop    ebx
c0010ae9:	31 d2                	xor    edx,edx
c0010aeb:	5e                   	pop    esi
c0010aec:	5f                   	pop    edi
c0010aed:	5d                   	pop    ebp
c0010aee:	c3                   	ret    
c0010aef:	83 ec 08             	sub    esp,0x8
c0010af2:	52                   	push   edx
c0010af3:	56                   	push   esi
c0010af4:	ff d0                	call   eax
c0010af6:	83 c4 10             	add    esp,0x10
c0010af9:	83 c4 0c             	add    esp,0xc
c0010afc:	5b                   	pop    ebx
c0010afd:	5e                   	pop    esi
c0010afe:	5f                   	pop    edi
c0010aff:	5d                   	pop    ebp
c0010b00:	c3                   	ret    
c0010b01:	90                   	nop

c0010b02 <InterruptController::InterruptController(char const*)>:
c0010b02:	83 ec 1c             	sub    esp,0x1c
c0010b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b09:	83 ec 08             	sub    esp,0x8
c0010b0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010b10:	50                   	push   eax
c0010b11:	e8 c4 f8 ff ff       	call   c00103da <Device::Device(char const*)>
c0010b16:	83 c4 10             	add    esp,0x10
c0010b19:	ba 50 0a 02 c0       	mov    edx,0xc0020a50
c0010b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b22:	89 10                	mov    DWORD PTR [eax],edx
c0010b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b28:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010b32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b3a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010b42:	7f 5e                	jg     c0010ba2 <InterruptController::InterruptController(char const*)+0xa0>
c0010b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010b4c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010b51:	7f 49                	jg     c0010b9c <InterruptController::InterruptController(char const*)+0x9a>
c0010b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010b62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b66:	01 ca                	add    edx,ecx
c0010b68:	83 c2 54             	add    edx,0x54
c0010b6b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010b82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b86:	01 ca                	add    edx,ecx
c0010b88:	81 c2 54 04 00 00    	add    edx,0x454
c0010b8e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010b96:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010b9a:	eb b0                	jmp    c0010b4c <InterruptController::InterruptController(char const*)+0x4a>
c0010b9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010ba0:	eb 98                	jmp    c0010b3a <InterruptController::InterruptController(char const*)+0x38>
c0010ba2:	90                   	nop
c0010ba3:	83 c4 1c             	add    esp,0x1c
c0010ba6:	c3                   	ret    
c0010ba7:	90                   	nop

c0010ba8 <InterruptController::~InterruptController()>:
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	ba 50 0a 02 c0       	mov    edx,0xc0020a50
c0010bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb4:	89 10                	mov    DWORD PTR [eax],edx
c0010bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bba:	83 ec 0c             	sub    esp,0xc
c0010bbd:	50                   	push   eax
c0010bbe:	e8 c9 f4 ff ff       	call   c001008c <Device::~Device()>
c0010bc3:	83 c4 10             	add    esp,0x10
c0010bc6:	90                   	nop
c0010bc7:	83 c4 0c             	add    esp,0xc
c0010bca:	c3                   	ret    
c0010bcb:	90                   	nop

c0010bcc <InterruptController::~InterruptController()>:
c0010bcc:	83 ec 0c             	sub    esp,0xc
c0010bcf:	83 ec 0c             	sub    esp,0xc
c0010bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd6:	e8 cd ff ff ff       	call   c0010ba8 <InterruptController::~InterruptController()>
c0010bdb:	83 c4 10             	add    esp,0x10
c0010bde:	83 ec 08             	sub    esp,0x8
c0010be1:	68 58 21 00 00       	push   0x2158
c0010be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bea:	e8 10 e1 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	83 c4 0c             	add    esp,0xc
c0010bf5:	c3                   	ret    

c0010bf6 <displayDebugInfo(regs*)>:
c0010bf6:	55                   	push   ebp
c0010bf7:	57                   	push   edi
c0010bf8:	56                   	push   esi
c0010bf9:	53                   	push   ebx
c0010bfa:	83 ec 24             	sub    esp,0x24
c0010bfd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010c01:	0f 20 c2             	mov    edx,cr0
c0010c04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010c08:	0f 20 d7             	mov    edi,cr2
c0010c0b:	0f 20 de             	mov    esi,cr3
c0010c0e:	0f 20 e5             	mov    ebp,cr4
c0010c11:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010c14:	68 e5 08 02 c0       	push   0xc00208e5
c0010c19:	e8 c1 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c1e:	58                   	pop    eax
c0010c1f:	5a                   	pop    edx
c0010c20:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010c23:	68 f0 08 02 c0       	push   0xc00208f0
c0010c28:	e8 b2 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c2d:	59                   	pop    ecx
c0010c2e:	58                   	pop    eax
c0010c2f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010c32:	68 fb 08 02 c0       	push   0xc00208fb
c0010c37:	e8 a3 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c3c:	58                   	pop    eax
c0010c3d:	5a                   	pop    edx
c0010c3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010c41:	68 06 09 02 c0       	push   0xc0020906
c0010c46:	e8 94 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c4b:	59                   	pop    ecx
c0010c4c:	58                   	pop    eax
c0010c4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c50:	68 11 09 02 c0       	push   0xc0020911
c0010c55:	e8 85 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c5a:	58                   	pop    eax
c0010c5b:	5a                   	pop    edx
c0010c5c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010c5f:	68 1c 09 02 c0       	push   0xc002091c
c0010c64:	e8 76 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c69:	59                   	pop    ecx
c0010c6a:	58                   	pop    eax
c0010c6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010c6e:	68 36 09 02 c0       	push   0xc0020936
c0010c73:	e8 67 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c78:	58                   	pop    eax
c0010c79:	5a                   	pop    edx
c0010c7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c7d:	68 27 09 02 c0       	push   0xc0020927
c0010c82:	e8 58 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c87:	59                   	pop    ecx
c0010c88:	58                   	pop    eax
c0010c89:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010c8c:	68 32 09 02 c0       	push   0xc0020932
c0010c91:	e8 49 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010c96:	58                   	pop    eax
c0010c97:	5a                   	pop    edx
c0010c98:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010c9b:	68 41 09 02 c0       	push   0xc0020941
c0010ca0:	e8 3a e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010ca5:	59                   	pop    ecx
c0010ca6:	58                   	pop    eax
c0010ca7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010caa:	68 4c 09 02 c0       	push   0xc002094c
c0010caf:	e8 2b e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010cb4:	58                   	pop    eax
c0010cb5:	5a                   	pop    edx
c0010cb6:	57                   	push   edi
c0010cb7:	68 57 09 02 c0       	push   0xc0020957
c0010cbc:	e8 1e e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010cc1:	59                   	pop    ecx
c0010cc2:	58                   	pop    eax
c0010cc3:	56                   	push   esi
c0010cc4:	68 62 09 02 c0       	push   0xc0020962
c0010cc9:	e8 11 e1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0010cce:	58                   	pop    eax
c0010ccf:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010cd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cda:	e8 e8 c1 ff ff       	call   c000cec7 <setActiveTerminal(VgaText*)>
c0010cdf:	58                   	pop    eax
c0010ce0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010ce3:	5a                   	pop    edx
c0010ce4:	c1 e0 05             	shl    eax,0x5
c0010ce7:	05 a0 22 02 c0       	add    eax,0xc00222a0
c0010cec:	50                   	push   eax
c0010ced:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010cf2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010cf8:	e8 e9 c5 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010cfd:	59                   	pop    ecx
c0010cfe:	58                   	pop    eax
c0010cff:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d04:	68 6d 09 02 c0       	push   0xc002096d
c0010d09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d0f:	e8 d2 c5 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010d14:	58                   	pop    eax
c0010d15:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d1a:	5a                   	pop    edx
c0010d1b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010d1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d24:	e8 e3 c5 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010d29:	59                   	pop    ecx
c0010d2a:	58                   	pop    eax
c0010d2b:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d30:	68 75 09 02 c0       	push   0xc0020975
c0010d35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d3b:	e8 a6 c5 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010d40:	58                   	pop    eax
c0010d41:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d46:	5a                   	pop    edx
c0010d47:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d50:	e8 b7 c5 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010d55:	59                   	pop    ecx
c0010d56:	58                   	pop    eax
c0010d57:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d5c:	68 7d 09 02 c0       	push   0xc002097d
c0010d61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d67:	e8 7a c5 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010d6c:	58                   	pop    eax
c0010d6d:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d72:	5a                   	pop    edx
c0010d73:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010d76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d7c:	e8 8b c5 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010d81:	59                   	pop    ecx
c0010d82:	58                   	pop    eax
c0010d83:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d88:	68 85 09 02 c0       	push   0xc0020985
c0010d8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010d93:	e8 4e c5 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010d98:	58                   	pop    eax
c0010d99:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010d9e:	5a                   	pop    edx
c0010d9f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010da2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010da8:	e8 5f c5 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010dad:	59                   	pop    ecx
c0010dae:	58                   	pop    eax
c0010daf:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010db4:	68 8d 09 02 c0       	push   0xc002098d
c0010db9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dbf:	e8 22 c5 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010dc4:	58                   	pop    eax
c0010dc5:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010dca:	5a                   	pop    edx
c0010dcb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010dce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010dd4:	e8 33 c5 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010dd9:	59                   	pop    ecx
c0010dda:	58                   	pop    eax
c0010ddb:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010de0:	68 95 09 02 c0       	push   0xc0020995
c0010de5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010deb:	e8 f6 c4 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010df0:	58                   	pop    eax
c0010df1:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010df6:	5a                   	pop    edx
c0010df7:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0010dfa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e00:	e8 07 c5 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010e05:	59                   	pop    ecx
c0010e06:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e0b:	5b                   	pop    ebx
c0010e0c:	68 9d 09 02 c0       	push   0xc002099d
c0010e11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e17:	e8 ca c4 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010e1c:	58                   	pop    eax
c0010e1d:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e22:	5a                   	pop    edx
c0010e23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e27:	52                   	push   edx
c0010e28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e2e:	e8 d9 c4 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010e33:	59                   	pop    ecx
c0010e34:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e39:	5b                   	pop    ebx
c0010e3a:	68 a6 09 02 c0       	push   0xc00209a6
c0010e3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e45:	e8 9c c4 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010e4a:	58                   	pop    eax
c0010e4b:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e50:	5a                   	pop    edx
c0010e51:	57                   	push   edi
c0010e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e58:	e8 af c4 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010e5d:	59                   	pop    ecx
c0010e5e:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e63:	5b                   	pop    ebx
c0010e64:	68 ae 09 02 c0       	push   0xc00209ae
c0010e69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e6f:	e8 72 c4 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010e74:	5f                   	pop    edi
c0010e75:	58                   	pop    eax
c0010e76:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e7b:	56                   	push   esi
c0010e7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e82:	e8 85 c4 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010e87:	58                   	pop    eax
c0010e88:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010e8d:	5a                   	pop    edx
c0010e8e:	68 b6 09 02 c0       	push   0xc00209b6
c0010e93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010e99:	e8 48 c4 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010e9e:	59                   	pop    ecx
c0010e9f:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010ea4:	5b                   	pop    ebx
c0010ea5:	55                   	push   ebp
c0010ea6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010eac:	e8 5b c4 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010eb1:	5e                   	pop    esi
c0010eb2:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010eb7:	5f                   	pop    edi
c0010eb8:	68 be 09 02 c0       	push   0xc00209be
c0010ebd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ec3:	e8 1e c4 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010ec8:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010ecd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010ed3:	e8 40 d8 00 00       	call   c001e718 <CPU::readDR0()>
c0010ed8:	5d                   	pop    ebp
c0010ed9:	5a                   	pop    edx
c0010eda:	50                   	push   eax
c0010edb:	53                   	push   ebx
c0010edc:	e8 2b c4 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010ee1:	59                   	pop    ecx
c0010ee2:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010ee7:	5b                   	pop    ebx
c0010ee8:	68 c7 09 02 c0       	push   0xc00209c7
c0010eed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ef3:	e8 ee c3 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010ef8:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010efd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f03:	e8 22 d8 00 00       	call   c001e72a <CPU::readDR1()>
c0010f08:	5e                   	pop    esi
c0010f09:	5f                   	pop    edi
c0010f0a:	50                   	push   eax
c0010f0b:	53                   	push   ebx
c0010f0c:	e8 fb c3 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010f11:	5d                   	pop    ebp
c0010f12:	58                   	pop    eax
c0010f13:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010f18:	68 cf 09 02 c0       	push   0xc00209cf
c0010f1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f23:	e8 be c3 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010f28:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010f2d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f33:	e8 04 d8 00 00       	call   c001e73c <CPU::readDR2()>
c0010f38:	5a                   	pop    edx
c0010f39:	59                   	pop    ecx
c0010f3a:	50                   	push   eax
c0010f3b:	53                   	push   ebx
c0010f3c:	e8 cb c3 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010f41:	5b                   	pop    ebx
c0010f42:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010f47:	5e                   	pop    esi
c0010f48:	68 d7 09 02 c0       	push   0xc00209d7
c0010f4d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f53:	e8 8e c3 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010f58:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010f5d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f63:	e8 e6 d7 00 00       	call   c001e74e <CPU::readDR3()>
c0010f68:	5f                   	pop    edi
c0010f69:	5d                   	pop    ebp
c0010f6a:	50                   	push   eax
c0010f6b:	53                   	push   ebx
c0010f6c:	e8 9b c3 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010f71:	58                   	pop    eax
c0010f72:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010f77:	5a                   	pop    edx
c0010f78:	68 df 09 02 c0       	push   0xc00209df
c0010f7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f83:	e8 5e c3 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010f88:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010f8d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010f93:	e8 c8 d7 00 00       	call   c001e760 <CPU::readDR6()>
c0010f98:	59                   	pop    ecx
c0010f99:	5e                   	pop    esi
c0010f9a:	50                   	push   eax
c0010f9b:	53                   	push   ebx
c0010f9c:	e8 6b c3 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010fa1:	5f                   	pop    edi
c0010fa2:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010fa7:	5d                   	pop    ebp
c0010fa8:	68 e7 09 02 c0       	push   0xc00209e7
c0010fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fb3:	e8 2e c3 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0010fb8:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0010fbd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0010fc3:	e8 aa d7 00 00       	call   c001e772 <CPU::readDR7()>
c0010fc8:	5a                   	pop    edx
c0010fc9:	59                   	pop    ecx
c0010fca:	50                   	push   eax
c0010fcb:	53                   	push   ebx
c0010fcc:	e8 3b c3 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0010fd1:	fa                   	cli    
c0010fd2:	f4                   	hlt    
c0010fd3:	83 c4 10             	add    esp,0x10
c0010fd6:	eb fe                	jmp    c0010fd6 <displayDebugInfo(regs*)+0x3e0>

c0010fd8 <gpFault(regs*, void*)>:
c0010fd8:	53                   	push   ebx
c0010fd9:	83 ec 14             	sub    esp,0x14
c0010fdc:	c7 05 e8 2e 02 c0 05 86 01 c0 	mov    DWORD PTR ds:0xc0022ee8,0xc0018605
c0010fe6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010fea:	53                   	push   ebx
c0010feb:	e8 15 76 00 00       	call   c0018605 <Vm::faultHandler(regs*)>
c0010ff0:	83 c4 10             	add    esp,0x10
c0010ff3:	84 c0                	test   al,al
c0010ff5:	74 05                	je     c0010ffc <gpFault(regs*, void*)+0x24>
c0010ff7:	83 c4 08             	add    esp,0x8
c0010ffa:	5b                   	pop    ebx
c0010ffb:	c3                   	ret    
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	68 ef 09 02 c0       	push   0xc00209ef
c0011004:	e8 d6 dd ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0011009:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001100c:	e8 e5 fb ff ff       	call   c0010bf6 <displayDebugInfo(regs*)>

c0011011 <pgFault(regs*, void*)>:
c0011011:	83 ec 18             	sub    esp,0x18
c0011014:	68 0a 0a 02 c0       	push   0xc0020a0a
c0011019:	e8 c1 dd ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001101e:	58                   	pop    eax
c001101f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011023:	e8 ce fb ff ff       	call   c0010bf6 <displayDebugInfo(regs*)>

c0011028 <otherISRHandler(regs*, void*)>:
c0011028:	53                   	push   ebx
c0011029:	83 ec 0c             	sub    esp,0xc
c001102c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011030:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011033:	50                   	push   eax
c0011034:	50                   	push   eax
c0011035:	68 17 0a 02 c0       	push   0xc0020a17
c001103a:	e8 a0 dd ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001103f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011042:	e8 af fb ff ff       	call   c0010bf6 <displayDebugInfo(regs*)>

c0011047 <opcodeFault(regs*, void*)>:
c0011047:	53                   	push   ebx
c0011048:	83 ec 08             	sub    esp,0x8
c001104b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001104f:	e8 ee 2b 00 00       	call   c0013c42 <thisCPU()>
c0011054:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001105b:	74 16                	je     c0011073 <opcodeFault(regs*, void*)+0x2c>
c001105d:	83 ec 0c             	sub    esp,0xc
c0011060:	68 94 08 02 c0       	push   0xc0020894
c0011065:	e8 75 dd ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001106a:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c001106e:	83 c4 18             	add    esp,0x18
c0011071:	5b                   	pop    ebx
c0011072:	c3                   	ret    
c0011073:	83 ec 0c             	sub    esp,0xc
c0011076:	68 34 0a 02 c0       	push   0xc0020a34
c001107b:	e8 5f dd ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0011080:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011083:	c1 e0 04             	shl    eax,0x4
c0011086:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0011089:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001108d:	89 14 24             	mov    DWORD PTR [esp],edx
c0011090:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0011094:	52                   	push   edx
c0011095:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0011099:	52                   	push   edx
c001109a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001109d:	50                   	push   eax
c001109e:	68 b8 08 02 c0       	push   0xc00208b8
c00110a3:	e8 37 dd ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00110a8:	83 c4 14             	add    esp,0x14
c00110ab:	53                   	push   ebx
c00110ac:	e8 45 fb ff ff       	call   c0010bf6 <displayDebugInfo(regs*)>

c00110b1 <displayProgramFault(char const*)>:
c00110b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110b9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110bf:	85 c0                	test   eax,eax
c00110c1:	74 15                	je     c00110d8 <displayProgramFault(char const*)+0x27>
c00110c3:	83 ec 0c             	sub    esp,0xc
c00110c6:	6a 04                	push   0x4
c00110c8:	6a 0f                	push   0xf
c00110ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110ce:	50                   	push   eax
c00110cf:	e8 d4 be ff ff       	call   c000cfa8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00110d4:	83 c4 1c             	add    esp,0x1c
c00110d7:	c3                   	ret    
c00110d8:	c3                   	ret    
c00110d9:	90                   	nop

c00110da <InterruptController::convertLegacyIRQNumber(int)>:
c00110da:	53                   	push   ebx
c00110db:	83 ec 14             	sub    esp,0x14
c00110de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e6:	e8 e1 f3 ff ff       	call   c00104cc <Device::getName()>
c00110eb:	83 c4 10             	add    esp,0x10
c00110ee:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00110f1:	74 07                	je     c00110fa <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00110f3:	89 d8                	mov    eax,ebx
c00110f5:	83 c4 08             	add    esp,0x8
c00110f8:	5b                   	pop    ebx
c00110f9:	c3                   	ret    
c00110fa:	83 fb 0f             	cmp    ebx,0xf
c00110fd:	7f 0e                	jg     c001110d <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00110ff:	0f b6 9b 40 25 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffddac0]
c0011106:	83 c4 08             	add    esp,0x8
c0011109:	89 d8                	mov    eax,ebx
c001110b:	5b                   	pop    ebx
c001110c:	c3                   	ret    
c001110d:	83 ec 0c             	sub    esp,0xc
c0011110:	68 e4 07 02 c0       	push   0xc00207e4
c0011115:	e8 2e 38 00 00       	call   c0014948 <Krnl::panic(char const*)>
c001111a:	89 d8                	mov    eax,ebx
c001111c:	83 c4 10             	add    esp,0x10
c001111f:	83 c4 08             	add    esp,0x8
c0011122:	5b                   	pop    ebx
c0011123:	c3                   	ret    

c0011124 <setupInterruptController()>:
c0011124:	56                   	push   esi
c0011125:	53                   	push   ebx
c0011126:	51                   	push   ecx
c0011127:	e8 13 2b 00 00       	call   c0013c3f <getCPUNumber()>
c001112c:	85 c0                	test   eax,eax
c001112e:	0f 85 10 02 00 00    	jne    c0011344 <setupInterruptController()+0x220>
c0011134:	83 ec 0c             	sub    esp,0xc
c0011137:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001113c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011142:	68 58 21 00 00       	push   0x2158
c0011147:	83 e0 01             	and    eax,0x1
c001114a:	89 c6                	mov    esi,eax
c001114c:	e8 9f db ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0011151:	89 04 24             	mov    DWORD PTR [esp],eax
c0011154:	89 c3                	mov    ebx,eax
c0011156:	e8 65 c4 00 00       	call   c001d5c0 <PIC::PIC()>
c001115b:	6a 00                	push   0x0
c001115d:	6a 00                	push   0x0
c001115f:	6a 00                	push   0x0
c0011161:	53                   	push   ebx
c0011162:	e8 9d c7 00 00       	call   c001d904 <PIC::open(int, int, void*)>
c0011167:	83 c4 20             	add    esp,0x20
c001116a:	89 f0                	mov    eax,esi
c001116c:	84 c0                	test   al,al
c001116e:	0f 85 92 01 00 00    	jne    c0011306 <setupInterruptController()+0x1e2>
c0011174:	83 ec 08             	sub    esp,0x8
c0011177:	53                   	push   ebx
c0011178:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c001117e:	e8 67 f0 ff ff       	call   c00101ea <Device::addChild(Device*)>
c0011183:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011185:	6a 00                	push   0x0
c0011187:	68 28 10 01 c0       	push   0xc0011028
c001118c:	6a 00                	push   0x0
c001118e:	53                   	push   ebx
c001118f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011192:	83 c4 20             	add    esp,0x20
c0011195:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011197:	6a 00                	push   0x0
c0011199:	68 28 10 01 c0       	push   0xc0011028
c001119e:	6a 01                	push   0x1
c00111a0:	53                   	push   ebx
c00111a1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111a6:	6a 00                	push   0x0
c00111a8:	68 59 0a 01 c0       	push   0xc0010a59
c00111ad:	6a 02                	push   0x2
c00111af:	53                   	push   ebx
c00111b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111b3:	83 c4 20             	add    esp,0x20
c00111b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111b8:	6a 00                	push   0x0
c00111ba:	68 28 10 01 c0       	push   0xc0011028
c00111bf:	6a 03                	push   0x3
c00111c1:	53                   	push   ebx
c00111c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c7:	6a 00                	push   0x0
c00111c9:	68 28 10 01 c0       	push   0xc0011028
c00111ce:	6a 04                	push   0x4
c00111d0:	53                   	push   ebx
c00111d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111d4:	83 c4 20             	add    esp,0x20
c00111d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111d9:	6a 00                	push   0x0
c00111db:	68 28 10 01 c0       	push   0xc0011028
c00111e0:	6a 05                	push   0x5
c00111e2:	53                   	push   ebx
c00111e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e8:	6a 00                	push   0x0
c00111ea:	68 47 10 01 c0       	push   0xc0011047
c00111ef:	6a 06                	push   0x6
c00111f1:	53                   	push   ebx
c00111f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00111f5:	83 c4 20             	add    esp,0x20
c00111f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111fa:	6a 00                	push   0x0
c00111fc:	68 28 10 01 c0       	push   0xc0011028
c0011201:	6a 07                	push   0x7
c0011203:	53                   	push   ebx
c0011204:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011207:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011209:	6a 00                	push   0x0
c001120b:	68 80 08 01 c0       	push   0xc0010880
c0011210:	6a 08                	push   0x8
c0011212:	53                   	push   ebx
c0011213:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011216:	83 c4 20             	add    esp,0x20
c0011219:	8b 03                	mov    eax,DWORD PTR [ebx]
c001121b:	6a 00                	push   0x0
c001121d:	68 28 10 01 c0       	push   0xc0011028
c0011222:	6a 09                	push   0x9
c0011224:	53                   	push   ebx
c0011225:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011228:	8b 03                	mov    eax,DWORD PTR [ebx]
c001122a:	6a 00                	push   0x0
c001122c:	68 28 10 01 c0       	push   0xc0011028
c0011231:	6a 0a                	push   0xa
c0011233:	53                   	push   ebx
c0011234:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011237:	83 c4 20             	add    esp,0x20
c001123a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001123c:	6a 00                	push   0x0
c001123e:	68 28 10 01 c0       	push   0xc0011028
c0011243:	6a 0b                	push   0xb
c0011245:	53                   	push   ebx
c0011246:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011249:	8b 03                	mov    eax,DWORD PTR [ebx]
c001124b:	6a 00                	push   0x0
c001124d:	68 28 10 01 c0       	push   0xc0011028
c0011252:	6a 0c                	push   0xc
c0011254:	53                   	push   ebx
c0011255:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011258:	83 c4 20             	add    esp,0x20
c001125b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001125d:	6a 00                	push   0x0
c001125f:	68 d8 0f 01 c0       	push   0xc0010fd8
c0011264:	6a 0d                	push   0xd
c0011266:	53                   	push   ebx
c0011267:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001126a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001126c:	6a 00                	push   0x0
c001126e:	68 11 10 01 c0       	push   0xc0011011
c0011273:	6a 0e                	push   0xe
c0011275:	53                   	push   ebx
c0011276:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011279:	83 c4 20             	add    esp,0x20
c001127c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001127e:	6a 00                	push   0x0
c0011280:	68 28 10 01 c0       	push   0xc0011028
c0011285:	6a 0f                	push   0xf
c0011287:	53                   	push   ebx
c0011288:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001128b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001128d:	6a 00                	push   0x0
c001128f:	68 28 10 01 c0       	push   0xc0011028
c0011294:	6a 10                	push   0x10
c0011296:	53                   	push   ebx
c0011297:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001129a:	83 c4 20             	add    esp,0x20
c001129d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001129f:	6a 00                	push   0x0
c00112a1:	68 28 10 01 c0       	push   0xc0011028
c00112a6:	6a 11                	push   0x11
c00112a8:	53                   	push   ebx
c00112a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ae:	6a 00                	push   0x0
c00112b0:	68 28 10 01 c0       	push   0xc0011028
c00112b5:	6a 12                	push   0x12
c00112b7:	53                   	push   ebx
c00112b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112bb:	83 c4 20             	add    esp,0x20
c00112be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112c0:	6a 00                	push   0x0
c00112c2:	68 28 10 01 c0       	push   0xc0011028
c00112c7:	6a 13                	push   0x13
c00112c9:	53                   	push   ebx
c00112ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112cf:	6a 00                	push   0x0
c00112d1:	68 28 10 01 c0       	push   0xc0011028
c00112d6:	6a 14                	push   0x14
c00112d8:	53                   	push   ebx
c00112d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112dc:	83 c4 20             	add    esp,0x20
c00112df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e1:	6a 00                	push   0x0
c00112e3:	68 28 10 01 c0       	push   0xc0011028
c00112e8:	6a 1e                	push   0x1e
c00112ea:	53                   	push   ebx
c00112eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112f0:	6a 00                	push   0x0
c00112f2:	68 b5 60 01 c0       	push   0xc00160b5
c00112f7:	6a 60                	push   0x60
c00112f9:	53                   	push   ebx
c00112fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112fd:	83 c4 20             	add    esp,0x20
c0011300:	89 d8                	mov    eax,ebx
c0011302:	5a                   	pop    edx
c0011303:	5b                   	pop    ebx
c0011304:	5e                   	pop    esi
c0011305:	c3                   	ret    
c0011306:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011308:	6a 00                	push   0x0
c001130a:	6a 00                	push   0x0
c001130c:	6a 00                	push   0x0
c001130e:	53                   	push   ebx
c001130f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011317:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001131a:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011321:	e8 ca d9 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0011326:	89 04 24             	mov    DWORD PTR [esp],eax
c0011329:	89 c3                	mov    ebx,eax
c001132b:	e8 ce bd 00 00       	call   c001d0fe <APIC::APIC()>
c0011330:	6a 00                	push   0x0
c0011332:	6a 00                	push   0x0
c0011334:	6a 00                	push   0x0
c0011336:	53                   	push   ebx
c0011337:	e8 e0 bc 00 00       	call   c001d01c <APIC::open(int, int, void*)>
c001133c:	83 c4 20             	add    esp,0x20
c001133f:	e9 30 fe ff ff       	jmp    c0011174 <setupInterruptController()+0x50>
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	68 58 21 00 00       	push   0x2158
c001134c:	e8 9f d9 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0011351:	89 04 24             	mov    DWORD PTR [esp],eax
c0011354:	89 c3                	mov    ebx,eax
c0011356:	e8 a3 bd 00 00       	call   c001d0fe <APIC::APIC()>
c001135b:	6a 00                	push   0x0
c001135d:	6a 00                	push   0x0
c001135f:	6a 00                	push   0x0
c0011361:	53                   	push   ebx
c0011362:	e8 b5 bc 00 00       	call   c001d01c <APIC::open(int, int, void*)>
c0011367:	83 c4 18             	add    esp,0x18
c001136a:	53                   	push   ebx
c001136b:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c0011371:	e8 74 ee ff ff       	call   c00101ea <Device::addChild(Device*)>
c0011376:	83 c4 10             	add    esp,0x10
c0011379:	89 d8                	mov    eax,ebx
c001137b:	5a                   	pop    edx
c001137c:	5b                   	pop    ebx
c001137d:	5e                   	pop    esi
c001137e:	c3                   	ret    
c001137f:	90                   	nop

c0011380 <startGUI(void*)>:
c0011380:	55                   	push   ebp
c0011381:	89 e5                	mov    ebp,esp
c0011383:	53                   	push   ebx
c0011384:	83 ec 04             	sub    esp,0x4
c0011387:	e8 82 62 00 00       	call   c001760e <unlockScheduler()>
c001138c:	e8 66 62 00 00       	call   c00175f7 <getIRQNestingLevel()>
c0011391:	83 ec 08             	sub    esp,0x8
c0011394:	50                   	push   eax
c0011395:	68 90 0a 02 c0       	push   0xc0020a90
c001139a:	e8 40 da ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	8b 1d e8 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022de8
c00113a8:	83 ec 08             	sub    esp,0x8
c00113ab:	6a 01                	push   0x1
c00113ad:	68 aa 0a 02 c0       	push   0xc0020aaa
c00113b2:	e8 f7 5c 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	83 ec 08             	sub    esp,0x8
c00113bd:	53                   	push   ebx
c00113be:	50                   	push   eax
c00113bf:	e8 3d 5e 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	8b 1d e8 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022de8
c00113cd:	83 ec 08             	sub    esp,0x8
c00113d0:	6a 01                	push   0x1
c00113d2:	68 c4 0a 02 c0       	push   0xc0020ac4
c00113d7:	e8 d2 5c 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c00113dc:	83 c4 10             	add    esp,0x10
c00113df:	83 ec 08             	sub    esp,0x8
c00113e2:	53                   	push   ebx
c00113e3:	50                   	push   eax
c00113e4:	e8 18 5e 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	90                   	nop
c00113ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00113f0:	c9                   	leave  
c00113f1:	c3                   	ret    

c00113f2 <sendKeyToTerminal(unsigned char)>:
c00113f2:	55                   	push   ebp
c00113f3:	89 e5                	mov    ebp,esp
c00113f5:	83 ec 28             	sub    esp,0x28
c00113f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00113fe:	a1 a4 2e 02 c0       	mov    eax,ds:0xc0022ea4
c0011403:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0011407:	83 ec 08             	sub    esp,0x8
c001140a:	52                   	push   edx
c001140b:	50                   	push   eax
c001140c:	e8 d3 c0 ff ff       	call   c000d4e4 <VgaText::receiveKey(unsigned char)>
c0011411:	83 c4 10             	add    esp,0x10
c0011414:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011418:	75 41                	jne    c001145b <sendKeyToTerminal(unsigned char)+0x69>
c001141a:	e8 14 62 00 00       	call   c0017633 <lockStuff()>
c001141f:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c0011424:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011427:	c7 05 00 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f00,0x0
c0011431:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011435:	74 1f                	je     c0011456 <sendKeyToTerminal(unsigned char)+0x64>
c0011437:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001143a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001143d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011440:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011443:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001144c:	e8 df 69 00 00       	call   c0017e30 <unblockTask(ThreadControlBlock*)>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	eb db                	jmp    c0011431 <sendKeyToTerminal(unsigned char)+0x3f>
c0011456:	e8 6a 65 00 00       	call   c00179c5 <unlockStuff()>
c001145b:	90                   	nop
c001145c:	c9                   	leave  
c001145d:	c3                   	ret    

c001145e <sendKeyboardToken(KeyboardToken)>:
c001145e:	55                   	push   ebp
c001145f:	89 e5                	mov    ebp,esp
c0011461:	83 ec 18             	sub    esp,0x18
c0011464:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	0f b7 c0             	movzx  eax,ax
c001146d:	83 f2 01             	xor    edx,0x1
c0011470:	88 90 20 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd0e0],dl
c0011476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011479:	66 3d 03 02          	cmp    ax,0x203
c001147d:	75 07                	jne    c0011486 <sendKeyboardToken(KeyboardToken)+0x28>
c001147f:	a0 20 30 02 c0       	mov    al,ds:0xc0023020
c0011484:	84 c0                	test   al,al
c0011486:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001148a:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001148d:	a0 28 33 02 c0       	mov    al,ds:0xc0023328
c0011492:	38 c2                	cmp    dl,al
c0011494:	74 1c                	je     c00114b2 <sendKeyboardToken(KeyboardToken)+0x54>
c0011496:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011499:	a2 28 33 02 c0       	mov    ds:0xc0023328,al
c001149e:	a0 28 33 02 c0       	mov    al,ds:0xc0023328
c00114a3:	0f b6 c0             	movzx  eax,al
c00114a6:	83 ec 0c             	sub    esp,0xc
c00114a9:	50                   	push   eax
c00114aa:	e8 a3 b2 ff ff       	call   c000c752 <setTerminalScrollLock(bool)>
c00114af:	83 c4 10             	add    esp,0x10
c00114b2:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00114b5:	84 c0                	test   al,al
c00114b7:	0f 84 ae 00 00 00    	je     c001156b <sendKeyboardToken(KeyboardToken)+0x10d>
c00114bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c0:	66 3d 10 03          	cmp    ax,0x310
c00114c4:	75 06                	jne    c00114cc <sendKeyboardToken(KeyboardToken)+0x6e>
c00114c6:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00114cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114cf:	66 3d 11 03          	cmp    ax,0x311
c00114d3:	75 06                	jne    c00114db <sendKeyboardToken(KeyboardToken)+0x7d>
c00114d5:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00114db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114de:	66 3d 12 03          	cmp    ax,0x312
c00114e2:	75 06                	jne    c00114ea <sendKeyboardToken(KeyboardToken)+0x8c>
c00114e4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00114ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ed:	66 3d 13 03          	cmp    ax,0x313
c00114f1:	75 06                	jne    c00114f9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00114f3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	66 3d 14 03          	cmp    ax,0x314
c0011500:	75 06                	jne    c0011508 <sendKeyboardToken(KeyboardToken)+0xaa>
c0011502:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150b:	66 3d 15 03          	cmp    ax,0x315
c001150f:	75 06                	jne    c0011517 <sendKeyboardToken(KeyboardToken)+0xb9>
c0011511:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	66 3d 16 03          	cmp    ax,0x316
c001151e:	75 06                	jne    c0011526 <sendKeyboardToken(KeyboardToken)+0xc8>
c0011520:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011529:	66 3d 17 03          	cmp    ax,0x317
c001152d:	75 06                	jne    c0011535 <sendKeyboardToken(KeyboardToken)+0xd7>
c001152f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	66 3d 18 03          	cmp    ax,0x318
c001153c:	75 06                	jne    c0011544 <sendKeyboardToken(KeyboardToken)+0xe6>
c001153e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011547:	66 3d 19 03          	cmp    ax,0x319
c001154b:	75 06                	jne    c0011553 <sendKeyboardToken(KeyboardToken)+0xf5>
c001154d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011556:	66 3d 1a 03          	cmp    ax,0x31a
c001155a:	0f 85 c9 00 00 00    	jne    c0011629 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011560:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011566:	e9 be 00 00 00       	jmp    c0011629 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	66 3d 10 03          	cmp    ax,0x310
c0011572:	75 0a                	jne    c001157e <sendKeyboardToken(KeyboardToken)+0x120>
c0011574:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001157a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011581:	66 3d 11 03          	cmp    ax,0x311
c0011585:	75 0a                	jne    c0011591 <sendKeyboardToken(KeyboardToken)+0x133>
c0011587:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001158d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011594:	66 3d 12 03          	cmp    ax,0x312
c0011598:	75 0a                	jne    c00115a4 <sendKeyboardToken(KeyboardToken)+0x146>
c001159a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00115a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a7:	66 3d 13 03          	cmp    ax,0x313
c00115ab:	75 0a                	jne    c00115b7 <sendKeyboardToken(KeyboardToken)+0x159>
c00115ad:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00115b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ba:	66 3d 14 03          	cmp    ax,0x314
c00115be:	75 0a                	jne    c00115ca <sendKeyboardToken(KeyboardToken)+0x16c>
c00115c0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00115c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cd:	66 3d 15 03          	cmp    ax,0x315
c00115d1:	75 0a                	jne    c00115dd <sendKeyboardToken(KeyboardToken)+0x17f>
c00115d3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00115d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e0:	66 3d 16 03          	cmp    ax,0x316
c00115e4:	75 0a                	jne    c00115f0 <sendKeyboardToken(KeyboardToken)+0x192>
c00115e6:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00115ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00115f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115f3:	66 3d 17 03          	cmp    ax,0x317
c00115f7:	75 0a                	jne    c0011603 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00115f9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00115ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011606:	66 3d 18 03          	cmp    ax,0x318
c001160a:	75 0a                	jne    c0011616 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001160c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011612:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011619:	66 3d 19 03          	cmp    ax,0x319
c001161d:	75 0a                	jne    c0011629 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001161f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011625:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162c:	66 3d 00 02          	cmp    ax,0x200
c0011630:	75 2a                	jne    c001165c <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011632:	a0 20 33 02 c0       	mov    al,ds:0xc0023320
c0011637:	83 f0 01             	xor    eax,0x1
c001163a:	84 c0                	test   al,al
c001163c:	74 1e                	je     c001165c <sendKeyboardToken(KeyboardToken)+0x1fe>
c001163e:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0011643:	6a 01                	push   0x1
c0011645:	6a 00                	push   0x0
c0011647:	68 80 13 01 c0       	push   0xc0011380
c001164c:	50                   	push   eax
c001164d:	e8 e4 60 00 00       	call   c0017736 <Process::createThread(void (*)(void*), void*, int)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	c6 05 20 33 02 c0 01 	mov    BYTE PTR ds:0xc0023320,0x1
c001165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165f:	66 3d 1d 03          	cmp    ax,0x31d
c0011663:	75 06                	jne    c001166b <sendKeyboardToken(KeyboardToken)+0x20d>
c0011665:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001166b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166e:	66 3d 1c 03          	cmp    ax,0x31c
c0011672:	75 06                	jne    c001167a <sendKeyboardToken(KeyboardToken)+0x21c>
c0011674:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001167a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001167d:	66 3d 1b 03          	cmp    ax,0x31b
c0011681:	75 06                	jne    c0011689 <sendKeyboardToken(KeyboardToken)+0x22b>
c0011683:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168c:	66 3d 1e 03          	cmp    ax,0x31e
c0011690:	75 06                	jne    c0011698 <sendKeyboardToken(KeyboardToken)+0x23a>
c0011692:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001169b:	66 3d 1f 03          	cmp    ax,0x31f
c001169f:	75 06                	jne    c00116a7 <sendKeyboardToken(KeyboardToken)+0x249>
c00116a1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00116a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116aa:	66 3d 1a 03          	cmp    ax,0x31a
c00116ae:	75 06                	jne    c00116b6 <sendKeyboardToken(KeyboardToken)+0x258>
c00116b0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00116b6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00116ba:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00116bd:	83 f0 01             	xor    eax,0x1
c00116c0:	84 c0                	test   al,al
c00116c2:	74 77                	je     c001173b <sendKeyboardToken(KeyboardToken)+0x2dd>
c00116c4:	a0 21 30 02 c0       	mov    al,ds:0xc0023021
c00116c9:	84 c0                	test   al,al
c00116cb:	74 41                	je     c001170e <sendKeyboardToken(KeyboardToken)+0x2b0>
c00116cd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00116d1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00116d5:	74 2b                	je     c0011702 <sendKeyboardToken(KeyboardToken)+0x2a4>
c00116d7:	8b 15 24 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023324
c00116dd:	89 d0                	mov    eax,edx
c00116df:	c1 e0 02             	shl    eax,0x2
c00116e2:	01 d0                	add    eax,edx
c00116e4:	01 c0                	add    eax,eax
c00116e6:	a3 24 33 02 c0       	mov    ds:0xc0023324,eax
c00116eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116ee:	0f b7 c0             	movzx  eax,ax
c00116f1:	8d 50 d0             	lea    edx,[eax-0x30]
c00116f4:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c00116f9:	01 d0                	add    eax,edx
c00116fb:	a3 24 33 02 c0       	mov    ds:0xc0023324,eax
c0011700:	eb 6d                	jmp    c001176f <sendKeyboardToken(KeyboardToken)+0x311>
c0011702:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c001170c:	eb 61                	jmp    c001176f <sendKeyboardToken(KeyboardToken)+0x311>
c001170e:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c0011713:	85 c0                	test   eax,eax
c0011715:	74 18                	je     c001172f <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011717:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c001171c:	0f b6 c0             	movzx  eax,al
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	50                   	push   eax
c0011723:	e8 ca fc ff ff       	call   c00113f2 <sendKeyToTerminal(unsigned char)>
c0011728:	83 c4 10             	add    esp,0x10
c001172b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001172f:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c0011739:	eb 34                	jmp    c001176f <sendKeyboardToken(KeyboardToken)+0x311>
c001173b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001173e:	66 3d 01 01          	cmp    ax,0x101
c0011742:	75 2b                	jne    c001176f <sendKeyboardToken(KeyboardToken)+0x311>
c0011744:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c0011749:	85 c0                	test   eax,eax
c001174b:	74 18                	je     c0011765 <sendKeyboardToken(KeyboardToken)+0x307>
c001174d:	a1 24 33 02 c0       	mov    eax,ds:0xc0023324
c0011752:	0f b6 c0             	movzx  eax,al
c0011755:	83 ec 0c             	sub    esp,0xc
c0011758:	50                   	push   eax
c0011759:	e8 94 fc ff ff       	call   c00113f2 <sendKeyToTerminal(unsigned char)>
c001175e:	83 c4 10             	add    esp,0x10
c0011761:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011765:	c7 05 24 33 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023324,0x0
c001176f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011772:	83 f0 01             	xor    eax,0x1
c0011775:	84 c0                	test   al,al
c0011777:	74 4c                	je     c00117c5 <sendKeyboardToken(KeyboardToken)+0x367>
c0011779:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001177c:	83 f0 01             	xor    eax,0x1
c001177f:	84 c0                	test   al,al
c0011781:	74 42                	je     c00117c5 <sendKeyboardToken(KeyboardToken)+0x367>
c0011783:	a0 20 30 02 c0       	mov    al,ds:0xc0023020
c0011788:	83 f0 01             	xor    eax,0x1
c001178b:	84 c0                	test   al,al
c001178d:	74 36                	je     c00117c5 <sendKeyboardToken(KeyboardToken)+0x367>
c001178f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011792:	66 83 f8 1f          	cmp    ax,0x1f
c0011796:	76 09                	jbe    c00117a1 <sendKeyboardToken(KeyboardToken)+0x343>
c0011798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001179b:	66 83 f8 7e          	cmp    ax,0x7e
c001179f:	76 12                	jbe    c00117b3 <sendKeyboardToken(KeyboardToken)+0x355>
c00117a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a4:	66 83 f8 0a          	cmp    ax,0xa
c00117a8:	74 09                	je     c00117b3 <sendKeyboardToken(KeyboardToken)+0x355>
c00117aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ad:	66 83 f8 08          	cmp    ax,0x8
c00117b1:	75 12                	jne    c00117c5 <sendKeyboardToken(KeyboardToken)+0x367>
c00117b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b6:	0f b6 c0             	movzx  eax,al
c00117b9:	83 ec 0c             	sub    esp,0xc
c00117bc:	50                   	push   eax
c00117bd:	e8 30 fc ff ff       	call   c00113f2 <sendKeyToTerminal(unsigned char)>
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00117c8:	83 f0 01             	xor    eax,0x1
c00117cb:	84 c0                	test   al,al
c00117cd:	74 4f                	je     c001181e <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117cf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00117d2:	83 f0 01             	xor    eax,0x1
c00117d5:	84 c0                	test   al,al
c00117d7:	74 45                	je     c001181e <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117d9:	a0 20 30 02 c0       	mov    al,ds:0xc0023020
c00117de:	84 c0                	test   al,al
c00117e0:	74 3c                	je     c001181e <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e5:	66 83 f8 3f          	cmp    ax,0x3f
c00117e9:	76 33                	jbe    c001181e <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ee:	66 83 f8 7f          	cmp    ax,0x7f
c00117f2:	77 2a                	ja     c001181e <sendKeyboardToken(KeyboardToken)+0x3c0>
c00117f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f7:	88 c2                	mov    dl,al
c00117f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fc:	66 83 f8 5f          	cmp    ax,0x5f
c0011800:	76 04                	jbe    c0011806 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011802:	b0 20                	mov    al,0x20
c0011804:	eb 02                	jmp    c0011808 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011806:	b0 00                	mov    al,0x0
c0011808:	29 c2                	sub    edx,eax
c001180a:	88 d0                	mov    al,dl
c001180c:	83 e8 40             	sub    eax,0x40
c001180f:	0f b6 c0             	movzx  eax,al
c0011812:	83 ec 0c             	sub    esp,0xc
c0011815:	50                   	push   eax
c0011816:	e8 d7 fb ff ff       	call   c00113f2 <sendKeyToTerminal(unsigned char)>
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011821:	66 3d 00 03          	cmp    ax,0x300
c0011825:	75 0f                	jne    c0011836 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011827:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001182a:	83 f0 01             	xor    eax,0x1
c001182d:	84 c0                	test   al,al
c001182f:	74 05                	je     c0011836 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011831:	e8 43 b7 ff ff       	call   c000cf79 <doTerminalCycle()>
c0011836:	90                   	nop
c0011837:	c9                   	leave  
c0011838:	c3                   	ret    

c0011839 <clearInternalKeybuffer(VgaText*)>:
c0011839:	55                   	push   ebp
c001183a:	89 e5                	mov    ebp,esp
c001183c:	83 ec 08             	sub    esp,0x8
c001183f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011842:	05 34 11 00 00       	add    eax,0x1134
c0011847:	83 ec 0c             	sub    esp,0xc
c001184a:	50                   	push   eax
c001184b:	e8 d5 ed fe ff       	call   c0000625 <strlen>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011856:	81 c2 34 11 00 00    	add    edx,0x1134
c001185c:	83 ec 04             	sub    esp,0x4
c001185f:	50                   	push   eax
c0011860:	6a 00                	push   0x0
c0011862:	52                   	push   edx
c0011863:	e8 a0 ed fe ff       	call   c0000608 <memset>
c0011868:	83 c4 10             	add    esp,0x10
c001186b:	90                   	nop
c001186c:	c9                   	leave  
c001186d:	c3                   	ret    

c001186e <readKeyboard(VgaText*, char*, unsigned long)>:
c001186e:	55                   	push   ebp
c001186f:	89 e5                	mov    ebp,esp
c0011871:	83 ec 18             	sub    esp,0x18
c0011874:	fb                   	sti    
c0011875:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001187c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011880:	74 77                	je     c00118f9 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011885:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001188b:	84 c0                	test   al,al
c001188d:	75 02                	jne    c0011891 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001188f:	eb f1                	jmp    c0011882 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011891:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011894:	8d 50 01             	lea    edx,[eax+0x1]
c0011897:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001189a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001189d:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00118a3:	88 10                	mov    BYTE PTR [eax],dl
c00118a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a8:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00118ae:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00118b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b4:	05 34 11 00 00       	add    eax,0x1134
c00118b9:	83 ec 0c             	sub    esp,0xc
c00118bc:	50                   	push   eax
c00118bd:	e8 63 ed fe ff       	call   c0000625 <strlen>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118c8:	81 c2 34 11 00 00    	add    edx,0x1134
c00118ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c00118d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00118d4:	81 c2 34 11 00 00    	add    edx,0x1134
c00118da:	83 ec 04             	sub    esp,0x4
c00118dd:	50                   	push   eax
c00118de:	51                   	push   ecx
c00118df:	52                   	push   edx
c00118e0:	e8 b5 ec fe ff       	call   c000059a <memmove>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00118eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00118ee:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00118f2:	75 88                	jne    c001187c <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00118f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f7:	eb 03                	jmp    c00118fc <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00118f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118fc:	c9                   	leave  
c00118fd:	c3                   	ret    

c00118fe <Keyboard::Keyboard(char const*)>:
c00118fe:	83 ec 0c             	sub    esp,0xc
c0011901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011905:	83 ec 08             	sub    esp,0x8
c0011908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001190c:	50                   	push   eax
c001190d:	e8 c8 ea ff ff       	call   c00103da <Device::Device(char const*)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	ba e8 0a 02 c0       	mov    edx,0xc0020ae8
c001191a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001191e:	89 10                	mov    DWORD PTR [eax],edx
c0011920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011924:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001192e:	c6 05 04 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f04,0x1
c0011935:	90                   	nop
c0011936:	83 c4 0c             	add    esp,0xc
c0011939:	c3                   	ret    

c001193a <Keyboard::~Keyboard()>:
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	ba e8 0a 02 c0       	mov    edx,0xc0020ae8
c0011942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011946:	89 10                	mov    DWORD PTR [eax],edx
c0011948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194c:	83 ec 0c             	sub    esp,0xc
c001194f:	50                   	push   eax
c0011950:	e8 37 e7 ff ff       	call   c001008c <Device::~Device()>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	90                   	nop
c0011959:	83 c4 0c             	add    esp,0xc
c001195c:	c3                   	ret    
c001195d:	90                   	nop

c001195e <Keyboard::~Keyboard()>:
c001195e:	83 ec 0c             	sub    esp,0xc
c0011961:	83 ec 0c             	sub    esp,0xc
c0011964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011968:	e8 cd ff ff ff       	call   c001193a <Keyboard::~Keyboard()>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	83 ec 08             	sub    esp,0x8
c0011973:	68 5c 01 00 00       	push   0x15c
c0011978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001197c:	e8 7e d3 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	83 c4 0c             	add    esp,0xc
c0011987:	c3                   	ret    

c0011988 <LogicalDisk::close(int, int, void*)>:
c0011988:	83 c8 ff             	or     eax,0xffffffff
c001198b:	c3                   	ret    

c001198c <LogicalDisk::~LogicalDisk()>:
c001198c:	83 ec 0c             	sub    esp,0xc
c001198f:	ba 98 0b 02 c0       	mov    edx,0xc0020b98
c0011994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011998:	89 10                	mov    DWORD PTR [eax],edx
c001199a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199e:	83 ec 0c             	sub    esp,0xc
c00119a1:	50                   	push   eax
c00119a2:	e8 e5 e6 ff ff       	call   c001008c <Device::~Device()>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	90                   	nop
c00119ab:	83 c4 0c             	add    esp,0xc
c00119ae:	c3                   	ret    
c00119af:	90                   	nop

c00119b0 <LogicalDisk::~LogicalDisk()>:
c00119b0:	83 ec 0c             	sub    esp,0xc
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ba:	e8 cd ff ff ff       	call   c001198c <LogicalDisk::~LogicalDisk()>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	83 ec 08             	sub    esp,0x8
c00119c5:	68 74 01 00 00       	push   0x174
c00119ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ce:	e8 2c d3 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00119d3:	83 c4 10             	add    esp,0x10
c00119d6:	83 c4 0c             	add    esp,0xc
c00119d9:	c3                   	ret    

c00119da <LogicalDisk::open(int, int, void*)>:
c00119da:	83 ec 18             	sub    esp,0x18
c00119dd:	68 14 0b 02 c0       	push   0xc0020b14
c00119e2:	e8 61 2f 00 00       	call   c0014948 <Krnl::panic(char const*)>
c00119e7:	83 c8 ff             	or     eax,0xffffffff
c00119ea:	83 c4 1c             	add    esp,0x1c
c00119ed:	c3                   	ret    

c00119ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00119ee:	53                   	push   ebx
c00119ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011a01:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011a07:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011a0d:	77 10                	ja     c0011a1f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011a0f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011a15:	89 d3                	mov    ebx,edx
c0011a17:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011a1d:	72 05                	jb     c0011a24 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011a1f:	83 c8 ff             	or     eax,0xffffffff
c0011a22:	89 c2                	mov    edx,eax
c0011a24:	5b                   	pop    ebx
c0011a25:	c3                   	ret    

c0011a26 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011a26:	56                   	push   esi
c0011a27:	83 c8 ff             	or     eax,0xffffffff
c0011a2a:	53                   	push   ebx
c0011a2b:	89 c2                	mov    edx,eax
c0011a2d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011a31:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011a35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011a39:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011a3f:	77 27                	ja     c0011a68 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011a41:	89 d8                	mov    eax,ebx
c0011a43:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011a49:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011a4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a54:	89 c2                	mov    edx,eax
c0011a56:	73 10                	jae    c0011a68 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011a58:	89 c8                	mov    eax,ecx
c0011a5a:	89 da                	mov    edx,ebx
c0011a5c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011a62:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011a68:	5b                   	pop    ebx
c0011a69:	5e                   	pop    esi
c0011a6a:	c3                   	ret    
c0011a6b:	90                   	nop

c0011a6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011a6c:	83 ec 1c             	sub    esp,0x1c
c0011a6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a83:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a92:	83 ec 08             	sub    esp,0x8
c0011a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011a99:	50                   	push   eax
c0011a9a:	e8 3b e9 ff ff       	call   c00103da <Device::Device(char const*)>
c0011a9f:	83 c4 10             	add    esp,0x10
c0011aa2:	ba 98 0b 02 c0       	mov    edx,0xc0020b98
c0011aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011aab:	89 10                	mov    DWORD PTR [eax],edx
c0011aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ab1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011abc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ac7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011ad1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011ad5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ad9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011add:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011ae3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011ae9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011aed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011af0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011af4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011afa:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b08:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011b12:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011b1c:	90                   	nop
c0011b1d:	83 c4 1c             	add    esp,0x1c
c0011b20:	c3                   	ret    
c0011b21:	90                   	nop

c0011b22 <LogicalDisk::assignDriveLetter()>:
c0011b22:	55                   	push   ebp
c0011b23:	57                   	push   edi
c0011b24:	56                   	push   esi
c0011b25:	53                   	push   ebx
c0011b26:	83 ec 14             	sub    esp,0x14
c0011b29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b2d:	8b 3d 40 33 02 c0    	mov    edi,DWORD PTR ds:0xc0023340
c0011b33:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011b39:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011b3d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011b43:	8b 3d 44 33 02 c0    	mov    edi,DWORD PTR ds:0xc0023344
c0011b49:	3c 01                	cmp    al,0x1
c0011b4b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011b4f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011b53:	19 c0                	sbb    eax,eax
c0011b55:	83 e0 02             	and    eax,0x2
c0011b58:	83 c0 41             	add    eax,0x41
c0011b5b:	0f be e8             	movsx  ebp,al
c0011b5e:	3c 43                	cmp    al,0x43
c0011b60:	75 10                	jne    c0011b72 <LogicalDisk::assignDriveLetter()+0x50>
c0011b62:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011b69:	75 5d                	jne    c0011bc8 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b6b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011b70:	75 56                	jne    c0011bc8 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b72:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011b75:	ba 01 00 00 00       	mov    edx,0x1
c0011b7a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011b7e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011b82:	d3 e2                	shl    edx,cl
c0011b84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011b88:	89 d7                	mov    edi,edx
c0011b8a:	89 d6                	mov    esi,edx
c0011b8c:	c1 ff 1f             	sar    edi,0x1f
c0011b8f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011b93:	21 f9                	and    ecx,edi
c0011b95:	09 d1                	or     ecx,edx
c0011b97:	75 2f                	jne    c0011bc8 <LogicalDisk::assignDriveLetter()+0xa6>
c0011b99:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011b9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ba1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011ba7:	09 f2                	or     edx,esi
c0011ba9:	89 15 40 33 02 c0    	mov    DWORD PTR ds:0xc0023340,edx
c0011baf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bb3:	09 fa                	or     edx,edi
c0011bb5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011bb9:	89 15 44 33 02 c0    	mov    DWORD PTR ds:0xc0023344,edx
c0011bbf:	89 1c bd 60 33 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcca0],ebx
c0011bc6:	eb 08                	jmp    c0011bd0 <LogicalDisk::assignDriveLetter()+0xae>
c0011bc8:	45                   	inc    ebp
c0011bc9:	40                   	inc    eax
c0011bca:	3c 5b                	cmp    al,0x5b
c0011bcc:	75 90                	jne    c0011b5e <LogicalDisk::assignDriveLetter()+0x3c>
c0011bce:	31 c0                	xor    eax,eax
c0011bd0:	83 c4 14             	add    esp,0x14
c0011bd3:	5b                   	pop    ebx
c0011bd4:	5e                   	pop    esi
c0011bd5:	5f                   	pop    edi
c0011bd6:	5d                   	pop    ebp
c0011bd7:	c3                   	ret    

c0011bd8 <LogicalDisk::mount()>:
c0011bd8:	56                   	push   esi
c0011bd9:	53                   	push   ebx
c0011bda:	51                   	push   ecx
c0011bdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011bdf:	8b 1d c0 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec0
c0011be5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011bef:	85 db                	test   ebx,ebx
c0011bf1:	74 50                	je     c0011c43 <LogicalDisk::mount()+0x6b>
c0011bf3:	e8 ff 59 00 00       	call   c00175f7 <getIRQNestingLevel()>
c0011bf8:	52                   	push   edx
c0011bf9:	52                   	push   edx
c0011bfa:	50                   	push   eax
c0011bfb:	68 38 0b 02 c0       	push   0xc0020b38
c0011c00:	e8 da d1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0011c05:	83 c4 0c             	add    esp,0xc
c0011c08:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011c0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c11:	83 e8 41             	sub    eax,0x41
c0011c14:	50                   	push   eax
c0011c15:	56                   	push   esi
c0011c16:	53                   	push   ebx
c0011c17:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c1a:	83 c4 10             	add    esp,0x10
c0011c1d:	84 c0                	test   al,al
c0011c1f:	74 08                	je     c0011c29 <LogicalDisk::mount()+0x51>
c0011c21:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011c27:	eb 1c                	jmp    c0011c45 <LogicalDisk::mount()+0x6d>
c0011c29:	e8 c9 59 00 00       	call   c00175f7 <getIRQNestingLevel()>
c0011c2e:	51                   	push   ecx
c0011c2f:	51                   	push   ecx
c0011c30:	50                   	push   eax
c0011c31:	68 53 0b 02 c0       	push   0xc0020b53
c0011c36:	e8 a4 d1 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0011c3b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	eb ac                	jmp    c0011bef <LogicalDisk::mount()+0x17>
c0011c43:	31 c0                	xor    eax,eax
c0011c45:	5a                   	pop    edx
c0011c46:	5b                   	pop    ebx
c0011c47:	5e                   	pop    esi
c0011c48:	c3                   	ret    
c0011c49:	90                   	nop

c0011c4a <LogicalDisk::unmount()>:
c0011c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c4e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011c58:	c3                   	ret    
c0011c59:	90                   	nop

c0011c5a <LogicalDisk::unassignDriveLetter()>:
c0011c5a:	57                   	push   edi
c0011c5b:	56                   	push   esi
c0011c5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c60:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011c67:	84 c9                	test   cl,cl
c0011c69:	75 0f                	jne    c0011c7a <LogicalDisk::unassignDriveLetter()+0x20>
c0011c6b:	c7 44 24 0c 6e 0b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020b6e
c0011c73:	5e                   	pop    esi
c0011c74:	5f                   	pop    edi
c0011c75:	e9 ce 2c 00 00       	jmp    c0014948 <Krnl::panic(char const*)>
c0011c7a:	83 e9 41             	sub    ecx,0x41
c0011c7d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011c84:	b8 01 00 00 00       	mov    eax,0x1
c0011c89:	c7 04 8d 60 33 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcca0],0x0
c0011c94:	d3 e0                	shl    eax,cl
c0011c96:	89 c7                	mov    edi,eax
c0011c98:	f7 d0                	not    eax
c0011c9a:	c1 ff 1f             	sar    edi,0x1f
c0011c9d:	21 05 40 33 02 c0    	and    DWORD PTR ds:0xc0023340,eax
c0011ca3:	89 fe                	mov    esi,edi
c0011ca5:	f7 d6                	not    esi
c0011ca7:	21 35 44 33 02 c0    	and    DWORD PTR ds:0xc0023344,esi
c0011cad:	5e                   	pop    esi
c0011cae:	5f                   	pop    edi
c0011caf:	c3                   	ret    

c0011cb0 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011cb0:	57                   	push   edi
c0011cb1:	56                   	push   esi
c0011cb2:	53                   	push   ebx
c0011cb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cb7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cbb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011cc9:	77 41                	ja     c0011d0c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011ccb:	99                   	cdq    
c0011ccc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011cd2:	01 c8                	add    eax,ecx
c0011cd4:	11 da                	adc    edx,ebx
c0011cd6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011cdc:	19 d7                	sbb    edi,edx
c0011cde:	72 33                	jb     c0011d13 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011ce0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011ce6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011cec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011cf0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011cf4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011cfa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d04:	5b                   	pop    ebx
c0011d05:	5e                   	pop    esi
c0011d06:	5f                   	pop    edi
c0011d07:	e9 9a 09 00 00       	jmp    c00126a6 <VCache::read(unsigned long long, int, void*)>
c0011d0c:	b8 05 00 00 00       	mov    eax,0x5
c0011d11:	eb 05                	jmp    c0011d18 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011d13:	b8 07 00 00 00       	mov    eax,0x7
c0011d18:	5b                   	pop    ebx
c0011d19:	5e                   	pop    esi
c0011d1a:	5f                   	pop    edi
c0011d1b:	c3                   	ret    

c0011d1c <LogicalDisk::write(unsigned long long, int, void*)>:
c0011d1c:	57                   	push   edi
c0011d1d:	56                   	push   esi
c0011d1e:	53                   	push   ebx
c0011d1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011d23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d27:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d35:	77 41                	ja     c0011d78 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011d37:	99                   	cdq    
c0011d38:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011d3e:	01 c8                	add    eax,ecx
c0011d40:	11 da                	adc    edx,ebx
c0011d42:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011d48:	19 d7                	sbb    edi,edx
c0011d4a:	72 33                	jb     c0011d7f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0011d4c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011d52:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011d58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d5c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011d60:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011d66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011d6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d70:	5b                   	pop    ebx
c0011d71:	5e                   	pop    esi
c0011d72:	5f                   	pop    edi
c0011d73:	e9 4a 08 00 00       	jmp    c00125c2 <VCache::write(unsigned long long, int, void*)>
c0011d78:	b8 05 00 00 00       	mov    eax,0x5
c0011d7d:	eb 05                	jmp    c0011d84 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0011d7f:	b8 07 00 00 00       	mov    eax,0x7
c0011d84:	5b                   	pop    ebx
c0011d85:	5e                   	pop    esi
c0011d86:	5f                   	pop    edi
c0011d87:	c3                   	ret    

c0011d88 <Mouse::Mouse(char const*)>:
c0011d88:	83 ec 0c             	sub    esp,0xc
c0011d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d8f:	83 ec 08             	sub    esp,0x8
c0011d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d96:	50                   	push   eax
c0011d97:	e8 3e e6 ff ff       	call   c00103da <Device::Device(char const*)>
c0011d9c:	83 c4 10             	add    esp,0x10
c0011d9f:	ba c4 0b 02 c0       	mov    edx,0xc0020bc4
c0011da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da8:	89 10                	mov    DWORD PTR [eax],edx
c0011daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dae:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0011db8:	90                   	nop
c0011db9:	83 c4 0c             	add    esp,0xc
c0011dbc:	c3                   	ret    
c0011dbd:	90                   	nop

c0011dbe <Mouse::~Mouse()>:
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	ba c4 0b 02 c0       	mov    edx,0xc0020bc4
c0011dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dca:	89 10                	mov    DWORD PTR [eax],edx
c0011dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dd0:	83 ec 0c             	sub    esp,0xc
c0011dd3:	50                   	push   eax
c0011dd4:	e8 b3 e2 ff ff       	call   c001008c <Device::~Device()>
c0011dd9:	83 c4 10             	add    esp,0x10
c0011ddc:	90                   	nop
c0011ddd:	83 c4 0c             	add    esp,0xc
c0011de0:	c3                   	ret    
c0011de1:	90                   	nop

c0011de2 <Mouse::~Mouse()>:
c0011de2:	83 ec 0c             	sub    esp,0xc
c0011de5:	83 ec 0c             	sub    esp,0xc
c0011de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dec:	e8 cd ff ff ff       	call   c0011dbe <Mouse::~Mouse()>
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	83 ec 08             	sub    esp,0x8
c0011df7:	68 58 01 00 00       	push   0x158
c0011dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e00:	e8 fa ce ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0011e05:	83 c4 10             	add    esp,0x10
c0011e08:	83 c4 0c             	add    esp,0xc
c0011e0b:	c3                   	ret    

c0011e0c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011e0c:	55                   	push   ebp
c0011e0d:	57                   	push   edi
c0011e0e:	56                   	push   esi
c0011e0f:	53                   	push   ebx
c0011e10:	81 ec 28 01 00 00    	sub    esp,0x128
c0011e16:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0011e1d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0011e24:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0011e2b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0011e32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011e3a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011e41:	e8 86 e6 ff ff       	call   c00104cc <Device::getName()>
c0011e46:	5a                   	pop    edx
c0011e47:	59                   	pop    ecx
c0011e48:	50                   	push   eax
c0011e49:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011e4d:	55                   	push   ebp
c0011e4e:	e8 54 e8 fe ff       	call   c00006a7 <strcpy>
c0011e53:	5b                   	pop    ebx
c0011e54:	58                   	pop    eax
c0011e55:	68 e8 0b 02 c0       	push   0xc0020be8
c0011e5a:	55                   	push   ebp
c0011e5b:	e8 fe e8 fe ff       	call   c000075e <strcat>
c0011e60:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0011e67:	e8 84 ce ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0011e6c:	83 c4 0c             	add    esp,0xc
c0011e6f:	89 c3                	mov    ebx,eax
c0011e71:	57                   	push   edi
c0011e72:	56                   	push   esi
c0011e73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e7b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0011e82:	55                   	push   ebp
c0011e83:	50                   	push   eax
c0011e84:	e8 e3 fb ff ff       	call   c0011a6c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0011e89:	83 c4 14             	add    esp,0x14
c0011e8c:	53                   	push   ebx
c0011e8d:	e8 90 fc ff ff       	call   c0011b22 <LogicalDisk::assignDriveLetter()>
c0011e92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e95:	e8 3e fd ff ff       	call   c0011bd8 <LogicalDisk::mount()>
c0011e9a:	58                   	pop    eax
c0011e9b:	5a                   	pop    edx
c0011e9c:	53                   	push   ebx
c0011e9d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0011ea4:	e8 41 e3 ff ff       	call   c00101ea <Device::addChild(Device*)>
c0011ea9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011eaf:	5b                   	pop    ebx
c0011eb0:	5e                   	pop    esi
c0011eb1:	5f                   	pop    edi
c0011eb2:	5d                   	pop    ebp
c0011eb3:	c3                   	ret    

c0011eb4 <createPartitionsForDisk(PhysicalDisk*)>:
c0011eb4:	55                   	push   ebp
c0011eb5:	57                   	push   edi
c0011eb6:	56                   	push   esi
c0011eb7:	53                   	push   ebx
c0011eb8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0011ebe:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0011ec5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0011ecb:	3d 00 02 00 00       	cmp    eax,0x200
c0011ed0:	74 27                	je     c0011ef9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0011ed2:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0011ed8:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0011ede:	83 ec 10             	sub    esp,0x10
c0011ee1:	0f a4 f7 0a          	shld   edi,esi,0xa
c0011ee5:	99                   	cdq    
c0011ee6:	c1 e6 0a             	shl    esi,0xa
c0011ee9:	52                   	push   edx
c0011eea:	89 fd                	mov    ebp,edi
c0011eec:	50                   	push   eax
c0011eed:	55                   	push   ebp
c0011eee:	56                   	push   esi
c0011eef:	e8 d8 c1 00 00       	call   c001e0cc <__udivdi3>
c0011ef4:	e9 b1 00 00 00       	jmp    c0011faa <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011ef9:	83 ec 0c             	sub    esp,0xc
c0011efc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011efe:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0011f02:	56                   	push   esi
c0011f03:	6a 01                	push   0x1
c0011f05:	6a 00                	push   0x0
c0011f07:	6a 00                	push   0x0
c0011f09:	53                   	push   ebx
c0011f0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011f0d:	83 c4 20             	add    esp,0x20
c0011f10:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0011f18:	75 0a                	jne    c0011f24 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0011f1a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0011f22:	74 2c                	je     c0011f50 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0011f24:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011f2a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011f30:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011f36:	83 ec 10             	sub    esp,0x10
c0011f39:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011f3d:	89 f7                	mov    edi,esi
c0011f3f:	c1 e0 0a             	shl    eax,0xa
c0011f42:	c1 ff 1f             	sar    edi,0x1f
c0011f45:	57                   	push   edi
c0011f46:	56                   	push   esi
c0011f47:	52                   	push   edx
c0011f48:	50                   	push   eax
c0011f49:	e8 7e c1 00 00       	call   c001e0cc <__udivdi3>
c0011f4e:	eb 5a                	jmp    c0011faa <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0011f50:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0011f57:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0011f5e:	83 e1 7f             	and    ecx,0x7f
c0011f61:	83 e0 7f             	and    eax,0x7f
c0011f64:	01 c1                	add    ecx,eax
c0011f66:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0011f6d:	83 e0 7f             	and    eax,0x7f
c0011f70:	01 c1                	add    ecx,eax
c0011f72:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0011f79:	83 e0 7f             	and    eax,0x7f
c0011f7c:	00 c1                	add    cl,al
c0011f7e:	74 41                	je     c0011fc1 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0011f80:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0011f86:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0011f8c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0011f92:	83 ec 10             	sub    esp,0x10
c0011f95:	0f a4 c2 0a          	shld   edx,eax,0xa
c0011f99:	89 f7                	mov    edi,esi
c0011f9b:	c1 e0 0a             	shl    eax,0xa
c0011f9e:	c1 ff 1f             	sar    edi,0x1f
c0011fa1:	57                   	push   edi
c0011fa2:	56                   	push   esi
c0011fa3:	52                   	push   edx
c0011fa4:	50                   	push   eax
c0011fa5:	e8 22 c1 00 00       	call   c001e0cc <__udivdi3>
c0011faa:	83 c4 14             	add    esp,0x14
c0011fad:	52                   	push   edx
c0011fae:	50                   	push   eax
c0011faf:	6a 00                	push   0x0
c0011fb1:	6a 00                	push   0x0
c0011fb3:	53                   	push   ebx
c0011fb4:	e8 53 fe ff ff       	call   c0011e0c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0011fb9:	83 c4 20             	add    esp,0x20
c0011fbc:	e9 79 01 00 00       	jmp    c001213a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0011fc1:	89 f0                	mov    eax,esi
c0011fc3:	31 f6                	xor    esi,esi
c0011fc5:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0011fcc:	75 02                	jne    c0011fd0 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0011fce:	89 f1                	mov    ecx,esi
c0011fd0:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0011fd7:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0011fde:	c1 e2 08             	shl    edx,0x8
c0011fe1:	c1 e7 10             	shl    edi,0x10
c0011fe4:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0011fec:	09 fa                	or     edx,edi
c0011fee:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0011ff6:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0011ffd:	83 c0 10             	add    eax,0x10
c0012000:	09 fa                	or     edx,edi
c0012002:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012009:	c1 e7 18             	shl    edi,0x18
c001200c:	09 fa                	or     edx,edi
c001200e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012015:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012019:	c1 e7 10             	shl    edi,0x10
c001201c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012023:	c1 e2 08             	shl    edx,0x8
c0012026:	09 fa                	or     edx,edi
c0012028:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001202f:	09 fa                	or     edx,edi
c0012031:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012038:	c1 e7 18             	shl    edi,0x18
c001203b:	09 fa                	or     edx,edi
c001203d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012041:	46                   	inc    esi
c0012042:	83 fe 04             	cmp    esi,0x4
c0012045:	0f 85 7a ff ff ff    	jne    c0011fc5 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001204b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001204f:	83 f0 01             	xor    eax,0x1
c0012052:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012056:	75 57                	jne    c00120af <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012058:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001205c:	83 f0 01             	xor    eax,0x1
c001205f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012063:	75 4a                	jne    c00120af <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012065:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012069:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012071:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012079:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001207f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012085:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001208b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001208f:	89 f7                	mov    edi,esi
c0012091:	c1 e0 0a             	shl    eax,0xa
c0012094:	c1 ff 1f             	sar    edi,0x1f
c0012097:	57                   	push   edi
c0012098:	56                   	push   esi
c0012099:	52                   	push   edx
c001209a:	50                   	push   eax
c001209b:	e8 2c c0 00 00       	call   c001e0cc <__udivdi3>
c00120a0:	83 c4 10             	add    esp,0x10
c00120a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00120a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120ab:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00120af:	84 c9                	test   cl,cl
c00120b1:	74 53                	je     c0012106 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00120b3:	0f b6 c9             	movzx  ecx,cl
c00120b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120be:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00120c2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00120c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120ce:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00120d2:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00120d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00120de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00120e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120e6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00120ea:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00120ee:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00120f2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00120f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00120fa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00120fe:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012102:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012106:	31 ed                	xor    ebp,ebp
c0012108:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001210c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012110:	89 f8                	mov    eax,edi
c0012112:	09 f0                	or     eax,esi
c0012114:	74 1e                	je     c0012134 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012116:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001211a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001211e:	89 d1                	mov    ecx,edx
c0012120:	09 c1                	or     ecx,eax
c0012122:	74 10                	je     c0012134 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012124:	83 ec 0c             	sub    esp,0xc
c0012127:	57                   	push   edi
c0012128:	56                   	push   esi
c0012129:	52                   	push   edx
c001212a:	50                   	push   eax
c001212b:	53                   	push   ebx
c001212c:	e8 db fc ff ff       	call   c0011e0c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012131:	83 c4 20             	add    esp,0x20
c0012134:	45                   	inc    ebp
c0012135:	83 fd 04             	cmp    ebp,0x4
c0012138:	75 ce                	jne    c0012108 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001213a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012140:	5b                   	pop    ebx
c0012141:	5e                   	pop    esi
c0012142:	5f                   	pop    edi
c0012143:	5d                   	pop    ebp
c0012144:	c3                   	ret    
c0012145:	90                   	nop

c0012146 <Timer::Timer(char const*)>:
c0012146:	83 ec 0c             	sub    esp,0xc
c0012149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001214d:	83 ec 08             	sub    esp,0x8
c0012150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012154:	50                   	push   eax
c0012155:	e8 80 e2 ff ff       	call   c00103da <Device::Device(char const*)>
c001215a:	83 c4 10             	add    esp,0x10
c001215d:	ba fc 0b 02 c0       	mov    edx,0xc0020bfc
c0012162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012166:	89 10                	mov    DWORD PTR [eax],edx
c0012168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012176:	90                   	nop
c0012177:	83 c4 0c             	add    esp,0xc
c001217a:	c3                   	ret    
c001217b:	90                   	nop

c001217c <Timer::~Timer()>:
c001217c:	83 ec 0c             	sub    esp,0xc
c001217f:	ba fc 0b 02 c0       	mov    edx,0xc0020bfc
c0012184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012188:	89 10                	mov    DWORD PTR [eax],edx
c001218a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001218e:	83 ec 0c             	sub    esp,0xc
c0012191:	50                   	push   eax
c0012192:	e8 f5 de ff ff       	call   c001008c <Device::~Device()>
c0012197:	83 c4 10             	add    esp,0x10
c001219a:	90                   	nop
c001219b:	83 c4 0c             	add    esp,0xc
c001219e:	c3                   	ret    
c001219f:	90                   	nop

c00121a0 <Timer::~Timer()>:
c00121a0:	83 ec 0c             	sub    esp,0xc
c00121a3:	83 ec 0c             	sub    esp,0xc
c00121a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121aa:	e8 cd ff ff ff       	call   c001217c <Timer::~Timer()>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	83 ec 08             	sub    esp,0x8
c00121b5:	68 5c 01 00 00       	push   0x15c
c00121ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121be:	e8 3c cb ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	83 c4 0c             	add    esp,0xc
c00121c9:	c3                   	ret    

c00121ca <Timer::read()>:
c00121ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00121d4:	c3                   	ret    

c00121d5 <timerHandler(unsigned long long)>:
c00121d5:	55                   	push   ebp
c00121d6:	57                   	push   edi
c00121d7:	56                   	push   esi
c00121d8:	53                   	push   ebx
c00121d9:	83 ec 0c             	sub    esp,0xc
c00121dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00121e0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00121e4:	01 35 d0 33 02 c0    	add    DWORD PTR ds:0xc00233d0,esi
c00121ea:	11 3d d4 33 02 c0    	adc    DWORD PTR ds:0xc00233d4,edi
c00121f0:	80 3d ed 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022ded,0x0
c00121f7:	0f 84 07 01 00 00    	je     c0012304 <timerHandler(unsigned long long)+0x12f>
c00121fd:	e8 31 54 00 00       	call   c0017633 <lockStuff()>
c0012202:	83 ec 0c             	sub    esp,0xc
c0012205:	68 9c 41 02 c0       	push   0xc002419c
c001220a:	e8 75 c5 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001220f:	c7 04 24 9c 41 02 c0 	mov    DWORD PTR [esp],0xc002419c
c0012216:	89 c3                	mov    ebx,eax
c0012218:	e8 6f c5 00 00       	call   c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	84 c0                	test   al,al
c0012222:	74 60                	je     c0012284 <timerHandler(unsigned long long)+0xaf>
c0012224:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001222a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001222d:	85 c0                	test   eax,eax
c001222f:	0f 85 91 00 00 00    	jne    c00122c6 <timerHandler(unsigned long long)+0xf1>
c0012235:	e9 be 00 00 00       	jmp    c00122f8 <timerHandler(unsigned long long)+0x123>
c001223a:	83 ec 0c             	sub    esp,0xc
c001223d:	55                   	push   ebp
c001223e:	e8 ed 5b 00 00       	call   c0017e30 <unblockTask(ThreadControlBlock*)>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	39 eb                	cmp    ebx,ebp
c0012248:	75 12                	jne    c001225c <timerHandler(unsigned long long)+0x87>
c001224a:	83 ec 0c             	sub    esp,0xc
c001224d:	68 9c 41 02 c0       	push   0xc002419c
c0012252:	e8 2d c5 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012257:	89 c3                	mov    ebx,eax
c0012259:	83 c4 10             	add    esp,0x10
c001225c:	83 ec 0c             	sub    esp,0xc
c001225f:	68 9c 41 02 c0       	push   0xc002419c
c0012264:	e8 23 c5 00 00       	call   c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012269:	83 c4 10             	add    esp,0x10
c001226c:	84 c0                	test   al,al
c001226e:	75 b4                	jne    c0012224 <timerHandler(unsigned long long)+0x4f>
c0012270:	83 ec 0c             	sub    esp,0xc
c0012273:	68 9c 41 02 c0       	push   0xc002419c
c0012278:	e8 07 c5 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	39 d8                	cmp    eax,ebx
c0012282:	74 a0                	je     c0012224 <timerHandler(unsigned long long)+0x4f>
c0012284:	83 ec 0c             	sub    esp,0xc
c0012287:	68 9c 41 02 c0       	push   0xc002419c
c001228c:	e8 f3 c4 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012291:	c7 04 24 9c 41 02 c0 	mov    DWORD PTR [esp],0xc002419c
c0012298:	89 c5                	mov    ebp,eax
c001229a:	e8 09 c5 00 00       	call   c001e7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001229f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00122a2:	83 c4 10             	add    esp,0x10
c00122a5:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00122a8:	39 15 d0 33 02 c0    	cmp    DWORD PTR ds:0xc00233d0,edx
c00122ae:	a1 d4 33 02 c0       	mov    eax,ds:0xc00233d4
c00122b3:	19 c8                	sbb    eax,ecx
c00122b5:	73 83                	jae    c001223a <timerHandler(unsigned long long)+0x65>
c00122b7:	50                   	push   eax
c00122b8:	50                   	push   eax
c00122b9:	55                   	push   ebp
c00122ba:	68 9c 41 02 c0       	push   0xc002419c
c00122bf:	e8 92 c5 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00122c4:	eb 93                	jmp    c0012259 <timerHandler(unsigned long long)+0x84>
c00122c6:	80 3d ec 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022dec,0x0
c00122cd:	74 29                	je     c00122f8 <timerHandler(unsigned long long)+0x123>
c00122cf:	39 c6                	cmp    esi,eax
c00122d1:	bb 00 00 00 00       	mov    ebx,0x0
c00122d6:	19 df                	sbb    edi,ebx
c00122d8:	72 19                	jb     c00122f3 <timerHandler(unsigned long long)+0x11e>
c00122da:	e8 2d 53 00 00       	call   c001760c <lockScheduler()>
c00122df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122e4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00122e7:	e8 54 56 00 00       	call   c0017940 <schedule()>
c00122ec:	e8 1d 53 00 00       	call   c001760e <unlockScheduler()>
c00122f1:	eb 05                	jmp    c00122f8 <timerHandler(unsigned long long)+0x123>
c00122f3:	29 f0                	sub    eax,esi
c00122f5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00122f8:	83 c4 0c             	add    esp,0xc
c00122fb:	5b                   	pop    ebx
c00122fc:	5e                   	pop    esi
c00122fd:	5f                   	pop    edi
c00122fe:	5d                   	pop    ebp
c00122ff:	e9 c1 56 00 00       	jmp    c00179c5 <unlockStuff()>
c0012304:	83 c4 0c             	add    esp,0xc
c0012307:	5b                   	pop    ebx
c0012308:	5e                   	pop    esi
c0012309:	5f                   	pop    edi
c001230a:	5d                   	pop    ebp
c001230b:	c3                   	ret    

c001230c <setupTimer(int)>:
c001230c:	57                   	push   edi
c001230d:	56                   	push   esi
c001230e:	53                   	push   ebx
c001230f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012313:	e8 27 19 00 00       	call   c0013c3f <getCPUNumber()>
c0012318:	85 c0                	test   eax,eax
c001231a:	74 32                	je     c001234e <setupTimer(int)+0x42>
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	68 60 01 00 00       	push   0x160
c0012324:	e8 c7 c9 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0012329:	89 04 24             	mov    DWORD PTR [esp],eax
c001232c:	89 c3                	mov    ebx,eax
c001232e:	e8 3b b8 00 00       	call   c001db6e <APICTimer::APICTimer()>
c0012333:	6a 00                	push   0x0
c0012335:	6a 00                	push   0x0
c0012337:	56                   	push   esi
c0012338:	53                   	push   ebx
c0012339:	e8 38 b7 00 00       	call   c001da76 <APICTimer::open(int, int, void*)>
c001233e:	83 c4 20             	add    esp,0x20
c0012341:	e8 fc 18 00 00       	call   c0013c42 <thisCPU()>
c0012346:	56                   	push   esi
c0012347:	56                   	push   esi
c0012348:	53                   	push   ebx
c0012349:	e9 96 00 00 00       	jmp    c00123e4 <setupTimer(int)+0xd8>
c001234e:	e8 ef 18 00 00       	call   c0013c42 <thisCPU()>
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001235c:	e8 6b e1 ff ff       	call   c00104cc <Device::getName()>
c0012361:	83 c4 10             	add    esp,0x10
c0012364:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012367:	0f 85 87 00 00 00    	jne    c00123f4 <setupTimer(int)+0xe8>
c001236d:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012372:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012379:	74 79                	je     c00123f4 <setupTimer(int)+0xe8>
c001237b:	83 ec 0c             	sub    esp,0xc
c001237e:	68 5c 01 00 00       	push   0x15c
c0012383:	e8 68 c9 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0012388:	89 04 24             	mov    DWORD PTR [esp],eax
c001238b:	89 c3                	mov    ebx,eax
c001238d:	e8 2c b9 00 00       	call   c001dcbe <PIT::PIT()>
c0012392:	59                   	pop    ecx
c0012393:	5f                   	pop    edi
c0012394:	53                   	push   ebx
c0012395:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c001239b:	e8 4a de ff ff       	call   c00101ea <Device::addChild(Device*)>
c00123a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123a2:	6a 00                	push   0x0
c00123a4:	6a 00                	push   0x0
c00123a6:	56                   	push   esi
c00123a7:	53                   	push   ebx
c00123a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123ab:	83 c4 14             	add    esp,0x14
c00123ae:	68 60 01 00 00       	push   0x160
c00123b3:	e8 38 c9 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00123b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00123bb:	89 c7                	mov    edi,eax
c00123bd:	e8 ac b7 00 00       	call   c001db6e <APICTimer::APICTimer()>
c00123c2:	6a 00                	push   0x0
c00123c4:	6a 00                	push   0x0
c00123c6:	56                   	push   esi
c00123c7:	57                   	push   edi
c00123c8:	e8 a9 b6 00 00       	call   c001da76 <APICTimer::open(int, int, void*)>
c00123cd:	83 c4 20             	add    esp,0x20
c00123d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123d2:	6a 00                	push   0x0
c00123d4:	6a 00                	push   0x0
c00123d6:	6a 00                	push   0x0
c00123d8:	53                   	push   ebx
c00123d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123dc:	e8 61 18 00 00       	call   c0013c42 <thisCPU()>
c00123e1:	5a                   	pop    edx
c00123e2:	59                   	pop    ecx
c00123e3:	57                   	push   edi
c00123e4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00123ea:	e8 fb dd ff ff       	call   c00101ea <Device::addChild(Device*)>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	eb 33                	jmp    c0012427 <setupTimer(int)+0x11b>
c00123f4:	83 ec 0c             	sub    esp,0xc
c00123f7:	68 5c 01 00 00       	push   0x15c
c00123fc:	e8 ef c8 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0012401:	89 04 24             	mov    DWORD PTR [esp],eax
c0012404:	89 c3                	mov    ebx,eax
c0012406:	e8 b3 b8 00 00       	call   c001dcbe <PIT::PIT()>
c001240b:	58                   	pop    eax
c001240c:	5a                   	pop    edx
c001240d:	53                   	push   ebx
c001240e:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c0012414:	e8 d1 dd ff ff       	call   c00101ea <Device::addChild(Device*)>
c0012419:	8b 03                	mov    eax,DWORD PTR [ebx]
c001241b:	6a 00                	push   0x0
c001241d:	6a 00                	push   0x0
c001241f:	56                   	push   esi
c0012420:	53                   	push   ebx
c0012421:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012424:	83 c4 20             	add    esp,0x20
c0012427:	89 d8                	mov    eax,ebx
c0012429:	5b                   	pop    ebx
c001242a:	5e                   	pop    esi
c001242b:	5f                   	pop    edi
c001242c:	c3                   	ret    
c001242d:	90                   	nop

c001242e <VCache::VCache(PhysicalDisk*)>:
c001242e:	53                   	push   ebx
c001242f:	83 ec 08             	sub    esp,0x8
c0012432:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c0012437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243b:	89 10                	mov    DWORD PTR [eax],edx
c001243d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012441:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012457:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001245e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012469:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012470:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001247b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012486:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001248a:	83 ec 0c             	sub    esp,0xc
c001248d:	6a 10                	push   0x10
c001248f:	e8 5c c8 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0012494:	83 c4 10             	add    esp,0x10
c0012497:	89 c3                	mov    ebx,eax
c0012499:	83 ec 0c             	sub    esp,0xc
c001249c:	53                   	push   ebx
c001249d:	e8 82 52 00 00       	call   c0017724 <Mutex::Mutex()>
c00124a2:	83 c4 10             	add    esp,0x10
c00124a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00124ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124bb:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00124c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124c6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00124cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124d7:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00124dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00124e7:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00124ea:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00124ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f1:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00124f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00124ff:	c1 e0 06             	shl    eax,0x6
c0012502:	83 ec 0c             	sub    esp,0xc
c0012505:	50                   	push   eax
c0012506:	e8 0d 97 ff ff       	call   c000bc18 <malloc>
c001250b:	83 c4 10             	add    esp,0x10
c001250e:	89 c2                	mov    edx,eax
c0012510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012514:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012517:	90                   	nop
c0012518:	83 c4 08             	add    esp,0x8
c001251b:	5b                   	pop    ebx
c001251c:	c3                   	ret    
c001251d:	90                   	nop

c001251e <VCache::writeWriteBuffer()>:
c001251e:	53                   	push   ebx
c001251f:	83 ec 14             	sub    esp,0x14
c0012522:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012526:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012529:	8b 10                	mov    edx,DWORD PTR [eax]
c001252b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001252e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012531:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012534:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012537:	50                   	push   eax
c0012538:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001253b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012542:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012549:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001254d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012554:	83 c4 28             	add    esp,0x28
c0012557:	5b                   	pop    ebx
c0012558:	c3                   	ret    
c0012559:	90                   	nop

c001255a <VCache::~VCache()>:
c001255a:	83 ec 0c             	sub    esp,0xc
c001255d:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c0012562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012566:	89 10                	mov    DWORD PTR [eax],edx
c0012568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001256c:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001256f:	84 c0                	test   al,al
c0012571:	74 0f                	je     c0012582 <VCache::~VCache()+0x28>
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001257a:	e8 9f ff ff ff       	call   c001251e <VCache::writeWriteBuffer()>
c001257f:	83 c4 10             	add    esp,0x10
c0012582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012586:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012589:	83 ec 0c             	sub    esp,0xc
c001258c:	50                   	push   eax
c001258d:	e8 96 96 ff ff       	call   c000bc28 <free>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	90                   	nop
c0012596:	83 c4 0c             	add    esp,0xc
c0012599:	c3                   	ret    

c001259a <VCache::~VCache()>:
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	83 ec 0c             	sub    esp,0xc
c00125a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a4:	e8 b1 ff ff ff       	call   c001255a <VCache::~VCache()>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	83 ec 08             	sub    esp,0x8
c00125af:	6a 30                	push   0x30
c00125b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125b5:	e8 45 c7 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	83 c4 0c             	add    esp,0xc
c00125c0:	c3                   	ret    
c00125c1:	90                   	nop

c00125c2 <VCache::write(unsigned long long, int, void*)>:
c00125c2:	55                   	push   ebp
c00125c3:	57                   	push   edi
c00125c4:	56                   	push   esi
c00125c5:	53                   	push   ebx
c00125c6:	83 ec 28             	sub    esp,0x28
c00125c9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00125cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00125d1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00125d5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00125d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00125dc:	e8 17 57 00 00       	call   c0017cf8 <Semaphore::acquire()>
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00125e8:	74 66                	je     c0012650 <VCache::write(unsigned long long, int, void*)+0x8e>
c00125ea:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125ed:	99                   	cdq    
c00125ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125f2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00125f5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00125f8:	89 c1                	mov    ecx,eax
c00125fa:	89 d0                	mov    eax,edx
c00125fc:	31 f1                	xor    ecx,esi
c00125fe:	31 f8                	xor    eax,edi
c0012600:	89 ca                	mov    edx,ecx
c0012602:	09 c2                	or     edx,eax
c0012604:	75 3e                	jne    c0012644 <VCache::write(unsigned long long, int, void*)+0x82>
c0012606:	83 fd 01             	cmp    ebp,0x1
c0012609:	75 39                	jne    c0012644 <VCache::write(unsigned long long, int, void*)+0x82>
c001260b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001260e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012614:	51                   	push   ecx
c0012615:	50                   	push   eax
c0012616:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001261a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001261e:	0f af c8             	imul   ecx,eax
c0012621:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012624:	51                   	push   ecx
c0012625:	e8 a8 df fe ff       	call   c00005d2 <memcpy>
c001262a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001262d:	83 c4 10             	add    esp,0x10
c0012630:	40                   	inc    eax
c0012631:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012634:	83 f8 40             	cmp    eax,0x40
c0012637:	75 57                	jne    c0012690 <VCache::write(unsigned long long, int, void*)+0xce>
c0012639:	83 ec 0c             	sub    esp,0xc
c001263c:	53                   	push   ebx
c001263d:	e8 dc fe ff ff       	call   c001251e <VCache::writeWriteBuffer()>
c0012642:	eb 34                	jmp    c0012678 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012644:	83 ec 0c             	sub    esp,0xc
c0012647:	53                   	push   ebx
c0012648:	e8 d1 fe ff ff       	call   c001251e <VCache::writeWriteBuffer()>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012653:	83 fd 3f             	cmp    ebp,0x3f
c0012656:	7f 25                	jg     c001267d <VCache::write(unsigned long long, int, void*)+0xbb>
c0012658:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001265b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001265e:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012661:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012665:	52                   	push   edx
c0012666:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001266c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012670:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012673:	e8 5a df fe ff       	call   c00005d2 <memcpy>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	eb 13                	jmp    c0012690 <VCache::write(unsigned long long, int, void*)+0xce>
c001267d:	83 ec 0c             	sub    esp,0xc
c0012680:	8b 10                	mov    edx,DWORD PTR [eax]
c0012682:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012686:	55                   	push   ebp
c0012687:	57                   	push   edi
c0012688:	56                   	push   esi
c0012689:	50                   	push   eax
c001268a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001268d:	83 c4 20             	add    esp,0x20
c0012690:	83 ec 0c             	sub    esp,0xc
c0012693:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012696:	e8 f9 5b 00 00       	call   c0018294 <Semaphore::release()>
c001269b:	83 c4 2c             	add    esp,0x2c
c001269e:	31 c0                	xor    eax,eax
c00126a0:	5b                   	pop    ebx
c00126a1:	5e                   	pop    esi
c00126a2:	5f                   	pop    edi
c00126a3:	5d                   	pop    ebp
c00126a4:	c3                   	ret    
c00126a5:	90                   	nop

c00126a6 <VCache::read(unsigned long long, int, void*)>:
c00126a6:	57                   	push   edi
c00126a7:	56                   	push   esi
c00126a8:	53                   	push   ebx
c00126a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00126b5:	83 ec 0c             	sub    esp,0xc
c00126b8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00126bb:	e8 38 56 00 00       	call   c0017cf8 <Semaphore::acquire()>
c00126c0:	83 c4 10             	add    esp,0x10
c00126c3:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00126c7:	74 0c                	je     c00126d5 <VCache::read(unsigned long long, int, void*)+0x2f>
c00126c9:	83 ec 0c             	sub    esp,0xc
c00126cc:	53                   	push   ebx
c00126cd:	e8 4c fe ff ff       	call   c001251e <VCache::writeWriteBuffer()>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00126d8:	83 ec 0c             	sub    esp,0xc
c00126db:	8b 10                	mov    edx,DWORD PTR [eax]
c00126dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00126e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00126e5:	57                   	push   edi
c00126e6:	56                   	push   esi
c00126e7:	50                   	push   eax
c00126e8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00126eb:	83 c4 14             	add    esp,0x14
c00126ee:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00126f1:	e8 9e 5b 00 00       	call   c0018294 <Semaphore::release()>
c00126f6:	83 c4 10             	add    esp,0x10
c00126f9:	31 c0                	xor    eax,eax
c00126fb:	5b                   	pop    ebx
c00126fc:	5e                   	pop    esi
c00126fd:	5f                   	pop    edi
c00126fe:	c3                   	ret    
c00126ff:	90                   	nop

c0012700 <Video::putrect(int, int, int, int, unsigned int)>:
c0012700:	55                   	push   ebp
c0012701:	57                   	push   edi
c0012702:	56                   	push   esi
c0012703:	53                   	push   ebx
c0012704:	83 ec 1c             	sub    esp,0x1c
c0012707:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001270b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001270f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012713:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012717:	01 e8                	add    eax,ebp
c0012719:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001271d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012721:	01 df                	add    edi,ebx
c0012723:	39 fb                	cmp    ebx,edi
c0012725:	7d 1b                	jge    c0012742 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012727:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001272b:	7d 12                	jge    c001273f <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001272d:	8b 16                	mov    edx,DWORD PTR [esi]
c001272f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012733:	53                   	push   ebx
c0012734:	55                   	push   ebp
c0012735:	45                   	inc    ebp
c0012736:	56                   	push   esi
c0012737:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001273a:	83 c4 10             	add    esp,0x10
c001273d:	eb e8                	jmp    c0012727 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001273f:	43                   	inc    ebx
c0012740:	eb e1                	jmp    c0012723 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012742:	83 c4 1c             	add    esp,0x1c
c0012745:	5b                   	pop    ebx
c0012746:	5e                   	pop    esi
c0012747:	5f                   	pop    edi
c0012748:	5d                   	pop    ebp
c0012749:	c3                   	ret    

c001274a <Video::blit(unsigned int*, int, int, int, int)>:
c001274a:	55                   	push   ebp
c001274b:	57                   	push   edi
c001274c:	56                   	push   esi
c001274d:	53                   	push   ebx
c001274e:	83 ec 1c             	sub    esp,0x1c
c0012751:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012755:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012759:	85 c0                	test   eax,eax
c001275b:	79 02                	jns    c001275f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001275d:	31 c0                	xor    eax,eax
c001275f:	c1 e0 02             	shl    eax,0x2
c0012762:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001276a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001276e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012772:	39 d8                	cmp    eax,ebx
c0012774:	7e 49                	jle    c00127bf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012776:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001277c:	7c 41                	jl     c00127bf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001277e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012782:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012786:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001278a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001278e:	39 f9                	cmp    ecx,edi
c0012790:	7e 22                	jle    c00127b4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012792:	83 c5 04             	add    ebp,0x4
c0012795:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001279b:	7c 14                	jl     c00127b1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001279d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001279f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00127a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127aa:	56                   	push   esi
c00127ab:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	47                   	inc    edi
c00127b2:	eb d2                	jmp    c0012786 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00127b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127b8:	43                   	inc    ebx
c00127b9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00127bd:	eb ab                	jmp    c001276a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00127bf:	83 c4 1c             	add    esp,0x1c
c00127c2:	5b                   	pop    ebx
c00127c3:	5e                   	pop    esi
c00127c4:	5f                   	pop    edi
c00127c5:	5d                   	pop    ebp
c00127c6:	c3                   	ret    
c00127c7:	90                   	nop

c00127c8 <Video::clearScreen(unsigned int)>:
c00127c8:	57                   	push   edi
c00127c9:	56                   	push   esi
c00127ca:	53                   	push   ebx
c00127cb:	31 db                	xor    ebx,ebx
c00127cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127d1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00127d7:	7e 1f                	jle    c00127f8 <Video::clearScreen(unsigned int)+0x30>
c00127d9:	31 ff                	xor    edi,edi
c00127db:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00127e1:	7e 12                	jle    c00127f5 <Video::clearScreen(unsigned int)+0x2d>
c00127e3:	8b 06                	mov    eax,DWORD PTR [esi]
c00127e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127e9:	53                   	push   ebx
c00127ea:	57                   	push   edi
c00127eb:	47                   	inc    edi
c00127ec:	56                   	push   esi
c00127ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00127f0:	83 c4 10             	add    esp,0x10
c00127f3:	eb e6                	jmp    c00127db <Video::clearScreen(unsigned int)+0x13>
c00127f5:	43                   	inc    ebx
c00127f6:	eb d9                	jmp    c00127d1 <Video::clearScreen(unsigned int)+0x9>
c00127f8:	5b                   	pop    ebx
c00127f9:	5e                   	pop    esi
c00127fa:	5f                   	pop    edi
c00127fb:	c3                   	ret    

c00127fc <Video::putpixel(int, int, unsigned int)>:
c00127fc:	c7 44 24 04 34 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c34
c0012804:	e9 d6 c5 ff ff       	jmp    c000eddf <Dbg::kprintf(char const*, ...)>
c0012809:	90                   	nop

c001280a <Video::Video(char const*)>:
c001280a:	83 ec 0c             	sub    esp,0xc
c001280d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012811:	83 ec 08             	sub    esp,0x8
c0012814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012818:	50                   	push   eax
c0012819:	e8 bc db ff ff       	call   c00103da <Device::Device(char const*)>
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	ba 4c 0c 02 c0       	mov    edx,0xc0020c4c
c0012826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001282a:	89 10                	mov    DWORD PTR [eax],edx
c001282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012830:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001283a:	90                   	nop
c001283b:	83 c4 0c             	add    esp,0xc
c001283e:	c3                   	ret    
c001283f:	90                   	nop

c0012840 <Video::~Video()>:
c0012840:	83 ec 0c             	sub    esp,0xc
c0012843:	ba 4c 0c 02 c0       	mov    edx,0xc0020c4c
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	89 10                	mov    DWORD PTR [eax],edx
c001284e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012852:	83 ec 0c             	sub    esp,0xc
c0012855:	50                   	push   eax
c0012856:	e8 31 d8 ff ff       	call   c001008c <Device::~Device()>
c001285b:	83 c4 10             	add    esp,0x10
c001285e:	90                   	nop
c001285f:	83 c4 0c             	add    esp,0xc
c0012862:	c3                   	ret    
c0012863:	90                   	nop

c0012864 <Video::~Video()>:
c0012864:	83 ec 0c             	sub    esp,0xc
c0012867:	83 ec 0c             	sub    esp,0xc
c001286a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001286e:	e8 cd ff ff ff       	call   c0012840 <Video::~Video()>
c0012873:	83 c4 10             	add    esp,0x10
c0012876:	83 ec 08             	sub    esp,0x8
c0012879:	68 64 01 00 00       	push   0x164
c001287e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012882:	e8 78 c4 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0012887:	83 c4 10             	add    esp,0x10
c001288a:	83 c4 0c             	add    esp,0xc
c001288d:	c3                   	ret    

c001288e <Video::isMonochrome()>:
c001288e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012892:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012898:	c3                   	ret    
c0012899:	90                   	nop

c001289a <Video::getWidth()>:
c001289a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001289e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128a4:	c3                   	ret    
c00128a5:	90                   	nop

c00128a6 <Video::getHeight()>:
c00128a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128b0:	c3                   	ret    
c00128b1:	90                   	nop

c00128b2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00128b2:	55                   	push   ebp
c00128b3:	57                   	push   edi
c00128b4:	56                   	push   esi
c00128b5:	53                   	push   ebx
c00128b6:	83 ec 2c             	sub    esp,0x2c
c00128b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00128bd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00128c1:	83 f8 01             	cmp    eax,0x1
c00128c4:	19 c9                	sbb    ecx,ecx
c00128c6:	31 db                	xor    ebx,ebx
c00128c8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00128cc:	89 cd                	mov    ebp,ecx
c00128ce:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00128d6:	f7 d5                	not    ebp
c00128d8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00128de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00128e2:	01 d8                	add    eax,ebx
c00128e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128e8:	56                   	push   esi
c00128e9:	e8 b8 ff ff ff       	call   c00128a6 <Video::getHeight()>
c00128ee:	59                   	pop    ecx
c00128ef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00128f3:	7e 70                	jle    c0012965 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00128f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00128f9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00128fd:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012900:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012904:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012908:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001290f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012913:	89 f8                	mov    eax,edi
c0012915:	83 c0 20             	add    eax,0x20
c0012918:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001291c:	56                   	push   esi
c001291d:	e8 78 ff ff ff       	call   c001289a <Video::getWidth()>
c0012922:	5a                   	pop    edx
c0012923:	39 c7                	cmp    edi,eax
c0012925:	7d 34                	jge    c001295b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012927:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001292c:	74 05                	je     c0012933 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001292e:	8b 06                	mov    eax,DWORD PTR [esi]
c0012930:	55                   	push   ebp
c0012931:	eb 0d                	jmp    c0012940 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012933:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012938:	74 12                	je     c001294c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001293a:	8b 06                	mov    eax,DWORD PTR [esi]
c001293c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012940:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012944:	57                   	push   edi
c0012945:	56                   	push   esi
c0012946:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012950:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012954:	47                   	inc    edi
c0012955:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012959:	75 c1                	jne    c001291c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001295b:	43                   	inc    ebx
c001295c:	83 fb 20             	cmp    ebx,0x20
c001295f:	0f 85 79 ff ff ff    	jne    c00128de <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012965:	83 c4 2c             	add    esp,0x2c
c0012968:	5b                   	pop    ebx
c0012969:	5e                   	pop    esi
c001296a:	5f                   	pop    edi
c001296b:	5d                   	pop    ebp
c001296c:	c3                   	ret    
c001296d:	90                   	nop

c001296e <ACPI::close(int, int, void*)>:
c001296e:	83 ec 1c             	sub    esp,0x1c
c0012971:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012979:	74 0a                	je     c0012985 <ACPI::close(int, int, void*)+0x17>
c001297b:	b8 00 00 00 00       	mov    eax,0x0
c0012980:	e9 9a 00 00 00       	jmp    c0012a1f <ACPI::close(int, int, void*)+0xb1>
c0012985:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001298a:	75 37                	jne    c00129c3 <ACPI::close(int, int, void*)+0x55>
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	68 84 0c 02 c0       	push   0xc0020c84
c0012994:	e8 46 c4 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0012999:	83 c4 10             	add    esp,0x10
c001299c:	a1 e8 33 02 c0       	mov    eax,ds:0xc00233e8
c00129a1:	85 c0                	test   eax,eax
c00129a3:	74 07                	je     c00129ac <ACPI::close(int, int, void*)+0x3e>
c00129a5:	a1 e8 33 02 c0       	mov    eax,ds:0xc00233e8
c00129aa:	ff d0                	call   eax
c00129ac:	83 ec 0c             	sub    esp,0xc
c00129af:	68 58 0d 02 c0       	push   0xc0020d58
c00129b4:	e8 8f 1f 00 00       	call   c0014948 <Krnl::panic(char const*)>
c00129b9:	83 c4 10             	add    esp,0x10
c00129bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00129c1:	eb 5c                	jmp    c0012a1f <ACPI::close(int, int, void*)+0xb1>
c00129c3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00129c8:	75 50                	jne    c0012a1a <ACPI::close(int, int, void*)+0xac>
c00129ca:	a1 e4 33 02 c0       	mov    eax,ds:0xc00233e4
c00129cf:	85 c0                	test   eax,eax
c00129d1:	74 07                	je     c00129da <ACPI::close(int, int, void*)+0x6c>
c00129d3:	a1 e4 33 02 c0       	mov    eax,ds:0xc00233e4
c00129d8:	ff d0                	call   eax
c00129da:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00129df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00129e4:	83 e0 02             	and    eax,0x2
c00129e7:	74 1c                	je     c0012a05 <ACPI::close(int, int, void*)+0x97>
c00129e9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00129f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129f4:	89 c2                	mov    edx,eax
c00129f6:	ec                   	in     al,dx
c00129f7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00129fb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00129ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012a03:	eb da                	jmp    c00129df <ACPI::close(int, int, void*)+0x71>
c0012a05:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012a0c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012a11:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012a15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a19:	ee                   	out    dx,al
c0012a1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a1f:	83 c4 1c             	add    esp,0x1c
c0012a22:	c3                   	ret    

c0012a23 <findRSDP()>:
c0012a23:	83 ec 1c             	sub    esp,0x1c
c0012a26:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012a2b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012a31:	83 e0 04             	and    eax,0x4
c0012a34:	84 c0                	test   al,al
c0012a36:	75 07                	jne    c0012a3f <findRSDP()+0x1c>
c0012a38:	b8 00 00 00 00       	mov    eax,0x0
c0012a3d:	eb 6a                	jmp    c0012aa9 <findRSDP()+0x86>
c0012a3f:	a1 30 2e 02 c0       	mov    eax,ds:0xc0022e30
c0012a44:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012a49:	7f 1b                	jg     c0012a66 <findRSDP()+0x43>
c0012a4b:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012a50:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012a56:	83 e2 fb             	and    edx,0xfffffffb
c0012a59:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012a5f:	b8 00 00 00 00       	mov    eax,0x0
c0012a64:	eb 43                	jmp    c0012aa9 <findRSDP()+0x86>
c0012a66:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012a6e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012a76:	77 2c                	ja     c0012aa4 <findRSDP()+0x81>
c0012a78:	83 ec 04             	sub    esp,0x4
c0012a7b:	6a 08                	push   0x8
c0012a7d:	68 91 0c 02 c0       	push   0xc0020c91
c0012a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a86:	e8 e4 da fe ff       	call   c000056f <memcmp>
c0012a8b:	83 c4 10             	add    esp,0x10
c0012a8e:	85 c0                	test   eax,eax
c0012a90:	0f 94 c0             	sete   al
c0012a93:	84 c0                	test   al,al
c0012a95:	74 06                	je     c0012a9d <findRSDP()+0x7a>
c0012a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a9b:	eb 0c                	jmp    c0012aa9 <findRSDP()+0x86>
c0012a9d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012aa2:	eb ca                	jmp    c0012a6e <findRSDP()+0x4b>
c0012aa4:	b8 00 00 00 00       	mov    eax,0x0
c0012aa9:	83 c4 1c             	add    esp,0x1c
c0012aac:	c3                   	ret    

c0012aad <loadACPITables(unsigned char*)>:
c0012aad:	56                   	push   esi
c0012aae:	53                   	push   ebx
c0012aaf:	83 ec 44             	sub    esp,0x44
c0012ab2:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012ab7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012abd:	83 e0 04             	and    eax,0x4
c0012ac0:	84 c0                	test   al,al
c0012ac2:	0f 84 05 02 00 00    	je     c0012ccd <loadACPITables(unsigned char*)+0x220>
c0012ac8:	a0 00 36 02 c0       	mov    al,ds:0xc0023600
c0012acd:	84 c0                	test   al,al
c0012acf:	74 75                	je     c0012b46 <loadACPITables(unsigned char*)+0x99>
c0012ad1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012ad5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ad9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012add:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ae0:	83 e8 24             	sub    eax,0x24
c0012ae3:	c1 e8 03             	shr    eax,0x3
c0012ae6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012aea:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012af2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012af6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012afa:	0f 8d b2 00 00 00    	jge    c0012bb2 <loadACPITables(unsigned char*)+0x105>
c0012b00:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b04:	83 c0 24             	add    eax,0x24
c0012b07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012b0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b0f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012b13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012b17:	c1 e0 03             	shl    eax,0x3
c0012b1a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012b1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b22:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b27:	89 c1                	mov    ecx,eax
c0012b29:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c0012b2e:	8d 50 01             	lea    edx,[eax+0x1]
c0012b31:	89 15 ec 33 02 c0    	mov    DWORD PTR ds:0xc00233ec,edx
c0012b37:	89 ca                	mov    edx,ecx
c0012b39:	89 14 c5 04 34 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcbfc],edx
c0012b40:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012b44:	eb ac                	jmp    c0012af2 <loadACPITables(unsigned char*)+0x45>
c0012b46:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b55:	83 e8 24             	sub    eax,0x24
c0012b58:	c1 e8 02             	shr    eax,0x2
c0012b5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b5f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012b67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b6b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012b6f:	7d 41                	jge    c0012bb2 <loadACPITables(unsigned char*)+0x105>
c0012b71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b75:	83 c0 24             	add    eax,0x24
c0012b78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012b84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012b88:	c1 e0 02             	shl    eax,0x2
c0012b8b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012b8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b93:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b95:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c0012b9a:	8d 50 01             	lea    edx,[eax+0x1]
c0012b9d:	89 15 ec 33 02 c0    	mov    DWORD PTR ds:0xc00233ec,edx
c0012ba3:	89 ca                	mov    edx,ecx
c0012ba5:	89 14 c5 04 34 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcbfc],edx
c0012bac:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012bb0:	eb b5                	jmp    c0012b67 <loadACPITables(unsigned char*)+0xba>
c0012bb2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012bba:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c0012bbf:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012bc3:	0f 8d 05 01 00 00    	jge    c0012cce <loadACPITables(unsigned char*)+0x221>
c0012bc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bcd:	8b 04 c5 04 34 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcbfc]
c0012bd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012be4:	25 ff 0f 00 00       	and    eax,0xfff
c0012be9:	89 c6                	mov    esi,eax
c0012beb:	e8 ff b0 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c0012bf0:	89 c3                	mov    ebx,eax
c0012bf2:	83 ec 0c             	sub    esp,0xc
c0012bf5:	6a 01                	push   0x1
c0012bf7:	e8 63 af ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c0012bfc:	83 c4 10             	add    esp,0x10
c0012bff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c03:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012c09:	83 ec 0c             	sub    esp,0xc
c0012c0c:	6a 01                	push   0x1
c0012c0e:	6a 01                	push   0x1
c0012c10:	50                   	push   eax
c0012c11:	52                   	push   edx
c0012c12:	53                   	push   ebx
c0012c13:	e8 6a b8 ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c18:	83 c4 20             	add    esp,0x20
c0012c1b:	09 f0                	or     eax,esi
c0012c1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c25:	c1 e0 03             	shl    eax,0x3
c0012c28:	05 00 34 02 c0       	add    eax,0xc0023400
c0012c2d:	83 ec 04             	sub    esp,0x4
c0012c30:	6a 04                	push   0x4
c0012c32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c36:	50                   	push   eax
c0012c37:	e8 96 d9 fe ff       	call   c00005d2 <memcpy>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c4e:	05 00 10 00 00       	add    eax,0x1000
c0012c53:	c1 e8 0c             	shr    eax,0xc
c0012c56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c65:	25 ff 0f 00 00       	and    eax,0xfff
c0012c6a:	89 c6                	mov    esi,eax
c0012c6c:	e8 7e b0 ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c0012c71:	89 c3                	mov    ebx,eax
c0012c73:	83 ec 0c             	sub    esp,0xc
c0012c76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c7a:	e8 e0 ae ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c86:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012c8c:	83 ec 0c             	sub    esp,0xc
c0012c8f:	6a 01                	push   0x1
c0012c91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c95:	50                   	push   eax
c0012c96:	52                   	push   edx
c0012c97:	53                   	push   ebx
c0012c98:	e8 e5 b7 ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c9d:	83 c4 20             	add    esp,0x20
c0012ca0:	09 f0                	or     eax,esi
c0012ca2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ca6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	50                   	push   eax
c0012cad:	e8 e3 b1 ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cbd:	89 14 c5 04 34 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcbfc],edx
c0012cc4:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012cc8:	e9 ed fe ff ff       	jmp    c0012bba <loadACPITables(unsigned char*)+0x10d>
c0012ccd:	90                   	nop
c0012cce:	83 c4 44             	add    esp,0x44
c0012cd1:	5b                   	pop    ebx
c0012cd2:	5e                   	pop    esi
c0012cd3:	c3                   	ret    

c0012cd4 <findRSDT(unsigned char*)>:
c0012cd4:	56                   	push   esi
c0012cd5:	53                   	push   ebx
c0012cd6:	83 ec 44             	sub    esp,0x44
c0012cd9:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012cde:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ce4:	83 e0 04             	and    eax,0x4
c0012ce7:	84 c0                	test   al,al
c0012ce9:	75 0a                	jne    c0012cf5 <findRSDT(unsigned char*)+0x21>
c0012ceb:	b8 00 00 00 00       	mov    eax,0x0
c0012cf0:	e9 f7 00 00 00       	jmp    c0012dec <findRSDT(unsigned char*)+0x118>
c0012cf5:	83 ec 04             	sub    esp,0x4
c0012cf8:	6a 24                	push   0x24
c0012cfa:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012cfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012d02:	50                   	push   eax
c0012d03:	e8 ca d8 fe ff       	call   c00005d2 <memcpy>
c0012d08:	83 c4 10             	add    esp,0x10
c0012d0b:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012d0f:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012d13:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012d1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012d1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d23:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d33:	25 ff 0f 00 00       	and    eax,0xfff
c0012d38:	89 c6                	mov    esi,eax
c0012d3a:	e8 b0 af ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c0012d3f:	89 c3                	mov    ebx,eax
c0012d41:	83 ec 0c             	sub    esp,0xc
c0012d44:	6a 02                	push   0x2
c0012d46:	e8 14 ae ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c0012d4b:	83 c4 10             	add    esp,0x10
c0012d4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012d52:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012d58:	83 ec 0c             	sub    esp,0xc
c0012d5b:	6a 01                	push   0x1
c0012d5d:	6a 02                	push   0x2
c0012d5f:	50                   	push   eax
c0012d60:	52                   	push   edx
c0012d61:	53                   	push   ebx
c0012d62:	e8 1b b7 ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d67:	83 c4 20             	add    esp,0x20
c0012d6a:	09 f0                	or     eax,esi
c0012d6c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d74:	25 ff 0f 00 00       	and    eax,0xfff
c0012d79:	89 c6                	mov    esi,eax
c0012d7b:	e8 6f af ff ff       	call   c000dcef <Virt::getAKernelVAS()>
c0012d80:	89 c3                	mov    ebx,eax
c0012d82:	83 ec 0c             	sub    esp,0xc
c0012d85:	6a 02                	push   0x2
c0012d87:	e8 d3 ad ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c0012d8c:	83 c4 10             	add    esp,0x10
c0012d8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012d93:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012d99:	83 ec 0c             	sub    esp,0xc
c0012d9c:	6a 01                	push   0x1
c0012d9e:	6a 02                	push   0x2
c0012da0:	50                   	push   eax
c0012da1:	52                   	push   edx
c0012da2:	53                   	push   ebx
c0012da3:	e8 da b6 ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012da8:	83 c4 20             	add    esp,0x20
c0012dab:	09 f0                	or     eax,esi
c0012dad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012db1:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0012db6:	75 11                	jne    c0012dc9 <findRSDT(unsigned char*)+0xf5>
c0012db8:	c6 05 00 36 02 c0 00 	mov    BYTE PTR ds:0xc0023600,0x0
c0012dbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012dc3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012dc7:	eb 1f                	jmp    c0012de8 <findRSDT(unsigned char*)+0x114>
c0012dc9:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0012dce:	75 11                	jne    c0012de1 <findRSDT(unsigned char*)+0x10d>
c0012dd0:	c6 05 00 36 02 c0 01 	mov    BYTE PTR ds:0xc0023600,0x1
c0012dd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ddb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012ddf:	eb 07                	jmp    c0012de8 <findRSDT(unsigned char*)+0x114>
c0012de1:	b8 00 00 00 00       	mov    eax,0x0
c0012de6:	eb 04                	jmp    c0012dec <findRSDT(unsigned char*)+0x118>
c0012de8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dec:	83 c4 44             	add    esp,0x44
c0012def:	5b                   	pop    ebx
c0012df0:	5e                   	pop    esi
c0012df1:	c3                   	ret    

c0012df2 <findDataTable(unsigned char*, char*)>:
c0012df2:	83 ec 1c             	sub    esp,0x1c
c0012df5:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012dfa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e00:	83 e0 04             	and    eax,0x4
c0012e03:	84 c0                	test   al,al
c0012e05:	75 07                	jne    c0012e0e <findDataTable(unsigned char*, char*)+0x1c>
c0012e07:	b8 00 00 00 00       	mov    eax,0x0
c0012e0c:	eb 7c                	jmp    c0012e8a <findDataTable(unsigned char*, char*)+0x98>
c0012e0e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012e16:	a1 ec 33 02 c0       	mov    eax,ds:0xc00233ec
c0012e1b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0012e1f:	7d 3a                	jge    c0012e5b <findDataTable(unsigned char*, char*)+0x69>
c0012e21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e25:	c1 e0 03             	shl    eax,0x3
c0012e28:	05 00 34 02 c0       	add    eax,0xc0023400
c0012e2d:	83 ec 04             	sub    esp,0x4
c0012e30:	6a 04                	push   0x4
c0012e32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e36:	50                   	push   eax
c0012e37:	e8 33 d7 fe ff       	call   c000056f <memcmp>
c0012e3c:	83 c4 10             	add    esp,0x10
c0012e3f:	85 c0                	test   eax,eax
c0012e41:	0f 94 c0             	sete   al
c0012e44:	84 c0                	test   al,al
c0012e46:	74 0d                	je     c0012e55 <findDataTable(unsigned char*, char*)+0x63>
c0012e48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e4c:	8b 04 c5 04 34 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcbfc]
c0012e53:	eb 35                	jmp    c0012e8a <findDataTable(unsigned char*, char*)+0x98>
c0012e55:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012e59:	eb bb                	jmp    c0012e16 <findDataTable(unsigned char*, char*)+0x24>
c0012e5b:	a0 00 36 02 c0       	mov    al,ds:0xc0023600
c0012e60:	84 c0                	test   al,al
c0012e62:	74 07                	je     c0012e6b <findDataTable(unsigned char*, char*)+0x79>
c0012e64:	b8 58 00 00 00       	mov    eax,0x58
c0012e69:	eb 05                	jmp    c0012e70 <findDataTable(unsigned char*, char*)+0x7e>
c0012e6b:	b8 52 00 00 00       	mov    eax,0x52
c0012e70:	83 ec 04             	sub    esp,0x4
c0012e73:	50                   	push   eax
c0012e74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e78:	68 7c 0d 02 c0       	push   0xc0020d7c
c0012e7d:	e8 5d bf ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	b8 00 00 00 00       	mov    eax,0x0
c0012e8a:	83 c4 1c             	add    esp,0x1c
c0012e8d:	c3                   	ret    

c0012e8e <scanMADT()>:
c0012e8e:	83 ec 2c             	sub    esp,0x2c
c0012e91:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012e96:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012e9c:	83 e0 04             	and    eax,0x4
c0012e9f:	84 c0                	test   al,al
c0012ea1:	0f 84 73 03 00 00    	je     c001321a <scanMADT()+0x38c>
c0012ea7:	e8 77 fb ff ff       	call   c0012a23 <findRSDP()>
c0012eac:	a3 0c 36 02 c0       	mov    ds:0xc002360c,eax
c0012eb1:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c0012eb6:	85 c0                	test   eax,eax
c0012eb8:	75 19                	jne    c0012ed3 <scanMADT()+0x45>
c0012eba:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012ebf:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012ec5:	83 e2 fb             	and    edx,0xfffffffb
c0012ec8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012ece:	e9 4b 03 00 00       	jmp    c001321e <scanMADT()+0x390>
c0012ed3:	a1 0c 36 02 c0       	mov    eax,ds:0xc002360c
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	50                   	push   eax
c0012edc:	e8 f3 fd ff ff       	call   c0012cd4 <findRSDT(unsigned char*)>
c0012ee1:	83 c4 10             	add    esp,0x10
c0012ee4:	a3 08 36 02 c0       	mov    ds:0xc0023608,eax
c0012ee9:	a1 08 36 02 c0       	mov    eax,ds:0xc0023608
c0012eee:	85 c0                	test   eax,eax
c0012ef0:	75 19                	jne    c0012f0b <scanMADT()+0x7d>
c0012ef2:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012ef7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012efd:	83 e2 fb             	and    edx,0xfffffffb
c0012f00:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f06:	e9 13 03 00 00       	jmp    c001321e <scanMADT()+0x390>
c0012f0b:	a1 08 36 02 c0       	mov    eax,ds:0xc0023608
c0012f10:	83 ec 0c             	sub    esp,0xc
c0012f13:	50                   	push   eax
c0012f14:	e8 94 fb ff ff       	call   c0012aad <loadACPITables(unsigned char*)>
c0012f19:	83 c4 10             	add    esp,0x10
c0012f1c:	a1 08 36 02 c0       	mov    eax,ds:0xc0023608
c0012f21:	83 ec 08             	sub    esp,0x8
c0012f24:	68 9a 0c 02 c0       	push   0xc0020c9a
c0012f29:	50                   	push   eax
c0012f2a:	e8 c3 fe ff ff       	call   c0012df2 <findDataTable(unsigned char*, char*)>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f36:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012f3b:	75 19                	jne    c0012f56 <scanMADT()+0xc8>
c0012f3d:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0012f42:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012f48:	83 e2 fe             	and    edx,0xfffffffe
c0012f4b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012f51:	e9 c8 02 00 00       	jmp    c001321e <scanMADT()+0x390>
c0012f56:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012f5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f65:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0012f69:	0f 87 af 02 00 00    	ja     c001321e <scanMADT()+0x390>
c0012f6f:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0012f77:	0f 87 a1 02 00 00    	ja     c001321e <scanMADT()+0x390>
c0012f7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f89:	8d 50 01             	lea    edx,[eax+0x1]
c0012f8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012f90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012f94:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012f98:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0012f9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fa0:	8d 50 01             	lea    edx,[eax+0x1]
c0012fa3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fa7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012fab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012faf:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0012fb3:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0012fb8:	0f 86 5f 02 00 00    	jbe    c001321d <scanMADT()+0x38f>
c0012fbe:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0012fc3:	75 57                	jne    c001301c <scanMADT()+0x18e>
c0012fc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc9:	8d 50 01             	lea    edx,[eax+0x1]
c0012fcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012fd0:	8a 15 40 37 02 c0    	mov    dl,BYTE PTR ds:0xc0023740
c0012fd6:	0f b6 d2             	movzx  edx,dl
c0012fd9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012fdd:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0012fe1:	88 82 80 37 02 c0    	mov    BYTE PTR [edx-0x3ffdc880],al
c0012fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012feb:	8d 50 01             	lea    edx,[eax+0x1]
c0012fee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0012ff2:	8a 15 40 37 02 c0    	mov    dl,BYTE PTR ds:0xc0023740
c0012ff8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012ffb:	88 0d 40 37 02 c0    	mov    BYTE PTR ds:0xc0023740,cl
c0013001:	0f b6 d2             	movzx  edx,dl
c0013004:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013008:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001300c:	88 82 60 37 02 c0    	mov    BYTE PTR [edx-0x3ffdc8a0],al
c0013012:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013017:	e9 ea 01 00 00       	jmp    c0013206 <scanMADT()+0x378>
c001301c:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013021:	0f 85 14 01 00 00    	jne    c001313b <scanMADT()+0x2ad>
c0013027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001302b:	8d 50 01             	lea    edx,[eax+0x1]
c001302e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013032:	8a 15 10 36 02 c0    	mov    dl,BYTE PTR ds:0xc0023610
c0013038:	0f b6 d2             	movzx  edx,dl
c001303b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001303f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013043:	88 82 20 36 02 c0    	mov    BYTE PTR [edx-0x3ffdc9e0],al
c0013049:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001304d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013055:	01 d0                	add    eax,edx
c0013057:	83 c0 2c             	add    eax,0x2c
c001305a:	8a 00                	mov    al,BYTE PTR [eax]
c001305c:	0f b6 d0             	movzx  edx,al
c001305f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013063:	8d 48 01             	lea    ecx,[eax+0x1]
c0013066:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001306a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001306e:	0f b6 c0             	movzx  eax,al
c0013071:	c1 e0 08             	shl    eax,0x8
c0013074:	89 d1                	mov    ecx,edx
c0013076:	09 c1                	or     ecx,eax
c0013078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001307c:	8d 50 02             	lea    edx,[eax+0x2]
c001307f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013083:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013087:	0f b6 c0             	movzx  eax,al
c001308a:	c1 e0 10             	shl    eax,0x10
c001308d:	09 c1                	or     ecx,eax
c001308f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013093:	8d 50 03             	lea    edx,[eax+0x3]
c0013096:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001309a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001309e:	0f b6 c0             	movzx  eax,al
c00130a1:	c1 e0 18             	shl    eax,0x18
c00130a4:	09 c1                	or     ecx,eax
c00130a6:	89 ca                	mov    edx,ecx
c00130a8:	a0 10 36 02 c0       	mov    al,ds:0xc0023610
c00130ad:	0f b6 c0             	movzx  eax,al
c00130b0:	89 14 85 40 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9c0],edx
c00130b7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00130bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00130c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130c4:	01 d0                	add    eax,edx
c00130c6:	83 c0 2c             	add    eax,0x2c
c00130c9:	8a 00                	mov    al,BYTE PTR [eax]
c00130cb:	0f b6 d0             	movzx  edx,al
c00130ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130d2:	8d 48 01             	lea    ecx,[eax+0x1]
c00130d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00130dd:	0f b6 c0             	movzx  eax,al
c00130e0:	c1 e0 08             	shl    eax,0x8
c00130e3:	89 d1                	mov    ecx,edx
c00130e5:	09 c1                	or     ecx,eax
c00130e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130eb:	8d 50 02             	lea    edx,[eax+0x2]
c00130ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00130f6:	0f b6 c0             	movzx  eax,al
c00130f9:	c1 e0 10             	shl    eax,0x10
c00130fc:	09 c1                	or     ecx,eax
c00130fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013102:	8d 50 03             	lea    edx,[eax+0x3]
c0013105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013109:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001310d:	0f b6 c0             	movzx  eax,al
c0013110:	c1 e0 18             	shl    eax,0x18
c0013113:	09 c1                	or     ecx,eax
c0013115:	89 ca                	mov    edx,ecx
c0013117:	a0 10 36 02 c0       	mov    al,ds:0xc0023610
c001311c:	0f b6 c0             	movzx  eax,al
c001311f:	89 14 85 c0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc940],edx
c0013126:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001312b:	a0 10 36 02 c0       	mov    al,ds:0xc0023610
c0013130:	40                   	inc    eax
c0013131:	a2 10 36 02 c0       	mov    ds:0xc0023610,al
c0013136:	e9 cb 00 00 00       	jmp    c0013206 <scanMADT()+0x378>
c001313b:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013140:	0f 85 a6 00 00 00    	jne    c00131ec <scanMADT()+0x35e>
c0013146:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001314a:	8d 50 01             	lea    edx,[eax+0x1]
c001314d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013151:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013155:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013159:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001315d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013161:	8d 50 01             	lea    edx,[eax+0x1]
c0013164:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013168:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001316c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013170:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013174:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001317c:	01 d0                	add    eax,edx
c001317e:	83 c0 2c             	add    eax,0x2c
c0013181:	8a 00                	mov    al,BYTE PTR [eax]
c0013183:	0f b6 d0             	movzx  edx,al
c0013186:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318a:	8d 48 01             	lea    ecx,[eax+0x1]
c001318d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013191:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013195:	0f b6 c0             	movzx  eax,al
c0013198:	c1 e0 08             	shl    eax,0x8
c001319b:	89 d1                	mov    ecx,edx
c001319d:	09 c1                	or     ecx,eax
c001319f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131a3:	8d 50 02             	lea    edx,[eax+0x2]
c00131a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131ae:	0f b6 c0             	movzx  eax,al
c00131b1:	c1 e0 10             	shl    eax,0x10
c00131b4:	09 c1                	or     ecx,eax
c00131b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ba:	8d 50 03             	lea    edx,[eax+0x3]
c00131bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131c1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00131c5:	0f b6 c0             	movzx  eax,al
c00131c8:	c1 e0 18             	shl    eax,0x18
c00131cb:	09 c8                	or     eax,ecx
c00131cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131d1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00131d6:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00131db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00131e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00131e4:	88 90 40 25 02 c0    	mov    BYTE PTR [eax-0x3ffddac0],dl
c00131ea:	eb 1a                	jmp    c0013206 <scanMADT()+0x378>
c00131ec:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00131f1:	75 07                	jne    c00131fa <scanMADT()+0x36c>
c00131f3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00131f8:	eb 0c                	jmp    c0013206 <scanMADT()+0x378>
c00131fa:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00131ff:	75 05                	jne    c0013206 <scanMADT()+0x378>
c0013201:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013206:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001320b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001320f:	01 d0                	add    eax,edx
c0013211:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013215:	e9 44 fd ff ff       	jmp    c0012f5e <scanMADT()+0xd0>
c001321a:	90                   	nop
c001321b:	eb 01                	jmp    c001321e <scanMADT()+0x390>
c001321d:	90                   	nop
c001321e:	83 c4 2c             	add    esp,0x2c
c0013221:	c3                   	ret    

c0013222 <ACPI::ACPI()>:
c0013222:	83 ec 0c             	sub    esp,0xc
c0013225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013229:	83 ec 08             	sub    esp,0x8
c001322c:	68 9f 0c 02 c0       	push   0xc0020c9f
c0013231:	50                   	push   eax
c0013232:	e8 a3 d1 ff ff       	call   c00103da <Device::Device(char const*)>
c0013237:	83 c4 10             	add    esp,0x10
c001323a:	ba 48 0e 02 c0       	mov    edx,0xc0020e48
c001323f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013243:	89 10                	mov    DWORD PTR [eax],edx
c0013245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013249:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013254:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001325e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013262:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001326c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013270:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013277:	e8 12 fc ff ff       	call   c0012e8e <scanMADT()>
c001327c:	90                   	nop
c001327d:	83 c4 0c             	add    esp,0xc
c0013280:	c3                   	ret    
c0013281:	90                   	nop

c0013282 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013282:	83 ec 2c             	sub    esp,0x2c
c0013285:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013289:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001328d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013291:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013295:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001329a:	88 d0                	mov    al,dl
c001329c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00132a0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00132a5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00132ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132b1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00132b7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00132bb:	0f 8d 97 00 00 00    	jge    c0013358 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00132c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132c9:	83 c2 2a             	add    edx,0x2a
c00132cc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00132d0:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00132d5:	75 78                	jne    c001334f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00132d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132df:	83 c2 2a             	add    edx,0x2a
c00132e2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00132e6:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00132ea:	75 63                	jne    c001334f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00132ec:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00132f1:	74 3a                	je     c001332d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00132f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00132f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132fb:	83 c2 2a             	add    edx,0x2a
c00132fe:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013302:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013306:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013309:	39 c2                	cmp    edx,eax
c001330b:	74 10                	je     c001331d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001330d:	83 ec 0c             	sub    esp,0xc
c0013310:	68 ac 0d 02 c0       	push   0xc0020dac
c0013315:	e8 2e 16 00 00       	call   c0014948 <Krnl::panic(char const*)>
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	83 ec 0c             	sub    esp,0xc
c0013320:	68 a4 0c 02 c0       	push   0xc0020ca4
c0013325:	e8 1e 16 00 00       	call   c0014948 <Krnl::panic(char const*)>
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013331:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013335:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013339:	83 c2 2a             	add    edx,0x2a
c001333c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013340:	8b 02                	mov    eax,DWORD PTR [edx]
c0013342:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013345:	89 01                	mov    DWORD PTR [ecx],eax
c0013347:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001334a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001334f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013353:	e9 55 ff ff ff       	jmp    c00132ad <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013358:	90                   	nop
c0013359:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001335d:	83 c4 2c             	add    esp,0x2c
c0013360:	c2 04 00             	ret    0x4
c0013363:	90                   	nop

c0013364 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013364:	56                   	push   esi
c0013365:	53                   	push   ebx
c0013366:	83 ec 14             	sub    esp,0x14
c0013369:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001336d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013371:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013375:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001337a:	88 c8                	mov    al,cl
c001337c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013380:	88 d0                	mov    al,dl
c0013382:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001338a:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013394:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001339a:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001339f:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00133a4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00133a9:	83 ec 04             	sub    esp,0x4
c00133ac:	56                   	push   esi
c00133ad:	53                   	push   ebx
c00133ae:	51                   	push   ecx
c00133af:	52                   	push   edx
c00133b0:	50                   	push   eax
c00133b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133b5:	68 dc 0d 02 c0       	push   0xc0020ddc
c00133ba:	e8 20 ba ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00133bf:	83 c4 20             	add    esp,0x20
c00133c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133c6:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00133cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133d0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00133d3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00133d7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00133db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133df:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00133e5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00133e9:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00133ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00133f0:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00133f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00133ff:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013403:	8d 48 01             	lea    ecx,[eax+0x1]
c0013406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001340a:	83 c2 2a             	add    edx,0x2a
c001340d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013415:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001341b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001341f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013422:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013426:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001342a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001342e:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013434:	8d 50 01             	lea    edx,[eax+0x1]
c0013437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001343b:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013445:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001344b:	3d 00 08 00 00       	cmp    eax,0x800
c0013450:	75 10                	jne    c0013462 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013452:	83 ec 0c             	sub    esp,0xc
c0013455:	68 b3 0c 02 c0       	push   0xc0020cb3
c001345a:	e8 e9 14 00 00       	call   c0014948 <Krnl::panic(char const*)>
c001345f:	83 c4 10             	add    esp,0x10
c0013462:	90                   	nop
c0013463:	83 c4 14             	add    esp,0x14
c0013466:	5b                   	pop    ebx
c0013467:	5e                   	pop    esi
c0013468:	c3                   	ret    
c0013469:	90                   	nop

c001346a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001346a:	b8 00 00 00 00       	mov    eax,0x0
c001346f:	c3                   	ret    

c0013470 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013470:	83 ec 1c             	sub    esp,0x1c
c0013473:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013477:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001347a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001347e:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0013483:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013488:	83 ec 08             	sub    esp,0x8
c001348b:	52                   	push   edx
c001348c:	50                   	push   eax
c001348d:	e8 a4 7d ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013499:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001349e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00134a3:	83 ec 04             	sub    esp,0x4
c00134a6:	6a 01                	push   0x1
c00134a8:	52                   	push   edx
c00134a9:	50                   	push   eax
c00134aa:	e8 8f 7e ff ff       	call   c000b33e <Computer::writeCMOS(unsigned char, unsigned char)>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	90                   	nop
c00134b3:	83 c4 1c             	add    esp,0x1c
c00134b6:	c3                   	ret    
c00134b7:	90                   	nop

c00134b8 <ACPI::open(int, int, void*)>:
c00134b8:	53                   	push   ebx
c00134b9:	83 ec 18             	sub    esp,0x18
c00134bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134c0:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00134c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134cb:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00134d1:	84 c0                	test   al,al
c00134d3:	74 60                	je     c0013535 <ACPI::open(int, int, void*)+0x7d>
c00134d5:	83 ec 0c             	sub    esp,0xc
c00134d8:	68 58 01 00 00       	push   0x158
c00134dd:	e8 0e b8 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00134e2:	83 c4 10             	add    esp,0x10
c00134e5:	89 c3                	mov    ebx,eax
c00134e7:	83 ec 0c             	sub    esp,0xc
c00134ea:	53                   	push   ebx
c00134eb:	e8 2c 79 00 00       	call   c001ae1c <PCI::PCI()>
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00134f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134fb:	83 ec 08             	sub    esp,0x8
c00134fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013502:	50                   	push   eax
c0013503:	e8 e2 cc ff ff       	call   c00101ea <Device::addChild(Device*)>
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001350f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013511:	83 c0 08             	add    eax,0x8
c0013514:	8b 00                	mov    eax,DWORD PTR [eax]
c0013516:	6a 00                	push   0x0
c0013518:	6a 00                	push   0x0
c001351a:	6a 00                	push   0x0
c001351c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013520:	ff d0                	call   eax
c0013522:	83 c4 10             	add    esp,0x10
c0013525:	83 ec 0c             	sub    esp,0xc
c0013528:	68 d0 0c 02 c0       	push   0xc0020cd0
c001352d:	e8 ad b8 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0013532:	83 c4 10             	add    esp,0x10
c0013535:	83 ec 0c             	sub    esp,0xc
c0013538:	68 db 0c 02 c0       	push   0xc0020cdb
c001353d:	e8 aa 30 00 00       	call   c00165ec <Thr::loadKernelSymbolTable(char const*)>
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	8b 1d e8 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022de8
c001354b:	83 ec 08             	sub    esp,0x8
c001354e:	6a 01                	push   0x1
c0013550:	68 f9 0c 02 c0       	push   0xc0020cf9
c0013555:	e8 54 3b 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	83 ec 08             	sub    esp,0x8
c0013560:	53                   	push   ebx
c0013561:	50                   	push   eax
c0013562:	e8 9a 3c 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	8b 1d e8 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022de8
c0013570:	83 ec 08             	sub    esp,0x8
c0013573:	6a 01                	push   0x1
c0013575:	68 16 0d 02 c0       	push   0xc0020d16
c001357a:	e8 2f 3b 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	83 ec 08             	sub    esp,0x8
c0013585:	53                   	push   ebx
c0013586:	50                   	push   eax
c0013587:	e8 75 3c 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c001358c:	83 c4 10             	add    esp,0x10
c001358f:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0013594:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001359a:	83 e0 04             	and    eax,0x4
c001359d:	84 c0                	test   al,al
c001359f:	74 59                	je     c00135fa <ACPI::open(int, int, void*)+0x142>
c00135a1:	8b 1d e8 2d 02 c0    	mov    ebx,DWORD PTR ds:0xc0022de8
c00135a7:	83 ec 08             	sub    esp,0x8
c00135aa:	6a 01                	push   0x1
c00135ac:	68 33 0d 02 c0       	push   0xc0020d33
c00135b1:	e8 f8 3a 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	83 ec 08             	sub    esp,0x8
c00135bc:	53                   	push   ebx
c00135bd:	50                   	push   eax
c00135be:	e8 3e 3c 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c00135c3:	83 c4 10             	add    esp,0x10
c00135c6:	a1 08 36 02 c0       	mov    eax,ds:0xc0023608
c00135cb:	83 ec 08             	sub    esp,0x8
c00135ce:	68 50 0d 02 c0       	push   0xc0020d50
c00135d3:	50                   	push   eax
c00135d4:	e8 19 f8 ff ff       	call   c0012df2 <findDataTable(unsigned char*, char*)>
c00135d9:	83 c4 10             	add    esp,0x10
c00135dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135e5:	74 13                	je     c00135fa <ACPI::open(int, int, void*)+0x142>
c00135e7:	83 ec 08             	sub    esp,0x8
c00135ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135f2:	e8 79 fe ff ff       	call   c0013470 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00135f7:	83 c4 10             	add    esp,0x10
c00135fa:	b8 00 00 00 00       	mov    eax,0x0
c00135ff:	83 c4 18             	add    esp,0x18
c0013602:	5b                   	pop    ebx
c0013603:	c3                   	ret    

c0013604 <ACPI::sleep()>:
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	a1 e0 33 02 c0       	mov    eax,ds:0xc00233e0
c001360c:	85 c0                	test   eax,eax
c001360e:	74 07                	je     c0013617 <ACPI::sleep()+0x13>
c0013610:	a1 e0 33 02 c0       	mov    eax,ds:0xc00233e0
c0013615:	ff d0                	call   eax
c0013617:	90                   	nop
c0013618:	83 c4 0c             	add    esp,0xc
c001361b:	c3                   	ret    

c001361c <CPU::close(int, int, void*)>:
c001361c:	31 c0                	xor    eax,eax
c001361e:	c3                   	ret    

c001361f <lookupAMDCPUName(unsigned char, unsigned char)>:
c001361f:	55                   	push   ebp
c0013620:	57                   	push   edi
c0013621:	56                   	push   esi
c0013622:	53                   	push   ebx
c0013623:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013627:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001362b:	89 ce                	mov    esi,ecx
c001362d:	89 d5                	mov    ebp,edx
c001362f:	80 f9 04             	cmp    cl,0x4
c0013632:	75 28                	jne    c001365c <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013634:	8d 42 f9             	lea    eax,[edx-0x7]
c0013637:	3c 03                	cmp    al,0x3
c0013639:	0f 86 63 01 00 00    	jbe    c00137a2 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001363f:	80 fa 03             	cmp    dl,0x3
c0013642:	0f 84 5a 01 00 00    	je     c00137a2 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013648:	8d 7a f2             	lea    edi,[edx-0xe]
c001364b:	b8 10 27 02 c0       	mov    eax,0xc0022710
c0013650:	89 fb                	mov    ebx,edi
c0013652:	80 fb 01             	cmp    bl,0x1
c0013655:	77 4e                	ja     c00136a5 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013657:	e9 52 01 00 00       	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001365c:	80 f9 05             	cmp    cl,0x5
c001365f:	75 4d                	jne    c00136ae <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013661:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0013666:	80 fa 03             	cmp    dl,0x3
c0013669:	0f 86 3f 01 00 00    	jbe    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001366f:	8d 7a fa             	lea    edi,[edx-0x6]
c0013672:	b8 30 27 02 c0       	mov    eax,0xc0022730
c0013677:	89 fb                	mov    ebx,edi
c0013679:	80 fb 01             	cmp    bl,0x1
c001367c:	0f 86 2c 01 00 00    	jbe    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013682:	b8 40 27 02 c0       	mov    eax,0xc0022740
c0013687:	80 fa 08             	cmp    dl,0x8
c001368a:	0f 84 1e 01 00 00    	je     c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013690:	89 d7                	mov    edi,edx
c0013692:	b8 50 27 02 c0       	mov    eax,0xc0022750
c0013697:	83 e7 fb             	and    edi,0xfffffffb
c001369a:	89 fb                	mov    ebx,edi
c001369c:	80 fb 09             	cmp    bl,0x9
c001369f:	0f 84 09 01 00 00    	je     c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00136a5:	31 c0                	xor    eax,eax
c00136a7:	89 eb                	mov    ebx,ebp
c00136a9:	0f b6 fb             	movzx  edi,bl
c00136ac:	eb 30                	jmp    c00136de <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00136ae:	31 c0                	xor    eax,eax
c00136b0:	80 f9 06             	cmp    cl,0x6
c00136b3:	75 f2                	jne    c00136a7 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00136b5:	80 fa 0a             	cmp    dl,0xa
c00136b8:	77 ed                	ja     c00136a7 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00136ba:	bf de 05 00 00       	mov    edi,0x5de
c00136bf:	0f a3 d7             	bt     edi,edx
c00136c2:	73 e3                	jae    c00136a7 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00136c4:	b8 60 27 02 c0       	mov    eax,0xc0022760
c00136c9:	e9 e0 00 00 00       	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00136ce:	39 c7                	cmp    edi,eax
c00136d0:	0f 84 d3 00 00 00    	je     c00137a9 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00136d6:	40                   	inc    eax
c00136d7:	3d d0 00 00 00       	cmp    eax,0xd0
c00136dc:	74 09                	je     c00136e7 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c00136de:	89 f3                	mov    ebx,esi
c00136e0:	80 fb 0f             	cmp    bl,0xf
c00136e3:	75 f1                	jne    c00136d6 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c00136e5:	eb e7                	jmp    c00136ce <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c00136e7:	80 f9 10             	cmp    cl,0x10
c00136ea:	75 14                	jne    c0013700 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c00136ec:	8d 42 fc             	lea    eax,[edx-0x4]
c00136ef:	83 e0 fb             	and    eax,0xfffffffb
c00136f2:	3c 02                	cmp    al,0x2
c00136f4:	76 34                	jbe    c001372a <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c00136f6:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c00136fb:	80 fa 02             	cmp    dl,0x2
c00136fe:	eb 24                	jmp    c0013724 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013700:	80 f9 11             	cmp    cl,0x11
c0013703:	75 13                	jne    c0013718 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013705:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c001370a:	80 fa 03             	cmp    dl,0x3
c001370d:	0f 85 9b 00 00 00    	jne    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013713:	e9 91 00 00 00       	jmp    c00137a9 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013718:	80 f9 12             	cmp    cl,0x12
c001371b:	75 14                	jne    c0013731 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c001371d:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c0013722:	fe ca                	dec    dl
c0013724:	0f 85 84 00 00 00    	jne    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001372a:	b8 80 27 02 c0       	mov    eax,0xc0022780
c001372f:	eb 7d                	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013731:	80 f9 14             	cmp    cl,0x14
c0013734:	75 12                	jne    c0013748 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013736:	4a                   	dec    edx
c0013737:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c001373c:	80 fa 01             	cmp    dl,0x1
c001373f:	77 6d                	ja     c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013741:	b8 90 27 02 c0       	mov    eax,0xc0022790
c0013746:	eb 66                	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013748:	80 f9 15             	cmp    cl,0x15
c001374b:	75 31                	jne    c001377e <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c001374d:	b8 a0 27 02 c0       	mov    eax,0xc00227a0
c0013752:	80 fa 01             	cmp    dl,0x1
c0013755:	74 57                	je     c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013757:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c001375c:	80 fa 13             	cmp    dl,0x13
c001375f:	76 0c                	jbe    c001376d <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013761:	80 fa 30             	cmp    dl,0x30
c0013764:	75 48                	jne    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013766:	b8 c0 27 02 c0       	mov    eax,0xc00227c0
c001376b:	eb 41                	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001376d:	b9 04 00 09 00       	mov    ecx,0x90004
c0013772:	0f a3 d1             	bt     ecx,edx
c0013775:	73 37                	jae    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013777:	b8 b0 27 02 c0       	mov    eax,0xc00227b0
c001377c:	eb 30                	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001377e:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c0013783:	80 f9 16             	cmp    cl,0x16
c0013786:	75 26                	jne    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013788:	b8 d0 27 02 c0       	mov    eax,0xc00227d0
c001378d:	84 d2                	test   dl,dl
c001378f:	74 1d                	je     c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013791:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c0013796:	80 fa 30             	cmp    dl,0x30
c0013799:	75 13                	jne    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001379b:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c00137a0:	eb 0c                	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137a2:	b8 00 27 02 c0       	mov    eax,0xc0022700
c00137a7:	eb 05                	jmp    c00137ae <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00137a9:	b8 70 27 02 c0       	mov    eax,0xc0022770
c00137ae:	5b                   	pop    ebx
c00137af:	5e                   	pop    esi
c00137b0:	5f                   	pop    edi
c00137b1:	5d                   	pop    ebp
c00137b2:	c3                   	ret    

c00137b3 <lookupIntelCPUName(unsigned char, unsigned char)>:
c00137b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00137b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137bb:	80 f9 04             	cmp    cl,0x4
c00137be:	75 6b                	jne    c001382b <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c00137c0:	b8 60 25 02 c0       	mov    eax,0xc0022560
c00137c5:	80 fa 01             	cmp    dl,0x1
c00137c8:	0f 86 92 02 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137ce:	b8 70 25 02 c0       	mov    eax,0xc0022570
c00137d3:	80 fa 02             	cmp    dl,0x2
c00137d6:	0f 84 84 02 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137dc:	b8 80 25 02 c0       	mov    eax,0xc0022580
c00137e1:	80 fa 03             	cmp    dl,0x3
c00137e4:	0f 84 76 02 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137ea:	b8 90 25 02 c0       	mov    eax,0xc0022590
c00137ef:	80 fa 04             	cmp    dl,0x4
c00137f2:	0f 84 68 02 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00137f8:	b8 a0 25 02 c0       	mov    eax,0xc00225a0
c00137fd:	80 fa 05             	cmp    dl,0x5
c0013800:	0f 84 5a 02 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013806:	b8 80 25 02 c0       	mov    eax,0xc0022580
c001380b:	80 fa 07             	cmp    dl,0x7
c001380e:	0f 84 4c 02 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013814:	83 ea 08             	sub    edx,0x8
c0013817:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c001381c:	80 fa 01             	cmp    dl,0x1
c001381f:	0f 87 3b 02 00 00    	ja     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013825:	b8 b0 25 02 c0       	mov    eax,0xc00225b0
c001382a:	c3                   	ret    
c001382b:	80 f9 05             	cmp    cl,0x5
c001382e:	75 45                	jne    c0013875 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013830:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013833:	b8 c0 25 02 c0       	mov    eax,0xc00225c0
c0013838:	80 f9 02             	cmp    cl,0x2
c001383b:	0f 86 1f 02 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013841:	80 fa 04             	cmp    dl,0x4
c0013844:	0f 84 f3 01 00 00    	je     c0013a3d <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c001384a:	80 fa 07             	cmp    dl,0x7
c001384d:	0f 84 0d 02 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013853:	b8 d0 25 02 c0       	mov    eax,0xc00225d0
c0013858:	80 fa 08             	cmp    dl,0x8
c001385b:	0f 84 ff 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013861:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c0013866:	80 fa 09             	cmp    dl,0x9
c0013869:	0f 85 f1 01 00 00    	jne    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001386f:	b8 e0 25 02 c0       	mov    eax,0xc00225e0
c0013874:	c3                   	ret    
c0013875:	80 f9 06             	cmp    cl,0x6
c0013878:	0f 85 85 01 00 00    	jne    c0013a03 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c001387e:	b8 f0 25 02 c0       	mov    eax,0xc00225f0
c0013883:	80 fa 01             	cmp    dl,0x1
c0013886:	0f 84 d4 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001388c:	8d 42 fb             	lea    eax,[edx-0x5]
c001388f:	3c 01                	cmp    al,0x1
c0013891:	0f 86 ac 01 00 00    	jbe    c0013a43 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013897:	80 fa 03             	cmp    dl,0x3
c001389a:	0f 84 a3 01 00 00    	je     c0013a43 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00138a0:	8d 4a f9             	lea    ecx,[edx-0x7]
c00138a3:	b8 10 26 02 c0       	mov    eax,0xc0022610
c00138a8:	80 f9 01             	cmp    cl,0x1
c00138ab:	0f 86 af 01 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138b1:	80 fa 09             	cmp    dl,0x9
c00138b4:	0f 84 8f 01 00 00    	je     c0013a49 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00138ba:	8d 4a f6             	lea    ecx,[edx-0xa]
c00138bd:	80 f9 01             	cmp    cl,0x1
c00138c0:	0f 86 9a 01 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138c6:	b8 20 26 02 c0       	mov    eax,0xc0022620
c00138cb:	80 fa 0d             	cmp    dl,0xd
c00138ce:	0f 84 8c 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138d4:	b8 30 26 02 c0       	mov    eax,0xc0022630
c00138d9:	80 fa 0e             	cmp    dl,0xe
c00138dc:	0f 84 7e 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138e2:	b8 40 26 02 c0       	mov    eax,0xc0022640
c00138e7:	80 fa 0f             	cmp    dl,0xf
c00138ea:	0f 84 70 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138f0:	b8 20 26 02 c0       	mov    eax,0xc0022620
c00138f5:	80 fa 15             	cmp    dl,0x15
c00138f8:	0f 84 62 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00138fe:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013901:	b8 40 26 02 c0       	mov    eax,0xc0022640
c0013906:	80 f9 01             	cmp    cl,0x1
c0013909:	0f 86 51 01 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001390f:	80 fa 1a             	cmp    dl,0x1a
c0013912:	0f 84 37 01 00 00    	je     c0013a4f <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013918:	80 fa 1c             	cmp    dl,0x1c
c001391b:	0f 84 34 01 00 00    	je     c0013a55 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013921:	80 fa 1d             	cmp    dl,0x1d
c0013924:	0f 84 36 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001392a:	b8 70 26 02 c0       	mov    eax,0xc0022670
c001392f:	80 fa 25             	cmp    dl,0x25
c0013932:	0f 84 28 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013938:	8d 4a da             	lea    ecx,[edx-0x26]
c001393b:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0013940:	80 f9 01             	cmp    cl,0x1
c0013943:	0f 86 17 01 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013949:	b8 80 26 02 c0       	mov    eax,0xc0022680
c001394e:	80 fa 2a             	cmp    dl,0x2a
c0013951:	0f 84 09 01 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013957:	b8 70 26 02 c0       	mov    eax,0xc0022670
c001395c:	80 fa 2c             	cmp    dl,0x2c
c001395f:	0f 84 fb 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013965:	b8 80 26 02 c0       	mov    eax,0xc0022680
c001396a:	80 fa 2d             	cmp    dl,0x2d
c001396d:	0f 84 ed 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013973:	b8 50 26 02 c0       	mov    eax,0xc0022650
c0013978:	80 fa 2e             	cmp    dl,0x2e
c001397b:	0f 84 df 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013981:	b8 70 26 02 c0       	mov    eax,0xc0022670
c0013986:	80 fa 2f             	cmp    dl,0x2f
c0013989:	0f 84 d1 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001398f:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013992:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0013997:	80 f9 01             	cmp    cl,0x1
c001399a:	0f 86 c0 00 00 00    	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139a0:	b8 90 26 02 c0       	mov    eax,0xc0022690
c00139a5:	80 fa 37             	cmp    dl,0x37
c00139a8:	0f 84 b2 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139ae:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c00139b3:	80 fa 3a             	cmp    dl,0x3a
c00139b6:	0f 84 a4 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139bc:	b8 b0 26 02 c0       	mov    eax,0xc00226b0
c00139c1:	80 fa 3c             	cmp    dl,0x3c
c00139c4:	0f 84 96 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139ca:	b8 c0 26 02 c0       	mov    eax,0xc00226c0
c00139cf:	80 fa 3d             	cmp    dl,0x3d
c00139d2:	0f 84 88 00 00 00    	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139d8:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c00139dd:	80 fa 3e             	cmp    dl,0x3e
c00139e0:	74 7e                	je     c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139e2:	8d 42 bb             	lea    eax,[edx-0x45]
c00139e5:	3c 01                	cmp    al,0x1
c00139e7:	76 72                	jbe    c0013a5b <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00139e9:	80 fa 3f             	cmp    dl,0x3f
c00139ec:	74 6d                	je     c0013a5b <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c00139ee:	80 fa 4a             	cmp    dl,0x4a
c00139f1:	74 0a                	je     c00139fd <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c00139f3:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c00139f8:	80 fa 4d             	cmp    dl,0x4d
c00139fb:	75 63                	jne    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00139fd:	b8 90 26 02 c0       	mov    eax,0xc0022690
c0013a02:	c3                   	ret    
c0013a03:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c0013a08:	80 f9 0b             	cmp    cl,0xb
c0013a0b:	75 0a                	jne    c0013a17 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013a0d:	fe ca                	dec    dl
c0013a0f:	75 4f                	jne    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a11:	b8 d0 26 02 c0       	mov    eax,0xc00226d0
c0013a16:	c3                   	ret    
c0013a17:	80 f9 0f             	cmp    cl,0xf
c0013a1a:	75 44                	jne    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a1c:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c0013a21:	80 fa 02             	cmp    dl,0x2
c0013a24:	76 3a                	jbe    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a26:	8d 42 fd             	lea    eax,[edx-0x3]
c0013a29:	3c 01                	cmp    al,0x1
c0013a2b:	76 0a                	jbe    c0013a37 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013a2d:	b8 c1 0f 02 c0       	mov    eax,0xc0020fc1
c0013a32:	80 fa 06             	cmp    dl,0x6
c0013a35:	75 29                	jne    c0013a60 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013a37:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c0013a3c:	c3                   	ret    
c0013a3d:	b8 d0 25 02 c0       	mov    eax,0xc00225d0
c0013a42:	c3                   	ret    
c0013a43:	b8 00 26 02 c0       	mov    eax,0xc0022600
c0013a48:	c3                   	ret    
c0013a49:	b8 20 26 02 c0       	mov    eax,0xc0022620
c0013a4e:	c3                   	ret    
c0013a4f:	b8 50 26 02 c0       	mov    eax,0xc0022650
c0013a54:	c3                   	ret    
c0013a55:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0013a5a:	c3                   	ret    
c0013a5b:	b8 b0 26 02 c0       	mov    eax,0xc00226b0
c0013a60:	c3                   	ret    

c0013a61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013a61:	60                   	pusha  
c0013a62:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a6e:	9c                   	pushf  
c0013a6f:	fa                   	cli    
c0013a70:	0f 09                	wbinvd 
c0013a72:	0f 30                	wrmsr  
c0013a74:	9d                   	popf   
c0013a75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a79:	89 02                	mov    DWORD PTR [edx],eax
c0013a7b:	61                   	popa   
c0013a7c:	c3                   	ret    

c0013a7d <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013a7d:	60                   	pusha  
c0013a7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013a82:	9c                   	pushf  
c0013a83:	fa                   	cli    
c0013a84:	0f 09                	wbinvd 
c0013a86:	31 c0                	xor    eax,eax
c0013a88:	31 d2                	xor    edx,edx
c0013a8a:	0f 32                	rdmsr  
c0013a8c:	9d                   	popf   
c0013a8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013a91:	89 02                	mov    DWORD PTR [edx],eax
c0013a93:	61                   	popa   
c0013a94:	c3                   	ret    

c0013a95 <AMD_K6_writeback(int, int, int)>:
c0013a95:	56                   	push   esi
c0013a96:	53                   	push   ebx
c0013a97:	83 ec 10             	sub    esp,0x10
c0013a9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a9e:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013aa3:	75 5d                	jne    c0013b02 <AMD_K6_writeback(int, int, int)+0x6d>
c0013aa5:	83 f8 08             	cmp    eax,0x8
c0013aa8:	75 09                	jne    c0013ab3 <AMD_K6_writeback(int, int, int)+0x1e>
c0013aaa:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013aaf:	7e 13                	jle    c0013ac4 <AMD_K6_writeback(int, int, int)+0x2f>
c0013ab1:	eb 30                	jmp    c0013ae3 <AMD_K6_writeback(int, int, int)+0x4e>
c0013ab3:	83 f8 06             	cmp    eax,0x6
c0013ab6:	7c 4a                	jl     c0013b02 <AMD_K6_writeback(int, int, int)+0x6d>
c0013ab8:	83 f8 07             	cmp    eax,0x7
c0013abb:	7e 07                	jle    c0013ac4 <AMD_K6_writeback(int, int, int)+0x2f>
c0013abd:	83 f8 09             	cmp    eax,0x9
c0013ac0:	74 21                	je     c0013ae3 <AMD_K6_writeback(int, int, int)+0x4e>
c0013ac2:	eb 3e                	jmp    c0013b02 <AMD_K6_writeback(int, int, int)+0x6d>
c0013ac4:	89 e6                	mov    esi,esp
c0013ac6:	8b 1d 24 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e24
c0013acc:	56                   	push   esi
c0013acd:	c1 eb 15             	shr    ebx,0x15
c0013ad0:	68 82 00 00 c0       	push   0xc0000082
c0013ad5:	83 e3 7e             	and    ebx,0x7e
c0013ad8:	e8 a0 ff ff ff       	call   c0013a7d <AMD_K6_read_msr(unsigned int, REGS*)>
c0013add:	56                   	push   esi
c0013ade:	6a 00                	push   0x0
c0013ae0:	53                   	push   ebx
c0013ae1:	eb 12                	jmp    c0013af5 <AMD_K6_writeback(int, int, int)+0x60>
c0013ae3:	89 e3                	mov    ebx,esp
c0013ae5:	53                   	push   ebx
c0013ae6:	68 82 00 00 c0       	push   0xc0000082
c0013aeb:	e8 8d ff ff ff       	call   c0013a7d <AMD_K6_read_msr(unsigned int, REGS*)>
c0013af0:	53                   	push   ebx
c0013af1:	6a 00                	push   0x0
c0013af3:	6a 00                	push   0x0
c0013af5:	68 82 00 00 c0       	push   0xc0000082
c0013afa:	e8 62 ff ff ff       	call   c0013a61 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013aff:	83 c4 18             	add    esp,0x18
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	5b                   	pop    ebx
c0013b06:	5e                   	pop    esi
c0013b07:	c3                   	ret    

c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013b08:	55                   	push   ebp
c0013b09:	57                   	push   edi
c0013b0a:	56                   	push   esi
c0013b0b:	53                   	push   ebx
c0013b0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b10:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b14:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013b18:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013b1c:	39 05 00 28 02 c0    	cmp    DWORD PTR ds:0xc0022800,eax
c0013b22:	75 23                	jne    c0013b47 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013b24:	a1 ac 37 02 c0       	mov    eax,ds:0xc00237ac
c0013b29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013b2d:	89 06                	mov    DWORD PTR [esi],eax
c0013b2f:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013b34:	89 07                	mov    DWORD PTR [edi],eax
c0013b36:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0013b3b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013b3e:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c0013b43:	89 02                	mov    DWORD PTR [edx],eax
c0013b45:	eb 3f                	jmp    c0013b86 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013b47:	31 c9                	xor    ecx,ecx
c0013b49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b4d:	0f a2                	cpuid  
c0013b4f:	89 06                	mov    DWORD PTR [esi],eax
c0013b51:	89 1f                	mov    DWORD PTR [edi],ebx
c0013b53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b57:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013b5a:	89 10                	mov    DWORD PTR [eax],edx
c0013b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b60:	a3 00 28 02 c0       	mov    ds:0xc0022800,eax
c0013b65:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b67:	a3 ac 37 02 c0       	mov    ds:0xc00237ac,eax
c0013b6c:	8b 07                	mov    eax,DWORD PTR [edi]
c0013b6e:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013b73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b76:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013b7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b81:	a3 a0 37 02 c0       	mov    ds:0xc00237a0,eax
c0013b86:	5b                   	pop    ebx
c0013b87:	5e                   	pop    esi
c0013b88:	5f                   	pop    edi
c0013b89:	5d                   	pop    ebp
c0013b8a:	c3                   	ret    

c0013b8b <cpuidCheckEDX(unsigned int)>:
c0013b8b:	83 ec 10             	sub    esp,0x10
c0013b8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013b92:	50                   	push   eax
c0013b93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013b97:	50                   	push   eax
c0013b98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013b9c:	50                   	push   eax
c0013b9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ba1:	50                   	push   eax
c0013ba2:	6a 01                	push   0x1
c0013ba4:	e8 5f ff ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ba9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bad:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013bb1:	0f 95 c0             	setne  al
c0013bb4:	83 c4 24             	add    esp,0x24
c0013bb7:	c3                   	ret    

c0013bb8 <cpuidCheckECX(unsigned int)>:
c0013bb8:	83 ec 10             	sub    esp,0x10
c0013bbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bbf:	50                   	push   eax
c0013bc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bc4:	50                   	push   eax
c0013bc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bc9:	50                   	push   eax
c0013bca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bce:	50                   	push   eax
c0013bcf:	6a 01                	push   0x1
c0013bd1:	e8 32 ff ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013bd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013bda:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013bde:	0f 95 c0             	setne  al
c0013be1:	83 c4 24             	add    esp,0x24
c0013be4:	c3                   	ret    

c0013be5 <cpuidCheckExtendedEBX(unsigned int)>:
c0013be5:	83 ec 10             	sub    esp,0x10
c0013be8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bec:	50                   	push   eax
c0013bed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bf1:	50                   	push   eax
c0013bf2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bf6:	50                   	push   eax
c0013bf7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013bfb:	50                   	push   eax
c0013bfc:	6a 07                	push   0x7
c0013bfe:	e8 05 ff ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c07:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013c0b:	0f 95 c0             	setne  al
c0013c0e:	83 c4 24             	add    esp,0x24
c0013c11:	c3                   	ret    

c0013c12 <cpuidCheckExtendedECX(unsigned int)>:
c0013c12:	83 ec 10             	sub    esp,0x10
c0013c15:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c19:	50                   	push   eax
c0013c1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c1e:	50                   	push   eax
c0013c1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c23:	50                   	push   eax
c0013c24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013c28:	50                   	push   eax
c0013c29:	6a 07                	push   0x7
c0013c2b:	e8 d8 fe ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c34:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013c38:	0f 95 c0             	setne  al
c0013c3b:	83 c4 24             	add    esp,0x24
c0013c3e:	c3                   	ret    

c0013c3f <getCPUNumber()>:
c0013c3f:	31 c0                	xor    eax,eax
c0013c41:	c3                   	ret    

c0013c42 <thisCPU()>:
c0013c42:	e8 f8 ff ff ff       	call   c0013c3f <getCPUNumber()>
c0013c47:	8b 15 e8 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022de8
c0013c4d:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013c54:	c3                   	ret    
c0013c55:	90                   	nop

c0013c56 <CPU::CPU()>:
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5d:	83 ec 08             	sub    esp,0x8
c0013c60:	68 c1 0f 02 c0       	push   0xc0020fc1
c0013c65:	50                   	push   eax
c0013c66:	e8 6f c7 ff ff       	call   c00103da <Device::Device(char const*)>
c0013c6b:	83 c4 10             	add    esp,0x10
c0013c6e:	ba 98 10 02 c0       	mov    edx,0xc0021098
c0013c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c77:	89 10                	mov    DWORD PTR [eax],edx
c0013c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c8b:	05 78 01 00 00       	add    eax,0x178
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	50                   	push   eax
c0013c94:	e8 8f 77 ff ff       	call   c000b428 <GDT::GDT()>
c0013c99:	83 c4 10             	add    esp,0x10
c0013c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca0:	05 7c 09 00 00       	add    eax,0x97c
c0013ca5:	83 ec 0c             	sub    esp,0xc
c0013ca8:	50                   	push   eax
c0013ca9:	e8 da 79 ff ff       	call   c000b688 <IDT::IDT()>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb5:	05 7c 11 00 00       	add    eax,0x117c
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	50                   	push   eax
c0013cbe:	e8 83 99 ff ff       	call   c000d646 <TSS::TSS()>
c0013cc3:	83 c4 10             	add    esp,0x10
c0013cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cca:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd5:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013cdf:	90                   	nop
c0013ce0:	83 c4 0c             	add    esp,0xc
c0013ce3:	c3                   	ret    

c0013ce4 <CPU::displayFeatures()>:
c0013ce4:	c3                   	ret    
c0013ce5:	90                   	nop

c0013ce6 <CPU::detectFeatures()>:
c0013ce6:	55                   	push   ebp
c0013ce7:	57                   	push   edi
c0013ce8:	56                   	push   esi
c0013ce9:	53                   	push   ebx
c0013cea:	83 ec 50             	sub    esp,0x50
c0013ced:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013cf1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013cfb:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013d02:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0013d08:	6a 0d                	push   0xd
c0013d0a:	6a 00                	push   0x0
c0013d0c:	57                   	push   edi
c0013d0d:	e8 f6 c8 fe ff       	call   c0000608 <memset>
c0013d12:	83 c4 10             	add    esp,0x10
c0013d15:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0013d1a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013d21:	0f 84 20 09 00 00    	je     c0014647 <CPU::detectFeatures()+0x961>
c0013d27:	83 ec 0c             	sub    esp,0xc
c0013d2a:	6a 10                	push   0x10
c0013d2c:	e8 5a fe ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013d31:	83 e0 01             	and    eax,0x1
c0013d34:	8d 14 00             	lea    edx,[eax+eax*1]
c0013d37:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d3d:	83 e0 fd             	and    eax,0xfffffffd
c0013d40:	09 d0                	or     eax,edx
c0013d42:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d48:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013d4f:	e8 37 fe ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013d54:	83 e0 01             	and    eax,0x1
c0013d57:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013d5e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d64:	83 e0 fb             	and    eax,0xfffffffb
c0013d67:	09 d0                	or     eax,edx
c0013d69:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d6f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013d76:	e8 10 fe ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013d7b:	83 e0 01             	and    eax,0x1
c0013d7e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013d85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013d8b:	83 e0 f7             	and    eax,0xfffffff7
c0013d8e:	09 d0                	or     eax,edx
c0013d90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013d96:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013d9d:	e8 e9 fd ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013da2:	83 e0 01             	and    eax,0x1
c0013da5:	c1 e0 04             	shl    eax,0x4
c0013da8:	88 c2                	mov    dl,al
c0013daa:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013db0:	83 e0 ef             	and    eax,0xffffffef
c0013db3:	09 d0                	or     eax,edx
c0013db5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013dbb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013dc2:	e8 c4 fd ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013dc7:	83 e0 01             	and    eax,0x1
c0013dca:	c1 e0 05             	shl    eax,0x5
c0013dcd:	88 c2                	mov    dl,al
c0013dcf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013dd5:	83 e0 df             	and    eax,0xffffffdf
c0013dd8:	09 d0                	or     eax,edx
c0013dda:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013de0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013de7:	e8 9f fd ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013dec:	83 e0 01             	and    eax,0x1
c0013def:	8d 14 00             	lea    edx,[eax+eax*1]
c0013df2:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013df8:	83 e0 fd             	and    eax,0xfffffffd
c0013dfb:	09 d0                	or     eax,edx
c0013dfd:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013e03:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013e0a:	e8 7c fd ff ff       	call   c0013b8b <cpuidCheckEDX(unsigned int)>
c0013e0f:	83 e0 01             	and    eax,0x1
c0013e12:	c1 e0 06             	shl    eax,0x6
c0013e15:	88 c2                	mov    dl,al
c0013e17:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013e1d:	83 e0 bf             	and    eax,0xffffffbf
c0013e20:	09 d0                	or     eax,edx
c0013e22:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013e28:	58                   	pop    eax
c0013e29:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013e2d:	56                   	push   esi
c0013e2e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0013e32:	55                   	push   ebp
c0013e33:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013e37:	50                   	push   eax
c0013e38:	8d 54 24 28          	lea    edx,[esp+0x28]
c0013e3c:	52                   	push   edx
c0013e3d:	6a 00                	push   0x0
c0013e3f:	e8 c4 fc ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013e44:	83 c4 1c             	add    esp,0x1c
c0013e47:	6a 04                	push   0x4
c0013e49:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013e4d:	50                   	push   eax
c0013e4e:	57                   	push   edi
c0013e4f:	e8 7e c7 fe ff       	call   c00005d2 <memcpy>
c0013e54:	83 c4 0c             	add    esp,0xc
c0013e57:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0013e5d:	6a 04                	push   0x4
c0013e5f:	56                   	push   esi
c0013e60:	50                   	push   eax
c0013e61:	e8 6c c7 fe ff       	call   c00005d2 <memcpy>
c0013e66:	83 c4 0c             	add    esp,0xc
c0013e69:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0013e6f:	6a 04                	push   0x4
c0013e71:	55                   	push   ebp
c0013e72:	50                   	push   eax
c0013e73:	e8 5a c7 fe ff       	call   c00005d2 <memcpy>
c0013e78:	58                   	pop    eax
c0013e79:	5a                   	pop    edx
c0013e7a:	68 6c 0e 02 c0       	push   0xc0020e6c
c0013e7f:	57                   	push   edi
c0013e80:	e8 73 c8 fe ff       	call   c00006f8 <strcmp>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	85 c0                	test   eax,eax
c0013e8a:	75 0f                	jne    c0013e9b <CPU::detectFeatures()+0x1b5>
c0013e8c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013e96:	e9 22 02 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013e9b:	50                   	push   eax
c0013e9c:	50                   	push   eax
c0013e9d:	68 79 0e 02 c0       	push   0xc0020e79
c0013ea2:	57                   	push   edi
c0013ea3:	e8 50 c8 fe ff       	call   c00006f8 <strcmp>
c0013ea8:	83 c4 10             	add    esp,0x10
c0013eab:	85 c0                	test   eax,eax
c0013ead:	74 dd                	je     c0013e8c <CPU::detectFeatures()+0x1a6>
c0013eaf:	51                   	push   ecx
c0013eb0:	51                   	push   ecx
c0013eb1:	68 86 0e 02 c0       	push   0xc0020e86
c0013eb6:	57                   	push   edi
c0013eb7:	e8 3c c8 fe ff       	call   c00006f8 <strcmp>
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	85 c0                	test   eax,eax
c0013ec1:	74 2a                	je     c0013eed <CPU::detectFeatures()+0x207>
c0013ec3:	52                   	push   edx
c0013ec4:	52                   	push   edx
c0013ec5:	68 93 0e 02 c0       	push   0xc0020e93
c0013eca:	57                   	push   edi
c0013ecb:	e8 28 c8 fe ff       	call   c00006f8 <strcmp>
c0013ed0:	83 c4 10             	add    esp,0x10
c0013ed3:	85 c0                	test   eax,eax
c0013ed5:	74 16                	je     c0013eed <CPU::detectFeatures()+0x207>
c0013ed7:	50                   	push   eax
c0013ed8:	50                   	push   eax
c0013ed9:	68 a0 0e 02 c0       	push   0xc0020ea0
c0013ede:	57                   	push   edi
c0013edf:	e8 14 c8 fe ff       	call   c00006f8 <strcmp>
c0013ee4:	83 c4 10             	add    esp,0x10
c0013ee7:	85 c0                	test   eax,eax
c0013ee9:	74 48                	je     c0013f33 <CPU::detectFeatures()+0x24d>
c0013eeb:	eb 0f                	jmp    c0013efc <CPU::detectFeatures()+0x216>
c0013eed:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013ef7:	e9 c1 01 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013efc:	50                   	push   eax
c0013efd:	50                   	push   eax
c0013efe:	68 ad 0e 02 c0       	push   0xc0020ead
c0013f03:	57                   	push   edi
c0013f04:	e8 ef c7 fe ff       	call   c00006f8 <strcmp>
c0013f09:	83 c4 10             	add    esp,0x10
c0013f0c:	85 c0                	test   eax,eax
c0013f0e:	74 23                	je     c0013f33 <CPU::detectFeatures()+0x24d>
c0013f10:	50                   	push   eax
c0013f11:	50                   	push   eax
c0013f12:	68 ba 0e 02 c0       	push   0xc0020eba
c0013f17:	57                   	push   edi
c0013f18:	e8 db c7 fe ff       	call   c00006f8 <strcmp>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	85 c0                	test   eax,eax
c0013f22:	75 1e                	jne    c0013f42 <CPU::detectFeatures()+0x25c>
c0013f24:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013f2e:	e9 8a 01 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013f33:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013f3d:	e9 7b 01 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013f42:	50                   	push   eax
c0013f43:	50                   	push   eax
c0013f44:	68 c7 0e 02 c0       	push   0xc0020ec7
c0013f49:	57                   	push   edi
c0013f4a:	e8 a9 c7 fe ff       	call   c00006f8 <strcmp>
c0013f4f:	83 c4 10             	add    esp,0x10
c0013f52:	85 c0                	test   eax,eax
c0013f54:	75 0f                	jne    c0013f65 <CPU::detectFeatures()+0x27f>
c0013f56:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013f60:	e9 58 01 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013f65:	50                   	push   eax
c0013f66:	50                   	push   eax
c0013f67:	68 86 0e 02 c0       	push   0xc0020e86
c0013f6c:	57                   	push   edi
c0013f6d:	e8 86 c7 fe ff       	call   c00006f8 <strcmp>
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	85 c0                	test   eax,eax
c0013f77:	75 0f                	jne    c0013f88 <CPU::detectFeatures()+0x2a2>
c0013f79:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013f83:	e9 35 01 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013f88:	50                   	push   eax
c0013f89:	50                   	push   eax
c0013f8a:	68 d4 0e 02 c0       	push   0xc0020ed4
c0013f8f:	57                   	push   edi
c0013f90:	e8 63 c7 fe ff       	call   c00006f8 <strcmp>
c0013f95:	83 c4 10             	add    esp,0x10
c0013f98:	85 c0                	test   eax,eax
c0013f9a:	75 0f                	jne    c0013fab <CPU::detectFeatures()+0x2c5>
c0013f9c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013fa6:	e9 12 01 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013fab:	51                   	push   ecx
c0013fac:	51                   	push   ecx
c0013fad:	68 e1 0e 02 c0       	push   0xc0020ee1
c0013fb2:	57                   	push   edi
c0013fb3:	e8 40 c7 fe ff       	call   c00006f8 <strcmp>
c0013fb8:	83 c4 10             	add    esp,0x10
c0013fbb:	85 c0                	test   eax,eax
c0013fbd:	75 0f                	jne    c0013fce <CPU::detectFeatures()+0x2e8>
c0013fbf:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013fc9:	e9 ef 00 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013fce:	52                   	push   edx
c0013fcf:	52                   	push   edx
c0013fd0:	68 ee 0e 02 c0       	push   0xc0020eee
c0013fd5:	57                   	push   edi
c0013fd6:	e8 1d c7 fe ff       	call   c00006f8 <strcmp>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	85 c0                	test   eax,eax
c0013fe0:	75 0f                	jne    c0013ff1 <CPU::detectFeatures()+0x30b>
c0013fe2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013fec:	e9 cc 00 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0013ff1:	50                   	push   eax
c0013ff2:	50                   	push   eax
c0013ff3:	68 fb 0e 02 c0       	push   0xc0020efb
c0013ff8:	57                   	push   edi
c0013ff9:	e8 fa c6 fe ff       	call   c00006f8 <strcmp>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	85 c0                	test   eax,eax
c0014003:	75 0f                	jne    c0014014 <CPU::detectFeatures()+0x32e>
c0014005:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001400f:	e9 a9 00 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0014014:	50                   	push   eax
c0014015:	50                   	push   eax
c0014016:	68 08 0f 02 c0       	push   0xc0020f08
c001401b:	57                   	push   edi
c001401c:	e8 d7 c6 fe ff       	call   c00006f8 <strcmp>
c0014021:	83 c4 10             	add    esp,0x10
c0014024:	85 c0                	test   eax,eax
c0014026:	75 0f                	jne    c0014037 <CPU::detectFeatures()+0x351>
c0014028:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014032:	e9 86 00 00 00       	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0014037:	50                   	push   eax
c0014038:	50                   	push   eax
c0014039:	68 15 0f 02 c0       	push   0xc0020f15
c001403e:	57                   	push   edi
c001403f:	e8 b4 c6 fe ff       	call   c00006f8 <strcmp>
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	85 c0                	test   eax,eax
c0014049:	75 0c                	jne    c0014057 <CPU::detectFeatures()+0x371>
c001404b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014055:	eb 66                	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0014057:	50                   	push   eax
c0014058:	50                   	push   eax
c0014059:	68 22 0f 02 c0       	push   0xc0020f22
c001405e:	57                   	push   edi
c001405f:	e8 94 c6 fe ff       	call   c00006f8 <strcmp>
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	85 c0                	test   eax,eax
c0014069:	75 0c                	jne    c0014077 <CPU::detectFeatures()+0x391>
c001406b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014075:	eb 46                	jmp    c00140bd <CPU::detectFeatures()+0x3d7>
c0014077:	50                   	push   eax
c0014078:	50                   	push   eax
c0014079:	68 2f 0f 02 c0       	push   0xc0020f2f
c001407e:	57                   	push   edi
c001407f:	e8 74 c6 fe ff       	call   c00006f8 <strcmp>
c0014084:	83 c4 10             	add    esp,0x10
c0014087:	85 c0                	test   eax,eax
c0014089:	74 e0                	je     c001406b <CPU::detectFeatures()+0x385>
c001408b:	50                   	push   eax
c001408c:	50                   	push   eax
c001408d:	68 3c 0f 02 c0       	push   0xc0020f3c
c0014092:	57                   	push   edi
c0014093:	e8 60 c6 fe ff       	call   c00006f8 <strcmp>
c0014098:	83 c4 10             	add    esp,0x10
c001409b:	85 c0                	test   eax,eax
c001409d:	74 cc                	je     c001406b <CPU::detectFeatures()+0x385>
c001409f:	51                   	push   ecx
c00140a0:	51                   	push   ecx
c00140a1:	68 49 0f 02 c0       	push   0xc0020f49
c00140a6:	57                   	push   edi
c00140a7:	e8 4c c6 fe ff       	call   c00006f8 <strcmp>
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	85 c0                	test   eax,eax
c00140b1:	74 b8                	je     c001406b <CPU::detectFeatures()+0x385>
c00140b3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00140bd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00140c2:	0f 86 be 00 00 00    	jbe    c0014186 <CPU::detectFeatures()+0x4a0>
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	68 80 00 00 00       	push   0x80
c00140d0:	e8 10 fb ff ff       	call   c0013be5 <cpuidCheckExtendedEBX(unsigned int)>
c00140d5:	83 e0 01             	and    eax,0x1
c00140d8:	c1 e0 06             	shl    eax,0x6
c00140db:	88 c2                	mov    dl,al
c00140dd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140e3:	83 e0 bf             	and    eax,0xffffffbf
c00140e6:	09 d0                	or     eax,edx
c00140e8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140ee:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00140f5:	e8 eb fa ff ff       	call   c0013be5 <cpuidCheckExtendedEBX(unsigned int)>
c00140fa:	83 e0 01             	and    eax,0x1
c00140fd:	c1 e0 04             	shl    eax,0x4
c0014100:	88 c2                	mov    dl,al
c0014102:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014108:	83 e0 ef             	and    eax,0xffffffef
c001410b:	09 d0                	or     eax,edx
c001410d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014113:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001411a:	e8 c6 fa ff ff       	call   c0013be5 <cpuidCheckExtendedEBX(unsigned int)>
c001411f:	c1 e0 07             	shl    eax,0x7
c0014122:	88 c2                	mov    dl,al
c0014124:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001412a:	83 e0 7f             	and    eax,0x7f
c001412d:	09 d0                	or     eax,edx
c001412f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014135:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001413c:	e8 d1 fa ff ff       	call   c0013c12 <cpuidCheckExtendedECX(unsigned int)>
c0014141:	83 e0 01             	and    eax,0x1
c0014144:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001414b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014151:	83 e0 f7             	and    eax,0xfffffff7
c0014154:	09 d0                	or     eax,edx
c0014156:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001415c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014163:	e8 aa fa ff ff       	call   c0013c12 <cpuidCheckExtendedECX(unsigned int)>
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	83 e0 01             	and    eax,0x1
c001416e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014175:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001417b:	83 e0 fb             	and    eax,0xfffffffb
c001417e:	09 d0                	or     eax,edx
c0014180:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014186:	83 ec 0c             	sub    esp,0xc
c0014189:	56                   	push   esi
c001418a:	55                   	push   ebp
c001418b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001418f:	57                   	push   edi
c0014190:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014194:	50                   	push   eax
c0014195:	6a 01                	push   0x1
c0014197:	e8 6c f9 ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001419c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00141a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00141a6:	88 ca                	mov    dl,cl
c00141a8:	83 e0 f0             	and    eax,0xfffffff0
c00141ab:	83 e2 0f             	and    edx,0xf
c00141ae:	09 d0                	or     eax,edx
c00141b0:	88 ca                	mov    dl,cl
c00141b2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00141b8:	c0 ea 04             	shr    dl,0x4
c00141bb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00141bf:	0f b6 c2             	movzx  eax,dl
c00141c2:	83 c4 20             	add    esp,0x20
c00141c5:	c1 e0 06             	shl    eax,0x6
c00141c8:	89 c5                	mov    ebp,eax
c00141ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141d0:	66 25 3f c0          	and    ax,0xc03f
c00141d4:	09 e8                	or     eax,ebp
c00141d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00141dd:	89 c8                	mov    eax,ecx
c00141df:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00141e5:	c1 e8 08             	shr    eax,0x8
c00141e8:	83 e2 3f             	and    edx,0x3f
c00141eb:	83 e0 0f             	and    eax,0xf
c00141ee:	89 c5                	mov    ebp,eax
c00141f0:	c1 e5 06             	shl    ebp,0x6
c00141f3:	09 d5                	or     ebp,edx
c00141f5:	89 ea                	mov    edx,ebp
c00141f7:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00141fd:	88 c2                	mov    dl,al
c00141ff:	c0 ea 02             	shr    dl,0x2
c0014202:	89 d5                	mov    ebp,edx
c0014204:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001420a:	83 e2 c0             	and    edx,0xffffffc0
c001420d:	09 d5                	or     ebp,edx
c001420f:	89 ea                	mov    edx,ebp
c0014211:	89 cd                	mov    ebp,ecx
c0014213:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014219:	c1 ed 0c             	shr    ebp,0xc
c001421c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014222:	83 e5 03             	and    ebp,0x3
c0014225:	83 e2 cf             	and    edx,0xffffffcf
c0014228:	c1 e5 04             	shl    ebp,0x4
c001422b:	09 d5                	or     ebp,edx
c001422d:	3c 06                	cmp    al,0x6
c001422f:	89 ea                	mov    edx,ebp
c0014231:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014237:	74 04                	je     c001423d <CPU::detectFeatures()+0x557>
c0014239:	3c 0f                	cmp    al,0xf
c001423b:	75 5c                	jne    c0014299 <CPU::detectFeatures()+0x5b3>
c001423d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014241:	89 cd                	mov    ebp,ecx
c0014243:	c1 ed 10             	shr    ebp,0x10
c0014246:	c1 e5 04             	shl    ebp,0x4
c0014249:	09 ea                	or     edx,ebp
c001424b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014251:	0f b6 d2             	movzx  edx,dl
c0014254:	66 81 e5 3f c0       	and    bp,0xc03f
c0014259:	c1 e2 06             	shl    edx,0x6
c001425c:	09 ea                	or     edx,ebp
c001425e:	3c 0f                	cmp    al,0xf
c0014260:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014267:	75 30                	jne    c0014299 <CPU::detectFeatures()+0x5b3>
c0014269:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001426f:	c1 e9 14             	shr    ecx,0x14
c0014272:	83 e0 3f             	and    eax,0x3f
c0014275:	83 c1 0f             	add    ecx,0xf
c0014278:	88 ca                	mov    dl,cl
c001427a:	c0 e9 02             	shr    cl,0x2
c001427d:	c1 e2 06             	shl    edx,0x6
c0014280:	09 d0                	or     eax,edx
c0014282:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0014288:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001428e:	83 e0 c0             	and    eax,0xffffffc0
c0014291:	09 c1                	or     ecx,eax
c0014293:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00142a3:	56                   	push   esi
c00142a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142a8:	50                   	push   eax
c00142a9:	57                   	push   edi
c00142aa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00142ae:	55                   	push   ebp
c00142af:	68 00 00 00 80       	push   0x80000000
c00142b4:	e8 4f f8 ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00142b9:	83 c4 20             	add    esp,0x20
c00142bc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00142c4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00142c8:	76 1e                	jbe    c00142e8 <CPU::detectFeatures()+0x602>
c00142ca:	83 ec 0c             	sub    esp,0xc
c00142cd:	56                   	push   esi
c00142ce:	50                   	push   eax
c00142cf:	57                   	push   edi
c00142d0:	55                   	push   ebp
c00142d1:	68 01 00 00 80       	push   0x80000001
c00142d6:	e8 2d f8 ff ff       	call   c0013b08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00142db:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00142e5:	83 c4 20             	add    esp,0x20
c00142e8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00142ee:	83 f8 01             	cmp    eax,0x1
c00142f1:	75 6f                	jne    c0014362 <CPU::detectFeatures()+0x67c>
c00142f3:	51                   	push   ecx
c00142f4:	51                   	push   ecx
c00142f5:	68 55 0f 02 c0       	push   0xc0020f55
c00142fa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00142fe:	56                   	push   esi
c00142ff:	e8 a3 c3 fe ff       	call   c00006a7 <strcpy>
c0014304:	5f                   	pop    edi
c0014305:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001430b:	5d                   	pop    ebp
c001430c:	66 c1 e8 06          	shr    ax,0x6
c0014310:	0f b6 c0             	movzx  eax,al
c0014313:	50                   	push   eax
c0014314:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001431a:	c1 e8 0e             	shr    eax,0xe
c001431d:	0f b6 c0             	movzx  eax,al
c0014320:	50                   	push   eax
c0014321:	e8 8d f4 ff ff       	call   c00137b3 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014326:	5a                   	pop    edx
c0014327:	59                   	pop    ecx
c0014328:	50                   	push   eax
c0014329:	56                   	push   esi
c001432a:	e8 2f c4 fe ff       	call   c000075e <strcat>
c001432f:	5f                   	pop    edi
c0014330:	5d                   	pop    ebp
c0014331:	56                   	push   esi
c0014332:	53                   	push   ebx
c0014333:	e8 94 c0 ff ff       	call   c00103cc <Device::setName(char const*)>
c0014338:	58                   	pop    eax
c0014339:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001433f:	5a                   	pop    edx
c0014340:	68 5c 0f 02 c0       	push   0xc0020f5c
c0014345:	50                   	push   eax
c0014346:	e8 ad c3 fe ff       	call   c00006f8 <strcmp>
c001434b:	83 c4 10             	add    esp,0x10
c001434e:	85 c0                	test   eax,eax
c0014350:	0f 85 73 03 00 00    	jne    c00146c9 <CPU::detectFeatures()+0x9e3>
c0014356:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001435d:	e9 67 03 00 00       	jmp    c00146c9 <CPU::detectFeatures()+0x9e3>
c0014362:	83 f8 02             	cmp    eax,0x2
c0014365:	0f 85 b5 00 00 00    	jne    c0014420 <CPU::detectFeatures()+0x73a>
c001436b:	57                   	push   edi
c001436c:	57                   	push   edi
c001436d:	68 6e 0f 02 c0       	push   0xc0020f6e
c0014372:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014376:	56                   	push   esi
c0014377:	e8 2b c3 fe ff       	call   c00006a7 <strcpy>
c001437c:	5d                   	pop    ebp
c001437d:	58                   	pop    eax
c001437e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014384:	66 c1 e8 06          	shr    ax,0x6
c0014388:	0f b6 c0             	movzx  eax,al
c001438b:	50                   	push   eax
c001438c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014392:	c1 e8 0e             	shr    eax,0xe
c0014395:	0f b6 c0             	movzx  eax,al
c0014398:	50                   	push   eax
c0014399:	e8 81 f2 ff ff       	call   c001361f <lookupAMDCPUName(unsigned char, unsigned char)>
c001439e:	5a                   	pop    edx
c001439f:	59                   	pop    ecx
c00143a0:	50                   	push   eax
c00143a1:	56                   	push   esi
c00143a2:	e8 b7 c3 fe ff       	call   c000075e <strcat>
c00143a7:	5f                   	pop    edi
c00143a8:	5d                   	pop    ebp
c00143a9:	56                   	push   esi
c00143aa:	53                   	push   ebx
c00143ab:	e8 1c c0 ff ff       	call   c00103cc <Device::setName(char const*)>
c00143b0:	58                   	pop    eax
c00143b1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00143b7:	5a                   	pop    edx
c00143b8:	68 73 0f 02 c0       	push   0xc0020f73
c00143bd:	50                   	push   eax
c00143be:	e8 35 c3 fe ff       	call   c00006f8 <strcmp>
c00143c3:	83 c4 10             	add    esp,0x10
c00143c6:	85 c0                	test   eax,eax
c00143c8:	75 20                	jne    c00143ea <CPU::detectFeatures()+0x704>
c00143ca:	8b 15 e8 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022de8
c00143d0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00143d6:	a8 01                	test   al,0x1
c00143d8:	74 10                	je     c00143ea <CPU::detectFeatures()+0x704>
c00143da:	83 e0 fe             	and    eax,0xfffffffe
c00143dd:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00143e3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00143ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00143f0:	c1 e8 0e             	shr    eax,0xe
c00143f3:	3c 05                	cmp    al,0x5
c00143f5:	0f 85 ce 02 00 00    	jne    c00146c9 <CPU::detectFeatures()+0x9e3>
c00143fb:	56                   	push   esi
c00143fc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014402:	83 e0 0f             	and    eax,0xf
c0014405:	50                   	push   eax
c0014406:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001440c:	66 c1 e8 06          	shr    ax,0x6
c0014410:	0f b6 c0             	movzx  eax,al
c0014413:	50                   	push   eax
c0014414:	6a 05                	push   0x5
c0014416:	e8 7a f6 ff ff       	call   c0013a95 <AMD_K6_writeback(int, int, int)>
c001441b:	e9 1f 02 00 00       	jmp    c001463f <CPU::detectFeatures()+0x959>
c0014420:	8d 50 fd             	lea    edx,[eax-0x3]
c0014423:	83 fa 01             	cmp    edx,0x1
c0014426:	76 09                	jbe    c0014431 <CPU::detectFeatures()+0x74b>
c0014428:	83 f8 06             	cmp    eax,0x6
c001442b:	0f 85 91 01 00 00    	jne    c00145c2 <CPU::detectFeatures()+0x8dc>
c0014431:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014437:	c1 ea 0e             	shr    edx,0xe
c001443a:	80 fa 05             	cmp    dl,0x5
c001443d:	75 7b                	jne    c00144ba <CPU::detectFeatures()+0x7d4>
c001443f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014445:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001444a:	66 81 fa 00 01       	cmp    dx,0x100
c001444f:	75 0c                	jne    c001445d <CPU::detectFeatures()+0x777>
c0014451:	51                   	push   ecx
c0014452:	51                   	push   ecx
c0014453:	68 7a 0f 02 c0       	push   0xc0020f7a
c0014458:	e9 dc 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c001445d:	66 81 fa 00 02       	cmp    dx,0x200
c0014462:	75 0c                	jne    c0014470 <CPU::detectFeatures()+0x78a>
c0014464:	52                   	push   edx
c0014465:	52                   	push   edx
c0014466:	68 8d 0f 02 c0       	push   0xc0020f8d
c001446b:	e9 c9 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014470:	66 81 fa 40 02       	cmp    dx,0x240
c0014475:	75 0c                	jne    c0014483 <CPU::detectFeatures()+0x79d>
c0014477:	50                   	push   eax
c0014478:	50                   	push   eax
c0014479:	68 9f 0f 02 c0       	push   0xc0020f9f
c001447e:	e9 b6 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014483:	83 f8 06             	cmp    eax,0x6
c0014486:	75 0c                	jne    c0014494 <CPU::detectFeatures()+0x7ae>
c0014488:	50                   	push   eax
c0014489:	50                   	push   eax
c001448a:	68 b1 0f 02 c0       	push   0xc0020fb1
c001448f:	e9 a5 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014494:	83 f8 04             	cmp    eax,0x4
c0014497:	75 0c                	jne    c00144a5 <CPU::detectFeatures()+0x7bf>
c0014499:	50                   	push   eax
c001449a:	50                   	push   eax
c001449b:	68 bd 0f 02 c0       	push   0xc0020fbd
c00144a0:	e9 94 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00144a5:	83 f8 03             	cmp    eax,0x3
c00144a8:	0f 85 1b 02 00 00    	jne    c00146c9 <CPU::detectFeatures()+0x9e3>
c00144ae:	50                   	push   eax
c00144af:	50                   	push   eax
c00144b0:	68 c5 0f 02 c0       	push   0xc0020fc5
c00144b5:	e9 7f 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00144ba:	80 fa 06             	cmp    dl,0x6
c00144bd:	0f 85 db 00 00 00    	jne    c001459e <CPU::detectFeatures()+0x8b8>
c00144c3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00144c9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00144ce:	66 81 fa 80 01       	cmp    dx,0x180
c00144d3:	75 0c                	jne    c00144e1 <CPU::detectFeatures()+0x7fb>
c00144d5:	50                   	push   eax
c00144d6:	50                   	push   eax
c00144d7:	68 d0 0f 02 c0       	push   0xc0020fd0
c00144dc:	e9 58 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00144e1:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00144e7:	66 f7 c1 80 ff       	test   cx,0xff80
c00144ec:	75 0c                	jne    c00144fa <CPU::detectFeatures()+0x814>
c00144ee:	50                   	push   eax
c00144ef:	50                   	push   eax
c00144f0:	68 e0 0f 02 c0       	push   0xc0020fe0
c00144f5:	e9 3f 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00144fa:	66 81 fa 40 02       	cmp    dx,0x240
c00144ff:	75 0c                	jne    c001450d <CPU::detectFeatures()+0x827>
c0014501:	55                   	push   ebp
c0014502:	55                   	push   ebp
c0014503:	68 e7 0f 02 c0       	push   0xc0020fe7
c0014508:	e9 2c 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c001450d:	66 81 fa 80 02       	cmp    dx,0x280
c0014512:	75 0c                	jne    c0014520 <CPU::detectFeatures()+0x83a>
c0014514:	57                   	push   edi
c0014515:	57                   	push   edi
c0014516:	68 f0 0f 02 c0       	push   0xc0020ff0
c001451b:	e9 19 01 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014520:	66 81 fa 40 03       	cmp    dx,0x340
c0014525:	74 ed                	je     c0014514 <CPU::detectFeatures()+0x82e>
c0014527:	66 81 fa c0 03       	cmp    dx,0x3c0
c001452c:	75 0c                	jne    c001453a <CPU::detectFeatures()+0x854>
c001452e:	56                   	push   esi
c001452f:	56                   	push   esi
c0014530:	68 f7 0f 02 c0       	push   0xc0020ff7
c0014535:	e9 ff 00 00 00       	jmp    c0014639 <CPU::detectFeatures()+0x953>
c001453a:	83 f8 06             	cmp    eax,0x6
c001453d:	0f 84 45 ff ff ff    	je     c0014488 <CPU::detectFeatures()+0x7a2>
c0014543:	83 f8 04             	cmp    eax,0x4
c0014546:	0f 84 4d ff ff ff    	je     c0014499 <CPU::detectFeatures()+0x7b3>
c001454c:	83 f8 03             	cmp    eax,0x3
c001454f:	0f 85 74 01 00 00    	jne    c00146c9 <CPU::detectFeatures()+0x9e3>
c0014555:	51                   	push   ecx
c0014556:	51                   	push   ecx
c0014557:	68 00 10 02 c0       	push   0xc0021000
c001455c:	53                   	push   ebx
c001455d:	e8 6a be ff ff       	call   c00103cc <Device::setName(char const*)>
c0014562:	b1 c1                	mov    cl,0xc1
c0014564:	88 c8                	mov    al,cl
c0014566:	e6 22                	out    0x22,al
c0014568:	e4 23                	in     al,0x23
c001456a:	88 c2                	mov    dl,al
c001456c:	88 c8                	mov    al,cl
c001456e:	e6 22                	out    0x22,al
c0014570:	88 d0                	mov    al,dl
c0014572:	83 c8 10             	or     eax,0x10
c0014575:	e6 23                	out    0x23,al
c0014577:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001457e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014581:	89 d0                	mov    eax,edx
c0014583:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014589:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001458d:	40                   	inc    eax
c001458e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014594:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014599:	e9 a1 00 00 00       	jmp    c001463f <CPU::detectFeatures()+0x959>
c001459e:	83 f8 06             	cmp    eax,0x6
c00145a1:	0f 84 e1 fe ff ff    	je     c0014488 <CPU::detectFeatures()+0x7a2>
c00145a7:	83 f8 04             	cmp    eax,0x4
c00145aa:	0f 84 e9 fe ff ff    	je     c0014499 <CPU::detectFeatures()+0x7b3>
c00145b0:	83 f8 03             	cmp    eax,0x3
c00145b3:	0f 85 10 01 00 00    	jne    c00146c9 <CPU::detectFeatures()+0x9e3>
c00145b9:	52                   	push   edx
c00145ba:	52                   	push   edx
c00145bb:	68 0b 10 02 c0       	push   0xc002100b
c00145c0:	eb 77                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00145c2:	83 f8 07             	cmp    eax,0x7
c00145c5:	75 09                	jne    c00145d0 <CPU::detectFeatures()+0x8ea>
c00145c7:	50                   	push   eax
c00145c8:	50                   	push   eax
c00145c9:	68 15 10 02 c0       	push   0xc0021015
c00145ce:	eb 69                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00145d0:	83 f8 0a             	cmp    eax,0xa
c00145d3:	75 09                	jne    c00145de <CPU::detectFeatures()+0x8f8>
c00145d5:	50                   	push   eax
c00145d6:	50                   	push   eax
c00145d7:	68 20 10 02 c0       	push   0xc0021020
c00145dc:	eb 5b                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00145de:	83 f8 0b             	cmp    eax,0xb
c00145e1:	75 09                	jne    c00145ec <CPU::detectFeatures()+0x906>
c00145e3:	50                   	push   eax
c00145e4:	50                   	push   eax
c00145e5:	68 28 10 02 c0       	push   0xc0021028
c00145ea:	eb 4d                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00145ec:	83 f8 08             	cmp    eax,0x8
c00145ef:	75 09                	jne    c00145fa <CPU::detectFeatures()+0x914>
c00145f1:	50                   	push   eax
c00145f2:	50                   	push   eax
c00145f3:	68 31 10 02 c0       	push   0xc0021031
c00145f8:	eb 3f                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c00145fa:	83 f8 09             	cmp    eax,0x9
c00145fd:	75 09                	jne    c0014608 <CPU::detectFeatures()+0x922>
c00145ff:	50                   	push   eax
c0014600:	50                   	push   eax
c0014601:	68 39 10 02 c0       	push   0xc0021039
c0014606:	eb 31                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014608:	83 f8 05             	cmp    eax,0x5
c001460b:	75 09                	jne    c0014616 <CPU::detectFeatures()+0x930>
c001460d:	50                   	push   eax
c001460e:	50                   	push   eax
c001460f:	68 41 10 02 c0       	push   0xc0021041
c0014614:	eb 23                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014616:	83 f8 0c             	cmp    eax,0xc
c0014619:	75 09                	jne    c0014624 <CPU::detectFeatures()+0x93e>
c001461b:	55                   	push   ebp
c001461c:	55                   	push   ebp
c001461d:	68 4f 10 02 c0       	push   0xc002104f
c0014622:	eb 15                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014624:	83 f8 0d             	cmp    eax,0xd
c0014627:	75 09                	jne    c0014632 <CPU::detectFeatures()+0x94c>
c0014629:	57                   	push   edi
c001462a:	57                   	push   edi
c001462b:	68 5a 10 02 c0       	push   0xc002105a
c0014630:	eb 07                	jmp    c0014639 <CPU::detectFeatures()+0x953>
c0014632:	56                   	push   esi
c0014633:	56                   	push   esi
c0014634:	68 6e 10 02 c0       	push   0xc002106e
c0014639:	53                   	push   ebx
c001463a:	e8 8d bd ff ff       	call   c00103cc <Device::setName(char const*)>
c001463f:	83 c4 10             	add    esp,0x10
c0014642:	e9 82 00 00 00       	jmp    c00146c9 <CPU::detectFeatures()+0x9e3>
c0014647:	51                   	push   ecx
c0014648:	51                   	push   ecx
c0014649:	68 ba 0e 02 c0       	push   0xc0020eba
c001464e:	57                   	push   edi
c001464f:	e8 53 c0 fe ff       	call   c00006a7 <strcpy>
c0014654:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001465e:	e8 1c bb fe ff       	call   c000017f <is486>
c0014663:	83 c4 10             	add    esp,0x10
c0014666:	85 c0                	test   eax,eax
c0014668:	74 2d                	je     c0014697 <CPU::detectFeatures()+0x9b1>
c001466a:	52                   	push   edx
c001466b:	52                   	push   edx
c001466c:	68 7a 10 02 c0       	push   0xc002107a
c0014671:	53                   	push   ebx
c0014672:	e8 55 bd ff ff       	call   c00103cc <Device::setName(char const*)>
c0014677:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001467e:	e8 43 a3 00 00       	call   c001e9c6 <CPU::readCR0()>
c0014683:	83 c4 10             	add    esp,0x10
c0014686:	83 e0 14             	and    eax,0x14
c0014689:	83 f8 04             	cmp    eax,0x4
c001468c:	75 1f                	jne    c00146ad <CPU::detectFeatures()+0x9c7>
c001468e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014695:	eb 32                	jmp    c00146c9 <CPU::detectFeatures()+0x9e3>
c0014697:	50                   	push   eax
c0014698:	50                   	push   eax
c0014699:	68 85 10 02 c0       	push   0xc0021085
c001469e:	53                   	push   ebx
c001469f:	e8 28 bd ff ff       	call   c00103cc <Device::setName(char const*)>
c00146a4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00146ab:	eb d1                	jmp    c001467e <CPU::detectFeatures()+0x998>
c00146ad:	e8 a8 ba fe ff       	call   c000015a <hasLegacyFPU>
c00146b2:	83 e0 01             	and    eax,0x1
c00146b5:	8d 14 00             	lea    edx,[eax+eax*1]
c00146b8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00146be:	83 e0 fd             	and    eax,0xfffffffd
c00146c1:	09 d0                	or     eax,edx
c00146c3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00146c9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00146d0:	83 c4 4c             	add    esp,0x4c
c00146d3:	5b                   	pop    ebx
c00146d4:	5e                   	pop    esi
c00146d5:	5f                   	pop    edi
c00146d6:	5d                   	pop    ebp
c00146d7:	c3                   	ret    

c00146d8 <CPU::setupSMEP()>:
c00146d8:	83 ec 0c             	sub    esp,0xc
c00146db:	e8 f8 a2 00 00       	call   c001e9d8 <CPU::readCR4()>
c00146e0:	0d 00 00 10 00       	or     eax,0x100000
c00146e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146e9:	83 c4 0c             	add    esp,0xc
c00146ec:	e9 02 a3 00 00       	jmp    c001e9f3 <CPU::writeCR4(unsigned long)>
c00146f1:	90                   	nop

c00146f2 <CPU::setupUMIP()>:
c00146f2:	83 ec 0c             	sub    esp,0xc
c00146f5:	e8 de a2 00 00       	call   c001e9d8 <CPU::readCR4()>
c00146fa:	80 cc 08             	or     ah,0x8
c00146fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014701:	83 c4 0c             	add    esp,0xc
c0014704:	e9 ea a2 00 00       	jmp    c001e9f3 <CPU::writeCR4(unsigned long)>
c0014709:	90                   	nop

c001470a <CPU::setupTSC()>:
c001470a:	83 ec 0c             	sub    esp,0xc
c001470d:	e8 c6 a2 00 00       	call   c001e9d8 <CPU::readCR4()>
c0014712:	83 c8 04             	or     eax,0x4
c0014715:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014719:	83 c4 0c             	add    esp,0xc
c001471c:	e9 d2 a2 00 00       	jmp    c001e9f3 <CPU::writeCR4(unsigned long)>
c0014721:	90                   	nop

c0014722 <CPU::setupLargePages()>:
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	e8 ae a2 00 00       	call   c001e9d8 <CPU::readCR4()>
c001472a:	83 c8 10             	or     eax,0x10
c001472d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014731:	83 c4 0c             	add    esp,0xc
c0014734:	e9 ba a2 00 00       	jmp    c001e9f3 <CPU::writeCR4(unsigned long)>
c0014739:	90                   	nop

c001473a <CPU::setupPAT()>:
c001473a:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001473f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014746:	74 2c                	je     c0014774 <CPU::setupPAT()+0x3a>
c0014748:	53                   	push   ebx
c0014749:	83 ec 10             	sub    esp,0x10
c001474c:	68 77 02 00 00       	push   0x277
c0014751:	50                   	push   eax
c0014752:	e8 6f 6a ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014757:	83 e2 f8             	and    edx,0xfffffff8
c001475a:	83 ca 01             	or     edx,0x1
c001475d:	52                   	push   edx
c001475e:	50                   	push   eax
c001475f:	68 77 02 00 00       	push   0x277
c0014764:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c001476a:	e8 83 6a ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c001476f:	83 c4 28             	add    esp,0x28
c0014772:	5b                   	pop    ebx
c0014773:	c3                   	ret    
c0014774:	c3                   	ret    
c0014775:	90                   	nop

c0014776 <CPU::setupMTRR()>:
c0014776:	c3                   	ret    
c0014777:	90                   	nop

c0014778 <CPU::setupGlobalPages()>:
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	e8 58 a2 00 00       	call   c001e9d8 <CPU::readCR4()>
c0014780:	0c 80                	or     al,0x80
c0014782:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014786:	83 c4 0c             	add    esp,0xc
c0014789:	e9 65 a2 00 00       	jmp    c001e9f3 <CPU::writeCR4(unsigned long)>

c001478e <CPU::allowUsermodeDataAccess()>:
c001478e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014792:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014799:	74 03                	je     c001479e <CPU::allowUsermodeDataAccess()+0x10>
c001479b:	0f 01 cb             	stac   
c001479e:	c3                   	ret    
c001479f:	90                   	nop

c00147a0 <CPU::prohibitUsermodeDataAccess()>:
c00147a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147a4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00147ab:	74 03                	je     c00147b0 <CPU::prohibitUsermodeDataAccess()+0x10>
c00147ad:	0f 01 ca             	clac   
c00147b0:	c3                   	ret    
c00147b1:	90                   	nop

c00147b2 <CPU::setupSMAP()>:
c00147b2:	53                   	push   ebx
c00147b3:	83 ec 08             	sub    esp,0x8
c00147b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147ba:	e8 19 a2 00 00       	call   c001e9d8 <CPU::readCR4()>
c00147bf:	83 ec 0c             	sub    esp,0xc
c00147c2:	0d 00 00 20 00       	or     eax,0x200000
c00147c7:	50                   	push   eax
c00147c8:	e8 26 a2 00 00       	call   c001e9f3 <CPU::writeCR4(unsigned long)>
c00147cd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00147d1:	83 c4 18             	add    esp,0x18
c00147d4:	5b                   	pop    ebx
c00147d5:	eb c9                	jmp    c00147a0 <CPU::prohibitUsermodeDataAccess()>
c00147d7:	90                   	nop

c00147d8 <CPU::setupFeatures()>:
c00147d8:	53                   	push   ebx
c00147d9:	83 ec 08             	sub    esp,0x8
c00147dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147e0:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00147e7:	74 0c                	je     c00147f5 <CPU::setupFeatures()+0x1d>
c00147e9:	83 ec 0c             	sub    esp,0xc
c00147ec:	53                   	push   ebx
c00147ed:	e8 e6 fe ff ff       	call   c00146d8 <CPU::setupSMEP()>
c00147f2:	83 c4 10             	add    esp,0x10
c00147f5:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00147fc:	74 0c                	je     c001480a <CPU::setupFeatures()+0x32>
c00147fe:	83 ec 0c             	sub    esp,0xc
c0014801:	53                   	push   ebx
c0014802:	e8 ab ff ff ff       	call   c00147b2 <CPU::setupSMAP()>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014811:	74 0c                	je     c001481f <CPU::setupFeatures()+0x47>
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	53                   	push   ebx
c0014817:	e8 d6 fe ff ff       	call   c00146f2 <CPU::setupUMIP()>
c001481c:	83 c4 10             	add    esp,0x10
c001481f:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014826:	74 0c                	je     c0014834 <CPU::setupFeatures()+0x5c>
c0014828:	83 ec 0c             	sub    esp,0xc
c001482b:	53                   	push   ebx
c001482c:	e8 d9 fe ff ff       	call   c001470a <CPU::setupTSC()>
c0014831:	83 c4 10             	add    esp,0x10
c0014834:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001483b:	74 0c                	je     c0014849 <CPU::setupFeatures()+0x71>
c001483d:	83 ec 0c             	sub    esp,0xc
c0014840:	53                   	push   ebx
c0014841:	e8 dc fe ff ff       	call   c0014722 <CPU::setupLargePages()>
c0014846:	83 c4 10             	add    esp,0x10
c0014849:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014850:	74 0c                	je     c001485e <CPU::setupFeatures()+0x86>
c0014852:	83 ec 0c             	sub    esp,0xc
c0014855:	53                   	push   ebx
c0014856:	e8 1d ff ff ff       	call   c0014778 <CPU::setupGlobalPages()>
c001485b:	83 c4 10             	add    esp,0x10
c001485e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014865:	74 0d                	je     c0014874 <CPU::setupFeatures()+0x9c>
c0014867:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001486b:	83 c4 08             	add    esp,0x8
c001486e:	5b                   	pop    ebx
c001486f:	e9 c6 fe ff ff       	jmp    c001473a <CPU::setupPAT()>
c0014874:	83 c4 08             	add    esp,0x8
c0014877:	5b                   	pop    ebx
c0014878:	c3                   	ret    
c0014879:	90                   	nop

c001487a <CPU::open(int, int, void*)>:
c001487a:	57                   	push   edi
c001487b:	56                   	push   esi
c001487c:	53                   	push   ebx
c001487d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014881:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014885:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001488b:	83 ec 0c             	sub    esp,0xc
c001488e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014894:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001489a:	50                   	push   eax
c001489b:	e8 04 6c ff ff       	call   c000b4a4 <GDT::setup()>
c00148a0:	83 c4 0c             	add    esp,0xc
c00148a3:	6a 00                	push   0x0
c00148a5:	68 ef be ad de       	push   0xdeadbeef
c00148aa:	57                   	push   edi
c00148ab:	e8 d6 8d ff ff       	call   c000d686 <TSS::setup(unsigned long, unsigned long)>
c00148b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148b3:	e8 ae 8d ff ff       	call   c000d666 <TSS::flush()>
c00148b8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00148be:	89 04 24             	mov    DWORD PTR [esp],eax
c00148c1:	e8 38 6e ff ff       	call   c000b6fe <IDT::setup()>
c00148c6:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00148cd:	e8 18 a1 00 00       	call   c001e9ea <CPU::writeDR7(unsigned long)>
c00148d2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00148dc:	e8 e1 78 ff ff       	call   c000c1c2 <Phys::allocatePage()>
c00148e1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00148e7:	89 30                	mov    DWORD PTR [eax],esi
c00148e9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00148ef:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00148f2:	58                   	pop    eax
c00148f3:	5a                   	pop    edx
c00148f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00148fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148fe:	e8 63 9b ff ff       	call   c000e466 <VAS::setCPUSpecific(unsigned long)>
c0014903:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014906:	e8 db f3 ff ff       	call   c0013ce6 <CPU::detectFeatures()>
c001490b:	e8 14 c8 ff ff       	call   c0011124 <setupInterruptController()>
c0014910:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014916:	a1 00 2e 02 c0       	mov    eax,ds:0xc0022e00
c001491b:	83 e0 10             	and    eax,0x10
c001491e:	83 f8 01             	cmp    eax,0x1
c0014921:	19 c0                	sbb    eax,eax
c0014923:	83 e0 46             	and    eax,0x46
c0014926:	83 c0 1e             	add    eax,0x1e
c0014929:	89 04 24             	mov    DWORD PTR [esp],eax
c001492c:	e8 db d9 ff ff       	call   c001230c <setupTimer(int)>
c0014931:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014937:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001493a:	e8 99 fe ff ff       	call   c00147d8 <CPU::setupFeatures()>
c001493f:	83 c4 10             	add    esp,0x10
c0014942:	31 c0                	xor    eax,eax
c0014944:	5b                   	pop    ebx
c0014945:	5e                   	pop    esi
c0014946:	5f                   	pop    edi
c0014947:	c3                   	ret    

c0014948 <Krnl::panic(char const*)>:
c0014948:	55                   	push   ebp
c0014949:	89 e5                	mov    ebp,esp
c001494b:	53                   	push   ebx
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014952:	fa                   	cli    
c0014953:	c6 05 b0 37 02 c0 01 	mov    BYTE PTR ds:0xc00237b0,0x1
c001495a:	53                   	push   ebx
c001495b:	c6 05 20 22 02 c0 00 	mov    BYTE PTR ds:0xc0022220,0x0
c0014962:	68 bc 10 02 c0       	push   0xc00210bc
c0014967:	e8 73 a4 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001496c:	58                   	pop    eax
c001496d:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014978:	e8 4a 85 ff ff       	call   c000cec7 <setActiveTerminal(VgaText*)>
c001497d:	83 c4 0c             	add    esp,0xc
c0014980:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014985:	6a 01                	push   0x1
c0014987:	6a 0f                	push   0xf
c0014989:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498f:	e8 72 7f ff ff       	call   c000c906 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014994:	5a                   	pop    edx
c0014995:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c001499a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a0:	e8 c3 87 ff ff       	call   c000d168 <VgaText::clearScreen()>
c00149a5:	59                   	pop    ecx
c00149a6:	58                   	pop    eax
c00149a7:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c00149ac:	68 d5 10 02 c0       	push   0xc00210d5
c00149b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b7:	e8 2a 89 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c00149bc:	58                   	pop    eax
c00149bd:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c00149c2:	5a                   	pop    edx
c00149c3:	68 74 11 02 c0       	push   0xc0021174
c00149c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149ce:	e8 13 89 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c00149d3:	59                   	pop    ecx
c00149d4:	58                   	pop    eax
c00149d5:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c00149da:	68 f1 10 02 c0       	push   0xc00210f1
c00149df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e5:	e8 fc 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c00149ea:	58                   	pop    eax
c00149eb:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c00149f0:	5a                   	pop    edx
c00149f1:	53                   	push   ebx
c00149f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f8:	e8 e9 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c00149fd:	59                   	pop    ecx
c00149fe:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a03:	5b                   	pop    ebx
c0014a04:	68 11 11 02 c0       	push   0xc0021111
c0014a09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0f:	e8 d2 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014a14:	58                   	pop    eax
c0014a15:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a1a:	5a                   	pop    edx
c0014a1b:	68 b0 11 02 c0       	push   0xc00211b0
c0014a20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a26:	e8 bb 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014a2b:	59                   	pop    ecx
c0014a2c:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a31:	5b                   	pop    ebx
c0014a32:	68 f1 10 02 c0       	push   0xc00210f1
c0014a37:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3d:	e8 a4 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014a42:	58                   	pop    eax
c0014a43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a48:	5a                   	pop    edx
c0014a49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a4c:	83 c0 0c             	add    eax,0xc
c0014a4f:	50                   	push   eax
c0014a50:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a5b:	e8 86 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014a60:	59                   	pop    ecx
c0014a61:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a66:	5b                   	pop    ebx
c0014a67:	68 10 11 02 c0       	push   0xc0021110
c0014a6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a72:	e8 6f 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014a77:	58                   	pop    eax
c0014a78:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a7d:	5a                   	pop    edx
c0014a7e:	68 dc 11 02 c0       	push   0xc00211dc
c0014a83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a89:	e8 58 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014a8e:	59                   	pop    ecx
c0014a8f:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014a94:	5b                   	pop    ebx
c0014a95:	68 1c 12 02 c0       	push   0xc002121c
c0014a9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa0:	e8 41 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014aa5:	58                   	pop    eax
c0014aa6:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014aab:	5a                   	pop    edx
c0014aac:	68 fc 10 02 c0       	push   0xc00210fc
c0014ab1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ab7:	e8 2a 88 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014abc:	59                   	pop    ecx
c0014abd:	5b                   	pop    ebx
c0014abe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014ac1:	68 14 11 02 c0       	push   0xc0021114
c0014ac6:	e8 14 a3 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0014acb:	58                   	pop    eax
c0014acc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014acf:	5a                   	pop    edx
c0014ad0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014ad3:	68 1d 11 02 c0       	push   0xc002111d
c0014ad8:	e8 02 a3 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0014add:	59                   	pop    ecx
c0014ade:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ae1:	5b                   	pop    ebx
c0014ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ae4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014ae7:	68 59 09 02 c0       	push   0xc0020959
c0014aec:	e8 ee a2 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0014af1:	58                   	pop    eax
c0014af2:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014af7:	5a                   	pop    edx
c0014af8:	68 60 12 02 c0       	push   0xc0021260
c0014afd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b03:	e8 de 87 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014b08:	59                   	pop    ecx
c0014b09:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b0e:	5b                   	pop    ebx
c0014b0f:	68 26 11 02 c0       	push   0xc0021126
c0014b14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1a:	e8 c7 87 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014b1f:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b24:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014b2a:	e8 97 9e 00 00       	call   c001e9c6 <CPU::readCR0()>
c0014b2f:	5a                   	pop    edx
c0014b30:	59                   	pop    ecx
c0014b31:	50                   	push   eax
c0014b32:	53                   	push   ebx
c0014b33:	e8 d4 87 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014b38:	5b                   	pop    ebx
c0014b39:	58                   	pop    eax
c0014b3a:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b3f:	68 30 11 02 c0       	push   0xc0021130
c0014b44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4a:	e8 97 87 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014b4f:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b54:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014b5a:	e8 9d 9e 00 00       	call   c001e9fc <CPU::readCR2()>
c0014b5f:	5a                   	pop    edx
c0014b60:	59                   	pop    ecx
c0014b61:	50                   	push   eax
c0014b62:	53                   	push   ebx
c0014b63:	e8 a4 87 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014b68:	5b                   	pop    ebx
c0014b69:	58                   	pop    eax
c0014b6a:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b6f:	68 3a 11 02 c0       	push   0xc002113a
c0014b74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7a:	e8 67 87 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014b7f:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b84:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014b8a:	e8 16 98 00 00       	call   c001e3a5 <CPU::readCR3()>
c0014b8f:	5a                   	pop    edx
c0014b90:	59                   	pop    ecx
c0014b91:	50                   	push   eax
c0014b92:	53                   	push   ebx
c0014b93:	e8 74 87 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014b98:	5b                   	pop    ebx
c0014b99:	58                   	pop    eax
c0014b9a:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014b9f:	68 4d 11 02 c0       	push   0xc002114d
c0014ba4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014baa:	e8 37 87 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014baf:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014bb4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014bba:	e8 19 9e 00 00       	call   c001e9d8 <CPU::readCR4()>
c0014bbf:	5a                   	pop    edx
c0014bc0:	59                   	pop    ecx
c0014bc1:	50                   	push   eax
c0014bc2:	53                   	push   ebx
c0014bc3:	e8 44 87 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014bc8:	5b                   	pop    ebx
c0014bc9:	58                   	pop    eax
c0014bca:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014bcf:	68 57 11 02 c0       	push   0xc0021157
c0014bd4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bda:	e8 07 87 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014bdf:	5a                   	pop    edx
c0014be0:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014be5:	59                   	pop    ecx
c0014be6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014bec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014bef:	50                   	push   eax
c0014bf0:	e8 17 87 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014bf5:	5b                   	pop    ebx
c0014bf6:	58                   	pop    eax
c0014bf7:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014bfc:	68 6e 11 02 c0       	push   0xc002116e
c0014c01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c07:	e8 da 86 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014c0c:	5a                   	pop    edx
c0014c0d:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014c12:	59                   	pop    ecx
c0014c13:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014c19:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c1c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014c1f:	50                   	push   eax
c0014c20:	e8 e7 86 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014c25:	5b                   	pop    ebx
c0014c26:	58                   	pop    eax
c0014c27:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014c2c:	68 6e 11 02 c0       	push   0xc002116e
c0014c31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c37:	e8 aa 86 ff ff       	call   c000d2e6 <VgaText::puts(char const*)>
c0014c3c:	59                   	pop    ecx
c0014c3d:	a1 b4 41 02 c0       	mov    eax,ds:0xc00241b4
c0014c42:	5b                   	pop    ebx
c0014c43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014c49:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c4c:	8b 12                	mov    edx,DWORD PTR [edx]
c0014c4e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014c51:	50                   	push   eax
c0014c52:	e8 b5 86 ff ff       	call   c000d30c <VgaText::putx(unsigned int)>
c0014c57:	83 c4 10             	add    esp,0x10
c0014c5a:	b2 fe                	mov    dl,0xfe
c0014c5c:	e4 60                	in     al,0x60
c0014c5e:	3c 1c                	cmp    al,0x1c
c0014c60:	74 04                	je     c0014c66 <Krnl::panic(char const*)+0x31e>
c0014c62:	3c 5a                	cmp    al,0x5a
c0014c64:	75 f6                	jne    c0014c5c <Krnl::panic(char const*)+0x314>
c0014c66:	e4 64                	in     al,0x64
c0014c68:	a8 02                	test   al,0x2
c0014c6a:	75 fa                	jne    c0014c66 <Krnl::panic(char const*)+0x31e>
c0014c6c:	88 d0                	mov    al,dl
c0014c6e:	e6 64                	out    0x64,al
c0014c70:	fa                   	cli    
c0014c71:	f4                   	hlt    
c0014c72:	eb e8                	jmp    c0014c5c <Krnl::panic(char const*)+0x314>

c0014c74 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c74:	55                   	push   ebp
c0014c75:	57                   	push   edi
c0014c76:	56                   	push   esi
c0014c77:	53                   	push   ebx
c0014c78:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c7e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c85:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c87:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c8a:	80 fb 40             	cmp    bl,0x40
c0014c8d:	75 1b                	jne    c0014caa <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c8f:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c91:	84 d2                	test   dl,dl
c0014c93:	0f 84 f1 00 00 00    	je     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c99:	8d 46 01             	lea    eax,[esi+0x1]
c0014c9c:	80 fa 3a             	cmp    dl,0x3a
c0014c9f:	74 04                	je     c0014ca5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014ca1:	89 c6                	mov    esi,eax
c0014ca3:	eb ea                	jmp    c0014c8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014ca5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014ca8:	89 c6                	mov    esi,eax
c0014caa:	50                   	push   eax
c0014cab:	6a 40                	push   0x40
c0014cad:	6a 00                	push   0x0
c0014caf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014cb3:	50                   	push   eax
c0014cb4:	e8 4f b9 fe ff       	call   c0000608 <memset>
c0014cb9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cc0:	31 c0                	xor    eax,eax
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cc7:	84 c9                	test   cl,cl
c0014cc9:	0f 84 bb 00 00 00    	je     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ccf:	3d c7 00 00 00       	cmp    eax,0xc7
c0014cd4:	0f 8f b0 00 00 00    	jg     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cda:	80 f9 0a             	cmp    cl,0xa
c0014cdd:	0f 85 98 00 00 00    	jne    c0014d7b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014ce3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014ce8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cec:	a8 df                	test   al,0xdf
c0014cee:	0f 94 c1             	sete   cl
c0014cf1:	3c 23                	cmp    al,0x23
c0014cf3:	0f 94 c2             	sete   dl
c0014cf6:	08 d1                	or     cl,dl
c0014cf8:	75 4a                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cfa:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cfd:	80 fa 01             	cmp    dl,0x1
c0014d00:	76 42                	jbe    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d02:	3c 5b                	cmp    al,0x5b
c0014d04:	75 42                	jne    c0014d48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d06:	80 fb 40             	cmp    bl,0x40
c0014d09:	75 39                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d0b:	83 ec 0c             	sub    esp,0xc
c0014d0e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d12:	52                   	push   edx
c0014d13:	e8 0d b9 fe ff       	call   c0000625 <strlen>
c0014d18:	83 c4 10             	add    esp,0x10
c0014d1b:	83 f8 3f             	cmp    eax,0x3f
c0014d1e:	77 6a                	ja     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d20:	50                   	push   eax
c0014d21:	50                   	push   eax
c0014d22:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d26:	52                   	push   edx
c0014d27:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d2b:	52                   	push   edx
c0014d2c:	e8 76 b9 fe ff       	call   c00006a7 <strcpy>
c0014d31:	58                   	pop    eax
c0014d32:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d36:	52                   	push   edx
c0014d37:	e8 e9 b8 fe ff       	call   c0000625 <strlen>
c0014d3c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	31 d2                	xor    edx,edx
c0014d46:	eb 3a                	jmp    c0014d82 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d48:	80 fb 40             	cmp    bl,0x40
c0014d4b:	74 06                	je     c0014d53 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d4d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d51:	eb 20                	jmp    c0014d73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d53:	50                   	push   eax
c0014d54:	50                   	push   eax
c0014d55:	55                   	push   ebp
c0014d56:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d5a:	50                   	push   eax
c0014d5b:	e8 98 b9 fe ff       	call   c00006f8 <strcmp>
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	85 c0                	test   eax,eax
c0014d65:	75 dd                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d67:	eb e4                	jmp    c0014d4d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d69:	8d 50 01             	lea    edx,[eax+0x1]
c0014d6c:	80 f9 3d             	cmp    cl,0x3d
c0014d6f:	74 1d                	je     c0014d8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d71:	89 d0                	mov    eax,edx
c0014d73:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d75:	84 c9                	test   cl,cl
c0014d77:	75 f0                	jne    c0014d69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d79:	eb 0f                	jmp    c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d82:	47                   	inc    edi
c0014d83:	89 d0                	mov    eax,edx
c0014d85:	e9 3b ff ff ff       	jmp    c0014cc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d8a:	31 c0                	xor    eax,eax
c0014d8c:	eb 33                	jmp    c0014dc1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d92:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d95:	50                   	push   eax
c0014d96:	50                   	push   eax
c0014d97:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d9b:	50                   	push   eax
c0014d9c:	56                   	push   esi
c0014d9d:	e8 56 b9 fe ff       	call   c00006f8 <strcmp>
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	85 c0                	test   eax,eax
c0014da7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dab:	75 97                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014dad:	51                   	push   ecx
c0014dae:	51                   	push   ecx
c0014daf:	52                   	push   edx
c0014db0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014db7:	e8 eb b8 fe ff       	call   c00006a7 <strcpy>
c0014dbc:	83 c4 10             	add    esp,0x10
c0014dbf:	b0 01                	mov    al,0x1
c0014dc1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dc7:	5b                   	pop    ebx
c0014dc8:	5e                   	pop    esi
c0014dc9:	5f                   	pop    edi
c0014dca:	5d                   	pop    ebp
c0014dcb:	c3                   	ret    

c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dcc:	57                   	push   edi
c0014dcd:	56                   	push   esi
c0014dce:	53                   	push   ebx
c0014dcf:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0014dd5:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0014ddc:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0014de3:	53                   	push   ebx
c0014de4:	e8 3c b8 fe ff       	call   c0000625 <strlen>
c0014de9:	89 34 24             	mov    DWORD PTR [esp],esi
c0014dec:	89 c7                	mov    edi,eax
c0014dee:	e8 32 b8 fe ff       	call   c0000625 <strlen>
c0014df3:	83 c4 10             	add    esp,0x10
c0014df6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dfa:	31 ff                	xor    edi,edi
c0014dfc:	3d ff 00 00 00       	cmp    eax,0xff
c0014e01:	0f 87 18 01 00 00    	ja     c0014f1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014e07:	51                   	push   ecx
c0014e08:	51                   	push   ecx
c0014e09:	56                   	push   esi
c0014e0a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0014e0e:	56                   	push   esi
c0014e0f:	e8 93 b8 fe ff       	call   c00006a7 <strcpy>
c0014e14:	58                   	pop    eax
c0014e15:	5a                   	pop    edx
c0014e16:	68 60 15 02 c0       	push   0xc0021560
c0014e1b:	56                   	push   esi
c0014e1c:	e8 3d b9 fe ff       	call   c000075e <strcat>
c0014e21:	59                   	pop    ecx
c0014e22:	58                   	pop    eax
c0014e23:	53                   	push   ebx
c0014e24:	56                   	push   esi
c0014e25:	e8 34 b9 fe ff       	call   c000075e <strcat>
c0014e2a:	58                   	pop    eax
c0014e2b:	5a                   	pop    edx
c0014e2c:	68 86 12 02 c0       	push   0xc0021286
c0014e31:	56                   	push   esi
c0014e32:	e8 27 b9 fe ff       	call   c000075e <strcat>
c0014e37:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e3e:	e8 ad 9e ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0014e43:	83 c4 0c             	add    esp,0xc
c0014e46:	89 c3                	mov    ebx,eax
c0014e48:	ff 35 b4 41 02 c0    	push   DWORD PTR ds:0xc00241b4
c0014e4e:	56                   	push   esi
c0014e4f:	50                   	push   eax
c0014e50:	e8 b9 a4 ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0014e55:	59                   	pop    ecx
c0014e56:	5e                   	pop    esi
c0014e57:	6a 01                	push   0x1
c0014e59:	53                   	push   ebx
c0014e5a:	e8 13 a5 ff ff       	call   c000f372 <File::open(FileOpenMode)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	85 c0                	test   eax,eax
c0014e64:	74 08                	je     c0014e6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e6b:	53                   	push   ebx
c0014e6c:	eb 2e                	jmp    c0014e9c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0014e6e:	52                   	push   edx
c0014e6f:	8d 44 24 07          	lea    eax,[esp+0x7]
c0014e73:	50                   	push   eax
c0014e74:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014e78:	50                   	push   eax
c0014e79:	53                   	push   ebx
c0014e7a:	e8 9f a7 ff ff       	call   c000f61e <File::stat(unsigned long long*, bool*)>
c0014e7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	89 c1                	mov    ecx,eax
c0014e88:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0014e8c:	75 13                	jne    c0014ea1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0014e8e:	83 ec 0c             	sub    esp,0xc
c0014e91:	53                   	push   ebx
c0014e92:	e8 39 a5 ff ff       	call   c000f3d0 <File::close()>
c0014e97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e9f:	eb 7b                	jmp    c0014f1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0014ea1:	83 ec 0c             	sub    esp,0xc
c0014ea4:	50                   	push   eax
c0014ea5:	e8 6e 6d ff ff       	call   c000bc18 <malloc>
c0014eaa:	89 c6                	mov    esi,eax
c0014eac:	58                   	pop    eax
c0014ead:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eaf:	8d 54 24 10          	lea    edx,[esp+0x10]
c0014eb3:	52                   	push   edx
c0014eb4:	56                   	push   esi
c0014eb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014eb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ebd:	53                   	push   ebx
c0014ebe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ec1:	83 c4 20             	add    esp,0x20
c0014ec4:	85 c0                	test   eax,eax
c0014ec6:	75 0a                	jne    c0014ed2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ecc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014ed0:	74 18                	je     c0014eea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0014ed2:	83 ec 0c             	sub    esp,0xc
c0014ed5:	31 ff                	xor    edi,edi
c0014ed7:	53                   	push   ebx
c0014ed8:	e8 f3 a4 ff ff       	call   c000f3d0 <File::close()>
c0014edd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014edf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ee2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ee5:	83 c4 10             	add    esp,0x10
c0014ee8:	eb 35                	jmp    c0014f1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014eea:	83 ec 0c             	sub    esp,0xc
c0014eed:	53                   	push   ebx
c0014eee:	e8 dd a4 ff ff       	call   c000f3d0 <File::close()>
c0014ef3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ef8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014efb:	83 c4 0c             	add    esp,0xc
c0014efe:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014f05:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014f0c:	56                   	push   esi
c0014f0d:	e8 62 fd ff ff       	call   c0014c74 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f12:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f15:	89 c7                	mov    edi,eax
c0014f17:	e8 0c 6d ff ff       	call   c000bc28 <free>
c0014f1c:	83 c4 10             	add    esp,0x10
c0014f1f:	81 c4 10 01 00 00    	add    esp,0x110
c0014f25:	89 f8                	mov    eax,edi
c0014f27:	5b                   	pop    ebx
c0014f28:	5e                   	pop    esi
c0014f29:	5f                   	pop    edi
c0014f2a:	c3                   	ret    

c0014f2b <Reg::getLine(char*, char*, char*)>:
c0014f2b:	57                   	push   edi
c0014f2c:	56                   	push   esi
c0014f2d:	53                   	push   ebx
c0014f2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f32:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f36:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f3a:	57                   	push   edi
c0014f3b:	56                   	push   esi
c0014f3c:	53                   	push   ebx
c0014f3d:	68 8b 12 02 c0       	push   0xc002128b
c0014f42:	e8 85 fe ff ff       	call   c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f47:	83 c4 10             	add    esp,0x10
c0014f4a:	84 c0                	test   al,al
c0014f4c:	75 10                	jne    c0014f5e <Reg::getLine(char*, char*, char*)+0x33>
c0014f4e:	57                   	push   edi
c0014f4f:	56                   	push   esi
c0014f50:	53                   	push   ebx
c0014f51:	68 b0 12 02 c0       	push   0xc00212b0
c0014f56:	e8 71 fe ff ff       	call   c0014dcc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f5b:	83 c4 10             	add    esp,0x10
c0014f5e:	5b                   	pop    ebx
c0014f5f:	5e                   	pop    esi
c0014f60:	5f                   	pop    edi
c0014f61:	c3                   	ret    

c0014f62 <Reg::readInt(char*, char*, int*)>:
c0014f62:	55                   	push   ebp
c0014f63:	57                   	push   edi
c0014f64:	56                   	push   esi
c0014f65:	53                   	push   ebx
c0014f66:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f6c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f70:	57                   	push   edi
c0014f71:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f78:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f7f:	e8 a7 ff ff ff       	call   c0014f2b <Reg::getLine(char*, char*, char*)>
c0014f84:	83 c4 10             	add    esp,0x10
c0014f87:	84 c0                	test   al,al
c0014f89:	0f 84 b3 00 00 00    	je     c0015042 <Reg::readInt(char*, char*, int*)+0xe0>
c0014f8f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f93:	80 fa 2b             	cmp    dl,0x2b
c0014f96:	74 0c                	je     c0014fa4 <Reg::readInt(char*, char*, int*)+0x42>
c0014f98:	80 fa 2d             	cmp    dl,0x2d
c0014f9b:	75 0e                	jne    c0014fab <Reg::readInt(char*, char*, int*)+0x49>
c0014f9d:	ba 01 00 00 00       	mov    edx,0x1
c0014fa2:	eb 0b                	jmp    c0014faf <Reg::readInt(char*, char*, int*)+0x4d>
c0014fa4:	ba 01 00 00 00       	mov    edx,0x1
c0014fa9:	eb 02                	jmp    c0014fad <Reg::readInt(char*, char*, int*)+0x4b>
c0014fab:	31 d2                	xor    edx,edx
c0014fad:	31 c0                	xor    eax,eax
c0014faf:	be 0a 00 00 00       	mov    esi,0xa
c0014fb4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014fb9:	75 20                	jne    c0014fdb <Reg::readInt(char*, char*, int*)+0x79>
c0014fbb:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fbf:	80 f9 78             	cmp    cl,0x78
c0014fc2:	75 0a                	jne    c0014fce <Reg::readInt(char*, char*, int*)+0x6c>
c0014fc4:	83 c2 02             	add    edx,0x2
c0014fc7:	be 10 00 00 00       	mov    esi,0x10
c0014fcc:	eb 0d                	jmp    c0014fdb <Reg::readInt(char*, char*, int*)+0x79>
c0014fce:	80 f9 62             	cmp    cl,0x62
c0014fd1:	75 08                	jne    c0014fdb <Reg::readInt(char*, char*, int*)+0x79>
c0014fd3:	83 c2 02             	add    edx,0x2
c0014fd6:	be 02 00 00 00       	mov    esi,0x2
c0014fdb:	01 d7                	add    edi,edx
c0014fdd:	31 d2                	xor    edx,edx
c0014fdf:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fe1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fe5:	80 fb 0d             	cmp    bl,0xd
c0014fe8:	0f 94 c3             	sete   bl
c0014feb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014ff0:	0f 94 c1             	sete   cl
c0014ff3:	08 cb                	or     bl,cl
c0014ff5:	75 3a                	jne    c0015031 <Reg::readInt(char*, char*, int*)+0xcf>
c0014ff7:	0f af d6             	imul   edx,esi
c0014ffa:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fff:	83 fe 10             	cmp    esi,0x10
c0015002:	75 26                	jne    c001502a <Reg::readInt(char*, char*, int*)+0xc8>
c0015004:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015008:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001500b:	89 e9                	mov    ecx,ebp
c001500d:	80 f9 05             	cmp    cl,0x5
c0015010:	77 06                	ja     c0015018 <Reg::readInt(char*, char*, int*)+0xb6>
c0015012:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015016:	eb 16                	jmp    c001502e <Reg::readInt(char*, char*, int*)+0xcc>
c0015018:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001501c:	83 e9 61             	sub    ecx,0x61
c001501f:	80 f9 05             	cmp    cl,0x5
c0015022:	77 06                	ja     c001502a <Reg::readInt(char*, char*, int*)+0xc8>
c0015024:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015028:	eb 04                	jmp    c001502e <Reg::readInt(char*, char*, int*)+0xcc>
c001502a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001502e:	47                   	inc    edi
c001502f:	eb ae                	jmp    c0014fdf <Reg::readInt(char*, char*, int*)+0x7d>
c0015031:	84 c0                	test   al,al
c0015033:	74 02                	je     c0015037 <Reg::readInt(char*, char*, int*)+0xd5>
c0015035:	f7 da                	neg    edx
c0015037:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001503e:	89 10                	mov    DWORD PTR [eax],edx
c0015040:	88 d8                	mov    al,bl
c0015042:	81 c4 ec 00 00 00    	add    esp,0xec
c0015048:	5b                   	pop    ebx
c0015049:	5e                   	pop    esi
c001504a:	5f                   	pop    edi
c001504b:	5d                   	pop    ebp
c001504c:	c3                   	ret    

c001504d <Reg::readString(char*, char*, char*, int)>:
c001504d:	57                   	push   edi
c001504e:	56                   	push   esi
c001504f:	53                   	push   ebx
c0015050:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015056:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001505d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015061:	57                   	push   edi
c0015062:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015069:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015070:	e8 b6 fe ff ff       	call   c0014f2b <Reg::getLine(char*, char*, char*)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	89 c6                	mov    esi,eax
c001507a:	84 c0                	test   al,al
c001507c:	74 44                	je     c00150c2 <Reg::readString(char*, char*, char*, int)+0x75>
c001507e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015085:	31 c0                	xor    eax,eax
c0015087:	4a                   	dec    edx
c0015088:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001508b:	84 c9                	test   cl,cl
c001508d:	74 0f                	je     c001509e <Reg::readString(char*, char*, char*, int)+0x51>
c001508f:	39 c2                	cmp    edx,eax
c0015091:	7e 0b                	jle    c001509e <Reg::readString(char*, char*, char*, int)+0x51>
c0015093:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015096:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001509b:	40                   	inc    eax
c001509c:	eb ea                	jmp    c0015088 <Reg::readString(char*, char*, char*, int)+0x3b>
c001509e:	83 ec 0c             	sub    esp,0xc
c00150a1:	53                   	push   ebx
c00150a2:	e8 7e b5 fe ff       	call   c0000625 <strlen>
c00150a7:	83 c4 10             	add    esp,0x10
c00150aa:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00150af:	75 11                	jne    c00150c2 <Reg::readString(char*, char*, char*, int)+0x75>
c00150b1:	83 ec 0c             	sub    esp,0xc
c00150b4:	53                   	push   ebx
c00150b5:	e8 6b b5 fe ff       	call   c0000625 <strlen>
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150c2:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150c8:	89 f0                	mov    eax,esi
c00150ca:	5b                   	pop    ebx
c00150cb:	5e                   	pop    esi
c00150cc:	5f                   	pop    edi
c00150cd:	c3                   	ret    

c00150ce <Reg::readBool(char*, char*, bool*)>:
c00150ce:	83 ec 20             	sub    esp,0x20
c00150d1:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150d5:	50                   	push   eax
c00150d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150de:	e8 7f fe ff ff       	call   c0014f62 <Reg::readInt(char*, char*, int*)>
c00150e3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150e8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150ec:	0f 95 02             	setne  BYTE PTR [edx]
c00150ef:	83 c4 2c             	add    esp,0x2c
c00150f2:	c3                   	ret    

c00150f3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150f3:	53                   	push   ebx
c00150f4:	83 ec 1c             	sub    esp,0x1c
c00150f7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150fb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150ff:	50                   	push   eax
c0015100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015108:	e8 c1 ff ff ff       	call   c00150ce <Reg::readBool(char*, char*, bool*)>
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	84 c0                	test   al,al
c0015112:	74 04                	je     c0015118 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015114:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015118:	88 d8                	mov    al,bl
c001511a:	83 c4 18             	add    esp,0x18
c001511d:	5b                   	pop    ebx
c001511e:	c3                   	ret    

c001511f <Reg::readIntWithDefault(char*, char*, int)>:
c001511f:	53                   	push   ebx
c0015120:	83 ec 1c             	sub    esp,0x1c
c0015123:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015127:	8d 44 24 10          	lea    eax,[esp+0x10]
c001512b:	50                   	push   eax
c001512c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015130:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015134:	e8 29 fe ff ff       	call   c0014f62 <Reg::readInt(char*, char*, int*)>
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	84 c0                	test   al,al
c001513e:	74 04                	je     c0015144 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015140:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015144:	89 d8                	mov    eax,ebx
c0015146:	83 c4 18             	add    esp,0x18
c0015149:	5b                   	pop    ebx
c001514a:	c3                   	ret    

c001514b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001514b:	56                   	push   esi
c001514c:	53                   	push   ebx
c001514d:	51                   	push   ecx
c001514e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015152:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515a:	56                   	push   esi
c001515b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015163:	e8 e5 fe ff ff       	call   c001504d <Reg::readString(char*, char*, char*, int)>
c0015168:	83 c4 10             	add    esp,0x10
c001516b:	84 c0                	test   al,al
c001516d:	74 02                	je     c0015171 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001516f:	89 f3                	mov    ebx,esi
c0015171:	89 d8                	mov    eax,ebx
c0015173:	5a                   	pop    edx
c0015174:	5b                   	pop    ebx
c0015175:	5e                   	pop    esi
c0015176:	c3                   	ret    

c0015177 <Sys::exit(regs*)>:
c0015177:	83 ec 18             	sub    esp,0x18
c001517a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001517e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015181:	e8 86 30 00 00       	call   c001820c <terminateTask(int)>
c0015186:	83 c8 ff             	or     eax,0xffffffff
c0015189:	83 c4 1c             	add    esp,0x1c
c001518c:	89 c2                	mov    edx,eax
c001518e:	c3                   	ret    

c001518f <Sys::loadDLL(regs*)>:
c001518f:	56                   	push   esi
c0015190:	53                   	push   ebx
c0015191:	31 d2                	xor    edx,edx
c0015193:	51                   	push   ecx
c0015194:	b8 01 00 00 00       	mov    eax,0x1
c0015199:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001519d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00151a1:	74 7d                	je     c0015220 <Sys::loadDLL(regs*)+0x91>
c00151a3:	83 ec 0c             	sub    esp,0xc
c00151a6:	68 14 01 00 00       	push   0x114
c00151ab:	e8 40 9b ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00151b0:	83 c4 0c             	add    esp,0xc
c00151b3:	89 c3                	mov    ebx,eax
c00151b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151bd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00151c0:	53                   	push   ebx
c00151c1:	e8 48 a1 ff ff       	call   c000f30e <File::File(char const*, Process*)>
c00151c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151c9:	e8 12 a4 ff ff       	call   c000f5e0 <File::exists()>
c00151ce:	83 c4 10             	add    esp,0x10
c00151d1:	84 c0                	test   al,al
c00151d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151d5:	75 11                	jne    c00151e8 <Sys::loadDLL(regs*)+0x59>
c00151d7:	83 ec 0c             	sub    esp,0xc
c00151da:	53                   	push   ebx
c00151db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	b8 03 00 00 00       	mov    eax,0x3
c00151e6:	eb 36                	jmp    c001521e <Sys::loadDLL(regs*)+0x8f>
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	53                   	push   ebx
c00151ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151ef:	58                   	pop    eax
c00151f0:	5a                   	pop    edx
c00151f1:	6a 00                	push   0x0
c00151f3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00151f6:	e8 b3 1e 00 00       	call   c00170ae <Thr::loadDLL(char const*, bool)>
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	89 c1                	mov    ecx,eax
c0015200:	31 d2                	xor    edx,edx
c0015202:	b8 04 00 00 00       	mov    eax,0x4
c0015207:	85 c9                	test   ecx,ecx
c0015209:	74 15                	je     c0015220 <Sys::loadDLL(regs*)+0x91>
c001520b:	53                   	push   ebx
c001520c:	53                   	push   ebx
c001520d:	ff 35 e8 2d 02 c0    	push   DWORD PTR ds:0xc0022de8
c0015213:	51                   	push   ecx
c0015214:	e8 e8 1f 00 00       	call   c0017201 <Thr::executeDLL(unsigned long, void*)>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	31 c0                	xor    eax,eax
c001521e:	31 d2                	xor    edx,edx
c0015220:	59                   	pop    ecx
c0015221:	5b                   	pop    ebx
c0015222:	5e                   	pop    esi
c0015223:	c3                   	ret    

c0015224 <Sys::read(regs*)>:
c0015224:	57                   	push   edi
c0015225:	56                   	push   esi
c0015226:	53                   	push   ebx
c0015227:	83 ec 10             	sub    esp,0x10
c001522a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001522e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015231:	83 f8 02             	cmp    eax,0x2
c0015234:	77 10                	ja     c0015246 <Sys::read(regs*)+0x22>
c0015236:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001523e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015244:	eb 0e                	jmp    c0015254 <Sys::read(regs*)+0x30>
c0015246:	83 ec 0c             	sub    esp,0xc
c0015249:	50                   	push   eax
c001524a:	e8 2a 88 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c001524f:	83 c4 10             	add    esp,0x10
c0015252:	89 c1                	mov    ecx,eax
c0015254:	83 c8 ff             	or     eax,0xffffffff
c0015257:	85 c9                	test   ecx,ecx
c0015259:	89 c2                	mov    edx,eax
c001525b:	74 28                	je     c0015285 <Sys::read(regs*)+0x61>
c001525d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015265:	31 ff                	xor    edi,edi
c0015267:	83 ec 0c             	sub    esp,0xc
c001526a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001526c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015270:	52                   	push   edx
c0015271:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015274:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015277:	57                   	push   edi
c0015278:	56                   	push   esi
c0015279:	51                   	push   ecx
c001527a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001527d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015281:	83 c4 20             	add    esp,0x20
c0015284:	99                   	cdq    
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	5b                   	pop    ebx
c0015289:	5e                   	pop    esi
c001528a:	5f                   	pop    edi
c001528b:	c3                   	ret    

c001528c <Sys::sbrk(regs*)>:
c001528c:	56                   	push   esi
c001528d:	53                   	push   ebx
c001528e:	50                   	push   eax
c001528f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015294:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015298:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001529b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001529e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00152a4:	85 db                	test   ebx,ebx
c00152a6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00152a9:	74 02                	je     c00152ad <Sys::sbrk(regs*)+0x21>
c00152ab:	79 06                	jns    c00152b3 <Sys::sbrk(regs*)+0x27>
c00152ad:	89 f0                	mov    eax,esi
c00152af:	31 d2                	xor    edx,edx
c00152b1:	eb 2a                	jmp    c00152dd <Sys::sbrk(regs*)+0x51>
c00152b3:	83 c8 ff             	or     eax,0xffffffff
c00152b6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00152bc:	89 c2                	mov    edx,eax
c00152be:	77 1d                	ja     c00152dd <Sys::sbrk(regs*)+0x51>
c00152c0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00152c6:	50                   	push   eax
c00152c7:	c1 ea 0c             	shr    edx,0xc
c00152ca:	68 07 04 00 00       	push   0x407
c00152cf:	52                   	push   edx
c00152d0:	51                   	push   ecx
c00152d1:	e8 c0 8f ff ff       	call   c000e296 <VAS::allocatePages(int, int)>
c00152d6:	89 f0                	mov    eax,esi
c00152d8:	31 d2                	xor    edx,edx
c00152da:	83 c4 10             	add    esp,0x10
c00152dd:	59                   	pop    ecx
c00152de:	5b                   	pop    ebx
c00152df:	5e                   	pop    esi
c00152e0:	c3                   	ret    

c00152e1 <Sys::write(regs*)>:
c00152e1:	57                   	push   edi
c00152e2:	56                   	push   esi
c00152e3:	53                   	push   ebx
c00152e4:	83 ec 10             	sub    esp,0x10
c00152e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152ee:	83 f8 02             	cmp    eax,0x2
c00152f1:	77 10                	ja     c0015303 <Sys::write(regs*)+0x22>
c00152f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152fb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015301:	eb 0e                	jmp    c0015311 <Sys::write(regs*)+0x30>
c0015303:	83 ec 0c             	sub    esp,0xc
c0015306:	50                   	push   eax
c0015307:	e8 6d 87 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c001530c:	83 c4 10             	add    esp,0x10
c001530f:	89 c1                	mov    ecx,eax
c0015311:	83 c8 ff             	or     eax,0xffffffff
c0015314:	85 c9                	test   ecx,ecx
c0015316:	89 c2                	mov    edx,eax
c0015318:	74 28                	je     c0015342 <Sys::write(regs*)+0x61>
c001531a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015322:	31 ff                	xor    edi,edi
c0015324:	83 ec 0c             	sub    esp,0xc
c0015327:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015329:	8d 54 24 18          	lea    edx,[esp+0x18]
c001532d:	52                   	push   edx
c001532e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015331:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015334:	57                   	push   edi
c0015335:	56                   	push   esi
c0015336:	51                   	push   ecx
c0015337:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001533a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001533e:	83 c4 20             	add    esp,0x20
c0015341:	99                   	cdq    
c0015342:	83 c4 10             	add    esp,0x10
c0015345:	5b                   	pop    ebx
c0015346:	5e                   	pop    esi
c0015347:	5f                   	pop    edi
c0015348:	c3                   	ret    

c0015349 <Sys::yield(regs*)>:
c0015349:	83 ec 0c             	sub    esp,0xc
c001534c:	e8 bb 22 00 00       	call   c001760c <lockScheduler()>
c0015351:	e8 ea 25 00 00       	call   c0017940 <schedule()>
c0015356:	e8 b3 22 00 00       	call   c001760e <unlockScheduler()>
c001535b:	31 c0                	xor    eax,eax
c001535d:	31 d2                	xor    edx,edx
c001535f:	83 c4 0c             	add    esp,0xc
c0015362:	c3                   	ret    

c0015363 <sysCallGetPID(regs*)>:
c0015363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015368:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001536b:	8b 00                	mov    eax,DWORD PTR [eax]
c001536d:	99                   	cdq    
c001536e:	c3                   	ret    

c001536f <sysCallSeekDir(regs*)>:
c001536f:	31 c0                	xor    eax,eax
c0015371:	31 d2                	xor    edx,edx
c0015373:	c3                   	ret    

c0015374 <sysCallTellDir(regs*)>:
c0015374:	31 c0                	xor    eax,eax
c0015376:	31 d2                	xor    edx,edx
c0015378:	c3                   	ret    

c0015379 <sysCallVerify(regs*)>:
c0015379:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001537d:	31 d2                	xor    edx,edx
c001537f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015382:	c3                   	ret    

c0015383 <sysCallGetArgc(regs*)>:
c0015383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015388:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001538b:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015391:	99                   	cdq    
c0015392:	c3                   	ret    

c0015393 <sysFormatDisk(regs*)>:
c0015393:	56                   	push   esi
c0015394:	53                   	push   ebx
c0015395:	53                   	push   ebx
c0015396:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001539a:	8b 1d c0 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec0
c00153a0:	eb 25                	jmp    c00153c7 <sysFormatDisk(regs*)+0x34>
c00153a2:	83 ec 0c             	sub    esp,0xc
c00153a5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00153a8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00153aa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00153ad:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00153b0:	50                   	push   eax
c00153b1:	ff 34 85 60 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcca0]
c00153b8:	53                   	push   ebx
c00153b9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00153bc:	83 c4 20             	add    esp,0x20
c00153bf:	83 f8 08             	cmp    eax,0x8
c00153c2:	75 12                	jne    c00153d6 <sysFormatDisk(regs*)+0x43>
c00153c4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00153c7:	85 db                	test   ebx,ebx
c00153c9:	75 d7                	jne    c00153a2 <sysFormatDisk(regs*)+0xf>
c00153cb:	59                   	pop    ecx
c00153cc:	b8 03 00 00 00       	mov    eax,0x3
c00153d1:	31 d2                	xor    edx,edx
c00153d3:	5b                   	pop    ebx
c00153d4:	5e                   	pop    esi
c00153d5:	c3                   	ret    
c00153d6:	85 c0                	test   eax,eax
c00153d8:	74 1b                	je     c00153f5 <sysFormatDisk(regs*)+0x62>
c00153da:	83 f8 09             	cmp    eax,0x9
c00153dd:	74 0b                	je     c00153ea <sysFormatDisk(regs*)+0x57>
c00153df:	59                   	pop    ecx
c00153e0:	b8 02 00 00 00       	mov    eax,0x2
c00153e5:	31 d2                	xor    edx,edx
c00153e7:	5b                   	pop    ebx
c00153e8:	5e                   	pop    esi
c00153e9:	c3                   	ret    
c00153ea:	59                   	pop    ecx
c00153eb:	b8 01 00 00 00       	mov    eax,0x1
c00153f0:	31 d2                	xor    edx,edx
c00153f2:	5b                   	pop    ebx
c00153f3:	5e                   	pop    esi
c00153f4:	c3                   	ret    
c00153f5:	59                   	pop    ecx
c00153f6:	31 c0                	xor    eax,eax
c00153f8:	31 d2                	xor    edx,edx
c00153fa:	5b                   	pop    ebx
c00153fb:	5e                   	pop    esi
c00153fc:	c3                   	ret    

c00153fd <sysSetDiskVolumeLabel(regs*)>:
c00153fd:	56                   	push   esi
c00153fe:	53                   	push   ebx
c00153ff:	53                   	push   ebx
c0015400:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015404:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015407:	83 f8 19             	cmp    eax,0x19
c001540a:	77 29                	ja     c0015435 <sysSetDiskVolumeLabel(regs*)+0x38>
c001540c:	8b 0c 85 60 33 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcca0]
c0015413:	85 c9                	test   ecx,ecx
c0015415:	74 1e                	je     c0015435 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015417:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001541a:	85 d2                	test   edx,edx
c001541c:	74 17                	je     c0015435 <sysSetDiskVolumeLabel(regs*)+0x38>
c001541e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015424:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015426:	52                   	push   edx
c0015427:	50                   	push   eax
c0015428:	51                   	push   ecx
c0015429:	53                   	push   ebx
c001542a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	99                   	cdq    
c0015431:	59                   	pop    ecx
c0015432:	5b                   	pop    ebx
c0015433:	5e                   	pop    esi
c0015434:	c3                   	ret    
c0015435:	59                   	pop    ecx
c0015436:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001543b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015440:	5b                   	pop    ebx
c0015441:	5e                   	pop    esi
c0015442:	c3                   	ret    

c0015443 <sysGetDiskVolumeLabel(regs*)>:
c0015443:	57                   	push   edi
c0015444:	56                   	push   esi
c0015445:	53                   	push   ebx
c0015446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001544a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001544d:	83 fa 19             	cmp    edx,0x19
c0015450:	77 34                	ja     c0015486 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015452:	8b 0c 95 60 33 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcca0]
c0015459:	85 c9                	test   ecx,ecx
c001545b:	74 29                	je     c0015486 <sysGetDiskVolumeLabel(regs*)+0x43>
c001545d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015460:	85 db                	test   ebx,ebx
c0015462:	74 22                	je     c0015486 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015464:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015467:	85 c0                	test   eax,eax
c0015469:	74 1b                	je     c0015486 <sysGetDiskVolumeLabel(regs*)+0x43>
c001546b:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0015471:	83 ec 0c             	sub    esp,0xc
c0015474:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015476:	50                   	push   eax
c0015477:	53                   	push   ebx
c0015478:	52                   	push   edx
c0015479:	51                   	push   ecx
c001547a:	56                   	push   esi
c001547b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001547e:	83 c4 20             	add    esp,0x20
c0015481:	99                   	cdq    
c0015482:	5b                   	pop    ebx
c0015483:	5e                   	pop    esi
c0015484:	5f                   	pop    edi
c0015485:	c3                   	ret    
c0015486:	5b                   	pop    ebx
c0015487:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001548c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015491:	5e                   	pop    esi
c0015492:	5f                   	pop    edi
c0015493:	c3                   	ret    

c0015494 <sysShutdown(regs*)>:
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001549b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001549e:	85 c0                	test   eax,eax
c00154a0:	74 24                	je     c00154c6 <sysShutdown(regs*)+0x32>
c00154a2:	48                   	dec    eax
c00154a3:	74 0e                	je     c00154b3 <sysShutdown(regs*)+0x1f>
c00154a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00154aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00154af:	83 c4 0c             	add    esp,0xc
c00154b2:	c3                   	ret    
c00154b3:	a1 e0 33 02 c0       	mov    eax,ds:0xc00233e0
c00154b8:	85 c0                	test   eax,eax
c00154ba:	74 02                	je     c00154be <sysShutdown(regs*)+0x2a>
c00154bc:	ff d0                	call   eax
c00154be:	31 c0                	xor    eax,eax
c00154c0:	31 d2                	xor    edx,edx
c00154c2:	83 c4 0c             	add    esp,0xc
c00154c5:	c3                   	ret    
c00154c6:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c00154cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00154cd:	6a 00                	push   0x0
c00154cf:	6a 00                	push   0x0
c00154d1:	6a 00                	push   0x0
c00154d3:	50                   	push   eax
c00154d4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	eb c9                	jmp    c00154a5 <sysShutdown(regs*)+0x11>

c00154dc <sysCallGetCwd(regs*)>:
c00154dc:	83 ec 10             	sub    esp,0x10
c00154df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154e3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00154e6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00154f1:	e8 89 a1 ff ff       	call   c000f67f <getcwd(Process*, char*, int)>
c00154f6:	83 c4 1c             	add    esp,0x1c
c00154f9:	99                   	cdq    
c00154fa:	c3                   	ret    

c00154fb <sysCallSetCwd(regs*)>:
c00154fb:	83 ec 14             	sub    esp,0x14
c00154fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015502:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001550a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001550d:	e8 97 a1 ff ff       	call   c000f6a9 <setcwd(Process*, char*)>
c0015512:	83 c4 1c             	add    esp,0x1c
c0015515:	99                   	cdq    
c0015516:	c3                   	ret    

c0015517 <sysCallRealpath(regs*)>:
c0015517:	83 ec 0c             	sub    esp,0xc
c001551a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001551e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015521:	85 d2                	test   edx,edx
c0015523:	74 07                	je     c001552c <sysCallRealpath(regs*)+0x15>
c0015525:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015528:	85 c0                	test   eax,eax
c001552a:	75 0b                	jne    c0015537 <sysCallRealpath(regs*)+0x20>
c001552c:	b8 01 00 00 00       	mov    eax,0x1
c0015531:	31 d2                	xor    edx,edx
c0015533:	83 c4 0c             	add    esp,0xc
c0015536:	c3                   	ret    
c0015537:	51                   	push   ecx
c0015538:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001553e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015541:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015547:	51                   	push   ecx
c0015548:	52                   	push   edx
c0015549:	50                   	push   eax
c001554a:	e8 15 9c ff ff       	call   c000f164 <standardiseFiles(char*, char const*, char const*)>
c001554f:	83 c4 10             	add    esp,0x10
c0015552:	31 c0                	xor    eax,eax
c0015554:	31 d2                	xor    edx,edx
c0015556:	83 c4 0c             	add    esp,0xc
c0015559:	c3                   	ret    

c001555a <sysCallOpen(regs*)>:
c001555a:	56                   	push   esi
c001555b:	53                   	push   ebx
c001555c:	81 ec 04 01 00 00    	sub    esp,0x104
c0015562:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0015569:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001556c:	85 d2                	test   edx,edx
c001556e:	0f 84 c3 00 00 00    	je     c0015637 <sysCallOpen(regs*)+0xdd>
c0015574:	50                   	push   eax
c0015575:	68 cb 12 02 c0       	push   0xc00212cb
c001557a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001557d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015581:	56                   	push   esi
c0015582:	e8 dd 9b ff ff       	call   c000f164 <standardiseFiles(char*, char const*, char const*)>
c0015587:	89 34 24             	mov    DWORD PTR [esp],esi
c001558a:	e8 96 b0 fe ff       	call   c0000625 <strlen>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	48                   	dec    eax
c0015593:	74 1d                	je     c00155b2 <sysCallOpen(regs*)+0x58>
c0015595:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0015598:	eb 0f                	jmp    c00155a9 <sysCallOpen(regs*)+0x4f>
c001559a:	80 fa 3a             	cmp    dl,0x3a
c001559d:	74 0f                	je     c00155ae <sysCallOpen(regs*)+0x54>
c001559f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00155a3:	48                   	dec    eax
c00155a4:	74 0c                	je     c00155b2 <sysCallOpen(regs*)+0x58>
c00155a6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00155a9:	80 fa 2e             	cmp    dl,0x2e
c00155ac:	75 ec                	jne    c001559a <sysCallOpen(regs*)+0x40>
c00155ae:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00155b2:	83 ec 0c             	sub    esp,0xc
c00155b5:	68 14 01 00 00       	push   0x114
c00155ba:	e8 31 97 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00155bf:	83 c4 0c             	add    esp,0xc
c00155c2:	89 c6                	mov    esi,eax
c00155c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155cf:	56                   	push   esi
c00155d0:	e8 39 9d ff ff       	call   c000f30e <File::File(char const*, Process*)>
c00155d5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00155d8:	83 c4 10             	add    esp,0x10
c00155db:	0f b6 d0             	movzx  edx,al
c00155de:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00155e1:	89 c2                	mov    edx,eax
c00155e3:	83 e2 01             	and    edx,0x1
c00155e6:	a8 02                	test   al,0x2
c00155e8:	74 03                	je     c00155ed <sysCallOpen(regs*)+0x93>
c00155ea:	83 ca 02             	or     edx,0x2
c00155ed:	a8 04                	test   al,0x4
c00155ef:	74 03                	je     c00155f4 <sysCallOpen(regs*)+0x9a>
c00155f1:	83 ca 04             	or     edx,0x4
c00155f4:	a8 08                	test   al,0x8
c00155f6:	74 03                	je     c00155fb <sysCallOpen(regs*)+0xa1>
c00155f8:	83 ca 0a             	or     edx,0xa
c00155fb:	a8 10                	test   al,0x10
c00155fd:	74 03                	je     c0015602 <sysCallOpen(regs*)+0xa8>
c00155ff:	83 ca 12             	or     edx,0x12
c0015602:	83 ec 08             	sub    esp,0x8
c0015605:	52                   	push   edx
c0015606:	56                   	push   esi
c0015607:	e8 66 9d ff ff       	call   c000f372 <File::open(FileOpenMode)>
c001560c:	83 c4 10             	add    esp,0x10
c001560f:	85 c0                	test   eax,eax
c0015611:	75 24                	jne    c0015637 <sysCallOpen(regs*)+0xdd>
c0015613:	83 ec 0c             	sub    esp,0xc
c0015616:	56                   	push   esi
c0015617:	e8 f8 82 ff ff       	call   c000d914 <UnixFile::getFileDescriptor()>
c001561c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001561f:	83 c4 10             	add    esp,0x10
c0015622:	89 02                	mov    DWORD PTR [edx],eax
c0015624:	c1 f8 1f             	sar    eax,0x1f
c0015627:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001562a:	81 c4 04 01 00 00    	add    esp,0x104
c0015630:	31 c0                	xor    eax,eax
c0015632:	31 d2                	xor    edx,edx
c0015634:	5b                   	pop    ebx
c0015635:	5e                   	pop    esi
c0015636:	c3                   	ret    
c0015637:	81 c4 04 01 00 00    	add    esp,0x104
c001563d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015642:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015647:	5b                   	pop    ebx
c0015648:	5e                   	pop    esi
c0015649:	c3                   	ret    

c001564a <sysCallReadDir(regs*)>:
c001564a:	53                   	push   ebx
c001564b:	83 ec 18             	sub    esp,0x18
c001564e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015652:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015655:	83 f8 02             	cmp    eax,0x2
c0015658:	77 0c                	ja     c0015666 <sysCallReadDir(regs*)+0x1c>
c001565a:	b8 01 00 00 00       	mov    eax,0x1
c001565f:	31 d2                	xor    edx,edx
c0015661:	83 c4 18             	add    esp,0x18
c0015664:	5b                   	pop    ebx
c0015665:	c3                   	ret    
c0015666:	83 ec 0c             	sub    esp,0xc
c0015669:	50                   	push   eax
c001566a:	e8 0a 84 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	85 c0                	test   eax,eax
c0015674:	74 37                	je     c00156ad <sysCallReadDir(regs*)+0x63>
c0015676:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001567e:	83 ec 0c             	sub    esp,0xc
c0015681:	8b 10                	mov    edx,DWORD PTR [eax]
c0015683:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015687:	51                   	push   ecx
c0015688:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001568b:	6a 00                	push   0x0
c001568d:	68 10 01 00 00       	push   0x110
c0015692:	50                   	push   eax
c0015693:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015696:	83 c4 20             	add    esp,0x20
c0015699:	85 c0                	test   eax,eax
c001569b:	74 0c                	je     c00156a9 <sysCallReadDir(regs*)+0x5f>
c001569d:	83 f8 07             	cmp    eax,0x7
c00156a0:	74 b8                	je     c001565a <sysCallReadDir(regs*)+0x10>
c00156a2:	b8 02 00 00 00       	mov    eax,0x2
c00156a7:	eb b6                	jmp    c001565f <sysCallReadDir(regs*)+0x15>
c00156a9:	31 c0                	xor    eax,eax
c00156ab:	eb b2                	jmp    c001565f <sysCallReadDir(regs*)+0x15>
c00156ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156b7:	eb a8                	jmp    c0015661 <sysCallReadDir(regs*)+0x17>

c00156b9 <sysCallIsATTY(regs*)>:
c00156b9:	83 ec 0c             	sub    esp,0xc
c00156bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156c3:	83 f8 02             	cmp    eax,0x2
c00156c6:	77 26                	ja     c00156ee <sysCallIsATTY(regs*)+0x35>
c00156c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156d0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00156d6:	85 c0                	test   eax,eax
c00156d8:	74 24                	je     c00156fe <sysCallIsATTY(regs*)+0x45>
c00156da:	83 ec 0c             	sub    esp,0xc
c00156dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00156df:	50                   	push   eax
c00156e0:	ff 12                	call   DWORD PTR [edx]
c00156e2:	31 d2                	xor    edx,edx
c00156e4:	0f b6 c0             	movzx  eax,al
c00156e7:	83 c4 10             	add    esp,0x10
c00156ea:	83 c4 0c             	add    esp,0xc
c00156ed:	c3                   	ret    
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	50                   	push   eax
c00156f2:	e8 82 83 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	85 c0                	test   eax,eax
c00156fc:	75 dc                	jne    c00156da <sysCallIsATTY(regs*)+0x21>
c00156fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015703:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015708:	83 c4 0c             	add    esp,0xc
c001570b:	c3                   	ret    

c001570c <sysCallSeek(regs*)>:
c001570c:	53                   	push   ebx
c001570d:	83 ec 08             	sub    esp,0x8
c0015710:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015714:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015717:	83 f8 02             	cmp    eax,0x2
c001571a:	76 32                	jbe    c001574e <sysCallSeek(regs*)+0x42>
c001571c:	83 ec 0c             	sub    esp,0xc
c001571f:	50                   	push   eax
c0015720:	e8 54 83 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c0015725:	83 c4 0c             	add    esp,0xc
c0015728:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001572b:	31 db                	xor    ebx,ebx
c001572d:	53                   	push   ebx
c001572e:	51                   	push   ecx
c001572f:	50                   	push   eax
c0015730:	e8 fb 9c ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0015735:	83 c4 10             	add    esp,0x10
c0015738:	85 c0                	test   eax,eax
c001573a:	0f 95 c0             	setne  al
c001573d:	31 d2                	xor    edx,edx
c001573f:	0f b6 c0             	movzx  eax,al
c0015742:	f7 d8                	neg    eax
c0015744:	83 d2 00             	adc    edx,0x0
c0015747:	83 c4 08             	add    esp,0x8
c001574a:	f7 da                	neg    edx
c001574c:	5b                   	pop    ebx
c001574d:	c3                   	ret    
c001574e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015753:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015758:	83 c4 08             	add    esp,0x8
c001575b:	5b                   	pop    ebx
c001575c:	c3                   	ret    

c001575d <sysCallTell(regs*)>:
c001575d:	53                   	push   ebx
c001575e:	83 ec 08             	sub    esp,0x8
c0015761:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015765:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015768:	83 f8 02             	cmp    eax,0x2
c001576b:	76 2d                	jbe    c001579a <sysCallTell(regs*)+0x3d>
c001576d:	83 ec 0c             	sub    esp,0xc
c0015770:	50                   	push   eax
c0015771:	e8 03 83 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c0015776:	5a                   	pop    edx
c0015777:	59                   	pop    ecx
c0015778:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001577b:	50                   	push   eax
c001577c:	e8 05 9d ff ff       	call   c000f486 <File::tell(unsigned long long*)>
c0015781:	83 c4 10             	add    esp,0x10
c0015784:	85 c0                	test   eax,eax
c0015786:	0f 95 c0             	setne  al
c0015789:	31 d2                	xor    edx,edx
c001578b:	0f b6 c0             	movzx  eax,al
c001578e:	f7 d8                	neg    eax
c0015790:	83 d2 00             	adc    edx,0x0
c0015793:	83 c4 08             	add    esp,0x8
c0015796:	f7 da                	neg    edx
c0015798:	5b                   	pop    ebx
c0015799:	c3                   	ret    
c001579a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001579f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157a4:	83 c4 08             	add    esp,0x8
c00157a7:	5b                   	pop    ebx
c00157a8:	c3                   	ret    

c00157a9 <sysCallSizeFromFilename(regs*)>:
c00157a9:	57                   	push   edi
c00157aa:	56                   	push   esi
c00157ab:	53                   	push   ebx
c00157ac:	83 ec 10             	sub    esp,0x10
c00157af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00157b3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00157b6:	83 ff 02             	cmp    edi,0x2
c00157b9:	76 56                	jbe    c0015811 <sysCallSizeFromFilename(regs*)+0x68>
c00157bb:	83 ec 0c             	sub    esp,0xc
c00157be:	68 14 01 00 00       	push   0x114
c00157c3:	e8 28 95 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00157c8:	83 c4 0c             	add    esp,0xc
c00157cb:	89 c3                	mov    ebx,eax
c00157cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157d2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00157d5:	57                   	push   edi
c00157d6:	53                   	push   ebx
c00157d7:	e8 32 9b ff ff       	call   c000f30e <File::File(char const*, Process*)>
c00157dc:	83 c4 0c             	add    esp,0xc
c00157df:	8d 44 24 13          	lea    eax,[esp+0x13]
c00157e3:	50                   	push   eax
c00157e4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00157e7:	53                   	push   ebx
c00157e8:	e8 31 9e ff ff       	call   c000f61e <File::stat(unsigned long long*, bool*)>
c00157ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157f0:	89 c6                	mov    esi,eax
c00157f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	31 c0                	xor    eax,eax
c00157fc:	85 f6                	test   esi,esi
c00157fe:	0f 95 c0             	setne  al
c0015801:	31 d2                	xor    edx,edx
c0015803:	f7 d8                	neg    eax
c0015805:	83 d2 00             	adc    edx,0x0
c0015808:	83 c4 10             	add    esp,0x10
c001580b:	f7 da                	neg    edx
c001580d:	5b                   	pop    ebx
c001580e:	5e                   	pop    esi
c001580f:	5f                   	pop    edi
c0015810:	c3                   	ret    
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015819:	5b                   	pop    ebx
c001581a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001581f:	5e                   	pop    esi
c0015820:	5f                   	pop    edi
c0015821:	c3                   	ret    

c0015822 <sysCallSize(regs*)>:
c0015822:	53                   	push   ebx
c0015823:	83 ec 18             	sub    esp,0x18
c0015826:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001582a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001582d:	83 f8 02             	cmp    eax,0x2
c0015830:	76 33                	jbe    c0015865 <sysCallSize(regs*)+0x43>
c0015832:	83 ec 0c             	sub    esp,0xc
c0015835:	50                   	push   eax
c0015836:	e8 3e 82 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c001583b:	83 c4 0c             	add    esp,0xc
c001583e:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015842:	52                   	push   edx
c0015843:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015846:	50                   	push   eax
c0015847:	e8 d2 9d ff ff       	call   c000f61e <File::stat(unsigned long long*, bool*)>
c001584c:	83 c4 10             	add    esp,0x10
c001584f:	85 c0                	test   eax,eax
c0015851:	0f 95 c0             	setne  al
c0015854:	31 d2                	xor    edx,edx
c0015856:	0f b6 c0             	movzx  eax,al
c0015859:	f7 d8                	neg    eax
c001585b:	83 d2 00             	adc    edx,0x0
c001585e:	83 c4 18             	add    esp,0x18
c0015861:	f7 da                	neg    edx
c0015863:	5b                   	pop    ebx
c0015864:	c3                   	ret    
c0015865:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001586a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001586f:	83 c4 18             	add    esp,0x18
c0015872:	5b                   	pop    ebx
c0015873:	c3                   	ret    

c0015874 <sysCallClose(regs*)>:
c0015874:	53                   	push   ebx
c0015875:	83 ec 08             	sub    esp,0x8
c0015878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001587c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001587f:	83 f8 02             	cmp    eax,0x2
c0015882:	76 2f                	jbe    c00158b3 <sysCallClose(regs*)+0x3f>
c0015884:	83 ec 0c             	sub    esp,0xc
c0015887:	50                   	push   eax
c0015888:	e8 ec 81 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c001588d:	89 c3                	mov    ebx,eax
c001588f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015892:	e8 39 9b ff ff       	call   c000f3d0 <File::close()>
c0015897:	83 c4 10             	add    esp,0x10
c001589a:	85 db                	test   ebx,ebx
c001589c:	74 0c                	je     c00158aa <sysCallClose(regs*)+0x36>
c001589e:	83 ec 0c             	sub    esp,0xc
c00158a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158a3:	53                   	push   ebx
c00158a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	31 c0                	xor    eax,eax
c00158ac:	31 d2                	xor    edx,edx
c00158ae:	83 c4 08             	add    esp,0x8
c00158b1:	5b                   	pop    ebx
c00158b2:	c3                   	ret    
c00158b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158bd:	83 c4 08             	add    esp,0x8
c00158c0:	5b                   	pop    ebx
c00158c1:	c3                   	ret    

c00158c2 <sysCallOpenDir(regs*)>:
c00158c2:	56                   	push   esi
c00158c3:	53                   	push   ebx
c00158c4:	53                   	push   ebx
c00158c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158c9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00158cc:	85 f6                	test   esi,esi
c00158ce:	74 51                	je     c0015921 <sysCallOpenDir(regs*)+0x5f>
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	68 14 01 00 00       	push   0x114
c00158d8:	e8 13 94 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00158dd:	83 c4 0c             	add    esp,0xc
c00158e0:	89 c6                	mov    esi,eax
c00158e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158ed:	56                   	push   esi
c00158ee:	e8 dd 9e ff ff       	call   c000f7d0 <Directory::Directory(char const*, Process*)>
c00158f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00158f6:	e8 39 9f ff ff       	call   c000f834 <Directory::open()>
c00158fb:	83 c4 10             	add    esp,0x10
c00158fe:	85 c0                	test   eax,eax
c0015900:	75 1f                	jne    c0015921 <sysCallOpenDir(regs*)+0x5f>
c0015902:	83 ec 0c             	sub    esp,0xc
c0015905:	56                   	push   esi
c0015906:	e8 09 80 ff ff       	call   c000d914 <UnixFile::getFileDescriptor()>
c001590b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	89 02                	mov    DWORD PTR [edx],eax
c0015913:	c1 f8 1f             	sar    eax,0x1f
c0015916:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015919:	31 c0                	xor    eax,eax
c001591b:	59                   	pop    ecx
c001591c:	31 d2                	xor    edx,edx
c001591e:	5b                   	pop    ebx
c001591f:	5e                   	pop    esi
c0015920:	c3                   	ret    
c0015921:	59                   	pop    ecx
c0015922:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015927:	ba ff ff ff ff       	mov    edx,0xffffffff
c001592c:	5b                   	pop    ebx
c001592d:	5e                   	pop    esi
c001592e:	c3                   	ret    

c001592f <sysCallMakeDir(regs*)>:
c001592f:	56                   	push   esi
c0015930:	53                   	push   ebx
c0015931:	83 ec 10             	sub    esp,0x10
c0015934:	68 14 01 00 00       	push   0x114
c0015939:	e8 b2 93 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001593e:	83 c4 0c             	add    esp,0xc
c0015941:	89 c3                	mov    ebx,eax
c0015943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015948:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001594b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001594f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015952:	53                   	push   ebx
c0015953:	e8 78 9e ff ff       	call   c000f7d0 <Directory::Directory(char const*, Process*)>
c0015958:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001595b:	e8 b4 a0 ff ff       	call   c000fa14 <Directory::create()>
c0015960:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015963:	89 c6                	mov    esi,eax
c0015965:	e8 26 9f ff ff       	call   c000f890 <Directory::close()>
c001596a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001596c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001596f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015972:	31 c0                	xor    eax,eax
c0015974:	85 f6                	test   esi,esi
c0015976:	0f 95 c0             	setne  al
c0015979:	31 d2                	xor    edx,edx
c001597b:	f7 d8                	neg    eax
c001597d:	83 d2 00             	adc    edx,0x0
c0015980:	83 c4 14             	add    esp,0x14
c0015983:	f7 da                	neg    edx
c0015985:	5b                   	pop    ebx
c0015986:	5e                   	pop    esi
c0015987:	c3                   	ret    

c0015988 <sysCallCloseDir(regs*)>:
c0015988:	53                   	push   ebx
c0015989:	83 ec 08             	sub    esp,0x8
c001598c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015990:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015993:	83 f8 02             	cmp    eax,0x2
c0015996:	76 2f                	jbe    c00159c7 <sysCallCloseDir(regs*)+0x3f>
c0015998:	83 ec 0c             	sub    esp,0xc
c001599b:	50                   	push   eax
c001599c:	e8 d8 80 ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c00159a1:	89 c3                	mov    ebx,eax
c00159a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00159a6:	e8 e5 9e ff ff       	call   c000f890 <Directory::close()>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	85 db                	test   ebx,ebx
c00159b0:	74 0c                	je     c00159be <sysCallCloseDir(regs*)+0x36>
c00159b2:	83 ec 0c             	sub    esp,0xc
c00159b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159b7:	53                   	push   ebx
c00159b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	31 c0                	xor    eax,eax
c00159c0:	31 d2                	xor    edx,edx
c00159c2:	83 c4 08             	add    esp,0x8
c00159c5:	5b                   	pop    ebx
c00159c6:	c3                   	ret    
c00159c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159d1:	83 c4 08             	add    esp,0x8
c00159d4:	5b                   	pop    ebx
c00159d5:	c3                   	ret    

c00159d6 <sysCallWait(regs*)>:
c00159d6:	83 ec 10             	sub    esp,0x10
c00159d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159dd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00159e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00159e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159e6:	e8 41 22 00 00       	call   c0017c2c <waitTask(int, int*, int)>
c00159eb:	83 c4 1c             	add    esp,0x1c
c00159ee:	99                   	cdq    
c00159ef:	c3                   	ret    

c00159f0 <sysCallFork(regs*)>:
c00159f0:	83 ec 18             	sub    esp,0x18
c00159f3:	68 cf 12 02 c0       	push   0xc00212cf
c00159f8:	e8 e2 93 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00159fd:	58                   	pop    eax
c00159fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a02:	e8 f3 1f 00 00       	call   c00179fa <forkProcess(regs*)>
c0015a07:	83 c4 1c             	add    esp,0x1c
c0015a0a:	99                   	cdq    
c0015a0b:	c3                   	ret    

c0015a0c <sysCallExecve(regs*)>:
c0015a0c:	53                   	push   ebx
c0015a0d:	81 ec 24 01 00 00    	sub    esp,0x124
c0015a13:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015a1a:	68 dd 12 02 c0       	push   0xc00212dd
c0015a1f:	e8 bb 93 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0015a24:	83 c4 0c             	add    esp,0xc
c0015a27:	68 00 01 00 00       	push   0x100
c0015a2c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015a30:	50                   	push   eax
c0015a31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a36:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a39:	e8 41 9c ff ff       	call   c000f67f <getcwd(Process*, char*, int)>
c0015a3e:	83 c4 0c             	add    esp,0xc
c0015a41:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a44:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a47:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a4a:	e8 11 23 00 00       	call   c0017d60 <execveProcess(char const*, char* const*, char* const*)>
c0015a4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a54:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a59:	81 c4 28 01 00 00    	add    esp,0x128
c0015a5f:	5b                   	pop    ebx
c0015a60:	c3                   	ret    

c0015a61 <sysCallRmdir(regs*)>:
c0015a61:	56                   	push   esi
c0015a62:	53                   	push   ebx
c0015a63:	83 ec 10             	sub    esp,0x10
c0015a66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a6a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015a6d:	68 14 01 00 00       	push   0x114
c0015a72:	e8 79 92 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0015a77:	83 c4 0c             	add    esp,0xc
c0015a7a:	89 c3                	mov    ebx,eax
c0015a7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a81:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a84:	56                   	push   esi
c0015a85:	53                   	push   ebx
c0015a86:	e8 83 98 ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0015a8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a8e:	e8 57 9a ff ff       	call   c000f4ea <File::unlink()>
c0015a93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a96:	89 c6                	mov    esi,eax
c0015a98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a9d:	31 c0                	xor    eax,eax
c0015a9f:	85 f6                	test   esi,esi
c0015aa1:	0f 95 c0             	setne  al
c0015aa4:	31 d2                	xor    edx,edx
c0015aa6:	f7 d8                	neg    eax
c0015aa8:	83 d2 00             	adc    edx,0x0
c0015aab:	83 c4 14             	add    esp,0x14
c0015aae:	f7 da                	neg    edx
c0015ab0:	5b                   	pop    ebx
c0015ab1:	5e                   	pop    esi
c0015ab2:	c3                   	ret    

c0015ab3 <sysCallUnlink(regs*)>:
c0015ab3:	56                   	push   esi
c0015ab4:	53                   	push   ebx
c0015ab5:	83 ec 10             	sub    esp,0x10
c0015ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015abc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015abf:	68 14 01 00 00       	push   0x114
c0015ac4:	e8 27 92 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0015ac9:	83 c4 0c             	add    esp,0xc
c0015acc:	89 c3                	mov    ebx,eax
c0015ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ad6:	56                   	push   esi
c0015ad7:	53                   	push   ebx
c0015ad8:	e8 31 98 ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0015add:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ae0:	e8 05 9a ff ff       	call   c000f4ea <File::unlink()>
c0015ae5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ae8:	89 c6                	mov    esi,eax
c0015aea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aef:	31 c0                	xor    eax,eax
c0015af1:	85 f6                	test   esi,esi
c0015af3:	0f 95 c0             	setne  al
c0015af6:	31 d2                	xor    edx,edx
c0015af8:	f7 d8                	neg    eax
c0015afa:	83 d2 00             	adc    edx,0x0
c0015afd:	83 c4 14             	add    esp,0x14
c0015b00:	f7 da                	neg    edx
c0015b02:	5b                   	pop    ebx
c0015b03:	5e                   	pop    esi
c0015b04:	c3                   	ret    

c0015b05 <sysCallGetArgv(regs*)>:
c0015b05:	83 ec 0c             	sub    esp,0xc
c0015b08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b0c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b0f:	85 c0                	test   eax,eax
c0015b11:	78 2b                	js     c0015b3e <sysCallGetArgv(regs*)+0x39>
c0015b13:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015b19:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015b1c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015b22:	7d 1a                	jge    c0015b3e <sysCallGetArgv(regs*)+0x39>
c0015b24:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015b2b:	85 c0                	test   eax,eax
c0015b2d:	74 17                	je     c0015b46 <sysCallGetArgv(regs*)+0x41>
c0015b2f:	83 ec 08             	sub    esp,0x8
c0015b32:	50                   	push   eax
c0015b33:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015b36:	e8 6c ab fe ff       	call   c00006a7 <strcpy>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	31 c0                	xor    eax,eax
c0015b40:	31 d2                	xor    edx,edx
c0015b42:	83 c4 0c             	add    esp,0xc
c0015b45:	c3                   	ret    
c0015b46:	b8 01 00 00 00       	mov    eax,0x1
c0015b4b:	31 d2                	xor    edx,edx
c0015b4d:	83 c4 0c             	add    esp,0xc
c0015b50:	c3                   	ret    

c0015b51 <sysCallTTYName(regs*)>:
c0015b51:	56                   	push   esi
c0015b52:	53                   	push   ebx
c0015b53:	53                   	push   ebx
c0015b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b58:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015b5b:	85 c0                	test   eax,eax
c0015b5d:	74 58                	je     c0015bb7 <sysCallTTYName(regs*)+0x66>
c0015b5f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015b62:	83 f8 02             	cmp    eax,0x2
c0015b65:	77 3e                	ja     c0015ba5 <sysCallTTYName(regs*)+0x54>
c0015b67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b6f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b75:	85 db                	test   ebx,ebx
c0015b77:	74 3e                	je     c0015bb7 <sysCallTTYName(regs*)+0x66>
c0015b79:	83 ec 0c             	sub    esp,0xc
c0015b7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b7e:	53                   	push   ebx
c0015b7f:	ff 10                	call   DWORD PTR [eax]
c0015b81:	83 c4 10             	add    esp,0x10
c0015b84:	84 c0                	test   al,al
c0015b86:	74 3a                	je     c0015bc2 <sysCallTTYName(regs*)+0x71>
c0015b88:	83 ec 08             	sub    esp,0x8
c0015b8b:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015b91:	53                   	push   ebx
c0015b92:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015b95:	e8 0d ab fe ff       	call   c00006a7 <strcpy>
c0015b9a:	83 c4 10             	add    esp,0x10
c0015b9d:	31 c0                	xor    eax,eax
c0015b9f:	59                   	pop    ecx
c0015ba0:	31 d2                	xor    edx,edx
c0015ba2:	5b                   	pop    ebx
c0015ba3:	5e                   	pop    esi
c0015ba4:	c3                   	ret    
c0015ba5:	83 ec 0c             	sub    esp,0xc
c0015ba8:	50                   	push   eax
c0015ba9:	e8 cb 7e ff ff       	call   c000da79 <getFromFileDescriptor(int)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	89 c3                	mov    ebx,eax
c0015bb3:	85 db                	test   ebx,ebx
c0015bb5:	75 c2                	jne    c0015b79 <sysCallTTYName(regs*)+0x28>
c0015bb7:	59                   	pop    ecx
c0015bb8:	b8 01 00 00 00       	mov    eax,0x1
c0015bbd:	31 d2                	xor    edx,edx
c0015bbf:	5b                   	pop    ebx
c0015bc0:	5e                   	pop    esi
c0015bc1:	c3                   	ret    
c0015bc2:	59                   	pop    ecx
c0015bc3:	b8 02 00 00 00       	mov    eax,0x2
c0015bc8:	31 d2                	xor    edx,edx
c0015bca:	5b                   	pop    ebx
c0015bcb:	5e                   	pop    esi
c0015bcc:	c3                   	ret    

c0015bcd <sysCallGetEnv(regs*)>:
c0015bcd:	83 ec 0c             	sub    esp,0xc
c0015bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bd4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015bd7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015bda:	85 c9                	test   ecx,ecx
c0015bdc:	75 0c                	jne    c0015bea <sysCallGetEnv(regs*)+0x1d>
c0015bde:	85 d2                	test   edx,edx
c0015be0:	74 14                	je     c0015bf6 <sysCallGetEnv(regs*)+0x29>
c0015be2:	31 c0                	xor    eax,eax
c0015be4:	31 d2                	xor    edx,edx
c0015be6:	83 c4 0c             	add    esp,0xc
c0015be9:	c3                   	ret    
c0015bea:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015bed:	85 d2                	test   edx,edx
c0015bef:	74 1b                	je     c0015c0c <sysCallGetEnv(regs*)+0x3f>
c0015bf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015bf4:	eb ec                	jmp    c0015be2 <sysCallGetEnv(regs*)+0x15>
c0015bf6:	83 ec 0c             	sub    esp,0xc
c0015bf9:	68 28 13 02 c0       	push   0xc0021328
c0015bfe:	e8 22 aa fe ff       	call   c0000625 <strlen>
c0015c03:	83 c4 10             	add    esp,0x10
c0015c06:	31 d2                	xor    edx,edx
c0015c08:	83 c4 0c             	add    esp,0xc
c0015c0b:	c3                   	ret    
c0015c0c:	83 ec 08             	sub    esp,0x8
c0015c0f:	68 28 13 02 c0       	push   0xc0021328
c0015c14:	50                   	push   eax
c0015c15:	e8 8d aa fe ff       	call   c00006a7 <strcpy>
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	eb c3                	jmp    c0015be2 <sysCallGetEnv(regs*)+0x15>

c0015c1f <sysCallUSleep(regs*)>:
c0015c1f:	83 ec 14             	sub    esp,0x14
c0015c22:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015c27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c2b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015c32:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015c35:	01 ca                	add    edx,ecx
c0015c37:	52                   	push   edx
c0015c38:	50                   	push   eax
c0015c39:	e8 87 20 00 00       	call   c0017cc5 <nanoSleep(unsigned long long)>
c0015c3e:	31 c0                	xor    eax,eax
c0015c40:	31 d2                	xor    edx,edx
c0015c42:	83 c4 1c             	add    esp,0x1c
c0015c45:	c3                   	ret    

c0015c46 <sysCallSpawn(regs*)>:
c0015c46:	56                   	push   esi
c0015c47:	53                   	push   ebx
c0015c48:	53                   	push   ebx
c0015c49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c4d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015c50:	85 f6                	test   esi,esi
c0015c52:	75 08                	jne    c0015c5c <sysCallSpawn(regs*)+0x16>
c0015c54:	59                   	pop    ecx
c0015c55:	31 c0                	xor    eax,eax
c0015c57:	31 d2                	xor    edx,edx
c0015c59:	5b                   	pop    ebx
c0015c5a:	5e                   	pop    esi
c0015c5b:	c3                   	ret    
c0015c5c:	83 ec 0c             	sub    esp,0xc
c0015c5f:	68 ed 12 02 c0       	push   0xc00212ed
c0015c64:	e8 76 91 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0015c69:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0015c70:	e8 7b 90 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0015c75:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015c78:	89 c6                	mov    esi,eax
c0015c7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c82:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c85:	56                   	push   esi
c0015c86:	e8 29 16 00 00       	call   c00172b4 <Process::Process(char const*, Process*, char**)>
c0015c8b:	83 c4 20             	add    esp,0x20
c0015c8e:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015c95:	75 bd                	jne    c0015c54 <sysCallSpawn(regs*)+0xe>
c0015c97:	83 ec 0c             	sub    esp,0xc
c0015c9a:	68 f8 12 02 c0       	push   0xc00212f8
c0015c9f:	e8 3b 91 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0015ca4:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ca7:	e8 6e 1b 00 00       	call   c001781a <Process::createUserThread()>
c0015cac:	8b 06                	mov    eax,DWORD PTR [esi]
c0015cae:	83 c4 10             	add    esp,0x10
c0015cb1:	99                   	cdq    
c0015cb2:	59                   	pop    ecx
c0015cb3:	5b                   	pop    ebx
c0015cb4:	5e                   	pop    esi
c0015cb5:	c3                   	ret    

c0015cb6 <sysAppSettings(regs*)>:
c0015cb6:	53                   	push   ebx
c0015cb7:	83 ec 08             	sub    esp,0x8
c0015cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cbe:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015cc1:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015cc7:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015ccc:	66 3d c0 09          	cmp    ax,0x9c0
c0015cd0:	75 2f                	jne    c0015d01 <sysAppSettings(regs*)+0x4b>
c0015cd2:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015cd8:	83 e0 1f             	and    eax,0x1f
c0015cdb:	3c 01                	cmp    al,0x1
c0015cdd:	74 2e                	je     c0015d0d <sysAppSettings(regs*)+0x57>
c0015cdf:	3c 07                	cmp    al,0x7
c0015ce1:	0f 84 bd 00 00 00    	je     c0015da4 <sysAppSettings(regs*)+0xee>
c0015ce7:	84 c0                	test   al,al
c0015ce9:	0f 84 dc 00 00 00    	je     c0015dcb <sysAppSettings(regs*)+0x115>
c0015cef:	3c 08                	cmp    al,0x8
c0015cf1:	74 6d                	je     c0015d60 <sysAppSettings(regs*)+0xaa>
c0015cf3:	0f b6 c0             	movzx  eax,al
c0015cf6:	83 c4 08             	add    esp,0x8
c0015cf9:	05 e8 03 00 00       	add    eax,0x3e8
c0015cfe:	5b                   	pop    ebx
c0015cff:	99                   	cdq    
c0015d00:	c3                   	ret    
c0015d01:	b8 01 00 00 00       	mov    eax,0x1
c0015d06:	31 d2                	xor    edx,edx
c0015d08:	83 c4 08             	add    esp,0x8
c0015d0b:	5b                   	pop    ebx
c0015d0c:	c3                   	ret    
c0015d0d:	51                   	push   ecx
c0015d0e:	68 00 01 00 00       	push   0x100
c0015d13:	6a 00                	push   0x0
c0015d15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d1d:	83 c0 0c             	add    eax,0xc
c0015d20:	50                   	push   eax
c0015d21:	e8 e2 a8 fe ff       	call   c0000608 <memset>
c0015d26:	83 c4 0c             	add    esp,0xc
c0015d29:	68 ff 00 00 00       	push   0xff
c0015d2e:	53                   	push   ebx
c0015d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d37:	83 c0 0c             	add    eax,0xc
c0015d3a:	50                   	push   eax
c0015d3b:	e8 92 a8 fe ff       	call   c00005d2 <memcpy>
c0015d40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d45:	5b                   	pop    ebx
c0015d46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d49:	5a                   	pop    edx
c0015d4a:	8d 50 0c             	lea    edx,[eax+0xc]
c0015d4d:	52                   	push   edx
c0015d4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d54:	e8 e1 6f ff ff       	call   c000cd3a <VgaText::setTitle(char*)>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	31 c0                	xor    eax,eax
c0015d5e:	eb a6                	jmp    c0015d06 <sysAppSettings(regs*)+0x50>
c0015d60:	83 ec 08             	sub    esp,0x8
c0015d63:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015d69:	83 e0 0f             	and    eax,0xf
c0015d6c:	50                   	push   eax
c0015d6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d7b:	e8 aa 6f ff ff       	call   c000cd2a <VgaText::setTitleColour(VgaColour)>
c0015d80:	58                   	pop    eax
c0015d81:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015d87:	5a                   	pop    edx
c0015d88:	c1 e8 04             	shr    eax,0x4
c0015d8b:	83 e0 0f             	and    eax,0xf
c0015d8e:	50                   	push   eax
c0015d8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d94:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d9d:	e8 78 6f ff ff       	call   c000cd1a <VgaText::setTitleTextColour(VgaColour)>
c0015da2:	eb b5                	jmp    c0015d59 <sysAppSettings(regs*)+0xa3>
c0015da4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015dac:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015db2:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015db8:	c0 e8 06             	shr    al,0x6
c0015dbb:	83 e0 01             	and    eax,0x1
c0015dbe:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015dc4:	31 c0                	xor    eax,eax
c0015dc6:	e9 3b ff ff ff       	jmp    c0015d06 <sysAppSettings(regs*)+0x50>
c0015dcb:	b8 02 00 00 00       	mov    eax,0x2
c0015dd0:	e9 31 ff ff ff       	jmp    c0015d06 <sysAppSettings(regs*)+0x50>

c0015dd5 <sysSetFatAttrib(regs*)>:
c0015dd5:	57                   	push   edi
c0015dd6:	56                   	push   esi
c0015dd7:	53                   	push   ebx
c0015dd8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ddc:	83 ec 0c             	sub    esp,0xc
c0015ddf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015de2:	68 14 01 00 00       	push   0x114
c0015de7:	e8 04 8f ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0015dec:	83 c4 0c             	add    esp,0xc
c0015def:	89 c3                	mov    ebx,eax
c0015df1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015df6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015df9:	57                   	push   edi
c0015dfa:	53                   	push   ebx
c0015dfb:	e8 0e 95 ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0015e00:	83 c4 0c             	add    esp,0xc
c0015e03:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015e06:	0f b6 d4             	movzx  edx,ah
c0015e09:	0f b6 c0             	movzx  eax,al
c0015e0c:	52                   	push   edx
c0015e0d:	50                   	push   eax
c0015e0e:	53                   	push   ebx
c0015e0f:	e8 70 97 ff ff       	call   c000f584 <File::chfatattr(unsigned char, unsigned char)>
c0015e14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e17:	89 c6                	mov    esi,eax
c0015e19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e1e:	83 c4 10             	add    esp,0x10
c0015e21:	31 c0                	xor    eax,eax
c0015e23:	5b                   	pop    ebx
c0015e24:	85 f6                	test   esi,esi
c0015e26:	5e                   	pop    esi
c0015e27:	0f 95 c0             	setne  al
c0015e2a:	5f                   	pop    edi
c0015e2b:	31 d2                	xor    edx,edx
c0015e2d:	f7 d8                	neg    eax
c0015e2f:	83 d2 00             	adc    edx,0x0
c0015e32:	f7 da                	neg    edx
c0015e34:	c3                   	ret    

c0015e35 <sysPanic(regs*)>:
c0015e35:	83 ec 18             	sub    esp,0x18
c0015e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e3c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015e3f:	e8 04 eb ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0015e44:	c7 04 24 05 13 02 c0 	mov    DWORD PTR [esp],0xc0021305
c0015e4b:	e8 f8 ea ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0015e50:	b8 01 00 00 00       	mov    eax,0x1
c0015e55:	31 d2                	xor    edx,edx
c0015e57:	83 c4 1c             	add    esp,0x1c
c0015e5a:	c3                   	ret    

c0015e5b <sysPipe(regs*)>:
c0015e5b:	57                   	push   edi
c0015e5c:	56                   	push   esi
c0015e5d:	53                   	push   ebx
c0015e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e62:	83 ec 0c             	sub    esp,0xc
c0015e65:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015e68:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015e6b:	6a 20                	push   0x20
c0015e6d:	e8 7e 8e ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0015e72:	89 c3                	mov    ebx,eax
c0015e74:	58                   	pop    eax
c0015e75:	5a                   	pop    edx
c0015e76:	68 00 50 00 00       	push   0x5000
c0015e7b:	53                   	push   ebx
c0015e7c:	e8 f7 67 ff ff       	call   c000c678 <Pipe::Pipe(int)>
c0015e81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e84:	e8 8b 7a ff ff       	call   c000d914 <UnixFile::getFileDescriptor()>
c0015e89:	89 07                	mov    DWORD PTR [edi],eax
c0015e8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e8e:	e8 81 7a ff ff       	call   c000d914 <UnixFile::getFileDescriptor()>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	89 06                	mov    DWORD PTR [esi],eax
c0015e98:	31 d2                	xor    edx,edx
c0015e9a:	5b                   	pop    ebx
c0015e9b:	31 c0                	xor    eax,eax
c0015e9d:	5e                   	pop    esi
c0015e9e:	5f                   	pop    edi
c0015e9f:	c3                   	ret    

c0015ea0 <sysGetUnixTime(regs*)>:
c0015ea0:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c0015ea5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015eab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eaf:	e9 22 9e ff ff       	jmp    c000fcd6 <Clock::timeInSecondsLocal()>

c0015eb4 <string_ends_with(char const*, char const*)>:
c0015eb4:	57                   	push   edi
c0015eb5:	56                   	push   esi
c0015eb6:	53                   	push   ebx
c0015eb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ebb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015ebf:	83 ec 0c             	sub    esp,0xc
c0015ec2:	53                   	push   ebx
c0015ec3:	e8 5d a7 fe ff       	call   c0000625 <strlen>
c0015ec8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ecb:	89 c6                	mov    esi,eax
c0015ecd:	e8 53 a7 fe ff       	call   c0000625 <strlen>
c0015ed2:	83 c4 10             	add    esp,0x10
c0015ed5:	39 c6                	cmp    esi,eax
c0015ed7:	7d 06                	jge    c0015edf <string_ends_with(char const*, char const*)+0x2b>
c0015ed9:	5b                   	pop    ebx
c0015eda:	31 c0                	xor    eax,eax
c0015edc:	5e                   	pop    esi
c0015edd:	5f                   	pop    edi
c0015ede:	c3                   	ret    
c0015edf:	83 ec 08             	sub    esp,0x8
c0015ee2:	29 c6                	sub    esi,eax
c0015ee4:	57                   	push   edi
c0015ee5:	01 f3                	add    ebx,esi
c0015ee7:	53                   	push   ebx
c0015ee8:	e8 0b a8 fe ff       	call   c00006f8 <strcmp>
c0015eed:	83 c4 10             	add    esp,0x10
c0015ef0:	85 c0                	test   eax,eax
c0015ef2:	5b                   	pop    ebx
c0015ef3:	0f 94 c0             	sete   al
c0015ef6:	5e                   	pop    esi
c0015ef7:	0f b6 c0             	movzx  eax,al
c0015efa:	5f                   	pop    edi
c0015efb:	c3                   	ret    

c0015efc <setupSystemCalls()>:
c0015efc:	c7 05 c0 37 02 c0 49 53 01 c0 	mov    DWORD PTR ds:0xc00237c0,0xc0015349
c0015f06:	c7 05 c4 37 02 c0 77 51 01 c0 	mov    DWORD PTR ds:0xc00237c4,0xc0015177
c0015f10:	c7 05 c8 37 02 c0 8c 52 01 c0 	mov    DWORD PTR ds:0xc00237c8,0xc001528c
c0015f1a:	c7 05 cc 37 02 c0 e1 52 01 c0 	mov    DWORD PTR ds:0xc00237cc,0xc00152e1
c0015f24:	c7 05 d0 37 02 c0 24 52 01 c0 	mov    DWORD PTR ds:0xc00237d0,0xc0015224
c0015f2e:	c7 05 d4 37 02 c0 63 53 01 c0 	mov    DWORD PTR ds:0xc00237d4,0xc0015363
c0015f38:	c7 05 d8 37 02 c0 dc 54 01 c0 	mov    DWORD PTR ds:0xc00237d8,0xc00154dc
c0015f42:	c7 05 dc 37 02 c0 fb 54 01 c0 	mov    DWORD PTR ds:0xc00237dc,0xc00154fb
c0015f4c:	c7 05 e4 37 02 c0 74 58 01 c0 	mov    DWORD PTR ds:0xc00237e4,0xc0015874
c0015f56:	c7 05 e0 37 02 c0 5a 55 01 c0 	mov    DWORD PTR ds:0xc00237e0,0xc001555a
c0015f60:	c7 05 e8 37 02 c0 c2 58 01 c0 	mov    DWORD PTR ds:0xc00237e8,0xc00158c2
c0015f6a:	c7 05 ec 37 02 c0 4a 56 01 c0 	mov    DWORD PTR ds:0xc00237ec,0xc001564a
c0015f74:	c7 05 f0 37 02 c0 6f 53 01 c0 	mov    DWORD PTR ds:0xc00237f0,0xc001536f
c0015f7e:	c7 05 f4 37 02 c0 74 53 01 c0 	mov    DWORD PTR ds:0xc00237f4,0xc0015374
c0015f88:	c7 05 f8 37 02 c0 2f 59 01 c0 	mov    DWORD PTR ds:0xc00237f8,0xc001592f
c0015f92:	c7 05 fc 37 02 c0 88 59 01 c0 	mov    DWORD PTR ds:0xc00237fc,0xc0015988
c0015f9c:	c7 05 00 38 02 c0 0c 57 01 c0 	mov    DWORD PTR ds:0xc0023800,0xc001570c
c0015fa6:	c7 05 04 38 02 c0 5d 57 01 c0 	mov    DWORD PTR ds:0xc0023804,0xc001575d
c0015fb0:	c7 05 08 38 02 c0 22 58 01 c0 	mov    DWORD PTR ds:0xc0023808,0xc0015822
c0015fba:	c7 05 0c 38 02 c0 79 53 01 c0 	mov    DWORD PTR ds:0xc002380c,0xc0015379
c0015fc4:	c7 05 10 38 02 c0 d6 59 01 c0 	mov    DWORD PTR ds:0xc0023810,0xc00159d6
c0015fce:	c7 05 14 38 02 c0 f0 59 01 c0 	mov    DWORD PTR ds:0xc0023814,0xc00159f0
c0015fd8:	c7 05 18 38 02 c0 0c 5a 01 c0 	mov    DWORD PTR ds:0xc0023818,0xc0015a0c
c0015fe2:	c7 05 1c 38 02 c0 61 5a 01 c0 	mov    DWORD PTR ds:0xc002381c,0xc0015a61
c0015fec:	c7 05 20 38 02 c0 b3 5a 01 c0 	mov    DWORD PTR ds:0xc0023820,0xc0015ab3
c0015ff6:	c7 05 24 38 02 c0 83 53 01 c0 	mov    DWORD PTR ds:0xc0023824,0xc0015383
c0016000:	c7 05 28 38 02 c0 05 5b 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc0015b05
c001600a:	c7 05 2c 38 02 c0 17 55 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc0015517
c0016014:	c7 05 30 38 02 c0 51 5b 01 c0 	mov    DWORD PTR ds:0xc0023830,0xc0015b51
c001601e:	c7 05 34 38 02 c0 b9 56 01 c0 	mov    DWORD PTR ds:0xc0023834,0xc00156b9
c0016028:	c7 05 38 38 02 c0 1f 5c 01 c0 	mov    DWORD PTR ds:0xc0023838,0xc0015c1f
c0016032:	c7 05 3c 38 02 c0 a9 57 01 c0 	mov    DWORD PTR ds:0xc002383c,0xc00157a9
c001603c:	c7 05 40 38 02 c0 46 5c 01 c0 	mov    DWORD PTR ds:0xc0023840,0xc0015c46
c0016046:	c7 05 44 38 02 c0 cd 5b 01 c0 	mov    DWORD PTR ds:0xc0023844,0xc0015bcd
c0016050:	c7 05 48 38 02 c0 b6 5c 01 c0 	mov    DWORD PTR ds:0xc0023848,0xc0015cb6
c001605a:	c7 05 4c 38 02 c0 93 53 01 c0 	mov    DWORD PTR ds:0xc002384c,0xc0015393
c0016064:	c7 05 50 38 02 c0 fd 53 01 c0 	mov    DWORD PTR ds:0xc0023850,0xc00153fd
c001606e:	c7 05 54 38 02 c0 43 54 01 c0 	mov    DWORD PTR ds:0xc0023854,0xc0015443
c0016078:	c7 05 58 38 02 c0 d5 5d 01 c0 	mov    DWORD PTR ds:0xc0023858,0xc0015dd5
c0016082:	c7 05 5c 38 02 c0 35 5e 01 c0 	mov    DWORD PTR ds:0xc002385c,0xc0015e35
c001608c:	c7 05 60 38 02 c0 94 54 01 c0 	mov    DWORD PTR ds:0xc0023860,0xc0015494
c0016096:	c7 05 64 38 02 c0 5b 5e 01 c0 	mov    DWORD PTR ds:0xc0023864,0xc0015e5b
c00160a0:	c7 05 68 38 02 c0 a0 5e 01 c0 	mov    DWORD PTR ds:0xc0023868,0xc0015ea0
c00160aa:	c7 05 6c 38 02 c0 8f 51 01 c0 	mov    DWORD PTR ds:0xc002386c,0xc001518f
c00160b4:	c3                   	ret    

c00160b5 <systemCall(regs*, void*)>:
c00160b5:	53                   	push   ebx
c00160b6:	83 ec 08             	sub    esp,0x8
c00160b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160bd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00160c0:	83 f8 7f             	cmp    eax,0x7f
c00160c3:	77 16                	ja     c00160db <systemCall(regs*, void*)+0x26>
c00160c5:	8b 14 85 c0 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc840]
c00160cc:	85 d2                	test   edx,edx
c00160ce:	74 0b                	je     c00160db <systemCall(regs*, void*)+0x26>
c00160d0:	83 ec 0c             	sub    esp,0xc
c00160d3:	53                   	push   ebx
c00160d4:	ff d2                	call   edx
c00160d6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00160d9:	eb 0d                	jmp    c00160e8 <systemCall(regs*, void*)+0x33>
c00160db:	52                   	push   edx
c00160dc:	52                   	push   edx
c00160dd:	50                   	push   eax
c00160de:	68 14 13 02 c0       	push   0xc0021314
c00160e3:	e8 f7 8c ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00160e8:	83 c4 10             	add    esp,0x10
c00160eb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00160f0:	31 d2                	xor    edx,edx
c00160f2:	83 c4 08             	add    esp,0x8
c00160f5:	5b                   	pop    ebx
c00160f6:	c3                   	ret    

c00160f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00160f7:	55                   	push   ebp
c00160f8:	89 e5                	mov    ebp,esp
c00160fa:	57                   	push   edi
c00160fb:	56                   	push   esi
c00160fc:	53                   	push   ebx
c00160fd:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016103:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016106:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016109:	85 c0                	test   eax,eax
c001610b:	0f 95 c1             	setne  cl
c001610e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016112:	0f 94 c2             	sete   dl
c0016115:	84 d1                	test   cl,dl
c0016117:	74 26                	je     c001613f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016119:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016120:	74 1d                	je     c001613f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016122:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016125:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001612b:	89 d6                	mov    esi,edx
c001612d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016133:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016139:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001613c:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	05 ff 0f 00 00       	add    eax,0xfff
c0016147:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001614a:	6a 01                	push   0x1
c001614c:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016152:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016158:	e8 02 7a ff ff       	call   c000db5f <Virt::allocateKernelVirtualPages(int)>
c001615d:	83 c4 10             	add    esp,0x10
c0016160:	89 c6                	mov    esi,eax
c0016162:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016168:	0f 86 21 01 00 00    	jbe    c001628f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001616e:	c1 eb 0c             	shr    ebx,0xc
c0016171:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001617b:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016181:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016184:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016187:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001618d:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016190:	29 d8                	sub    eax,ebx
c0016192:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016198:	0f 83 f4 00 00 00    	jae    c0016292 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001619e:	83 ec 0c             	sub    esp,0xc
c00161a1:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00161a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00161aa:	3d 00 10 00 00       	cmp    eax,0x1000
c00161af:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00161b1:	52                   	push   edx
c00161b2:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00161b8:	52                   	push   edx
c00161b9:	76 05                	jbe    c00161c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00161bb:	b8 00 10 00 00       	mov    eax,0x1000
c00161c0:	31 d2                	xor    edx,edx
c00161c2:	52                   	push   edx
c00161c3:	50                   	push   eax
c00161c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00161c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161ca:	83 c4 20             	add    esp,0x20
c00161cd:	85 c0                	test   eax,eax
c00161cf:	74 1f                	je     c00161f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00161d1:	51                   	push   ecx
c00161d2:	51                   	push   ecx
c00161d3:	50                   	push   eax
c00161d4:	68 74 13 02 c0       	push   0xc0021374
c00161d9:	e8 01 8c ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00161de:	89 34 24             	mov    DWORD PTR [esp],esi
c00161e1:	e8 af 7c ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c00161e6:	83 c4 10             	add    esp,0x10
c00161e9:	31 c0                	xor    eax,eax
c00161eb:	e9 7c 01 00 00       	jmp    c001636c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00161f0:	e8 17 14 00 00       	call   c001760c <lockScheduler()>
c00161f5:	e8 c8 5f ff ff       	call   c000c1c2 <Phys::allocatePage()>
c00161fa:	6a 07                	push   0x7
c00161fc:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016202:	56                   	push   esi
c0016203:	50                   	push   eax
c0016204:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001620a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001620d:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016213:	e8 7e 7f ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016218:	83 c4 0c             	add    esp,0xc
c001621b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016221:	6a 00                	push   0x0
c0016223:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016229:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001622c:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016232:	e8 bd 7d ff ff       	call   c000dff4 <VAS::mapOtherVASIn(bool, VAS*)>
c0016237:	58                   	pop    eax
c0016238:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001623e:	5a                   	pop    edx
c001623f:	68 07 04 00 00       	push   0x407
c0016244:	53                   	push   ebx
c0016245:	81 c3 00 10 00 00    	add    ebx,0x1000
c001624b:	50                   	push   eax
c001624c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016252:	6a 00                	push   0x0
c0016254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001625c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016262:	e8 2f 86 ff ff       	call   c000e896 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016267:	83 c4 1c             	add    esp,0x1c
c001626a:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016270:	68 00 10 00 00       	push   0x1000
c0016275:	50                   	push   eax
c0016276:	56                   	push   esi
c0016277:	e8 56 a3 fe ff       	call   c00005d2 <memcpy>
c001627c:	e8 8d 13 00 00       	call   c001760e <unlockScheduler()>
c0016281:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016287:	83 c4 10             	add    esp,0x10
c001628a:	e9 f5 fe ff ff       	jmp    c0016184 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001628f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016292:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001629c:	0f 86 bc 00 00 00    	jbe    c001635e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c00162a2:	e8 65 13 00 00       	call   c001760c <lockScheduler()>
c00162a7:	51                   	push   ecx
c00162a8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00162ae:	6a 00                	push   0x0
c00162b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162b8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00162be:	e8 31 7d ff ff       	call   c000dff4 <VAS::mapOtherVASIn(bool, VAS*)>
c00162c3:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c00162c9:	83 c4 10             	add    esp,0x10
c00162cc:	c1 e8 0c             	shr    eax,0xc
c00162cf:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00162d9:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c00162df:	e8 de 5e ff ff       	call   c000c1c2 <Phys::allocatePage()>
c00162e4:	6a 07                	push   0x7
c00162e6:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00162ec:	56                   	push   esi
c00162ed:	50                   	push   eax
c00162ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162f4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00162f7:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00162fd:	e8 94 7e ff ff       	call   c000e196 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016302:	58                   	pop    eax
c0016303:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016309:	5a                   	pop    edx
c001630a:	68 07 04 00 00       	push   0x407
c001630f:	53                   	push   ebx
c0016310:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016316:	50                   	push   eax
c0016317:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001631d:	6a 00                	push   0x0
c001631f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016324:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016327:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001632d:	e8 64 85 ff ff       	call   c000e896 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016332:	83 c4 1c             	add    esp,0x1c
c0016335:	68 00 10 00 00       	push   0x1000
c001633a:	6a 00                	push   0x0
c001633c:	56                   	push   esi
c001633d:	e8 c6 a2 fe ff       	call   c0000608 <memset>
c0016342:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0016351:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016357:	77 86                	ja     c00162df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c0016359:	e8 b0 12 00 00       	call   c001760e <unlockScheduler()>
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	56                   	push   esi
c0016362:	e8 2e 7b ff ff       	call   c000de95 <Virt::freeKernelVirtualPages(unsigned long)>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	b0 01                	mov    al,0x1
c001636c:	8d 65 f4             	lea    esp,[ebp-0xc]
c001636f:	5b                   	pop    ebx
c0016370:	5e                   	pop    esi
c0016371:	5f                   	pop    edi
c0016372:	5d                   	pop    ebp
c0016373:	c3                   	ret    

c0016374 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016374:	55                   	push   ebp
c0016375:	57                   	push   edi
c0016376:	56                   	push   esi
c0016377:	53                   	push   ebx
c0016378:	83 ec 48             	sub    esp,0x48
c001637b:	68 14 01 00 00       	push   0x114
c0016380:	e8 6b 89 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0016385:	83 c4 0c             	add    esp,0xc
c0016388:	89 c6                	mov    esi,eax
c001638a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001638e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016392:	50                   	push   eax
c0016393:	e8 76 8f ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0016398:	58                   	pop    eax
c0016399:	5a                   	pop    edx
c001639a:	6a 01                	push   0x1
c001639c:	56                   	push   esi
c001639d:	e8 d0 8f ff ff       	call   c000f372 <File::open(FileOpenMode)>
c00163a2:	83 c4 10             	add    esp,0x10
c00163a5:	85 c0                	test   eax,eax
c00163a7:	0f 85 47 01 00 00    	jne    c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163ad:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00163b5:	83 ec 0c             	sub    esp,0xc
c00163b8:	6a 34                	push   0x34
c00163ba:	e8 59 58 ff ff       	call   c000bc18 <malloc>
c00163bf:	89 c3                	mov    ebx,eax
c00163c1:	58                   	pop    eax
c00163c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00163c4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00163c8:	57                   	push   edi
c00163c9:	53                   	push   ebx
c00163ca:	6a 00                	push   0x0
c00163cc:	6a 34                	push   0x34
c00163ce:	56                   	push   esi
c00163cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163d2:	83 c4 20             	add    esp,0x20
c00163d5:	85 c0                	test   eax,eax
c00163d7:	0f 85 17 01 00 00    	jne    c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163dd:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00163e3:	0f 85 0b 01 00 00    	jne    c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163ec:	85 c0                	test   eax,eax
c00163ee:	0f 84 00 01 00 00    	je     c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163f4:	31 d2                	xor    edx,edx
c00163f6:	55                   	push   ebp
c00163f7:	52                   	push   edx
c00163f8:	50                   	push   eax
c00163f9:	56                   	push   esi
c00163fa:	e8 31 90 ff ff       	call   c000f430 <File::seek(unsigned long long)>
c00163ff:	83 c4 10             	add    esp,0x10
c0016402:	85 c0                	test   eax,eax
c0016404:	0f 85 ea 00 00 00    	jne    c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016410:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016414:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016418:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001641c:	0f af c2             	imul   eax,edx
c001641f:	50                   	push   eax
c0016420:	e8 f3 57 ff ff       	call   c000bc18 <malloc>
c0016425:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016428:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001642c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001642e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016432:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016436:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001643a:	0f af c2             	imul   eax,edx
c001643d:	99                   	cdq    
c001643e:	52                   	push   edx
c001643f:	50                   	push   eax
c0016440:	56                   	push   esi
c0016441:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016444:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016447:	83 c4 20             	add    esp,0x20
c001644a:	85 c0                	test   eax,eax
c001644c:	0f 84 a2 00 00 00    	je     c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016452:	31 d2                	xor    edx,edx
c0016454:	51                   	push   ecx
c0016455:	52                   	push   edx
c0016456:	50                   	push   eax
c0016457:	56                   	push   esi
c0016458:	e8 d3 8f ff ff       	call   c000f430 <File::seek(unsigned long long)>
c001645d:	83 c4 10             	add    esp,0x10
c0016460:	85 c0                	test   eax,eax
c0016462:	0f 85 8c 00 00 00    	jne    c00164f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016468:	83 ec 0c             	sub    esp,0xc
c001646b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001646f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016473:	31 ed                	xor    ebp,ebp
c0016475:	0f af c2             	imul   eax,edx
c0016478:	50                   	push   eax
c0016479:	e8 9a 57 ff ff       	call   c000bc18 <malloc>
c001647e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016481:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016485:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001648f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016493:	0f af c2             	imul   eax,edx
c0016496:	99                   	cdq    
c0016497:	52                   	push   edx
c0016498:	50                   	push   eax
c0016499:	56                   	push   esi
c001649a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001649d:	83 c4 20             	add    esp,0x20
c00164a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00164a8:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00164ac:	0f 86 80 00 00 00    	jbe    c0016532 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00164b2:	0f b7 fd             	movzx  edi,bp
c00164b5:	c1 e7 05             	shl    edi,0x5
c00164b8:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00164bc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00164bf:	75 6b                	jne    c001652c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00164c1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00164c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164c8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00164cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164cf:	52                   	push   edx
c00164d0:	31 d2                	xor    edx,edx
c00164d2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00164d5:	52                   	push   edx
c00164d6:	50                   	push   eax
c00164d7:	56                   	push   esi
c00164d8:	e8 53 8f ff ff       	call   c000f430 <File::seek(unsigned long long)>
c00164dd:	83 c4 10             	add    esp,0x10
c00164e0:	85 c0                	test   eax,eax
c00164e2:	74 17                	je     c00164fb <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	68 9f 13 02 c0       	push   0xc002139f
c00164ec:	e8 ee 88 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	31 c0                	xor    eax,eax
c00164f6:	e9 87 00 00 00       	jmp    c0016582 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00164fb:	83 ec 0c             	sub    esp,0xc
c00164fe:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016501:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016504:	50                   	push   eax
c0016505:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016509:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001650d:	56                   	push   esi
c001650e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016512:	e8 e0 fb ff ff       	call   c00160f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016517:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001651b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001651f:	83 c4 20             	add    esp,0x20
c0016522:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016526:	73 04                	jae    c001652c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016528:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001652c:	45                   	inc    ebp
c001652d:	e9 76 ff ff ff       	jmp    c00164a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016532:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001653a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001653e:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016544:	83 ec 0c             	sub    esp,0xc
c0016547:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001654d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016552:	05 00 10 00 00       	add    eax,0x1000
c0016557:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001655a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655e:	e8 c5 56 ff ff       	call   c000bc28 <free>
c0016563:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016566:	e8 bd 56 ff ff       	call   c000bc28 <free>
c001656b:	58                   	pop    eax
c001656c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016570:	e8 b3 56 ff ff       	call   c000bc28 <free>
c0016575:	89 34 24             	mov    DWORD PTR [esp],esi
c0016578:	e8 53 8e ff ff       	call   c000f3d0 <File::close()>
c001657d:	83 c4 10             	add    esp,0x10
c0016580:	b0 01                	mov    al,0x1
c0016582:	83 c4 3c             	add    esp,0x3c
c0016585:	5b                   	pop    ebx
c0016586:	5e                   	pop    esi
c0016587:	5f                   	pop    edi
c0016588:	5d                   	pop    ebp
c0016589:	c3                   	ret    

c001658a <Thr::runtimeReferenceHelper()>:
c001658a:	83 ec 18             	sub    esp,0x18
c001658d:	68 a7 13 02 c0       	push   0xc00213a7
c0016592:	e8 48 88 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0016597:	fa                   	cli    
c0016598:	83 c4 10             	add    esp,0x10
c001659b:	eb fe                	jmp    c001659b <Thr::runtimeReferenceHelper()+0x11>

c001659d <Thr::getAddressOfKernelSymbol(char const*)>:
c001659d:	57                   	push   edi
c001659e:	56                   	push   esi
c001659f:	53                   	push   ebx
c00165a0:	31 db                	xor    ebx,ebx
c00165a2:	39 1d 60 41 02 c0    	cmp    DWORD PTR ds:0xc0024160,ebx
c00165a8:	7e 3c                	jle    c00165e6 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00165aa:	8b 34 9d e0 40 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdbf20]
c00165b1:	31 ff                	xor    edi,edi
c00165b3:	39 3c 9d e0 3f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc020],edi
c00165ba:	7e 27                	jle    c00165e3 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00165bc:	50                   	push   eax
c00165bd:	50                   	push   eax
c00165be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00165c4:	03 04 9d 60 40 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdbfa0]
c00165cb:	50                   	push   eax
c00165cc:	e8 27 a1 fe ff       	call   c00006f8 <strcmp>
c00165d1:	83 c4 10             	add    esp,0x10
c00165d4:	85 c0                	test   eax,eax
c00165d6:	75 05                	jne    c00165dd <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00165d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00165db:	eb 0b                	jmp    c00165e8 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00165dd:	83 c6 10             	add    esi,0x10
c00165e0:	47                   	inc    edi
c00165e1:	eb d0                	jmp    c00165b3 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00165e3:	43                   	inc    ebx
c00165e4:	eb bc                	jmp    c00165a2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00165e6:	31 c0                	xor    eax,eax
c00165e8:	5b                   	pop    ebx
c00165e9:	5e                   	pop    esi
c00165ea:	5f                   	pop    edi
c00165eb:	c3                   	ret    

c00165ec <Thr::loadKernelSymbolTable(char const*)>:
c00165ec:	55                   	push   ebp
c00165ed:	57                   	push   edi
c00165ee:	56                   	push   esi
c00165ef:	53                   	push   ebx
c00165f0:	83 ec 68             	sub    esp,0x68
c00165f3:	8b 35 b4 41 02 c0    	mov    esi,DWORD PTR ds:0xc00241b4
c00165f9:	68 14 01 00 00       	push   0x114
c00165fe:	e8 ed 86 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0016603:	83 c4 0c             	add    esp,0xc
c0016606:	89 c3                	mov    ebx,eax
c0016608:	56                   	push   esi
c0016609:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001660d:	50                   	push   eax
c001660e:	e8 fb 8c ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0016613:	5e                   	pop    esi
c0016614:	5f                   	pop    edi
c0016615:	6a 01                	push   0x1
c0016617:	53                   	push   ebx
c0016618:	e8 55 8d ff ff       	call   c000f372 <File::open(FileOpenMode)>
c001661d:	83 c4 10             	add    esp,0x10
c0016620:	31 d2                	xor    edx,edx
c0016622:	85 c0                	test   eax,eax
c0016624:	0f 85 79 02 00 00    	jne    c00168a3 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001662a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016632:	83 ec 0c             	sub    esp,0xc
c0016635:	6a 34                	push   0x34
c0016637:	e8 dc 55 ff ff       	call   c000bc18 <malloc>
c001663c:	59                   	pop    ecx
c001663d:	89 c7                	mov    edi,eax
c001663f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016643:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016645:	56                   	push   esi
c0016646:	57                   	push   edi
c0016647:	6a 00                	push   0x0
c0016649:	6a 34                	push   0x34
c001664b:	53                   	push   ebx
c001664c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001664f:	83 c4 20             	add    esp,0x20
c0016652:	85 c0                	test   eax,eax
c0016654:	74 17                	je     c001666d <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016656:	83 ec 0c             	sub    esp,0xc
c0016659:	68 c9 13 02 c0       	push   0xc00213c9
c001665e:	e8 e5 e2 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	31 d2                	xor    edx,edx
c0016668:	e9 36 02 00 00       	jmp    c00168a3 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001666d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016673:	75 e1                	jne    c0016656 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016675:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016678:	85 c0                	test   eax,eax
c001667a:	74 da                	je     c0016656 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001667c:	52                   	push   edx
c001667d:	31 d2                	xor    edx,edx
c001667f:	52                   	push   edx
c0016680:	50                   	push   eax
c0016681:	53                   	push   ebx
c0016682:	e8 a9 8d ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016687:	83 c4 10             	add    esp,0x10
c001668a:	85 c0                	test   eax,eax
c001668c:	75 c8                	jne    c0016656 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001668e:	83 ec 0c             	sub    esp,0xc
c0016691:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016695:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016699:	31 ed                	xor    ebp,ebp
c001669b:	0f af c2             	imul   eax,edx
c001669e:	50                   	push   eax
c001669f:	e8 74 55 ff ff       	call   c000bc18 <malloc>
c00166a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00166a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00166ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00166ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00166b1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00166b5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00166b9:	0f af c2             	imul   eax,edx
c00166bc:	99                   	cdq    
c00166bd:	52                   	push   edx
c00166be:	50                   	push   eax
c00166bf:	53                   	push   ebx
c00166c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166c3:	83 c4 20             	add    esp,0x20
c00166c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00166ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166d6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00166de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00166e6:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00166ea:	0f 86 aa 00 00 00    	jbe    c001679a <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c00166f0:	0f b7 f5             	movzx  esi,bp
c00166f3:	6b f6 28             	imul   esi,esi,0x28
c00166f6:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00166fa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00166fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016701:	50                   	push   eax
c0016702:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016706:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001670a:	8b 16                	mov    edx,DWORD PTR [esi]
c001670c:	6b c0 28             	imul   eax,eax,0x28
c001670f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016713:	89 d0                	mov    eax,edx
c0016715:	31 d2                	xor    edx,edx
c0016717:	52                   	push   edx
c0016718:	50                   	push   eax
c0016719:	53                   	push   ebx
c001671a:	e8 11 8d ff ff       	call   c000f430 <File::seek(unsigned long long)>
c001671f:	83 c4 0c             	add    esp,0xc
c0016722:	6a 20                	push   0x20
c0016724:	6a 00                	push   0x0
c0016726:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001672a:	52                   	push   edx
c001672b:	e8 d8 9e fe ff       	call   c0000608 <memset>
c0016730:	58                   	pop    eax
c0016731:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016733:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016737:	51                   	push   ecx
c0016738:	8d 54 24 40          	lea    edx,[esp+0x40]
c001673c:	52                   	push   edx
c001673d:	6a 00                	push   0x0
c001673f:	6a 1f                	push   0x1f
c0016741:	53                   	push   ebx
c0016742:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016745:	83 c4 18             	add    esp,0x18
c0016748:	68 e0 13 02 c0       	push   0xc00213e0
c001674d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016751:	52                   	push   edx
c0016752:	e8 a1 9f fe ff       	call   c00006f8 <strcmp>
c0016757:	83 c4 10             	add    esp,0x10
c001675a:	85 c0                	test   eax,eax
c001675c:	75 0f                	jne    c001676d <Thr::loadKernelSymbolTable(char const*)+0x181>
c001675e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016761:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001676d:	50                   	push   eax
c001676e:	50                   	push   eax
c001676f:	68 e8 13 02 c0       	push   0xc00213e8
c0016774:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016778:	50                   	push   eax
c0016779:	e8 7a 9f fe ff       	call   c00006f8 <strcmp>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	85 c0                	test   eax,eax
c0016783:	75 0f                	jne    c0016794 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016785:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016788:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001678c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016790:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016794:	45                   	inc    ebp
c0016795:	e9 4c ff ff ff       	jmp    c00166e6 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001679a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001679f:	75 10                	jne    c00167b1 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c00167a1:	83 ec 0c             	sub    esp,0xc
c00167a4:	68 f0 13 02 c0       	push   0xc00213f0
c00167a9:	e8 9a e1 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167b6:	75 10                	jne    c00167c8 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00167b8:	83 ec 0c             	sub    esp,0xc
c00167bb:	68 f0 13 02 c0       	push   0xc00213f0
c00167c0:	e8 83 e1 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c00167c5:	83 c4 10             	add    esp,0x10
c00167c8:	31 d2                	xor    edx,edx
c00167ca:	50                   	push   eax
c00167cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167cf:	52                   	push   edx
c00167d0:	50                   	push   eax
c00167d1:	53                   	push   ebx
c00167d2:	e8 59 8c ff ff       	call   c000f430 <File::seek(unsigned long long)>
c00167d7:	5a                   	pop    edx
c00167d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00167dc:	e8 37 54 ff ff       	call   c000bc18 <malloc>
c00167e1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167e9:	89 c1                	mov    ecx,eax
c00167eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167f3:	5e                   	pop    esi
c00167f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00167fa:	55                   	push   ebp
c00167fb:	51                   	push   ecx
c00167fc:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016808:	53                   	push   ebx
c0016809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001680c:	83 c4 14             	add    esp,0x14
c001680f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016813:	e8 00 54 ff ff       	call   c000bc18 <malloc>
c0016818:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001681b:	89 c6                	mov    esi,eax
c001681d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001681f:	56                   	push   esi
c0016820:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016824:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016828:	53                   	push   ebx
c0016829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001682c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016830:	8b 15 60 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024160
c0016836:	83 c4 1c             	add    esp,0x1c
c0016839:	c1 e8 04             	shr    eax,0x4
c001683c:	89 04 95 e0 3f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc020],eax
c0016843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016847:	31 d2                	xor    edx,edx
c0016849:	52                   	push   edx
c001684a:	50                   	push   eax
c001684b:	53                   	push   ebx
c001684c:	e8 df 8b ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016851:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016854:	31 d2                	xor    edx,edx
c0016856:	56                   	push   esi
c0016857:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001685b:	52                   	push   edx
c001685c:	50                   	push   eax
c001685d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001685f:	53                   	push   ebx
c0016860:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016863:	83 c4 14             	add    esp,0x14
c0016866:	53                   	push   ebx
c0016867:	e8 64 8b ff ff       	call   c000f3d0 <File::close()>
c001686c:	5d                   	pop    ebp
c001686d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016871:	e8 b2 53 ff ff       	call   c000bc28 <free>
c0016876:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016879:	e8 aa 53 ff ff       	call   c000bc28 <free>
c001687e:	a1 60 41 02 c0       	mov    eax,ds:0xc0024160
c0016883:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016887:	8d 50 01             	lea    edx,[eax+0x1]
c001688a:	89 0c 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],ecx
c0016891:	89 15 60 41 02 c0    	mov    DWORD PTR ds:0xc0024160,edx
c0016897:	89 34 85 60 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfa0],esi
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	b2 01                	mov    dl,0x1
c00168a3:	83 c4 5c             	add    esp,0x5c
c00168a6:	88 d0                	mov    al,dl
c00168a8:	5b                   	pop    ebx
c00168a9:	5e                   	pop    esi
c00168aa:	5f                   	pop    edi
c00168ab:	5d                   	pop    ebp
c00168ac:	c3                   	ret    

c00168ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00168ad:	55                   	push   ebp
c00168ae:	57                   	push   edi
c00168af:	56                   	push   esi
c00168b0:	53                   	push   ebx
c00168b1:	81 ec 68 03 00 00    	sub    esp,0x368
c00168b7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00168be:	8b 1d b4 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241b4
c00168c4:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00168c8:	68 14 01 00 00       	push   0x114
c00168cd:	e8 1e 84 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00168d2:	83 c4 0c             	add    esp,0xc
c00168d5:	89 c5                	mov    ebp,eax
c00168d7:	53                   	push   ebx
c00168d8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00168df:	50                   	push   eax
c00168e0:	e8 29 8a ff ff       	call   c000f30e <File::File(char const*, Process*)>
c00168e5:	58                   	pop    eax
c00168e6:	5a                   	pop    edx
c00168e7:	6a 01                	push   0x1
c00168e9:	55                   	push   ebp
c00168ea:	e8 83 8a ff ff       	call   c000f372 <File::open(FileOpenMode)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	85 c0                	test   eax,eax
c00168f4:	0f 85 ef 06 00 00    	jne    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00168fa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	6a 34                	push   0x34
c0016907:	e8 0c 53 ff ff       	call   c000bc18 <malloc>
c001690c:	89 c7                	mov    edi,eax
c001690e:	58                   	pop    eax
c001690f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016912:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016916:	53                   	push   ebx
c0016917:	57                   	push   edi
c0016918:	6a 00                	push   0x0
c001691a:	6a 34                	push   0x34
c001691c:	55                   	push   ebp
c001691d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016920:	83 c4 20             	add    esp,0x20
c0016923:	85 c0                	test   eax,eax
c0016925:	0f 85 be 06 00 00    	jne    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001692b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016931:	0f 85 b2 06 00 00    	jne    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016937:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001693a:	85 c0                	test   eax,eax
c001693c:	0f 84 a7 06 00 00    	je     c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016942:	31 d2                	xor    edx,edx
c0016944:	56                   	push   esi
c0016945:	52                   	push   edx
c0016946:	50                   	push   eax
c0016947:	55                   	push   ebp
c0016948:	e8 e3 8a ff ff       	call   c000f430 <File::seek(unsigned long long)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	85 c0                	test   eax,eax
c0016952:	0f 85 91 06 00 00    	jne    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016958:	83 ec 0c             	sub    esp,0xc
c001695b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001695e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016962:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016966:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001696a:	0f af c2             	imul   eax,edx
c001696d:	50                   	push   eax
c001696e:	e8 a5 52 ff ff       	call   c000bc18 <malloc>
c0016973:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016976:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001697a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001697d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016981:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016985:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016989:	0f af c2             	imul   eax,edx
c001698c:	99                   	cdq    
c001698d:	52                   	push   edx
c001698e:	50                   	push   eax
c001698f:	55                   	push   ebp
c0016990:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016993:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016996:	83 c4 20             	add    esp,0x20
c0016999:	85 c0                	test   eax,eax
c001699b:	0f 84 48 06 00 00    	je     c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00169a1:	31 d2                	xor    edx,edx
c00169a3:	51                   	push   ecx
c00169a4:	52                   	push   edx
c00169a5:	50                   	push   eax
c00169a6:	55                   	push   ebp
c00169a7:	e8 84 8a ff ff       	call   c000f430 <File::seek(unsigned long long)>
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	85 c0                	test   eax,eax
c00169b1:	0f 85 32 06 00 00    	jne    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00169b7:	83 ec 0c             	sub    esp,0xc
c00169ba:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00169be:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00169c2:	31 f6                	xor    esi,esi
c00169c4:	0f af c2             	imul   eax,edx
c00169c7:	50                   	push   eax
c00169c8:	e8 4b 52 ff ff       	call   c000bc18 <malloc>
c00169cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169d0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00169d4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00169d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169db:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00169df:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00169e3:	0f af c2             	imul   eax,edx
c00169e6:	99                   	cdq    
c00169e7:	52                   	push   edx
c00169e8:	50                   	push   eax
c00169e9:	55                   	push   ebp
c00169ea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169ed:	83 c4 20             	add    esp,0x20
c00169f0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00169f4:	0f 86 8a 00 00 00    	jbe    c0016a84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00169fa:	0f b7 de             	movzx  ebx,si
c00169fd:	c1 e3 05             	shl    ebx,0x5
c0016a00:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016a04:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016a07:	75 75                	jne    c0016a7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016a09:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a17:	52                   	push   edx
c0016a18:	31 d2                	xor    edx,edx
c0016a1a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016a1d:	52                   	push   edx
c0016a1e:	50                   	push   eax
c0016a1f:	55                   	push   ebp
c0016a20:	e8 0b 8a ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016a25:	83 c4 10             	add    esp,0x10
c0016a28:	85 c0                	test   eax,eax
c0016a2a:	0f 85 b9 05 00 00    	jne    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016a30:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016a37:	31 d2                	xor    edx,edx
c0016a39:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016a3d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016a40:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016a44:	83 ec 0c             	sub    esp,0xc
c0016a47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a4b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016a52:	50                   	push   eax
c0016a53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a5b:	52                   	push   edx
c0016a5c:	50                   	push   eax
c0016a5d:	55                   	push   ebp
c0016a5e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a61:	83 c4 1c             	add    esp,0x1c
c0016a64:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a67:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016a6a:	50                   	push   eax
c0016a6b:	6a 00                	push   0x0
c0016a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a71:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016a75:	50                   	push   eax
c0016a76:	e8 8d 9b fe ff       	call   c0000608 <memset>
c0016a7b:	83 c4 10             	add    esp,0x10
c0016a7e:	46                   	inc    esi
c0016a7f:	e9 6c ff ff ff       	jmp    c00169f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016a84:	31 db                	xor    ebx,ebx
c0016a86:	50                   	push   eax
c0016a87:	68 00 01 00 00       	push   0x100
c0016a8c:	6a 00                	push   0x0
c0016a8e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016a92:	50                   	push   eax
c0016a93:	e8 70 9b fe ff       	call   c0000608 <memset>
c0016a98:	83 c4 0c             	add    esp,0xc
c0016a9b:	68 00 01 00 00       	push   0x100
c0016aa0:	6a 00                	push   0x0
c0016aa2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016aa9:	50                   	push   eax
c0016aaa:	e8 59 9b fe ff       	call   c0000608 <memset>
c0016aaf:	83 c4 10             	add    esp,0x10
c0016ab2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016aba:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016ac2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016aca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016ad2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016ada:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016ade:	0f 86 30 01 00 00    	jbe    c0016c14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016ae4:	0f b7 f3             	movzx  esi,bx
c0016ae7:	6b f6 28             	imul   esi,esi,0x28
c0016aea:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016aee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016af1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016af5:	50                   	push   eax
c0016af6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016afa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016afe:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b00:	6b d2 28             	imul   edx,edx,0x28
c0016b03:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016b07:	31 d2                	xor    edx,edx
c0016b09:	52                   	push   edx
c0016b0a:	50                   	push   eax
c0016b0b:	55                   	push   ebp
c0016b0c:	e8 1f 89 ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016b11:	83 c4 0c             	add    esp,0xc
c0016b14:	6a 20                	push   0x20
c0016b16:	6a 00                	push   0x0
c0016b18:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016b1f:	51                   	push   ecx
c0016b20:	e8 e3 9a fe ff       	call   c0000608 <memset>
c0016b25:	58                   	pop    eax
c0016b26:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b29:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016b2d:	52                   	push   edx
c0016b2e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016b35:	51                   	push   ecx
c0016b36:	6a 00                	push   0x0
c0016b38:	6a 1f                	push   0x1f
c0016b3a:	55                   	push   ebp
c0016b3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b3e:	83 c4 1c             	add    esp,0x1c
c0016b41:	6a 09                	push   0x9
c0016b43:	68 0a 14 02 c0       	push   0xc002140a
c0016b48:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016b4f:	51                   	push   ecx
c0016b50:	e8 1a 9a fe ff       	call   c000056f <memcmp>
c0016b55:	83 c4 10             	add    esp,0x10
c0016b58:	85 c0                	test   eax,eax
c0016b5a:	75 21                	jne    c0016b7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b60:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016b68:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016b6c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016b6f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016b76:	89 c8                	mov    eax,ecx
c0016b78:	40                   	inc    eax
c0016b79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b7d:	50                   	push   eax
c0016b7e:	6a 09                	push   0x9
c0016b80:	68 14 14 02 c0       	push   0xc0021414
c0016b85:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016b8c:	50                   	push   eax
c0016b8d:	e8 dd 99 fe ff       	call   c000056f <memcmp>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	85 c0                	test   eax,eax
c0016b97:	75 21                	jne    c0016bba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ba1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ba5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016ba9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bac:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016bb3:	89 c8                	mov    eax,ecx
c0016bb5:	40                   	inc    eax
c0016bb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bba:	50                   	push   eax
c0016bbb:	50                   	push   eax
c0016bbc:	68 e0 13 02 c0       	push   0xc00213e0
c0016bc1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016bc8:	50                   	push   eax
c0016bc9:	e8 2a 9b fe ff       	call   c00006f8 <strcmp>
c0016bce:	83 c4 10             	add    esp,0x10
c0016bd1:	85 c0                	test   eax,eax
c0016bd3:	75 0f                	jne    c0016be4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0016bd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016be0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016be4:	50                   	push   eax
c0016be5:	50                   	push   eax
c0016be6:	68 e8 13 02 c0       	push   0xc00213e8
c0016beb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016bf2:	50                   	push   eax
c0016bf3:	e8 00 9b fe ff       	call   c00006f8 <strcmp>
c0016bf8:	83 c4 10             	add    esp,0x10
c0016bfb:	85 c0                	test   eax,eax
c0016bfd:	75 0f                	jne    c0016c0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016bff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c0e:	43                   	inc    ebx
c0016c0f:	e9 c6 fe ff ff       	jmp    c0016ada <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0016c14:	31 d2                	xor    edx,edx
c0016c16:	50                   	push   eax
c0016c17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c1b:	52                   	push   edx
c0016c1c:	50                   	push   eax
c0016c1d:	55                   	push   ebp
c0016c1e:	e8 0d 88 ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016c23:	5a                   	pop    edx
c0016c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c28:	e8 eb 4f ff ff       	call   c000bc18 <malloc>
c0016c2d:	31 d2                	xor    edx,edx
c0016c2f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0016c33:	59                   	pop    ecx
c0016c34:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c37:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016c3b:	53                   	push   ebx
c0016c3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c44:	52                   	push   edx
c0016c45:	50                   	push   eax
c0016c46:	55                   	push   ebp
c0016c47:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c4a:	83 c4 14             	add    esp,0x14
c0016c4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c51:	e8 c2 4f ff ff       	call   c000bc18 <malloc>
c0016c56:	31 d2                	xor    edx,edx
c0016c58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c5c:	83 c4 0c             	add    esp,0xc
c0016c5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c63:	52                   	push   edx
c0016c64:	50                   	push   eax
c0016c65:	55                   	push   ebp
c0016c66:	e8 c5 87 ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016c6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c6e:	31 d2                	xor    edx,edx
c0016c70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c74:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c7b:	52                   	push   edx
c0016c7c:	50                   	push   eax
c0016c7d:	55                   	push   ebp
c0016c7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c81:	83 c4 20             	add    esp,0x20
c0016c84:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016c8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c90:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0016c94:	0f 84 53 03 00 00    	je     c0016fed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x740>
c0016c9a:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0016ca1:	31 d2                	xor    edx,edx
c0016ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca7:	c1 e8 03             	shr    eax,0x3
c0016caa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016cae:	50                   	push   eax
c0016caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cb3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016cb7:	52                   	push   edx
c0016cb8:	50                   	push   eax
c0016cb9:	55                   	push   ebp
c0016cba:	e8 71 87 ff ff       	call   c000f430 <File::seek(unsigned long long)>
c0016cbf:	58                   	pop    eax
c0016cc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cc4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0016ccb:	e8 48 4f ff ff       	call   c000bc18 <malloc>
c0016cd0:	31 d2                	xor    edx,edx
c0016cd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016cd6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016cd9:	58                   	pop    eax
c0016cda:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016cde:	50                   	push   eax
c0016cdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ce3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ce7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016cee:	52                   	push   edx
c0016cef:	50                   	push   eax
c0016cf0:	55                   	push   ebp
c0016cf1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cf4:	83 c4 20             	add    esp,0x20
c0016cf7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016cff:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0016d03:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0016d07:	0f 8d c4 02 00 00    	jge    c0016fd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x724>
c0016d0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d15:	31 db                	xor    ebx,ebx
c0016d17:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0016d1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d22:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0016d26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d2a:	c1 e8 08             	shr    eax,0x8
c0016d2d:	89 c6                	mov    esi,eax
c0016d2f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016d33:	c1 e6 04             	shl    esi,0x4
c0016d36:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0016d3a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016d3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d41:	85 c0                	test   eax,eax
c0016d43:	0f 85 17 01 00 00    	jne    c0016e60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016d49:	83 ec 0c             	sub    esp,0xc
c0016d4c:	b3 01                	mov    bl,0x1
c0016d4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d52:	03 06                	add    eax,DWORD PTR [esi]
c0016d54:	50                   	push   eax
c0016d55:	e8 43 f8 ff ff       	call   c001659d <Thr::getAddressOfKernelSymbol(char const*)>
c0016d5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d5e:	83 c4 10             	add    esp,0x10
c0016d61:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d66:	0f 85 f4 00 00 00    	jne    c0016e60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016d6c:	50                   	push   eax
c0016d6d:	50                   	push   eax
c0016d6e:	68 1e 14 02 c0       	push   0xc002141e
c0016d73:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d77:	03 06                	add    eax,DWORD PTR [esi]
c0016d79:	50                   	push   eax
c0016d7a:	e8 79 99 fe ff       	call   c00006f8 <strcmp>
c0016d7f:	83 c4 10             	add    esp,0x10
c0016d82:	85 c0                	test   eax,eax
c0016d84:	75 0a                	jne    c0016d90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c0016d86:	b8 cc e0 01 c0       	mov    eax,0xc001e0cc
c0016d8b:	e9 ca 00 00 00       	jmp    c0016e5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016d90:	50                   	push   eax
c0016d91:	50                   	push   eax
c0016d92:	68 28 14 02 c0       	push   0xc0021428
c0016d97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d9b:	03 06                	add    eax,DWORD PTR [esi]
c0016d9d:	50                   	push   eax
c0016d9e:	e8 55 99 fe ff       	call   c00006f8 <strcmp>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	85 c0                	test   eax,eax
c0016da8:	75 0a                	jne    c0016db4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c0016daa:	b8 00 de 01 c0       	mov    eax,0xc001de00
c0016daf:	e9 a6 00 00 00       	jmp    c0016e5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016db4:	53                   	push   ebx
c0016db5:	53                   	push   ebx
c0016db6:	68 31 14 02 c0       	push   0xc0021431
c0016dbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dbf:	03 06                	add    eax,DWORD PTR [esi]
c0016dc1:	50                   	push   eax
c0016dc2:	e8 31 99 fe ff       	call   c00006f8 <strcmp>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	85 c0                	test   eax,eax
c0016dcc:	75 0a                	jne    c0016dd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c0016dce:	b8 cc e1 01 c0       	mov    eax,0xc001e1cc
c0016dd3:	e9 82 00 00 00       	jmp    c0016e5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016dd8:	51                   	push   ecx
c0016dd9:	51                   	push   ecx
c0016dda:	68 3b 14 02 c0       	push   0xc002143b
c0016ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016de3:	03 06                	add    eax,DWORD PTR [esi]
c0016de5:	50                   	push   eax
c0016de6:	e8 0d 99 fe ff       	call   c00006f8 <strcmp>
c0016deb:	83 c4 10             	add    esp,0x10
c0016dee:	85 c0                	test   eax,eax
c0016df0:	74 63                	je     c0016e55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0016df2:	50                   	push   eax
c0016df3:	50                   	push   eax
c0016df4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016df8:	03 06                	add    eax,DWORD PTR [esi]
c0016dfa:	50                   	push   eax
c0016dfb:	68 44 14 02 c0       	push   0xc0021444
c0016e00:	e8 da 7f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0016e05:	58                   	pop    eax
c0016e06:	5a                   	pop    edx
c0016e07:	68 5e 14 02 c0       	push   0xc002145e
c0016e0c:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0016e13:	53                   	push   ebx
c0016e14:	e8 8e 98 fe ff       	call   c00006a7 <strcpy>
c0016e19:	59                   	pop    ecx
c0016e1a:	58                   	pop    eax
c0016e1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e1f:	03 06                	add    eax,DWORD PTR [esi]
c0016e21:	50                   	push   eax
c0016e22:	53                   	push   ebx
c0016e23:	e8 36 99 fe ff       	call   c000075e <strcat>
c0016e28:	58                   	pop    eax
c0016e29:	5a                   	pop    edx
c0016e2a:	68 f4 14 02 c0       	push   0xc00214f4
c0016e2f:	53                   	push   ebx
c0016e30:	e8 29 99 fe ff       	call   c000075e <strcat>
c0016e35:	83 c4 10             	add    esp,0x10
c0016e38:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016e3d:	0f 84 48 01 00 00    	je     c0016f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016e43:	83 ec 0c             	sub    esp,0xc
c0016e46:	53                   	push   ebx
c0016e47:	e8 fc da ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0016e4c:	83 c4 10             	add    esp,0x10
c0016e4f:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0016e53:	eb 0b                	jmp    c0016e60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016e55:	b8 4c df 01 c0       	mov    eax,0xc001df4c
c0016e5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e5e:	b3 01                	mov    bl,0x1
c0016e60:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0016e65:	0f 85 80 00 00 00    	jne    c0016eeb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0016e6b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0016e72:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e76:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0016e7a:	01 ce                	add    esi,ecx
c0016e7c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016e84:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e86:	0f 94 c2             	sete   dl
c0016e89:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016e91:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0016e96:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0016e9a:	84 db                	test   bl,bl
c0016e9c:	74 31                	je     c0016ecf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c0016e9e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016ea2:	01 c3                	add    ebx,eax
c0016ea4:	84 d2                	test   dl,dl
c0016ea6:	75 0a                	jne    c0016eb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c0016ea8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016eac:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016eb0:	76 32                	jbe    c0016ee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016eb2:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016eb7:	0f 84 ce 00 00 00    	je     c0016f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016ebd:	83 ec 0c             	sub    esp,0xc
c0016ec0:	68 75 14 02 c0       	push   0xc0021475
c0016ec5:	e8 7e da ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0016eca:	83 c4 10             	add    esp,0x10
c0016ecd:	eb 15                	jmp    c0016ee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016ecf:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0016ed2:	84 d2                	test   dl,dl
c0016ed4:	75 0e                	jne    c0016ee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016ed6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016eda:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016ede:	77 04                	ja     c0016ee4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016ee0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ee4:	89 1e                	mov    DWORD PTR [esi],ebx
c0016ee6:	e9 dd 00 00 00       	jmp    c0016fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c0016eeb:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0016ef0:	75 6b                	jne    c0016f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b0>
c0016ef2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0016ef9:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0016efd:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0016f01:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016f09:	74 14                	je     c0016f1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x672>
c0016f0b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016f13:	74 0a                	je     c0016f1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x672>
c0016f15:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f19:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016f1d:	76 17                	jbe    c0016f36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x689>
c0016f1f:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016f24:	74 65                	je     c0016f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016f26:	83 ec 0c             	sub    esp,0xc
c0016f29:	68 91 14 02 c0       	push   0xc0021491
c0016f2e:	e8 15 da ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f38:	84 db                	test   bl,bl
c0016f3a:	74 13                	je     c0016f4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a2>
c0016f3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f40:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0016f47:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0016f4b:	01 d0                	add    eax,edx
c0016f4d:	eb 06                	jmp    c0016f55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016f4f:	89 d0                	mov    eax,edx
c0016f51:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0016f55:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016f59:	89 06                	mov    DWORD PTR [esi],eax
c0016f5b:	eb 6b                	jmp    c0016fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c0016f5d:	50                   	push   eax
c0016f5e:	50                   	push   eax
c0016f5f:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0016f64:	50                   	push   eax
c0016f65:	68 ad 14 02 c0       	push   0xc00214ad
c0016f6a:	e8 70 7e ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0016f6f:	83 c4 10             	add    esp,0x10
c0016f72:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016f77:	74 12                	je     c0016f8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016f79:	83 ec 0c             	sub    esp,0xc
c0016f7c:	68 b8 14 02 c0       	push   0xc00214b8
c0016f81:	e8 c2 d9 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0016f86:	83 c4 10             	add    esp,0x10
c0016f89:	eb 3d                	jmp    c0016fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c0016f8b:	83 ec 0c             	sub    esp,0xc
c0016f8e:	55                   	push   ebp
c0016f8f:	e8 3c 84 ff ff       	call   c000f3d0 <File::close()>
c0016f94:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f9d:	59                   	pop    ecx
c0016f9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fa2:	e8 81 4c ff ff       	call   c000bc28 <free>
c0016fa7:	5b                   	pop    ebx
c0016fa8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fac:	e8 77 4c ff ff       	call   c000bc28 <free>
c0016fb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016fb4:	e8 6f 4c ff ff       	call   c000bc28 <free>
c0016fb9:	5e                   	pop    esi
c0016fba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016fbe:	e8 65 4c ff ff       	call   c000bc28 <free>
c0016fc3:	83 c4 10             	add    esp,0x10
c0016fc6:	eb 21                	jmp    c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016fc8:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0016fcc:	e9 2e fd ff ff       	jmp    c0016cff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0016fd1:	83 ec 0c             	sub    esp,0xc
c0016fd4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fd8:	e8 4b 4c ff ff       	call   c000bc28 <free>
c0016fdd:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0016fe1:	83 c4 10             	add    esp,0x10
c0016fe4:	e9 a3 fc ff ff       	jmp    c0016c8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0016fe9:	31 c0                	xor    eax,eax
c0016feb:	eb 33                	jmp    c0017020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x773>
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	55                   	push   ebp
c0016ff1:	e8 da 83 ff ff       	call   c000f3d0 <File::close()>
c0016ff6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ff9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fff:	58                   	pop    eax
c0017000:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017004:	e8 1f 4c ff ff       	call   c000bc28 <free>
c0017009:	89 3c 24             	mov    DWORD PTR [esp],edi
c001700c:	e8 17 4c ff ff       	call   c000bc28 <free>
c0017011:	5a                   	pop    edx
c0017012:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017016:	e8 0d 4c ff ff       	call   c000bc28 <free>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	b0 01                	mov    al,0x1
c0017020:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017026:	5b                   	pop    ebx
c0017027:	5e                   	pop    esi
c0017028:	5f                   	pop    edi
c0017029:	5d                   	pop    ebp
c001702a:	c3                   	ret    

c001702b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001702b:	56                   	push   esi
c001702c:	31 d2                	xor    edx,edx
c001702e:	53                   	push   ebx
c001702f:	8b 1d c0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239c0
c0017035:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017039:	39 d3                	cmp    ebx,edx
c001703b:	7e 1b                	jle    c0017058 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001703d:	8b 04 95 e0 3b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc420]
c0017044:	39 c8                	cmp    eax,ecx
c0017046:	77 0d                	ja     c0017055 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017048:	8b 34 95 e0 39 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc620]
c001704f:	01 c6                	add    esi,eax
c0017051:	39 ce                	cmp    esi,ecx
c0017053:	77 05                	ja     c001705a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017055:	42                   	inc    edx
c0017056:	eb e1                	jmp    c0017039 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017058:	31 c0                	xor    eax,eax
c001705a:	5b                   	pop    ebx
c001705b:	5e                   	pop    esi
c001705c:	c3                   	ret    

c001705d <Thr::getDriverNameFromAddress(unsigned long)>:
c001705d:	53                   	push   ebx
c001705e:	31 c0                	xor    eax,eax
c0017060:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017064:	8b 1d c0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239c0
c001706a:	39 c3                	cmp    ebx,eax
c001706c:	7e 22                	jle    c0017090 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001706e:	8b 14 85 e0 3b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc420]
c0017075:	39 ca                	cmp    edx,ecx
c0017077:	77 14                	ja     c001708d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017079:	03 14 85 e0 39 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc620]
c0017080:	39 ca                	cmp    edx,ecx
c0017082:	76 09                	jbe    c001708d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017084:	8b 04 85 e0 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc220]
c001708b:	eb 05                	jmp    c0017092 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001708d:	40                   	inc    eax
c001708e:	eb da                	jmp    c001706a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017090:	31 c0                	xor    eax,eax
c0017092:	5b                   	pop    ebx
c0017093:	c3                   	ret    

c0017094 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017094:	53                   	push   ebx
c0017095:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017099:	53                   	push   ebx
c001709a:	e8 8c ff ff ff       	call   c001702b <Thr::getDriverBaseFromAddress(unsigned long)>
c001709f:	5a                   	pop    edx
c00170a0:	31 d2                	xor    edx,edx
c00170a2:	85 c0                	test   eax,eax
c00170a4:	74 04                	je     c00170aa <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00170a6:	89 da                	mov    edx,ebx
c00170a8:	29 c2                	sub    edx,eax
c00170aa:	89 d0                	mov    eax,edx
c00170ac:	5b                   	pop    ebx
c00170ad:	c3                   	ret    

c00170ae <Thr::loadDLL(char const*, bool)>:
c00170ae:	55                   	push   ebp
c00170af:	57                   	push   edi
c00170b0:	56                   	push   esi
c00170b1:	53                   	push   ebx
c00170b2:	81 ec 24 01 00 00    	sub    esp,0x124
c00170b8:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00170bf:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00170c6:	56                   	push   esi
c00170c7:	68 d0 14 02 c0       	push   0xc00214d0
c00170cc:	e8 0e 7d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00170d1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00170d8:	e8 13 7c ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00170dd:	83 c4 0c             	add    esp,0xc
c00170e0:	89 c3                	mov    ebx,eax
c00170e2:	ff 35 b4 41 02 c0    	push   DWORD PTR ds:0xc00241b4
c00170e8:	56                   	push   esi
c00170e9:	50                   	push   eax
c00170ea:	e8 1f 82 ff ff       	call   c000f30e <File::File(char const*, Process*)>
c00170ef:	83 c4 0c             	add    esp,0xc
c00170f2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00170f6:	50                   	push   eax
c00170f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00170fb:	50                   	push   eax
c00170fc:	53                   	push   ebx
c00170fd:	e8 1c 85 ff ff       	call   c000f61e <File::stat(unsigned long long*, bool*)>
c0017102:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017104:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017107:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001710a:	83 c4 10             	add    esp,0x10
c001710d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0017112:	75 0a                	jne    c001711e <Thr::loadDLL(char const*, bool)+0x70>
c0017114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017118:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001711c:	75 3e                	jne    c001715c <Thr::loadDLL(char const*, bool)+0xae>
c001711e:	89 f8                	mov    eax,edi
c0017120:	31 db                	xor    ebx,ebx
c0017122:	84 c0                	test   al,al
c0017124:	0f 84 ca 00 00 00    	je     c00171f4 <Thr::loadDLL(char const*, bool)+0x146>
c001712a:	50                   	push   eax
c001712b:	50                   	push   eax
c001712c:	68 e1 14 02 c0       	push   0xc00214e1
c0017131:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0017135:	53                   	push   ebx
c0017136:	e8 6c 95 fe ff       	call   c00006a7 <strcpy>
c001713b:	58                   	pop    eax
c001713c:	5a                   	pop    edx
c001713d:	56                   	push   esi
c001713e:	53                   	push   ebx
c001713f:	e8 1a 96 fe ff       	call   c000075e <strcat>
c0017144:	59                   	pop    ecx
c0017145:	5d                   	pop    ebp
c0017146:	68 f4 14 02 c0       	push   0xc00214f4
c001714b:	53                   	push   ebx
c001714c:	e8 0d 96 fe ff       	call   c000075e <strcat>
c0017151:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017154:	e8 ef d7 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0017159:	83 c4 10             	add    esp,0x10
c001715c:	83 ec 0c             	sub    esp,0xc
c001715f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017163:	e8 b0 4a ff ff       	call   c000bc18 <malloc>
c0017168:	89 34 24             	mov    DWORD PTR [esp],esi
c001716b:	89 c3                	mov    ebx,eax
c001716d:	e8 b3 94 fe ff       	call   c0000625 <strlen>
c0017172:	8b 2d c0 39 02 c0    	mov    ebp,DWORD PTR ds:0xc00239c0
c0017178:	40                   	inc    eax
c0017179:	89 04 24             	mov    DWORD PTR [esp],eax
c001717c:	e8 97 4a ff ff       	call   c000bc18 <malloc>
c0017181:	89 04 ad e0 3d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc220],eax
c0017188:	58                   	pop    eax
c0017189:	a1 c0 39 02 c0       	mov    eax,ds:0xc00239c0
c001718e:	5a                   	pop    edx
c001718f:	56                   	push   esi
c0017190:	ff 34 85 e0 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc220]
c0017197:	e8 0b 95 fe ff       	call   c00006a7 <strcpy>
c001719c:	a1 c0 39 02 c0       	mov    eax,ds:0xc00239c0
c00171a1:	8d 50 01             	lea    edx,[eax+0x1]
c00171a4:	89 1c 85 e0 3b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc420],ebx
c00171ab:	89 15 c0 39 02 c0    	mov    DWORD PTR ds:0xc00239c0,edx
c00171b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171b5:	59                   	pop    ecx
c00171b6:	89 14 85 e0 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc620],edx
c00171bd:	5d                   	pop    ebp
c00171be:	53                   	push   ebx
c00171bf:	68 f6 14 02 c0       	push   0xc00214f6
c00171c4:	e8 16 7c ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00171c9:	83 c4 0c             	add    esp,0xc
c00171cc:	6a 01                	push   0x1
c00171ce:	53                   	push   ebx
c00171cf:	56                   	push   esi
c00171d0:	e8 d8 f6 ff ff       	call   c00168ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00171d5:	83 c4 10             	add    esp,0x10
c00171d8:	84 c0                	test   al,al
c00171da:	75 18                	jne    c00171f4 <Thr::loadDLL(char const*, bool)+0x146>
c00171dc:	31 db                	xor    ebx,ebx
c00171de:	89 f8                	mov    eax,edi
c00171e0:	84 c0                	test   al,al
c00171e2:	74 10                	je     c00171f4 <Thr::loadDLL(char const*, bool)+0x146>
c00171e4:	83 ec 0c             	sub    esp,0xc
c00171e7:	68 15 15 02 c0       	push   0xc0021515
c00171ec:	e8 57 d7 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c00171f1:	83 c4 10             	add    esp,0x10
c00171f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00171fa:	89 d8                	mov    eax,ebx
c00171fc:	5b                   	pop    ebx
c00171fd:	5e                   	pop    esi
c00171fe:	5f                   	pop    edi
c00171ff:	5d                   	pop    ebp
c0017200:	c3                   	ret    

c0017201 <Thr::executeDLL(unsigned long, void*)>:
c0017201:	56                   	push   esi
c0017202:	53                   	push   ebx
c0017203:	51                   	push   ecx
c0017204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017208:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001720c:	85 db                	test   ebx,ebx
c001720e:	75 10                	jne    c0017220 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017210:	83 ec 0c             	sub    esp,0xc
c0017213:	68 34 15 02 c0       	push   0xc0021534
c0017218:	e8 2b d7 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001721d:	83 c4 10             	add    esp,0x10
c0017220:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017224:	89 d8                	mov    eax,ebx
c0017226:	5a                   	pop    edx
c0017227:	5b                   	pop    ebx
c0017228:	5e                   	pop    esi
c0017229:	ff e0                	jmp    eax
c001722b:	90                   	nop

c001722c <changeTSS>:
c001722c:	83 ec 0c             	sub    esp,0xc
c001722f:	e8 0e ca ff ff       	call   c0013c42 <thisCPU()>
c0017234:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001723a:	83 ec 08             	sub    esp,0x8
c001723d:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0017240:	05 7c 11 00 00       	add    eax,0x117c
c0017245:	c1 e1 15             	shl    ecx,0x15
c0017248:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001724d:	29 ca                	sub    edx,ecx
c001724f:	52                   	push   edx
c0017250:	50                   	push   eax
c0017251:	e8 fe 63 ff ff       	call   c000d654 <TSS::setESP(unsigned long)>
c0017256:	83 c4 1c             	add    esp,0x1c
c0017259:	c3                   	ret    

c001725a <Process::addArgs(char**)>:
c001725a:	57                   	push   edi
c001725b:	56                   	push   esi
c001725c:	53                   	push   ebx
c001725d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017261:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017265:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001726f:	85 ff                	test   edi,edi
c0017271:	74 3d                	je     c00172b0 <Process::addArgs(char**)+0x56>
c0017273:	8b 07                	mov    eax,DWORD PTR [edi]
c0017275:	85 c0                	test   eax,eax
c0017277:	74 37                	je     c00172b0 <Process::addArgs(char**)+0x56>
c0017279:	31 db                	xor    ebx,ebx
c001727b:	83 ec 0c             	sub    esp,0xc
c001727e:	50                   	push   eax
c001727f:	e8 a1 93 fe ff       	call   c0000625 <strlen>
c0017284:	40                   	inc    eax
c0017285:	89 04 24             	mov    DWORD PTR [esp],eax
c0017288:	e8 8b 49 ff ff       	call   c000bc18 <malloc>
c001728d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017294:	5a                   	pop    edx
c0017295:	59                   	pop    ecx
c0017296:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017299:	43                   	inc    ebx
c001729a:	50                   	push   eax
c001729b:	e8 07 94 fe ff       	call   c00006a7 <strcpy>
c00172a0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00172a6:	83 c4 10             	add    esp,0x10
c00172a9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00172ac:	85 c0                	test   eax,eax
c00172ae:	75 cb                	jne    c001727b <Process::addArgs(char**)+0x21>
c00172b0:	5b                   	pop    ebx
c00172b1:	5e                   	pop    esi
c00172b2:	5f                   	pop    edi
c00172b3:	c3                   	ret    

c00172b4 <Process::Process(char const*, Process*, char**)>:
c00172b4:	56                   	push   esi
c00172b5:	53                   	push   ebx
c00172b6:	83 ec 14             	sub    esp,0x14
c00172b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172bd:	05 0c 02 00 00       	add    eax,0x20c
c00172c2:	bb 07 00 00 00       	mov    ebx,0x7
c00172c7:	89 c6                	mov    esi,eax
c00172c9:	85 db                	test   ebx,ebx
c00172cb:	78 12                	js     c00172df <Process::Process(char const*, Process*, char**)+0x2b>
c00172cd:	83 ec 0c             	sub    esp,0xc
c00172d0:	56                   	push   esi
c00172d1:	e8 3a 77 00 00       	call   c001ea10 <ThreadControlBlock::ThreadControlBlock()>
c00172d6:	83 c4 10             	add    esp,0x10
c00172d9:	83 c6 63             	add    esi,0x63
c00172dc:	4b                   	dec    ebx
c00172dd:	eb ea                	jmp    c00172c9 <Process::Process(char const*, Process*, char**)+0x15>
c00172df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172e3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00172ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172ee:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00172f7:	a1 04 28 02 c0       	mov    eax,ds:0xc0022804
c00172fc:	8d 50 01             	lea    edx,[eax+0x1]
c00172ff:	89 15 04 28 02 c0    	mov    DWORD PTR ds:0xc0022804,edx
c0017305:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017309:	89 02                	mov    DWORD PTR [edx],eax
c001730b:	83 ec 0c             	sub    esp,0xc
c001730e:	6a 10                	push   0x10
c0017310:	e8 db 79 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0017315:	83 c4 10             	add    esp,0x10
c0017318:	89 c3                	mov    ebx,eax
c001731a:	83 ec 08             	sub    esp,0x8
c001731d:	6a 00                	push   0x0
c001731f:	53                   	push   ebx
c0017320:	e8 5f 76 ff ff       	call   c000e984 <VAS::VAS(bool)>
c0017325:	83 c4 10             	add    esp,0x10
c0017328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001732c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017336:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017344:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017348:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001734e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017352:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017358:	85 c0                	test   eax,eax
c001735a:	74 42                	je     c001739e <Process::Process(char const*, Process*, char**)+0xea>
c001735c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017360:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017366:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001736c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017370:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001737a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017380:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001738a:	05 0c 01 00 00       	add    eax,0x10c
c001738f:	83 ec 08             	sub    esp,0x8
c0017392:	52                   	push   edx
c0017393:	50                   	push   eax
c0017394:	e8 0e 93 fe ff       	call   c00006a7 <strcpy>
c0017399:	83 c4 10             	add    esp,0x10
c001739c:	eb 5c                	jmp    c00173fa <Process::Process(char const*, Process*, char**)+0x146>
c001739e:	83 ec 0c             	sub    esp,0xc
c00173a1:	68 60 12 00 00       	push   0x1260
c00173a6:	e8 45 79 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00173ab:	83 c4 10             	add    esp,0x10
c00173ae:	89 c3                	mov    ebx,eax
c00173b0:	83 ec 08             	sub    esp,0x8
c00173b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173b7:	53                   	push   ebx
c00173b8:	e8 95 5f ff ff       	call   c000d352 <VgaText::VgaText(char const*)>
c00173bd:	83 c4 10             	add    esp,0x10
c00173c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173c4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00173ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00173d4:	83 ec 0c             	sub    esp,0xc
c00173d7:	50                   	push   eax
c00173d8:	e8 76 53 ff ff       	call   c000c753 <addToTerminalCycle(VgaText*)>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e4:	05 0c 01 00 00       	add    eax,0x10c
c00173e9:	83 ec 08             	sub    esp,0x8
c00173ec:	68 5e 15 02 c0       	push   0xc002155e
c00173f1:	50                   	push   eax
c00173f2:	e8 b0 92 fe ff       	call   c00006a7 <strcpy>
c00173f7:	83 c4 10             	add    esp,0x10
c00173fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173fe:	83 c0 0c             	add    eax,0xc
c0017401:	83 ec 08             	sub    esp,0x8
c0017404:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017408:	50                   	push   eax
c0017409:	e8 99 92 fe ff       	call   c00006a7 <strcpy>
c001740e:	83 c4 10             	add    esp,0x10
c0017411:	83 ec 08             	sub    esp,0x8
c0017414:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017418:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001741c:	e8 39 fe ff ff       	call   c001725a <Process::addArgs(char**)>
c0017421:	83 c4 10             	add    esp,0x10
c0017424:	83 ec 08             	sub    esp,0x8
c0017427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001742b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001742f:	e8 40 ef ff ff       	call   c0016374 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017434:	83 c4 10             	add    esp,0x10
c0017437:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001743b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001743f:	83 f0 01             	xor    eax,0x1
c0017442:	88 c2                	mov    dl,al
c0017444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017448:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001744e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017453:	83 ec 08             	sub    esp,0x8
c0017456:	50                   	push   eax
c0017457:	68 b4 15 02 c0       	push   0xc00215b4
c001745c:	e8 7e 79 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	90                   	nop
c0017465:	83 c4 14             	add    esp,0x14
c0017468:	5b                   	pop    ebx
c0017469:	5e                   	pop    esi
c001746a:	c3                   	ret    
c001746b:	90                   	nop

c001746c <Process::Process(bool, char const*, Process*, char**)>:
c001746c:	56                   	push   esi
c001746d:	53                   	push   ebx
c001746e:	83 ec 14             	sub    esp,0x14
c0017471:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017475:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001747d:	05 0c 02 00 00       	add    eax,0x20c
c0017482:	bb 07 00 00 00       	mov    ebx,0x7
c0017487:	89 c6                	mov    esi,eax
c0017489:	85 db                	test   ebx,ebx
c001748b:	78 12                	js     c001749f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001748d:	83 ec 0c             	sub    esp,0xc
c0017490:	56                   	push   esi
c0017491:	e8 7a 75 00 00       	call   c001ea10 <ThreadControlBlock::ThreadControlBlock()>
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	83 c6 63             	add    esi,0x63
c001749c:	4b                   	dec    ebx
c001749d:	eb ea                	jmp    c0017489 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001749f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174a3:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00174aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174ae:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00174b7:	a1 04 28 02 c0       	mov    eax,ds:0xc0022804
c00174bc:	8d 50 01             	lea    edx,[eax+0x1]
c00174bf:	89 15 04 28 02 c0    	mov    DWORD PTR ds:0xc0022804,edx
c00174c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174c9:	89 02                	mov    DWORD PTR [edx],eax
c00174cb:	83 ec 0c             	sub    esp,0xc
c00174ce:	6a 10                	push   0x10
c00174d0:	e8 1b 78 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c00174d5:	83 c4 10             	add    esp,0x10
c00174d8:	89 c3                	mov    ebx,eax
c00174da:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00174df:	83 ec 08             	sub    esp,0x8
c00174e2:	50                   	push   eax
c00174e3:	53                   	push   ebx
c00174e4:	e8 9b 74 ff ff       	call   c000e984 <VAS::VAS(bool)>
c00174e9:	83 c4 10             	add    esp,0x10
c00174ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f0:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00174f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174fa:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017508:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001750c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017516:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001751c:	85 c0                	test   eax,eax
c001751e:	74 42                	je     c0017562 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017520:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017524:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001752a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017534:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001753a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001753e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017544:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001754a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001754e:	05 0c 01 00 00       	add    eax,0x10c
c0017553:	83 ec 08             	sub    esp,0x8
c0017556:	52                   	push   edx
c0017557:	50                   	push   eax
c0017558:	e8 4a 91 fe ff       	call   c00006a7 <strcpy>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	eb 5c                	jmp    c00175be <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	68 60 12 00 00       	push   0x1260
c001756a:	e8 81 77 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	89 c3                	mov    ebx,eax
c0017574:	83 ec 08             	sub    esp,0x8
c0017577:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001757b:	53                   	push   ebx
c001757c:	e8 d1 5d ff ff       	call   c000d352 <VgaText::VgaText(char const*)>
c0017581:	83 c4 10             	add    esp,0x10
c0017584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017588:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001758e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017592:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017598:	83 ec 0c             	sub    esp,0xc
c001759b:	50                   	push   eax
c001759c:	e8 b2 51 ff ff       	call   c000c753 <addToTerminalCycle(VgaText*)>
c00175a1:	83 c4 10             	add    esp,0x10
c00175a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a8:	05 0c 01 00 00       	add    eax,0x10c
c00175ad:	83 ec 08             	sub    esp,0x8
c00175b0:	68 5e 15 02 c0       	push   0xc002155e
c00175b5:	50                   	push   eax
c00175b6:	e8 ec 90 fe ff       	call   c00006a7 <strcpy>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175c2:	83 c0 0c             	add    eax,0xc
c00175c5:	83 ec 08             	sub    esp,0x8
c00175c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00175cc:	50                   	push   eax
c00175cd:	e8 d5 90 fe ff       	call   c00006a7 <strcpy>
c00175d2:	83 c4 10             	add    esp,0x10
c00175d5:	83 ec 08             	sub    esp,0x8
c00175d8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00175dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175e0:	e8 75 fc ff ff       	call   c001725a <Process::addArgs(char**)>
c00175e5:	83 c4 10             	add    esp,0x10
c00175e8:	90                   	nop
c00175e9:	83 c4 14             	add    esp,0x14
c00175ec:	5b                   	pop    ebx
c00175ed:	5e                   	pop    esi
c00175ee:	c3                   	ret    

c00175ef <disableIRQs()>:
c00175ef:	fa                   	cli    
c00175f0:	ff 05 8c 41 02 c0    	inc    DWORD PTR ds:0xc002418c
c00175f6:	c3                   	ret    

c00175f7 <getIRQNestingLevel()>:
c00175f7:	a1 8c 41 02 c0       	mov    eax,ds:0xc002418c
c00175fc:	c3                   	ret    

c00175fd <enableIRQs()>:
c00175fd:	a1 8c 41 02 c0       	mov    eax,ds:0xc002418c
c0017602:	48                   	dec    eax
c0017603:	a3 8c 41 02 c0       	mov    ds:0xc002418c,eax
c0017608:	75 01                	jne    c001760b <enableIRQs()+0xe>
c001760a:	fb                   	sti    
c001760b:	c3                   	ret    

c001760c <lockScheduler()>:
c001760c:	eb e1                	jmp    c00175ef <disableIRQs()>

c001760e <unlockScheduler()>:
c001760e:	eb ed                	jmp    c00175fd <enableIRQs()>

c0017610 <userModeEntryPoint(void*)>:
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	e8 f6 ff ff ff       	call   c001760e <unlockScheduler()>
c0017618:	fb                   	sti    
c0017619:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001761e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017621:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017627:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001762b:	83 c4 0c             	add    esp,0xc
c001762e:	e9 b3 8b fe ff       	jmp    c00001e6 <goToUsermode>

c0017633 <lockStuff()>:
c0017633:	e8 b7 ff ff ff       	call   c00175ef <disableIRQs()>
c0017638:	ff 05 88 41 02 c0    	inc    DWORD PTR ds:0xc0024188
c001763e:	c3                   	ret    

c001763f <taskStartupFunction>:
c001763f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017644:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017647:	c3                   	ret    

c0017648 <updateTimeUsed()>:
c0017648:	57                   	push   edi
c0017649:	56                   	push   esi
c001764a:	53                   	push   ebx
c001764b:	e8 f2 c5 ff ff       	call   c0013c42 <thisCPU()>
c0017650:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017657:	74 49                	je     c00176a2 <updateTimeUsed()+0x5a>
c0017659:	0f 31                	rdtsc  
c001765b:	89 c1                	mov    ecx,eax
c001765d:	a3 c8 41 02 c0       	mov    ds:0xc00241c8,eax
c0017662:	2b 0d b8 41 02 c0    	sub    ecx,DWORD PTR ds:0xc00241b8
c0017668:	89 d3                	mov    ebx,edx
c001766a:	89 0d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,ecx
c0017670:	1b 1d bc 41 02 c0    	sbb    ebx,DWORD PTR ds:0xc00241bc
c0017676:	a3 b8 41 02 c0       	mov    ds:0xc00241b8,eax
c001767b:	89 1d c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,ebx
c0017681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017686:	89 15 cc 41 02 c0    	mov    DWORD PTR ds:0xc00241cc,edx
c001768c:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001768f:	89 15 bc 41 02 c0    	mov    DWORD PTR ds:0xc00241bc,edx
c0017695:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017698:	01 f1                	add    ecx,esi
c001769a:	11 fb                	adc    ebx,edi
c001769c:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001769f:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00176a2:	5b                   	pop    ebx
c00176a3:	5e                   	pop    esi
c00176a4:	5f                   	pop    edi
c00176a5:	c3                   	ret    

c00176a6 <switchToThread(ThreadControlBlock*)>:
c00176a6:	53                   	push   ebx
c00176a7:	83 ec 08             	sub    esp,0x8
c00176aa:	a1 88 41 02 c0       	mov    eax,ds:0xc0024188
c00176af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00176b3:	85 c0                	test   eax,eax
c00176b5:	75 30                	jne    c00176e7 <switchToThread(ThreadControlBlock*)+0x41>
c00176b7:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c00176ba:	3c ff                	cmp    al,0xff
c00176bc:	74 25                	je     c00176e3 <switchToThread(ThreadControlBlock*)+0x3d>
c00176be:	0f b6 d0             	movzx  edx,al
c00176c1:	b8 84 03 00 00       	mov    eax,0x384
c00176c6:	29 d0                	sub    eax,edx
c00176c8:	c1 e0 10             	shl    eax,0x10
c00176cb:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00176ce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00176d1:	e8 72 ff ff ff       	call   c0017648 <updateTimeUsed()>
c00176d6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00176da:	83 c4 08             	add    esp,0x8
c00176dd:	5b                   	pop    ebx
c00176de:	e9 3c 8b fe ff       	jmp    c000021f <switchToThreadASM>
c00176e3:	31 c0                	xor    eax,eax
c00176e5:	eb e7                	jmp    c00176ce <switchToThread(ThreadControlBlock*)+0x28>
c00176e7:	c7 05 84 41 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024184,0x1
c00176f1:	83 c4 08             	add    esp,0x8
c00176f4:	5b                   	pop    ebx
c00176f5:	c3                   	ret    

c00176f6 <Semaphore::Semaphore(int)>:
c00176f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176fe:	89 10                	mov    DWORD PTR [eax],edx
c0017700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017704:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001770b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001770f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001771a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017721:	90                   	nop
c0017722:	c3                   	ret    
c0017723:	90                   	nop

c0017724 <Mutex::Mutex()>:
c0017724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017728:	6a 01                	push   0x1
c001772a:	50                   	push   eax
c001772b:	e8 c6 ff ff ff       	call   c00176f6 <Semaphore::Semaphore(int)>
c0017730:	83 c4 08             	add    esp,0x8
c0017733:	90                   	nop
c0017734:	c3                   	ret    
c0017735:	90                   	nop

c0017736 <Process::createThread(void (*)(void*), void*, int)>:
c0017736:	55                   	push   ebp
c0017737:	31 c9                	xor    ecx,ecx
c0017739:	57                   	push   edi
c001773a:	56                   	push   esi
c001773b:	53                   	push   ebx
c001773c:	83 ec 1c             	sub    esp,0x1c
c001773f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017743:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001774a:	89 f2                	mov    edx,esi
c001774c:	0f b7 c2             	movzx  eax,dx
c001774f:	83 e2 01             	and    edx,0x1
c0017752:	74 14                	je     c0017768 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017754:	d1 f8                	sar    eax,1
c0017756:	41                   	inc    ecx
c0017757:	89 c2                	mov    edx,eax
c0017759:	83 f9 10             	cmp    ecx,0x10
c001775c:	75 ee                	jne    c001774c <Process::createThread(void (*)(void*), void*, int)+0x16>
c001775e:	83 c4 1c             	add    esp,0x1c
c0017761:	31 c0                	xor    eax,eax
c0017763:	5b                   	pop    ebx
c0017764:	5e                   	pop    esi
c0017765:	5f                   	pop    edi
c0017766:	5d                   	pop    ebp
c0017767:	c3                   	ret    
c0017768:	83 ec 08             	sub    esp,0x8
c001776b:	b8 01 00 00 00       	mov    eax,0x1
c0017770:	d3 e0                	shl    eax,cl
c0017772:	09 c6                	or     esi,eax
c0017774:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001777a:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017781:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017784:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017787:	01 ce                	add    esi,ecx
c0017789:	89 f0                	mov    eax,esi
c001778b:	c1 e0 05             	shl    eax,0x5
c001778e:	01 c6                	add    esi,eax
c0017790:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017793:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017799:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001779f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177a3:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00177a9:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00177af:	89 ca                	mov    edx,ecx
c00177b1:	f7 da                	neg    edx
c00177b3:	c1 e2 15             	shl    edx,0x15
c00177b6:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00177bc:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00177c2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177c6:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00177d0:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00177d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00177da:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00177e0:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00177ea:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00177f4:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c00177fb:	50                   	push   eax
c00177fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017800:	68 a8 41 02 c0       	push   0xc00241a8
c0017805:	e8 4c 70 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001780a:	83 c4 10             	add    esp,0x10
c001780d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017811:	83 c4 1c             	add    esp,0x1c
c0017814:	5b                   	pop    ebx
c0017815:	5e                   	pop    esi
c0017816:	5f                   	pop    edi
c0017817:	5d                   	pop    ebp
c0017818:	c3                   	ret    
c0017819:	90                   	nop

c001781a <Process::createUserThread()>:
c001781a:	83 ec 0c             	sub    esp,0xc
c001781d:	68 80 00 00 00       	push   0x80
c0017822:	6a 00                	push   0x0
c0017824:	68 10 76 01 c0       	push   0xc0017610
c0017829:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001782d:	e8 04 ff ff ff       	call   c0017736 <Process::createThread(void (*)(void*), void*, int)>
c0017832:	83 c4 1c             	add    esp,0x1c
c0017835:	c3                   	ret    

c0017836 <setupMultitasking(void (*)())>:
c0017836:	56                   	push   esi
c0017837:	53                   	push   ebx
c0017838:	53                   	push   ebx
c0017839:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001783d:	eb 10                	jmp    c001784f <setupMultitasking(void (*)())+0x19>
c001783f:	83 ec 0c             	sub    esp,0xc
c0017842:	68 a8 41 02 c0       	push   0xc00241a8
c0017847:	e8 5c 6f 00 00       	call   c001e7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001784c:	83 c4 10             	add    esp,0x10
c001784f:	83 ec 0c             	sub    esp,0xc
c0017852:	68 a8 41 02 c0       	push   0xc00241a8
c0017857:	e8 30 6f 00 00       	call   c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	84 c0                	test   al,al
c0017861:	74 dc                	je     c001783f <setupMultitasking(void (*)())+0x9>
c0017863:	83 ec 0c             	sub    esp,0xc
c0017866:	68 3b 07 00 00       	push   0x73b
c001786b:	e8 80 74 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0017870:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017877:	89 c3                	mov    ebx,eax
c0017879:	6a 00                	push   0x0
c001787b:	68 62 15 02 c0       	push   0xc0021562
c0017880:	6a 01                	push   0x1
c0017882:	50                   	push   eax
c0017883:	e8 e4 fb ff ff       	call   c001746c <Process::Process(bool, char const*, Process*, char**)>
c0017888:	83 c4 18             	add    esp,0x18
c001788b:	89 1d b4 41 02 c0    	mov    DWORD PTR ds:0xc00241b4,ebx
c0017891:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017897:	68 dc 15 02 c0       	push   0xc00215dc
c001789c:	e8 3e 75 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00178a1:	58                   	pop    eax
c00178a2:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c00178a8:	e8 1a 56 ff ff       	call   c000cec7 <setActiveTerminal(VgaText*)>
c00178ad:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c00178b5:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00178bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178be:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00178c8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00178ce:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00178d4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00178de:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c00178e8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00178f2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00178f8:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00178fe:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017908:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001790e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017918:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001791e:	5a                   	pop    edx
c001791f:	59                   	pop    ecx
c0017920:	68 5e 15 02 c0       	push   0xc002155e
c0017925:	50                   	push   eax
c0017926:	e8 7c 8d fe ff       	call   c00006a7 <strcpy>
c001792b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017932:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017936:	83 c4 14             	add    esp,0x14
c0017939:	5b                   	pop    ebx
c001793a:	5e                   	pop    esi
c001793b:	e9 d1 88 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017940 <schedule()>:
c0017940:	a1 88 41 02 c0       	mov    eax,ds:0xc0024188
c0017945:	85 c0                	test   eax,eax
c0017947:	74 0b                	je     c0017954 <schedule()+0x14>
c0017949:	c7 05 84 41 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024184,0x1
c0017953:	c3                   	ret    
c0017954:	53                   	push   ebx
c0017955:	83 ec 14             	sub    esp,0x14
c0017958:	68 a8 41 02 c0       	push   0xc00241a8
c001795d:	e8 2a 6e 00 00       	call   c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	84 c0                	test   al,al
c0017967:	75 38                	jne    c00179a1 <schedule()+0x61>
c0017969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001796e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017971:	4a                   	dec    edx
c0017972:	74 32                	je     c00179a6 <schedule()+0x66>
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	68 a8 41 02 c0       	push   0xc00241a8
c001797c:	e8 03 6e 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017981:	c7 04 24 a8 41 02 c0 	mov    DWORD PTR [esp],0xc00241a8
c0017988:	89 c3                	mov    ebx,eax
c001798a:	e8 19 6e 00 00       	call   c001e7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001798f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017999:	e8 08 fd ff ff       	call   c00176a6 <switchToThread(ThreadControlBlock*)>
c001799e:	83 c4 10             	add    esp,0x10
c00179a1:	83 c4 08             	add    esp,0x8
c00179a4:	5b                   	pop    ebx
c00179a5:	c3                   	ret    
c00179a6:	83 ec 08             	sub    esp,0x8
c00179a9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00179b0:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00179b6:	68 a8 41 02 c0       	push   0xc00241a8
c00179bb:	e8 96 6e 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00179c0:	83 c4 10             	add    esp,0x10
c00179c3:	eb af                	jmp    c0017974 <schedule()+0x34>

c00179c5 <unlockStuff()>:
c00179c5:	a1 88 41 02 c0       	mov    eax,ds:0xc0024188
c00179ca:	48                   	dec    eax
c00179cb:	a3 88 41 02 c0       	mov    ds:0xc0024188,eax
c00179d0:	75 09                	jne    c00179db <unlockStuff()+0x16>
c00179d2:	a1 84 41 02 c0       	mov    eax,ds:0xc0024184
c00179d7:	85 c0                	test   eax,eax
c00179d9:	75 05                	jne    c00179e0 <unlockStuff()+0x1b>
c00179db:	e9 1d fc ff ff       	jmp    c00175fd <enableIRQs()>
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	c7 05 84 41 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024184,0x0
c00179ed:	e8 4e ff ff ff       	call   c0017940 <schedule()>
c00179f2:	83 c4 0c             	add    esp,0xc
c00179f5:	e9 03 fc ff ff       	jmp    c00175fd <enableIRQs()>

c00179fa <forkProcess(regs*)>:
c00179fa:	56                   	push   esi
c00179fb:	53                   	push   ebx
c00179fc:	50                   	push   eax
c00179fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a05:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017a0d:	0f 85 3e 01 00 00    	jne    c0017b51 <forkProcess(regs*)+0x157>
c0017a13:	e8 1b fc ff ff       	call   c0017633 <lockStuff()>
c0017a18:	83 ec 0c             	sub    esp,0xc
c0017a1b:	68 3b 07 00 00       	push   0x73b
c0017a20:	e8 cb 72 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0017a25:	89 c3                	mov    ebx,eax
c0017a27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017a36:	50                   	push   eax
c0017a37:	83 c0 0c             	add    eax,0xc
c0017a3a:	50                   	push   eax
c0017a3b:	6a 00                	push   0x0
c0017a3d:	53                   	push   ebx
c0017a3e:	e8 29 fa ff ff       	call   c001746c <Process::Process(bool, char const*, Process*, char**)>
c0017a43:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017a49:	83 c4 20             	add    esp,0x20
c0017a4c:	85 f6                	test   esi,esi
c0017a4e:	74 16                	je     c0017a66 <forkProcess(regs*)+0x6c>
c0017a50:	83 ec 0c             	sub    esp,0xc
c0017a53:	56                   	push   esi
c0017a54:	e8 d1 65 ff ff       	call   c000e02a <VAS::~VAS()>
c0017a59:	59                   	pop    ecx
c0017a5a:	58                   	pop    eax
c0017a5b:	6a 10                	push   0x10
c0017a5d:	56                   	push   esi
c0017a5e:	e8 9c 72 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	83 ec 0c             	sub    esp,0xc
c0017a69:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0017a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a7a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017a80:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0017a86:	6a 10                	push   0x10
c0017a88:	e8 63 72 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0017a8d:	59                   	pop    ecx
c0017a8e:	89 c6                	mov    esi,eax
c0017a90:	58                   	pop    eax
c0017a91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a99:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017a9f:	56                   	push   esi
c0017aa0:	e8 a7 6a ff ff       	call   c000e54c <VAS::VAS(VAS*)>
c0017aa5:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0017aab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0017aae:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ab0:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017abb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017abe:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0017ac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acc:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0017ad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ad7:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c0017ada:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017ae4:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c0017aea:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017af0:	81 c3 0c 02 00 00    	add    ebx,0x20c
c0017af6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017afb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017afe:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0017b05:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017b08:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c0017b0f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017b16:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017b1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b22:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017b25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0017b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b2d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017b30:	58                   	pop    eax
c0017b31:	5a                   	pop    edx
c0017b32:	53                   	push   ebx
c0017b33:	68 a8 41 02 c0       	push   0xc00241a8
c0017b38:	e8 19 6d 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b3d:	e8 83 fe ff ff       	call   c00179c5 <unlockStuff()>
c0017b42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b47:	83 c4 10             	add    esp,0x10
c0017b4a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017b4d:	5a                   	pop    edx
c0017b4e:	5b                   	pop    ebx
c0017b4f:	5e                   	pop    esi
c0017b50:	c3                   	ret    
c0017b51:	83 ec 0c             	sub    esp,0xc
c0017b54:	68 10 16 02 c0       	push   0xc0021610
c0017b59:	e8 81 72 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017b66:	eb e5                	jmp    c0017b4d <forkProcess(regs*)+0x153>

c0017b68 <Semaphore::tryAcquire()>:
c0017b68:	83 ec 0c             	sub    esp,0xc
c0017b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b6f:	e8 bf fa ff ff       	call   c0017633 <lockStuff()>
c0017b74:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017b77:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017b79:	7c 0b                	jl     c0017b86 <Semaphore::tryAcquire()+0x1e>
c0017b7b:	e8 45 fe ff ff       	call   c00179c5 <unlockStuff()>
c0017b80:	31 c0                	xor    eax,eax
c0017b82:	83 c4 0c             	add    esp,0xc
c0017b85:	c3                   	ret    
c0017b86:	42                   	inc    edx
c0017b87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017b8a:	e8 36 fe ff ff       	call   c00179c5 <unlockStuff()>
c0017b8f:	b0 01                	mov    al,0x1
c0017b91:	83 c4 0c             	add    esp,0xc
c0017b94:	c3                   	ret    
c0017b95:	90                   	nop

c0017b96 <Semaphore::assertLocked(char const*)>:
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ba1:	e8 8d fa ff ff       	call   c0017633 <lockStuff()>
c0017ba6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017ba8:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017bab:	7c 08                	jl     c0017bb5 <Semaphore::assertLocked(char const*)+0x1f>
c0017bad:	83 c4 0c             	add    esp,0xc
c0017bb0:	e9 10 fe ff ff       	jmp    c00179c5 <unlockStuff()>
c0017bb5:	83 ec 0c             	sub    esp,0xc
c0017bb8:	52                   	push   edx
c0017bb9:	e8 8a cd ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	83 c4 0c             	add    esp,0xc
c0017bc4:	e9 fc fd ff ff       	jmp    c00179c5 <unlockStuff()>

c0017bc9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017bc9:	83 ec 0c             	sub    esp,0xc
c0017bcc:	e8 26 fa ff ff       	call   c00175f7 <getIRQNestingLevel()>
c0017bd1:	83 ec 08             	sub    esp,0x8
c0017bd4:	50                   	push   eax
c0017bd5:	68 3c 16 02 c0       	push   0xc002163c
c0017bda:	e8 00 72 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017bdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017be3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017be8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017beb:	e8 50 fd ff ff       	call   c0017940 <schedule()>
c0017bf0:	e8 19 fa ff ff       	call   c001760e <unlockScheduler()>
c0017bf5:	e8 fd f9 ff ff       	call   c00175f7 <getIRQNestingLevel()>
c0017bfa:	5a                   	pop    edx
c0017bfb:	59                   	pop    ecx
c0017bfc:	50                   	push   eax
c0017bfd:	68 70 16 02 c0       	push   0xc0021670
c0017c02:	e8 d8 71 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017c07:	83 c4 1c             	add    esp,0x1c
c0017c0a:	c3                   	ret    

c0017c0b <blockTask(TaskState)>:
c0017c0b:	83 ec 0c             	sub    esp,0xc
c0017c0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c12:	e8 f5 f9 ff ff       	call   c001760c <lockScheduler()>
c0017c17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c1c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017c1f:	e8 1c fd ff ff       	call   c0017940 <schedule()>
c0017c24:	83 c4 0c             	add    esp,0xc
c0017c27:	e9 e2 f9 ff ff       	jmp    c001760e <unlockScheduler()>

c0017c2c <waitTask(int, int*, int)>:
c0017c2c:	83 ec 18             	sub    esp,0x18
c0017c2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c38:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017c3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c44:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017c47:	6a 07                	push   0x7
c0017c49:	e8 bd ff ff ff       	call   c0017c0b <blockTask(TaskState)>
c0017c4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017c59:	85 d2                	test   edx,edx
c0017c5b:	74 0a                	je     c0017c67 <waitTask(int, int*, int)+0x3b>
c0017c5d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017c60:	89 02                	mov    DWORD PTR [edx],eax
c0017c62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c67:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017c6a:	83 c4 0c             	add    esp,0xc
c0017c6d:	c3                   	ret    

c0017c6e <nanoSleepUntil(unsigned long long)>:
c0017c6e:	83 ec 0c             	sub    esp,0xc
c0017c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c79:	3b 05 d0 33 02 c0    	cmp    eax,DWORD PTR ds:0xc00233d0
c0017c7f:	89 d1                	mov    ecx,edx
c0017c81:	1b 0d d4 33 02 c0    	sbb    ecx,DWORD PTR ds:0xc00233d4
c0017c87:	73 04                	jae    c0017c8d <nanoSleepUntil(unsigned long long)+0x1f>
c0017c89:	83 c4 0c             	add    esp,0xc
c0017c8c:	c3                   	ret    
c0017c8d:	e8 a1 f9 ff ff       	call   c0017633 <lockStuff()>
c0017c92:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017c98:	83 ec 08             	sub    esp,0x8
c0017c9b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017c9e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017ca1:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017ca7:	68 9c 41 02 c0       	push   0xc002419c
c0017cac:	e8 a5 6b 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017cb1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017cb8:	e8 4e ff ff ff       	call   c0017c0b <blockTask(TaskState)>
c0017cbd:	83 c4 1c             	add    esp,0x1c
c0017cc0:	e9 00 fd ff ff       	jmp    c00179c5 <unlockStuff()>

c0017cc5 <nanoSleep(unsigned long long)>:
c0017cc5:	a1 d0 33 02 c0       	mov    eax,ds:0xc00233d0
c0017cca:	8b 15 d4 33 02 c0    	mov    edx,DWORD PTR ds:0xc00233d4
c0017cd0:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017cd4:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017cd8:	eb 94                	jmp    c0017c6e <nanoSleepUntil(unsigned long long)>

c0017cda <sleep(unsigned long long)>:
c0017cda:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0017ce2:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0017ce7:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017ceb:	01 ca                	add    edx,ecx
c0017ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cf1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017cf5:	eb ce                	jmp    c0017cc5 <nanoSleep(unsigned long long)>
c0017cf7:	90                   	nop

c0017cf8 <Semaphore::acquire()>:
c0017cf8:	83 ec 0c             	sub    esp,0xc
c0017cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cff:	e8 2f f9 ff ff       	call   c0017633 <lockStuff()>
c0017d04:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d07:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017d09:	7d 0c                	jge    c0017d17 <Semaphore::acquire()+0x1f>
c0017d0b:	42                   	inc    edx
c0017d0c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d0f:	83 c4 0c             	add    esp,0xc
c0017d12:	e9 ae fc ff ff       	jmp    c00179c5 <unlockStuff()>
c0017d17:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017d1d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0017d24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017d27:	85 d2                	test   edx,edx
c0017d29:	74 2a                	je     c0017d55 <Semaphore::acquire()+0x5d>
c0017d2b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0017d2e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017d34:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0017d37:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017d43:	6a 05                	push   0x5
c0017d45:	e8 c1 fe ff ff       	call   c0017c0b <blockTask(TaskState)>
c0017d4a:	83 c4 10             	add    esp,0x10
c0017d4d:	83 c4 0c             	add    esp,0xc
c0017d50:	e9 70 fc ff ff       	jmp    c00179c5 <unlockStuff()>
c0017d55:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017d5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017d5e:	eb d7                	jmp    c0017d37 <Semaphore::acquire()+0x3f>

c0017d60 <execveProcess(char const*, char* const*, char* const*)>:
c0017d60:	56                   	push   esi
c0017d61:	53                   	push   ebx
c0017d62:	50                   	push   eax
c0017d63:	e8 cb f8 ff ff       	call   c0017633 <lockStuff()>
c0017d68:	83 ec 0c             	sub    esp,0xc
c0017d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017d73:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0017d79:	68 3b 07 00 00       	push   0x73b
c0017d7e:	e8 6d 6f ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0017d83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017d87:	89 c3                	mov    ebx,eax
c0017d89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017d91:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c0017d97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017d9b:	53                   	push   ebx
c0017d9c:	e8 13 f5 ff ff       	call   c00172b4 <Process::Process(char const*, Process*, char**)>
c0017da1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017da6:	83 c4 20             	add    esp,0x20
c0017da9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017dac:	85 f6                	test   esi,esi
c0017dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db0:	89 03                	mov    DWORD PTR [ebx],eax
c0017db2:	74 06                	je     c0017dba <execveProcess(char const*, char* const*, char* const*)+0x5a>
c0017db4:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c0017dba:	83 ec 0c             	sub    esp,0xc
c0017dbd:	53                   	push   ebx
c0017dbe:	e8 57 fa ff ff       	call   c001781a <Process::createUserThread()>
c0017dc3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017dca:	e8 3c fe ff ff       	call   c0017c0b <blockTask(TaskState)>
c0017dcf:	e8 f1 fb ff ff       	call   c00179c5 <unlockStuff()>
c0017dd4:	e8 33 f8 ff ff       	call   c001760c <lockScheduler()>
c0017dd9:	e8 62 fb ff ff       	call   c0017940 <schedule()>
c0017dde:	e8 2b f8 ff ff       	call   c001760e <unlockScheduler()>
c0017de3:	83 c4 14             	add    esp,0x14
c0017de6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017deb:	5b                   	pop    ebx
c0017dec:	5e                   	pop    esi
c0017ded:	c3                   	ret    

c0017dee <taskReturned>:
c0017dee:	83 ec 0c             	sub    esp,0xc
c0017df1:	e8 18 f8 ff ff       	call   c001760e <unlockScheduler()>
c0017df6:	83 ec 08             	sub    esp,0x8
c0017df9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dfe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017e01:	83 c0 0c             	add    eax,0xc
c0017e04:	50                   	push   eax
c0017e05:	68 69 15 02 c0       	push   0xc0021569
c0017e0a:	e8 d0 6f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	83 ec 0c             	sub    esp,0xc
c0017e15:	6a 02                	push   0x2
c0017e17:	e8 ef fd ff ff       	call   c0017c0b <blockTask(TaskState)>
c0017e1c:	e8 eb f7 ff ff       	call   c001760c <lockScheduler()>
c0017e21:	e8 1a fb ff ff       	call   c0017940 <schedule()>
c0017e26:	e8 e3 f7 ff ff       	call   c001760e <unlockScheduler()>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	eb e2                	jmp    c0017e12 <taskReturned+0x24>

c0017e30 <unblockTask(ThreadControlBlock*)>:
c0017e30:	53                   	push   ebx
c0017e31:	83 ec 08             	sub    esp,0x8
c0017e34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e38:	e8 cf f7 ff ff       	call   c001760c <lockScheduler()>
c0017e3d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017e40:	85 c0                	test   eax,eax
c0017e42:	74 5c                	je     c0017ea0 <unblockTask(ThreadControlBlock*)+0x70>
c0017e44:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017e47:	48                   	dec    eax
c0017e48:	74 31                	je     c0017e7b <unblockTask(ThreadControlBlock*)+0x4b>
c0017e4a:	83 ec 0c             	sub    esp,0xc
c0017e4d:	68 a8 41 02 c0       	push   0xc00241a8
c0017e52:	e8 2d 69 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	85 c0                	test   eax,eax
c0017e5c:	75 17                	jne    c0017e75 <unblockTask(ThreadControlBlock*)+0x45>
c0017e5e:	eb 65                	jmp    c0017ec5 <unblockTask(ThreadControlBlock*)+0x95>
c0017e60:	83 ec 08             	sub    esp,0x8
c0017e63:	50                   	push   eax
c0017e64:	68 a8 41 02 c0       	push   0xc00241a8
c0017e69:	e8 38 6c 00 00       	call   c001eaa6 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017e6e:	83 c4 10             	add    esp,0x10
c0017e71:	85 c0                	test   eax,eax
c0017e73:	74 50                	je     c0017ec5 <unblockTask(ThreadControlBlock*)+0x95>
c0017e75:	39 c3                	cmp    ebx,eax
c0017e77:	75 e7                	jne    c0017e60 <unblockTask(ThreadControlBlock*)+0x30>
c0017e79:	eb 1c                	jmp    c0017e97 <unblockTask(ThreadControlBlock*)+0x67>
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	68 60 17 02 c0       	push   0xc0021760
c0017e83:	e8 57 6f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017e88:	c7 04 24 ec 16 02 c0 	mov    DWORD PTR [esp],0xc00216ec
c0017e8f:	e8 4b 6f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017e94:	83 c4 10             	add    esp,0x10
c0017e97:	83 c4 08             	add    esp,0x8
c0017e9a:	5b                   	pop    ebx
c0017e9b:	e9 6e f7 ff ff       	jmp    c001760e <unlockScheduler()>
c0017ea0:	83 ec 0c             	sub    esp,0xc
c0017ea3:	68 a4 16 02 c0       	push   0xc00216a4
c0017ea8:	e8 32 6f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017ead:	c7 04 24 ec 16 02 c0 	mov    DWORD PTR [esp],0xc00216ec
c0017eb4:	e8 26 6f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0017eb9:	83 c4 10             	add    esp,0x10
c0017ebc:	83 c4 08             	add    esp,0x8
c0017ebf:	5b                   	pop    ebx
c0017ec0:	e9 49 f7 ff ff       	jmp    c001760e <unlockScheduler()>
c0017ec5:	83 ec 08             	sub    esp,0x8
c0017ec8:	53                   	push   ebx
c0017ec9:	68 a8 41 02 c0       	push   0xc00241a8
c0017ece:	e8 83 69 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017ed3:	83 c4 10             	add    esp,0x10
c0017ed6:	83 c4 08             	add    esp,0x8
c0017ed9:	5b                   	pop    ebx
c0017eda:	e9 2f f7 ff ff       	jmp    c001760e <unlockScheduler()>

c0017edf <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017edf:	55                   	push   ebp
c0017ee0:	57                   	push   edi
c0017ee1:	56                   	push   esi
c0017ee2:	53                   	push   ebx
c0017ee3:	83 ec 1c             	sub    esp,0x1c
c0017ee6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017eea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017eed:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0017ef3:	85 c9                	test   ecx,ecx
c0017ef5:	7e 20                	jle    c0017f17 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0017ef7:	31 f6                	xor    esi,esi
c0017ef9:	83 ec 0c             	sub    esp,0xc
c0017efc:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0017f03:	46                   	inc    esi
c0017f04:	e8 1f 3d ff ff       	call   c000bc28 <free>
c0017f09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017f0c:	83 c4 10             	add    esp,0x10
c0017f0f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0017f15:	7f e2                	jg     c0017ef9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0017f17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017f21:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017f26:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017f29:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017f2c:	d3 c0                	rol    eax,cl
c0017f2e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0017f35:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017f38:	89 f7                	mov    edi,esi
c0017f3a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0017f42:	0f 85 4f 01 00 00    	jne    c0018097 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0017f48:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017f4e:	85 c0                	test   eax,eax
c0017f50:	0f 84 aa 00 00 00    	je     c0018000 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0017f56:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017f59:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017f5d:	31 c9                	xor    ecx,ecx
c0017f5f:	eb 10                	jmp    c0017f71 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0017f61:	41                   	inc    ecx
c0017f62:	83 f9 10             	cmp    ecx,0x10
c0017f65:	0f 84 95 00 00 00    	je     c0018000 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0017f6b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017f71:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0017f78:	d3 fa                	sar    edx,cl
c0017f7a:	83 e2 01             	and    edx,0x1
c0017f7d:	74 e2                	je     c0017f61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017f7f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0017f82:	01 ca                	add    edx,ecx
c0017f84:	89 d5                	mov    ebp,edx
c0017f86:	c1 e5 05             	shl    ebp,0x5
c0017f89:	01 ea                	add    edx,ebp
c0017f8b:	01 d0                	add    eax,edx
c0017f8d:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017f93:	83 fd 07             	cmp    ebp,0x7
c0017f96:	75 c9                	jne    c0017f61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017f98:	05 40 02 00 00       	add    eax,0x240
c0017f9d:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017fa0:	83 fd ff             	cmp    ebp,0xffffffff
c0017fa3:	0f 8c 01 01 00 00    	jl     c00180aa <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c0017fa9:	0f 84 b2 01 00 00    	je     c0018161 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c0017faf:	85 ed                	test   ebp,ebp
c0017fb1:	0f 84 99 01 00 00    	je     c0018150 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c0017fb7:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017fb9:	75 a6                	jne    c0017f61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017fbb:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017fc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017fc5:	01 d0                	add    eax,edx
c0017fc7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017fcb:	83 ec 0c             	sub    esp,0xc
c0017fce:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017fd4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017fd7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017fdd:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017fe4:	50                   	push   eax
c0017fe5:	e8 46 fe ff ff       	call   c0017e30 <unblockTask(ThreadControlBlock*)>
c0017fea:	83 c4 10             	add    esp,0x10
c0017fed:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017ff0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ff4:	89 f7                	mov    edi,esi
c0017ff6:	41                   	inc    ecx
c0017ff7:	83 f9 10             	cmp    ecx,0x10
c0017ffa:	0f 85 6b ff ff ff    	jne    c0017f6b <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018000:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018006:	85 c0                	test   eax,eax
c0018008:	74 5d                	je     c0018067 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001800a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018010:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018016:	74 4f                	je     c0018067 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018018:	83 ec 0c             	sub    esp,0xc
c001801b:	68 a8 41 02 c0       	push   0xc00241a8
c0018020:	e8 5f 67 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018025:	c7 04 24 a8 41 02 c0 	mov    DWORD PTR [esp],0xc00241a8
c001802c:	89 c7                	mov    edi,eax
c001802e:	e8 59 67 00 00       	call   c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	84 c0                	test   al,al
c0018038:	0f 84 dd 00 00 00    	je     c001811b <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001803e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018041:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018047:	85 d2                	test   edx,edx
c0018049:	74 0f                	je     c001805a <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001804b:	83 ec 0c             	sub    esp,0xc
c001804e:	8b 02                	mov    eax,DWORD PTR [edx]
c0018050:	52                   	push   edx
c0018051:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018054:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018057:	83 c4 10             	add    esp,0x10
c001805a:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018064:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018067:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c001806d:	85 f6                	test   esi,esi
c001806f:	74 16                	je     c0018087 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018071:	83 ec 0c             	sub    esp,0xc
c0018074:	56                   	push   esi
c0018075:	e8 b0 5f ff ff       	call   c000e02a <VAS::~VAS()>
c001807a:	58                   	pop    eax
c001807b:	5a                   	pop    edx
c001807c:	6a 10                	push   0x10
c001807e:	56                   	push   esi
c001807f:	e8 7b 6c ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0018084:	83 c4 10             	add    esp,0x10
c0018087:	83 ec 0c             	sub    esp,0xc
c001808a:	68 85 15 02 c0       	push   0xc0021585
c001808f:	e8 4b 6d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0018094:	83 c4 10             	add    esp,0x10
c0018097:	83 ec 08             	sub    esp,0x8
c001809a:	6a 63                	push   0x63
c001809c:	53                   	push   ebx
c001809d:	e8 5d 6c ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c00180a2:	83 c4 2c             	add    esp,0x2c
c00180a5:	5b                   	pop    ebx
c00180a6:	5e                   	pop    esi
c00180a7:	5f                   	pop    edi
c00180a8:	5d                   	pop    ebp
c00180a9:	c3                   	ret    
c00180aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00180ae:	83 ec 0c             	sub    esp,0xc
c00180b1:	68 a4 17 02 c0       	push   0xc00217a4
c00180b6:	e8 8d c8 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c00180bb:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00180be:	83 c4 10             	add    esp,0x10
c00180c1:	89 f7                	mov    edi,esi
c00180c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180c7:	e9 95 fe ff ff       	jmp    c0017f61 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00180cc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00180d2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00180d8:	75 1c                	jne    c00180f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c00180da:	83 ec 0c             	sub    esp,0xc
c00180dd:	68 0c 18 02 c0       	push   0xc002180c
c00180e2:	e8 f8 6c ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c00180e7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00180ee:	e8 18 fb ff ff       	call   c0017c0b <blockTask(TaskState)>
c00180f3:	83 c4 10             	add    esp,0x10
c00180f6:	83 ec 08             	sub    esp,0x8
c00180f9:	56                   	push   esi
c00180fa:	68 a8 41 02 c0       	push   0xc00241a8
c00180ff:	e8 52 67 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018104:	c7 04 24 a8 41 02 c0 	mov    DWORD PTR [esp],0xc00241a8
c001810b:	e8 74 66 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018110:	83 c4 10             	add    esp,0x10
c0018113:	39 f8                	cmp    eax,edi
c0018115:	0f 84 23 ff ff ff    	je     c001803e <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001811b:	83 ec 0c             	sub    esp,0xc
c001811e:	68 a8 41 02 c0       	push   0xc00241a8
c0018123:	e8 5c 66 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018128:	c7 04 24 a8 41 02 c0 	mov    DWORD PTR [esp],0xc00241a8
c001812f:	89 c6                	mov    esi,eax
c0018131:	e8 72 66 00 00       	call   c001e7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	39 f3                	cmp    ebx,esi
c001813b:	74 b9                	je     c00180f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c001813d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018140:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018143:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018149:	75 ab                	jne    c00180f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c001814b:	e9 7c ff ff ff       	jmp    c00180cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c0018150:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018154:	83 ec 0c             	sub    esp,0xc
c0018157:	68 d8 17 02 c0       	push   0xc00217d8
c001815c:	e9 55 ff ff ff       	jmp    c00180b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c0018161:	8b 36                	mov    esi,DWORD PTR [esi]
c0018163:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018167:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001816a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001816d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018173:	01 d7                	add    edi,edx
c0018175:	89 f8                	mov    eax,edi
c0018177:	e9 4b fe ff ff       	jmp    c0017fc7 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001817c <cleanerTaskFunction(void*)>:
c001817c:	53                   	push   ebx
c001817d:	83 ec 08             	sub    esp,0x8
c0018180:	e8 89 f4 ff ff       	call   c001760e <unlockScheduler()>
c0018185:	e8 82 f4 ff ff       	call   c001760c <lockScheduler()>
c001818a:	80 3d 6c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002416c,0x0
c0018191:	75 72                	jne    c0018205 <cleanerTaskFunction(void*)+0x89>
c0018193:	83 ec 0c             	sub    esp,0xc
c0018196:	6a 02                	push   0x2
c0018198:	e8 2c fa ff ff       	call   c0017bc9 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	c6 05 6c 41 02 c0 00 	mov    BYTE PTR ds:0xc002416c,0x0
c00181a7:	e8 87 f4 ff ff       	call   c0017633 <lockStuff()>
c00181ac:	e8 5b f4 ff ff       	call   c001760c <lockScheduler()>
c00181b1:	83 ec 0c             	sub    esp,0xc
c00181b4:	68 90 41 02 c0       	push   0xc0024190
c00181b9:	e8 ce 65 00 00       	call   c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00181be:	83 c4 10             	add    esp,0x10
c00181c1:	84 c0                	test   al,al
c00181c3:	75 28                	jne    c00181ed <cleanerTaskFunction(void*)+0x71>
c00181c5:	83 ec 0c             	sub    esp,0xc
c00181c8:	68 90 41 02 c0       	push   0xc0024190
c00181cd:	e8 b2 65 00 00       	call   c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00181d2:	c7 04 24 90 41 02 c0 	mov    DWORD PTR [esp],0xc0024190
c00181d9:	89 c3                	mov    ebx,eax
c00181db:	e8 c8 65 00 00       	call   c001e7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00181e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00181e3:	e8 f7 fc ff ff       	call   c0017edf <cleanupTerminatedTask(ThreadControlBlock*)>
c00181e8:	83 c4 10             	add    esp,0x10
c00181eb:	eb c4                	jmp    c00181b1 <cleanerTaskFunction(void*)+0x35>
c00181ed:	e8 1c f4 ff ff       	call   c001760e <unlockScheduler()>
c00181f2:	e8 ce f7 ff ff       	call   c00179c5 <unlockStuff()>
c00181f7:	e8 10 f4 ff ff       	call   c001760c <lockScheduler()>
c00181fc:	80 3d 6c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002416c,0x0
c0018203:	74 8e                	je     c0018193 <cleanerTaskFunction(void*)+0x17>
c0018205:	e8 04 f4 ff ff       	call   c001760e <unlockScheduler()>
c001820a:	eb 94                	jmp    c00181a0 <cleanerTaskFunction(void*)+0x24>

c001820c <terminateTask(int)>:
c001820c:	83 ec 0c             	sub    esp,0xc
c001820f:	e8 1f f4 ff ff       	call   c0017633 <lockStuff()>
c0018214:	e8 f3 f3 ff ff       	call   c001760c <lockScheduler()>
c0018219:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001821d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018222:	83 ec 08             	sub    esp,0x8
c0018225:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001822d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018230:	50                   	push   eax
c0018231:	68 90 41 02 c0       	push   0xc0024190
c0018236:	e8 1b 66 00 00       	call   c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001823b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018240:	83 c4 10             	add    esp,0x10
c0018243:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001824a:	a1 68 41 02 c0       	mov    eax,ds:0xc0024168
c001824f:	85 c0                	test   eax,eax
c0018251:	74 2e                	je     c0018281 <terminateTask(int)+0x75>
c0018253:	83 ec 0c             	sub    esp,0xc
c0018256:	c6 05 6c 41 02 c0 01 	mov    BYTE PTR ds:0xc002416c,0x1
c001825d:	50                   	push   eax
c001825e:	e8 cd fb ff ff       	call   c0017e30 <unblockTask(ThreadControlBlock*)>
c0018263:	83 c4 10             	add    esp,0x10
c0018266:	e8 a3 f3 ff ff       	call   c001760e <unlockScheduler()>
c001826b:	e8 55 f7 ff ff       	call   c00179c5 <unlockStuff()>
c0018270:	e8 97 f3 ff ff       	call   c001760c <lockScheduler()>
c0018275:	e8 c6 f6 ff ff       	call   c0017940 <schedule()>
c001827a:	e8 8f f3 ff ff       	call   c001760e <unlockScheduler()>
c001827f:	eb ef                	jmp    c0018270 <terminateTask(int)+0x64>
c0018281:	83 ec 0c             	sub    esp,0xc
c0018284:	68 93 15 02 c0       	push   0xc0021593
c0018289:	e8 51 6b ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001828e:	83 c4 10             	add    esp,0x10
c0018291:	eb d3                	jmp    c0018266 <terminateTask(int)+0x5a>
c0018293:	90                   	nop

c0018294 <Semaphore::release()>:
c0018294:	83 ec 0c             	sub    esp,0xc
c0018297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829b:	e8 93 f3 ff ff       	call   c0017633 <lockStuff()>
c00182a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00182a3:	85 d2                	test   edx,edx
c00182a5:	74 1a                	je     c00182c1 <Semaphore::release()+0x2d>
c00182a7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00182aa:	83 ec 0c             	sub    esp,0xc
c00182ad:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00182b0:	52                   	push   edx
c00182b1:	e8 7a fb ff ff       	call   c0017e30 <unblockTask(ThreadControlBlock*)>
c00182b6:	83 c4 10             	add    esp,0x10
c00182b9:	83 c4 0c             	add    esp,0xc
c00182bc:	e9 04 f7 ff ff       	jmp    c00179c5 <unlockStuff()>
c00182c1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c00182c4:	83 c4 0c             	add    esp,0xc
c00182c7:	e9 f9 f6 ff ff       	jmp    c00179c5 <unlockStuff()>

c00182cc <__static_initialization_and_destruction_0(int, int)>:
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00182d4:	0f 85 88 00 00 00    	jne    c0018362 <__static_initialization_and_destruction_0(int, int)+0x96>
c00182da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00182e2:	75 7e                	jne    c0018362 <__static_initialization_and_destruction_0(int, int)+0x96>
c00182e4:	83 ec 0c             	sub    esp,0xc
c00182e7:	68 a8 41 02 c0       	push   0xc00241a8
c00182ec:	e8 5d 67 00 00       	call   c001ea4e <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00182f1:	83 c4 10             	add    esp,0x10
c00182f4:	83 ec 04             	sub    esp,0x4
c00182f7:	68 f8 21 02 c0       	push   0xc00221f8
c00182fc:	68 a8 41 02 c0       	push   0xc00241a8
c0018301:	68 0e ea 01 c0       	push   0xc001ea0e
c0018306:	e8 70 69 ff ff       	call   c000ec7b <__cxa_atexit>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	83 ec 0c             	sub    esp,0xc
c0018311:	68 9c 41 02 c0       	push   0xc002419c
c0018316:	e8 33 67 00 00       	call   c001ea4e <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	83 ec 04             	sub    esp,0x4
c0018321:	68 f8 21 02 c0       	push   0xc00221f8
c0018326:	68 9c 41 02 c0       	push   0xc002419c
c001832b:	68 0e ea 01 c0       	push   0xc001ea0e
c0018330:	e8 46 69 ff ff       	call   c000ec7b <__cxa_atexit>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	83 ec 0c             	sub    esp,0xc
c001833b:	68 90 41 02 c0       	push   0xc0024190
c0018340:	e8 09 67 00 00       	call   c001ea4e <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018345:	83 c4 10             	add    esp,0x10
c0018348:	83 ec 04             	sub    esp,0x4
c001834b:	68 f8 21 02 c0       	push   0xc00221f8
c0018350:	68 90 41 02 c0       	push   0xc0024190
c0018355:	68 0e ea 01 c0       	push   0xc001ea0e
c001835a:	e8 1c 69 ff ff       	call   c000ec7b <__cxa_atexit>
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	90                   	nop
c0018363:	83 c4 0c             	add    esp,0xc
c0018366:	c3                   	ret    

c0018367 <_GLOBAL__sub_I_kernelProcess>:
c0018367:	83 ec 0c             	sub    esp,0xc
c001836a:	83 ec 08             	sub    esp,0x8
c001836d:	68 ff ff 00 00       	push   0xffff
c0018372:	6a 01                	push   0x1
c0018374:	e8 53 ff ff ff       	call   c00182cc <__static_initialization_and_destruction_0(int, int)>
c0018379:	83 c4 10             	add    esp,0x10
c001837c:	83 c4 0c             	add    esp,0xc
c001837f:	c3                   	ret    

c0018380 <Vm::vm8086EntryPoint(void*)>:
c0018380:	83 ec 0c             	sub    esp,0xc
c0018383:	e8 86 f2 ff ff       	call   c001760e <unlockScheduler()>
c0018388:	fb                   	sti    
c0018389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001838e:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018392:	52                   	push   edx
c0018393:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018397:	52                   	push   edx
c0018398:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001839c:	52                   	push   edx
c001839d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00183a1:	50                   	push   eax
c00183a2:	e8 0e 7e fe ff       	call   c00001b5 <goToVM86>
c00183a7:	83 c4 1c             	add    esp,0x1c
c00183aa:	c3                   	ret    

c00183ab <Vm::inbv(unsigned short)>:
c00183ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183af:	ec                   	in     al,dx
c00183b0:	c3                   	ret    

c00183b1 <Vm::outbv(unsigned short, unsigned char)>:
c00183b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183b9:	ee                   	out    dx,al
c00183ba:	c3                   	ret    

c00183bb <Vm::realToLinear(unsigned short, unsigned short)>:
c00183bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00183c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00183c5:	c1 e0 04             	shl    eax,0x4
c00183c8:	01 d0                	add    eax,edx
c00183ca:	c3                   	ret    

c00183cb <Vm::getSegment(unsigned int)>:
c00183cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183cf:	c1 e8 10             	shr    eax,0x10
c00183d2:	c3                   	ret    

c00183d3 <Vm::getOffset(unsigned int)>:
c00183d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183d7:	c3                   	ret    

c00183d8 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00183d8:	55                   	push   ebp
c00183d9:	57                   	push   edi
c00183da:	56                   	push   esi
c00183db:	53                   	push   ebx
c00183dc:	83 ec 2c             	sub    esp,0x2c
c00183df:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00183e3:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00183e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183eb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00183ef:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00183f3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00183f7:	e8 10 f2 ff ff       	call   c001760c <lockScheduler()>
c00183fc:	68 80 00 00 00       	push   0x80
c0018401:	6a 00                	push   0x0
c0018403:	68 80 83 01 c0       	push   0xc0018380
c0018408:	55                   	push   ebp
c0018409:	e8 28 f3 ff ff       	call   c0017736 <Process::createThread(void (*)(void*), void*, int)>
c001840e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018412:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018416:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001841a:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001841e:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018422:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018426:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001842d:	e8 be 68 ff ff       	call   c000ecf0 <operator new(unsigned long)>
c0018432:	83 c4 0c             	add    esp,0xc
c0018435:	89 c3                	mov    ebx,eax
c0018437:	55                   	push   ebp
c0018438:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001843c:	50                   	push   eax
c001843d:	e8 cc 6e ff ff       	call   c000f30e <File::File(char const*, Process*)>
c0018442:	83 c4 0c             	add    esp,0xc
c0018445:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018449:	50                   	push   eax
c001844a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001844e:	50                   	push   eax
c001844f:	53                   	push   ebx
c0018450:	e8 c9 71 ff ff       	call   c000f61e <File::stat(unsigned long long*, bool*)>
c0018455:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018459:	83 c4 10             	add    esp,0x10
c001845c:	84 d2                	test   dl,dl
c001845e:	74 1c                	je     c001847c <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018460:	83 ec 0c             	sub    esp,0xc
c0018463:	68 34 18 02 c0       	push   0xc0021834
c0018468:	e8 db c4 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001846d:	e8 9c f1 ff ff       	call   c001760e <unlockScheduler()>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	31 d2                	xor    edx,edx
c0018477:	e9 81 00 00 00       	jmp    c00184fd <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001847c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018480:	51                   	push   ecx
c0018481:	51                   	push   ecx
c0018482:	6a 01                	push   0x1
c0018484:	53                   	push   ebx
c0018485:	e8 e8 6e ff ff       	call   c000f372 <File::open(FileOpenMode)>
c001848a:	83 c4 10             	add    esp,0x10
c001848d:	85 c0                	test   eax,eax
c001848f:	74 1b                	je     c00184ac <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018491:	83 ec 0c             	sub    esp,0xc
c0018494:	68 4d 18 02 c0       	push   0xc002184d
c0018499:	e8 aa c4 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001849e:	e8 6b f1 ff ff       	call   c001760e <unlockScheduler()>
c00184a3:	83 c4 10             	add    esp,0x10
c00184a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00184aa:	eb 51                	jmp    c00184fd <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00184ac:	83 ec 0c             	sub    esp,0xc
c00184af:	0f b7 ff             	movzx  edi,di
c00184b2:	6a 07                	push   0x7
c00184b4:	0f b7 f6             	movzx  esi,si
c00184b7:	68 00 01 00 00       	push   0x100
c00184bc:	6a 00                	push   0x0
c00184be:	6a 00                	push   0x0
c00184c0:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00184c6:	e8 b7 5f ff ff       	call   c000e482 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00184cb:	83 c4 18             	add    esp,0x18
c00184ce:	57                   	push   edi
c00184cf:	56                   	push   esi
c00184d0:	e8 e6 fe ff ff       	call   c00183bb <Vm::realToLinear(unsigned short, unsigned short)>
c00184d5:	5a                   	pop    edx
c00184d6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00184d8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00184dc:	51                   	push   ecx
c00184dd:	50                   	push   eax
c00184de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e6:	53                   	push   ebx
c00184e7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00184ea:	83 c4 14             	add    esp,0x14
c00184ed:	53                   	push   ebx
c00184ee:	e8 dd 6e ff ff       	call   c000f3d0 <File::close()>
c00184f3:	e8 16 f1 ff ff       	call   c001760e <unlockScheduler()>
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	b2 01                	mov    dl,0x1
c00184fd:	83 c4 2c             	add    esp,0x2c
c0018500:	88 d0                	mov    al,dl
c0018502:	5b                   	pop    ebx
c0018503:	5e                   	pop    esi
c0018504:	5f                   	pop    edi
c0018505:	5d                   	pop    ebp
c0018506:	c3                   	ret    

c0018507 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018507:	57                   	push   edi
c0018508:	56                   	push   esi
c0018509:	53                   	push   ebx
c001850a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001850e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018512:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018516:	83 e8 06             	sub    eax,0x6
c0018519:	0f b7 c0             	movzx  eax,ax
c001851c:	50                   	push   eax
c001851d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018522:	50                   	push   eax
c0018523:	e8 93 fe ff ff       	call   c00183bb <Vm::realToLinear(unsigned short, unsigned short)>
c0018528:	5a                   	pop    edx
c0018529:	5e                   	pop    esi
c001852a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001852d:	8d 56 fa             	lea    edx,[esi-0x6]
c0018530:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018536:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018539:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001853c:	83 c2 02             	add    edx,0x2
c001853f:	66 89 10             	mov    WORD PTR [eax],dx
c0018542:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018545:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018549:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001854c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018550:	89 d6                	mov    esi,edx
c0018552:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018558:	66 81 e6 ff fd       	and    si,0xfdff
c001855d:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018561:	74 07                	je     c001856a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018563:	89 d6                	mov    esi,edx
c0018565:	66 81 ce 00 02       	or     si,0x200
c001856a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001856e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018573:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018577:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001857f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018582:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001858a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001858d:	5b                   	pop    ebx
c001858e:	5e                   	pop    esi
c001858f:	5f                   	pop    edi
c0018590:	c3                   	ret    

c0018591 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018591:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018596:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001859b:	c1 e0 04             	shl    eax,0x4
c001859e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00185a1:	c3                   	ret    

c00185a2 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00185a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185ac:	c1 e0 04             	shl    eax,0x4
c00185af:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00185b3:	c3                   	ret    

c00185b4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00185b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185be:	c1 e0 04             	shl    eax,0x4
c00185c1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00185c4:	c3                   	ret    

c00185c5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00185c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185ca:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185cf:	c1 e0 04             	shl    eax,0x4
c00185d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185d6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00185d9:	c3                   	ret    

c00185da <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00185da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185e4:	c1 e0 04             	shl    eax,0x4
c00185e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185eb:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00185ef:	c3                   	ret    

c00185f0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00185f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185fa:	c1 e0 04             	shl    eax,0x4
c00185fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018601:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018604:	c3                   	ret    

c0018605 <Vm::faultHandler(regs*)>:
c0018605:	55                   	push   ebp
c0018606:	57                   	push   edi
c0018607:	56                   	push   esi
c0018608:	53                   	push   ebx
c0018609:	83 ec 1c             	sub    esp,0x1c
c001860c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018610:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018613:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018617:	0f b7 f0             	movzx  esi,ax
c001861a:	52                   	push   edx
c001861b:	0f b7 c0             	movzx  eax,ax
c001861e:	50                   	push   eax
c001861f:	e8 97 fd ff ff       	call   c00183bb <Vm::realToLinear(unsigned short, unsigned short)>
c0018624:	5a                   	pop    edx
c0018625:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018628:	59                   	pop    ecx
c0018629:	89 c7                	mov    edi,eax
c001862b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001862e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018632:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001863b:	0f b7 c5             	movzx  eax,bp
c001863e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018642:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018646:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001864a:	e8 6c fd ff ff       	call   c00183bb <Vm::realToLinear(unsigned short, unsigned short)>
c001864f:	5a                   	pop    edx
c0018650:	59                   	pop    ecx
c0018651:	b1 06                	mov    cl,0x6
c0018653:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018658:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001865d:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018660:	80 fa 9d             	cmp    dl,0x9d
c0018663:	0f 84 1d 02 00 00    	je     c0018886 <Vm::faultHandler(regs*)+0x281>
c0018669:	0f 87 8e 00 00 00    	ja     c00186fd <Vm::faultHandler(regs*)+0xf8>
c001866f:	80 fa 66             	cmp    dl,0x66
c0018672:	0f 84 89 01 00 00    	je     c0018801 <Vm::faultHandler(regs*)+0x1fc>
c0018678:	77 44                	ja     c00186be <Vm::faultHandler(regs*)+0xb9>
c001867a:	80 fa 36             	cmp    dl,0x36
c001867d:	0f 84 74 01 00 00    	je     c00187f7 <Vm::faultHandler(regs*)+0x1f2>
c0018683:	77 1a                	ja     c001869f <Vm::faultHandler(regs*)+0x9a>
c0018685:	80 fa 26             	cmp    dl,0x26
c0018688:	0f 84 4b 01 00 00    	je     c00187d9 <Vm::faultHandler(regs*)+0x1d4>
c001868e:	80 fa 2e             	cmp    dl,0x2e
c0018691:	0f 85 4a 05 00 00    	jne    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c0018697:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001869a:	31 c9                	xor    ecx,ecx
c001869c:	47                   	inc    edi
c001869d:	eb be                	jmp    c001865d <Vm::faultHandler(regs*)+0x58>
c001869f:	80 fa 64             	cmp    dl,0x64
c00186a2:	0f 84 3b 01 00 00    	je     c00187e3 <Vm::faultHandler(regs*)+0x1de>
c00186a8:	0f 87 3f 01 00 00    	ja     c00187ed <Vm::faultHandler(regs*)+0x1e8>
c00186ae:	80 fa 3e             	cmp    dl,0x3e
c00186b1:	0f 85 2a 05 00 00    	jne    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c00186b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00186ba:	b1 01                	mov    cl,0x1
c00186bc:	eb de                	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c00186be:	80 fa 6d             	cmp    dl,0x6d
c00186c1:	0f 84 bf 02 00 00    	je     c0018986 <Vm::faultHandler(regs*)+0x381>
c00186c7:	77 17                	ja     c00186e0 <Vm::faultHandler(regs*)+0xdb>
c00186c9:	80 fa 67             	cmp    dl,0x67
c00186cc:	0f 84 3c 01 00 00    	je     c001880e <Vm::faultHandler(regs*)+0x209>
c00186d2:	80 fa 6c             	cmp    dl,0x6c
c00186d5:	0f 84 5d 02 00 00    	je     c0018938 <Vm::faultHandler(regs*)+0x333>
c00186db:	e9 01 05 00 00       	jmp    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c00186e0:	80 fa 6f             	cmp    dl,0x6f
c00186e3:	0f 84 8b 03 00 00    	je     c0018a74 <Vm::faultHandler(regs*)+0x46f>
c00186e9:	0f 82 0f 03 00 00    	jb     c00189fe <Vm::faultHandler(regs*)+0x3f9>
c00186ef:	80 fa 9c             	cmp    dl,0x9c
c00186f2:	0f 84 23 01 00 00    	je     c001881b <Vm::faultHandler(regs*)+0x216>
c00186f8:	e9 e4 04 00 00       	jmp    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c00186fd:	80 fa ec             	cmp    dl,0xec
c0018700:	0f 84 7f 04 00 00    	je     c0018b85 <Vm::faultHandler(regs*)+0x580>
c0018706:	77 7b                	ja     c0018783 <Vm::faultHandler(regs*)+0x17e>
c0018708:	80 fa e4             	cmp    dl,0xe4
c001870b:	0f 84 fe 03 00 00    	je     c0018b0f <Vm::faultHandler(regs*)+0x50a>
c0018711:	77 53                	ja     c0018766 <Vm::faultHandler(regs*)+0x161>
c0018713:	80 fa cd             	cmp    dl,0xcd
c0018716:	0f 84 cd 01 00 00    	je     c00188e9 <Vm::faultHandler(regs*)+0x2e4>
c001871c:	80 fa cf             	cmp    dl,0xcf
c001871f:	0f 85 bc 04 00 00    	jne    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c0018725:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018728:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001872b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001872f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018732:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018736:	81 ca 00 02 02 00    	or     edx,0x20200
c001873c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001873f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018743:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018749:	66 c1 e8 09          	shr    ax,0x9
c001874d:	83 e0 01             	and    eax,0x1
c0018750:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018753:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018756:	83 c0 06             	add    eax,0x6
c0018759:	25 ff ff 00 00       	and    eax,0xffff
c001875e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018761:	e9 77 04 00 00       	jmp    c0018bdd <Vm::faultHandler(regs*)+0x5d8>
c0018766:	80 fa e6             	cmp    dl,0xe6
c0018769:	0f 84 ea 03 00 00    	je     c0018b59 <Vm::faultHandler(regs*)+0x554>
c001876f:	0f 82 b6 03 00 00    	jb     c0018b2b <Vm::faultHandler(regs*)+0x526>
c0018775:	80 fa e7             	cmp    dl,0xe7
c0018778:	0f 84 f2 03 00 00    	je     c0018b70 <Vm::faultHandler(regs*)+0x56b>
c001877e:	e9 5e 04 00 00       	jmp    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c0018783:	80 fa ef             	cmp    dl,0xef
c0018786:	0f 84 3c 04 00 00    	je     c0018bc8 <Vm::faultHandler(regs*)+0x5c3>
c001878c:	77 28                	ja     c00187b6 <Vm::faultHandler(regs*)+0x1b1>
c001878e:	80 fa ed             	cmp    dl,0xed
c0018791:	0f 84 0a 04 00 00    	je     c0018ba1 <Vm::faultHandler(regs*)+0x59c>
c0018797:	80 fa ee             	cmp    dl,0xee
c001879a:	0f 85 41 04 00 00    	jne    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c00187a0:	50                   	push   eax
c00187a1:	50                   	push   eax
c00187a2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00187a6:	50                   	push   eax
c00187a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187ab:	50                   	push   eax
c00187ac:	e8 00 fc ff ff       	call   c00183b1 <Vm::outbv(unsigned short, unsigned char)>
c00187b1:	e9 0a 04 00 00       	jmp    c0018bc0 <Vm::faultHandler(regs*)+0x5bb>
c00187b6:	80 fa fa             	cmp    dl,0xfa
c00187b9:	0f 84 5d 01 00 00    	je     c001891c <Vm::faultHandler(regs*)+0x317>
c00187bf:	80 fa fb             	cmp    dl,0xfb
c00187c2:	0f 84 62 01 00 00    	je     c001892a <Vm::faultHandler(regs*)+0x325>
c00187c8:	80 fa f3             	cmp    dl,0xf3
c00187cb:	0f 85 10 04 00 00    	jne    c0018be1 <Vm::faultHandler(regs*)+0x5dc>
c00187d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187d4:	e9 c3 fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c00187d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187dc:	b1 02                	mov    cl,0x2
c00187de:	e9 b9 fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c00187e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187e6:	b1 03                	mov    cl,0x3
c00187e8:	e9 af fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c00187ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187f0:	b1 04                	mov    cl,0x4
c00187f2:	e9 a5 fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c00187f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187fa:	b1 05                	mov    cl,0x5
c00187fc:	e9 9b fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c0018801:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018804:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018809:	e9 8e fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c001880e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018811:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018816:	e9 81 fe ff ff       	jmp    c001869c <Vm::faultHandler(regs*)+0x97>
c001881b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001881e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018822:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018827:	74 30                	je     c0018859 <Vm::faultHandler(regs*)+0x254>
c0018829:	83 e9 04             	sub    ecx,0x4
c001882c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018832:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018838:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001883b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001883e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018844:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018848:	0f 84 8c 03 00 00    	je     c0018bda <Vm::faultHandler(regs*)+0x5d5>
c001884e:	80 ce 02             	or     dh,0x2
c0018851:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018854:	e9 81 03 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018859:	83 e9 02             	sub    ecx,0x2
c001885c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018862:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018865:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018869:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001886f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018873:	74 05                	je     c001887a <Vm::faultHandler(regs*)+0x275>
c0018875:	80 ce 02             	or     dh,0x2
c0018878:	eb 03                	jmp    c001887d <Vm::faultHandler(regs*)+0x278>
c001887a:	80 e6 fd             	and    dh,0xfd
c001887d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018881:	e9 54 03 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018886:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001888b:	74 2a                	je     c00188b7 <Vm::faultHandler(regs*)+0x2b2>
c001888d:	8b 10                	mov    edx,DWORD PTR [eax]
c001888f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018895:	81 ca 00 02 02 00    	or     edx,0x20200
c001889b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001889e:	8b 00                	mov    eax,DWORD PTR [eax]
c00188a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188a6:	c1 e8 09             	shr    eax,0x9
c00188a9:	83 e0 01             	and    eax,0x1
c00188ac:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188af:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188b2:	83 c0 04             	add    eax,0x4
c00188b5:	eb 25                	jmp    c00188dc <Vm::faultHandler(regs*)+0x2d7>
c00188b7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188ba:	81 ca 00 02 02 00    	or     edx,0x20200
c00188c0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188c3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00188c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188cc:	66 c1 e8 09          	shr    ax,0x9
c00188d0:	83 e0 01             	and    eax,0x1
c00188d3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188d6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188d9:	83 c0 02             	add    eax,0x2
c00188dc:	25 ff ff 00 00       	and    eax,0xffff
c00188e1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188e4:	e9 f1 02 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c00188e9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00188ed:	3c ff                	cmp    al,0xff
c00188ef:	75 10                	jne    c0018901 <Vm::faultHandler(regs*)+0x2fc>
c00188f1:	83 ec 0c             	sub    esp,0xc
c00188f4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00188f7:	e8 10 f9 ff ff       	call   c001820c <terminateTask(int)>
c00188fc:	e9 c2 02 00 00       	jmp    c0018bc3 <Vm::faultHandler(regs*)+0x5be>
c0018901:	83 ec 0c             	sub    esp,0xc
c0018904:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001890c:	57                   	push   edi
c001890d:	50                   	push   eax
c001890e:	53                   	push   ebx
c001890f:	e8 f3 fb ff ff       	call   c0018507 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018914:	83 c4 20             	add    esp,0x20
c0018917:	e9 c1 02 00 00       	jmp    c0018bdd <Vm::faultHandler(regs*)+0x5d8>
c001891c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018921:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018925:	e9 b0 02 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c001892a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001892f:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018933:	e9 a2 02 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018938:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001893d:	74 0d                	je     c001894c <Vm::faultHandler(regs*)+0x347>
c001893f:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018946:	0f 87 e9 02 00 00    	ja     c0018c35 <Vm::faultHandler(regs*)+0x630>
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018952:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018956:	50                   	push   eax
c0018957:	e8 4f fa ff ff       	call   c00183ab <Vm::inbv(unsigned short)>
c001895c:	83 c4 0c             	add    esp,0xc
c001895f:	0f b6 c0             	movzx  eax,al
c0018962:	0f b7 c9             	movzx  ecx,cx
c0018965:	50                   	push   eax
c0018966:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001896a:	50                   	push   eax
c001896b:	51                   	push   ecx
c001896c:	e8 54 fc ff ff       	call   c00185c5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018971:	83 c4 10             	add    esp,0x10
c0018974:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018977:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001897b:	74 03                	je     c0018980 <Vm::faultHandler(regs*)+0x37b>
c001897d:	48                   	dec    eax
c001897e:	eb 01                	jmp    c0018981 <Vm::faultHandler(regs*)+0x37c>
c0018980:	40                   	inc    eax
c0018981:	0f b7 c0             	movzx  eax,ax
c0018984:	eb 70                	jmp    c00189f6 <Vm::faultHandler(regs*)+0x3f1>
c0018986:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018989:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001898c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018991:	74 0c                	je     c001899f <Vm::faultHandler(regs*)+0x39a>
c0018993:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018999:	0f 87 96 02 00 00    	ja     c0018c35 <Vm::faultHandler(regs*)+0x630>
c001899f:	0f b7 c9             	movzx  ecx,cx
c00189a2:	0f b7 f6             	movzx  esi,si
c00189a5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00189a8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189ad:	74 20                	je     c00189cf <Vm::faultHandler(regs*)+0x3ca>
c00189af:	ed                   	in     eax,dx
c00189b0:	55                   	push   ebp
c00189b1:	50                   	push   eax
c00189b2:	51                   	push   ecx
c00189b3:	56                   	push   esi
c00189b4:	e8 37 fc ff ff       	call   c00185f0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189bf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189c3:	74 05                	je     c00189ca <Vm::faultHandler(regs*)+0x3c5>
c00189c5:	83 e8 04             	sub    eax,0x4
c00189c8:	eb 27                	jmp    c00189f1 <Vm::faultHandler(regs*)+0x3ec>
c00189ca:	83 c0 04             	add    eax,0x4
c00189cd:	eb 22                	jmp    c00189f1 <Vm::faultHandler(regs*)+0x3ec>
c00189cf:	66 ed                	in     ax,dx
c00189d1:	0f b7 c0             	movzx  eax,ax
c00189d4:	57                   	push   edi
c00189d5:	50                   	push   eax
c00189d6:	51                   	push   ecx
c00189d7:	56                   	push   esi
c00189d8:	e8 fd fb ff ff       	call   c00185da <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00189dd:	83 c4 10             	add    esp,0x10
c00189e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189e3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189e7:	74 05                	je     c00189ee <Vm::faultHandler(regs*)+0x3e9>
c00189e9:	83 e8 02             	sub    eax,0x2
c00189ec:	eb 03                	jmp    c00189f1 <Vm::faultHandler(regs*)+0x3ec>
c00189ee:	83 c0 02             	add    eax,0x2
c00189f1:	25 ff ff 00 00       	and    eax,0xffff
c00189f6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00189f9:	e9 dc 01 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c00189fe:	49                   	dec    ecx
c00189ff:	80 f9 05             	cmp    cl,0x5
c0018a02:	77 24                	ja     c0018a28 <Vm::faultHandler(regs*)+0x423>
c0018a04:	0f b6 c9             	movzx  ecx,cl
c0018a07:	ff 24 8d 94 18 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde76c]
c0018a0e:	0f b7 f5             	movzx  esi,bp
c0018a11:	eb 15                	jmp    c0018a28 <Vm::faultHandler(regs*)+0x423>
c0018a13:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018a17:	eb 0f                	jmp    c0018a28 <Vm::faultHandler(regs*)+0x423>
c0018a19:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018a1d:	eb 09                	jmp    c0018a28 <Vm::faultHandler(regs*)+0x423>
c0018a1f:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018a23:	eb 03                	jmp    c0018a28 <Vm::faultHandler(regs*)+0x423>
c0018a25:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018a28:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018a2b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a30:	74 0b                	je     c0018a3d <Vm::faultHandler(regs*)+0x438>
c0018a32:	3d ff ff 00 00       	cmp    eax,0xffff
c0018a37:	0f 87 f8 01 00 00    	ja     c0018c35 <Vm::faultHandler(regs*)+0x630>
c0018a3d:	0f b7 c0             	movzx  eax,ax
c0018a40:	52                   	push   edx
c0018a41:	52                   	push   edx
c0018a42:	50                   	push   eax
c0018a43:	56                   	push   esi
c0018a44:	e8 48 fb ff ff       	call   c0018591 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018a49:	59                   	pop    ecx
c0018a4a:	0f b6 c0             	movzx  eax,al
c0018a4d:	5e                   	pop    esi
c0018a4e:	50                   	push   eax
c0018a4f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a53:	50                   	push   eax
c0018a54:	e8 58 f9 ff ff       	call   c00183b1 <Vm::outbv(unsigned short, unsigned char)>
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018a5f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a63:	74 03                	je     c0018a68 <Vm::faultHandler(regs*)+0x463>
c0018a65:	48                   	dec    eax
c0018a66:	eb 01                	jmp    c0018a69 <Vm::faultHandler(regs*)+0x464>
c0018a68:	40                   	inc    eax
c0018a69:	0f b7 c0             	movzx  eax,ax
c0018a6c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018a6f:	e9 66 01 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018a74:	49                   	dec    ecx
c0018a75:	80 f9 05             	cmp    cl,0x5
c0018a78:	77 1f                	ja     c0018a99 <Vm::faultHandler(regs*)+0x494>
c0018a7a:	0f b6 c9             	movzx  ecx,cl
c0018a7d:	ff 24 8d ac 18 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde754]
c0018a84:	89 ee                	mov    esi,ebp
c0018a86:	eb 11                	jmp    c0018a99 <Vm::faultHandler(regs*)+0x494>
c0018a88:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018a8b:	eb 0c                	jmp    c0018a99 <Vm::faultHandler(regs*)+0x494>
c0018a8d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018a90:	eb 07                	jmp    c0018a99 <Vm::faultHandler(regs*)+0x494>
c0018a92:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018a95:	eb 02                	jmp    c0018a99 <Vm::faultHandler(regs*)+0x494>
c0018a97:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018a99:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018a9c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018aa1:	74 0c                	je     c0018aaf <Vm::faultHandler(regs*)+0x4aa>
c0018aa3:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018aa9:	0f 87 86 01 00 00    	ja     c0018c35 <Vm::faultHandler(regs*)+0x630>
c0018aaf:	0f b7 d6             	movzx  edx,si
c0018ab2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018ab5:	0f b7 c1             	movzx  eax,cx
c0018ab8:	81 e7 00 04 00 00    	and    edi,0x400
c0018abe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018ac1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ac6:	74 1d                	je     c0018ae5 <Vm::faultHandler(regs*)+0x4e0>
c0018ac8:	55                   	push   ebp
c0018ac9:	55                   	push   ebp
c0018aca:	50                   	push   eax
c0018acb:	52                   	push   edx
c0018acc:	e8 e3 fa ff ff       	call   c00185b4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0018ad1:	83 c4 10             	add    esp,0x10
c0018ad4:	89 f2                	mov    edx,esi
c0018ad6:	ef                   	out    dx,eax
c0018ad7:	85 ff                	test   edi,edi
c0018ad9:	74 05                	je     c0018ae0 <Vm::faultHandler(regs*)+0x4db>
c0018adb:	83 e9 04             	sub    ecx,0x4
c0018ade:	eb 21                	jmp    c0018b01 <Vm::faultHandler(regs*)+0x4fc>
c0018ae0:	83 c1 04             	add    ecx,0x4
c0018ae3:	eb 1c                	jmp    c0018b01 <Vm::faultHandler(regs*)+0x4fc>
c0018ae5:	55                   	push   ebp
c0018ae6:	55                   	push   ebp
c0018ae7:	50                   	push   eax
c0018ae8:	52                   	push   edx
c0018ae9:	e8 b4 fa ff ff       	call   c00185a2 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018aee:	83 c4 10             	add    esp,0x10
c0018af1:	89 f2                	mov    edx,esi
c0018af3:	66 ef                	out    dx,ax
c0018af5:	85 ff                	test   edi,edi
c0018af7:	74 05                	je     c0018afe <Vm::faultHandler(regs*)+0x4f9>
c0018af9:	83 e9 02             	sub    ecx,0x2
c0018afc:	eb 03                	jmp    c0018b01 <Vm::faultHandler(regs*)+0x4fc>
c0018afe:	83 c1 02             	add    ecx,0x2
c0018b01:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018b07:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018b0a:	e9 cb 00 00 00       	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018b0f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018b16:	83 ec 0c             	sub    esp,0xc
c0018b19:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b1d:	50                   	push   eax
c0018b1e:	e8 88 f8 ff ff       	call   c00183ab <Vm::inbv(unsigned short)>
c0018b23:	0f b6 c0             	movzx  eax,al
c0018b26:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018b29:	eb 3f                	jmp    c0018b6a <Vm::faultHandler(regs*)+0x565>
c0018b2b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b30:	74 07                	je     c0018b39 <Vm::faultHandler(regs*)+0x534>
c0018b32:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b36:	ed                   	in     eax,dx
c0018b37:	eb 14                	jmp    c0018b4d <Vm::faultHandler(regs*)+0x548>
c0018b39:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018b3c:	66 31 c9             	xor    cx,cx
c0018b3f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018b42:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b46:	66 ed                	in     ax,dx
c0018b48:	0f b7 c0             	movzx  eax,ax
c0018b4b:	09 c8                	or     eax,ecx
c0018b4d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018b50:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b54:	e9 84 00 00 00       	jmp    c0018bdd <Vm::faultHandler(regs*)+0x5d8>
c0018b59:	52                   	push   edx
c0018b5a:	52                   	push   edx
c0018b5b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018b5f:	50                   	push   eax
c0018b60:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b64:	50                   	push   eax
c0018b65:	e8 47 f8 ff ff       	call   c00183b1 <Vm::outbv(unsigned short, unsigned char)>
c0018b6a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b6e:	eb 53                	jmp    c0018bc3 <Vm::faultHandler(regs*)+0x5be>
c0018b70:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018b73:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b77:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b7c:	74 03                	je     c0018b81 <Vm::faultHandler(regs*)+0x57c>
c0018b7e:	ef                   	out    dx,eax
c0018b7f:	eb cf                	jmp    c0018b50 <Vm::faultHandler(regs*)+0x54b>
c0018b81:	66 ef                	out    dx,ax
c0018b83:	eb cb                	jmp    c0018b50 <Vm::faultHandler(regs*)+0x54b>
c0018b85:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018b8c:	83 ec 0c             	sub    esp,0xc
c0018b8f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b93:	50                   	push   eax
c0018b94:	e8 12 f8 ff ff       	call   c00183ab <Vm::inbv(unsigned short)>
c0018b99:	0f b6 c0             	movzx  eax,al
c0018b9c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018b9f:	eb 1f                	jmp    c0018bc0 <Vm::faultHandler(regs*)+0x5bb>
c0018ba1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018ba4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ba9:	74 03                	je     c0018bae <Vm::faultHandler(regs*)+0x5a9>
c0018bab:	ed                   	in     eax,dx
c0018bac:	eb 0d                	jmp    c0018bbb <Vm::faultHandler(regs*)+0x5b6>
c0018bae:	66 ed                	in     ax,dx
c0018bb0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018bb3:	0f b7 c0             	movzx  eax,ax
c0018bb6:	66 31 d2             	xor    dx,dx
c0018bb9:	09 d0                	or     eax,edx
c0018bbb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018bbe:	eb 1a                	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018bc0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018bc3:	83 c4 10             	add    esp,0x10
c0018bc6:	eb 15                	jmp    c0018bdd <Vm::faultHandler(regs*)+0x5d8>
c0018bc8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018bcb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018bce:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bd3:	74 03                	je     c0018bd8 <Vm::faultHandler(regs*)+0x5d3>
c0018bd5:	ef                   	out    dx,eax
c0018bd6:	eb 02                	jmp    c0018bda <Vm::faultHandler(regs*)+0x5d5>
c0018bd8:	66 ef                	out    dx,ax
c0018bda:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018bdd:	b0 01                	mov    al,0x1
c0018bdf:	eb 56                	jmp    c0018c37 <Vm::faultHandler(regs*)+0x632>
c0018be1:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018be5:	50                   	push   eax
c0018be6:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018bea:	50                   	push   eax
c0018beb:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018bef:	50                   	push   eax
c0018bf0:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018bf4:	50                   	push   eax
c0018bf5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018bf9:	50                   	push   eax
c0018bfa:	52                   	push   edx
c0018bfb:	52                   	push   edx
c0018bfc:	68 66 18 02 c0       	push   0xc0021866
c0018c01:	e8 d9 61 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0018c06:	83 c4 20             	add    esp,0x20
c0018c09:	83 ec 0c             	sub    esp,0xc
c0018c0c:	6a 60                	push   0x60
c0018c0e:	e8 98 f7 ff ff       	call   c00183ab <Vm::inbv(unsigned short)>
c0018c13:	83 c4 10             	add    esp,0x10
c0018c16:	3c 1c                	cmp    al,0x1c
c0018c18:	74 04                	je     c0018c1e <Vm::faultHandler(regs*)+0x619>
c0018c1a:	3c 5a                	cmp    al,0x5a
c0018c1c:	75 eb                	jne    c0018c09 <Vm::faultHandler(regs*)+0x604>
c0018c1e:	3c 5a                	cmp    al,0x5a
c0018c20:	74 04                	je     c0018c26 <Vm::faultHandler(regs*)+0x621>
c0018c22:	3c 1c                	cmp    al,0x1c
c0018c24:	75 0f                	jne    c0018c35 <Vm::faultHandler(regs*)+0x630>
c0018c26:	83 ec 0c             	sub    esp,0xc
c0018c29:	6a 60                	push   0x60
c0018c2b:	e8 7b f7 ff ff       	call   c00183ab <Vm::inbv(unsigned short)>
c0018c30:	83 c4 10             	add    esp,0x10
c0018c33:	eb e9                	jmp    c0018c1e <Vm::faultHandler(regs*)+0x619>
c0018c35:	31 c0                	xor    eax,eax
c0018c37:	83 c4 1c             	add    esp,0x1c
c0018c3a:	5b                   	pop    ebx
c0018c3b:	5e                   	pop    esi
c0018c3c:	5f                   	pop    edi
c0018c3d:	5d                   	pop    ebp
c0018c3e:	c3                   	ret    
c0018c3f:	90                   	nop

c0018c40 <FAT::getName()>:
c0018c40:	b8 c4 18 02 c0       	mov    eax,0xc00218c4
c0018c45:	c3                   	ret    

c0018c46 <FAT::tell(void*, unsigned long long*)>:
c0018c46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c4b:	75 06                	jne    c0018c53 <FAT::tell(void*, unsigned long long*)+0xd>
c0018c4d:	b8 04 00 00 00       	mov    eax,0x4
c0018c52:	c3                   	ret    
c0018c53:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c58:	75 06                	jne    c0018c60 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018c5a:	b8 04 00 00 00       	mov    eax,0x4
c0018c5f:	c3                   	ret    
c0018c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c64:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018c67:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c6e:	89 01                	mov    DWORD PTR [ecx],eax
c0018c70:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018c73:	b8 00 00 00 00       	mov    eax,0x0
c0018c78:	c3                   	ret    
c0018c79:	90                   	nop

c0018c7a <FAT::stat(void*, unsigned long long*)>:
c0018c7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c7f:	75 06                	jne    c0018c87 <FAT::stat(void*, unsigned long long*)+0xd>
c0018c81:	b8 04 00 00 00       	mov    eax,0x4
c0018c86:	c3                   	ret    
c0018c87:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c8c:	75 06                	jne    c0018c94 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018c8e:	b8 04 00 00 00       	mov    eax,0x4
c0018c93:	c3                   	ret    
c0018c94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c98:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018c9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018ca2:	89 01                	mov    DWORD PTR [ecx],eax
c0018ca4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ca7:	b8 00 00 00 00       	mov    eax,0x0
c0018cac:	c3                   	ret    
c0018cad:	90                   	nop

c0018cae <FAT::exists(char const*)>:
c0018cae:	b0 00                	mov    al,0x0
c0018cb0:	c3                   	ret    
c0018cb1:	90                   	nop

c0018cb2 <FAT::~FAT()>:
c0018cb2:	83 ec 0c             	sub    esp,0xc
c0018cb5:	ba 48 19 02 c0       	mov    edx,0xc0021948
c0018cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbe:	89 10                	mov    DWORD PTR [eax],edx
c0018cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc4:	83 ec 0c             	sub    esp,0xc
c0018cc7:	50                   	push   eax
c0018cc8:	e8 3b 64 ff ff       	call   c000f108 <Filesystem::~Filesystem()>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	90                   	nop
c0018cd1:	83 c4 0c             	add    esp,0xc
c0018cd4:	c3                   	ret    
c0018cd5:	90                   	nop

c0018cd6 <FAT::~FAT()>:
c0018cd6:	83 ec 0c             	sub    esp,0xc
c0018cd9:	83 ec 0c             	sub    esp,0xc
c0018cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ce0:	e8 cd ff ff ff       	call   c0018cb2 <FAT::~FAT()>
c0018ce5:	83 c4 10             	add    esp,0x10
c0018ce8:	83 ec 08             	sub    esp,0x8
c0018ceb:	6a 08                	push   0x8
c0018ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cf1:	e8 09 60 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0018cf6:	83 c4 10             	add    esp,0x10
c0018cf9:	83 c4 0c             	add    esp,0xc
c0018cfc:	c3                   	ret    
c0018cfd:	90                   	nop

c0018cfe <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018cfe:	83 ec 1c             	sub    esp,0x1c
c0018d01:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018d08:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d11:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0018d18:	83 f8 ff             	cmp    eax,0xffffffff
c0018d1b:	75 34                	jne    c0018d51 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018d1d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d21:	88 c2                	mov    dl,al
c0018d23:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0018d28:	01 d0                	add    eax,edx
c0018d2a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d2e:	8b 15 e0 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e0
c0018d34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d38:	89 14 85 00 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe00],edx
c0018d3f:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0018d44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d48:	89 14 85 80 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd80],edx
c0018d4f:	eb 17                	jmp    c0018d68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018d51:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d55:	88 c2                	mov    dl,al
c0018d57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d5b:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0018d62:	01 d0                	add    eax,edx
c0018d64:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d68:	83 ec 04             	sub    esp,0x4
c0018d6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d73:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018d77:	50                   	push   eax
c0018d78:	e8 e8 dc fe ff       	call   c0006a65 <f_getlabel>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d89:	75 07                	jne    c0018d92 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018d8b:	b8 00 00 00 00       	mov    eax,0x0
c0018d90:	eb 05                	jmp    c0018d97 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018d92:	b8 01 00 00 00       	mov    eax,0x1
c0018d97:	83 c4 1c             	add    esp,0x1c
c0018d9a:	c3                   	ret    
c0018d9b:	90                   	nop

c0018d9c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018d9c:	57                   	push   edi
c0018d9d:	83 ec 58             	sub    esp,0x58
c0018da0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018da8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018dac:	b9 0f 00 00 00       	mov    ecx,0xf
c0018db1:	b8 00 00 00 00       	mov    eax,0x0
c0018db6:	fc                   	cld    
c0018db7:	89 d7                	mov    edi,edx
c0018db9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018dbb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018dbf:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0018dc6:	83 f8 ff             	cmp    eax,0xffffffff
c0018dc9:	75 34                	jne    c0018dff <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018dcb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dcf:	88 c2                	mov    dl,al
c0018dd1:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0018dd6:	01 d0                	add    eax,edx
c0018dd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ddc:	8b 15 e0 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e0
c0018de2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018de6:	89 14 85 00 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe00],edx
c0018ded:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0018df2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018df6:	89 14 85 80 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd80],edx
c0018dfd:	eb 17                	jmp    c0018e16 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018dff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e03:	88 c2                	mov    dl,al
c0018e05:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018e09:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0018e10:	01 d0                	add    eax,edx
c0018e12:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e16:	83 ec 08             	sub    esp,0x8
c0018e19:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018e1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e21:	50                   	push   eax
c0018e22:	e8 37 79 fe ff       	call   c000075e <strcat>
c0018e27:	83 c4 10             	add    esp,0x10
c0018e2a:	83 ec 0c             	sub    esp,0xc
c0018e2d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e31:	50                   	push   eax
c0018e32:	e8 1c de fe ff       	call   c0006c53 <f_setlabel>
c0018e37:	83 c4 10             	add    esp,0x10
c0018e3a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018e3e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018e43:	75 07                	jne    c0018e4c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018e45:	b8 00 00 00 00       	mov    eax,0x0
c0018e4a:	eb 05                	jmp    c0018e51 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018e4c:	b8 01 00 00 00       	mov    eax,0x1
c0018e51:	83 c4 58             	add    esp,0x58
c0018e54:	5f                   	pop    edi
c0018e55:	c3                   	ret    

c0018e56 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018e56:	83 ec 2c             	sub    esp,0x2c
c0018e59:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018e61:	83 ec 08             	sub    esp,0x8
c0018e64:	68 e8 18 02 c0       	push   0xc00218e8
c0018e69:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e6d:	e8 86 78 fe ff       	call   c00006f8 <strcmp>
c0018e72:	83 c4 10             	add    esp,0x10
c0018e75:	85 c0                	test   eax,eax
c0018e77:	0f 94 c0             	sete   al
c0018e7a:	84 c0                	test   al,al
c0018e7c:	74 0d                	je     c0018e8b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018e7e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e86:	e9 a6 00 00 00       	jmp    c0018f31 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018e8b:	83 ec 08             	sub    esp,0x8
c0018e8e:	68 da 18 02 c0       	push   0xc00218da
c0018e93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e97:	e8 5c 78 fe ff       	call   c00006f8 <strcmp>
c0018e9c:	83 c4 10             	add    esp,0x10
c0018e9f:	85 c0                	test   eax,eax
c0018ea1:	0f 94 c0             	sete   al
c0018ea4:	84 c0                	test   al,al
c0018ea6:	74 0a                	je     c0018eb2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018ea8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018eb0:	eb 7f                	jmp    c0018f31 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018eb2:	83 ec 08             	sub    esp,0x8
c0018eb5:	68 e0 18 02 c0       	push   0xc00218e0
c0018eba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ebe:	e8 35 78 fe ff       	call   c00006f8 <strcmp>
c0018ec3:	83 c4 10             	add    esp,0x10
c0018ec6:	85 c0                	test   eax,eax
c0018ec8:	0f 94 c0             	sete   al
c0018ecb:	84 c0                	test   al,al
c0018ecd:	74 0a                	je     c0018ed9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018ecf:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ed7:	eb 58                	jmp    c0018f31 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018ed9:	83 ec 08             	sub    esp,0x8
c0018edc:	68 0c f1 01 c0       	push   0xc001f10c
c0018ee1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ee5:	e8 0e 78 fe ff       	call   c00006f8 <strcmp>
c0018eea:	83 c4 10             	add    esp,0x10
c0018eed:	85 c0                	test   eax,eax
c0018eef:	0f 94 c0             	sete   al
c0018ef2:	84 c0                	test   al,al
c0018ef4:	74 0a                	je     c0018f00 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018ef6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018efe:	eb 31                	jmp    c0018f31 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f00:	83 ec 08             	sub    esp,0x8
c0018f03:	68 e6 18 02 c0       	push   0xc00218e6
c0018f08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f0c:	e8 e7 77 fe ff       	call   c00006f8 <strcmp>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	85 c0                	test   eax,eax
c0018f16:	0f 94 c0             	sete   al
c0018f19:	84 c0                	test   al,al
c0018f1b:	74 0a                	je     c0018f27 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018f1d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018f25:	eb 0a                	jmp    c0018f31 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f27:	b8 08 00 00 00       	mov    eax,0x8
c0018f2c:	e9 04 01 00 00       	jmp    c0019035 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018f31:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018f38:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018f3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f41:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0018f48:	83 f8 ff             	cmp    eax,0xffffffff
c0018f4b:	75 34                	jne    c0018f81 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018f4d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f51:	88 c2                	mov    dl,al
c0018f53:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0018f58:	01 d0                	add    eax,edx
c0018f5a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f5e:	8b 15 e0 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e0
c0018f64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f68:	89 14 85 00 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe00],edx
c0018f6f:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0018f74:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018f78:	89 14 85 80 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd80],edx
c0018f7f:	eb 17                	jmp    c0018f98 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0018f81:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f85:	88 c2                	mov    dl,al
c0018f87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f8b:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0018f92:	01 d0                	add    eax,edx
c0018f94:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f9c:	88 04 24             	mov    BYTE PTR [esp],al
c0018f9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018fa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fa7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018faf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018fb4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018fbc:	83 ec 0c             	sub    esp,0xc
c0018fbf:	68 00 20 00 00       	push   0x2000
c0018fc4:	e8 4f 2c ff ff       	call   c000bc18 <malloc>
c0018fc9:	83 c4 10             	add    esp,0x10
c0018fcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fd0:	68 00 20 00 00       	push   0x2000
c0018fd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fd9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fdd:	50                   	push   eax
c0018fde:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018fe2:	50                   	push   eax
c0018fe3:	e8 b6 e0 fe ff       	call   c000709e <f_mkfs>
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018fef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018ff4:	75 07                	jne    c0018ffd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0018ff6:	b8 00 00 00 00       	mov    eax,0x0
c0018ffb:	eb 38                	jmp    c0019035 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018ffd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019002:	75 17                	jne    c001901b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019004:	83 ec 0c             	sub    esp,0xc
c0019007:	68 18 19 02 c0       	push   0xc0021918
c001900c:	e8 ce 5d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0019011:	83 c4 10             	add    esp,0x10
c0019014:	b8 09 00 00 00       	mov    eax,0x9
c0019019:	eb 1a                	jmp    c0019035 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001901b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001901f:	83 ec 08             	sub    esp,0x8
c0019022:	50                   	push   eax
c0019023:	68 ec 18 02 c0       	push   0xc00218ec
c0019028:	e8 b2 5d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	b8 01 00 00 00       	mov    eax,0x1
c0019035:	83 c4 2c             	add    esp,0x2c
c0019038:	c3                   	ret    
c0019039:	90                   	nop

c001903a <FAT::tryMount(LogicalDisk*, int)>:
c001903a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019040:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c0019045:	83 f8 14             	cmp    eax,0x14
c0019048:	75 17                	jne    c0019061 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001904a:	83 ec 0c             	sub    esp,0xc
c001904d:	68 fe 18 02 c0       	push   0xc00218fe
c0019052:	e8 f1 b8 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	b0 00                	mov    al,0x0
c001905c:	e9 d7 01 00 00       	jmp    c0019238 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019061:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019068:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001906e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019074:	3d 00 02 00 00       	cmp    eax,0x200
c0019079:	74 07                	je     c0019082 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001907b:	b0 00                	mov    al,0x0
c001907d:	e9 b6 01 00 00       	jmp    c0019238 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019082:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001908a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019091:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c0019098:	83 f8 ff             	cmp    eax,0xffffffff
c001909b:	74 07                	je     c00190a4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001909d:	b0 01                	mov    al,0x1
c001909f:	e9 94 01 00 00       	jmp    c0019238 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00190a4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00190ae:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00190b6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00190bd:	88 c2                	mov    dl,al
c00190bf:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c00190c4:	01 d0                	add    eax,edx
c00190c6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00190cd:	8b 15 e0 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e0
c00190d3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00190da:	89 14 85 00 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe00],edx
c00190e1:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c00190e6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00190ed:	89 14 85 80 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd80],edx
c00190f4:	83 ec 0c             	sub    esp,0xc
c00190f7:	68 54 02 00 00       	push   0x254
c00190fc:	e8 17 2b ff ff       	call   c000bc18 <malloc>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001910b:	83 ec 04             	sub    esp,0x4
c001910e:	6a 00                	push   0x0
c0019110:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019117:	50                   	push   eax
c0019118:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001911f:	e8 38 bb fe ff       	call   c0004c5c <f_mount>
c0019124:	83 c4 10             	add    esp,0x10
c0019127:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001912e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019136:	74 19                	je     c0019151 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019142:	e8 f1 2a ff ff       	call   c000bc38 <rfree>
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	b0 00                	mov    al,0x0
c001914c:	e9 e7 00 00 00       	jmp    c0019238 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019151:	83 ec 04             	sub    esp,0x4
c0019154:	68 00 01 00 00       	push   0x100
c0019159:	6a 00                	push   0x0
c001915b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019162:	50                   	push   eax
c0019163:	e8 a0 74 fe ff       	call   c0000608 <memset>
c0019168:	83 c4 10             	add    esp,0x10
c001916b:	83 ec 08             	sub    esp,0x8
c001916e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019175:	50                   	push   eax
c0019176:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001917d:	50                   	push   eax
c001917e:	e8 db 75 fe ff       	call   c000075e <strcat>
c0019183:	83 c4 10             	add    esp,0x10
c0019186:	83 ec 08             	sub    esp,0x8
c0019189:	68 0c 19 02 c0       	push   0xc002190c
c001918e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019195:	50                   	push   eax
c0019196:	e8 c3 75 fe ff       	call   c000075e <strcat>
c001919b:	83 c4 10             	add    esp,0x10
c001919e:	83 ec 04             	sub    esp,0x4
c00191a1:	6a 01                	push   0x1
c00191a3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00191aa:	50                   	push   eax
c00191ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191af:	50                   	push   eax
c00191b0:	e8 09 bb fe ff       	call   c0004cbe <f_open>
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00191bf:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00191c6:	85 c0                	test   eax,eax
c00191c8:	74 0a                	je     c00191d4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00191ca:	78 2d                	js     c00191f9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00191cc:	83 e8 04             	sub    eax,0x4
c00191cf:	83 f8 01             	cmp    eax,0x1
c00191d2:	77 25                	ja     c00191f9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00191d4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00191dc:	83 ec 0c             	sub    esp,0xc
c00191df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191e3:	50                   	push   eax
c00191e4:	e8 27 c6 fe ff       	call   c0005810 <f_close>
c00191e9:	83 c4 10             	add    esp,0x10
c00191ec:	90                   	nop
c00191ed:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00191f5:	74 3a                	je     c0019231 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00191f7:	eb 2d                	jmp    c0019226 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00191f9:	83 ec 0c             	sub    esp,0xc
c00191fc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019203:	e8 30 2a ff ff       	call   c000bc38 <rfree>
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	83 ec 04             	sub    esp,0x4
c001920e:	6a 00                	push   0x0
c0019210:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019217:	50                   	push   eax
c0019218:	6a 00                	push   0x0
c001921a:	e8 3d ba fe ff       	call   c0004c5c <f_mount>
c001921f:	83 c4 10             	add    esp,0x10
c0019222:	b0 00                	mov    al,0x0
c0019224:	eb 12                	jmp    c0019238 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019226:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c001922b:	40                   	inc    eax
c001922c:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c0019231:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019238:	81 c4 6c 03 00 00    	add    esp,0x36c
c001923e:	c3                   	ret    
c001923f:	90                   	nop

c0019240 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019240:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019246:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001924e:	74 0a                	je     c001925a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019250:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019258:	75 0a                	jne    c0019264 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001925a:	b8 04 00 00 00       	mov    eax,0x4
c001925f:	e9 dc 00 00 00       	jmp    c0019340 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019264:	83 ec 08             	sub    esp,0x8
c0019267:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001926e:	50                   	push   eax
c001926f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019276:	e8 9f cb fe ff       	call   c0005e1a <f_readdir>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019285:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019296:	83 c0 1a             	add    eax,0x1a
c0019299:	50                   	push   eax
c001929a:	e8 86 73 fe ff       	call   c0000625 <strlen>
c001929f:	83 c4 10             	add    esp,0x10
c00192a2:	ba 00 00 00 00       	mov    edx,0x0
c00192a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00192af:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00192b6:	0f b6 c0             	movzx  eax,al
c00192b9:	83 e0 10             	and    eax,0x10
c00192bc:	74 07                	je     c00192c5 <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c00192be:	b8 02 00 00 00       	mov    eax,0x2
c00192c3:	eb 05                	jmp    c00192ca <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c00192c5:	b8 01 00 00 00       	mov    eax,0x1
c00192ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192ce:	83 ec 08             	sub    esp,0x8
c00192d1:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00192d8:	83 c0 1a             	add    eax,0x1a
c00192db:	50                   	push   eax
c00192dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192e0:	83 c0 10             	add    eax,0x10
c00192e3:	50                   	push   eax
c00192e4:	e8 be 73 fe ff       	call   c00006a7 <strcpy>
c00192e9:	83 c4 10             	add    esp,0x10
c00192ec:	83 ec 04             	sub    esp,0x4
c00192ef:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00192f6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192fa:	50                   	push   eax
c00192fb:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019302:	e8 cb 72 fe ff       	call   c00005d2 <memcpy>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019311:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019317:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001931e:	84 c0                	test   al,al
c0019320:	75 07                	jne    c0019329 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c0019322:	b8 07 00 00 00       	mov    eax,0x7
c0019327:	eb 17                	jmp    c0019340 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019329:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019330:	85 c0                	test   eax,eax
c0019332:	75 07                	jne    c001933b <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c0019334:	b8 00 00 00 00       	mov    eax,0x0
c0019339:	eb 05                	jmp    c0019340 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001933b:	b8 01 00 00 00       	mov    eax,0x1
c0019340:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019346:	c3                   	ret    
c0019347:	90                   	nop

c0019348 <FAT::read(void*, unsigned long, void*, int*)>:
c0019348:	83 ec 1c             	sub    esp,0x1c
c001934b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019350:	74 07                	je     c0019359 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019352:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019357:	75 07                	jne    c0019360 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019359:	b8 04 00 00 00       	mov    eax,0x4
c001935e:	eb 3d                	jmp    c001939d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019360:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019364:	50                   	push   eax
c0019365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019369:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001936d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019371:	e8 84 bd fe ff       	call   c00050fa <f_read>
c0019376:	83 c4 10             	add    esp,0x10
c0019379:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001937d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019381:	89 c2                	mov    edx,eax
c0019383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019387:	89 10                	mov    DWORD PTR [eax],edx
c0019389:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001938d:	85 c0                	test   eax,eax
c001938f:	75 07                	jne    c0019398 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019391:	b8 00 00 00 00       	mov    eax,0x0
c0019396:	eb 05                	jmp    c001939d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019398:	b8 01 00 00 00       	mov    eax,0x1
c001939d:	83 c4 1c             	add    esp,0x1c
c00193a0:	c3                   	ret    
c00193a1:	90                   	nop

c00193a2 <FAT::write(void*, unsigned long, void*, int*)>:
c00193a2:	83 ec 1c             	sub    esp,0x1c
c00193a5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193aa:	74 07                	je     c00193b3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00193ac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193b1:	75 07                	jne    c00193ba <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00193b3:	b8 04 00 00 00       	mov    eax,0x4
c00193b8:	eb 3d                	jmp    c00193f7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00193ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193be:	50                   	push   eax
c00193bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193cb:	e8 aa bf fe ff       	call   c000537a <f_write>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193db:	89 c2                	mov    edx,eax
c00193dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193e1:	89 10                	mov    DWORD PTR [eax],edx
c00193e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193e7:	85 c0                	test   eax,eax
c00193e9:	75 07                	jne    c00193f2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00193eb:	b8 00 00 00 00       	mov    eax,0x0
c00193f0:	eb 05                	jmp    c00193f7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00193f2:	b8 01 00 00 00       	mov    eax,0x1
c00193f7:	83 c4 1c             	add    esp,0x1c
c00193fa:	c3                   	ret    
c00193fb:	90                   	nop

c00193fc <FAT::close(void*)>:
c00193fc:	83 ec 1c             	sub    esp,0x1c
c00193ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019404:	75 07                	jne    c001940d <FAT::close(void*)+0x11>
c0019406:	b8 04 00 00 00       	mov    eax,0x4
c001940b:	eb 36                	jmp    c0019443 <FAT::close(void*)+0x47>
c001940d:	83 ec 0c             	sub    esp,0xc
c0019410:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019414:	e8 f7 c3 fe ff       	call   c0005810 <f_close>
c0019419:	83 c4 10             	add    esp,0x10
c001941c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019420:	83 ec 0c             	sub    esp,0xc
c0019423:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019427:	e8 fc 27 ff ff       	call   c000bc28 <free>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019433:	85 c0                	test   eax,eax
c0019435:	75 07                	jne    c001943e <FAT::close(void*)+0x42>
c0019437:	b8 00 00 00 00       	mov    eax,0x0
c001943c:	eb 05                	jmp    c0019443 <FAT::close(void*)+0x47>
c001943e:	b8 01 00 00 00       	mov    eax,0x1
c0019443:	83 c4 1c             	add    esp,0x1c
c0019446:	c3                   	ret    
c0019447:	90                   	nop

c0019448 <FAT::closeDir(void*)>:
c0019448:	83 ec 1c             	sub    esp,0x1c
c001944b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019450:	75 07                	jne    c0019459 <FAT::closeDir(void*)+0x11>
c0019452:	b8 04 00 00 00       	mov    eax,0x4
c0019457:	eb 36                	jmp    c001948f <FAT::closeDir(void*)+0x47>
c0019459:	83 ec 0c             	sub    esp,0xc
c001945c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019460:	e8 93 c9 fe ff       	call   c0005df8 <f_closedir>
c0019465:	83 c4 10             	add    esp,0x10
c0019468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001946c:	83 ec 0c             	sub    esp,0xc
c001946f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019473:	e8 b0 27 ff ff       	call   c000bc28 <free>
c0019478:	83 c4 10             	add    esp,0x10
c001947b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001947f:	85 c0                	test   eax,eax
c0019481:	75 07                	jne    c001948a <FAT::closeDir(void*)+0x42>
c0019483:	b8 00 00 00 00       	mov    eax,0x0
c0019488:	eb 05                	jmp    c001948f <FAT::closeDir(void*)+0x47>
c001948a:	b8 01 00 00 00       	mov    eax,0x1
c001948f:	83 c4 1c             	add    esp,0x1c
c0019492:	c3                   	ret    
c0019493:	90                   	nop

c0019494 <FAT::seek(void*, unsigned long long)>:
c0019494:	83 ec 2c             	sub    esp,0x2c
c0019497:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001949b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001949f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194a7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194ac:	75 07                	jne    c00194b5 <FAT::seek(void*, unsigned long long)+0x21>
c00194ae:	b8 04 00 00 00       	mov    eax,0x4
c00194b3:	eb 2f                	jmp    c00194e4 <FAT::seek(void*, unsigned long long)+0x50>
c00194b5:	83 ec 04             	sub    esp,0x4
c00194b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00194bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00194c0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194c4:	e8 76 c3 fe ff       	call   c000583f <f_lseek>
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194d4:	85 c0                	test   eax,eax
c00194d6:	75 07                	jne    c00194df <FAT::seek(void*, unsigned long long)+0x4b>
c00194d8:	b8 00 00 00 00       	mov    eax,0x0
c00194dd:	eb 05                	jmp    c00194e4 <FAT::seek(void*, unsigned long long)+0x50>
c00194df:	b8 01 00 00 00       	mov    eax,0x1
c00194e4:	83 c4 2c             	add    esp,0x2c
c00194e7:	c3                   	ret    

c00194e8 <fatWrapperReadDisk>:
c00194e8:	83 ec 1c             	sub    esp,0x1c
c00194eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00194fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019502:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019507:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c001950e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019512:	83 ec 0c             	sub    esp,0xc
c0019515:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019519:	52                   	push   edx
c001951a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001951e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019522:	50                   	push   eax
c0019523:	e8 88 87 ff ff       	call   c0011cb0 <LogicalDisk::read(unsigned long long, int, void*)>
c0019528:	83 c4 20             	add    esp,0x20
c001952b:	83 c4 1c             	add    esp,0x1c
c001952e:	c3                   	ret    

c001952f <fatWrapperWriteDisk>:
c001952f:	83 ec 1c             	sub    esp,0x1c
c0019532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019536:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001953a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001953e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019541:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019545:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019549:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001954e:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c0019555:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019559:	83 ec 0c             	sub    esp,0xc
c001955c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019560:	52                   	push   edx
c0019561:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019565:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019569:	50                   	push   eax
c001956a:	e8 ad 87 ff ff       	call   c0011d1c <LogicalDisk::write(unsigned long long, int, void*)>
c001956f:	83 c4 20             	add    esp,0x20
c0019572:	83 c4 1c             	add    esp,0x1c
c0019575:	c3                   	ret    

c0019576 <fatWrapperIoctl>:
c0019576:	53                   	push   ebx
c0019577:	83 ec 28             	sub    esp,0x28
c001957a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001957e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019582:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019586:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001958a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001958f:	75 31                	jne    c00195c2 <fatWrapperIoctl+0x4c>
c0019591:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019595:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019599:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001959e:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c00195a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00195b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195b5:	66 89 02             	mov    WORD PTR [edx],ax
c00195b8:	b8 00 00 00 00       	mov    eax,0x0
c00195bd:	e9 b2 00 00 00       	jmp    c0019674 <fatWrapperIoctl+0xfe>
c00195c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00195c7:	75 6a                	jne    c0019633 <fatWrapperIoctl+0xbd>
c00195c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195d6:	8b 04 85 60 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcca0]
c00195dd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195e3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00195e9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195ef:	89 c8                	mov    eax,ecx
c00195f1:	89 da                	mov    edx,ebx
c00195f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195f7:	c1 e0 0a             	shl    eax,0xa
c00195fa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195ff:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c0019606:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001960c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019612:	89 cb                	mov    ebx,ecx
c0019614:	c1 fb 1f             	sar    ebx,0x1f
c0019617:	53                   	push   ebx
c0019618:	51                   	push   ecx
c0019619:	52                   	push   edx
c001961a:	50                   	push   eax
c001961b:	e8 ac 4a 00 00       	call   c001e0cc <__udivdi3>
c0019620:	83 c4 10             	add    esp,0x10
c0019623:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019627:	89 01                	mov    DWORD PTR [ecx],eax
c0019629:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001962c:	b8 00 00 00 00       	mov    eax,0x0
c0019631:	eb 41                	jmp    c0019674 <fatWrapperIoctl+0xfe>
c0019633:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019638:	75 07                	jne    c0019641 <fatWrapperIoctl+0xcb>
c001963a:	b8 00 00 00 00       	mov    eax,0x0
c001963f:	eb 33                	jmp    c0019674 <fatWrapperIoctl+0xfe>
c0019641:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019646:	75 19                	jne    c0019661 <fatWrapperIoctl+0xeb>
c0019648:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001964c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019654:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001965a:	b8 00 00 00 00       	mov    eax,0x0
c001965f:	eb 13                	jmp    c0019674 <fatWrapperIoctl+0xfe>
c0019661:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019666:	75 07                	jne    c001966f <fatWrapperIoctl+0xf9>
c0019668:	b8 00 00 00 00       	mov    eax,0x0
c001966d:	eb 05                	jmp    c0019674 <fatWrapperIoctl+0xfe>
c001966f:	b8 04 00 00 00       	mov    eax,0x4
c0019674:	83 c4 28             	add    esp,0x28
c0019677:	5b                   	pop    ebx
c0019678:	c3                   	ret    
c0019679:	90                   	nop

c001967a <FAT::FAT()>:
c001967a:	83 ec 1c             	sub    esp,0x1c
c001967d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019681:	83 ec 0c             	sub    esp,0xc
c0019684:	50                   	push   eax
c0019685:	e8 5a 5a ff ff       	call   c000f0e4 <Filesystem::Filesystem()>
c001968a:	83 c4 10             	add    esp,0x10
c001968d:	ba 48 19 02 c0       	mov    edx,0xc0021948
c0019692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019696:	89 10                	mov    DWORD PTR [eax],edx
c0019698:	c7 05 e0 41 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00241e0,0x0
c00196a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196aa:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196af:	7f 15                	jg     c00196c6 <FAT::FAT()+0x4c>
c00196b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196b5:	c7 04 85 00 42 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbe00],0xffffffff
c00196c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00196c4:	eb e4                	jmp    c00196aa <FAT::FAT()+0x30>
c00196c6:	90                   	nop
c00196c7:	83 c4 1c             	add    esp,0x1c
c00196ca:	c3                   	ret    
c00196cb:	90                   	nop

c00196cc <FAT::fixFilepath(char*)>:
c00196cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196d0:	8a 00                	mov    al,BYTE PTR [eax]
c00196d2:	3c 40                	cmp    al,0x40
c00196d4:	7e 2c                	jle    c0019702 <FAT::fixFilepath(char*)+0x36>
c00196d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196da:	8a 00                	mov    al,BYTE PTR [eax]
c00196dc:	83 e8 41             	sub    eax,0x41
c00196df:	88 c2                	mov    dl,al
c00196e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e5:	88 10                	mov    BYTE PTR [eax],dl
c00196e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196eb:	8a 00                	mov    al,BYTE PTR [eax]
c00196ed:	0f be c0             	movsx  eax,al
c00196f0:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c00196f7:	83 c0 30             	add    eax,0x30
c00196fa:	88 c2                	mov    dl,al
c00196fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019700:	88 10                	mov    BYTE PTR [eax],dl
c0019702:	90                   	nop
c0019703:	c3                   	ret    

c0019704 <FAT::open(char const*, void**, FileOpenMode)>:
c0019704:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001970a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019712:	74 0a                	je     c001971e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019714:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001971c:	75 0a                	jne    c0019728 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001971e:	b8 04 00 00 00       	mov    eax,0x4
c0019723:	e9 fd 00 00 00       	jmp    c0019825 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019728:	83 ec 08             	sub    esp,0x8
c001972b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019732:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019736:	50                   	push   eax
c0019737:	e8 6b 6f fe ff       	call   c00006a7 <strcpy>
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	83 ec 08             	sub    esp,0x8
c0019742:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019746:	50                   	push   eax
c0019747:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001974e:	e8 79 ff ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001975e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019765:	83 e0 01             	and    eax,0x1
c0019768:	74 08                	je     c0019772 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001976a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019772:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019779:	83 e0 04             	and    eax,0x4
c001977c:	74 10                	je     c001978e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001977e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019786:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001978e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019795:	83 e0 02             	and    eax,0x2
c0019798:	74 08                	je     c00197a2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001979a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00197a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a9:	83 e0 08             	and    eax,0x8
c00197ac:	74 08                	je     c00197b6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00197ae:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00197b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197bd:	83 e0 10             	and    eax,0x10
c00197c0:	74 08                	je     c00197ca <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00197c2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00197ca:	83 ec 0c             	sub    esp,0xc
c00197cd:	68 50 02 00 00       	push   0x250
c00197d2:	e8 41 24 ff ff       	call   c000bc18 <malloc>
c00197d7:	83 c4 10             	add    esp,0x10
c00197da:	89 c2                	mov    edx,eax
c00197dc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197e3:	89 10                	mov    DWORD PTR [eax],edx
c00197e5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197ed:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00197f6:	83 ec 04             	sub    esp,0x4
c00197f9:	52                   	push   edx
c00197fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197fe:	52                   	push   edx
c00197ff:	50                   	push   eax
c0019800:	e8 b9 b4 fe ff       	call   c0004cbe <f_open>
c0019805:	83 c4 10             	add    esp,0x10
c0019808:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001980f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019817:	74 07                	je     c0019820 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019819:	b8 01 00 00 00       	mov    eax,0x1
c001981e:	eb 05                	jmp    c0019825 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019820:	b8 00 00 00 00       	mov    eax,0x0
c0019825:	81 c4 1c 01 00 00    	add    esp,0x11c
c001982b:	c3                   	ret    

c001982c <FAT::openDir(char const*, void**)>:
c001982c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019832:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001983a:	74 0a                	je     c0019846 <FAT::openDir(char const*, void**)+0x1a>
c001983c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019844:	75 07                	jne    c001984d <FAT::openDir(char const*, void**)+0x21>
c0019846:	b8 04 00 00 00       	mov    eax,0x4
c001984b:	eb 7d                	jmp    c00198ca <FAT::openDir(char const*, void**)+0x9e>
c001984d:	83 ec 08             	sub    esp,0x8
c0019850:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019857:	8d 44 24 18          	lea    eax,[esp+0x18]
c001985b:	50                   	push   eax
c001985c:	e8 46 6e fe ff       	call   c00006a7 <strcpy>
c0019861:	83 c4 10             	add    esp,0x10
c0019864:	83 ec 08             	sub    esp,0x8
c0019867:	8d 44 24 14          	lea    eax,[esp+0x14]
c001986b:	50                   	push   eax
c001986c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019873:	e8 54 fe ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019878:	83 c4 10             	add    esp,0x10
c001987b:	83 ec 0c             	sub    esp,0xc
c001987e:	6a 4c                	push   0x4c
c0019880:	e8 93 23 ff ff       	call   c000bc18 <malloc>
c0019885:	83 c4 10             	add    esp,0x10
c0019888:	89 c2                	mov    edx,eax
c001988a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019891:	89 10                	mov    DWORD PTR [eax],edx
c0019893:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001989a:	8b 00                	mov    eax,DWORD PTR [eax]
c001989c:	83 ec 08             	sub    esp,0x8
c001989f:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198a3:	52                   	push   edx
c00198a4:	50                   	push   eax
c00198a5:	e8 4c c4 fe ff       	call   c0005cf6 <f_opendir>
c00198aa:	83 c4 10             	add    esp,0x10
c00198ad:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198b4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198bc:	74 07                	je     c00198c5 <FAT::openDir(char const*, void**)+0x99>
c00198be:	b8 01 00 00 00       	mov    eax,0x1
c00198c3:	eb 05                	jmp    c00198ca <FAT::openDir(char const*, void**)+0x9e>
c00198c5:	b8 00 00 00 00       	mov    eax,0x0
c00198ca:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198d0:	c3                   	ret    
c00198d1:	90                   	nop

c00198d2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198d2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198d8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198e0:	75 0a                	jne    c00198ec <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00198e2:	b8 04 00 00 00       	mov    eax,0x4
c00198e7:	e9 c9 00 00 00       	jmp    c00199b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00198ec:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198f4:	75 0a                	jne    c0019900 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00198f6:	b8 04 00 00 00       	mov    eax,0x4
c00198fb:	e9 b5 00 00 00       	jmp    c00199b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019900:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019908:	75 0a                	jne    c0019914 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001990a:	b8 04 00 00 00       	mov    eax,0x4
c001990f:	e9 a1 00 00 00       	jmp    c00199b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019914:	83 ec 08             	sub    esp,0x8
c0019917:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001991e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019925:	50                   	push   eax
c0019926:	e8 7c 6d fe ff       	call   c00006a7 <strcpy>
c001992b:	83 c4 10             	add    esp,0x10
c001992e:	83 ec 08             	sub    esp,0x8
c0019931:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019938:	50                   	push   eax
c0019939:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019940:	e8 87 fd ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019945:	83 c4 10             	add    esp,0x10
c0019948:	83 ec 08             	sub    esp,0x8
c001994b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001994f:	50                   	push   eax
c0019950:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019957:	50                   	push   eax
c0019958:	e8 58 c5 fe ff       	call   c0005eb5 <f_stat>
c001995d:	83 c4 10             	add    esp,0x10
c0019960:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019967:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001996e:	85 c0                	test   eax,eax
c0019970:	74 07                	je     c0019979 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019972:	83 f8 04             	cmp    eax,0x4
c0019975:	74 32                	je     c00199a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019977:	eb 37                	jmp    c00199b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019979:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001997d:	0f b6 c0             	movzx  eax,al
c0019980:	83 e0 10             	and    eax,0x10
c0019983:	0f 95 c2             	setne  dl
c0019986:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001998d:	88 10                	mov    BYTE PTR [eax],dl
c001998f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019992:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019996:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001999d:	89 01                	mov    DWORD PTR [ecx],eax
c001999f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199a2:	b8 00 00 00 00       	mov    eax,0x0
c00199a7:	eb 0c                	jmp    c00199b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199a9:	b8 02 00 00 00       	mov    eax,0x2
c00199ae:	eb 05                	jmp    c00199b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199b0:	b8 01 00 00 00       	mov    eax,0x1
c00199b5:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199bb:	c3                   	ret    

c00199bc <FAT::unlink(char const*)>:
c00199bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199ca:	75 07                	jne    c00199d3 <FAT::unlink(char const*)+0x17>
c00199cc:	b8 04 00 00 00       	mov    eax,0x4
c00199d1:	eb 5c                	jmp    c0019a2f <FAT::unlink(char const*)+0x73>
c00199d3:	83 ec 08             	sub    esp,0x8
c00199d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199e1:	50                   	push   eax
c00199e2:	e8 c0 6c fe ff       	call   c00006a7 <strcpy>
c00199e7:	83 c4 10             	add    esp,0x10
c00199ea:	83 ec 08             	sub    esp,0x8
c00199ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199f1:	50                   	push   eax
c00199f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199f9:	e8 ce fc ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c00199fe:	83 c4 10             	add    esp,0x10
c0019a01:	83 ec 0c             	sub    esp,0xc
c0019a04:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a08:	50                   	push   eax
c0019a09:	e8 f9 c7 fe ff       	call   c0006207 <f_unlink>
c0019a0e:	83 c4 10             	add    esp,0x10
c0019a11:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a18:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a1f:	85 c0                	test   eax,eax
c0019a21:	75 07                	jne    c0019a2a <FAT::unlink(char const*)+0x6e>
c0019a23:	b8 00 00 00 00       	mov    eax,0x0
c0019a28:	eb 05                	jmp    c0019a2f <FAT::unlink(char const*)+0x73>
c0019a2a:	b8 01 00 00 00       	mov    eax,0x1
c0019a2f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a35:	c3                   	ret    

c0019a36 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a36:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a3c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019a43:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019a4a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a52:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a5a:	75 0a                	jne    c0019a66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019a5c:	b8 04 00 00 00       	mov    eax,0x4
c0019a61:	e9 1c 01 00 00       	jmp    c0019b82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019a66:	83 ec 08             	sub    esp,0x8
c0019a69:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a74:	50                   	push   eax
c0019a75:	e8 2d 6c fe ff       	call   c00006a7 <strcpy>
c0019a7a:	83 c4 10             	add    esp,0x10
c0019a7d:	83 ec 08             	sub    esp,0x8
c0019a80:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a84:	50                   	push   eax
c0019a85:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a8c:	e8 3b fc ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019a91:	83 c4 10             	add    esp,0x10
c0019a94:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019a9c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019aa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aa9:	83 e0 01             	and    eax,0x1
c0019aac:	74 08                	je     c0019ab6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019aae:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019ab6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019abb:	83 e0 02             	and    eax,0x2
c0019abe:	74 08                	je     c0019ac8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019ac0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019acd:	83 e0 04             	and    eax,0x4
c0019ad0:	74 08                	je     c0019ada <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019ad2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019ada:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019adf:	83 e0 08             	and    eax,0x8
c0019ae2:	74 08                	je     c0019aec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019ae4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019aec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019af1:	83 e0 01             	and    eax,0x1
c0019af4:	74 08                	je     c0019afe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019af6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019afe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b03:	83 e0 02             	and    eax,0x2
c0019b06:	74 08                	je     c0019b10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019b08:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019b10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b15:	83 e0 04             	and    eax,0x4
c0019b18:	74 08                	je     c0019b22 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019b1a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019b22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b27:	83 e0 08             	and    eax,0x8
c0019b2a:	74 08                	je     c0019b34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019b2c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019b34:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b3b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019b42:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019b4a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019b52:	83 ec 04             	sub    esp,0x4
c0019b55:	52                   	push   edx
c0019b56:	50                   	push   eax
c0019b57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b5b:	50                   	push   eax
c0019b5c:	e8 48 cd fe ff       	call   c00068a9 <f_chmod>
c0019b61:	83 c4 10             	add    esp,0x10
c0019b64:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019b6b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019b72:	85 c0                	test   eax,eax
c0019b74:	75 07                	jne    c0019b7d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019b76:	b8 00 00 00 00       	mov    eax,0x0
c0019b7b:	eb 05                	jmp    c0019b82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b7d:	b8 01 00 00 00       	mov    eax,0x1
c0019b82:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b88:	c3                   	ret    
c0019b89:	90                   	nop

c0019b8a <FAT::rename(char const*, char const*)>:
c0019b8a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019b90:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019b98:	74 0a                	je     c0019ba4 <FAT::rename(char const*, char const*)+0x1a>
c0019b9a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019ba2:	75 0a                	jne    c0019bae <FAT::rename(char const*, char const*)+0x24>
c0019ba4:	b8 04 00 00 00       	mov    eax,0x4
c0019ba9:	e9 98 00 00 00       	jmp    c0019c46 <FAT::rename(char const*, char const*)+0xbc>
c0019bae:	83 ec 08             	sub    esp,0x8
c0019bb1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bb8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019bbf:	50                   	push   eax
c0019bc0:	e8 e2 6a fe ff       	call   c00006a7 <strcpy>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	83 ec 08             	sub    esp,0x8
c0019bcb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019bd2:	50                   	push   eax
c0019bd3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bda:	e8 ed fa ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	83 ec 08             	sub    esp,0x8
c0019be5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019bec:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bf0:	50                   	push   eax
c0019bf1:	e8 b1 6a fe ff       	call   c00006a7 <strcpy>
c0019bf6:	83 c4 10             	add    esp,0x10
c0019bf9:	83 ec 08             	sub    esp,0x8
c0019bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c00:	50                   	push   eax
c0019c01:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c08:	e8 bf fa ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019c0d:	83 c4 10             	add    esp,0x10
c0019c10:	83 ec 08             	sub    esp,0x8
c0019c13:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c17:	50                   	push   eax
c0019c18:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c1f:	50                   	push   eax
c0019c20:	e8 91 c9 fe ff       	call   c00065b6 <f_rename>
c0019c25:	83 c4 10             	add    esp,0x10
c0019c28:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019c2f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019c36:	85 c0                	test   eax,eax
c0019c38:	75 07                	jne    c0019c41 <FAT::rename(char const*, char const*)+0xb7>
c0019c3a:	b8 00 00 00 00       	mov    eax,0x0
c0019c3f:	eb 05                	jmp    c0019c46 <FAT::rename(char const*, char const*)+0xbc>
c0019c41:	b8 01 00 00 00       	mov    eax,0x1
c0019c46:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019c4c:	c3                   	ret    
c0019c4d:	90                   	nop

c0019c4e <FAT::mkdir(char const*)>:
c0019c4e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c54:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c5c:	75 07                	jne    c0019c65 <FAT::mkdir(char const*)+0x17>
c0019c5e:	b8 04 00 00 00       	mov    eax,0x4
c0019c63:	eb 5c                	jmp    c0019cc1 <FAT::mkdir(char const*)+0x73>
c0019c65:	83 ec 08             	sub    esp,0x8
c0019c68:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c73:	50                   	push   eax
c0019c74:	e8 2e 6a fe ff       	call   c00006a7 <strcpy>
c0019c79:	83 c4 10             	add    esp,0x10
c0019c7c:	83 ec 08             	sub    esp,0x8
c0019c7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c83:	50                   	push   eax
c0019c84:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c8b:	e8 3c fa ff ff       	call   c00196cc <FAT::fixFilepath(char*)>
c0019c90:	83 c4 10             	add    esp,0x10
c0019c93:	83 ec 0c             	sub    esp,0xc
c0019c96:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c9a:	50                   	push   eax
c0019c9b:	e8 ea c6 fe ff       	call   c000638a <f_mkdir>
c0019ca0:	83 c4 10             	add    esp,0x10
c0019ca3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019caa:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019cb1:	85 c0                	test   eax,eax
c0019cb3:	75 07                	jne    c0019cbc <FAT::mkdir(char const*)+0x6e>
c0019cb5:	b8 00 00 00 00       	mov    eax,0x0
c0019cba:	eb 05                	jmp    c0019cc1 <FAT::mkdir(char const*)+0x73>
c0019cbc:	b8 01 00 00 00       	mov    eax,0x1
c0019cc1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cc7:	c3                   	ret    

c0019cc8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019cc8:	b8 08 00 00 00       	mov    eax,0x8
c0019ccd:	c3                   	ret    

c0019cce <ISO9660::seek(void*, unsigned long long)>:
c0019cce:	53                   	push   ebx
c0019ccf:	b8 04 00 00 00       	mov    eax,0x4
c0019cd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ce0:	85 d2                	test   edx,edx
c0019ce2:	74 17                	je     c0019cfb <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019ce4:	89 c8                	mov    eax,ecx
c0019ce6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019ce9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019cec:	b8 01 00 00 00       	mov    eax,0x1
c0019cf1:	73 08                	jae    c0019cfb <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019cf3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019cf6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019cf9:	31 c0                	xor    eax,eax
c0019cfb:	5b                   	pop    ebx
c0019cfc:	c3                   	ret    
c0019cfd:	90                   	nop

c0019cfe <ISO9660::tell(void*, unsigned long long*)>:
c0019cfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d06:	85 d2                	test   edx,edx
c0019d08:	74 12                	je     c0019d1c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019d0a:	85 c0                	test   eax,eax
c0019d0c:	74 0e                	je     c0019d1c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019d0e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d11:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019d14:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019d17:	89 10                	mov    DWORD PTR [eax],edx
c0019d19:	31 c0                	xor    eax,eax
c0019d1b:	c3                   	ret    
c0019d1c:	b8 04 00 00 00       	mov    eax,0x4
c0019d21:	c3                   	ret    

c0019d22 <ISO9660::getName()>:
c0019d22:	b8 a4 19 02 c0       	mov    eax,0xc00219a4
c0019d27:	c3                   	ret    

c0019d28 <ISO9660::stat(void*, unsigned long long*)>:
c0019d28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d30:	85 d2                	test   edx,edx
c0019d32:	74 12                	je     c0019d46 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019d34:	85 c0                	test   eax,eax
c0019d36:	74 0e                	je     c0019d46 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019d38:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019d3b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019d3e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019d41:	89 10                	mov    DWORD PTR [eax],edx
c0019d43:	31 c0                	xor    eax,eax
c0019d45:	c3                   	ret    
c0019d46:	b8 04 00 00 00       	mov    eax,0x4
c0019d4b:	c3                   	ret    

c0019d4c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019d4c:	b8 01 00 00 00       	mov    eax,0x1
c0019d51:	c3                   	ret    

c0019d52 <ISO9660::unlink(char const*)>:
c0019d52:	b8 01 00 00 00       	mov    eax,0x1
c0019d57:	c3                   	ret    

c0019d58 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019d58:	b8 01 00 00 00       	mov    eax,0x1
c0019d5d:	c3                   	ret    

c0019d5e <ISO9660::rename(char const*, char const*)>:
c0019d5e:	b8 01 00 00 00       	mov    eax,0x1
c0019d63:	c3                   	ret    

c0019d64 <ISO9660::mkdir(char const*)>:
c0019d64:	b8 01 00 00 00       	mov    eax,0x1
c0019d69:	c3                   	ret    

c0019d6a <ISO9660::close(void*)>:
c0019d6a:	83 ec 0c             	sub    esp,0xc
c0019d6d:	b8 04 00 00 00       	mov    eax,0x4
c0019d72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d76:	85 d2                	test   edx,edx
c0019d78:	74 0e                	je     c0019d88 <ISO9660::close(void*)+0x1e>
c0019d7a:	83 ec 0c             	sub    esp,0xc
c0019d7d:	52                   	push   edx
c0019d7e:	e8 a5 1e ff ff       	call   c000bc28 <free>
c0019d83:	83 c4 10             	add    esp,0x10
c0019d86:	31 c0                	xor    eax,eax
c0019d88:	83 c4 0c             	add    esp,0xc
c0019d8b:	c3                   	ret    

c0019d8c <ISO9660::closeDir(void*)>:
c0019d8c:	83 ec 0c             	sub    esp,0xc
c0019d8f:	b8 04 00 00 00       	mov    eax,0x4
c0019d94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d98:	85 d2                	test   edx,edx
c0019d9a:	74 0e                	je     c0019daa <ISO9660::closeDir(void*)+0x1e>
c0019d9c:	83 ec 0c             	sub    esp,0xc
c0019d9f:	52                   	push   edx
c0019da0:	e8 83 1e ff ff       	call   c000bc28 <free>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	31 c0                	xor    eax,eax
c0019daa:	83 c4 0c             	add    esp,0xc
c0019dad:	c3                   	ret    

c0019dae <ISO9660::~ISO9660()>:
c0019dae:	83 ec 0c             	sub    esp,0xc
c0019db1:	ba f8 19 02 c0       	mov    edx,0xc00219f8
c0019db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dba:	89 10                	mov    DWORD PTR [eax],edx
c0019dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dc0:	83 ec 0c             	sub    esp,0xc
c0019dc3:	50                   	push   eax
c0019dc4:	e8 3f 53 ff ff       	call   c000f108 <Filesystem::~Filesystem()>
c0019dc9:	83 c4 10             	add    esp,0x10
c0019dcc:	90                   	nop
c0019dcd:	83 c4 0c             	add    esp,0xc
c0019dd0:	c3                   	ret    
c0019dd1:	90                   	nop

c0019dd2 <ISO9660::~ISO9660()>:
c0019dd2:	83 ec 0c             	sub    esp,0xc
c0019dd5:	83 ec 0c             	sub    esp,0xc
c0019dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ddc:	e8 cd ff ff ff       	call   c0019dae <ISO9660::~ISO9660()>
c0019de1:	83 c4 10             	add    esp,0x10
c0019de4:	83 ec 08             	sub    esp,0x8
c0019de7:	6a 08                	push   0x8
c0019de9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ded:	e8 0d 4f ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c0019df2:	83 c4 10             	add    esp,0x10
c0019df5:	83 c4 0c             	add    esp,0xc
c0019df8:	c3                   	ret    

c0019df9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019df9:	55                   	push   ebp
c0019dfa:	31 c9                	xor    ecx,ecx
c0019dfc:	57                   	push   edi
c0019dfd:	56                   	push   esi
c0019dfe:	53                   	push   ebx
c0019dff:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019e03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019e07:	89 eb                	mov    ebx,ebp
c0019e09:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019e0d:	39 ce                	cmp    esi,ecx
c0019e0f:	7e 17                	jle    c0019e28 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019e11:	31 d2                	xor    edx,edx
c0019e13:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019e17:	7d 13                	jge    c0019e2c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019e19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e1d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019e20:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019e23:	75 0d                	jne    c0019e32 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019e25:	42                   	inc    edx
c0019e26:	eb eb                	jmp    c0019e13 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019e28:	31 c0                	xor    eax,eax
c0019e2a:	eb 0a                	jmp    c0019e36 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019e2c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019e30:	eb 04                	jmp    c0019e36 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019e32:	41                   	inc    ecx
c0019e33:	43                   	inc    ebx
c0019e34:	eb d7                	jmp    c0019e0d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019e36:	5b                   	pop    ebx
c0019e37:	5e                   	pop    esi
c0019e38:	5f                   	pop    edi
c0019e39:	5d                   	pop    ebp
c0019e3a:	c3                   	ret    

c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019e3b:	56                   	push   esi
c0019e3c:	53                   	push   ebx
c0019e3d:	52                   	push   edx
c0019e3e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e4a:	39 0d e0 42 02 c0    	cmp    DWORD PTR ds:0xc00242e0,ecx
c0019e50:	75 08                	jne    c0019e5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019e52:	38 05 08 28 02 c0    	cmp    BYTE PTR ds:0xc0022808,al
c0019e58:	74 2b                	je     c0019e85 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019e5a:	83 ec 0c             	sub    esp,0xc
c0019e5d:	a2 08 28 02 c0       	mov    ds:0xc0022808,al
c0019e62:	68 00 43 02 c0       	push   0xc0024300
c0019e67:	0f be c0             	movsx  eax,al
c0019e6a:	6a 01                	push   0x1
c0019e6c:	89 0d e0 42 02 c0    	mov    DWORD PTR ds:0xc00242e0,ecx
c0019e72:	31 db                	xor    ebx,ebx
c0019e74:	53                   	push   ebx
c0019e75:	51                   	push   ecx
c0019e76:	ff 34 85 5c 32 02 c0 	push   DWORD PTR [eax*4-0x3ffdcda4]
c0019e7d:	e8 2e 7e ff ff       	call   c0011cb0 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e82:	83 c4 20             	add    esp,0x20
c0019e85:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019e8d:	c7 44 24 14 00 43 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024300
c0019e95:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019e99:	58                   	pop    eax
c0019e9a:	5b                   	pop    ebx
c0019e9b:	5e                   	pop    esi
c0019e9c:	e9 31 67 fe ff       	jmp    c00005d2 <memcpy>
c0019ea1:	90                   	nop

c0019ea2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019ea2:	81 ec 10 08 00 00    	sub    esp,0x810
c0019ea8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019eaf:	83 c0 41             	add    eax,0x41
c0019eb2:	0f be c0             	movsx  eax,al
c0019eb5:	50                   	push   eax
c0019eb6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019eba:	50                   	push   eax
c0019ebb:	6a 10                	push   0x10
c0019ebd:	e8 79 ff ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019ec2:	83 c4 10             	add    esp,0x10
c0019ec5:	31 c0                	xor    eax,eax
c0019ec7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019ecc:	75 1d                	jne    c0019eeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ece:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019ed3:	75 16                	jne    c0019eeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ed5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019eda:	75 0f                	jne    c0019eeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019edc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019ee1:	75 08                	jne    c0019eeb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ee3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019ee8:	0f 94 c0             	sete   al
c0019eeb:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019ef1:	c3                   	ret    

c0019ef2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019ef2:	55                   	push   ebp
c0019ef3:	57                   	push   edi
c0019ef4:	56                   	push   esi
c0019ef5:	53                   	push   ebx
c0019ef6:	81 ec 34 08 00 00    	sub    esp,0x834
c0019efc:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019f03:	55                   	push   ebp
c0019f04:	68 bf 19 02 c0       	push   0xc00219bf
c0019f09:	e8 d1 4e ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c0019f0e:	83 c4 10             	add    esp,0x10
c0019f11:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019f19:	0f 84 06 02 00 00    	je     c001a125 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019f1f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019f27:	0f 84 f8 01 00 00    	je     c001a125 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019f2d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019f34:	b8 01 00 00 00       	mov    eax,0x1
c0019f39:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019f3d:	0f 85 e7 01 00 00    	jne    c001a12a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019f43:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019f46:	31 d2                	xor    edx,edx
c0019f48:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019f4b:	89 e9                	mov    ecx,ebp
c0019f4d:	89 d3                	mov    ebx,edx
c0019f4f:	01 f1                	add    ecx,esi
c0019f51:	11 fb                	adc    ebx,edi
c0019f53:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019f57:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f5b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0019f62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019f65:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0019f68:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019f6c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f78:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0019f7c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0019f80:	72 19                	jb     c0019f9b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0019f82:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f8e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019f91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f99:	eb 13                	jmp    c0019fae <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0019f9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fa3:	29 f0                	sub    eax,esi
c0019fa5:	19 fa                	sbb    edx,edi
c0019fa7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019faa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019fae:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0019fb5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fba:	53                   	push   ebx
c0019fbb:	0f a4 c2 0b          	shld   edx,eax,0xb
c0019fbf:	c1 e0 0b             	shl    eax,0xb
c0019fc2:	01 c6                	add    esi,eax
c0019fc4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019fcb:	11 d7                	adc    edi,edx
c0019fcd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019fd1:	89 fa                	mov    edx,edi
c0019fd3:	50                   	push   eax
c0019fd4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019fd8:	50                   	push   eax
c0019fd9:	89 f0                	mov    eax,esi
c0019fdb:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019fdf:	50                   	push   eax
c0019fe0:	e8 56 fe ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019fe5:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0019fec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ff0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019ff3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019ff7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0019ffd:	83 c4 10             	add    esp,0x10
c001a000:	b8 00 08 00 00       	mov    eax,0x800
c001a005:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a009:	29 d0                	sub    eax,edx
c001a00b:	39 c1                	cmp    ecx,eax
c001a00d:	83 db 00             	sbb    ebx,0x0
c001a010:	7d 19                	jge    c001a02b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a012:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a017:	75 16                	jne    c001a02f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a019:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a020:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a026:	e9 f6 00 00 00       	jmp    c001a121 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a02b:	89 c5                	mov    ebp,eax
c001a02d:	eb 03                	jmp    c001a032 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a02f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a032:	51                   	push   ecx
c001a033:	55                   	push   ebp
c001a034:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a038:	50                   	push   eax
c001a039:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a040:	e8 8d 65 fe ff       	call   c00005d2 <memcpy>
c001a045:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a049:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a04d:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a054:	01 e8                	add    eax,ebp
c001a056:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a05a:	89 e8                	mov    eax,ebp
c001a05c:	99                   	cdq    
c001a05d:	01 ee                	add    esi,ebp
c001a05f:	11 d7                	adc    edi,edx
c001a061:	29 e9                	sub    ecx,ebp
c001a063:	19 d3                	sbb    ebx,edx
c001a065:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a069:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a06d:	83 c4 10             	add    esp,0x10
c001a070:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a078:	b8 00 00 00 00       	mov    eax,0x0
c001a07d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a081:	7d 3f                	jge    c001a0c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a083:	52                   	push   edx
c001a084:	89 fa                	mov    edx,edi
c001a086:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a08d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a091:	50                   	push   eax
c001a092:	89 f0                	mov    eax,esi
c001a094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a098:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a09c:	50                   	push   eax
c001a09d:	e8 99 fd ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0a2:	81 c6 00 08 00 00    	add    esi,0x800
c001a0a8:	83 d7 00             	adc    edi,0x0
c001a0ab:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a0b3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a0bb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a0c0:	eb ab                	jmp    c001a06d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a0c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c6:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a0c9:	74 34                	je     c001a0ff <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a0cb:	89 fa                	mov    edx,edi
c001a0cd:	50                   	push   eax
c001a0ce:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a0d5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a0d9:	50                   	push   eax
c001a0da:	89 f0                	mov    eax,esi
c001a0dc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0e0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a0e4:	55                   	push   ebp
c001a0e5:	50                   	push   eax
c001a0e6:	e8 50 fd ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0eb:	83 c4 0c             	add    esp,0xc
c001a0ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a0f2:	55                   	push   ebp
c001a0f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0f7:	e8 d6 64 fe ff       	call   c00005d2 <memcpy>
c001a0fc:	83 c4 10             	add    esp,0x10
c001a0ff:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a106:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a10a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a10e:	89 38                	mov    DWORD PTR [eax],edi
c001a110:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a117:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a11b:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a11e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a121:	31 c0                	xor    eax,eax
c001a123:	eb 05                	jmp    c001a12a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a125:	b8 04 00 00 00       	mov    eax,0x4
c001a12a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a130:	5b                   	pop    ebx
c001a131:	5e                   	pop    esi
c001a132:	5f                   	pop    edi
c001a133:	5d                   	pop    ebp
c001a134:	c3                   	ret    
c001a135:	90                   	nop

c001a136 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a136:	55                   	push   ebp
c001a137:	57                   	push   edi
c001a138:	56                   	push   esi
c001a139:	53                   	push   ebx
c001a13a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a140:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a147:	85 f6                	test   esi,esi
c001a149:	0f 84 65 02 00 00    	je     c001a3b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a14f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a157:	0f 84 57 02 00 00    	je     c001a3b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a15d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a160:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a163:	75 0a                	jne    c001a16f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a165:	b8 07 00 00 00       	mov    eax,0x7
c001a16a:	e9 4a 02 00 00       	jmp    c001a3b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a16f:	50                   	push   eax
c001a170:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a174:	50                   	push   eax
c001a175:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a17c:	53                   	push   ebx
c001a17d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a17f:	c1 e0 0b             	shl    eax,0xb
c001a182:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a185:	c1 e8 0b             	shr    eax,0xb
c001a188:	50                   	push   eax
c001a189:	e8 ad fc ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a18e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	89 c1                	mov    ecx,eax
c001a196:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a199:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a19f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a1a2:	84 db                	test   bl,bl
c001a1a4:	0f 85 90 00 00 00    	jne    c001a23a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a1aa:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a1b0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a1b6:	29 c7                	sub    edi,eax
c001a1b8:	89 fb                	mov    ebx,edi
c001a1ba:	c1 fb 1f             	sar    ebx,0x1f
c001a1bd:	01 f8                	add    eax,edi
c001a1bf:	11 da                	adc    edx,ebx
c001a1c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1c9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a1cc:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a1cf:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a1d2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a1d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a1dc:	89 d8                	mov    eax,ebx
c001a1de:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a1e1:	ba 00 00 00 00       	mov    edx,0x0
c001a1e6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a1ea:	b8 00 00 00 00       	mov    eax,0x0
c001a1ef:	73 0b                	jae    c001a1fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a1f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a1f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a1f8:	29 f8                	sub    eax,edi
c001a1fa:	19 da                	sbb    edx,ebx
c001a1fc:	89 d3                	mov    ebx,edx
c001a1fe:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a201:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a204:	09 c3                	or     ebx,eax
c001a206:	0f 84 59 ff ff ff    	je     c001a165 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a20c:	55                   	push   ebp
c001a20d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a211:	50                   	push   eax
c001a212:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a219:	53                   	push   ebx
c001a21a:	8b 06                	mov    eax,DWORD PTR [esi]
c001a21c:	c1 e0 0b             	shl    eax,0xb
c001a21f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a223:	c1 e8 0b             	shr    eax,0xb
c001a226:	50                   	push   eax
c001a227:	e8 0f fc ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a22c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a22f:	83 c4 10             	add    esp,0x10
c001a232:	25 ff 07 00 00       	and    eax,0x7ff
c001a237:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a23a:	57                   	push   edi
c001a23b:	6a 28                	push   0x28
c001a23d:	6a 00                	push   0x0
c001a23f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a243:	50                   	push   eax
c001a244:	e8 bf 63 fe ff       	call   c0000608 <memset>
c001a249:	31 d2                	xor    edx,edx
c001a24b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a24e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a254:	89 f8                	mov    eax,edi
c001a256:	83 c0 21             	add    eax,0x21
c001a259:	83 d2 00             	adc    edx,0x0
c001a25c:	89 c7                	mov    edi,eax
c001a25e:	89 d5                	mov    ebp,edx
c001a260:	83 c4 10             	add    esp,0x10
c001a263:	31 c9                	xor    ecx,ecx
c001a265:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a26c:	83 f9 28             	cmp    ecx,0x28
c001a26f:	88 04 24             	mov    BYTE PTR [esp],al
c001a272:	0f 94 c2             	sete   dl
c001a275:	88 d0                	mov    al,dl
c001a277:	ba ff 07 00 00       	mov    edx,0x7ff
c001a27c:	39 fa                	cmp    edx,edi
c001a27e:	ba 00 00 00 00       	mov    edx,0x0
c001a283:	19 ea                	sbb    edx,ebp
c001a285:	0f 92 c2             	setb   dl
c001a288:	09 c2                	or     edx,eax
c001a28a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a28e:	0f 94 c0             	sete   al
c001a291:	08 d0                	or     al,dl
c001a293:	75 16                	jne    c001a2ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a295:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a299:	74 10                	je     c001a2ab <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a29b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a29e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a2a2:	41                   	inc    ecx
c001a2a3:	83 c7 01             	add    edi,0x1
c001a2a6:	83 d5 00             	adc    ebp,0x0
c001a2a9:	eb ba                	jmp    c001a265 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a2ab:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a2b3:	83 ec 0c             	sub    esp,0xc
c001a2b6:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a2ba:	57                   	push   edi
c001a2bb:	e8 65 63 fe ff       	call   c0000625 <strlen>
c001a2c0:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a2c8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2cc:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a2d3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2d6:	5a                   	pop    edx
c001a2d7:	25 ff 07 00 00       	and    eax,0x7ff
c001a2dc:	01 c8                	add    eax,ecx
c001a2de:	59                   	pop    ecx
c001a2df:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a2e5:	83 e0 02             	and    eax,0x2
c001a2e8:	3c 01                	cmp    al,0x1
c001a2ea:	19 c0                	sbb    eax,eax
c001a2ec:	83 c0 02             	add    eax,0x2
c001a2ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2f3:	57                   	push   edi
c001a2f4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a2f8:	50                   	push   eax
c001a2f9:	e8 a9 63 fe ff       	call   c00006a7 <strcpy>
c001a2fe:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	84 c0                	test   al,al
c001a307:	75 21                	jne    c001a32a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a309:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a311:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a319:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a321:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a328:	eb 28                	jmp    c001a352 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a32a:	fe c8                	dec    al
c001a32c:	75 24                	jne    c001a352 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a32e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a336:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a33e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a346:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a34d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a352:	0f b6 fb             	movzx  edi,bl
c001a355:	31 db                	xor    ebx,ebx
c001a357:	50                   	push   eax
c001a358:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a35f:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a363:	50                   	push   eax
c001a364:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a36b:	e8 62 62 fe ff       	call   c00005d2 <memcpy>
c001a370:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a377:	89 f9                	mov    ecx,edi
c001a379:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a37f:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a382:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a385:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a388:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	39 c7                	cmp    edi,eax
c001a390:	89 df                	mov    edi,ebx
c001a392:	19 d7                	sbb    edi,edx
c001a394:	72 10                	jb     c001a3a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a396:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a39d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a3a4:	eb 0a                	jmp    c001a3b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a3a6:	29 c8                	sub    eax,ecx
c001a3a8:	19 da                	sbb    edx,ebx
c001a3aa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a3ad:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a3b0:	31 c0                	xor    eax,eax
c001a3b2:	eb 05                	jmp    c001a3b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a3b4:	b8 04 00 00 00       	mov    eax,0x4
c001a3b9:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a3bf:	5b                   	pop    ebx
c001a3c0:	5e                   	pop    esi
c001a3c1:	5f                   	pop    edi
c001a3c2:	5d                   	pop    ebp
c001a3c3:	c3                   	ret    

c001a3c4 <readRoot(unsigned int*, unsigned int*, char)>:
c001a3c4:	81 ec 40 08 00 00    	sub    esp,0x840
c001a3ca:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a3d2:	50                   	push   eax
c001a3d3:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a3d7:	50                   	push   eax
c001a3d8:	6a 10                	push   0x10
c001a3da:	e8 5c fa ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3df:	83 c4 0c             	add    esp,0xc
c001a3e2:	6a 22                	push   0x22
c001a3e4:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a3eb:	50                   	push   eax
c001a3ec:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a3f0:	50                   	push   eax
c001a3f1:	e8 dc 61 fe ff       	call   c00005d2 <memcpy>
c001a3f6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a3fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a401:	89 10                	mov    DWORD PTR [eax],edx
c001a403:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a40a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a40e:	89 10                	mov    DWORD PTR [eax],edx
c001a410:	b0 01                	mov    al,0x1
c001a412:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a418:	c3                   	ret    

c001a419 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a419:	55                   	push   ebp
c001a41a:	57                   	push   edi
c001a41b:	56                   	push   esi
c001a41c:	53                   	push   ebx
c001a41d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a423:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a42a:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a431:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a435:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a439:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a43d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a441:	75 03                	jne    c001a446 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a443:	83 c3 02             	add    ebx,0x2
c001a446:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a449:	75 03                	jne    c001a44e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a44b:	43                   	inc    ebx
c001a44c:	eb f8                	jmp    c001a446 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a44e:	51                   	push   ecx
c001a44f:	68 00 01 00 00       	push   0x100
c001a454:	6a 00                	push   0x0
c001a456:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a45a:	50                   	push   eax
c001a45b:	e8 a8 61 fe ff       	call   c0000608 <memset>
c001a460:	83 c4 10             	add    esp,0x10
c001a463:	31 d2                	xor    edx,edx
c001a465:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a468:	84 c0                	test   al,al
c001a46a:	74 21                	je     c001a48d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a46c:	3c 2f                	cmp    al,0x2f
c001a46e:	75 0b                	jne    c001a47b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a470:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a474:	bd 01 00 00 00       	mov    ebp,0x1
c001a479:	eb 14                	jmp    c001a48f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a47b:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a47e:	80 f9 19             	cmp    cl,0x19
c001a481:	77 03                	ja     c001a486 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a483:	83 e8 20             	sub    eax,0x20
c001a486:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a48a:	42                   	inc    edx
c001a48b:	eb d8                	jmp    c001a465 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a48d:	31 ed                	xor    ebp,ebp
c001a48f:	83 ec 0c             	sub    esp,0xc
c001a492:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a499:	e8 7a 17 ff ff       	call   c000bc18 <malloc>
c001a49e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a4a5:	89 c6                	mov    esi,eax
c001a4a7:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a4ad:	c1 ef 0b             	shr    edi,0xb
c001a4b0:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a4b7:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a4bb:	83 c4 10             	add    esp,0x10
c001a4be:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a4c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a4c7:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a4ce:	74 28                	je     c001a4f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a4d0:	52                   	push   edx
c001a4d1:	57                   	push   edi
c001a4d2:	50                   	push   eax
c001a4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4d7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a4de:	e8 58 f9 ff ff       	call   c0019e3b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4e7:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a4ee:	05 00 08 00 00       	add    eax,0x800
c001a4f3:	83 c4 10             	add    esp,0x10
c001a4f6:	eb cb                	jmp    c001a4c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a4f8:	83 ec 0c             	sub    esp,0xc
c001a4fb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a4ff:	57                   	push   edi
c001a500:	e8 20 61 fe ff       	call   c0000625 <strlen>
c001a505:	50                   	push   eax
c001a506:	57                   	push   edi
c001a507:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a50e:	56                   	push   esi
c001a50f:	e8 e5 f8 ff ff       	call   c0019df9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a514:	83 c4 20             	add    esp,0x20
c001a517:	85 c0                	test   eax,eax
c001a519:	75 13                	jne    c001a52e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a51b:	83 ec 0c             	sub    esp,0xc
c001a51e:	56                   	push   esi
c001a51f:	e8 04 17 ff ff       	call   c000bc28 <free>
c001a524:	83 c4 10             	add    esp,0x10
c001a527:	31 c0                	xor    eax,eax
c001a529:	e9 b3 00 00 00       	jmp    c001a5e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a52e:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a532:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a536:	c1 e7 08             	shl    edi,0x8
c001a539:	c1 e2 10             	shl    edx,0x10
c001a53c:	09 d7                	or     edi,edx
c001a53e:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a542:	09 d7                	or     edi,edx
c001a544:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a548:	c1 e2 18             	shl    edx,0x18
c001a54b:	09 d7                	or     edi,edx
c001a54d:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a551:	89 d1                	mov    ecx,edx
c001a553:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a557:	c1 e1 08             	shl    ecx,0x8
c001a55a:	c1 e2 10             	shl    edx,0x10
c001a55d:	09 ca                	or     edx,ecx
c001a55f:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a563:	09 ca                	or     edx,ecx
c001a565:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a569:	c1 e1 18             	shl    ecx,0x18
c001a56c:	09 ca                	or     edx,ecx
c001a56e:	89 e9                	mov    ecx,ebp
c001a570:	84 c9                	test   cl,cl
c001a572:	74 3c                	je     c001a5b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a574:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	56                   	push   esi
c001a57c:	e8 a7 16 ff ff       	call   c000bc28 <free>
c001a581:	83 c4 0c             	add    esp,0xc
c001a584:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a58b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a590:	50                   	push   eax
c001a591:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a598:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a59f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a5a3:	52                   	push   edx
c001a5a4:	57                   	push   edi
c001a5a5:	53                   	push   ebx
c001a5a6:	e8 6e fe ff ff       	call   c001a419 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a5ab:	83 c4 20             	add    esp,0x20
c001a5ae:	eb 31                	jmp    c001a5e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a5b0:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a5b3:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a5ba:	d0 e8                	shr    al,1
c001a5bc:	89 3b                	mov    DWORD PTR [ebx],edi
c001a5be:	83 e0 01             	and    eax,0x1
c001a5c1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a5c8:	83 ec 0c             	sub    esp,0xc
c001a5cb:	89 13                	mov    DWORD PTR [ebx],edx
c001a5cd:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a5d4:	89 03                	mov    DWORD PTR [ebx],eax
c001a5d6:	56                   	push   esi
c001a5d7:	e8 4c 16 ff ff       	call   c000bc28 <free>
c001a5dc:	83 c4 10             	add    esp,0x10
c001a5df:	b0 01                	mov    al,0x1
c001a5e1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5e7:	5b                   	pop    ebx
c001a5e8:	5e                   	pop    esi
c001a5e9:	5f                   	pop    edi
c001a5ea:	5d                   	pop    ebp
c001a5eb:	c3                   	ret    

c001a5ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a5ec:	55                   	push   ebp
c001a5ed:	57                   	push   edi
c001a5ee:	56                   	push   esi
c001a5ef:	53                   	push   ebx
c001a5f0:	83 ec 20             	sub    esp,0x20
c001a5f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a5f7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a5fb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a607:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a60f:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a614:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a61a:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a620:	57                   	push   edi
c001a621:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a625:	50                   	push   eax
c001a626:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a62a:	50                   	push   eax
c001a62b:	e8 94 fd ff ff       	call   c001a3c4 <readRoot(unsigned int*, unsigned int*, char)>
c001a630:	5a                   	pop    edx
c001a631:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a635:	e8 eb 5f fe ff       	call   c0000625 <strlen>
c001a63a:	83 c4 10             	add    esp,0x10
c001a63d:	83 f8 03             	cmp    eax,0x3
c001a640:	77 17                	ja     c001a659 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a642:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a646:	89 03                	mov    DWORD PTR [ebx],eax
c001a648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a64c:	89 06                	mov    DWORD PTR [esi],eax
c001a64e:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a655:	b0 01                	mov    al,0x1
c001a657:	eb 19                	jmp    c001a672 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a659:	50                   	push   eax
c001a65a:	55                   	push   ebp
c001a65b:	57                   	push   edi
c001a65c:	56                   	push   esi
c001a65d:	53                   	push   ebx
c001a65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a662:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a66a:	e8 aa fd ff ff       	call   c001a419 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a66f:	83 c4 20             	add    esp,0x20
c001a672:	83 c4 1c             	add    esp,0x1c
c001a675:	5b                   	pop    ebx
c001a676:	5e                   	pop    esi
c001a677:	5f                   	pop    edi
c001a678:	5d                   	pop    ebp
c001a679:	c3                   	ret    

c001a67a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a67a:	57                   	push   edi
c001a67b:	56                   	push   esi
c001a67c:	53                   	push   ebx
c001a67d:	83 ec 10             	sub    esp,0x10
c001a680:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a684:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a688:	85 ff                	test   edi,edi
c001a68a:	74 7b                	je     c001a707 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a68c:	85 f6                	test   esi,esi
c001a68e:	74 77                	je     c001a707 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a690:	83 ec 0c             	sub    esp,0xc
c001a693:	6a 1c                	push   0x1c
c001a695:	e8 7e 15 ff ff       	call   c000bc18 <malloc>
c001a69a:	89 07                	mov    DWORD PTR [edi],eax
c001a69c:	89 c3                	mov    ebx,eax
c001a69e:	58                   	pop    eax
c001a69f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6a3:	50                   	push   eax
c001a6a4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a6a7:	50                   	push   eax
c001a6a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6ac:	50                   	push   eax
c001a6ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6b1:	50                   	push   eax
c001a6b2:	56                   	push   esi
c001a6b3:	e8 34 ff ff ff       	call   c001a5ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a6b8:	83 c4 20             	add    esp,0x20
c001a6bb:	84 c0                	test   al,al
c001a6bd:	74 07                	je     c001a6c6 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a6bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6c4:	74 0b                	je     c001a6d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a6c6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a6ca:	b8 01 00 00 00       	mov    eax,0x1
c001a6cf:	eb 3b                	jmp    c001a70c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a6d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a6d9:	89 03                	mov    DWORD PTR [ebx],eax
c001a6db:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a6e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a6ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a6f7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a6fe:	8a 06                	mov    al,BYTE PTR [esi]
c001a700:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a703:	31 c0                	xor    eax,eax
c001a705:	eb 05                	jmp    c001a70c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a707:	b8 04 00 00 00       	mov    eax,0x4
c001a70c:	83 c4 10             	add    esp,0x10
c001a70f:	5b                   	pop    ebx
c001a710:	5e                   	pop    esi
c001a711:	5f                   	pop    edi
c001a712:	c3                   	ret    
c001a713:	90                   	nop

c001a714 <ISO9660::exists(char const*)>:
c001a714:	83 ec 28             	sub    esp,0x28
c001a717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a71b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a71f:	52                   	push   edx
c001a720:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a723:	52                   	push   edx
c001a724:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a728:	52                   	push   edx
c001a729:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a72d:	52                   	push   edx
c001a72e:	50                   	push   eax
c001a72f:	e8 b8 fe ff ff       	call   c001a5ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a734:	83 c4 3c             	add    esp,0x3c
c001a737:	c3                   	ret    

c001a738 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a738:	56                   	push   esi
c001a739:	53                   	push   ebx
c001a73a:	83 ec 14             	sub    esp,0x14
c001a73d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a741:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a745:	85 db                	test   ebx,ebx
c001a747:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a74b:	0f 94 c2             	sete   dl
c001a74e:	85 f6                	test   esi,esi
c001a750:	0f 94 c0             	sete   al
c001a753:	08 c2                	or     dl,al
c001a755:	75 68                	jne    c001a7bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a757:	85 c9                	test   ecx,ecx
c001a759:	74 64                	je     c001a7bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a75b:	83 ec 0c             	sub    esp,0xc
c001a75e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a761:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a765:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a76b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a772:	50                   	push   eax
c001a773:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a776:	50                   	push   eax
c001a777:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a77b:	50                   	push   eax
c001a77c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a780:	50                   	push   eax
c001a781:	51                   	push   ecx
c001a782:	e8 65 fe ff ff       	call   c001a5ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a787:	83 c4 20             	add    esp,0x20
c001a78a:	ba 01 00 00 00       	mov    edx,0x1
c001a78f:	84 c0                	test   al,al
c001a791:	74 31                	je     c001a7c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a797:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a79e:	89 03                	mov    DWORD PTR [ebx],eax
c001a7a0:	ba 00 00 00 00       	mov    edx,0x0
c001a7a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7a9:	85 c0                	test   eax,eax
c001a7ab:	0f 95 06             	setne  BYTE PTR [esi]
c001a7ae:	74 14                	je     c001a7c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a7b0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a7b6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7bd:	eb 05                	jmp    c001a7c4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a7bf:	ba 04 00 00 00       	mov    edx,0x4
c001a7c4:	83 c4 14             	add    esp,0x14
c001a7c7:	89 d0                	mov    eax,edx
c001a7c9:	5b                   	pop    ebx
c001a7ca:	5e                   	pop    esi
c001a7cb:	c3                   	ret    

c001a7cc <ISO9660::openDir(char const*, void**)>:
c001a7cc:	57                   	push   edi
c001a7cd:	56                   	push   esi
c001a7ce:	53                   	push   ebx
c001a7cf:	83 ec 10             	sub    esp,0x10
c001a7d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a7d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a7da:	85 ff                	test   edi,edi
c001a7dc:	0f 84 95 00 00 00    	je     c001a877 <ISO9660::openDir(char const*, void**)+0xab>
c001a7e2:	85 f6                	test   esi,esi
c001a7e4:	0f 84 8d 00 00 00    	je     c001a877 <ISO9660::openDir(char const*, void**)+0xab>
c001a7ea:	83 ec 0c             	sub    esp,0xc
c001a7ed:	6a 1c                	push   0x1c
c001a7ef:	e8 24 14 ff ff       	call   c000bc18 <malloc>
c001a7f4:	89 07                	mov    DWORD PTR [edi],eax
c001a7f6:	89 c3                	mov    ebx,eax
c001a7f8:	59                   	pop    ecx
c001a7f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7fd:	50                   	push   eax
c001a7fe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a801:	50                   	push   eax
c001a802:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a806:	50                   	push   eax
c001a807:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a80b:	50                   	push   eax
c001a80c:	56                   	push   esi
c001a80d:	e8 da fd ff ff       	call   c001a5ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a812:	83 c4 20             	add    esp,0x20
c001a815:	84 c0                	test   al,al
c001a817:	74 07                	je     c001a820 <ISO9660::openDir(char const*, void**)+0x54>
c001a819:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a81e:	75 21                	jne    c001a841 <ISO9660::openDir(char const*, void**)+0x75>
c001a820:	0f b6 c0             	movzx  eax,al
c001a823:	52                   	push   edx
c001a824:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a828:	50                   	push   eax
c001a829:	68 d2 19 02 c0       	push   0xc00219d2
c001a82e:	e8 ac 45 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001a833:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a837:	83 c4 10             	add    esp,0x10
c001a83a:	b8 01 00 00 00       	mov    eax,0x1
c001a83f:	eb 3b                	jmp    c001a87c <ISO9660::openDir(char const*, void**)+0xb0>
c001a841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a845:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a849:	89 03                	mov    DWORD PTR [ebx],eax
c001a84b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a856:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a85d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a864:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a867:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a86e:	8a 06                	mov    al,BYTE PTR [esi]
c001a870:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a873:	31 c0                	xor    eax,eax
c001a875:	eb 05                	jmp    c001a87c <ISO9660::openDir(char const*, void**)+0xb0>
c001a877:	b8 04 00 00 00       	mov    eax,0x4
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	5b                   	pop    ebx
c001a880:	5e                   	pop    esi
c001a881:	5f                   	pop    edi
c001a882:	c3                   	ret    
c001a883:	90                   	nop

c001a884 <ISO9660::ISO9660()>:
c001a884:	83 ec 0c             	sub    esp,0xc
c001a887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88b:	83 ec 0c             	sub    esp,0xc
c001a88e:	50                   	push   eax
c001a88f:	e8 50 48 ff ff       	call   c000f0e4 <Filesystem::Filesystem()>
c001a894:	83 c4 10             	add    esp,0x10
c001a897:	ba f8 19 02 c0       	mov    edx,0xc00219f8
c001a89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a0:	89 10                	mov    DWORD PTR [eax],edx
c001a8a2:	90                   	nop
c001a8a3:	83 c4 0c             	add    esp,0xc
c001a8a6:	c3                   	ret    
c001a8a7:	90                   	nop

c001a8a8 <SoundChannel::~SoundChannel()>:
c001a8a8:	83 ec 0c             	sub    esp,0xc
c001a8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8b2:	83 ec 0c             	sub    esp,0xc
c001a8b5:	50                   	push   eax
c001a8b6:	e8 6d 13 ff ff       	call   c000bc28 <free>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	90                   	nop
c001a8bf:	83 c4 0c             	add    esp,0xc
c001a8c2:	c3                   	ret    
c001a8c3:	90                   	nop

c001a8c4 <SoundChannel::setSpeed(float)>:
c001a8c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c8:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a8cc:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a8cf:	c3                   	ret    

c001a8d0 <SoundChannel::getSpeed()>:
c001a8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d4:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a8d7:	c3                   	ret    

c001a8d8 <SoundChannel::setVolume(int)>:
c001a8d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8dc:	83 f8 64             	cmp    eax,0x64
c001a8df:	7e 05                	jle    c001a8e6 <SoundChannel::setVolume(int)+0xe>
c001a8e1:	b8 64 00 00 00       	mov    eax,0x64
c001a8e6:	85 c0                	test   eax,eax
c001a8e8:	79 02                	jns    c001a8ec <SoundChannel::setVolume(int)+0x14>
c001a8ea:	31 c0                	xor    eax,eax
c001a8ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8f0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a8f3:	c3                   	ret    

c001a8f4 <SoundChannel::getVolume()>:
c001a8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a8fb:	c3                   	ret    

c001a8fc <SoundChannel::pause()>:
c001a8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a900:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a904:	c3                   	ret    
c001a905:	90                   	nop

c001a906 <SoundChannel::SoundChannel(int, int, int, int)>:
c001a906:	83 ec 1c             	sub    esp,0x1c
c001a909:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a90d:	e8 ea ff ff ff       	call   c001a8fc <SoundChannel::pause()>
c001a912:	83 c4 04             	add    esp,0x4
c001a915:	6a 50                	push   0x50
c001a917:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a91b:	e8 b8 ff ff ff       	call   c001a8d8 <SoundChannel::setVolume(int)>
c001a920:	83 c4 08             	add    esp,0x8
c001a923:	d9 e8                	fld1   
c001a925:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a929:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a92c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a930:	e8 8f ff ff ff       	call   c001a8c4 <SoundChannel::setSpeed(float)>
c001a935:	83 c4 08             	add    esp,0x8
c001a938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a93c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a940:	89 10                	mov    DWORD PTR [eax],edx
c001a942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a946:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a94a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a94d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a951:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a955:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a958:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a95d:	75 23                	jne    c001a982 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001a95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a963:	8b 10                	mov    edx,DWORD PTR [eax]
c001a965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a969:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a96c:	0f af c2             	imul   eax,edx
c001a96f:	85 c0                	test   eax,eax
c001a971:	79 03                	jns    c001a976 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001a973:	83 c0 03             	add    eax,0x3
c001a976:	c1 f8 02             	sar    eax,0x2
c001a979:	05 a0 0f 00 00       	add    eax,0xfa0
c001a97e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a986:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a98a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001a98d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a991:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001a998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a99c:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001a9a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9aa:	c1 e0 02             	shl    eax,0x2
c001a9ad:	83 ec 0c             	sub    esp,0xc
c001a9b0:	50                   	push   eax
c001a9b1:	e8 62 12 ff ff       	call   c000bc18 <malloc>
c001a9b6:	83 c4 10             	add    esp,0x10
c001a9b9:	89 c2                	mov    edx,eax
c001a9bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9bf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a9c2:	83 ec 04             	sub    esp,0x4
c001a9c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9c9:	50                   	push   eax
c001a9ca:	6a 01                	push   0x1
c001a9cc:	6a 04                	push   0x4
c001a9ce:	e8 78 de fe ff       	call   c000884b <src_new>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	89 c2                	mov    edx,eax
c001a9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9dc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a9df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9e3:	85 c0                	test   eax,eax
c001a9e5:	74 10                	je     c001a9f7 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001a9e7:	83 ec 0c             	sub    esp,0xc
c001a9ea:	68 54 1a 02 c0       	push   0xc0021a54
c001a9ef:	e8 54 9f ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001a9f4:	83 c4 10             	add    esp,0x10
c001a9f7:	90                   	nop
c001a9f8:	83 c4 1c             	add    esp,0x1c
c001a9fb:	c3                   	ret    

c001a9fc <SoundChannel::play()>:
c001a9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa00:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001aa04:	c3                   	ret    
c001aa05:	90                   	nop

c001aa06 <SoundChannel::paused()>:
c001aa06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001aa0d:	c3                   	ret    

c001aa0e <SoundChannel::getSampleRate()>:
c001aa0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa12:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa14:	c3                   	ret    
c001aa15:	90                   	nop

c001aa16 <SoundChannel::getBits()>:
c001aa16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aa1d:	c3                   	ret    

c001aa1e <SoundChannel::getBufferUsed()>:
c001aa1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa22:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001aa25:	c3                   	ret    

c001aa26 <SoundChannel::getBufferSize()>:
c001aa26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa2d:	c3                   	ret    

c001aa2e <SoundChannel::unbuffer(float*, int, int)>:
c001aa2e:	53                   	push   ebx
c001aa2f:	83 ec 40             	sub    esp,0x40
c001aa32:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001aa36:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aa3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa41:	db 03                	fild   DWORD PTR [ebx]
c001aa43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa47:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001aa4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001aa4e:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001aa51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa55:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001aa59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa61:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa69:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa6d:	50                   	push   eax
c001aa6e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001aa71:	e8 8f da fe ff       	call   c0008505 <src_process>
c001aa76:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa7a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001aa7d:	83 c4 0c             	add    esp,0xc
c001aa80:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa83:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001aa86:	29 d0                	sub    eax,edx
c001aa88:	c1 e0 02             	shl    eax,0x2
c001aa8b:	50                   	push   eax
c001aa8c:	8d 04 91             	lea    eax,[ecx+edx*4]
c001aa8f:	50                   	push   eax
c001aa90:	51                   	push   ecx
c001aa91:	e8 04 5b fe ff       	call   c000059a <memmove>
c001aa96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa9a:	83 c4 48             	add    esp,0x48
c001aa9d:	5b                   	pop    ebx
c001aa9e:	c3                   	ret    
c001aa9f:	90                   	nop

c001aaa0 <SoundChannel::buffer8(unsigned char*, int)>:
c001aaa0:	53                   	push   ebx
c001aaa1:	31 c0                	xor    eax,eax
c001aaa3:	83 ec 08             	sub    esp,0x8
c001aaa6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaaa:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001aaad:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001aab0:	74 35                	je     c001aae7 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aab2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab6:	7d 2f                	jge    c001aae7 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aab8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aabc:	d9 05 70 1a 02 c0    	fld    DWORD PTR ds:0xc0021a70
c001aac2:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001aac6:	40                   	inc    eax
c001aac7:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001aacc:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001aacf:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001aad3:	8d 59 01             	lea    ebx,[ecx+0x1]
c001aad6:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001aad9:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001aadc:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001aadf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aae2:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001aae5:	eb c9                	jmp    c001aab0 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001aae7:	83 c4 08             	add    esp,0x8
c001aaea:	5b                   	pop    ebx
c001aaeb:	c3                   	ret    

c001aaec <SoundDevice::SoundDevice(char const*)>:
c001aaec:	83 ec 1c             	sub    esp,0x1c
c001aaef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaf3:	83 ec 08             	sub    esp,0x8
c001aaf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aafa:	50                   	push   eax
c001aafb:	e8 da 58 ff ff       	call   c00103da <Device::Device(char const*)>
c001ab00:	83 c4 10             	add    esp,0x10
c001ab03:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c001ab08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0c:	89 10                	mov    DWORD PTR [eax],edx
c001ab0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab12:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab20:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ab2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab32:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab37:	7f 19                	jg     c001ab52 <SoundDevice::SoundDevice(char const*)+0x66>
c001ab39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab41:	83 c2 54             	add    edx,0x54
c001ab44:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ab4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab50:	eb e0                	jmp    c001ab32 <SoundDevice::SoundDevice(char const*)+0x46>
c001ab52:	90                   	nop
c001ab53:	83 c4 1c             	add    esp,0x1c
c001ab56:	c3                   	ret    
c001ab57:	90                   	nop

c001ab58 <SoundDevice::~SoundDevice()>:
c001ab58:	53                   	push   ebx
c001ab59:	83 ec 18             	sub    esp,0x18
c001ab5c:	ba 7c 1a 02 c0       	mov    edx,0xc0021a7c
c001ab61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab65:	89 10                	mov    DWORD PTR [eax],edx
c001ab67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab6f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab74:	7f 46                	jg     c001abbc <SoundDevice::~SoundDevice()+0x64>
c001ab76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab7e:	83 c2 54             	add    edx,0x54
c001ab81:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ab85:	85 c0                	test   eax,eax
c001ab87:	74 2d                	je     c001abb6 <SoundDevice::~SoundDevice()+0x5e>
c001ab89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab91:	83 c2 54             	add    edx,0x54
c001ab94:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ab98:	85 db                	test   ebx,ebx
c001ab9a:	74 1a                	je     c001abb6 <SoundDevice::~SoundDevice()+0x5e>
c001ab9c:	83 ec 0c             	sub    esp,0xc
c001ab9f:	53                   	push   ebx
c001aba0:	e8 03 fd ff ff       	call   c001a8a8 <SoundChannel::~SoundChannel()>
c001aba5:	83 c4 10             	add    esp,0x10
c001aba8:	83 ec 08             	sub    esp,0x8
c001abab:	6a 2c                	push   0x2c
c001abad:	53                   	push   ebx
c001abae:	e8 4c 41 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001abb3:	83 c4 10             	add    esp,0x10
c001abb6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001abba:	eb b3                	jmp    c001ab6f <SoundDevice::~SoundDevice()+0x17>
c001abbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc0:	83 ec 0c             	sub    esp,0xc
c001abc3:	50                   	push   eax
c001abc4:	e8 c3 54 ff ff       	call   c001008c <Device::~Device()>
c001abc9:	83 c4 10             	add    esp,0x10
c001abcc:	90                   	nop
c001abcd:	83 c4 18             	add    esp,0x18
c001abd0:	5b                   	pop    ebx
c001abd1:	c3                   	ret    

c001abd2 <SoundDevice::~SoundDevice()>:
c001abd2:	83 ec 0c             	sub    esp,0xc
c001abd5:	83 ec 0c             	sub    esp,0xc
c001abd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abdc:	e8 77 ff ff ff       	call   c001ab58 <SoundDevice::~SoundDevice()>
c001abe1:	83 c4 10             	add    esp,0x10
c001abe4:	83 ec 08             	sub    esp,0x8
c001abe7:	68 e4 01 00 00       	push   0x1e4
c001abec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abf0:	e8 0a 41 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	83 c4 0c             	add    esp,0xc
c001abfb:	c3                   	ret    

c001abfc <SoundDevice::getFreeChannelNum()>:
c001abfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac00:	31 c0                	xor    eax,eax
c001ac02:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ac0a:	74 09                	je     c001ac15 <SoundDevice::getFreeChannelNum()+0x19>
c001ac0c:	40                   	inc    eax
c001ac0d:	83 f8 20             	cmp    eax,0x20
c001ac10:	75 f0                	jne    c001ac02 <SoundDevice::getFreeChannelNum()+0x6>
c001ac12:	83 c8 ff             	or     eax,0xffffffff
c001ac15:	c3                   	ret    

c001ac16 <SoundDevice::addChannel(SoundChannel*)>:
c001ac16:	56                   	push   esi
c001ac17:	53                   	push   ebx
c001ac18:	51                   	push   ecx
c001ac19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac1d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac21:	53                   	push   ebx
c001ac22:	e8 d5 ff ff ff       	call   c001abfc <SoundDevice::getFreeChannelNum()>
c001ac27:	5a                   	pop    edx
c001ac28:	83 f8 ff             	cmp    eax,0xffffffff
c001ac2b:	74 51                	je     c001ac7e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ac2d:	85 f6                	test   esi,esi
c001ac2f:	74 4d                	je     c001ac7e <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ac31:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ac38:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ac3f:	75 30                	jne    c001ac71 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ac41:	83 ec 0c             	sub    esp,0xc
c001ac44:	56                   	push   esi
c001ac45:	e8 c4 fd ff ff       	call   c001aa0e <SoundChannel::getSampleRate()>
c001ac4a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ac50:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac53:	e8 be fd ff ff       	call   c001aa16 <SoundChannel::getBits()>
c001ac58:	83 c4 0c             	add    esp,0xc
c001ac5b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ac61:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ac63:	50                   	push   eax
c001ac64:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ac6a:	53                   	push   ebx
c001ac6b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ac77:	b8 01 00 00 00       	mov    eax,0x1
c001ac7c:	eb 03                	jmp    c001ac81 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ac7e:	83 c8 ff             	or     eax,0xffffffff
c001ac81:	5a                   	pop    edx
c001ac82:	5b                   	pop    ebx
c001ac83:	5e                   	pop    esi
c001ac84:	c3                   	ret    
c001ac85:	90                   	nop

c001ac86 <SoundDevice::removeChannel(int)>:
c001ac86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac8e:	83 fa 1f             	cmp    edx,0x1f
c001ac91:	77 23                	ja     c001acb6 <SoundDevice::removeChannel(int)+0x30>
c001ac93:	8d 14 90             	lea    edx,[eax+edx*4]
c001ac96:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ac9d:	74 17                	je     c001acb6 <SoundDevice::removeChannel(int)+0x30>
c001ac9f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001aca9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001acaf:	75 05                	jne    c001acb6 <SoundDevice::removeChannel(int)+0x30>
c001acb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001acb3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001acb6:	c3                   	ret    
c001acb7:	90                   	nop

c001acb8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001acb8:	56                   	push   esi
c001acb9:	53                   	push   ebx
c001acba:	31 db                	xor    ebx,ebx
c001acbc:	83 ec 14             	sub    esp,0x14
c001acbf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acc3:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001acc7:	7d 55                	jge    c001ad1e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001acc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001accd:	d9 e8                	fld1   
c001accf:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001acd2:	d8 0d ac 1a 02 c0    	fmul   DWORD PTR ds:0xc0021aac
c001acd8:	d8 0d b0 1a 02 c0    	fmul   DWORD PTR ds:0xc0021ab0
c001acde:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ace2:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ace6:	d8 15 b4 1a 02 c0    	fcom   DWORD PTR ds:0xc0021ab4
c001acec:	df e0                	fnstsw ax
c001acee:	9e                   	sahf   
c001acef:	72 08                	jb     c001acf9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001acf1:	dd d8                	fstp   st(0)
c001acf3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001acf7:	eb 22                	jmp    c001ad1b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001acf9:	d9 ee                	fldz   
c001acfb:	d8 d9                	fcomp  st(1)
c001acfd:	df e0                	fnstsw ax
c001acff:	9e                   	sahf   
c001ad00:	72 08                	jb     c001ad0a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ad02:	dd d8                	fstp   st(0)
c001ad04:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ad08:	eb 11                	jmp    c001ad1b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ad0a:	83 ec 10             	sub    esp,0x10
c001ad0d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ad10:	e8 07 36 00 00       	call   c001e31c <lrintf>
c001ad15:	83 c4 10             	add    esp,0x10
c001ad18:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ad1b:	43                   	inc    ebx
c001ad1c:	eb a5                	jmp    c001acc3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ad1e:	83 c4 14             	add    esp,0x14
c001ad21:	5b                   	pop    ebx
c001ad22:	5e                   	pop    esi
c001ad23:	c3                   	ret    

c001ad24 <SoundDevice::getAudio(int, float*, float*)>:
c001ad24:	55                   	push   ebp
c001ad25:	57                   	push   edi
c001ad26:	56                   	push   esi
c001ad27:	53                   	push   ebx
c001ad28:	31 db                	xor    ebx,ebx
c001ad2a:	83 ec 20             	sub    esp,0x20
c001ad2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad31:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ad35:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ad39:	c1 e0 02             	shl    eax,0x2
c001ad3c:	50                   	push   eax
c001ad3d:	6a 00                	push   0x0
c001ad3f:	55                   	push   ebp
c001ad40:	e8 c3 58 fe ff       	call   c0000608 <memset>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ad4c:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ad53:	85 c0                	test   eax,eax
c001ad55:	0f 84 94 00 00 00    	je     c001adef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	50                   	push   eax
c001ad5f:	e8 a2 fc ff ff       	call   c001aa06 <SoundChannel::paused()>
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	84 c0                	test   al,al
c001ad69:	0f 85 80 00 00 00    	jne    c001adef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad6f:	83 ec 0c             	sub    esp,0xc
c001ad72:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ad79:	e8 76 fb ff ff       	call   c001a8f4 <SoundChannel::getVolume()>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	85 c0                	test   eax,eax
c001ad83:	74 6a                	je     c001adef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad85:	83 ec 0c             	sub    esp,0xc
c001ad88:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ad8f:	e8 60 fb ff ff       	call   c001a8f4 <SoundChannel::getVolume()>
c001ad94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad98:	d9 05 b8 1a 02 c0    	fld    DWORD PTR ds:0xc0021ab8
c001ad9e:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ada2:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ada6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001adaa:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001adb0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001adb4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001adbb:	e8 6e fc ff ff       	call   c001aa2e <SoundChannel::unbuffer(float*, int, int)>
c001adc0:	83 c4 20             	add    esp,0x20
c001adc3:	31 d2                	xor    edx,edx
c001adc5:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001adc9:	39 c2                	cmp    edx,eax
c001adcb:	7d 1a                	jge    c001ade7 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001adcd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001add1:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001add4:	d8 c9                	fmul   st,st(1)
c001add6:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001addc:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001ade0:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ade4:	42                   	inc    edx
c001ade5:	eb e2                	jmp    c001adc9 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ade7:	dd d8                	fstp   st(0)
c001ade9:	39 c7                	cmp    edi,eax
c001adeb:	7e 02                	jle    c001adef <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aded:	89 c7                	mov    edi,eax
c001adef:	43                   	inc    ebx
c001adf0:	83 fb 20             	cmp    ebx,0x20
c001adf3:	0f 85 53 ff ff ff    	jne    c001ad4c <SoundDevice::getAudio(int, float*, float*)+0x28>
c001adf9:	83 c4 1c             	add    esp,0x1c
c001adfc:	89 f8                	mov    eax,edi
c001adfe:	5b                   	pop    ebx
c001adff:	5e                   	pop    esi
c001ae00:	5f                   	pop    edi
c001ae01:	5d                   	pop    ebp
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <PCI::open(int, int, void*)>:
c001ae04:	83 ec 18             	sub    esp,0x18
c001ae07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae0b:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae0d:	50                   	push   eax
c001ae0e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ae11:	31 c0                	xor    eax,eax
c001ae13:	83 c4 1c             	add    esp,0x1c
c001ae16:	c3                   	ret    
c001ae17:	90                   	nop

c001ae18 <PCI::close(int, int, void*)>:
c001ae18:	31 c0                	xor    eax,eax
c001ae1a:	c3                   	ret    
c001ae1b:	90                   	nop

c001ae1c <PCI::PCI()>:
c001ae1c:	83 ec 0c             	sub    esp,0xc
c001ae1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae23:	83 ec 08             	sub    esp,0x8
c001ae26:	68 bc 1a 02 c0       	push   0xc0021abc
c001ae2b:	50                   	push   eax
c001ae2c:	e8 35 4c ff ff       	call   c000fa66 <Bus::Bus(char const*)>
c001ae31:	83 c4 10             	add    esp,0x10
c001ae34:	ba 68 1b 02 c0       	mov    edx,0xc0021b68
c001ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3d:	89 10                	mov    DWORD PTR [eax],edx
c001ae3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae49:	0f b6 d0             	movzx  edx,al
c001ae4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae50:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ae57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae61:	0f b6 d0             	movzx  edx,al
c001ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae68:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ae6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae77:	8d 50 01             	lea    edx,[eax+0x1]
c001ae7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae7e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ae84:	0f b6 d0             	movzx  edx,al
c001ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ae8f:	83 c9 c0             	or     ecx,0xffffffc0
c001ae92:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ae96:	90                   	nop
c001ae97:	83 c4 0c             	add    esp,0xc
c001ae9a:	c3                   	ret    
c001ae9b:	90                   	nop

c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae9c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aea0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aea5:	89 ca                	mov    edx,ecx
c001aea7:	c1 e0 10             	shl    eax,0x10
c001aeaa:	81 e2 fc 00 00 00    	and    edx,0xfc
c001aeb0:	09 d0                	or     eax,edx
c001aeb2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001aeb7:	c1 e2 08             	shl    edx,0x8
c001aeba:	09 d0                	or     eax,edx
c001aebc:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001aec1:	c1 e2 0b             	shl    edx,0xb
c001aec4:	09 d0                	or     eax,edx
c001aec6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aecb:	0d 00 00 00 80       	or     eax,0x80000000
c001aed0:	ef                   	out    dx,eax
c001aed1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aed6:	ed                   	in     eax,dx
c001aed7:	83 e1 02             	and    ecx,0x2
c001aeda:	0f b6 c9             	movzx  ecx,cl
c001aedd:	c1 e1 03             	shl    ecx,0x3
c001aee0:	d3 e8                	shr    eax,cl
c001aee2:	c3                   	ret    
c001aee3:	90                   	nop

c001aee4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aee4:	6a 00                	push   0x0
c001aee6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aeeb:	50                   	push   eax
c001aeec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aef1:	50                   	push   eax
c001aef2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aef7:	50                   	push   eax
c001aef8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aefc:	e8 9b ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af01:	83 c4 14             	add    esp,0x14
c001af04:	c3                   	ret    
c001af05:	90                   	nop

c001af06 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af06:	6a 0e                	push   0xe
c001af08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af0d:	50                   	push   eax
c001af0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af13:	50                   	push   eax
c001af14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af19:	50                   	push   eax
c001af1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af1e:	e8 79 ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af23:	83 c4 14             	add    esp,0x14
c001af26:	0f b6 c0             	movzx  eax,al
c001af29:	c3                   	ret    

c001af2a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af2a:	55                   	push   ebp
c001af2b:	57                   	push   edi
c001af2c:	56                   	push   esi
c001af2d:	53                   	push   ebx
c001af2e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001af33:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001af38:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001af3d:	6a 0a                	push   0xa
c001af3f:	56                   	push   esi
c001af40:	55                   	push   ebp
c001af41:	57                   	push   edi
c001af42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af46:	e8 51 ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af4b:	6a 0a                	push   0xa
c001af4d:	89 c3                	mov    ebx,eax
c001af4f:	56                   	push   esi
c001af50:	0f b6 db             	movzx  ebx,bl
c001af53:	55                   	push   ebp
c001af54:	57                   	push   edi
c001af55:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001af59:	e8 3e ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af5e:	83 c4 28             	add    esp,0x28
c001af61:	25 00 ff 00 00       	and    eax,0xff00
c001af66:	09 d8                	or     eax,ebx
c001af68:	5b                   	pop    ebx
c001af69:	5e                   	pop    esi
c001af6a:	5f                   	pop    edi
c001af6b:	5d                   	pop    ebp
c001af6c:	c3                   	ret    
c001af6d:	90                   	nop

c001af6e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af6e:	6a 08                	push   0x8
c001af70:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af75:	50                   	push   eax
c001af76:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af7b:	50                   	push   eax
c001af7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af81:	50                   	push   eax
c001af82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af86:	e8 11 ff ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af8b:	83 c4 14             	add    esp,0x14
c001af8e:	0f b6 c4             	movzx  eax,ah
c001af91:	c3                   	ret    

c001af92 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af92:	6a 08                	push   0x8
c001af94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af99:	50                   	push   eax
c001af9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af9f:	50                   	push   eax
c001afa0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afa5:	50                   	push   eax
c001afa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afaa:	e8 ed fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afaf:	83 c4 14             	add    esp,0x14
c001afb2:	c3                   	ret    
c001afb3:	90                   	nop

c001afb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001afb4:	6a 3c                	push   0x3c
c001afb6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afbb:	50                   	push   eax
c001afbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afc1:	50                   	push   eax
c001afc2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afc7:	50                   	push   eax
c001afc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afcc:	e8 cb fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd1:	83 c4 14             	add    esp,0x14
c001afd4:	c3                   	ret    
c001afd5:	90                   	nop

c001afd6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001afd6:	6a 18                	push   0x18
c001afd8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afdd:	50                   	push   eax
c001afde:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afe3:	50                   	push   eax
c001afe4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afe9:	50                   	push   eax
c001afea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afee:	e8 a9 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff3:	83 c4 14             	add    esp,0x14
c001aff6:	0f b6 c4             	movzx  eax,ah
c001aff9:	c3                   	ret    

c001affa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001affa:	55                   	push   ebp
c001affb:	57                   	push   edi
c001affc:	56                   	push   esi
c001affd:	53                   	push   ebx
c001affe:	50                   	push   eax
c001afff:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b003:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b008:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b00d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b012:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b019:	8d 43 12             	lea    eax,[ebx+0x12]
c001b01c:	83 c3 10             	add    ebx,0x10
c001b01f:	0f b6 c0             	movzx  eax,al
c001b022:	0f b6 db             	movzx  ebx,bl
c001b025:	50                   	push   eax
c001b026:	51                   	push   ecx
c001b027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b02b:	57                   	push   edi
c001b02c:	55                   	push   ebp
c001b02d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b031:	e8 66 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b036:	53                   	push   ebx
c001b037:	89 c6                	mov    esi,eax
c001b039:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b03d:	c1 e6 10             	shl    esi,0x10
c001b040:	51                   	push   ecx
c001b041:	57                   	push   edi
c001b042:	55                   	push   ebp
c001b043:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b047:	e8 50 fe ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b04c:	83 c4 2c             	add    esp,0x2c
c001b04f:	0f b7 c0             	movzx  eax,ax
c001b052:	5b                   	pop    ebx
c001b053:	09 f0                	or     eax,esi
c001b055:	5e                   	pop    esi
c001b056:	5f                   	pop    edi
c001b057:	5d                   	pop    ebp
c001b058:	c3                   	ret    
c001b059:	90                   	nop

c001b05a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b05a:	53                   	push   ebx
c001b05b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b060:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b065:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b069:	c1 e1 10             	shl    ecx,0x10
c001b06c:	25 fc 00 00 00       	and    eax,0xfc
c001b071:	09 c1                	or     ecx,eax
c001b073:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b078:	c1 e0 08             	shl    eax,0x8
c001b07b:	09 c1                	or     ecx,eax
c001b07d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b082:	c1 e0 0b             	shl    eax,0xb
c001b085:	09 c1                	or     ecx,eax
c001b087:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b08d:	89 c8                	mov    eax,ecx
c001b08f:	ef                   	out    dx,eax
c001b090:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b095:	ed                   	in     eax,dx
c001b096:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b09b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b0a0:	74 0a                	je     c001b0ac <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b0a2:	0f b7 d8             	movzx  ebx,ax
c001b0a5:	89 d0                	mov    eax,edx
c001b0a7:	c1 e0 10             	shl    eax,0x10
c001b0aa:	eb 05                	jmp    c001b0b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b0ac:	66 31 c0             	xor    ax,ax
c001b0af:	89 d3                	mov    ebx,edx
c001b0b1:	09 c3                	or     ebx,eax
c001b0b3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0b8:	89 c8                	mov    eax,ecx
c001b0ba:	ef                   	out    dx,eax
c001b0bb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0c0:	89 d8                	mov    eax,ebx
c001b0c2:	ef                   	out    dx,eax
c001b0c3:	5b                   	pop    ebx
c001b0c4:	c3                   	ret    
c001b0c5:	90                   	nop

c001b0c6 <PCI::checkBus(unsigned char)>:
c001b0c6:	56                   	push   esi
c001b0c7:	53                   	push   ebx
c001b0c8:	31 db                	xor    ebx,ebx
c001b0ca:	51                   	push   ecx
c001b0cb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b0d0:	52                   	push   edx
c001b0d1:	53                   	push   ebx
c001b0d2:	43                   	inc    ebx
c001b0d3:	56                   	push   esi
c001b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0d8:	e8 4d 03 00 00       	call   c001b42a <PCI::checkDevice(unsigned char, unsigned char)>
c001b0dd:	83 c4 10             	add    esp,0x10
c001b0e0:	83 fb 20             	cmp    ebx,0x20
c001b0e3:	75 eb                	jne    c001b0d0 <PCI::checkBus(unsigned char)+0xa>
c001b0e5:	58                   	pop    eax
c001b0e6:	5b                   	pop    ebx
c001b0e7:	5e                   	pop    esi
c001b0e8:	c3                   	ret    
c001b0e9:	90                   	nop

c001b0ea <PCI::foundDevice(PCIDeviceInfo)>:
c001b0ea:	55                   	push   ebp
c001b0eb:	57                   	push   edi
c001b0ec:	56                   	push   esi
c001b0ed:	53                   	push   ebx
c001b0ee:	83 ec 1c             	sub    esp,0x1c
c001b0f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0f5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b0fb:	0f 84 51 01 00 00    	je     c001b252 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b101:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b105:	66 81 f9 06 04       	cmp    cx,0x406
c001b10a:	75 2c                	jne    c001b138 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b10c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b111:	50                   	push   eax
c001b112:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b117:	50                   	push   eax
c001b118:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b11d:	50                   	push   eax
c001b11e:	56                   	push   esi
c001b11f:	e8 b2 fe ff ff       	call   c001afd6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b124:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b128:	0f b6 c0             	movzx  eax,al
c001b12b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b12f:	83 c4 2c             	add    esp,0x2c
c001b132:	5b                   	pop    ebx
c001b133:	5e                   	pop    esi
c001b134:	5f                   	pop    edi
c001b135:	5d                   	pop    ebp
c001b136:	eb 8e                	jmp    c001b0c6 <PCI::checkBus(unsigned char)>
c001b138:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b13c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b142:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b146:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b14a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b14e:	88 d3                	mov    bl,dl
c001b150:	85 c0                	test   eax,eax
c001b152:	74 33                	je     c001b187 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b154:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b157:	85 d2                	test   edx,edx
c001b159:	74 28                	je     c001b183 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b15b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b161:	31 ef                	xor    edi,ebp
c001b163:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b169:	75 18                	jne    c001b183 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b16b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b16f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b175:	75 0c                	jne    c001b183 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b177:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b17d:	0f 84 cf 00 00 00    	je     c001b252 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b183:	8b 00                	mov    eax,DWORD PTR [eax]
c001b185:	eb c9                	jmp    c001b150 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b187:	66 81 f9 01 06       	cmp    cx,0x601
c001b18c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b190:	75 18                	jne    c001b1aa <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b192:	83 ec 0c             	sub    esp,0xc
c001b195:	68 58 01 00 00       	push   0x158
c001b19a:	e8 51 3b ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001b19f:	59                   	pop    ecx
c001b1a0:	89 c5                	mov    ebp,eax
c001b1a2:	5f                   	pop    edi
c001b1a3:	68 c4 1a 02 c0       	push   0xc0021ac4
c001b1a8:	eb 7d                	jmp    c001b227 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b1aa:	66 81 f9 01 01       	cmp    cx,0x101
c001b1af:	75 60                	jne    c001b211 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b1b1:	83 ec 0c             	sub    esp,0xc
c001b1b4:	68 70 02 00 00       	push   0x270
c001b1b9:	e8 32 3b ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001b1be:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1c1:	89 c5                	mov    ebp,eax
c001b1c3:	e8 26 03 00 00       	call   c001b4ee <IDE::IDE()>
c001b1c8:	58                   	pop    eax
c001b1c9:	5a                   	pop    edx
c001b1ca:	55                   	push   ebp
c001b1cb:	56                   	push   esi
c001b1cc:	e8 19 50 ff ff       	call   c00101ea <Device::addChild(Device*)>
c001b1d1:	83 ec 1c             	sub    esp,0x1c
c001b1d4:	b9 09 00 00 00       	mov    ecx,0x9
c001b1d9:	fc                   	cld    
c001b1da:	89 e7                	mov    edi,esp
c001b1dc:	89 de                	mov    esi,ebx
c001b1de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1e0:	55                   	push   ebp
c001b1e1:	e8 de 4e ff ff       	call   c00100c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001b1e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b1e9:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b1ed:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b1f5:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b1fd:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b205:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b208:	83 c4 4c             	add    esp,0x4c
c001b20b:	5b                   	pop    ebx
c001b20c:	5e                   	pop    esi
c001b20d:	5f                   	pop    edi
c001b20e:	5d                   	pop    ebp
c001b20f:	ff e0                	jmp    eax
c001b211:	83 ec 0c             	sub    esp,0xc
c001b214:	68 58 01 00 00       	push   0x158
c001b219:	e8 d2 3a ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001b21e:	59                   	pop    ecx
c001b21f:	89 c5                	mov    ebp,eax
c001b221:	5f                   	pop    edi
c001b222:	68 e3 1a 02 c0       	push   0xc0021ae3
c001b227:	55                   	push   ebp
c001b228:	e8 a9 52 ff ff       	call   c00104d6 <DriverlessDevice::DriverlessDevice(char const*)>
c001b22d:	58                   	pop    eax
c001b22e:	5a                   	pop    edx
c001b22f:	55                   	push   ebp
c001b230:	56                   	push   esi
c001b231:	e8 b4 4f ff ff       	call   c00101ea <Device::addChild(Device*)>
c001b236:	b9 09 00 00 00       	mov    ecx,0x9
c001b23b:	fc                   	cld    
c001b23c:	89 df                	mov    edi,ebx
c001b23e:	89 de                	mov    esi,ebx
c001b240:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b242:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b246:	83 c4 2c             	add    esp,0x2c
c001b249:	5b                   	pop    ebx
c001b24a:	5e                   	pop    esi
c001b24b:	5f                   	pop    edi
c001b24c:	5d                   	pop    ebp
c001b24d:	e9 72 4e ff ff       	jmp    c00100c4 <Device::preOpenPCI(PCIDeviceInfo)>
c001b252:	83 c4 1c             	add    esp,0x1c
c001b255:	5b                   	pop    ebx
c001b256:	5e                   	pop    esi
c001b257:	5f                   	pop    edi
c001b258:	5d                   	pop    ebp
c001b259:	c3                   	ret    

c001b25a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b25a:	55                   	push   ebp
c001b25b:	57                   	push   edi
c001b25c:	56                   	push   esi
c001b25d:	53                   	push   ebx
c001b25e:	83 ec 5c             	sub    esp,0x5c
c001b261:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b265:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b269:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b26d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b272:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b276:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b27a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b27f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b283:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b288:	6a 0c                	push   0xc
c001b28a:	55                   	push   ebp
c001b28b:	53                   	push   ebx
c001b28c:	57                   	push   edi
c001b28d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b294:	e8 03 fc ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b299:	83 c4 0c             	add    esp,0xc
c001b29c:	6a 00                	push   0x0
c001b29e:	68 fd 1a 02 c0       	push   0xc0021afd
c001b2a3:	e8 37 3b ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001b2a8:	55                   	push   ebp
c001b2a9:	53                   	push   ebx
c001b2aa:	57                   	push   edi
c001b2ab:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b2b2:	e8 73 fc ff ff       	call   c001af2a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b2b7:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b2bc:	83 c4 20             	add    esp,0x20
c001b2bf:	55                   	push   ebp
c001b2c0:	53                   	push   ebx
c001b2c1:	57                   	push   edi
c001b2c2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b2c6:	e8 e9 fc ff ff       	call   c001afb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b2cb:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b2d2:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b2d6:	55                   	push   ebp
c001b2d7:	53                   	push   ebx
c001b2d8:	57                   	push   edi
c001b2d9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b2e0:	e8 b7 fb ff ff       	call   c001ae9c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2e5:	0f b6 c4             	movzx  eax,ah
c001b2e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2ec:	83 c4 18             	add    esp,0x18
c001b2ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b2f3:	68 11 1b 02 c0       	push   0xc0021b11
c001b2f8:	e8 e2 3a ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001b2fd:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b301:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b305:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001b30a:	83 c4 10             	add    esp,0x10
c001b30d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b313:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b31a:	74 6c                	je     c001b388 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b31c:	31 f6                	xor    esi,esi
c001b31e:	8b 15 e8 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022de8
c001b324:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b32a:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b330:	7e 56                	jle    c001b388 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b332:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b335:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b33c:	39 cb                	cmp    ebx,ecx
c001b33e:	75 45                	jne    c001b385 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b340:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b347:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b34b:	75 38                	jne    c001b385 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b34d:	83 ec 0c             	sub    esp,0xc
c001b350:	68 20 1b 02 c0       	push   0xc0021b20
c001b355:	e8 85 3a ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001b35a:	8b 15 e8 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022de8
c001b360:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b366:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b36e:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b372:	52                   	push   edx
c001b373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b377:	53                   	push   ebx
c001b378:	68 45 1b 02 c0       	push   0xc0021b45
c001b37d:	e8 5d 3a ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001b382:	83 c4 20             	add    esp,0x20
c001b385:	46                   	inc    esi
c001b386:	eb 96                	jmp    c001b31e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b388:	31 d2                	xor    edx,edx
c001b38a:	83 ec 0c             	sub    esp,0xc
c001b38d:	55                   	push   ebp
c001b38e:	53                   	push   ebx
c001b38f:	57                   	push   edi
c001b390:	52                   	push   edx
c001b391:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b395:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b39c:	e8 59 fc ff ff       	call   c001affa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3a1:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b3a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b3a9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b3ad:	42                   	inc    edx
c001b3ae:	83 c4 20             	add    esp,0x20
c001b3b1:	83 fa 06             	cmp    edx,0x6
c001b3b4:	75 d4                	jne    c001b38a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b3b6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b3ba:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b3be:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b3c2:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b3c6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b3ca:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b3ce:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b3d3:	86 e0                	xchg   al,ah
c001b3d5:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b3da:	55                   	push   ebp
c001b3db:	53                   	push   ebx
c001b3dc:	57                   	push   edi
c001b3dd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b3e1:	e8 88 fb ff ff       	call   c001af6e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b3e6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b3ea:	55                   	push   ebp
c001b3eb:	53                   	push   ebx
c001b3ec:	57                   	push   edi
c001b3ed:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3f4:	e8 eb fa ff ff       	call   c001aee4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b3f9:	83 ec 0c             	sub    esp,0xc
c001b3fc:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b401:	b9 09 00 00 00       	mov    ecx,0x9
c001b406:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b40a:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b40e:	fc                   	cld    
c001b40f:	89 e7                	mov    edi,esp
c001b411:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b413:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b41a:	e8 cb fc ff ff       	call   c001b0ea <PCI::foundDevice(PCIDeviceInfo)>
c001b41f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b425:	5b                   	pop    ebx
c001b426:	5e                   	pop    esi
c001b427:	5f                   	pop    edi
c001b428:	5d                   	pop    ebp
c001b429:	c3                   	ret    

c001b42a <PCI::checkDevice(unsigned char, unsigned char)>:
c001b42a:	55                   	push   ebp
c001b42b:	57                   	push   edi
c001b42c:	56                   	push   esi
c001b42d:	53                   	push   ebx
c001b42e:	83 ec 0c             	sub    esp,0xc
c001b431:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b435:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b43a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b43f:	6a 00                	push   0x0
c001b441:	56                   	push   esi
c001b442:	57                   	push   edi
c001b443:	55                   	push   ebp
c001b444:	e8 9b fa ff ff       	call   c001aee4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b449:	6a 00                	push   0x0
c001b44b:	56                   	push   esi
c001b44c:	57                   	push   edi
c001b44d:	55                   	push   ebp
c001b44e:	e8 07 fe ff ff       	call   c001b25a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b453:	83 c4 20             	add    esp,0x20
c001b456:	6a 00                	push   0x0
c001b458:	56                   	push   esi
c001b459:	57                   	push   edi
c001b45a:	55                   	push   ebp
c001b45b:	e8 a6 fa ff ff       	call   c001af06 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	84 c0                	test   al,al
c001b465:	79 27                	jns    c001b48e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b467:	bb 01 00 00 00       	mov    ebx,0x1
c001b46c:	53                   	push   ebx
c001b46d:	56                   	push   esi
c001b46e:	57                   	push   edi
c001b46f:	55                   	push   ebp
c001b470:	e8 6f fa ff ff       	call   c001aee4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b475:	83 c4 10             	add    esp,0x10
c001b478:	66 40                	inc    ax
c001b47a:	74 0c                	je     c001b488 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b47c:	53                   	push   ebx
c001b47d:	56                   	push   esi
c001b47e:	57                   	push   edi
c001b47f:	55                   	push   ebp
c001b480:	e8 d5 fd ff ff       	call   c001b25a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b485:	83 c4 10             	add    esp,0x10
c001b488:	43                   	inc    ebx
c001b489:	83 fb 08             	cmp    ebx,0x8
c001b48c:	75 de                	jne    c001b46c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b48e:	83 c4 0c             	add    esp,0xc
c001b491:	5b                   	pop    ebx
c001b492:	5e                   	pop    esi
c001b493:	5f                   	pop    edi
c001b494:	5d                   	pop    ebp
c001b495:	c3                   	ret    

c001b496 <PCI::detect()>:
c001b496:	56                   	push   esi
c001b497:	53                   	push   ebx
c001b498:	53                   	push   ebx
c001b499:	31 db                	xor    ebx,ebx
c001b49b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b49f:	6a 00                	push   0x0
c001b4a1:	6a 00                	push   0x0
c001b4a3:	6a 00                	push   0x0
c001b4a5:	56                   	push   esi
c001b4a6:	e8 5b fa ff ff       	call   c001af06 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	a8 80                	test   al,0x80
c001b4b0:	75 21                	jne    c001b4d3 <PCI::detect()+0x3d>
c001b4b2:	51                   	push   ecx
c001b4b3:	51                   	push   ecx
c001b4b4:	6a 00                	push   0x0
c001b4b6:	56                   	push   esi
c001b4b7:	e8 0a fc ff ff       	call   c001b0c6 <PCI::checkBus(unsigned char)>
c001b4bc:	83 c4 10             	add    esp,0x10
c001b4bf:	eb 24                	jmp    c001b4e5 <PCI::detect()+0x4f>
c001b4c1:	52                   	push   edx
c001b4c2:	52                   	push   edx
c001b4c3:	53                   	push   ebx
c001b4c4:	43                   	inc    ebx
c001b4c5:	56                   	push   esi
c001b4c6:	e8 fb fb ff ff       	call   c001b0c6 <PCI::checkBus(unsigned char)>
c001b4cb:	83 c4 10             	add    esp,0x10
c001b4ce:	83 fb 08             	cmp    ebx,0x8
c001b4d1:	74 12                	je     c001b4e5 <PCI::detect()+0x4f>
c001b4d3:	53                   	push   ebx
c001b4d4:	6a 00                	push   0x0
c001b4d6:	6a 00                	push   0x0
c001b4d8:	56                   	push   esi
c001b4d9:	e8 06 fa ff ff       	call   c001aee4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	66 40                	inc    ax
c001b4e3:	74 dc                	je     c001b4c1 <PCI::detect()+0x2b>
c001b4e5:	58                   	pop    eax
c001b4e6:	5b                   	pop    ebx
c001b4e7:	5e                   	pop    esi
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <IDE::close(int, int, void*)>:
c001b4ea:	83 c8 ff             	or     eax,0xffffffff
c001b4ed:	c3                   	ret    

c001b4ee <IDE::IDE()>:
c001b4ee:	83 ec 0c             	sub    esp,0xc
c001b4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f5:	83 ec 08             	sub    esp,0x8
c001b4f8:	68 8c 1b 02 c0       	push   0xc0021b8c
c001b4fd:	50                   	push   eax
c001b4fe:	e8 69 50 ff ff       	call   c001056c <HardDiskController::HardDiskController(char const*)>
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	89 10                	mov    DWORD PTR [eax],edx
c001b511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b515:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b51c:	90                   	nop
c001b51d:	83 c4 0c             	add    esp,0xc
c001b520:	c3                   	ret    
c001b521:	90                   	nop

c001b522 <IDE::prepareInterrupt(unsigned char)>:
c001b522:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b527:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b52b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b533:	c3                   	ret    

c001b534 <selectDrive(unsigned char, unsigned char)>:
c001b534:	c3                   	ret    
c001b535:	90                   	nop

c001b536 <IDE::getBase(unsigned char)>:
c001b536:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b53b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b53f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b547:	c3                   	ret    

c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b548:	55                   	push   ebp
c001b549:	57                   	push   edi
c001b54a:	56                   	push   esi
c001b54b:	53                   	push   ebx
c001b54c:	83 ec 1c             	sub    esp,0x1c
c001b54f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b553:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b557:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b55a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b55e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b562:	80 f9 03             	cmp    cl,0x3
c001b565:	77 51                	ja     c001b5b8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b56b:	0f b6 f2             	movzx  esi,dl
c001b56e:	0f b6 db             	movzx  ebx,bl
c001b571:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b574:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b578:	83 ca 80             	or     edx,0xffffff80
c001b57b:	0f b6 d2             	movzx  edx,dl
c001b57e:	52                   	push   edx
c001b57f:	6a 0c                	push   0xc
c001b581:	56                   	push   esi
c001b582:	57                   	push   edi
c001b583:	e8 c0 ff ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b588:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b58d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b591:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b595:	ee                   	out    dx,al
c001b596:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b59b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b59f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b5a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b5a7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b5af:	83 c4 2c             	add    esp,0x2c
c001b5b2:	5b                   	pop    ebx
c001b5b3:	5e                   	pop    esi
c001b5b4:	5f                   	pop    edi
c001b5b5:	5d                   	pop    ebp
c001b5b6:	eb 90                	jmp    c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5b8:	80 fb 07             	cmp    bl,0x7
c001b5bb:	77 12                	ja     c001b5cf <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b5bd:	0f b6 d2             	movzx  edx,dl
c001b5c0:	0f b6 db             	movzx  ebx,bl
c001b5c3:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b5cb:	89 da                	mov    edx,ebx
c001b5cd:	eb 2f                	jmp    c001b5fe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b5cf:	80 fb 0d             	cmp    bl,0xd
c001b5d2:	77 13                	ja     c001b5e7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b5d4:	0f b6 d2             	movzx  edx,dl
c001b5d7:	0f b6 db             	movzx  ebx,bl
c001b5da:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b5e1:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b5e5:	eb 17                	jmp    c001b5fe <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b5e7:	80 fb 15             	cmp    bl,0x15
c001b5ea:	77 13                	ja     c001b5ff <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b5ec:	0f b6 d2             	movzx  edx,dl
c001b5ef:	0f b6 db             	movzx  ebx,bl
c001b5f2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b5fa:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b5fe:	ee                   	out    dx,al
c001b5ff:	83 c4 1c             	add    esp,0x1c
c001b602:	5b                   	pop    ebx
c001b603:	5e                   	pop    esi
c001b604:	5f                   	pop    edi
c001b605:	5d                   	pop    ebp
c001b606:	c3                   	ret    
c001b607:	90                   	nop

c001b608 <IDE::read(unsigned char, unsigned char)>:
c001b608:	55                   	push   ebp
c001b609:	57                   	push   edi
c001b60a:	56                   	push   esi
c001b60b:	53                   	push   ebx
c001b60c:	83 ec 1c             	sub    esp,0x1c
c001b60f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b613:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b617:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b61a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b61e:	3c 03                	cmp    al,0x3
c001b620:	77 43                	ja     c001b665 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b622:	0f b6 f2             	movzx  esi,dl
c001b625:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b628:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b62c:	83 c8 80             	or     eax,0xffffff80
c001b62f:	0f b6 c0             	movzx  eax,al
c001b632:	50                   	push   eax
c001b633:	6a 0c                	push   0xc
c001b635:	56                   	push   esi
c001b636:	57                   	push   edi
c001b637:	e8 0c ff ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b63c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b641:	0f b6 c3             	movzx  eax,bl
c001b644:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b648:	ec                   	in     al,dx
c001b649:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b64d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b652:	52                   	push   edx
c001b653:	6a 0c                	push   0xc
c001b655:	56                   	push   esi
c001b656:	57                   	push   edi
c001b657:	e8 ec fe ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b65c:	83 c4 20             	add    esp,0x20
c001b65f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b663:	eb 49                	jmp    c001b6ae <IDE::read(unsigned char, unsigned char)+0xa6>
c001b665:	80 fb 07             	cmp    bl,0x7
c001b668:	77 12                	ja     c001b67c <IDE::read(unsigned char, unsigned char)+0x74>
c001b66a:	0f b6 d2             	movzx  edx,dl
c001b66d:	0f b6 c3             	movzx  eax,bl
c001b670:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b678:	89 c2                	mov    edx,eax
c001b67a:	eb 31                	jmp    c001b6ad <IDE::read(unsigned char, unsigned char)+0xa5>
c001b67c:	80 fb 0d             	cmp    bl,0xd
c001b67f:	77 13                	ja     c001b694 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b681:	0f b6 d2             	movzx  edx,dl
c001b684:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b68b:	0f b6 d3             	movzx  edx,bl
c001b68e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b692:	eb 19                	jmp    c001b6ad <IDE::read(unsigned char, unsigned char)+0xa5>
c001b694:	31 c0                	xor    eax,eax
c001b696:	80 fb 15             	cmp    bl,0x15
c001b699:	77 13                	ja     c001b6ae <IDE::read(unsigned char, unsigned char)+0xa6>
c001b69b:	0f b6 d2             	movzx  edx,dl
c001b69e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b6a6:	0f b6 d3             	movzx  edx,bl
c001b6a9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b6ad:	ec                   	in     al,dx
c001b6ae:	83 c4 1c             	add    esp,0x1c
c001b6b1:	5b                   	pop    ebx
c001b6b2:	5e                   	pop    esi
c001b6b3:	5f                   	pop    edi
c001b6b4:	5d                   	pop    ebp
c001b6b5:	c3                   	ret    

c001b6b6 <IDE::waitInterrupt(unsigned char)>:
c001b6b6:	55                   	push   ebp
c001b6b7:	57                   	push   edi
c001b6b8:	56                   	push   esi
c001b6b9:	53                   	push   ebx
c001b6ba:	31 db                	xor    ebx,ebx
c001b6bc:	83 ec 0c             	sub    esp,0xc
c001b6bf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6c3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b6c8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b6d0:	89 e8                	mov    eax,ebp
c001b6d2:	84 c0                	test   al,al
c001b6d4:	75 34                	jne    c001b70a <IDE::waitInterrupt(unsigned char)+0x54>
c001b6d6:	52                   	push   edx
c001b6d7:	6a 0c                	push   0xc
c001b6d9:	56                   	push   esi
c001b6da:	57                   	push   edi
c001b6db:	e8 28 ff ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	a8 01                	test   al,0x1
c001b6e5:	75 2b                	jne    c001b712 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b6e7:	f6 c3 04             	test   bl,0x4
c001b6ea:	75 16                	jne    c001b702 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b6ec:	83 fb 32             	cmp    ebx,0x32
c001b6ef:	7e 11                	jle    c001b702 <IDE::waitInterrupt(unsigned char)+0x4c>
c001b6f1:	50                   	push   eax
c001b6f2:	50                   	push   eax
c001b6f3:	6a 00                	push   0x0
c001b6f5:	68 80 96 98 00       	push   0x989680
c001b6fa:	e8 c6 c5 ff ff       	call   c0017cc5 <nanoSleep(unsigned long long)>
c001b6ff:	83 c4 10             	add    esp,0x10
c001b702:	83 fb 3c             	cmp    ebx,0x3c
c001b705:	74 0b                	je     c001b712 <IDE::waitInterrupt(unsigned char)+0x5c>
c001b707:	43                   	inc    ebx
c001b708:	eb be                	jmp    c001b6c8 <IDE::waitInterrupt(unsigned char)+0x12>
c001b70a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b712:	83 c4 0c             	add    esp,0xc
c001b715:	89 e8                	mov    eax,ebp
c001b717:	5b                   	pop    ebx
c001b718:	5e                   	pop    esi
c001b719:	5f                   	pop    edi
c001b71a:	5d                   	pop    ebp
c001b71b:	c3                   	ret    

c001b71c <ideChannel0IRQHandler(regs*, void*)>:
c001b71c:	83 ec 10             	sub    esp,0x10
c001b71f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b723:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b72a:	6a 07                	push   0x7
c001b72c:	6a 00                	push   0x0
c001b72e:	50                   	push   eax
c001b72f:	e8 d4 fe ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001b734:	83 c4 1c             	add    esp,0x1c
c001b737:	c3                   	ret    

c001b738 <ideChannel1IRQHandler(regs*, void*)>:
c001b738:	83 ec 10             	sub    esp,0x10
c001b73b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b73f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b746:	6a 07                	push   0x7
c001b748:	6a 01                	push   0x1
c001b74a:	50                   	push   eax
c001b74b:	e8 b8 fe ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001b750:	83 c4 1c             	add    esp,0x1c
c001b753:	c3                   	ret    

c001b754 <IDE::enableIRQs(unsigned char, bool)>:
c001b754:	57                   	push   edi
c001b755:	56                   	push   esi
c001b756:	be 04 00 00 00       	mov    esi,0x4
c001b75b:	53                   	push   ebx
c001b75c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b761:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b765:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b76a:	0f 94 c0             	sete   al
c001b76d:	d1 e0                	shl    eax,1
c001b76f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b776:	0f b6 c0             	movzx  eax,al
c001b779:	50                   	push   eax
c001b77a:	6a 0c                	push   0xc
c001b77c:	57                   	push   edi
c001b77d:	53                   	push   ebx
c001b77e:	e8 c5 fd ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b783:	83 c4 10             	add    esp,0x10
c001b786:	50                   	push   eax
c001b787:	6a 0c                	push   0xc
c001b789:	57                   	push   edi
c001b78a:	53                   	push   ebx
c001b78b:	e8 78 fe ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001b790:	83 c4 10             	add    esp,0x10
c001b793:	4e                   	dec    esi
c001b794:	75 f0                	jne    c001b786 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b796:	5b                   	pop    ebx
c001b797:	5e                   	pop    esi
c001b798:	5f                   	pop    edi
c001b799:	c3                   	ret    

c001b79a <IDE::open(int, int, void*)>:
c001b79a:	55                   	push   ebp
c001b79b:	57                   	push   edi
c001b79c:	56                   	push   esi
c001b79d:	53                   	push   ebx
c001b79e:	83 ec 1c             	sub    esp,0x1c
c001b7a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b7a5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b7ae:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b7b7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b7be:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b7c5:	0f 85 b0 02 00 00    	jne    c001ba7b <IDE::open(int, int, void*)+0x2e1>
c001b7cb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b7d1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001b7d5:	83 e0 7f             	and    eax,0x7f
c001b7d8:	3c 05                	cmp    al,0x5
c001b7da:	74 04                	je     c001b7e0 <IDE::open(int, int, void*)+0x46>
c001b7dc:	3c 0f                	cmp    al,0xf
c001b7de:	75 32                	jne    c001b812 <IDE::open(int, int, void*)+0x78>
c001b7e0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b7e6:	83 e0 fc             	and    eax,0xfffffffc
c001b7e9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b7f0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b7f6:	83 e0 fc             	and    eax,0xfffffffc
c001b7f9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b800:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b806:	83 e0 fc             	and    eax,0xfffffffc
c001b809:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b810:	eb 14                	jmp    c001b826 <IDE::open(int, int, void*)+0x8c>
c001b812:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b81c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b826:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b82d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b834:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b838:	89 c6                	mov    esi,eax
c001b83a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b83f:	c1 e6 10             	shl    esi,0x10
c001b842:	89 e8                	mov    eax,ebp
c001b844:	89 fa                	mov    edx,edi
c001b846:	c1 e0 0b             	shl    eax,0xb
c001b849:	09 f0                	or     eax,esi
c001b84b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b852:	c1 e6 08             	shl    esi,0x8
c001b855:	09 c6                	or     esi,eax
c001b857:	89 f0                	mov    eax,esi
c001b859:	0d 08 00 00 80       	or     eax,0x80000008
c001b85e:	ef                   	out    dx,eax
c001b85f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b864:	89 ca                	mov    edx,ecx
c001b866:	ed                   	in     eax,dx
c001b867:	c1 e8 10             	shr    eax,0x10
c001b86a:	3d ff ff 00 00       	cmp    eax,0xffff
c001b86f:	0f 84 f5 00 00 00    	je     c001b96a <IDE::open(int, int, void*)+0x1d0>
c001b875:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b87b:	89 fa                	mov    edx,edi
c001b87d:	89 f0                	mov    eax,esi
c001b87f:	ef                   	out    dx,eax
c001b880:	b0 fe                	mov    al,0xfe
c001b882:	89 ca                	mov    edx,ecx
c001b884:	ee                   	out    dx,al
c001b885:	89 f0                	mov    eax,esi
c001b887:	89 fa                	mov    edx,edi
c001b889:	ef                   	out    dx,eax
c001b88a:	89 ca                	mov    edx,ecx
c001b88c:	ed                   	in     eax,dx
c001b88d:	3c fe                	cmp    al,0xfe
c001b88f:	0f 85 a9 00 00 00    	jne    c001b93e <IDE::open(int, int, void*)+0x1a4>
c001b895:	8b 15 e8 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022de8
c001b89b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001b8a2:	74 33                	je     c001b8d7 <IDE::open(int, int, void*)+0x13d>
c001b8a4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b8aa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b8ae:	40                   	inc    eax
c001b8af:	83 ec 0c             	sub    esp,0xc
c001b8b2:	0f b6 c0             	movzx  eax,al
c001b8b5:	50                   	push   eax
c001b8b6:	55                   	push   ebp
c001b8b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8bb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001b8c1:	51                   	push   ecx
c001b8c2:	e8 bb 79 ff ff       	call   c0013282 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b8c7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b8cc:	83 c4 1c             	add    esp,0x1c
c001b8cf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b8d5:	eb 0a                	jmp    c001b8e1 <IDE::open(int, int, void*)+0x147>
c001b8d7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b8e1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b8e8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b8ef:	c1 e1 10             	shl    ecx,0x10
c001b8f2:	c1 e0 08             	shl    eax,0x8
c001b8f5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b8fa:	09 c1                	or     ecx,eax
c001b8fc:	89 fa                	mov    edx,edi
c001b8fe:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b905:	c1 e0 0b             	shl    eax,0xb
c001b908:	09 c1                	or     ecx,eax
c001b90a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b910:	89 c8                	mov    eax,ecx
c001b912:	ef                   	out    dx,eax
c001b913:	be fc 0c 00 00       	mov    esi,0xcfc
c001b918:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b91e:	89 f2                	mov    edx,esi
c001b920:	ee                   	out    dx,al
c001b921:	89 c8                	mov    eax,ecx
c001b923:	89 fa                	mov    edx,edi
c001b925:	ef                   	out    dx,eax
c001b926:	89 f2                	mov    edx,esi
c001b928:	ed                   	in     eax,dx
c001b929:	0f b6 c0             	movzx  eax,al
c001b92c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b932:	74 46                	je     c001b97a <IDE::open(int, int, void*)+0x1e0>
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	68 a4 1b 02 c0       	push   0xc0021ba4
c001b93c:	eb 34                	jmp    c001b972 <IDE::open(int, int, void*)+0x1d8>
c001b93e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b947:	75 17                	jne    c001b960 <IDE::open(int, int, void*)+0x1c6>
c001b949:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001b94e:	74 07                	je     c001b957 <IDE::open(int, int, void*)+0x1bd>
c001b950:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001b955:	75 09                	jne    c001b960 <IDE::open(int, int, void*)+0x1c6>
c001b957:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b95e:	eb 1a                	jmp    c001b97a <IDE::open(int, int, void*)+0x1e0>
c001b960:	83 ec 0c             	sub    esp,0xc
c001b963:	68 ac 1b 02 c0       	push   0xc0021bac
c001b968:	eb 08                	jmp    c001b972 <IDE::open(int, int, void*)+0x1d8>
c001b96a:	83 ec 0c             	sub    esp,0xc
c001b96d:	68 dd 1b 02 c0       	push   0xc0021bdd
c001b972:	e8 d1 8f ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001b977:	83 c4 10             	add    esp,0x10
c001b97a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001b981:	79 1a                	jns    c001b99d <IDE::open(int, int, void*)+0x203>
c001b983:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b989:	83 e0 fc             	and    eax,0xfffffffc
c001b98c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b993:	83 c0 08             	add    eax,0x8
c001b996:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b99d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b9a3:	89 c2                	mov    edx,eax
c001b9a5:	83 e2 0f             	and    edx,0xf
c001b9a8:	66 83 fa 08          	cmp    dx,0x8
c001b9ac:	75 0a                	jne    c001b9b8 <IDE::open(int, int, void*)+0x21e>
c001b9ae:	83 e8 02             	sub    eax,0x2
c001b9b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b9b8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b9be:	89 c2                	mov    edx,eax
c001b9c0:	83 e2 0f             	and    edx,0xf
c001b9c3:	66 83 fa 08          	cmp    dx,0x8
c001b9c7:	75 0a                	jne    c001b9d3 <IDE::open(int, int, void*)+0x239>
c001b9c9:	83 e8 02             	sub    eax,0x2
c001b9cc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b9d3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b9da:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b9e1:	89 d0                	mov    eax,edx
c001b9e3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b9e6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b9ea:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b9ee:	8d 4a 01             	lea    ecx,[edx+0x1]
c001b9f1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b9f6:	0f b6 c9             	movzx  ecx,cl
c001b9f9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ba00:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ba03:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ba07:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ba0b:	8d 50 02             	lea    edx,[eax+0x2]
c001ba0e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ba13:	0f b6 d2             	movzx  edx,dl
c001ba16:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ba1c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ba1f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ba23:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ba27:	8d 48 03             	lea    ecx,[eax+0x3]
c001ba2a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ba2f:	0f b6 c9             	movzx  ecx,cl
c001ba32:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ba38:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ba3b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ba3f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ba43:	8d 50 04             	lea    edx,[eax+0x4]
c001ba46:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ba4c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ba51:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ba58:	66 85 f6             	test   si,si
c001ba5b:	74 3e                	je     c001ba9b <IDE::open(int, int, void*)+0x301>
c001ba5d:	0f b6 d2             	movzx  edx,dl
c001ba60:	83 c0 05             	add    eax,0x5
c001ba63:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ba66:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ba6a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ba6e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ba74:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ba79:	eb 20                	jmp    c001ba9b <IDE::open(int, int, void*)+0x301>
c001ba7b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba85:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba8f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ba96:	e9 02 ff ff ff       	jmp    c001b99d <IDE::open(int, int, void*)+0x203>
c001ba9b:	52                   	push   edx
c001ba9c:	52                   	push   edx
c001ba9d:	6a 00                	push   0x0
c001ba9f:	53                   	push   ebx
c001baa0:	e8 7d fa ff ff       	call   c001b522 <IDE::prepareInterrupt(unsigned char)>
c001baa5:	59                   	pop    ecx
c001baa6:	5e                   	pop    esi
c001baa7:	6a 01                	push   0x1
c001baa9:	53                   	push   ebx
c001baaa:	e8 73 fa ff ff       	call   c001b522 <IDE::prepareInterrupt(unsigned char)>
c001baaf:	83 c4 0c             	add    esp,0xc
c001bab2:	6a 00                	push   0x0
c001bab4:	6a 00                	push   0x0
c001bab6:	53                   	push   ebx
c001bab7:	e8 98 fc ff ff       	call   c001b754 <IDE::enableIRQs(unsigned char, bool)>
c001babc:	83 c4 0c             	add    esp,0xc
c001babf:	6a 00                	push   0x0
c001bac1:	6a 01                	push   0x1
c001bac3:	53                   	push   ebx
c001bac4:	e8 8b fc ff ff       	call   c001b754 <IDE::enableIRQs(unsigned char, bool)>
c001bac9:	83 c4 10             	add    esp,0x10
c001bacc:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bad3:	74 40                	je     c001bb15 <IDE::open(int, int, void*)+0x37b>
c001bad5:	83 ec 0c             	sub    esp,0xc
c001bad8:	68 07 1c 02 c0       	push   0xc0021c07
c001badd:	e8 fd 32 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001bae2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bae5:	6a 01                	push   0x1
c001bae7:	68 1c b7 01 c0       	push   0xc001b71c
c001baec:	6a 0e                	push   0xe
c001baee:	53                   	push   ebx
c001baef:	e8 4a 46 ff ff       	call   c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001baf4:	83 c4 14             	add    esp,0x14
c001baf7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bafd:	53                   	push   ebx
c001bafe:	6a 01                	push   0x1
c001bb00:	68 38 b7 01 c0       	push   0xc001b738
c001bb05:	6a 0f                	push   0xf
c001bb07:	53                   	push   ebx
c001bb08:	e8 31 46 ff ff       	call   c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb0d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bb13:	eb 4a                	jmp    c001bb5f <IDE::open(int, int, void*)+0x3c5>
c001bb15:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bb1f:	50                   	push   eax
c001bb20:	6a 0f                	push   0xf
c001bb22:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bb28:	68 23 1c 02 c0       	push   0xc0021c23
c001bb2d:	e8 ad 32 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001bb32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb35:	6a 00                	push   0x0
c001bb37:	68 1c b7 01 c0       	push   0xc001b71c
c001bb3c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bb42:	53                   	push   ebx
c001bb43:	e8 f6 45 ff ff       	call   c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb48:	83 c4 14             	add    esp,0x14
c001bb4b:	53                   	push   ebx
c001bb4c:	6a 00                	push   0x0
c001bb4e:	68 38 b7 01 c0       	push   0xc001b738
c001bb53:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bb59:	53                   	push   ebx
c001bb5a:	e8 df 45 ff ff       	call   c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb61:	83 c4 20             	add    esp,0x20
c001bb64:	83 ec 0c             	sub    esp,0xc
c001bb67:	53                   	push   ebx
c001bb68:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bb6b:	83 c4 0c             	add    esp,0xc
c001bb6e:	6a 07                	push   0x7
c001bb70:	6a 00                	push   0x0
c001bb72:	53                   	push   ebx
c001bb73:	e8 90 fa ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bb78:	83 c4 0c             	add    esp,0xc
c001bb7b:	6a 07                	push   0x7
c001bb7d:	6a 01                	push   0x1
c001bb7f:	53                   	push   ebx
c001bb80:	e8 83 fa ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bb85:	83 c4 0c             	add    esp,0xc
c001bb88:	6a 01                	push   0x1
c001bb8a:	6a 00                	push   0x0
c001bb8c:	53                   	push   ebx
c001bb8d:	e8 c2 fb ff ff       	call   c001b754 <IDE::enableIRQs(unsigned char, bool)>
c001bb92:	83 c4 0c             	add    esp,0xc
c001bb95:	6a 01                	push   0x1
c001bb97:	6a 01                	push   0x1
c001bb99:	53                   	push   ebx
c001bb9a:	e8 b5 fb ff ff       	call   c001b754 <IDE::enableIRQs(unsigned char, bool)>
c001bb9f:	83 c4 2c             	add    esp,0x2c
c001bba2:	31 c0                	xor    eax,eax
c001bba4:	5b                   	pop    ebx
c001bba5:	5e                   	pop    esi
c001bba6:	5f                   	pop    edi
c001bba7:	5d                   	pop    ebp
c001bba8:	c3                   	ret    
c001bba9:	90                   	nop

c001bbaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bbaa:	55                   	push   ebp
c001bbab:	57                   	push   edi
c001bbac:	56                   	push   esi
c001bbad:	53                   	push   ebx
c001bbae:	83 ec 1c             	sub    esp,0x1c
c001bbb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bbb9:	8d 50 f8             	lea    edx,[eax-0x8]
c001bbbc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bbc0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bbc4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bbc8:	80 fa 03             	cmp    dl,0x3
c001bbcb:	77 5d                	ja     c001bc2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001bbcd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bbd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbd5:	0f b6 db             	movzx  ebx,bl
c001bbd8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bbdb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001bbdf:	83 ca 80             	or     edx,0xffffff80
c001bbe2:	0f b6 d2             	movzx  edx,dl
c001bbe5:	52                   	push   edx
c001bbe6:	6a 0c                	push   0xc
c001bbe8:	53                   	push   ebx
c001bbe9:	56                   	push   esi
c001bbea:	e8 59 f9 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbef:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bbf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbf8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bbfc:	0f b6 c0             	movzx  eax,al
c001bbff:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001bc03:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bc05:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bc0a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bc0e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bc12:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc16:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc1e:	83 c4 2c             	add    esp,0x2c
c001bc21:	5b                   	pop    ebx
c001bc22:	5e                   	pop    esi
c001bc23:	5f                   	pop    edi
c001bc24:	5d                   	pop    ebp
c001bc25:	e9 1e f9 ff ff       	jmp    c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc2a:	3c 07                	cmp    al,0x7
c001bc2c:	77 10                	ja     c001bc3e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bc2e:	0f b6 db             	movzx  ebx,bl
c001bc31:	0f b6 d0             	movzx  edx,al
c001bc34:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bc3c:	eb 2d                	jmp    c001bc6b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bc3e:	3c 0d                	cmp    al,0xd
c001bc40:	77 13                	ja     c001bc55 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bc42:	0f b6 db             	movzx  ebx,bl
c001bc45:	0f b6 c0             	movzx  eax,al
c001bc48:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bc4f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bc53:	eb 16                	jmp    c001bc6b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bc55:	3c 15                	cmp    al,0x15
c001bc57:	77 14                	ja     c001bc6d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bc59:	0f b6 db             	movzx  ebx,bl
c001bc5c:	0f b6 c0             	movzx  eax,al
c001bc5f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bc67:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bc6b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bc6d:	83 c4 1c             	add    esp,0x1c
c001bc70:	5b                   	pop    ebx
c001bc71:	5e                   	pop    esi
c001bc72:	5f                   	pop    edi
c001bc73:	5d                   	pop    ebp
c001bc74:	c3                   	ret    
c001bc75:	90                   	nop

c001bc76 <IDE::detect()>:
c001bc76:	55                   	push   ebp
c001bc77:	57                   	push   edi
c001bc78:	56                   	push   esi
c001bc79:	53                   	push   ebx
c001bc7a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bc80:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bc87:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bc8e:	0f 85 be 02 00 00    	jne    c001bf52 <IDE::detect()+0x2dc>
c001bc94:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bc9b:	31 f6                	xor    esi,esi
c001bc9d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bca5:	31 ed                	xor    ebp,ebp
c001bca7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcab:	c1 e0 06             	shl    eax,0x6
c001bcae:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bcb6:	89 e8                	mov    eax,ebp
c001bcb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bcbc:	c1 e0 04             	shl    eax,0x4
c001bcbf:	83 c8 a0             	or     eax,0xffffffa0
c001bcc2:	0f b6 c0             	movzx  eax,al
c001bcc5:	50                   	push   eax
c001bcc6:	6a 06                	push   0x6
c001bcc8:	56                   	push   esi
c001bcc9:	53                   	push   ebx
c001bcca:	e8 79 f8 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bccf:	83 c4 0c             	add    esp,0xc
c001bcd2:	6a 0c                	push   0xc
c001bcd4:	56                   	push   esi
c001bcd5:	53                   	push   ebx
c001bcd6:	e8 2d f9 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bcdb:	83 c4 0c             	add    esp,0xc
c001bcde:	6a 0c                	push   0xc
c001bce0:	56                   	push   esi
c001bce1:	53                   	push   ebx
c001bce2:	e8 21 f9 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bce7:	83 c4 0c             	add    esp,0xc
c001bcea:	6a 0c                	push   0xc
c001bcec:	56                   	push   esi
c001bced:	53                   	push   ebx
c001bcee:	e8 15 f9 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bcf3:	83 c4 0c             	add    esp,0xc
c001bcf6:	6a 0c                	push   0xc
c001bcf8:	56                   	push   esi
c001bcf9:	53                   	push   ebx
c001bcfa:	e8 09 f9 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bcff:	68 ec 00 00 00       	push   0xec
c001bd04:	6a 07                	push   0x7
c001bd06:	56                   	push   esi
c001bd07:	53                   	push   ebx
c001bd08:	e8 3b f8 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd0d:	83 c4 1c             	add    esp,0x1c
c001bd10:	6a 0c                	push   0xc
c001bd12:	56                   	push   esi
c001bd13:	53                   	push   ebx
c001bd14:	e8 ef f8 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bd19:	83 c4 0c             	add    esp,0xc
c001bd1c:	6a 0c                	push   0xc
c001bd1e:	56                   	push   esi
c001bd1f:	53                   	push   ebx
c001bd20:	e8 e3 f8 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bd25:	83 c4 0c             	add    esp,0xc
c001bd28:	6a 0c                	push   0xc
c001bd2a:	56                   	push   esi
c001bd2b:	53                   	push   ebx
c001bd2c:	e8 d7 f8 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bd31:	83 c4 0c             	add    esp,0xc
c001bd34:	6a 0c                	push   0xc
c001bd36:	56                   	push   esi
c001bd37:	53                   	push   ebx
c001bd38:	e8 cb f8 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bd3d:	83 c4 0c             	add    esp,0xc
c001bd40:	6a 0c                	push   0xc
c001bd42:	56                   	push   esi
c001bd43:	53                   	push   ebx
c001bd44:	e8 bf f8 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bd49:	83 c4 10             	add    esp,0x10
c001bd4c:	84 c0                	test   al,al
c001bd4e:	0f 84 8b 01 00 00    	je     c001bedf <IDE::detect()+0x269>
c001bd54:	31 ff                	xor    edi,edi
c001bd56:	50                   	push   eax
c001bd57:	6a 0c                	push   0xc
c001bd59:	56                   	push   esi
c001bd5a:	53                   	push   ebx
c001bd5b:	e8 a8 f8 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bd60:	83 c4 10             	add    esp,0x10
c001bd63:	a8 01                	test   al,0x1
c001bd65:	0f 85 8e 01 00 00    	jne    c001bef9 <IDE::detect()+0x283>
c001bd6b:	84 c0                	test   al,al
c001bd6d:	78 04                	js     c001bd73 <IDE::detect()+0xfd>
c001bd6f:	a8 08                	test   al,0x8
c001bd71:	75 27                	jne    c001bd9a <IDE::detect()+0x124>
c001bd73:	47                   	inc    edi
c001bd74:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bd7a:	7e da                	jle    c001bd56 <IDE::detect()+0xe0>
c001bd7c:	50                   	push   eax
c001bd7d:	50                   	push   eax
c001bd7e:	6a 00                	push   0x0
c001bd80:	68 40 4b 4c 00       	push   0x4c4b40
c001bd85:	e8 3b bf ff ff       	call   c0017cc5 <nanoSleep(unsigned long long)>
c001bd8a:	83 c4 10             	add    esp,0x10
c001bd8d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bd93:	75 c1                	jne    c001bd56 <IDE::detect()+0xe0>
c001bd95:	e9 5f 01 00 00       	jmp    c001bef9 <IDE::detect()+0x283>
c001bd9a:	31 c9                	xor    ecx,ecx
c001bd9c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bda0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bda4:	83 ec 0c             	sub    esp,0xc
c001bda7:	68 80 00 00 00       	push   0x80
c001bdac:	57                   	push   edi
c001bdad:	6a 00                	push   0x0
c001bdaf:	56                   	push   esi
c001bdb0:	53                   	push   ebx
c001bdb1:	e8 f4 fd ff ff       	call   c001bbaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bdb6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bdbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdbf:	89 d1                	mov    ecx,edx
c001bdc1:	c1 e0 06             	shl    eax,0x6
c001bdc4:	01 d8                	add    eax,ebx
c001bdc6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bdcd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bdd4:	89 f2                	mov    edx,esi
c001bdd6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001bddc:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001bde0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001bde6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bdea:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001bdf1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001bdf9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001be00:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001be08:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001be0e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001be15:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001be1b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001be1f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001be23:	83 c4 20             	add    esp,0x20
c001be26:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001be29:	83 c0 02             	add    eax,0x2
c001be2c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001be32:	83 c7 02             	add    edi,0x2
c001be35:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001be38:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001be3e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001be42:	75 e2                	jne    c001be26 <IDE::detect()+0x1b0>
c001be44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be48:	c1 e0 06             	shl    eax,0x6
c001be4b:	01 d8                	add    eax,ebx
c001be4d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001be53:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001be5a:	66 c1 ea 09          	shr    dx,0x9
c001be5e:	83 e2 01             	and    edx,0x1
c001be61:	84 c9                	test   cl,cl
c001be63:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001be69:	75 2f                	jne    c001be9a <IDE::detect()+0x224>
c001be6b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001be71:	85 c0                	test   eax,eax
c001be73:	74 66                	je     c001bedb <IDE::detect()+0x265>
c001be75:	50                   	push   eax
c001be76:	55                   	push   ebp
c001be77:	56                   	push   esi
c001be78:	68 3f 1c 02 c0       	push   0xc0021c3f
c001be7d:	e8 5d 2f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001be82:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001be89:	e8 62 2e ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001be8e:	89 c7                	mov    edi,eax
c001be90:	89 04 24             	mov    DWORD PTR [esp],eax
c001be93:	e8 e8 02 00 00       	call   c001c180 <ATA::ATA()>
c001be98:	eb 28                	jmp    c001bec2 <IDE::detect()+0x24c>
c001be9a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001bea0:	55                   	push   ebp
c001bea1:	56                   	push   esi
c001bea2:	68 6e 1c 02 c0       	push   0xc0021c6e
c001bea7:	e8 33 2f ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001beac:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001beb3:	e8 38 2e ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001beb8:	89 c7                	mov    edi,eax
c001beba:	89 04 24             	mov    DWORD PTR [esp],eax
c001bebd:	e8 ee 08 00 00       	call   c001c7b0 <ATAPI::ATAPI()>
c001bec2:	5a                   	pop    edx
c001bec3:	59                   	pop    ecx
c001bec4:	57                   	push   edi
c001bec5:	53                   	push   ebx
c001bec6:	e8 1f 43 ff ff       	call   c00101ea <Device::addChild(Device*)>
c001becb:	8b 07                	mov    eax,DWORD PTR [edi]
c001becd:	53                   	push   ebx
c001bece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bed2:	6a 00                	push   0x0
c001bed4:	57                   	push   edi
c001bed5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bed8:	83 c4 20             	add    esp,0x20
c001bedb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001bedf:	4d                   	dec    ebp
c001bee0:	74 0a                	je     c001beec <IDE::detect()+0x276>
c001bee2:	bd 01 00 00 00       	mov    ebp,0x1
c001bee7:	e9 bb fd ff ff       	jmp    c001bca7 <IDE::detect()+0x31>
c001beec:	4e                   	dec    esi
c001beed:	74 63                	je     c001bf52 <IDE::detect()+0x2dc>
c001beef:	be 01 00 00 00       	mov    esi,0x1
c001bef4:	e9 ac fd ff ff       	jmp    c001bca5 <IDE::detect()+0x2f>
c001bef9:	50                   	push   eax
c001befa:	6a 04                	push   0x4
c001befc:	56                   	push   esi
c001befd:	53                   	push   ebx
c001befe:	e8 05 f7 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bf03:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf07:	83 c4 0c             	add    esp,0xc
c001bf0a:	6a 05                	push   0x5
c001bf0c:	56                   	push   esi
c001bf0d:	53                   	push   ebx
c001bf0e:	e8 f5 f6 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bf13:	83 c4 10             	add    esp,0x10
c001bf16:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bf1a:	80 fa 14             	cmp    dl,0x14
c001bf1d:	75 04                	jne    c001bf23 <IDE::detect()+0x2ad>
c001bf1f:	3c eb                	cmp    al,0xeb
c001bf21:	eb 07                	jmp    c001bf2a <IDE::detect()+0x2b4>
c001bf23:	3c 96                	cmp    al,0x96
c001bf25:	75 b8                	jne    c001bedf <IDE::detect()+0x269>
c001bf27:	80 fa 69             	cmp    dl,0x69
c001bf2a:	75 b3                	jne    c001bedf <IDE::detect()+0x269>
c001bf2c:	68 a1 00 00 00       	push   0xa1
c001bf31:	6a 07                	push   0x7
c001bf33:	56                   	push   esi
c001bf34:	53                   	push   ebx
c001bf35:	e8 0e f6 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf3a:	5f                   	pop    edi
c001bf3b:	58                   	pop    eax
c001bf3c:	6a 00                	push   0x0
c001bf3e:	68 40 42 0f 00       	push   0xf4240
c001bf43:	e8 7d bd ff ff       	call   c0017cc5 <nanoSleep(unsigned long long)>
c001bf48:	83 c4 10             	add    esp,0x10
c001bf4b:	b1 01                	mov    cl,0x1
c001bf4d:	e9 4a fe ff ff       	jmp    c001bd9c <IDE::detect()+0x126>
c001bf52:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bf58:	5b                   	pop    ebx
c001bf59:	5e                   	pop    esi
c001bf5a:	5f                   	pop    edi
c001bf5b:	5d                   	pop    ebp
c001bf5c:	c3                   	ret    
c001bf5d:	90                   	nop

c001bf5e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001bf5e:	55                   	push   ebp
c001bf5f:	57                   	push   edi
c001bf60:	56                   	push   esi
c001bf61:	53                   	push   ebx
c001bf62:	83 ec 1c             	sub    esp,0x1c
c001bf65:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bf69:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bf6d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bf71:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001bf75:	88 c3                	mov    bl,al
c001bf77:	84 c0                	test   al,al
c001bf79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf7d:	0f 84 67 01 00 00    	je     c001c0ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001bf83:	83 ec 0c             	sub    esp,0xc
c001bf86:	68 9f 1c 02 c0       	push   0xc0021c9f
c001bf8b:	e8 4f 2e ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001bf90:	83 c4 10             	add    esp,0x10
c001bf93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf97:	3c 01                	cmp    al,0x1
c001bf99:	75 17                	jne    c001bfb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001bf9b:	83 ec 0c             	sub    esp,0xc
c001bf9e:	b3 13                	mov    bl,0x13
c001bfa0:	68 ab 1c 02 c0       	push   0xc0021cab
c001bfa5:	e8 35 2e ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001bfaa:	83 c4 10             	add    esp,0x10
c001bfad:	e9 25 01 00 00       	jmp    c001c0d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bfb2:	3c 02                	cmp    al,0x2
c001bfb4:	0f 85 ef 00 00 00    	jne    c001c0a9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001bfba:	d1 e6                	shl    esi,1
c001bfbc:	09 ee                	or     esi,ebp
c001bfbe:	52                   	push   edx
c001bfbf:	89 f0                	mov    eax,esi
c001bfc1:	6a 01                	push   0x1
c001bfc3:	0f b6 f0             	movzx  esi,al
c001bfc6:	c1 e6 06             	shl    esi,0x6
c001bfc9:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001bfd1:	50                   	push   eax
c001bfd2:	57                   	push   edi
c001bfd3:	e8 30 f6 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001bfd8:	83 c4 10             	add    esp,0x10
c001bfdb:	89 c6                	mov    esi,eax
c001bfdd:	a8 01                	test   al,0x1
c001bfdf:	74 12                	je     c001bff3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001bfe1:	83 ec 0c             	sub    esp,0xc
c001bfe4:	b3 07                	mov    bl,0x7
c001bfe6:	68 c0 1c 02 c0       	push   0xc0021cc0
c001bfeb:	e8 ef 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001bff0:	83 c4 10             	add    esp,0x10
c001bff3:	f7 c6 02 00 00 00    	test   esi,0x2
c001bff9:	74 12                	je     c001c00d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001bffb:	83 ec 0c             	sub    esp,0xc
c001bffe:	b3 03                	mov    bl,0x3
c001c000:	68 de 1c 02 c0       	push   0xc0021cde
c001c005:	e8 d5 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	f7 c6 04 00 00 00    	test   esi,0x4
c001c013:	74 12                	je     c001c027 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c015:	83 ec 0c             	sub    esp,0xc
c001c018:	b3 14                	mov    bl,0x14
c001c01a:	68 fe 1c 02 c0       	push   0xc0021cfe
c001c01f:	e8 bb 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c024:	83 c4 10             	add    esp,0x10
c001c027:	f7 c6 08 00 00 00    	test   esi,0x8
c001c02d:	74 12                	je     c001c041 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c02f:	83 ec 0c             	sub    esp,0xc
c001c032:	b3 03                	mov    bl,0x3
c001c034:	68 de 1c 02 c0       	push   0xc0021cde
c001c039:	e8 a1 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c03e:	83 c4 10             	add    esp,0x10
c001c041:	f7 c6 10 00 00 00    	test   esi,0x10
c001c047:	74 12                	je     c001c05b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c049:	83 ec 0c             	sub    esp,0xc
c001c04c:	b3 15                	mov    bl,0x15
c001c04e:	68 16 1d 02 c0       	push   0xc0021d16
c001c053:	e8 87 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c058:	83 c4 10             	add    esp,0x10
c001c05b:	f7 c6 20 00 00 00    	test   esi,0x20
c001c061:	74 12                	je     c001c075 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c063:	83 ec 0c             	sub    esp,0xc
c001c066:	b3 03                	mov    bl,0x3
c001c068:	68 de 1c 02 c0       	push   0xc0021cde
c001c06d:	e8 6d 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	f7 c6 40 00 00 00    	test   esi,0x40
c001c07b:	74 12                	je     c001c08f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c07d:	83 ec 0c             	sub    esp,0xc
c001c080:	b3 16                	mov    bl,0x16
c001c082:	68 30 1d 02 c0       	push   0xc0021d30
c001c087:	e8 53 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c08c:	83 c4 10             	add    esp,0x10
c001c08f:	89 f0                	mov    eax,esi
c001c091:	84 c0                	test   al,al
c001c093:	79 42                	jns    c001c0d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c095:	83 ec 0c             	sub    esp,0xc
c001c098:	b3 0d                	mov    bl,0xd
c001c09a:	68 51 1d 02 c0       	push   0xc0021d51
c001c09f:	e8 3b 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c0a4:	83 c4 10             	add    esp,0x10
c001c0a7:	eb 2e                	jmp    c001c0d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0a9:	3c 03                	cmp    al,0x3
c001c0ab:	75 14                	jne    c001c0c1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c0ad:	83 ec 0c             	sub    esp,0xc
c001c0b0:	b3 17                	mov    bl,0x17
c001c0b2:	68 65 1d 02 c0       	push   0xc0021d65
c001c0b7:	e8 23 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c0bc:	83 c4 10             	add    esp,0x10
c001c0bf:	eb 16                	jmp    c001c0d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0c1:	3c 04                	cmp    al,0x4
c001c0c3:	75 12                	jne    c001c0d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0c5:	83 ec 0c             	sub    esp,0xc
c001c0c8:	b3 08                	mov    bl,0x8
c001c0ca:	68 7b 1d 02 c0       	push   0xc0021d7b
c001c0cf:	e8 0b 2d ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	50                   	push   eax
c001c0d8:	50                   	push   eax
c001c0d9:	0f b6 c3             	movzx  eax,bl
c001c0dc:	50                   	push   eax
c001c0dd:	68 93 1d 02 c0       	push   0xc0021d93
c001c0e2:	e8 f8 2c ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	83 c4 1c             	add    esp,0x1c
c001c0ed:	88 d8                	mov    al,bl
c001c0ef:	5b                   	pop    ebx
c001c0f0:	5e                   	pop    esi
c001c0f1:	5f                   	pop    edi
c001c0f2:	5d                   	pop    ebp
c001c0f3:	c3                   	ret    

c001c0f4 <IDE::polling(unsigned char, unsigned int)>:
c001c0f4:	57                   	push   edi
c001c0f5:	56                   	push   esi
c001c0f6:	53                   	push   ebx
c001c0f7:	bb 04 00 00 00       	mov    ebx,0x4
c001c0fc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c100:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c105:	52                   	push   edx
c001c106:	6a 0c                	push   0xc
c001c108:	56                   	push   esi
c001c109:	57                   	push   edi
c001c10a:	e8 f9 f4 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001c10f:	83 c4 10             	add    esp,0x10
c001c112:	4b                   	dec    ebx
c001c113:	75 f0                	jne    c001c105 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c115:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c11a:	50                   	push   eax
c001c11b:	6a 0c                	push   0xc
c001c11d:	56                   	push   esi
c001c11e:	57                   	push   edi
c001c11f:	e8 e4 f4 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001c124:	83 c4 10             	add    esp,0x10
c001c127:	a8 01                	test   al,0x1
c001c129:	74 12                	je     c001c13d <IDE::polling(unsigned char, unsigned int)+0x49>
c001c12b:	83 ec 0c             	sub    esp,0xc
c001c12e:	68 ad 1d 02 c0       	push   0xc0021dad
c001c133:	e8 a7 2c ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001c138:	83 c4 10             	add    esp,0x10
c001c13b:	eb 17                	jmp    c001c154 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c13d:	a8 20                	test   al,0x20
c001c13f:	75 0f                	jne    c001c150 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c141:	4b                   	dec    ebx
c001c142:	74 10                	je     c001c154 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c144:	84 c0                	test   al,al
c001c146:	78 d2                	js     c001c11a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c148:	a8 08                	test   al,0x8
c001c14a:	74 ce                	je     c001c11a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c14c:	31 c0                	xor    eax,eax
c001c14e:	eb 06                	jmp    c001c156 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c150:	b0 01                	mov    al,0x1
c001c152:	eb 02                	jmp    c001c156 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c154:	b0 02                	mov    al,0x2
c001c156:	5b                   	pop    ebx
c001c157:	5e                   	pop    esi
c001c158:	5f                   	pop    edi
c001c159:	c3                   	ret    

c001c15a <ATA::close(int, int, void*)>:
c001c15a:	83 ec 0c             	sub    esp,0xc
c001c15d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c161:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c167:	85 c0                	test   eax,eax
c001c169:	74 0c                	je     c001c177 <ATA::close(int, int, void*)+0x1d>
c001c16b:	83 ec 0c             	sub    esp,0xc
c001c16e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c170:	50                   	push   eax
c001c171:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c174:	83 c4 10             	add    esp,0x10
c001c177:	31 c0                	xor    eax,eax
c001c179:	83 c4 0c             	add    esp,0xc
c001c17c:	c3                   	ret    
c001c17d:	90                   	nop

c001c17e <ATA::powerSaving(PowerSavingLevel)>:
c001c17e:	c3                   	ret    
c001c17f:	90                   	nop

c001c180 <ATA::ATA()>:
c001c180:	83 ec 0c             	sub    esp,0xc
c001c183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c187:	83 ec 04             	sub    esp,0x4
c001c18a:	68 00 02 00 00       	push   0x200
c001c18f:	68 f0 1d 02 c0       	push   0xc0021df0
c001c194:	50                   	push   eax
c001c195:	e8 56 44 ff ff       	call   c00105f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c19a:	83 c4 10             	add    esp,0x10
c001c19d:	ba 1c 1e 02 c0       	mov    edx,0xc0021e1c
c001c1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a6:	89 10                	mov    DWORD PTR [eax],edx
c001c1a8:	90                   	nop
c001c1a9:	83 c4 0c             	add    esp,0xc
c001c1ac:	c3                   	ret    
c001c1ad:	90                   	nop

c001c1ae <ATA::flush(bool)>:
c001c1ae:	53                   	push   ebx
c001c1af:	83 ec 08             	sub    esp,0x8
c001c1b2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c1b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1bb:	19 c0                	sbb    eax,eax
c001c1bd:	83 e0 fd             	and    eax,0xfffffffd
c001c1c0:	05 ea 00 00 00       	add    eax,0xea
c001c1c5:	50                   	push   eax
c001c1c6:	6a 07                	push   0x7
c001c1c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1cf:	50                   	push   eax
c001c1d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1d6:	e8 6d f3 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1db:	83 c4 0c             	add    esp,0xc
c001c1de:	6a 00                	push   0x0
c001c1e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1e7:	50                   	push   eax
c001c1e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1ee:	e8 01 ff ff ff       	call   c001c0f4 <IDE::polling(unsigned char, unsigned int)>
c001c1f3:	83 c4 18             	add    esp,0x18
c001c1f6:	5b                   	pop    ebx
c001c1f7:	c3                   	ret    

c001c1f8 <ATA::readyForCommand()>:
c001c1f8:	56                   	push   esi
c001c1f9:	53                   	push   ebx
c001c1fa:	31 db                	xor    ebx,ebx
c001c1fc:	50                   	push   eax
c001c1fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c201:	50                   	push   eax
c001c202:	6a 0c                	push   0xc
c001c204:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c20b:	50                   	push   eax
c001c20c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c212:	e8 f1 f3 ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001c217:	83 c4 10             	add    esp,0x10
c001c21a:	a8 88                	test   al,0x88
c001c21c:	74 23                	je     c001c241 <ATA::readyForCommand()+0x49>
c001c21e:	43                   	inc    ebx
c001c21f:	83 fb 63             	cmp    ebx,0x63
c001c222:	7e dd                	jle    c001c201 <ATA::readyForCommand()+0x9>
c001c224:	51                   	push   ecx
c001c225:	51                   	push   ecx
c001c226:	6a 00                	push   0x0
c001c228:	68 40 42 0f 00       	push   0xf4240
c001c22d:	e8 93 ba ff ff       	call   c0017cc5 <nanoSleep(unsigned long long)>
c001c232:	83 c4 10             	add    esp,0x10
c001c235:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c23b:	75 c4                	jne    c001c201 <ATA::readyForCommand()+0x9>
c001c23d:	31 c0                	xor    eax,eax
c001c23f:	eb 02                	jmp    c001c243 <ATA::readyForCommand()+0x4b>
c001c241:	b0 01                	mov    al,0x1
c001c243:	5a                   	pop    edx
c001c244:	5b                   	pop    ebx
c001c245:	5e                   	pop    esi
c001c246:	c3                   	ret    
c001c247:	90                   	nop

c001c248 <ATA::access(unsigned long long, int, void*, bool)>:
c001c248:	55                   	push   ebp
c001c249:	57                   	push   edi
c001c24a:	56                   	push   esi
c001c24b:	53                   	push   ebx
c001c24c:	83 ec 2c             	sub    esp,0x2c
c001c24f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c253:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c257:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c25b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c25f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c263:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c267:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c26b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c271:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c275:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c27b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c27f:	c1 e0 06             	shl    eax,0x6
c001c282:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c28a:	74 5d                	je     c001c2e9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c28c:	89 fa                	mov    edx,edi
c001c28e:	89 f0                	mov    eax,esi
c001c290:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c294:	c1 ea 1c             	shr    edx,0x1c
c001c297:	89 d1                	mov    ecx,edx
c001c299:	09 c1                	or     ecx,eax
c001c29b:	74 25                	je     c001c2c2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c29d:	31 ed                	xor    ebp,ebp
c001c29f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c2a6:	89 fa                	mov    edx,edi
c001c2a8:	89 f0                	mov    eax,esi
c001c2aa:	0f ad d0             	shrd   eax,edx,cl
c001c2ad:	d3 ea                	shr    edx,cl
c001c2af:	f6 c1 20             	test   cl,0x20
c001c2b2:	74 02                	je     c001c2b6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c2b4:	89 d0                	mov    eax,edx
c001c2b6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c2ba:	45                   	inc    ebp
c001c2bb:	83 fd 06             	cmp    ebp,0x6
c001c2be:	75 df                	jne    c001c29f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c2c0:	eb 76                	jmp    c001c338 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c2c2:	89 f0                	mov    eax,esi
c001c2c4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c2c9:	89 fa                	mov    edx,edi
c001c2cb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c2d2:	0f ac d0 10          	shrd   eax,edx,0x10
c001c2d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c2db:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c2df:	c1 ee 18             	shr    esi,0x18
c001c2e2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c2e7:	eb 56                	jmp    c001c33f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c2e9:	6a 00                	push   0x0
c001c2eb:	6a 3f                	push   0x3f
c001c2ed:	57                   	push   edi
c001c2ee:	56                   	push   esi
c001c2ef:	e8 d8 1e 00 00       	call   c001e1cc <__umoddi3>
c001c2f4:	83 c4 10             	add    esp,0x10
c001c2f7:	40                   	inc    eax
c001c2f8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c2fc:	6a 00                	push   0x0
c001c2fe:	68 f0 03 00 00       	push   0x3f0
c001c303:	57                   	push   edi
c001c304:	56                   	push   esi
c001c305:	e8 c2 1d 00 00       	call   c001e0cc <__udivdi3>
c001c30a:	83 c4 10             	add    esp,0x10
c001c30d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c312:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c319:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c31e:	6a 00                	push   0x0
c001c320:	6a 3f                	push   0x3f
c001c322:	57                   	push   edi
c001c323:	56                   	push   esi
c001c324:	e8 a3 1d 00 00       	call   c001e0cc <__udivdi3>
c001c329:	83 c4 10             	add    esp,0x10
c001c32c:	89 c6                	mov    esi,eax
c001c32e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c333:	83 e6 0f             	and    esi,0xf
c001c336:	eb 07                	jmp    c001c33f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c338:	31 f6                	xor    esi,esi
c001c33a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c33f:	bf 01 00 00 00       	mov    edi,0x1
c001c344:	50                   	push   eax
c001c345:	6a 00                	push   0x0
c001c347:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c34e:	50                   	push   eax
c001c34f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c353:	e8 fc f3 ff ff       	call   c001b754 <IDE::enableIRQs(unsigned char, bool)>
c001c358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c35b:	e8 98 fe ff ff       	call   c001c1f8 <ATA::readyForCommand()>
c001c360:	83 c4 10             	add    esp,0x10
c001c363:	84 c0                	test   al,al
c001c365:	0f 84 50 02 00 00    	je     c001c5bb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c36b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c371:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c377:	c1 e0 04             	shl    eax,0x4
c001c37a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c381:	09 c6                	or     esi,eax
c001c383:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c388:	75 05                	jne    c001c38f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c38a:	83 ce a0             	or     esi,0xffffffa0
c001c38d:	eb 03                	jmp    c001c392 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c38f:	83 ce e0             	or     esi,0xffffffe0
c001c392:	89 f0                	mov    eax,esi
c001c394:	0f b6 f0             	movzx  esi,al
c001c397:	56                   	push   esi
c001c398:	6a 06                	push   0x6
c001c39a:	51                   	push   ecx
c001c39b:	52                   	push   edx
c001c39c:	e8 a7 f1 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3a1:	83 c4 10             	add    esp,0x10
c001c3a4:	6a 00                	push   0x0
c001c3a6:	6a 01                	push   0x1
c001c3a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3af:	50                   	push   eax
c001c3b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3b6:	e8 8d f1 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c3c3:	75 6e                	jne    c001c433 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c3c5:	6a 00                	push   0x0
c001c3c7:	6a 08                	push   0x8
c001c3c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3d0:	50                   	push   eax
c001c3d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3d7:	e8 6c f1 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3dc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c3e1:	50                   	push   eax
c001c3e2:	6a 09                	push   0x9
c001c3e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3eb:	50                   	push   eax
c001c3ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3f2:	e8 51 f1 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3f7:	83 c4 20             	add    esp,0x20
c001c3fa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c3ff:	50                   	push   eax
c001c400:	6a 0a                	push   0xa
c001c402:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c409:	50                   	push   eax
c001c40a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c410:	e8 33 f1 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c415:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c41a:	50                   	push   eax
c001c41b:	6a 0b                	push   0xb
c001c41d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c424:	50                   	push   eax
c001c425:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c42b:	e8 18 f1 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c430:	83 c4 20             	add    esp,0x20
c001c433:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c438:	50                   	push   eax
c001c439:	6a 02                	push   0x2
c001c43b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c442:	50                   	push   eax
c001c443:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c449:	e8 fa f0 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c44e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c453:	50                   	push   eax
c001c454:	6a 03                	push   0x3
c001c456:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c45d:	50                   	push   eax
c001c45e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c464:	e8 df f0 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c469:	83 c4 20             	add    esp,0x20
c001c46c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c471:	50                   	push   eax
c001c472:	6a 04                	push   0x4
c001c474:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c47b:	50                   	push   eax
c001c47c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c482:	e8 c1 f0 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c487:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c48c:	50                   	push   eax
c001c48d:	6a 05                	push   0x5
c001c48f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c496:	50                   	push   eax
c001c497:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c49d:	e8 a6 f0 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a2:	83 c4 20             	add    esp,0x20
c001c4a5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c4aa:	0f 94 c0             	sete   al
c001c4ad:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c4b2:	74 09                	je     c001c4bd <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c4b4:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c4bb:	eb 07                	jmp    c001c4c4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c4bd:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c4c4:	0f b6 c0             	movzx  eax,al
c001c4c7:	50                   	push   eax
c001c4c8:	6a 07                	push   0x7
c001c4ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4d1:	50                   	push   eax
c001c4d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4d8:	e8 6b f0 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4dd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c4e1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c4e5:	83 c4 10             	add    esp,0x10
c001c4e8:	85 f6                	test   esi,esi
c001c4ea:	0f 84 ac 00 00 00    	je     c001c59c <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c4f0:	50                   	push   eax
c001c4f1:	6a 01                	push   0x1
c001c4f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4fa:	50                   	push   eax
c001c4fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c501:	e8 ee fb ff ff       	call   c001c0f4 <IDE::polling(unsigned char, unsigned int)>
c001c506:	83 c4 10             	add    esp,0x10
c001c509:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c50f:	84 c0                	test   al,al
c001c511:	74 20                	je     c001c533 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c513:	0f b6 f8             	movzx  edi,al
c001c516:	0f b6 d2             	movzx  edx,dl
c001c519:	57                   	push   edi
c001c51a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c521:	50                   	push   eax
c001c522:	52                   	push   edx
c001c523:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c529:	e8 30 fa ff ff       	call   c001bf5e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c52e:	e9 85 00 00 00       	jmp    c001c5b8 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c533:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c538:	74 41                	je     c001c57b <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c53a:	31 c9                	xor    ecx,ecx
c001c53c:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c540:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c544:	50                   	push   eax
c001c545:	50                   	push   eax
c001c546:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c54d:	50                   	push   eax
c001c54e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c554:	e8 dd ef ff ff       	call   c001b536 <IDE::getBase(unsigned char)>
c001c559:	89 c2                	mov    edx,eax
c001c55b:	89 e8                	mov    eax,ebp
c001c55d:	66 ef                	out    dx,ax
c001c55f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c563:	83 c4 10             	add    esp,0x10
c001c566:	41                   	inc    ecx
c001c567:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c56d:	75 cd                	jne    c001c53c <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c56f:	4e                   	dec    esi
c001c570:	81 c7 00 02 00 00    	add    edi,0x200
c001c576:	e9 6d ff ff ff       	jmp    c001c4e8 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c57b:	0f b6 d2             	movzx  edx,dl
c001c57e:	51                   	push   ecx
c001c57f:	51                   	push   ecx
c001c580:	52                   	push   edx
c001c581:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c587:	e8 aa ef ff ff       	call   c001b536 <IDE::getBase(unsigned char)>
c001c58c:	b9 00 01 00 00       	mov    ecx,0x100
c001c591:	89 c2                	mov    edx,eax
c001c593:	fc                   	cld    
c001c594:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	eb d3                	jmp    c001c56f <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c59c:	31 ff                	xor    edi,edi
c001c59e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c5a3:	74 16                	je     c001c5bb <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c5a5:	50                   	push   eax
c001c5a6:	50                   	push   eax
c001c5a7:	31 c0                	xor    eax,eax
c001c5a9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c5ae:	0f 94 c0             	sete   al
c001c5b1:	50                   	push   eax
c001c5b2:	53                   	push   ebx
c001c5b3:	e8 f6 fb ff ff       	call   c001c1ae <ATA::flush(bool)>
c001c5b8:	83 c4 10             	add    esp,0x10
c001c5bb:	83 c4 2c             	add    esp,0x2c
c001c5be:	89 f8                	mov    eax,edi
c001c5c0:	5b                   	pop    ebx
c001c5c1:	5e                   	pop    esi
c001c5c2:	5f                   	pop    edi
c001c5c3:	5d                   	pop    ebp
c001c5c4:	c3                   	ret    
c001c5c5:	90                   	nop

c001c5c6 <ATA::read(unsigned long long, int, void*)>:
c001c5c6:	57                   	push   edi
c001c5c7:	b8 04 00 00 00       	mov    eax,0x4
c001c5cc:	56                   	push   esi
c001c5cd:	53                   	push   ebx
c001c5ce:	83 ec 10             	sub    esp,0x10
c001c5d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5d5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c5d9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c5dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c5e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5e4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c5ea:	77 3b                	ja     c001c627 <ATA::read(unsigned long long, int, void*)+0x61>
c001c5ec:	b8 06 00 00 00       	mov    eax,0x6
c001c5f1:	85 d2                	test   edx,edx
c001c5f3:	74 32                	je     c001c627 <ATA::read(unsigned long long, int, void*)+0x61>
c001c5f5:	50                   	push   eax
c001c5f6:	50                   	push   eax
c001c5f7:	6a 00                	push   0x0
c001c5f9:	52                   	push   edx
c001c5fa:	53                   	push   ebx
c001c5fb:	57                   	push   edi
c001c5fc:	56                   	push   esi
c001c5fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c601:	e8 42 fc ff ff       	call   c001c248 <ATA::access(unsigned long long, int, void*, bool)>
c001c606:	83 c4 20             	add    esp,0x20
c001c609:	85 c0                	test   eax,eax
c001c60b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c60f:	75 11                	jne    c001c622 <ATA::read(unsigned long long, int, void*)+0x5c>
c001c611:	01 1d 04 4b 02 c0    	add    DWORD PTR ds:0xc0024b04,ebx
c001c617:	e8 52 05 ff ff       	call   c000cb6e <VgaText::updateDiskUsage()>
c001c61c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c620:	eb 05                	jmp    c001c627 <ATA::read(unsigned long long, int, void*)+0x61>
c001c622:	b8 01 00 00 00       	mov    eax,0x1
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	5b                   	pop    ebx
c001c62b:	5e                   	pop    esi
c001c62c:	5f                   	pop    edi
c001c62d:	c3                   	ret    

c001c62e <ATA::write(unsigned long long, int, void*)>:
c001c62e:	57                   	push   edi
c001c62f:	b8 04 00 00 00       	mov    eax,0x4
c001c634:	56                   	push   esi
c001c635:	53                   	push   ebx
c001c636:	83 ec 10             	sub    esp,0x10
c001c639:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c63d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c641:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c644:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c648:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c64c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c652:	77 3b                	ja     c001c68f <ATA::write(unsigned long long, int, void*)+0x61>
c001c654:	b8 06 00 00 00       	mov    eax,0x6
c001c659:	85 d2                	test   edx,edx
c001c65b:	74 32                	je     c001c68f <ATA::write(unsigned long long, int, void*)+0x61>
c001c65d:	50                   	push   eax
c001c65e:	50                   	push   eax
c001c65f:	6a 01                	push   0x1
c001c661:	52                   	push   edx
c001c662:	53                   	push   ebx
c001c663:	57                   	push   edi
c001c664:	56                   	push   esi
c001c665:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c669:	e8 da fb ff ff       	call   c001c248 <ATA::access(unsigned long long, int, void*, bool)>
c001c66e:	83 c4 20             	add    esp,0x20
c001c671:	85 c0                	test   eax,eax
c001c673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c677:	75 11                	jne    c001c68a <ATA::write(unsigned long long, int, void*)+0x5c>
c001c679:	01 1d 00 4b 02 c0    	add    DWORD PTR ds:0xc0024b00,ebx
c001c67f:	e8 ea 04 ff ff       	call   c000cb6e <VgaText::updateDiskUsage()>
c001c684:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c688:	eb 05                	jmp    c001c68f <ATA::write(unsigned long long, int, void*)+0x61>
c001c68a:	b8 01 00 00 00       	mov    eax,0x1
c001c68f:	83 c4 10             	add    esp,0x10
c001c692:	5b                   	pop    ebx
c001c693:	5e                   	pop    esi
c001c694:	5f                   	pop    edi
c001c695:	c3                   	ret    

c001c696 <ATA::detectCHS()>:
c001c696:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c69a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c6a0:	c1 e0 06             	shl    eax,0x6
c001c6a3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c6a9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c6b3:	c7 44 24 04 ff 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021dff
c001c6bb:	e9 88 82 ff ff       	jmp    c0014948 <Krnl::panic(char const*)>

c001c6c0 <ATA::open(int, int, void*)>:
c001c6c0:	53                   	push   ebx
c001c6c1:	83 ec 08             	sub    esp,0x8
c001c6c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6d0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c6d6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c6dc:	c1 e0 06             	shl    eax,0x6
c001c6df:	01 d0                	add    eax,edx
c001c6e1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c6e8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c6ee:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c6f5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c6ff:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c705:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c70c:	75 0c                	jne    c001c71a <ATA::open(int, int, void*)+0x5a>
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	53                   	push   ebx
c001c712:	e8 7f ff ff ff       	call   c001c696 <ATA::detectCHS()>
c001c717:	83 c4 10             	add    esp,0x10
c001c71a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c720:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c726:	c1 e0 06             	shl    eax,0x6
c001c729:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c730:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c73a:	d1 e8                	shr    eax,1
c001c73c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c742:	6a 04                	push   0x4
c001c744:	6a 0c                	push   0xc
c001c746:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c74d:	50                   	push   eax
c001c74e:	52                   	push   edx
c001c74f:	e8 f4 ed ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c754:	90                   	nop
c001c755:	90                   	nop
c001c756:	6a 00                	push   0x0
c001c758:	6a 0c                	push   0xc
c001c75a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c761:	50                   	push   eax
c001c762:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c768:	e8 db ed ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c76d:	83 c4 14             	add    esp,0x14
c001c770:	53                   	push   ebx
c001c771:	e8 e2 3e ff ff       	call   c0010658 <PhysicalDisk::startCache()>
c001c776:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c779:	e8 36 57 ff ff       	call   c0011eb4 <createPartitionsForDisk(PhysicalDisk*)>
c001c77e:	31 c0                	xor    eax,eax
c001c780:	83 c4 18             	add    esp,0x18
c001c783:	5b                   	pop    ebx
c001c784:	c3                   	ret    
c001c785:	90                   	nop

c001c786 <ATAPI::write(unsigned long long, int, void*)>:
c001c786:	b8 03 00 00 00       	mov    eax,0x3
c001c78b:	c3                   	ret    

c001c78c <ATAPI::close(int, int, void*)>:
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c793:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c799:	85 c0                	test   eax,eax
c001c79b:	74 0c                	je     c001c7a9 <ATAPI::close(int, int, void*)+0x1d>
c001c79d:	83 ec 0c             	sub    esp,0xc
c001c7a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7a2:	50                   	push   eax
c001c7a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7a6:	83 c4 10             	add    esp,0x10
c001c7a9:	31 c0                	xor    eax,eax
c001c7ab:	83 c4 0c             	add    esp,0xc
c001c7ae:	c3                   	ret    
c001c7af:	90                   	nop

c001c7b0 <ATAPI::ATAPI()>:
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b7:	83 ec 04             	sub    esp,0x4
c001c7ba:	68 00 08 00 00       	push   0x800
c001c7bf:	68 48 1e 02 c0       	push   0xc0021e48
c001c7c4:	50                   	push   eax
c001c7c5:	e8 26 3e ff ff       	call   c00105f0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7ca:	83 c4 10             	add    esp,0x10
c001c7cd:	ba 88 1e 02 c0       	mov    edx,0xc0021e88
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	89 10                	mov    DWORD PTR [eax],edx
c001c7d8:	90                   	nop
c001c7d9:	83 c4 0c             	add    esp,0xc
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop

c001c7de <ATAPI::readyForCommand()>:
c001c7de:	56                   	push   esi
c001c7df:	53                   	push   ebx
c001c7e0:	31 db                	xor    ebx,ebx
c001c7e2:	50                   	push   eax
c001c7e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e7:	50                   	push   eax
c001c7e8:	6a 0c                	push   0xc
c001c7ea:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7f1:	50                   	push   eax
c001c7f2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f8:	e8 0b ee ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	a8 88                	test   al,0x88
c001c802:	74 23                	je     c001c827 <ATAPI::readyForCommand()+0x49>
c001c804:	43                   	inc    ebx
c001c805:	83 fb 63             	cmp    ebx,0x63
c001c808:	7e dd                	jle    c001c7e7 <ATAPI::readyForCommand()+0x9>
c001c80a:	51                   	push   ecx
c001c80b:	51                   	push   ecx
c001c80c:	6a 00                	push   0x0
c001c80e:	68 40 42 0f 00       	push   0xf4240
c001c813:	e8 ad b4 ff ff       	call   c0017cc5 <nanoSleep(unsigned long long)>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c821:	75 c4                	jne    c001c7e7 <ATAPI::readyForCommand()+0x9>
c001c823:	31 c0                	xor    eax,eax
c001c825:	eb 02                	jmp    c001c829 <ATAPI::readyForCommand()+0x4b>
c001c827:	b0 01                	mov    al,0x1
c001c829:	5a                   	pop    edx
c001c82a:	5b                   	pop    ebx
c001c82b:	5e                   	pop    esi
c001c82c:	c3                   	ret    
c001c82d:	90                   	nop

c001c82e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c82e:	55                   	push   ebp
c001c82f:	57                   	push   edi
c001c830:	56                   	push   esi
c001c831:	53                   	push   ebx
c001c832:	83 ec 20             	sub    esp,0x20
c001c835:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c839:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c83d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c841:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c845:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c849:	6a 01                	push   0x1
c001c84b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c852:	50                   	push   eax
c001c853:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c859:	e8 f6 ee ff ff       	call   c001b754 <IDE::enableIRQs(unsigned char, bool)>
c001c85e:	5e                   	pop    esi
c001c85f:	58                   	pop    eax
c001c860:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c867:	50                   	push   eax
c001c868:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c86e:	e8 af ec ff ff       	call   c001b522 <IDE::prepareInterrupt(unsigned char)>
c001c873:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c876:	e8 63 ff ff ff       	call   c001c7de <ATAPI::readyForCommand()>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	84 c0                	test   al,al
c001c880:	75 0a                	jne    c001c88c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c882:	bb 01 00 00 00       	mov    ebx,0x1
c001c887:	e9 57 02 00 00       	jmp    c001cae3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c88c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c892:	c1 e0 04             	shl    eax,0x4
c001c895:	0f b6 c0             	movzx  eax,al
c001c898:	50                   	push   eax
c001c899:	6a 06                	push   0x6
c001c89b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8a2:	50                   	push   eax
c001c8a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8a9:	e8 9a ec ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ae:	6a 00                	push   0x0
c001c8b0:	6a 01                	push   0x1
c001c8b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8b9:	50                   	push   eax
c001c8ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8c0:	e8 83 ec ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8c5:	83 c4 20             	add    esp,0x20
c001c8c8:	0f b6 c3             	movzx  eax,bl
c001c8cb:	0f b6 df             	movzx  ebx,bh
c001c8ce:	50                   	push   eax
c001c8cf:	6a 04                	push   0x4
c001c8d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8d8:	50                   	push   eax
c001c8d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8df:	e8 64 ec ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e4:	53                   	push   ebx
c001c8e5:	6a 05                	push   0x5
c001c8e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8ee:	50                   	push   eax
c001c8ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8f5:	e8 4e ec ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8fa:	83 c4 20             	add    esp,0x20
c001c8fd:	68 a0 00 00 00       	push   0xa0
c001c902:	6a 07                	push   0x7
c001c904:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c90b:	50                   	push   eax
c001c90c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c912:	e8 31 ec ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c917:	83 c4 0c             	add    esp,0xc
c001c91a:	6a 01                	push   0x1
c001c91c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c923:	50                   	push   eax
c001c924:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c92a:	e8 c5 f7 ff ff       	call   c001c0f4 <IDE::polling(unsigned char, unsigned int)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c938:	84 c0                	test   al,al
c001c93a:	74 23                	je     c001c95f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c93c:	0f b6 d8             	movzx  ebx,al
c001c93f:	0f b6 d2             	movzx  edx,dl
c001c942:	53                   	push   ebx
c001c943:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c94a:	50                   	push   eax
c001c94b:	52                   	push   edx
c001c94c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c952:	e8 07 f6 ff ff       	call   c001bf5e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c957:	83 c4 10             	add    esp,0x10
c001c95a:	e9 84 01 00 00       	jmp    c001cae3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c95f:	0f b6 d2             	movzx  edx,dl
c001c962:	53                   	push   ebx
c001c963:	53                   	push   ebx
c001c964:	52                   	push   edx
c001c965:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c96b:	e8 c6 eb ff ff       	call   c001b536 <IDE::getBase(unsigned char)>
c001c970:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c974:	b9 06 00 00 00       	mov    ecx,0x6
c001c979:	89 c2                	mov    edx,eax
c001c97b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c97e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c982:	83 c4 10             	add    esp,0x10
c001c985:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c98b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c992:	85 db                	test   ebx,ebx
c001c994:	0f 84 ec 00 00 00    	je     c001ca86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c99a:	51                   	push   ecx
c001c99b:	51                   	push   ecx
c001c99c:	52                   	push   edx
c001c99d:	50                   	push   eax
c001c99e:	e8 13 ed ff ff       	call   c001b6b6 <IDE::waitInterrupt(unsigned char)>
c001c9a3:	83 c4 10             	add    esp,0x10
c001c9a6:	84 c0                	test   al,al
c001c9a8:	0f 84 d4 fe ff ff    	je     c001c882 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c9ae:	56                   	push   esi
c001c9af:	56                   	push   esi
c001c9b0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9b7:	50                   	push   eax
c001c9b8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9be:	e8 5f eb ff ff       	call   c001b522 <IDE::prepareInterrupt(unsigned char)>
c001c9c3:	83 c4 0c             	add    esp,0xc
c001c9c6:	6a 04                	push   0x4
c001c9c8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9cf:	50                   	push   eax
c001c9d0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9d6:	e8 2d ec ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001c9db:	83 c4 0c             	add    esp,0xc
c001c9de:	89 c6                	mov    esi,eax
c001c9e0:	6a 05                	push   0x5
c001c9e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9e9:	50                   	push   eax
c001c9ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9f0:	e8 13 ec ff ff       	call   c001b608 <IDE::read(unsigned char, unsigned char)>
c001c9f5:	89 f1                	mov    ecx,esi
c001c9f7:	0f b6 c0             	movzx  eax,al
c001c9fa:	0f b6 f1             	movzx  esi,cl
c001c9fd:	c1 e0 08             	shl    eax,0x8
c001ca00:	09 c6                	or     esi,eax
c001ca02:	d1 fe                	sar    esi,1
c001ca04:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ca10:	74 41                	je     c001ca53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ca12:	31 c9                	xor    ecx,ecx
c001ca14:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca1a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca21:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ca25:	75 0a                	jne    c001ca31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ca27:	01 c9                	add    ecx,ecx
c001ca29:	01 cd                	add    ebp,ecx
c001ca2b:	4b                   	dec    ebx
c001ca2c:	e9 54 ff ff ff       	jmp    c001c985 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ca31:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ca36:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca3a:	51                   	push   ecx
c001ca3b:	51                   	push   ecx
c001ca3c:	52                   	push   edx
c001ca3d:	50                   	push   eax
c001ca3e:	e8 f3 ea ff ff       	call   c001b536 <IDE::getBase(unsigned char)>
c001ca43:	89 c2                	mov    edx,eax
c001ca45:	89 f0                	mov    eax,esi
c001ca47:	66 ef                	out    dx,ax
c001ca49:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca4d:	83 c4 10             	add    esp,0x10
c001ca50:	41                   	inc    ecx
c001ca51:	eb c1                	jmp    c001ca14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ca53:	31 f6                	xor    esi,esi
c001ca55:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca5b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca62:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ca66:	75 06                	jne    c001ca6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ca68:	01 f6                	add    esi,esi
c001ca6a:	01 f5                	add    ebp,esi
c001ca6c:	eb bd                	jmp    c001ca2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ca6e:	51                   	push   ecx
c001ca6f:	51                   	push   ecx
c001ca70:	52                   	push   edx
c001ca71:	50                   	push   eax
c001ca72:	e8 bf ea ff ff       	call   c001b536 <IDE::getBase(unsigned char)>
c001ca77:	89 c2                	mov    edx,eax
c001ca79:	66 ed                	in     ax,dx
c001ca7b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ca80:	83 c4 10             	add    esp,0x10
c001ca83:	46                   	inc    esi
c001ca84:	eb cf                	jmp    c001ca55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ca86:	51                   	push   ecx
c001ca87:	51                   	push   ecx
c001ca88:	52                   	push   edx
c001ca89:	50                   	push   eax
c001ca8a:	e8 27 ec ff ff       	call   c001b6b6 <IDE::waitInterrupt(unsigned char)>
c001ca8f:	83 c4 10             	add    esp,0x10
c001ca92:	84 c0                	test   al,al
c001ca94:	0f 84 e8 fd ff ff    	je     c001c882 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca9a:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ca9f:	52                   	push   edx
c001caa0:	52                   	push   edx
c001caa1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caa8:	50                   	push   eax
c001caa9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caaf:	e8 6e ea ff ff       	call   c001b522 <IDE::prepareInterrupt(unsigned char)>
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	50                   	push   eax
c001cab8:	50                   	push   eax
c001cab9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cac0:	50                   	push   eax
c001cac1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cac7:	e8 6a ea ff ff       	call   c001b536 <IDE::getBase(unsigned char)>
c001cacc:	8d 50 07             	lea    edx,[eax+0x7]
c001cacf:	ec                   	in     al,dx
c001cad0:	83 c4 10             	add    esp,0x10
c001cad3:	a8 88                	test   al,0x88
c001cad5:	74 0a                	je     c001cae1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cad7:	4b                   	dec    ebx
c001cad8:	75 dd                	jne    c001cab7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cada:	bb 02 00 00 00       	mov    ebx,0x2
c001cadf:	eb 02                	jmp    c001cae3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cae1:	31 db                	xor    ebx,ebx
c001cae3:	83 c4 1c             	add    esp,0x1c
c001cae6:	89 d8                	mov    eax,ebx
c001cae8:	5b                   	pop    ebx
c001cae9:	5e                   	pop    esi
c001caea:	5f                   	pop    edi
c001caeb:	5d                   	pop    ebp
c001caec:	c3                   	ret    
c001caed:	90                   	nop

c001caee <ATAPI::diskRemoved()>:
c001caee:	83 ec 18             	sub    esp,0x18
c001caf1:	68 53 1e 02 c0       	push   0xc0021e53
c001caf6:	e8 e4 22 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001cafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cb06:	83 c4 1c             	add    esp,0x1c
c001cb09:	c3                   	ret    

c001cb0a <ATAPI::eject()>:
c001cb0a:	57                   	push   edi
c001cb0b:	b9 03 00 00 00       	mov    ecx,0x3
c001cb10:	53                   	push   ebx
c001cb11:	83 ec 14             	sub    esp,0x14
c001cb14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb18:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb1c:	fc                   	cld    
c001cb1d:	31 c0                	xor    eax,eax
c001cb1f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb21:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb26:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb2b:	50                   	push   eax
c001cb2c:	50                   	push   eax
c001cb2d:	6a 00                	push   0x0
c001cb2f:	6a 00                	push   0x0
c001cb31:	6a 00                	push   0x0
c001cb33:	6a 02                	push   0x2
c001cb35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb39:	50                   	push   eax
c001cb3a:	53                   	push   ebx
c001cb3b:	e8 ee fc ff ff       	call   c001c82e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb40:	83 c4 14             	add    esp,0x14
c001cb43:	53                   	push   ebx
c001cb44:	e8 a5 ff ff ff       	call   c001caee <ATAPI::diskRemoved()>
c001cb49:	83 c4 24             	add    esp,0x24
c001cb4c:	5b                   	pop    ebx
c001cb4d:	5f                   	pop    edi
c001cb4e:	c3                   	ret    
c001cb4f:	90                   	nop

c001cb50 <ATAPI::diskInserted()>:
c001cb50:	53                   	push   ebx
c001cb51:	83 ec 14             	sub    esp,0x14
c001cb54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb58:	68 69 1e 02 c0       	push   0xc0021e69
c001cb5d:	e8 7d 22 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001cb62:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001cb69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb6c:	e8 e7 3a ff ff       	call   c0010658 <PhysicalDisk::startCache()>
c001cb71:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001cb75:	83 c4 18             	add    esp,0x18
c001cb78:	5b                   	pop    ebx
c001cb79:	e9 36 53 ff ff       	jmp    c0011eb4 <createPartitionsForDisk(PhysicalDisk*)>

c001cb7e <ATAPI::detectMedia()>:
c001cb7e:	56                   	push   esi
c001cb7f:	53                   	push   ebx
c001cb80:	83 ec 28             	sub    esp,0x28
c001cb83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb87:	6a 0c                	push   0xc
c001cb89:	6a 00                	push   0x0
c001cb8b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cb8f:	56                   	push   esi
c001cb90:	e8 73 3a fe ff       	call   c0000608 <memset>
c001cb95:	58                   	pop    eax
c001cb96:	5a                   	pop    edx
c001cb97:	6a 00                	push   0x0
c001cb99:	6a 00                	push   0x0
c001cb9b:	6a 00                	push   0x0
c001cb9d:	6a 00                	push   0x0
c001cb9f:	56                   	push   esi
c001cba0:	53                   	push   ebx
c001cba1:	e8 88 fc ff ff       	call   c001c82e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cba6:	83 c4 1c             	add    esp,0x1c
c001cba9:	6a 0c                	push   0xc
c001cbab:	6a 00                	push   0x0
c001cbad:	56                   	push   esi
c001cbae:	e8 55 3a fe ff       	call   c0000608 <memset>
c001cbb3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cbb8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cbbd:	59                   	pop    ecx
c001cbbe:	58                   	pop    eax
c001cbbf:	6a 01                	push   0x1
c001cbc1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cbc5:	50                   	push   eax
c001cbc6:	6a 00                	push   0x0
c001cbc8:	6a 12                	push   0x12
c001cbca:	56                   	push   esi
c001cbcb:	53                   	push   ebx
c001cbcc:	e8 5d fc ff ff       	call   c001c82e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbd1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cbd5:	83 c4 20             	add    esp,0x20
c001cbd8:	83 e0 7f             	and    eax,0x7f
c001cbdb:	3c 70                	cmp    al,0x70
c001cbdd:	74 15                	je     c001cbf4 <ATAPI::detectMedia()+0x76>
c001cbdf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cbe6:	75 0c                	jne    c001cbf4 <ATAPI::detectMedia()+0x76>
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	53                   	push   ebx
c001cbec:	e8 5f ff ff ff       	call   c001cb50 <ATAPI::diskInserted()>
c001cbf1:	83 c4 10             	add    esp,0x10
c001cbf4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cbf8:	83 e0 0f             	and    eax,0xf
c001cbfb:	3c 02                	cmp    al,0x2
c001cbfd:	75 1b                	jne    c001cc1a <ATAPI::detectMedia()+0x9c>
c001cbff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cc04:	75 2d                	jne    c001cc33 <ATAPI::detectMedia()+0xb5>
c001cc06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc0d:	74 24                	je     c001cc33 <ATAPI::detectMedia()+0xb5>
c001cc0f:	83 ec 0c             	sub    esp,0xc
c001cc12:	53                   	push   ebx
c001cc13:	e8 d6 fe ff ff       	call   c001caee <ATAPI::diskRemoved()>
c001cc18:	eb 16                	jmp    c001cc30 <ATAPI::detectMedia()+0xb2>
c001cc1a:	84 c0                	test   al,al
c001cc1c:	75 15                	jne    c001cc33 <ATAPI::detectMedia()+0xb5>
c001cc1e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc25:	75 0c                	jne    c001cc33 <ATAPI::detectMedia()+0xb5>
c001cc27:	83 ec 0c             	sub    esp,0xc
c001cc2a:	53                   	push   ebx
c001cc2b:	e8 20 ff ff ff       	call   c001cb50 <ATAPI::diskInserted()>
c001cc30:	83 c4 10             	add    esp,0x10
c001cc33:	83 c4 24             	add    esp,0x24
c001cc36:	5b                   	pop    ebx
c001cc37:	5e                   	pop    esi
c001cc38:	c3                   	ret    
c001cc39:	90                   	nop

c001cc3a <ATAPI::open(int, int, void*)>:
c001cc3a:	53                   	push   ebx
c001cc3b:	83 ec 08             	sub    esp,0x8
c001cc3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc4a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc50:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc56:	c1 e0 06             	shl    eax,0x6
c001cc59:	01 d0                	add    eax,edx
c001cc5b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cc62:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cc68:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cc6f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cc79:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cc7f:	6a 04                	push   0x4
c001cc81:	6a 0c                	push   0xc
c001cc83:	51                   	push   ecx
c001cc84:	52                   	push   edx
c001cc85:	e8 be e8 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc8a:	90                   	nop
c001cc8b:	90                   	nop
c001cc8c:	6a 00                	push   0x0
c001cc8e:	6a 0c                	push   0xc
c001cc90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc97:	50                   	push   eax
c001cc98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc9e:	e8 a5 e8 ff ff       	call   c001b548 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cca3:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ccaa:	83 c4 14             	add    esp,0x14
c001ccad:	53                   	push   ebx
c001ccae:	e8 cb fe ff ff       	call   c001cb7e <ATAPI::detectMedia()>
c001ccb3:	31 c0                	xor    eax,eax
c001ccb5:	83 c4 18             	add    esp,0x18
c001ccb8:	5b                   	pop    ebx
c001ccb9:	c3                   	ret    

c001ccba <ATAPI::read(unsigned long long, int, void*)>:
c001ccba:	55                   	push   ebp
c001ccbb:	57                   	push   edi
c001ccbc:	56                   	push   esi
c001ccbd:	53                   	push   ebx
c001ccbe:	83 ec 1c             	sub    esp,0x1c
c001ccc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccc5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ccc9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cccd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ccd4:	74 41                	je     c001cd17 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ccd6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ccda:	b9 03 00 00 00       	mov    ecx,0x3
c001ccdf:	fc                   	cld    
c001cce0:	31 c0                	xor    eax,eax
c001cce2:	86 fb                	xchg   bl,bh
c001cce4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cce6:	c1 c3 10             	rol    ebx,0x10
c001cce9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ccee:	89 e8                	mov    eax,ebp
c001ccf0:	86 fb                	xchg   bl,bh
c001ccf2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ccf6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ccfa:	50                   	push   eax
c001ccfb:	50                   	push   eax
c001ccfc:	55                   	push   ebp
c001ccfd:	c1 e5 0b             	shl    ebp,0xb
c001cd00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd04:	6a 00                	push   0x0
c001cd06:	55                   	push   ebp
c001cd07:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd0b:	50                   	push   eax
c001cd0c:	56                   	push   esi
c001cd0d:	e8 1c fb ff ff       	call   c001c82e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd12:	83 c4 20             	add    esp,0x20
c001cd15:	eb 1a                	jmp    c001cd31 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cd17:	83 ec 0c             	sub    esp,0xc
c001cd1a:	56                   	push   esi
c001cd1b:	e8 5e fe ff ff       	call   c001cb7e <ATAPI::detectMedia()>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cd2a:	75 aa                	jne    c001ccd6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cd2c:	b8 02 00 00 00       	mov    eax,0x2
c001cd31:	83 c4 1c             	add    esp,0x1c
c001cd34:	5b                   	pop    ebx
c001cd35:	5e                   	pop    esi
c001cd36:	5f                   	pop    edi
c001cd37:	5d                   	pop    ebp
c001cd38:	c3                   	ret    
c001cd39:	90                   	nop

c001cd3a <AVX::open(int, int, void*)>:
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	e8 06 10 00 00       	call   c001dd48 <avxInit>
c001cd42:	b8 00 00 00 00       	mov    eax,0x0
c001cd47:	83 c4 0c             	add    esp,0xc
c001cd4a:	c3                   	ret    
c001cd4b:	90                   	nop

c001cd4c <AVX::close(int, int, void*)>:
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	e8 f5 0f 00 00       	call   c001dd49 <avxClose>
c001cd54:	b8 00 00 00 00       	mov    eax,0x0
c001cd59:	83 c4 0c             	add    esp,0xc
c001cd5c:	c3                   	ret    
c001cd5d:	90                   	nop

c001cd5e <AVX::available()>:
c001cd5e:	83 ec 0c             	sub    esp,0xc
c001cd61:	e8 da 0f 00 00       	call   c001dd40 <avxDetect>
c001cd66:	85 c0                	test   eax,eax
c001cd68:	0f 95 c0             	setne  al
c001cd6b:	83 c4 0c             	add    esp,0xc
c001cd6e:	c3                   	ret    
c001cd6f:	90                   	nop

c001cd70 <AVX::save(void*)>:
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd77:	83 ec 0c             	sub    esp,0xc
c001cd7a:	50                   	push   eax
c001cd7b:	e8 c6 0f 00 00       	call   c001dd46 <avxSave>
c001cd80:	83 c4 10             	add    esp,0x10
c001cd83:	90                   	nop
c001cd84:	83 c4 0c             	add    esp,0xc
c001cd87:	c3                   	ret    

c001cd88 <AVX::load(void*)>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd8f:	83 ec 0c             	sub    esp,0xc
c001cd92:	50                   	push   eax
c001cd93:	e8 af 0f 00 00       	call   c001dd47 <avxLoad>
c001cd98:	83 c4 10             	add    esp,0x10
c001cd9b:	90                   	nop
c001cd9c:	83 c4 0c             	add    esp,0xc
c001cd9f:	c3                   	ret    

c001cda0 <AVX::AVX()>:
c001cda0:	83 ec 0c             	sub    esp,0xc
c001cda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda7:	83 ec 08             	sub    esp,0x8
c001cdaa:	68 b4 1e 02 c0       	push   0xc0021eb4
c001cdaf:	50                   	push   eax
c001cdb0:	e8 19 39 ff ff       	call   c00106ce <FPU::FPU(char const*)>
c001cdb5:	83 c4 10             	add    esp,0x10
c001cdb8:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c001cdbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc1:	89 10                	mov    DWORD PTR [eax],edx
c001cdc3:	90                   	nop
c001cdc4:	83 c4 0c             	add    esp,0xc
c001cdc7:	c3                   	ret    

c001cdc8 <MMX::available()>:
c001cdc8:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001cdcd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cdd3:	83 e0 20             	and    eax,0x20
c001cdd6:	84 c0                	test   al,al
c001cdd8:	0f 95 c0             	setne  al
c001cddb:	c3                   	ret    

c001cddc <MMX::open(int, int, void*)>:
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	e8 d8 0f 00 00       	call   c001ddbc <x87Init>
c001cde4:	b8 00 00 00 00       	mov    eax,0x0
c001cde9:	83 c4 0c             	add    esp,0xc
c001cdec:	c3                   	ret    
c001cded:	90                   	nop

c001cdee <MMX::close(int, int, void*)>:
c001cdee:	83 ec 0c             	sub    esp,0xc
c001cdf1:	e8 e0 0f 00 00       	call   c001ddd6 <x87Close>
c001cdf6:	b8 00 00 00 00       	mov    eax,0x0
c001cdfb:	83 c4 0c             	add    esp,0xc
c001cdfe:	c3                   	ret    
c001cdff:	90                   	nop

c001ce00 <MMX::save(void*)>:
c001ce00:	83 ec 0c             	sub    esp,0xc
c001ce03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce07:	83 ec 0c             	sub    esp,0xc
c001ce0a:	50                   	push   eax
c001ce0b:	e8 a1 0f 00 00       	call   c001ddb1 <x87Save>
c001ce10:	83 c4 10             	add    esp,0x10
c001ce13:	90                   	nop
c001ce14:	83 c4 0c             	add    esp,0xc
c001ce17:	c3                   	ret    

c001ce18 <MMX::load(void*)>:
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce1f:	83 ec 0c             	sub    esp,0xc
c001ce22:	50                   	push   eax
c001ce23:	e8 8f 0f 00 00       	call   c001ddb7 <x87Load>
c001ce28:	83 c4 10             	add    esp,0x10
c001ce2b:	90                   	nop
c001ce2c:	83 c4 0c             	add    esp,0xc
c001ce2f:	c3                   	ret    

c001ce30 <MMX::MMX()>:
c001ce30:	83 ec 0c             	sub    esp,0xc
c001ce33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce37:	83 ec 08             	sub    esp,0x8
c001ce3a:	68 f4 1e 02 c0       	push   0xc0021ef4
c001ce3f:	50                   	push   eax
c001ce40:	e8 89 38 ff ff       	call   c00106ce <FPU::FPU(char const*)>
c001ce45:	83 c4 10             	add    esp,0x10
c001ce48:	ba 04 1f 02 c0       	mov    edx,0xc0021f04
c001ce4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce51:	89 10                	mov    DWORD PTR [eax],edx
c001ce53:	90                   	nop
c001ce54:	83 c4 0c             	add    esp,0xc
c001ce57:	c3                   	ret    

c001ce58 <SSE::open(int, int, void*)>:
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	e8 17 0f 00 00       	call   c001dd77 <sseInit>
c001ce60:	b8 00 00 00 00       	mov    eax,0x0
c001ce65:	83 c4 0c             	add    esp,0xc
c001ce68:	c3                   	ret    
c001ce69:	90                   	nop

c001ce6a <SSE::close(int, int, void*)>:
c001ce6a:	83 ec 0c             	sub    esp,0xc
c001ce6d:	e8 15 0f 00 00       	call   c001dd87 <sseClose>
c001ce72:	b8 00 00 00 00       	mov    eax,0x0
c001ce77:	83 c4 0c             	add    esp,0xc
c001ce7a:	c3                   	ret    
c001ce7b:	90                   	nop

c001ce7c <SSE::available()>:
c001ce7c:	83 ec 1c             	sub    esp,0x1c
c001ce7f:	e8 cc 0e 00 00       	call   c001dd50 <sseDetect>
c001ce84:	85 c0                	test   eax,eax
c001ce86:	0f 95 c0             	setne  al
c001ce89:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce8d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ce91:	83 c4 1c             	add    esp,0x1c
c001ce94:	c3                   	ret    
c001ce95:	90                   	nop

c001ce96 <SSE::save(void*)>:
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce9d:	83 ec 0c             	sub    esp,0xc
c001cea0:	50                   	push   eax
c001cea1:	e8 c5 0e 00 00       	call   c001dd6b <sseSave>
c001cea6:	83 c4 10             	add    esp,0x10
c001cea9:	90                   	nop
c001ceaa:	83 c4 0c             	add    esp,0xc
c001cead:	c3                   	ret    

c001ceae <SSE::load(void*)>:
c001ceae:	83 ec 0c             	sub    esp,0xc
c001ceb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceb5:	83 ec 0c             	sub    esp,0xc
c001ceb8:	50                   	push   eax
c001ceb9:	e8 b3 0e 00 00       	call   c001dd71 <sseLoad>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	90                   	nop
c001cec2:	83 c4 0c             	add    esp,0xc
c001cec5:	c3                   	ret    

c001cec6 <SSE::SSE()>:
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cecd:	83 ec 08             	sub    esp,0x8
c001ced0:	68 34 1f 02 c0       	push   0xc0021f34
c001ced5:	50                   	push   eax
c001ced6:	e8 f3 37 ff ff       	call   c00106ce <FPU::FPU(char const*)>
c001cedb:	83 c4 10             	add    esp,0x10
c001cede:	ba 44 1f 02 c0       	mov    edx,0xc0021f44
c001cee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee7:	89 10                	mov    DWORD PTR [eax],edx
c001cee9:	90                   	nop
c001ceea:	83 c4 0c             	add    esp,0xc
c001ceed:	c3                   	ret    

c001ceee <x87::open(int, int, void*)>:
c001ceee:	83 ec 0c             	sub    esp,0xc
c001cef1:	e8 c6 0e 00 00       	call   c001ddbc <x87Init>
c001cef6:	b8 00 00 00 00       	mov    eax,0x0
c001cefb:	83 c4 0c             	add    esp,0xc
c001cefe:	c3                   	ret    
c001ceff:	90                   	nop

c001cf00 <x87::close(int, int, void*)>:
c001cf00:	83 ec 0c             	sub    esp,0xc
c001cf03:	e8 ce 0e 00 00       	call   c001ddd6 <x87Close>
c001cf08:	b8 00 00 00 00       	mov    eax,0x0
c001cf0d:	83 c4 0c             	add    esp,0xc
c001cf10:	c3                   	ret    
c001cf11:	90                   	nop

c001cf12 <x87::available()>:
c001cf12:	83 ec 0c             	sub    esp,0xc
c001cf15:	e8 7c 0e 00 00       	call   c001dd96 <x87Detect>
c001cf1a:	85 c0                	test   eax,eax
c001cf1c:	0f 95 c0             	setne  al
c001cf1f:	83 c4 0c             	add    esp,0xc
c001cf22:	c3                   	ret    
c001cf23:	90                   	nop

c001cf24 <x87::save(void*)>:
c001cf24:	83 ec 0c             	sub    esp,0xc
c001cf27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf2b:	83 ec 0c             	sub    esp,0xc
c001cf2e:	50                   	push   eax
c001cf2f:	e8 7d 0e 00 00       	call   c001ddb1 <x87Save>
c001cf34:	83 c4 10             	add    esp,0x10
c001cf37:	90                   	nop
c001cf38:	83 c4 0c             	add    esp,0xc
c001cf3b:	c3                   	ret    

c001cf3c <x87::load(void*)>:
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf43:	83 ec 0c             	sub    esp,0xc
c001cf46:	50                   	push   eax
c001cf47:	e8 6b 0e 00 00       	call   c001ddb7 <x87Load>
c001cf4c:	83 c4 10             	add    esp,0x10
c001cf4f:	90                   	nop
c001cf50:	83 c4 0c             	add    esp,0xc
c001cf53:	c3                   	ret    

c001cf54 <x87::x87()>:
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5b:	83 ec 08             	sub    esp,0x8
c001cf5e:	68 74 1f 02 c0       	push   0xc0021f74
c001cf63:	50                   	push   eax
c001cf64:	e8 65 37 ff ff       	call   c00106ce <FPU::FPU(char const*)>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c001cf71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf75:	89 10                	mov    DWORD PTR [eax],edx
c001cf77:	90                   	nop
c001cf78:	83 c4 0c             	add    esp,0xc
c001cf7b:	c3                   	ret    

c001cf7c <APIC::disable()>:
c001cf7c:	90                   	nop
c001cf7d:	c3                   	ret    

c001cf7e <APIC::close(int, int, void*)>:
c001cf7e:	55                   	push   ebp
c001cf7f:	89 e5                	mov    ebp,esp
c001cf81:	83 ec 08             	sub    esp,0x8
c001cf84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf87:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf89:	83 c0 3c             	add    eax,0x3c
c001cf8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf8e:	83 ec 0c             	sub    esp,0xc
c001cf91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cf94:	ff d0                	call   eax
c001cf96:	83 c4 10             	add    esp,0x10
c001cf99:	b8 00 00 00 00       	mov    eax,0x0
c001cf9e:	c9                   	leave  
c001cf9f:	c3                   	ret    

c001cfa0 <IOAPIC::close(int, int, void*)>:
c001cfa0:	b8 00 00 00 00       	mov    eax,0x0
c001cfa5:	c3                   	ret    

c001cfa6 <APIC::io_wait()>:
c001cfa6:	eb 00                	jmp    c001cfa8 <APIC::io_wait()+0x2>
c001cfa8:	eb 00                	jmp    c001cfaa <APIC::io_wait()+0x4>
c001cfaa:	90                   	nop
c001cfab:	c3                   	ret    

c001cfac <APIC::getBase()>:
c001cfac:	55                   	push   ebp
c001cfad:	89 e5                	mov    ebp,esp
c001cfaf:	83 ec 18             	sub    esp,0x18
c001cfb2:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001cfb7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cfbd:	83 e0 08             	and    eax,0x8
c001cfc0:	84 c0                	test   al,al
c001cfc2:	75 07                	jne    c001cfcb <APIC::getBase()+0x1f>
c001cfc4:	b8 00 00 00 00       	mov    eax,0x0
c001cfc9:	eb 21                	jmp    c001cfec <APIC::getBase()+0x40>
c001cfcb:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001cfd0:	83 ec 08             	sub    esp,0x8
c001cfd3:	6a 1b                	push   0x1b
c001cfd5:	50                   	push   eax
c001cfd6:	e8 eb e1 fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cfe1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cfe4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cfe7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfec:	c9                   	leave  
c001cfed:	c3                   	ret    

c001cfee <APIC::eoi(unsigned char)>:
c001cfee:	55                   	push   ebp
c001cfef:	89 e5                	mov    ebp,esp
c001cff1:	83 ec 28             	sub    esp,0x28
c001cff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cff7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001cffa:	83 ec 0c             	sub    esp,0xc
c001cffd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d000:	e8 a7 ff ff ff       	call   c001cfac <APIC::getBase()>
c001d005:	83 c4 10             	add    esp,0x10
c001d008:	05 b0 00 00 00       	add    eax,0xb0
c001d00d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d013:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d019:	90                   	nop
c001d01a:	c9                   	leave  
c001d01b:	c3                   	ret    

c001d01c <APIC::open(int, int, void*)>:
c001d01c:	55                   	push   ebp
c001d01d:	89 e5                	mov    ebp,esp
c001d01f:	57                   	push   edi
c001d020:	56                   	push   esi
c001d021:	53                   	push   ebx
c001d022:	83 ec 1c             	sub    esp,0x1c
c001d025:	83 ec 0c             	sub    esp,0xc
c001d028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d02b:	e8 7c ff ff ff       	call   c001cfac <APIC::getBase()>
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	05 f0 00 00 00       	add    eax,0xf0
c001d038:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d03b:	83 ec 0c             	sub    esp,0xc
c001d03e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d041:	e8 66 ff ff ff       	call   c001cfac <APIC::getBase()>
c001d046:	83 c4 10             	add    esp,0x10
c001d049:	89 c2                	mov    edx,eax
c001d04b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d04e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d054:	0f b6 f8             	movzx  edi,al
c001d057:	89 d0                	mov    eax,edx
c001d059:	ba 00 00 00 00       	mov    edx,0x0
c001d05e:	89 c1                	mov    ecx,eax
c001d060:	80 e5 ff             	and    ch,0xff
c001d063:	89 cb                	mov    ebx,ecx
c001d065:	0f b6 f2             	movzx  esi,dl
c001d068:	89 d8                	mov    eax,ebx
c001d06a:	89 f2                	mov    edx,esi
c001d06c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d06f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d072:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d076:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d07a:	83 e0 00             	and    eax,0x0
c001d07d:	09 d0                	or     eax,edx
c001d07f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d086:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d08c:	8d 50 01             	lea    edx,[eax+0x1]
c001d08f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d092:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d098:	0f b6 d0             	movzx  edx,al
c001d09b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d09e:	83 c2 08             	add    edx,0x8
c001d0a1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d0a5:	0f b6 c9             	movzx  ecx,cl
c001d0a8:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d0ae:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d0b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0b7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d0ba:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d0c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d0c4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d0c7:	89 10                	mov    DWORD PTR [eax],edx
c001d0c9:	b8 00 00 00 00       	mov    eax,0x0
c001d0ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d0d1:	5b                   	pop    ebx
c001d0d2:	5e                   	pop    esi
c001d0d3:	5f                   	pop    edi
c001d0d4:	5d                   	pop    ebp
c001d0d5:	c3                   	ret    

c001d0d6 <IOAPIC::IOAPIC()>:
c001d0d6:	83 ec 0c             	sub    esp,0xc
c001d0d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0dd:	83 ec 08             	sub    esp,0x8
c001d0e0:	68 b4 1f 02 c0       	push   0xc0021fb4
c001d0e5:	50                   	push   eax
c001d0e6:	e8 ef 32 ff ff       	call   c00103da <Device::Device(char const*)>
c001d0eb:	83 c4 10             	add    esp,0x10
c001d0ee:	ba dc 20 02 c0       	mov    edx,0xc00220dc
c001d0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f7:	89 10                	mov    DWORD PTR [eax],edx
c001d0f9:	90                   	nop
c001d0fa:	83 c4 0c             	add    esp,0xc
c001d0fd:	c3                   	ret    

c001d0fe <APIC::APIC()>:
c001d0fe:	53                   	push   ebx
c001d0ff:	83 ec 18             	sub    esp,0x18
c001d102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d106:	83 ec 08             	sub    esp,0x8
c001d109:	68 bc 1f 02 c0       	push   0xc0021fbc
c001d10e:	50                   	push   eax
c001d10f:	e8 ee 39 ff ff       	call   c0010b02 <InterruptController::InterruptController(char const*)>
c001d114:	83 c4 10             	add    esp,0x10
c001d117:	ba 94 20 02 c0       	mov    edx,0xc0022094
c001d11c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d120:	89 10                	mov    DWORD PTR [eax],edx
c001d122:	a0 60 4b 02 c0       	mov    al,ds:0xc0024b60
c001d127:	83 f0 01             	xor    eax,0x1
c001d12a:	84 c0                	test   al,al
c001d12c:	0f 84 96 00 00 00    	je     c001d1c8 <APIC::APIC()+0xca>
c001d132:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d137:	a0 10 36 02 c0       	mov    al,ds:0xc0023610
c001d13c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d140:	73 7f                	jae    c001d1c1 <APIC::APIC()+0xc3>
c001d142:	83 ec 0c             	sub    esp,0xc
c001d145:	68 68 01 00 00       	push   0x168
c001d14a:	e8 a1 1b ff ff       	call   c000ecf0 <operator new(unsigned long)>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	89 c3                	mov    ebx,eax
c001d154:	83 ec 0c             	sub    esp,0xc
c001d157:	53                   	push   ebx
c001d158:	e8 79 ff ff ff       	call   c001d0d6 <IOAPIC::IOAPIC()>
c001d15d:	83 c4 10             	add    esp,0x10
c001d160:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d164:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d169:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d16d:	89 14 85 40 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb4c0],edx
c001d174:	a1 20 4b 02 c0       	mov    eax,ds:0xc0024b20
c001d179:	40                   	inc    eax
c001d17a:	a3 20 4b 02 c0       	mov    ds:0xc0024b20,eax
c001d17f:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c001d184:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d18a:	83 ec 08             	sub    esp,0x8
c001d18d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d191:	50                   	push   eax
c001d192:	e8 53 30 ff ff       	call   c00101ea <Device::addChild(Device*)>
c001d197:	83 c4 10             	add    esp,0x10
c001d19a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d19e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1a0:	83 c0 08             	add    eax,0x8
c001d1a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1a5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d1aa:	6a 00                	push   0x0
c001d1ac:	6a 00                	push   0x0
c001d1ae:	52                   	push   edx
c001d1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1b3:	ff d0                	call   eax
c001d1b5:	83 c4 10             	add    esp,0x10
c001d1b8:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d1bc:	e9 76 ff ff ff       	jmp    c001d137 <APIC::APIC()+0x39>
c001d1c1:	c6 05 60 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b60,0x1
c001d1c8:	90                   	nop
c001d1c9:	83 c4 18             	add    esp,0x18
c001d1cc:	5b                   	pop    ebx
c001d1cd:	c3                   	ret    

c001d1ce <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d1ce:	55                   	push   ebp
c001d1cf:	89 e5                	mov    ebp,esp
c001d1d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1da:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1dd:	72 1d                	jb     c001d1fc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1e2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d1e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1eb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d1f1:	01 d0                	add    eax,edx
c001d1f3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1f6:	73 04                	jae    c001d1fc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1f8:	b0 01                	mov    al,0x1
c001d1fa:	eb 02                	jmp    c001d1fe <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d1fc:	b0 00                	mov    al,0x0
c001d1fe:	5d                   	pop    ebp
c001d1ff:	c3                   	ret    

c001d200 <IOAPIC::read(int)>:
c001d200:	55                   	push   ebp
c001d201:	89 e5                	mov    ebp,esp
c001d203:	83 ec 10             	sub    esp,0x10
c001d206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d209:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d20f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d212:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d215:	0f b6 d0             	movzx  edx,al
c001d218:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d21b:	89 10                	mov    DWORD PTR [eax],edx
c001d21d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d220:	83 c0 10             	add    eax,0x10
c001d223:	8b 00                	mov    eax,DWORD PTR [eax]
c001d225:	c9                   	leave  
c001d226:	c3                   	ret    
c001d227:	90                   	nop

c001d228 <IOAPIC::open(int, int, void*)>:
c001d228:	55                   	push   ebp
c001d229:	89 e5                	mov    ebp,esp
c001d22b:	57                   	push   edi
c001d22c:	56                   	push   esi
c001d22d:	53                   	push   ebx
c001d22e:	83 ec 0c             	sub    esp,0xc
c001d231:	83 ec 0c             	sub    esp,0xc
c001d234:	68 e7 1f 02 c0       	push   0xc0021fe7
c001d239:	e8 a1 1b ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001d23e:	83 c4 10             	add    esp,0x10
c001d241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d244:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d247:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d24d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d250:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d256:	8b 14 85 40 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc9c0]
c001d25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d260:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d269:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d26f:	8b 14 85 c0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc940]
c001d276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d279:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d27f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d282:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d288:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d28b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d291:	0f b6 f8             	movzx  edi,al
c001d294:	89 d0                	mov    eax,edx
c001d296:	ba 00 00 00 00       	mov    edx,0x0
c001d29b:	89 c1                	mov    ecx,eax
c001d29d:	80 e5 ff             	and    ch,0xff
c001d2a0:	89 cb                	mov    ebx,ecx
c001d2a2:	0f b6 f2             	movzx  esi,dl
c001d2a5:	89 d8                	mov    eax,ebx
c001d2a7:	89 f2                	mov    edx,esi
c001d2a9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2ac:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d2af:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d2b3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d2b7:	83 e0 00             	and    eax,0x0
c001d2ba:	09 d0                	or     eax,edx
c001d2bc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d2c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2c3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d2c9:	8d 50 01             	lea    edx,[eax+0x1]
c001d2cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2cf:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d2d5:	0f b6 d0             	movzx  edx,al
c001d2d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2db:	83 c2 08             	add    edx,0x8
c001d2de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d2e2:	0f b6 c9             	movzx  ecx,cl
c001d2e5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d2eb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d2ef:	83 ec 08             	sub    esp,0x8
c001d2f2:	6a 01                	push   0x1
c001d2f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2f7:	e8 04 ff ff ff       	call   c001d200 <IOAPIC::read(int)>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	c1 f8 10             	sar    eax,0x10
c001d302:	0f b6 c0             	movzx  eax,al
c001d305:	8d 50 01             	lea    edx,[eax+0x1]
c001d308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d30b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d311:	b8 00 00 00 00       	mov    eax,0x0
c001d316:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d319:	5b                   	pop    ebx
c001d31a:	5e                   	pop    esi
c001d31b:	5f                   	pop    edi
c001d31c:	5d                   	pop    ebp
c001d31d:	c3                   	ret    

c001d31e <IOAPIC::write(int, int)>:
c001d31e:	55                   	push   ebp
c001d31f:	89 e5                	mov    ebp,esp
c001d321:	83 ec 10             	sub    esp,0x10
c001d324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d327:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d32d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d330:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d333:	0f b6 d0             	movzx  edx,al
c001d336:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d339:	89 10                	mov    DWORD PTR [eax],edx
c001d33b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d33e:	8d 50 10             	lea    edx,[eax+0x10]
c001d341:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d344:	89 02                	mov    DWORD PTR [edx],eax
c001d346:	90                   	nop
c001d347:	c9                   	leave  
c001d348:	c3                   	ret    
c001d349:	90                   	nop

c001d34a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d34a:	55                   	push   ebp
c001d34b:	89 e5                	mov    ebp,esp
c001d34d:	83 ec 20             	sub    esp,0x20
c001d350:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d353:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d356:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d359:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d35c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d35f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d362:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d365:	88 d0                	mov    al,dl
c001d367:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d36a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d36e:	83 c0 08             	add    eax,0x8
c001d371:	01 c0                	add    eax,eax
c001d373:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d376:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d37a:	83 c0 08             	add    eax,0x8
c001d37d:	01 c0                	add    eax,eax
c001d37f:	40                   	inc    eax
c001d380:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d383:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d386:	50                   	push   eax
c001d387:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d38a:	e8 71 fe ff ff       	call   c001d200 <IOAPIC::read(int)>
c001d38f:	83 c4 08             	add    esp,0x8
c001d392:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d395:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d39c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d39f:	c1 e0 18             	shl    eax,0x18
c001d3a2:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d3a5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d3a8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d3ab:	52                   	push   edx
c001d3ac:	50                   	push   eax
c001d3ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3b0:	e8 69 ff ff ff       	call   c001d31e <IOAPIC::write(int, int)>
c001d3b5:	83 c4 0c             	add    esp,0xc
c001d3b8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d3bb:	50                   	push   eax
c001d3bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3bf:	e8 3c fe ff ff       	call   c001d200 <IOAPIC::read(int)>
c001d3c4:	83 c4 08             	add    esp,0x8
c001d3c7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d3ca:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d3d1:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d3d8:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d3df:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d3e6:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d3ea:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d3ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d3f0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d3f3:	52                   	push   edx
c001d3f4:	50                   	push   eax
c001d3f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3f8:	e8 21 ff ff ff       	call   c001d31e <IOAPIC::write(int, int)>
c001d3fd:	83 c4 0c             	add    esp,0xc
c001d400:	90                   	nop
c001d401:	c9                   	leave  
c001d402:	c3                   	ret    
c001d403:	90                   	nop

c001d404 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d404:	55                   	push   ebp
c001d405:	89 e5                	mov    ebp,esp
c001d407:	56                   	push   esi
c001d408:	53                   	push   ebx
c001d409:	83 ec 20             	sub    esp,0x20
c001d40c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d40f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d412:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d416:	74 28                	je     c001d440 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d418:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d41c:	7f 12                	jg     c001d430 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d41e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d421:	05 40 25 02 c0       	add    eax,0xc0022540
c001d426:	8a 00                	mov    al,BYTE PTR [eax]
c001d428:	0f b6 c0             	movzx  eax,al
c001d42b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d42e:	eb 10                	jmp    c001d440 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d430:	83 ec 0c             	sub    esp,0xc
c001d433:	68 f8 1f 02 c0       	push   0xc0021ff8
c001d438:	e8 0b 75 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d444:	a1 20 4b 02 c0       	mov    eax,ds:0xc0024b20
c001d449:	83 ec 08             	sub    esp,0x8
c001d44c:	50                   	push   eax
c001d44d:	68 30 20 02 c0       	push   0xc0022030
c001d452:	e8 88 19 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001d457:	83 c4 10             	add    esp,0x10
c001d45a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d461:	a1 20 4b 02 c0       	mov    eax,ds:0xc0024b20
c001d466:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d469:	7d 58                	jge    c001d4c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d46b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d46e:	8b 04 85 40 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb4c0]
c001d475:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d478:	83 ec 08             	sub    esp,0x8
c001d47b:	52                   	push   edx
c001d47c:	50                   	push   eax
c001d47d:	e8 4c fd ff ff       	call   c001d1ce <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d482:	83 c4 10             	add    esp,0x10
c001d485:	84 c0                	test   al,al
c001d487:	74 35                	je     c001d4be <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d489:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d48c:	8b 1c 85 40 4b 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb4c0]
c001d493:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d496:	83 c0 20             	add    eax,0x20
c001d499:	0f b6 f0             	movzx  esi,al
c001d49c:	e8 9e 67 ff ff       	call   c0013c3f <getCPUNumber()>
c001d4a1:	99                   	cdq    
c001d4a2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d4a5:	0f b6 c9             	movzx  ecx,cl
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	56                   	push   esi
c001d4ac:	52                   	push   edx
c001d4ad:	50                   	push   eax
c001d4ae:	51                   	push   ecx
c001d4af:	53                   	push   ebx
c001d4b0:	e8 95 fe ff ff       	call   c001d34a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d4b5:	83 c4 20             	add    esp,0x20
c001d4b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d4bc:	eb 05                	jmp    c001d4c3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d4be:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d4c1:	eb 9e                	jmp    c001d461 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d4c3:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d4c6:	83 f0 01             	xor    eax,0x1
c001d4c9:	84 c0                	test   al,al
c001d4cb:	74 10                	je     c001d4dd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	68 47 20 02 c0       	push   0xc0022047
c001d4d5:	e8 6e 74 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001d4da:	83 c4 10             	add    esp,0x10
c001d4dd:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d4e1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d4e8:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d4ec:	7f 65                	jg     c001d553 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d4ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d4f4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d4fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d4fe:	01 ca                	add    edx,ecx
c001d500:	83 c2 54             	add    edx,0x54
c001d503:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d507:	85 c0                	test   eax,eax
c001d509:	75 43                	jne    c001d54e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d50b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d50e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d511:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d518:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d51b:	01 ca                	add    edx,ecx
c001d51d:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d520:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d523:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d52a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d52d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d534:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d537:	01 ca                	add    edx,ecx
c001d539:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d53f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d542:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d546:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d549:	83 e8 20             	sub    eax,0x20
c001d54c:	eb 1a                	jmp    c001d568 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d54e:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d551:	eb 95                	jmp    c001d4e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d553:	83 ec 0c             	sub    esp,0xc
c001d556:	68 54 20 02 c0       	push   0xc0022054
c001d55b:	e8 e8 73 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001d560:	83 c4 10             	add    esp,0x10
c001d563:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d568:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d56b:	5b                   	pop    ebx
c001d56c:	5e                   	pop    esi
c001d56d:	5d                   	pop    ebp
c001d56e:	c3                   	ret    
c001d56f:	90                   	nop

c001d570 <PIC::disable()>:
c001d570:	55                   	push   ebp
c001d571:	89 e5                	mov    ebp,esp
c001d573:	83 ec 10             	sub    esp,0x10
c001d576:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d57c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d580:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d583:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d587:	ee                   	out    dx,al
c001d588:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d58e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d592:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d595:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d599:	ee                   	out    dx,al
c001d59a:	90                   	nop
c001d59b:	c9                   	leave  
c001d59c:	c3                   	ret    
c001d59d:	90                   	nop

c001d59e <PIC::close(int, int, void*)>:
c001d59e:	55                   	push   ebp
c001d59f:	89 e5                	mov    ebp,esp
c001d5a1:	83 ec 08             	sub    esp,0x8
c001d5a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5a9:	83 c0 3c             	add    eax,0x3c
c001d5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5ae:	83 ec 0c             	sub    esp,0xc
c001d5b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5b4:	ff d0                	call   eax
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	b8 00 00 00 00       	mov    eax,0x0
c001d5be:	c9                   	leave  
c001d5bf:	c3                   	ret    

c001d5c0 <PIC::PIC()>:
c001d5c0:	83 ec 0c             	sub    esp,0xc
c001d5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c7:	83 ec 08             	sub    esp,0x8
c001d5ca:	68 00 21 02 c0       	push   0xc0022100
c001d5cf:	50                   	push   eax
c001d5d0:	e8 2d 35 ff ff       	call   c0010b02 <InterruptController::InterruptController(char const*)>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	ba 2c 21 02 c0       	mov    edx,0xc002212c
c001d5dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e1:	89 10                	mov    DWORD PTR [eax],edx
c001d5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5ed:	0f b6 d0             	movzx  edx,al
c001d5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d605:	0f b6 d0             	movzx  edx,al
c001d608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d615:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d61b:	8d 50 01             	lea    edx,[eax+0x1]
c001d61e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d622:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d628:	0f b6 d0             	movzx  edx,al
c001d62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d633:	83 e1 3f             	and    ecx,0x3f
c001d636:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d644:	0f b6 d0             	movzx  edx,al
c001d647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d64b:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d656:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d65c:	0f b6 d0             	movzx  edx,al
c001d65f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d663:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d66c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d672:	8d 50 01             	lea    edx,[eax+0x1]
c001d675:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d679:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d67f:	0f b6 d0             	movzx  edx,al
c001d682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d686:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d68a:	83 e1 3f             	and    ecx,0x3f
c001d68d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d691:	90                   	nop
c001d692:	83 c4 0c             	add    esp,0xc
c001d695:	c3                   	ret    

c001d696 <PIC::ioWait()>:
c001d696:	eb 00                	jmp    c001d698 <PIC::ioWait()+0x2>
c001d698:	eb 00                	jmp    c001d69a <PIC::ioWait()+0x4>
c001d69a:	90                   	nop
c001d69b:	c3                   	ret    

c001d69c <PIC::getIRQReg(int)>:
c001d69c:	55                   	push   ebp
c001d69d:	89 e5                	mov    ebp,esp
c001d69f:	83 ec 10             	sub    esp,0x10
c001d6a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6a5:	0f b6 c0             	movzx  eax,al
c001d6a8:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d6ae:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d6b1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d6b4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d6b8:	ee                   	out    dx,al
c001d6b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6bc:	0f b6 c0             	movzx  eax,al
c001d6bf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d6c5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d6c8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d6cb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d6cf:	ee                   	out    dx,al
c001d6d0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d6d6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d6da:	89 c2                	mov    edx,eax
c001d6dc:	ec                   	in     al,dx
c001d6dd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d6e0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d6e3:	0f b6 c0             	movzx  eax,al
c001d6e6:	c1 e0 08             	shl    eax,0x8
c001d6e9:	89 c1                	mov    ecx,eax
c001d6eb:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d6f1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d6f5:	89 c2                	mov    edx,eax
c001d6f7:	ec                   	in     al,dx
c001d6f8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d6fb:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d6fe:	0f b6 c0             	movzx  eax,al
c001d701:	09 c8                	or     eax,ecx
c001d703:	c9                   	leave  
c001d704:	c3                   	ret    
c001d705:	90                   	nop

c001d706 <PIC::eoi(unsigned char)>:
c001d706:	55                   	push   ebp
c001d707:	89 e5                	mov    ebp,esp
c001d709:	83 ec 14             	sub    esp,0x14
c001d70c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d70f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d712:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d716:	75 1e                	jne    c001d736 <PIC::eoi(unsigned char)+0x30>
c001d718:	6a 0b                	push   0xb
c001d71a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d71d:	e8 7a ff ff ff       	call   c001d69c <PIC::getIRQReg(int)>
c001d722:	83 c4 08             	add    esp,0x8
c001d725:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d729:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d72d:	25 80 00 00 00       	and    eax,0x80
c001d732:	85 c0                	test   eax,eax
c001d734:	74 5f                	je     c001d795 <PIC::eoi(unsigned char)+0x8f>
c001d736:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d73a:	75 2d                	jne    c001d769 <PIC::eoi(unsigned char)+0x63>
c001d73c:	6a 0b                	push   0xb
c001d73e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d741:	e8 56 ff ff ff       	call   c001d69c <PIC::getIRQReg(int)>
c001d746:	83 c4 08             	add    esp,0x8
c001d749:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d74d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d750:	66 85 c0             	test   ax,ax
c001d753:	78 14                	js     c001d769 <PIC::eoi(unsigned char)+0x63>
c001d755:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d75b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d75f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d762:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d766:	ee                   	out    dx,al
c001d767:	eb 2d                	jmp    c001d796 <PIC::eoi(unsigned char)+0x90>
c001d769:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d76d:	76 12                	jbe    c001d781 <PIC::eoi(unsigned char)+0x7b>
c001d76f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d775:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d779:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d77c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d780:	ee                   	out    dx,al
c001d781:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d787:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d78b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d78e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d792:	ee                   	out    dx,al
c001d793:	eb 01                	jmp    c001d796 <PIC::eoi(unsigned char)+0x90>
c001d795:	90                   	nop
c001d796:	c9                   	leave  
c001d797:	c3                   	ret    

c001d798 <PIC::remap()>:
c001d798:	55                   	push   ebp
c001d799:	89 e5                	mov    ebp,esp
c001d79b:	83 ec 48             	sub    esp,0x48
c001d79e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d7a5:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d7ac:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d7b2:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d7b5:	89 c2                	mov    edx,eax
c001d7b7:	ec                   	in     al,dx
c001d7b8:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001d7bb:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001d7be:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001d7c1:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001d7c7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001d7ca:	89 c2                	mov    edx,eax
c001d7cc:	ec                   	in     al,dx
c001d7cd:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001d7d0:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001d7d3:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001d7d6:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001d7dc:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001d7e0:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001d7e3:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001d7e6:	ee                   	out    dx,al
c001d7e7:	83 ec 0c             	sub    esp,0xc
c001d7ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7ed:	e8 a4 fe ff ff       	call   c001d696 <PIC::ioWait()>
c001d7f2:	83 c4 10             	add    esp,0x10
c001d7f5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001d7fb:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001d7ff:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001d802:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001d805:	ee                   	out    dx,al
c001d806:	83 ec 0c             	sub    esp,0xc
c001d809:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d80c:	e8 85 fe ff ff       	call   c001d696 <PIC::ioWait()>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d817:	0f b6 c0             	movzx  eax,al
c001d81a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001d820:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001d823:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001d826:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001d829:	ee                   	out    dx,al
c001d82a:	83 ec 0c             	sub    esp,0xc
c001d82d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d830:	e8 61 fe ff ff       	call   c001d696 <PIC::ioWait()>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d83b:	0f b6 c0             	movzx  eax,al
c001d83e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001d844:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001d847:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001d84a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d84d:	ee                   	out    dx,al
c001d84e:	83 ec 0c             	sub    esp,0xc
c001d851:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d854:	e8 3d fe ff ff       	call   c001d696 <PIC::ioWait()>
c001d859:	83 c4 10             	add    esp,0x10
c001d85c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001d862:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001d866:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001d869:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001d86c:	ee                   	out    dx,al
c001d86d:	83 ec 0c             	sub    esp,0xc
c001d870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d873:	e8 1e fe ff ff       	call   c001d696 <PIC::ioWait()>
c001d878:	83 c4 10             	add    esp,0x10
c001d87b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001d881:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001d885:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001d888:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001d88b:	ee                   	out    dx,al
c001d88c:	83 ec 0c             	sub    esp,0xc
c001d88f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d892:	e8 ff fd ff ff       	call   c001d696 <PIC::ioWait()>
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001d8a0:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001d8a4:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001d8a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d8aa:	ee                   	out    dx,al
c001d8ab:	83 ec 0c             	sub    esp,0xc
c001d8ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8b1:	e8 e0 fd ff ff       	call   c001d696 <PIC::ioWait()>
c001d8b6:	83 c4 10             	add    esp,0x10
c001d8b9:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001d8bf:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001d8c3:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001d8c6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8c9:	ee                   	out    dx,al
c001d8ca:	83 ec 0c             	sub    esp,0xc
c001d8cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8d0:	e8 c1 fd ff ff       	call   c001d696 <PIC::ioWait()>
c001d8d5:	83 c4 10             	add    esp,0x10
c001d8d8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001d8dc:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001d8e2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001d8e5:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001d8e8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d8eb:	ee                   	out    dx,al
c001d8ec:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001d8f0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001d8f6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001d8f9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001d8fc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8ff:	ee                   	out    dx,al
c001d900:	90                   	nop
c001d901:	c9                   	leave  
c001d902:	c3                   	ret    
c001d903:	90                   	nop

c001d904 <PIC::open(int, int, void*)>:
c001d904:	55                   	push   ebp
c001d905:	89 e5                	mov    ebp,esp
c001d907:	83 ec 18             	sub    esp,0x18
c001d90a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001d910:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001d914:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d917:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d91b:	ee                   	out    dx,al
c001d91c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001d922:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001d926:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d929:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d92d:	ee                   	out    dx,al
c001d92e:	83 ec 0c             	sub    esp,0xc
c001d931:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d934:	e8 5f fe ff ff       	call   c001d798 <PIC::remap()>
c001d939:	83 c4 10             	add    esp,0x10
c001d93c:	b8 00 00 00 00       	mov    eax,0x0
c001d941:	c9                   	leave  
c001d942:	c3                   	ret    
c001d943:	90                   	nop

c001d944 <APICTimer::close(int, int, void*)>:
c001d944:	b8 00 00 00 00       	mov    eax,0x0
c001d949:	c3                   	ret    

c001d94a <apicTimerHandler(regs*, void*)>:
c001d94a:	83 ec 0c             	sub    esp,0xc
c001d94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d951:	8b 00                	mov    eax,DWORD PTR [eax]
c001d953:	99                   	cdq    
c001d954:	52                   	push   edx
c001d955:	50                   	push   eax
c001d956:	6a 00                	push   0x0
c001d958:	68 00 ca 9a 3b       	push   0x3b9aca00
c001d95d:	e8 6a 07 00 00       	call   c001e0cc <__udivdi3>
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	83 ec 08             	sub    esp,0x8
c001d968:	52                   	push   edx
c001d969:	50                   	push   eax
c001d96a:	e8 66 48 ff ff       	call   c00121d5 <timerHandler(unsigned long long)>
c001d96f:	83 c4 10             	add    esp,0x10
c001d972:	90                   	nop
c001d973:	83 c4 0c             	add    esp,0xc
c001d976:	c3                   	ret    
c001d977:	90                   	nop

c001d978 <APICTimer::write(int)>:
c001d978:	53                   	push   ebx
c001d979:	83 ec 28             	sub    esp,0x28
c001d97c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d980:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d984:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d98a:	e8 b3 62 ff ff       	call   c0013c42 <thisCPU()>
c001d98f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	50                   	push   eax
c001d999:	e8 0e f6 ff ff       	call   c001cfac <APIC::getBase()>
c001d99e:	83 c4 10             	add    esp,0x10
c001d9a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9a5:	a1 d0 33 02 c0       	mov    eax,ds:0xc00233d0
c001d9aa:	8b 15 d4 33 02 c0    	mov    edx,DWORD PTR ds:0xc00233d4
c001d9b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001d9b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9bc:	05 e0 03 00 00       	add    eax,0x3e0
c001d9c1:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001d9c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9cb:	05 80 03 00 00       	add    eax,0x380
c001d9d0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001d9d6:	fb                   	sti    
c001d9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9df:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001d9e4:	83 d2 00             	adc    edx,0x0
c001d9e7:	89 c1                	mov    ecx,eax
c001d9e9:	89 d3                	mov    ebx,edx
c001d9eb:	a1 d0 33 02 c0       	mov    eax,ds:0xc00233d0
c001d9f0:	8b 15 d4 33 02 c0    	mov    edx,DWORD PTR ds:0xc00233d4
c001d9f6:	39 c8                	cmp    eax,ecx
c001d9f8:	89 d0                	mov    eax,edx
c001d9fa:	19 d8                	sbb    eax,ebx
c001d9fc:	73 02                	jae    c001da00 <APICTimer::write(int)+0x88>
c001d9fe:	eb d7                	jmp    c001d9d7 <APICTimer::write(int)+0x5f>
c001da00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da04:	05 20 03 00 00       	add    eax,0x320
c001da09:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001da0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da13:	05 90 03 00 00       	add    eax,0x390
c001da18:	8b 00                	mov    eax,DWORD PTR [eax]
c001da1a:	f7 d0                	not    eax
c001da1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da20:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da28:	ba 00 00 00 00       	mov    edx,0x0
c001da2d:	f7 f3                	div    ebx
c001da2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da3d:	0d 00 00 02 00       	or     eax,0x20000
c001da42:	89 c2                	mov    edx,eax
c001da44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da48:	05 20 03 00 00       	add    eax,0x320
c001da4d:	89 10                	mov    DWORD PTR [eax],edx
c001da4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da53:	05 e0 03 00 00       	add    eax,0x3e0
c001da58:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001da5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da62:	05 80 03 00 00       	add    eax,0x380
c001da67:	89 c2                	mov    edx,eax
c001da69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001da6d:	89 02                	mov    DWORD PTR [edx],eax
c001da6f:	90                   	nop
c001da70:	83 c4 28             	add    esp,0x28
c001da73:	5b                   	pop    ebx
c001da74:	c3                   	ret    
c001da75:	90                   	nop

c001da76 <APICTimer::open(int, int, void*)>:
c001da76:	57                   	push   edi
c001da77:	56                   	push   esi
c001da78:	53                   	push   ebx
c001da79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da7d:	8b 00                	mov    eax,DWORD PTR [eax]
c001da7f:	83 c0 24             	add    eax,0x24
c001da82:	8b 00                	mov    eax,DWORD PTR [eax]
c001da84:	83 ec 08             	sub    esp,0x8
c001da87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da8f:	ff d0                	call   eax
c001da91:	83 c4 10             	add    esp,0x10
c001da94:	e8 a9 61 ff ff       	call   c0013c42 <thisCPU()>
c001da99:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001da9f:	83 ec 0c             	sub    esp,0xc
c001daa2:	50                   	push   eax
c001daa3:	e8 04 f5 ff ff       	call   c001cfac <APIC::getBase()>
c001daa8:	83 c4 10             	add    esp,0x10
c001daab:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001dab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dab5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dabb:	0f b6 f8             	movzx  edi,al
c001dabe:	89 d0                	mov    eax,edx
c001dac0:	ba 00 00 00 00       	mov    edx,0x0
c001dac5:	89 c1                	mov    ecx,eax
c001dac7:	80 e5 ff             	and    ch,0xff
c001daca:	89 cb                	mov    ebx,ecx
c001dacc:	0f b6 f2             	movzx  esi,dl
c001dacf:	89 d8                	mov    eax,ebx
c001dad1:	89 f2                	mov    edx,esi
c001dad3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dad7:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dada:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dade:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dae2:	83 e0 00             	and    eax,0x0
c001dae5:	09 d0                	or     eax,edx
c001dae7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001daeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daf5:	8d 50 01             	lea    edx,[eax+0x1]
c001daf8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dafc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001db02:	0f b6 d0             	movzx  edx,al
c001db05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db09:	83 c2 08             	add    edx,0x8
c001db0c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db10:	0f b6 c9             	movzx  ecx,cl
c001db13:	81 c9 00 00 01 00    	or     ecx,0x10000
c001db19:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db25:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001db2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db33:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001db39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db3d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001db43:	83 ec 0c             	sub    esp,0xc
c001db46:	51                   	push   ecx
c001db47:	6a 01                	push   0x1
c001db49:	68 4a d9 01 c0       	push   0xc001d94a
c001db4e:	52                   	push   edx
c001db4f:	50                   	push   eax
c001db50:	e8 e9 25 ff ff       	call   c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db55:	83 c4 20             	add    esp,0x20
c001db58:	89 c2                	mov    edx,eax
c001db5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db64:	b8 00 00 00 00       	mov    eax,0x0
c001db69:	5b                   	pop    ebx
c001db6a:	5e                   	pop    esi
c001db6b:	5f                   	pop    edi
c001db6c:	c3                   	ret    
c001db6d:	90                   	nop

c001db6e <APICTimer::APICTimer()>:
c001db6e:	83 ec 0c             	sub    esp,0xc
c001db71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db75:	83 ec 08             	sub    esp,0x8
c001db78:	68 6c 21 02 c0       	push   0xc002216c
c001db7d:	50                   	push   eax
c001db7e:	e8 c3 45 ff ff       	call   c0012146 <Timer::Timer(char const*)>
c001db83:	83 c4 10             	add    esp,0x10
c001db86:	ba 80 21 02 c0       	mov    edx,0xc0022180
c001db8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db8f:	89 10                	mov    DWORD PTR [eax],edx
c001db91:	90                   	nop
c001db92:	83 c4 0c             	add    esp,0xc
c001db95:	c3                   	ret    

c001db96 <PIT::write(int)>:
c001db96:	83 ec 10             	sub    esp,0x10
c001db99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dba1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dbab:	a3 64 4b 02 c0       	mov    ds:0xc0024b64,eax
c001dbb0:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dbb5:	99                   	cdq    
c001dbb6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dbba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dbbe:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dbc5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dbca:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dbce:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dbd3:	ee                   	out    dx,al
c001dbd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbd8:	0f b6 c0             	movzx  eax,al
c001dbdb:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dbe2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dbe6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dbea:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dbef:	ee                   	out    dx,al
c001dbf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbf4:	c1 f8 08             	sar    eax,0x8
c001dbf7:	0f b6 c0             	movzx  eax,al
c001dbfa:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dc01:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dc05:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dc09:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dc0e:	ee                   	out    dx,al
c001dc0f:	90                   	nop
c001dc10:	83 c4 10             	add    esp,0x10
c001dc13:	c3                   	ret    

c001dc14 <pitHandler(regs*, void*)>:
c001dc14:	83 ec 0c             	sub    esp,0xc
c001dc17:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c001dc1c:	99                   	cdq    
c001dc1d:	52                   	push   edx
c001dc1e:	50                   	push   eax
c001dc1f:	6a 00                	push   0x0
c001dc21:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dc26:	e8 a1 04 00 00       	call   c001e0cc <__udivdi3>
c001dc2b:	83 c4 10             	add    esp,0x10
c001dc2e:	83 ec 08             	sub    esp,0x8
c001dc31:	52                   	push   edx
c001dc32:	50                   	push   eax
c001dc33:	e8 9d 45 ff ff       	call   c00121d5 <timerHandler(unsigned long long)>
c001dc38:	83 c4 10             	add    esp,0x10
c001dc3b:	90                   	nop
c001dc3c:	83 c4 0c             	add    esp,0xc
c001dc3f:	c3                   	ret    

c001dc40 <PIT::open(int, int, void*)>:
c001dc40:	83 ec 0c             	sub    esp,0xc
c001dc43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc47:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc49:	83 c0 24             	add    eax,0x24
c001dc4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc4e:	83 ec 08             	sub    esp,0x8
c001dc51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc59:	ff d0                	call   eax
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc62:	83 ec 0c             	sub    esp,0xc
c001dc65:	6a 00                	push   0x0
c001dc67:	6a 01                	push   0x1
c001dc69:	68 14 dc 01 c0       	push   0xc001dc14
c001dc6e:	6a 00                	push   0x0
c001dc70:	50                   	push   eax
c001dc71:	e8 c8 24 ff ff       	call   c001013e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc76:	83 c4 20             	add    esp,0x20
c001dc79:	89 c2                	mov    edx,eax
c001dc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc85:	b8 00 00 00 00       	mov    eax,0x0
c001dc8a:	83 c4 0c             	add    esp,0xc
c001dc8d:	c3                   	ret    

c001dc8e <PIT::close(int, int, void*)>:
c001dc8e:	83 ec 0c             	sub    esp,0xc
c001dc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc95:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca3:	6a 01                	push   0x1
c001dca5:	68 14 dc 01 c0       	push   0xc001dc14
c001dcaa:	6a 00                	push   0x0
c001dcac:	50                   	push   eax
c001dcad:	e8 ea 24 ff ff       	call   c001019c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dcb2:	83 c4 10             	add    esp,0x10
c001dcb5:	b8 00 00 00 00       	mov    eax,0x0
c001dcba:	83 c4 0c             	add    esp,0xc
c001dcbd:	c3                   	ret    

c001dcbe <PIT::PIT()>:
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc5:	83 ec 08             	sub    esp,0x8
c001dcc8:	68 a8 21 02 c0       	push   0xc00221a8
c001dccd:	50                   	push   eax
c001dcce:	e8 73 44 ff ff       	call   c0012146 <Timer::Timer(char const*)>
c001dcd3:	83 c4 10             	add    esp,0x10
c001dcd6:	ba d0 21 02 c0       	mov    edx,0xc00221d0
c001dcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdf:	89 10                	mov    DWORD PTR [eax],edx
c001dce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dceb:	0f b6 d0             	movzx  edx,al
c001dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcfd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd03:	0f b6 d0             	movzx  edx,al
c001dd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd19:	8d 50 01             	lea    edx,[eax+0x1]
c001dd1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd20:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd26:	0f b6 d0             	movzx  edx,al
c001dd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd31:	83 e1 3f             	and    ecx,0x3f
c001dd34:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd38:	90                   	nop
c001dd39:	83 c4 0c             	add    esp,0xc
c001dd3c:	c3                   	ret    
c001dd3d:	66 90                	xchg   ax,ax
c001dd3f:	90                   	nop

c001dd40 <avxDetect>:
c001dd40:	b8 00 00 00 00       	mov    eax,0x0
c001dd45:	c3                   	ret    

c001dd46 <avxSave>:
c001dd46:	c3                   	ret    

c001dd47 <avxLoad>:
c001dd47:	c3                   	ret    

c001dd48 <avxInit>:
c001dd48:	c3                   	ret    

c001dd49 <avxClose>:
c001dd49:	c3                   	ret    
c001dd4a:	66 90                	xchg   ax,ax
c001dd4c:	66 90                	xchg   ax,ax
c001dd4e:	66 90                	xchg   ax,ax

c001dd50 <sseDetect>:
c001dd50:	b8 01 00 00 00       	mov    eax,0x1
c001dd55:	0f a2                	cpuid  
c001dd57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dd5d:	74 06                	je     c001dd65 <sseDetect.noSSE>
c001dd5f:	b8 01 00 00 00       	mov    eax,0x1
c001dd64:	c3                   	ret    

c001dd65 <sseDetect.noSSE>:
c001dd65:	b8 00 00 00 00       	mov    eax,0x0
c001dd6a:	c3                   	ret    

c001dd6b <sseSave>:
c001dd6b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001dd70:	c3                   	ret    

c001dd71 <sseLoad>:
c001dd71:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001dd76:	c3                   	ret    

c001dd77 <sseInit>:
c001dd77:	e8 40 00 00 00       	call   c001ddbc <x87Init>
c001dd7c:	0f 20 e0             	mov    eax,cr4
c001dd7f:	66 0d 00 06          	or     ax,0x600
c001dd83:	0f 22 e0             	mov    cr4,eax
c001dd86:	c3                   	ret    

c001dd87 <sseClose>:
c001dd87:	c3                   	ret    
c001dd88:	66 90                	xchg   ax,ax
c001dd8a:	66 90                	xchg   ax,ax
c001dd8c:	66 90                	xchg   ax,ax
c001dd8e:	66 90                	xchg   ax,ax

c001dd90 <value_37F>:
c001dd90:	7f 03                	jg     c001dd95 <value_37A+0x1>

c001dd92 <value_37E>:
c001dd92:	7e 03                	jle    c001dd97 <x87Detect+0x1>

c001dd94 <value_37A>:
c001dd94:	7a 03                	jp     c001dd99 <x87Detect+0x3>

c001dd96 <x87Detect>:
c001dd96:	b8 01 00 00 00       	mov    eax,0x1
c001dd9b:	0f a2                	cpuid  
c001dd9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001dda3:	74 06                	je     c001ddab <x87Detect.nox87>
c001dda5:	b8 01 00 00 00       	mov    eax,0x1
c001ddaa:	c3                   	ret    

c001ddab <x87Detect.nox87>:
c001ddab:	b8 00 00 00 00       	mov    eax,0x0
c001ddb0:	c3                   	ret    

c001ddb1 <x87Save>:
c001ddb1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001ddb6:	c3                   	ret    

c001ddb7 <x87Load>:
c001ddb7:	dd 64 24 08          	frstor [esp+0x8]
c001ddbb:	c3                   	ret    

c001ddbc <x87Init>:
c001ddbc:	9b db e3             	finit  
c001ddbf:	0f 20 c0             	mov    eax,cr0
c001ddc2:	66 25 fb ff          	and    ax,0xfffb
c001ddc6:	66 0d 22 00          	or     ax,0x22
c001ddca:	0f 22 c0             	mov    cr0,eax
c001ddcd:	0f 06                	clts   
c001ddcf:	d9 2d 94 dd 01 c0    	fldcw  WORD PTR ds:0xc001dd94
c001ddd5:	c3                   	ret    

c001ddd6 <x87Close>:
c001ddd6:	c3                   	ret    
c001ddd7:	90                   	nop

c001ddd8 <__do_global_ctors_aux>:
c001ddd8:	a1 ac ee 01 c0       	mov    eax,ds:0xc001eeac
c001dddd:	83 f8 ff             	cmp    eax,0xffffffff
c001dde0:	74 1a                	je     c001ddfc <__do_global_ctors_aux+0x24>
c001dde2:	55                   	push   ebp
c001dde3:	89 e5                	mov    ebp,esp
c001dde5:	53                   	push   ebx
c001dde6:	52                   	push   edx
c001dde7:	bb ac ee 01 c0       	mov    ebx,0xc001eeac
c001ddec:	ff d0                	call   eax
c001ddee:	83 eb 04             	sub    ebx,0x4
c001ddf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ddf3:	83 f8 ff             	cmp    eax,0xffffffff
c001ddf6:	75 f4                	jne    c001ddec <__do_global_ctors_aux+0x14>
c001ddf8:	58                   	pop    eax
c001ddf9:	5b                   	pop    ebx
c001ddfa:	5d                   	pop    ebp
c001ddfb:	c3                   	ret    
c001ddfc:	c3                   	ret    
c001ddfd:	66 90                	xchg   ax,ax
c001ddff:	90                   	nop

c001de00 <__divdi3>:
c001de00:	55                   	push   ebp
c001de01:	57                   	push   edi
c001de02:	56                   	push   esi
c001de03:	53                   	push   ebx
c001de04:	83 ec 1c             	sub    esp,0x1c
c001de07:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001de12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001de16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de1e:	85 db                	test   ebx,ebx
c001de20:	0f 88 8e 00 00 00    	js     c001deb4 <__divdi3+0xb4>
c001de26:	89 dd                	mov    ebp,ebx
c001de28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001de30:	89 d3                	mov    ebx,edx
c001de32:	85 d2                	test   edx,edx
c001de34:	79 0d                	jns    c001de43 <__divdi3+0x43>
c001de36:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001de3a:	f7 d8                	neg    eax
c001de3c:	83 d2 00             	adc    edx,0x0
c001de3f:	f7 da                	neg    edx
c001de41:	89 d3                	mov    ebx,edx
c001de43:	89 c7                	mov    edi,eax
c001de45:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001de48:	85 db                	test   ebx,ebx
c001de4a:	75 48                	jne    c001de94 <__divdi3+0x94>
c001de4c:	39 ef                	cmp    edi,ebp
c001de4e:	76 24                	jbe    c001de74 <__divdi3+0x74>
c001de50:	89 ea                	mov    edx,ebp
c001de52:	f7 f7                	div    edi
c001de54:	89 c1                	mov    ecx,eax
c001de56:	31 f6                	xor    esi,esi
c001de58:	89 c8                	mov    eax,ecx
c001de5a:	89 f2                	mov    edx,esi
c001de5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de60:	85 c9                	test   ecx,ecx
c001de62:	74 07                	je     c001de6b <__divdi3+0x6b>
c001de64:	f7 d8                	neg    eax
c001de66:	83 d2 00             	adc    edx,0x0
c001de69:	f7 da                	neg    edx
c001de6b:	83 c4 1c             	add    esp,0x1c
c001de6e:	5b                   	pop    ebx
c001de6f:	5e                   	pop    esi
c001de70:	5f                   	pop    edi
c001de71:	5d                   	pop    ebp
c001de72:	c3                   	ret    
c001de73:	90                   	nop
c001de74:	85 ff                	test   edi,edi
c001de76:	75 0b                	jne    c001de83 <__divdi3+0x83>
c001de78:	b8 01 00 00 00       	mov    eax,0x1
c001de7d:	31 d2                	xor    edx,edx
c001de7f:	f7 f3                	div    ebx
c001de81:	89 c7                	mov    edi,eax
c001de83:	31 d2                	xor    edx,edx
c001de85:	89 e8                	mov    eax,ebp
c001de87:	f7 f7                	div    edi
c001de89:	89 c6                	mov    esi,eax
c001de8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001de8e:	f7 f7                	div    edi
c001de90:	89 c1                	mov    ecx,eax
c001de92:	eb c4                	jmp    c001de58 <__divdi3+0x58>
c001de94:	39 eb                	cmp    ebx,ebp
c001de96:	77 3c                	ja     c001ded4 <__divdi3+0xd4>
c001de98:	0f bd f3             	bsr    esi,ebx
c001de9b:	83 f6 1f             	xor    esi,0x1f
c001de9e:	75 40                	jne    c001dee0 <__divdi3+0xe0>
c001dea0:	39 eb                	cmp    ebx,ebp
c001dea2:	72 09                	jb     c001dead <__divdi3+0xad>
c001dea4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dea7:	0f 87 97 00 00 00    	ja     c001df44 <__divdi3+0x144>
c001dead:	b9 01 00 00 00       	mov    ecx,0x1
c001deb2:	eb a4                	jmp    c001de58 <__divdi3+0x58>
c001deb4:	f7 d9                	neg    ecx
c001deb6:	83 d3 00             	adc    ebx,0x0
c001deb9:	f7 db                	neg    ebx
c001debb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001debe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dec2:	89 dd                	mov    ebp,ebx
c001dec4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001decc:	e9 5f ff ff ff       	jmp    c001de30 <__divdi3+0x30>
c001ded1:	8d 76 00             	lea    esi,[esi+0x0]
c001ded4:	31 f6                	xor    esi,esi
c001ded6:	31 c9                	xor    ecx,ecx
c001ded8:	e9 7b ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001dedd:	8d 76 00             	lea    esi,[esi+0x0]
c001dee0:	b8 20 00 00 00       	mov    eax,0x20
c001dee5:	29 f0                	sub    eax,esi
c001dee7:	89 f1                	mov    ecx,esi
c001dee9:	d3 e3                	shl    ebx,cl
c001deeb:	89 fa                	mov    edx,edi
c001deed:	88 c1                	mov    cl,al
c001deef:	d3 ea                	shr    edx,cl
c001def1:	09 da                	or     edx,ebx
c001def3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001def7:	89 f1                	mov    ecx,esi
c001def9:	d3 e7                	shl    edi,cl
c001defb:	89 eb                	mov    ebx,ebp
c001defd:	88 c1                	mov    cl,al
c001deff:	d3 eb                	shr    ebx,cl
c001df01:	89 f1                	mov    ecx,esi
c001df03:	d3 e5                	shl    ebp,cl
c001df05:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001df08:	88 c1                	mov    cl,al
c001df0a:	d3 ea                	shr    edx,cl
c001df0c:	09 d5                	or     ebp,edx
c001df0e:	89 e8                	mov    eax,ebp
c001df10:	89 da                	mov    edx,ebx
c001df12:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001df16:	89 d3                	mov    ebx,edx
c001df18:	89 c5                	mov    ebp,eax
c001df1a:	f7 e7                	mul    edi
c001df1c:	39 d3                	cmp    ebx,edx
c001df1e:	72 18                	jb     c001df38 <__divdi3+0x138>
c001df20:	74 0a                	je     c001df2c <__divdi3+0x12c>
c001df22:	89 e9                	mov    ecx,ebp
c001df24:	31 f6                	xor    esi,esi
c001df26:	e9 2d ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df2b:	90                   	nop
c001df2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001df2f:	89 f1                	mov    ecx,esi
c001df31:	d3 e7                	shl    edi,cl
c001df33:	39 c7                	cmp    edi,eax
c001df35:	73 eb                	jae    c001df22 <__divdi3+0x122>
c001df37:	90                   	nop
c001df38:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001df3b:	31 f6                	xor    esi,esi
c001df3d:	e9 16 ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df42:	66 90                	xchg   ax,ax
c001df44:	31 c9                	xor    ecx,ecx
c001df46:	e9 0d ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df4b:	90                   	nop

c001df4c <__moddi3>:
c001df4c:	55                   	push   ebp
c001df4d:	57                   	push   edi
c001df4e:	56                   	push   esi
c001df4f:	53                   	push   ebx
c001df50:	83 ec 2c             	sub    esp,0x2c
c001df53:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001df57:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001df5b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df5f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001df63:	85 db                	test   ebx,ebx
c001df65:	0f 88 85 00 00 00    	js     c001dff0 <__moddi3+0xa4>
c001df6b:	89 de                	mov    esi,ebx
c001df6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001df75:	89 d7                	mov    edi,edx
c001df77:	85 d2                	test   edx,edx
c001df79:	79 09                	jns    c001df84 <__moddi3+0x38>
c001df7b:	f7 d8                	neg    eax
c001df7d:	83 d2 00             	adc    edx,0x0
c001df80:	f7 da                	neg    edx
c001df82:	89 d7                	mov    edi,edx
c001df84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df88:	89 cd                	mov    ebp,ecx
c001df8a:	85 ff                	test   edi,edi
c001df8c:	75 52                	jne    c001dfe0 <__moddi3+0x94>
c001df8e:	89 c3                	mov    ebx,eax
c001df90:	39 f0                	cmp    eax,esi
c001df92:	76 24                	jbe    c001dfb8 <__moddi3+0x6c>
c001df94:	89 c8                	mov    eax,ecx
c001df96:	89 f2                	mov    edx,esi
c001df98:	f7 f3                	div    ebx
c001df9a:	89 d6                	mov    esi,edx
c001df9c:	89 f0                	mov    eax,esi
c001df9e:	31 d2                	xor    edx,edx
c001dfa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfa4:	85 c9                	test   ecx,ecx
c001dfa6:	74 07                	je     c001dfaf <__moddi3+0x63>
c001dfa8:	f7 d8                	neg    eax
c001dfaa:	83 d2 00             	adc    edx,0x0
c001dfad:	f7 da                	neg    edx
c001dfaf:	83 c4 2c             	add    esp,0x2c
c001dfb2:	5b                   	pop    ebx
c001dfb3:	5e                   	pop    esi
c001dfb4:	5f                   	pop    edi
c001dfb5:	5d                   	pop    ebp
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop
c001dfb8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfbc:	85 db                	test   ebx,ebx
c001dfbe:	75 0d                	jne    c001dfcd <__moddi3+0x81>
c001dfc0:	b8 01 00 00 00       	mov    eax,0x1
c001dfc5:	31 d2                	xor    edx,edx
c001dfc7:	f7 f7                	div    edi
c001dfc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfcd:	89 f0                	mov    eax,esi
c001dfcf:	31 d2                	xor    edx,edx
c001dfd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dfd5:	f7 f7                	div    edi
c001dfd7:	89 e8                	mov    eax,ebp
c001dfd9:	f7 f7                	div    edi
c001dfdb:	89 d6                	mov    esi,edx
c001dfdd:	eb bd                	jmp    c001df9c <__moddi3+0x50>
c001dfdf:	90                   	nop
c001dfe0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dfe4:	39 f7                	cmp    edi,esi
c001dfe6:	76 20                	jbe    c001e008 <__moddi3+0xbc>
c001dfe8:	89 c8                	mov    eax,ecx
c001dfea:	89 f2                	mov    edx,esi
c001dfec:	eb b2                	jmp    c001dfa0 <__moddi3+0x54>
c001dfee:	66 90                	xchg   ax,ax
c001dff0:	f7 d9                	neg    ecx
c001dff2:	83 d3 00             	adc    ebx,0x0
c001dff5:	f7 db                	neg    ebx
c001dff7:	89 de                	mov    esi,ebx
c001dff9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e001:	e9 6f ff ff ff       	jmp    c001df75 <__moddi3+0x29>
c001e006:	66 90                	xchg   ax,ax
c001e008:	0f bd c7             	bsr    eax,edi
c001e00b:	83 f0 1f             	xor    eax,0x1f
c001e00e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e012:	75 24                	jne    c001e038 <__moddi3+0xec>
c001e014:	39 f7                	cmp    edi,esi
c001e016:	72 06                	jb     c001e01e <__moddi3+0xd2>
c001e018:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e01c:	77 0c                	ja     c001e02a <__moddi3+0xde>
c001e01e:	89 e9                	mov    ecx,ebp
c001e020:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e024:	19 fe                	sbb    esi,edi
c001e026:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e02a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e02e:	89 f2                	mov    edx,esi
c001e030:	e9 6b ff ff ff       	jmp    c001dfa0 <__moddi3+0x54>
c001e035:	8d 76 00             	lea    esi,[esi+0x0]
c001e038:	b8 20 00 00 00       	mov    eax,0x20
c001e03d:	89 c2                	mov    edx,eax
c001e03f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e043:	29 da                	sub    edx,ebx
c001e045:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e049:	88 d9                	mov    cl,bl
c001e04b:	d3 e7                	shl    edi,cl
c001e04d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e051:	88 d1                	mov    cl,dl
c001e053:	d3 e8                	shr    eax,cl
c001e055:	09 c7                	or     edi,eax
c001e057:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e05b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e05f:	89 d8                	mov    eax,ebx
c001e061:	88 d9                	mov    cl,bl
c001e063:	d3 e7                	shl    edi,cl
c001e065:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e069:	89 f3                	mov    ebx,esi
c001e06b:	88 d1                	mov    cl,dl
c001e06d:	d3 eb                	shr    ebx,cl
c001e06f:	89 c7                	mov    edi,eax
c001e071:	88 c1                	mov    cl,al
c001e073:	d3 e6                	shl    esi,cl
c001e075:	89 e8                	mov    eax,ebp
c001e077:	88 d1                	mov    cl,dl
c001e079:	d3 e8                	shr    eax,cl
c001e07b:	09 f0                	or     eax,esi
c001e07d:	89 f9                	mov    ecx,edi
c001e07f:	d3 e5                	shl    ebp,cl
c001e081:	89 da                	mov    edx,ebx
c001e083:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e087:	89 d3                	mov    ebx,edx
c001e089:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e08d:	89 c6                	mov    esi,eax
c001e08f:	89 d1                	mov    ecx,edx
c001e091:	39 d3                	cmp    ebx,edx
c001e093:	72 27                	jb     c001e0bc <__moddi3+0x170>
c001e095:	74 21                	je     c001e0b8 <__moddi3+0x16c>
c001e097:	29 f5                	sub    ebp,esi
c001e099:	19 cb                	sbb    ebx,ecx
c001e09b:	89 de                	mov    esi,ebx
c001e09d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e0a1:	d3 e6                	shl    esi,cl
c001e0a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e0a7:	89 f9                	mov    ecx,edi
c001e0a9:	d3 ed                	shr    ebp,cl
c001e0ab:	09 ee                	or     esi,ebp
c001e0ad:	89 f0                	mov    eax,esi
c001e0af:	d3 eb                	shr    ebx,cl
c001e0b1:	89 da                	mov    edx,ebx
c001e0b3:	e9 e8 fe ff ff       	jmp    c001dfa0 <__moddi3+0x54>
c001e0b8:	39 c5                	cmp    ebp,eax
c001e0ba:	73 db                	jae    c001e097 <__moddi3+0x14b>
c001e0bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e0c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e0c4:	89 d1                	mov    ecx,edx
c001e0c6:	89 c6                	mov    esi,eax
c001e0c8:	eb cd                	jmp    c001e097 <__moddi3+0x14b>
c001e0ca:	66 90                	xchg   ax,ax

c001e0cc <__udivdi3>:
c001e0cc:	55                   	push   ebp
c001e0cd:	57                   	push   edi
c001e0ce:	56                   	push   esi
c001e0cf:	53                   	push   ebx
c001e0d0:	83 ec 1c             	sub    esp,0x1c
c001e0d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e0d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e0df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0e3:	85 d2                	test   edx,edx
c001e0e5:	75 41                	jne    c001e128 <__udivdi3+0x5c>
c001e0e7:	39 f7                	cmp    edi,esi
c001e0e9:	76 15                	jbe    c001e100 <__udivdi3+0x34>
c001e0eb:	89 e8                	mov    eax,ebp
c001e0ed:	89 f2                	mov    edx,esi
c001e0ef:	f7 f7                	div    edi
c001e0f1:	31 db                	xor    ebx,ebx
c001e0f3:	89 da                	mov    edx,ebx
c001e0f5:	83 c4 1c             	add    esp,0x1c
c001e0f8:	5b                   	pop    ebx
c001e0f9:	5e                   	pop    esi
c001e0fa:	5f                   	pop    edi
c001e0fb:	5d                   	pop    ebp
c001e0fc:	c3                   	ret    
c001e0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e100:	89 f9                	mov    ecx,edi
c001e102:	85 ff                	test   edi,edi
c001e104:	75 0b                	jne    c001e111 <__udivdi3+0x45>
c001e106:	b8 01 00 00 00       	mov    eax,0x1
c001e10b:	31 d2                	xor    edx,edx
c001e10d:	f7 f7                	div    edi
c001e10f:	89 c1                	mov    ecx,eax
c001e111:	31 d2                	xor    edx,edx
c001e113:	89 f0                	mov    eax,esi
c001e115:	f7 f1                	div    ecx
c001e117:	89 c3                	mov    ebx,eax
c001e119:	89 e8                	mov    eax,ebp
c001e11b:	f7 f1                	div    ecx
c001e11d:	89 da                	mov    edx,ebx
c001e11f:	83 c4 1c             	add    esp,0x1c
c001e122:	5b                   	pop    ebx
c001e123:	5e                   	pop    esi
c001e124:	5f                   	pop    edi
c001e125:	5d                   	pop    ebp
c001e126:	c3                   	ret    
c001e127:	90                   	nop
c001e128:	39 f2                	cmp    edx,esi
c001e12a:	77 1c                	ja     c001e148 <__udivdi3+0x7c>
c001e12c:	0f bd da             	bsr    ebx,edx
c001e12f:	83 f3 1f             	xor    ebx,0x1f
c001e132:	75 24                	jne    c001e158 <__udivdi3+0x8c>
c001e134:	39 f2                	cmp    edx,esi
c001e136:	72 08                	jb     c001e140 <__udivdi3+0x74>
c001e138:	39 ef                	cmp    edi,ebp
c001e13a:	0f 87 84 00 00 00    	ja     c001e1c4 <__udivdi3+0xf8>
c001e140:	b8 01 00 00 00       	mov    eax,0x1
c001e145:	eb ac                	jmp    c001e0f3 <__udivdi3+0x27>
c001e147:	90                   	nop
c001e148:	31 db                	xor    ebx,ebx
c001e14a:	31 c0                	xor    eax,eax
c001e14c:	89 da                	mov    edx,ebx
c001e14e:	83 c4 1c             	add    esp,0x1c
c001e151:	5b                   	pop    ebx
c001e152:	5e                   	pop    esi
c001e153:	5f                   	pop    edi
c001e154:	5d                   	pop    ebp
c001e155:	c3                   	ret    
c001e156:	66 90                	xchg   ax,ax
c001e158:	b8 20 00 00 00       	mov    eax,0x20
c001e15d:	29 d8                	sub    eax,ebx
c001e15f:	88 d9                	mov    cl,bl
c001e161:	d3 e2                	shl    edx,cl
c001e163:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e167:	89 fa                	mov    edx,edi
c001e169:	88 c1                	mov    cl,al
c001e16b:	d3 ea                	shr    edx,cl
c001e16d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e171:	09 d1                	or     ecx,edx
c001e173:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e177:	88 d9                	mov    cl,bl
c001e179:	d3 e7                	shl    edi,cl
c001e17b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e17f:	89 f7                	mov    edi,esi
c001e181:	88 c1                	mov    cl,al
c001e183:	d3 ef                	shr    edi,cl
c001e185:	88 d9                	mov    cl,bl
c001e187:	d3 e6                	shl    esi,cl
c001e189:	89 ea                	mov    edx,ebp
c001e18b:	88 c1                	mov    cl,al
c001e18d:	d3 ea                	shr    edx,cl
c001e18f:	09 d6                	or     esi,edx
c001e191:	89 f0                	mov    eax,esi
c001e193:	89 fa                	mov    edx,edi
c001e195:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e199:	89 d7                	mov    edi,edx
c001e19b:	89 c6                	mov    esi,eax
c001e19d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e1a1:	39 d7                	cmp    edi,edx
c001e1a3:	72 13                	jb     c001e1b8 <__udivdi3+0xec>
c001e1a5:	74 09                	je     c001e1b0 <__udivdi3+0xe4>
c001e1a7:	89 f0                	mov    eax,esi
c001e1a9:	31 db                	xor    ebx,ebx
c001e1ab:	e9 43 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1b0:	88 d9                	mov    cl,bl
c001e1b2:	d3 e5                	shl    ebp,cl
c001e1b4:	39 c5                	cmp    ebp,eax
c001e1b6:	73 ef                	jae    c001e1a7 <__udivdi3+0xdb>
c001e1b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e1bb:	31 db                	xor    ebx,ebx
c001e1bd:	e9 31 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1c2:	66 90                	xchg   ax,ax
c001e1c4:	31 c0                	xor    eax,eax
c001e1c6:	e9 28 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1cb:	90                   	nop

c001e1cc <__umoddi3>:
c001e1cc:	55                   	push   ebp
c001e1cd:	57                   	push   edi
c001e1ce:	56                   	push   esi
c001e1cf:	53                   	push   ebx
c001e1d0:	83 ec 1c             	sub    esp,0x1c
c001e1d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e1db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e1df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1e3:	89 da                	mov    edx,ebx
c001e1e5:	85 c0                	test   eax,eax
c001e1e7:	75 37                	jne    c001e220 <__umoddi3+0x54>
c001e1e9:	39 df                	cmp    edi,ebx
c001e1eb:	76 13                	jbe    c001e200 <__umoddi3+0x34>
c001e1ed:	89 f0                	mov    eax,esi
c001e1ef:	f7 f7                	div    edi
c001e1f1:	89 d0                	mov    eax,edx
c001e1f3:	31 d2                	xor    edx,edx
c001e1f5:	83 c4 1c             	add    esp,0x1c
c001e1f8:	5b                   	pop    ebx
c001e1f9:	5e                   	pop    esi
c001e1fa:	5f                   	pop    edi
c001e1fb:	5d                   	pop    ebp
c001e1fc:	c3                   	ret    
c001e1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e200:	89 fd                	mov    ebp,edi
c001e202:	85 ff                	test   edi,edi
c001e204:	75 0b                	jne    c001e211 <__umoddi3+0x45>
c001e206:	b8 01 00 00 00       	mov    eax,0x1
c001e20b:	31 d2                	xor    edx,edx
c001e20d:	f7 f7                	div    edi
c001e20f:	89 c5                	mov    ebp,eax
c001e211:	89 d8                	mov    eax,ebx
c001e213:	31 d2                	xor    edx,edx
c001e215:	f7 f5                	div    ebp
c001e217:	89 f0                	mov    eax,esi
c001e219:	f7 f5                	div    ebp
c001e21b:	89 d0                	mov    eax,edx
c001e21d:	eb d4                	jmp    c001e1f3 <__umoddi3+0x27>
c001e21f:	90                   	nop
c001e220:	89 f1                	mov    ecx,esi
c001e222:	39 d8                	cmp    eax,ebx
c001e224:	76 0a                	jbe    c001e230 <__umoddi3+0x64>
c001e226:	89 f0                	mov    eax,esi
c001e228:	83 c4 1c             	add    esp,0x1c
c001e22b:	5b                   	pop    ebx
c001e22c:	5e                   	pop    esi
c001e22d:	5f                   	pop    edi
c001e22e:	5d                   	pop    ebp
c001e22f:	c3                   	ret    
c001e230:	0f bd e8             	bsr    ebp,eax
c001e233:	83 f5 1f             	xor    ebp,0x1f
c001e236:	75 1c                	jne    c001e254 <__umoddi3+0x88>
c001e238:	39 d8                	cmp    eax,ebx
c001e23a:	72 04                	jb     c001e240 <__umoddi3+0x74>
c001e23c:	39 f7                	cmp    edi,esi
c001e23e:	77 08                	ja     c001e248 <__umoddi3+0x7c>
c001e240:	89 da                	mov    edx,ebx
c001e242:	29 fe                	sub    esi,edi
c001e244:	19 c2                	sbb    edx,eax
c001e246:	89 f1                	mov    ecx,esi
c001e248:	89 c8                	mov    eax,ecx
c001e24a:	83 c4 1c             	add    esp,0x1c
c001e24d:	5b                   	pop    ebx
c001e24e:	5e                   	pop    esi
c001e24f:	5f                   	pop    edi
c001e250:	5d                   	pop    ebp
c001e251:	c3                   	ret    
c001e252:	66 90                	xchg   ax,ax
c001e254:	ba 20 00 00 00       	mov    edx,0x20
c001e259:	29 ea                	sub    edx,ebp
c001e25b:	89 e9                	mov    ecx,ebp
c001e25d:	d3 e0                	shl    eax,cl
c001e25f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e263:	89 f8                	mov    eax,edi
c001e265:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e269:	88 d1                	mov    cl,dl
c001e26b:	d3 e8                	shr    eax,cl
c001e26d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e271:	09 c1                	or     ecx,eax
c001e273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e277:	89 e9                	mov    ecx,ebp
c001e279:	d3 e7                	shl    edi,cl
c001e27b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e27f:	89 d8                	mov    eax,ebx
c001e281:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e285:	88 d1                	mov    cl,dl
c001e287:	d3 e8                	shr    eax,cl
c001e289:	89 c7                	mov    edi,eax
c001e28b:	89 e9                	mov    ecx,ebp
c001e28d:	d3 e3                	shl    ebx,cl
c001e28f:	89 f0                	mov    eax,esi
c001e291:	88 d1                	mov    cl,dl
c001e293:	d3 e8                	shr    eax,cl
c001e295:	09 d8                	or     eax,ebx
c001e297:	89 e9                	mov    ecx,ebp
c001e299:	d3 e6                	shl    esi,cl
c001e29b:	89 f3                	mov    ebx,esi
c001e29d:	89 fa                	mov    edx,edi
c001e29f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e2a3:	89 d1                	mov    ecx,edx
c001e2a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2a9:	89 c6                	mov    esi,eax
c001e2ab:	89 d7                	mov    edi,edx
c001e2ad:	39 d1                	cmp    ecx,edx
c001e2af:	72 27                	jb     c001e2d8 <__umoddi3+0x10c>
c001e2b1:	74 21                	je     c001e2d4 <__umoddi3+0x108>
c001e2b3:	89 ca                	mov    edx,ecx
c001e2b5:	29 f3                	sub    ebx,esi
c001e2b7:	19 fa                	sbb    edx,edi
c001e2b9:	89 d0                	mov    eax,edx
c001e2bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e2bf:	d3 e0                	shl    eax,cl
c001e2c1:	89 e9                	mov    ecx,ebp
c001e2c3:	d3 eb                	shr    ebx,cl
c001e2c5:	09 d8                	or     eax,ebx
c001e2c7:	d3 ea                	shr    edx,cl
c001e2c9:	83 c4 1c             	add    esp,0x1c
c001e2cc:	5b                   	pop    ebx
c001e2cd:	5e                   	pop    esi
c001e2ce:	5f                   	pop    edi
c001e2cf:	5d                   	pop    ebp
c001e2d0:	c3                   	ret    
c001e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2d4:	39 c3                	cmp    ebx,eax
c001e2d6:	73 db                	jae    c001e2b3 <__umoddi3+0xe7>
c001e2d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e2dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e2e0:	89 d7                	mov    edi,edx
c001e2e2:	89 c6                	mov    esi,eax
c001e2e4:	eb cd                	jmp    c001e2b3 <__umoddi3+0xe7>
c001e2e6:	66 90                	xchg   ax,ax
c001e2e8:	66 90                	xchg   ax,ax
c001e2ea:	66 90                	xchg   ax,ax
c001e2ec:	66 90                	xchg   ax,ax
c001e2ee:	66 90                	xchg   ax,ax

c001e2f0 <fabs>:
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e303:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e307:	dd 04 24             	fld    QWORD PTR [esp]
c001e30a:	83 c4 0c             	add    esp,0xc
c001e30d:	c3                   	ret    
c001e30e:	66 90                	xchg   ax,ax

c001e310 <lrint>:
c001e310:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e314:	83 ec 04             	sub    esp,0x4
c001e317:	db 1c 24             	fistp  DWORD PTR [esp]
c001e31a:	58                   	pop    eax
c001e31b:	c3                   	ret    

c001e31c <lrintf>:
c001e31c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e320:	83 ec 04             	sub    esp,0x4
c001e323:	db 1c 24             	fistp  DWORD PTR [esp]
c001e326:	58                   	pop    eax
c001e327:	c3                   	ret    

Disassembly of section .init:

c001e328 <_init>:
c001e328:	55                   	push   ebp
c001e329:	89 e5                	mov    ebp,esp
c001e32b:	e8 e8 1d fe ff       	call   c0000118 <frame_dummy>
c001e330:	e8 a3 fa ff ff       	call   c001ddd8 <__do_global_ctors_aux>
c001e335:	5d                   	pop    ebp
c001e336:	c3                   	ret    

Disassembly of section .fini:

c001e337 <_fini>:
c001e337:	55                   	push   ebp
c001e338:	89 e5                	mov    ebp,esp
c001e33a:	e8 69 1d fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e33f:	5d                   	pop    ebp
c001e340:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e342 <Computer::~Computer()>:
c001e342:	83 ec 0c             	sub    esp,0xc
c001e345:	ba f8 fc 01 c0       	mov    edx,0xc001fcf8
c001e34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34e:	89 10                	mov    DWORD PTR [eax],edx
c001e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	50                   	push   eax
c001e358:	e8 2f 1d ff ff       	call   c001008c <Device::~Device()>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	90                   	nop
c001e361:	83 c4 0c             	add    esp,0xc
c001e364:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e366 <Computer::~Computer()>:
c001e366:	83 ec 0c             	sub    esp,0xc
c001e369:	83 ec 0c             	sub    esp,0xc
c001e36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e370:	e8 cd ff ff ff       	call   c001e342 <Computer::~Computer()>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	83 ec 08             	sub    esp,0x8
c001e37b:	68 ec 01 00 00       	push   0x1ec
c001e380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e384:	e8 76 09 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	83 c4 0c             	add    esp,0xc
c001e38f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e390 <idleCommon()>:
c001e390:	83 ec 0c             	sub    esp,0xc
c001e393:	e8 74 92 ff ff       	call   c001760c <lockScheduler()>
c001e398:	e8 a3 95 ff ff       	call   c0017940 <schedule()>
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	e9 69 92 ff ff       	jmp    c001760e <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e3a5 <CPU::readCR3()>:
c001e3a5:	83 ec 10             	sub    esp,0x10
c001e3a8:	0f 20 d8             	mov    eax,cr3
c001e3ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b3:	83 c4 10             	add    esp,0x10
c001e3b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e3b7 <CPU::writeCR3(unsigned long)>:
c001e3b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3bb:	0f 22 d8             	mov    cr3,eax
c001e3be:	90                   	nop
c001e3bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e3c0 <LinkedList<UnixFile>::~LinkedList()>:
c001e3c0:	90                   	nop
c001e3c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e3c2 <LinkedList<UnixFile>::LinkedList()>:
c001e3c2:	83 ec 0c             	sub    esp,0xc
c001e3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e405:	83 ec 0c             	sub    esp,0xc
c001e408:	68 28 ff 01 c0       	push   0xc001ff28
c001e40d:	e8 cd 09 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001e412:	83 c4 10             	add    esp,0x10
c001e415:	90                   	nop
c001e416:	83 c4 0c             	add    esp,0xc
c001e419:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e41a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e422:	75 10                	jne    c001e434 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e424:	83 ec 0c             	sub    esp,0xc
c001e427:	68 44 ff 01 c0       	push   0xc001ff44
c001e42c:	e8 17 65 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e438:	8b 00                	mov    eax,DWORD PTR [eax]
c001e43a:	85 c0                	test   eax,eax
c001e43c:	74 34                	je     c001e472 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e445:	85 c0                	test   eax,eax
c001e447:	74 29                	je     c001e472 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e450:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e454:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e45f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e469:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e470:	eb 65                	jmp    c001e4d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e476:	8b 00                	mov    eax,DWORD PTR [eax]
c001e478:	85 c0                	test   eax,eax
c001e47a:	75 4b                	jne    c001e4c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e483:	85 c0                	test   eax,eax
c001e485:	75 40                	jne    c001e4c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e48b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e48f:	89 10                	mov    DWORD PTR [eax],edx
c001e491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e495:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4b1:	85 c0                	test   eax,eax
c001e4b3:	74 22                	je     c001e4d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e4b5:	83 ec 0c             	sub    esp,0xc
c001e4b8:	68 66 ff 01 c0       	push   0xc001ff66
c001e4bd:	e8 86 64 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e4c2:	83 c4 10             	add    esp,0x10
c001e4c5:	eb 10                	jmp    c001e4d7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e4c7:	83 ec 0c             	sub    esp,0xc
c001e4ca:	68 70 ff 01 c0       	push   0xc001ff70
c001e4cf:	e8 74 64 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e4d4:	83 c4 10             	add    esp,0x10
c001e4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4de:	8d 50 01             	lea    edx,[eax+0x1]
c001e4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4e8:	90                   	nop
c001e4e9:	83 c4 0c             	add    esp,0xc
c001e4ec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e4ee <LinkedList<UnixFile>::getFirstElement()>:
c001e4ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e4f6 <LinkedList<UnixFile>::removeFirst()>:
c001e4f6:	83 ec 0c             	sub    esp,0xc
c001e4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ff:	85 c0                	test   eax,eax
c001e501:	75 12                	jne    c001e515 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e503:	83 ec 0c             	sub    esp,0xc
c001e506:	68 7c ff 01 c0       	push   0xc001ff7c
c001e50b:	e8 38 64 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	eb 7e                	jmp    c001e593 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e519:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e51c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e51f:	85 c0                	test   eax,eax
c001e521:	74 10                	je     c001e533 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	68 c7 ff 01 c0       	push   0xc001ffc7
c001e52b:	e8 18 64 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e530:	83 c4 10             	add    esp,0x10
c001e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e537:	8b 00                	mov    eax,DWORD PTR [eax]
c001e539:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e53c:	85 c0                	test   eax,eax
c001e53e:	75 33                	jne    c001e573 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e544:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e559:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e55c:	83 f8 01             	cmp    eax,0x1
c001e55f:	74 21                	je     c001e582 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e561:	83 ec 0c             	sub    esp,0xc
c001e564:	68 a0 ff 01 c0       	push   0xc001ffa0
c001e569:	e8 da 63 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e56e:	83 c4 10             	add    esp,0x10
c001e571:	eb 0f                	jmp    c001e582 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e577:	8b 00                	mov    eax,DWORD PTR [eax]
c001e579:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e580:	89 10                	mov    DWORD PTR [eax],edx
c001e582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e586:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e589:	8d 50 ff             	lea    edx,[eax-0x1]
c001e58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e590:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e593:	83 c4 0c             	add    esp,0xc
c001e596:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e598 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e59c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e59f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e5a0 <DriverlessDevice::~DriverlessDevice()>:
c001e5a0:	ba e4 06 02 c0       	mov    edx,0xc00206e4
c001e5a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5a9:	89 10                	mov    DWORD PTR [eax],edx
c001e5ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5af:	50                   	push   eax
c001e5b0:	e8 d7 1a ff ff       	call   c001008c <Device::~Device()>
c001e5b5:	83 c4 04             	add    esp,0x4
c001e5b8:	90                   	nop
c001e5b9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e5ba <DriverlessDevice::~DriverlessDevice()>:
c001e5ba:	83 ec 0c             	sub    esp,0xc
c001e5bd:	83 ec 0c             	sub    esp,0xc
c001e5c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5c4:	e8 d7 ff ff ff       	call   c001e5a0 <DriverlessDevice::~DriverlessDevice()>
c001e5c9:	83 c4 10             	add    esp,0x10
c001e5cc:	83 ec 08             	sub    esp,0x8
c001e5cf:	68 58 01 00 00       	push   0x158
c001e5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5d8:	e8 22 07 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001e5dd:	83 c4 10             	add    esp,0x10
c001e5e0:	83 c4 0c             	add    esp,0xc
c001e5e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e5e4 <LinkedList<Device>::addElement(Device*)>:
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e5ec:	75 10                	jne    c001e5fe <LinkedList<Device>::addElement(Device*)+0x1a>
c001e5ee:	83 ec 0c             	sub    esp,0xc
c001e5f1:	68 44 ff 01 c0       	push   0xc001ff44
c001e5f6:	e8 4d 63 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e5fb:	83 c4 10             	add    esp,0x10
c001e5fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e602:	8b 00                	mov    eax,DWORD PTR [eax]
c001e604:	85 c0                	test   eax,eax
c001e606:	74 3a                	je     c001e642 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e60c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e60f:	85 c0                	test   eax,eax
c001e611:	74 2f                	je     c001e642 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e617:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e61a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e61e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e62c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e633:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e636:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e640:	eb 68                	jmp    c001e6aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001e642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e646:	8b 00                	mov    eax,DWORD PTR [eax]
c001e648:	85 c0                	test   eax,eax
c001e64a:	75 4e                	jne    c001e69a <LinkedList<Device>::addElement(Device*)+0xb6>
c001e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e653:	85 c0                	test   eax,eax
c001e655:	75 43                	jne    c001e69a <LinkedList<Device>::addElement(Device*)+0xb6>
c001e657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e65b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e65f:	89 10                	mov    DWORD PTR [eax],edx
c001e661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e665:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e669:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e670:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e673:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e67d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e681:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e684:	85 c0                	test   eax,eax
c001e686:	74 22                	je     c001e6aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001e688:	83 ec 0c             	sub    esp,0xc
c001e68b:	68 66 ff 01 c0       	push   0xc001ff66
c001e690:	e8 b3 62 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e695:	83 c4 10             	add    esp,0x10
c001e698:	eb 10                	jmp    c001e6aa <LinkedList<Device>::addElement(Device*)+0xc6>
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	68 70 ff 01 c0       	push   0xc001ff70
c001e6a2:	e8 a1 62 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e6a7:	83 c4 10             	add    esp,0x10
c001e6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6b1:	8d 50 01             	lea    edx,[eax+0x1]
c001e6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6bb:	90                   	nop
c001e6bc:	83 c4 0c             	add    esp,0xc
c001e6bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e6c0 <LinkedList<Device>::LinkedList()>:
c001e6c0:	83 ec 0c             	sub    esp,0xc
c001e6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e703:	83 ec 0c             	sub    esp,0xc
c001e706:	68 28 ff 01 c0       	push   0xc001ff28
c001e70b:	e8 cf 06 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001e710:	83 c4 10             	add    esp,0x10
c001e713:	90                   	nop
c001e714:	83 c4 0c             	add    esp,0xc
c001e717:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e718 <CPU::readDR0()>:
c001e718:	83 ec 10             	sub    esp,0x10
c001e71b:	0f 21 c0             	mov    eax,db0
c001e71e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e726:	83 c4 10             	add    esp,0x10
c001e729:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001e72a <CPU::readDR1()>:
c001e72a:	83 ec 10             	sub    esp,0x10
c001e72d:	0f 21 c8             	mov    eax,db1
c001e730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e734:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e738:	83 c4 10             	add    esp,0x10
c001e73b:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001e73c <CPU::readDR2()>:
c001e73c:	83 ec 10             	sub    esp,0x10
c001e73f:	0f 21 d0             	mov    eax,db2
c001e742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e746:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e74a:	83 c4 10             	add    esp,0x10
c001e74d:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001e74e <CPU::readDR3()>:
c001e74e:	83 ec 10             	sub    esp,0x10
c001e751:	0f 21 d8             	mov    eax,db3
c001e754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e758:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e75c:	83 c4 10             	add    esp,0x10
c001e75f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001e760 <CPU::readDR6()>:
c001e760:	83 ec 10             	sub    esp,0x10
c001e763:	0f 21 f0             	mov    eax,db6
c001e766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e76a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e76e:	83 c4 10             	add    esp,0x10
c001e771:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001e772 <CPU::readDR7()>:
c001e772:	83 ec 10             	sub    esp,0x10
c001e775:	0f 21 f8             	mov    eax,db7
c001e778:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e780:	83 c4 10             	add    esp,0x10
c001e783:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e784 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e788:	8b 00                	mov    eax,DWORD PTR [eax]
c001e78a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e78c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e790:	8b 00                	mov    eax,DWORD PTR [eax]
c001e792:	85 c0                	test   eax,eax
c001e794:	75 0e                	jne    c001e7a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e79a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e79d:	85 c0                	test   eax,eax
c001e79f:	75 03                	jne    c001e7a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e7a1:	b0 01                	mov    al,0x1
c001e7a3:	c3                   	ret    
c001e7a4:	b0 00                	mov    al,0x0
c001e7a6:	90                   	nop
c001e7a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e7a8:	83 ec 0c             	sub    esp,0xc
c001e7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7af:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b1:	85 c0                	test   eax,eax
c001e7b3:	75 15                	jne    c001e7ca <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e7b5:	83 ec 0c             	sub    esp,0xc
c001e7b8:	68 7c ff 01 c0       	push   0xc001ff7c
c001e7bd:	e8 86 61 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e7c2:	83 c4 10             	add    esp,0x10
c001e7c5:	e9 88 00 00 00       	jmp    c001e852 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7d1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e7d4:	85 c0                	test   eax,eax
c001e7d6:	0f 95 c0             	setne  al
c001e7d9:	84 c0                	test   al,al
c001e7db:	74 10                	je     c001e7ed <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e7dd:	83 ec 0c             	sub    esp,0xc
c001e7e0:	68 c7 ff 01 c0       	push   0xc001ffc7
c001e7e5:	e8 5e 61 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e7f6:	85 c0                	test   eax,eax
c001e7f8:	0f 94 c0             	sete   al
c001e7fb:	84 c0                	test   al,al
c001e7fd:	74 33                	je     c001e832 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e803:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e80d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e814:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e818:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e81b:	83 f8 01             	cmp    eax,0x1
c001e81e:	74 21                	je     c001e841 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	68 a0 ff 01 c0       	push   0xc001ffa0
c001e828:	e8 1b 61 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e82d:	83 c4 10             	add    esp,0x10
c001e830:	eb 0f                	jmp    c001e841 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e836:	8b 00                	mov    eax,DWORD PTR [eax]
c001e838:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83f:	89 10                	mov    DWORD PTR [eax],edx
c001e841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e845:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e848:	8d 50 ff             	lea    edx,[eax-0x1]
c001e84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e852:	83 c4 0c             	add    esp,0xc
c001e855:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e856 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e856:	83 ec 0c             	sub    esp,0xc
c001e859:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e85e:	75 10                	jne    c001e870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	68 44 ff 01 c0       	push   0xc001ff44
c001e868:	e8 db 60 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e86d:	83 c4 10             	add    esp,0x10
c001e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e874:	8b 00                	mov    eax,DWORD PTR [eax]
c001e876:	85 c0                	test   eax,eax
c001e878:	74 34                	je     c001e8ae <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e87e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e881:	85 c0                	test   eax,eax
c001e883:	74 29                	je     c001e8ae <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e889:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e88c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e890:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e897:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e89b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8a5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e8ac:	eb 65                	jmp    c001e913 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b4:	85 c0                	test   eax,eax
c001e8b6:	75 4b                	jne    c001e903 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8bf:	85 c0                	test   eax,eax
c001e8c1:	75 40                	jne    c001e903 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001e8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8cb:	89 10                	mov    DWORD PTR [eax],edx
c001e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8ed:	85 c0                	test   eax,eax
c001e8ef:	74 22                	je     c001e913 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e8f1:	83 ec 0c             	sub    esp,0xc
c001e8f4:	68 66 ff 01 c0       	push   0xc001ff66
c001e8f9:	e8 4a 60 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e8fe:	83 c4 10             	add    esp,0x10
c001e901:	eb 10                	jmp    c001e913 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001e903:	83 ec 0c             	sub    esp,0xc
c001e906:	68 70 ff 01 c0       	push   0xc001ff70
c001e90b:	e8 38 60 ff ff       	call   c0014948 <Krnl::panic(char const*)>
c001e910:	83 c4 10             	add    esp,0x10
c001e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e917:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e91a:	8d 50 01             	lea    edx,[eax+0x1]
c001e91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e921:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e924:	90                   	nop
c001e925:	83 c4 0c             	add    esp,0xc
c001e928:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e92a <ACPI::~ACPI()>:
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	ba 48 0e 02 c0       	mov    edx,0xc0020e48
c001e932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e936:	89 10                	mov    DWORD PTR [eax],edx
c001e938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93c:	83 ec 0c             	sub    esp,0xc
c001e93f:	50                   	push   eax
c001e940:	e8 47 17 ff ff       	call   c001008c <Device::~Device()>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	90                   	nop
c001e949:	83 c4 0c             	add    esp,0xc
c001e94c:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e94e <ACPI::~ACPI()>:
c001e94e:	83 ec 0c             	sub    esp,0xc
c001e951:	83 ec 0c             	sub    esp,0xc
c001e954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e958:	e8 cd ff ff ff       	call   c001e92a <ACPI::~ACPI()>
c001e95d:	83 c4 10             	add    esp,0x10
c001e960:	83 ec 08             	sub    esp,0x8
c001e963:	68 68 22 00 00       	push   0x2268
c001e968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e96c:	e8 8e 03 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001e971:	83 c4 10             	add    esp,0x10
c001e974:	83 c4 0c             	add    esp,0xc
c001e977:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e978 <CPU::~CPU()>:
c001e978:	83 ec 0c             	sub    esp,0xc
c001e97b:	ba 98 10 02 c0       	mov    edx,0xc0021098
c001e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e984:	89 10                	mov    DWORD PTR [eax],edx
c001e986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98a:	83 ec 0c             	sub    esp,0xc
c001e98d:	50                   	push   eax
c001e98e:	e8 f9 16 ff ff       	call   c001008c <Device::~Device()>
c001e993:	83 c4 10             	add    esp,0x10
c001e996:	90                   	nop
c001e997:	83 c4 0c             	add    esp,0xc
c001e99a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e99c <CPU::~CPU()>:
c001e99c:	83 ec 0c             	sub    esp,0xc
c001e99f:	83 ec 0c             	sub    esp,0xc
c001e9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a6:	e8 cd ff ff ff       	call   c001e978 <CPU::~CPU()>
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	83 ec 08             	sub    esp,0x8
c001e9b1:	68 98 11 00 00       	push   0x1198
c001e9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ba:	e8 40 03 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	83 c4 0c             	add    esp,0xc
c001e9c5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e9c6 <CPU::readCR0()>:
c001e9c6:	83 ec 10             	sub    esp,0x10
c001e9c9:	0f 20 c0             	mov    eax,cr0
c001e9cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9d4:	83 c4 10             	add    esp,0x10
c001e9d7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e9d8 <CPU::readCR4()>:
c001e9d8:	83 ec 10             	sub    esp,0x10
c001e9db:	0f 20 e0             	mov    eax,cr4
c001e9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9e6:	83 c4 10             	add    esp,0x10
c001e9e9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001e9ea <CPU::writeDR7(unsigned long)>:
c001e9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ee:	0f 23 f8             	mov    db7,eax
c001e9f1:	90                   	nop
c001e9f2:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001e9f3 <CPU::writeCR4(unsigned long)>:
c001e9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f7:	0f 22 e0             	mov    cr4,eax
c001e9fa:	90                   	nop
c001e9fb:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e9fc <CPU::readCR2()>:
c001e9fc:	83 ec 10             	sub    esp,0x10
c001e9ff:	0f 20 d0             	mov    eax,cr2
c001ea02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea0a:	83 c4 10             	add    esp,0x10
c001ea0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ea0e <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ea0e:	90                   	nop
c001ea0f:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ea10 <ThreadControlBlock::ThreadControlBlock()>:
c001ea10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea14:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea1f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ea26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea2a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ea31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea35:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ea3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea40:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea48:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ea4c:	90                   	nop
c001ea4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ea4e <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ea4e:	83 ec 0c             	sub    esp,0xc
c001ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea91:	83 ec 0c             	sub    esp,0xc
c001ea94:	68 28 ff 01 c0       	push   0xc001ff28
c001ea99:	e8 41 03 ff ff       	call   c000eddf <Dbg::kprintf(char const*, ...)>
c001ea9e:	83 c4 10             	add    esp,0x10
c001eaa1:	90                   	nop
c001eaa2:	83 c4 0c             	add    esp,0xc
c001eaa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eaa6 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eaa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eaaa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eaad:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001eaae <PCI::~PCI()>:
c001eaae:	83 ec 0c             	sub    esp,0xc
c001eab1:	ba 68 1b 02 c0       	mov    edx,0xc0021b68
c001eab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaba:	89 10                	mov    DWORD PTR [eax],edx
c001eabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac0:	83 ec 0c             	sub    esp,0xc
c001eac3:	50                   	push   eax
c001eac4:	e8 d3 0f ff ff       	call   c000fa9c <Bus::~Bus()>
c001eac9:	83 c4 10             	add    esp,0x10
c001eacc:	90                   	nop
c001eacd:	83 c4 0c             	add    esp,0xc
c001ead0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ead2 <PCI::~PCI()>:
c001ead2:	83 ec 0c             	sub    esp,0xc
c001ead5:	83 ec 0c             	sub    esp,0xc
c001ead8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eadc:	e8 cd ff ff ff       	call   c001eaae <PCI::~PCI()>
c001eae1:	83 c4 10             	add    esp,0x10
c001eae4:	83 ec 08             	sub    esp,0x8
c001eae7:	68 58 01 00 00       	push   0x158
c001eaec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaf0:	e8 0a 02 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	83 c4 0c             	add    esp,0xc
c001eafb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001eafc <IDE::~IDE()>:
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	ba cc 1d 02 c0       	mov    edx,0xc0021dcc
c001eb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb08:	89 10                	mov    DWORD PTR [eax],edx
c001eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0e:	83 ec 0c             	sub    esp,0xc
c001eb11:	50                   	push   eax
c001eb12:	e8 8b 1a ff ff       	call   c00105a2 <HardDiskController::~HardDiskController()>
c001eb17:	83 c4 10             	add    esp,0x10
c001eb1a:	90                   	nop
c001eb1b:	83 c4 0c             	add    esp,0xc
c001eb1e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001eb20 <IDE::~IDE()>:
c001eb20:	83 ec 0c             	sub    esp,0xc
c001eb23:	83 ec 0c             	sub    esp,0xc
c001eb26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb2a:	e8 cd ff ff ff       	call   c001eafc <IDE::~IDE()>
c001eb2f:	83 c4 10             	add    esp,0x10
c001eb32:	83 ec 08             	sub    esp,0x8
c001eb35:	68 70 02 00 00       	push   0x270
c001eb3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb3e:	e8 bc 01 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001eb43:	83 c4 10             	add    esp,0x10
c001eb46:	83 c4 0c             	add    esp,0xc
c001eb49:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001eb4a <ATA::~ATA()>:
c001eb4a:	83 ec 0c             	sub    esp,0xc
c001eb4d:	ba 1c 1e 02 c0       	mov    edx,0xc0021e1c
c001eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb56:	89 10                	mov    DWORD PTR [eax],edx
c001eb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb5c:	83 ec 0c             	sub    esp,0xc
c001eb5f:	50                   	push   eax
c001eb60:	e8 1b 1b ff ff       	call   c0010680 <PhysicalDisk::~PhysicalDisk()>
c001eb65:	83 c4 10             	add    esp,0x10
c001eb68:	90                   	nop
c001eb69:	83 c4 0c             	add    esp,0xc
c001eb6c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001eb6e <ATA::~ATA()>:
c001eb6e:	83 ec 0c             	sub    esp,0xc
c001eb71:	83 ec 0c             	sub    esp,0xc
c001eb74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb78:	e8 cd ff ff ff       	call   c001eb4a <ATA::~ATA()>
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	83 ec 08             	sub    esp,0x8
c001eb83:	68 7c 01 00 00       	push   0x17c
c001eb88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb8c:	e8 6e 01 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001eb91:	83 c4 10             	add    esp,0x10
c001eb94:	83 c4 0c             	add    esp,0xc
c001eb97:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001eb98 <ATAPI::~ATAPI()>:
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	ba 88 1e 02 c0       	mov    edx,0xc0021e88
c001eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba4:	89 10                	mov    DWORD PTR [eax],edx
c001eba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	50                   	push   eax
c001ebae:	e8 cd 1a ff ff       	call   c0010680 <PhysicalDisk::~PhysicalDisk()>
c001ebb3:	83 c4 10             	add    esp,0x10
c001ebb6:	90                   	nop
c001ebb7:	83 c4 0c             	add    esp,0xc
c001ebba:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ebbc <ATAPI::~ATAPI()>:
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	83 ec 0c             	sub    esp,0xc
c001ebc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebc6:	e8 cd ff ff ff       	call   c001eb98 <ATAPI::~ATAPI()>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	83 ec 08             	sub    esp,0x8
c001ebd1:	68 80 01 00 00       	push   0x180
c001ebd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebda:	e8 20 01 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ebdf:	83 c4 10             	add    esp,0x10
c001ebe2:	83 c4 0c             	add    esp,0xc
c001ebe5:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ebe6 <AVX::~AVX()>:
c001ebe6:	83 ec 0c             	sub    esp,0xc
c001ebe9:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c001ebee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf2:	89 10                	mov    DWORD PTR [eax],edx
c001ebf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	50                   	push   eax
c001ebfc:	e8 03 1b ff ff       	call   c0010704 <FPU::~FPU()>
c001ec01:	83 c4 10             	add    esp,0x10
c001ec04:	90                   	nop
c001ec05:	83 c4 0c             	add    esp,0xc
c001ec08:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ec0a <AVX::~AVX()>:
c001ec0a:	83 ec 0c             	sub    esp,0xc
c001ec0d:	83 ec 0c             	sub    esp,0xc
c001ec10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec14:	e8 cd ff ff ff       	call   c001ebe6 <AVX::~AVX()>
c001ec19:	83 c4 10             	add    esp,0x10
c001ec1c:	83 ec 08             	sub    esp,0x8
c001ec1f:	68 58 01 00 00       	push   0x158
c001ec24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec28:	e8 d2 00 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ec2d:	83 c4 10             	add    esp,0x10
c001ec30:	83 c4 0c             	add    esp,0xc
c001ec33:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ec34 <MMX::~MMX()>:
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	ba 04 1f 02 c0       	mov    edx,0xc0021f04
c001ec3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec40:	89 10                	mov    DWORD PTR [eax],edx
c001ec42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec46:	83 ec 0c             	sub    esp,0xc
c001ec49:	50                   	push   eax
c001ec4a:	e8 b5 1a ff ff       	call   c0010704 <FPU::~FPU()>
c001ec4f:	83 c4 10             	add    esp,0x10
c001ec52:	90                   	nop
c001ec53:	83 c4 0c             	add    esp,0xc
c001ec56:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ec58 <MMX::~MMX()>:
c001ec58:	83 ec 0c             	sub    esp,0xc
c001ec5b:	83 ec 0c             	sub    esp,0xc
c001ec5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec62:	e8 cd ff ff ff       	call   c001ec34 <MMX::~MMX()>
c001ec67:	83 c4 10             	add    esp,0x10
c001ec6a:	83 ec 08             	sub    esp,0x8
c001ec6d:	68 58 01 00 00       	push   0x158
c001ec72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec76:	e8 84 00 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ec7b:	83 c4 10             	add    esp,0x10
c001ec7e:	83 c4 0c             	add    esp,0xc
c001ec81:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ec82 <SSE::~SSE()>:
c001ec82:	83 ec 0c             	sub    esp,0xc
c001ec85:	ba 44 1f 02 c0       	mov    edx,0xc0021f44
c001ec8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8e:	89 10                	mov    DWORD PTR [eax],edx
c001ec90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec94:	83 ec 0c             	sub    esp,0xc
c001ec97:	50                   	push   eax
c001ec98:	e8 67 1a ff ff       	call   c0010704 <FPU::~FPU()>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	90                   	nop
c001eca1:	83 c4 0c             	add    esp,0xc
c001eca4:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001eca6 <SSE::~SSE()>:
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	83 ec 0c             	sub    esp,0xc
c001ecac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecb0:	e8 cd ff ff ff       	call   c001ec82 <SSE::~SSE()>
c001ecb5:	83 c4 10             	add    esp,0x10
c001ecb8:	83 ec 08             	sub    esp,0x8
c001ecbb:	68 58 01 00 00       	push   0x158
c001ecc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecc4:	e8 36 00 ff ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ecc9:	83 c4 10             	add    esp,0x10
c001eccc:	83 c4 0c             	add    esp,0xc
c001eccf:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ecd0 <x87::~x87()>:
c001ecd0:	83 ec 0c             	sub    esp,0xc
c001ecd3:	ba 84 1f 02 c0       	mov    edx,0xc0021f84
c001ecd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdc:	89 10                	mov    DWORD PTR [eax],edx
c001ecde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece2:	83 ec 0c             	sub    esp,0xc
c001ece5:	50                   	push   eax
c001ece6:	e8 19 1a ff ff       	call   c0010704 <FPU::~FPU()>
c001eceb:	83 c4 10             	add    esp,0x10
c001ecee:	90                   	nop
c001ecef:	83 c4 0c             	add    esp,0xc
c001ecf2:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001ecf4 <x87::~x87()>:
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	83 ec 0c             	sub    esp,0xc
c001ecfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ecfe:	e8 cd ff ff ff       	call   c001ecd0 <x87::~x87()>
c001ed03:	83 c4 10             	add    esp,0x10
c001ed06:	83 ec 08             	sub    esp,0x8
c001ed09:	68 58 01 00 00       	push   0x158
c001ed0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed12:	e8 e8 ff fe ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ed17:	83 c4 10             	add    esp,0x10
c001ed1a:	83 c4 0c             	add    esp,0xc
c001ed1d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ed1e <IOAPIC::~IOAPIC()>:
c001ed1e:	83 ec 0c             	sub    esp,0xc
c001ed21:	ba dc 20 02 c0       	mov    edx,0xc00220dc
c001ed26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2a:	89 10                	mov    DWORD PTR [eax],edx
c001ed2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed30:	83 ec 0c             	sub    esp,0xc
c001ed33:	50                   	push   eax
c001ed34:	e8 53 13 ff ff       	call   c001008c <Device::~Device()>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	90                   	nop
c001ed3d:	83 c4 0c             	add    esp,0xc
c001ed40:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ed42 <IOAPIC::~IOAPIC()>:
c001ed42:	83 ec 0c             	sub    esp,0xc
c001ed45:	83 ec 0c             	sub    esp,0xc
c001ed48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed4c:	e8 cd ff ff ff       	call   c001ed1e <IOAPIC::~IOAPIC()>
c001ed51:	83 c4 10             	add    esp,0x10
c001ed54:	83 ec 08             	sub    esp,0x8
c001ed57:	68 68 01 00 00       	push   0x168
c001ed5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed60:	e8 9a ff fe ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ed65:	83 c4 10             	add    esp,0x10
c001ed68:	83 c4 0c             	add    esp,0xc
c001ed6b:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001ed6c <APIC::~APIC()>:
c001ed6c:	83 ec 0c             	sub    esp,0xc
c001ed6f:	ba 94 20 02 c0       	mov    edx,0xc0022094
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	89 10                	mov    DWORD PTR [eax],edx
c001ed7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7e:	83 ec 0c             	sub    esp,0xc
c001ed81:	50                   	push   eax
c001ed82:	e8 21 1e ff ff       	call   c0010ba8 <InterruptController::~InterruptController()>
c001ed87:	83 c4 10             	add    esp,0x10
c001ed8a:	90                   	nop
c001ed8b:	83 c4 0c             	add    esp,0xc
c001ed8e:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001ed90 <APIC::~APIC()>:
c001ed90:	83 ec 0c             	sub    esp,0xc
c001ed93:	83 ec 0c             	sub    esp,0xc
c001ed96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed9a:	e8 cd ff ff ff       	call   c001ed6c <APIC::~APIC()>
c001ed9f:	83 c4 10             	add    esp,0x10
c001eda2:	83 ec 08             	sub    esp,0x8
c001eda5:	68 58 21 00 00       	push   0x2158
c001edaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edae:	e8 4c ff fe ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001edb3:	83 c4 10             	add    esp,0x10
c001edb6:	83 c4 0c             	add    esp,0xc
c001edb9:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001edba <PIC::~PIC()>:
c001edba:	83 ec 0c             	sub    esp,0xc
c001edbd:	ba 2c 21 02 c0       	mov    edx,0xc002212c
c001edc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc6:	89 10                	mov    DWORD PTR [eax],edx
c001edc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	50                   	push   eax
c001edd0:	e8 d3 1d ff ff       	call   c0010ba8 <InterruptController::~InterruptController()>
c001edd5:	83 c4 10             	add    esp,0x10
c001edd8:	90                   	nop
c001edd9:	83 c4 0c             	add    esp,0xc
c001eddc:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001edde <PIC::~PIC()>:
c001edde:	83 ec 0c             	sub    esp,0xc
c001ede1:	83 ec 0c             	sub    esp,0xc
c001ede4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ede8:	e8 cd ff ff ff       	call   c001edba <PIC::~PIC()>
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	83 ec 08             	sub    esp,0x8
c001edf3:	68 58 21 00 00       	push   0x2158
c001edf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edfc:	e8 fe fe fe ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ee01:	83 c4 10             	add    esp,0x10
c001ee04:	83 c4 0c             	add    esp,0xc
c001ee07:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ee08 <APICTimer::~APICTimer()>:
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	ba 80 21 02 c0       	mov    edx,0xc0022180
c001ee10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee14:	89 10                	mov    DWORD PTR [eax],edx
c001ee16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1a:	83 ec 0c             	sub    esp,0xc
c001ee1d:	50                   	push   eax
c001ee1e:	e8 59 33 ff ff       	call   c001217c <Timer::~Timer()>
c001ee23:	83 c4 10             	add    esp,0x10
c001ee26:	90                   	nop
c001ee27:	83 c4 0c             	add    esp,0xc
c001ee2a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ee2c <APICTimer::~APICTimer()>:
c001ee2c:	83 ec 0c             	sub    esp,0xc
c001ee2f:	83 ec 0c             	sub    esp,0xc
c001ee32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee36:	e8 cd ff ff ff       	call   c001ee08 <APICTimer::~APICTimer()>
c001ee3b:	83 c4 10             	add    esp,0x10
c001ee3e:	83 ec 08             	sub    esp,0x8
c001ee41:	68 60 01 00 00       	push   0x160
c001ee46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee4a:	e8 b0 fe fe ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ee4f:	83 c4 10             	add    esp,0x10
c001ee52:	83 c4 0c             	add    esp,0xc
c001ee55:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ee56 <PIT::~PIT()>:
c001ee56:	83 ec 0c             	sub    esp,0xc
c001ee59:	ba d0 21 02 c0       	mov    edx,0xc00221d0
c001ee5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee62:	89 10                	mov    DWORD PTR [eax],edx
c001ee64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee68:	83 ec 0c             	sub    esp,0xc
c001ee6b:	50                   	push   eax
c001ee6c:	e8 0b 33 ff ff       	call   c001217c <Timer::~Timer()>
c001ee71:	83 c4 10             	add    esp,0x10
c001ee74:	90                   	nop
c001ee75:	83 c4 0c             	add    esp,0xc
c001ee78:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ee7a <PIT::~PIT()>:
c001ee7a:	83 ec 0c             	sub    esp,0xc
c001ee7d:	83 ec 0c             	sub    esp,0xc
c001ee80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee84:	e8 cd ff ff ff       	call   c001ee56 <PIT::~PIT()>
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	83 ec 08             	sub    esp,0x8
c001ee8f:	68 5c 01 00 00       	push   0x15c
c001ee94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee98:	e8 62 fe fe ff       	call   c000ecff <operator delete(void*, unsigned long)>
c001ee9d:	83 c4 10             	add    esp,0x10
c001eea0:	83 c4 0c             	add    esp,0xc
c001eea3:	c3                   	ret    
