
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d5 be 00 00       	call   c000bef5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 e9 01 00       	call   c001e9b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 40 f5 01 c0       	mov    ebx,0xc001f540
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 48 f5 01 c0    	cmp    ebx,0xc001f548
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 6c 31 02 c0       	mov    eax,0xc002316c
c0000049:	3d 6c 31 02 c0       	cmp    eax,0xc002316c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 6c 31 02 c0       	push   0xc002316c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 6c 31 02 c0       	mov    eax,0xc002316c
c0000075:	2d 6c 31 02 c0       	sub    eax,0xc002316c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 6c 31 02 c0       	push   0xc002316c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 0c 33 02 c0 00 	cmp    BYTE PTR ds:0xc002330c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 50 f5 01 c0       	mov    ebx,0xc001f550
c00000bb:	81 eb 4c f5 01 c0    	sub    ebx,0xc001f54c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 4c f5 01 c0       	mov    esi,0xc001f54c
c00000ca:	a1 10 33 02 c0       	mov    eax,ds:0xc0023310
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 10 33 02 c0       	mov    ds:0xc0023310,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 10 33 02 c0       	mov    eax,ds:0xc0023310
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 6c 31 02 c0       	push   0xc002316c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 0c 33 02 c0 01 	mov    BYTE PTR ds:0xc002330c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 14 33 02 c0       	push   0xc0023314
c000012c:	68 6c 31 02 c0       	push   0xc002316c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 59 eb 00 00       	call   c000edb8 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 6b 75 01 00       	call   c00177d4 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 57 79 01 00       	call   c0017be7 <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 fd 80 01 00       	call   c0018396 <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 2c 75 01 00       	call   c00177d4 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 50 37 02 c0 	lgdtd  ds:0xc0023750
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 85 0c 01 c0       	mov    ecx,0xc0010c85
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 85 0c 01 c0       	mov    ecx,0xc0010c85
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 2c 33 02 c0    	mov    ebx,DWORD PTR ds:0xc002332c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 2c 33 02 c0       	mov    ds:0xc002332c,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 2c 33 02 c0       	mov    eax,ds:0xc002332c
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 2c 33 02 c0    	mov    DWORD PTR ds:0xc002332c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 60 f5 01 c0 02 	test   BYTE PTR [edx-0x3ffe0aa0],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 60 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0aa0],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 60 f5 01 c0 08 	test   BYTE PTR [edx-0x3ffe0aa0],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 60 f5 01 c0 04 	test   BYTE PTR [edi-0x3ffe0aa0],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 60 f5 01 c0 01 	test   BYTE PTR [edx-0x3ffe0aa0],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d 40 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023340
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d 40 33 02 c0    	mov    DWORD PTR ds:0xc0023340,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 44 33 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdccbc]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 44 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdccbc],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d 40 33 02 c0    	mov    DWORD PTR ds:0xc0023340,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 6c 33 02 c0    	cmp    DWORD PTR ds:0xc002336c,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d 7c 33 02 c0    	mov    ecx,DWORD PTR ds:0xc002337c
c0000b8d:	c7 42 0c 74 33 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023374
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 7c 33 02 c0    	mov    DWORD PTR ds:0xc002337c,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 6c 33 02 c0    	mov    DWORD PTR ds:0xc002336c,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 40 33 02 c0 02 	test   BYTE PTR ds:0xc0023340,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 40 33 02 c0       	mov    eax,0xc0023340
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 e5 ad 00 00       	call   c000ba53 <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 27 ad 00 00       	call   c000ba53 <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 11 ad 00 00       	call   c000ba53 <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 ed ac 00 00       	call   c000ba53 <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d 40 33 02 c0    	mov    edi,DWORD PTR ds:0xc0023340
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 40 33 02 c0       	mov    eax,0xc0023340
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 44 33 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdccbc]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 44 33 02 c0 	mov    DWORD PTR [edx*4-0x3ffdccbc],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 74 33 02 c0 	lea    edx,[eax*8-0x3ffdcc8c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 40 33 02 c0       	mov    eax,0xc0023340
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 80 33 02 c0    	mov    ebx,DWORD PTR ds:0xc0023380
c0000f0f:	81 fb 74 33 02 c0    	cmp    ebx,0xc0023374
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d 74 33 02 c0       	cmp    eax,0xc0023374
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d 70 33 02 c0    	cmp    DWORD PTR ds:0xc0023370,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 7c 33 02 c0       	mov    ds:0xc002337c,eax
c0000f4b:	a3 80 33 02 c0       	mov    ds:0xc0023380,eax
c0000f50:	a3 70 33 02 c0       	mov    ds:0xc0023370,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 74 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023374
c0000f5e:	c7 40 0c 74 33 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023374
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 80 33 02 c0       	mov    ds:0xc0023380,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 74 33 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023374
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 38 33 02 c0 	lea    ebp,[edx*4-0x3ffdccc8]
c0000faf:	8b 14 95 40 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdccc0]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 40 33 02 c0 	lea    ecx,[edx*4-0x3ffdccc0]
c0000fca:	8b 14 95 40 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdccc0]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd 74 36 02 c0 	or     DWORD PTR [edi*4-0x3ffdc98c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 74 33 02 c0 	lea    eax,[eax*8-0x3ffdcc8c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d 7c 33 02 c0    	mov    DWORD PTR ds:0xc002337c,ecx
c0001084:	89 0d 80 33 02 c0    	mov    DWORD PTR ds:0xc0023380,ecx
c000108a:	c7 41 08 74 33 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023374
c0001091:	c7 41 0c 74 33 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023374
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd 6c 33 02 c0 	lea    edx,[ecx*8-0x3ffdcc94]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d 74 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc98c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d 74 36 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdc98c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 6c 33 02 c0 	lea    edx,[eax*4-0x3ffdcc94]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d 74 36 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdc98c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d 7c 33 02 c0    	mov    DWORD PTR ds:0xc002337c,edi
c0001157:	89 3d 80 33 02 c0    	mov    DWORD PTR ds:0xc0023380,edi
c000115d:	c7 47 08 74 33 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023374
c0001164:	c7 47 0c 74 33 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023374
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d 70 33 02 c0    	mov    DWORD PTR ds:0xc0023370,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 6c 33 02 c0       	mov    eax,ds:0xc002336c
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d 6c 33 02 c0    	mov    DWORD PTR ds:0xc002336c,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba 40 33 02 c0       	mov    edx,0xc0023340
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d 40 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023340,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 40 33 02 c0       	mov    eax,0xc0023340
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 94 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023694
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 94 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023694,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 94 36 02 c0    	mov    DWORD PTR ds:0xc0023694,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 6c 33 02 c0    	cmp    DWORD PTR ds:0xc002336c,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d 6c 33 02 c0    	mov    DWORD PTR ds:0xc002336c,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d 40 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023340,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 40 33 02 c0       	mov    eax,0xc0023340
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 9c 36 02 c0    	push   DWORD PTR ds:0xc002369c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d 40 33 02 c0 00 	cmp    DWORD PTR ds:0xc0023340,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 40 33 02 c0       	mov    eax,0xc0023340
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 9c 36 02 c0       	mov    eax,ds:0xc002369c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 40 33 02 c0       	mov    eax,0xc0023340
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d 6c 33 02 c0 00 	cmp    DWORD PTR ds:0xc002336c,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 40 33 02 c0       	mov    eax,0xc0023340
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 6c 33 02 c0       	mov    eax,ds:0xc002336c
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 44 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccbc]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 74 33 02 c0       	mov    eax,0xc0023374
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d 6c 36 02 c0       	cmp    eax,0xc002366c
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 a8 36 02 c0       	mov    eax,ds:0xc00236a8
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 90 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023690
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 a4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236a4
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 b4 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236b4
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 40 33 02 c0       	mov    eax,0xc0023340
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 64 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe099c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 40 33 02 c0       	mov    eax,ds:0xc0023340
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 40 33 02 c0       	mov    ds:0xc0023340,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 84 36 02 c0    	mov    DWORD PTR ds:0xc0023684,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 88 36 02 c0    	mov    DWORD PTR ds:0xc0023688,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 8c 36 02 c0    	mov    DWORD PTR ds:0xc002368c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 94 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023694,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 60 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb3a0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 ab 81 01 00       	jmp    c0019b04 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 60 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb3a0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 dc 81 01 00       	jmp    c0019b4b <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 60 4c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdb3a0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 04 82 01 00       	jmp    c0019b92 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 eb ca 01 00       	call   c001e75c <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 80 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0880]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 80 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0880]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba 58 22 02 c0       	mov    edx,0xc0022258
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba ac f7 01 c0       	mov    edx,0xc001f7ac
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 e0 36 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdc920]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 c0 36 02 c0    	mov    ax,ds:0xc00236c0
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 c0 36 02 c0    	mov    ds:0xc00236c0,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 e8 b8 01 00       	call   c001e75c <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 b2 f7 01 c0       	mov    eax,0xc001f7b2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 00 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0900]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 bb f7 01 c0       	mov    eax,0xc001f7bb
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 80 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0880]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 b3 a2 01 00       	call   c001e75c <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba 80 f6 01 c0       	mov    edx,0xc001f680
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba 90 f6 01 c0       	mov    edx,0xc001f690
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 e0 36 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc920]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 e0 36 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc920],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 7a 8c 01 00       	call   c001e75c <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 60 8c 01 00       	call   c001e75c <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 d7 f6 01 c0       	mov    eax,0xc001f6d7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 d0 f6 01 c0       	mov    eax,0xc001f6d0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 e0 36 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc920]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be c0 f6 01 c0       	mov    esi,0xc001f6c0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 a3 73 01 00       	call   c001e75c <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba a0 f7 01 c0       	mov    edx,0xc001f7a0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba b0 f6 01 c0       	mov    edx,0xc001f6b0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba c2 f7 01 c0       	mov    edx,0xc001f7c2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ce f7 01 c0       	mov    edx,0xc001f7ce
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba e2 f7 01 c0       	mov    edx,0xc001f7e2
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 36 3a 00 00       	call   c000bc06 <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 30 3a 00 00       	call   c000bc16 <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 00 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb00
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 00 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb00
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 00 f9 01 c0       	mov    eax,0xc001f900
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 40 f8 01 c0       	mov    eax,0xc001f840
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 00 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0800]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 31 37 00 00       	call   c000bc16 <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 1b 37 00 00       	call   c000bc16 <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 e0 00 02 c0    	fld    DWORD PTR ds:0xc00200e0
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 ab 63 01 00       	call   c001e980 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 d0 00 02 c0    	fld    QWORD PTR ds:0xc00200d0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 bf 33 00 00       	call   c000bc36 <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 5a 33 00 00       	call   c000bc16 <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 60 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffa0]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 e4 00 02 c0    	fld    DWORD PTR ds:0xc00200e4
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 e8 00 02 c0    	fld    DWORD PTR ds:0xc00200e8
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 d8 00 02 c0    	fcom   QWORD PTR ds:0xc00200d8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 ec 00 02 c0    	fld    DWORD PTR ds:0xc00200ec
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 e9 5e 01 00       	call   c001e9a0 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 f0 00 02 c0    	fld    DWORD PTR ds:0xc00200f0
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 e8 00 02 c0    	fld    DWORD PTR ds:0xc00200e8
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 d8 00 02 c0    	fcom   QWORD PTR ds:0xc00200d8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 ec 00 02 c0    	fld    DWORD PTR ds:0xc00200ec
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 5d 5e 01 00       	call   c001e9a0 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 ea 5d 01 00       	call   c001e9a0 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 b6 5c 01 00       	call   c001e980 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 4f 5c 01 00       	call   c001e9a0 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 dc 5b 01 00       	call   c001e980 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 f4 00 02 c0       	mov    eax,0xc00200f4
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 08 01 02 c0       	mov    eax,0xc0020108
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 2d 2d 00 00       	call   c000bc16 <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 2f 2d 00 00       	call   c000bc36 <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f1b:	83 ec 0c             	sub    esp,0xc
c0008f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f21:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 c8 02 02 c0    	fld    DWORD PTR ds:0xc00202c8
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 40 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfec0]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 5c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfea4]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 78 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe88]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 cc 02 02 c0    	fld    DWORD PTR ds:0xc00202cc
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 4e 4f 01 00       	jmp    c001e9a0 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 2b 4f 01 00       	call   c001e9a0 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 d6 4c 01 00       	call   c001e9a0 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 a1 4c 01 00       	call   c001e9a0 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 b3 4b 01 00       	call   c001e980 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 16 4b 01 00       	call   c001e9a0 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 52 4a 01 00       	call   c001e9a0 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 1d 4a 01 00       	call   c001e9a0 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 2f 49 01 00       	call   c001e980 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 97 48 01 00       	call   c001e9a0 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 d3 47 01 00       	call   c001e9a0 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 9e 47 01 00       	call   c001e9a0 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 b0 46 01 00       	call   c001e980 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 18 46 01 00       	call   c001e9a0 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 54 45 01 00       	call   c001e9a0 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 1f 45 01 00       	call   c001e9a0 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 31 44 01 00       	call   c001e980 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 99 43 01 00       	call   c001e9a0 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 d0 02 02 c0    	fld    DWORD PTR ds:0xc00202d0
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 d5 42 01 00       	call   c001e9a0 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 a0 42 01 00       	call   c001e9a0 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 38 01 02 c0    	fadd   QWORD PTR ds:0xc0020138
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 b9 41 01 00       	call   c001e980 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d c0 02 02 c0    	fcomp  QWORD PTR ds:0xc00202c0
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 1b 41 01 00       	call   c001e9a0 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 a0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe60]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 94 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe6c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 30 13 00 00       	call   c000bc16 <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 c0 00 02 c0    	fld    QWORD PTR ds:0xc00200c0
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d c8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200c8
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 ae 3f 01 00       	call   c001e9a0 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 82 3e 01 00       	call   c001e980 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 27 3e 01 00       	call   c001e9a0 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 b4 3d 01 00       	call   c001e980 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 38 01 02 c0    	fcomp  QWORD PTR ds:0xc0020138
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 d4 02 02 c0       	mov    eax,0xc00202d4
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 e5 02 02 c0       	mov    eax,0xc00202e5
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 1b 0f 00 00       	call   c000bc16 <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 1d 0f 00 00       	call   c000bc36 <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad2d:	83 ec 0c             	sub    esp,0xc
c000ad30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad33:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 e9 57 00 00       	call   c0010564 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	55                   	push   ebp
c000ada3:	89 e5                	mov    ebp,esp
c000ada5:	83 ec 08             	sub    esp,0x8
c000ada8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adab:	83 ec 08             	sub    esp,0x8
c000adae:	68 1c 03 02 c0       	push   0xc002031c
c000adb3:	50                   	push   eax
c000adb4:	e8 25 58 00 00       	call   c00105de <Device::Device(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	ba 98 03 02 c0       	mov    edx,0xc0020398
c000adc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc4:	89 10                	mov    DWORD PTR [eax],edx
c000adc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000add6:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ade3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ade9:	83 ca 04             	or     edx,0x4
c000adec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000adf5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfb:	0f b6 d0             	movzx  edx,al
c000adfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae01:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae11:	0f b6 d0             	movzx  edx,al
c000ae14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae17:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae25:	8d 50 01             	lea    edx,[eax+0x1]
c000ae28:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000ae2b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae31:	0f b6 d0             	movzx  edx,al
c000ae34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae37:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae3b:	83 e1 3f             	and    ecx,0x3f
c000ae3e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae45:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae4b:	0f b6 d0             	movzx  edx,al
c000ae4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae51:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae61:	0f b6 d0             	movzx  edx,al
c000ae64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae67:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae75:	8d 50 01             	lea    edx,[eax+0x1]
c000ae78:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000ae7b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae81:	0f b6 d0             	movzx  edx,al
c000ae84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae87:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae8b:	83 e1 3f             	and    ecx,0x3f
c000ae8e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ae95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9b:	0f b6 d0             	movzx  edx,al
c000ae9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aea1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb1:	0f b6 d0             	movzx  edx,al
c000aeb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aeb7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aebf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec5:	8d 50 01             	lea    edx,[eax+0x1]
c000aec8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000aecb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aed1:	0f b6 d0             	movzx  edx,al
c000aed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000aed7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aedb:	83 e1 3f             	and    ecx,0x3f
c000aede:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aee2:	90                   	nop
c000aee3:	c9                   	leave  
c000aee4:	c3                   	ret    
c000aee5:	90                   	nop

c000aee6 <Computer::setBootMessage(char const*)>:
c000aee6:	c3                   	ret    
c000aee7:	90                   	nop

c000aee8 <Computer::start()>:
c000aee8:	56                   	push   esi
c000aee9:	53                   	push   ebx
c000aeea:	50                   	push   eax
c000aeeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aeef:	e8 c0 cc 00 00       	call   c0017bb4 <lockScheduler()>
c000aef4:	e8 ef cf 00 00       	call   c0017ee8 <schedule()>
c000aef9:	e8 b8 cc 00 00       	call   c0017bb6 <unlockScheduler()>
c000aefe:	fb                   	sti    
c000aeff:	83 ec 0c             	sub    esp,0xc
c000af02:	68 3b 07 00 00       	push   0x73b
c000af07:	e8 e8 3f 00 00       	call   c000eef4 <operator new(unsigned long)>
c000af0c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af13:	89 c6                	mov    esi,eax
c000af15:	ff 35 94 4b 02 c0    	push   DWORD PTR ds:0xc0024b94
c000af1b:	68 25 03 02 c0       	push   0xc0020325
c000af20:	6a 01                	push   0x1
c000af22:	50                   	push   eax
c000af23:	e8 ec ca 00 00       	call   c0017a14 <Process::Process(bool, char const*, Process*, char**)>
c000af28:	83 c4 20             	add    esp,0x20
c000af2b:	68 ff 00 00 00       	push   0xff
c000af30:	6a 00                	push   0x0
c000af32:	68 93 b5 00 c0       	push   0xc000b593
c000af37:	56                   	push   esi
c000af38:	e8 a1 cd 00 00       	call   c0017cde <Process::createThread(void (*)(void*), void*, int)>
c000af3d:	6a 7a                	push   0x7a
c000af3f:	6a 00                	push   0x0
c000af41:	68 17 87 01 c0       	push   0xc0018717
c000af46:	ff 35 94 4b 02 c0    	push   DWORD PTR ds:0xc0024b94
c000af4c:	e8 8d cd 00 00       	call   c0017cde <Process::createThread(void (*)(void*), void*, int)>
c000af51:	83 c4 20             	add    esp,0x20
c000af54:	a3 48 4b 02 c0       	mov    ds:0xc0024b48,eax
c000af59:	c6 05 4d 37 02 c0 01 	mov    BYTE PTR ds:0xc002374d,0x1
c000af60:	e8 d9 43 00 00       	call   c000f33e <initVFS()>
c000af65:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af6b:	8b 10                	mov    edx,DWORD PTR [eax]
c000af6d:	6a 00                	push   0x0
c000af6f:	6a 00                	push   0x0
c000af71:	6a 00                	push   0x0
c000af73:	50                   	push   eax
c000af74:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af77:	e8 26 b5 00 00       	call   c00164a2 <setupSystemCalls()>
c000af7c:	e8 bb 4e 00 00       	call   c000fe3c <loadClockSettings()>
c000af81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af84:	e8 af 55 00 00       	call   c0010538 <Device::loadDriversForAll()>
c000af89:	5a                   	pop    edx
c000af8a:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c000af90:	59                   	pop    ecx
c000af91:	6a 01                	push   0x1
c000af93:	68 32 03 02 c0       	push   0xc0020332
c000af98:	e8 ba c6 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c000af9d:	5e                   	pop    esi
c000af9e:	5a                   	pop    edx
c000af9f:	53                   	push   ebx
c000afa0:	50                   	push   eax
c000afa1:	e8 04 c8 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c000afa6:	c7 04 24 fc 13 02 c0 	mov    DWORD PTR [esp],0xc00213fc
c000afad:	e8 31 40 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	83 ec 0c             	sub    esp,0xc
c000afb8:	6a 02                	push   0x2
c000afba:	e8 f4 d1 00 00       	call   c00181b3 <blockTask(TaskState)>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	eb f1                	jmp    c000afb5 <Computer::start()+0xcd>

c000afc4 <firstTask()>:
c000afc4:	83 ec 18             	sub    esp,0x18
c000afc7:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c000afcd:	e8 16 ff ff ff       	call   c000aee8 <Computer::start()>

c000afd2 <Computer::detectFeatures()>:
c000afd2:	55                   	push   ebp
c000afd3:	57                   	push   edi
c000afd4:	56                   	push   esi
c000afd5:	53                   	push   ebx
c000afd6:	83 ec 1c             	sub    esp,0x1c
c000afd9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afdd:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afe7:	e8 d3 52 ff ff       	call   c00002bf <detectCPUID>
c000afec:	85 c0                	test   eax,eax
c000afee:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000aff4:	0f 95 c2             	setne  dl
c000aff7:	83 e0 fd             	and    eax,0xfffffffd
c000affa:	d1 e2                	shl    edx,1
c000affc:	09 d0                	or     eax,edx
c000affe:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b004:	a8 02                	test   al,0x2
c000b006:	75 46                	jne    c000b04e <Computer::detectFeatures()+0x7c>
c000b008:	f6 05 61 37 02 c0 04 	test   BYTE PTR ds:0xc0023761,0x4
c000b00f:	74 07                	je     c000b018 <Computer::detectFeatures()+0x46>
c000b011:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b018:	e8 09 34 01 00       	call   c001e426 <x87Detect>
c000b01d:	83 e0 01             	and    eax,0x1
c000b020:	c1 e0 04             	shl    eax,0x4
c000b023:	88 c2                	mov    dl,al
c000b025:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b02b:	83 e0 ef             	and    eax,0xffffffef
c000b02e:	09 d0                	or     eax,edx
c000b030:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b036:	a8 10                	test   al,0x10
c000b038:	0f 85 10 01 00 00    	jne    c000b14e <Computer::detectFeatures()+0x17c>
c000b03e:	84 c0                	test   al,al
c000b040:	0f 88 2b 01 00 00    	js     c000b171 <Computer::detectFeatures()+0x19f>
c000b046:	83 c4 1c             	add    esp,0x1c
c000b049:	5b                   	pop    ebx
c000b04a:	5e                   	pop    esi
c000b04b:	5f                   	pop    edi
c000b04c:	5d                   	pop    ebp
c000b04d:	c3                   	ret    
c000b04e:	83 ec 0c             	sub    esp,0xc
c000b051:	6a 20                	push   0x20
c000b053:	e8 63 8e 00 00       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c000b058:	83 e0 01             	and    eax,0x1
c000b05b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b062:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b068:	83 e0 f7             	and    eax,0xfffffff7
c000b06b:	09 d0                	or     eax,edx
c000b06d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b073:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b07a:	e8 3c 8e 00 00       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c000b07f:	83 e0 01             	and    eax,0x1
c000b082:	88 c2                	mov    dl,al
c000b084:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b08a:	83 e0 fe             	and    eax,0xfffffffe
c000b08d:	09 d0                	or     eax,edx
c000b08f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b095:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b09c:	e8 1a 8e 00 00       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c000b0a1:	c1 e0 07             	shl    eax,0x7
c000b0a4:	88 c2                	mov    dl,al
c000b0a6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0ac:	83 e0 7f             	and    eax,0x7f
c000b0af:	09 d0                	or     eax,edx
c000b0b1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0b7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0be:	e8 f8 8d 00 00       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c000b0c3:	83 c4 10             	add    esp,0x10
c000b0c6:	83 e0 01             	and    eax,0x1
c000b0c9:	c1 e0 05             	shl    eax,0x5
c000b0cc:	88 c2                	mov    dl,al
c000b0ce:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0d4:	83 e0 df             	and    eax,0xffffffdf
c000b0d7:	09 d0                	or     eax,edx
c000b0d9:	f7 05 60 37 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023760,0x401
c000b0e3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0e9:	0f 84 a8 00 00 00    	je     c000b197 <Computer::detectFeatures()+0x1c5>
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b0f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b0fd:	50                   	push   eax
c000b0fe:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b102:	55                   	push   ebp
c000b103:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b107:	57                   	push   edi
c000b108:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b10c:	56                   	push   esi
c000b10d:	68 00 00 00 80       	push   0x80000000
c000b112:	e8 21 8d 00 00       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b117:	83 c4 20             	add    esp,0x20
c000b11a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b121:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b125:	0f 86 dd fe ff ff    	jbe    c000b008 <Computer::detectFeatures()+0x36>
c000b12b:	83 ec 0c             	sub    esp,0xc
c000b12e:	50                   	push   eax
c000b12f:	55                   	push   ebp
c000b130:	57                   	push   edi
c000b131:	56                   	push   esi
c000b132:	68 01 00 00 80       	push   0x80000001
c000b137:	e8 fc 8c 00 00       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b13c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b146:	83 c4 20             	add    esp,0x20
c000b149:	e9 ba fe ff ff       	jmp    c000b008 <Computer::detectFeatures()+0x36>
c000b14e:	e8 8d 32 01 00       	call   c001e3e0 <sseDetect>
c000b153:	88 c2                	mov    dl,al
c000b155:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b15b:	c1 e2 07             	shl    edx,0x7
c000b15e:	83 e0 7f             	and    eax,0x7f
c000b161:	09 d0                	or     eax,edx
c000b163:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b169:	84 c0                	test   al,al
c000b16b:	0f 89 d5 fe ff ff    	jns    c000b046 <Computer::detectFeatures()+0x74>
c000b171:	e8 5a 32 01 00       	call   c001e3d0 <avxDetect>
c000b176:	83 e0 01             	and    eax,0x1
c000b179:	c1 e0 05             	shl    eax,0x5
c000b17c:	88 c2                	mov    dl,al
c000b17e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b184:	83 e0 df             	and    eax,0xffffffdf
c000b187:	09 d0                	or     eax,edx
c000b189:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b18f:	83 c4 1c             	add    esp,0x1c
c000b192:	5b                   	pop    ebx
c000b193:	5e                   	pop    esi
c000b194:	5f                   	pop    edi
c000b195:	5d                   	pop    ebp
c000b196:	c3                   	ret    
c000b197:	83 ec 0c             	sub    esp,0xc
c000b19a:	68 00 02 00 00       	push   0x200
c000b19f:	e8 17 8d 00 00       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	e9 43 ff ff ff       	jmp    c000b0ef <Computer::detectFeatures()+0x11d>

c000b1ac <Computer::displayFeatures()>:
c000b1ac:	c3                   	ret    
c000b1ad:	90                   	nop

c000b1ae <Computer::rdmsr(unsigned int)>:
c000b1ae:	83 ec 0c             	sub    esp,0xc
c000b1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1b5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1bc:	74 0a                	je     c000b1c8 <Computer::rdmsr(unsigned int)+0x1a>
c000b1be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1c2:	0f 32                	rdmsr  
c000b1c4:	83 c4 0c             	add    esp,0xc
c000b1c7:	c3                   	ret    
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	68 4e 03 02 c0       	push   0xc002034e
c000b1d0:	e8 a3 9a 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000b1d5:	83 c4 10             	add    esp,0x10
c000b1d8:	eb e4                	jmp    c000b1be <Computer::rdmsr(unsigned int)+0x10>

c000b1da <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1da:	57                   	push   edi
c000b1db:	56                   	push   esi
c000b1dc:	52                   	push   edx
c000b1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1e5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b1e9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1f0:	74 0e                	je     c000b200 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b1f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1f6:	89 f0                	mov    eax,esi
c000b1f8:	89 fa                	mov    edx,edi
c000b1fa:	0f 30                	wrmsr  
c000b1fc:	58                   	pop    eax
c000b1fd:	5e                   	pop    esi
c000b1fe:	5f                   	pop    edi
c000b1ff:	c3                   	ret    
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	68 54 03 02 c0       	push   0xc0020354
c000b208:	e8 6b 9a 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	eb e0                	jmp    c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b212 <Computer::nmiEnabled()>:
c000b212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b216:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <Computer::readCMOS(unsigned char)>:
c000b21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b222:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b229:	19 c0                	sbb    eax,eax
c000b22b:	83 e0 80             	and    eax,0xffffff80
c000b22e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b232:	e6 70                	out    0x70,al
c000b234:	e4 71                	in     al,0x71
c000b236:	c3                   	ret    
c000b237:	90                   	nop

c000b238 <Computer::enableNMI(bool)>:
c000b238:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b240:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b246:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b24e:	eb ce                	jmp    c000b21e <Computer::readCMOS(unsigned char)>

c000b250 <Computer::open(int, int, void*)>:
c000b250:	56                   	push   esi
c000b251:	53                   	push   ebx
c000b252:	83 ec 10             	sub    esp,0x10
c000b255:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b259:	f6 05 60 37 02 c0 04 	test   BYTE PTR ds:0xc0023760,0x4
c000b260:	68 68 22 00 00       	push   0x2268
c000b265:	0f 94 05 80 2b 02 c0 	sete   BYTE PTR ds:0xc0022b80
c000b26c:	e8 83 3c 00 00       	call   c000eef4 <operator new(unsigned long)>
c000b271:	89 04 24             	mov    DWORD PTR [esp],eax
c000b274:	89 c6                	mov    esi,eax
c000b276:	e8 5d 82 00 00       	call   c00134d8 <ACPI::ACPI()>
c000b27b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b281:	58                   	pop    eax
c000b282:	5a                   	pop    edx
c000b283:	56                   	push   esi
c000b284:	53                   	push   ebx
c000b285:	e8 64 51 00 00       	call   c00103ee <Device::addChild(Device*)>
c000b28a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28d:	e8 40 fd ff ff       	call   c000afd2 <Computer::detectFeatures()>
c000b292:	59                   	pop    ecx
c000b293:	5e                   	pop    esi
c000b294:	6a 01                	push   0x1
c000b296:	53                   	push   ebx
c000b297:	e8 9c ff ff ff       	call   c000b238 <Computer::enableNMI(bool)>
c000b29c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2a3:	e8 4c 3c 00 00       	call   c000eef4 <operator new(unsigned long)>
c000b2a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2ab:	89 c6                	mov    esi,eax
c000b2ad:	e8 d4 8c 00 00       	call   c0013f86 <CPU::CPU()>
c000b2b2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2b8:	58                   	pop    eax
c000b2b9:	5a                   	pop    edx
c000b2ba:	56                   	push   esi
c000b2bb:	53                   	push   ebx
c000b2bc:	e8 2d 51 00 00       	call   c00103ee <Device::addChild(Device*)>
c000b2c1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2c7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2cd:	6a 00                	push   0x0
c000b2cf:	6a 00                	push   0x0
c000b2d1:	50                   	push   eax
c000b2d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2d5:	83 c4 20             	add    esp,0x20
c000b2d8:	e8 79 56 00 00       	call   c0010956 <setupFPU()>
c000b2dd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2e3:	85 c0                	test   eax,eax
c000b2e5:	74 1f                	je     c000b306 <Computer::open(int, int, void*)+0xb6>
c000b2e7:	83 ec 08             	sub    esp,0x8
c000b2ea:	50                   	push   eax
c000b2eb:	53                   	push   ebx
c000b2ec:	e8 fd 50 00 00       	call   c00103ee <Device::addChild(Device*)>
c000b2f1:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b2f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2f9:	6a 00                	push   0x0
c000b2fb:	6a 00                	push   0x0
c000b2fd:	6a 00                	push   0x0
c000b2ff:	50                   	push   eax
c000b300:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b303:	83 c4 20             	add    esp,0x20
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	68 c4 af 00 c0       	push   0xc000afc4
c000b30e:	e8 cb ca 00 00       	call   c0017dde <setupMultitasking(void (*)())>
c000b313:	83 c4 14             	add    esp,0x14
c000b316:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b31b:	5b                   	pop    ebx
c000b31c:	5e                   	pop    esi
c000b31d:	c3                   	ret    

c000b31e <Computer::disableNMI()>:
c000b31e:	6a 00                	push   0x0
c000b320:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b324:	e8 0f ff ff ff       	call   c000b238 <Computer::enableNMI(bool)>
c000b329:	58                   	pop    eax
c000b32a:	5a                   	pop    edx
c000b32b:	c3                   	ret    

c000b32c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b32c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b330:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b337:	19 c0                	sbb    eax,eax
c000b339:	83 e0 80             	and    eax,0xffffff80
c000b33c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b340:	e6 70                	out    0x70,al
c000b342:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b346:	e6 71                	out    0x71,al
c000b348:	c3                   	ret    
c000b349:	90                   	nop

c000b34a <Computer::handleNMI()>:
c000b34a:	56                   	push   esi
c000b34b:	53                   	push   ebx
c000b34c:	83 ec 10             	sub    esp,0x10
c000b34f:	e4 92                	in     al,0x92
c000b351:	89 c6                	mov    esi,eax
c000b353:	e4 61                	in     al,0x61
c000b355:	68 5a 03 02 c0       	push   0xc002035a
c000b35a:	88 c3                	mov    bl,al
c000b35c:	e8 82 3c 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000b361:	83 c4 10             	add    esp,0x10
c000b364:	83 e6 10             	and    esi,0x10
c000b367:	75 0d                	jne    c000b376 <Computer::handleNMI()+0x2c>
c000b369:	f6 c3 40             	test   bl,0x40
c000b36c:	75 1d                	jne    c000b38b <Computer::handleNMI()+0x41>
c000b36e:	84 db                	test   bl,bl
c000b370:	78 2d                	js     c000b39f <Computer::handleNMI()+0x55>
c000b372:	58                   	pop    eax
c000b373:	5b                   	pop    ebx
c000b374:	5e                   	pop    esi
c000b375:	c3                   	ret    
c000b376:	83 ec 0c             	sub    esp,0xc
c000b379:	68 6b 03 02 c0       	push   0xc002036b
c000b37e:	e8 f5 98 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000b383:	83 c4 10             	add    esp,0x10
c000b386:	f6 c3 40             	test   bl,0x40
c000b389:	74 e3                	je     c000b36e <Computer::handleNMI()+0x24>
c000b38b:	83 ec 0c             	sub    esp,0xc
c000b38e:	68 78 03 02 c0       	push   0xc0020378
c000b393:	e8 e0 98 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	84 db                	test   bl,bl
c000b39d:	79 d3                	jns    c000b372 <Computer::handleNMI()+0x28>
c000b39f:	c7 44 24 10 82 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020382
c000b3a7:	5a                   	pop    edx
c000b3a8:	5b                   	pop    ebx
c000b3a9:	5e                   	pop    esi
c000b3aa:	e9 c9 98 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>
c000b3af:	90                   	nop

c000b3b0 <Computer::setDiskActivityLight(int, bool)>:
c000b3b0:	56                   	push   esi
c000b3b1:	53                   	push   ebx
c000b3b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3b6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3bb:	77 1b                	ja     c000b3d8 <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3bd:	e4 92                	in     al,0x92
c000b3bf:	bb 40 00 00 00       	mov    ebx,0x40
c000b3c4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3c8:	89 da                	mov    edx,ebx
c000b3ca:	d3 e2                	shl    edx,cl
c000b3cc:	89 f1                	mov    ecx,esi
c000b3ce:	f7 d2                	not    edx
c000b3d0:	d3 e3                	shl    ebx,cl
c000b3d2:	21 d0                	and    eax,edx
c000b3d4:	09 d8                	or     eax,ebx
c000b3d6:	e6 92                	out    0x92,al
c000b3d8:	5b                   	pop    ebx
c000b3d9:	5e                   	pop    esi
c000b3da:	c3                   	ret    
c000b3db:	90                   	nop

c000b3dc <GDTEntry::setBase(unsigned int)>:
c000b3dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3e4:	89 c1                	mov    ecx,eax
c000b3e6:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b3ea:	c1 e9 10             	shr    ecx,0x10
c000b3ed:	c1 e8 18             	shr    eax,0x18
c000b3f0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b3f3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b3f6:	c3                   	ret    
c000b3f7:	90                   	nop

c000b3f8 <GDTEntry::setLimit(unsigned int)>:
c000b3f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b3fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b400:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b403:	66 89 01             	mov    WORD PTR [ecx],ax
c000b406:	83 e2 f0             	and    edx,0xfffffff0
c000b409:	c1 e8 10             	shr    eax,0x10
c000b40c:	83 e0 0f             	and    eax,0xf
c000b40f:	09 d0                	or     eax,edx
c000b411:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b414:	c3                   	ret    
c000b415:	90                   	nop

c000b416 <GDT::GDT()>:
c000b416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b424:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b42a:	90                   	nop
c000b42b:	c3                   	ret    

c000b42c <GDT::addEntry(GDTEntry)>:
c000b42c:	53                   	push   ebx
c000b42d:	83 ec 0c             	sub    esp,0xc
c000b430:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b434:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b436:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b43d:	52                   	push   edx
c000b43e:	50                   	push   eax
c000b43f:	68 bc 03 02 c0       	push   0xc00203bc
c000b444:	e8 9a 3b 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000b449:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b44b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b44f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b453:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b457:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b45b:	8d 50 01             	lea    edx,[eax+0x1]
c000b45e:	c1 e0 03             	shl    eax,0x3
c000b461:	89 13                	mov    DWORD PTR [ebx],edx
c000b463:	83 c4 18             	add    esp,0x18
c000b466:	5b                   	pop    ebx
c000b467:	c3                   	ret    

c000b468 <GDT::getNumberOfEntries()>:
c000b468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b46c:	8b 00                	mov    eax,DWORD PTR [eax]
c000b46e:	c3                   	ret    
c000b46f:	90                   	nop

c000b470 <GDT::flush()>:
c000b470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b474:	8b 10                	mov    edx,DWORD PTR [eax]
c000b476:	83 c0 04             	add    eax,0x4
c000b479:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b480:	a3 52 37 02 c0       	mov    ds:0xc0023752,eax
c000b485:	66 89 15 50 37 02 c0 	mov    WORD PTR ds:0xc0023750,dx
c000b48c:	e9 a2 4e ff ff       	jmp    c0000333 <loadGDT>
c000b491:	90                   	nop

c000b492 <GDT::setup()>:
c000b492:	55                   	push   ebp
c000b493:	57                   	push   edi
c000b494:	56                   	push   esi
c000b495:	53                   	push   ebx
c000b496:	83 ec 3c             	sub    esp,0x3c
c000b499:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b49d:	6a 00                	push   0x0
c000b49f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4a3:	53                   	push   ebx
c000b4a4:	e8 33 ff ff ff       	call   c000b3dc <GDTEntry::setBase(unsigned int)>
c000b4a9:	6a 00                	push   0x0
c000b4ab:	53                   	push   ebx
c000b4ac:	e8 47 ff ff ff       	call   c000b3f8 <GDTEntry::setLimit(unsigned int)>
c000b4b1:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4b9:	6a 00                	push   0x0
c000b4bb:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4bf:	53                   	push   ebx
c000b4c0:	e8 17 ff ff ff       	call   c000b3dc <GDTEntry::setBase(unsigned int)>
c000b4c5:	68 ff ff ff 00       	push   0xffffff
c000b4ca:	53                   	push   ebx
c000b4cb:	e8 28 ff ff ff       	call   c000b3f8 <GDTEntry::setLimit(unsigned int)>
c000b4d0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4d4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4d9:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4de:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4e2:	83 c4 20             	add    esp,0x20
c000b4e5:	6a 00                	push   0x0
c000b4e7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b4eb:	53                   	push   ebx
c000b4ec:	e8 eb fe ff ff       	call   c000b3dc <GDTEntry::setBase(unsigned int)>
c000b4f1:	68 ff ff ff 00       	push   0xffffff
c000b4f6:	53                   	push   ebx
c000b4f7:	e8 fc fe ff ff       	call   c000b3f8 <GDTEntry::setLimit(unsigned int)>
c000b4fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b500:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b504:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b508:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b50c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b510:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b515:	0d 00 92 c0 00       	or     eax,0xc09200
c000b51a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b51e:	89 d8                	mov    eax,ebx
c000b520:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b524:	80 cc 60             	or     ah,0x60
c000b527:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b52b:	83 c4 0c             	add    esp,0xc
c000b52e:	89 f8                	mov    eax,edi
c000b530:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b534:	80 cc 60             	or     ah,0x60
c000b537:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b53b:	89 c7                	mov    edi,eax
c000b53d:	55                   	push   ebp
c000b53e:	e8 e9 fe ff ff       	call   c000b42c <GDT::addEntry(GDTEntry)>
c000b543:	83 c4 0c             	add    esp,0xc
c000b546:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b54a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b54e:	55                   	push   ebp
c000b54f:	e8 d8 fe ff ff       	call   c000b42c <GDT::addEntry(GDTEntry)>
c000b554:	83 c4 0c             	add    esp,0xc
c000b557:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b55b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b55f:	55                   	push   ebp
c000b560:	e8 c7 fe ff ff       	call   c000b42c <GDT::addEntry(GDTEntry)>
c000b565:	83 c4 0c             	add    esp,0xc
c000b568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b56c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b570:	53                   	push   ebx
c000b571:	51                   	push   ecx
c000b572:	55                   	push   ebp
c000b573:	e8 b4 fe ff ff       	call   c000b42c <GDT::addEntry(GDTEntry)>
c000b578:	83 c4 0c             	add    esp,0xc
c000b57b:	57                   	push   edi
c000b57c:	56                   	push   esi
c000b57d:	55                   	push   ebp
c000b57e:	e8 a9 fe ff ff       	call   c000b42c <GDT::addEntry(GDTEntry)>
c000b583:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b586:	e8 e5 fe ff ff       	call   c000b470 <GDT::flush()>
c000b58b:	83 c4 4c             	add    esp,0x4c
c000b58e:	5b                   	pop    ebx
c000b58f:	5e                   	pop    esi
c000b590:	5f                   	pop    edi
c000b591:	5d                   	pop    ebp
c000b592:	c3                   	ret    

c000b593 <idleFunction(void*)>:
c000b593:	53                   	push   ebx
c000b594:	83 ec 08             	sub    esp,0x8
c000b597:	e8 1a c6 00 00       	call   c0017bb6 <unlockScheduler()>
c000b59c:	e8 d1 89 00 00       	call   c0013f72 <thisCPU()>
c000b5a1:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5a8:	74 41                	je     c000b5eb <idleFunction(void*)+0x58>
c000b5aa:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c000b5af:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5b6:	74 33                	je     c000b5eb <idleFunction(void*)+0x58>
c000b5b8:	31 db                	xor    ebx,ebx
c000b5ba:	52                   	push   edx
c000b5bb:	52                   	push   edx
c000b5bc:	68 e1 00 00 00       	push   0xe1
c000b5c1:	50                   	push   eax
c000b5c2:	e8 e7 fb ff ff       	call   c000b1ae <Computer::rdmsr(unsigned int)>
c000b5c7:	53                   	push   ebx
c000b5c8:	83 e0 02             	and    eax,0x2
c000b5cb:	50                   	push   eax
c000b5cc:	68 e1 00 00 00       	push   0xe1
c000b5d1:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c000b5d7:	e8 fe fb ff ff       	call   c000b1da <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5dc:	83 c4 20             	add    esp,0x20
c000b5df:	e8 6c 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5e4:	e8 34 34 01 00       	call   c001ea1d <idleCommon()>
c000b5e9:	eb f4                	jmp    c000b5df <idleFunction(void*)+0x4c>
c000b5eb:	fb                   	sti    
c000b5ec:	f4                   	hlt    
c000b5ed:	e8 2b 34 01 00       	call   c001ea1d <idleCommon()>
c000b5f2:	eb f7                	jmp    c000b5eb <idleFunction(void*)+0x58>

c000b5f4 <IDTEntry::IDTEntry(bool)>:
c000b5f4:	83 ec 04             	sub    esp,0x4
c000b5f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b5fb:	88 04 24             	mov    BYTE PTR [esp],al
c000b5fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b602:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b614:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b617:	83 e2 f0             	and    edx,0xfffffff0
c000b61a:	83 ca 0e             	or     edx,0xe
c000b61d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b627:	83 e2 ef             	and    edx,0xffffffef
c000b62a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b62d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b631:	74 04                	je     c000b637 <IDTEntry::IDTEntry(bool)+0x43>
c000b633:	b2 03                	mov    dl,0x3
c000b635:	eb 02                	jmp    c000b639 <IDTEntry::IDTEntry(bool)+0x45>
c000b637:	b2 00                	mov    dl,0x0
c000b639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b63d:	83 e2 03             	and    edx,0x3
c000b640:	88 d1                	mov    cl,dl
c000b642:	c1 e1 05             	shl    ecx,0x5
c000b645:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b648:	83 e2 9f             	and    edx,0xffffff9f
c000b64b:	09 ca                	or     edx,ecx
c000b64d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b650:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b654:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b657:	83 ca 80             	or     edx,0xffffff80
c000b65a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b65d:	90                   	nop
c000b65e:	83 c4 04             	add    esp,0x4
c000b661:	c3                   	ret    

c000b662 <IDTEntry::setOffset(unsigned int)>:
c000b662:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b66a:	66 89 02             	mov    WORD PTR [edx],ax
c000b66d:	c1 e8 10             	shr    eax,0x10
c000b670:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b674:	c3                   	ret    
c000b675:	90                   	nop

c000b676 <IDT::IDT()>:
c000b676:	90                   	nop
c000b677:	c3                   	ret    

c000b678 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67c:	83 c0 30             	add    eax,0x30
c000b67f:	c3                   	ret    

c000b680 <IDT::addEntry(IDTEntry, int)>:
c000b680:	53                   	push   ebx
c000b681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b685:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b689:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b68d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b691:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b694:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b698:	5b                   	pop    ebx
c000b699:	c3                   	ret    

c000b69a <IDT::addEntry(int, void (*)(), bool)>:
c000b69a:	53                   	push   ebx
c000b69b:	83 ec 10             	sub    esp,0x10
c000b69e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6a3:	50                   	push   eax
c000b6a4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6a8:	53                   	push   ebx
c000b6a9:	e8 46 ff ff ff       	call   c000b5f4 <IDTEntry::IDTEntry(bool)>
c000b6ae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6b2:	53                   	push   ebx
c000b6b3:	e8 aa ff ff ff       	call   c000b662 <IDTEntry::setOffset(unsigned int)>
c000b6b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6c8:	e8 b3 ff ff ff       	call   c000b680 <IDT::addEntry(IDTEntry, int)>
c000b6cd:	83 c4 30             	add    esp,0x30
c000b6d0:	5b                   	pop    ebx
c000b6d1:	c3                   	ret    

c000b6d2 <IDT::flush()>:
c000b6d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d6:	66 c7 05 58 37 02 c0 ff 07 	mov    WORD PTR ds:0xc0023758,0x7ff
c000b6df:	a3 5a 37 02 c0       	mov    ds:0xc002375a,eax
c000b6e4:	0f 01 1d 58 37 02 c0 	lidtd  ds:0xc0023758
c000b6eb:	c3                   	ret    

c000b6ec <IDT::setup()>:
c000b6ec:	57                   	push   edi
c000b6ed:	56                   	push   esi
c000b6ee:	53                   	push   ebx
c000b6ef:	83 ec 10             	sub    esp,0x10
c000b6f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b6f6:	6a 00                	push   0x0
c000b6f8:	68 53 03 00 c0       	push   0xc0000353
c000b6fd:	6a 00                	push   0x0
c000b6ff:	53                   	push   ebx
c000b700:	e8 95 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b705:	6a 00                	push   0x0
c000b707:	68 63 03 00 c0       	push   0xc0000363
c000b70c:	6a 01                	push   0x1
c000b70e:	53                   	push   ebx
c000b70f:	e8 86 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b714:	83 c4 20             	add    esp,0x20
c000b717:	6a 00                	push   0x0
c000b719:	68 6d 03 00 c0       	push   0xc000036d
c000b71e:	6a 02                	push   0x2
c000b720:	53                   	push   ebx
c000b721:	e8 74 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b726:	6a 00                	push   0x0
c000b728:	68 77 03 00 c0       	push   0xc0000377
c000b72d:	6a 03                	push   0x3
c000b72f:	53                   	push   ebx
c000b730:	e8 65 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b735:	83 c4 20             	add    esp,0x20
c000b738:	6a 00                	push   0x0
c000b73a:	68 81 03 00 c0       	push   0xc0000381
c000b73f:	6a 04                	push   0x4
c000b741:	53                   	push   ebx
c000b742:	e8 53 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b747:	6a 00                	push   0x0
c000b749:	68 8b 03 00 c0       	push   0xc000038b
c000b74e:	6a 05                	push   0x5
c000b750:	53                   	push   ebx
c000b751:	e8 44 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b756:	83 c4 20             	add    esp,0x20
c000b759:	6a 00                	push   0x0
c000b75b:	68 95 03 00 c0       	push   0xc0000395
c000b760:	6a 06                	push   0x6
c000b762:	53                   	push   ebx
c000b763:	e8 32 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b768:	6a 00                	push   0x0
c000b76a:	68 9f 03 00 c0       	push   0xc000039f
c000b76f:	6a 07                	push   0x7
c000b771:	53                   	push   ebx
c000b772:	e8 23 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b777:	83 c4 20             	add    esp,0x20
c000b77a:	6a 00                	push   0x0
c000b77c:	68 a9 03 00 c0       	push   0xc00003a9
c000b781:	6a 08                	push   0x8
c000b783:	53                   	push   ebx
c000b784:	e8 11 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b789:	6a 00                	push   0x0
c000b78b:	68 b1 03 00 c0       	push   0xc00003b1
c000b790:	6a 09                	push   0x9
c000b792:	53                   	push   ebx
c000b793:	e8 02 ff ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b798:	83 c4 20             	add    esp,0x20
c000b79b:	6a 00                	push   0x0
c000b79d:	68 bb 03 00 c0       	push   0xc00003bb
c000b7a2:	6a 0a                	push   0xa
c000b7a4:	53                   	push   ebx
c000b7a5:	e8 f0 fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b7aa:	6a 00                	push   0x0
c000b7ac:	68 c3 03 00 c0       	push   0xc00003c3
c000b7b1:	6a 0b                	push   0xb
c000b7b3:	53                   	push   ebx
c000b7b4:	e8 e1 fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b7b9:	83 c4 20             	add    esp,0x20
c000b7bc:	6a 00                	push   0x0
c000b7be:	68 cb 03 00 c0       	push   0xc00003cb
c000b7c3:	6a 0c                	push   0xc
c000b7c5:	53                   	push   ebx
c000b7c6:	e8 cf fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b7cb:	6a 00                	push   0x0
c000b7cd:	68 d3 03 00 c0       	push   0xc00003d3
c000b7d2:	6a 0d                	push   0xd
c000b7d4:	53                   	push   ebx
c000b7d5:	e8 c0 fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b7da:	83 c4 20             	add    esp,0x20
c000b7dd:	6a 00                	push   0x0
c000b7df:	68 db 03 00 c0       	push   0xc00003db
c000b7e4:	6a 0e                	push   0xe
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 ae fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b7ec:	6a 00                	push   0x0
c000b7ee:	68 e3 03 00 c0       	push   0xc00003e3
c000b7f3:	6a 0f                	push   0xf
c000b7f5:	53                   	push   ebx
c000b7f6:	e8 9f fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b7fb:	83 c4 20             	add    esp,0x20
c000b7fe:	6a 00                	push   0x0
c000b800:	68 ed 03 00 c0       	push   0xc00003ed
c000b805:	6a 10                	push   0x10
c000b807:	53                   	push   ebx
c000b808:	e8 8d fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b80d:	6a 00                	push   0x0
c000b80f:	68 f7 03 00 c0       	push   0xc00003f7
c000b814:	6a 11                	push   0x11
c000b816:	53                   	push   ebx
c000b817:	e8 7e fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b81c:	83 c4 20             	add    esp,0x20
c000b81f:	6a 00                	push   0x0
c000b821:	68 01 04 00 c0       	push   0xc0000401
c000b826:	6a 12                	push   0x12
c000b828:	53                   	push   ebx
c000b829:	e8 6c fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b82e:	6a 01                	push   0x1
c000b830:	68 0b 04 00 c0       	push   0xc000040b
c000b835:	6a 60                	push   0x60
c000b837:	53                   	push   ebx
c000b838:	e8 5d fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b83d:	83 c4 20             	add    esp,0x20
c000b840:	6a 00                	push   0x0
c000b842:	68 15 04 00 c0       	push   0xc0000415
c000b847:	6a 20                	push   0x20
c000b849:	53                   	push   ebx
c000b84a:	e8 4b fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b84f:	6a 00                	push   0x0
c000b851:	68 1f 04 00 c0       	push   0xc000041f
c000b856:	6a 21                	push   0x21
c000b858:	53                   	push   ebx
c000b859:	e8 3c fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b85e:	83 c4 20             	add    esp,0x20
c000b861:	6a 00                	push   0x0
c000b863:	68 29 04 00 c0       	push   0xc0000429
c000b868:	6a 22                	push   0x22
c000b86a:	53                   	push   ebx
c000b86b:	e8 2a fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b870:	6a 00                	push   0x0
c000b872:	68 33 04 00 c0       	push   0xc0000433
c000b877:	6a 23                	push   0x23
c000b879:	53                   	push   ebx
c000b87a:	e8 1b fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b87f:	83 c4 20             	add    esp,0x20
c000b882:	6a 00                	push   0x0
c000b884:	68 3d 04 00 c0       	push   0xc000043d
c000b889:	6a 24                	push   0x24
c000b88b:	53                   	push   ebx
c000b88c:	e8 09 fe ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b891:	6a 00                	push   0x0
c000b893:	68 47 04 00 c0       	push   0xc0000447
c000b898:	6a 25                	push   0x25
c000b89a:	53                   	push   ebx
c000b89b:	e8 fa fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b8a0:	83 c4 20             	add    esp,0x20
c000b8a3:	6a 00                	push   0x0
c000b8a5:	68 51 04 00 c0       	push   0xc0000451
c000b8aa:	6a 26                	push   0x26
c000b8ac:	53                   	push   ebx
c000b8ad:	e8 e8 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b8b2:	6a 00                	push   0x0
c000b8b4:	68 5b 04 00 c0       	push   0xc000045b
c000b8b9:	6a 27                	push   0x27
c000b8bb:	53                   	push   ebx
c000b8bc:	e8 d9 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b8c1:	83 c4 20             	add    esp,0x20
c000b8c4:	6a 00                	push   0x0
c000b8c6:	68 65 04 00 c0       	push   0xc0000465
c000b8cb:	6a 28                	push   0x28
c000b8cd:	53                   	push   ebx
c000b8ce:	e8 c7 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b8d3:	6a 00                	push   0x0
c000b8d5:	68 6f 04 00 c0       	push   0xc000046f
c000b8da:	6a 29                	push   0x29
c000b8dc:	53                   	push   ebx
c000b8dd:	e8 b8 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b8e2:	83 c4 20             	add    esp,0x20
c000b8e5:	6a 00                	push   0x0
c000b8e7:	68 79 04 00 c0       	push   0xc0000479
c000b8ec:	6a 2a                	push   0x2a
c000b8ee:	53                   	push   ebx
c000b8ef:	e8 a6 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b8f4:	6a 00                	push   0x0
c000b8f6:	68 83 04 00 c0       	push   0xc0000483
c000b8fb:	6a 2b                	push   0x2b
c000b8fd:	53                   	push   ebx
c000b8fe:	e8 97 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b903:	83 c4 20             	add    esp,0x20
c000b906:	6a 00                	push   0x0
c000b908:	68 8d 04 00 c0       	push   0xc000048d
c000b90d:	6a 2c                	push   0x2c
c000b90f:	53                   	push   ebx
c000b910:	e8 85 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b915:	6a 00                	push   0x0
c000b917:	68 97 04 00 c0       	push   0xc0000497
c000b91c:	6a 2d                	push   0x2d
c000b91e:	53                   	push   ebx
c000b91f:	e8 76 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b924:	83 c4 20             	add    esp,0x20
c000b927:	6a 00                	push   0x0
c000b929:	68 a1 04 00 c0       	push   0xc00004a1
c000b92e:	6a 2e                	push   0x2e
c000b930:	53                   	push   ebx
c000b931:	e8 64 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b936:	6a 00                	push   0x0
c000b938:	68 ab 04 00 c0       	push   0xc00004ab
c000b93d:	6a 2f                	push   0x2f
c000b93f:	53                   	push   ebx
c000b940:	e8 55 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b945:	83 c4 20             	add    esp,0x20
c000b948:	6a 00                	push   0x0
c000b94a:	68 b5 04 00 c0       	push   0xc00004b5
c000b94f:	6a 30                	push   0x30
c000b951:	53                   	push   ebx
c000b952:	e8 43 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b957:	6a 00                	push   0x0
c000b959:	68 bf 04 00 c0       	push   0xc00004bf
c000b95e:	6a 31                	push   0x31
c000b960:	53                   	push   ebx
c000b961:	e8 34 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b966:	83 c4 20             	add    esp,0x20
c000b969:	6a 00                	push   0x0
c000b96b:	68 c9 04 00 c0       	push   0xc00004c9
c000b970:	6a 32                	push   0x32
c000b972:	53                   	push   ebx
c000b973:	e8 22 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b978:	6a 00                	push   0x0
c000b97a:	68 d3 04 00 c0       	push   0xc00004d3
c000b97f:	6a 33                	push   0x33
c000b981:	53                   	push   ebx
c000b982:	e8 13 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b987:	83 c4 20             	add    esp,0x20
c000b98a:	6a 00                	push   0x0
c000b98c:	68 dd 04 00 c0       	push   0xc00004dd
c000b991:	6a 34                	push   0x34
c000b993:	53                   	push   ebx
c000b994:	e8 01 fd ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b999:	6a 00                	push   0x0
c000b99b:	68 e7 04 00 c0       	push   0xc00004e7
c000b9a0:	6a 35                	push   0x35
c000b9a2:	53                   	push   ebx
c000b9a3:	e8 f2 fc ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b9a8:	83 c4 20             	add    esp,0x20
c000b9ab:	6a 00                	push   0x0
c000b9ad:	68 f1 04 00 c0       	push   0xc00004f1
c000b9b2:	6a 36                	push   0x36
c000b9b4:	53                   	push   ebx
c000b9b5:	e8 e0 fc ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b9ba:	6a 00                	push   0x0
c000b9bc:	68 fb 04 00 c0       	push   0xc00004fb
c000b9c1:	6a 37                	push   0x37
c000b9c3:	53                   	push   ebx
c000b9c4:	e8 d1 fc ff ff       	call   c000b69a <IDT::addEntry(int, void (*)(), bool)>
c000b9c9:	83 c4 20             	add    esp,0x20
c000b9cc:	e8 22 25 00 00       	call   c000def3 <Virt::getAKernelVAS()>
c000b9d1:	52                   	push   edx
c000b9d2:	6a 03                	push   0x3
c000b9d4:	6a 02                	push   0x2
c000b9d6:	50                   	push   eax
c000b9d7:	e8 be 2a 00 00       	call   c000e49a <VAS::allocatePages(int, int)>
c000b9dc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9e3:	89 c6                	mov    esi,eax
c000b9e5:	e8 0a 35 00 00       	call   c000eef4 <operator new(unsigned long)>
c000b9ea:	81 c6 00 20 00 00    	add    esi,0x2000
c000b9f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9f3:	89 c7                	mov    edi,eax
c000b9f5:	e8 3a 1c 00 00       	call   c000d634 <TSS::TSS()>
c000b9fa:	83 c4 0c             	add    esp,0xc
c000b9fd:	68 a9 03 00 c0       	push   0xc00003a9
c000ba02:	56                   	push   esi
c000ba03:	57                   	push   edi
c000ba04:	e8 6b 1c 00 00       	call   c000d674 <TSS::setup(unsigned long, unsigned long)>
c000ba09:	59                   	pop    ecx
c000ba0a:	89 c6                	mov    esi,eax
c000ba0c:	5f                   	pop    edi
c000ba0d:	6a 00                	push   0x0
c000ba0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba13:	50                   	push   eax
c000ba14:	e8 db fb ff ff       	call   c000b5f4 <IDTEntry::IDTEntry(bool)>
c000ba19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba1d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba22:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba29:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba33:	80 ce 05             	or     dh,0x5
c000ba36:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba41:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba47:	e8 86 fc ff ff       	call   c000b6d2 <IDT::flush()>
c000ba4c:	83 c4 20             	add    esp,0x20
c000ba4f:	5b                   	pop    ebx
c000ba50:	5e                   	pop    esi
c000ba51:	5f                   	pop    edi
c000ba52:	c3                   	ret    

c000ba53 <sbrk>:
c000ba53:	55                   	push   ebp
c000ba54:	57                   	push   edi
c000ba55:	56                   	push   esi
c000ba56:	53                   	push   ebx
c000ba57:	83 ec 1c             	sub    esp,0x1c
c000ba5a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ba5e:	85 db                	test   ebx,ebx
c000ba60:	74 37                	je     c000ba99 <sbrk+0x46>
c000ba62:	78 3f                	js     c000baa3 <sbrk+0x50>
c000ba64:	e8 09 85 00 00       	call   c0013f72 <thisCPU()>
c000ba69:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ba6f:	83 e0 01             	and    eax,0x1
c000ba72:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ba76:	a1 6c 2b 02 c0       	mov    eax,ds:0xc0022b6c
c000ba7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba7f:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000ba85:	89 d8                	mov    eax,ebx
c000ba87:	78 35                	js     c000babe <sbrk+0x6b>
c000ba89:	c1 f8 0c             	sar    eax,0xc
c000ba8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba90:	89 c7                	mov    edi,eax
c000ba92:	be 00 00 00 00       	mov    esi,0x0
c000ba97:	eb 3c                	jmp    c000bad5 <sbrk+0x82>
c000ba99:	a1 6c 2b 02 c0       	mov    eax,ds:0xc0022b6c
c000ba9e:	e9 ad 00 00 00       	jmp    c000bb50 <sbrk+0xfd>
c000baa3:	83 ec 08             	sub    esp,0x8
c000baa6:	53                   	push   ebx
c000baa7:	68 d8 03 02 c0       	push   0xc00203d8
c000baac:	e8 32 35 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000bab1:	83 c4 10             	add    esp,0x10
c000bab4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bab9:	e9 92 00 00 00       	jmp    c000bb50 <sbrk+0xfd>
c000babe:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bac4:	eb c3                	jmp    c000ba89 <sbrk+0x36>
c000bac6:	81 05 6c 2b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022b6c,0x1000
c000bad0:	46                   	inc    esi
c000bad1:	39 f7                	cmp    edi,esi
c000bad3:	74 34                	je     c000bb09 <sbrk+0xb6>
c000bad5:	e8 19 24 00 00       	call   c000def3 <Virt::getAKernelVAS()>
c000bada:	89 c3                	mov    ebx,eax
c000badc:	8b 2d 6c 2b 02 c0    	mov    ebp,DWORD PTR ds:0xc0022b6c
c000bae2:	e8 c9 06 00 00       	call   c000c1b0 <Phys::allocatePage()>
c000bae7:	68 01 04 00 00       	push   0x401
c000baec:	55                   	push   ebp
c000baed:	50                   	push   eax
c000baee:	53                   	push   ebx
c000baef:	e8 a6 28 00 00       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c000baf4:	83 c4 10             	add    esp,0x10
c000baf7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bafc:	74 c8                	je     c000bac6 <sbrk+0x73>
c000bafe:	8b 1d 6c 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b6c
c000bb04:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb07:	eb bd                	jmp    c000bac6 <sbrk+0x73>
c000bb09:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bb0e:	74 48                	je     c000bb58 <sbrk+0x105>
c000bb10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb14:	89 d3                	mov    ebx,edx
c000bb16:	c1 eb 0a             	shr    ebx,0xa
c000bb19:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bb1f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bb25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb29:	c1 e0 0c             	shl    eax,0xc
c000bb2c:	01 d0                	add    eax,edx
c000bb2e:	c1 e8 0a             	shr    eax,0xa
c000bb31:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb36:	2d 00 00 40 00       	sub    eax,0x400000
c000bb3b:	39 c3                	cmp    ebx,eax
c000bb3d:	77 0d                	ja     c000bb4c <sbrk+0xf9>
c000bb3f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bb42:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bb48:	39 d8                	cmp    eax,ebx
c000bb4a:	73 f3                	jae    c000bb3f <sbrk+0xec>
c000bb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb50:	83 c4 1c             	add    esp,0x1c
c000bb53:	5b                   	pop    ebx
c000bb54:	5e                   	pop    esi
c000bb55:	5f                   	pop    edi
c000bb56:	5d                   	pop    ebp
c000bb57:	c3                   	ret    
c000bb58:	e8 d5 2e 01 00       	call   c001ea32 <CPU::readCR3()>
c000bb5d:	83 ec 0c             	sub    esp,0xc
c000bb60:	50                   	push   eax
c000bb61:	e8 de 2e 01 00       	call   c001ea44 <CPU::writeCR3(unsigned long)>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	eb e1                	jmp    c000bb4c <sbrk+0xf9>

c000bb6b <mmap>:
c000bb6b:	83 ec 18             	sub    esp,0x18
c000bb6e:	68 08 04 02 c0       	push   0xc0020408
c000bb73:	e8 00 91 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000bb78:	b8 00 00 00 00       	mov    eax,0x0
c000bb7d:	83 c4 1c             	add    esp,0x1c
c000bb80:	c3                   	ret    

c000bb81 <munmap>:
c000bb81:	83 ec 18             	sub    esp,0x18
c000bb84:	68 0d 04 02 c0       	push   0xc002040d
c000bb89:	e8 ea 90 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000bb8e:	b8 00 00 00 00       	mov    eax,0x0
c000bb93:	83 c4 1c             	add    esp,0x1c
c000bb96:	c3                   	ret    

c000bb97 <liballoc_lock()>:
c000bb97:	83 ec 0c             	sub    esp,0xc
c000bb9a:	e8 15 c0 00 00       	call   c0017bb4 <lockScheduler()>
c000bb9f:	b8 00 00 00 00       	mov    eax,0x0
c000bba4:	83 c4 0c             	add    esp,0xc
c000bba7:	c3                   	ret    

c000bba8 <liballoc_unlock()>:
c000bba8:	83 ec 0c             	sub    esp,0xc
c000bbab:	e8 06 c0 00 00       	call   c0017bb6 <unlockScheduler()>
c000bbb0:	b8 00 00 00 00       	mov    eax,0x0
c000bbb5:	83 c4 0c             	add    esp,0xc
c000bbb8:	c3                   	ret    

c000bbb9 <liballoc_alloc(int)>:
c000bbb9:	83 ec 0c             	sub    esp,0xc
c000bbbc:	e8 32 23 00 00       	call   c000def3 <Virt::getAKernelVAS()>
c000bbc1:	83 ec 04             	sub    esp,0x4
c000bbc4:	6a 01                	push   0x1
c000bbc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbca:	50                   	push   eax
c000bbcb:	e8 ca 28 00 00       	call   c000e49a <VAS::allocatePages(int, int)>
c000bbd0:	83 c4 1c             	add    esp,0x1c
c000bbd3:	c3                   	ret    

c000bbd4 <liballoc_free(void*, int)>:
c000bbd4:	83 ec 0c             	sub    esp,0xc
c000bbd7:	e8 17 23 00 00       	call   c000def3 <Virt::getAKernelVAS()>
c000bbdc:	83 ec 08             	sub    esp,0x8
c000bbdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbe3:	50                   	push   eax
c000bbe4:	e8 d3 25 00 00       	call   c000e1bc <VAS::freeAllocatedPages(unsigned long)>
c000bbe9:	b8 00 00 00 00       	mov    eax,0x0
c000bbee:	83 c4 1c             	add    esp,0x1c
c000bbf1:	c3                   	ret    

c000bbf2 <realloc>:
c000bbf2:	83 ec 14             	sub    esp,0x14
c000bbf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbfd:	e8 7f 57 ff ff       	call   c0001381 <dlrealloc>
c000bc02:	83 c4 1c             	add    esp,0x1c
c000bc05:	c3                   	ret    

c000bc06 <malloc>:
c000bc06:	83 ec 18             	sub    esp,0x18
c000bc09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc0d:	e8 32 52 ff ff       	call   c0000e44 <dlmalloc>
c000bc12:	83 c4 1c             	add    esp,0x1c
c000bc15:	c3                   	ret    

c000bc16 <free>:
c000bc16:	83 ec 18             	sub    esp,0x18
c000bc19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc1d:	e8 c7 4e ff ff       	call   c0000ae9 <dlfree>
c000bc22:	83 c4 1c             	add    esp,0x1c
c000bc25:	c3                   	ret    

c000bc26 <rfree>:
c000bc26:	83 ec 18             	sub    esp,0x18
c000bc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc2d:	e8 e4 ff ff ff       	call   c000bc16 <free>
c000bc32:	83 c4 1c             	add    esp,0x1c
c000bc35:	c3                   	ret    

c000bc36 <calloc>:
c000bc36:	56                   	push   esi
c000bc37:	53                   	push   ebx
c000bc38:	83 ec 10             	sub    esp,0x10
c000bc3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bc3f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bc44:	53                   	push   ebx
c000bc45:	e8 bc ff ff ff       	call   c000bc06 <malloc>
c000bc4a:	89 c6                	mov    esi,eax
c000bc4c:	83 c4 0c             	add    esp,0xc
c000bc4f:	53                   	push   ebx
c000bc50:	6a 00                	push   0x0
c000bc52:	50                   	push   eax
c000bc53:	e8 b0 49 ff ff       	call   c0000608 <memset>
c000bc58:	89 f0                	mov    eax,esi
c000bc5a:	83 c4 14             	add    esp,0x14
c000bc5d:	5b                   	pop    ebx
c000bc5e:	5e                   	pop    esi
c000bc5f:	c3                   	ret    

c000bc60 <hwTextMode_loadInData(VgaText*)>:
c000bc60:	57                   	push   edi
c000bc61:	56                   	push   esi
c000bc62:	53                   	push   ebx
c000bc63:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc67:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bc6d:	85 c0                	test   eax,eax
c000bc6f:	7e 30                	jle    c000bca1 <hwTextMode_loadInData(VgaText*)+0x41>
c000bc71:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bc74:	31 f6                	xor    esi,esi
c000bc76:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bc79:	31 c0                	xor    eax,eax
c000bc7b:	c1 e1 05             	shl    ecx,0x5
c000bc7e:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bc84:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bc88:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bc8c:	40                   	inc    eax
c000bc8d:	83 f8 50             	cmp    eax,0x50
c000bc90:	75 f2                	jne    c000bc84 <hwTextMode_loadInData(VgaText*)+0x24>
c000bc92:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bc98:	46                   	inc    esi
c000bc99:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bc9f:	7f d5                	jg     c000bc76 <hwTextMode_loadInData(VgaText*)+0x16>
c000bca1:	5b                   	pop    ebx
c000bca2:	5e                   	pop    esi
c000bca3:	5f                   	pop    edi
c000bca4:	c3                   	ret    

c000bca5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bca5:	56                   	push   esi
c000bca6:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bcab:	53                   	push   ebx
c000bcac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bcb0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcb4:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bcba:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bcc0:	c1 e0 04             	shl    eax,0x4
c000bcc3:	83 e6 0f             	and    esi,0xf
c000bcc6:	0f b6 c0             	movzx  eax,al
c000bcc9:	41                   	inc    ecx
c000bcca:	09 f0                	or     eax,esi
c000bccc:	83 c2 02             	add    edx,0x2
c000bccf:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bcd3:	c1 e0 08             	shl    eax,0x8
c000bcd6:	09 f0                	or     eax,esi
c000bcd8:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000bcdc:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000bce2:	75 d0                	jne    c000bcb4 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000bce4:	5b                   	pop    ebx
c000bce5:	5e                   	pop    esi
c000bce6:	c3                   	ret    

c000bce7 <hwTextMode_showCursor(VgaText*, bool)>:
c000bce7:	56                   	push   esi
c000bce8:	53                   	push   ebx
c000bce9:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000bcee:	74 38                	je     c000bd28 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000bcf0:	bb d4 03 00 00       	mov    ebx,0x3d4
c000bcf5:	b0 0a                	mov    al,0xa
c000bcf7:	89 da                	mov    edx,ebx
c000bcf9:	ee                   	out    dx,al
c000bcfa:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000bcff:	89 ca                	mov    edx,ecx
c000bd01:	ec                   	in     al,dx
c000bd02:	b2 0f                	mov    dl,0xf
c000bd04:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd08:	83 e0 c0             	and    eax,0xffffffc0
c000bd0b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000bd11:	09 d0                	or     eax,edx
c000bd13:	89 ca                	mov    edx,ecx
c000bd15:	ee                   	out    dx,al
c000bd16:	b0 0b                	mov    al,0xb
c000bd18:	89 da                	mov    edx,ebx
c000bd1a:	ee                   	out    dx,al
c000bd1b:	89 ca                	mov    edx,ecx
c000bd1d:	ec                   	in     al,dx
c000bd1e:	83 e0 e0             	and    eax,0xffffffe0
c000bd21:	83 c8 0f             	or     eax,0xf
c000bd24:	ee                   	out    dx,al
c000bd25:	5b                   	pop    ebx
c000bd26:	5e                   	pop    esi
c000bd27:	c3                   	ret    
c000bd28:	b0 0a                	mov    al,0xa
c000bd2a:	ba d4 03 00 00       	mov    edx,0x3d4
c000bd2f:	ee                   	out    dx,al
c000bd30:	b0 20                	mov    al,0x20
c000bd32:	ba d5 03 00 00       	mov    edx,0x3d5
c000bd37:	ee                   	out    dx,al
c000bd38:	5b                   	pop    ebx
c000bd39:	5e                   	pop    esi
c000bd3a:	c3                   	ret    

c000bd3b <hwTextMode_update(VgaText*)>:
c000bd3b:	c3                   	ret    

c000bd3c <hwTextMode_updateCursor(VgaText*)>:
c000bd3c:	56                   	push   esi
c000bd3d:	b9 19 00 00 00       	mov    ecx,0x19
c000bd42:	53                   	push   ebx
c000bd43:	be d4 03 00 00       	mov    esi,0x3d4
c000bd48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd4c:	89 f2                	mov    edx,esi
c000bd4e:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000bd54:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000bd5a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000bd5d:	c1 e1 04             	shl    ecx,0x4
c000bd60:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000bd66:	b0 0f                	mov    al,0xf
c000bd68:	ee                   	out    dx,al
c000bd69:	bb d5 03 00 00       	mov    ebx,0x3d5
c000bd6e:	88 c8                	mov    al,cl
c000bd70:	89 da                	mov    edx,ebx
c000bd72:	ee                   	out    dx,al
c000bd73:	b0 0e                	mov    al,0xe
c000bd75:	89 f2                	mov    edx,esi
c000bd77:	ee                   	out    dx,al
c000bd78:	89 c8                	mov    eax,ecx
c000bd7a:	89 da                	mov    edx,ebx
c000bd7c:	66 c1 e8 08          	shr    ax,0x8
c000bd80:	ee                   	out    dx,al
c000bd81:	5b                   	pop    ebx
c000bd82:	5e                   	pop    esi
c000bd83:	c3                   	ret    

c000bd84 <hwTextMode_disableBlink(VgaText*, bool)>:
c000bd84:	ba da 03 00 00       	mov    edx,0x3da
c000bd89:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000bd8e:	75 18                	jne    c000bda8 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000bd90:	ec                   	in     al,dx
c000bd91:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bd96:	b0 30                	mov    al,0x30
c000bd98:	89 ca                	mov    edx,ecx
c000bd9a:	ee                   	out    dx,al
c000bd9b:	ba c1 03 00 00       	mov    edx,0x3c1
c000bda0:	ec                   	in     al,dx
c000bda1:	83 c8 08             	or     eax,0x8
c000bda4:	89 ca                	mov    edx,ecx
c000bda6:	ee                   	out    dx,al
c000bda7:	c3                   	ret    
c000bda8:	ec                   	in     al,dx
c000bda9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000bdae:	b0 30                	mov    al,0x30
c000bdb0:	89 ca                	mov    edx,ecx
c000bdb2:	ee                   	out    dx,al
c000bdb3:	ba c1 03 00 00       	mov    edx,0x3c1
c000bdb8:	ec                   	in     al,dx
c000bdb9:	83 e0 f7             	and    eax,0xfffffff7
c000bdbc:	89 ca                	mov    edx,ecx
c000bdbe:	ee                   	out    dx,al
c000bdbf:	c3                   	ret    

c000bdc0 <hwTextMode_scrollScreen(VgaText*)>:
c000bdc0:	55                   	push   ebp
c000bdc1:	bd 02 00 00 00       	mov    ebp,0x2
c000bdc6:	57                   	push   edi
c000bdc7:	56                   	push   esi
c000bdc8:	53                   	push   ebx
c000bdc9:	83 ec 1c             	sub    esp,0x1c
c000bdcc:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000bdd4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bdd8:	31 c0                	xor    eax,eax
c000bdda:	eb 0b                	jmp    c000bde7 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000bddc:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000bde2:	74 57                	je     c000be3b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000bde4:	43                   	inc    ebx
c000bde5:	89 f0                	mov    eax,esi
c000bde7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000bded:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000bdf3:	88 13                	mov    BYTE PTR [ebx],dl
c000bdf5:	8d 70 01             	lea    esi,[eax+0x1]
c000bdf8:	83 fd 18             	cmp    ebp,0x18
c000bdfb:	75 df                	jne    c000bddc <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000bdfd:	a8 01                	test   al,0x1
c000bdff:	75 13                	jne    c000be14 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000be01:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000be04:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000be0a:	75 d8                	jne    c000bde4 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000be0c:	83 c4 1c             	add    esp,0x1c
c000be0f:	5b                   	pop    ebx
c000be10:	5e                   	pop    esi
c000be11:	5f                   	pop    edi
c000be12:	5d                   	pop    ebp
c000be13:	c3                   	ret    
c000be14:	83 ec 08             	sub    esp,0x8
c000be17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be1b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000be22:	50                   	push   eax
c000be23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be27:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000be2e:	50                   	push   eax
c000be2f:	e8 e0 0a 00 00       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000be34:	83 c4 10             	add    esp,0x10
c000be37:	88 07                	mov    BYTE PTR [edi],al
c000be39:	eb c9                	jmp    c000be04 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000be3b:	45                   	inc    ebp
c000be3c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000be44:	eb 8e                	jmp    c000bdd4 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000be46 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000be46:	56                   	push   esi
c000be47:	53                   	push   ebx
c000be48:	83 ec 0c             	sub    esp,0xc
c000be4b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be4f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000be53:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be58:	50                   	push   eax
c000be59:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000be5e:	50                   	push   eax
c000be5f:	e8 b0 0a 00 00       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000be64:	5a                   	pop    edx
c000be65:	0f b6 c0             	movzx  eax,al
c000be68:	59                   	pop    ecx
c000be69:	50                   	push   eax
c000be6a:	89 f0                	mov    eax,esi
c000be6c:	0f be f0             	movsx  esi,al
c000be6f:	56                   	push   esi
c000be70:	e8 45 0b 00 00       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000be75:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000be79:	ba 19 00 00 00       	mov    edx,0x19
c000be7e:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000be84:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000be87:	8d 14 92             	lea    edx,[edx+edx*4]
c000be8a:	c1 e1 04             	shl    ecx,0x4
c000be8d:	c1 e2 04             	shl    edx,0x4
c000be90:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000be94:	01 ca                	add    edx,ecx
c000be96:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000be9e:	83 c4 14             	add    esp,0x14
c000bea1:	5b                   	pop    ebx
c000bea2:	5e                   	pop    esi
c000bea3:	c3                   	ret    

c000bea4 <setupTextMode()>:
c000bea4:	c7 05 f8 37 02 c0 84 bd 00 c0 	mov    DWORD PTR ds:0xc00237f8,0xc000bd84
c000beae:	c7 05 e4 37 02 c0 60 bc 00 c0 	mov    DWORD PTR ds:0xc00237e4,0xc000bc60
c000beb8:	c7 05 e0 37 02 c0 a5 bc 00 c0 	mov    DWORD PTR ds:0xc00237e0,0xc000bca5
c000bec2:	c7 05 ec 37 02 c0 c0 bd 00 c0 	mov    DWORD PTR ds:0xc00237ec,0xc000bdc0
c000becc:	c7 05 f4 37 02 c0 e7 bc 00 c0 	mov    DWORD PTR ds:0xc00237f4,0xc000bce7
c000bed6:	c7 05 e8 37 02 c0 3b bd 00 c0 	mov    DWORD PTR ds:0xc00237e8,0xc000bd3b
c000bee0:	c7 05 f0 37 02 c0 3c bd 00 c0 	mov    DWORD PTR ds:0xc00237f0,0xc000bd3c
c000beea:	c7 05 fc 37 02 c0 46 be 00 c0 	mov    DWORD PTR ds:0xc00237fc,0xc000be46
c000bef4:	c3                   	ret    

c000bef5 <kernel_main>:
c000bef5:	57                   	push   edi
c000bef6:	bf f9 03 00 00       	mov    edi,0x3f9
c000befb:	56                   	push   esi
c000befc:	31 f6                	xor    esi,esi
c000befe:	53                   	push   ebx
c000beff:	83 ec 10             	sub    esp,0x10
c000bf02:	e8 67 08 00 00       	call   c000c76e <installVgaTextImplementation()>
c000bf07:	e8 98 ff ff ff       	call   c000bea4 <setupTextMode()>
c000bf0c:	89 f0                	mov    eax,esi
c000bf0e:	89 fa                	mov    edx,edi
c000bf10:	ee                   	out    dx,al
c000bf11:	bb fb 03 00 00       	mov    ebx,0x3fb
c000bf16:	b0 80                	mov    al,0x80
c000bf18:	89 da                	mov    edx,ebx
c000bf1a:	ee                   	out    dx,al
c000bf1b:	b1 03                	mov    cl,0x3
c000bf1d:	ba f8 03 00 00       	mov    edx,0x3f8
c000bf22:	88 c8                	mov    al,cl
c000bf24:	ee                   	out    dx,al
c000bf25:	89 f0                	mov    eax,esi
c000bf27:	89 fa                	mov    edx,edi
c000bf29:	ee                   	out    dx,al
c000bf2a:	88 c8                	mov    al,cl
c000bf2c:	89 da                	mov    edx,ebx
c000bf2e:	ee                   	out    dx,al
c000bf2f:	b0 c7                	mov    al,0xc7
c000bf31:	ba fa 03 00 00       	mov    edx,0x3fa
c000bf36:	ee                   	out    dx,al
c000bf37:	b0 0b                	mov    al,0xb
c000bf39:	ba fc 03 00 00       	mov    edx,0x3fc
c000bf3e:	ee                   	out    dx,al
c000bf3f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000bf44:	83 ec 0c             	sub    esp,0xc
c000bf47:	05 ff 0f 00 00       	add    eax,0xfff
c000bf4c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf51:	50                   	push   eax
c000bf52:	e8 4d 03 00 00       	call   c000c2a4 <Phys::physicalMemorySetup(unsigned int)>
c000bf57:	e8 18 1f 00 00       	call   c000de74 <Virt::virtualMemorySetup()>
c000bf5c:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000bf62:	83 c4 10             	add    esp,0x10
c000bf65:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000bf6b:	75 0e                	jne    c000bf7b <kernel_main+0x86>
c000bf6d:	89 d8                	mov    eax,ebx
c000bf6f:	25 48 03 00 00       	and    eax,0x348
c000bf74:	3d 00 03 00 00       	cmp    eax,0x300
c000bf79:	74 10                	je     c000bf8b <kernel_main+0x96>
c000bf7b:	83 ec 0c             	sub    esp,0xc
c000bf7e:	68 3b 18 02 c0       	push   0xc002183b
c000bf83:	e8 f0 8c 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000bf88:	83 c4 10             	add    esp,0x10
c000bf8b:	83 ec 0c             	sub    esp,0xc
c000bf8e:	89 1d 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,ebx
c000bf94:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000bf98:	53                   	push   ebx
c000bf99:	e8 80 20 00 00       	call   c000e01e <VAS::VAS()>
c000bf9e:	89 1d a4 38 02 c0    	mov    DWORD PTR ds:0xc00238a4,ebx
c000bfa4:	e8 77 40 ff ff       	call   c0000020 <callGlobalConstructors>
c000bfa9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000bfb0:	e8 3f 2f 00 00       	call   c000eef4 <operator new(unsigned long)>
c000bfb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfb8:	89 c6                	mov    esi,eax
c000bfba:	e8 e3 ed ff ff       	call   c000ada2 <Computer::Computer()>
c000bfbf:	6a 00                	push   0x0
c000bfc1:	89 35 48 37 02 c0    	mov    DWORD PTR ds:0xc0023748,esi
c000bfc7:	6a 00                	push   0x0
c000bfc9:	6a 00                	push   0x0
c000bfcb:	56                   	push   esi
c000bfcc:	e8 7f f2 ff ff       	call   c000b250 <Computer::open(int, int, void*)>
c000bfd1:	83 c4 14             	add    esp,0x14
c000bfd4:	53                   	push   ebx
c000bfd5:	e8 54 22 00 00       	call   c000e22e <VAS::~VAS()>
c000bfda:	c7 04 24 14 04 02 c0 	mov    DWORD PTR [esp],0xc0020414
c000bfe1:	e8 92 8c 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000bfe6:	83 c4 20             	add    esp,0x20
c000bfe9:	5b                   	pop    ebx
c000bfea:	5e                   	pop    esi
c000bfeb:	5f                   	pop    edi
c000bfec:	c3                   	ret    

c000bfed <Phys::allocateDMA(unsigned long)>:
c000bfed:	55                   	push   ebp
c000bfee:	31 d2                	xor    edx,edx
c000bff0:	57                   	push   edi
c000bff1:	31 ed                	xor    ebp,ebp
c000bff3:	56                   	push   esi
c000bff4:	31 c9                	xor    ecx,ecx
c000bff6:	53                   	push   ebx
c000bff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bffb:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c001:	31 c0                	xor    eax,eax
c000c003:	c1 ee 0c             	shr    esi,0xc
c000c006:	eb 17                	jmp    c000c01f <Phys::allocateDMA(unsigned long)+0x32>
c000c008:	85 c9                	test   ecx,ecx
c000c00a:	75 04                	jne    c000c010 <Phys::allocateDMA(unsigned long)+0x23>
c000c00c:	89 d5                	mov    ebp,edx
c000c00e:	89 d0                	mov    eax,edx
c000c010:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c013:	39 de                	cmp    esi,ebx
c000c015:	74 20                	je     c000c037 <Phys::allocateDMA(unsigned long)+0x4a>
c000c017:	42                   	inc    edx
c000c018:	89 d9                	mov    ecx,ebx
c000c01a:	83 fa 2f             	cmp    edx,0x2f
c000c01d:	7f 11                	jg     c000c030 <Phys::allocateDMA(unsigned long)+0x43>
c000c01f:	80 ba a0 37 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdc860],0x0
c000c026:	74 e0                	je     c000c008 <Phys::allocateDMA(unsigned long)+0x1b>
c000c028:	31 c9                	xor    ecx,ecx
c000c02a:	42                   	inc    edx
c000c02b:	83 fa 2f             	cmp    edx,0x2f
c000c02e:	7e ef                	jle    c000c01f <Phys::allocateDMA(unsigned long)+0x32>
c000c030:	5b                   	pop    ebx
c000c031:	31 c0                	xor    eax,eax
c000c033:	5e                   	pop    esi
c000c034:	5f                   	pop    edi
c000c035:	5d                   	pop    ebp
c000c036:	c3                   	ret    
c000c037:	8d 14 30             	lea    edx,[eax+esi*1]
c000c03a:	89 d7                	mov    edi,edx
c000c03c:	4f                   	dec    edi
c000c03d:	79 03                	jns    c000c042 <Phys::allocateDMA(unsigned long)+0x55>
c000c03f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c042:	c1 ff 04             	sar    edi,0x4
c000c045:	89 c2                	mov    edx,eax
c000c047:	c1 fa 04             	sar    edx,0x4
c000c04a:	39 fa                	cmp    edx,edi
c000c04c:	75 2f                	jne    c000c07d <Phys::allocateDMA(unsigned long)+0x90>
c000c04e:	85 db                	test   ebx,ebx
c000c050:	74 1a                	je     c000c06c <Phys::allocateDMA(unsigned long)+0x7f>
c000c052:	be a0 37 02 c0       	mov    esi,0xc00237a0
c000c057:	8d 90 a0 37 02 c0    	lea    edx,[eax-0x3ffdc860]
c000c05d:	f7 d6                	not    esi
c000c05f:	29 c6                	sub    esi,eax
c000c061:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c064:	42                   	inc    edx
c000c065:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c068:	39 d9                	cmp    ecx,ebx
c000c06a:	7f f5                	jg     c000c061 <Phys::allocateDMA(unsigned long)+0x74>
c000c06c:	85 ff                	test   edi,edi
c000c06e:	74 13                	je     c000c083 <Phys::allocateDMA(unsigned long)+0x96>
c000c070:	5b                   	pop    ebx
c000c071:	05 50 20 0c 00       	add    eax,0xc2050
c000c076:	5e                   	pop    esi
c000c077:	c1 e0 0c             	shl    eax,0xc
c000c07a:	5f                   	pop    edi
c000c07b:	5d                   	pop    ebp
c000c07c:	c3                   	ret    
c000c07d:	89 ea                	mov    edx,ebp
c000c07f:	31 c9                	xor    ecx,ecx
c000c081:	eb a7                	jmp    c000c02a <Phys::allocateDMA(unsigned long)+0x3d>
c000c083:	5b                   	pop    ebx
c000c084:	c1 e0 0c             	shl    eax,0xc
c000c087:	5e                   	pop    esi
c000c088:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c08d:	5f                   	pop    edi
c000c08e:	5d                   	pop    ebp
c000c08f:	c3                   	ret    

c000c090 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c094:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c098:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c09e:	c1 e9 0c             	shr    ecx,0xc
c000c0a1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c0a6:	76 25                	jbe    c000c0cd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c0a8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c0ad:	c1 e8 0c             	shr    eax,0xc
c000c0b0:	8d 50 10             	lea    edx,[eax+0x10]
c000c0b3:	85 c9                	test   ecx,ecx
c000c0b5:	74 15                	je     c000c0cc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c0b7:	8d 82 a0 37 02 c0    	lea    eax,[edx-0x3ffdc860]
c000c0bd:	8d 94 11 a0 37 02 c0 	lea    edx,[ecx+edx*1-0x3ffdc860]
c000c0c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c0c7:	40                   	inc    eax
c000c0c8:	39 d0                	cmp    eax,edx
c000c0ca:	75 f8                	jne    c000c0c4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c0cc:	c3                   	ret    
c000c0cd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c0d3:	c1 ea 0c             	shr    edx,0xc
c000c0d6:	eb db                	jmp    c000c0b3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c0d8 <Phys::setPageState(unsigned long, bool)>:
c000c0d8:	56                   	push   esi
c000c0d9:	ba 01 00 00 00       	mov    edx,0x1
c000c0de:	53                   	push   ebx
c000c0df:	8b 35 70 2b 02 c0    	mov    esi,DWORD PTR ds:0xc0022b70
c000c0e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c0ed:	89 c8                	mov    eax,ecx
c000c0ef:	83 e1 07             	and    ecx,0x7
c000c0f2:	c1 e8 03             	shr    eax,0x3
c000c0f5:	d3 e3                	shl    ebx,cl
c000c0f7:	01 c6                	add    esi,eax
c000c0f9:	d3 e2                	shl    edx,cl
c000c0fb:	f7 d2                	not    edx
c000c0fd:	20 16                	and    BYTE PTR [esi],dl
c000c0ff:	03 05 70 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022b70
c000c105:	08 18                	or     BYTE PTR [eax],bl
c000c107:	5b                   	pop    ebx
c000c108:	5e                   	pop    esi
c000c109:	c3                   	ret    

c000c10a <Phys::getPageState(unsigned long)>:
c000c10a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c10e:	8b 15 70 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022b70
c000c114:	89 c8                	mov    eax,ecx
c000c116:	83 e1 07             	and    ecx,0x7
c000c119:	c1 e8 03             	shr    eax,0x3
c000c11c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c120:	d3 f8                	sar    eax,cl
c000c122:	83 e0 01             	and    eax,0x1
c000c125:	c3                   	ret    

c000c126 <Phys::freePage(unsigned long)>:
c000c126:	53                   	push   ebx
c000c127:	83 ec 08             	sub    esp,0x8
c000c12a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c12e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c134:	76 57                	jbe    c000c18d <Phys::freePage(unsigned long)+0x67>
c000c136:	c1 eb 0c             	shr    ebx,0xc
c000c139:	53                   	push   ebx
c000c13a:	e8 cb ff ff ff       	call   c000c10a <Phys::getPageState(unsigned long)>
c000c13f:	5a                   	pop    edx
c000c140:	84 c0                	test   al,al
c000c142:	74 5b                	je     c000c19f <Phys::freePage(unsigned long)+0x79>
c000c144:	a1 8c 37 02 c0       	mov    eax,ds:0xc002378c
c000c149:	48                   	dec    eax
c000c14a:	a3 8c 37 02 c0       	mov    ds:0xc002378c,eax
c000c14f:	8d 04 80             	lea    eax,[eax+eax*4]
c000c152:	8d 04 80             	lea    eax,[eax+eax*4]
c000c155:	c1 e0 02             	shl    eax,0x2
c000c158:	99                   	cdq    
c000c159:	f7 3d 90 37 02 c0    	idiv   DWORD PTR ds:0xc0023790
c000c15f:	39 05 88 37 02 c0    	cmp    DWORD PTR ds:0xc0023788,eax
c000c165:	75 13                	jne    c000c17a <Phys::freePage(unsigned long)+0x54>
c000c167:	83 ec 08             	sub    esp,0x8
c000c16a:	6a 00                	push   0x0
c000c16c:	53                   	push   ebx
c000c16d:	e8 66 ff ff ff       	call   c000c0d8 <Phys::setPageState(unsigned long, bool)>
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	83 c4 08             	add    esp,0x8
c000c178:	5b                   	pop    ebx
c000c179:	c3                   	ret    
c000c17a:	83 ec 0c             	sub    esp,0xc
c000c17d:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c182:	50                   	push   eax
c000c183:	e8 7a 09 00 00       	call   c000cb02 <VgaText::updateRAMUsageDisplay(int)>
c000c188:	83 c4 10             	add    esp,0x10
c000c18b:	eb da                	jmp    c000c167 <Phys::freePage(unsigned long)+0x41>
c000c18d:	68 00 10 00 00       	push   0x1000
c000c192:	53                   	push   ebx
c000c193:	e8 f8 fe ff ff       	call   c000c090 <Phys::freeDMA(unsigned long, unsigned long)>
c000c198:	59                   	pop    ecx
c000c199:	5b                   	pop    ebx
c000c19a:	83 c4 08             	add    esp,0x8
c000c19d:	5b                   	pop    ebx
c000c19e:	c3                   	ret    
c000c19f:	c7 44 24 10 2f 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc002042f
c000c1a7:	83 c4 08             	add    esp,0x8
c000c1aa:	5b                   	pop    ebx
c000c1ab:	e9 c8 8a 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>

c000c1b0 <Phys::allocatePage()>:
c000c1b0:	56                   	push   esi
c000c1b1:	53                   	push   ebx
c000c1b2:	51                   	push   ecx
c000c1b3:	8b 35 80 37 02 c0    	mov    esi,DWORD PTR ds:0xc0023780
c000c1b9:	89 f3                	mov    ebx,esi
c000c1bb:	eb 0a                	jmp    c000c1c7 <Phys::allocatePage()+0x17>
c000c1bd:	89 1d 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,ebx
c000c1c3:	39 de                	cmp    esi,ebx
c000c1c5:	74 24                	je     c000c1eb <Phys::allocatePage()+0x3b>
c000c1c7:	53                   	push   ebx
c000c1c8:	e8 3d ff ff ff       	call   c000c10a <Phys::getPageState(unsigned long)>
c000c1cd:	5a                   	pop    edx
c000c1ce:	84 c0                	test   al,al
c000c1d0:	74 4e                	je     c000c220 <Phys::allocatePage()+0x70>
c000c1d2:	43                   	inc    ebx
c000c1d3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c1d9:	75 e2                	jne    c000c1bd <Phys::allocatePage()+0xd>
c000c1db:	31 db                	xor    ebx,ebx
c000c1dd:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c000c1e7:	39 de                	cmp    esi,ebx
c000c1e9:	75 dc                	jne    c000c1c7 <Phys::allocatePage()+0x17>
c000c1eb:	83 ec 0c             	sub    esp,0xc
c000c1ee:	68 00 10 00 00       	push   0x1000
c000c1f3:	e8 f5 fd ff ff       	call   c000bfed <Phys::allocateDMA(unsigned long)>
c000c1f8:	83 c4 10             	add    esp,0x10
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 56                	jne    c000c255 <Phys::allocatePage()+0xa5>
c000c1ff:	83 ec 0c             	sub    esp,0xc
c000c202:	68 45 04 02 c0       	push   0xc0020445
c000c207:	e8 6c 8a 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000c20c:	83 c4 10             	add    esp,0x10
c000c20f:	8b 1d 80 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023780
c000c215:	53                   	push   ebx
c000c216:	e8 ef fe ff ff       	call   c000c10a <Phys::getPageState(unsigned long)>
c000c21b:	5a                   	pop    edx
c000c21c:	84 c0                	test   al,al
c000c21e:	75 b2                	jne    c000c1d2 <Phys::allocatePage()+0x22>
c000c220:	6a 01                	push   0x1
c000c222:	53                   	push   ebx
c000c223:	e8 b0 fe ff ff       	call   c000c0d8 <Phys::setPageState(unsigned long, bool)>
c000c228:	a1 8c 37 02 c0       	mov    eax,ds:0xc002378c
c000c22d:	59                   	pop    ecx
c000c22e:	40                   	inc    eax
c000c22f:	5b                   	pop    ebx
c000c230:	a3 8c 37 02 c0       	mov    ds:0xc002378c,eax
c000c235:	8d 04 80             	lea    eax,[eax+eax*4]
c000c238:	8d 04 80             	lea    eax,[eax+eax*4]
c000c23b:	c1 e0 02             	shl    eax,0x2
c000c23e:	99                   	cdq    
c000c23f:	f7 3d 90 37 02 c0    	idiv   DWORD PTR ds:0xc0023790
c000c245:	39 05 88 37 02 c0    	cmp    DWORD PTR ds:0xc0023788,eax
c000c24b:	75 0c                	jne    c000c259 <Phys::allocatePage()+0xa9>
c000c24d:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000c252:	c1 e0 0c             	shl    eax,0xc
c000c255:	5a                   	pop    edx
c000c256:	5b                   	pop    ebx
c000c257:	5e                   	pop    esi
c000c258:	c3                   	ret    
c000c259:	83 ec 0c             	sub    esp,0xc
c000c25c:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c261:	50                   	push   eax
c000c262:	e8 9b 08 00 00       	call   c000cb02 <VgaText::updateRAMUsageDisplay(int)>
c000c267:	83 c4 10             	add    esp,0x10
c000c26a:	eb e1                	jmp    c000c24d <Phys::allocatePage()+0x9d>

c000c26c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c26c:	56                   	push   esi
c000c26d:	53                   	push   ebx
c000c26e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c272:	39 1d 84 37 02 c0    	cmp    DWORD PTR ds:0xc0023784,ebx
c000c278:	73 06                	jae    c000c280 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c27a:	89 1d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ebx
c000c280:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c284:	c1 eb 0c             	shr    ebx,0xc
c000c287:	c1 e8 0c             	shr    eax,0xc
c000c28a:	39 d8                	cmp    eax,ebx
c000c28c:	73 13                	jae    c000c2a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c28e:	6a 00                	push   0x0
c000c290:	8d 70 01             	lea    esi,[eax+0x1]
c000c293:	50                   	push   eax
c000c294:	e8 3f fe ff ff       	call   c000c0d8 <Phys::setPageState(unsigned long, bool)>
c000c299:	5a                   	pop    edx
c000c29a:	89 f0                	mov    eax,esi
c000c29c:	59                   	pop    ecx
c000c29d:	39 f3                	cmp    ebx,esi
c000c29f:	75 ed                	jne    c000c28e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c2a1:	5b                   	pop    ebx
c000c2a2:	5e                   	pop    esi
c000c2a3:	c3                   	ret    

c000c2a4 <Phys::physicalMemorySetup(unsigned int)>:
c000c2a4:	55                   	push   ebp
c000c2a5:	57                   	push   edi
c000c2a6:	56                   	push   esi
c000c2a7:	53                   	push   ebx
c000c2a8:	31 db                	xor    ebx,ebx
c000c2aa:	83 ec 30             	sub    esp,0x30
c000c2ad:	6a 30                	push   0x30
c000c2af:	6a 00                	push   0x0
c000c2b1:	68 a0 37 02 c0       	push   0xc00237a0
c000c2b6:	e8 4d 43 ff ff       	call   c0000608 <memset>
c000c2bb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c2bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2c4:	05 00 10 00 00       	add    eax,0x1000
c000c2c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2cd:	83 c4 10             	add    esp,0x10
c000c2d0:	83 ec 08             	sub    esp,0x8
c000c2d3:	6a 01                	push   0x1
c000c2d5:	53                   	push   ebx
c000c2d6:	43                   	inc    ebx
c000c2d7:	e8 fc fd ff ff       	call   c000c0d8 <Phys::setPageState(unsigned long, bool)>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c2e5:	75 e9                	jne    c000c2d0 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c2e7:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c2ee:	66 85 c0             	test   ax,ax
c000c2f1:	0f 84 28 01 00 00    	je     c000c41f <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c2f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2fb:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c301:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c306:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c30c:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c312:	89 f1                	mov    ecx,esi
c000c314:	89 fb                	mov    ebx,edi
c000c316:	01 c1                	add    ecx,eax
c000c318:	89 d5                	mov    ebp,edx
c000c31a:	11 d3                	adc    ebx,edx
c000c31c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c31f:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c323:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c327:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c32d:	09 dd                	or     ebp,ebx
c000c32f:	0f 85 fa 00 00 00    	jne    c000c42f <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c335:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c339:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c341:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c349:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c34d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c355:	eb 45                	jmp    c000c39c <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c357:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c35b:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c360:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c364:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c368:	0f 84 c1 00 00 00    	je     c000c42f <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c36e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c372:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c375:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c378:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c37b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c37e:	89 c1                	mov    ecx,eax
c000c380:	89 d3                	mov    ebx,edx
c000c382:	01 f1                	add    ecx,esi
c000c384:	11 fb                	adc    ebx,edi
c000c386:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c389:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c38d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c390:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c394:	09 d3                	or     ebx,edx
c000c396:	0f 85 93 00 00 00    	jne    c000c42f <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c39c:	49                   	dec    ecx
c000c39d:	75 b8                	jne    c000c357 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c39f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c3a2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c3a6:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c3aa:	39 e9                	cmp    ecx,ebp
c000c3ac:	89 d9                	mov    ecx,ebx
c000c3ae:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3b2:	72 a3                	jb     c000c357 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3b4:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c3b9:	39 f1                	cmp    ecx,esi
c000c3bb:	b9 00 00 00 00       	mov    ecx,0x0
c000c3c0:	19 f9                	sbb    ecx,edi
c000c3c2:	73 93                	jae    c000c357 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c3c4:	39 e8                	cmp    eax,ebp
c000c3c6:	89 d1                	mov    ecx,edx
c000c3c8:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c3cc:	73 13                	jae    c000c3e1 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c3ce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c3d1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c3d5:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c3d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c3dd:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c3e1:	83 ec 08             	sub    esp,0x8
c000c3e4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c3e8:	50                   	push   eax
c000c3e9:	e8 7e fe ff ff       	call   c000c26c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c3ee:	83 c4 0c             	add    esp,0xc
c000c3f1:	89 fa                	mov    edx,edi
c000c3f3:	89 f0                	mov    eax,esi
c000c3f5:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c3f9:	03 05 90 37 02 c0    	add    eax,DWORD PTR ds:0xc0023790
c000c3ff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c406:	a3 90 37 02 c0       	mov    ds:0xc0023790,eax
c000c40b:	52                   	push   edx
c000c40c:	50                   	push   eax
c000c40d:	68 61 04 02 c0       	push   0xc0020461
c000c412:	e8 cc 2b 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000c417:	83 c4 10             	add    esp,0x10
c000c41a:	e9 38 ff ff ff       	jmp    c000c357 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c41f:	83 ec 0c             	sub    esp,0xc
c000c422:	68 53 04 02 c0       	push   0xc0020453
c000c427:	e8 4c 88 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000c42c:	83 c4 10             	add    esp,0x10
c000c42f:	bb 40 01 00 00       	mov    ebx,0x140
c000c434:	83 ec 08             	sub    esp,0x8
c000c437:	6a 00                	push   0x0
c000c439:	53                   	push   ebx
c000c43a:	43                   	inc    ebx
c000c43b:	e8 98 fc ff ff       	call   c000c0d8 <Phys::setPageState(unsigned long, bool)>
c000c440:	ff 05 90 37 02 c0    	inc    DWORD PTR ds:0xc0023790
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c44f:	75 e3                	jne    c000c434 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c451:	83 c4 2c             	add    esp,0x2c
c000c454:	5b                   	pop    ebx
c000c455:	5e                   	pop    esi
c000c456:	5f                   	pop    edi
c000c457:	5d                   	pop    ebp
c000c458:	c3                   	ret    
c000c459:	90                   	nop

c000c45a <Pipe::isAtty()>:
c000c45a:	31 c0                	xor    eax,eax
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <Pipe::~Pipe()>:
c000c45e:	83 ec 0c             	sub    esp,0xc
c000c461:	ba c0 04 02 c0       	mov    edx,0xc00204c0
c000c466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c46a:	89 10                	mov    DWORD PTR [eax],edx
c000c46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c470:	83 ec 0c             	sub    esp,0xc
c000c473:	50                   	push   eax
c000c474:	e8 5b 16 00 00       	call   c000dad4 <UnixFile::~UnixFile()>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	90                   	nop
c000c47d:	83 c4 0c             	add    esp,0xc
c000c480:	c3                   	ret    
c000c481:	90                   	nop

c000c482 <Pipe::~Pipe()>:
c000c482:	83 ec 0c             	sub    esp,0xc
c000c485:	83 ec 0c             	sub    esp,0xc
c000c488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c48c:	e8 cd ff ff ff       	call   c000c45e <Pipe::~Pipe()>
c000c491:	83 c4 10             	add    esp,0x10
c000c494:	83 ec 08             	sub    esp,0x8
c000c497:	6a 20                	push   0x20
c000c499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c49d:	e8 61 2a 00 00       	call   c000ef03 <operator delete(void*, unsigned long)>
c000c4a2:	83 c4 10             	add    esp,0x10
c000c4a5:	83 c4 0c             	add    esp,0xc
c000c4a8:	c3                   	ret    
c000c4a9:	90                   	nop

c000c4aa <Pipe::read(unsigned long long, void*, int*)>:
c000c4aa:	55                   	push   ebp
c000c4ab:	57                   	push   edi
c000c4ac:	56                   	push   esi
c000c4ad:	53                   	push   ebx
c000c4ae:	83 ec 1c             	sub    esp,0x1c
c000c4b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c4b5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4bd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c4c0:	89 c8                	mov    eax,ecx
c000c4c2:	99                   	cdq    
c000c4c3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c4c7:	74 19                	je     c000c4e2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4c9:	39 f9                	cmp    ecx,edi
c000c4cb:	89 d1                	mov    ecx,edx
c000c4cd:	19 f1                	sbb    ecx,esi
c000c4cf:	73 11                	jae    c000c4e2 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c4d1:	e8 de b6 00 00       	call   c0017bb4 <lockScheduler()>
c000c4d6:	e8 0d ba 00 00       	call   c0017ee8 <schedule()>
c000c4db:	e8 d6 b6 00 00       	call   c0017bb6 <unlockScheduler()>
c000c4e0:	eb db                	jmp    c000c4bd <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c4e2:	39 f8                	cmp    eax,edi
c000c4e4:	89 d1                	mov    ecx,edx
c000c4e6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c4ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c4ee:	19 f1                	sbb    ecx,esi
c000c4f0:	73 08                	jae    c000c4fa <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c4f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c4fd:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c500:	29 c6                	sub    esi,eax
c000c502:	89 f1                	mov    ecx,esi
c000c504:	c1 f9 1f             	sar    ecx,0x1f
c000c507:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c50b:	89 ca                	mov    edx,ecx
c000c50d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c511:	19 d1                	sbb    ecx,edx
c000c513:	73 04                	jae    c000c519 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c515:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c519:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c51d:	89 fd                	mov    ebp,edi
c000c51f:	29 f5                	sub    ebp,esi
c000c521:	85 f6                	test   esi,esi
c000c523:	74 12                	je     c000c537 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c525:	52                   	push   edx
c000c526:	56                   	push   esi
c000c527:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c52a:	50                   	push   eax
c000c52b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c52f:	e8 9e 40 ff ff       	call   c00005d2 <memcpy>
c000c534:	83 c4 10             	add    esp,0x10
c000c537:	85 ed                	test   ebp,ebp
c000c539:	74 12                	je     c000c54d <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c53b:	50                   	push   eax
c000c53c:	55                   	push   ebp
c000c53d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c540:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c544:	56                   	push   esi
c000c545:	e8 88 40 ff ff       	call   c00005d2 <memcpy>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c550:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c553:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c556:	99                   	cdq    
c000c557:	89 f7                	mov    edi,esi
c000c559:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c55d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c561:	c1 ff 1f             	sar    edi,0x1f
c000c564:	57                   	push   edi
c000c565:	56                   	push   esi
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	e8 ef 22 01 00       	call   c001e85c <__umoddi3>
c000c56d:	83 c4 10             	add    esp,0x10
c000c570:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c573:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c578:	75 10                	jne    c000c58a <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c57a:	83 ec 0c             	sub    esp,0xc
c000c57d:	68 7d 04 02 c0       	push   0xc002047d
c000c582:	e8 f1 86 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000c587:	83 c4 10             	add    esp,0x10
c000c58a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c58e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c592:	89 10                	mov    DWORD PTR [eax],edx
c000c594:	83 c4 1c             	add    esp,0x1c
c000c597:	31 c0                	xor    eax,eax
c000c599:	5b                   	pop    ebx
c000c59a:	5e                   	pop    esi
c000c59b:	5f                   	pop    edi
c000c59c:	5d                   	pop    ebp
c000c59d:	c3                   	ret    

c000c59e <Pipe::write(unsigned long long, void*, int*)>:
c000c59e:	55                   	push   ebp
c000c59f:	57                   	push   edi
c000c5a0:	56                   	push   esi
c000c5a1:	53                   	push   ebx
c000c5a2:	83 ec 1c             	sub    esp,0x1c
c000c5a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c5a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c5ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c5b1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5b4:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c5b7:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c5ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5be:	89 de                	mov    esi,ebx
c000c5c0:	89 df                	mov    edi,ebx
c000c5c2:	c1 ff 1f             	sar    edi,0x1f
c000c5c5:	01 c6                	add    esi,eax
c000c5c7:	89 c8                	mov    eax,ecx
c000c5c9:	11 d7                	adc    edi,edx
c000c5cb:	99                   	cdq    
c000c5cc:	39 f1                	cmp    ecx,esi
c000c5ce:	89 d0                	mov    eax,edx
c000c5d0:	19 f8                	sbb    eax,edi
c000c5d2:	b8 01 00 00 00       	mov    eax,0x1
c000c5d7:	0f 82 80 00 00 00    	jb     c000c65d <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c5dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c5e0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c5e3:	01 d8                	add    eax,ebx
c000c5e5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c5e9:	99                   	cdq    
c000c5ea:	f7 f9                	idiv   ecx
c000c5ec:	29 d1                	sub    ecx,edx
c000c5ee:	89 d7                	mov    edi,edx
c000c5f0:	89 c8                	mov    eax,ecx
c000c5f2:	99                   	cdq    
c000c5f3:	39 ce                	cmp    esi,ecx
c000c5f5:	19 d3                	sbb    ebx,edx
c000c5f7:	bb 00 00 00 00       	mov    ebx,0x0
c000c5fc:	72 04                	jb     c000c602 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c5fe:	89 f3                	mov    ebx,esi
c000c600:	29 cb                	sub    ebx,ecx
c000c602:	89 f1                	mov    ecx,esi
c000c604:	29 d9                	sub    ecx,ebx
c000c606:	74 1a                	je     c000c622 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c608:	52                   	push   edx
c000c609:	51                   	push   ecx
c000c60a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c60e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c612:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c615:	57                   	push   edi
c000c616:	e8 b7 3f ff ff       	call   c00005d2 <memcpy>
c000c61b:	83 c4 10             	add    esp,0x10
c000c61e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c622:	85 db                	test   ebx,ebx
c000c624:	74 12                	je     c000c638 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c626:	50                   	push   eax
c000c627:	53                   	push   ebx
c000c628:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000c62c:	51                   	push   ecx
c000c62d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000c630:	e8 9d 3f ff ff       	call   c00005d2 <memcpy>
c000c635:	83 c4 10             	add    esp,0x10
c000c638:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000c63b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c640:	75 10                	jne    c000c652 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000c642:	83 ec 0c             	sub    esp,0xc
c000c645:	68 99 04 02 c0       	push   0xc0020499
c000c64a:	e8 29 86 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000c64f:	83 c4 10             	add    esp,0x10
c000c652:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c656:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000c659:	89 38                	mov    DWORD PTR [eax],edi
c000c65b:	31 c0                	xor    eax,eax
c000c65d:	83 c4 1c             	add    esp,0x1c
c000c660:	5b                   	pop    ebx
c000c661:	5e                   	pop    esi
c000c662:	5f                   	pop    edi
c000c663:	5d                   	pop    ebp
c000c664:	c3                   	ret    
c000c665:	90                   	nop

c000c666 <Pipe::Pipe(int)>:
c000c666:	83 ec 0c             	sub    esp,0xc
c000c669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c66d:	83 ec 08             	sub    esp,0x8
c000c670:	6a 00                	push   0x0
c000c672:	50                   	push   eax
c000c673:	e8 ba 12 00 00       	call   c000d932 <UnixFile::UnixFile(int)>
c000c678:	83 c4 10             	add    esp,0x10
c000c67b:	ba c0 04 02 c0       	mov    edx,0xc00204c0
c000c680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c684:	89 10                	mov    DWORD PTR [eax],edx
c000c686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c68a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c68e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000c691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c695:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6a0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000c6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6ab:	83 ec 0c             	sub    esp,0xc
c000c6ae:	50                   	push   eax
c000c6af:	e8 52 f5 ff ff       	call   c000bc06 <malloc>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	89 c2                	mov    edx,eax
c000c6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6c4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000c6c8:	90                   	nop
c000c6c9:	83 c4 0c             	add    esp,0xc
c000c6cc:	c3                   	ret    
c000c6cd:	90                   	nop

c000c6ce <VgaText::isAtty()>:
c000c6ce:	b0 01                	mov    al,0x1
c000c6d0:	c3                   	ret    
c000c6d1:	90                   	nop

c000c6d2 <VgaText::~VgaText()>:
c000c6d2:	83 ec 0c             	sub    esp,0xc
c000c6d5:	ba 7c 05 02 c0       	mov    edx,0xc002057c
c000c6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6de:	89 10                	mov    DWORD PTR [eax],edx
c000c6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6e4:	83 ec 0c             	sub    esp,0xc
c000c6e7:	50                   	push   eax
c000c6e8:	e8 e7 13 00 00       	call   c000dad4 <UnixFile::~UnixFile()>
c000c6ed:	83 c4 10             	add    esp,0x10
c000c6f0:	90                   	nop
c000c6f1:	83 c4 0c             	add    esp,0xc
c000c6f4:	c3                   	ret    
c000c6f5:	90                   	nop

c000c6f6 <VgaText::~VgaText()>:
c000c6f6:	83 ec 0c             	sub    esp,0xc
c000c6f9:	83 ec 0c             	sub    esp,0xc
c000c6fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c700:	e8 cd ff ff ff       	call   c000c6d2 <VgaText::~VgaText()>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	83 ec 08             	sub    esp,0x8
c000c70b:	68 60 12 00 00       	push   0x1260
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	e8 ea 27 00 00       	call   c000ef03 <operator delete(void*, unsigned long)>
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	83 c4 0c             	add    esp,0xc
c000c71f:	c3                   	ret    

c000c720 <VgaText::read(unsigned long long, void*, int*)>:
c000c720:	83 ec 10             	sub    esp,0x10
c000c723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c727:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c72f:	e8 f0 53 00 00       	call   c0011b24 <readKeyboard(VgaText*, char*, unsigned long)>
c000c734:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c738:	89 02                	mov    DWORD PTR [edx],eax
c000c73a:	31 c0                	xor    eax,eax
c000c73c:	83 c4 1c             	add    esp,0x1c
c000c73f:	c3                   	ret    

c000c740 <setTerminalScrollLock(bool)>:
c000c740:	c3                   	ret    

c000c741 <addToTerminalCycle(VgaText*)>:
c000c741:	8b 15 00 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023800
c000c747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c74b:	85 d2                	test   edx,edx
c000c74d:	75 0c                	jne    c000c75b <addToTerminalCycle(VgaText*)+0x1a>
c000c74f:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000c755:	a3 00 38 02 c0       	mov    ds:0xc0023800,eax
c000c75a:	c3                   	ret    
c000c75b:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000c761:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000c767:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000c76d:	c3                   	ret    

c000c76e <installVgaTextImplementation()>:
c000c76e:	83 ec 10             	sub    esp,0x10
c000c771:	6a 20                	push   0x20
c000c773:	6a 00                	push   0x0
c000c775:	68 e0 37 02 c0       	push   0xc00237e0
c000c77a:	e8 89 3e ff ff       	call   c0000608 <memset>
c000c77f:	83 c4 1c             	add    esp,0x1c
c000c782:	c3                   	ret    

c000c783 <scrollTerminalScrollLock(int)>:
c000c783:	c3                   	ret    

c000c784 <VgaText::load()>:
c000c784:	53                   	push   ebx
c000c785:	31 c0                	xor    eax,eax
c000c787:	83 ec 58             	sub    esp,0x58
c000c78a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000c78e:	89 e2                	mov    edx,esp
c000c790:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000c794:	40                   	inc    eax
c000c795:	83 f8 50             	cmp    eax,0x50
c000c798:	75 f6                	jne    c000c790 <VgaText::load()+0xc>
c000c79a:	31 c0                	xor    eax,eax
c000c79c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000c7a3:	84 c9                	test   cl,cl
c000c7a5:	74 06                	je     c000c7ad <VgaText::load()+0x29>
c000c7a7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000c7aa:	40                   	inc    eax
c000c7ab:	eb ef                	jmp    c000c79c <VgaText::load()+0x18>
c000c7ad:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000c7b3:	85 c0                	test   eax,eax
c000c7b5:	74 09                	je     c000c7c0 <VgaText::load()+0x3c>
c000c7b7:	51                   	push   ecx
c000c7b8:	51                   	push   ecx
c000c7b9:	52                   	push   edx
c000c7ba:	53                   	push   ebx
c000c7bb:	ff d0                	call   eax
c000c7bd:	83 c4 10             	add    esp,0x10
c000c7c0:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000c7c6:	85 c0                	test   eax,eax
c000c7c8:	74 09                	je     c000c7d3 <VgaText::load()+0x4f>
c000c7ca:	83 ec 0c             	sub    esp,0xc
c000c7cd:	53                   	push   ebx
c000c7ce:	ff d0                	call   eax
c000c7d0:	83 c4 10             	add    esp,0x10
c000c7d3:	83 c4 58             	add    esp,0x58
c000c7d6:	5b                   	pop    ebx
c000c7d7:	c3                   	ret    

c000c7d8 <VgaText::updateCursor()>:
c000c7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7dc:	39 05 04 38 02 c0    	cmp    DWORD PTR ds:0xc0023804,eax
c000c7e2:	75 0c                	jne    c000c7f0 <VgaText::updateCursor()+0x18>
c000c7e4:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000c7ea:	85 c0                	test   eax,eax
c000c7ec:	74 02                	je     c000c7f0 <VgaText::updateCursor()+0x18>
c000c7ee:	ff e0                	jmp    eax
c000c7f0:	c3                   	ret    
c000c7f1:	90                   	nop

c000c7f2 <VgaText::showCursor(bool)>:
c000c7f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c7fa:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000c800:	c3                   	ret    
c000c801:	90                   	nop

c000c802 <VgaText::disableBlink(bool)>:
c000c802:	56                   	push   esi
c000c803:	53                   	push   ebx
c000c804:	51                   	push   ecx
c000c805:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c809:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c80d:	39 1d 04 38 02 c0    	cmp    DWORD PTR ds:0xc0023804,ebx
c000c813:	75 18                	jne    c000c82d <VgaText::disableBlink(bool)+0x2b>
c000c815:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000c81b:	85 c0                	test   eax,eax
c000c81d:	74 0e                	je     c000c82d <VgaText::disableBlink(bool)+0x2b>
c000c81f:	89 f1                	mov    ecx,esi
c000c821:	52                   	push   edx
c000c822:	52                   	push   edx
c000c823:	0f b6 d1             	movzx  edx,cl
c000c826:	52                   	push   edx
c000c827:	53                   	push   ebx
c000c828:	ff d0                	call   eax
c000c82a:	83 c4 10             	add    esp,0x10
c000c82d:	89 f0                	mov    eax,esi
c000c82f:	83 f0 01             	xor    eax,0x1
c000c832:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000c838:	58                   	pop    eax
c000c839:	5b                   	pop    ebx
c000c83a:	5e                   	pop    esi
c000c83b:	c3                   	ret    

c000c83c <VgaText::doANSI_SGR(int)>:
c000c83c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c844:	85 d2                	test   edx,edx
c000c846:	75 14                	jne    c000c85c <VgaText::doANSI_SGR(int)+0x20>
c000c848:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000c84e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c854:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000c85a:	eb 65                	jmp    c000c8c1 <VgaText::doANSI_SGR(int)+0x85>
c000c85c:	83 fa 07             	cmp    edx,0x7
c000c85f:	75 14                	jne    c000c875 <VgaText::doANSI_SGR(int)+0x39>
c000c861:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000c867:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000c86d:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000c873:	eb 4c                	jmp    c000c8c1 <VgaText::doANSI_SGR(int)+0x85>
c000c875:	83 fa 1b             	cmp    edx,0x1b
c000c878:	74 ce                	je     c000c848 <VgaText::doANSI_SGR(int)+0xc>
c000c87a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000c87d:	83 f9 07             	cmp    ecx,0x7
c000c880:	77 09                	ja     c000c88b <VgaText::doANSI_SGR(int)+0x4f>
c000c882:	8b 14 8d a0 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd460]
c000c889:	eb 20                	jmp    c000c8ab <VgaText::doANSI_SGR(int)+0x6f>
c000c88b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000c88e:	83 f9 07             	cmp    ecx,0x7
c000c891:	77 09                	ja     c000c89c <VgaText::doANSI_SGR(int)+0x60>
c000c893:	8b 14 8d a0 2b 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd460]
c000c89a:	eb 25                	jmp    c000c8c1 <VgaText::doANSI_SGR(int)+0x85>
c000c89c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000c89f:	83 f9 07             	cmp    ecx,0x7
c000c8a2:	77 0e                	ja     c000c8b2 <VgaText::doANSI_SGR(int)+0x76>
c000c8a4:	8b 14 95 58 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a8]
c000c8ab:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8b1:	c3                   	ret    
c000c8b2:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000c8b5:	83 f9 07             	cmp    ecx,0x7
c000c8b8:	77 0d                	ja     c000c8c7 <VgaText::doANSI_SGR(int)+0x8b>
c000c8ba:	8b 14 95 30 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5d0]
c000c8c1:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8c7:	c3                   	ret    

c000c8c8 <VgaText::setDefaultBgColour(VgaColour)>:
c000c8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8d0:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000c8d6:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <VgaText::setDefaultFgColour(VgaColour)>:
c000c8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c8e6:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000c8ec:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000c8f2:	c3                   	ret    
c000c8f3:	90                   	nop

c000c8f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000c8f4:	53                   	push   ebx
c000c8f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c8f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c8fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c901:	51                   	push   ecx
c000c902:	e8 c1 ff ff ff       	call   c000c8c8 <VgaText::setDefaultBgColour(VgaColour)>
c000c907:	58                   	pop    eax
c000c908:	5a                   	pop    edx
c000c909:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c90d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000c911:	5b                   	pop    ebx
c000c912:	eb ca                	jmp    c000c8de <VgaText::setDefaultFgColour(VgaColour)>

c000c914 <VgaText::combineColours(unsigned char, unsigned char)>:
c000c914:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000c918:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000c91d:	83 e0 0f             	and    eax,0xf
c000c920:	c1 e2 04             	shl    edx,0x4
c000c923:	09 d0                	or     eax,edx
c000c925:	c3                   	ret    

c000c926 <VgaText::scrollScreen()>:
c000c926:	57                   	push   edi
c000c927:	56                   	push   esi
c000c928:	be 01 00 00 00       	mov    esi,0x1
c000c92d:	53                   	push   ebx
c000c92e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c932:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000c938:	31 ff                	xor    edi,edi
c000c93a:	01 d9                	add    ecx,ebx
c000c93c:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000c93f:	83 fe 17             	cmp    esi,0x17
c000c942:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000c948:	75 28                	jne    c000c972 <VgaText::scrollScreen()+0x4c>
c000c94a:	f7 c7 01 00 00 00    	test   edi,0x1
c000c950:	74 1c                	je     c000c96e <VgaText::scrollScreen()+0x48>
c000c952:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000c959:	50                   	push   eax
c000c95a:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000c961:	50                   	push   eax
c000c962:	e8 ad ff ff ff       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000c967:	5a                   	pop    edx
c000c968:	5a                   	pop    edx
c000c969:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000c96c:	eb 04                	jmp    c000c972 <VgaText::scrollScreen()+0x4c>
c000c96e:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000c972:	47                   	inc    edi
c000c973:	41                   	inc    ecx
c000c974:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000c97a:	75 c0                	jne    c000c93c <VgaText::scrollScreen()+0x16>
c000c97c:	46                   	inc    esi
c000c97d:	83 fe 18             	cmp    esi,0x18
c000c980:	75 b0                	jne    c000c932 <VgaText::scrollScreen()+0xc>
c000c982:	39 1d 04 38 02 c0    	cmp    DWORD PTR ds:0xc0023804,ebx
c000c988:	75 24                	jne    c000c9ae <VgaText::scrollScreen()+0x88>
c000c98a:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000c991:	74 08                	je     c000c99b <VgaText::scrollScreen()+0x75>
c000c993:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000c999:	eb 13                	jmp    c000c9ae <VgaText::scrollScreen()+0x88>
c000c99b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	74 09                	je     c000c9ae <VgaText::scrollScreen()+0x88>
c000c9a5:	83 ec 0c             	sub    esp,0xc
c000c9a8:	53                   	push   ebx
c000c9a9:	ff d0                	call   eax
c000c9ab:	83 c4 10             	add    esp,0x10
c000c9ae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c9b2:	5b                   	pop    ebx
c000c9b3:	5e                   	pop    esi
c000c9b4:	5f                   	pop    edi
c000c9b5:	e9 1e fe ff ff       	jmp    c000c7d8 <VgaText::updateCursor()>

c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>:
c000c9ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000c9bf:	c1 e0 08             	shl    eax,0x8
c000c9c2:	89 c2                	mov    edx,eax
c000c9c4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000c9c9:	09 d0                	or     eax,edx
c000c9cb:	c3                   	ret    

c000c9cc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000c9cc:	53                   	push   ebx
c000c9cd:	83 ec 08             	sub    esp,0x8
c000c9d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9d4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9d9:	50                   	push   eax
c000c9da:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c9df:	50                   	push   eax
c000c9e0:	e8 2f ff ff ff       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000c9e5:	5a                   	pop    edx
c000c9e6:	0f b6 c0             	movzx  eax,al
c000c9e9:	5b                   	pop    ebx
c000c9ea:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000c9ef:	50                   	push   eax
c000c9f0:	53                   	push   ebx
c000c9f1:	e8 c4 ff ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000c9f6:	5a                   	pop    edx
c000c9f7:	5a                   	pop    edx
c000c9f8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000c9fe:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ca02:	0f b7 d2             	movzx  edx,dx
c000ca05:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ca0a:	39 0d 04 38 02 c0    	cmp    DWORD PTR ds:0xc0023804,ecx
c000ca10:	75 14                	jne    c000ca26 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca12:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ca18:	85 c0                	test   eax,eax
c000ca1a:	74 0a                	je     c000ca26 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ca1c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ca20:	83 c4 08             	add    esp,0x8
c000ca23:	5b                   	pop    ebx
c000ca24:	ff e0                	jmp    eax
c000ca26:	83 c4 08             	add    esp,0x8
c000ca29:	5b                   	pop    ebx
c000ca2a:	c3                   	ret    
c000ca2b:	90                   	nop

c000ca2c <VgaText::getCursorX()>:
c000ca2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca30:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ca36:	c3                   	ret    
c000ca37:	90                   	nop

c000ca38 <VgaText::getCursorY()>:
c000ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca3c:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ca42:	c3                   	ret    
c000ca43:	90                   	nop

c000ca44 <VgaText::setCursor(int, int)>:
c000ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca4c:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ca52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca56:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ca5c:	e9 77 fd ff ff       	jmp    c000c7d8 <VgaText::updateCursor()>
c000ca61:	90                   	nop

c000ca62 <VgaText::setCursorX(int)>:
c000ca62:	83 ec 10             	sub    esp,0x10
c000ca65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca69:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ca6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca73:	50                   	push   eax
c000ca74:	e8 cb ff ff ff       	call   c000ca44 <VgaText::setCursor(int, int)>
c000ca79:	83 c4 1c             	add    esp,0x1c
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <VgaText::setCursorY(int)>:
c000ca7e:	83 ec 10             	sub    esp,0x10
c000ca81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca89:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ca8f:	50                   	push   eax
c000ca90:	e8 af ff ff ff       	call   c000ca44 <VgaText::setCursor(int, int)>
c000ca95:	83 c4 1c             	add    esp,0x1c
c000ca98:	c3                   	ret    
c000ca99:	90                   	nop

c000ca9a <VgaText::incrementCursor(bool)>:
c000ca9a:	56                   	push   esi
c000ca9b:	53                   	push   ebx
c000ca9c:	51                   	push   ecx
c000ca9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caa1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000caa5:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000caab:	40                   	inc    eax
c000caac:	83 f8 50             	cmp    eax,0x50
c000caaf:	74 08                	je     c000cab9 <VgaText::incrementCursor(bool)+0x1f>
c000cab1:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cab7:	eb 33                	jmp    c000caec <VgaText::incrementCursor(bool)+0x52>
c000cab9:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cabf:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cac9:	8d 50 01             	lea    edx,[eax+0x1]
c000cacc:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cad2:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cad8:	75 12                	jne    c000caec <VgaText::incrementCursor(bool)+0x52>
c000cada:	83 ec 0c             	sub    esp,0xc
c000cadd:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cae3:	53                   	push   ebx
c000cae4:	e8 3d fe ff ff       	call   c000c926 <VgaText::scrollScreen()>
c000cae9:	83 c4 10             	add    esp,0x10
c000caec:	89 f0                	mov    eax,esi
c000caee:	84 c0                	test   al,al
c000caf0:	74 0c                	je     c000cafe <VgaText::incrementCursor(bool)+0x64>
c000caf2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000caf6:	5a                   	pop    edx
c000caf7:	5b                   	pop    ebx
c000caf8:	5e                   	pop    esi
c000caf9:	e9 da fc ff ff       	jmp    c000c7d8 <VgaText::updateCursor()>
c000cafe:	58                   	pop    eax
c000caff:	5b                   	pop    ebx
c000cb00:	5e                   	pop    esi
c000cb01:	c3                   	ret    

c000cb02 <VgaText::updateRAMUsageDisplay(int)>:
c000cb02:	53                   	push   ebx
c000cb03:	bb 0a 00 00 00       	mov    ebx,0xa
c000cb08:	6a 0f                	push   0xf
c000cb0a:	6a 00                	push   0x0
c000cb0c:	e8 03 fe ff ff       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000cb11:	5a                   	pop    edx
c000cb12:	59                   	pop    ecx
c000cb13:	0f b6 c8             	movzx  ecx,al
c000cb16:	51                   	push   ecx
c000cb17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb1b:	99                   	cdq    
c000cb1c:	f7 fb                	idiv   ebx
c000cb1e:	89 d3                	mov    ebx,edx
c000cb20:	83 c0 30             	add    eax,0x30
c000cb23:	83 c3 30             	add    ebx,0x30
c000cb26:	0f be c0             	movsx  eax,al
c000cb29:	0f b6 db             	movzx  ebx,bl
c000cb2c:	50                   	push   eax
c000cb2d:	e8 88 fe ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cb32:	5a                   	pop    edx
c000cb33:	5a                   	pop    edx
c000cb34:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cb3a:	51                   	push   ecx
c000cb3b:	53                   	push   ebx
c000cb3c:	e8 79 fe ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cb41:	5b                   	pop    ebx
c000cb42:	5a                   	pop    edx
c000cb43:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cb49:	51                   	push   ecx
c000cb4a:	6a 25                	push   0x25
c000cb4c:	e8 69 fe ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cb51:	59                   	pop    ecx
c000cb52:	5b                   	pop    ebx
c000cb53:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cb59:	5b                   	pop    ebx
c000cb5a:	c3                   	ret    
c000cb5b:	90                   	nop

c000cb5c <VgaText::updateDiskUsage()>:
c000cb5c:	55                   	push   ebp
c000cb5d:	bd 10 27 00 00       	mov    ebp,0x2710
c000cb62:	57                   	push   edi
c000cb63:	56                   	push   esi
c000cb64:	53                   	push   ebx
c000cb65:	6a 0f                	push   0xf
c000cb67:	6a 00                	push   0x0
c000cb69:	e8 a6 fd ff ff       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000cb6e:	5a                   	pop    edx
c000cb6f:	0f b6 d8             	movzx  ebx,al
c000cb72:	59                   	pop    ecx
c000cb73:	a1 e4 54 02 c0       	mov    eax,ds:0xc00254e4
c000cb78:	53                   	push   ebx
c000cb79:	b9 0a 00 00 00       	mov    ecx,0xa
c000cb7e:	99                   	cdq    
c000cb7f:	f7 fd                	idiv   ebp
c000cb81:	99                   	cdq    
c000cb82:	f7 f9                	idiv   ecx
c000cb84:	8d 42 30             	lea    eax,[edx+0x30]
c000cb87:	0f b6 c0             	movzx  eax,al
c000cb8a:	50                   	push   eax
c000cb8b:	e8 2a fe ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cb90:	5e                   	pop    esi
c000cb91:	5f                   	pop    edi
c000cb92:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cb98:	bf e8 03 00 00       	mov    edi,0x3e8
c000cb9d:	53                   	push   ebx
c000cb9e:	a1 e4 54 02 c0       	mov    eax,ds:0xc00254e4
c000cba3:	99                   	cdq    
c000cba4:	f7 ff                	idiv   edi
c000cba6:	99                   	cdq    
c000cba7:	f7 f9                	idiv   ecx
c000cba9:	8d 42 30             	lea    eax,[edx+0x30]
c000cbac:	0f b6 c0             	movzx  eax,al
c000cbaf:	50                   	push   eax
c000cbb0:	e8 05 fe ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cbb5:	5a                   	pop    edx
c000cbb6:	5e                   	pop    esi
c000cbb7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cbbd:	be 64 00 00 00       	mov    esi,0x64
c000cbc2:	53                   	push   ebx
c000cbc3:	a1 e4 54 02 c0       	mov    eax,ds:0xc00254e4
c000cbc8:	99                   	cdq    
c000cbc9:	f7 fe                	idiv   esi
c000cbcb:	99                   	cdq    
c000cbcc:	f7 f9                	idiv   ecx
c000cbce:	8d 42 30             	lea    eax,[edx+0x30]
c000cbd1:	0f b6 c0             	movzx  eax,al
c000cbd4:	50                   	push   eax
c000cbd5:	e8 e0 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cbda:	5a                   	pop    edx
c000cbdb:	5a                   	pop    edx
c000cbdc:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cbe2:	53                   	push   ebx
c000cbe3:	a1 e4 54 02 c0       	mov    eax,ds:0xc00254e4
c000cbe8:	99                   	cdq    
c000cbe9:	f7 f9                	idiv   ecx
c000cbeb:	99                   	cdq    
c000cbec:	f7 f9                	idiv   ecx
c000cbee:	8d 42 30             	lea    eax,[edx+0x30]
c000cbf1:	0f b6 c0             	movzx  eax,al
c000cbf4:	50                   	push   eax
c000cbf5:	e8 c0 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cbfa:	5a                   	pop    edx
c000cbfb:	5a                   	pop    edx
c000cbfc:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cc02:	53                   	push   ebx
c000cc03:	a1 e4 54 02 c0       	mov    eax,ds:0xc00254e4
c000cc08:	99                   	cdq    
c000cc09:	f7 f9                	idiv   ecx
c000cc0b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc0e:	0f b6 c0             	movzx  eax,al
c000cc11:	50                   	push   eax
c000cc12:	e8 a3 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cc17:	5a                   	pop    edx
c000cc18:	5a                   	pop    edx
c000cc19:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cc1f:	53                   	push   ebx
c000cc20:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c000cc25:	99                   	cdq    
c000cc26:	f7 fd                	idiv   ebp
c000cc28:	99                   	cdq    
c000cc29:	f7 f9                	idiv   ecx
c000cc2b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc2e:	0f b6 c0             	movzx  eax,al
c000cc31:	50                   	push   eax
c000cc32:	e8 83 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cc37:	5d                   	pop    ebp
c000cc38:	5a                   	pop    edx
c000cc39:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000cc3f:	53                   	push   ebx
c000cc40:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c000cc45:	99                   	cdq    
c000cc46:	f7 ff                	idiv   edi
c000cc48:	99                   	cdq    
c000cc49:	f7 f9                	idiv   ecx
c000cc4b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc4e:	0f b6 c0             	movzx  eax,al
c000cc51:	50                   	push   eax
c000cc52:	e8 63 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cc57:	5f                   	pop    edi
c000cc58:	5d                   	pop    ebp
c000cc59:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000cc5f:	53                   	push   ebx
c000cc60:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c000cc65:	99                   	cdq    
c000cc66:	f7 fe                	idiv   esi
c000cc68:	99                   	cdq    
c000cc69:	f7 f9                	idiv   ecx
c000cc6b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc6e:	0f b6 c0             	movzx  eax,al
c000cc71:	50                   	push   eax
c000cc72:	e8 43 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cc77:	5a                   	pop    edx
c000cc78:	5e                   	pop    esi
c000cc79:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000cc7f:	53                   	push   ebx
c000cc80:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c000cc85:	99                   	cdq    
c000cc86:	f7 f9                	idiv   ecx
c000cc88:	99                   	cdq    
c000cc89:	f7 f9                	idiv   ecx
c000cc8b:	8d 42 30             	lea    eax,[edx+0x30]
c000cc8e:	0f b6 c0             	movzx  eax,al
c000cc91:	50                   	push   eax
c000cc92:	e8 23 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000cc97:	5f                   	pop    edi
c000cc98:	5d                   	pop    ebp
c000cc99:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000cc9f:	53                   	push   ebx
c000cca0:	a1 e0 54 02 c0       	mov    eax,ds:0xc00254e0
c000cca5:	99                   	cdq    
c000cca6:	f7 f9                	idiv   ecx
c000cca8:	83 c2 30             	add    edx,0x30
c000ccab:	0f b6 d2             	movzx  edx,dl
c000ccae:	52                   	push   edx
c000ccaf:	e8 06 fd ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000ccb4:	5a                   	pop    edx
c000ccb5:	59                   	pop    ecx
c000ccb6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000ccbc:	5b                   	pop    ebx
c000ccbd:	5e                   	pop    esi
c000ccbe:	5f                   	pop    edi
c000ccbf:	5d                   	pop    ebp
c000ccc0:	c3                   	ret    
c000ccc1:	90                   	nop

c000ccc2 <VgaText::updateTitle()>:
c000ccc2:	53                   	push   ebx
c000ccc3:	31 c0                	xor    eax,eax
c000ccc5:	83 ec 58             	sub    esp,0x58
c000ccc8:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000cccc:	89 e1                	mov    ecx,esp
c000ccce:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000ccd2:	40                   	inc    eax
c000ccd3:	83 f8 50             	cmp    eax,0x50
c000ccd6:	75 f6                	jne    c000ccce <VgaText::updateTitle()+0xc>
c000ccd8:	31 c0                	xor    eax,eax
c000ccda:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000cce1:	84 db                	test   bl,bl
c000cce3:	74 06                	je     c000cceb <VgaText::updateTitle()+0x29>
c000cce5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000cce8:	40                   	inc    eax
c000cce9:	eb ef                	jmp    c000ccda <VgaText::updateTitle()+0x18>
c000cceb:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000ccf1:	85 c0                	test   eax,eax
c000ccf3:	74 09                	je     c000ccfe <VgaText::updateTitle()+0x3c>
c000ccf5:	53                   	push   ebx
c000ccf6:	53                   	push   ebx
c000ccf7:	51                   	push   ecx
c000ccf8:	52                   	push   edx
c000ccf9:	ff d0                	call   eax
c000ccfb:	83 c4 10             	add    esp,0x10
c000ccfe:	e8 59 fe ff ff       	call   c000cb5c <VgaText::updateDiskUsage()>
c000cd03:	83 c4 58             	add    esp,0x58
c000cd06:	5b                   	pop    ebx
c000cd07:	c3                   	ret    

c000cd08 <VgaText::setTitleTextColour(VgaColour)>:
c000cd08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd10:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000cd16:	eb aa                	jmp    c000ccc2 <VgaText::updateTitle()>

c000cd18 <VgaText::setTitleColour(VgaColour)>:
c000cd18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd20:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000cd26:	eb 9a                	jmp    c000ccc2 <VgaText::updateTitle()>

c000cd28 <VgaText::setTitle(char*)>:
c000cd28:	53                   	push   ebx
c000cd29:	83 ec 10             	sub    esp,0x10
c000cd2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd34:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000cd3a:	50                   	push   eax
c000cd3b:	e8 67 39 ff ff       	call   c00006a7 <strcpy>
c000cd40:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000cd44:	83 c4 18             	add    esp,0x18
c000cd47:	5b                   	pop    ebx
c000cd48:	e9 75 ff ff ff       	jmp    c000ccc2 <VgaText::updateTitle()>
c000cd4d:	90                   	nop

c000cd4e <VgaText::decrementCursor(bool)>:
c000cd4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd56:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000cd5c:	85 c0                	test   eax,eax
c000cd5e:	74 07                	je     c000cd67 <VgaText::decrementCursor(bool)+0x19>
c000cd60:	48                   	dec    eax
c000cd61:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000cd67:	84 c9                	test   cl,cl
c000cd69:	74 09                	je     c000cd74 <VgaText::decrementCursor(bool)+0x26>
c000cd6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd6f:	e9 64 fa ff ff       	jmp    c000c7d8 <VgaText::updateCursor()>
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000cd76:	53                   	push   ebx
c000cd77:	83 ec 08             	sub    esp,0x8
c000cd7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cd7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000cd8a:	3c 07                	cmp    al,0x7
c000cd8c:	75 2a                	jne    c000cdb8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000cd8e:	a1 ac 38 02 c0       	mov    eax,ds:0xc00238ac
c000cd93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000cd9b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000cda3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000cdab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdaf:	83 c4 08             	add    esp,0x8
c000cdb2:	5b                   	pop    ebx
c000cdb3:	e9 16 30 00 00       	jmp    c000fdce <Buzzer::beep(int, int, bool)>
c000cdb8:	3c 0d                	cmp    al,0xd
c000cdba:	75 0c                	jne    c000cdc8 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000cdbc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cdc6:	eb 3b                	jmp    c000ce03 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000cdc8:	3c 0a                	cmp    al,0xa
c000cdca:	75 40                	jne    c000ce0c <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000cdcc:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cdd2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cddc:	8d 50 01             	lea    edx,[eax+0x1]
c000cddf:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cde5:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cdeb:	75 12                	jne    c000cdff <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000cded:	83 ec 0c             	sub    esp,0xc
c000cdf0:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cdf6:	53                   	push   ebx
c000cdf7:	e8 2a fb ff ff       	call   c000c926 <VgaText::scrollScreen()>
c000cdfc:	83 c4 10             	add    esp,0x10
c000cdff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce03:	83 c4 08             	add    esp,0x8
c000ce06:	5b                   	pop    ebx
c000ce07:	e9 cc f9 ff ff       	jmp    c000c7d8 <VgaText::updateCursor()>
c000ce0c:	3c 08                	cmp    al,0x8
c000ce0e:	75 31                	jne    c000ce41 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000ce10:	50                   	push   eax
c000ce11:	50                   	push   eax
c000ce12:	6a 01                	push   0x1
c000ce14:	53                   	push   ebx
c000ce15:	e8 34 ff ff ff       	call   c000cd4e <VgaText::decrementCursor(bool)>
c000ce1a:	5a                   	pop    edx
c000ce1b:	59                   	pop    ecx
c000ce1c:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce22:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce28:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000ce2e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000ce34:	6a 20                	push   0x20
c000ce36:	53                   	push   ebx
c000ce37:	e8 90 fb ff ff       	call   c000c9cc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce3c:	83 c4 28             	add    esp,0x28
c000ce3f:	5b                   	pop    ebx
c000ce40:	c3                   	ret    
c000ce41:	83 ec 08             	sub    esp,0x8
c000ce44:	0f be c0             	movsx  eax,al
c000ce47:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000ce4d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000ce53:	51                   	push   ecx
c000ce54:	52                   	push   edx
c000ce55:	50                   	push   eax
c000ce56:	53                   	push   ebx
c000ce57:	e8 70 fb ff ff       	call   c000c9cc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ce5c:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000ce60:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000ce68:	83 c4 28             	add    esp,0x28
c000ce6b:	5b                   	pop    ebx
c000ce6c:	e9 29 fc ff ff       	jmp    c000ca9a <VgaText::incrementCursor(bool)>
c000ce71:	90                   	nop

c000ce72 <VgaText::isShowingCursor()>:
c000ce72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce76:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000ce7c:	c3                   	ret    
c000ce7d:	90                   	nop

c000ce7e <VgaText::isBlinkDisabled()>:
c000ce7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce82:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000ce88:	83 f0 01             	xor    eax,0x1
c000ce8b:	c3                   	ret    

c000ce8c <VgaText::setCursorHeight(int)>:
c000ce8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce94:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000ce9a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000cea1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cea5:	e9 48 f9 ff ff       	jmp    c000c7f2 <VgaText::showCursor(bool)>

c000ceaa <VgaText::getCursorHeight()>:
c000ceaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceae:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000ceb4:	c3                   	ret    

c000ceb5 <setActiveTerminal(VgaText*)>:
c000ceb5:	53                   	push   ebx
c000ceb6:	83 ec 08             	sub    esp,0x8
c000ceb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cebd:	85 db                	test   ebx,ebx
c000cebf:	75 11                	jne    c000ced2 <setActiveTerminal(VgaText*)+0x1d>
c000cec1:	c7 44 24 10 d4 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc00204d4
c000cec9:	83 c4 08             	add    esp,0x8
c000cecc:	5b                   	pop    ebx
c000cecd:	e9 a6 7d 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>
c000ced2:	50                   	push   eax
c000ced3:	50                   	push   eax
c000ced4:	53                   	push   ebx
c000ced5:	68 e2 04 02 c0       	push   0xc00204e2
c000ceda:	e8 04 21 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000cedf:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c000cee4:	83 c4 10             	add    esp,0x10
c000cee7:	85 c0                	test   eax,eax
c000cee9:	74 0c                	je     c000cef7 <setActiveTerminal(VgaText*)+0x42>
c000ceeb:	83 ec 0c             	sub    esp,0xc
c000ceee:	50                   	push   eax
c000ceef:	e8 e4 f8 ff ff       	call   c000c7d8 <VgaText::updateCursor()>
c000cef4:	83 c4 10             	add    esp,0x10
c000cef7:	89 1d 04 38 02 c0    	mov    DWORD PTR ds:0xc0023804,ebx
c000cefd:	51                   	push   ecx
c000cefe:	51                   	push   ecx
c000ceff:	53                   	push   ebx
c000cf00:	68 fa 04 02 c0       	push   0xc00204fa
c000cf05:	e8 d9 20 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000cf0a:	83 c4 0c             	add    esp,0xc
c000cf0d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000cf13:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000cf19:	53                   	push   ebx
c000cf1a:	e8 25 fb ff ff       	call   c000ca44 <VgaText::setCursor(int, int)>
c000cf1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf22:	e8 57 ff ff ff       	call   c000ce7e <VgaText::isBlinkDisabled()>
c000cf27:	5a                   	pop    edx
c000cf28:	0f b6 c0             	movzx  eax,al
c000cf2b:	59                   	pop    ecx
c000cf2c:	50                   	push   eax
c000cf2d:	53                   	push   ebx
c000cf2e:	e8 cf f8 ff ff       	call   c000c802 <VgaText::disableBlink(bool)>
c000cf33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf36:	e8 6f ff ff ff       	call   c000ceaa <VgaText::getCursorHeight()>
c000cf3b:	5a                   	pop    edx
c000cf3c:	59                   	pop    ecx
c000cf3d:	50                   	push   eax
c000cf3e:	53                   	push   ebx
c000cf3f:	e8 48 ff ff ff       	call   c000ce8c <VgaText::setCursorHeight(int)>
c000cf44:	83 c4 10             	add    esp,0x10
c000cf47:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cf4e:	75 0a                	jne    c000cf5a <setActiveTerminal(VgaText*)+0xa5>
c000cf50:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000cf5a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf5e:	83 c4 08             	add    esp,0x8
c000cf61:	5b                   	pop    ebx
c000cf62:	e9 1d f8 ff ff       	jmp    c000c784 <VgaText::load()>

c000cf67 <doTerminalCycle()>:
c000cf67:	83 ec 18             	sub    esp,0x18
c000cf6a:	a1 00 38 02 c0       	mov    eax,ds:0xc0023800
c000cf6f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000cf75:	50                   	push   eax
c000cf76:	a3 00 38 02 c0       	mov    ds:0xc0023800,eax
c000cf7b:	e8 35 ff ff ff       	call   c000ceb5 <setActiveTerminal(VgaText*)>
c000cf80:	83 c4 1c             	add    esp,0x1c
c000cf83:	c3                   	ret    

c000cf84 <VgaText::doUpdate()>:
c000cf84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf88:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000cf8e:	85 c0                	test   eax,eax
c000cf90:	74 02                	je     c000cf94 <VgaText::doUpdate()+0x10>
c000cf92:	ff e0                	jmp    eax
c000cf94:	c3                   	ret    
c000cf95:	90                   	nop

c000cf96 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000cf96:	55                   	push   ebp
c000cf97:	57                   	push   edi
c000cf98:	56                   	push   esi
c000cf99:	53                   	push   ebx
c000cf9a:	83 ec 1c             	sub    esp,0x1c
c000cf9d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cfa1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfa6:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000cfad:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000cfb0:	50                   	push   eax
c000cfb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000cfb6:	50                   	push   eax
c000cfb7:	e8 58 f9 ff ff       	call   c000c914 <VgaText::combineColours(unsigned char, unsigned char)>
c000cfbc:	59                   	pop    ecx
c000cfbd:	0f b6 c0             	movzx  eax,al
c000cfc0:	5b                   	pop    ebx
c000cfc1:	31 c9                	xor    ecx,ecx
c000cfc3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000cfcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000cfcf:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000cfd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfd9:	0f b7 db             	movzx  ebx,bx
c000cfdc:	01 db                	add    ebx,ebx
c000cfde:	01 fb                	add    ebx,edi
c000cfe0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cfe3:	84 c0                	test   al,al
c000cfe5:	0f 84 38 01 00 00    	je     c000d123 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000cfeb:	3c 0d                	cmp    al,0xd
c000cfed:	75 0f                	jne    c000cffe <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000cfef:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000cff9:	e9 1f 01 00 00       	jmp    c000d11d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000cffe:	3c 0a                	cmp    al,0xa
c000d000:	75 5b                	jne    c000d05d <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d002:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d008:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d012:	8d 48 01             	lea    ecx,[eax+0x1]
c000d015:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d01b:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d021:	75 12                	jne    c000d035 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d023:	83 ec 0c             	sub    esp,0xc
c000d026:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d02c:	55                   	push   ebp
c000d02d:	e8 f4 f8 ff ff       	call   c000c926 <VgaText::scrollScreen()>
c000d032:	83 c4 10             	add    esp,0x10
c000d035:	83 ec 0c             	sub    esp,0xc
c000d038:	55                   	push   ebp
c000d039:	e8 9a f7 ff ff       	call   c000c7d8 <VgaText::updateCursor()>
c000d03e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d046:	83 c4 10             	add    esp,0x10
c000d049:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d04f:	31 c9                	xor    ecx,ecx
c000d051:	0f b7 db             	movzx  ebx,bx
c000d054:	01 db                	add    ebx,ebx
c000d056:	01 fb                	add    ebx,edi
c000d058:	e9 c0 00 00 00       	jmp    c000d11d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d05d:	3c 08                	cmp    al,0x8
c000d05f:	75 4e                	jne    c000d0af <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d061:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d065:	53                   	push   ebx
c000d066:	53                   	push   ebx
c000d067:	6a 01                	push   0x1
c000d069:	55                   	push   ebp
c000d06a:	e8 df fc ff ff       	call   c000cd4e <VgaText::decrementCursor(bool)>
c000d06f:	58                   	pop    eax
c000d070:	5a                   	pop    edx
c000d071:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d077:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d07d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d083:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d089:	6a 20                	push   0x20
c000d08b:	55                   	push   ebp
c000d08c:	e8 3b f9 ff ff       	call   c000c9cc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d091:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d099:	83 c4 20             	add    esp,0x20
c000d09c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d0a2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d0a6:	0f b7 db             	movzx  ebx,bx
c000d0a9:	01 db                	add    ebx,ebx
c000d0ab:	01 fb                	add    ebx,edi
c000d0ad:	eb 6e                	jmp    c000d11d <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d0af:	51                   	push   ecx
c000d0b0:	51                   	push   ecx
c000d0b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d0b5:	50                   	push   eax
c000d0b6:	e8 ff f8 ff ff       	call   c000c9ba <VgaText::combineCharAndColour(char, unsigned char)>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	66 89 03             	mov    WORD PTR [ebx],ax
c000d0c1:	39 2d 04 38 02 c0    	cmp    DWORD PTR ds:0xc0023804,ebp
c000d0c7:	75 2a                	jne    c000d0f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0c9:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d0cf:	85 c0                	test   eax,eax
c000d0d1:	74 20                	je     c000d0f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d0d3:	52                   	push   edx
c000d0d4:	52                   	push   edx
c000d0d5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d0db:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d0e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0e9:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d0ec:	51                   	push   ecx
c000d0ed:	55                   	push   ebp
c000d0ee:	ff d0                	call   eax
c000d0f0:	83 c4 20             	add    esp,0x20
c000d0f3:	83 c3 02             	add    ebx,0x2
c000d0f6:	50                   	push   eax
c000d0f7:	50                   	push   eax
c000d0f8:	6a 00                	push   0x0
c000d0fa:	55                   	push   ebp
c000d0fb:	e8 9a f9 ff ff       	call   c000ca9a <VgaText::incrementCursor(bool)>
c000d100:	83 c4 10             	add    esp,0x10
c000d103:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d10a:	75 0f                	jne    c000d11b <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d10c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d114:	0f b7 db             	movzx  ebx,bx
c000d117:	01 db                	add    ebx,ebx
c000d119:	01 fb                	add    ebx,edi
c000d11b:	b1 01                	mov    cl,0x1
c000d11d:	46                   	inc    esi
c000d11e:	e9 bd fe ff ff       	jmp    c000cfe0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d123:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d127:	83 ec 0c             	sub    esp,0xc
c000d12a:	55                   	push   ebp
c000d12b:	e8 a8 f6 ff ff       	call   c000c7d8 <VgaText::updateCursor()>
c000d130:	83 c4 10             	add    esp,0x10
c000d133:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d137:	84 c9                	test   cl,cl
c000d139:	74 0c                	je     c000d147 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d13b:	83 ec 0c             	sub    esp,0xc
c000d13e:	55                   	push   ebp
c000d13f:	e8 40 fe ff ff       	call   c000cf84 <VgaText::doUpdate()>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d14e:	83 c4 1c             	add    esp,0x1c
c000d151:	5b                   	pop    ebx
c000d152:	5e                   	pop    esi
c000d153:	5f                   	pop    edi
c000d154:	5d                   	pop    ebp
c000d155:	c3                   	ret    

c000d156 <VgaText::clearScreen()>:
c000d156:	57                   	push   edi
c000d157:	56                   	push   esi
c000d158:	31 f6                	xor    esi,esi
c000d15a:	53                   	push   ebx
c000d15b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d15f:	52                   	push   edx
c000d160:	6a 00                	push   0x0
c000d162:	6a 00                	push   0x0
c000d164:	53                   	push   ebx
c000d165:	e8 da f8 ff ff       	call   c000ca44 <VgaText::setCursor(int, int)>
c000d16a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d171:	83 c4 10             	add    esp,0x10
c000d174:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d17a:	7e 26                	jle    c000d1a2 <VgaText::clearScreen()+0x4c>
c000d17c:	31 ff                	xor    edi,edi
c000d17e:	50                   	push   eax
c000d17f:	50                   	push   eax
c000d180:	56                   	push   esi
c000d181:	57                   	push   edi
c000d182:	47                   	inc    edi
c000d183:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d189:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d18f:	6a 20                	push   0x20
c000d191:	53                   	push   ebx
c000d192:	e8 35 f8 ff ff       	call   c000c9cc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d197:	83 c4 20             	add    esp,0x20
c000d19a:	83 ff 50             	cmp    edi,0x50
c000d19d:	75 df                	jne    c000d17e <VgaText::clearScreen()+0x28>
c000d19f:	46                   	inc    esi
c000d1a0:	eb d2                	jmp    c000d174 <VgaText::clearScreen()+0x1e>
c000d1a2:	83 ec 0c             	sub    esp,0xc
c000d1a5:	53                   	push   ebx
c000d1a6:	e8 d9 fd ff ff       	call   c000cf84 <VgaText::doUpdate()>
c000d1ab:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	5b                   	pop    ebx
c000d1b6:	5e                   	pop    esi
c000d1b7:	5f                   	pop    edi
c000d1b8:	c3                   	ret    
c000d1b9:	90                   	nop

c000d1ba <VgaText::putchar(char)>:
c000d1ba:	56                   	push   esi
c000d1bb:	53                   	push   ebx
c000d1bc:	83 ec 14             	sub    esp,0x14
c000d1bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d1c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d1c7:	3c 5b                	cmp    al,0x5b
c000d1c9:	75 21                	jne    c000d1ec <VgaText::putchar(char)+0x32>
c000d1cb:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d1d2:	74 28                	je     c000d1fc <VgaText::putchar(char)+0x42>
c000d1d4:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d1dd:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d1e7:	e9 e2 00 00 00       	jmp    c000d2ce <VgaText::putchar(char)+0x114>
c000d1ec:	3c 1b                	cmp    al,0x1b
c000d1ee:	75 0c                	jne    c000d1fc <VgaText::putchar(char)+0x42>
c000d1f0:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d1f7:	e9 d2 00 00 00       	jmp    c000d2ce <VgaText::putchar(char)+0x114>
c000d1fc:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d202:	84 c9                	test   cl,cl
c000d204:	0f 84 ab 00 00 00    	je     c000d2b5 <VgaText::putchar(char)+0xfb>
c000d20a:	8d 50 c0             	lea    edx,[eax-0x40]
c000d20d:	80 fa 3e             	cmp    dl,0x3e
c000d210:	0f 87 82 00 00 00    	ja     c000d298 <VgaText::putchar(char)+0xde>
c000d216:	3c 6d                	cmp    al,0x6d
c000d218:	75 4d                	jne    c000d267 <VgaText::putchar(char)+0xad>
c000d21a:	31 f6                	xor    esi,esi
c000d21c:	31 d2                	xor    edx,edx
c000d21e:	31 c0                	xor    eax,eax
c000d220:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d226:	7e 30                	jle    c000d258 <VgaText::putchar(char)+0x9e>
c000d228:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d230:	80 fa 3b             	cmp    dl,0x3b
c000d233:	75 17                	jne    c000d24c <VgaText::putchar(char)+0x92>
c000d235:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d239:	50                   	push   eax
c000d23a:	53                   	push   ebx
c000d23b:	e8 fc f5 ff ff       	call   c000c83c <VgaText::doANSI_SGR(int)>
c000d240:	59                   	pop    ecx
c000d241:	31 d2                	xor    edx,edx
c000d243:	58                   	pop    eax
c000d244:	31 c0                	xor    eax,eax
c000d246:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d24a:	eb 09                	jmp    c000d255 <VgaText::putchar(char)+0x9b>
c000d24c:	6b c0 0a             	imul   eax,eax,0xa
c000d24f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d253:	88 ca                	mov    dl,cl
c000d255:	46                   	inc    esi
c000d256:	eb c8                	jmp    c000d220 <VgaText::putchar(char)+0x66>
c000d258:	84 d2                	test   dl,dl
c000d25a:	74 31                	je     c000d28d <VgaText::putchar(char)+0xd3>
c000d25c:	50                   	push   eax
c000d25d:	53                   	push   ebx
c000d25e:	e8 d9 f5 ff ff       	call   c000c83c <VgaText::doANSI_SGR(int)>
c000d263:	58                   	pop    eax
c000d264:	5a                   	pop    edx
c000d265:	eb 26                	jmp    c000d28d <VgaText::putchar(char)+0xd3>
c000d267:	3c 4a                	cmp    al,0x4a
c000d269:	75 22                	jne    c000d28d <VgaText::putchar(char)+0xd3>
c000d26b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d272:	75 19                	jne    c000d28d <VgaText::putchar(char)+0xd3>
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	53                   	push   ebx
c000d278:	e8 d9 fe ff ff       	call   c000d156 <VgaText::clearScreen()>
c000d27d:	83 c4 0c             	add    esp,0xc
c000d280:	6a 00                	push   0x0
c000d282:	6a 00                	push   0x0
c000d284:	53                   	push   ebx
c000d285:	e8 ba f7 ff ff       	call   c000ca44 <VgaText::setCursor(int, int)>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d296:	eb 36                	jmp    c000d2ce <VgaText::putchar(char)+0x114>
c000d298:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d29e:	83 fa 0e             	cmp    edx,0xe
c000d2a1:	7f 2b                	jg     c000d2ce <VgaText::putchar(char)+0x114>
c000d2a3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d2a6:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d2ac:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d2b3:	eb 19                	jmp    c000d2ce <VgaText::putchar(char)+0x114>
c000d2b5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2bb:	0f be c0             	movsx  eax,al
c000d2be:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2c4:	50                   	push   eax
c000d2c5:	53                   	push   ebx
c000d2c6:	e8 ab fa ff ff       	call   c000cd76 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	83 c4 14             	add    esp,0x14
c000d2d1:	5b                   	pop    ebx
c000d2d2:	5e                   	pop    esi
c000d2d3:	c3                   	ret    

c000d2d4 <VgaText::puts(char const*)>:
c000d2d4:	53                   	push   ebx
c000d2d5:	83 ec 08             	sub    esp,0x8
c000d2d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2dc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d2df:	84 c0                	test   al,al
c000d2e1:	74 12                	je     c000d2f5 <VgaText::puts(char const*)+0x21>
c000d2e3:	43                   	inc    ebx
c000d2e4:	51                   	push   ecx
c000d2e5:	51                   	push   ecx
c000d2e6:	50                   	push   eax
c000d2e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2eb:	e8 ca fe ff ff       	call   c000d1ba <VgaText::putchar(char)>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	eb e7                	jmp    c000d2dc <VgaText::puts(char const*)+0x8>
c000d2f5:	83 c4 08             	add    esp,0x8
c000d2f8:	5b                   	pop    ebx
c000d2f9:	c3                   	ret    

c000d2fa <VgaText::putx(unsigned int)>:
c000d2fa:	57                   	push   edi
c000d2fb:	b9 11 00 00 00       	mov    ecx,0x11
c000d300:	56                   	push   esi
c000d301:	be 16 05 02 c0       	mov    esi,0xc0020516
c000d306:	53                   	push   ebx
c000d307:	83 ec 20             	sub    esp,0x20
c000d30a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d30e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d312:	fc                   	cld    
c000d313:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d315:	be 08 00 00 00       	mov    esi,0x8
c000d31a:	50                   	push   eax
c000d31b:	50                   	push   eax
c000d31c:	89 d8                	mov    eax,ebx
c000d31e:	c1 e3 04             	shl    ebx,0x4
c000d321:	c1 e8 1c             	shr    eax,0x1c
c000d324:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d329:	50                   	push   eax
c000d32a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32e:	e8 87 fe ff ff       	call   c000d1ba <VgaText::putchar(char)>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	4e                   	dec    esi
c000d337:	75 e1                	jne    c000d31a <VgaText::putx(unsigned int)+0x20>
c000d339:	83 c4 20             	add    esp,0x20
c000d33c:	5b                   	pop    ebx
c000d33d:	5e                   	pop    esi
c000d33e:	5f                   	pop    edi
c000d33f:	c3                   	ret    

c000d340 <VgaText::VgaText(char const*)>:
c000d340:	57                   	push   edi
c000d341:	56                   	push   esi
c000d342:	53                   	push   ebx
c000d343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d347:	83 ec 08             	sub    esp,0x8
c000d34a:	6a 00                	push   0x0
c000d34c:	50                   	push   eax
c000d34d:	e8 e0 05 00 00       	call   c000d932 <UnixFile::UnixFile(int)>
c000d352:	83 c4 10             	add    esp,0x10
c000d355:	ba 7c 05 02 c0       	mov    edx,0xc002057c
c000d35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35e:	89 10                	mov    DWORD PTR [eax],edx
c000d360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d364:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d372:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d380:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d396:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3a4:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b2:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3bd:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c8:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d3ce:	bb e0 37 02 c0       	mov    ebx,0xc00237e0
c000d3d3:	b8 08 00 00 00       	mov    eax,0x8
c000d3d8:	fc                   	cld    
c000d3d9:	89 d7                	mov    edi,edx
c000d3db:	89 de                	mov    esi,ebx
c000d3dd:	89 c1                	mov    ecx,eax
c000d3df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d3e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e5:	05 1e 10 00 00       	add    eax,0x101e
c000d3ea:	83 ec 08             	sub    esp,0x8
c000d3ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f1:	50                   	push   eax
c000d3f2:	e8 b0 32 ff ff       	call   c00006a7 <strcpy>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3fe:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d40c:	83 c0 0c             	add    eax,0xc
c000d40f:	83 ec 04             	sub    esp,0x4
c000d412:	68 00 0f 00 00       	push   0xf00
c000d417:	6a 00                	push   0x0
c000d419:	50                   	push   eax
c000d41a:	e8 e9 31 ff ff       	call   c0000608 <memset>
c000d41f:	83 c4 10             	add    esp,0x10
c000d422:	83 ec 04             	sub    esp,0x4
c000d425:	6a 00                	push   0x0
c000d427:	6a 07                	push   0x7
c000d429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d42d:	e8 c2 f4 ff ff       	call   c000c8f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d432:	83 c4 10             	add    esp,0x10
c000d435:	83 ec 08             	sub    esp,0x8
c000d438:	6a 02                	push   0x2
c000d43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d43e:	e8 49 fa ff ff       	call   c000ce8c <VgaText::setCursorHeight(int)>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	83 ec 04             	sub    esp,0x4
c000d449:	6a 00                	push   0x0
c000d44b:	6a 00                	push   0x0
c000d44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d451:	e8 ee f5 ff ff       	call   c000ca44 <VgaText::setCursor(int, int)>
c000d456:	83 c4 10             	add    esp,0x10
c000d459:	83 ec 08             	sub    esp,0x8
c000d45c:	6a 01                	push   0x1
c000d45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d462:	e8 8b f3 ff ff       	call   c000c7f2 <VgaText::showCursor(bool)>
c000d467:	83 c4 10             	add    esp,0x10
c000d46a:	83 ec 08             	sub    esp,0x8
c000d46d:	6a 01                	push   0x1
c000d46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d473:	e8 8a f3 ff ff       	call   c000c802 <VgaText::disableBlink(bool)>
c000d478:	83 c4 10             	add    esp,0x10
c000d47b:	83 ec 0c             	sub    esp,0xc
c000d47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d482:	e8 cf fc ff ff       	call   c000d156 <VgaText::clearScreen()>
c000d487:	83 c4 10             	add    esp,0x10
c000d48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d48e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d499:	05 9e 10 00 00       	add    eax,0x109e
c000d49e:	83 ec 04             	sub    esp,0x4
c000d4a1:	68 96 00 00 00       	push   0x96
c000d4a6:	6a 00                	push   0x0
c000d4a8:	50                   	push   eax
c000d4a9:	e8 5a 31 ff ff       	call   c0000608 <memset>
c000d4ae:	83 c4 10             	add    esp,0x10
c000d4b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b5:	05 34 11 00 00       	add    eax,0x1134
c000d4ba:	83 ec 04             	sub    esp,0x4
c000d4bd:	68 2c 01 00 00       	push   0x12c
c000d4c2:	6a 00                	push   0x0
c000d4c4:	50                   	push   eax
c000d4c5:	e8 3e 31 ff ff       	call   c0000608 <memset>
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	90                   	nop
c000d4ce:	5b                   	pop    ebx
c000d4cf:	5e                   	pop    esi
c000d4d0:	5f                   	pop    edi
c000d4d1:	c3                   	ret    

c000d4d2 <VgaText::receiveKey(unsigned char)>:
c000d4d2:	55                   	push   ebp
c000d4d3:	57                   	push   edi
c000d4d4:	56                   	push   esi
c000d4d5:	53                   	push   ebx
c000d4d6:	83 ec 1c             	sub    esp,0x1c
c000d4d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d4dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d4e1:	84 db                	test   bl,bl
c000d4e3:	0f 84 c9 00 00 00    	je     c000d5b2 <VgaText::receiveKey(unsigned char)+0xe0>
c000d4e9:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d4ef:	80 fb 08             	cmp    bl,0x8
c000d4f2:	75 2c                	jne    c000d520 <VgaText::receiveKey(unsigned char)+0x4e>
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	57                   	push   edi
c000d4f8:	e8 28 31 ff ff       	call   c0000625 <strlen>
c000d4fd:	83 c4 10             	add    esp,0x10
c000d500:	85 c0                	test   eax,eax
c000d502:	74 41                	je     c000d545 <VgaText::receiveKey(unsigned char)+0x73>
c000d504:	50                   	push   eax
c000d505:	50                   	push   eax
c000d506:	6a 08                	push   0x8
c000d508:	56                   	push   esi
c000d509:	e8 ac fc ff ff       	call   c000d1ba <VgaText::putchar(char)>
c000d50e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d511:	e8 0f 31 ff ff       	call   c0000625 <strlen>
c000d516:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d51e:	eb 22                	jmp    c000d542 <VgaText::receiveKey(unsigned char)+0x70>
c000d520:	0f be c3             	movsx  eax,bl
c000d523:	52                   	push   edx
c000d524:	52                   	push   edx
c000d525:	50                   	push   eax
c000d526:	56                   	push   esi
c000d527:	e8 8e fc ff ff       	call   c000d1ba <VgaText::putchar(char)>
c000d52c:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d530:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d535:	59                   	pop    ecx
c000d536:	5d                   	pop    ebp
c000d537:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d53b:	50                   	push   eax
c000d53c:	57                   	push   edi
c000d53d:	e8 1c 32 ff ff       	call   c000075e <strcat>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d54c:	75 05                	jne    c000d553 <VgaText::receiveKey(unsigned char)+0x81>
c000d54e:	80 fb 0a             	cmp    bl,0xa
c000d551:	75 53                	jne    c000d5a6 <VgaText::receiveKey(unsigned char)+0xd4>
c000d553:	83 ec 0c             	sub    esp,0xc
c000d556:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d55c:	53                   	push   ebx
c000d55d:	e8 c3 30 ff ff       	call   c0000625 <strlen>
c000d562:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d565:	89 c5                	mov    ebp,eax
c000d567:	e8 b9 30 ff ff       	call   c0000625 <strlen>
c000d56c:	83 c4 10             	add    esp,0x10
c000d56f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d573:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d578:	76 10                	jbe    c000d58a <VgaText::receiveKey(unsigned char)+0xb8>
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	68 27 05 02 c0       	push   0xc0020527
c000d582:	e8 f1 76 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000d587:	83 c4 10             	add    esp,0x10
c000d58a:	50                   	push   eax
c000d58b:	50                   	push   eax
c000d58c:	57                   	push   edi
c000d58d:	53                   	push   ebx
c000d58e:	e8 cb 31 ff ff       	call   c000075e <strcat>
c000d593:	83 c4 0c             	add    esp,0xc
c000d596:	68 96 00 00 00       	push   0x96
c000d59b:	6a 00                	push   0x0
c000d59d:	57                   	push   edi
c000d59e:	e8 65 30 ff ff       	call   c0000608 <memset>
c000d5a3:	83 c4 10             	add    esp,0x10
c000d5a6:	83 ec 0c             	sub    esp,0xc
c000d5a9:	56                   	push   esi
c000d5aa:	e8 d5 f9 ff ff       	call   c000cf84 <VgaText::doUpdate()>
c000d5af:	83 c4 10             	add    esp,0x10
c000d5b2:	83 c4 1c             	add    esp,0x1c
c000d5b5:	5b                   	pop    ebx
c000d5b6:	5e                   	pop    esi
c000d5b7:	5f                   	pop    edi
c000d5b8:	5d                   	pop    ebp
c000d5b9:	c3                   	ret    

c000d5ba <VgaText::write(unsigned long long, void*, int*)>:
c000d5ba:	55                   	push   ebp
c000d5bb:	57                   	push   edi
c000d5bc:	56                   	push   esi
c000d5bd:	53                   	push   ebx
c000d5be:	83 ec 0c             	sub    esp,0xc
c000d5c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d5c5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d5c9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d5cd:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d5d4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d5d7:	39 eb                	cmp    ebx,ebp
c000d5d9:	74 13                	je     c000d5ee <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d5db:	43                   	inc    ebx
c000d5dc:	50                   	push   eax
c000d5dd:	50                   	push   eax
c000d5de:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d5e2:	50                   	push   eax
c000d5e3:	56                   	push   esi
c000d5e4:	e8 d1 fb ff ff       	call   c000d1ba <VgaText::putchar(char)>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	eb e9                	jmp    c000d5d7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d5ee:	83 ec 0c             	sub    esp,0xc
c000d5f1:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d5f8:	56                   	push   esi
c000d5f9:	e8 86 f9 ff ff       	call   c000cf84 <VgaText::doUpdate()>
c000d5fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d602:	89 38                	mov    DWORD PTR [eax],edi
c000d604:	83 c4 1c             	add    esp,0x1c
c000d607:	31 c0                	xor    eax,eax
c000d609:	5b                   	pop    ebx
c000d60a:	5e                   	pop    esi
c000d60b:	5f                   	pop    edi
c000d60c:	5d                   	pop    ebp
c000d60d:	c3                   	ret    

c000d60e <newTerminal(char*)>:
c000d60e:	83 ec 28             	sub    esp,0x28
c000d611:	68 60 12 00 00       	push   0x1260
c000d616:	e8 d9 18 00 00       	call   c000eef4 <operator new(unsigned long)>
c000d61b:	5a                   	pop    edx
c000d61c:	59                   	pop    ecx
c000d61d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d621:	50                   	push   eax
c000d622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d626:	e8 15 fd ff ff       	call   c000d340 <VgaText::VgaText(char const*)>
c000d62b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d62f:	83 c4 2c             	add    esp,0x2c
c000d632:	c3                   	ret    
c000d633:	90                   	nop

c000d634 <TSS::TSS()>:
c000d634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d638:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000d63f:	90                   	nop
c000d640:	c3                   	ret    
c000d641:	90                   	nop

c000d642 <TSS::setESP(unsigned long)>:
c000d642:	55                   	push   ebp
c000d643:	89 e5                	mov    ebp,esp
c000d645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d64b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d64e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d651:	90                   	nop
c000d652:	5d                   	pop    ebp
c000d653:	c3                   	ret    

c000d654 <TSS::flush()>:
c000d654:	55                   	push   ebp
c000d655:	89 e5                	mov    ebp,esp
c000d657:	83 ec 10             	sub    esp,0x10
c000d65a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d65d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d65f:	83 c8 03             	or     eax,0x3
c000d662:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000d666:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000d66a:	66 89 d0             	mov    ax,dx
c000d66d:	0f 00 d8             	ltr    ax
c000d670:	90                   	nop
c000d671:	c9                   	leave  
c000d672:	c3                   	ret    
c000d673:	90                   	nop

c000d674 <TSS::setup(unsigned long, unsigned long)>:
c000d674:	55                   	push   ebp
c000d675:	89 e5                	mov    ebp,esp
c000d677:	53                   	push   ebx
c000d678:	83 ec 14             	sub    esp,0x14
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	6a 68                	push   0x68
c000d680:	e8 81 e5 ff ff       	call   c000bc06 <malloc>
c000d685:	83 c4 10             	add    esp,0x10
c000d688:	89 c2                	mov    edx,eax
c000d68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d693:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d696:	83 ec 04             	sub    esp,0x4
c000d699:	6a 68                	push   0x68
c000d69b:	6a 00                	push   0x0
c000d69d:	50                   	push   eax
c000d69e:	e8 65 2f ff ff       	call   c0000608 <memset>
c000d6a3:	83 c4 10             	add    esp,0x10
c000d6a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6ac:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000d6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6b8:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000d6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d6c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d6ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6d0:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000d6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6dc:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000d6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6e8:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6f4:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000d6fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d700:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000d703:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000d706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d70c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d70f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d715:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d718:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000d71f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d722:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000d725:	e8 08 13 01 00       	call   c001ea32 <CPU::readCR3()>
c000d72a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000d72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d733:	83 ec 08             	sub    esp,0x8
c000d736:	50                   	push   eax
c000d737:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d73a:	50                   	push   eax
c000d73b:	e8 9c dc ff ff       	call   c000b3dc <GDTEntry::setBase(unsigned int)>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	83 ec 08             	sub    esp,0x8
c000d746:	6a 68                	push   0x68
c000d748:	8d 45 f0             	lea    eax,[ebp-0x10]
c000d74b:	50                   	push   eax
c000d74c:	e8 a7 dc ff ff       	call   c000b3f8 <GDTEntry::setLimit(unsigned int)>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000d758:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d75b:	83 e0 0f             	and    eax,0xf
c000d75e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d761:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d764:	83 c8 40             	or     eax,0x40
c000d767:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000d76a:	e8 03 68 00 00       	call   c0013f72 <thisCPU()>
c000d76f:	05 78 01 00 00       	add    eax,0x178
c000d774:	83 ec 04             	sub    esp,0x4
c000d777:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000d77a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d77d:	50                   	push   eax
c000d77e:	e8 a9 dc ff ff       	call   c000b42c <GDT::addEntry(GDTEntry)>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	89 c2                	mov    edx,eax
c000d788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78b:	89 10                	mov    DWORD PTR [eax],edx
c000d78d:	e8 e0 67 00 00       	call   c0013f72 <thisCPU()>
c000d792:	05 78 01 00 00       	add    eax,0x178
c000d797:	83 ec 0c             	sub    esp,0xc
c000d79a:	50                   	push   eax
c000d79b:	e8 d0 dc ff ff       	call   c000b470 <GDT::flush()>
c000d7a0:	83 c4 10             	add    esp,0x10
c000d7a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7a8:	83 ec 08             	sub    esp,0x8
c000d7ab:	50                   	push   eax
c000d7ac:	68 90 05 02 c0       	push   0xc0020590
c000d7b1:	e8 2d 18 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000d7b6:	83 c4 10             	add    esp,0x10
c000d7b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d7be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d7c1:	c9                   	leave  
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000d7c4:	55                   	push   ebp
c000d7c5:	57                   	push   edi
c000d7c6:	56                   	push   esi
c000d7c7:	53                   	push   ebx
c000d7c8:	83 ec 0c             	sub    esp,0xc
c000d7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7cf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d7d6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d7da:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d7de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d7e2:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d7e7:	75 08                	jne    c000d7f1 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000d7e9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d7ef:	eb 5e                	jmp    c000d84f <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000d7f1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d7f6:	75 3d                	jne    c000d835 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000d7f8:	83 ec 0c             	sub    esp,0xc
c000d7fb:	68 ae 05 02 c0       	push   0xc00205ae
c000d800:	e8 de 17 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000d805:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d80a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d80d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d813:	8b 10                	mov    edx,DWORD PTR [eax]
c000d815:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d819:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d81d:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d821:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d825:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d829:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000d82c:	83 c4 1c             	add    esp,0x1c
c000d82f:	5b                   	pop    ebx
c000d830:	5e                   	pop    esi
c000d831:	5f                   	pop    edi
c000d832:	5d                   	pop    ebp
c000d833:	ff e0                	jmp    eax
c000d835:	89 c2                	mov    edx,eax
c000d837:	83 e2 fd             	and    edx,0xfffffffd
c000d83a:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000d840:	74 a7                	je     c000d7e9 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d842:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d847:	83 e0 ef             	and    eax,0xffffffef
c000d84a:	83 f8 08             	cmp    eax,0x8
c000d84d:	76 9a                	jbe    c000d7e9 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000d84f:	83 c4 0c             	add    esp,0xc
c000d852:	31 c0                	xor    eax,eax
c000d854:	5b                   	pop    ebx
c000d855:	5e                   	pop    esi
c000d856:	5f                   	pop    edi
c000d857:	5d                   	pop    ebp
c000d858:	c3                   	ret    
c000d859:	90                   	nop

c000d85a <ReservedFilename::isAtty()>:
c000d85a:	83 ec 18             	sub    esp,0x18
c000d85d:	68 bb 05 02 c0       	push   0xc00205bb
c000d862:	e8 7c 17 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	31 c0                	xor    eax,eax
c000d86c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d870:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000d877:	75 12                	jne    c000d88b <ReservedFilename::isAtty()+0x31>
c000d879:	83 ec 0c             	sub    esp,0xc
c000d87c:	68 d1 05 02 c0       	push   0xc00205d1
c000d881:	e8 5d 17 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000d886:	83 c4 10             	add    esp,0x10
c000d889:	b0 01                	mov    al,0x1
c000d88b:	83 c4 0c             	add    esp,0xc
c000d88e:	c3                   	ret    
c000d88f:	90                   	nop

c000d890 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000d890:	55                   	push   ebp
c000d891:	57                   	push   edi
c000d892:	56                   	push   esi
c000d893:	53                   	push   ebx
c000d894:	83 ec 0c             	sub    esp,0xc
c000d897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d89f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d8a6:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000d8aa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8ae:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000d8b3:	75 08                	jne    c000d8bd <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000d8b5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000d8bb:	eb 63                	jmp    c000d920 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d8bd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000d8c2:	75 3d                	jne    c000d901 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000d8c4:	83 ec 0c             	sub    esp,0xc
c000d8c7:	68 e4 05 02 c0       	push   0xc00205e4
c000d8cc:	e8 12 17 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000d8d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d8d9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d8df:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8e1:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000d8e5:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d8e9:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d8ed:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000d8f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f5:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000d8f8:	83 c4 1c             	add    esp,0x1c
c000d8fb:	5b                   	pop    ebx
c000d8fc:	5e                   	pop    esi
c000d8fd:	5f                   	pop    edi
c000d8fe:	5d                   	pop    ebp
c000d8ff:	ff e0                	jmp    eax
c000d901:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000d906:	75 04                	jne    c000d90c <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000d908:	89 33                	mov    DWORD PTR [ebx],esi
c000d90a:	eb 14                	jmp    c000d920 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000d90c:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000d911:	74 a2                	je     c000d8b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d913:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000d918:	83 e0 ef             	and    eax,0xffffffef
c000d91b:	83 f8 08             	cmp    eax,0x8
c000d91e:	76 95                	jbe    c000d8b5 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000d920:	83 c4 0c             	add    esp,0xc
c000d923:	31 c0                	xor    eax,eax
c000d925:	5b                   	pop    ebx
c000d926:	5e                   	pop    esi
c000d927:	5f                   	pop    edi
c000d928:	5d                   	pop    ebp
c000d929:	c3                   	ret    

c000d92a <UnixFile::getFileDescriptor()>:
c000d92a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d92e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d931:	c3                   	ret    

c000d932 <UnixFile::UnixFile(int)>:
c000d932:	53                   	push   ebx
c000d933:	83 ec 18             	sub    esp,0x18
c000d936:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000d93b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d93f:	89 10                	mov    DWORD PTR [eax],edx
c000d941:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000d949:	0f 8f 4d 01 00 00    	jg     c000da9c <UnixFile::UnixFile(int)+0x16a>
c000d94f:	a1 e0 2b 02 c0       	mov    eax,ds:0xc0022be0
c000d954:	8d 50 01             	lea    edx,[eax+0x1]
c000d957:	89 15 e0 2b 02 c0    	mov    DWORD PTR ds:0xc0022be0,edx
c000d95d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d961:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000d964:	83 ec 08             	sub    esp,0x8
c000d967:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d96b:	68 98 38 02 c0       	push   0xc0023898
c000d970:	e8 33 11 01 00       	call   c001eaa8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000d975:	83 c4 10             	add    esp,0x10
c000d978:	a0 94 38 02 c0       	mov    al,ds:0xc0023894
c000d97d:	83 f0 01             	xor    eax,0x1
c000d980:	84 c0                	test   al,al
c000d982:	0f 84 15 01 00 00    	je     c000da9d <UnixFile::UnixFile(int)+0x16b>
c000d988:	c6 05 94 38 02 c0 01 	mov    BYTE PTR ds:0xc0023894,0x1
c000d98f:	83 ec 0c             	sub    esp,0xc
c000d992:	6a 0c                	push   0xc
c000d994:	e8 5b 15 00 00       	call   c000eef4 <operator new(unsigned long)>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	89 c3                	mov    ebx,eax
c000d99e:	83 ec 08             	sub    esp,0x8
c000d9a1:	68 03 ff ff 0f       	push   0xfffff03
c000d9a6:	53                   	push   ebx
c000d9a7:	e8 f6 00 00 00       	call   c000daa2 <ReservedFilename::ReservedFilename(int)>
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	89 1d 8c 38 02 c0    	mov    DWORD PTR ds:0xc002388c,ebx
c000d9b5:	83 ec 0c             	sub    esp,0xc
c000d9b8:	6a 0c                	push   0xc
c000d9ba:	e8 35 15 00 00       	call   c000eef4 <operator new(unsigned long)>
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	89 c3                	mov    ebx,eax
c000d9c4:	83 ec 08             	sub    esp,0x8
c000d9c7:	68 01 ff ff 0f       	push   0xfffff01
c000d9cc:	53                   	push   ebx
c000d9cd:	e8 d0 00 00 00       	call   c000daa2 <ReservedFilename::ReservedFilename(int)>
c000d9d2:	83 c4 10             	add    esp,0x10
c000d9d5:	89 1d 90 38 02 c0    	mov    DWORD PTR ds:0xc0023890,ebx
c000d9db:	83 ec 0c             	sub    esp,0xc
c000d9de:	6a 0c                	push   0xc
c000d9e0:	e8 0f 15 00 00       	call   c000eef4 <operator new(unsigned long)>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 c3                	mov    ebx,eax
c000d9ea:	83 ec 08             	sub    esp,0x8
c000d9ed:	68 00 ff ff 0f       	push   0xfffff00
c000d9f2:	53                   	push   ebx
c000d9f3:	e8 aa 00 00 00       	call   c000daa2 <ReservedFilename::ReservedFilename(int)>
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	89 1d 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,ebx
c000da01:	83 ec 0c             	sub    esp,0xc
c000da04:	6a 0c                	push   0xc
c000da06:	e8 e9 14 00 00       	call   c000eef4 <operator new(unsigned long)>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	89 c3                	mov    ebx,eax
c000da10:	83 ec 08             	sub    esp,0x8
c000da13:	68 02 ff ff 0f       	push   0xfffff02
c000da18:	53                   	push   ebx
c000da19:	e8 84 00 00 00       	call   c000daa2 <ReservedFilename::ReservedFilename(int)>
c000da1e:	83 c4 10             	add    esp,0x10
c000da21:	89 1d 88 38 02 c0    	mov    DWORD PTR ds:0xc0023888,ebx
c000da27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da2f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000da34:	7f 67                	jg     c000da9d <UnixFile::UnixFile(int)+0x16b>
c000da36:	83 ec 0c             	sub    esp,0xc
c000da39:	6a 0c                	push   0xc
c000da3b:	e8 b4 14 00 00       	call   c000eef4 <operator new(unsigned long)>
c000da40:	83 c4 10             	add    esp,0x10
c000da43:	89 c3                	mov    ebx,eax
c000da45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da49:	05 10 ff ff 0f       	add    eax,0xfffff10
c000da4e:	83 ec 08             	sub    esp,0x8
c000da51:	50                   	push   eax
c000da52:	53                   	push   ebx
c000da53:	e8 4a 00 00 00       	call   c000daa2 <ReservedFilename::ReservedFilename(int)>
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da5f:	89 1c 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],ebx
c000da66:	83 ec 0c             	sub    esp,0xc
c000da69:	6a 0c                	push   0xc
c000da6b:	e8 84 14 00 00       	call   c000eef4 <operator new(unsigned long)>
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	89 c3                	mov    ebx,eax
c000da75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da79:	05 20 ff ff 0f       	add    eax,0xfffff20
c000da7e:	83 ec 08             	sub    esp,0x8
c000da81:	50                   	push   eax
c000da82:	53                   	push   ebx
c000da83:	e8 1a 00 00 00       	call   c000daa2 <ReservedFilename::ReservedFilename(int)>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da8f:	89 1c 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],ebx
c000da96:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000da9a:	eb 93                	jmp    c000da2f <UnixFile::UnixFile(int)+0xfd>
c000da9c:	90                   	nop
c000da9d:	83 c4 18             	add    esp,0x18
c000daa0:	5b                   	pop    ebx
c000daa1:	c3                   	ret    

c000daa2 <ReservedFilename::ReservedFilename(int)>:
c000daa2:	83 ec 0c             	sub    esp,0xc
c000daa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa9:	83 ec 08             	sub    esp,0x8
c000daac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab0:	50                   	push   eax
c000dab1:	e8 7c fe ff ff       	call   c000d932 <UnixFile::UnixFile(int)>
c000dab6:	83 c4 10             	add    esp,0x10
c000dab9:	ba 1c 07 02 c0       	mov    edx,0xc002071c
c000dabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac2:	89 10                	mov    DWORD PTR [eax],edx
c000dac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dacc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dacf:	90                   	nop
c000dad0:	83 c4 0c             	add    esp,0xc
c000dad3:	c3                   	ret    

c000dad4 <UnixFile::~UnixFile()>:
c000dad4:	83 ec 1c             	sub    esp,0x1c
c000dad7:	ba 00 07 02 c0       	mov    edx,0xc0020700
c000dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae0:	89 10                	mov    DWORD PTR [eax],edx
c000dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000daee:	7f 73                	jg     c000db63 <UnixFile::~UnixFile()+0x8f>
c000daf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	68 98 38 02 c0       	push   0xc0023898
c000db00:	e8 77 10 01 00       	call   c001eb7c <LinkedList<UnixFile>::getFirstElement()>
c000db05:	83 c4 10             	add    esp,0x10
c000db08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	68 98 38 02 c0       	push   0xc0023898
c000db14:	e8 6b 10 01 00       	call   c001eb84 <LinkedList<UnixFile>::removeFirst()>
c000db19:	83 c4 10             	add    esp,0x10
c000db1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db20:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000db24:	74 40                	je     c000db66 <UnixFile::~UnixFile()+0x92>
c000db26:	83 ec 08             	sub    esp,0x8
c000db29:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db2d:	68 98 38 02 c0       	push   0xc0023898
c000db32:	e8 71 0f 01 00       	call   c001eaa8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000db37:	83 c4 10             	add    esp,0x10
c000db3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db3e:	8d 50 01             	lea    edx,[eax+0x1]
c000db41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db45:	3d 88 13 00 00       	cmp    eax,0x1388
c000db4a:	0f 94 c0             	sete   al
c000db4d:	84 c0                	test   al,al
c000db4f:	74 a7                	je     c000daf8 <UnixFile::~UnixFile()+0x24>
c000db51:	83 ec 0c             	sub    esp,0xc
c000db54:	68 d8 06 02 c0       	push   0xc00206d8
c000db59:	e8 1a 71 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000db5e:	83 c4 10             	add    esp,0x10
c000db61:	eb 95                	jmp    c000daf8 <UnixFile::~UnixFile()+0x24>
c000db63:	90                   	nop
c000db64:	eb 01                	jmp    c000db67 <UnixFile::~UnixFile()+0x93>
c000db66:	90                   	nop
c000db67:	90                   	nop
c000db68:	83 c4 1c             	add    esp,0x1c
c000db6b:	c3                   	ret    

c000db6c <UnixFile::~UnixFile()>:
c000db6c:	83 ec 0c             	sub    esp,0xc
c000db6f:	83 ec 0c             	sub    esp,0xc
c000db72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db76:	e8 59 ff ff ff       	call   c000dad4 <UnixFile::~UnixFile()>
c000db7b:	83 c4 10             	add    esp,0x10
c000db7e:	83 ec 08             	sub    esp,0x8
c000db81:	6a 0c                	push   0xc
c000db83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db87:	e8 77 13 00 00       	call   c000ef03 <operator delete(void*, unsigned long)>
c000db8c:	83 c4 10             	add    esp,0x10
c000db8f:	83 c4 0c             	add    esp,0xc
c000db92:	c3                   	ret    
c000db93:	90                   	nop

c000db94 <ReservedFilename::~ReservedFilename()>:
c000db94:	83 ec 0c             	sub    esp,0xc
c000db97:	ba 1c 07 02 c0       	mov    edx,0xc002071c
c000db9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba0:	89 10                	mov    DWORD PTR [eax],edx
c000dba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	50                   	push   eax
c000dbaa:	e8 25 ff ff ff       	call   c000dad4 <UnixFile::~UnixFile()>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	90                   	nop
c000dbb3:	83 c4 0c             	add    esp,0xc
c000dbb6:	c3                   	ret    
c000dbb7:	90                   	nop

c000dbb8 <ReservedFilename::~ReservedFilename()>:
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	83 ec 0c             	sub    esp,0xc
c000dbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc2:	e8 cd ff ff ff       	call   c000db94 <ReservedFilename::~ReservedFilename()>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	83 ec 08             	sub    esp,0x8
c000dbcd:	6a 0c                	push   0xc
c000dbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd3:	e8 2b 13 00 00       	call   c000ef03 <operator delete(void*, unsigned long)>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	83 c4 0c             	add    esp,0xc
c000dbde:	c3                   	ret    

c000dbdf <getFromFileDescriptor(int)>:
c000dbdf:	53                   	push   ebx
c000dbe0:	83 ec 08             	sub    esp,0x8
c000dbe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbe7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dbed:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dbf3:	7f 33                	jg     c000dc28 <getFromFileDescriptor(int)+0x49>
c000dbf5:	83 ec 0c             	sub    esp,0xc
c000dbf8:	68 98 38 02 c0       	push   0xc0023898
c000dbfd:	e8 7a 0f 01 00       	call   c001eb7c <LinkedList<UnixFile>::getFirstElement()>
c000dc02:	83 c4 10             	add    esp,0x10
c000dc05:	85 c0                	test   eax,eax
c000dc07:	75 07                	jne    c000dc10 <getFromFileDescriptor(int)+0x31>
c000dc09:	31 c0                	xor    eax,eax
c000dc0b:	e9 98 00 00 00       	jmp    c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc10:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dc13:	0f 84 8f 00 00 00    	je     c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc19:	52                   	push   edx
c000dc1a:	52                   	push   edx
c000dc1b:	50                   	push   eax
c000dc1c:	68 98 38 02 c0       	push   0xc0023898
c000dc21:	e8 00 10 01 00       	call   c001ec26 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dc26:	eb da                	jmp    c000dc02 <getFromFileDescriptor(int)+0x23>
c000dc28:	83 ec 0c             	sub    esp,0xc
c000dc2b:	68 f1 05 02 c0       	push   0xc00205f1
c000dc30:	e8 ae 13 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000dc35:	83 c4 10             	add    esp,0x10
c000dc38:	a1 8c 38 02 c0       	mov    eax,ds:0xc002388c
c000dc3d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000dc43:	74 63                	je     c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc45:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000dc4b:	75 17                	jne    c000dc64 <getFromFileDescriptor(int)+0x85>
c000dc4d:	83 ec 0c             	sub    esp,0xc
c000dc50:	68 18 06 02 c0       	push   0xc0020618
c000dc55:	e8 89 13 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000dc5a:	a1 90 38 02 c0       	mov    eax,ds:0xc0023890
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	eb 44                	jmp    c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc64:	a1 88 38 02 c0       	mov    eax,ds:0xc0023888
c000dc69:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000dc6f:	74 37                	je     c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc71:	a1 84 38 02 c0       	mov    eax,ds:0xc0023884
c000dc76:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000dc7c:	74 2a                	je     c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc7e:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000dc84:	83 f8 08             	cmp    eax,0x8
c000dc87:	77 09                	ja     c000dc92 <getFromFileDescriptor(int)+0xb3>
c000dc89:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c000dc90:	eb 16                	jmp    c000dca8 <getFromFileDescriptor(int)+0xc9>
c000dc92:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000dc98:	83 fb 08             	cmp    ebx,0x8
c000dc9b:	0f 87 68 ff ff ff    	ja     c000dc09 <getFromFileDescriptor(int)+0x2a>
c000dca1:	8b 04 9d 20 38 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc7e0]
c000dca8:	83 c4 08             	add    esp,0x8
c000dcab:	5b                   	pop    ebx
c000dcac:	c3                   	ret    

c000dcad <__static_initialization_and_destruction_0(int, int)>:
c000dcad:	83 ec 0c             	sub    esp,0xc
c000dcb0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dcb5:	75 34                	jne    c000dceb <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dcbf:	75 2a                	jne    c000dceb <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dcc1:	83 ec 0c             	sub    esp,0xc
c000dcc4:	68 98 38 02 c0       	push   0xc0023898
c000dcc9:	e8 82 0d 01 00       	call   c001ea50 <LinkedList<UnixFile>::LinkedList()>
c000dcce:	83 c4 10             	add    esp,0x10
c000dcd1:	83 ec 04             	sub    esp,0x4
c000dcd4:	68 68 2b 02 c0       	push   0xc0022b68
c000dcd9:	68 98 38 02 c0       	push   0xc0023898
c000dcde:	68 4e ea 01 c0       	push   0xc001ea4e
c000dce3:	e8 97 11 00 00       	call   c000ee7f <__cxa_atexit>
c000dce8:	83 c4 10             	add    esp,0x10
c000dceb:	90                   	nop
c000dcec:	83 c4 0c             	add    esp,0xc
c000dcef:	c3                   	ret    

c000dcf0 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000dcf0:	83 ec 0c             	sub    esp,0xc
c000dcf3:	83 ec 08             	sub    esp,0x8
c000dcf6:	68 ff ff 00 00       	push   0xffff
c000dcfb:	6a 01                	push   0x1
c000dcfd:	e8 ab ff ff ff       	call   c000dcad <__static_initialization_and_destruction_0(int, int)>
c000dd02:	83 c4 10             	add    esp,0x10
c000dd05:	83 c4 0c             	add    esp,0xc
c000dd08:	c3                   	ret    
c000dd09:	90                   	nop

c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000dd0a:	53                   	push   ebx
c000dd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000dd13:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000dd19:	89 c8                	mov    eax,ecx
c000dd1b:	d1 e8                	shr    eax,1
c000dd1d:	03 05 e8 2b 02 c0    	add    eax,DWORD PTR ds:0xc0022be8
c000dd23:	83 e1 01             	and    ecx,0x1
c000dd26:	8a 10                	mov    dl,BYTE PTR [eax]
c000dd28:	75 09                	jne    c000dd33 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000dd2a:	83 e2 f0             	and    edx,0xfffffff0
c000dd2d:	09 da                	or     edx,ebx
c000dd2f:	88 10                	mov    BYTE PTR [eax],dl
c000dd31:	5b                   	pop    ebx
c000dd32:	c3                   	ret    
c000dd33:	c1 e3 04             	shl    ebx,0x4
c000dd36:	83 e2 0f             	and    edx,0xf
c000dd39:	09 da                	or     edx,ebx
c000dd3b:	88 10                	mov    BYTE PTR [eax],dl
c000dd3d:	5b                   	pop    ebx
c000dd3e:	c3                   	ret    

c000dd3f <Virt::getPageState(unsigned long)>:
c000dd3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd43:	8b 0d e8 2b 02 c0    	mov    ecx,DWORD PTR ds:0xc0022be8
c000dd49:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000dd4f:	89 d0                	mov    eax,edx
c000dd51:	d1 e8                	shr    eax,1
c000dd53:	83 e2 01             	and    edx,0x1
c000dd56:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000dd59:	75 04                	jne    c000dd5f <Virt::getPageState(unsigned long)+0x20>
c000dd5b:	83 e0 0f             	and    eax,0xf
c000dd5e:	c3                   	ret    
c000dd5f:	c0 e8 04             	shr    al,0x4
c000dd62:	c3                   	ret    

c000dd63 <Virt::allocateKernelVirtualPages(int)>:
c000dd63:	55                   	push   ebp
c000dd64:	31 ed                	xor    ebp,ebp
c000dd66:	57                   	push   edi
c000dd67:	56                   	push   esi
c000dd68:	53                   	push   ebx
c000dd69:	31 db                	xor    ebx,ebx
c000dd6b:	83 ec 1c             	sub    esp,0x1c
c000dd6e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd72:	8b 3d e4 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022be4
c000dd78:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000dd7d:	57                   	push   edi
c000dd7e:	e8 bc ff ff ff       	call   c000dd3f <Virt::getPageState(unsigned long)>
c000dd83:	5a                   	pop    edx
c000dd84:	84 c0                	test   al,al
c000dd86:	75 3a                	jne    c000ddc2 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000dd88:	85 db                	test   ebx,ebx
c000dd8a:	75 02                	jne    c000dd8e <Virt::allocateKernelVirtualPages(int)+0x2b>
c000dd8c:	89 fd                	mov    ebp,edi
c000dd8e:	43                   	inc    ebx
c000dd8f:	39 f3                	cmp    ebx,esi
c000dd91:	74 5a                	je     c000dded <Virt::allocateKernelVirtualPages(int)+0x8a>
c000dd93:	47                   	inc    edi
c000dd94:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000dd9a:	76 31                	jbe    c000ddcd <Virt::allocateKernelVirtualPages(int)+0x6a>
c000dd9c:	c7 05 e4 2b 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022be4,0xc8000
c000dda6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ddab:	75 28                	jne    c000ddd5 <Virt::allocateKernelVirtualPages(int)+0x72>
c000ddad:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ddb2:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ddb7:	57                   	push   edi
c000ddb8:	e8 82 ff ff ff       	call   c000dd3f <Virt::getPageState(unsigned long)>
c000ddbd:	5a                   	pop    edx
c000ddbe:	84 c0                	test   al,al
c000ddc0:	74 c6                	je     c000dd88 <Virt::allocateKernelVirtualPages(int)+0x25>
c000ddc2:	31 db                	xor    ebx,ebx
c000ddc4:	47                   	inc    edi
c000ddc5:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ddcb:	77 cf                	ja     c000dd9c <Virt::allocateKernelVirtualPages(int)+0x39>
c000ddcd:	89 3d e4 2b 02 c0    	mov    DWORD PTR ds:0xc0022be4,edi
c000ddd3:	eb a8                	jmp    c000dd7d <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ddd5:	83 ec 0c             	sub    esp,0xc
c000ddd8:	68 30 07 02 c0       	push   0xc0020730
c000dddd:	e8 96 6e 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000dde2:	8b 3d e4 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022be4
c000dde8:	83 c4 10             	add    esp,0x10
c000ddeb:	eb 90                	jmp    c000dd7d <Virt::allocateKernelVirtualPages(int)+0x1a>
c000dded:	89 2d e4 2b 02 c0    	mov    DWORD PTR ds:0xc0022be4,ebp
c000ddf3:	4b                   	dec    ebx
c000ddf4:	74 5f                	je     c000de55 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ddf6:	85 f6                	test   esi,esi
c000ddf8:	74 3d                	je     c000de37 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ddfa:	89 e8                	mov    eax,ebp
c000ddfc:	31 db                	xor    ebx,ebx
c000ddfe:	8d 7e ff             	lea    edi,[esi-0x1]
c000de01:	eb 14                	jmp    c000de17 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000de03:	6a 01                	push   0x1
c000de05:	43                   	inc    ebx
c000de06:	50                   	push   eax
c000de07:	e8 fe fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de0c:	58                   	pop    eax
c000de0d:	39 f3                	cmp    ebx,esi
c000de0f:	5a                   	pop    edx
c000de10:	74 25                	je     c000de37 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000de12:	a1 e4 2b 02 c0       	mov    eax,ds:0xc0022be4
c000de17:	8d 50 01             	lea    edx,[eax+0x1]
c000de1a:	85 db                	test   ebx,ebx
c000de1c:	89 15 e4 2b 02 c0    	mov    DWORD PTR ds:0xc0022be4,edx
c000de22:	74 20                	je     c000de44 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000de24:	39 df                	cmp    edi,ebx
c000de26:	75 db                	jne    c000de03 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000de28:	6a 03                	push   0x3
c000de2a:	43                   	inc    ebx
c000de2b:	50                   	push   eax
c000de2c:	e8 d9 fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de31:	59                   	pop    ecx
c000de32:	39 f3                	cmp    ebx,esi
c000de34:	58                   	pop    eax
c000de35:	75 db                	jne    c000de12 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de37:	83 c4 1c             	add    esp,0x1c
c000de3a:	89 e8                	mov    eax,ebp
c000de3c:	5b                   	pop    ebx
c000de3d:	c1 e0 0c             	shl    eax,0xc
c000de40:	5e                   	pop    esi
c000de41:	5f                   	pop    edi
c000de42:	5d                   	pop    ebp
c000de43:	c3                   	ret    
c000de44:	6a 02                	push   0x2
c000de46:	bb 01 00 00 00       	mov    ebx,0x1
c000de4b:	50                   	push   eax
c000de4c:	e8 b9 fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de51:	58                   	pop    eax
c000de52:	5a                   	pop    edx
c000de53:	eb bd                	jmp    c000de12 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000de55:	6a 04                	push   0x4
c000de57:	8d 45 01             	lea    eax,[ebp+0x1]
c000de5a:	55                   	push   ebp
c000de5b:	a3 e4 2b 02 c0       	mov    ds:0xc0022be4,eax
c000de60:	e8 a5 fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de65:	59                   	pop    ecx
c000de66:	89 e8                	mov    eax,ebp
c000de68:	5b                   	pop    ebx
c000de69:	c1 e0 0c             	shl    eax,0xc
c000de6c:	83 c4 1c             	add    esp,0x1c
c000de6f:	5b                   	pop    ebx
c000de70:	5e                   	pop    esi
c000de71:	5f                   	pop    edi
c000de72:	5d                   	pop    ebp
c000de73:	c3                   	ret    

c000de74 <Virt::virtualMemorySetup()>:
c000de74:	53                   	push   ebx
c000de75:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de7a:	83 ec 08             	sub    esp,0x8
c000de7d:	6a 0f                	push   0xf
c000de7f:	53                   	push   ebx
c000de80:	43                   	inc    ebx
c000de81:	e8 84 fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000de86:	59                   	pop    ecx
c000de87:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000de8d:	58                   	pop    eax
c000de8e:	75 ed                	jne    c000de7d <Virt::virtualMemorySetup()+0x9>
c000de90:	83 ec 08             	sub    esp,0x8
c000de93:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000de98:	68 00 00 00 c8       	push   0xc8000000
c000de9d:	68 db 08 02 c0       	push   0xc00208db
c000dea2:	e8 3c 11 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000dea7:	58                   	pop    eax
c000dea8:	5a                   	pop    edx
c000dea9:	68 00 f0 ff ef       	push   0xeffff000
c000deae:	68 ef 08 02 c0       	push   0xc00208ef
c000deb3:	e8 2b 11 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000deb8:	83 c4 10             	add    esp,0x10
c000debb:	83 ec 08             	sub    esp,0x8
c000debe:	6a 00                	push   0x0
c000dec0:	53                   	push   ebx
c000dec1:	43                   	inc    ebx
c000dec2:	e8 43 fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dec7:	83 c4 10             	add    esp,0x10
c000deca:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000ded0:	75 e9                	jne    c000debb <Virt::virtualMemorySetup()+0x47>
c000ded2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000ded7:	83 ec 08             	sub    esp,0x8
c000deda:	6a 0f                	push   0xf
c000dedc:	53                   	push   ebx
c000dedd:	43                   	inc    ebx
c000dede:	e8 27 fe ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000dee3:	83 c4 10             	add    esp,0x10
c000dee6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000deec:	75 e9                	jne    c000ded7 <Virt::virtualMemorySetup()+0x63>
c000deee:	83 c4 08             	add    esp,0x8
c000def1:	5b                   	pop    ebx
c000def2:	c3                   	ret    

c000def3 <Virt::getAKernelVAS()>:
c000def3:	a1 a4 38 02 c0       	mov    eax,ds:0xc00238a4
c000def8:	c3                   	ret    

c000def9 <Virt::setupPageSwapping(int)>:
c000def9:	57                   	push   edi
c000defa:	56                   	push   esi
c000defb:	53                   	push   ebx
c000defc:	83 ec 1c             	sub    esp,0x1c
c000deff:	68 14 01 00 00       	push   0x114
c000df04:	e8 eb 0f 00 00       	call   c000eef4 <operator new(unsigned long)>
c000df09:	83 c4 0c             	add    esp,0xc
c000df0c:	89 c6                	mov    esi,eax
c000df0e:	ff 35 94 4b 02 c0    	push   DWORD PTR ds:0xc0024b94
c000df14:	68 03 09 02 c0       	push   0xc0020903
c000df19:	50                   	push   eax
c000df1a:	e8 f3 15 00 00       	call   c000f512 <File::File(char const*, Process*)>
c000df1f:	89 34 24             	mov    DWORD PTR [esp],esi
c000df22:	e8 c7 17 00 00       	call   c000f6ee <File::unlink()>
c000df27:	58                   	pop    eax
c000df28:	5a                   	pop    edx
c000df29:	6a 12                	push   0x12
c000df2b:	56                   	push   esi
c000df2c:	e8 45 16 00 00       	call   c000f576 <File::open(FileOpenMode)>
c000df31:	83 c4 10             	add    esp,0x10
c000df34:	85 c0                	test   eax,eax
c000df36:	0f 85 bf 00 00 00    	jne    c000dffb <Virt::setupPageSwapping(int)+0x102>
c000df3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000df40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df48:	c1 e3 08             	shl    ebx,0x8
c000df4b:	83 ec 0c             	sub    esp,0xc
c000df4e:	68 00 00 01 00       	push   0x10000
c000df53:	e8 ae dc ff ff       	call   c000bc06 <malloc>
c000df58:	83 c4 0c             	add    esp,0xc
c000df5b:	89 c7                	mov    edi,eax
c000df5d:	68 00 00 01 00       	push   0x10000
c000df62:	6a 00                	push   0x0
c000df64:	50                   	push   eax
c000df65:	e8 9e 26 ff ff       	call   c0000608 <memset>
c000df6a:	83 c4 10             	add    esp,0x10
c000df6d:	85 db                	test   ebx,ebx
c000df6f:	79 03                	jns    c000df74 <Virt::setupPageSwapping(int)+0x7b>
c000df71:	83 c3 0f             	add    ebx,0xf
c000df74:	c1 fb 04             	sar    ebx,0x4
c000df77:	4b                   	dec    ebx
c000df78:	83 fb ff             	cmp    ebx,0xffffffff
c000df7b:	74 4b                	je     c000dfc8 <Virt::setupPageSwapping(int)+0xcf>
c000df7d:	83 ec 0c             	sub    esp,0xc
c000df80:	8b 06                	mov    eax,DWORD PTR [esi]
c000df82:	8d 54 24 18          	lea    edx,[esp+0x18]
c000df86:	52                   	push   edx
c000df87:	57                   	push   edi
c000df88:	6a 00                	push   0x0
c000df8a:	68 00 00 01 00       	push   0x10000
c000df8f:	56                   	push   esi
c000df90:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df93:	83 c4 20             	add    esp,0x20
c000df96:	85 c0                	test   eax,eax
c000df98:	75 4e                	jne    c000dfe8 <Virt::setupPageSwapping(int)+0xef>
c000df9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df9e:	3d 00 00 01 00       	cmp    eax,0x10000
c000dfa3:	74 d2                	je     c000df77 <Virt::setupPageSwapping(int)+0x7e>
c000dfa5:	83 ec 08             	sub    esp,0x8
c000dfa8:	4b                   	dec    ebx
c000dfa9:	50                   	push   eax
c000dfaa:	68 56 09 02 c0       	push   0xc0020956
c000dfaf:	e8 2f 10 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000dfb4:	c7 04 24 5f 09 02 c0 	mov    DWORD PTR [esp],0xc002095f
c000dfbb:	e8 b8 6c 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000dfc0:	83 c4 10             	add    esp,0x10
c000dfc3:	83 fb ff             	cmp    ebx,0xffffffff
c000dfc6:	75 b5                	jne    c000df7d <Virt::setupPageSwapping(int)+0x84>
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	56                   	push   esi
c000dfcc:	e8 03 16 00 00       	call   c000f5d4 <File::close()>
c000dfd1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dfd4:	e8 4d dc ff ff       	call   c000bc26 <rfree>
c000dfd9:	89 34 24             	mov    DWORD PTR [esp],esi
c000dfdc:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dfe1:	83 c4 20             	add    esp,0x20
c000dfe4:	5b                   	pop    ebx
c000dfe5:	5e                   	pop    esi
c000dfe6:	5f                   	pop    edi
c000dfe7:	c3                   	ret    
c000dfe8:	83 ec 08             	sub    esp,0x8
c000dfeb:	50                   	push   eax
c000dfec:	68 3e 09 02 c0       	push   0xc002093e
c000dff1:	e8 ed 0f 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000dff6:	83 c4 10             	add    esp,0x10
c000dff9:	eb 9f                	jmp    c000df9a <Virt::setupPageSwapping(int)+0xa1>
c000dffb:	83 ec 08             	sub    esp,0x8
c000dffe:	50                   	push   eax
c000dfff:	68 1a 09 02 c0       	push   0xc002091a
c000e004:	e8 da 0f 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e009:	c7 04 24 23 09 02 c0 	mov    DWORD PTR [esp],0xc0020923
c000e010:	e8 63 6c 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 1f ff ff ff       	jmp    c000df3c <Virt::setupPageSwapping(int)+0x43>
c000e01d:	90                   	nop

c000e01e <VAS::VAS()>:
c000e01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e022:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e02d:	a3 a4 38 02 c0       	mov    ds:0xc00238a4,eax
c000e032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e036:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e03a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e03e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e041:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e045:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e04c:	90                   	nop
c000e04d:	c3                   	ret    

c000e04e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e04e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e052:	89 c2                	mov    edx,eax
c000e054:	c1 e8 0a             	shr    eax,0xa
c000e057:	c1 ea 16             	shr    edx,0x16
c000e05a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e05f:	19 c9                	sbb    ecx,ecx
c000e061:	c1 e2 0c             	shl    edx,0xc
c000e064:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e06a:	25 fc 0f 00 00       	and    eax,0xffc
c000e06f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e076:	01 d0                	add    eax,edx
c000e078:	c3                   	ret    
c000e079:	90                   	nop

c000e07a <VAS::getPageTableEntry(unsigned long)>:
c000e07a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e07e:	89 ca                	mov    edx,ecx
c000e080:	c1 e9 0a             	shr    ecx,0xa
c000e083:	c1 ea 16             	shr    edx,0x16
c000e086:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e08c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e092:	c1 e0 0c             	shl    eax,0xc
c000e095:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e098:	c3                   	ret    

c000e099 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e099:	57                   	push   edi
c000e09a:	56                   	push   esi
c000e09b:	be 01 00 00 00       	mov    esi,0x1
c000e0a0:	53                   	push   ebx
c000e0a1:	83 ec 10             	sub    esp,0x10
c000e0a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e0a8:	c1 eb 0c             	shr    ebx,0xc
c000e0ab:	eb 3f                	jmp    c000e0ec <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e0ad:	e8 41 fe ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000e0b2:	83 ec 08             	sub    esp,0x8
c000e0b5:	57                   	push   edi
c000e0b6:	50                   	push   eax
c000e0b7:	e8 be ff ff ff       	call   c000e07a <VAS::getPageTableEntry(unsigned long)>
c000e0bc:	83 c4 10             	add    esp,0x10
c000e0bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0c1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e0c5:	f6 c4 04             	test   ah,0x4
c000e0c8:	75 5f                	jne    c000e129 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e0ca:	80 fa 04             	cmp    dl,0x4
c000e0cd:	74 78                	je     c000e147 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e0cf:	80 fa 02             	cmp    dl,0x2
c000e0d2:	0f 84 88 00 00 00    	je     c000e160 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e0d8:	80 fa 03             	cmp    dl,0x3
c000e0db:	0f 84 ad 00 00 00    	je     c000e18e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e0e1:	fe ca                	dec    dl
c000e0e3:	0f 84 92 00 00 00    	je     c000e17b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e0e9:	43                   	inc    ebx
c000e0ea:	31 f6                	xor    esi,esi
c000e0ec:	53                   	push   ebx
c000e0ed:	e8 4d fc ff ff       	call   c000dd3f <Virt::getPageState(unsigned long)>
c000e0f2:	5f                   	pop    edi
c000e0f3:	89 df                	mov    edi,ebx
c000e0f5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e0f9:	c1 e7 0c             	shl    edi,0xc
c000e0fc:	84 c0                	test   al,al
c000e0fe:	75 ad                	jne    c000e0ad <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	68 65 09 02 c0       	push   0xc0020965
c000e108:	e8 6b 6b 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000e10d:	e8 e1 fd ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000e112:	5a                   	pop    edx
c000e113:	59                   	pop    ecx
c000e114:	57                   	push   edi
c000e115:	50                   	push   eax
c000e116:	e8 5f ff ff ff       	call   c000e07a <VAS::getPageTableEntry(unsigned long)>
c000e11b:	83 c4 10             	add    esp,0x10
c000e11e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e120:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e124:	f6 c4 04             	test   ah,0x4
c000e127:	74 c0                	je     c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e129:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e12d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e132:	83 ec 0c             	sub    esp,0xc
c000e135:	50                   	push   eax
c000e136:	e8 eb df ff ff       	call   c000c126 <Phys::freePage(unsigned long)>
c000e13b:	83 c4 10             	add    esp,0x10
c000e13e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e142:	80 fa 04             	cmp    dl,0x4
c000e145:	75 88                	jne    c000e0cf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e147:	89 f0                	mov    eax,esi
c000e149:	84 c0                	test   al,al
c000e14b:	75 47                	jne    c000e194 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e14d:	c7 44 24 20 50 07 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020750
c000e155:	83 c4 10             	add    esp,0x10
c000e158:	5b                   	pop    ebx
c000e159:	5e                   	pop    esi
c000e15a:	5f                   	pop    edi
c000e15b:	e9 18 6b 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>
c000e160:	89 f0                	mov    eax,esi
c000e162:	84 c0                	test   al,al
c000e164:	75 15                	jne    c000e17b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e166:	83 ec 0c             	sub    esp,0xc
c000e169:	68 81 09 02 c0       	push   0xc0020981
c000e16e:	e8 05 6b 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000e173:	83 c4 10             	add    esp,0x10
c000e176:	e9 6e ff ff ff       	jmp    c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e17b:	83 ec 08             	sub    esp,0x8
c000e17e:	6a 00                	push   0x0
c000e180:	53                   	push   ebx
c000e181:	e8 84 fb ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e186:	83 c4 10             	add    esp,0x10
c000e189:	e9 5b ff ff ff       	jmp    c000e0e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e18e:	89 f0                	mov    eax,esi
c000e190:	84 c0                	test   al,al
c000e192:	75 15                	jne    c000e1a9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e194:	83 ec 08             	sub    esp,0x8
c000e197:	6a 00                	push   0x0
c000e199:	53                   	push   ebx
c000e19a:	e8 6b fb ff ff       	call   c000dd0a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	5b                   	pop    ebx
c000e1a6:	5e                   	pop    esi
c000e1a7:	5f                   	pop    edi
c000e1a8:	c3                   	ret    
c000e1a9:	c7 44 24 20 9d 09 02 c0 	mov    DWORD PTR [esp+0x20],0xc002099d
c000e1b1:	83 c4 10             	add    esp,0x10
c000e1b4:	5b                   	pop    ebx
c000e1b5:	5e                   	pop    esi
c000e1b6:	5f                   	pop    edi
c000e1b7:	e9 bc 6a 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>

c000e1bc <VAS::freeAllocatedPages(unsigned long)>:
c000e1bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e1c4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e1c8:	74 09                	je     c000e1d3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e1ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e1ce:	e9 c6 fe ff ff       	jmp    c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1d3:	c7 44 24 04 74 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020774
c000e1db:	e9 03 0e 00 00       	jmp    c000efe3 <Dbg::kprintf(char const*, ...)>

c000e1e0 <VAS::virtualToPhysical(unsigned long)>:
c000e1e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1e4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1e8:	e8 8d fe ff ff       	call   c000e07a <VAS::getPageTableEntry(unsigned long)>
c000e1ed:	5a                   	pop    edx
c000e1ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1f0:	59                   	pop    ecx
c000e1f1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e1f6:	c3                   	ret    
c000e1f7:	90                   	nop

c000e1f8 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e1f8:	83 ec 0c             	sub    esp,0xc
c000e1fb:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e200:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e204:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e20b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e20e:	19 c0                	sbb    eax,eax
c000e210:	83 ca 03             	or     edx,0x3
c000e213:	83 e0 fc             	and    eax,0xfffffffc
c000e216:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e21d:	e8 10 08 01 00       	call   c001ea32 <CPU::readCR3()>
c000e222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e226:	83 c4 0c             	add    esp,0xc
c000e229:	e9 16 08 01 00       	jmp    c001ea44 <CPU::writeCR3(unsigned long)>

c000e22e <VAS::~VAS()>:
c000e22e:	83 ec 2c             	sub    esp,0x2c
c000e231:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e239:	e8 76 99 00 00       	call   c0017bb4 <lockScheduler()>
c000e23e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e243:	8b 00                	mov    eax,DWORD PTR [eax]
c000e245:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e248:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e24e:	83 ec 04             	sub    esp,0x4
c000e251:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e255:	6a 01                	push   0x1
c000e257:	50                   	push   eax
c000e258:	e8 9b ff ff ff       	call   c000e1f8 <VAS::mapOtherVASIn(bool, VAS*)>
c000e25d:	83 c4 10             	add    esp,0x10
c000e260:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e268:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e270:	0f 8f d7 00 00 00    	jg     c000e34d <VAS::~VAS()+0x11f>
c000e276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e27a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e27d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e281:	c1 e2 02             	shl    edx,0x2
c000e284:	01 d0                	add    eax,edx
c000e286:	8b 00                	mov    eax,DWORD PTR [eax]
c000e288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e290:	83 e0 01             	and    eax,0x1
c000e293:	0f 84 ab 00 00 00    	je     c000e344 <VAS::~VAS()+0x116>
c000e299:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e2a1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e2a9:	7f 75                	jg     c000e320 <VAS::~VAS()+0xf2>
c000e2ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2af:	c1 e0 0a             	shl    eax,0xa
c000e2b2:	89 c2                	mov    edx,eax
c000e2b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e2b8:	01 d0                	add    eax,edx
c000e2ba:	c1 e0 0c             	shl    eax,0xc
c000e2bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2c1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e2c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e2cb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e2d1:	83 ec 04             	sub    esp,0x4
c000e2d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e2d8:	6a 01                	push   0x1
c000e2da:	50                   	push   eax
c000e2db:	e8 6e fd ff ff       	call   c000e04e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e2e0:	83 c4 10             	add    esp,0x10
c000e2e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e2ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2f5:	25 01 04 00 00       	and    eax,0x401
c000e2fa:	3d 01 04 00 00       	cmp    eax,0x401
c000e2ff:	75 19                	jne    c000e31a <VAS::~VAS()+0xec>
c000e301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e305:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e30a:	83 ec 0c             	sub    esp,0xc
c000e30d:	50                   	push   eax
c000e30e:	e8 13 de ff ff       	call   c000c126 <Phys::freePage(unsigned long)>
c000e313:	83 c4 10             	add    esp,0x10
c000e316:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e31a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e31e:	eb 81                	jmp    c000e2a1 <VAS::~VAS()+0x73>
c000e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e324:	25 00 04 00 00       	and    eax,0x400
c000e329:	74 19                	je     c000e344 <VAS::~VAS()+0x116>
c000e32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e334:	83 ec 0c             	sub    esp,0xc
c000e337:	50                   	push   eax
c000e338:	e8 e9 dd ff ff       	call   c000c126 <Phys::freePage(unsigned long)>
c000e33d:	83 c4 10             	add    esp,0x10
c000e340:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e344:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e348:	e9 1b ff ff ff       	jmp    c000e268 <VAS::~VAS()+0x3a>
c000e34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e354:	83 ec 0c             	sub    esp,0xc
c000e357:	50                   	push   eax
c000e358:	e8 3c fd ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c000e35d:	83 c4 10             	add    esp,0x10
c000e360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e367:	83 ec 0c             	sub    esp,0xc
c000e36a:	50                   	push   eax
c000e36b:	e8 b6 dd ff ff       	call   c000c126 <Phys::freePage(unsigned long)>
c000e370:	83 c4 10             	add    esp,0x10
c000e373:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e377:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e37b:	c1 e0 02             	shl    eax,0x2
c000e37e:	83 ec 08             	sub    esp,0x8
c000e381:	50                   	push   eax
c000e382:	68 98 07 02 c0       	push   0xc0020798
c000e387:	e8 57 0c 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e38c:	83 c4 10             	add    esp,0x10
c000e38f:	e8 22 98 00 00       	call   c0017bb6 <unlockScheduler()>
c000e394:	90                   	nop
c000e395:	83 c4 2c             	add    esp,0x2c
c000e398:	c3                   	ret    
c000e399:	90                   	nop

c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e39a:	55                   	push   ebp
c000e39b:	57                   	push   edi
c000e39c:	56                   	push   esi
c000e39d:	53                   	push   ebx
c000e39e:	83 ec 1c             	sub    esp,0x1c
c000e3a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e3a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e3a9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e3af:	77 08                	ja     c000e3b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e3b1:	0f 20 d8             	mov    eax,cr3
c000e3b4:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e3b7:	75 47                	jne    c000e400 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e3b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e3bd:	09 d8                	or     eax,ebx
c000e3bf:	a9 ff 0f 00 00       	test   eax,0xfff
c000e3c4:	75 57                	jne    c000e41d <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e3c6:	89 de                	mov    esi,ebx
c000e3c8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e3cb:	c1 ee 16             	shr    esi,0x16
c000e3ce:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e3d5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e3d9:	74 54                	je     c000e42f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e3db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e3df:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e3e5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e3e9:	c1 e6 0c             	shl    esi,0xc
c000e3ec:	c1 eb 0a             	shr    ebx,0xa
c000e3ef:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e3f5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e3f8:	83 c4 1c             	add    esp,0x1c
c000e3fb:	5b                   	pop    ebx
c000e3fc:	5e                   	pop    esi
c000e3fd:	5f                   	pop    edi
c000e3fe:	5d                   	pop    ebp
c000e3ff:	c3                   	ret    
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	68 b8 07 02 c0       	push   0xc00207b8
c000e408:	e8 d6 0b 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e40d:	83 c4 10             	add    esp,0x10
c000e410:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e414:	09 d8                	or     eax,ebx
c000e416:	a9 ff 0f 00 00       	test   eax,0xfff
c000e41b:	74 a9                	je     c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e41d:	83 ec 0c             	sub    esp,0xc
c000e420:	68 20 08 02 c0       	push   0xc0020820
c000e425:	e8 4e 68 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000e42a:	83 c4 10             	add    esp,0x10
c000e42d:	eb 97                	jmp    c000e3c6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e42f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e433:	e8 78 dd ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000e438:	89 c5                	mov    ebp,eax
c000e43a:	e8 b4 fa ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000e43f:	83 ec 0c             	sub    esp,0xc
c000e442:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e446:	6a 01                	push   0x1
c000e448:	e8 16 f9 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000e44d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e454:	6a 01                	push   0x1
c000e456:	50                   	push   eax
c000e457:	55                   	push   ebp
c000e458:	81 cd 07 04 00 00    	or     ebp,0x407
c000e45e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e462:	51                   	push   ecx
c000e463:	e8 1e 02 00 00       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e468:	83 c4 1c             	add    esp,0x1c
c000e46b:	68 00 10 00 00       	push   0x1000
c000e470:	6a 00                	push   0x0
c000e472:	50                   	push   eax
c000e473:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e477:	e8 8c 21 ff ff       	call   c0000608 <memset>
c000e47c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e480:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e483:	e8 11 fc ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c000e488:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e48c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e48f:	83 c4 10             	add    esp,0x10
c000e492:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e495:	e9 41 ff ff ff       	jmp    c000e3db <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e49a <VAS::allocatePages(int, int)>:
c000e49a:	55                   	push   ebp
c000e49b:	57                   	push   edi
c000e49c:	56                   	push   esi
c000e49d:	53                   	push   ebx
c000e49e:	83 ec 1c             	sub    esp,0x1c
c000e4a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4a5:	e8 c8 5a 00 00       	call   c0013f72 <thisCPU()>
c000e4aa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e4b0:	83 e0 01             	and    eax,0x1
c000e4b3:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e4b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e4bb:	0f 85 d7 00 00 00    	jne    c000e598 <VAS::allocatePages(int, int)+0xfe>
c000e4c1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e4c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4c8:	85 c0                	test   eax,eax
c000e4ca:	0f 84 ac 00 00 00    	je     c000e57c <VAS::allocatePages(int, int)+0xe2>
c000e4d0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e4d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4d8:	c1 e6 0c             	shl    esi,0xc
c000e4db:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e4df:	85 c0                	test   eax,eax
c000e4e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e4e4:	7e 33                	jle    c000e519 <VAS::allocatePages(int, int)+0x7f>
c000e4e6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e4ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e4ee:	81 cd 00 04 00 00    	or     ebp,0x400
c000e4f4:	e8 b7 dc ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000e4f9:	55                   	push   ebp
c000e4fa:	53                   	push   ebx
c000e4fb:	50                   	push   eax
c000e4fc:	57                   	push   edi
c000e4fd:	e8 98 fe ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e502:	83 c4 10             	add    esp,0x10
c000e505:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e50a:	74 03                	je     c000e50f <VAS::allocatePages(int, int)+0x75>
c000e50c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e50f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e515:	39 de                	cmp    esi,ebx
c000e517:	75 db                	jne    c000e4f4 <VAS::allocatePages(int, int)+0x5a>
c000e519:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e51e:	74 3f                	je     c000e55f <VAS::allocatePages(int, int)+0xc5>
c000e520:	c1 ee 0a             	shr    esi,0xa
c000e523:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e527:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e52d:	c1 eb 0a             	shr    ebx,0xa
c000e530:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e536:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e53c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e542:	39 f3                	cmp    ebx,esi
c000e544:	77 0d                	ja     c000e553 <VAS::allocatePages(int, int)+0xb9>
c000e546:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e549:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e54f:	39 de                	cmp    esi,ebx
c000e551:	73 f3                	jae    c000e546 <VAS::allocatePages(int, int)+0xac>
c000e553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e557:	83 c4 1c             	add    esp,0x1c
c000e55a:	5b                   	pop    ebx
c000e55b:	5e                   	pop    esi
c000e55c:	5f                   	pop    edi
c000e55d:	5d                   	pop    ebp
c000e55e:	c3                   	ret    
c000e55f:	e8 ce 04 01 00       	call   c001ea32 <CPU::readCR3()>
c000e564:	83 ec 0c             	sub    esp,0xc
c000e567:	50                   	push   eax
c000e568:	e8 d7 04 01 00       	call   c001ea44 <CPU::writeCR3(unsigned long)>
c000e56d:	83 c4 10             	add    esp,0x10
c000e570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e574:	83 c4 1c             	add    esp,0x1c
c000e577:	5b                   	pop    ebx
c000e578:	5e                   	pop    esi
c000e579:	5f                   	pop    edi
c000e57a:	5d                   	pop    ebp
c000e57b:	c3                   	ret    
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	68 44 08 02 c0       	push   0xc0020844
c000e584:	e8 ef 66 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000e589:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e58c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e590:	83 c4 10             	add    esp,0x10
c000e593:	e9 38 ff ff ff       	jmp    c000e4d0 <VAS::allocatePages(int, int)+0x36>
c000e598:	83 ec 0c             	sub    esp,0xc
c000e59b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e59f:	e8 bf f7 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000e5a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5a8:	83 c4 10             	add    esp,0x10
c000e5ab:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e5b0:	0f 87 94 00 00 00    	ja     c000e64a <VAS::allocatePages(int, int)+0x1b0>
c000e5b6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e5ba:	85 d2                	test   edx,edx
c000e5bc:	7e 3c                	jle    c000e5fa <VAS::allocatePages(int, int)+0x160>
c000e5be:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5c2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e5c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e5ca:	c1 e5 0c             	shl    ebp,0xc
c000e5cd:	81 ce 00 04 00 00    	or     esi,0x400
c000e5d3:	01 dd                	add    ebp,ebx
c000e5d5:	e8 d6 db ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000e5da:	56                   	push   esi
c000e5db:	53                   	push   ebx
c000e5dc:	50                   	push   eax
c000e5dd:	57                   	push   edi
c000e5de:	e8 b7 fd ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e5e3:	83 c4 10             	add    esp,0x10
c000e5e6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5eb:	74 03                	je     c000e5f0 <VAS::allocatePages(int, int)+0x156>
c000e5ed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e5f0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e5f6:	39 dd                	cmp    ebp,ebx
c000e5f8:	75 db                	jne    c000e5d5 <VAS::allocatePages(int, int)+0x13b>
c000e5fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e5ff:	0f 84 5a ff ff ff    	je     c000e55f <VAS::allocatePages(int, int)+0xc5>
c000e605:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e609:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e60d:	89 d3                	mov    ebx,edx
c000e60f:	c1 e0 0c             	shl    eax,0xc
c000e612:	c1 eb 0a             	shr    ebx,0xa
c000e615:	01 d0                	add    eax,edx
c000e617:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e61d:	c1 e8 0a             	shr    eax,0xa
c000e620:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e626:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e62b:	2d 00 00 40 00       	sub    eax,0x400000
c000e630:	39 c3                	cmp    ebx,eax
c000e632:	0f 87 1b ff ff ff    	ja     c000e553 <VAS::allocatePages(int, int)+0xb9>
c000e638:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e63b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e641:	39 d8                	cmp    eax,ebx
c000e643:	73 f3                	jae    c000e638 <VAS::allocatePages(int, int)+0x19e>
c000e645:	e9 09 ff ff ff       	jmp    c000e553 <VAS::allocatePages(int, int)+0xb9>
c000e64a:	e8 23 59 00 00       	call   c0013f72 <thisCPU()>
c000e64f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e656:	0f 84 5a ff ff ff    	je     c000e5b6 <VAS::allocatePages(int, int)+0x11c>
c000e65c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e664:	e9 4d ff ff ff       	jmp    c000e5b6 <VAS::allocatePages(int, int)+0x11c>
c000e669:	90                   	nop

c000e66a <VAS::setCPUSpecific(unsigned long)>:
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	6a 05                	push   0x5
c000e66f:	68 00 00 40 c2       	push   0xc2400000
c000e674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e67c:	e8 19 fd ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e681:	83 c4 1c             	add    esp,0x1c
c000e684:	c3                   	ret    
c000e685:	90                   	nop

c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e686:	55                   	push   ebp
c000e687:	57                   	push   edi
c000e688:	56                   	push   esi
c000e689:	53                   	push   ebx
c000e68a:	83 ec 1c             	sub    esp,0x1c
c000e68d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e691:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e695:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e699:	e8 d4 58 00 00       	call   c0013f72 <thisCPU()>
c000e69e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e6a4:	83 e0 01             	and    eax,0x1
c000e6a7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e6ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6af:	85 c0                	test   eax,eax
c000e6b1:	7e 39                	jle    c000e6ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e6b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6b7:	89 f3                	mov    ebx,esi
c000e6b9:	c1 e0 0c             	shl    eax,0xc
c000e6bc:	01 f0                	add    eax,esi
c000e6be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6c2:	55                   	push   ebp
c000e6c3:	53                   	push   ebx
c000e6c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6c8:	29 f0                	sub    eax,esi
c000e6ca:	01 d8                	add    eax,ebx
c000e6cc:	50                   	push   eax
c000e6cd:	57                   	push   edi
c000e6ce:	e8 c7 fc ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e6d3:	83 c4 10             	add    esp,0x10
c000e6d6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6db:	74 03                	je     c000e6e0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e6dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e6e0:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e6e6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e6ea:	75 d6                	jne    c000e6c2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000e6ec:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e6f1:	74 42                	je     c000e735 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000e6f3:	89 f3                	mov    ebx,esi
c000e6f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6f9:	c1 eb 0a             	shr    ebx,0xa
c000e6fc:	c1 e0 0c             	shl    eax,0xc
c000e6ff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e705:	01 f0                	add    eax,esi
c000e707:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e70d:	c1 e8 0a             	shr    eax,0xa
c000e710:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e715:	2d 00 00 40 00       	sub    eax,0x400000
c000e71a:	39 c3                	cmp    ebx,eax
c000e71c:	77 0d                	ja     c000e72b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000e71e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e721:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e727:	39 d8                	cmp    eax,ebx
c000e729:	73 f3                	jae    c000e71e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000e72b:	83 c4 1c             	add    esp,0x1c
c000e72e:	89 f0                	mov    eax,esi
c000e730:	5b                   	pop    ebx
c000e731:	5e                   	pop    esi
c000e732:	5f                   	pop    edi
c000e733:	5d                   	pop    ebp
c000e734:	c3                   	ret    
c000e735:	e8 f8 02 01 00       	call   c001ea32 <CPU::readCR3()>
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	50                   	push   eax
c000e73e:	e8 01 03 01 00       	call   c001ea44 <CPU::writeCR3(unsigned long)>
c000e743:	89 f0                	mov    eax,esi
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	83 c4 1c             	add    esp,0x1c
c000e74b:	5b                   	pop    ebx
c000e74c:	5e                   	pop    esi
c000e74d:	5f                   	pop    edi
c000e74e:	5d                   	pop    ebp
c000e74f:	c3                   	ret    

c000e750 <VAS::VAS(VAS*)>:
c000e750:	53                   	push   ebx
c000e751:	83 ec 38             	sub    esp,0x38
c000e754:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e758:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e75f:	e8 77 94 00 00       	call   c0017bdb <lockStuff()>
c000e764:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e768:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e76b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e76f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e772:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e776:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000e779:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000e780:	e8 2b da ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000e785:	89 c2                	mov    edx,eax
c000e787:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e78b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e78e:	e8 60 f7 ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000e793:	89 c3                	mov    ebx,eax
c000e795:	83 ec 0c             	sub    esp,0xc
c000e798:	6a 01                	push   0x1
c000e79a:	e8 c4 f5 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000e79f:	83 c4 10             	add    esp,0x10
c000e7a2:	89 c2                	mov    edx,eax
c000e7a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7ab:	83 ec 0c             	sub    esp,0xc
c000e7ae:	6a 03                	push   0x3
c000e7b0:	6a 01                	push   0x1
c000e7b2:	52                   	push   edx
c000e7b3:	50                   	push   eax
c000e7b4:	53                   	push   ebx
c000e7b5:	e8 cc fe ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7ba:	83 c4 20             	add    esp,0x20
c000e7bd:	89 c2                	mov    edx,eax
c000e7bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e7c6:	83 ec 04             	sub    esp,0x4
c000e7c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e7cd:	6a 01                	push   0x1
c000e7cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e7d3:	e8 20 fa ff ff       	call   c000e1f8 <VAS::mapOtherVASIn(bool, VAS*)>
c000e7d8:	83 c4 10             	add    esp,0x10
c000e7db:	83 ec 0c             	sub    esp,0xc
c000e7de:	6a 01                	push   0x1
c000e7e0:	e8 7e f5 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e7ec:	83 ec 0c             	sub    esp,0xc
c000e7ef:	6a 01                	push   0x1
c000e7f1:	e8 6d f5 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000e7f6:	83 c4 10             	add    esp,0x10
c000e7f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e7fd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e805:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000e80d:	0f 8f 5e 02 00 00    	jg     c000ea71 <VAS::VAS(VAS*)+0x321>
c000e813:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e818:	8b 00                	mov    eax,DWORD PTR [eax]
c000e81a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e81d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e823:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e826:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e82a:	c1 e2 02             	shl    edx,0x2
c000e82d:	01 d0                	add    eax,edx
c000e82f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e831:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e835:	83 ec 08             	sub    esp,0x8
c000e838:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e83c:	68 b7 09 02 c0       	push   0xc00209b7
c000e841:	e8 9d 07 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e846:	83 c4 10             	add    esp,0x10
c000e849:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e84d:	25 01 04 00 00       	and    eax,0x401
c000e852:	3d 01 04 00 00       	cmp    eax,0x401
c000e857:	0f 85 e5 01 00 00    	jne    c000ea42 <VAS::VAS(VAS*)+0x2f2>
c000e85d:	83 ec 0c             	sub    esp,0xc
c000e860:	68 c8 09 02 c0       	push   0xc00209c8
c000e865:	e8 79 07 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e86a:	83 c4 10             	add    esp,0x10
c000e86d:	e8 3e d9 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000e872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e876:	83 ec 08             	sub    esp,0x8
c000e879:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e87d:	68 de 09 02 c0       	push   0xc00209de
c000e882:	e8 5c 07 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e887:	83 c4 10             	add    esp,0x10
c000e88a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e88e:	25 ff 0f 00 00       	and    eax,0xfff
c000e893:	89 c1                	mov    ecx,eax
c000e895:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e899:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e89c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8a0:	c1 e2 02             	shl    edx,0x2
c000e8a3:	01 c2                	add    edx,eax
c000e8a5:	89 c8                	mov    eax,ecx
c000e8a7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000e8ab:	89 02                	mov    DWORD PTR [edx],eax
c000e8ad:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000e8b5:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000e8bd:	0f 8f a5 01 00 00    	jg     c000ea68 <VAS::VAS(VAS*)+0x318>
c000e8c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8c7:	c1 e0 0a             	shl    eax,0xa
c000e8ca:	89 c2                	mov    edx,eax
c000e8cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8d0:	01 d0                	add    eax,edx
c000e8d2:	c1 e0 0c             	shl    eax,0xc
c000e8d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8d9:	83 ec 08             	sub    esp,0x8
c000e8dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000e8e4:	e8 91 f7 ff ff       	call   c000e07a <VAS::getPageTableEntry(unsigned long)>
c000e8e9:	83 c4 10             	add    esp,0x10
c000e8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8f2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e8f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e8fc:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e902:	83 ec 04             	sub    esp,0x4
c000e905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e909:	6a 01                	push   0x1
c000e90b:	50                   	push   eax
c000e90c:	e8 3d f7 ff ff       	call   c000e04e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e911:	83 c4 10             	add    esp,0x10
c000e914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e918:	83 ec 04             	sub    esp,0x4
c000e91b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e91f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e923:	68 70 08 02 c0       	push   0xc0020870
c000e928:	e8 b6 06 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e92d:	83 c4 10             	add    esp,0x10
c000e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e934:	25 01 04 00 00       	and    eax,0x401
c000e939:	3d 01 04 00 00       	cmp    eax,0x401
c000e93e:	0f 85 db 00 00 00    	jne    c000ea1f <VAS::VAS(VAS*)+0x2cf>
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	68 ed 09 02 c0       	push   0xc00209ed
c000e94c:	e8 92 06 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	e8 57 d8 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000e959:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e95d:	83 ec 08             	sub    esp,0x8
c000e960:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e964:	68 fc 09 02 c0       	push   0xc00209fc
c000e969:	e8 75 06 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e96e:	83 c4 10             	add    esp,0x10
c000e971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e975:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e97a:	83 ec 08             	sub    esp,0x8
c000e97d:	50                   	push   eax
c000e97e:	68 10 0a 02 c0       	push   0xc0020a10
c000e983:	e8 5b 06 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	e8 63 f5 ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000e990:	83 ec 0c             	sub    esp,0xc
c000e993:	6a 03                	push   0x3
c000e995:	6a 01                	push   0x1
c000e997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e99b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e99f:	50                   	push   eax
c000e9a0:	e8 e1 fc ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9a5:	83 c4 20             	add    esp,0x20
c000e9a8:	e8 46 f5 ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000e9ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9b1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9b7:	83 ec 0c             	sub    esp,0xc
c000e9ba:	6a 03                	push   0x3
c000e9bc:	6a 01                	push   0x1
c000e9be:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e9c2:	52                   	push   edx
c000e9c3:	50                   	push   eax
c000e9c4:	e8 bd fc ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9c9:	83 c4 20             	add    esp,0x20
c000e9cc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9d4:	83 ec 04             	sub    esp,0x4
c000e9d7:	68 00 10 00 00       	push   0x1000
c000e9dc:	52                   	push   edx
c000e9dd:	50                   	push   eax
c000e9de:	e8 ef 1b ff ff       	call   c00005d2 <memcpy>
c000e9e3:	83 c4 10             	add    esp,0x10
c000e9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ea:	25 ff 0f 00 00       	and    eax,0xfff
c000e9ef:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e9f3:	89 c2                	mov    edx,eax
c000e9f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f9:	89 10                	mov    DWORD PTR [eax],edx
c000e9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ff:	25 ff 0f 00 00       	and    eax,0xfff
c000ea04:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ea08:	83 ec 04             	sub    esp,0x4
c000ea0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea0f:	50                   	push   eax
c000ea10:	68 94 08 02 c0       	push   0xc0020894
c000ea15:	e8 c9 05 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000ea1a:	83 c4 10             	add    esp,0x10
c000ea1d:	eb 1a                	jmp    c000ea39 <VAS::VAS(VAS*)+0x2e9>
c000ea1f:	83 ec 0c             	sub    esp,0xc
c000ea22:	68 24 0a 02 c0       	push   0xc0020a24
c000ea27:	e8 b7 05 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000ea2c:	83 c4 10             	add    esp,0x10
c000ea2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea37:	89 10                	mov    DWORD PTR [eax],edx
c000ea39:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ea3d:	e9 73 fe ff ff       	jmp    c000e8b5 <VAS::VAS(VAS*)+0x165>
c000ea42:	83 ec 0c             	sub    esp,0xc
c000ea45:	68 28 0a 02 c0       	push   0xc0020a28
c000ea4a:	e8 94 05 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000ea4f:	83 c4 10             	add    esp,0x10
c000ea52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea56:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ea59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ea5d:	c1 e2 02             	shl    edx,0x2
c000ea60:	01 c2                	add    edx,eax
c000ea62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea66:	89 02                	mov    DWORD PTR [edx],eax
c000ea68:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ea6c:	e9 94 fd ff ff       	jmp    c000e805 <VAS::VAS(VAS*)+0xb5>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea78:	e8 1c f6 ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea7d:	83 c4 10             	add    esp,0x10
c000ea80:	83 ec 0c             	sub    esp,0xc
c000ea83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea87:	e8 0d f6 ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c000ea8c:	83 c4 10             	add    esp,0x10
c000ea8f:	e8 d9 94 00 00       	call   c0017f6d <unlockStuff()>
c000ea94:	90                   	nop
c000ea95:	83 c4 38             	add    esp,0x38
c000ea98:	5b                   	pop    ebx
c000ea99:	c3                   	ret    

c000ea9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ea9a:	55                   	push   ebp
c000ea9b:	57                   	push   edi
c000ea9c:	56                   	push   esi
c000ea9d:	53                   	push   ebx
c000ea9e:	83 ec 1c             	sub    esp,0x1c
c000eaa1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaa5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eaa9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000eaad:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eab1:	a9 ff 0f 00 00       	test   eax,0xfff
c000eab6:	75 4a                	jne    c000eb02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000eab8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eabc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eabf:	c1 eb 16             	shr    ebx,0x16
c000eac2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eac9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000eacd:	74 4d                	je     c000eb1c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000eacf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ead3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ead7:	c1 e8 0a             	shr    eax,0xa
c000eada:	80 fa 01             	cmp    dl,0x1
c000eadd:	19 d2                	sbb    edx,edx
c000eadf:	c1 e3 0c             	shl    ebx,0xc
c000eae2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000eae6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000eaec:	25 fc 0f 00 00       	and    eax,0xffc
c000eaf1:	01 d8                	add    eax,ebx
c000eaf3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000eafa:	83 c4 1c             	add    esp,0x1c
c000eafd:	5b                   	pop    ebx
c000eafe:	5e                   	pop    esi
c000eaff:	5f                   	pop    edi
c000eb00:	5d                   	pop    ebp
c000eb01:	c3                   	ret    
c000eb02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eb06:	83 ec 0c             	sub    esp,0xc
c000eb09:	68 b8 08 02 c0       	push   0xc00208b8
c000eb0e:	e8 65 61 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000eb13:	83 c4 10             	add    esp,0x10
c000eb16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb1a:	eb 9c                	jmp    c000eab8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000eb1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb20:	e8 8b d6 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000eb25:	89 c5                	mov    ebp,eax
c000eb27:	e8 c7 f3 ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb33:	6a 01                	push   0x1
c000eb35:	e8 29 f2 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000eb3a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000eb41:	6a 01                	push   0x1
c000eb43:	50                   	push   eax
c000eb44:	55                   	push   ebp
c000eb45:	81 cd 07 04 00 00    	or     ebp,0x407
c000eb4b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000eb4f:	51                   	push   ecx
c000eb50:	e8 31 fb ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eb55:	83 c4 1c             	add    esp,0x1c
c000eb58:	68 00 10 00 00       	push   0x1000
c000eb5d:	6a 00                	push   0x0
c000eb5f:	50                   	push   eax
c000eb60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb64:	e8 9f 1a ff ff       	call   c0000608 <memset>
c000eb69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000eb6d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eb70:	e8 24 f5 ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c000eb75:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eb78:	83 c4 10             	add    esp,0x10
c000eb7b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000eb7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb82:	e9 48 ff ff ff       	jmp    c000eacf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000eb87:	90                   	nop

c000eb88 <VAS::VAS(bool)>:
c000eb88:	53                   	push   ebx
c000eb89:	83 ec 28             	sub    esp,0x28
c000eb8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eb94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eb9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eba7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ebaa:	e8 01 d6 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000ebaf:	89 c2                	mov    edx,eax
c000ebb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebb5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ebb8:	e8 36 f3 ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c000ebbd:	89 c3                	mov    ebx,eax
c000ebbf:	83 ec 0c             	sub    esp,0xc
c000ebc2:	6a 01                	push   0x1
c000ebc4:	e8 9a f1 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	89 c2                	mov    edx,eax
c000ebce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebd2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ebd5:	83 ec 0c             	sub    esp,0xc
c000ebd8:	6a 03                	push   0x3
c000ebda:	6a 01                	push   0x1
c000ebdc:	52                   	push   edx
c000ebdd:	50                   	push   eax
c000ebde:	53                   	push   ebx
c000ebdf:	e8 a2 fa ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ebe4:	83 c4 20             	add    esp,0x20
c000ebe7:	89 c2                	mov    edx,eax
c000ebe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ebf0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ebf8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ec00:	7f 1c                	jg     c000ec1e <VAS::VAS(bool)+0x96>
c000ec02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec06:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ec0d:	c1 e2 02             	shl    edx,0x2
c000ec10:	01 d0                	add    eax,edx
c000ec12:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec18:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ec1c:	eb da                	jmp    c000ebf8 <VAS::VAS(bool)+0x70>
c000ec1e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ec26:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ec2e:	7f 71                	jg     c000eca1 <VAS::VAS(bool)+0x119>
c000ec30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec34:	2d 00 02 00 00       	sub    eax,0x200
c000ec39:	c1 e0 0c             	shl    eax,0xc
c000ec3c:	83 c8 03             	or     eax,0x3
c000ec3f:	89 c3                	mov    ebx,eax
c000ec41:	e8 2c 53 00 00       	call   c0013f72 <thisCPU()>
c000ec46:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ec4c:	83 e0 10             	and    eax,0x10
c000ec4f:	84 c0                	test   al,al
c000ec51:	74 07                	je     c000ec5a <VAS::VAS(bool)+0xd2>
c000ec53:	b8 00 01 00 00       	mov    eax,0x100
c000ec58:	eb 05                	jmp    c000ec5f <VAS::VAS(bool)+0xd7>
c000ec5a:	b8 00 00 00 00       	mov    eax,0x0
c000ec5f:	09 d8                	or     eax,ebx
c000ec61:	89 c1                	mov    ecx,eax
c000ec63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec6e:	c1 e2 02             	shl    edx,0x2
c000ec71:	01 d0                	add    eax,edx
c000ec73:	89 ca                	mov    edx,ecx
c000ec75:	89 10                	mov    DWORD PTR [eax],edx
c000ec77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec7b:	2d 40 03 00 00       	sub    eax,0x340
c000ec80:	83 f8 7f             	cmp    eax,0x7f
c000ec83:	77 16                	ja     c000ec9b <VAS::VAS(bool)+0x113>
c000ec85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ec8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec90:	c1 e2 02             	shl    edx,0x2
c000ec93:	01 d0                	add    eax,edx
c000ec95:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ec9b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ec9f:	eb 85                	jmp    c000ec26 <VAS::VAS(bool)+0x9e>
c000eca1:	e8 cc 52 00 00       	call   c0013f72 <thisCPU()>
c000eca6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecac:	83 e0 10             	and    eax,0x10
c000ecaf:	84 c0                	test   al,al
c000ecb1:	74 07                	je     c000ecba <VAS::VAS(bool)+0x132>
c000ecb3:	b8 03 41 00 00       	mov    eax,0x4103
c000ecb8:	eb 05                	jmp    c000ecbf <VAS::VAS(bool)+0x137>
c000ecba:	b8 03 40 00 00       	mov    eax,0x4003
c000ecbf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ecc3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ecc6:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eccc:	89 02                	mov    DWORD PTR [edx],eax
c000ecce:	e8 9f 52 00 00       	call   c0013f72 <thisCPU()>
c000ecd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ecd9:	83 ec 08             	sub    esp,0x8
c000ecdc:	50                   	push   eax
c000ecdd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ece1:	e8 84 f9 ff ff       	call   c000e66a <VAS::setCPUSpecific(unsigned long)>
c000ece6:	83 c4 10             	add    esp,0x10
c000ece9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eced:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ecf0:	e8 7d 52 00 00       	call   c0013f72 <thisCPU()>
c000ecf5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ecfb:	83 e0 10             	and    eax,0x10
c000ecfe:	84 c0                	test   al,al
c000ed00:	74 07                	je     c000ed09 <VAS::VAS(bool)+0x181>
c000ed02:	b8 00 01 00 00       	mov    eax,0x100
c000ed07:	eb 05                	jmp    c000ed0e <VAS::VAS(bool)+0x186>
c000ed09:	b8 00 00 00 00       	mov    eax,0x0
c000ed0e:	09 d8                	or     eax,ebx
c000ed10:	89 c2                	mov    edx,eax
c000ed12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed19:	05 fc 0f 00 00       	add    eax,0xffc
c000ed1e:	83 ca 03             	or     edx,0x3
c000ed21:	89 10                	mov    DWORD PTR [eax],edx
c000ed23:	e8 4a 52 00 00       	call   c0013f72 <thisCPU()>
c000ed28:	83 ec 0c             	sub    esp,0xc
c000ed2b:	50                   	push   eax
c000ed2c:	e8 9f 19 00 00       	call   c00106d0 <Device::getName()>
c000ed31:	83 c4 10             	add    esp,0x10
c000ed34:	83 ec 08             	sub    esp,0x8
c000ed37:	68 38 0a 02 c0       	push   0xc0020a38
c000ed3c:	50                   	push   eax
c000ed3d:	e8 b6 19 ff ff       	call   c00006f8 <strcmp>
c000ed42:	83 c4 10             	add    esp,0x10
c000ed45:	85 c0                	test   eax,eax
c000ed47:	0f 94 c0             	sete   al
c000ed4a:	84 c0                	test   al,al
c000ed4c:	74 64                	je     c000edb2 <VAS::VAS(bool)+0x22a>
c000ed4e:	e8 44 8e 00 00       	call   c0017b97 <disableIRQs()>
c000ed53:	e8 1a 52 00 00       	call   c0013f72 <thisCPU()>
c000ed58:	05 7c 09 00 00       	add    eax,0x97c
c000ed5d:	83 ec 0c             	sub    esp,0xc
c000ed60:	50                   	push   eax
c000ed61:	e8 12 c9 ff ff       	call   c000b678 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed66:	83 c4 10             	add    esp,0x10
c000ed69:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed6e:	89 c3                	mov    ebx,eax
c000ed70:	e8 fd 51 00 00       	call   c0013f72 <thisCPU()>
c000ed75:	05 7c 09 00 00       	add    eax,0x97c
c000ed7a:	83 ec 0c             	sub    esp,0xc
c000ed7d:	50                   	push   eax
c000ed7e:	e8 f5 c8 ff ff       	call   c000b678 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ed83:	83 c4 10             	add    esp,0x10
c000ed86:	83 ec 08             	sub    esp,0x8
c000ed89:	50                   	push   eax
c000ed8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed8e:	e8 e7 f2 ff ff       	call   c000e07a <VAS::getPageTableEntry(unsigned long)>
c000ed93:	83 c4 10             	add    esp,0x10
c000ed96:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed98:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ed9d:	6a 11                	push   0x11
c000ed9f:	53                   	push   ebx
c000eda0:	50                   	push   eax
c000eda1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eda5:	e8 f0 f5 ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c000edaa:	83 c4 10             	add    esp,0x10
c000edad:	e8 f3 8d 00 00       	call   c0017ba5 <enableIRQs()>
c000edb2:	90                   	nop
c000edb3:	83 c4 28             	add    esp,0x28
c000edb6:	5b                   	pop    ebx
c000edb7:	c3                   	ret    

c000edb8 <mapVASFirstTime>:
c000edb8:	55                   	push   ebp
c000edb9:	57                   	push   edi
c000edba:	56                   	push   esi
c000edbb:	53                   	push   ebx
c000edbc:	83 ec 0c             	sub    esp,0xc
c000edbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edc4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000edc7:	4a                   	dec    edx
c000edc8:	0f 84 99 00 00 00    	je     c000ee67 <mapVASFirstTime+0xaf>
c000edce:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000edd1:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000edd4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000edd9:	c1 e5 15             	shl    ebp,0x15
c000eddc:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ede1:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ede7:	29 eb                	sub    ebx,ebp
c000ede9:	29 ee                	sub    esi,ebp
c000edeb:	e8 c0 d3 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	68 03 04 00 00       	push   0x403
c000edf8:	6a 01                	push   0x1
c000edfa:	53                   	push   ebx
c000edfb:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ee01:	50                   	push   eax
c000ee02:	57                   	push   edi
c000ee03:	e8 7e f8 ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee08:	83 c4 20             	add    esp,0x20
c000ee0b:	39 f3                	cmp    ebx,esi
c000ee0d:	75 dc                	jne    c000edeb <mapVASFirstTime+0x33>
c000ee0f:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ee14:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ee19:	29 ee                	sub    esi,ebp
c000ee1b:	29 e8                	sub    eax,ebp
c000ee1d:	89 c5                	mov    ebp,eax
c000ee1f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ee23:	19 db                	sbb    ebx,ebx
c000ee25:	e8 86 d3 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c000ee2a:	83 e3 04             	and    ebx,0x4
c000ee2d:	83 ec 0c             	sub    esp,0xc
c000ee30:	81 c3 03 04 00 00    	add    ebx,0x403
c000ee36:	53                   	push   ebx
c000ee37:	6a 01                	push   0x1
c000ee39:	56                   	push   esi
c000ee3a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ee40:	50                   	push   eax
c000ee41:	57                   	push   edi
c000ee42:	e8 3f f8 ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee47:	83 c4 20             	add    esp,0x20
c000ee4a:	39 f5                	cmp    ebp,esi
c000ee4c:	75 d1                	jne    c000ee1f <mapVASFirstTime+0x67>
c000ee4e:	e8 df fb 00 00       	call   c001ea32 <CPU::readCR3()>
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	50                   	push   eax
c000ee57:	e8 e8 fb 00 00       	call   c001ea44 <CPU::writeCR3(unsigned long)>
c000ee5c:	83 c4 10             	add    esp,0x10
c000ee5f:	83 c4 0c             	add    esp,0xc
c000ee62:	5b                   	pop    ebx
c000ee63:	5e                   	pop    esi
c000ee64:	5f                   	pop    edi
c000ee65:	5d                   	pop    ebp
c000ee66:	c3                   	ret    
c000ee67:	83 ec 0c             	sub    esp,0xc
c000ee6a:	68 46 0a 02 c0       	push   0xc0020a46
c000ee6f:	e8 6f 01 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000ee74:	83 c4 10             	add    esp,0x10
c000ee77:	83 c4 0c             	add    esp,0xc
c000ee7a:	5b                   	pop    ebx
c000ee7b:	5e                   	pop    esi
c000ee7c:	5f                   	pop    edi
c000ee7d:	5d                   	pop    ebp
c000ee7e:	c3                   	ret    

c000ee7f <__cxa_atexit>:
c000ee7f:	31 c0                	xor    eax,eax
c000ee81:	c3                   	ret    

c000ee82 <__cxa_finalize>:
c000ee82:	c3                   	ret    

c000ee83 <__stack_chk_fail>:
c000ee83:	55                   	push   ebp
c000ee84:	89 e5                	mov    ebp,esp
c000ee86:	83 ec 10             	sub    esp,0x10
c000ee89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ee8c:	68 5f 0a 02 c0       	push   0xc0020a5f
c000ee91:	e8 4d 01 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000ee96:	58                   	pop    eax
c000ee97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ee9a:	5a                   	pop    edx
c000ee9b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ee9e:	68 5f 0a 02 c0       	push   0xc0020a5f
c000eea3:	e8 3b 01 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000eea8:	59                   	pop    ecx
c000eea9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eeac:	5a                   	pop    edx
c000eead:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeaf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eeb2:	68 5f 0a 02 c0       	push   0xc0020a5f
c000eeb7:	e8 27 01 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000eebc:	59                   	pop    ecx
c000eebd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eec0:	5a                   	pop    edx
c000eec1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eec8:	68 5f 0a 02 c0       	push   0xc0020a5f
c000eecd:	e8 11 01 00 00       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c000eed2:	c7 04 24 67 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a67
c000eed9:	e8 9a 5d 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000eede:	83 c4 10             	add    esp,0x10
c000eee1:	c9                   	leave  
c000eee2:	c3                   	ret    

c000eee3 <__cxa_pure_virtual>:
c000eee3:	83 ec 18             	sub    esp,0x18
c000eee6:	68 7f 0a 02 c0       	push   0xc0020a7f
c000eeeb:	e8 88 5d 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c000eef0:	83 c4 1c             	add    esp,0x1c
c000eef3:	c3                   	ret    

c000eef4 <operator new(unsigned long)>:
c000eef4:	e9 0d cd ff ff       	jmp    c000bc06 <malloc>

c000eef9 <operator new[](unsigned long)>:
c000eef9:	e9 08 cd ff ff       	jmp    c000bc06 <malloc>

c000eefe <operator delete(void*)>:
c000eefe:	e9 23 cd ff ff       	jmp    c000bc26 <rfree>

c000ef03 <operator delete(void*, unsigned long)>:
c000ef03:	e9 1e cd ff ff       	jmp    c000bc26 <rfree>

c000ef08 <operator delete[](void*)>:
c000ef08:	e9 19 cd ff ff       	jmp    c000bc26 <rfree>

c000ef0d <operator delete[](void*, unsigned long)>:
c000ef0d:	e9 14 cd ff ff       	jmp    c000bc26 <rfree>

c000ef12 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000ef12:	57                   	push   edi
c000ef13:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ef18:	56                   	push   esi
c000ef19:	be 94 0a 02 c0       	mov    esi,0xc0020a94
c000ef1e:	53                   	push   ebx
c000ef1f:	83 ec 40             	sub    esp,0x40
c000ef22:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ef26:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ef2a:	fc                   	cld    
c000ef2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef2d:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ef31:	83 f9 3e             	cmp    ecx,0x3e
c000ef34:	7e 05                	jle    c000ef3b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ef36:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ef3b:	89 df                	mov    edi,ebx
c000ef3d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ef41:	eb 02                	jmp    c000ef45 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ef43:	89 c7                	mov    edi,eax
c000ef45:	31 d2                	xor    edx,edx
c000ef47:	46                   	inc    esi
c000ef48:	89 f8                	mov    eax,edi
c000ef4a:	f7 f1                	div    ecx
c000ef4c:	39 cf                	cmp    edi,ecx
c000ef4e:	73 f3                	jae    c000ef43 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ef50:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ef53:	eb 02                	jmp    c000ef57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ef55:	89 c3                	mov    ebx,eax
c000ef57:	31 d2                	xor    edx,edx
c000ef59:	4e                   	dec    esi
c000ef5a:	89 d8                	mov    eax,ebx
c000ef5c:	f7 f1                	div    ecx
c000ef5e:	39 cb                	cmp    ebx,ecx
c000ef60:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ef64:	88 16                	mov    BYTE PTR [esi],dl
c000ef66:	73 ed                	jae    c000ef55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ef68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef6c:	83 c4 40             	add    esp,0x40
c000ef6f:	5b                   	pop    ebx
c000ef70:	5e                   	pop    esi
c000ef71:	5f                   	pop    edi
c000ef72:	c3                   	ret    

c000ef73 <Dbg::logc(char)>:
c000ef73:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef77:	ba fd 03 00 00       	mov    edx,0x3fd
c000ef7c:	ec                   	in     al,dx
c000ef7d:	a8 20                	test   al,0x20
c000ef7f:	74 fb                	je     c000ef7c <Dbg::logc(char)+0x9>
c000ef81:	ba f8 03 00 00       	mov    edx,0x3f8
c000ef86:	88 c8                	mov    al,cl
c000ef88:	ee                   	out    dx,al
c000ef89:	c3                   	ret    

c000ef8a <Dbg::logs(char*)>:
c000ef8a:	53                   	push   ebx
c000ef8b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ef8f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ef92:	84 c0                	test   al,al
c000ef94:	74 0f                	je     c000efa5 <Dbg::logs(char*)+0x1b>
c000ef96:	50                   	push   eax
c000ef97:	43                   	inc    ebx
c000ef98:	e8 d6 ff ff ff       	call   c000ef73 <Dbg::logc(char)>
c000ef9d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000efa0:	5a                   	pop    edx
c000efa1:	84 c0                	test   al,al
c000efa3:	75 f1                	jne    c000ef96 <Dbg::logs(char*)+0xc>
c000efa5:	5b                   	pop    ebx
c000efa6:	c3                   	ret    

c000efa7 <Dbg::logWriteInt(unsigned int)>:
c000efa7:	83 ec 10             	sub    esp,0x10
c000efaa:	6a 0a                	push   0xa
c000efac:	8d 44 24 08          	lea    eax,[esp+0x8]
c000efb0:	50                   	push   eax
c000efb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efb5:	e8 58 ff ff ff       	call   c000ef12 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000efba:	50                   	push   eax
c000efbb:	e8 ca ff ff ff       	call   c000ef8a <Dbg::logs(char*)>
c000efc0:	83 c4 20             	add    esp,0x20
c000efc3:	c3                   	ret    

c000efc4 <Dbg::logWriteIntBase(unsigned int, int)>:
c000efc4:	83 ec 10             	sub    esp,0x10
c000efc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efcb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000efcf:	50                   	push   eax
c000efd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000efd4:	e8 39 ff ff ff       	call   c000ef12 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000efd9:	50                   	push   eax
c000efda:	e8 ab ff ff ff       	call   c000ef8a <Dbg::logs(char*)>
c000efdf:	83 c4 20             	add    esp,0x20
c000efe2:	c3                   	ret    

c000efe3 <Dbg::kprintf(char const*, ...)>:
c000efe3:	55                   	push   ebp
c000efe4:	57                   	push   edi
c000efe5:	56                   	push   esi
c000efe6:	53                   	push   ebx
c000efe7:	83 ec 0c             	sub    esp,0xc
c000efea:	8d 44 24 24          	lea    eax,[esp+0x24]
c000efee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eff6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000eff9:	84 c0                	test   al,al
c000effb:	74 4a                	je     c000f047 <Dbg::kprintf(char const*, ...)+0x64>
c000effd:	31 db                	xor    ebx,ebx
c000efff:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000f002:	3c 25                	cmp    al,0x25
c000f004:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000f007:	0f 85 e4 00 00 00    	jne    c000f0f1 <Dbg::kprintf(char const*, ...)+0x10e>
c000f00d:	83 c3 02             	add    ebx,0x2
c000f010:	8a 07                	mov    al,BYTE PTR [edi]
c000f012:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000f015:	83 e8 25             	sub    eax,0x25
c000f018:	3c 53                	cmp    al,0x53
c000f01a:	0f 87 ba 00 00 00    	ja     c000f0da <Dbg::kprintf(char const*, ...)+0xf7>
c000f020:	0f b6 c0             	movzx  eax,al
c000f023:	ff 24 85 d4 0a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf52c]
c000f02a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f02e:	89 c8                	mov    eax,ecx
c000f030:	83 c1 04             	add    ecx,0x4
c000f033:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f037:	ff 30                	push   DWORD PTR [eax]
c000f039:	e8 4c ff ff ff       	call   c000ef8a <Dbg::logs(char*)>
c000f03e:	58                   	pop    eax
c000f03f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f043:	84 c0                	test   al,al
c000f045:	75 b8                	jne    c000efff <Dbg::kprintf(char const*, ...)+0x1c>
c000f047:	83 c4 0c             	add    esp,0xc
c000f04a:	5b                   	pop    ebx
c000f04b:	5e                   	pop    esi
c000f04c:	5f                   	pop    edi
c000f04d:	5d                   	pop    ebp
c000f04e:	c3                   	ret    
c000f04f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f053:	89 d0                	mov    eax,edx
c000f055:	83 c2 04             	add    edx,0x4
c000f058:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f05c:	ff 30                	push   DWORD PTR [eax]
c000f05e:	e8 44 ff ff ff       	call   c000efa7 <Dbg::logWriteInt(unsigned int)>
c000f063:	58                   	pop    eax
c000f064:	eb d9                	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f066:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f06a:	89 d0                	mov    eax,edx
c000f06c:	83 c2 04             	add    edx,0x4
c000f06f:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f072:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f076:	50                   	push   eax
c000f077:	e8 f7 fe ff ff       	call   c000ef73 <Dbg::logc(char)>
c000f07c:	58                   	pop    eax
c000f07d:	eb c0                	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f07f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f083:	89 c8                	mov    eax,ecx
c000f085:	83 c1 04             	add    ecx,0x4
c000f088:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f08c:	ff 30                	push   DWORD PTR [eax]
c000f08e:	e8 14 ff ff ff       	call   c000efa7 <Dbg::logWriteInt(unsigned int)>
c000f093:	5f                   	pop    edi
c000f094:	eb a9                	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f096:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f09a:	89 c8                	mov    eax,ecx
c000f09c:	83 c1 04             	add    ecx,0x4
c000f09f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f0a3:	6a 10                	push   0x10
c000f0a5:	ff 30                	push   DWORD PTR [eax]
c000f0a7:	e8 18 ff ff ff       	call   c000efc4 <Dbg::logWriteIntBase(unsigned int, int)>
c000f0ac:	59                   	pop    ecx
c000f0ad:	5f                   	pop    edi
c000f0ae:	eb 8f                	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0b4:	89 d0                	mov    eax,edx
c000f0b6:	83 c2 08             	add    edx,0x8
c000f0b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0bd:	6a 10                	push   0x10
c000f0bf:	ff 30                	push   DWORD PTR [eax]
c000f0c1:	e8 fe fe ff ff       	call   c000efc4 <Dbg::logWriteIntBase(unsigned int, int)>
c000f0c6:	58                   	pop    eax
c000f0c7:	5a                   	pop    edx
c000f0c8:	e9 72 ff ff ff       	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0cd:	6a 25                	push   0x25
c000f0cf:	e8 9f fe ff ff       	call   c000ef73 <Dbg::logc(char)>
c000f0d4:	58                   	pop    eax
c000f0d5:	e9 65 ff ff ff       	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0da:	6a 25                	push   0x25
c000f0dc:	e8 92 fe ff ff       	call   c000ef73 <Dbg::logc(char)>
c000f0e1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f0e4:	50                   	push   eax
c000f0e5:	e8 89 fe ff ff       	call   c000ef73 <Dbg::logc(char)>
c000f0ea:	5a                   	pop    edx
c000f0eb:	59                   	pop    ecx
c000f0ec:	e9 4e ff ff ff       	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f0f1:	50                   	push   eax
c000f0f2:	89 eb                	mov    ebx,ebp
c000f0f4:	e8 7a fe ff ff       	call   c000ef73 <Dbg::logc(char)>
c000f0f9:	89 fd                	mov    ebp,edi
c000f0fb:	58                   	pop    eax
c000f0fc:	e9 3e ff ff ff       	jmp    c000f03f <Dbg::kprintf(char const*, ...)+0x5c>
c000f101:	90                   	nop

c000f102 <File::read(unsigned long long, void*, int*)>:
c000f102:	53                   	push   ebx
c000f103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f107:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f10b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f112:	3c 19                	cmp    al,0x19
c000f114:	77 35                	ja     c000f14b <File::read(unsigned long long, void*, int*)+0x49>
c000f116:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c000f11d:	85 c0                	test   eax,eax
c000f11f:	74 2a                	je     c000f14b <File::read(unsigned long long, void*, int*)+0x49>
c000f121:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f127:	85 c0                	test   eax,eax
c000f129:	74 20                	je     c000f14b <File::read(unsigned long long, void*, int*)+0x49>
c000f12b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f12f:	74 21                	je     c000f152 <File::read(unsigned long long, void*, int*)+0x50>
c000f131:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f133:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f137:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f13d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f141:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f145:	5b                   	pop    ebx
c000f146:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f149:	ff e0                	jmp    eax
c000f14b:	b8 0b 00 00 00       	mov    eax,0xb
c000f150:	eb 05                	jmp    c000f157 <File::read(unsigned long long, void*, int*)+0x55>
c000f152:	b8 05 00 00 00       	mov    eax,0x5
c000f157:	5b                   	pop    ebx
c000f158:	c3                   	ret    
c000f159:	90                   	nop

c000f15a <File::write(unsigned long long, void*, int*)>:
c000f15a:	53                   	push   ebx
c000f15b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f15f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f163:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f16a:	3c 19                	cmp    al,0x19
c000f16c:	77 35                	ja     c000f1a3 <File::write(unsigned long long, void*, int*)+0x49>
c000f16e:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c000f175:	85 c0                	test   eax,eax
c000f177:	74 2a                	je     c000f1a3 <File::write(unsigned long long, void*, int*)+0x49>
c000f179:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f17f:	85 c0                	test   eax,eax
c000f181:	74 20                	je     c000f1a3 <File::write(unsigned long long, void*, int*)+0x49>
c000f183:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f187:	74 21                	je     c000f1aa <File::write(unsigned long long, void*, int*)+0x50>
c000f189:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f18b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f18f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f19d:	5b                   	pop    ebx
c000f19e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f1a1:	ff e0                	jmp    eax
c000f1a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f1a8:	eb 05                	jmp    c000f1af <File::write(unsigned long long, void*, int*)+0x55>
c000f1aa:	b8 05 00 00 00       	mov    eax,0x5
c000f1af:	5b                   	pop    ebx
c000f1b0:	c3                   	ret    
c000f1b1:	90                   	nop

c000f1b2 <Directory::read(unsigned long long, void*, int*)>:
c000f1b2:	53                   	push   ebx
c000f1b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1bb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f1c2:	3c 19                	cmp    al,0x19
c000f1c4:	77 35                	ja     c000f1fb <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1c6:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c000f1cd:	85 c0                	test   eax,eax
c000f1cf:	74 2a                	je     c000f1fb <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f1d7:	85 c0                	test   eax,eax
c000f1d9:	74 20                	je     c000f1fb <Directory::read(unsigned long long, void*, int*)+0x49>
c000f1db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f1df:	74 21                	je     c000f202 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f1e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f1e7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f1ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f1f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f1f5:	5b                   	pop    ebx
c000f1f6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f1f9:	ff e0                	jmp    eax
c000f1fb:	b8 0b 00 00 00       	mov    eax,0xb
c000f200:	eb 05                	jmp    c000f207 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f202:	b8 05 00 00 00       	mov    eax,0x5
c000f207:	5b                   	pop    ebx
c000f208:	c3                   	ret    
c000f209:	90                   	nop

c000f20a <Directory::write(unsigned long long, void*, int*)>:
c000f20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f20e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f215:	b8 0b 00 00 00       	mov    eax,0xb
c000f21a:	80 fa 19             	cmp    dl,0x19
c000f21d:	77 18                	ja     c000f237 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f21f:	8b 14 95 40 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2c0]
c000f226:	85 d2                	test   edx,edx
c000f228:	74 0d                	je     c000f237 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f22a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f231:	19 c0                	sbb    eax,eax
c000f233:	83 e0 0a             	and    eax,0xa
c000f236:	40                   	inc    eax
c000f237:	c3                   	ret    

c000f238 <File::isAtty()>:
c000f238:	31 c0                	xor    eax,eax
c000f23a:	c3                   	ret    
c000f23b:	90                   	nop

c000f23c <Directory::isAtty()>:
c000f23c:	31 c0                	xor    eax,eax
c000f23e:	c3                   	ret    
c000f23f:	90                   	nop

c000f240 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f240:	b8 0a 00 00 00       	mov    eax,0xa
c000f245:	c3                   	ret    

c000f246 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f246:	b8 0a 00 00 00       	mov    eax,0xa
c000f24b:	c3                   	ret    

c000f24c <File::~File()>:
c000f24c:	83 ec 0c             	sub    esp,0xc
c000f24f:	ba 90 0c 02 c0       	mov    edx,0xc0020c90
c000f254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f258:	89 10                	mov    DWORD PTR [eax],edx
c000f25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f25e:	83 ec 0c             	sub    esp,0xc
c000f261:	50                   	push   eax
c000f262:	e8 6d e8 ff ff       	call   c000dad4 <UnixFile::~UnixFile()>
c000f267:	83 c4 10             	add    esp,0x10
c000f26a:	90                   	nop
c000f26b:	83 c4 0c             	add    esp,0xc
c000f26e:	c3                   	ret    
c000f26f:	90                   	nop

c000f270 <File::~File()>:
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	83 ec 0c             	sub    esp,0xc
c000f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f27a:	e8 cd ff ff ff       	call   c000f24c <File::~File()>
c000f27f:	83 c4 10             	add    esp,0x10
c000f282:	83 ec 08             	sub    esp,0x8
c000f285:	68 14 01 00 00       	push   0x114
c000f28a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f28e:	e8 70 fc ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c000f293:	83 c4 10             	add    esp,0x10
c000f296:	83 c4 0c             	add    esp,0xc
c000f299:	c3                   	ret    

c000f29a <Directory::~Directory()>:
c000f29a:	83 ec 0c             	sub    esp,0xc
c000f29d:	ba ac 0c 02 c0       	mov    edx,0xc0020cac
c000f2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a6:	89 10                	mov    DWORD PTR [eax],edx
c000f2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ac:	83 ec 0c             	sub    esp,0xc
c000f2af:	50                   	push   eax
c000f2b0:	e8 1f e8 ff ff       	call   c000dad4 <UnixFile::~UnixFile()>
c000f2b5:	83 c4 10             	add    esp,0x10
c000f2b8:	90                   	nop
c000f2b9:	83 c4 0c             	add    esp,0xc
c000f2bc:	c3                   	ret    
c000f2bd:	90                   	nop

c000f2be <Directory::~Directory()>:
c000f2be:	83 ec 0c             	sub    esp,0xc
c000f2c1:	83 ec 0c             	sub    esp,0xc
c000f2c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2c8:	e8 cd ff ff ff       	call   c000f29a <Directory::~Directory()>
c000f2cd:	83 c4 10             	add    esp,0x10
c000f2d0:	83 ec 08             	sub    esp,0x8
c000f2d3:	68 14 01 00 00       	push   0x114
c000f2d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2dc:	e8 22 fc ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c000f2e1:	83 c4 10             	add    esp,0x10
c000f2e4:	83 c4 0c             	add    esp,0xc
c000f2e7:	c3                   	ret    

c000f2e8 <Filesystem::Filesystem()>:
c000f2e8:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c000f2ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2f1:	89 10                	mov    DWORD PTR [eax],edx
c000f2f3:	8b 15 a8 38 02 c0    	mov    edx,DWORD PTR ds:0xc00238a8
c000f2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f304:	a3 a8 38 02 c0       	mov    ds:0xc00238a8,eax
c000f309:	90                   	nop
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <Filesystem::~Filesystem()>:
c000f30c:	ba 2c 0c 02 c0       	mov    edx,0xc0020c2c
c000f311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f315:	89 10                	mov    DWORD PTR [eax],edx
c000f317:	90                   	nop
c000f318:	c3                   	ret    
c000f319:	90                   	nop

c000f31a <Filesystem::~Filesystem()>:
c000f31a:	83 ec 0c             	sub    esp,0xc
c000f31d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f321:	e8 e6 ff ff ff       	call   c000f30c <Filesystem::~Filesystem()>
c000f326:	83 c4 04             	add    esp,0x4
c000f329:	83 ec 08             	sub    esp,0x8
c000f32c:	6a 08                	push   0x8
c000f32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f332:	e8 cc fb ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c000f337:	83 c4 10             	add    esp,0x10
c000f33a:	83 c4 0c             	add    esp,0xc
c000f33d:	c3                   	ret    

c000f33e <initVFS()>:
c000f33e:	83 ec 18             	sub    esp,0x18
c000f341:	6a 08                	push   0x8
c000f343:	e8 ac fb ff ff       	call   c000eef4 <operator new(unsigned long)>
c000f348:	89 04 24             	mov    DWORD PTR [esp],eax
c000f34b:	e8 46 a9 00 00       	call   c0019c96 <FAT::FAT()>
c000f350:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f357:	e8 98 fb ff ff       	call   c000eef4 <operator new(unsigned long)>
c000f35c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f35f:	e8 a8 bb 00 00       	call   c001af0c <ISO9660::ISO9660()>
c000f364:	83 c4 1c             	add    esp,0x1c
c000f367:	c3                   	ret    

c000f368 <standardiseFiles(char*, char const*, char const*)>:
c000f368:	55                   	push   ebp
c000f369:	57                   	push   edi
c000f36a:	56                   	push   esi
c000f36b:	53                   	push   ebx
c000f36c:	81 ec 10 04 00 00    	sub    esp,0x410
c000f372:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f379:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f380:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f387:	68 00 04 00 00       	push   0x400
c000f38c:	6a 00                	push   0x0
c000f38e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f392:	56                   	push   esi
c000f393:	e8 70 12 ff ff       	call   c0000608 <memset>
c000f398:	83 c4 10             	add    esp,0x10
c000f39b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f39f:	75 0b                	jne    c000f3ac <standardiseFiles(char*, char const*, char const*)+0x44>
c000f3a1:	50                   	push   eax
c000f3a2:	50                   	push   eax
c000f3a3:	57                   	push   edi
c000f3a4:	56                   	push   esi
c000f3a5:	e8 fd 12 ff ff       	call   c00006a7 <strcpy>
c000f3aa:	eb 41                	jmp    c000f3ed <standardiseFiles(char*, char const*, char const*)+0x85>
c000f3ac:	8a 07                	mov    al,BYTE PTR [edi]
c000f3ae:	3c 5c                	cmp    al,0x5c
c000f3b0:	74 04                	je     c000f3b6 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f3b2:	3c 2f                	cmp    al,0x2f
c000f3b4:	75 18                	jne    c000f3ce <standardiseFiles(char*, char const*, char const*)+0x66>
c000f3b6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f3b9:	3c 60                	cmp    al,0x60
c000f3bb:	7e 03                	jle    c000f3c0 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f3bd:	83 e8 20             	sub    eax,0x20
c000f3c0:	88 04 24             	mov    BYTE PTR [esp],al
c000f3c3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f3ca:	50                   	push   eax
c000f3cb:	50                   	push   eax
c000f3cc:	eb 18                	jmp    c000f3e6 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f3ce:	50                   	push   eax
c000f3cf:	50                   	push   eax
c000f3d0:	55                   	push   ebp
c000f3d1:	56                   	push   esi
c000f3d2:	e8 d0 12 ff ff       	call   c00006a7 <strcpy>
c000f3d7:	5a                   	pop    edx
c000f3d8:	59                   	pop    ecx
c000f3d9:	68 d4 1d 02 c0       	push   0xc0021dd4
c000f3de:	56                   	push   esi
c000f3df:	e8 7a 13 ff ff       	call   c000075e <strcat>
c000f3e4:	5d                   	pop    ebp
c000f3e5:	58                   	pop    eax
c000f3e6:	57                   	push   edi
c000f3e7:	56                   	push   esi
c000f3e8:	e8 71 13 ff ff       	call   c000075e <strcat>
c000f3ed:	83 c4 10             	add    esp,0x10
c000f3f0:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f3f3:	3c 60                	cmp    al,0x60
c000f3f5:	7e 03                	jle    c000f3fa <standardiseFiles(char*, char const*, char const*)+0x92>
c000f3f7:	83 e8 20             	sub    eax,0x20
c000f3fa:	88 04 24             	mov    BYTE PTR [esp],al
c000f3fd:	88 03                	mov    BYTE PTR [ebx],al
c000f3ff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f406:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f40c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f410:	bf 03 00 00 00       	mov    edi,0x3
c000f415:	b8 03 00 00 00       	mov    eax,0x3
c000f41a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f41d:	84 d2                	test   dl,dl
c000f41f:	0f 84 91 00 00 00    	je     c000f4b6 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f425:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f428:	80 fa 5c             	cmp    dl,0x5c
c000f42b:	74 05                	je     c000f432 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f42d:	80 fa 2f             	cmp    dl,0x2f
c000f430:	75 12                	jne    c000f444 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f432:	89 c5                	mov    ebp,eax
c000f434:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f439:	74 09                	je     c000f444 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f43b:	40                   	inc    eax
c000f43c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f440:	89 cf                	mov    edi,ecx
c000f442:	eb d6                	jmp    c000f41a <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f444:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f449:	75 5b                	jne    c000f4a6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f44b:	80 fa 2e             	cmp    dl,0x2e
c000f44e:	75 56                	jne    c000f4a6 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f450:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f454:	74 19                	je     c000f46f <standardiseFiles(char*, char const*, char const*)+0x107>
c000f456:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f45b:	74 53                	je     c000f4b0 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f45d:	89 f9                	mov    ecx,edi
c000f45f:	41                   	inc    ecx
c000f460:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f463:	80 fa 2f             	cmp    dl,0x2f
c000f466:	74 f7                	je     c000f45f <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f468:	80 fa 5c             	cmp    dl,0x5c
c000f46b:	74 f2                	je     c000f45f <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f46d:	eb d1                	jmp    c000f440 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f46f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f474:	74 3a                	je     c000f4b0 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f476:	83 f8 03             	cmp    eax,0x3
c000f479:	74 c5                	je     c000f440 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f47b:	41                   	inc    ecx
c000f47c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f47f:	80 fa 2f             	cmp    dl,0x2f
c000f482:	74 f7                	je     c000f47b <standardiseFiles(char*, char const*, char const*)+0x113>
c000f484:	80 fa 5c             	cmp    dl,0x5c
c000f487:	74 f2                	je     c000f47b <standardiseFiles(char*, char const*, char const*)+0x113>
c000f489:	48                   	dec    eax
c000f48a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f48e:	75 06                	jne    c000f496 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f490:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f494:	eb f3                	jmp    c000f489 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f496:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f49a:	74 07                	je     c000f4a3 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f49c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4a0:	48                   	dec    eax
c000f4a1:	eb f3                	jmp    c000f496 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f4a3:	40                   	inc    eax
c000f4a4:	eb 9a                	jmp    c000f440 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4a6:	80 fa 2f             	cmp    dl,0x2f
c000f4a9:	74 95                	je     c000f440 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4ab:	80 fa 5c             	cmp    dl,0x5c
c000f4ae:	74 90                	je     c000f440 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4b0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f4b3:	40                   	inc    eax
c000f4b4:	eb 8a                	jmp    c000f440 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f4b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f4ba:	83 ec 0c             	sub    esp,0xc
c000f4bd:	53                   	push   ebx
c000f4be:	e8 62 11 ff ff       	call   c0000625 <strlen>
c000f4c3:	83 c4 10             	add    esp,0x10
c000f4c6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f4cb:	75 26                	jne    c000f4f3 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f4cd:	83 ec 0c             	sub    esp,0xc
c000f4d0:	53                   	push   ebx
c000f4d1:	e8 4f 11 ff ff       	call   c0000625 <strlen>
c000f4d6:	83 c4 10             	add    esp,0x10
c000f4d9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f4de:	74 26                	je     c000f506 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f4e0:	83 ec 0c             	sub    esp,0xc
c000f4e3:	53                   	push   ebx
c000f4e4:	e8 3c 11 ff ff       	call   c0000625 <strlen>
c000f4e9:	83 c4 10             	add    esp,0x10
c000f4ec:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f4f1:	eb c7                	jmp    c000f4ba <standardiseFiles(char*, char const*, char const*)+0x152>
c000f4f3:	83 ec 0c             	sub    esp,0xc
c000f4f6:	53                   	push   ebx
c000f4f7:	e8 29 11 ff ff       	call   c0000625 <strlen>
c000f4fc:	83 c4 10             	add    esp,0x10
c000f4ff:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f504:	74 c7                	je     c000f4cd <standardiseFiles(char*, char const*, char const*)+0x165>
c000f506:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f50c:	5b                   	pop    ebx
c000f50d:	5e                   	pop    esi
c000f50e:	5f                   	pop    edi
c000f50f:	5d                   	pop    ebp
c000f510:	c3                   	ret    
c000f511:	90                   	nop

c000f512 <File::File(char const*, Process*)>:
c000f512:	83 ec 0c             	sub    esp,0xc
c000f515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f519:	83 ec 08             	sub    esp,0x8
c000f51c:	6a 00                	push   0x0
c000f51e:	50                   	push   eax
c000f51f:	e8 0e e4 ff ff       	call   c000d932 <UnixFile::UnixFile(int)>
c000f524:	83 c4 10             	add    esp,0x10
c000f527:	ba 90 0c 02 c0       	mov    edx,0xc0020c90
c000f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f530:	89 10                	mov    DWORD PTR [eax],edx
c000f532:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f536:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f540:	83 c0 0d             	add    eax,0xd
c000f543:	83 ec 04             	sub    esp,0x4
c000f546:	52                   	push   edx
c000f547:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f54b:	50                   	push   eax
c000f54c:	e8 17 fe ff ff       	call   c000f368 <standardiseFiles(char*, char const*, char const*)>
c000f551:	83 c4 10             	add    esp,0x10
c000f554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f558:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f55b:	8d 50 bf             	lea    edx,[eax-0x41]
c000f55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f562:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f56c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f570:	90                   	nop
c000f571:	83 c4 0c             	add    esp,0xc
c000f574:	c3                   	ret    
c000f575:	90                   	nop

c000f576 <File::open(FileOpenMode)>:
c000f576:	53                   	push   ebx
c000f577:	b8 0b 00 00 00       	mov    eax,0xb
c000f57c:	83 ec 08             	sub    esp,0x8
c000f57f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f583:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f58a:	80 fa 19             	cmp    dl,0x19
c000f58d:	77 40                	ja     c000f5cf <File::open(FileOpenMode)+0x59>
c000f58f:	8b 14 95 40 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2c0]
c000f596:	85 d2                	test   edx,edx
c000f598:	74 35                	je     c000f5cf <File::open(FileOpenMode)+0x59>
c000f59a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f5a0:	85 d2                	test   edx,edx
c000f5a2:	74 2b                	je     c000f5cf <File::open(FileOpenMode)+0x59>
c000f5a4:	b8 06 00 00 00       	mov    eax,0x6
c000f5a9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f5ad:	75 20                	jne    c000f5cf <File::open(FileOpenMode)+0x59>
c000f5af:	8b 02                	mov    eax,DWORD PTR [edx]
c000f5b1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f5b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f5bb:	51                   	push   ecx
c000f5bc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f5bf:	51                   	push   ecx
c000f5c0:	52                   	push   edx
c000f5c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f5c4:	83 c4 10             	add    esp,0x10
c000f5c7:	85 c0                	test   eax,eax
c000f5c9:	75 04                	jne    c000f5cf <File::open(FileOpenMode)+0x59>
c000f5cb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f5cf:	83 c4 08             	add    esp,0x8
c000f5d2:	5b                   	pop    ebx
c000f5d3:	c3                   	ret    

c000f5d4 <File::close()>:
c000f5d4:	53                   	push   ebx
c000f5d5:	b8 0b 00 00 00       	mov    eax,0xb
c000f5da:	83 ec 08             	sub    esp,0x8
c000f5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f5e1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f5e8:	80 fa 19             	cmp    dl,0x19
c000f5eb:	77 41                	ja     c000f62e <File::close()+0x5a>
c000f5ed:	8b 1c 95 40 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc2c0]
c000f5f4:	85 db                	test   ebx,ebx
c000f5f6:	74 36                	je     c000f62e <File::close()+0x5a>
c000f5f8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f5ff:	74 2d                	je     c000f62e <File::close()+0x5a>
c000f601:	b8 05 00 00 00       	mov    eax,0x5
c000f606:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f60a:	74 22                	je     c000f62e <File::close()+0x5a>
c000f60c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f610:	8b 04 95 40 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc2c0]
c000f617:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f61d:	53                   	push   ebx
c000f61e:	53                   	push   ebx
c000f61f:	8b 10                	mov    edx,DWORD PTR [eax]
c000f621:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f627:	50                   	push   eax
c000f628:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f62b:	83 c4 10             	add    esp,0x10
c000f62e:	83 c4 08             	add    esp,0x8
c000f631:	5b                   	pop    ebx
c000f632:	c3                   	ret    
c000f633:	90                   	nop

c000f634 <File::seek(unsigned long long)>:
c000f634:	56                   	push   esi
c000f635:	53                   	push   ebx
c000f636:	b8 0b 00 00 00       	mov    eax,0xb
c000f63b:	51                   	push   ecx
c000f63c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f640:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f644:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f64b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f64f:	80 fa 19             	cmp    dl,0x19
c000f652:	77 31                	ja     c000f685 <File::seek(unsigned long long)+0x51>
c000f654:	8b 14 95 40 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2c0]
c000f65b:	85 d2                	test   edx,edx
c000f65d:	74 26                	je     c000f685 <File::seek(unsigned long long)+0x51>
c000f65f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f665:	85 d2                	test   edx,edx
c000f667:	74 1c                	je     c000f685 <File::seek(unsigned long long)+0x51>
c000f669:	b8 05 00 00 00       	mov    eax,0x5
c000f66e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f672:	74 11                	je     c000f685 <File::seek(unsigned long long)+0x51>
c000f674:	8b 02                	mov    eax,DWORD PTR [edx]
c000f676:	53                   	push   ebx
c000f677:	51                   	push   ecx
c000f678:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f67e:	52                   	push   edx
c000f67f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f682:	83 c4 10             	add    esp,0x10
c000f685:	5a                   	pop    edx
c000f686:	5b                   	pop    ebx
c000f687:	5e                   	pop    esi
c000f688:	c3                   	ret    
c000f689:	90                   	nop

c000f68a <File::tell(unsigned long long*)>:
c000f68a:	83 ec 0c             	sub    esp,0xc
c000f68d:	b8 0b 00 00 00       	mov    eax,0xb
c000f692:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f696:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f69d:	80 fa 19             	cmp    dl,0x19
c000f6a0:	77 34                	ja     c000f6d6 <File::tell(unsigned long long*)+0x4c>
c000f6a2:	8b 14 95 40 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2c0]
c000f6a9:	85 d2                	test   edx,edx
c000f6ab:	74 29                	je     c000f6d6 <File::tell(unsigned long long*)+0x4c>
c000f6ad:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6b3:	85 d2                	test   edx,edx
c000f6b5:	74 1f                	je     c000f6d6 <File::tell(unsigned long long*)+0x4c>
c000f6b7:	b8 05 00 00 00       	mov    eax,0x5
c000f6bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f6c0:	74 14                	je     c000f6d6 <File::tell(unsigned long long*)+0x4c>
c000f6c2:	50                   	push   eax
c000f6c3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f6c9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f6cf:	52                   	push   edx
c000f6d0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f6d3:	83 c4 10             	add    esp,0x10
c000f6d6:	83 c4 0c             	add    esp,0xc
c000f6d9:	c3                   	ret    

c000f6da <File::rewind()>:
c000f6da:	83 ec 10             	sub    esp,0x10
c000f6dd:	6a 00                	push   0x0
c000f6df:	6a 00                	push   0x0
c000f6e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6e5:	e8 4a ff ff ff       	call   c000f634 <File::seek(unsigned long long)>
c000f6ea:	83 c4 1c             	add    esp,0x1c
c000f6ed:	c3                   	ret    

c000f6ee <File::unlink()>:
c000f6ee:	83 ec 0c             	sub    esp,0xc
c000f6f1:	b8 0b 00 00 00       	mov    eax,0xb
c000f6f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f6fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f701:	80 f9 19             	cmp    cl,0x19
c000f704:	77 2f                	ja     c000f735 <File::unlink()+0x47>
c000f706:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000f70d:	85 c9                	test   ecx,ecx
c000f70f:	74 24                	je     c000f735 <File::unlink()+0x47>
c000f711:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f717:	85 c9                	test   ecx,ecx
c000f719:	74 1a                	je     c000f735 <File::unlink()+0x47>
c000f71b:	b8 06 00 00 00       	mov    eax,0x6
c000f720:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f724:	75 0f                	jne    c000f735 <File::unlink()+0x47>
c000f726:	83 c2 0d             	add    edx,0xd
c000f729:	50                   	push   eax
c000f72a:	50                   	push   eax
c000f72b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f72d:	52                   	push   edx
c000f72e:	51                   	push   ecx
c000f72f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f732:	83 c4 10             	add    esp,0x10
c000f735:	83 c4 0c             	add    esp,0xc
c000f738:	c3                   	ret    
c000f739:	90                   	nop

c000f73a <File::rename(char const*)>:
c000f73a:	83 ec 0c             	sub    esp,0xc
c000f73d:	b8 0b 00 00 00       	mov    eax,0xb
c000f742:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f746:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f74d:	80 f9 19             	cmp    cl,0x19
c000f750:	77 32                	ja     c000f784 <File::rename(char const*)+0x4a>
c000f752:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000f759:	85 c9                	test   ecx,ecx
c000f75b:	74 27                	je     c000f784 <File::rename(char const*)+0x4a>
c000f75d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f763:	85 c9                	test   ecx,ecx
c000f765:	74 1d                	je     c000f784 <File::rename(char const*)+0x4a>
c000f767:	b8 06 00 00 00       	mov    eax,0x6
c000f76c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f770:	75 12                	jne    c000f784 <File::rename(char const*)+0x4a>
c000f772:	83 c2 0d             	add    edx,0xd
c000f775:	50                   	push   eax
c000f776:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f778:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f77c:	52                   	push   edx
c000f77d:	51                   	push   ecx
c000f77e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f781:	83 c4 10             	add    esp,0x10
c000f784:	83 c4 0c             	add    esp,0xc
c000f787:	c3                   	ret    

c000f788 <File::chfatattr(unsigned char, unsigned char)>:
c000f788:	57                   	push   edi
c000f789:	b8 0b 00 00 00       	mov    eax,0xb
c000f78e:	56                   	push   esi
c000f78f:	53                   	push   ebx
c000f790:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f794:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f798:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f79f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f7a3:	80 f9 19             	cmp    cl,0x19
c000f7a6:	77 37                	ja     c000f7df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7a8:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000f7af:	85 c9                	test   ecx,ecx
c000f7b1:	74 2c                	je     c000f7df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f7b9:	85 c9                	test   ecx,ecx
c000f7bb:	74 22                	je     c000f7df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7bd:	b8 06 00 00 00       	mov    eax,0x6
c000f7c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f7c6:	75 17                	jne    c000f7df <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f7c8:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f7ca:	89 f0                	mov    eax,esi
c000f7cc:	83 c2 0d             	add    edx,0xd
c000f7cf:	0f b6 f0             	movzx  esi,al
c000f7d2:	0f b6 db             	movzx  ebx,bl
c000f7d5:	56                   	push   esi
c000f7d6:	53                   	push   ebx
c000f7d7:	52                   	push   edx
c000f7d8:	51                   	push   ecx
c000f7d9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	5b                   	pop    ebx
c000f7e0:	5e                   	pop    esi
c000f7e1:	5f                   	pop    edi
c000f7e2:	c3                   	ret    
c000f7e3:	90                   	nop

c000f7e4 <File::exists()>:
c000f7e4:	83 ec 0c             	sub    esp,0xc
c000f7e7:	31 c0                	xor    eax,eax
c000f7e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f7ed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f7f4:	80 f9 19             	cmp    cl,0x19
c000f7f7:	77 24                	ja     c000f81d <File::exists()+0x39>
c000f7f9:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000f800:	85 c9                	test   ecx,ecx
c000f802:	74 19                	je     c000f81d <File::exists()+0x39>
c000f804:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f80a:	85 c9                	test   ecx,ecx
c000f80c:	74 0f                	je     c000f81d <File::exists()+0x39>
c000f80e:	83 c2 0d             	add    edx,0xd
c000f811:	50                   	push   eax
c000f812:	50                   	push   eax
c000f813:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f815:	52                   	push   edx
c000f816:	51                   	push   ecx
c000f817:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f81a:	83 c4 10             	add    esp,0x10
c000f81d:	83 c4 0c             	add    esp,0xc
c000f820:	c3                   	ret    
c000f821:	90                   	nop

c000f822 <File::stat(unsigned long long*, bool*)>:
c000f822:	56                   	push   esi
c000f823:	53                   	push   ebx
c000f824:	50                   	push   eax
c000f825:	b8 0b 00 00 00       	mov    eax,0xb
c000f82a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f82e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f832:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f839:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f83d:	80 f9 19             	cmp    cl,0x19
c000f840:	77 3d                	ja     c000f87f <File::stat(unsigned long long*, bool*)+0x5d>
c000f842:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000f849:	85 c9                	test   ecx,ecx
c000f84b:	74 32                	je     c000f87f <File::stat(unsigned long long*, bool*)+0x5d>
c000f84d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f853:	85 c9                	test   ecx,ecx
c000f855:	74 28                	je     c000f87f <File::stat(unsigned long long*, bool*)+0x5d>
c000f857:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f859:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f85d:	74 13                	je     c000f872 <File::stat(unsigned long long*, bool*)+0x50>
c000f85f:	83 ec 04             	sub    esp,0x4
c000f862:	56                   	push   esi
c000f863:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f869:	51                   	push   ecx
c000f86a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f86d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f870:	eb 0a                	jmp    c000f87c <File::stat(unsigned long long*, bool*)+0x5a>
c000f872:	53                   	push   ebx
c000f873:	83 c2 0d             	add    edx,0xd
c000f876:	56                   	push   esi
c000f877:	52                   	push   edx
c000f878:	51                   	push   ecx
c000f879:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f87c:	83 c4 10             	add    esp,0x10
c000f87f:	5a                   	pop    edx
c000f880:	5b                   	pop    ebx
c000f881:	5e                   	pop    esi
c000f882:	c3                   	ret    

c000f883 <getcwd(Process*, char*, int)>:
c000f883:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f887:	31 c0                	xor    eax,eax
c000f889:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f88c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f890:	7d 15                	jge    c000f8a7 <getcwd(Process*, char*, int)+0x24>
c000f892:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f896:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f89d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f8a0:	84 c9                	test   cl,cl
c000f8a2:	74 06                	je     c000f8aa <getcwd(Process*, char*, int)+0x27>
c000f8a4:	40                   	inc    eax
c000f8a5:	eb e2                	jmp    c000f889 <getcwd(Process*, char*, int)+0x6>
c000f8a7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f8aa:	31 c0                	xor    eax,eax
c000f8ac:	c3                   	ret    

c000f8ad <setcwd(Process*, char*)>:
c000f8ad:	55                   	push   ebp
c000f8ae:	57                   	push   edi
c000f8af:	56                   	push   esi
c000f8b0:	53                   	push   ebx
c000f8b1:	81 ec 20 02 00 00    	sub    esp,0x220
c000f8b7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f8be:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f8c4:	57                   	push   edi
c000f8c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f8cc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f8d0:	56                   	push   esi
c000f8d1:	e8 92 fa ff ff       	call   c000f368 <standardiseFiles(char*, char const*, char const*)>
c000f8d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000f8d9:	e8 47 0d ff ff       	call   c0000625 <strlen>
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	83 f8 02             	cmp    eax,0x2
c000f8e4:	77 17                	ja     c000f8fd <setcwd(Process*, char*)+0x50>
c000f8e6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000f8eb:	83 e8 41             	sub    eax,0x41
c000f8ee:	83 f8 19             	cmp    eax,0x19
c000f8f1:	76 24                	jbe    c000f917 <setcwd(Process*, char*)+0x6a>
c000f8f3:	b8 03 00 00 00       	mov    eax,0x3
c000f8f8:	e9 cb 00 00 00       	jmp    c000f9c8 <setcwd(Process*, char*)+0x11b>
c000f8fd:	83 ec 0c             	sub    esp,0xc
c000f900:	56                   	push   esi
c000f901:	e8 1f 0d ff ff       	call   c0000625 <strlen>
c000f906:	83 c4 10             	add    esp,0x10
c000f909:	83 f8 03             	cmp    eax,0x3
c000f90c:	75 33                	jne    c000f941 <setcwd(Process*, char*)+0x94>
c000f90e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000f913:	75 2c                	jne    c000f941 <setcwd(Process*, char*)+0x94>
c000f915:	eb cf                	jmp    c000f8e6 <setcwd(Process*, char*)+0x39>
c000f917:	8b 14 85 40 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2c0]
c000f91e:	b8 05 00 00 00       	mov    eax,0x5
c000f923:	85 d2                	test   edx,edx
c000f925:	0f 84 9d 00 00 00    	je     c000f9c8 <setcwd(Process*, char*)+0x11b>
c000f92b:	b8 06 00 00 00       	mov    eax,0x6
c000f930:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000f937:	0f 84 8b 00 00 00    	je     c000f9c8 <setcwd(Process*, char*)+0x11b>
c000f93d:	51                   	push   ecx
c000f93e:	51                   	push   ecx
c000f93f:	eb 7b                	jmp    c000f9bc <setcwd(Process*, char*)+0x10f>
c000f941:	83 ec 0c             	sub    esp,0xc
c000f944:	68 14 01 00 00       	push   0x114
c000f949:	e8 a6 f5 ff ff       	call   c000eef4 <operator new(unsigned long)>
c000f94e:	83 c4 0c             	add    esp,0xc
c000f951:	89 c3                	mov    ebx,eax
c000f953:	55                   	push   ebp
c000f954:	56                   	push   esi
c000f955:	50                   	push   eax
c000f956:	e8 b7 fb ff ff       	call   c000f512 <File::File(char const*, Process*)>
c000f95b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000f960:	83 c4 0c             	add    esp,0xc
c000f963:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000f967:	50                   	push   eax
c000f968:	8d 44 24 10          	lea    eax,[esp+0x10]
c000f96c:	50                   	push   eax
c000f96d:	53                   	push   ebx
c000f96e:	e8 af fe ff ff       	call   c000f822 <File::stat(unsigned long long*, bool*)>
c000f973:	83 c4 10             	add    esp,0x10
c000f976:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f978:	83 f8 02             	cmp    eax,0x2
c000f97b:	75 09                	jne    c000f986 <setcwd(Process*, char*)+0xd9>
c000f97d:	83 ec 0c             	sub    esp,0xc
c000f980:	53                   	push   ebx
c000f981:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f984:	eb 0d                	jmp    c000f993 <setcwd(Process*, char*)+0xe6>
c000f986:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f989:	85 c0                	test   eax,eax
c000f98b:	74 10                	je     c000f99d <setcwd(Process*, char*)+0xf0>
c000f98d:	83 ec 0c             	sub    esp,0xc
c000f990:	53                   	push   ebx
c000f991:	ff d2                	call   edx
c000f993:	83 c4 10             	add    esp,0x10
c000f996:	b8 01 00 00 00       	mov    eax,0x1
c000f99b:	eb 2b                	jmp    c000f9c8 <setcwd(Process*, char*)+0x11b>
c000f99d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f9a2:	75 10                	jne    c000f9b4 <setcwd(Process*, char*)+0x107>
c000f9a4:	83 ec 0c             	sub    esp,0xc
c000f9a7:	53                   	push   ebx
c000f9a8:	ff d2                	call   edx
c000f9aa:	83 c4 10             	add    esp,0x10
c000f9ad:	b8 02 00 00 00       	mov    eax,0x2
c000f9b2:	eb 14                	jmp    c000f9c8 <setcwd(Process*, char*)+0x11b>
c000f9b4:	83 ec 0c             	sub    esp,0xc
c000f9b7:	53                   	push   ebx
c000f9b8:	ff d2                	call   edx
c000f9ba:	58                   	pop    eax
c000f9bb:	5a                   	pop    edx
c000f9bc:	56                   	push   esi
c000f9bd:	57                   	push   edi
c000f9be:	e8 e4 0c ff ff       	call   c00006a7 <strcpy>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	31 c0                	xor    eax,eax
c000f9c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000f9ce:	5b                   	pop    ebx
c000f9cf:	5e                   	pop    esi
c000f9d0:	5f                   	pop    edi
c000f9d1:	5d                   	pop    ebp
c000f9d2:	c3                   	ret    
c000f9d3:	90                   	nop

c000f9d4 <Directory::Directory(char const*, Process*)>:
c000f9d4:	83 ec 0c             	sub    esp,0xc
c000f9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9db:	83 ec 08             	sub    esp,0x8
c000f9de:	6a 00                	push   0x0
c000f9e0:	50                   	push   eax
c000f9e1:	e8 4c df ff ff       	call   c000d932 <UnixFile::UnixFile(int)>
c000f9e6:	83 c4 10             	add    esp,0x10
c000f9e9:	ba ac 0c 02 c0       	mov    edx,0xc0020cac
c000f9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f2:	89 10                	mov    DWORD PTR [eax],edx
c000f9f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9f8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa02:	83 c0 0d             	add    eax,0xd
c000fa05:	83 ec 04             	sub    esp,0x4
c000fa08:	52                   	push   edx
c000fa09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa0d:	50                   	push   eax
c000fa0e:	e8 55 f9 ff ff       	call   c000f368 <standardiseFiles(char*, char const*, char const*)>
c000fa13:	83 c4 10             	add    esp,0x10
c000fa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa1a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fa1d:	8d 50 bf             	lea    edx,[eax-0x41]
c000fa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa24:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fa2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fa32:	90                   	nop
c000fa33:	83 c4 0c             	add    esp,0xc
c000fa36:	c3                   	ret    
c000fa37:	90                   	nop

c000fa38 <Directory::open()>:
c000fa38:	53                   	push   ebx
c000fa39:	b8 0b 00 00 00       	mov    eax,0xb
c000fa3e:	83 ec 08             	sub    esp,0x8
c000fa41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa45:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fa4c:	80 fa 19             	cmp    dl,0x19
c000fa4f:	77 3d                	ja     c000fa8e <Directory::open()+0x56>
c000fa51:	8b 14 95 40 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2c0]
c000fa58:	85 d2                	test   edx,edx
c000fa5a:	74 32                	je     c000fa8e <Directory::open()+0x56>
c000fa5c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fa62:	85 d2                	test   edx,edx
c000fa64:	74 28                	je     c000fa8e <Directory::open()+0x56>
c000fa66:	b8 06 00 00 00       	mov    eax,0x6
c000fa6b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fa6f:	75 1d                	jne    c000fa8e <Directory::open()+0x56>
c000fa71:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fa77:	50                   	push   eax
c000fa78:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa7a:	51                   	push   ecx
c000fa7b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fa7e:	51                   	push   ecx
c000fa7f:	52                   	push   edx
c000fa80:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fa83:	83 c4 10             	add    esp,0x10
c000fa86:	85 c0                	test   eax,eax
c000fa88:	75 04                	jne    c000fa8e <Directory::open()+0x56>
c000fa8a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fa8e:	83 c4 08             	add    esp,0x8
c000fa91:	5b                   	pop    ebx
c000fa92:	c3                   	ret    
c000fa93:	90                   	nop

c000fa94 <Directory::close()>:
c000fa94:	53                   	push   ebx
c000fa95:	b8 0b 00 00 00       	mov    eax,0xb
c000fa9a:	83 ec 08             	sub    esp,0x8
c000fa9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000faa1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000faa8:	80 fa 19             	cmp    dl,0x19
c000faab:	77 41                	ja     c000faee <Directory::close()+0x5a>
c000faad:	8b 1c 95 40 3d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdc2c0]
c000fab4:	85 db                	test   ebx,ebx
c000fab6:	74 36                	je     c000faee <Directory::close()+0x5a>
c000fab8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fabf:	74 2d                	je     c000faee <Directory::close()+0x5a>
c000fac1:	b8 05 00 00 00       	mov    eax,0x5
c000fac6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000faca:	74 22                	je     c000faee <Directory::close()+0x5a>
c000facc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fad0:	8b 04 95 40 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc2c0]
c000fad7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fadd:	53                   	push   ebx
c000fade:	53                   	push   ebx
c000fadf:	8b 10                	mov    edx,DWORD PTR [eax]
c000fae1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fae7:	50                   	push   eax
c000fae8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000faeb:	83 c4 10             	add    esp,0x10
c000faee:	83 c4 08             	add    esp,0x8
c000faf1:	5b                   	pop    ebx
c000faf2:	c3                   	ret    
c000faf3:	90                   	nop

c000faf4 <Directory::unlink()>:
c000faf4:	83 ec 0c             	sub    esp,0xc
c000faf7:	b8 0b 00 00 00       	mov    eax,0xb
c000fafc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb07:	80 f9 19             	cmp    cl,0x19
c000fb0a:	77 2f                	ja     c000fb3b <Directory::unlink()+0x47>
c000fb0c:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000fb13:	85 c9                	test   ecx,ecx
c000fb15:	74 24                	je     c000fb3b <Directory::unlink()+0x47>
c000fb17:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb1d:	85 c9                	test   ecx,ecx
c000fb1f:	74 1a                	je     c000fb3b <Directory::unlink()+0x47>
c000fb21:	b8 06 00 00 00       	mov    eax,0x6
c000fb26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb2a:	75 0f                	jne    c000fb3b <Directory::unlink()+0x47>
c000fb2c:	83 c2 0d             	add    edx,0xd
c000fb2f:	50                   	push   eax
c000fb30:	50                   	push   eax
c000fb31:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb33:	52                   	push   edx
c000fb34:	51                   	push   ecx
c000fb35:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fb38:	83 c4 10             	add    esp,0x10
c000fb3b:	83 c4 0c             	add    esp,0xc
c000fb3e:	c3                   	ret    
c000fb3f:	90                   	nop

c000fb40 <Directory::rename(char const*)>:
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	b8 0b 00 00 00       	mov    eax,0xb
c000fb48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb53:	80 f9 19             	cmp    cl,0x19
c000fb56:	77 32                	ja     c000fb8a <Directory::rename(char const*)+0x4a>
c000fb58:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000fb5f:	85 c9                	test   ecx,ecx
c000fb61:	74 27                	je     c000fb8a <Directory::rename(char const*)+0x4a>
c000fb63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fb69:	85 c9                	test   ecx,ecx
c000fb6b:	74 1d                	je     c000fb8a <Directory::rename(char const*)+0x4a>
c000fb6d:	b8 06 00 00 00       	mov    eax,0x6
c000fb72:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fb76:	75 12                	jne    c000fb8a <Directory::rename(char const*)+0x4a>
c000fb78:	83 c2 0d             	add    edx,0xd
c000fb7b:	50                   	push   eax
c000fb7c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fb7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb82:	52                   	push   edx
c000fb83:	51                   	push   ecx
c000fb84:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fb87:	83 c4 10             	add    esp,0x10
c000fb8a:	83 c4 0c             	add    esp,0xc
c000fb8d:	c3                   	ret    

c000fb8e <Directory::exists()>:
c000fb8e:	83 ec 0c             	sub    esp,0xc
c000fb91:	31 c0                	xor    eax,eax
c000fb93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fb97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fb9e:	80 f9 19             	cmp    cl,0x19
c000fba1:	77 24                	ja     c000fbc7 <Directory::exists()+0x39>
c000fba3:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000fbaa:	85 c9                	test   ecx,ecx
c000fbac:	74 19                	je     c000fbc7 <Directory::exists()+0x39>
c000fbae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fbb4:	85 c9                	test   ecx,ecx
c000fbb6:	74 0f                	je     c000fbc7 <Directory::exists()+0x39>
c000fbb8:	83 c2 0d             	add    edx,0xd
c000fbbb:	50                   	push   eax
c000fbbc:	50                   	push   eax
c000fbbd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbbf:	52                   	push   edx
c000fbc0:	51                   	push   ecx
c000fbc1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fbc4:	83 c4 10             	add    esp,0x10
c000fbc7:	83 c4 0c             	add    esp,0xc
c000fbca:	c3                   	ret    
c000fbcb:	90                   	nop

c000fbcc <Directory::read(dirent*)>:
c000fbcc:	83 ec 1c             	sub    esp,0x1c
c000fbcf:	b8 0b 00 00 00       	mov    eax,0xb
c000fbd4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fbd8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbdf:	80 fa 19             	cmp    dl,0x19
c000fbe2:	77 30                	ja     c000fc14 <Directory::read(dirent*)+0x48>
c000fbe4:	8b 14 95 40 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2c0]
c000fbeb:	85 d2                	test   edx,edx
c000fbed:	74 25                	je     c000fc14 <Directory::read(dirent*)+0x48>
c000fbef:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fbf6:	74 1c                	je     c000fc14 <Directory::read(dirent*)+0x48>
c000fbf8:	83 ec 0c             	sub    esp,0xc
c000fbfb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fbfd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fc01:	52                   	push   edx
c000fc02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fc06:	6a 00                	push   0x0
c000fc08:	68 10 01 00 00       	push   0x110
c000fc0d:	51                   	push   ecx
c000fc0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc11:	83 c4 20             	add    esp,0x20
c000fc14:	83 c4 1c             	add    esp,0x1c
c000fc17:	c3                   	ret    

c000fc18 <Directory::create()>:
c000fc18:	83 ec 0c             	sub    esp,0xc
c000fc1b:	b8 0b 00 00 00       	mov    eax,0xb
c000fc20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc2b:	80 f9 19             	cmp    cl,0x19
c000fc2e:	77 2f                	ja     c000fc5f <Directory::create()+0x47>
c000fc30:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c000fc37:	85 c9                	test   ecx,ecx
c000fc39:	74 24                	je     c000fc5f <Directory::create()+0x47>
c000fc3b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc41:	85 c9                	test   ecx,ecx
c000fc43:	74 1a                	je     c000fc5f <Directory::create()+0x47>
c000fc45:	b8 06 00 00 00       	mov    eax,0x6
c000fc4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc4e:	75 0f                	jne    c000fc5f <Directory::create()+0x47>
c000fc50:	83 c2 0d             	add    edx,0xd
c000fc53:	50                   	push   eax
c000fc54:	50                   	push   eax
c000fc55:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc57:	52                   	push   edx
c000fc58:	51                   	push   ecx
c000fc59:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	83 c4 0c             	add    esp,0xc
c000fc62:	c3                   	ret    
c000fc63:	90                   	nop

c000fc64 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fc64:	b8 0a 00 00 00       	mov    eax,0xa
c000fc69:	c3                   	ret    

c000fc6a <Bus::Bus(char const*)>:
c000fc6a:	83 ec 0c             	sub    esp,0xc
c000fc6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc71:	83 ec 08             	sub    esp,0x8
c000fc74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc78:	50                   	push   eax
c000fc79:	e8 60 09 00 00       	call   c00105de <Device::Device(char const*)>
c000fc7e:	83 c4 10             	add    esp,0x10
c000fc81:	ba c8 0c 02 c0       	mov    edx,0xc0020cc8
c000fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8a:	89 10                	mov    DWORD PTR [eax],edx
c000fc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc90:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fc9a:	90                   	nop
c000fc9b:	83 c4 0c             	add    esp,0xc
c000fc9e:	c3                   	ret    
c000fc9f:	90                   	nop

c000fca0 <Bus::~Bus()>:
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	ba c8 0c 02 c0       	mov    edx,0xc0020cc8
c000fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcac:	89 10                	mov    DWORD PTR [eax],edx
c000fcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb2:	83 ec 0c             	sub    esp,0xc
c000fcb5:	50                   	push   eax
c000fcb6:	e8 d5 05 00 00       	call   c0010290 <Device::~Device()>
c000fcbb:	83 c4 10             	add    esp,0x10
c000fcbe:	90                   	nop
c000fcbf:	83 c4 0c             	add    esp,0xc
c000fcc2:	c3                   	ret    
c000fcc3:	90                   	nop

c000fcc4 <Bus::~Bus()>:
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	83 ec 0c             	sub    esp,0xc
c000fcca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcce:	e8 cd ff ff ff       	call   c000fca0 <Bus::~Bus()>
c000fcd3:	83 c4 10             	add    esp,0x10
c000fcd6:	83 ec 08             	sub    esp,0x8
c000fcd9:	68 58 01 00 00       	push   0x158
c000fcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce2:	e8 1c f2 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	83 c4 0c             	add    esp,0xc
c000fced:	c3                   	ret    

c000fcee <Buzzer::Buzzer(char const*)>:
c000fcee:	83 ec 0c             	sub    esp,0xc
c000fcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf5:	83 ec 08             	sub    esp,0x8
c000fcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcfc:	50                   	push   eax
c000fcfd:	e8 dc 08 00 00       	call   c00105de <Device::Device(char const*)>
c000fd02:	83 c4 10             	add    esp,0x10
c000fd05:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c000fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd0e:	89 10                	mov    DWORD PTR [eax],edx
c000fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd14:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd22:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fd2c:	90                   	nop
c000fd2d:	83 c4 0c             	add    esp,0xc
c000fd30:	c3                   	ret    
c000fd31:	90                   	nop

c000fd32 <Buzzer::~Buzzer()>:
c000fd32:	83 ec 0c             	sub    esp,0xc
c000fd35:	ba f4 0c 02 c0       	mov    edx,0xc0020cf4
c000fd3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd3e:	89 10                	mov    DWORD PTR [eax],edx
c000fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	50                   	push   eax
c000fd48:	e8 43 05 00 00       	call   c0010290 <Device::~Device()>
c000fd4d:	83 c4 10             	add    esp,0x10
c000fd50:	90                   	nop
c000fd51:	83 c4 0c             	add    esp,0xc
c000fd54:	c3                   	ret    
c000fd55:	90                   	nop

c000fd56 <Buzzer::~Buzzer()>:
c000fd56:	83 ec 0c             	sub    esp,0xc
c000fd59:	83 ec 0c             	sub    esp,0xc
c000fd5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd60:	e8 cd ff ff ff       	call   c000fd32 <Buzzer::~Buzzer()>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	83 ec 08             	sub    esp,0x8
c000fd6b:	68 5c 01 00 00       	push   0x15c
c000fd70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd74:	e8 8a f1 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	83 c4 0c             	add    esp,0xc
c000fd7f:	c3                   	ret    

c000fd80 <Buzzer::stop()>:
c000fd80:	83 ec 14             	sub    esp,0x14
c000fd83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd87:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd89:	6a 00                	push   0x0
c000fd8b:	50                   	push   eax
c000fd8c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fd8f:	83 c4 1c             	add    esp,0x1c
c000fd92:	c3                   	ret    

c000fd93 <beepThread(void*)>:
c000fd93:	53                   	push   ebx
c000fd94:	83 ec 08             	sub    esp,0x8
c000fd97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fd9b:	e8 16 7e 00 00       	call   c0017bb6 <unlockScheduler()>
c000fda0:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fda5:	52                   	push   edx
c000fda6:	52                   	push   edx
c000fda7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fdad:	52                   	push   edx
c000fdae:	50                   	push   eax
c000fdaf:	e8 b9 84 00 00       	call   c001826d <nanoSleep(unsigned long long)>
c000fdb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdb7:	e8 c4 ff ff ff       	call   c000fd80 <Buzzer::stop()>
c000fdbc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fdc4:	83 c4 18             	add    esp,0x18
c000fdc7:	5b                   	pop    ebx
c000fdc8:	e9 e6 83 00 00       	jmp    c00181b3 <blockTask(TaskState)>
c000fdcd:	90                   	nop

c000fdce <Buzzer::beep(int, int, bool)>:
c000fdce:	57                   	push   edi
c000fdcf:	56                   	push   esi
c000fdd0:	53                   	push   ebx
c000fdd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdd5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdd9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fddd:	52                   	push   edx
c000fdde:	52                   	push   edx
c000fddf:	8b 06                	mov    eax,DWORD PTR [esi]
c000fde1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde5:	56                   	push   esi
c000fde6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000fde9:	83 c4 10             	add    esp,0x10
c000fdec:	89 f8                	mov    eax,edi
c000fdee:	84 c0                	test   al,al
c000fdf0:	74 1f                	je     c000fe11 <Buzzer::beep(int, int, bool)+0x43>
c000fdf2:	50                   	push   eax
c000fdf3:	50                   	push   eax
c000fdf4:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000fdfa:	99                   	cdq    
c000fdfb:	52                   	push   edx
c000fdfc:	50                   	push   eax
c000fdfd:	e8 6b 84 00 00       	call   c001826d <nanoSleep(unsigned long long)>
c000fe02:	83 c4 10             	add    esp,0x10
c000fe05:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fe09:	5b                   	pop    ebx
c000fe0a:	5e                   	pop    esi
c000fe0b:	5f                   	pop    edi
c000fe0c:	e9 6f ff ff ff       	jmp    c000fd80 <Buzzer::stop()>
c000fe11:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000fe17:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c000fe1c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000fe24:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fe28:	c7 44 24 14 93 fd 00 c0 	mov    DWORD PTR [esp+0x14],0xc000fd93
c000fe30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	5f                   	pop    edi
c000fe37:	e9 a2 7e 00 00       	jmp    c0017cde <Process::createThread(void (*)(void*), void*, int)>

c000fe3c <loadClockSettings()>:
c000fe3c:	c7 05 b4 38 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc00238b4,0xa
c000fe46:	c6 05 b1 38 02 c0 00 	mov    BYTE PTR ds:0xc00238b1,0x0
c000fe4d:	c6 05 b0 38 02 c0 01 	mov    BYTE PTR ds:0xc00238b0,0x1
c000fe54:	c3                   	ret    
c000fe55:	90                   	nop

c000fe56 <Clock::Clock(char const*)>:
c000fe56:	83 ec 0c             	sub    esp,0xc
c000fe59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe5d:	83 ec 08             	sub    esp,0x8
c000fe60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe64:	50                   	push   eax
c000fe65:	e8 74 07 00 00       	call   c00105de <Device::Device(char const*)>
c000fe6a:	83 c4 10             	add    esp,0x10
c000fe6d:	ba 24 0d 02 c0       	mov    edx,0xc0020d24
c000fe72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe76:	89 10                	mov    DWORD PTR [eax],edx
c000fe78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000fe86:	90                   	nop
c000fe87:	83 c4 0c             	add    esp,0xc
c000fe8a:	c3                   	ret    
c000fe8b:	90                   	nop

c000fe8c <Clock::~Clock()>:
c000fe8c:	83 ec 0c             	sub    esp,0xc
c000fe8f:	ba 24 0d 02 c0       	mov    edx,0xc0020d24
c000fe94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe98:	89 10                	mov    DWORD PTR [eax],edx
c000fe9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe9e:	83 ec 0c             	sub    esp,0xc
c000fea1:	50                   	push   eax
c000fea2:	e8 e9 03 00 00       	call   c0010290 <Device::~Device()>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	90                   	nop
c000feab:	83 c4 0c             	add    esp,0xc
c000feae:	c3                   	ret    
c000feaf:	90                   	nop

c000feb0 <Clock::~Clock()>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	83 ec 0c             	sub    esp,0xc
c000feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feba:	e8 cd ff ff ff       	call   c000fe8c <Clock::~Clock()>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	83 ec 08             	sub    esp,0x8
c000fec5:	68 58 01 00 00       	push   0x158
c000feca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fece:	e8 30 f0 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c000fed3:	83 c4 10             	add    esp,0x10
c000fed6:	83 c4 0c             	add    esp,0xc
c000fed9:	c3                   	ret    

c000feda <Clock::timeInSecondsLocal()>:
c000feda:	53                   	push   ebx
c000fedb:	83 ec 14             	sub    esp,0x14
c000fede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fee2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fee4:	50                   	push   eax
c000fee5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000fee8:	0f b6 0d b0 38 02 c0 	movzx  ecx,BYTE PTR ds:0xc00238b0
c000feef:	03 0d b4 38 02 c0    	add    ecx,DWORD PTR ds:0xc00238b4
c000fef5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000fefb:	89 cb                	mov    ebx,ecx
c000fefd:	c1 fb 1f             	sar    ebx,0x1f
c000ff00:	01 c8                	add    eax,ecx
c000ff02:	11 da                	adc    edx,ebx
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	31 c9                	xor    ecx,ecx
c000ff09:	80 3d b1 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238b1,0x0
c000ff10:	74 05                	je     c000ff17 <Clock::timeInSecondsLocal()+0x3d>
c000ff12:	b9 08 07 00 00       	mov    ecx,0x708
c000ff17:	31 db                	xor    ebx,ebx
c000ff19:	01 c8                	add    eax,ecx
c000ff1b:	11 da                	adc    edx,ebx
c000ff1d:	83 c4 08             	add    esp,0x8
c000ff20:	5b                   	pop    ebx
c000ff21:	c3                   	ret    

c000ff22 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ff22:	57                   	push   edi
c000ff23:	56                   	push   esi
c000ff24:	53                   	push   ebx
c000ff25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ff2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ff33:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ff36:	0f b6 05 b0 38 02 c0 	movzx  eax,BYTE PTR ds:0xc00238b0
c000ff3d:	03 05 b4 38 02 c0    	add    eax,DWORD PTR ds:0xc00238b4
c000ff43:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ff49:	99                   	cdq    
c000ff4a:	29 c6                	sub    esi,eax
c000ff4c:	19 d7                	sbb    edi,edx
c000ff4e:	89 f0                	mov    eax,esi
c000ff50:	89 fa                	mov    edx,edi
c000ff52:	31 f6                	xor    esi,esi
c000ff54:	80 3d b1 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238b1,0x0
c000ff5b:	74 05                	je     c000ff62 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ff5d:	be 08 07 00 00       	mov    esi,0x708
c000ff62:	31 ff                	xor    edi,edi
c000ff64:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000ff68:	29 f0                	sub    eax,esi
c000ff6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ff6e:	19 fa                	sbb    edx,edi
c000ff70:	89 d8                	mov    eax,ebx
c000ff72:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff76:	5b                   	pop    ebx
c000ff77:	5e                   	pop    esi
c000ff78:	5f                   	pop    edi
c000ff79:	ff e0                	jmp    eax

c000ff7b <datetimeToSeconds(datetime_t)>:
c000ff7b:	55                   	push   ebp
c000ff7c:	57                   	push   edi
c000ff7d:	56                   	push   esi
c000ff7e:	53                   	push   ebx
c000ff7f:	83 ec 14             	sub    esp,0x14
c000ff82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ff86:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ff8a:	89 d3                	mov    ebx,edx
c000ff8c:	0f b6 c6             	movzx  eax,dh
c000ff8f:	c1 eb 10             	shr    ebx,0x10
c000ff92:	48                   	dec    eax
c000ff93:	66 81 eb 6c 07       	sub    bx,0x76c
c000ff98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ff9c:	0f b6 f5             	movzx  esi,ch
c000ff9f:	89 cf                	mov    edi,ecx
c000ffa1:	6b f6 3c             	imul   esi,esi,0x3c
c000ffa4:	c1 ef 10             	shr    edi,0x10
c000ffa7:	0f b6 c9             	movzx  ecx,cl
c000ffaa:	89 f8                	mov    eax,edi
c000ffac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ffb2:	0f b6 f8             	movzx  edi,al
c000ffb5:	0f b6 d2             	movzx  edx,dl
c000ffb8:	01 fe                	add    esi,edi
c000ffba:	01 f1                	add    ecx,esi
c000ffbc:	0f b7 f3             	movzx  esi,bx
c000ffbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ffc3:	c1 f9 1f             	sar    ecx,0x1f
c000ffc6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000ffcb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ffcf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000ffd4:	8b 0c 8d 60 0d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf2a0]
c000ffdb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ffdf:	76 29                	jbe    c001000a <datetimeToSeconds(datetime_t)+0x8f>
c000ffe1:	f6 c3 03             	test   bl,0x3
c000ffe4:	75 24                	jne    c001000a <datetimeToSeconds(datetime_t)+0x8f>
c000ffe6:	31 d2                	xor    edx,edx
c000ffe8:	bf 64 00 00 00       	mov    edi,0x64
c000ffed:	89 d8                	mov    eax,ebx
c000ffef:	66 f7 f7             	div    di
c000fff2:	66 85 d2             	test   dx,dx
c000fff5:	75 12                	jne    c0010009 <datetimeToSeconds(datetime_t)+0x8e>
c000fff7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000fffd:	bf 90 01 00 00       	mov    edi,0x190
c0010002:	99                   	cdq    
c0010003:	f7 ff                	idiv   edi
c0010005:	85 d2                	test   edx,edx
c0010007:	75 01                	jne    c001000a <datetimeToSeconds(datetime_t)+0x8f>
c0010009:	41                   	inc    ecx
c001000a:	66 83 fb 46          	cmp    bx,0x46
c001000e:	76 45                	jbe    c0010055 <datetimeToSeconds(datetime_t)+0xda>
c0010010:	bb 46 00 00 00       	mov    ebx,0x46
c0010015:	bf 64 00 00 00       	mov    edi,0x64
c001001a:	bd 90 01 00 00       	mov    ebp,0x190
c001001f:	b8 6d 01 00 00       	mov    eax,0x16d
c0010024:	f6 c3 03             	test   bl,0x3
c0010027:	75 23                	jne    c001004c <datetimeToSeconds(datetime_t)+0xd1>
c0010029:	89 d8                	mov    eax,ebx
c001002b:	99                   	cdq    
c001002c:	f7 ff                	idiv   edi
c001002e:	b8 6e 01 00 00       	mov    eax,0x16e
c0010033:	85 d2                	test   edx,edx
c0010035:	75 15                	jne    c001004c <datetimeToSeconds(datetime_t)+0xd1>
c0010037:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001003d:	99                   	cdq    
c001003e:	f7 fd                	idiv   ebp
c0010040:	83 fa 01             	cmp    edx,0x1
c0010043:	19 c0                	sbb    eax,eax
c0010045:	f7 d0                	not    eax
c0010047:	05 6e 01 00 00       	add    eax,0x16e
c001004c:	01 c1                	add    ecx,eax
c001004e:	43                   	inc    ebx
c001004f:	39 f3                	cmp    ebx,esi
c0010051:	7c cc                	jl     c001001f <datetimeToSeconds(datetime_t)+0xa4>
c0010053:	eb 35                	jmp    c001008a <datetimeToSeconds(datetime_t)+0x10f>
c0010055:	74 33                	je     c001008a <datetimeToSeconds(datetime_t)+0x10f>
c0010057:	b8 45 00 00 00       	mov    eax,0x45
c001005c:	89 c2                	mov    edx,eax
c001005e:	83 e2 03             	and    edx,0x3
c0010061:	39 f0                	cmp    eax,esi
c0010063:	7e 0f                	jle    c0010074 <datetimeToSeconds(datetime_t)+0xf9>
c0010065:	83 fa 01             	cmp    edx,0x1
c0010068:	19 d2                	sbb    edx,edx
c001006a:	48                   	dec    eax
c001006b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0010072:	eb e8                	jmp    c001005c <datetimeToSeconds(datetime_t)+0xe1>
c0010074:	b8 6d 01 00 00       	mov    eax,0x16d
c0010079:	85 d2                	test   edx,edx
c001007b:	75 0b                	jne    c0010088 <datetimeToSeconds(datetime_t)+0x10d>
c001007d:	66 83 fb 01          	cmp    bx,0x1
c0010081:	19 c0                	sbb    eax,eax
c0010083:	05 6e 01 00 00       	add    eax,0x16e
c0010088:	29 c1                	sub    ecx,eax
c001008a:	b8 80 51 01 00       	mov    eax,0x15180
c001008f:	f7 e9                	imul   ecx
c0010091:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010095:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010099:	83 c4 14             	add    esp,0x14
c001009c:	5b                   	pop    ebx
c001009d:	5e                   	pop    esi
c001009e:	5f                   	pop    edi
c001009f:	5d                   	pop    ebp
c00100a0:	c3                   	ret    
c00100a1:	90                   	nop

c00100a2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00100a2:	57                   	push   edi
c00100a3:	56                   	push   esi
c00100a4:	53                   	push   ebx
c00100a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100a9:	8b 06                	mov    eax,DWORD PTR [esi]
c00100ab:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00100ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100b6:	e8 c0 fe ff ff       	call   c000ff7b <datetimeToSeconds(datetime_t)>
c00100bb:	59                   	pop    ecx
c00100bc:	0f b6 0d b0 38 02 c0 	movzx  ecx,BYTE PTR ds:0xc00238b0
c00100c3:	5b                   	pop    ebx
c00100c4:	03 0d b4 38 02 c0    	add    ecx,DWORD PTR ds:0xc00238b4
c00100ca:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100d0:	89 cb                	mov    ebx,ecx
c00100d2:	c1 fb 1f             	sar    ebx,0x1f
c00100d5:	29 c8                	sub    eax,ecx
c00100d7:	19 da                	sbb    edx,ebx
c00100d9:	31 c9                	xor    ecx,ecx
c00100db:	80 3d b1 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238b1,0x0
c00100e2:	74 05                	je     c00100e9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00100e4:	b9 08 07 00 00       	mov    ecx,0x708
c00100e9:	31 db                	xor    ebx,ebx
c00100eb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00100ef:	29 c8                	sub    eax,ecx
c00100f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100f5:	19 da                	sbb    edx,ebx
c00100f7:	89 f8                	mov    eax,edi
c00100f9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100fd:	5b                   	pop    ebx
c00100fe:	5e                   	pop    esi
c00100ff:	5f                   	pop    edi
c0010100:	ff e0                	jmp    eax

c0010102 <secondsToDatetime(unsigned long long)>:
c0010102:	55                   	push   ebp
c0010103:	57                   	push   edi
c0010104:	56                   	push   esi
c0010105:	53                   	push   ebx
c0010106:	83 ec 1c             	sub    esp,0x1c
c0010109:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001010d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010111:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010115:	6a 00                	push   0x0
c0010117:	68 80 51 01 00       	push   0x15180
c001011c:	55                   	push   ebp
c001011d:	57                   	push   edi
c001011e:	e8 39 e6 00 00       	call   c001e75c <__udivdi3>
c0010123:	83 c4 10             	add    esp,0x10
c0010126:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001012c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010130:	6a 00                	push   0x0
c0010132:	68 80 51 01 00       	push   0x15180
c0010137:	55                   	push   ebp
c0010138:	57                   	push   edi
c0010139:	bf 10 0e 00 00       	mov    edi,0xe10
c001013e:	e8 19 e7 00 00       	call   c001e85c <__umoddi3>
c0010143:	83 c4 10             	add    esp,0x10
c0010146:	99                   	cdq    
c0010147:	f7 ff                	idiv   edi
c0010149:	bf 3c 00 00 00       	mov    edi,0x3c
c001014e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010151:	89 d0                	mov    eax,edx
c0010153:	99                   	cdq    
c0010154:	f7 ff                	idiv   edi
c0010156:	85 db                	test   ebx,ebx
c0010158:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001015b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001015e:	79 11                	jns    c0010171 <secondsToDatetime(unsigned long long)+0x6f>
c0010160:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010164:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001016a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001016f:	eb 07                	jmp    c0010178 <secondsToDatetime(unsigned long long)+0x76>
c0010171:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010176:	89 d8                	mov    eax,ebx
c0010178:	bf b4 05 00 00       	mov    edi,0x5b4
c001017d:	99                   	cdq    
c001017e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010183:	f7 f9                	idiv   ecx
c0010185:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001018a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001018e:	31 d2                	xor    edx,edx
c0010190:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010198:	01 c3                	add    ebx,eax
c001019a:	89 d8                	mov    eax,ebx
c001019c:	f7 f1                	div    ecx
c001019e:	31 d2                	xor    edx,edx
c00101a0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00101a3:	89 d8                	mov    eax,ebx
c00101a5:	f7 f7                	div    edi
c00101a7:	31 d2                	xor    edx,edx
c00101a9:	29 c1                	sub    ecx,eax
c00101ab:	89 d8                	mov    eax,ebx
c00101ad:	f7 f5                	div    ebp
c00101af:	bd 6d 01 00 00       	mov    ebp,0x16d
c00101b4:	29 c1                	sub    ecx,eax
c00101b6:	31 d2                	xor    edx,edx
c00101b8:	89 c8                	mov    eax,ecx
c00101ba:	f7 f5                	div    ebp
c00101bc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00101c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101c5:	31 d2                	xor    edx,edx
c00101c7:	89 c8                	mov    eax,ecx
c00101c9:	f7 f5                	div    ebp
c00101cb:	31 d2                	xor    edx,edx
c00101cd:	01 c3                	add    ebx,eax
c00101cf:	89 c8                	mov    eax,ecx
c00101d1:	f7 f7                	div    edi
c00101d3:	bf 99 00 00 00       	mov    edi,0x99
c00101d8:	29 c3                	sub    ebx,eax
c00101da:	31 d2                	xor    edx,edx
c00101dc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00101e4:	29 c3                	sub    ebx,eax
c00101e6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00101e9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00101ec:	bb 05 00 00 00       	mov    ebx,0x5
c00101f1:	83 c1 02             	add    ecx,0x2
c00101f4:	89 c8                	mov    eax,ecx
c00101f6:	f7 f7                	div    edi
c00101f8:	31 d2                	xor    edx,edx
c00101fa:	89 c7                	mov    edi,eax
c00101fc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010202:	83 c0 02             	add    eax,0x2
c0010205:	f7 f3                	div    ebx
c0010207:	89 eb                	mov    ebx,ebp
c0010209:	29 c3                	sub    ebx,eax
c001020b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010211:	88 1e                	mov    BYTE PTR [esi],bl
c0010213:	19 c0                	sbb    eax,eax
c0010215:	31 d2                	xor    edx,edx
c0010217:	83 e0 0c             	and    eax,0xc
c001021a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001021e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010226:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001022a:	83 f9 01             	cmp    ecx,0x1
c001022d:	0f 96 c2             	setbe  dl
c0010230:	41                   	inc    ecx
c0010231:	01 d0                	add    eax,edx
c0010233:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010236:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001023a:	83 c4 1c             	add    esp,0x1c
c001023d:	89 f0                	mov    eax,esi
c001023f:	5b                   	pop    ebx
c0010240:	5e                   	pop    esi
c0010241:	5f                   	pop    edi
c0010242:	5d                   	pop    ebp
c0010243:	c2 04 00             	ret    0x4

c0010246 <Clock::timeInDatetimeLocal()>:
c0010246:	53                   	push   ebx
c0010247:	83 ec 14             	sub    esp,0x14
c001024a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001024e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010252:	e8 83 fc ff ff       	call   c000feda <Clock::timeInSecondsLocal()>
c0010257:	83 c4 0c             	add    esp,0xc
c001025a:	52                   	push   edx
c001025b:	50                   	push   eax
c001025c:	53                   	push   ebx
c001025d:	e8 a0 fe ff ff       	call   c0010102 <secondsToDatetime(unsigned long long)>
c0010262:	89 d8                	mov    eax,ebx
c0010264:	83 c4 14             	add    esp,0x14
c0010267:	5b                   	pop    ebx
c0010268:	c2 04 00             	ret    0x4
c001026b:	90                   	nop

c001026c <Device::hibernate()>:
c001026c:	c3                   	ret    
c001026d:	90                   	nop

c001026e <Device::wake()>:
c001026e:	c3                   	ret    
c001026f:	90                   	nop

c0010270 <Device::detect()>:
c0010270:	c3                   	ret    
c0010271:	90                   	nop

c0010272 <Device::disableLegacy()>:
c0010272:	c3                   	ret    
c0010273:	90                   	nop

c0010274 <Device::powerSaving(PowerSavingLevel)>:
c0010274:	c3                   	ret    
c0010275:	90                   	nop

c0010276 <DriverlessDevice::close(int, int, void*)>:
c0010276:	31 c0                	xor    eax,eax
c0010278:	c3                   	ret    
c0010279:	90                   	nop

c001027a <DriverlessDevice::detect()>:
c001027a:	c3                   	ret    
c001027b:	90                   	nop

c001027c <DriverlessDevice::open(int, int, void*)>:
c001027c:	83 ec 18             	sub    esp,0x18
c001027f:	68 90 0d 02 c0       	push   0xc0020d90
c0010284:	e8 ef 49 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0010289:	83 c8 ff             	or     eax,0xffffffff
c001028c:	83 c4 1c             	add    esp,0x1c
c001028f:	c3                   	ret    

c0010290 <Device::~Device()>:
c0010290:	ba b8 0d 02 c0       	mov    edx,0xc0020db8
c0010295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010299:	89 10                	mov    DWORD PTR [eax],edx
c001029b:	90                   	nop
c001029c:	c3                   	ret    
c001029d:	90                   	nop

c001029e <Device::~Device()>:
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00102a5:	e8 e6 ff ff ff       	call   c0010290 <Device::~Device()>
c00102aa:	83 c4 04             	add    esp,0x4
c00102ad:	83 ec 08             	sub    esp,0x8
c00102b0:	68 58 01 00 00       	push   0x158
c00102b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b9:	e8 45 ec ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c00102be:	83 c4 10             	add    esp,0x10
c00102c1:	83 c4 0c             	add    esp,0xc
c00102c4:	c3                   	ret    
c00102c5:	90                   	nop

c00102c6 <Device::findAndLoadDriver()>:
c00102c6:	c3                   	ret    
c00102c7:	90                   	nop

c00102c8 <Device::preOpenPCI(PCIDeviceInfo)>:
c00102c8:	57                   	push   edi
c00102c9:	b9 09 00 00 00       	mov    ecx,0x9
c00102ce:	56                   	push   esi
c00102cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00102d3:	8d 74 24 10          	lea    esi,[esp+0x10]
c00102d7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00102e1:	81 c7 18 01 00 00    	add    edi,0x118
c00102e7:	fc                   	cld    
c00102e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102ea:	5e                   	pop    esi
c00102eb:	5f                   	pop    edi
c00102ec:	c3                   	ret    
c00102ed:	90                   	nop

c00102ee <Device::preOpenACPI(void*, char*, char*)>:
c00102ee:	56                   	push   esi
c00102ef:	53                   	push   ebx
c00102f0:	83 ec 08             	sub    esp,0x8
c00102f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00102fb:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010309:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001030f:	6a 1e                	push   0x1e
c0010311:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010317:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001031b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010321:	50                   	push   eax
c0010322:	e8 ab 02 ff ff       	call   c00005d2 <memcpy>
c0010327:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001032b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001032f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0010337:	83 c4 14             	add    esp,0x14
c001033a:	5b                   	pop    ebx
c001033b:	5e                   	pop    esi
c001033c:	e9 91 02 ff ff       	jmp    c00005d2 <memcpy>
c0010341:	90                   	nop

c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010342:	55                   	push   ebp
c0010343:	57                   	push   edi
c0010344:	56                   	push   esi
c0010345:	53                   	push   ebx
c0010346:	83 ec 0c             	sub    esp,0xc
c0010349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001034d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010351:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010355:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010359:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001035e:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010365:	75 0b                	jne    c0010372 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0010367:	8b 00                	mov    eax,DWORD PTR [eax]
c0010369:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001036d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010370:	eb 24                	jmp    c0010396 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010372:	e8 fb 3b 00 00       	call   c0013f72 <thisCPU()>
c0010377:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001037d:	8b 10                	mov    edx,DWORD PTR [eax]
c001037f:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010383:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010387:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001038b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001038f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010393:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010396:	83 c4 0c             	add    esp,0xc
c0010399:	5b                   	pop    ebx
c001039a:	5e                   	pop    esi
c001039b:	5f                   	pop    edi
c001039c:	5d                   	pop    ebp
c001039d:	ff e0                	jmp    eax
c001039f:	90                   	nop

c00103a0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00103a0:	57                   	push   edi
c00103a1:	56                   	push   esi
c00103a2:	53                   	push   ebx
c00103a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00103af:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00103b4:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00103bb:	75 0b                	jne    c00103c8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00103bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00103bf:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00103c3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00103c6:	eb 20                	jmp    c00103e8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00103c8:	e8 a5 3b 00 00       	call   c0013f72 <thisCPU()>
c00103cd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00103d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00103d5:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00103d9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00103dd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00103e5:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00103e8:	5b                   	pop    ebx
c00103e9:	5e                   	pop    esi
c00103ea:	5f                   	pop    edi
c00103eb:	ff e0                	jmp    eax
c00103ed:	90                   	nop

c00103ee <Device::addChild(Device*)>:
c00103ee:	53                   	push   ebx
c00103ef:	83 ec 08             	sub    esp,0x8
c00103f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00103f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103fa:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010400:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010408:	85 d2                	test   edx,edx
c001040a:	74 04                	je     c0010410 <Device::addChild(Device*)+0x22>
c001040c:	89 d3                	mov    ebx,edx
c001040e:	eb f6                	jmp    c0010406 <Device::addChild(Device*)+0x18>
c0010410:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010413:	83 ec 0c             	sub    esp,0xc
c0010416:	6a 08                	push   0x8
c0010418:	e8 d7 ea ff ff       	call   c000eef4 <operator new(unsigned long)>
c001041d:	89 03                	mov    DWORD PTR [ebx],eax
c001041f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010425:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001042c:	83 c4 18             	add    esp,0x18
c001042f:	5b                   	pop    ebx
c0010430:	c3                   	ret    
c0010431:	90                   	nop

c0010432 <Device::removeAllChildren()>:
c0010432:	56                   	push   esi
c0010433:	53                   	push   ebx
c0010434:	52                   	push   edx
c0010435:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010439:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001043f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010442:	74 17                	je     c001045b <Device::removeAllChildren()+0x29>
c0010444:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0010447:	85 c0                	test   eax,eax
c0010449:	74 0c                	je     c0010457 <Device::removeAllChildren()+0x25>
c001044b:	83 ec 0c             	sub    esp,0xc
c001044e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010450:	50                   	push   eax
c0010451:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010454:	83 c4 10             	add    esp,0x10
c0010457:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010459:	eb e4                	jmp    c001043f <Device::removeAllChildren()+0xd>
c001045b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010461:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010467:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001046d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010474:	58                   	pop    eax
c0010475:	5b                   	pop    ebx
c0010476:	5e                   	pop    esi
c0010477:	c3                   	ret    

c0010478 <Device::hibernateAll()>:
c0010478:	53                   	push   ebx
c0010479:	83 ec 14             	sub    esp,0x14
c001047c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010480:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010482:	53                   	push   ebx
c0010483:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010486:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001048c:	83 c4 10             	add    esp,0x10
c001048f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010492:	74 0f                	je     c00104a3 <Device::hibernateAll()+0x2b>
c0010494:	83 ec 0c             	sub    esp,0xc
c0010497:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001049a:	e8 d9 ff ff ff       	call   c0010478 <Device::hibernateAll()>
c001049f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104a1:	eb e9                	jmp    c001048c <Device::hibernateAll()+0x14>
c00104a3:	83 c4 08             	add    esp,0x8
c00104a6:	5b                   	pop    ebx
c00104a7:	c3                   	ret    

c00104a8 <Device::wakeAll()>:
c00104a8:	53                   	push   ebx
c00104a9:	83 ec 14             	sub    esp,0x14
c00104ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104b2:	53                   	push   ebx
c00104b3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00104b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104bc:	83 c4 10             	add    esp,0x10
c00104bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104c2:	74 0f                	je     c00104d3 <Device::wakeAll()+0x2b>
c00104c4:	83 ec 0c             	sub    esp,0xc
c00104c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104ca:	e8 d9 ff ff ff       	call   c00104a8 <Device::wakeAll()>
c00104cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00104d1:	eb e9                	jmp    c00104bc <Device::wakeAll()+0x14>
c00104d3:	83 c4 08             	add    esp,0x8
c00104d6:	5b                   	pop    ebx
c00104d7:	c3                   	ret    

c00104d8 <Device::detectAll()>:
c00104d8:	53                   	push   ebx
c00104d9:	83 ec 14             	sub    esp,0x14
c00104dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00104e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00104e2:	53                   	push   ebx
c00104e3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00104e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00104ec:	83 c4 10             	add    esp,0x10
c00104ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00104f2:	74 0f                	je     c0010503 <Device::detectAll()+0x2b>
c00104f4:	83 ec 0c             	sub    esp,0xc
c00104f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00104fa:	e8 d9 ff ff ff       	call   c00104d8 <Device::detectAll()>
c00104ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010501:	eb e9                	jmp    c00104ec <Device::detectAll()+0x14>
c0010503:	83 c4 08             	add    esp,0x8
c0010506:	5b                   	pop    ebx
c0010507:	c3                   	ret    

c0010508 <Device::disableLegacyAll()>:
c0010508:	53                   	push   ebx
c0010509:	83 ec 14             	sub    esp,0x14
c001050c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010510:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010512:	53                   	push   ebx
c0010513:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010516:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001051c:	83 c4 10             	add    esp,0x10
c001051f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010522:	74 0f                	je     c0010533 <Device::disableLegacyAll()+0x2b>
c0010524:	83 ec 0c             	sub    esp,0xc
c0010527:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001052a:	e8 d9 ff ff ff       	call   c0010508 <Device::disableLegacyAll()>
c001052f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010531:	eb e9                	jmp    c001051c <Device::disableLegacyAll()+0x14>
c0010533:	83 c4 08             	add    esp,0x8
c0010536:	5b                   	pop    ebx
c0010537:	c3                   	ret    

c0010538 <Device::loadDriversForAll()>:
c0010538:	53                   	push   ebx
c0010539:	83 ec 08             	sub    esp,0x8
c001053c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010540:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010546:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010548:	85 db                	test   ebx,ebx
c001054a:	74 12                	je     c001055e <Device::loadDriversForAll()+0x26>
c001054c:	83 ec 0c             	sub    esp,0xc
c001054f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010552:	e8 e1 ff ff ff       	call   c0010538 <Device::loadDriversForAll()>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	89 d8                	mov    eax,ebx
c001055c:	eb e8                	jmp    c0010546 <Device::loadDriversForAll()+0xe>
c001055e:	83 c4 08             	add    esp,0x8
c0010561:	5b                   	pop    ebx
c0010562:	c3                   	ret    
c0010563:	90                   	nop

c0010564 <Device::closeAll()>:
c0010564:	53                   	push   ebx
c0010565:	83 ec 08             	sub    esp,0x8
c0010568:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001056c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001056e:	6a 00                	push   0x0
c0010570:	6a 00                	push   0x0
c0010572:	6a 00                	push   0x0
c0010574:	53                   	push   ebx
c0010575:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010578:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001057e:	83 c4 10             	add    esp,0x10
c0010581:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010584:	74 0f                	je     c0010595 <Device::closeAll()+0x31>
c0010586:	83 ec 0c             	sub    esp,0xc
c0010589:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001058c:	e8 d3 ff ff ff       	call   c0010564 <Device::closeAll()>
c0010591:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010593:	eb e9                	jmp    c001057e <Device::closeAll()+0x1a>
c0010595:	83 c4 08             	add    esp,0x8
c0010598:	5b                   	pop    ebx
c0010599:	c3                   	ret    

c001059a <Device::powerSavingAll(PowerSavingLevel)>:
c001059a:	56                   	push   esi
c001059b:	53                   	push   ebx
c001059c:	83 ec 0c             	sub    esp,0xc
c001059f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105a3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00105a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105a9:	56                   	push   esi
c00105aa:	53                   	push   ebx
c00105ab:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00105ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105b4:	83 c4 10             	add    esp,0x10
c00105b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105ba:	74 0f                	je     c00105cb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00105bc:	52                   	push   edx
c00105bd:	52                   	push   edx
c00105be:	56                   	push   esi
c00105bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105c2:	e8 d3 ff ff ff       	call   c001059a <Device::powerSavingAll(PowerSavingLevel)>
c00105c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105c9:	eb e9                	jmp    c00105b4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00105cb:	58                   	pop    eax
c00105cc:	5b                   	pop    ebx
c00105cd:	5e                   	pop    esi
c00105ce:	c3                   	ret    
c00105cf:	90                   	nop

c00105d0 <Device::setName(char const*)>:
c00105d0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00105d8:	e9 ca 00 ff ff       	jmp    c00006a7 <strcpy>
c00105dd:	90                   	nop

c00105de <Device::Device(char const*)>:
c00105de:	83 ec 0c             	sub    esp,0xc
c00105e1:	ba b8 0d 02 c0       	mov    edx,0xc0020db8
c00105e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ea:	89 10                	mov    DWORD PTR [eax],edx
c00105ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00105fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010624:	83 ec 08             	sub    esp,0x8
c0010627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062f:	e8 9c ff ff ff       	call   c00105d0 <Device::setName(char const*)>
c0010634:	83 c4 10             	add    esp,0x10
c0010637:	83 ec 0c             	sub    esp,0xc
c001063a:	6a 08                	push   0x8
c001063c:	e8 b3 e8 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0010641:	83 c4 10             	add    esp,0x10
c0010644:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001064a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010651:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010655:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001065b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010665:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001066b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001066f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010675:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010680:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010696:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00106a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00106ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00106ca:	90                   	nop
c00106cb:	83 c4 0c             	add    esp,0xc
c00106ce:	c3                   	ret    
c00106cf:	90                   	nop

c00106d0 <Device::getName()>:
c00106d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d4:	05 d0 00 00 00       	add    eax,0xd0
c00106d9:	c3                   	ret    

c00106da <DriverlessDevice::DriverlessDevice(char const*)>:
c00106da:	83 ec 0c             	sub    esp,0xc
c00106dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e1:	83 ec 08             	sub    esp,0x8
c00106e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e8:	50                   	push   eax
c00106e9:	e8 f0 fe ff ff       	call   c00105de <Device::Device(char const*)>
c00106ee:	83 c4 10             	add    esp,0x10
c00106f1:	ba e4 0d 02 c0       	mov    edx,0xc0020de4
c00106f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106fa:	89 10                	mov    DWORD PTR [eax],edx
c00106fc:	90                   	nop
c00106fd:	83 c4 0c             	add    esp,0xc
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010702:	57                   	push   edi
c0010703:	56                   	push   esi
c0010704:	53                   	push   ebx
c0010705:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010709:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001070d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010711:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010717:	75 0c                	jne    c0010725 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010719:	52                   	push   edx
c001071a:	52                   	push   edx
c001071b:	53                   	push   ebx
c001071c:	56                   	push   esi
c001071d:	e8 50 e5 00 00       	call   c001ec72 <LinkedList<Device>::addElement(Device*)>
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001072b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001072e:	74 12                	je     c0010742 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010730:	50                   	push   eax
c0010731:	57                   	push   edi
c0010732:	56                   	push   esi
c0010733:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010736:	e8 c7 ff ff ff       	call   c0010702 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001073b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001073d:	83 c4 10             	add    esp,0x10
c0010740:	eb e9                	jmp    c001072b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010742:	5b                   	pop    ebx
c0010743:	5e                   	pop    esi
c0010744:	5f                   	pop    edi
c0010745:	c3                   	ret    

c0010746 <getDevicesOfType(DeviceType)>:
c0010746:	53                   	push   ebx
c0010747:	83 ec 14             	sub    esp,0x14
c001074a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001074e:	53                   	push   ebx
c001074f:	e8 fa e5 00 00       	call   c001ed4e <LinkedList<Device>::LinkedList()>
c0010754:	83 c4 0c             	add    esp,0xc
c0010757:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001075b:	53                   	push   ebx
c001075c:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0010762:	e8 9b ff ff ff       	call   c0010702 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010767:	89 d8                	mov    eax,ebx
c0010769:	83 c4 18             	add    esp,0x18
c001076c:	5b                   	pop    ebx
c001076d:	c2 04 00             	ret    0x4

c0010770 <HardDiskController::HardDiskController(char const*)>:
c0010770:	83 ec 0c             	sub    esp,0xc
c0010773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010777:	83 ec 08             	sub    esp,0x8
c001077a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001077e:	50                   	push   eax
c001077f:	e8 5a fe ff ff       	call   c00105de <Device::Device(char const*)>
c0010784:	83 c4 10             	add    esp,0x10
c0010787:	ba 10 0e 02 c0       	mov    edx,0xc0020e10
c001078c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010790:	89 10                	mov    DWORD PTR [eax],edx
c0010792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010796:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00107a0:	90                   	nop
c00107a1:	83 c4 0c             	add    esp,0xc
c00107a4:	c3                   	ret    
c00107a5:	90                   	nop

c00107a6 <HardDiskController::~HardDiskController()>:
c00107a6:	83 ec 0c             	sub    esp,0xc
c00107a9:	ba 10 0e 02 c0       	mov    edx,0xc0020e10
c00107ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b2:	89 10                	mov    DWORD PTR [eax],edx
c00107b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b8:	83 ec 0c             	sub    esp,0xc
c00107bb:	50                   	push   eax
c00107bc:	e8 cf fa ff ff       	call   c0010290 <Device::~Device()>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	90                   	nop
c00107c5:	83 c4 0c             	add    esp,0xc
c00107c8:	c3                   	ret    
c00107c9:	90                   	nop

c00107ca <HardDiskController::~HardDiskController()>:
c00107ca:	83 ec 0c             	sub    esp,0xc
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107d4:	e8 cd ff ff ff       	call   c00107a6 <HardDiskController::~HardDiskController()>
c00107d9:	83 c4 10             	add    esp,0x10
c00107dc:	83 ec 08             	sub    esp,0x8
c00107df:	68 58 01 00 00       	push   0x158
c00107e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107e8:	e8 16 e7 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c00107ed:	83 c4 10             	add    esp,0x10
c00107f0:	83 c4 0c             	add    esp,0xc
c00107f3:	c3                   	ret    

c00107f4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00107f4:	83 ec 0c             	sub    esp,0xc
c00107f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fb:	83 ec 08             	sub    esp,0x8
c00107fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010802:	50                   	push   eax
c0010803:	e8 d6 fd ff ff       	call   c00105de <Device::Device(char const*)>
c0010808:	83 c4 10             	add    esp,0x10
c001080b:	ba 3c 0e 02 c0       	mov    edx,0xc0020e3c
c0010810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010814:	89 10                	mov    DWORD PTR [eax],edx
c0010816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010825:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001082c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010830:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001083a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001083e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010842:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010856:	90                   	nop
c0010857:	83 c4 0c             	add    esp,0xc
c001085a:	c3                   	ret    
c001085b:	90                   	nop

c001085c <PhysicalDisk::startCache()>:
c001085c:	56                   	push   esi
c001085d:	53                   	push   ebx
c001085e:	83 ec 10             	sub    esp,0x10
c0010861:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010865:	6a 30                	push   0x30
c0010867:	e8 88 e6 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001086c:	89 c6                	mov    esi,eax
c001086e:	58                   	pop    eax
c001086f:	5a                   	pop    edx
c0010870:	53                   	push   ebx
c0010871:	56                   	push   esi
c0010872:	e8 6d 1e 00 00       	call   c00126e4 <VCache::VCache(PhysicalDisk*)>
c0010877:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001087d:	83 c4 14             	add    esp,0x14
c0010880:	5b                   	pop    ebx
c0010881:	5e                   	pop    esi
c0010882:	c3                   	ret    
c0010883:	90                   	nop

c0010884 <PhysicalDisk::~PhysicalDisk()>:
c0010884:	83 ec 0c             	sub    esp,0xc
c0010887:	ba 3c 0e 02 c0       	mov    edx,0xc0020e3c
c001088c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010890:	89 10                	mov    DWORD PTR [eax],edx
c0010892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010896:	83 ec 0c             	sub    esp,0xc
c0010899:	50                   	push   eax
c001089a:	e8 f1 f9 ff ff       	call   c0010290 <Device::~Device()>
c001089f:	83 c4 10             	add    esp,0x10
c00108a2:	90                   	nop
c00108a3:	83 c4 0c             	add    esp,0xc
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <PhysicalDisk::~PhysicalDisk()>:
c00108a8:	83 ec 0c             	sub    esp,0xc
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b2:	e8 cd ff ff ff       	call   c0010884 <PhysicalDisk::~PhysicalDisk()>
c00108b7:	83 c4 10             	add    esp,0x10
c00108ba:	83 ec 08             	sub    esp,0x8
c00108bd:	68 6c 01 00 00       	push   0x16c
c00108c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108c6:	e8 38 e6 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c00108cb:	83 c4 10             	add    esp,0x10
c00108ce:	83 c4 0c             	add    esp,0xc
c00108d1:	c3                   	ret    

c00108d2 <FPU::FPU(char const*)>:
c00108d2:	83 ec 0c             	sub    esp,0xc
c00108d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d9:	83 ec 08             	sub    esp,0x8
c00108dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e0:	50                   	push   eax
c00108e1:	e8 f8 fc ff ff       	call   c00105de <Device::Device(char const*)>
c00108e6:	83 c4 10             	add    esp,0x10
c00108e9:	ba 7c 0e 02 c0       	mov    edx,0xc0020e7c
c00108ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f2:	89 10                	mov    DWORD PTR [eax],edx
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010902:	90                   	nop
c0010903:	83 c4 0c             	add    esp,0xc
c0010906:	c3                   	ret    
c0010907:	90                   	nop

c0010908 <FPU::~FPU()>:
c0010908:	83 ec 0c             	sub    esp,0xc
c001090b:	ba 7c 0e 02 c0       	mov    edx,0xc0020e7c
c0010910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010914:	89 10                	mov    DWORD PTR [eax],edx
c0010916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091a:	83 ec 0c             	sub    esp,0xc
c001091d:	50                   	push   eax
c001091e:	e8 6d f9 ff ff       	call   c0010290 <Device::~Device()>
c0010923:	83 c4 10             	add    esp,0x10
c0010926:	90                   	nop
c0010927:	83 c4 0c             	add    esp,0xc
c001092a:	c3                   	ret    
c001092b:	90                   	nop

c001092c <FPU::~FPU()>:
c001092c:	83 ec 0c             	sub    esp,0xc
c001092f:	83 ec 0c             	sub    esp,0xc
c0010932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010936:	e8 cd ff ff ff       	call   c0010908 <FPU::~FPU()>
c001093b:	83 c4 10             	add    esp,0x10
c001093e:	83 ec 08             	sub    esp,0x8
c0010941:	68 58 01 00 00       	push   0x158
c0010946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094a:	e8 b4 e5 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001094f:	83 c4 10             	add    esp,0x10
c0010952:	83 c4 0c             	add    esp,0xc
c0010955:	c3                   	ret    

c0010956 <setupFPU()>:
c0010956:	53                   	push   ebx
c0010957:	83 ec 08             	sub    esp,0x8
c001095a:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001095f:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010966:	74 19                	je     c0010981 <setupFPU()+0x2b>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 58 01 00 00       	push   0x158
c0010970:	e8 7f e5 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0010975:	89 c3                	mov    ebx,eax
c0010977:	89 04 24             	mov    DWORD PTR [esp],eax
c001097a:	e8 a9 ca 00 00       	call   c001d428 <AVX::AVX()>
c001097f:	eb 5b                	jmp    c00109dc <setupFPU()+0x86>
c0010981:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010987:	84 c0                	test   al,al
c0010989:	79 19                	jns    c00109a4 <setupFPU()+0x4e>
c001098b:	83 ec 0c             	sub    esp,0xc
c001098e:	68 58 01 00 00       	push   0x158
c0010993:	e8 5c e5 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0010998:	89 c3                	mov    ebx,eax
c001099a:	89 04 24             	mov    DWORD PTR [esp],eax
c001099d:	e8 ac cb 00 00       	call   c001d54e <SSE::SSE()>
c00109a2:	eb 38                	jmp    c00109dc <setupFPU()+0x86>
c00109a4:	a8 20                	test   al,0x20
c00109a6:	74 19                	je     c00109c1 <setupFPU()+0x6b>
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	68 58 01 00 00       	push   0x158
c00109b0:	e8 3f e5 ff ff       	call   c000eef4 <operator new(unsigned long)>
c00109b5:	89 c3                	mov    ebx,eax
c00109b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00109ba:	e8 f9 ca 00 00       	call   c001d4b8 <MMX::MMX()>
c00109bf:	eb 1b                	jmp    c00109dc <setupFPU()+0x86>
c00109c1:	a8 10                	test   al,0x10
c00109c3:	74 1c                	je     c00109e1 <setupFPU()+0x8b>
c00109c5:	83 ec 0c             	sub    esp,0xc
c00109c8:	68 58 01 00 00       	push   0x158
c00109cd:	e8 22 e5 ff ff       	call   c000eef4 <operator new(unsigned long)>
c00109d2:	89 c3                	mov    ebx,eax
c00109d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00109d7:	e8 00 cc 00 00       	call   c001d5dc <x87::x87()>
c00109dc:	83 c4 10             	add    esp,0x10
c00109df:	eb 2c                	jmp    c0010a0d <setupFPU()+0xb7>
c00109e1:	83 ec 0c             	sub    esp,0xc
c00109e4:	31 db                	xor    ebx,ebx
c00109e6:	68 68 0e 02 c0       	push   0xc0020e68
c00109eb:	e8 f3 e5 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00109f0:	e8 7d 35 00 00       	call   c0013f72 <thisCPU()>
c00109f5:	e8 78 35 00 00       	call   c0013f72 <thisCPU()>
c00109fa:	e8 a7 e3 00 00       	call   c001eda6 <CPU::readCR0()>
c00109ff:	83 c8 04             	or     eax,0x4
c0010a02:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a05:	e8 ae e3 00 00       	call   c001edb8 <CPU::writeCR0(unsigned long)>
c0010a0a:	83 c4 10             	add    esp,0x10
c0010a0d:	89 d8                	mov    eax,ebx
c0010a0f:	83 c4 08             	add    esp,0x8
c0010a12:	5b                   	pop    ebx
c0010a13:	c3                   	ret    

c0010a14 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010a14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010a1c:	c1 e0 04             	shl    eax,0x4
c0010a1f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010a23:	8d 50 10             	lea    edx,[eax+0x10]
c0010a26:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010a2c:	74 08                	je     c0010a36 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010a2e:	83 c0 04             	add    eax,0x4
c0010a31:	39 d0                	cmp    eax,edx
c0010a33:	75 f1                	jne    c0010a26 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010a35:	c3                   	ret    
c0010a36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a40:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010a4a:	eb e2                	jmp    c0010a2e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010a4c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010a4c:	57                   	push   edi
c0010a4d:	31 c0                	xor    eax,eax
c0010a4f:	56                   	push   esi
c0010a50:	53                   	push   ebx
c0010a51:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010a55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010a5d:	89 da                	mov    edx,ebx
c0010a5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010a63:	c1 e2 04             	shl    edx,0x4
c0010a66:	01 ca                	add    edx,ecx
c0010a68:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010a70:	74 16                	je     c0010a88 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010a72:	40                   	inc    eax
c0010a73:	83 f8 04             	cmp    eax,0x4
c0010a76:	75 f0                	jne    c0010a68 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010a78:	c7 44 24 10 ac 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020eac
c0010a80:	5b                   	pop    ebx
c0010a81:	5e                   	pop    esi
c0010a82:	5f                   	pop    edi
c0010a83:	e9 f0 41 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>
c0010a88:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010a8b:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010a8e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010a94:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010a9a:	5b                   	pop    ebx
c0010a9b:	5e                   	pop    esi
c0010a9c:	5f                   	pop    edi
c0010a9d:	c3                   	ret    

c0010a9e <doubleFault(regs*, void*)>:
c0010a9e:	c7 44 24 04 dc 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fdc
c0010aa6:	e9 cd 41 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>
c0010aab:	90                   	nop

c0010aac <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010aac:	56                   	push   esi
c0010aad:	53                   	push   ebx
c0010aae:	50                   	push   eax
c0010aaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ab3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ab7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010abc:	75 35                	jne    c0010af3 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010abe:	8d 43 20             	lea    eax,[ebx+0x20]
c0010ac1:	31 d2                	xor    edx,edx
c0010ac3:	89 c1                	mov    ecx,eax
c0010ac5:	c1 e1 04             	shl    ecx,0x4
c0010ac8:	01 f1                	add    ecx,esi
c0010aca:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010ad2:	74 3e                	je     c0010b12 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010ad4:	42                   	inc    edx
c0010ad5:	83 fa 04             	cmp    edx,0x4
c0010ad8:	75 f0                	jne    c0010aca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	68 20 0f 02 c0       	push   0xc0020f20
c0010ae2:	e8 91 41 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aef:	5a                   	pop    edx
c0010af0:	5b                   	pop    ebx
c0010af1:	5e                   	pop    esi
c0010af2:	c3                   	ret    
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	56                   	push   esi
c0010af7:	e8 d4 fb ff ff       	call   c00106d0 <Device::getName()>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b02:	75 ba                	jne    c0010abe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b04:	83 fb 0f             	cmp    ebx,0xf
c0010b07:	7f 29                	jg     c0010b32 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010b09:	0f b6 9b a0 2e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd160]
c0010b10:	eb ac                	jmp    c0010abe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b12:	8d 04 82             	lea    eax,[edx+eax*4]
c0010b15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b19:	8d 04 86             	lea    eax,[esi+eax*4]
c0010b1c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010b22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b26:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010b2c:	89 d8                	mov    eax,ebx
c0010b2e:	5a                   	pop    edx
c0010b2f:	5b                   	pop    ebx
c0010b30:	5e                   	pop    esi
c0010b31:	c3                   	ret    
c0010b32:	83 ec 0c             	sub    esp,0xc
c0010b35:	68 e8 0e 02 c0       	push   0xc0020ee8
c0010b3a:	e8 39 41 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0010b3f:	83 c4 10             	add    esp,0x10
c0010b42:	e9 77 ff ff ff       	jmp    c0010abe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010b47:	90                   	nop

c0010b48 <InterruptController::clearAllHandlers(int, bool)>:
c0010b48:	56                   	push   esi
c0010b49:	53                   	push   ebx
c0010b4a:	52                   	push   edx
c0010b4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010b53:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010b58:	75 61                	jne    c0010bbb <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010b5a:	8d 46 20             	lea    eax,[esi+0x20]
c0010b5d:	c1 e6 04             	shl    esi,0x4
c0010b60:	c1 e0 04             	shl    eax,0x4
c0010b63:	01 de                	add    esi,ebx
c0010b65:	01 d8                	add    eax,ebx
c0010b67:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010b71:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010b7b:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010b85:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010b8f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010b99:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010ba3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010bad:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010bb7:	58                   	pop    eax
c0010bb8:	5b                   	pop    ebx
c0010bb9:	5e                   	pop    esi
c0010bba:	c3                   	ret    
c0010bbb:	83 ec 0c             	sub    esp,0xc
c0010bbe:	53                   	push   ebx
c0010bbf:	e8 0c fb ff ff       	call   c00106d0 <Device::getName()>
c0010bc4:	83 c4 10             	add    esp,0x10
c0010bc7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010bca:	75 8e                	jne    c0010b5a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010bcc:	83 fe 0f             	cmp    esi,0xf
c0010bcf:	7f 09                	jg     c0010bda <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010bd1:	0f b6 b6 a0 2e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd160]
c0010bd8:	eb 80                	jmp    c0010b5a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010bda:	83 ec 0c             	sub    esp,0xc
c0010bdd:	68 5c 0f 02 c0       	push   0xc0020f5c
c0010be2:	e8 91 40 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0010be7:	83 c4 10             	add    esp,0x10
c0010bea:	e9 6b ff ff ff       	jmp    c0010b5a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010bef:	90                   	nop

c0010bf0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010bf0:	56                   	push   esi
c0010bf1:	53                   	push   ebx
c0010bf2:	52                   	push   edx
c0010bf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bf7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bfb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c00:	75 3a                	jne    c0010c3c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010c02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c06:	8d 50 20             	lea    edx,[eax+0x20]
c0010c09:	c1 e2 04             	shl    edx,0x4
c0010c0c:	8d 04 16             	lea    eax,[esi+edx*1]
c0010c0f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010c13:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010c19:	74 0b                	je     c0010c26 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010c1b:	83 c0 04             	add    eax,0x4
c0010c1e:	39 d0                	cmp    eax,edx
c0010c20:	75 f1                	jne    c0010c13 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010c22:	58                   	pop    eax
c0010c23:	5b                   	pop    ebx
c0010c24:	5e                   	pop    esi
c0010c25:	c3                   	ret    
c0010c26:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c30:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c3a:	eb df                	jmp    c0010c1b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	56                   	push   esi
c0010c40:	e8 8b fa ff ff       	call   c00106d0 <Device::getName()>
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c4b:	75 b5                	jne    c0010c02 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c4d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010c52:	7f 11                	jg     c0010c65 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010c54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c58:	0f b6 80 a0 2e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd160]
c0010c5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010c63:	eb 9d                	jmp    c0010c02 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010c65:	83 ec 0c             	sub    esp,0xc
c0010c68:	68 5c 0f 02 c0       	push   0xc0020f5c
c0010c6d:	e8 06 40 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	eb 8b                	jmp    c0010c02 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010c77 <nmiHandler(regs*, void*)>:
c0010c77:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0010c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c80:	e9 c5 a6 ff ff       	jmp    c000b34a <Computer::handleNMI()>

c0010c85 <int_handler>:
c0010c85:	55                   	push   ebp
c0010c86:	57                   	push   edi
c0010c87:	56                   	push   esi
c0010c88:	53                   	push   ebx
c0010c89:	83 ec 0c             	sub    esp,0xc
c0010c8c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010c90:	80 3d 90 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024190,0x0
c0010c97:	74 0b                	je     c0010ca4 <int_handler+0x1f>
c0010c99:	fa                   	cli    
c0010c9a:	f4                   	hlt    
c0010c9b:	80 3d 90 41 02 c0 00 	cmp    BYTE PTR ds:0xc0024190,0x0
c0010ca2:	75 f5                	jne    c0010c99 <int_handler+0x14>
c0010ca4:	e8 c9 32 00 00       	call   c0013f72 <thisCPU()>
c0010ca9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010cac:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010cb2:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010cb5:	83 f8 17             	cmp    eax,0x17
c0010cb8:	77 13                	ja     c0010ccd <int_handler+0x48>
c0010cba:	83 ec 08             	sub    esp,0x8
c0010cbd:	8b 17                	mov    edx,DWORD PTR [edi]
c0010cbf:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010cc2:	0f b6 c0             	movzx  eax,al
c0010cc5:	50                   	push   eax
c0010cc6:	57                   	push   edi
c0010cc7:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010cca:	83 c4 10             	add    esp,0x10
c0010ccd:	83 c3 15             	add    ebx,0x15
c0010cd0:	c1 e3 04             	shl    ebx,0x4
c0010cd3:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010cd7:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010cde:	31 db                	xor    ebx,ebx
c0010ce0:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010ce4:	85 c0                	test   eax,eax
c0010ce6:	74 13                	je     c0010cfb <int_handler+0x76>
c0010ce8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010ceb:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010cef:	74 1c                	je     c0010d0d <int_handler+0x88>
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	52                   	push   edx
c0010cf5:	56                   	push   esi
c0010cf6:	ff d0                	call   eax
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	43                   	inc    ebx
c0010cfc:	83 fb 04             	cmp    ebx,0x4
c0010cff:	75 df                	jne    c0010ce0 <int_handler+0x5b>
c0010d01:	83 c4 0c             	add    esp,0xc
c0010d04:	31 c0                	xor    eax,eax
c0010d06:	5b                   	pop    ebx
c0010d07:	31 d2                	xor    edx,edx
c0010d09:	5e                   	pop    esi
c0010d0a:	5f                   	pop    edi
c0010d0b:	5d                   	pop    ebp
c0010d0c:	c3                   	ret    
c0010d0d:	83 ec 08             	sub    esp,0x8
c0010d10:	52                   	push   edx
c0010d11:	56                   	push   esi
c0010d12:	ff d0                	call   eax
c0010d14:	83 c4 10             	add    esp,0x10
c0010d17:	83 c4 0c             	add    esp,0xc
c0010d1a:	5b                   	pop    ebx
c0010d1b:	5e                   	pop    esi
c0010d1c:	5f                   	pop    edi
c0010d1d:	5d                   	pop    ebp
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <InterruptController::InterruptController(char const*)>:
c0010d20:	83 ec 1c             	sub    esp,0x1c
c0010d23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d27:	83 ec 08             	sub    esp,0x8
c0010d2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d2e:	50                   	push   eax
c0010d2f:	e8 aa f8 ff ff       	call   c00105de <Device::Device(char const*)>
c0010d34:	83 c4 10             	add    esp,0x10
c0010d37:	ba 78 11 02 c0       	mov    edx,0xc0021178
c0010d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d40:	89 10                	mov    DWORD PTR [eax],edx
c0010d42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d46:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010d50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d58:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010d60:	7f 5e                	jg     c0010dc0 <InterruptController::InterruptController(char const*)+0xa0>
c0010d62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d6a:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010d6f:	7f 49                	jg     c0010dba <InterruptController::InterruptController(char const*)+0x9a>
c0010d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d79:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010d80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d84:	01 ca                	add    edx,ecx
c0010d86:	83 c2 54             	add    edx,0x54
c0010d89:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010d99:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010da0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010da4:	01 ca                	add    edx,ecx
c0010da6:	81 c2 54 04 00 00    	add    edx,0x454
c0010dac:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010db4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010db8:	eb b0                	jmp    c0010d6a <InterruptController::InterruptController(char const*)+0x4a>
c0010dba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010dbe:	eb 98                	jmp    c0010d58 <InterruptController::InterruptController(char const*)+0x38>
c0010dc0:	90                   	nop
c0010dc1:	83 c4 1c             	add    esp,0x1c
c0010dc4:	c3                   	ret    
c0010dc5:	90                   	nop

c0010dc6 <InterruptController::~InterruptController()>:
c0010dc6:	83 ec 0c             	sub    esp,0xc
c0010dc9:	ba 78 11 02 c0       	mov    edx,0xc0021178
c0010dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd2:	89 10                	mov    DWORD PTR [eax],edx
c0010dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd8:	83 ec 0c             	sub    esp,0xc
c0010ddb:	50                   	push   eax
c0010ddc:	e8 af f4 ff ff       	call   c0010290 <Device::~Device()>
c0010de1:	83 c4 10             	add    esp,0x10
c0010de4:	90                   	nop
c0010de5:	83 c4 0c             	add    esp,0xc
c0010de8:	c3                   	ret    
c0010de9:	90                   	nop

c0010dea <InterruptController::~InterruptController()>:
c0010dea:	83 ec 0c             	sub    esp,0xc
c0010ded:	83 ec 0c             	sub    esp,0xc
c0010df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df4:	e8 cd ff ff ff       	call   c0010dc6 <InterruptController::~InterruptController()>
c0010df9:	83 c4 10             	add    esp,0x10
c0010dfc:	83 ec 08             	sub    esp,0x8
c0010dff:	68 58 21 00 00       	push   0x2158
c0010e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e08:	e8 f6 e0 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0010e0d:	83 c4 10             	add    esp,0x10
c0010e10:	83 c4 0c             	add    esp,0xc
c0010e13:	c3                   	ret    

c0010e14 <displayDebugInfo(regs*)>:
c0010e14:	55                   	push   ebp
c0010e15:	57                   	push   edi
c0010e16:	56                   	push   esi
c0010e17:	53                   	push   ebx
c0010e18:	83 ec 24             	sub    esp,0x24
c0010e1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010e1f:	0f 20 c2             	mov    edx,cr0
c0010e22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e26:	0f 20 d7             	mov    edi,cr2
c0010e29:	0f 20 de             	mov    esi,cr3
c0010e2c:	0f 20 e5             	mov    ebp,cr4
c0010e2f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010e32:	68 e9 0f 02 c0       	push   0xc0020fe9
c0010e37:	e8 a7 e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e3c:	58                   	pop    eax
c0010e3d:	5a                   	pop    edx
c0010e3e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e41:	68 f4 0f 02 c0       	push   0xc0020ff4
c0010e46:	e8 98 e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e4b:	59                   	pop    ecx
c0010e4c:	58                   	pop    eax
c0010e4d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010e50:	68 ff 0f 02 c0       	push   0xc0020fff
c0010e55:	e8 89 e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e5a:	58                   	pop    eax
c0010e5b:	5a                   	pop    edx
c0010e5c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010e5f:	68 0a 10 02 c0       	push   0xc002100a
c0010e64:	e8 7a e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e69:	59                   	pop    ecx
c0010e6a:	58                   	pop    eax
c0010e6b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e6e:	68 15 10 02 c0       	push   0xc0021015
c0010e73:	e8 6b e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e78:	58                   	pop    eax
c0010e79:	5a                   	pop    edx
c0010e7a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010e7d:	68 20 10 02 c0       	push   0xc0021020
c0010e82:	e8 5c e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e87:	59                   	pop    ecx
c0010e88:	58                   	pop    eax
c0010e89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010e8c:	68 3a 10 02 c0       	push   0xc002103a
c0010e91:	e8 4d e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010e96:	58                   	pop    eax
c0010e97:	5a                   	pop    edx
c0010e98:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e9b:	68 2b 10 02 c0       	push   0xc002102b
c0010ea0:	e8 3e e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010ea5:	59                   	pop    ecx
c0010ea6:	58                   	pop    eax
c0010ea7:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010eaa:	68 36 10 02 c0       	push   0xc0021036
c0010eaf:	e8 2f e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010eb4:	58                   	pop    eax
c0010eb5:	5a                   	pop    edx
c0010eb6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010eb9:	68 45 10 02 c0       	push   0xc0021045
c0010ebe:	e8 20 e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010ec3:	59                   	pop    ecx
c0010ec4:	58                   	pop    eax
c0010ec5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ec8:	68 50 10 02 c0       	push   0xc0021050
c0010ecd:	e8 11 e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010ed2:	58                   	pop    eax
c0010ed3:	5a                   	pop    edx
c0010ed4:	57                   	push   edi
c0010ed5:	68 5b 10 02 c0       	push   0xc002105b
c0010eda:	e8 04 e1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010edf:	59                   	pop    ecx
c0010ee0:	58                   	pop    eax
c0010ee1:	56                   	push   esi
c0010ee2:	68 66 10 02 c0       	push   0xc0021066
c0010ee7:	e8 f7 e0 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0010eec:	58                   	pop    eax
c0010eed:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010ef2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ef8:	e8 b8 bf ff ff       	call   c000ceb5 <setActiveTerminal(VgaText*)>
c0010efd:	58                   	pop    eax
c0010efe:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0010f01:	5a                   	pop    edx
c0010f02:	c1 e0 05             	shl    eax,0x5
c0010f05:	05 00 2c 02 c0       	add    eax,0xc0022c00
c0010f0a:	50                   	push   eax
c0010f0b:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f16:	e8 b9 c3 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010f1b:	59                   	pop    ecx
c0010f1c:	58                   	pop    eax
c0010f1d:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f22:	68 71 10 02 c0       	push   0xc0021071
c0010f27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f2d:	e8 a2 c3 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010f32:	58                   	pop    eax
c0010f33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f38:	5a                   	pop    edx
c0010f39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f3c:	83 c0 0c             	add    eax,0xc
c0010f3f:	50                   	push   eax
c0010f40:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f4b:	e8 84 c3 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010f50:	59                   	pop    ecx
c0010f51:	58                   	pop    eax
c0010f52:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f57:	68 7a 10 02 c0       	push   0xc002107a
c0010f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f62:	e8 6d c3 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010f67:	58                   	pop    eax
c0010f68:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f6d:	5a                   	pop    edx
c0010f6e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010f71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f77:	e8 7e c3 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0010f7c:	59                   	pop    ecx
c0010f7d:	58                   	pop    eax
c0010f7e:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f83:	68 82 10 02 c0       	push   0xc0021082
c0010f88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010f8e:	e8 41 c3 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010f93:	58                   	pop    eax
c0010f94:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010f99:	5a                   	pop    edx
c0010f9a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010f9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fa3:	e8 52 c3 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0010fa8:	59                   	pop    ecx
c0010fa9:	58                   	pop    eax
c0010faa:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010faf:	68 8a 10 02 c0       	push   0xc002108a
c0010fb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fba:	e8 15 c3 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010fbf:	58                   	pop    eax
c0010fc0:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010fc5:	5a                   	pop    edx
c0010fc6:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fcf:	e8 26 c3 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0010fd4:	59                   	pop    ecx
c0010fd5:	58                   	pop    eax
c0010fd6:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010fdb:	68 92 10 02 c0       	push   0xc0021092
c0010fe0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010fe6:	e8 e9 c2 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0010feb:	58                   	pop    eax
c0010fec:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0010ff1:	5a                   	pop    edx
c0010ff2:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0010ff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0010ffb:	e8 fa c2 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011000:	59                   	pop    ecx
c0011001:	58                   	pop    eax
c0011002:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011007:	68 9a 10 02 c0       	push   0xc002109a
c001100c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011012:	e8 bd c2 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0011017:	58                   	pop    eax
c0011018:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001101d:	5a                   	pop    edx
c001101e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011021:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011027:	e8 ce c2 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c001102c:	59                   	pop    ecx
c001102d:	58                   	pop    eax
c001102e:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011033:	68 a2 10 02 c0       	push   0xc00210a2
c0011038:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001103e:	e8 91 c2 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0011043:	58                   	pop    eax
c0011044:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011049:	5a                   	pop    edx
c001104a:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001104d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011053:	e8 a2 c2 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011058:	59                   	pop    ecx
c0011059:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001105e:	5b                   	pop    ebx
c001105f:	68 aa 10 02 c0       	push   0xc00210aa
c0011064:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001106a:	e8 65 c2 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c001106f:	58                   	pop    eax
c0011070:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011075:	5a                   	pop    edx
c0011076:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001107a:	52                   	push   edx
c001107b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011081:	e8 74 c2 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011086:	59                   	pop    ecx
c0011087:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001108c:	5b                   	pop    ebx
c001108d:	68 b3 10 02 c0       	push   0xc00210b3
c0011092:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011098:	e8 37 c2 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c001109d:	58                   	pop    eax
c001109e:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00110a3:	5a                   	pop    edx
c00110a4:	57                   	push   edi
c00110a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ab:	e8 4a c2 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c00110b0:	59                   	pop    ecx
c00110b1:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00110b6:	5b                   	pop    ebx
c00110b7:	68 bb 10 02 c0       	push   0xc00210bb
c00110bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110c2:	e8 0d c2 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c00110c7:	5f                   	pop    edi
c00110c8:	58                   	pop    eax
c00110c9:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00110ce:	56                   	push   esi
c00110cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d5:	e8 20 c2 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c00110da:	58                   	pop    eax
c00110db:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00110e0:	5a                   	pop    edx
c00110e1:	68 c3 10 02 c0       	push   0xc00210c3
c00110e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ec:	e8 e3 c1 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c00110f1:	59                   	pop    ecx
c00110f2:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00110f7:	5b                   	pop    ebx
c00110f8:	55                   	push   ebp
c00110f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ff:	e8 f6 c1 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011104:	5e                   	pop    esi
c0011105:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001110a:	5f                   	pop    edi
c001110b:	68 cb 10 02 c0       	push   0xc00210cb
c0011110:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011116:	e8 b9 c1 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c001111b:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011120:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011126:	e8 96 dc 00 00       	call   c001edc1 <CPU::readDR0()>
c001112b:	5d                   	pop    ebp
c001112c:	5a                   	pop    edx
c001112d:	50                   	push   eax
c001112e:	53                   	push   ebx
c001112f:	e8 c6 c1 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011134:	59                   	pop    ecx
c0011135:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001113a:	5b                   	pop    ebx
c001113b:	68 d4 10 02 c0       	push   0xc00210d4
c0011140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011146:	e8 89 c1 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c001114b:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011150:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011156:	e8 78 dc 00 00       	call   c001edd3 <CPU::readDR1()>
c001115b:	5e                   	pop    esi
c001115c:	5f                   	pop    edi
c001115d:	50                   	push   eax
c001115e:	53                   	push   ebx
c001115f:	e8 96 c1 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011164:	5d                   	pop    ebp
c0011165:	58                   	pop    eax
c0011166:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001116b:	68 dc 10 02 c0       	push   0xc00210dc
c0011170:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011176:	e8 59 c1 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c001117b:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011180:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011186:	e8 5a dc 00 00       	call   c001ede5 <CPU::readDR2()>
c001118b:	5a                   	pop    edx
c001118c:	59                   	pop    ecx
c001118d:	50                   	push   eax
c001118e:	53                   	push   ebx
c001118f:	e8 66 c1 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011194:	5b                   	pop    ebx
c0011195:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c001119a:	5e                   	pop    esi
c001119b:	68 e4 10 02 c0       	push   0xc00210e4
c00111a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a6:	e8 29 c1 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c00111ab:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00111b0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111b6:	e8 3c dc 00 00       	call   c001edf7 <CPU::readDR3()>
c00111bb:	5f                   	pop    edi
c00111bc:	5d                   	pop    ebp
c00111bd:	50                   	push   eax
c00111be:	53                   	push   ebx
c00111bf:	e8 36 c1 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c00111c4:	58                   	pop    eax
c00111c5:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00111ca:	5a                   	pop    edx
c00111cb:	68 ec 10 02 c0       	push   0xc00210ec
c00111d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d6:	e8 f9 c0 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c00111db:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00111e0:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111e6:	e8 1e dc 00 00       	call   c001ee09 <CPU::readDR6()>
c00111eb:	59                   	pop    ecx
c00111ec:	5e                   	pop    esi
c00111ed:	50                   	push   eax
c00111ee:	53                   	push   ebx
c00111ef:	e8 06 c1 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c00111f4:	5f                   	pop    edi
c00111f5:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00111fa:	5d                   	pop    ebp
c00111fb:	68 f4 10 02 c0       	push   0xc00210f4
c0011200:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011206:	e8 c9 c0 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c001120b:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0011210:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011216:	e8 00 dc 00 00       	call   c001ee1b <CPU::readDR7()>
c001121b:	5a                   	pop    edx
c001121c:	59                   	pop    ecx
c001121d:	50                   	push   eax
c001121e:	53                   	push   ebx
c001121f:	e8 d6 c0 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0011224:	fa                   	cli    
c0011225:	f4                   	hlt    
c0011226:	83 c4 10             	add    esp,0x10
c0011229:	eb fe                	jmp    c0011229 <displayDebugInfo(regs*)+0x415>

c001122b <x87EmulHandler(regs*, void*)>:
c001122b:	53                   	push   ebx
c001122c:	83 ec 08             	sub    esp,0x8
c001122f:	a1 d4 38 02 c0       	mov    eax,ds:0xc00238d4
c0011234:	85 c0                	test   eax,eax
c0011236:	74 15                	je     c001124d <x87EmulHandler(regs*, void*)+0x22>
c0011238:	83 ec 0c             	sub    esp,0xc
c001123b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001123f:	ff d0                	call   eax
c0011241:	83 c4 10             	add    esp,0x10
c0011244:	84 c0                	test   al,al
c0011246:	74 2f                	je     c0011277 <x87EmulHandler(regs*, void*)+0x4c>
c0011248:	83 c4 08             	add    esp,0x8
c001124b:	5b                   	pop    ebx
c001124c:	c3                   	ret    
c001124d:	83 ec 08             	sub    esp,0x8
c0011250:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c0011256:	6a 01                	push   0x1
c0011258:	68 fc 10 02 c0       	push   0xc00210fc
c001125d:	e8 f5 63 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c0011262:	5a                   	pop    edx
c0011263:	59                   	pop    ecx
c0011264:	53                   	push   ebx
c0011265:	50                   	push   eax
c0011266:	e8 3f 65 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c001126b:	a1 d4 38 02 c0       	mov    eax,ds:0xc00238d4
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	85 c0                	test   eax,eax
c0011275:	75 c1                	jne    c0011238 <x87EmulHandler(regs*, void*)+0xd>
c0011277:	83 ec 0c             	sub    esp,0xc
c001127a:	68 19 11 02 c0       	push   0xc0021119
c001127f:	e8 5f dd ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0011284:	58                   	pop    eax
c0011285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011289:	e8 86 fb ff ff       	call   c0010e14 <displayDebugInfo(regs*)>

c001128e <gpFault(regs*, void*)>:
c001128e:	53                   	push   ebx
c001128f:	83 ec 14             	sub    esp,0x14
c0011292:	c7 05 d0 38 02 c0 27 8c 01 c0 	mov    DWORD PTR ds:0xc00238d0,0xc0018c27
c001129c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00112a0:	53                   	push   ebx
c00112a1:	e8 81 79 00 00       	call   c0018c27 <Vm::faultHandler(regs*)>
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	84 c0                	test   al,al
c00112ab:	74 05                	je     c00112b2 <gpFault(regs*, void*)+0x24>
c00112ad:	83 c4 08             	add    esp,0x8
c00112b0:	5b                   	pop    ebx
c00112b1:	c3                   	ret    
c00112b2:	83 ec 0c             	sub    esp,0xc
c00112b5:	68 19 11 02 c0       	push   0xc0021119
c00112ba:	e8 24 dd ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00112bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112c2:	e8 4d fb ff ff       	call   c0010e14 <displayDebugInfo(regs*)>

c00112c7 <pgFault(regs*, void*)>:
c00112c7:	83 ec 18             	sub    esp,0x18
c00112ca:	68 34 11 02 c0       	push   0xc0021134
c00112cf:	e8 0f dd ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00112d4:	58                   	pop    eax
c00112d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d9:	e8 36 fb ff ff       	call   c0010e14 <displayDebugInfo(regs*)>

c00112de <otherISRHandler(regs*, void*)>:
c00112de:	53                   	push   ebx
c00112df:	83 ec 0c             	sub    esp,0xc
c00112e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00112e6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00112e9:	50                   	push   eax
c00112ea:	50                   	push   eax
c00112eb:	68 41 11 02 c0       	push   0xc0021141
c00112f0:	e8 ee dc ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00112f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112f8:	e8 17 fb ff ff       	call   c0010e14 <displayDebugInfo(regs*)>

c00112fd <opcodeFault(regs*, void*)>:
c00112fd:	53                   	push   ebx
c00112fe:	83 ec 08             	sub    esp,0x8
c0011301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011305:	e8 68 2c 00 00       	call   c0013f72 <thisCPU()>
c001130a:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011311:	74 16                	je     c0011329 <opcodeFault(regs*, void*)+0x2c>
c0011313:	83 ec 0c             	sub    esp,0xc
c0011316:	68 98 0f 02 c0       	push   0xc0020f98
c001131b:	e8 c3 dc ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0011320:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011324:	83 c4 18             	add    esp,0x18
c0011327:	5b                   	pop    ebx
c0011328:	c3                   	ret    
c0011329:	83 ec 0c             	sub    esp,0xc
c001132c:	68 5e 11 02 c0       	push   0xc002115e
c0011331:	e8 ad dc ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0011336:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0011339:	c1 e0 04             	shl    eax,0x4
c001133c:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001133f:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0011343:	89 14 24             	mov    DWORD PTR [esp],edx
c0011346:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001134a:	52                   	push   edx
c001134b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001134f:	52                   	push   edx
c0011350:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011353:	50                   	push   eax
c0011354:	68 bc 0f 02 c0       	push   0xc0020fbc
c0011359:	e8 85 dc ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001135e:	83 c4 14             	add    esp,0x14
c0011361:	53                   	push   ebx
c0011362:	e8 ad fa ff ff       	call   c0010e14 <displayDebugInfo(regs*)>

c0011367 <displayProgramFault(char const*)>:
c0011367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001136c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001136f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011375:	85 c0                	test   eax,eax
c0011377:	74 15                	je     c001138e <displayProgramFault(char const*)+0x27>
c0011379:	83 ec 0c             	sub    esp,0xc
c001137c:	6a 04                	push   0x4
c001137e:	6a 0f                	push   0xf
c0011380:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011384:	50                   	push   eax
c0011385:	e8 0c bc ff ff       	call   c000cf96 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001138a:	83 c4 1c             	add    esp,0x1c
c001138d:	c3                   	ret    
c001138e:	c3                   	ret    
c001138f:	90                   	nop

c0011390 <InterruptController::convertLegacyIRQNumber(int)>:
c0011390:	53                   	push   ebx
c0011391:	83 ec 14             	sub    esp,0x14
c0011394:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001139c:	e8 2f f3 ff ff       	call   c00106d0 <Device::getName()>
c00113a1:	83 c4 10             	add    esp,0x10
c00113a4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00113a7:	74 07                	je     c00113b0 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00113a9:	89 d8                	mov    eax,ebx
c00113ab:	83 c4 08             	add    esp,0x8
c00113ae:	5b                   	pop    ebx
c00113af:	c3                   	ret    
c00113b0:	83 fb 0f             	cmp    ebx,0xf
c00113b3:	7f 0e                	jg     c00113c3 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00113b5:	0f b6 9b a0 2e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd160]
c00113bc:	83 c4 08             	add    esp,0x8
c00113bf:	89 d8                	mov    eax,ebx
c00113c1:	5b                   	pop    ebx
c00113c2:	c3                   	ret    
c00113c3:	83 ec 0c             	sub    esp,0xc
c00113c6:	68 e8 0e 02 c0       	push   0xc0020ee8
c00113cb:	e8 a8 38 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c00113d0:	89 d8                	mov    eax,ebx
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	83 c4 08             	add    esp,0x8
c00113d8:	5b                   	pop    ebx
c00113d9:	c3                   	ret    

c00113da <setupInterruptController()>:
c00113da:	56                   	push   esi
c00113db:	53                   	push   ebx
c00113dc:	51                   	push   ecx
c00113dd:	e8 8d 2b 00 00       	call   c0013f6f <getCPUNumber()>
c00113e2:	85 c0                	test   eax,eax
c00113e4:	0f 85 10 02 00 00    	jne    c00115fa <setupInterruptController()+0x220>
c00113ea:	83 ec 0c             	sub    esp,0xc
c00113ed:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00113f2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00113f8:	68 58 21 00 00       	push   0x2158
c00113fd:	83 e0 01             	and    eax,0x1
c0011400:	89 c6                	mov    esi,eax
c0011402:	e8 ed da ff ff       	call   c000eef4 <operator new(unsigned long)>
c0011407:	89 04 24             	mov    DWORD PTR [esp],eax
c001140a:	89 c3                	mov    ebx,eax
c001140c:	e8 37 c8 00 00       	call   c001dc48 <PIC::PIC()>
c0011411:	6a 00                	push   0x0
c0011413:	6a 00                	push   0x0
c0011415:	6a 00                	push   0x0
c0011417:	53                   	push   ebx
c0011418:	e8 6f cb 00 00       	call   c001df8c <PIC::open(int, int, void*)>
c001141d:	83 c4 20             	add    esp,0x20
c0011420:	89 f0                	mov    eax,esi
c0011422:	84 c0                	test   al,al
c0011424:	0f 85 92 01 00 00    	jne    c00115bc <setupInterruptController()+0x1e2>
c001142a:	83 ec 08             	sub    esp,0x8
c001142d:	53                   	push   ebx
c001142e:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0011434:	e8 b5 ef ff ff       	call   c00103ee <Device::addChild(Device*)>
c0011439:	8b 03                	mov    eax,DWORD PTR [ebx]
c001143b:	6a 00                	push   0x0
c001143d:	68 de 12 01 c0       	push   0xc00112de
c0011442:	6a 00                	push   0x0
c0011444:	53                   	push   ebx
c0011445:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011448:	83 c4 20             	add    esp,0x20
c001144b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001144d:	6a 00                	push   0x0
c001144f:	68 de 12 01 c0       	push   0xc00112de
c0011454:	6a 01                	push   0x1
c0011456:	53                   	push   ebx
c0011457:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001145a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001145c:	6a 00                	push   0x0
c001145e:	68 77 0c 01 c0       	push   0xc0010c77
c0011463:	6a 02                	push   0x2
c0011465:	53                   	push   ebx
c0011466:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011469:	83 c4 20             	add    esp,0x20
c001146c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001146e:	6a 00                	push   0x0
c0011470:	68 de 12 01 c0       	push   0xc00112de
c0011475:	6a 03                	push   0x3
c0011477:	53                   	push   ebx
c0011478:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001147b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001147d:	6a 00                	push   0x0
c001147f:	68 de 12 01 c0       	push   0xc00112de
c0011484:	6a 04                	push   0x4
c0011486:	53                   	push   ebx
c0011487:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001148a:	83 c4 20             	add    esp,0x20
c001148d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001148f:	6a 00                	push   0x0
c0011491:	68 de 12 01 c0       	push   0xc00112de
c0011496:	6a 05                	push   0x5
c0011498:	53                   	push   ebx
c0011499:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001149c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001149e:	6a 00                	push   0x0
c00114a0:	68 fd 12 01 c0       	push   0xc00112fd
c00114a5:	6a 06                	push   0x6
c00114a7:	53                   	push   ebx
c00114a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ab:	83 c4 20             	add    esp,0x20
c00114ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114b0:	6a 00                	push   0x0
c00114b2:	68 2b 12 01 c0       	push   0xc001122b
c00114b7:	6a 07                	push   0x7
c00114b9:	53                   	push   ebx
c00114ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114bf:	6a 00                	push   0x0
c00114c1:	68 9e 0a 01 c0       	push   0xc0010a9e
c00114c6:	6a 08                	push   0x8
c00114c8:	53                   	push   ebx
c00114c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114cc:	83 c4 20             	add    esp,0x20
c00114cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114d1:	6a 00                	push   0x0
c00114d3:	68 de 12 01 c0       	push   0xc00112de
c00114d8:	6a 09                	push   0x9
c00114da:	53                   	push   ebx
c00114db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e0:	6a 00                	push   0x0
c00114e2:	68 de 12 01 c0       	push   0xc00112de
c00114e7:	6a 0a                	push   0xa
c00114e9:	53                   	push   ebx
c00114ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ed:	83 c4 20             	add    esp,0x20
c00114f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f2:	6a 00                	push   0x0
c00114f4:	68 de 12 01 c0       	push   0xc00112de
c00114f9:	6a 0b                	push   0xb
c00114fb:	53                   	push   ebx
c00114fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011501:	6a 00                	push   0x0
c0011503:	68 de 12 01 c0       	push   0xc00112de
c0011508:	6a 0c                	push   0xc
c001150a:	53                   	push   ebx
c001150b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001150e:	83 c4 20             	add    esp,0x20
c0011511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011513:	6a 00                	push   0x0
c0011515:	68 8e 12 01 c0       	push   0xc001128e
c001151a:	6a 0d                	push   0xd
c001151c:	53                   	push   ebx
c001151d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011520:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011522:	6a 00                	push   0x0
c0011524:	68 c7 12 01 c0       	push   0xc00112c7
c0011529:	6a 0e                	push   0xe
c001152b:	53                   	push   ebx
c001152c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001152f:	83 c4 20             	add    esp,0x20
c0011532:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011534:	6a 00                	push   0x0
c0011536:	68 de 12 01 c0       	push   0xc00112de
c001153b:	6a 0f                	push   0xf
c001153d:	53                   	push   ebx
c001153e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011541:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011543:	6a 00                	push   0x0
c0011545:	68 de 12 01 c0       	push   0xc00112de
c001154a:	6a 10                	push   0x10
c001154c:	53                   	push   ebx
c001154d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011550:	83 c4 20             	add    esp,0x20
c0011553:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011555:	6a 00                	push   0x0
c0011557:	68 de 12 01 c0       	push   0xc00112de
c001155c:	6a 11                	push   0x11
c001155e:	53                   	push   ebx
c001155f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011562:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011564:	6a 00                	push   0x0
c0011566:	68 de 12 01 c0       	push   0xc00112de
c001156b:	6a 12                	push   0x12
c001156d:	53                   	push   ebx
c001156e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011571:	83 c4 20             	add    esp,0x20
c0011574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011576:	6a 00                	push   0x0
c0011578:	68 de 12 01 c0       	push   0xc00112de
c001157d:	6a 13                	push   0x13
c001157f:	53                   	push   ebx
c0011580:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011583:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011585:	6a 00                	push   0x0
c0011587:	68 de 12 01 c0       	push   0xc00112de
c001158c:	6a 14                	push   0x14
c001158e:	53                   	push   ebx
c001158f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011592:	83 c4 20             	add    esp,0x20
c0011595:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011597:	6a 00                	push   0x0
c0011599:	68 de 12 01 c0       	push   0xc00112de
c001159e:	6a 1e                	push   0x1e
c00115a0:	53                   	push   ebx
c00115a1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115a6:	6a 00                	push   0x0
c00115a8:	68 5b 66 01 c0       	push   0xc001665b
c00115ad:	6a 60                	push   0x60
c00115af:	53                   	push   ebx
c00115b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115b3:	83 c4 20             	add    esp,0x20
c00115b6:	89 d8                	mov    eax,ebx
c00115b8:	5a                   	pop    edx
c00115b9:	5b                   	pop    ebx
c00115ba:	5e                   	pop    esi
c00115bb:	c3                   	ret    
c00115bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115be:	6a 00                	push   0x0
c00115c0:	6a 00                	push   0x0
c00115c2:	6a 00                	push   0x0
c00115c4:	53                   	push   ebx
c00115c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00115c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115cd:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00115d0:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00115d7:	e8 18 d9 ff ff       	call   c000eef4 <operator new(unsigned long)>
c00115dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00115df:	89 c3                	mov    ebx,eax
c00115e1:	e8 a0 c1 00 00       	call   c001d786 <APIC::APIC()>
c00115e6:	6a 00                	push   0x0
c00115e8:	6a 00                	push   0x0
c00115ea:	6a 00                	push   0x0
c00115ec:	53                   	push   ebx
c00115ed:	e8 b2 c0 00 00       	call   c001d6a4 <APIC::open(int, int, void*)>
c00115f2:	83 c4 20             	add    esp,0x20
c00115f5:	e9 30 fe ff ff       	jmp    c001142a <setupInterruptController()+0x50>
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	68 58 21 00 00       	push   0x2158
c0011602:	e8 ed d8 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0011607:	89 04 24             	mov    DWORD PTR [esp],eax
c001160a:	89 c3                	mov    ebx,eax
c001160c:	e8 75 c1 00 00       	call   c001d786 <APIC::APIC()>
c0011611:	6a 00                	push   0x0
c0011613:	6a 00                	push   0x0
c0011615:	6a 00                	push   0x0
c0011617:	53                   	push   ebx
c0011618:	e8 87 c0 00 00       	call   c001d6a4 <APIC::open(int, int, void*)>
c001161d:	83 c4 18             	add    esp,0x18
c0011620:	53                   	push   ebx
c0011621:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0011627:	e8 c2 ed ff ff       	call   c00103ee <Device::addChild(Device*)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	89 d8                	mov    eax,ebx
c0011631:	5a                   	pop    edx
c0011632:	5b                   	pop    ebx
c0011633:	5e                   	pop    esi
c0011634:	c3                   	ret    
c0011635:	90                   	nop

c0011636 <startGUI(void*)>:
c0011636:	55                   	push   ebp
c0011637:	89 e5                	mov    ebp,esp
c0011639:	53                   	push   ebx
c001163a:	83 ec 04             	sub    esp,0x4
c001163d:	e8 74 65 00 00       	call   c0017bb6 <unlockScheduler()>
c0011642:	e8 58 65 00 00       	call   c0017b9f <getIRQNestingLevel()>
c0011647:	83 ec 08             	sub    esp,0x8
c001164a:	50                   	push   eax
c001164b:	68 b8 11 02 c0       	push   0xc00211b8
c0011650:	e8 8e d9 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c001165e:	83 ec 08             	sub    esp,0x8
c0011661:	6a 01                	push   0x1
c0011663:	68 d2 11 02 c0       	push   0xc00211d2
c0011668:	e8 ea 5f 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c001166d:	83 c4 10             	add    esp,0x10
c0011670:	83 ec 08             	sub    esp,0x8
c0011673:	53                   	push   ebx
c0011674:	50                   	push   eax
c0011675:	e8 30 61 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c001167a:	83 c4 10             	add    esp,0x10
c001167d:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c0011683:	83 ec 08             	sub    esp,0x8
c0011686:	6a 01                	push   0x1
c0011688:	68 ec 11 02 c0       	push   0xc00211ec
c001168d:	e8 c5 5f 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c0011692:	83 c4 10             	add    esp,0x10
c0011695:	83 ec 08             	sub    esp,0x8
c0011698:	53                   	push   ebx
c0011699:	50                   	push   eax
c001169a:	e8 0b 61 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	90                   	nop
c00116a3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00116a6:	c9                   	leave  
c00116a7:	c3                   	ret    

c00116a8 <sendKeyToTerminal(unsigned char)>:
c00116a8:	55                   	push   ebp
c00116a9:	89 e5                	mov    ebp,esp
c00116ab:	83 ec 28             	sub    esp,0x28
c00116ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00116b4:	a1 04 38 02 c0       	mov    eax,ds:0xc0023804
c00116b9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00116bd:	83 ec 08             	sub    esp,0x8
c00116c0:	52                   	push   edx
c00116c1:	50                   	push   eax
c00116c2:	e8 0b be ff ff       	call   c000d4d2 <VgaText::receiveKey(unsigned char)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00116ce:	75 41                	jne    c0011711 <sendKeyToTerminal(unsigned char)+0x69>
c00116d0:	e8 06 65 00 00       	call   c0017bdb <lockStuff()>
c00116d5:	a1 e0 38 02 c0       	mov    eax,ds:0xc00238e0
c00116da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00116dd:	c7 05 e0 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238e0,0x0
c00116e7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00116eb:	74 1f                	je     c001170c <sendKeyToTerminal(unsigned char)+0x64>
c00116ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116f0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00116f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00116f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011702:	e8 bd 6c 00 00       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c0011707:	83 c4 10             	add    esp,0x10
c001170a:	eb db                	jmp    c00116e7 <sendKeyToTerminal(unsigned char)+0x3f>
c001170c:	e8 5c 68 00 00       	call   c0017f6d <unlockStuff()>
c0011711:	90                   	nop
c0011712:	c9                   	leave  
c0011713:	c3                   	ret    

c0011714 <sendKeyboardToken(KeyboardToken)>:
c0011714:	55                   	push   ebp
c0011715:	89 e5                	mov    ebp,esp
c0011717:	83 ec 18             	sub    esp,0x18
c001171a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001171d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011720:	0f b7 c0             	movzx  eax,ax
c0011723:	83 f2 01             	xor    edx,0x1
c0011726:	88 90 00 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc700],dl
c001172c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001172f:	66 3d 03 02          	cmp    ax,0x203
c0011733:	75 07                	jne    c001173c <sendKeyboardToken(KeyboardToken)+0x28>
c0011735:	a0 00 3a 02 c0       	mov    al,ds:0xc0023a00
c001173a:	84 c0                	test   al,al
c001173c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011740:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011743:	a0 08 3d 02 c0       	mov    al,ds:0xc0023d08
c0011748:	38 c2                	cmp    dl,al
c001174a:	74 1c                	je     c0011768 <sendKeyboardToken(KeyboardToken)+0x54>
c001174c:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001174f:	a2 08 3d 02 c0       	mov    ds:0xc0023d08,al
c0011754:	a0 08 3d 02 c0       	mov    al,ds:0xc0023d08
c0011759:	0f b6 c0             	movzx  eax,al
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	50                   	push   eax
c0011760:	e8 db af ff ff       	call   c000c740 <setTerminalScrollLock(bool)>
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001176b:	84 c0                	test   al,al
c001176d:	0f 84 ae 00 00 00    	je     c0011821 <sendKeyboardToken(KeyboardToken)+0x10d>
c0011773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011776:	66 3d 10 03          	cmp    ax,0x310
c001177a:	75 06                	jne    c0011782 <sendKeyboardToken(KeyboardToken)+0x6e>
c001177c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011785:	66 3d 11 03          	cmp    ax,0x311
c0011789:	75 06                	jne    c0011791 <sendKeyboardToken(KeyboardToken)+0x7d>
c001178b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011794:	66 3d 12 03          	cmp    ax,0x312
c0011798:	75 06                	jne    c00117a0 <sendKeyboardToken(KeyboardToken)+0x8c>
c001179a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00117a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a3:	66 3d 13 03          	cmp    ax,0x313
c00117a7:	75 06                	jne    c00117af <sendKeyboardToken(KeyboardToken)+0x9b>
c00117a9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00117af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117b2:	66 3d 14 03          	cmp    ax,0x314
c00117b6:	75 06                	jne    c00117be <sendKeyboardToken(KeyboardToken)+0xaa>
c00117b8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00117be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117c1:	66 3d 15 03          	cmp    ax,0x315
c00117c5:	75 06                	jne    c00117cd <sendKeyboardToken(KeyboardToken)+0xb9>
c00117c7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00117cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117d0:	66 3d 16 03          	cmp    ax,0x316
c00117d4:	75 06                	jne    c00117dc <sendKeyboardToken(KeyboardToken)+0xc8>
c00117d6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00117dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117df:	66 3d 17 03          	cmp    ax,0x317
c00117e3:	75 06                	jne    c00117eb <sendKeyboardToken(KeyboardToken)+0xd7>
c00117e5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00117eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ee:	66 3d 18 03          	cmp    ax,0x318
c00117f2:	75 06                	jne    c00117fa <sendKeyboardToken(KeyboardToken)+0xe6>
c00117f4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00117fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117fd:	66 3d 19 03          	cmp    ax,0x319
c0011801:	75 06                	jne    c0011809 <sendKeyboardToken(KeyboardToken)+0xf5>
c0011803:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180c:	66 3d 1a 03          	cmp    ax,0x31a
c0011810:	0f 85 c9 00 00 00    	jne    c00118df <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011816:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001181c:	e9 be 00 00 00       	jmp    c00118df <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011824:	66 3d 10 03          	cmp    ax,0x310
c0011828:	75 0a                	jne    c0011834 <sendKeyboardToken(KeyboardToken)+0x120>
c001182a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011830:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011837:	66 3d 11 03          	cmp    ax,0x311
c001183b:	75 0a                	jne    c0011847 <sendKeyboardToken(KeyboardToken)+0x133>
c001183d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011843:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184a:	66 3d 12 03          	cmp    ax,0x312
c001184e:	75 0a                	jne    c001185a <sendKeyboardToken(KeyboardToken)+0x146>
c0011850:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011856:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001185a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185d:	66 3d 13 03          	cmp    ax,0x313
c0011861:	75 0a                	jne    c001186d <sendKeyboardToken(KeyboardToken)+0x159>
c0011863:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011869:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001186d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011870:	66 3d 14 03          	cmp    ax,0x314
c0011874:	75 0a                	jne    c0011880 <sendKeyboardToken(KeyboardToken)+0x16c>
c0011876:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001187c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011883:	66 3d 15 03          	cmp    ax,0x315
c0011887:	75 0a                	jne    c0011893 <sendKeyboardToken(KeyboardToken)+0x17f>
c0011889:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001188f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011896:	66 3d 16 03          	cmp    ax,0x316
c001189a:	75 0a                	jne    c00118a6 <sendKeyboardToken(KeyboardToken)+0x192>
c001189c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00118a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a9:	66 3d 17 03          	cmp    ax,0x317
c00118ad:	75 0a                	jne    c00118b9 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00118af:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00118b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118bc:	66 3d 18 03          	cmp    ax,0x318
c00118c0:	75 0a                	jne    c00118cc <sendKeyboardToken(KeyboardToken)+0x1b8>
c00118c2:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00118c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	66 3d 19 03          	cmp    ax,0x319
c00118d3:	75 0a                	jne    c00118df <sendKeyboardToken(KeyboardToken)+0x1cb>
c00118d5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00118db:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e2:	66 3d 00 02          	cmp    ax,0x200
c00118e6:	75 2a                	jne    c0011912 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00118e8:	a0 00 3d 02 c0       	mov    al,ds:0xc0023d00
c00118ed:	83 f0 01             	xor    eax,0x1
c00118f0:	84 c0                	test   al,al
c00118f2:	74 1e                	je     c0011912 <sendKeyboardToken(KeyboardToken)+0x1fe>
c00118f4:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c00118f9:	6a 01                	push   0x1
c00118fb:	6a 00                	push   0x0
c00118fd:	68 36 16 01 c0       	push   0xc0011636
c0011902:	50                   	push   eax
c0011903:	e8 d6 63 00 00       	call   c0017cde <Process::createThread(void (*)(void*), void*, int)>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	c6 05 00 3d 02 c0 01 	mov    BYTE PTR ds:0xc0023d00,0x1
c0011912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011915:	66 3d 1d 03          	cmp    ax,0x31d
c0011919:	75 06                	jne    c0011921 <sendKeyboardToken(KeyboardToken)+0x20d>
c001191b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011924:	66 3d 1c 03          	cmp    ax,0x31c
c0011928:	75 06                	jne    c0011930 <sendKeyboardToken(KeyboardToken)+0x21c>
c001192a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011933:	66 3d 1b 03          	cmp    ax,0x31b
c0011937:	75 06                	jne    c001193f <sendKeyboardToken(KeyboardToken)+0x22b>
c0011939:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001193f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011942:	66 3d 1e 03          	cmp    ax,0x31e
c0011946:	75 06                	jne    c001194e <sendKeyboardToken(KeyboardToken)+0x23a>
c0011948:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001194e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011951:	66 3d 1f 03          	cmp    ax,0x31f
c0011955:	75 06                	jne    c001195d <sendKeyboardToken(KeyboardToken)+0x249>
c0011957:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001195d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011960:	66 3d 1a 03          	cmp    ax,0x31a
c0011964:	75 06                	jne    c001196c <sendKeyboardToken(KeyboardToken)+0x258>
c0011966:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001196c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011970:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011973:	83 f0 01             	xor    eax,0x1
c0011976:	84 c0                	test   al,al
c0011978:	74 77                	je     c00119f1 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001197a:	a0 01 3a 02 c0       	mov    al,ds:0xc0023a01
c001197f:	84 c0                	test   al,al
c0011981:	74 41                	je     c00119c4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c0011983:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011987:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001198b:	74 2b                	je     c00119b8 <sendKeyboardToken(KeyboardToken)+0x2a4>
c001198d:	8b 15 04 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023d04
c0011993:	89 d0                	mov    eax,edx
c0011995:	c1 e0 02             	shl    eax,0x2
c0011998:	01 d0                	add    eax,edx
c001199a:	01 c0                	add    eax,eax
c001199c:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c00119a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a4:	0f b7 c0             	movzx  eax,ax
c00119a7:	8d 50 d0             	lea    edx,[eax-0x30]
c00119aa:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00119af:	01 d0                	add    eax,edx
c00119b1:	a3 04 3d 02 c0       	mov    ds:0xc0023d04,eax
c00119b6:	eb 6d                	jmp    c0011a25 <sendKeyboardToken(KeyboardToken)+0x311>
c00119b8:	c7 05 04 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d04,0x0
c00119c2:	eb 61                	jmp    c0011a25 <sendKeyboardToken(KeyboardToken)+0x311>
c00119c4:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00119c9:	85 c0                	test   eax,eax
c00119cb:	74 18                	je     c00119e5 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00119cd:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00119d2:	0f b6 c0             	movzx  eax,al
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	50                   	push   eax
c00119d9:	e8 ca fc ff ff       	call   c00116a8 <sendKeyToTerminal(unsigned char)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119e5:	c7 05 04 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d04,0x0
c00119ef:	eb 34                	jmp    c0011a25 <sendKeyboardToken(KeyboardToken)+0x311>
c00119f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f4:	66 3d 01 01          	cmp    ax,0x101
c00119f8:	75 2b                	jne    c0011a25 <sendKeyboardToken(KeyboardToken)+0x311>
c00119fa:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c00119ff:	85 c0                	test   eax,eax
c0011a01:	74 18                	je     c0011a1b <sendKeyboardToken(KeyboardToken)+0x307>
c0011a03:	a1 04 3d 02 c0       	mov    eax,ds:0xc0023d04
c0011a08:	0f b6 c0             	movzx  eax,al
c0011a0b:	83 ec 0c             	sub    esp,0xc
c0011a0e:	50                   	push   eax
c0011a0f:	e8 94 fc ff ff       	call   c00116a8 <sendKeyToTerminal(unsigned char)>
c0011a14:	83 c4 10             	add    esp,0x10
c0011a17:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a1b:	c7 05 04 3d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023d04,0x0
c0011a25:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a28:	83 f0 01             	xor    eax,0x1
c0011a2b:	84 c0                	test   al,al
c0011a2d:	74 4c                	je     c0011a7b <sendKeyboardToken(KeyboardToken)+0x367>
c0011a2f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a32:	83 f0 01             	xor    eax,0x1
c0011a35:	84 c0                	test   al,al
c0011a37:	74 42                	je     c0011a7b <sendKeyboardToken(KeyboardToken)+0x367>
c0011a39:	a0 00 3a 02 c0       	mov    al,ds:0xc0023a00
c0011a3e:	83 f0 01             	xor    eax,0x1
c0011a41:	84 c0                	test   al,al
c0011a43:	74 36                	je     c0011a7b <sendKeyboardToken(KeyboardToken)+0x367>
c0011a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a48:	66 83 f8 1f          	cmp    ax,0x1f
c0011a4c:	76 09                	jbe    c0011a57 <sendKeyboardToken(KeyboardToken)+0x343>
c0011a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a51:	66 83 f8 7e          	cmp    ax,0x7e
c0011a55:	76 12                	jbe    c0011a69 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a5a:	66 83 f8 0a          	cmp    ax,0xa
c0011a5e:	74 09                	je     c0011a69 <sendKeyboardToken(KeyboardToken)+0x355>
c0011a60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a63:	66 83 f8 08          	cmp    ax,0x8
c0011a67:	75 12                	jne    c0011a7b <sendKeyboardToken(KeyboardToken)+0x367>
c0011a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a6c:	0f b6 c0             	movzx  eax,al
c0011a6f:	83 ec 0c             	sub    esp,0xc
c0011a72:	50                   	push   eax
c0011a73:	e8 30 fc ff ff       	call   c00116a8 <sendKeyToTerminal(unsigned char)>
c0011a78:	83 c4 10             	add    esp,0x10
c0011a7b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a7e:	83 f0 01             	xor    eax,0x1
c0011a81:	84 c0                	test   al,al
c0011a83:	74 4f                	je     c0011ad4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011a88:	83 f0 01             	xor    eax,0x1
c0011a8b:	84 c0                	test   al,al
c0011a8d:	74 45                	je     c0011ad4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a8f:	a0 00 3a 02 c0       	mov    al,ds:0xc0023a00
c0011a94:	84 c0                	test   al,al
c0011a96:	74 3c                	je     c0011ad4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a9b:	66 83 f8 3f          	cmp    ax,0x3f
c0011a9f:	76 33                	jbe    c0011ad4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa4:	66 83 f8 7f          	cmp    ax,0x7f
c0011aa8:	77 2a                	ja     c0011ad4 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aad:	88 c2                	mov    dl,al
c0011aaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab2:	66 83 f8 5f          	cmp    ax,0x5f
c0011ab6:	76 04                	jbe    c0011abc <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011ab8:	b0 20                	mov    al,0x20
c0011aba:	eb 02                	jmp    c0011abe <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011abc:	b0 00                	mov    al,0x0
c0011abe:	29 c2                	sub    edx,eax
c0011ac0:	88 d0                	mov    al,dl
c0011ac2:	83 e8 40             	sub    eax,0x40
c0011ac5:	0f b6 c0             	movzx  eax,al
c0011ac8:	83 ec 0c             	sub    esp,0xc
c0011acb:	50                   	push   eax
c0011acc:	e8 d7 fb ff ff       	call   c00116a8 <sendKeyToTerminal(unsigned char)>
c0011ad1:	83 c4 10             	add    esp,0x10
c0011ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad7:	66 3d 00 03          	cmp    ax,0x300
c0011adb:	75 0f                	jne    c0011aec <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011add:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011ae0:	83 f0 01             	xor    eax,0x1
c0011ae3:	84 c0                	test   al,al
c0011ae5:	74 05                	je     c0011aec <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011ae7:	e8 7b b4 ff ff       	call   c000cf67 <doTerminalCycle()>
c0011aec:	90                   	nop
c0011aed:	c9                   	leave  
c0011aee:	c3                   	ret    

c0011aef <clearInternalKeybuffer(VgaText*)>:
c0011aef:	55                   	push   ebp
c0011af0:	89 e5                	mov    ebp,esp
c0011af2:	83 ec 08             	sub    esp,0x8
c0011af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af8:	05 34 11 00 00       	add    eax,0x1134
c0011afd:	83 ec 0c             	sub    esp,0xc
c0011b00:	50                   	push   eax
c0011b01:	e8 1f eb fe ff       	call   c0000625 <strlen>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b0c:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b12:	83 ec 04             	sub    esp,0x4
c0011b15:	50                   	push   eax
c0011b16:	6a 00                	push   0x0
c0011b18:	52                   	push   edx
c0011b19:	e8 ea ea fe ff       	call   c0000608 <memset>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	90                   	nop
c0011b22:	c9                   	leave  
c0011b23:	c3                   	ret    

c0011b24 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011b24:	55                   	push   ebp
c0011b25:	89 e5                	mov    ebp,esp
c0011b27:	83 ec 18             	sub    esp,0x18
c0011b2a:	fb                   	sti    
c0011b2b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011b32:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011b36:	74 77                	je     c0011baf <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b3b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b41:	84 c0                	test   al,al
c0011b43:	75 02                	jne    c0011b47 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011b45:	eb f1                	jmp    c0011b38 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011b47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011b4a:	8d 50 01             	lea    edx,[eax+0x1]
c0011b4d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011b50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b53:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011b59:	88 10                	mov    BYTE PTR [eax],dl
c0011b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b5e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011b64:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b6a:	05 34 11 00 00       	add    eax,0x1134
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	50                   	push   eax
c0011b73:	e8 ad ea fe ff       	call   c0000625 <strlen>
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b7e:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b84:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b8a:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b90:	83 ec 04             	sub    esp,0x4
c0011b93:	50                   	push   eax
c0011b94:	51                   	push   ecx
c0011b95:	52                   	push   edx
c0011b96:	e8 ff e9 fe ff       	call   c000059a <memmove>
c0011b9b:	83 c4 10             	add    esp,0x10
c0011b9e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011ba1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011ba4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011ba8:	75 88                	jne    c0011b32 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011baa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bad:	eb 03                	jmp    c0011bb2 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011baf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb2:	c9                   	leave  
c0011bb3:	c3                   	ret    

c0011bb4 <Keyboard::Keyboard(char const*)>:
c0011bb4:	83 ec 0c             	sub    esp,0xc
c0011bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bbb:	83 ec 08             	sub    esp,0x8
c0011bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bc2:	50                   	push   eax
c0011bc3:	e8 16 ea ff ff       	call   c00105de <Device::Device(char const*)>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	ba 10 12 02 c0       	mov    edx,0xc0021210
c0011bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bd4:	89 10                	mov    DWORD PTR [eax],edx
c0011bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bda:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011be4:	c6 05 e4 38 02 c0 01 	mov    BYTE PTR ds:0xc00238e4,0x1
c0011beb:	90                   	nop
c0011bec:	83 c4 0c             	add    esp,0xc
c0011bef:	c3                   	ret    

c0011bf0 <Keyboard::~Keyboard()>:
c0011bf0:	83 ec 0c             	sub    esp,0xc
c0011bf3:	ba 10 12 02 c0       	mov    edx,0xc0021210
c0011bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bfc:	89 10                	mov    DWORD PTR [eax],edx
c0011bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c02:	83 ec 0c             	sub    esp,0xc
c0011c05:	50                   	push   eax
c0011c06:	e8 85 e6 ff ff       	call   c0010290 <Device::~Device()>
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	90                   	nop
c0011c0f:	83 c4 0c             	add    esp,0xc
c0011c12:	c3                   	ret    
c0011c13:	90                   	nop

c0011c14 <Keyboard::~Keyboard()>:
c0011c14:	83 ec 0c             	sub    esp,0xc
c0011c17:	83 ec 0c             	sub    esp,0xc
c0011c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c1e:	e8 cd ff ff ff       	call   c0011bf0 <Keyboard::~Keyboard()>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	83 ec 08             	sub    esp,0x8
c0011c29:	68 5c 01 00 00       	push   0x15c
c0011c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c32:	e8 cc d2 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0011c37:	83 c4 10             	add    esp,0x10
c0011c3a:	83 c4 0c             	add    esp,0xc
c0011c3d:	c3                   	ret    

c0011c3e <LogicalDisk::close(int, int, void*)>:
c0011c3e:	83 c8 ff             	or     eax,0xffffffff
c0011c41:	c3                   	ret    

c0011c42 <LogicalDisk::~LogicalDisk()>:
c0011c42:	83 ec 0c             	sub    esp,0xc
c0011c45:	ba c0 12 02 c0       	mov    edx,0xc00212c0
c0011c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c4e:	89 10                	mov    DWORD PTR [eax],edx
c0011c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c54:	83 ec 0c             	sub    esp,0xc
c0011c57:	50                   	push   eax
c0011c58:	e8 33 e6 ff ff       	call   c0010290 <Device::~Device()>
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	90                   	nop
c0011c61:	83 c4 0c             	add    esp,0xc
c0011c64:	c3                   	ret    
c0011c65:	90                   	nop

c0011c66 <LogicalDisk::~LogicalDisk()>:
c0011c66:	83 ec 0c             	sub    esp,0xc
c0011c69:	83 ec 0c             	sub    esp,0xc
c0011c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c70:	e8 cd ff ff ff       	call   c0011c42 <LogicalDisk::~LogicalDisk()>
c0011c75:	83 c4 10             	add    esp,0x10
c0011c78:	83 ec 08             	sub    esp,0x8
c0011c7b:	68 74 01 00 00       	push   0x174
c0011c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c84:	e8 7a d2 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	83 c4 0c             	add    esp,0xc
c0011c8f:	c3                   	ret    

c0011c90 <LogicalDisk::open(int, int, void*)>:
c0011c90:	83 ec 18             	sub    esp,0x18
c0011c93:	68 3c 12 02 c0       	push   0xc002123c
c0011c98:	e8 db 2f 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0011c9d:	83 c8 ff             	or     eax,0xffffffff
c0011ca0:	83 c4 1c             	add    esp,0x1c
c0011ca3:	c3                   	ret    

c0011ca4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011ca4:	53                   	push   ebx
c0011ca5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011cb1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011cb7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011cbd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011cc3:	77 10                	ja     c0011cd5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011cc5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011ccb:	89 d3                	mov    ebx,edx
c0011ccd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011cd3:	72 05                	jb     c0011cda <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011cd5:	83 c8 ff             	or     eax,0xffffffff
c0011cd8:	89 c2                	mov    edx,eax
c0011cda:	5b                   	pop    ebx
c0011cdb:	c3                   	ret    

c0011cdc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011cdc:	56                   	push   esi
c0011cdd:	83 c8 ff             	or     eax,0xffffffff
c0011ce0:	53                   	push   ebx
c0011ce1:	89 c2                	mov    edx,eax
c0011ce3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011ce7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011ceb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011cef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011cf5:	77 27                	ja     c0011d1e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011cf7:	89 d8                	mov    eax,ebx
c0011cf9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011cff:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011d05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d0a:	89 c2                	mov    edx,eax
c0011d0c:	73 10                	jae    c0011d1e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d0e:	89 c8                	mov    eax,ecx
c0011d10:	89 da                	mov    edx,ebx
c0011d12:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011d18:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011d1e:	5b                   	pop    ebx
c0011d1f:	5e                   	pop    esi
c0011d20:	c3                   	ret    
c0011d21:	90                   	nop

c0011d22 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011d22:	83 ec 1c             	sub    esp,0x1c
c0011d25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d39:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d48:	83 ec 08             	sub    esp,0x8
c0011d4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d4f:	50                   	push   eax
c0011d50:	e8 89 e8 ff ff       	call   c00105de <Device::Device(char const*)>
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	ba c0 12 02 c0       	mov    edx,0xc00212c0
c0011d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d61:	89 10                	mov    DWORD PTR [eax],edx
c0011d63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d67:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d72:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d7d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011d87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011d8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d93:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011d99:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011d9f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011da3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011da6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011daa:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011db0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dbe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dc8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011dd2:	90                   	nop
c0011dd3:	83 c4 1c             	add    esp,0x1c
c0011dd6:	c3                   	ret    
c0011dd7:	90                   	nop

c0011dd8 <LogicalDisk::assignDriveLetter()>:
c0011dd8:	55                   	push   ebp
c0011dd9:	57                   	push   edi
c0011dda:	56                   	push   esi
c0011ddb:	53                   	push   ebx
c0011ddc:	83 ec 14             	sub    esp,0x14
c0011ddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011de3:	8b 3d 20 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d20
c0011de9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011def:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011df3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011df9:	8b 3d 24 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d24
c0011dff:	3c 01                	cmp    al,0x1
c0011e01:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011e05:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011e09:	19 c0                	sbb    eax,eax
c0011e0b:	83 e0 02             	and    eax,0x2
c0011e0e:	83 c0 41             	add    eax,0x41
c0011e11:	0f be e8             	movsx  ebp,al
c0011e14:	3c 43                	cmp    al,0x43
c0011e16:	75 10                	jne    c0011e28 <LogicalDisk::assignDriveLetter()+0x50>
c0011e18:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011e1f:	75 5d                	jne    c0011e7e <LogicalDisk::assignDriveLetter()+0xa6>
c0011e21:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e26:	75 56                	jne    c0011e7e <LogicalDisk::assignDriveLetter()+0xa6>
c0011e28:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011e2b:	ba 01 00 00 00       	mov    edx,0x1
c0011e30:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011e34:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011e38:	d3 e2                	shl    edx,cl
c0011e3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011e3e:	89 d7                	mov    edi,edx
c0011e40:	89 d6                	mov    esi,edx
c0011e42:	c1 ff 1f             	sar    edi,0x1f
c0011e45:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011e49:	21 f9                	and    ecx,edi
c0011e4b:	09 d1                	or     ecx,edx
c0011e4d:	75 2f                	jne    c0011e7e <LogicalDisk::assignDriveLetter()+0xa6>
c0011e4f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011e53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e57:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011e5d:	09 f2                	or     edx,esi
c0011e5f:	89 15 20 3d 02 c0    	mov    DWORD PTR ds:0xc0023d20,edx
c0011e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e69:	09 fa                	or     edx,edi
c0011e6b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011e6f:	89 15 24 3d 02 c0    	mov    DWORD PTR ds:0xc0023d24,edx
c0011e75:	89 1c bd 40 3d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdc2c0],ebx
c0011e7c:	eb 08                	jmp    c0011e86 <LogicalDisk::assignDriveLetter()+0xae>
c0011e7e:	45                   	inc    ebp
c0011e7f:	40                   	inc    eax
c0011e80:	3c 5b                	cmp    al,0x5b
c0011e82:	75 90                	jne    c0011e14 <LogicalDisk::assignDriveLetter()+0x3c>
c0011e84:	31 c0                	xor    eax,eax
c0011e86:	83 c4 14             	add    esp,0x14
c0011e89:	5b                   	pop    ebx
c0011e8a:	5e                   	pop    esi
c0011e8b:	5f                   	pop    edi
c0011e8c:	5d                   	pop    ebp
c0011e8d:	c3                   	ret    

c0011e8e <LogicalDisk::mount()>:
c0011e8e:	56                   	push   esi
c0011e8f:	53                   	push   ebx
c0011e90:	51                   	push   ecx
c0011e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011e95:	8b 1d a8 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238a8
c0011e9b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011ea5:	85 db                	test   ebx,ebx
c0011ea7:	74 50                	je     c0011ef9 <LogicalDisk::mount()+0x6b>
c0011ea9:	e8 f1 5c 00 00       	call   c0017b9f <getIRQNestingLevel()>
c0011eae:	52                   	push   edx
c0011eaf:	52                   	push   edx
c0011eb0:	50                   	push   eax
c0011eb1:	68 60 12 02 c0       	push   0xc0021260
c0011eb6:	e8 28 d1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0011ebb:	83 c4 0c             	add    esp,0xc
c0011ebe:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011ec5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011ec7:	83 e8 41             	sub    eax,0x41
c0011eca:	50                   	push   eax
c0011ecb:	56                   	push   esi
c0011ecc:	53                   	push   ebx
c0011ecd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ed0:	83 c4 10             	add    esp,0x10
c0011ed3:	84 c0                	test   al,al
c0011ed5:	74 08                	je     c0011edf <LogicalDisk::mount()+0x51>
c0011ed7:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011edd:	eb 1c                	jmp    c0011efb <LogicalDisk::mount()+0x6d>
c0011edf:	e8 bb 5c 00 00       	call   c0017b9f <getIRQNestingLevel()>
c0011ee4:	51                   	push   ecx
c0011ee5:	51                   	push   ecx
c0011ee6:	50                   	push   eax
c0011ee7:	68 7b 12 02 c0       	push   0xc002127b
c0011eec:	e8 f2 d0 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0011ef1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	eb ac                	jmp    c0011ea5 <LogicalDisk::mount()+0x17>
c0011ef9:	31 c0                	xor    eax,eax
c0011efb:	5a                   	pop    edx
c0011efc:	5b                   	pop    ebx
c0011efd:	5e                   	pop    esi
c0011efe:	c3                   	ret    
c0011eff:	90                   	nop

c0011f00 <LogicalDisk::unmount()>:
c0011f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f04:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f0e:	c3                   	ret    
c0011f0f:	90                   	nop

c0011f10 <LogicalDisk::unassignDriveLetter()>:
c0011f10:	57                   	push   edi
c0011f11:	56                   	push   esi
c0011f12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f16:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011f1d:	84 c9                	test   cl,cl
c0011f1f:	75 0f                	jne    c0011f30 <LogicalDisk::unassignDriveLetter()+0x20>
c0011f21:	c7 44 24 0c 96 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021296
c0011f29:	5e                   	pop    esi
c0011f2a:	5f                   	pop    edi
c0011f2b:	e9 48 2d 00 00       	jmp    c0014c78 <Krnl::panic(char const*)>
c0011f30:	83 e9 41             	sub    ecx,0x41
c0011f33:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011f3a:	b8 01 00 00 00       	mov    eax,0x1
c0011f3f:	c7 04 8d 40 3d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdc2c0],0x0
c0011f4a:	d3 e0                	shl    eax,cl
c0011f4c:	89 c7                	mov    edi,eax
c0011f4e:	f7 d0                	not    eax
c0011f50:	c1 ff 1f             	sar    edi,0x1f
c0011f53:	21 05 20 3d 02 c0    	and    DWORD PTR ds:0xc0023d20,eax
c0011f59:	89 fe                	mov    esi,edi
c0011f5b:	f7 d6                	not    esi
c0011f5d:	21 35 24 3d 02 c0    	and    DWORD PTR ds:0xc0023d24,esi
c0011f63:	5e                   	pop    esi
c0011f64:	5f                   	pop    edi
c0011f65:	c3                   	ret    

c0011f66 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011f66:	57                   	push   edi
c0011f67:	56                   	push   esi
c0011f68:	53                   	push   ebx
c0011f69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011f6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f71:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011f75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f79:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011f7f:	77 41                	ja     c0011fc2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011f81:	99                   	cdq    
c0011f82:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011f88:	01 c8                	add    eax,ecx
c0011f8a:	11 da                	adc    edx,ebx
c0011f8c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011f92:	19 d7                	sbb    edi,edx
c0011f94:	72 33                	jb     c0011fc9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0011f96:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0011f9c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0011fa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011fa6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0011faa:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0011fb0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011fb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fba:	5b                   	pop    ebx
c0011fbb:	5e                   	pop    esi
c0011fbc:	5f                   	pop    edi
c0011fbd:	e9 9a 09 00 00       	jmp    c001295c <VCache::read(unsigned long long, int, void*)>
c0011fc2:	b8 05 00 00 00       	mov    eax,0x5
c0011fc7:	eb 05                	jmp    c0011fce <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0011fc9:	b8 07 00 00 00       	mov    eax,0x7
c0011fce:	5b                   	pop    ebx
c0011fcf:	5e                   	pop    esi
c0011fd0:	5f                   	pop    edi
c0011fd1:	c3                   	ret    

c0011fd2 <LogicalDisk::write(unsigned long long, int, void*)>:
c0011fd2:	57                   	push   edi
c0011fd3:	56                   	push   esi
c0011fd4:	53                   	push   ebx
c0011fd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011fd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011fdd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fe5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011feb:	77 41                	ja     c001202e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0011fed:	99                   	cdq    
c0011fee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011ff4:	01 c8                	add    eax,ecx
c0011ff6:	11 da                	adc    edx,ebx
c0011ff8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0011ffe:	19 d7                	sbb    edi,edx
c0012000:	72 33                	jb     c0012035 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012002:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012008:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001200e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012012:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012016:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001201c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012026:	5b                   	pop    ebx
c0012027:	5e                   	pop    esi
c0012028:	5f                   	pop    edi
c0012029:	e9 4a 08 00 00       	jmp    c0012878 <VCache::write(unsigned long long, int, void*)>
c001202e:	b8 05 00 00 00       	mov    eax,0x5
c0012033:	eb 05                	jmp    c001203a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012035:	b8 07 00 00 00       	mov    eax,0x7
c001203a:	5b                   	pop    ebx
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	c3                   	ret    

c001203e <Mouse::Mouse(char const*)>:
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012045:	83 ec 08             	sub    esp,0x8
c0012048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001204c:	50                   	push   eax
c001204d:	e8 8c e5 ff ff       	call   c00105de <Device::Device(char const*)>
c0012052:	83 c4 10             	add    esp,0x10
c0012055:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c001205a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001205e:	89 10                	mov    DWORD PTR [eax],edx
c0012060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012064:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001206e:	90                   	nop
c001206f:	83 c4 0c             	add    esp,0xc
c0012072:	c3                   	ret    
c0012073:	90                   	nop

c0012074 <Mouse::~Mouse()>:
c0012074:	83 ec 0c             	sub    esp,0xc
c0012077:	ba ec 12 02 c0       	mov    edx,0xc00212ec
c001207c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012080:	89 10                	mov    DWORD PTR [eax],edx
c0012082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012086:	83 ec 0c             	sub    esp,0xc
c0012089:	50                   	push   eax
c001208a:	e8 01 e2 ff ff       	call   c0010290 <Device::~Device()>
c001208f:	83 c4 10             	add    esp,0x10
c0012092:	90                   	nop
c0012093:	83 c4 0c             	add    esp,0xc
c0012096:	c3                   	ret    
c0012097:	90                   	nop

c0012098 <Mouse::~Mouse()>:
c0012098:	83 ec 0c             	sub    esp,0xc
c001209b:	83 ec 0c             	sub    esp,0xc
c001209e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120a2:	e8 cd ff ff ff       	call   c0012074 <Mouse::~Mouse()>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	83 ec 08             	sub    esp,0x8
c00120ad:	68 58 01 00 00       	push   0x158
c00120b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120b6:	e8 48 ce ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c00120bb:	83 c4 10             	add    esp,0x10
c00120be:	83 c4 0c             	add    esp,0xc
c00120c1:	c3                   	ret    

c00120c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00120c2:	55                   	push   ebp
c00120c3:	57                   	push   edi
c00120c4:	56                   	push   esi
c00120c5:	53                   	push   ebx
c00120c6:	81 ec 28 01 00 00    	sub    esp,0x128
c00120cc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00120d3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00120da:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00120e1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00120e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00120f0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00120f7:	e8 d4 e5 ff ff       	call   c00106d0 <Device::getName()>
c00120fc:	5a                   	pop    edx
c00120fd:	59                   	pop    ecx
c00120fe:	50                   	push   eax
c00120ff:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012103:	55                   	push   ebp
c0012104:	e8 9e e5 fe ff       	call   c00006a7 <strcpy>
c0012109:	5b                   	pop    ebx
c001210a:	58                   	pop    eax
c001210b:	68 10 13 02 c0       	push   0xc0021310
c0012110:	55                   	push   ebp
c0012111:	e8 48 e6 fe ff       	call   c000075e <strcat>
c0012116:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001211d:	e8 d2 cd ff ff       	call   c000eef4 <operator new(unsigned long)>
c0012122:	83 c4 0c             	add    esp,0xc
c0012125:	89 c3                	mov    ebx,eax
c0012127:	57                   	push   edi
c0012128:	56                   	push   esi
c0012129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001212d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012131:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012138:	55                   	push   ebp
c0012139:	50                   	push   eax
c001213a:	e8 e3 fb ff ff       	call   c0011d22 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001213f:	83 c4 14             	add    esp,0x14
c0012142:	53                   	push   ebx
c0012143:	e8 90 fc ff ff       	call   c0011dd8 <LogicalDisk::assignDriveLetter()>
c0012148:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001214b:	e8 3e fd ff ff       	call   c0011e8e <LogicalDisk::mount()>
c0012150:	58                   	pop    eax
c0012151:	5a                   	pop    edx
c0012152:	53                   	push   ebx
c0012153:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001215a:	e8 8f e2 ff ff       	call   c00103ee <Device::addChild(Device*)>
c001215f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012165:	5b                   	pop    ebx
c0012166:	5e                   	pop    esi
c0012167:	5f                   	pop    edi
c0012168:	5d                   	pop    ebp
c0012169:	c3                   	ret    

c001216a <createPartitionsForDisk(PhysicalDisk*)>:
c001216a:	55                   	push   ebp
c001216b:	57                   	push   edi
c001216c:	56                   	push   esi
c001216d:	53                   	push   ebx
c001216e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012174:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001217b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012181:	3d 00 02 00 00       	cmp    eax,0x200
c0012186:	74 27                	je     c00121af <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012188:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001218e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012194:	83 ec 10             	sub    esp,0x10
c0012197:	0f a4 f7 0a          	shld   edi,esi,0xa
c001219b:	99                   	cdq    
c001219c:	c1 e6 0a             	shl    esi,0xa
c001219f:	52                   	push   edx
c00121a0:	89 fd                	mov    ebp,edi
c00121a2:	50                   	push   eax
c00121a3:	55                   	push   ebp
c00121a4:	56                   	push   esi
c00121a5:	e8 b2 c5 00 00       	call   c001e75c <__udivdi3>
c00121aa:	e9 b1 00 00 00       	jmp    c0012260 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121b4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00121b8:	56                   	push   esi
c00121b9:	6a 01                	push   0x1
c00121bb:	6a 00                	push   0x0
c00121bd:	6a 00                	push   0x0
c00121bf:	53                   	push   ebx
c00121c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00121c3:	83 c4 20             	add    esp,0x20
c00121c6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00121ce:	75 0a                	jne    c00121da <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00121d0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00121d8:	74 2c                	je     c0012206 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00121da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00121e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00121e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00121ec:	83 ec 10             	sub    esp,0x10
c00121ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00121f3:	89 f7                	mov    edi,esi
c00121f5:	c1 e0 0a             	shl    eax,0xa
c00121f8:	c1 ff 1f             	sar    edi,0x1f
c00121fb:	57                   	push   edi
c00121fc:	56                   	push   esi
c00121fd:	52                   	push   edx
c00121fe:	50                   	push   eax
c00121ff:	e8 58 c5 00 00       	call   c001e75c <__udivdi3>
c0012204:	eb 5a                	jmp    c0012260 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012206:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001220d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012214:	83 e1 7f             	and    ecx,0x7f
c0012217:	83 e0 7f             	and    eax,0x7f
c001221a:	01 c1                	add    ecx,eax
c001221c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012223:	83 e0 7f             	and    eax,0x7f
c0012226:	01 c1                	add    ecx,eax
c0012228:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001222f:	83 e0 7f             	and    eax,0x7f
c0012232:	00 c1                	add    cl,al
c0012234:	74 41                	je     c0012277 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012236:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001223c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012242:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012248:	83 ec 10             	sub    esp,0x10
c001224b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001224f:	89 f7                	mov    edi,esi
c0012251:	c1 e0 0a             	shl    eax,0xa
c0012254:	c1 ff 1f             	sar    edi,0x1f
c0012257:	57                   	push   edi
c0012258:	56                   	push   esi
c0012259:	52                   	push   edx
c001225a:	50                   	push   eax
c001225b:	e8 fc c4 00 00       	call   c001e75c <__udivdi3>
c0012260:	83 c4 14             	add    esp,0x14
c0012263:	52                   	push   edx
c0012264:	50                   	push   eax
c0012265:	6a 00                	push   0x0
c0012267:	6a 00                	push   0x0
c0012269:	53                   	push   ebx
c001226a:	e8 53 fe ff ff       	call   c00120c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001226f:	83 c4 20             	add    esp,0x20
c0012272:	e9 79 01 00 00       	jmp    c00123f0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012277:	89 f0                	mov    eax,esi
c0012279:	31 f6                	xor    esi,esi
c001227b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012282:	75 02                	jne    c0012286 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012284:	89 f1                	mov    ecx,esi
c0012286:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001228d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012294:	c1 e2 08             	shl    edx,0x8
c0012297:	c1 e7 10             	shl    edi,0x10
c001229a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00122a2:	09 fa                	or     edx,edi
c00122a4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00122ac:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00122b3:	83 c0 10             	add    eax,0x10
c00122b6:	09 fa                	or     edx,edi
c00122b8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00122bf:	c1 e7 18             	shl    edi,0x18
c00122c2:	09 fa                	or     edx,edi
c00122c4:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00122cb:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00122cf:	c1 e7 10             	shl    edi,0x10
c00122d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00122d9:	c1 e2 08             	shl    edx,0x8
c00122dc:	09 fa                	or     edx,edi
c00122de:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00122e5:	09 fa                	or     edx,edi
c00122e7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00122ee:	c1 e7 18             	shl    edi,0x18
c00122f1:	09 fa                	or     edx,edi
c00122f3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00122f7:	46                   	inc    esi
c00122f8:	83 fe 04             	cmp    esi,0x4
c00122fb:	0f 85 7a ff ff ff    	jne    c001227b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012305:	83 f0 01             	xor    eax,0x1
c0012308:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001230c:	75 57                	jne    c0012365 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001230e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012312:	83 f0 01             	xor    eax,0x1
c0012315:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012319:	75 4a                	jne    c0012365 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001231b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001231f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012327:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001232f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012335:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001233b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012341:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012345:	89 f7                	mov    edi,esi
c0012347:	c1 e0 0a             	shl    eax,0xa
c001234a:	c1 ff 1f             	sar    edi,0x1f
c001234d:	57                   	push   edi
c001234e:	56                   	push   esi
c001234f:	52                   	push   edx
c0012350:	50                   	push   eax
c0012351:	e8 06 c4 00 00       	call   c001e75c <__udivdi3>
c0012356:	83 c4 10             	add    esp,0x10
c0012359:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001235d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012361:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012365:	84 c9                	test   cl,cl
c0012367:	74 53                	je     c00123bc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012369:	0f b6 c9             	movzx  ecx,cl
c001236c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012370:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012374:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012378:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001237c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012380:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012384:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012388:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001238c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012390:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012398:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001239c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00123a0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00123a4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00123a8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00123ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123b4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00123b8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00123bc:	31 ed                	xor    ebp,ebp
c00123be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00123c2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00123c6:	89 f8                	mov    eax,edi
c00123c8:	09 f0                	or     eax,esi
c00123ca:	74 1e                	je     c00123ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00123cc:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00123d0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00123d4:	89 d1                	mov    ecx,edx
c00123d6:	09 c1                	or     ecx,eax
c00123d8:	74 10                	je     c00123ea <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00123da:	83 ec 0c             	sub    esp,0xc
c00123dd:	57                   	push   edi
c00123de:	56                   	push   esi
c00123df:	52                   	push   edx
c00123e0:	50                   	push   eax
c00123e1:	53                   	push   ebx
c00123e2:	e8 db fc ff ff       	call   c00120c2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00123e7:	83 c4 20             	add    esp,0x20
c00123ea:	45                   	inc    ebp
c00123eb:	83 fd 04             	cmp    ebp,0x4
c00123ee:	75 ce                	jne    c00123be <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00123f0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00123f6:	5b                   	pop    ebx
c00123f7:	5e                   	pop    esi
c00123f8:	5f                   	pop    edi
c00123f9:	5d                   	pop    ebp
c00123fa:	c3                   	ret    
c00123fb:	90                   	nop

c00123fc <Timer::Timer(char const*)>:
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012403:	83 ec 08             	sub    esp,0x8
c0012406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001240a:	50                   	push   eax
c001240b:	e8 ce e1 ff ff       	call   c00105de <Device::Device(char const*)>
c0012410:	83 c4 10             	add    esp,0x10
c0012413:	ba 24 13 02 c0       	mov    edx,0xc0021324
c0012418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001241c:	89 10                	mov    DWORD PTR [eax],edx
c001241e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012422:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001242c:	90                   	nop
c001242d:	83 c4 0c             	add    esp,0xc
c0012430:	c3                   	ret    
c0012431:	90                   	nop

c0012432 <Timer::~Timer()>:
c0012432:	83 ec 0c             	sub    esp,0xc
c0012435:	ba 24 13 02 c0       	mov    edx,0xc0021324
c001243a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243e:	89 10                	mov    DWORD PTR [eax],edx
c0012440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012444:	83 ec 0c             	sub    esp,0xc
c0012447:	50                   	push   eax
c0012448:	e8 43 de ff ff       	call   c0010290 <Device::~Device()>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	90                   	nop
c0012451:	83 c4 0c             	add    esp,0xc
c0012454:	c3                   	ret    
c0012455:	90                   	nop

c0012456 <Timer::~Timer()>:
c0012456:	83 ec 0c             	sub    esp,0xc
c0012459:	83 ec 0c             	sub    esp,0xc
c001245c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012460:	e8 cd ff ff ff       	call   c0012432 <Timer::~Timer()>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	83 ec 08             	sub    esp,0x8
c001246b:	68 5c 01 00 00       	push   0x15c
c0012470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012474:	e8 8a ca ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0012479:	83 c4 10             	add    esp,0x10
c001247c:	83 c4 0c             	add    esp,0xc
c001247f:	c3                   	ret    

c0012480 <Timer::read()>:
c0012480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012484:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001248a:	c3                   	ret    

c001248b <timerHandler(unsigned long long)>:
c001248b:	55                   	push   ebp
c001248c:	57                   	push   edi
c001248d:	56                   	push   esi
c001248e:	53                   	push   ebx
c001248f:	83 ec 0c             	sub    esp,0xc
c0012492:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012496:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001249a:	01 35 b0 3d 02 c0    	add    DWORD PTR ds:0xc0023db0,esi
c00124a0:	11 3d b4 3d 02 c0    	adc    DWORD PTR ds:0xc0023db4,edi
c00124a6:	80 3d 4d 37 02 c0 00 	cmp    BYTE PTR ds:0xc002374d,0x0
c00124ad:	0f 84 07 01 00 00    	je     c00125ba <timerHandler(unsigned long long)+0x12f>
c00124b3:	e8 23 57 00 00       	call   c0017bdb <lockStuff()>
c00124b8:	83 ec 0c             	sub    esp,0xc
c00124bb:	68 7c 4b 02 c0       	push   0xc0024b7c
c00124c0:	e8 69 c9 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00124c5:	c7 04 24 7c 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b7c
c00124cc:	89 c3                	mov    ebx,eax
c00124ce:	e8 63 c9 00 00       	call   c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	84 c0                	test   al,al
c00124d8:	74 60                	je     c001253a <timerHandler(unsigned long long)+0xaf>
c00124da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00124e0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00124e3:	85 c0                	test   eax,eax
c00124e5:	0f 85 91 00 00 00    	jne    c001257c <timerHandler(unsigned long long)+0xf1>
c00124eb:	e9 be 00 00 00       	jmp    c00125ae <timerHandler(unsigned long long)+0x123>
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	55                   	push   ebp
c00124f4:	e8 cb 5e 00 00       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c00124f9:	83 c4 10             	add    esp,0x10
c00124fc:	39 eb                	cmp    ebx,ebp
c00124fe:	75 12                	jne    c0012512 <timerHandler(unsigned long long)+0x87>
c0012500:	83 ec 0c             	sub    esp,0xc
c0012503:	68 7c 4b 02 c0       	push   0xc0024b7c
c0012508:	e8 21 c9 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001250d:	89 c3                	mov    ebx,eax
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	83 ec 0c             	sub    esp,0xc
c0012515:	68 7c 4b 02 c0       	push   0xc0024b7c
c001251a:	e8 17 c9 00 00       	call   c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001251f:	83 c4 10             	add    esp,0x10
c0012522:	84 c0                	test   al,al
c0012524:	75 b4                	jne    c00124da <timerHandler(unsigned long long)+0x4f>
c0012526:	83 ec 0c             	sub    esp,0xc
c0012529:	68 7c 4b 02 c0       	push   0xc0024b7c
c001252e:	e8 fb c8 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012533:	83 c4 10             	add    esp,0x10
c0012536:	39 d8                	cmp    eax,ebx
c0012538:	74 a0                	je     c00124da <timerHandler(unsigned long long)+0x4f>
c001253a:	83 ec 0c             	sub    esp,0xc
c001253d:	68 7c 4b 02 c0       	push   0xc0024b7c
c0012542:	e8 e7 c8 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012547:	c7 04 24 7c 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b7c
c001254e:	89 c5                	mov    ebp,eax
c0012550:	e8 fd c8 00 00       	call   c001ee52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012555:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001255e:	39 15 b0 3d 02 c0    	cmp    DWORD PTR ds:0xc0023db0,edx
c0012564:	a1 b4 3d 02 c0       	mov    eax,ds:0xc0023db4
c0012569:	19 c8                	sbb    eax,ecx
c001256b:	73 83                	jae    c00124f0 <timerHandler(unsigned long long)+0x65>
c001256d:	50                   	push   eax
c001256e:	50                   	push   eax
c001256f:	55                   	push   ebp
c0012570:	68 7c 4b 02 c0       	push   0xc0024b7c
c0012575:	e8 86 c9 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001257a:	eb 93                	jmp    c001250f <timerHandler(unsigned long long)+0x84>
c001257c:	80 3d 4c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002374c,0x0
c0012583:	74 29                	je     c00125ae <timerHandler(unsigned long long)+0x123>
c0012585:	39 c6                	cmp    esi,eax
c0012587:	bb 00 00 00 00       	mov    ebx,0x0
c001258c:	19 df                	sbb    edi,ebx
c001258e:	72 19                	jb     c00125a9 <timerHandler(unsigned long long)+0x11e>
c0012590:	e8 1f 56 00 00       	call   c0017bb4 <lockScheduler()>
c0012595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001259a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001259d:	e8 46 59 00 00       	call   c0017ee8 <schedule()>
c00125a2:	e8 0f 56 00 00       	call   c0017bb6 <unlockScheduler()>
c00125a7:	eb 05                	jmp    c00125ae <timerHandler(unsigned long long)+0x123>
c00125a9:	29 f0                	sub    eax,esi
c00125ab:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00125ae:	83 c4 0c             	add    esp,0xc
c00125b1:	5b                   	pop    ebx
c00125b2:	5e                   	pop    esi
c00125b3:	5f                   	pop    edi
c00125b4:	5d                   	pop    ebp
c00125b5:	e9 b3 59 00 00       	jmp    c0017f6d <unlockStuff()>
c00125ba:	83 c4 0c             	add    esp,0xc
c00125bd:	5b                   	pop    ebx
c00125be:	5e                   	pop    esi
c00125bf:	5f                   	pop    edi
c00125c0:	5d                   	pop    ebp
c00125c1:	c3                   	ret    

c00125c2 <setupTimer(int)>:
c00125c2:	57                   	push   edi
c00125c3:	56                   	push   esi
c00125c4:	53                   	push   ebx
c00125c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125c9:	e8 a1 19 00 00       	call   c0013f6f <getCPUNumber()>
c00125ce:	85 c0                	test   eax,eax
c00125d0:	74 32                	je     c0012604 <setupTimer(int)+0x42>
c00125d2:	83 ec 0c             	sub    esp,0xc
c00125d5:	68 60 01 00 00       	push   0x160
c00125da:	e8 15 c9 ff ff       	call   c000eef4 <operator new(unsigned long)>
c00125df:	89 04 24             	mov    DWORD PTR [esp],eax
c00125e2:	89 c3                	mov    ebx,eax
c00125e4:	e8 0d bc 00 00       	call   c001e1f6 <APICTimer::APICTimer()>
c00125e9:	6a 00                	push   0x0
c00125eb:	6a 00                	push   0x0
c00125ed:	56                   	push   esi
c00125ee:	53                   	push   ebx
c00125ef:	e8 0a bb 00 00       	call   c001e0fe <APICTimer::open(int, int, void*)>
c00125f4:	83 c4 20             	add    esp,0x20
c00125f7:	e8 76 19 00 00       	call   c0013f72 <thisCPU()>
c00125fc:	56                   	push   esi
c00125fd:	56                   	push   esi
c00125fe:	53                   	push   ebx
c00125ff:	e9 96 00 00 00       	jmp    c001269a <setupTimer(int)+0xd8>
c0012604:	e8 69 19 00 00       	call   c0013f72 <thisCPU()>
c0012609:	83 ec 0c             	sub    esp,0xc
c001260c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012612:	e8 b9 e0 ff ff       	call   c00106d0 <Device::getName()>
c0012617:	83 c4 10             	add    esp,0x10
c001261a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001261d:	0f 85 87 00 00 00    	jne    c00126aa <setupTimer(int)+0xe8>
c0012623:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012628:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001262f:	74 79                	je     c00126aa <setupTimer(int)+0xe8>
c0012631:	83 ec 0c             	sub    esp,0xc
c0012634:	68 5c 01 00 00       	push   0x15c
c0012639:	e8 b6 c8 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001263e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012641:	89 c3                	mov    ebx,eax
c0012643:	e8 fe bc 00 00       	call   c001e346 <PIT::PIT()>
c0012648:	59                   	pop    ecx
c0012649:	5f                   	pop    edi
c001264a:	53                   	push   ebx
c001264b:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0012651:	e8 98 dd ff ff       	call   c00103ee <Device::addChild(Device*)>
c0012656:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012658:	6a 00                	push   0x0
c001265a:	6a 00                	push   0x0
c001265c:	56                   	push   esi
c001265d:	53                   	push   ebx
c001265e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012661:	83 c4 14             	add    esp,0x14
c0012664:	68 60 01 00 00       	push   0x160
c0012669:	e8 86 c8 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001266e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012671:	89 c7                	mov    edi,eax
c0012673:	e8 7e bb 00 00       	call   c001e1f6 <APICTimer::APICTimer()>
c0012678:	6a 00                	push   0x0
c001267a:	6a 00                	push   0x0
c001267c:	56                   	push   esi
c001267d:	57                   	push   edi
c001267e:	e8 7b ba 00 00       	call   c001e0fe <APICTimer::open(int, int, void*)>
c0012683:	83 c4 20             	add    esp,0x20
c0012686:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012688:	6a 00                	push   0x0
c001268a:	6a 00                	push   0x0
c001268c:	6a 00                	push   0x0
c001268e:	53                   	push   ebx
c001268f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012692:	e8 db 18 00 00       	call   c0013f72 <thisCPU()>
c0012697:	5a                   	pop    edx
c0012698:	59                   	pop    ecx
c0012699:	57                   	push   edi
c001269a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00126a0:	e8 49 dd ff ff       	call   c00103ee <Device::addChild(Device*)>
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	eb 33                	jmp    c00126dd <setupTimer(int)+0x11b>
c00126aa:	83 ec 0c             	sub    esp,0xc
c00126ad:	68 5c 01 00 00       	push   0x15c
c00126b2:	e8 3d c8 ff ff       	call   c000eef4 <operator new(unsigned long)>
c00126b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00126ba:	89 c3                	mov    ebx,eax
c00126bc:	e8 85 bc 00 00       	call   c001e346 <PIT::PIT()>
c00126c1:	58                   	pop    eax
c00126c2:	5a                   	pop    edx
c00126c3:	53                   	push   ebx
c00126c4:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c00126ca:	e8 1f dd ff ff       	call   c00103ee <Device::addChild(Device*)>
c00126cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126d1:	6a 00                	push   0x0
c00126d3:	6a 00                	push   0x0
c00126d5:	56                   	push   esi
c00126d6:	53                   	push   ebx
c00126d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126da:	83 c4 20             	add    esp,0x20
c00126dd:	89 d8                	mov    eax,ebx
c00126df:	5b                   	pop    ebx
c00126e0:	5e                   	pop    esi
c00126e1:	5f                   	pop    edi
c00126e2:	c3                   	ret    
c00126e3:	90                   	nop

c00126e4 <VCache::VCache(PhysicalDisk*)>:
c00126e4:	53                   	push   ebx
c00126e5:	83 ec 08             	sub    esp,0x8
c00126e8:	ba 54 13 02 c0       	mov    edx,0xc0021354
c00126ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f1:	89 10                	mov    DWORD PTR [eax],edx
c00126f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00126fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012702:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001270d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012714:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001271b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001271f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012726:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001272d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012731:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012740:	83 ec 0c             	sub    esp,0xc
c0012743:	6a 10                	push   0x10
c0012745:	e8 aa c7 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	89 c3                	mov    ebx,eax
c001274f:	83 ec 0c             	sub    esp,0xc
c0012752:	53                   	push   ebx
c0012753:	e8 74 55 00 00       	call   c0017ccc <Mutex::Mutex()>
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001275f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001276a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001276d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012771:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012778:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001277c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012786:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001278d:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012793:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012799:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001279d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00127a0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00127a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a7:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00127ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00127b5:	c1 e0 06             	shl    eax,0x6
c00127b8:	83 ec 0c             	sub    esp,0xc
c00127bb:	50                   	push   eax
c00127bc:	e8 45 94 ff ff       	call   c000bc06 <malloc>
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	89 c2                	mov    edx,eax
c00127c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00127cd:	90                   	nop
c00127ce:	83 c4 08             	add    esp,0x8
c00127d1:	5b                   	pop    ebx
c00127d2:	c3                   	ret    
c00127d3:	90                   	nop

c00127d4 <VCache::writeWriteBuffer()>:
c00127d4:	53                   	push   ebx
c00127d5:	83 ec 14             	sub    esp,0x14
c00127d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00127dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127df:	8b 10                	mov    edx,DWORD PTR [eax]
c00127e1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00127e4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00127e7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00127ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00127ed:	50                   	push   eax
c00127ee:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00127f1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00127f8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00127ff:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012803:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001280a:	83 c4 28             	add    esp,0x28
c001280d:	5b                   	pop    ebx
c001280e:	c3                   	ret    
c001280f:	90                   	nop

c0012810 <VCache::~VCache()>:
c0012810:	83 ec 0c             	sub    esp,0xc
c0012813:	ba 54 13 02 c0       	mov    edx,0xc0021354
c0012818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001281c:	89 10                	mov    DWORD PTR [eax],edx
c001281e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012822:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012825:	84 c0                	test   al,al
c0012827:	74 0f                	je     c0012838 <VCache::~VCache()+0x28>
c0012829:	83 ec 0c             	sub    esp,0xc
c001282c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012830:	e8 9f ff ff ff       	call   c00127d4 <VCache::writeWriteBuffer()>
c0012835:	83 c4 10             	add    esp,0x10
c0012838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001283f:	83 ec 0c             	sub    esp,0xc
c0012842:	50                   	push   eax
c0012843:	e8 ce 93 ff ff       	call   c000bc16 <free>
c0012848:	83 c4 10             	add    esp,0x10
c001284b:	90                   	nop
c001284c:	83 c4 0c             	add    esp,0xc
c001284f:	c3                   	ret    

c0012850 <VCache::~VCache()>:
c0012850:	83 ec 0c             	sub    esp,0xc
c0012853:	83 ec 0c             	sub    esp,0xc
c0012856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001285a:	e8 b1 ff ff ff       	call   c0012810 <VCache::~VCache()>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	83 ec 08             	sub    esp,0x8
c0012865:	6a 30                	push   0x30
c0012867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001286b:	e8 93 c6 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	83 c4 0c             	add    esp,0xc
c0012876:	c3                   	ret    
c0012877:	90                   	nop

c0012878 <VCache::write(unsigned long long, int, void*)>:
c0012878:	55                   	push   ebp
c0012879:	57                   	push   edi
c001287a:	56                   	push   esi
c001287b:	53                   	push   ebx
c001287c:	83 ec 28             	sub    esp,0x28
c001287f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012883:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012887:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001288b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001288f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012892:	e8 09 5a 00 00       	call   c00182a0 <Semaphore::acquire()>
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001289e:	74 66                	je     c0012906 <VCache::write(unsigned long long, int, void*)+0x8e>
c00128a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128a3:	99                   	cdq    
c00128a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128a8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00128ab:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00128ae:	89 c1                	mov    ecx,eax
c00128b0:	89 d0                	mov    eax,edx
c00128b2:	31 f1                	xor    ecx,esi
c00128b4:	31 f8                	xor    eax,edi
c00128b6:	89 ca                	mov    edx,ecx
c00128b8:	09 c2                	or     edx,eax
c00128ba:	75 3e                	jne    c00128fa <VCache::write(unsigned long long, int, void*)+0x82>
c00128bc:	83 fd 01             	cmp    ebp,0x1
c00128bf:	75 39                	jne    c00128fa <VCache::write(unsigned long long, int, void*)+0x82>
c00128c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128ca:	51                   	push   ecx
c00128cb:	50                   	push   eax
c00128cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00128d0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00128d4:	0f af c8             	imul   ecx,eax
c00128d7:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00128da:	51                   	push   ecx
c00128db:	e8 f2 dc fe ff       	call   c00005d2 <memcpy>
c00128e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128e3:	83 c4 10             	add    esp,0x10
c00128e6:	40                   	inc    eax
c00128e7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00128ea:	83 f8 40             	cmp    eax,0x40
c00128ed:	75 57                	jne    c0012946 <VCache::write(unsigned long long, int, void*)+0xce>
c00128ef:	83 ec 0c             	sub    esp,0xc
c00128f2:	53                   	push   ebx
c00128f3:	e8 dc fe ff ff       	call   c00127d4 <VCache::writeWriteBuffer()>
c00128f8:	eb 34                	jmp    c001292e <VCache::write(unsigned long long, int, void*)+0xb6>
c00128fa:	83 ec 0c             	sub    esp,0xc
c00128fd:	53                   	push   ebx
c00128fe:	e8 d1 fe ff ff       	call   c00127d4 <VCache::writeWriteBuffer()>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012909:	83 fd 3f             	cmp    ebp,0x3f
c001290c:	7f 25                	jg     c0012933 <VCache::write(unsigned long long, int, void*)+0xbb>
c001290e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012911:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012914:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012917:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001291b:	52                   	push   edx
c001291c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012922:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012926:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012929:	e8 a4 dc fe ff       	call   c00005d2 <memcpy>
c001292e:	83 c4 10             	add    esp,0x10
c0012931:	eb 13                	jmp    c0012946 <VCache::write(unsigned long long, int, void*)+0xce>
c0012933:	83 ec 0c             	sub    esp,0xc
c0012936:	8b 10                	mov    edx,DWORD PTR [eax]
c0012938:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001293c:	55                   	push   ebp
c001293d:	57                   	push   edi
c001293e:	56                   	push   esi
c001293f:	50                   	push   eax
c0012940:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012943:	83 c4 20             	add    esp,0x20
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001294c:	e8 65 5f 00 00       	call   c00188b6 <Semaphore::release()>
c0012951:	83 c4 2c             	add    esp,0x2c
c0012954:	31 c0                	xor    eax,eax
c0012956:	5b                   	pop    ebx
c0012957:	5e                   	pop    esi
c0012958:	5f                   	pop    edi
c0012959:	5d                   	pop    ebp
c001295a:	c3                   	ret    
c001295b:	90                   	nop

c001295c <VCache::read(unsigned long long, int, void*)>:
c001295c:	57                   	push   edi
c001295d:	56                   	push   esi
c001295e:	53                   	push   ebx
c001295f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012963:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012967:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001296b:	83 ec 0c             	sub    esp,0xc
c001296e:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012971:	e8 2a 59 00 00       	call   c00182a0 <Semaphore::acquire()>
c0012976:	83 c4 10             	add    esp,0x10
c0012979:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001297d:	74 0c                	je     c001298b <VCache::read(unsigned long long, int, void*)+0x2f>
c001297f:	83 ec 0c             	sub    esp,0xc
c0012982:	53                   	push   ebx
c0012983:	e8 4c fe ff ff       	call   c00127d4 <VCache::writeWriteBuffer()>
c0012988:	83 c4 10             	add    esp,0x10
c001298b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001298e:	83 ec 0c             	sub    esp,0xc
c0012991:	8b 10                	mov    edx,DWORD PTR [eax]
c0012993:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001299b:	57                   	push   edi
c001299c:	56                   	push   esi
c001299d:	50                   	push   eax
c001299e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129a1:	83 c4 14             	add    esp,0x14
c00129a4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129a7:	e8 0a 5f 00 00       	call   c00188b6 <Semaphore::release()>
c00129ac:	83 c4 10             	add    esp,0x10
c00129af:	31 c0                	xor    eax,eax
c00129b1:	5b                   	pop    ebx
c00129b2:	5e                   	pop    esi
c00129b3:	5f                   	pop    edi
c00129b4:	c3                   	ret    
c00129b5:	90                   	nop

c00129b6 <Video::putrect(int, int, int, int, unsigned int)>:
c00129b6:	55                   	push   ebp
c00129b7:	57                   	push   edi
c00129b8:	56                   	push   esi
c00129b9:	53                   	push   ebx
c00129ba:	83 ec 1c             	sub    esp,0x1c
c00129bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129c1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00129c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00129c9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00129cd:	01 e8                	add    eax,ebp
c00129cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00129d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129d7:	01 df                	add    edi,ebx
c00129d9:	39 fb                	cmp    ebx,edi
c00129db:	7d 1b                	jge    c00129f8 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00129dd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00129e1:	7d 12                	jge    c00129f5 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00129e3:	8b 16                	mov    edx,DWORD PTR [esi]
c00129e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00129e9:	53                   	push   ebx
c00129ea:	55                   	push   ebp
c00129eb:	45                   	inc    ebp
c00129ec:	56                   	push   esi
c00129ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00129f0:	83 c4 10             	add    esp,0x10
c00129f3:	eb e8                	jmp    c00129dd <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00129f5:	43                   	inc    ebx
c00129f6:	eb e1                	jmp    c00129d9 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00129f8:	83 c4 1c             	add    esp,0x1c
c00129fb:	5b                   	pop    ebx
c00129fc:	5e                   	pop    esi
c00129fd:	5f                   	pop    edi
c00129fe:	5d                   	pop    ebp
c00129ff:	c3                   	ret    

c0012a00 <Video::blit(unsigned int*, int, int, int, int)>:
c0012a00:	55                   	push   ebp
c0012a01:	57                   	push   edi
c0012a02:	56                   	push   esi
c0012a03:	53                   	push   ebx
c0012a04:	83 ec 1c             	sub    esp,0x1c
c0012a07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a0f:	85 c0                	test   eax,eax
c0012a11:	79 02                	jns    c0012a15 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012a13:	31 c0                	xor    eax,eax
c0012a15:	c1 e0 02             	shl    eax,0x2
c0012a18:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a24:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012a28:	39 d8                	cmp    eax,ebx
c0012a2a:	7e 49                	jle    c0012a75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a2c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a32:	7c 41                	jl     c0012a75 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a34:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012a38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012a40:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012a44:	39 f9                	cmp    ecx,edi
c0012a46:	7e 22                	jle    c0012a6a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012a48:	83 c5 04             	add    ebp,0x4
c0012a4b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a51:	7c 14                	jl     c0012a67 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012a53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012a55:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012a58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012a60:	56                   	push   esi
c0012a61:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012a64:	83 c4 10             	add    esp,0x10
c0012a67:	47                   	inc    edi
c0012a68:	eb d2                	jmp    c0012a3c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012a6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a6e:	43                   	inc    ebx
c0012a6f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012a73:	eb ab                	jmp    c0012a20 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012a75:	83 c4 1c             	add    esp,0x1c
c0012a78:	5b                   	pop    ebx
c0012a79:	5e                   	pop    esi
c0012a7a:	5f                   	pop    edi
c0012a7b:	5d                   	pop    ebp
c0012a7c:	c3                   	ret    
c0012a7d:	90                   	nop

c0012a7e <Video::clearScreen(unsigned int)>:
c0012a7e:	57                   	push   edi
c0012a7f:	56                   	push   esi
c0012a80:	53                   	push   ebx
c0012a81:	31 db                	xor    ebx,ebx
c0012a83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a87:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012a8d:	7e 1f                	jle    c0012aae <Video::clearScreen(unsigned int)+0x30>
c0012a8f:	31 ff                	xor    edi,edi
c0012a91:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012a97:	7e 12                	jle    c0012aab <Video::clearScreen(unsigned int)+0x2d>
c0012a99:	8b 06                	mov    eax,DWORD PTR [esi]
c0012a9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a9f:	53                   	push   ebx
c0012aa0:	57                   	push   edi
c0012aa1:	47                   	inc    edi
c0012aa2:	56                   	push   esi
c0012aa3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012aa6:	83 c4 10             	add    esp,0x10
c0012aa9:	eb e6                	jmp    c0012a91 <Video::clearScreen(unsigned int)+0x13>
c0012aab:	43                   	inc    ebx
c0012aac:	eb d9                	jmp    c0012a87 <Video::clearScreen(unsigned int)+0x9>
c0012aae:	5b                   	pop    ebx
c0012aaf:	5e                   	pop    esi
c0012ab0:	5f                   	pop    edi
c0012ab1:	c3                   	ret    

c0012ab2 <Video::putpixel(int, int, unsigned int)>:
c0012ab2:	c7 44 24 04 5c 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002135c
c0012aba:	e9 24 c5 ff ff       	jmp    c000efe3 <Dbg::kprintf(char const*, ...)>
c0012abf:	90                   	nop

c0012ac0 <Video::Video(char const*)>:
c0012ac0:	83 ec 0c             	sub    esp,0xc
c0012ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac7:	83 ec 08             	sub    esp,0x8
c0012aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ace:	50                   	push   eax
c0012acf:	e8 0a db ff ff       	call   c00105de <Device::Device(char const*)>
c0012ad4:	83 c4 10             	add    esp,0x10
c0012ad7:	ba 74 13 02 c0       	mov    edx,0xc0021374
c0012adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae0:	89 10                	mov    DWORD PTR [eax],edx
c0012ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012af0:	90                   	nop
c0012af1:	83 c4 0c             	add    esp,0xc
c0012af4:	c3                   	ret    
c0012af5:	90                   	nop

c0012af6 <Video::~Video()>:
c0012af6:	83 ec 0c             	sub    esp,0xc
c0012af9:	ba 74 13 02 c0       	mov    edx,0xc0021374
c0012afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b02:	89 10                	mov    DWORD PTR [eax],edx
c0012b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	50                   	push   eax
c0012b0c:	e8 7f d7 ff ff       	call   c0010290 <Device::~Device()>
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	90                   	nop
c0012b15:	83 c4 0c             	add    esp,0xc
c0012b18:	c3                   	ret    
c0012b19:	90                   	nop

c0012b1a <Video::~Video()>:
c0012b1a:	83 ec 0c             	sub    esp,0xc
c0012b1d:	83 ec 0c             	sub    esp,0xc
c0012b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b24:	e8 cd ff ff ff       	call   c0012af6 <Video::~Video()>
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	83 ec 08             	sub    esp,0x8
c0012b2f:	68 64 01 00 00       	push   0x164
c0012b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b38:	e8 c6 c3 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	83 c4 0c             	add    esp,0xc
c0012b43:	c3                   	ret    

c0012b44 <Video::isMonochrome()>:
c0012b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b48:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <Video::getWidth()>:
c0012b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012b5a:	c3                   	ret    
c0012b5b:	90                   	nop

c0012b5c <Video::getHeight()>:
c0012b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop

c0012b68 <Video::drawCursor(int, int, unsigned char*, int)>:
c0012b68:	55                   	push   ebp
c0012b69:	57                   	push   edi
c0012b6a:	56                   	push   esi
c0012b6b:	53                   	push   ebx
c0012b6c:	83 ec 2c             	sub    esp,0x2c
c0012b6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012b73:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012b77:	83 f8 01             	cmp    eax,0x1
c0012b7a:	19 c9                	sbb    ecx,ecx
c0012b7c:	31 db                	xor    ebx,ebx
c0012b7e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012b82:	89 cd                	mov    ebp,ecx
c0012b84:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012b8c:	f7 d5                	not    ebp
c0012b8e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012b94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012b98:	01 d8                	add    eax,ebx
c0012b9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b9e:	56                   	push   esi
c0012b9f:	e8 b8 ff ff ff       	call   c0012b5c <Video::getHeight()>
c0012ba4:	59                   	pop    ecx
c0012ba5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ba9:	7e 70                	jle    c0012c1b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012bab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012baf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012bb3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012bb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012bba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012bbe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012bc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bc9:	89 f8                	mov    eax,edi
c0012bcb:	83 c0 20             	add    eax,0x20
c0012bce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bd2:	56                   	push   esi
c0012bd3:	e8 78 ff ff ff       	call   c0012b50 <Video::getWidth()>
c0012bd8:	5a                   	pop    edx
c0012bd9:	39 c7                	cmp    edi,eax
c0012bdb:	7d 34                	jge    c0012c11 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012bdd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012be2:	74 05                	je     c0012be9 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012be4:	8b 06                	mov    eax,DWORD PTR [esi]
c0012be6:	55                   	push   ebp
c0012be7:	eb 0d                	jmp    c0012bf6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012be9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012bee:	74 12                	je     c0012c02 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012bf0:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012bf6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bfa:	57                   	push   edi
c0012bfb:	56                   	push   esi
c0012bfc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012c06:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012c0a:	47                   	inc    edi
c0012c0b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012c0f:	75 c1                	jne    c0012bd2 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012c11:	43                   	inc    ebx
c0012c12:	83 fb 20             	cmp    ebx,0x20
c0012c15:	0f 85 79 ff ff ff    	jne    c0012b94 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012c1b:	83 c4 2c             	add    esp,0x2c
c0012c1e:	5b                   	pop    ebx
c0012c1f:	5e                   	pop    esi
c0012c20:	5f                   	pop    edi
c0012c21:	5d                   	pop    ebp
c0012c22:	c3                   	ret    
c0012c23:	90                   	nop

c0012c24 <ACPI::close(int, int, void*)>:
c0012c24:	83 ec 1c             	sub    esp,0x1c
c0012c27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012c2f:	74 0a                	je     c0012c3b <ACPI::close(int, int, void*)+0x17>
c0012c31:	b8 00 00 00 00       	mov    eax,0x0
c0012c36:	e9 9a 00 00 00       	jmp    c0012cd5 <ACPI::close(int, int, void*)+0xb1>
c0012c3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012c40:	75 37                	jne    c0012c79 <ACPI::close(int, int, void*)+0x55>
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	68 ac 13 02 c0       	push   0xc00213ac
c0012c4a:	e8 94 c3 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0012c57:	85 c0                	test   eax,eax
c0012c59:	74 07                	je     c0012c62 <ACPI::close(int, int, void*)+0x3e>
c0012c5b:	a1 c8 3d 02 c0       	mov    eax,ds:0xc0023dc8
c0012c60:	ff d0                	call   eax
c0012c62:	83 ec 0c             	sub    esp,0xc
c0012c65:	68 80 14 02 c0       	push   0xc0021480
c0012c6a:	e8 09 20 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012c77:	eb 5c                	jmp    c0012cd5 <ACPI::close(int, int, void*)+0xb1>
c0012c79:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012c7e:	75 50                	jne    c0012cd0 <ACPI::close(int, int, void*)+0xac>
c0012c80:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0012c85:	85 c0                	test   eax,eax
c0012c87:	74 07                	je     c0012c90 <ACPI::close(int, int, void*)+0x6c>
c0012c89:	a1 c4 3d 02 c0       	mov    eax,ds:0xc0023dc4
c0012c8e:	ff d0                	call   eax
c0012c90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012c95:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012c9a:	83 e0 02             	and    eax,0x2
c0012c9d:	74 1c                	je     c0012cbb <ACPI::close(int, int, void*)+0x97>
c0012c9f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012ca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012caa:	89 c2                	mov    edx,eax
c0012cac:	ec                   	in     al,dx
c0012cad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012cb1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012cb9:	eb da                	jmp    c0012c95 <ACPI::close(int, int, void*)+0x71>
c0012cbb:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012cc2:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012cc7:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012ccb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ccf:	ee                   	out    dx,al
c0012cd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012cd5:	83 c4 1c             	add    esp,0x1c
c0012cd8:	c3                   	ret    

c0012cd9 <findRSDP()>:
c0012cd9:	83 ec 1c             	sub    esp,0x1c
c0012cdc:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012ce1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012ce7:	83 e0 04             	and    eax,0x4
c0012cea:	84 c0                	test   al,al
c0012cec:	75 07                	jne    c0012cf5 <findRSDP()+0x1c>
c0012cee:	b8 00 00 00 00       	mov    eax,0x0
c0012cf3:	eb 6a                	jmp    c0012d5f <findRSDP()+0x86>
c0012cf5:	a1 90 37 02 c0       	mov    eax,ds:0xc0023790
c0012cfa:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012cff:	7f 1b                	jg     c0012d1c <findRSDP()+0x43>
c0012d01:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012d06:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012d0c:	83 e2 fb             	and    edx,0xfffffffb
c0012d0f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012d15:	b8 00 00 00 00       	mov    eax,0x0
c0012d1a:	eb 43                	jmp    c0012d5f <findRSDP()+0x86>
c0012d1c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012d24:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012d2c:	77 2c                	ja     c0012d5a <findRSDP()+0x81>
c0012d2e:	83 ec 04             	sub    esp,0x4
c0012d31:	6a 08                	push   0x8
c0012d33:	68 b9 13 02 c0       	push   0xc00213b9
c0012d38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d3c:	e8 2e d8 fe ff       	call   c000056f <memcmp>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	85 c0                	test   eax,eax
c0012d46:	0f 94 c0             	sete   al
c0012d49:	84 c0                	test   al,al
c0012d4b:	74 06                	je     c0012d53 <findRSDP()+0x7a>
c0012d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d51:	eb 0c                	jmp    c0012d5f <findRSDP()+0x86>
c0012d53:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012d58:	eb ca                	jmp    c0012d24 <findRSDP()+0x4b>
c0012d5a:	b8 00 00 00 00       	mov    eax,0x0
c0012d5f:	83 c4 1c             	add    esp,0x1c
c0012d62:	c3                   	ret    

c0012d63 <loadACPITables(unsigned char*)>:
c0012d63:	56                   	push   esi
c0012d64:	53                   	push   ebx
c0012d65:	83 ec 44             	sub    esp,0x44
c0012d68:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012d6d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d73:	83 e0 04             	and    eax,0x4
c0012d76:	84 c0                	test   al,al
c0012d78:	0f 84 05 02 00 00    	je     c0012f83 <loadACPITables(unsigned char*)+0x220>
c0012d7e:	a0 e0 3f 02 c0       	mov    al,ds:0xc0023fe0
c0012d83:	84 c0                	test   al,al
c0012d85:	74 75                	je     c0012dfc <loadACPITables(unsigned char*)+0x99>
c0012d87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012d8b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d96:	83 e8 24             	sub    eax,0x24
c0012d99:	c1 e8 03             	shr    eax,0x3
c0012d9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012da0:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012da8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dac:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012db0:	0f 8d b2 00 00 00    	jge    c0012e68 <loadACPITables(unsigned char*)+0x105>
c0012db6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012dba:	83 c0 24             	add    eax,0x24
c0012dbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012dc5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012dc9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012dcd:	c1 e0 03             	shl    eax,0x3
c0012dd0:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012dd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012dd8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ddd:	89 c1                	mov    ecx,eax
c0012ddf:	a1 cc 3d 02 c0       	mov    eax,ds:0xc0023dcc
c0012de4:	8d 50 01             	lea    edx,[eax+0x1]
c0012de7:	89 15 cc 3d 02 c0    	mov    DWORD PTR ds:0xc0023dcc,edx
c0012ded:	89 ca                	mov    edx,ecx
c0012def:	89 14 c5 e4 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc21c],edx
c0012df6:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012dfa:	eb ac                	jmp    c0012da8 <loadACPITables(unsigned char*)+0x45>
c0012dfc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e00:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e0b:	83 e8 24             	sub    eax,0x24
c0012e0e:	c1 e8 02             	shr    eax,0x2
c0012e11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e15:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012e1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e21:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012e25:	7d 41                	jge    c0012e68 <loadACPITables(unsigned char*)+0x105>
c0012e27:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e2b:	83 c0 24             	add    eax,0x24
c0012e2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e3e:	c1 e0 02             	shl    eax,0x2
c0012e41:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012e45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012e49:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012e4b:	a1 cc 3d 02 c0       	mov    eax,ds:0xc0023dcc
c0012e50:	8d 50 01             	lea    edx,[eax+0x1]
c0012e53:	89 15 cc 3d 02 c0    	mov    DWORD PTR ds:0xc0023dcc,edx
c0012e59:	89 ca                	mov    edx,ecx
c0012e5b:	89 14 c5 e4 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc21c],edx
c0012e62:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012e66:	eb b5                	jmp    c0012e1d <loadACPITables(unsigned char*)+0xba>
c0012e68:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012e70:	a1 cc 3d 02 c0       	mov    eax,ds:0xc0023dcc
c0012e75:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012e79:	0f 8d 05 01 00 00    	jge    c0012f84 <loadACPITables(unsigned char*)+0x221>
c0012e7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012e83:	8b 04 c5 e4 3d 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc21c]
c0012e8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9a:	25 ff 0f 00 00       	and    eax,0xfff
c0012e9f:	89 c6                	mov    esi,eax
c0012ea1:	e8 4d b0 ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c0012ea6:	89 c3                	mov    ebx,eax
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	6a 01                	push   0x1
c0012ead:	e8 b1 ae ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c0012eb2:	83 c4 10             	add    esp,0x10
c0012eb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012eb9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012ebf:	83 ec 0c             	sub    esp,0xc
c0012ec2:	6a 01                	push   0x1
c0012ec4:	6a 01                	push   0x1
c0012ec6:	50                   	push   eax
c0012ec7:	52                   	push   edx
c0012ec8:	53                   	push   ebx
c0012ec9:	e8 b8 b7 ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ece:	83 c4 20             	add    esp,0x20
c0012ed1:	09 f0                	or     eax,esi
c0012ed3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ed7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012edb:	c1 e0 03             	shl    eax,0x3
c0012ede:	05 e0 3d 02 c0       	add    eax,0xc0023de0
c0012ee3:	83 ec 04             	sub    esp,0x4
c0012ee6:	6a 04                	push   0x4
c0012ee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eec:	50                   	push   eax
c0012eed:	e8 e0 d6 fe ff       	call   c00005d2 <memcpy>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012efc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f04:	05 00 10 00 00       	add    eax,0x1000
c0012f09:	c1 e8 0c             	shr    eax,0xc
c0012f0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f14:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1b:	25 ff 0f 00 00       	and    eax,0xfff
c0012f20:	89 c6                	mov    esi,eax
c0012f22:	e8 cc af ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c0012f27:	89 c3                	mov    ebx,eax
c0012f29:	83 ec 0c             	sub    esp,0xc
c0012f2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012f30:	e8 2e ae ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c0012f35:	83 c4 10             	add    esp,0x10
c0012f38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f3c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f42:	83 ec 0c             	sub    esp,0xc
c0012f45:	6a 01                	push   0x1
c0012f47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f4b:	50                   	push   eax
c0012f4c:	52                   	push   edx
c0012f4d:	53                   	push   ebx
c0012f4e:	e8 33 b7 ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f53:	83 c4 20             	add    esp,0x20
c0012f56:	09 f0                	or     eax,esi
c0012f58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012f5f:	83 ec 0c             	sub    esp,0xc
c0012f62:	50                   	push   eax
c0012f63:	e8 31 b1 ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f73:	89 14 c5 e4 3d 02 c0 	mov    DWORD PTR [eax*8-0x3ffdc21c],edx
c0012f7a:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012f7e:	e9 ed fe ff ff       	jmp    c0012e70 <loadACPITables(unsigned char*)+0x10d>
c0012f83:	90                   	nop
c0012f84:	83 c4 44             	add    esp,0x44
c0012f87:	5b                   	pop    ebx
c0012f88:	5e                   	pop    esi
c0012f89:	c3                   	ret    

c0012f8a <findRSDT(unsigned char*)>:
c0012f8a:	56                   	push   esi
c0012f8b:	53                   	push   ebx
c0012f8c:	83 ec 44             	sub    esp,0x44
c0012f8f:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0012f94:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f9a:	83 e0 04             	and    eax,0x4
c0012f9d:	84 c0                	test   al,al
c0012f9f:	75 0a                	jne    c0012fab <findRSDT(unsigned char*)+0x21>
c0012fa1:	b8 00 00 00 00       	mov    eax,0x0
c0012fa6:	e9 f7 00 00 00       	jmp    c00130a2 <findRSDT(unsigned char*)+0x118>
c0012fab:	83 ec 04             	sub    esp,0x4
c0012fae:	6a 24                	push   0x24
c0012fb0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0012fb4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012fb8:	50                   	push   eax
c0012fb9:	e8 14 d6 fe ff       	call   c00005d2 <memcpy>
c0012fbe:	83 c4 10             	add    esp,0x10
c0012fc1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0012fc5:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012fc9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012fd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012fd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012fd9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012fe5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fe9:	25 ff 0f 00 00       	and    eax,0xfff
c0012fee:	89 c6                	mov    esi,eax
c0012ff0:	e8 fe ae ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c0012ff5:	89 c3                	mov    ebx,eax
c0012ff7:	83 ec 0c             	sub    esp,0xc
c0012ffa:	6a 02                	push   0x2
c0012ffc:	e8 62 ad ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c0013001:	83 c4 10             	add    esp,0x10
c0013004:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013008:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	6a 01                	push   0x1
c0013013:	6a 02                	push   0x2
c0013015:	50                   	push   eax
c0013016:	52                   	push   edx
c0013017:	53                   	push   ebx
c0013018:	e8 69 b6 ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001301d:	83 c4 20             	add    esp,0x20
c0013020:	09 f0                	or     eax,esi
c0013022:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013026:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001302a:	25 ff 0f 00 00       	and    eax,0xfff
c001302f:	89 c6                	mov    esi,eax
c0013031:	e8 bd ae ff ff       	call   c000def3 <Virt::getAKernelVAS()>
c0013036:	89 c3                	mov    ebx,eax
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	6a 02                	push   0x2
c001303d:	e8 21 ad ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c0013042:	83 c4 10             	add    esp,0x10
c0013045:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013049:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001304f:	83 ec 0c             	sub    esp,0xc
c0013052:	6a 01                	push   0x1
c0013054:	6a 02                	push   0x2
c0013056:	50                   	push   eax
c0013057:	52                   	push   edx
c0013058:	53                   	push   ebx
c0013059:	e8 28 b6 ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001305e:	83 c4 20             	add    esp,0x20
c0013061:	09 f0                	or     eax,esi
c0013063:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013067:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001306c:	75 11                	jne    c001307f <findRSDT(unsigned char*)+0xf5>
c001306e:	c6 05 e0 3f 02 c0 00 	mov    BYTE PTR ds:0xc0023fe0,0x0
c0013075:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013079:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001307d:	eb 1f                	jmp    c001309e <findRSDT(unsigned char*)+0x114>
c001307f:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0013084:	75 11                	jne    c0013097 <findRSDT(unsigned char*)+0x10d>
c0013086:	c6 05 e0 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fe0,0x1
c001308d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013091:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013095:	eb 07                	jmp    c001309e <findRSDT(unsigned char*)+0x114>
c0013097:	b8 00 00 00 00       	mov    eax,0x0
c001309c:	eb 04                	jmp    c00130a2 <findRSDT(unsigned char*)+0x118>
c001309e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00130a2:	83 c4 44             	add    esp,0x44
c00130a5:	5b                   	pop    ebx
c00130a6:	5e                   	pop    esi
c00130a7:	c3                   	ret    

c00130a8 <findDataTable(unsigned char*, char*)>:
c00130a8:	83 ec 1c             	sub    esp,0x1c
c00130ab:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00130b0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130b6:	83 e0 04             	and    eax,0x4
c00130b9:	84 c0                	test   al,al
c00130bb:	75 07                	jne    c00130c4 <findDataTable(unsigned char*, char*)+0x1c>
c00130bd:	b8 00 00 00 00       	mov    eax,0x0
c00130c2:	eb 7c                	jmp    c0013140 <findDataTable(unsigned char*, char*)+0x98>
c00130c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130cc:	a1 cc 3d 02 c0       	mov    eax,ds:0xc0023dcc
c00130d1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00130d5:	7d 3a                	jge    c0013111 <findDataTable(unsigned char*, char*)+0x69>
c00130d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130db:	c1 e0 03             	shl    eax,0x3
c00130de:	05 e0 3d 02 c0       	add    eax,0xc0023de0
c00130e3:	83 ec 04             	sub    esp,0x4
c00130e6:	6a 04                	push   0x4
c00130e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00130ec:	50                   	push   eax
c00130ed:	e8 7d d4 fe ff       	call   c000056f <memcmp>
c00130f2:	83 c4 10             	add    esp,0x10
c00130f5:	85 c0                	test   eax,eax
c00130f7:	0f 94 c0             	sete   al
c00130fa:	84 c0                	test   al,al
c00130fc:	74 0d                	je     c001310b <findDataTable(unsigned char*, char*)+0x63>
c00130fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013102:	8b 04 c5 e4 3d 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdc21c]
c0013109:	eb 35                	jmp    c0013140 <findDataTable(unsigned char*, char*)+0x98>
c001310b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001310f:	eb bb                	jmp    c00130cc <findDataTable(unsigned char*, char*)+0x24>
c0013111:	a0 e0 3f 02 c0       	mov    al,ds:0xc0023fe0
c0013116:	84 c0                	test   al,al
c0013118:	74 07                	je     c0013121 <findDataTable(unsigned char*, char*)+0x79>
c001311a:	b8 58 00 00 00       	mov    eax,0x58
c001311f:	eb 05                	jmp    c0013126 <findDataTable(unsigned char*, char*)+0x7e>
c0013121:	b8 52 00 00 00       	mov    eax,0x52
c0013126:	83 ec 04             	sub    esp,0x4
c0013129:	50                   	push   eax
c001312a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001312e:	68 a4 14 02 c0       	push   0xc00214a4
c0013133:	e8 ab be ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0013138:	83 c4 10             	add    esp,0x10
c001313b:	b8 00 00 00 00       	mov    eax,0x0
c0013140:	83 c4 1c             	add    esp,0x1c
c0013143:	c3                   	ret    

c0013144 <scanMADT()>:
c0013144:	83 ec 2c             	sub    esp,0x2c
c0013147:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001314c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013152:	83 e0 04             	and    eax,0x4
c0013155:	84 c0                	test   al,al
c0013157:	0f 84 73 03 00 00    	je     c00134d0 <scanMADT()+0x38c>
c001315d:	e8 77 fb ff ff       	call   c0012cd9 <findRSDP()>
c0013162:	a3 ec 3f 02 c0       	mov    ds:0xc0023fec,eax
c0013167:	a1 ec 3f 02 c0       	mov    eax,ds:0xc0023fec
c001316c:	85 c0                	test   eax,eax
c001316e:	75 19                	jne    c0013189 <scanMADT()+0x45>
c0013170:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013175:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001317b:	83 e2 fb             	and    edx,0xfffffffb
c001317e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013184:	e9 4b 03 00 00       	jmp    c00134d4 <scanMADT()+0x390>
c0013189:	a1 ec 3f 02 c0       	mov    eax,ds:0xc0023fec
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	50                   	push   eax
c0013192:	e8 f3 fd ff ff       	call   c0012f8a <findRSDT(unsigned char*)>
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	a3 e8 3f 02 c0       	mov    ds:0xc0023fe8,eax
c001319f:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00131a4:	85 c0                	test   eax,eax
c00131a6:	75 19                	jne    c00131c1 <scanMADT()+0x7d>
c00131a8:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00131ad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131b3:	83 e2 fb             	and    edx,0xfffffffb
c00131b6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131bc:	e9 13 03 00 00       	jmp    c00134d4 <scanMADT()+0x390>
c00131c1:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	50                   	push   eax
c00131ca:	e8 94 fb ff ff       	call   c0012d63 <loadACPITables(unsigned char*)>
c00131cf:	83 c4 10             	add    esp,0x10
c00131d2:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00131d7:	83 ec 08             	sub    esp,0x8
c00131da:	68 c2 13 02 c0       	push   0xc00213c2
c00131df:	50                   	push   eax
c00131e0:	e8 c3 fe ff ff       	call   c00130a8 <findDataTable(unsigned char*, char*)>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00131f1:	75 19                	jne    c001320c <scanMADT()+0xc8>
c00131f3:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c00131f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131fe:	83 e2 fe             	and    edx,0xfffffffe
c0013201:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013207:	e9 c8 02 00 00       	jmp    c00134d4 <scanMADT()+0x390>
c001320c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013214:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013218:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001321b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001321f:	0f 87 af 02 00 00    	ja     c00134d4 <scanMADT()+0x390>
c0013225:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001322d:	0f 87 a1 02 00 00    	ja     c00134d4 <scanMADT()+0x390>
c0013233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013237:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001323b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001323f:	8d 50 01             	lea    edx,[eax+0x1]
c0013242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013246:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001324a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001324e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013252:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013256:	8d 50 01             	lea    edx,[eax+0x1]
c0013259:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001325d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013261:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013265:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013269:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c001326e:	0f 86 5f 02 00 00    	jbe    c00134d3 <scanMADT()+0x38f>
c0013274:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013279:	75 57                	jne    c00132d2 <scanMADT()+0x18e>
c001327b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001327f:	8d 50 01             	lea    edx,[eax+0x1]
c0013282:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013286:	8a 15 20 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024120
c001328c:	0f b6 d2             	movzx  edx,dl
c001328f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013293:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013297:	88 82 60 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbea0],al
c001329d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a1:	8d 50 01             	lea    edx,[eax+0x1]
c00132a4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132a8:	8a 15 20 41 02 c0    	mov    dl,BYTE PTR ds:0xc0024120
c00132ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c00132b1:	88 0d 20 41 02 c0    	mov    BYTE PTR ds:0xc0024120,cl
c00132b7:	0f b6 d2             	movzx  edx,dl
c00132ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132be:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132c2:	88 82 40 41 02 c0    	mov    BYTE PTR [edx-0x3ffdbec0],al
c00132c8:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00132cd:	e9 ea 01 00 00       	jmp    c00134bc <scanMADT()+0x378>
c00132d2:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00132d7:	0f 85 14 01 00 00    	jne    c00133f1 <scanMADT()+0x2ad>
c00132dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132e1:	8d 50 01             	lea    edx,[eax+0x1]
c00132e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132e8:	8a 15 f0 3f 02 c0    	mov    dl,BYTE PTR ds:0xc0023ff0
c00132ee:	0f b6 d2             	movzx  edx,dl
c00132f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132f5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00132f9:	88 82 00 40 02 c0    	mov    BYTE PTR [edx-0x3ffdc000],al
c00132ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013303:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001330b:	01 d0                	add    eax,edx
c001330d:	83 c0 2c             	add    eax,0x2c
c0013310:	8a 00                	mov    al,BYTE PTR [eax]
c0013312:	0f b6 d0             	movzx  edx,al
c0013315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013319:	8d 48 01             	lea    ecx,[eax+0x1]
c001331c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013320:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013324:	0f b6 c0             	movzx  eax,al
c0013327:	c1 e0 08             	shl    eax,0x8
c001332a:	89 d1                	mov    ecx,edx
c001332c:	09 c1                	or     ecx,eax
c001332e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013332:	8d 50 02             	lea    edx,[eax+0x2]
c0013335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013339:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001333d:	0f b6 c0             	movzx  eax,al
c0013340:	c1 e0 10             	shl    eax,0x10
c0013343:	09 c1                	or     ecx,eax
c0013345:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013349:	8d 50 03             	lea    edx,[eax+0x3]
c001334c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013350:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013354:	0f b6 c0             	movzx  eax,al
c0013357:	c1 e0 18             	shl    eax,0x18
c001335a:	09 c1                	or     ecx,eax
c001335c:	89 ca                	mov    edx,ecx
c001335e:	a0 f0 3f 02 c0       	mov    al,ds:0xc0023ff0
c0013363:	0f b6 c0             	movzx  eax,al
c0013366:	89 14 85 20 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbfe0],edx
c001336d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013372:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013376:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001337a:	01 d0                	add    eax,edx
c001337c:	83 c0 2c             	add    eax,0x2c
c001337f:	8a 00                	mov    al,BYTE PTR [eax]
c0013381:	0f b6 d0             	movzx  edx,al
c0013384:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013388:	8d 48 01             	lea    ecx,[eax+0x1]
c001338b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001338f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013393:	0f b6 c0             	movzx  eax,al
c0013396:	c1 e0 08             	shl    eax,0x8
c0013399:	89 d1                	mov    ecx,edx
c001339b:	09 c1                	or     ecx,eax
c001339d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a1:	8d 50 02             	lea    edx,[eax+0x2]
c00133a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133a8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133ac:	0f b6 c0             	movzx  eax,al
c00133af:	c1 e0 10             	shl    eax,0x10
c00133b2:	09 c1                	or     ecx,eax
c00133b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b8:	8d 50 03             	lea    edx,[eax+0x3]
c00133bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133c3:	0f b6 c0             	movzx  eax,al
c00133c6:	c1 e0 18             	shl    eax,0x18
c00133c9:	09 c1                	or     ecx,eax
c00133cb:	89 ca                	mov    edx,ecx
c00133cd:	a0 f0 3f 02 c0       	mov    al,ds:0xc0023ff0
c00133d2:	0f b6 c0             	movzx  eax,al
c00133d5:	89 14 85 a0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf60],edx
c00133dc:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133e1:	a0 f0 3f 02 c0       	mov    al,ds:0xc0023ff0
c00133e6:	40                   	inc    eax
c00133e7:	a2 f0 3f 02 c0       	mov    ds:0xc0023ff0,al
c00133ec:	e9 cb 00 00 00       	jmp    c00134bc <scanMADT()+0x378>
c00133f1:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00133f6:	0f 85 a6 00 00 00    	jne    c00134a2 <scanMADT()+0x35e>
c00133fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013400:	8d 50 01             	lea    edx,[eax+0x1]
c0013403:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013407:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001340b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001340f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013413:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013417:	8d 50 01             	lea    edx,[eax+0x1]
c001341a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001341e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013422:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013426:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001342a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001342e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013432:	01 d0                	add    eax,edx
c0013434:	83 c0 2c             	add    eax,0x2c
c0013437:	8a 00                	mov    al,BYTE PTR [eax]
c0013439:	0f b6 d0             	movzx  edx,al
c001343c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013440:	8d 48 01             	lea    ecx,[eax+0x1]
c0013443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013447:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001344b:	0f b6 c0             	movzx  eax,al
c001344e:	c1 e0 08             	shl    eax,0x8
c0013451:	89 d1                	mov    ecx,edx
c0013453:	09 c1                	or     ecx,eax
c0013455:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013459:	8d 50 02             	lea    edx,[eax+0x2]
c001345c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013460:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013464:	0f b6 c0             	movzx  eax,al
c0013467:	c1 e0 10             	shl    eax,0x10
c001346a:	09 c1                	or     ecx,eax
c001346c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013470:	8d 50 03             	lea    edx,[eax+0x3]
c0013473:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013477:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001347b:	0f b6 c0             	movzx  eax,al
c001347e:	c1 e0 18             	shl    eax,0x18
c0013481:	09 c8                	or     eax,ecx
c0013483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013487:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001348c:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013491:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013496:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001349a:	88 90 a0 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd160],dl
c00134a0:	eb 1a                	jmp    c00134bc <scanMADT()+0x378>
c00134a2:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00134a7:	75 07                	jne    c00134b0 <scanMADT()+0x36c>
c00134a9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134ae:	eb 0c                	jmp    c00134bc <scanMADT()+0x378>
c00134b0:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00134b5:	75 05                	jne    c00134bc <scanMADT()+0x378>
c00134b7:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00134bc:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00134c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00134c5:	01 d0                	add    eax,edx
c00134c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134cb:	e9 44 fd ff ff       	jmp    c0013214 <scanMADT()+0xd0>
c00134d0:	90                   	nop
c00134d1:	eb 01                	jmp    c00134d4 <scanMADT()+0x390>
c00134d3:	90                   	nop
c00134d4:	83 c4 2c             	add    esp,0x2c
c00134d7:	c3                   	ret    

c00134d8 <ACPI::ACPI()>:
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134df:	83 ec 08             	sub    esp,0x8
c00134e2:	68 c7 13 02 c0       	push   0xc00213c7
c00134e7:	50                   	push   eax
c00134e8:	e8 f1 d0 ff ff       	call   c00105de <Device::Device(char const*)>
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	ba 70 15 02 c0       	mov    edx,0xc0021570
c00134f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f9:	89 10                	mov    DWORD PTR [eax],edx
c00134fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350a:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013518:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013526:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001352d:	e8 12 fc ff ff       	call   c0013144 <scanMADT()>
c0013532:	90                   	nop
c0013533:	83 c4 0c             	add    esp,0xc
c0013536:	c3                   	ret    
c0013537:	90                   	nop

c0013538 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013538:	83 ec 2c             	sub    esp,0x2c
c001353b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001353f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013543:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013547:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001354b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013550:	88 d0                	mov    al,dl
c0013552:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013556:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001355b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013567:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001356d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013571:	0f 8d 97 00 00 00    	jge    c001360e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013577:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001357b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001357f:	83 c2 2a             	add    edx,0x2a
c0013582:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013586:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c001358b:	75 78                	jne    c0013605 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001358d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013591:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013595:	83 c2 2a             	add    edx,0x2a
c0013598:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001359c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00135a0:	75 63                	jne    c0013605 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135a2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00135a7:	74 3a                	je     c00135e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00135a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135b1:	83 c2 2a             	add    edx,0x2a
c00135b4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00135b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135bf:	39 c2                	cmp    edx,eax
c00135c1:	74 10                	je     c00135d3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00135c3:	83 ec 0c             	sub    esp,0xc
c00135c6:	68 d4 14 02 c0       	push   0xc00214d4
c00135cb:	e8 a8 16 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	83 ec 0c             	sub    esp,0xc
c00135d6:	68 cc 13 02 c0       	push   0xc00213cc
c00135db:	e8 98 16 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00135e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135ef:	83 c2 2a             	add    edx,0x2a
c00135f2:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00135f6:	8b 02                	mov    eax,DWORD PTR [edx]
c00135f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00135fb:	89 01                	mov    DWORD PTR [ecx],eax
c00135fd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013600:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013605:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013609:	e9 55 ff ff ff       	jmp    c0013563 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001360e:	90                   	nop
c001360f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013613:	83 c4 2c             	add    esp,0x2c
c0013616:	c2 04 00             	ret    0x4
c0013619:	90                   	nop

c001361a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001361a:	56                   	push   esi
c001361b:	53                   	push   ebx
c001361c:	83 ec 14             	sub    esp,0x14
c001361f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013623:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013627:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001362b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013630:	88 c8                	mov    al,cl
c0013632:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013636:	88 d0                	mov    al,dl
c0013638:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001363c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013640:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001364a:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013650:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013655:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001365a:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001365f:	83 ec 04             	sub    esp,0x4
c0013662:	56                   	push   esi
c0013663:	53                   	push   ebx
c0013664:	51                   	push   ecx
c0013665:	52                   	push   edx
c0013666:	50                   	push   eax
c0013667:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001366b:	68 04 15 02 c0       	push   0xc0021504
c0013670:	e8 6e b9 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0013675:	83 c4 20             	add    esp,0x20
c0013678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001367c:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013686:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013689:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001368d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013695:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001369b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001369f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00136a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136a6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00136ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136af:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136b5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00136b9:	8d 48 01             	lea    ecx,[eax+0x1]
c00136bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136c0:	83 c2 2a             	add    edx,0x2a
c00136c3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00136c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136d5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136d8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136dc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00136e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136e4:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00136ea:	8d 50 01             	lea    edx,[eax+0x1]
c00136ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136f1:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00136f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136fb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013701:	3d 00 08 00 00       	cmp    eax,0x800
c0013706:	75 10                	jne    c0013718 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	68 db 13 02 c0       	push   0xc00213db
c0013710:	e8 63 15 00 00       	call   c0014c78 <Krnl::panic(char const*)>
c0013715:	83 c4 10             	add    esp,0x10
c0013718:	90                   	nop
c0013719:	83 c4 14             	add    esp,0x14
c001371c:	5b                   	pop    ebx
c001371d:	5e                   	pop    esi
c001371e:	c3                   	ret    
c001371f:	90                   	nop

c0013720 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013720:	b8 00 00 00 00       	mov    eax,0x0
c0013725:	c3                   	ret    

c0013726 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013726:	83 ec 1c             	sub    esp,0x1c
c0013729:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001372d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013730:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013734:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013739:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001373e:	83 ec 08             	sub    esp,0x8
c0013741:	52                   	push   edx
c0013742:	50                   	push   eax
c0013743:	e8 d6 7a ff ff       	call   c000b21e <Computer::readCMOS(unsigned char)>
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001374f:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0013754:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0013759:	83 ec 04             	sub    esp,0x4
c001375c:	6a 01                	push   0x1
c001375e:	52                   	push   edx
c001375f:	50                   	push   eax
c0013760:	e8 c7 7b ff ff       	call   c000b32c <Computer::writeCMOS(unsigned char, unsigned char)>
c0013765:	83 c4 10             	add    esp,0x10
c0013768:	90                   	nop
c0013769:	83 c4 1c             	add    esp,0x1c
c001376c:	c3                   	ret    
c001376d:	90                   	nop

c001376e <ACPI::open(int, int, void*)>:
c001376e:	53                   	push   ebx
c001376f:	83 ec 18             	sub    esp,0x18
c0013772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013776:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001377d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013781:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013787:	84 c0                	test   al,al
c0013789:	74 60                	je     c00137eb <ACPI::open(int, int, void*)+0x7d>
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	68 58 01 00 00       	push   0x158
c0013793:	e8 5c b7 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	89 c3                	mov    ebx,eax
c001379d:	83 ec 0c             	sub    esp,0xc
c00137a0:	53                   	push   ebx
c00137a1:	e8 fe 7c 00 00       	call   c001b4a4 <PCI::PCI()>
c00137a6:	83 c4 10             	add    esp,0x10
c00137a9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00137ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137b1:	83 ec 08             	sub    esp,0x8
c00137b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00137b8:	50                   	push   eax
c00137b9:	e8 30 cc ff ff       	call   c00103ee <Device::addChild(Device*)>
c00137be:	83 c4 10             	add    esp,0x10
c00137c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00137c7:	83 c0 08             	add    eax,0x8
c00137ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00137cc:	6a 00                	push   0x0
c00137ce:	6a 00                	push   0x0
c00137d0:	6a 00                	push   0x0
c00137d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137d6:	ff d0                	call   eax
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	83 ec 0c             	sub    esp,0xc
c00137de:	68 f8 13 02 c0       	push   0xc00213f8
c00137e3:	e8 fb b7 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	83 ec 0c             	sub    esp,0xc
c00137ee:	68 03 14 02 c0       	push   0xc0021403
c00137f3:	e8 9a 33 00 00       	call   c0016b92 <Thr::loadKernelSymbolTable(char const*)>
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c0013801:	83 ec 08             	sub    esp,0x8
c0013804:	6a 01                	push   0x1
c0013806:	68 21 14 02 c0       	push   0xc0021421
c001380b:	e8 47 3e 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	83 ec 08             	sub    esp,0x8
c0013816:	53                   	push   ebx
c0013817:	50                   	push   eax
c0013818:	e8 8d 3f 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c001381d:	83 c4 10             	add    esp,0x10
c0013820:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c0013826:	83 ec 08             	sub    esp,0x8
c0013829:	6a 01                	push   0x1
c001382b:	68 3e 14 02 c0       	push   0xc002143e
c0013830:	e8 22 3e 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c0013835:	83 c4 10             	add    esp,0x10
c0013838:	83 ec 08             	sub    esp,0x8
c001383b:	53                   	push   ebx
c001383c:	50                   	push   eax
c001383d:	e8 68 3f 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001384a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013850:	83 e0 04             	and    eax,0x4
c0013853:	84 c0                	test   al,al
c0013855:	0f 84 cf 00 00 00    	je     c001392a <ACPI::open(int, int, void*)+0x1bc>
c001385b:	83 ec 0c             	sub    esp,0xc
c001385e:	68 14 01 00 00       	push   0x114
c0013863:	e8 8c b6 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	89 c3                	mov    ebx,eax
c001386d:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0013872:	83 ec 04             	sub    esp,0x4
c0013875:	50                   	push   eax
c0013876:	68 5b 14 02 c0       	push   0xc002145b
c001387b:	53                   	push   ebx
c001387c:	e8 91 bc ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0013881:	83 c4 10             	add    esp,0x10
c0013884:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013888:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001388d:	74 17                	je     c00138a6 <ACPI::open(int, int, void*)+0x138>
c001388f:	83 ec 0c             	sub    esp,0xc
c0013892:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013896:	e8 49 bf ff ff       	call   c000f7e4 <File::exists()>
c001389b:	83 c4 10             	add    esp,0x10
c001389e:	84 c0                	test   al,al
c00138a0:	74 04                	je     c00138a6 <ACPI::open(int, int, void*)+0x138>
c00138a2:	b0 01                	mov    al,0x1
c00138a4:	eb 02                	jmp    c00138a8 <ACPI::open(int, int, void*)+0x13a>
c00138a6:	b0 00                	mov    al,0x0
c00138a8:	84 c0                	test   al,al
c00138aa:	74 25                	je     c00138d1 <ACPI::open(int, int, void*)+0x163>
c00138ac:	8b 1d 48 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023748
c00138b2:	83 ec 08             	sub    esp,0x8
c00138b5:	6a 01                	push   0x1
c00138b7:	68 5b 14 02 c0       	push   0xc002145b
c00138bc:	e8 96 3d 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c00138c1:	83 c4 10             	add    esp,0x10
c00138c4:	83 ec 08             	sub    esp,0x8
c00138c7:	53                   	push   ebx
c00138c8:	50                   	push   eax
c00138c9:	e8 dc 3e 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c00138ce:	83 c4 10             	add    esp,0x10
c00138d1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138d6:	74 1e                	je     c00138f6 <ACPI::open(int, int, void*)+0x188>
c00138d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138dd:	74 17                	je     c00138f6 <ACPI::open(int, int, void*)+0x188>
c00138df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00138e5:	83 c0 08             	add    eax,0x8
c00138e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138ea:	83 ec 0c             	sub    esp,0xc
c00138ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138f1:	ff d0                	call   eax
c00138f3:	83 c4 10             	add    esp,0x10
c00138f6:	a1 e8 3f 02 c0       	mov    eax,ds:0xc0023fe8
c00138fb:	83 ec 08             	sub    esp,0x8
c00138fe:	68 78 14 02 c0       	push   0xc0021478
c0013903:	50                   	push   eax
c0013904:	e8 9f f7 ff ff       	call   c00130a8 <findDataTable(unsigned char*, char*)>
c0013909:	83 c4 10             	add    esp,0x10
c001390c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013910:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013915:	74 13                	je     c001392a <ACPI::open(int, int, void*)+0x1bc>
c0013917:	83 ec 08             	sub    esp,0x8
c001391a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001391e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013922:	e8 ff fd ff ff       	call   c0013726 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013927:	83 c4 10             	add    esp,0x10
c001392a:	b8 00 00 00 00       	mov    eax,0x0
c001392f:	83 c4 18             	add    esp,0x18
c0013932:	5b                   	pop    ebx
c0013933:	c3                   	ret    

c0013934 <ACPI::sleep()>:
c0013934:	83 ec 0c             	sub    esp,0xc
c0013937:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001393c:	85 c0                	test   eax,eax
c001393e:	74 07                	je     c0013947 <ACPI::sleep()+0x13>
c0013940:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c0013945:	ff d0                	call   eax
c0013947:	90                   	nop
c0013948:	83 c4 0c             	add    esp,0xc
c001394b:	c3                   	ret    

c001394c <CPU::close(int, int, void*)>:
c001394c:	31 c0                	xor    eax,eax
c001394e:	c3                   	ret    

c001394f <lookupAMDCPUName(unsigned char, unsigned char)>:
c001394f:	55                   	push   ebp
c0013950:	57                   	push   edi
c0013951:	56                   	push   esi
c0013952:	53                   	push   ebx
c0013953:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013957:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001395b:	89 ce                	mov    esi,ecx
c001395d:	89 d5                	mov    ebp,edx
c001395f:	80 f9 04             	cmp    cl,0x4
c0013962:	75 28                	jne    c001398c <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0013964:	8d 42 f9             	lea    eax,[edx-0x7]
c0013967:	3c 03                	cmp    al,0x3
c0013969:	0f 86 63 01 00 00    	jbe    c0013ad2 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001396f:	80 fa 03             	cmp    dl,0x3
c0013972:	0f 84 5a 01 00 00    	je     c0013ad2 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013978:	8d 7a f2             	lea    edi,[edx-0xe]
c001397b:	b8 70 30 02 c0       	mov    eax,0xc0023070
c0013980:	89 fb                	mov    ebx,edi
c0013982:	80 fb 01             	cmp    bl,0x1
c0013985:	77 4e                	ja     c00139d5 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0013987:	e9 52 01 00 00       	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001398c:	80 f9 05             	cmp    cl,0x5
c001398f:	75 4d                	jne    c00139de <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013991:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0013996:	80 fa 03             	cmp    dl,0x3
c0013999:	0f 86 3f 01 00 00    	jbe    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001399f:	8d 7a fa             	lea    edi,[edx-0x6]
c00139a2:	b8 90 30 02 c0       	mov    eax,0xc0023090
c00139a7:	89 fb                	mov    ebx,edi
c00139a9:	80 fb 01             	cmp    bl,0x1
c00139ac:	0f 86 2c 01 00 00    	jbe    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139b2:	b8 a0 30 02 c0       	mov    eax,0xc00230a0
c00139b7:	80 fa 08             	cmp    dl,0x8
c00139ba:	0f 84 1e 01 00 00    	je     c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139c0:	89 d7                	mov    edi,edx
c00139c2:	b8 b0 30 02 c0       	mov    eax,0xc00230b0
c00139c7:	83 e7 fb             	and    edi,0xfffffffb
c00139ca:	89 fb                	mov    ebx,edi
c00139cc:	80 fb 09             	cmp    bl,0x9
c00139cf:	0f 84 09 01 00 00    	je     c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139d5:	31 c0                	xor    eax,eax
c00139d7:	89 eb                	mov    ebx,ebp
c00139d9:	0f b6 fb             	movzx  edi,bl
c00139dc:	eb 30                	jmp    c0013a0e <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00139de:	31 c0                	xor    eax,eax
c00139e0:	80 f9 06             	cmp    cl,0x6
c00139e3:	75 f2                	jne    c00139d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139e5:	80 fa 0a             	cmp    dl,0xa
c00139e8:	77 ed                	ja     c00139d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139ea:	bf de 05 00 00       	mov    edi,0x5de
c00139ef:	0f a3 d7             	bt     edi,edx
c00139f2:	73 e3                	jae    c00139d7 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139f4:	b8 c0 30 02 c0       	mov    eax,0xc00230c0
c00139f9:	e9 e0 00 00 00       	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139fe:	39 c7                	cmp    edi,eax
c0013a00:	0f 84 d3 00 00 00    	je     c0013ad9 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a06:	40                   	inc    eax
c0013a07:	3d d0 00 00 00       	cmp    eax,0xd0
c0013a0c:	74 09                	je     c0013a17 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013a0e:	89 f3                	mov    ebx,esi
c0013a10:	80 fb 0f             	cmp    bl,0xf
c0013a13:	75 f1                	jne    c0013a06 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013a15:	eb e7                	jmp    c00139fe <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013a17:	80 f9 10             	cmp    cl,0x10
c0013a1a:	75 14                	jne    c0013a30 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013a1c:	8d 42 fc             	lea    eax,[edx-0x4]
c0013a1f:	83 e0 fb             	and    eax,0xfffffffb
c0013a22:	3c 02                	cmp    al,0x2
c0013a24:	76 34                	jbe    c0013a5a <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013a26:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a2b:	80 fa 02             	cmp    dl,0x2
c0013a2e:	eb 24                	jmp    c0013a54 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013a30:	80 f9 11             	cmp    cl,0x11
c0013a33:	75 13                	jne    c0013a48 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013a35:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a3a:	80 fa 03             	cmp    dl,0x3
c0013a3d:	0f 85 9b 00 00 00    	jne    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a43:	e9 91 00 00 00       	jmp    c0013ad9 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a48:	80 f9 12             	cmp    cl,0x12
c0013a4b:	75 14                	jne    c0013a61 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a4d:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a52:	fe ca                	dec    dl
c0013a54:	0f 85 84 00 00 00    	jne    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a5a:	b8 e0 30 02 c0       	mov    eax,0xc00230e0
c0013a5f:	eb 7d                	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a61:	80 f9 14             	cmp    cl,0x14
c0013a64:	75 12                	jne    c0013a78 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013a66:	4a                   	dec    edx
c0013a67:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a6c:	80 fa 01             	cmp    dl,0x1
c0013a6f:	77 6d                	ja     c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a71:	b8 f0 30 02 c0       	mov    eax,0xc00230f0
c0013a76:	eb 66                	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a78:	80 f9 15             	cmp    cl,0x15
c0013a7b:	75 31                	jne    c0013aae <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013a7d:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0013a82:	80 fa 01             	cmp    dl,0x1
c0013a85:	74 57                	je     c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a87:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013a8c:	80 fa 13             	cmp    dl,0x13
c0013a8f:	76 0c                	jbe    c0013a9d <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013a91:	80 fa 30             	cmp    dl,0x30
c0013a94:	75 48                	jne    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a96:	b8 20 31 02 c0       	mov    eax,0xc0023120
c0013a9b:	eb 41                	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a9d:	b9 04 00 09 00       	mov    ecx,0x90004
c0013aa2:	0f a3 d1             	bt     ecx,edx
c0013aa5:	73 37                	jae    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aa7:	b8 10 31 02 c0       	mov    eax,0xc0023110
c0013aac:	eb 30                	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aae:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013ab3:	80 f9 16             	cmp    cl,0x16
c0013ab6:	75 26                	jne    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab8:	b8 30 31 02 c0       	mov    eax,0xc0023130
c0013abd:	84 d2                	test   dl,dl
c0013abf:	74 1d                	je     c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac1:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013ac6:	80 fa 30             	cmp    dl,0x30
c0013ac9:	75 13                	jne    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013acb:	b8 40 31 02 c0       	mov    eax,0xc0023140
c0013ad0:	eb 0c                	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad2:	b8 60 30 02 c0       	mov    eax,0xc0023060
c0013ad7:	eb 05                	jmp    c0013ade <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad9:	b8 d0 30 02 c0       	mov    eax,0xc00230d0
c0013ade:	5b                   	pop    ebx
c0013adf:	5e                   	pop    esi
c0013ae0:	5f                   	pop    edi
c0013ae1:	5d                   	pop    ebp
c0013ae2:	c3                   	ret    

c0013ae3 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013ae3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013ae7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013aeb:	80 f9 04             	cmp    cl,0x4
c0013aee:	75 6b                	jne    c0013b5b <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013af0:	b8 c0 2e 02 c0       	mov    eax,0xc0022ec0
c0013af5:	80 fa 01             	cmp    dl,0x1
c0013af8:	0f 86 92 02 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013afe:	b8 d0 2e 02 c0       	mov    eax,0xc0022ed0
c0013b03:	80 fa 02             	cmp    dl,0x2
c0013b06:	0f 84 84 02 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b0c:	b8 e0 2e 02 c0       	mov    eax,0xc0022ee0
c0013b11:	80 fa 03             	cmp    dl,0x3
c0013b14:	0f 84 76 02 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b1a:	b8 f0 2e 02 c0       	mov    eax,0xc0022ef0
c0013b1f:	80 fa 04             	cmp    dl,0x4
c0013b22:	0f 84 68 02 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b28:	b8 00 2f 02 c0       	mov    eax,0xc0022f00
c0013b2d:	80 fa 05             	cmp    dl,0x5
c0013b30:	0f 84 5a 02 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b36:	b8 e0 2e 02 c0       	mov    eax,0xc0022ee0
c0013b3b:	80 fa 07             	cmp    dl,0x7
c0013b3e:	0f 84 4c 02 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b44:	83 ea 08             	sub    edx,0x8
c0013b47:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013b4c:	80 fa 01             	cmp    dl,0x1
c0013b4f:	0f 87 3b 02 00 00    	ja     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b55:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c0013b5a:	c3                   	ret    
c0013b5b:	80 f9 05             	cmp    cl,0x5
c0013b5e:	75 45                	jne    c0013ba5 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013b60:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013b63:	b8 20 2f 02 c0       	mov    eax,0xc0022f20
c0013b68:	80 f9 02             	cmp    cl,0x2
c0013b6b:	0f 86 1f 02 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b71:	80 fa 04             	cmp    dl,0x4
c0013b74:	0f 84 f3 01 00 00    	je     c0013d6d <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013b7a:	80 fa 07             	cmp    dl,0x7
c0013b7d:	0f 84 0d 02 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b83:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c0013b88:	80 fa 08             	cmp    dl,0x8
c0013b8b:	0f 84 ff 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b91:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013b96:	80 fa 09             	cmp    dl,0x9
c0013b99:	0f 85 f1 01 00 00    	jne    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b9f:	b8 40 2f 02 c0       	mov    eax,0xc0022f40
c0013ba4:	c3                   	ret    
c0013ba5:	80 f9 06             	cmp    cl,0x6
c0013ba8:	0f 85 85 01 00 00    	jne    c0013d33 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013bae:	b8 50 2f 02 c0       	mov    eax,0xc0022f50
c0013bb3:	80 fa 01             	cmp    dl,0x1
c0013bb6:	0f 84 d4 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bbc:	8d 42 fb             	lea    eax,[edx-0x5]
c0013bbf:	3c 01                	cmp    al,0x1
c0013bc1:	0f 86 ac 01 00 00    	jbe    c0013d73 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bc7:	80 fa 03             	cmp    dl,0x3
c0013bca:	0f 84 a3 01 00 00    	je     c0013d73 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bd0:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013bd3:	b8 70 2f 02 c0       	mov    eax,0xc0022f70
c0013bd8:	80 f9 01             	cmp    cl,0x1
c0013bdb:	0f 86 af 01 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013be1:	80 fa 09             	cmp    dl,0x9
c0013be4:	0f 84 8f 01 00 00    	je     c0013d79 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013bea:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013bed:	80 f9 01             	cmp    cl,0x1
c0013bf0:	0f 86 9a 01 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bf6:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013bfb:	80 fa 0d             	cmp    dl,0xd
c0013bfe:	0f 84 8c 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c04:	b8 90 2f 02 c0       	mov    eax,0xc0022f90
c0013c09:	80 fa 0e             	cmp    dl,0xe
c0013c0c:	0f 84 7e 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c12:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013c17:	80 fa 0f             	cmp    dl,0xf
c0013c1a:	0f 84 70 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c20:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013c25:	80 fa 15             	cmp    dl,0x15
c0013c28:	0f 84 62 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c2e:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013c31:	b8 a0 2f 02 c0       	mov    eax,0xc0022fa0
c0013c36:	80 f9 01             	cmp    cl,0x1
c0013c39:	0f 86 51 01 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c3f:	80 fa 1a             	cmp    dl,0x1a
c0013c42:	0f 84 37 01 00 00    	je     c0013d7f <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c48:	80 fa 1c             	cmp    dl,0x1c
c0013c4b:	0f 84 34 01 00 00    	je     c0013d85 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013c51:	80 fa 1d             	cmp    dl,0x1d
c0013c54:	0f 84 36 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c5a:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013c5f:	80 fa 25             	cmp    dl,0x25
c0013c62:	0f 84 28 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c68:	8d 4a da             	lea    ecx,[edx-0x26]
c0013c6b:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013c70:	80 f9 01             	cmp    cl,0x1
c0013c73:	0f 86 17 01 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c79:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013c7e:	80 fa 2a             	cmp    dl,0x2a
c0013c81:	0f 84 09 01 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c87:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013c8c:	80 fa 2c             	cmp    dl,0x2c
c0013c8f:	0f 84 fb 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c95:	b8 e0 2f 02 c0       	mov    eax,0xc0022fe0
c0013c9a:	80 fa 2d             	cmp    dl,0x2d
c0013c9d:	0f 84 ed 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ca3:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013ca8:	80 fa 2e             	cmp    dl,0x2e
c0013cab:	0f 84 df 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cb1:	b8 d0 2f 02 c0       	mov    eax,0xc0022fd0
c0013cb6:	80 fa 2f             	cmp    dl,0x2f
c0013cb9:	0f 84 d1 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cbf:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013cc2:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013cc7:	80 f9 01             	cmp    cl,0x1
c0013cca:	0f 86 c0 00 00 00    	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cd0:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013cd5:	80 fa 37             	cmp    dl,0x37
c0013cd8:	0f 84 b2 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cde:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013ce3:	80 fa 3a             	cmp    dl,0x3a
c0013ce6:	0f 84 a4 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cec:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013cf1:	80 fa 3c             	cmp    dl,0x3c
c0013cf4:	0f 84 96 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cfa:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0013cff:	80 fa 3d             	cmp    dl,0x3d
c0013d02:	0f 84 88 00 00 00    	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d08:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0013d0d:	80 fa 3e             	cmp    dl,0x3e
c0013d10:	74 7e                	je     c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d12:	8d 42 bb             	lea    eax,[edx-0x45]
c0013d15:	3c 01                	cmp    al,0x1
c0013d17:	76 72                	jbe    c0013d8b <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d19:	80 fa 3f             	cmp    dl,0x3f
c0013d1c:	74 6d                	je     c0013d8b <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d1e:	80 fa 4a             	cmp    dl,0x4a
c0013d21:	74 0a                	je     c0013d2d <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013d23:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013d28:	80 fa 4d             	cmp    dl,0x4d
c0013d2b:	75 63                	jne    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d2d:	b8 f0 2f 02 c0       	mov    eax,0xc0022ff0
c0013d32:	c3                   	ret    
c0013d33:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013d38:	80 f9 0b             	cmp    cl,0xb
c0013d3b:	75 0a                	jne    c0013d47 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013d3d:	fe ca                	dec    dl
c0013d3f:	75 4f                	jne    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d41:	b8 30 30 02 c0       	mov    eax,0xc0023030
c0013d46:	c3                   	ret    
c0013d47:	80 f9 0f             	cmp    cl,0xf
c0013d4a:	75 44                	jne    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d4c:	b8 40 30 02 c0       	mov    eax,0xc0023040
c0013d51:	80 fa 02             	cmp    dl,0x2
c0013d54:	76 3a                	jbe    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d56:	8d 42 fd             	lea    eax,[edx-0x3]
c0013d59:	3c 01                	cmp    al,0x1
c0013d5b:	76 0a                	jbe    c0013d67 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013d5d:	b8 e9 16 02 c0       	mov    eax,0xc00216e9
c0013d62:	80 fa 06             	cmp    dl,0x6
c0013d65:	75 29                	jne    c0013d90 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d67:	b8 50 30 02 c0       	mov    eax,0xc0023050
c0013d6c:	c3                   	ret    
c0013d6d:	b8 30 2f 02 c0       	mov    eax,0xc0022f30
c0013d72:	c3                   	ret    
c0013d73:	b8 60 2f 02 c0       	mov    eax,0xc0022f60
c0013d78:	c3                   	ret    
c0013d79:	b8 80 2f 02 c0       	mov    eax,0xc0022f80
c0013d7e:	c3                   	ret    
c0013d7f:	b8 b0 2f 02 c0       	mov    eax,0xc0022fb0
c0013d84:	c3                   	ret    
c0013d85:	b8 c0 2f 02 c0       	mov    eax,0xc0022fc0
c0013d8a:	c3                   	ret    
c0013d8b:	b8 10 30 02 c0       	mov    eax,0xc0023010
c0013d90:	c3                   	ret    

c0013d91 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013d91:	60                   	pusha  
c0013d92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d9e:	9c                   	pushf  
c0013d9f:	fa                   	cli    
c0013da0:	0f 09                	wbinvd 
c0013da2:	0f 30                	wrmsr  
c0013da4:	9d                   	popf   
c0013da5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013da9:	89 02                	mov    DWORD PTR [edx],eax
c0013dab:	61                   	popa   
c0013dac:	c3                   	ret    

c0013dad <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013dad:	60                   	pusha  
c0013dae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013db2:	9c                   	pushf  
c0013db3:	fa                   	cli    
c0013db4:	0f 09                	wbinvd 
c0013db6:	31 c0                	xor    eax,eax
c0013db8:	31 d2                	xor    edx,edx
c0013dba:	0f 32                	rdmsr  
c0013dbc:	9d                   	popf   
c0013dbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013dc1:	89 02                	mov    DWORD PTR [edx],eax
c0013dc3:	61                   	popa   
c0013dc4:	c3                   	ret    

c0013dc5 <AMD_K6_writeback(int, int, int)>:
c0013dc5:	56                   	push   esi
c0013dc6:	53                   	push   ebx
c0013dc7:	83 ec 10             	sub    esp,0x10
c0013dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dce:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013dd3:	75 5d                	jne    c0013e32 <AMD_K6_writeback(int, int, int)+0x6d>
c0013dd5:	83 f8 08             	cmp    eax,0x8
c0013dd8:	75 09                	jne    c0013de3 <AMD_K6_writeback(int, int, int)+0x1e>
c0013dda:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013ddf:	7e 13                	jle    c0013df4 <AMD_K6_writeback(int, int, int)+0x2f>
c0013de1:	eb 30                	jmp    c0013e13 <AMD_K6_writeback(int, int, int)+0x4e>
c0013de3:	83 f8 06             	cmp    eax,0x6
c0013de6:	7c 4a                	jl     c0013e32 <AMD_K6_writeback(int, int, int)+0x6d>
c0013de8:	83 f8 07             	cmp    eax,0x7
c0013deb:	7e 07                	jle    c0013df4 <AMD_K6_writeback(int, int, int)+0x2f>
c0013ded:	83 f8 09             	cmp    eax,0x9
c0013df0:	74 21                	je     c0013e13 <AMD_K6_writeback(int, int, int)+0x4e>
c0013df2:	eb 3e                	jmp    c0013e32 <AMD_K6_writeback(int, int, int)+0x6d>
c0013df4:	89 e6                	mov    esi,esp
c0013df6:	8b 1d 84 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023784
c0013dfc:	56                   	push   esi
c0013dfd:	c1 eb 15             	shr    ebx,0x15
c0013e00:	68 82 00 00 c0       	push   0xc0000082
c0013e05:	83 e3 7e             	and    ebx,0x7e
c0013e08:	e8 a0 ff ff ff       	call   c0013dad <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e0d:	56                   	push   esi
c0013e0e:	6a 00                	push   0x0
c0013e10:	53                   	push   ebx
c0013e11:	eb 12                	jmp    c0013e25 <AMD_K6_writeback(int, int, int)+0x60>
c0013e13:	89 e3                	mov    ebx,esp
c0013e15:	53                   	push   ebx
c0013e16:	68 82 00 00 c0       	push   0xc0000082
c0013e1b:	e8 8d ff ff ff       	call   c0013dad <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e20:	53                   	push   ebx
c0013e21:	6a 00                	push   0x0
c0013e23:	6a 00                	push   0x0
c0013e25:	68 82 00 00 c0       	push   0xc0000082
c0013e2a:	e8 62 ff ff ff       	call   c0013d91 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013e2f:	83 c4 18             	add    esp,0x18
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	5b                   	pop    ebx
c0013e36:	5e                   	pop    esi
c0013e37:	c3                   	ret    

c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013e38:	55                   	push   ebp
c0013e39:	57                   	push   edi
c0013e3a:	56                   	push   esi
c0013e3b:	53                   	push   ebx
c0013e3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e48:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e4c:	39 05 60 31 02 c0    	cmp    DWORD PTR ds:0xc0023160,eax
c0013e52:	75 23                	jne    c0013e77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013e54:	a1 8c 41 02 c0       	mov    eax,ds:0xc002418c
c0013e59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e5d:	89 06                	mov    DWORD PTR [esi],eax
c0013e5f:	a1 88 41 02 c0       	mov    eax,ds:0xc0024188
c0013e64:	89 07                	mov    DWORD PTR [edi],eax
c0013e66:	a1 84 41 02 c0       	mov    eax,ds:0xc0024184
c0013e6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e6e:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c0013e73:	89 02                	mov    DWORD PTR [edx],eax
c0013e75:	eb 3f                	jmp    c0013eb6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013e77:	31 c9                	xor    ecx,ecx
c0013e79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e7d:	0f a2                	cpuid  
c0013e7f:	89 06                	mov    DWORD PTR [esi],eax
c0013e81:	89 1f                	mov    DWORD PTR [edi],ebx
c0013e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e87:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013e8a:	89 10                	mov    DWORD PTR [eax],edx
c0013e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e90:	a3 60 31 02 c0       	mov    ds:0xc0023160,eax
c0013e95:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e97:	a3 8c 41 02 c0       	mov    ds:0xc002418c,eax
c0013e9c:	8b 07                	mov    eax,DWORD PTR [edi]
c0013e9e:	a3 88 41 02 c0       	mov    ds:0xc0024188,eax
c0013ea3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ea6:	a3 84 41 02 c0       	mov    ds:0xc0024184,eax
c0013eab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013eaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0013eb1:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c0013eb6:	5b                   	pop    ebx
c0013eb7:	5e                   	pop    esi
c0013eb8:	5f                   	pop    edi
c0013eb9:	5d                   	pop    ebp
c0013eba:	c3                   	ret    

c0013ebb <cpuidCheckEDX(unsigned int)>:
c0013ebb:	83 ec 10             	sub    esp,0x10
c0013ebe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ec2:	50                   	push   eax
c0013ec3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ec7:	50                   	push   eax
c0013ec8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ecc:	50                   	push   eax
c0013ecd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ed1:	50                   	push   eax
c0013ed2:	6a 01                	push   0x1
c0013ed4:	e8 5f ff ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ed9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013edd:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ee1:	0f 95 c0             	setne  al
c0013ee4:	83 c4 24             	add    esp,0x24
c0013ee7:	c3                   	ret    

c0013ee8 <cpuidCheckECX(unsigned int)>:
c0013ee8:	83 ec 10             	sub    esp,0x10
c0013eeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eef:	50                   	push   eax
c0013ef0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ef4:	50                   	push   eax
c0013ef5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ef9:	50                   	push   eax
c0013efa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013efe:	50                   	push   eax
c0013eff:	6a 01                	push   0x1
c0013f01:	e8 32 ff ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f0a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f0e:	0f 95 c0             	setne  al
c0013f11:	83 c4 24             	add    esp,0x24
c0013f14:	c3                   	ret    

c0013f15 <cpuidCheckExtendedEBX(unsigned int)>:
c0013f15:	83 ec 10             	sub    esp,0x10
c0013f18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f1c:	50                   	push   eax
c0013f1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f21:	50                   	push   eax
c0013f22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f26:	50                   	push   eax
c0013f27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f2b:	50                   	push   eax
c0013f2c:	6a 07                	push   0x7
c0013f2e:	e8 05 ff ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f37:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013f3b:	0f 95 c0             	setne  al
c0013f3e:	83 c4 24             	add    esp,0x24
c0013f41:	c3                   	ret    

c0013f42 <cpuidCheckExtendedECX(unsigned int)>:
c0013f42:	83 ec 10             	sub    esp,0x10
c0013f45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f49:	50                   	push   eax
c0013f4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f4e:	50                   	push   eax
c0013f4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f53:	50                   	push   eax
c0013f54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f58:	50                   	push   eax
c0013f59:	6a 07                	push   0x7
c0013f5b:	e8 d8 fe ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f64:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f68:	0f 95 c0             	setne  al
c0013f6b:	83 c4 24             	add    esp,0x24
c0013f6e:	c3                   	ret    

c0013f6f <getCPUNumber()>:
c0013f6f:	31 c0                	xor    eax,eax
c0013f71:	c3                   	ret    

c0013f72 <thisCPU()>:
c0013f72:	e8 f8 ff ff ff       	call   c0013f6f <getCPUNumber()>
c0013f77:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c0013f7d:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013f84:	c3                   	ret    
c0013f85:	90                   	nop

c0013f86 <CPU::CPU()>:
c0013f86:	83 ec 0c             	sub    esp,0xc
c0013f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8d:	83 ec 08             	sub    esp,0x8
c0013f90:	68 e9 16 02 c0       	push   0xc00216e9
c0013f95:	50                   	push   eax
c0013f96:	e8 43 c6 ff ff       	call   c00105de <Device::Device(char const*)>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c0013fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa7:	89 10                	mov    DWORD PTR [eax],edx
c0013fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fad:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbb:	05 78 01 00 00       	add    eax,0x178
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	50                   	push   eax
c0013fc4:	e8 4d 74 ff ff       	call   c000b416 <GDT::GDT()>
c0013fc9:	83 c4 10             	add    esp,0x10
c0013fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd0:	05 7c 09 00 00       	add    eax,0x97c
c0013fd5:	83 ec 0c             	sub    esp,0xc
c0013fd8:	50                   	push   eax
c0013fd9:	e8 98 76 ff ff       	call   c000b676 <IDT::IDT()>
c0013fde:	83 c4 10             	add    esp,0x10
c0013fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe5:	05 7c 11 00 00       	add    eax,0x117c
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	50                   	push   eax
c0013fee:	e8 41 96 ff ff       	call   c000d634 <TSS::TSS()>
c0013ff3:	83 c4 10             	add    esp,0x10
c0013ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffa:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014005:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001400f:	90                   	nop
c0014010:	83 c4 0c             	add    esp,0xc
c0014013:	c3                   	ret    

c0014014 <CPU::displayFeatures()>:
c0014014:	c3                   	ret    
c0014015:	90                   	nop

c0014016 <CPU::detectFeatures()>:
c0014016:	55                   	push   ebp
c0014017:	57                   	push   edi
c0014018:	56                   	push   esi
c0014019:	53                   	push   ebx
c001401a:	83 ec 50             	sub    esp,0x50
c001401d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014021:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001402b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014032:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014038:	6a 0d                	push   0xd
c001403a:	6a 00                	push   0x0
c001403c:	57                   	push   edi
c001403d:	e8 c6 c5 fe ff       	call   c0000608 <memset>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001404a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014051:	0f 84 20 09 00 00    	je     c0014977 <CPU::detectFeatures()+0x961>
c0014057:	83 ec 0c             	sub    esp,0xc
c001405a:	6a 10                	push   0x10
c001405c:	e8 5a fe ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c0014061:	83 e0 01             	and    eax,0x1
c0014064:	8d 14 00             	lea    edx,[eax+eax*1]
c0014067:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001406d:	83 e0 fd             	and    eax,0xfffffffd
c0014070:	09 d0                	or     eax,edx
c0014072:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014078:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001407f:	e8 37 fe ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c0014084:	83 e0 01             	and    eax,0x1
c0014087:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001408e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014094:	83 e0 fb             	and    eax,0xfffffffb
c0014097:	09 d0                	or     eax,edx
c0014099:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001409f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00140a6:	e8 10 fe ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c00140ab:	83 e0 01             	and    eax,0x1
c00140ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00140b5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140bb:	83 e0 f7             	and    eax,0xfffffff7
c00140be:	09 d0                	or     eax,edx
c00140c0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140c6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00140cd:	e8 e9 fd ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c00140d2:	83 e0 01             	and    eax,0x1
c00140d5:	c1 e0 04             	shl    eax,0x4
c00140d8:	88 c2                	mov    dl,al
c00140da:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140e0:	83 e0 ef             	and    eax,0xffffffef
c00140e3:	09 d0                	or     eax,edx
c00140e5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140eb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00140f2:	e8 c4 fd ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c00140f7:	83 e0 01             	and    eax,0x1
c00140fa:	c1 e0 05             	shl    eax,0x5
c00140fd:	88 c2                	mov    dl,al
c00140ff:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014105:	83 e0 df             	and    eax,0xffffffdf
c0014108:	09 d0                	or     eax,edx
c001410a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014110:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014117:	e8 9f fd ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c001411c:	83 e0 01             	and    eax,0x1
c001411f:	8d 14 00             	lea    edx,[eax+eax*1]
c0014122:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014128:	83 e0 fd             	and    eax,0xfffffffd
c001412b:	09 d0                	or     eax,edx
c001412d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014133:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001413a:	e8 7c fd ff ff       	call   c0013ebb <cpuidCheckEDX(unsigned int)>
c001413f:	83 e0 01             	and    eax,0x1
c0014142:	c1 e0 06             	shl    eax,0x6
c0014145:	88 c2                	mov    dl,al
c0014147:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001414d:	83 e0 bf             	and    eax,0xffffffbf
c0014150:	09 d0                	or     eax,edx
c0014152:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014158:	58                   	pop    eax
c0014159:	8d 74 24 28          	lea    esi,[esp+0x28]
c001415d:	56                   	push   esi
c001415e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014162:	55                   	push   ebp
c0014163:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014167:	50                   	push   eax
c0014168:	8d 54 24 28          	lea    edx,[esp+0x28]
c001416c:	52                   	push   edx
c001416d:	6a 00                	push   0x0
c001416f:	e8 c4 fc ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014174:	83 c4 1c             	add    esp,0x1c
c0014177:	6a 04                	push   0x4
c0014179:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001417d:	50                   	push   eax
c001417e:	57                   	push   edi
c001417f:	e8 4e c4 fe ff       	call   c00005d2 <memcpy>
c0014184:	83 c4 0c             	add    esp,0xc
c0014187:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001418d:	6a 04                	push   0x4
c001418f:	56                   	push   esi
c0014190:	50                   	push   eax
c0014191:	e8 3c c4 fe ff       	call   c00005d2 <memcpy>
c0014196:	83 c4 0c             	add    esp,0xc
c0014199:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001419f:	6a 04                	push   0x4
c00141a1:	55                   	push   ebp
c00141a2:	50                   	push   eax
c00141a3:	e8 2a c4 fe ff       	call   c00005d2 <memcpy>
c00141a8:	58                   	pop    eax
c00141a9:	5a                   	pop    edx
c00141aa:	68 94 15 02 c0       	push   0xc0021594
c00141af:	57                   	push   edi
c00141b0:	e8 43 c5 fe ff       	call   c00006f8 <strcmp>
c00141b5:	83 c4 10             	add    esp,0x10
c00141b8:	85 c0                	test   eax,eax
c00141ba:	75 0f                	jne    c00141cb <CPU::detectFeatures()+0x1b5>
c00141bc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00141c6:	e9 22 02 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c00141cb:	50                   	push   eax
c00141cc:	50                   	push   eax
c00141cd:	68 a1 15 02 c0       	push   0xc00215a1
c00141d2:	57                   	push   edi
c00141d3:	e8 20 c5 fe ff       	call   c00006f8 <strcmp>
c00141d8:	83 c4 10             	add    esp,0x10
c00141db:	85 c0                	test   eax,eax
c00141dd:	74 dd                	je     c00141bc <CPU::detectFeatures()+0x1a6>
c00141df:	51                   	push   ecx
c00141e0:	51                   	push   ecx
c00141e1:	68 ae 15 02 c0       	push   0xc00215ae
c00141e6:	57                   	push   edi
c00141e7:	e8 0c c5 fe ff       	call   c00006f8 <strcmp>
c00141ec:	83 c4 10             	add    esp,0x10
c00141ef:	85 c0                	test   eax,eax
c00141f1:	74 2a                	je     c001421d <CPU::detectFeatures()+0x207>
c00141f3:	52                   	push   edx
c00141f4:	52                   	push   edx
c00141f5:	68 bb 15 02 c0       	push   0xc00215bb
c00141fa:	57                   	push   edi
c00141fb:	e8 f8 c4 fe ff       	call   c00006f8 <strcmp>
c0014200:	83 c4 10             	add    esp,0x10
c0014203:	85 c0                	test   eax,eax
c0014205:	74 16                	je     c001421d <CPU::detectFeatures()+0x207>
c0014207:	50                   	push   eax
c0014208:	50                   	push   eax
c0014209:	68 c8 15 02 c0       	push   0xc00215c8
c001420e:	57                   	push   edi
c001420f:	e8 e4 c4 fe ff       	call   c00006f8 <strcmp>
c0014214:	83 c4 10             	add    esp,0x10
c0014217:	85 c0                	test   eax,eax
c0014219:	74 48                	je     c0014263 <CPU::detectFeatures()+0x24d>
c001421b:	eb 0f                	jmp    c001422c <CPU::detectFeatures()+0x216>
c001421d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014227:	e9 c1 01 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c001422c:	50                   	push   eax
c001422d:	50                   	push   eax
c001422e:	68 d5 15 02 c0       	push   0xc00215d5
c0014233:	57                   	push   edi
c0014234:	e8 bf c4 fe ff       	call   c00006f8 <strcmp>
c0014239:	83 c4 10             	add    esp,0x10
c001423c:	85 c0                	test   eax,eax
c001423e:	74 23                	je     c0014263 <CPU::detectFeatures()+0x24d>
c0014240:	50                   	push   eax
c0014241:	50                   	push   eax
c0014242:	68 e2 15 02 c0       	push   0xc00215e2
c0014247:	57                   	push   edi
c0014248:	e8 ab c4 fe ff       	call   c00006f8 <strcmp>
c001424d:	83 c4 10             	add    esp,0x10
c0014250:	85 c0                	test   eax,eax
c0014252:	75 1e                	jne    c0014272 <CPU::detectFeatures()+0x25c>
c0014254:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001425e:	e9 8a 01 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014263:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001426d:	e9 7b 01 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014272:	50                   	push   eax
c0014273:	50                   	push   eax
c0014274:	68 ef 15 02 c0       	push   0xc00215ef
c0014279:	57                   	push   edi
c001427a:	e8 79 c4 fe ff       	call   c00006f8 <strcmp>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	85 c0                	test   eax,eax
c0014284:	75 0f                	jne    c0014295 <CPU::detectFeatures()+0x27f>
c0014286:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014290:	e9 58 01 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014295:	50                   	push   eax
c0014296:	50                   	push   eax
c0014297:	68 ae 15 02 c0       	push   0xc00215ae
c001429c:	57                   	push   edi
c001429d:	e8 56 c4 fe ff       	call   c00006f8 <strcmp>
c00142a2:	83 c4 10             	add    esp,0x10
c00142a5:	85 c0                	test   eax,eax
c00142a7:	75 0f                	jne    c00142b8 <CPU::detectFeatures()+0x2a2>
c00142a9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00142b3:	e9 35 01 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c00142b8:	50                   	push   eax
c00142b9:	50                   	push   eax
c00142ba:	68 fc 15 02 c0       	push   0xc00215fc
c00142bf:	57                   	push   edi
c00142c0:	e8 33 c4 fe ff       	call   c00006f8 <strcmp>
c00142c5:	83 c4 10             	add    esp,0x10
c00142c8:	85 c0                	test   eax,eax
c00142ca:	75 0f                	jne    c00142db <CPU::detectFeatures()+0x2c5>
c00142cc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00142d6:	e9 12 01 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c00142db:	51                   	push   ecx
c00142dc:	51                   	push   ecx
c00142dd:	68 09 16 02 c0       	push   0xc0021609
c00142e2:	57                   	push   edi
c00142e3:	e8 10 c4 fe ff       	call   c00006f8 <strcmp>
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	85 c0                	test   eax,eax
c00142ed:	75 0f                	jne    c00142fe <CPU::detectFeatures()+0x2e8>
c00142ef:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00142f9:	e9 ef 00 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c00142fe:	52                   	push   edx
c00142ff:	52                   	push   edx
c0014300:	68 16 16 02 c0       	push   0xc0021616
c0014305:	57                   	push   edi
c0014306:	e8 ed c3 fe ff       	call   c00006f8 <strcmp>
c001430b:	83 c4 10             	add    esp,0x10
c001430e:	85 c0                	test   eax,eax
c0014310:	75 0f                	jne    c0014321 <CPU::detectFeatures()+0x30b>
c0014312:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001431c:	e9 cc 00 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014321:	50                   	push   eax
c0014322:	50                   	push   eax
c0014323:	68 23 16 02 c0       	push   0xc0021623
c0014328:	57                   	push   edi
c0014329:	e8 ca c3 fe ff       	call   c00006f8 <strcmp>
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	85 c0                	test   eax,eax
c0014333:	75 0f                	jne    c0014344 <CPU::detectFeatures()+0x32e>
c0014335:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001433f:	e9 a9 00 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014344:	50                   	push   eax
c0014345:	50                   	push   eax
c0014346:	68 30 16 02 c0       	push   0xc0021630
c001434b:	57                   	push   edi
c001434c:	e8 a7 c3 fe ff       	call   c00006f8 <strcmp>
c0014351:	83 c4 10             	add    esp,0x10
c0014354:	85 c0                	test   eax,eax
c0014356:	75 0f                	jne    c0014367 <CPU::detectFeatures()+0x351>
c0014358:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014362:	e9 86 00 00 00       	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014367:	50                   	push   eax
c0014368:	50                   	push   eax
c0014369:	68 3d 16 02 c0       	push   0xc002163d
c001436e:	57                   	push   edi
c001436f:	e8 84 c3 fe ff       	call   c00006f8 <strcmp>
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	85 c0                	test   eax,eax
c0014379:	75 0c                	jne    c0014387 <CPU::detectFeatures()+0x371>
c001437b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014385:	eb 66                	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c0014387:	50                   	push   eax
c0014388:	50                   	push   eax
c0014389:	68 4a 16 02 c0       	push   0xc002164a
c001438e:	57                   	push   edi
c001438f:	e8 64 c3 fe ff       	call   c00006f8 <strcmp>
c0014394:	83 c4 10             	add    esp,0x10
c0014397:	85 c0                	test   eax,eax
c0014399:	75 0c                	jne    c00143a7 <CPU::detectFeatures()+0x391>
c001439b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00143a5:	eb 46                	jmp    c00143ed <CPU::detectFeatures()+0x3d7>
c00143a7:	50                   	push   eax
c00143a8:	50                   	push   eax
c00143a9:	68 57 16 02 c0       	push   0xc0021657
c00143ae:	57                   	push   edi
c00143af:	e8 44 c3 fe ff       	call   c00006f8 <strcmp>
c00143b4:	83 c4 10             	add    esp,0x10
c00143b7:	85 c0                	test   eax,eax
c00143b9:	74 e0                	je     c001439b <CPU::detectFeatures()+0x385>
c00143bb:	50                   	push   eax
c00143bc:	50                   	push   eax
c00143bd:	68 64 16 02 c0       	push   0xc0021664
c00143c2:	57                   	push   edi
c00143c3:	e8 30 c3 fe ff       	call   c00006f8 <strcmp>
c00143c8:	83 c4 10             	add    esp,0x10
c00143cb:	85 c0                	test   eax,eax
c00143cd:	74 cc                	je     c001439b <CPU::detectFeatures()+0x385>
c00143cf:	51                   	push   ecx
c00143d0:	51                   	push   ecx
c00143d1:	68 71 16 02 c0       	push   0xc0021671
c00143d6:	57                   	push   edi
c00143d7:	e8 1c c3 fe ff       	call   c00006f8 <strcmp>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	85 c0                	test   eax,eax
c00143e1:	74 b8                	je     c001439b <CPU::detectFeatures()+0x385>
c00143e3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00143ed:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00143f2:	0f 86 be 00 00 00    	jbe    c00144b6 <CPU::detectFeatures()+0x4a0>
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 80 00 00 00       	push   0x80
c0014400:	e8 10 fb ff ff       	call   c0013f15 <cpuidCheckExtendedEBX(unsigned int)>
c0014405:	83 e0 01             	and    eax,0x1
c0014408:	c1 e0 06             	shl    eax,0x6
c001440b:	88 c2                	mov    dl,al
c001440d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014413:	83 e0 bf             	and    eax,0xffffffbf
c0014416:	09 d0                	or     eax,edx
c0014418:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001441e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014425:	e8 eb fa ff ff       	call   c0013f15 <cpuidCheckExtendedEBX(unsigned int)>
c001442a:	83 e0 01             	and    eax,0x1
c001442d:	c1 e0 04             	shl    eax,0x4
c0014430:	88 c2                	mov    dl,al
c0014432:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014438:	83 e0 ef             	and    eax,0xffffffef
c001443b:	09 d0                	or     eax,edx
c001443d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014443:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001444a:	e8 c6 fa ff ff       	call   c0013f15 <cpuidCheckExtendedEBX(unsigned int)>
c001444f:	c1 e0 07             	shl    eax,0x7
c0014452:	88 c2                	mov    dl,al
c0014454:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001445a:	83 e0 7f             	and    eax,0x7f
c001445d:	09 d0                	or     eax,edx
c001445f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014465:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001446c:	e8 d1 fa ff ff       	call   c0013f42 <cpuidCheckExtendedECX(unsigned int)>
c0014471:	83 e0 01             	and    eax,0x1
c0014474:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001447b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014481:	83 e0 f7             	and    eax,0xfffffff7
c0014484:	09 d0                	or     eax,edx
c0014486:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001448c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014493:	e8 aa fa ff ff       	call   c0013f42 <cpuidCheckExtendedECX(unsigned int)>
c0014498:	83 c4 10             	add    esp,0x10
c001449b:	83 e0 01             	and    eax,0x1
c001449e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00144a5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144ab:	83 e0 fb             	and    eax,0xfffffffb
c00144ae:	09 d0                	or     eax,edx
c00144b0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144b6:	83 ec 0c             	sub    esp,0xc
c00144b9:	56                   	push   esi
c00144ba:	55                   	push   ebp
c00144bb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00144bf:	57                   	push   edi
c00144c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00144c4:	50                   	push   eax
c00144c5:	6a 01                	push   0x1
c00144c7:	e8 6c f9 ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00144cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00144d0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00144d6:	88 ca                	mov    dl,cl
c00144d8:	83 e0 f0             	and    eax,0xfffffff0
c00144db:	83 e2 0f             	and    edx,0xf
c00144de:	09 d0                	or     eax,edx
c00144e0:	88 ca                	mov    dl,cl
c00144e2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00144e8:	c0 ea 04             	shr    dl,0x4
c00144eb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00144ef:	0f b6 c2             	movzx  eax,dl
c00144f2:	83 c4 20             	add    esp,0x20
c00144f5:	c1 e0 06             	shl    eax,0x6
c00144f8:	89 c5                	mov    ebp,eax
c00144fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014500:	66 25 3f c0          	and    ax,0xc03f
c0014504:	09 e8                	or     eax,ebp
c0014506:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001450d:	89 c8                	mov    eax,ecx
c001450f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014515:	c1 e8 08             	shr    eax,0x8
c0014518:	83 e2 3f             	and    edx,0x3f
c001451b:	83 e0 0f             	and    eax,0xf
c001451e:	89 c5                	mov    ebp,eax
c0014520:	c1 e5 06             	shl    ebp,0x6
c0014523:	09 d5                	or     ebp,edx
c0014525:	89 ea                	mov    edx,ebp
c0014527:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001452d:	88 c2                	mov    dl,al
c001452f:	c0 ea 02             	shr    dl,0x2
c0014532:	89 d5                	mov    ebp,edx
c0014534:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001453a:	83 e2 c0             	and    edx,0xffffffc0
c001453d:	09 d5                	or     ebp,edx
c001453f:	89 ea                	mov    edx,ebp
c0014541:	89 cd                	mov    ebp,ecx
c0014543:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014549:	c1 ed 0c             	shr    ebp,0xc
c001454c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014552:	83 e5 03             	and    ebp,0x3
c0014555:	83 e2 cf             	and    edx,0xffffffcf
c0014558:	c1 e5 04             	shl    ebp,0x4
c001455b:	09 d5                	or     ebp,edx
c001455d:	3c 06                	cmp    al,0x6
c001455f:	89 ea                	mov    edx,ebp
c0014561:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014567:	74 04                	je     c001456d <CPU::detectFeatures()+0x557>
c0014569:	3c 0f                	cmp    al,0xf
c001456b:	75 5c                	jne    c00145c9 <CPU::detectFeatures()+0x5b3>
c001456d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014571:	89 cd                	mov    ebp,ecx
c0014573:	c1 ed 10             	shr    ebp,0x10
c0014576:	c1 e5 04             	shl    ebp,0x4
c0014579:	09 ea                	or     edx,ebp
c001457b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014581:	0f b6 d2             	movzx  edx,dl
c0014584:	66 81 e5 3f c0       	and    bp,0xc03f
c0014589:	c1 e2 06             	shl    edx,0x6
c001458c:	09 ea                	or     edx,ebp
c001458e:	3c 0f                	cmp    al,0xf
c0014590:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014597:	75 30                	jne    c00145c9 <CPU::detectFeatures()+0x5b3>
c0014599:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001459f:	c1 e9 14             	shr    ecx,0x14
c00145a2:	83 e0 3f             	and    eax,0x3f
c00145a5:	83 c1 0f             	add    ecx,0xf
c00145a8:	88 ca                	mov    dl,cl
c00145aa:	c0 e9 02             	shr    cl,0x2
c00145ad:	c1 e2 06             	shl    edx,0x6
c00145b0:	09 d0                	or     eax,edx
c00145b2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00145b8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00145be:	83 e0 c0             	and    eax,0xffffffc0
c00145c1:	09 c1                	or     ecx,eax
c00145c3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00145c9:	83 ec 0c             	sub    esp,0xc
c00145cc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00145d3:	56                   	push   esi
c00145d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00145d8:	50                   	push   eax
c00145d9:	57                   	push   edi
c00145da:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00145de:	55                   	push   ebp
c00145df:	68 00 00 00 80       	push   0x80000000
c00145e4:	e8 4f f8 ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00145e9:	83 c4 20             	add    esp,0x20
c00145ec:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00145f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00145f8:	76 1e                	jbe    c0014618 <CPU::detectFeatures()+0x602>
c00145fa:	83 ec 0c             	sub    esp,0xc
c00145fd:	56                   	push   esi
c00145fe:	50                   	push   eax
c00145ff:	57                   	push   edi
c0014600:	55                   	push   ebp
c0014601:	68 01 00 00 80       	push   0x80000001
c0014606:	e8 2d f8 ff ff       	call   c0013e38 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001460b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014615:	83 c4 20             	add    esp,0x20
c0014618:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001461e:	83 f8 01             	cmp    eax,0x1
c0014621:	75 6f                	jne    c0014692 <CPU::detectFeatures()+0x67c>
c0014623:	51                   	push   ecx
c0014624:	51                   	push   ecx
c0014625:	68 7d 16 02 c0       	push   0xc002167d
c001462a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001462e:	56                   	push   esi
c001462f:	e8 73 c0 fe ff       	call   c00006a7 <strcpy>
c0014634:	5f                   	pop    edi
c0014635:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001463b:	5d                   	pop    ebp
c001463c:	66 c1 e8 06          	shr    ax,0x6
c0014640:	0f b6 c0             	movzx  eax,al
c0014643:	50                   	push   eax
c0014644:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001464a:	c1 e8 0e             	shr    eax,0xe
c001464d:	0f b6 c0             	movzx  eax,al
c0014650:	50                   	push   eax
c0014651:	e8 8d f4 ff ff       	call   c0013ae3 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014656:	5a                   	pop    edx
c0014657:	59                   	pop    ecx
c0014658:	50                   	push   eax
c0014659:	56                   	push   esi
c001465a:	e8 ff c0 fe ff       	call   c000075e <strcat>
c001465f:	5f                   	pop    edi
c0014660:	5d                   	pop    ebp
c0014661:	56                   	push   esi
c0014662:	53                   	push   ebx
c0014663:	e8 68 bf ff ff       	call   c00105d0 <Device::setName(char const*)>
c0014668:	58                   	pop    eax
c0014669:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001466f:	5a                   	pop    edx
c0014670:	68 84 16 02 c0       	push   0xc0021684
c0014675:	50                   	push   eax
c0014676:	e8 7d c0 fe ff       	call   c00006f8 <strcmp>
c001467b:	83 c4 10             	add    esp,0x10
c001467e:	85 c0                	test   eax,eax
c0014680:	0f 85 73 03 00 00    	jne    c00149f9 <CPU::detectFeatures()+0x9e3>
c0014686:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001468d:	e9 67 03 00 00       	jmp    c00149f9 <CPU::detectFeatures()+0x9e3>
c0014692:	83 f8 02             	cmp    eax,0x2
c0014695:	0f 85 b5 00 00 00    	jne    c0014750 <CPU::detectFeatures()+0x73a>
c001469b:	57                   	push   edi
c001469c:	57                   	push   edi
c001469d:	68 96 16 02 c0       	push   0xc0021696
c00146a2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00146a6:	56                   	push   esi
c00146a7:	e8 fb bf fe ff       	call   c00006a7 <strcpy>
c00146ac:	5d                   	pop    ebp
c00146ad:	58                   	pop    eax
c00146ae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146b4:	66 c1 e8 06          	shr    ax,0x6
c00146b8:	0f b6 c0             	movzx  eax,al
c00146bb:	50                   	push   eax
c00146bc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146c2:	c1 e8 0e             	shr    eax,0xe
c00146c5:	0f b6 c0             	movzx  eax,al
c00146c8:	50                   	push   eax
c00146c9:	e8 81 f2 ff ff       	call   c001394f <lookupAMDCPUName(unsigned char, unsigned char)>
c00146ce:	5a                   	pop    edx
c00146cf:	59                   	pop    ecx
c00146d0:	50                   	push   eax
c00146d1:	56                   	push   esi
c00146d2:	e8 87 c0 fe ff       	call   c000075e <strcat>
c00146d7:	5f                   	pop    edi
c00146d8:	5d                   	pop    ebp
c00146d9:	56                   	push   esi
c00146da:	53                   	push   ebx
c00146db:	e8 f0 be ff ff       	call   c00105d0 <Device::setName(char const*)>
c00146e0:	58                   	pop    eax
c00146e1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146e7:	5a                   	pop    edx
c00146e8:	68 9b 16 02 c0       	push   0xc002169b
c00146ed:	50                   	push   eax
c00146ee:	e8 05 c0 fe ff       	call   c00006f8 <strcmp>
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	85 c0                	test   eax,eax
c00146f8:	75 20                	jne    c001471a <CPU::detectFeatures()+0x704>
c00146fa:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c0014700:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014706:	a8 01                	test   al,0x1
c0014708:	74 10                	je     c001471a <CPU::detectFeatures()+0x704>
c001470a:	83 e0 fe             	and    eax,0xfffffffe
c001470d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014713:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001471a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014720:	c1 e8 0e             	shr    eax,0xe
c0014723:	3c 05                	cmp    al,0x5
c0014725:	0f 85 ce 02 00 00    	jne    c00149f9 <CPU::detectFeatures()+0x9e3>
c001472b:	56                   	push   esi
c001472c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014732:	83 e0 0f             	and    eax,0xf
c0014735:	50                   	push   eax
c0014736:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001473c:	66 c1 e8 06          	shr    ax,0x6
c0014740:	0f b6 c0             	movzx  eax,al
c0014743:	50                   	push   eax
c0014744:	6a 05                	push   0x5
c0014746:	e8 7a f6 ff ff       	call   c0013dc5 <AMD_K6_writeback(int, int, int)>
c001474b:	e9 1f 02 00 00       	jmp    c001496f <CPU::detectFeatures()+0x959>
c0014750:	8d 50 fd             	lea    edx,[eax-0x3]
c0014753:	83 fa 01             	cmp    edx,0x1
c0014756:	76 09                	jbe    c0014761 <CPU::detectFeatures()+0x74b>
c0014758:	83 f8 06             	cmp    eax,0x6
c001475b:	0f 85 91 01 00 00    	jne    c00148f2 <CPU::detectFeatures()+0x8dc>
c0014761:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014767:	c1 ea 0e             	shr    edx,0xe
c001476a:	80 fa 05             	cmp    dl,0x5
c001476d:	75 7b                	jne    c00147ea <CPU::detectFeatures()+0x7d4>
c001476f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014775:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001477a:	66 81 fa 00 01       	cmp    dx,0x100
c001477f:	75 0c                	jne    c001478d <CPU::detectFeatures()+0x777>
c0014781:	51                   	push   ecx
c0014782:	51                   	push   ecx
c0014783:	68 a2 16 02 c0       	push   0xc00216a2
c0014788:	e9 dc 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001478d:	66 81 fa 00 02       	cmp    dx,0x200
c0014792:	75 0c                	jne    c00147a0 <CPU::detectFeatures()+0x78a>
c0014794:	52                   	push   edx
c0014795:	52                   	push   edx
c0014796:	68 b5 16 02 c0       	push   0xc00216b5
c001479b:	e9 c9 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c00147a0:	66 81 fa 40 02       	cmp    dx,0x240
c00147a5:	75 0c                	jne    c00147b3 <CPU::detectFeatures()+0x79d>
c00147a7:	50                   	push   eax
c00147a8:	50                   	push   eax
c00147a9:	68 c7 16 02 c0       	push   0xc00216c7
c00147ae:	e9 b6 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c00147b3:	83 f8 06             	cmp    eax,0x6
c00147b6:	75 0c                	jne    c00147c4 <CPU::detectFeatures()+0x7ae>
c00147b8:	50                   	push   eax
c00147b9:	50                   	push   eax
c00147ba:	68 d9 16 02 c0       	push   0xc00216d9
c00147bf:	e9 a5 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c00147c4:	83 f8 04             	cmp    eax,0x4
c00147c7:	75 0c                	jne    c00147d5 <CPU::detectFeatures()+0x7bf>
c00147c9:	50                   	push   eax
c00147ca:	50                   	push   eax
c00147cb:	68 e5 16 02 c0       	push   0xc00216e5
c00147d0:	e9 94 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c00147d5:	83 f8 03             	cmp    eax,0x3
c00147d8:	0f 85 1b 02 00 00    	jne    c00149f9 <CPU::detectFeatures()+0x9e3>
c00147de:	50                   	push   eax
c00147df:	50                   	push   eax
c00147e0:	68 ed 16 02 c0       	push   0xc00216ed
c00147e5:	e9 7f 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c00147ea:	80 fa 06             	cmp    dl,0x6
c00147ed:	0f 85 db 00 00 00    	jne    c00148ce <CPU::detectFeatures()+0x8b8>
c00147f3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147f9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00147fe:	66 81 fa 80 01       	cmp    dx,0x180
c0014803:	75 0c                	jne    c0014811 <CPU::detectFeatures()+0x7fb>
c0014805:	50                   	push   eax
c0014806:	50                   	push   eax
c0014807:	68 f8 16 02 c0       	push   0xc00216f8
c001480c:	e9 58 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014811:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0014817:	66 f7 c1 80 ff       	test   cx,0xff80
c001481c:	75 0c                	jne    c001482a <CPU::detectFeatures()+0x814>
c001481e:	50                   	push   eax
c001481f:	50                   	push   eax
c0014820:	68 08 17 02 c0       	push   0xc0021708
c0014825:	e9 3f 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001482a:	66 81 fa 40 02       	cmp    dx,0x240
c001482f:	75 0c                	jne    c001483d <CPU::detectFeatures()+0x827>
c0014831:	55                   	push   ebp
c0014832:	55                   	push   ebp
c0014833:	68 0f 17 02 c0       	push   0xc002170f
c0014838:	e9 2c 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001483d:	66 81 fa 80 02       	cmp    dx,0x280
c0014842:	75 0c                	jne    c0014850 <CPU::detectFeatures()+0x83a>
c0014844:	57                   	push   edi
c0014845:	57                   	push   edi
c0014846:	68 18 17 02 c0       	push   0xc0021718
c001484b:	e9 19 01 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014850:	66 81 fa 40 03       	cmp    dx,0x340
c0014855:	74 ed                	je     c0014844 <CPU::detectFeatures()+0x82e>
c0014857:	66 81 fa c0 03       	cmp    dx,0x3c0
c001485c:	75 0c                	jne    c001486a <CPU::detectFeatures()+0x854>
c001485e:	56                   	push   esi
c001485f:	56                   	push   esi
c0014860:	68 1f 17 02 c0       	push   0xc002171f
c0014865:	e9 ff 00 00 00       	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001486a:	83 f8 06             	cmp    eax,0x6
c001486d:	0f 84 45 ff ff ff    	je     c00147b8 <CPU::detectFeatures()+0x7a2>
c0014873:	83 f8 04             	cmp    eax,0x4
c0014876:	0f 84 4d ff ff ff    	je     c00147c9 <CPU::detectFeatures()+0x7b3>
c001487c:	83 f8 03             	cmp    eax,0x3
c001487f:	0f 85 74 01 00 00    	jne    c00149f9 <CPU::detectFeatures()+0x9e3>
c0014885:	51                   	push   ecx
c0014886:	51                   	push   ecx
c0014887:	68 28 17 02 c0       	push   0xc0021728
c001488c:	53                   	push   ebx
c001488d:	e8 3e bd ff ff       	call   c00105d0 <Device::setName(char const*)>
c0014892:	b1 c1                	mov    cl,0xc1
c0014894:	88 c8                	mov    al,cl
c0014896:	e6 22                	out    0x22,al
c0014898:	e4 23                	in     al,0x23
c001489a:	88 c2                	mov    dl,al
c001489c:	88 c8                	mov    al,cl
c001489e:	e6 22                	out    0x22,al
c00148a0:	88 d0                	mov    al,dl
c00148a2:	83 c8 10             	or     eax,0x10
c00148a5:	e6 23                	out    0x23,al
c00148a7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00148ae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00148b1:	89 d0                	mov    eax,edx
c00148b3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00148b9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00148bd:	40                   	inc    eax
c00148be:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00148c4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00148c9:	e9 a1 00 00 00       	jmp    c001496f <CPU::detectFeatures()+0x959>
c00148ce:	83 f8 06             	cmp    eax,0x6
c00148d1:	0f 84 e1 fe ff ff    	je     c00147b8 <CPU::detectFeatures()+0x7a2>
c00148d7:	83 f8 04             	cmp    eax,0x4
c00148da:	0f 84 e9 fe ff ff    	je     c00147c9 <CPU::detectFeatures()+0x7b3>
c00148e0:	83 f8 03             	cmp    eax,0x3
c00148e3:	0f 85 10 01 00 00    	jne    c00149f9 <CPU::detectFeatures()+0x9e3>
c00148e9:	52                   	push   edx
c00148ea:	52                   	push   edx
c00148eb:	68 33 17 02 c0       	push   0xc0021733
c00148f0:	eb 77                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c00148f2:	83 f8 07             	cmp    eax,0x7
c00148f5:	75 09                	jne    c0014900 <CPU::detectFeatures()+0x8ea>
c00148f7:	50                   	push   eax
c00148f8:	50                   	push   eax
c00148f9:	68 3d 17 02 c0       	push   0xc002173d
c00148fe:	eb 69                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014900:	83 f8 0a             	cmp    eax,0xa
c0014903:	75 09                	jne    c001490e <CPU::detectFeatures()+0x8f8>
c0014905:	50                   	push   eax
c0014906:	50                   	push   eax
c0014907:	68 48 17 02 c0       	push   0xc0021748
c001490c:	eb 5b                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001490e:	83 f8 0b             	cmp    eax,0xb
c0014911:	75 09                	jne    c001491c <CPU::detectFeatures()+0x906>
c0014913:	50                   	push   eax
c0014914:	50                   	push   eax
c0014915:	68 50 17 02 c0       	push   0xc0021750
c001491a:	eb 4d                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001491c:	83 f8 08             	cmp    eax,0x8
c001491f:	75 09                	jne    c001492a <CPU::detectFeatures()+0x914>
c0014921:	50                   	push   eax
c0014922:	50                   	push   eax
c0014923:	68 59 17 02 c0       	push   0xc0021759
c0014928:	eb 3f                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c001492a:	83 f8 09             	cmp    eax,0x9
c001492d:	75 09                	jne    c0014938 <CPU::detectFeatures()+0x922>
c001492f:	50                   	push   eax
c0014930:	50                   	push   eax
c0014931:	68 61 17 02 c0       	push   0xc0021761
c0014936:	eb 31                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014938:	83 f8 05             	cmp    eax,0x5
c001493b:	75 09                	jne    c0014946 <CPU::detectFeatures()+0x930>
c001493d:	50                   	push   eax
c001493e:	50                   	push   eax
c001493f:	68 69 17 02 c0       	push   0xc0021769
c0014944:	eb 23                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014946:	83 f8 0c             	cmp    eax,0xc
c0014949:	75 09                	jne    c0014954 <CPU::detectFeatures()+0x93e>
c001494b:	55                   	push   ebp
c001494c:	55                   	push   ebp
c001494d:	68 77 17 02 c0       	push   0xc0021777
c0014952:	eb 15                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014954:	83 f8 0d             	cmp    eax,0xd
c0014957:	75 09                	jne    c0014962 <CPU::detectFeatures()+0x94c>
c0014959:	57                   	push   edi
c001495a:	57                   	push   edi
c001495b:	68 82 17 02 c0       	push   0xc0021782
c0014960:	eb 07                	jmp    c0014969 <CPU::detectFeatures()+0x953>
c0014962:	56                   	push   esi
c0014963:	56                   	push   esi
c0014964:	68 96 17 02 c0       	push   0xc0021796
c0014969:	53                   	push   ebx
c001496a:	e8 61 bc ff ff       	call   c00105d0 <Device::setName(char const*)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	e9 82 00 00 00       	jmp    c00149f9 <CPU::detectFeatures()+0x9e3>
c0014977:	51                   	push   ecx
c0014978:	51                   	push   ecx
c0014979:	68 e2 15 02 c0       	push   0xc00215e2
c001497e:	57                   	push   edi
c001497f:	e8 23 bd fe ff       	call   c00006a7 <strcpy>
c0014984:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001498e:	e8 ec b7 fe ff       	call   c000017f <is486>
c0014993:	83 c4 10             	add    esp,0x10
c0014996:	85 c0                	test   eax,eax
c0014998:	74 2d                	je     c00149c7 <CPU::detectFeatures()+0x9b1>
c001499a:	52                   	push   edx
c001499b:	52                   	push   edx
c001499c:	68 a2 17 02 c0       	push   0xc00217a2
c00149a1:	53                   	push   ebx
c00149a2:	e8 29 bc ff ff       	call   c00105d0 <Device::setName(char const*)>
c00149a7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00149ae:	e8 f3 a3 00 00       	call   c001eda6 <CPU::readCR0()>
c00149b3:	83 c4 10             	add    esp,0x10
c00149b6:	83 e0 14             	and    eax,0x14
c00149b9:	83 f8 04             	cmp    eax,0x4
c00149bc:	75 1f                	jne    c00149dd <CPU::detectFeatures()+0x9c7>
c00149be:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00149c5:	eb 32                	jmp    c00149f9 <CPU::detectFeatures()+0x9e3>
c00149c7:	50                   	push   eax
c00149c8:	50                   	push   eax
c00149c9:	68 ad 17 02 c0       	push   0xc00217ad
c00149ce:	53                   	push   ebx
c00149cf:	e8 fc bb ff ff       	call   c00105d0 <Device::setName(char const*)>
c00149d4:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00149db:	eb d1                	jmp    c00149ae <CPU::detectFeatures()+0x998>
c00149dd:	e8 78 b7 fe ff       	call   c000015a <hasLegacyFPU>
c00149e2:	83 e0 01             	and    eax,0x1
c00149e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00149e8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00149ee:	83 e0 fd             	and    eax,0xfffffffd
c00149f1:	09 d0                	or     eax,edx
c00149f3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00149f9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014a00:	83 c4 4c             	add    esp,0x4c
c0014a03:	5b                   	pop    ebx
c0014a04:	5e                   	pop    esi
c0014a05:	5f                   	pop    edi
c0014a06:	5d                   	pop    ebp
c0014a07:	c3                   	ret    

c0014a08 <CPU::setupSMEP()>:
c0014a08:	83 ec 0c             	sub    esp,0xc
c0014a0b:	e8 60 a6 00 00       	call   c001f070 <CPU::readCR4()>
c0014a10:	0d 00 00 10 00       	or     eax,0x100000
c0014a15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a19:	83 c4 0c             	add    esp,0xc
c0014a1c:	e9 6a a6 00 00       	jmp    c001f08b <CPU::writeCR4(unsigned long)>
c0014a21:	90                   	nop

c0014a22 <CPU::setupUMIP()>:
c0014a22:	83 ec 0c             	sub    esp,0xc
c0014a25:	e8 46 a6 00 00       	call   c001f070 <CPU::readCR4()>
c0014a2a:	80 cc 08             	or     ah,0x8
c0014a2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a31:	83 c4 0c             	add    esp,0xc
c0014a34:	e9 52 a6 00 00       	jmp    c001f08b <CPU::writeCR4(unsigned long)>
c0014a39:	90                   	nop

c0014a3a <CPU::setupTSC()>:
c0014a3a:	83 ec 0c             	sub    esp,0xc
c0014a3d:	e8 2e a6 00 00       	call   c001f070 <CPU::readCR4()>
c0014a42:	83 c8 04             	or     eax,0x4
c0014a45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a49:	83 c4 0c             	add    esp,0xc
c0014a4c:	e9 3a a6 00 00       	jmp    c001f08b <CPU::writeCR4(unsigned long)>
c0014a51:	90                   	nop

c0014a52 <CPU::setupLargePages()>:
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	e8 16 a6 00 00       	call   c001f070 <CPU::readCR4()>
c0014a5a:	83 c8 10             	or     eax,0x10
c0014a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a61:	83 c4 0c             	add    esp,0xc
c0014a64:	e9 22 a6 00 00       	jmp    c001f08b <CPU::writeCR4(unsigned long)>
c0014a69:	90                   	nop

c0014a6a <CPU::setupPAT()>:
c0014a6a:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0014a6f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a76:	74 2c                	je     c0014aa4 <CPU::setupPAT()+0x3a>
c0014a78:	53                   	push   ebx
c0014a79:	83 ec 10             	sub    esp,0x10
c0014a7c:	68 77 02 00 00       	push   0x277
c0014a81:	50                   	push   eax
c0014a82:	e8 27 67 ff ff       	call   c000b1ae <Computer::rdmsr(unsigned int)>
c0014a87:	83 e2 f8             	and    edx,0xfffffff8
c0014a8a:	83 ca 01             	or     edx,0x1
c0014a8d:	52                   	push   edx
c0014a8e:	50                   	push   eax
c0014a8f:	68 77 02 00 00       	push   0x277
c0014a94:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0014a9a:	e8 3b 67 ff ff       	call   c000b1da <Computer::wrmsr(unsigned int, unsigned long long)>
c0014a9f:	83 c4 28             	add    esp,0x28
c0014aa2:	5b                   	pop    ebx
c0014aa3:	c3                   	ret    
c0014aa4:	c3                   	ret    
c0014aa5:	90                   	nop

c0014aa6 <CPU::setupMTRR()>:
c0014aa6:	c3                   	ret    
c0014aa7:	90                   	nop

c0014aa8 <CPU::setupGlobalPages()>:
c0014aa8:	83 ec 0c             	sub    esp,0xc
c0014aab:	e8 c0 a5 00 00       	call   c001f070 <CPU::readCR4()>
c0014ab0:	0c 80                	or     al,0x80
c0014ab2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ab6:	83 c4 0c             	add    esp,0xc
c0014ab9:	e9 cd a5 00 00       	jmp    c001f08b <CPU::writeCR4(unsigned long)>

c0014abe <CPU::allowUsermodeDataAccess()>:
c0014abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ac2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014ac9:	74 03                	je     c0014ace <CPU::allowUsermodeDataAccess()+0x10>
c0014acb:	0f 01 cb             	stac   
c0014ace:	c3                   	ret    
c0014acf:	90                   	nop

c0014ad0 <CPU::prohibitUsermodeDataAccess()>:
c0014ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ad4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014adb:	74 03                	je     c0014ae0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014add:	0f 01 ca             	clac   
c0014ae0:	c3                   	ret    
c0014ae1:	90                   	nop

c0014ae2 <CPU::setupSMAP()>:
c0014ae2:	53                   	push   ebx
c0014ae3:	83 ec 08             	sub    esp,0x8
c0014ae6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aea:	e8 81 a5 00 00       	call   c001f070 <CPU::readCR4()>
c0014aef:	83 ec 0c             	sub    esp,0xc
c0014af2:	0d 00 00 20 00       	or     eax,0x200000
c0014af7:	50                   	push   eax
c0014af8:	e8 8e a5 00 00       	call   c001f08b <CPU::writeCR4(unsigned long)>
c0014afd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014b01:	83 c4 18             	add    esp,0x18
c0014b04:	5b                   	pop    ebx
c0014b05:	eb c9                	jmp    c0014ad0 <CPU::prohibitUsermodeDataAccess()>
c0014b07:	90                   	nop

c0014b08 <CPU::setupFeatures()>:
c0014b08:	53                   	push   ebx
c0014b09:	83 ec 08             	sub    esp,0x8
c0014b0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b10:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014b17:	74 0c                	je     c0014b25 <CPU::setupFeatures()+0x1d>
c0014b19:	83 ec 0c             	sub    esp,0xc
c0014b1c:	53                   	push   ebx
c0014b1d:	e8 e6 fe ff ff       	call   c0014a08 <CPU::setupSMEP()>
c0014b22:	83 c4 10             	add    esp,0x10
c0014b25:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b2c:	74 0c                	je     c0014b3a <CPU::setupFeatures()+0x32>
c0014b2e:	83 ec 0c             	sub    esp,0xc
c0014b31:	53                   	push   ebx
c0014b32:	e8 ab ff ff ff       	call   c0014ae2 <CPU::setupSMAP()>
c0014b37:	83 c4 10             	add    esp,0x10
c0014b3a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b41:	74 0c                	je     c0014b4f <CPU::setupFeatures()+0x47>
c0014b43:	83 ec 0c             	sub    esp,0xc
c0014b46:	53                   	push   ebx
c0014b47:	e8 d6 fe ff ff       	call   c0014a22 <CPU::setupUMIP()>
c0014b4c:	83 c4 10             	add    esp,0x10
c0014b4f:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014b56:	74 0c                	je     c0014b64 <CPU::setupFeatures()+0x5c>
c0014b58:	83 ec 0c             	sub    esp,0xc
c0014b5b:	53                   	push   ebx
c0014b5c:	e8 d9 fe ff ff       	call   c0014a3a <CPU::setupTSC()>
c0014b61:	83 c4 10             	add    esp,0x10
c0014b64:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014b6b:	74 0c                	je     c0014b79 <CPU::setupFeatures()+0x71>
c0014b6d:	83 ec 0c             	sub    esp,0xc
c0014b70:	53                   	push   ebx
c0014b71:	e8 dc fe ff ff       	call   c0014a52 <CPU::setupLargePages()>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014b80:	74 0c                	je     c0014b8e <CPU::setupFeatures()+0x86>
c0014b82:	83 ec 0c             	sub    esp,0xc
c0014b85:	53                   	push   ebx
c0014b86:	e8 1d ff ff ff       	call   c0014aa8 <CPU::setupGlobalPages()>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014b95:	74 0d                	je     c0014ba4 <CPU::setupFeatures()+0x9c>
c0014b97:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014b9b:	83 c4 08             	add    esp,0x8
c0014b9e:	5b                   	pop    ebx
c0014b9f:	e9 c6 fe ff ff       	jmp    c0014a6a <CPU::setupPAT()>
c0014ba4:	83 c4 08             	add    esp,0x8
c0014ba7:	5b                   	pop    ebx
c0014ba8:	c3                   	ret    
c0014ba9:	90                   	nop

c0014baa <CPU::open(int, int, void*)>:
c0014baa:	57                   	push   edi
c0014bab:	56                   	push   esi
c0014bac:	53                   	push   ebx
c0014bad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bb5:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014bbb:	83 ec 0c             	sub    esp,0xc
c0014bbe:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014bc4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014bca:	50                   	push   eax
c0014bcb:	e8 c2 68 ff ff       	call   c000b492 <GDT::setup()>
c0014bd0:	83 c4 0c             	add    esp,0xc
c0014bd3:	6a 00                	push   0x0
c0014bd5:	68 ef be ad de       	push   0xdeadbeef
c0014bda:	57                   	push   edi
c0014bdb:	e8 94 8a ff ff       	call   c000d674 <TSS::setup(unsigned long, unsigned long)>
c0014be0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014be3:	e8 6c 8a ff ff       	call   c000d654 <TSS::flush()>
c0014be8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014bee:	89 04 24             	mov    DWORD PTR [esp],eax
c0014bf1:	e8 f6 6a ff ff       	call   c000b6ec <IDT::setup()>
c0014bf6:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014bfd:	e8 80 a4 00 00       	call   c001f082 <CPU::writeDR7(unsigned long)>
c0014c02:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014c0c:	e8 9f 75 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c0014c11:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014c17:	89 30                	mov    DWORD PTR [eax],esi
c0014c19:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014c1f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014c22:	58                   	pop    eax
c0014c23:	5a                   	pop    edx
c0014c24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014c2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c2e:	e8 37 9a ff ff       	call   c000e66a <VAS::setCPUSpecific(unsigned long)>
c0014c33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c36:	e8 db f3 ff ff       	call   c0014016 <CPU::detectFeatures()>
c0014c3b:	e8 9a c7 ff ff       	call   c00113da <setupInterruptController()>
c0014c40:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c46:	a1 60 37 02 c0       	mov    eax,ds:0xc0023760
c0014c4b:	83 e0 10             	and    eax,0x10
c0014c4e:	83 f8 01             	cmp    eax,0x1
c0014c51:	19 c0                	sbb    eax,eax
c0014c53:	83 e0 46             	and    eax,0x46
c0014c56:	83 c0 1e             	add    eax,0x1e
c0014c59:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c5c:	e8 61 d9 ff ff       	call   c00125c2 <setupTimer(int)>
c0014c61:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014c67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c6a:	e8 99 fe ff ff       	call   c0014b08 <CPU::setupFeatures()>
c0014c6f:	83 c4 10             	add    esp,0x10
c0014c72:	31 c0                	xor    eax,eax
c0014c74:	5b                   	pop    ebx
c0014c75:	5e                   	pop    esi
c0014c76:	5f                   	pop    edi
c0014c77:	c3                   	ret    

c0014c78 <Krnl::panic(char const*)>:
c0014c78:	55                   	push   ebp
c0014c79:	89 e5                	mov    ebp,esp
c0014c7b:	53                   	push   ebx
c0014c7c:	83 ec 0c             	sub    esp,0xc
c0014c7f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014c82:	fa                   	cli    
c0014c83:	c6 05 90 41 02 c0 01 	mov    BYTE PTR ds:0xc0024190,0x1
c0014c8a:	53                   	push   ebx
c0014c8b:	c6 05 80 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b80,0x0
c0014c92:	68 e4 17 02 c0       	push   0xc00217e4
c0014c97:	e8 47 a3 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0014c9c:	58                   	pop    eax
c0014c9d:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014ca2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca8:	e8 08 82 ff ff       	call   c000ceb5 <setActiveTerminal(VgaText*)>
c0014cad:	83 c4 0c             	add    esp,0xc
c0014cb0:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014cb5:	6a 01                	push   0x1
c0014cb7:	6a 0f                	push   0xf
c0014cb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbf:	e8 30 7c ff ff       	call   c000c8f4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014cc4:	5a                   	pop    edx
c0014cc5:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014cca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd0:	e8 81 84 ff ff       	call   c000d156 <VgaText::clearScreen()>
c0014cd5:	59                   	pop    ecx
c0014cd6:	58                   	pop    eax
c0014cd7:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014cdc:	68 fd 17 02 c0       	push   0xc00217fd
c0014ce1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce7:	e8 e8 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014cec:	58                   	pop    eax
c0014ced:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014cf2:	5a                   	pop    edx
c0014cf3:	68 9c 18 02 c0       	push   0xc002189c
c0014cf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cfe:	e8 d1 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d03:	59                   	pop    ecx
c0014d04:	58                   	pop    eax
c0014d05:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d0a:	68 19 18 02 c0       	push   0xc0021819
c0014d0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d15:	e8 ba 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d1a:	58                   	pop    eax
c0014d1b:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d20:	5a                   	pop    edx
c0014d21:	53                   	push   ebx
c0014d22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d28:	e8 a7 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d2d:	59                   	pop    ecx
c0014d2e:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d33:	5b                   	pop    ebx
c0014d34:	68 39 18 02 c0       	push   0xc0021839
c0014d39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d3f:	e8 90 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d44:	58                   	pop    eax
c0014d45:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d4a:	5a                   	pop    edx
c0014d4b:	68 d8 18 02 c0       	push   0xc00218d8
c0014d50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d56:	e8 79 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d5b:	59                   	pop    ecx
c0014d5c:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d61:	5b                   	pop    ebx
c0014d62:	68 19 18 02 c0       	push   0xc0021819
c0014d67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6d:	e8 62 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d72:	58                   	pop    eax
c0014d73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d78:	5a                   	pop    edx
c0014d79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d7c:	83 c0 0c             	add    eax,0xc
c0014d7f:	50                   	push   eax
c0014d80:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d8b:	e8 44 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014d90:	59                   	pop    ecx
c0014d91:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014d96:	5b                   	pop    ebx
c0014d97:	68 38 18 02 c0       	push   0xc0021838
c0014d9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da2:	e8 2d 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014da7:	58                   	pop    eax
c0014da8:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014dad:	5a                   	pop    edx
c0014dae:	68 04 19 02 c0       	push   0xc0021904
c0014db3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db9:	e8 16 85 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014dbe:	59                   	pop    ecx
c0014dbf:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014dc4:	5b                   	pop    ebx
c0014dc5:	68 44 19 02 c0       	push   0xc0021944
c0014dca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd0:	e8 ff 84 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014dd5:	58                   	pop    eax
c0014dd6:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014ddb:	5a                   	pop    edx
c0014ddc:	68 24 18 02 c0       	push   0xc0021824
c0014de1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de7:	e8 e8 84 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014dec:	59                   	pop    ecx
c0014ded:	5b                   	pop    ebx
c0014dee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014df1:	68 3c 18 02 c0       	push   0xc002183c
c0014df6:	e8 e8 a1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0014dfb:	58                   	pop    eax
c0014dfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014dff:	5a                   	pop    edx
c0014e00:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e03:	68 45 18 02 c0       	push   0xc0021845
c0014e08:	e8 d6 a1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0014e0d:	59                   	pop    ecx
c0014e0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e11:	5b                   	pop    ebx
c0014e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e14:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014e17:	68 5d 10 02 c0       	push   0xc002105d
c0014e1c:	e8 c2 a1 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0014e21:	58                   	pop    eax
c0014e22:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014e27:	5a                   	pop    edx
c0014e28:	68 88 19 02 c0       	push   0xc0021988
c0014e2d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e33:	e8 9c 84 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014e38:	59                   	pop    ecx
c0014e39:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014e3e:	5b                   	pop    ebx
c0014e3f:	68 4e 18 02 c0       	push   0xc002184e
c0014e44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4a:	e8 85 84 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014e4f:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014e54:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e5a:	e8 47 9f 00 00       	call   c001eda6 <CPU::readCR0()>
c0014e5f:	5a                   	pop    edx
c0014e60:	59                   	pop    ecx
c0014e61:	50                   	push   eax
c0014e62:	53                   	push   ebx
c0014e63:	e8 92 84 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014e68:	5b                   	pop    ebx
c0014e69:	58                   	pop    eax
c0014e6a:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014e6f:	68 58 18 02 c0       	push   0xc0021858
c0014e74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7a:	e8 55 84 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014e7f:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014e84:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014e8a:	e8 05 a2 00 00       	call   c001f094 <CPU::readCR2()>
c0014e8f:	5a                   	pop    edx
c0014e90:	59                   	pop    ecx
c0014e91:	50                   	push   eax
c0014e92:	53                   	push   ebx
c0014e93:	e8 62 84 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014e98:	5b                   	pop    ebx
c0014e99:	58                   	pop    eax
c0014e9a:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014e9f:	68 62 18 02 c0       	push   0xc0021862
c0014ea4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eaa:	e8 25 84 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014eaf:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014eb4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014eba:	e8 73 9b 00 00       	call   c001ea32 <CPU::readCR3()>
c0014ebf:	5a                   	pop    edx
c0014ec0:	59                   	pop    ecx
c0014ec1:	50                   	push   eax
c0014ec2:	53                   	push   ebx
c0014ec3:	e8 32 84 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014ec8:	5b                   	pop    ebx
c0014ec9:	58                   	pop    eax
c0014eca:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014ecf:	68 75 18 02 c0       	push   0xc0021875
c0014ed4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eda:	e8 f5 83 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014edf:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014ee4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014eea:	e8 81 a1 00 00       	call   c001f070 <CPU::readCR4()>
c0014eef:	5a                   	pop    edx
c0014ef0:	59                   	pop    ecx
c0014ef1:	50                   	push   eax
c0014ef2:	53                   	push   ebx
c0014ef3:	e8 02 84 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014ef8:	5b                   	pop    ebx
c0014ef9:	58                   	pop    eax
c0014efa:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014eff:	68 7f 18 02 c0       	push   0xc002187f
c0014f04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f0a:	e8 c5 83 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014f0f:	5a                   	pop    edx
c0014f10:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014f15:	59                   	pop    ecx
c0014f16:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f1c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014f1f:	50                   	push   eax
c0014f20:	e8 d5 83 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014f25:	5b                   	pop    ebx
c0014f26:	58                   	pop    eax
c0014f27:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014f2c:	68 96 18 02 c0       	push   0xc0021896
c0014f31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f37:	e8 98 83 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014f3c:	5a                   	pop    edx
c0014f3d:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014f42:	59                   	pop    ecx
c0014f43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f49:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f4c:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f4f:	50                   	push   eax
c0014f50:	e8 a5 83 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014f55:	5b                   	pop    ebx
c0014f56:	58                   	pop    eax
c0014f57:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014f5c:	68 96 18 02 c0       	push   0xc0021896
c0014f61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f67:	e8 68 83 ff ff       	call   c000d2d4 <VgaText::puts(char const*)>
c0014f6c:	59                   	pop    ecx
c0014f6d:	a1 94 4b 02 c0       	mov    eax,ds:0xc0024b94
c0014f72:	5b                   	pop    ebx
c0014f73:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f79:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014f7c:	8b 12                	mov    edx,DWORD PTR [edx]
c0014f7e:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014f81:	50                   	push   eax
c0014f82:	e8 73 83 ff ff       	call   c000d2fa <VgaText::putx(unsigned int)>
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	b2 fe                	mov    dl,0xfe
c0014f8c:	e4 60                	in     al,0x60
c0014f8e:	3c 1c                	cmp    al,0x1c
c0014f90:	74 04                	je     c0014f96 <Krnl::panic(char const*)+0x31e>
c0014f92:	3c 5a                	cmp    al,0x5a
c0014f94:	75 f6                	jne    c0014f8c <Krnl::panic(char const*)+0x314>
c0014f96:	e4 64                	in     al,0x64
c0014f98:	a8 02                	test   al,0x2
c0014f9a:	75 fa                	jne    c0014f96 <Krnl::panic(char const*)+0x31e>
c0014f9c:	88 d0                	mov    al,dl
c0014f9e:	e6 64                	out    0x64,al
c0014fa0:	fa                   	cli    
c0014fa1:	f4                   	hlt    
c0014fa2:	eb e8                	jmp    c0014f8c <Krnl::panic(char const*)+0x314>

c0014fa4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014fa4:	55                   	push   ebp
c0014fa5:	57                   	push   edi
c0014fa6:	56                   	push   esi
c0014fa7:	53                   	push   ebx
c0014fa8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014fae:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014fb5:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014fb7:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014fba:	80 fb 40             	cmp    bl,0x40
c0014fbd:	75 1b                	jne    c0014fda <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014fbf:	8a 16                	mov    dl,BYTE PTR [esi]
c0014fc1:	84 d2                	test   dl,dl
c0014fc3:	0f 84 f1 00 00 00    	je     c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fc9:	8d 46 01             	lea    eax,[esi+0x1]
c0014fcc:	80 fa 3a             	cmp    dl,0x3a
c0014fcf:	74 04                	je     c0014fd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014fd1:	89 c6                	mov    esi,eax
c0014fd3:	eb ea                	jmp    c0014fbf <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014fd5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014fd8:	89 c6                	mov    esi,eax
c0014fda:	50                   	push   eax
c0014fdb:	6a 40                	push   0x40
c0014fdd:	6a 00                	push   0x0
c0014fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014fe3:	50                   	push   eax
c0014fe4:	e8 1f b6 fe ff       	call   c0000608 <memset>
c0014fe9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014ff0:	31 c0                	xor    eax,eax
c0014ff2:	83 c4 10             	add    esp,0x10
c0014ff5:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014ff7:	84 c9                	test   cl,cl
c0014ff9:	0f 84 bb 00 00 00    	je     c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014fff:	3d c7 00 00 00       	cmp    eax,0xc7
c0015004:	0f 8f b0 00 00 00    	jg     c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001500a:	80 f9 0a             	cmp    cl,0xa
c001500d:	0f 85 98 00 00 00    	jne    c00150ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015013:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015018:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001501c:	a8 df                	test   al,0xdf
c001501e:	0f 94 c1             	sete   cl
c0015021:	3c 23                	cmp    al,0x23
c0015023:	0f 94 c2             	sete   dl
c0015026:	08 d1                	or     cl,dl
c0015028:	75 4a                	jne    c0015074 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001502a:	8d 50 f7             	lea    edx,[eax-0x9]
c001502d:	80 fa 01             	cmp    dl,0x1
c0015030:	76 42                	jbe    c0015074 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015032:	3c 5b                	cmp    al,0x5b
c0015034:	75 42                	jne    c0015078 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015036:	80 fb 40             	cmp    bl,0x40
c0015039:	75 39                	jne    c0015074 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001503b:	83 ec 0c             	sub    esp,0xc
c001503e:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015042:	52                   	push   edx
c0015043:	e8 dd b5 fe ff       	call   c0000625 <strlen>
c0015048:	83 c4 10             	add    esp,0x10
c001504b:	83 f8 3f             	cmp    eax,0x3f
c001504e:	77 6a                	ja     c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015050:	50                   	push   eax
c0015051:	50                   	push   eax
c0015052:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015056:	52                   	push   edx
c0015057:	8d 54 24 24          	lea    edx,[esp+0x24]
c001505b:	52                   	push   edx
c001505c:	e8 46 b6 fe ff       	call   c00006a7 <strcpy>
c0015061:	58                   	pop    eax
c0015062:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015066:	52                   	push   edx
c0015067:	e8 b9 b5 fe ff       	call   c0000625 <strlen>
c001506c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	31 d2                	xor    edx,edx
c0015076:	eb 3a                	jmp    c00150b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015078:	80 fb 40             	cmp    bl,0x40
c001507b:	74 06                	je     c0015083 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001507d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015081:	eb 20                	jmp    c00150a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015083:	50                   	push   eax
c0015084:	50                   	push   eax
c0015085:	55                   	push   ebp
c0015086:	8d 44 24 24          	lea    eax,[esp+0x24]
c001508a:	50                   	push   eax
c001508b:	e8 68 b6 fe ff       	call   c00006f8 <strcmp>
c0015090:	83 c4 10             	add    esp,0x10
c0015093:	85 c0                	test   eax,eax
c0015095:	75 dd                	jne    c0015074 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015097:	eb e4                	jmp    c001507d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015099:	8d 50 01             	lea    edx,[eax+0x1]
c001509c:	80 f9 3d             	cmp    cl,0x3d
c001509f:	74 1d                	je     c00150be <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00150a1:	89 d0                	mov    eax,edx
c00150a3:	8a 08                	mov    cl,BYTE PTR [eax]
c00150a5:	84 c9                	test   cl,cl
c00150a7:	75 f0                	jne    c0015099 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00150a9:	eb 0f                	jmp    c00150ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00150ab:	8d 50 01             	lea    edx,[eax+0x1]
c00150ae:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00150b2:	47                   	inc    edi
c00150b3:	89 d0                	mov    eax,edx
c00150b5:	e9 3b ff ff ff       	jmp    c0014ff5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00150ba:	31 c0                	xor    eax,eax
c00150bc:	eb 33                	jmp    c00150f1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00150be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00150c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00150c5:	50                   	push   eax
c00150c6:	50                   	push   eax
c00150c7:	8d 44 24 60          	lea    eax,[esp+0x60]
c00150cb:	50                   	push   eax
c00150cc:	56                   	push   esi
c00150cd:	e8 26 b6 fe ff       	call   c00006f8 <strcmp>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	85 c0                	test   eax,eax
c00150d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150db:	75 97                	jne    c0015074 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00150dd:	51                   	push   ecx
c00150de:	51                   	push   ecx
c00150df:	52                   	push   edx
c00150e0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00150e7:	e8 bb b5 fe ff       	call   c00006a7 <strcpy>
c00150ec:	83 c4 10             	add    esp,0x10
c00150ef:	b0 01                	mov    al,0x1
c00150f1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00150f7:	5b                   	pop    ebx
c00150f8:	5e                   	pop    esi
c00150f9:	5f                   	pop    edi
c00150fa:	5d                   	pop    ebp
c00150fb:	c3                   	ret    

c00150fc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00150fc:	57                   	push   edi
c00150fd:	56                   	push   esi
c00150fe:	53                   	push   ebx
c00150ff:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015105:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c001510c:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015113:	53                   	push   ebx
c0015114:	e8 0c b5 fe ff       	call   c0000625 <strlen>
c0015119:	89 34 24             	mov    DWORD PTR [esp],esi
c001511c:	89 c7                	mov    edi,eax
c001511e:	e8 02 b5 fe ff       	call   c0000625 <strlen>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001512a:	31 ff                	xor    edi,edi
c001512c:	3d ff 00 00 00       	cmp    eax,0xff
c0015131:	0f 87 18 01 00 00    	ja     c001524f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015137:	51                   	push   ecx
c0015138:	51                   	push   ecx
c0015139:	56                   	push   esi
c001513a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001513e:	56                   	push   esi
c001513f:	e8 63 b5 fe ff       	call   c00006a7 <strcpy>
c0015144:	58                   	pop    eax
c0015145:	5a                   	pop    edx
c0015146:	68 d4 1d 02 c0       	push   0xc0021dd4
c001514b:	56                   	push   esi
c001514c:	e8 0d b6 fe ff       	call   c000075e <strcat>
c0015151:	59                   	pop    ecx
c0015152:	58                   	pop    eax
c0015153:	53                   	push   ebx
c0015154:	56                   	push   esi
c0015155:	e8 04 b6 fe ff       	call   c000075e <strcat>
c001515a:	58                   	pop    eax
c001515b:	5a                   	pop    edx
c001515c:	68 ae 19 02 c0       	push   0xc00219ae
c0015161:	56                   	push   esi
c0015162:	e8 f7 b5 fe ff       	call   c000075e <strcat>
c0015167:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001516e:	e8 81 9d ff ff       	call   c000eef4 <operator new(unsigned long)>
c0015173:	83 c4 0c             	add    esp,0xc
c0015176:	89 c3                	mov    ebx,eax
c0015178:	ff 35 94 4b 02 c0    	push   DWORD PTR ds:0xc0024b94
c001517e:	56                   	push   esi
c001517f:	50                   	push   eax
c0015180:	e8 8d a3 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0015185:	59                   	pop    ecx
c0015186:	5e                   	pop    esi
c0015187:	6a 01                	push   0x1
c0015189:	53                   	push   ebx
c001518a:	e8 e7 a3 ff ff       	call   c000f576 <File::open(FileOpenMode)>
c001518f:	83 c4 10             	add    esp,0x10
c0015192:	85 c0                	test   eax,eax
c0015194:	74 08                	je     c001519e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015196:	83 ec 0c             	sub    esp,0xc
c0015199:	8b 03                	mov    eax,DWORD PTR [ebx]
c001519b:	53                   	push   ebx
c001519c:	eb 2e                	jmp    c00151cc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c001519e:	52                   	push   edx
c001519f:	8d 44 24 07          	lea    eax,[esp+0x7]
c00151a3:	50                   	push   eax
c00151a4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00151a8:	50                   	push   eax
c00151a9:	53                   	push   ebx
c00151aa:	e8 73 a6 ff ff       	call   c000f822 <File::stat(unsigned long long*, bool*)>
c00151af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151b3:	83 c4 10             	add    esp,0x10
c00151b6:	89 c1                	mov    ecx,eax
c00151b8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00151bc:	75 13                	jne    c00151d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00151be:	83 ec 0c             	sub    esp,0xc
c00151c1:	53                   	push   ebx
c00151c2:	e8 0d a4 ff ff       	call   c000f5d4 <File::close()>
c00151c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151cf:	eb 7b                	jmp    c001524c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c00151d1:	83 ec 0c             	sub    esp,0xc
c00151d4:	50                   	push   eax
c00151d5:	e8 2c 6a ff ff       	call   c000bc06 <malloc>
c00151da:	89 c6                	mov    esi,eax
c00151dc:	58                   	pop    eax
c00151dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151df:	8d 54 24 10          	lea    edx,[esp+0x10]
c00151e3:	52                   	push   edx
c00151e4:	56                   	push   esi
c00151e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151ed:	53                   	push   ebx
c00151ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151f1:	83 c4 20             	add    esp,0x20
c00151f4:	85 c0                	test   eax,eax
c00151f6:	75 0a                	jne    c0015202 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00151f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015200:	74 18                	je     c001521a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015202:	83 ec 0c             	sub    esp,0xc
c0015205:	31 ff                	xor    edi,edi
c0015207:	53                   	push   ebx
c0015208:	e8 c7 a3 ff ff       	call   c000f5d4 <File::close()>
c001520d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001520f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015212:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	eb 35                	jmp    c001524f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c001521a:	83 ec 0c             	sub    esp,0xc
c001521d:	53                   	push   ebx
c001521e:	e8 b1 a3 ff ff       	call   c000f5d4 <File::close()>
c0015223:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015225:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015228:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001522b:	83 c4 0c             	add    esp,0xc
c001522e:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015235:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001523c:	56                   	push   esi
c001523d:	e8 62 fd ff ff       	call   c0014fa4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015242:	89 34 24             	mov    DWORD PTR [esp],esi
c0015245:	89 c7                	mov    edi,eax
c0015247:	e8 ca 69 ff ff       	call   c000bc16 <free>
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	81 c4 10 01 00 00    	add    esp,0x110
c0015255:	89 f8                	mov    eax,edi
c0015257:	5b                   	pop    ebx
c0015258:	5e                   	pop    esi
c0015259:	5f                   	pop    edi
c001525a:	c3                   	ret    

c001525b <Reg::getLine(char*, char*, char*)>:
c001525b:	57                   	push   edi
c001525c:	56                   	push   esi
c001525d:	53                   	push   ebx
c001525e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015262:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015266:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001526a:	57                   	push   edi
c001526b:	56                   	push   esi
c001526c:	53                   	push   ebx
c001526d:	68 b3 19 02 c0       	push   0xc00219b3
c0015272:	e8 85 fe ff ff       	call   c00150fc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	84 c0                	test   al,al
c001527c:	75 10                	jne    c001528e <Reg::getLine(char*, char*, char*)+0x33>
c001527e:	57                   	push   edi
c001527f:	56                   	push   esi
c0015280:	53                   	push   ebx
c0015281:	68 d8 19 02 c0       	push   0xc00219d8
c0015286:	e8 71 fe ff ff       	call   c00150fc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001528b:	83 c4 10             	add    esp,0x10
c001528e:	5b                   	pop    ebx
c001528f:	5e                   	pop    esi
c0015290:	5f                   	pop    edi
c0015291:	c3                   	ret    

c0015292 <Reg::readInt(char*, char*, int*)>:
c0015292:	55                   	push   ebp
c0015293:	57                   	push   edi
c0015294:	56                   	push   esi
c0015295:	53                   	push   ebx
c0015296:	81 ec f0 00 00 00    	sub    esp,0xf0
c001529c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00152a0:	57                   	push   edi
c00152a1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152a8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00152af:	e8 a7 ff ff ff       	call   c001525b <Reg::getLine(char*, char*, char*)>
c00152b4:	83 c4 10             	add    esp,0x10
c00152b7:	84 c0                	test   al,al
c00152b9:	0f 84 b3 00 00 00    	je     c0015372 <Reg::readInt(char*, char*, int*)+0xe0>
c00152bf:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00152c3:	80 fa 2b             	cmp    dl,0x2b
c00152c6:	74 0c                	je     c00152d4 <Reg::readInt(char*, char*, int*)+0x42>
c00152c8:	80 fa 2d             	cmp    dl,0x2d
c00152cb:	75 0e                	jne    c00152db <Reg::readInt(char*, char*, int*)+0x49>
c00152cd:	ba 01 00 00 00       	mov    edx,0x1
c00152d2:	eb 0b                	jmp    c00152df <Reg::readInt(char*, char*, int*)+0x4d>
c00152d4:	ba 01 00 00 00       	mov    edx,0x1
c00152d9:	eb 02                	jmp    c00152dd <Reg::readInt(char*, char*, int*)+0x4b>
c00152db:	31 d2                	xor    edx,edx
c00152dd:	31 c0                	xor    eax,eax
c00152df:	be 0a 00 00 00       	mov    esi,0xa
c00152e4:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00152e9:	75 20                	jne    c001530b <Reg::readInt(char*, char*, int*)+0x79>
c00152eb:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00152ef:	80 f9 78             	cmp    cl,0x78
c00152f2:	75 0a                	jne    c00152fe <Reg::readInt(char*, char*, int*)+0x6c>
c00152f4:	83 c2 02             	add    edx,0x2
c00152f7:	be 10 00 00 00       	mov    esi,0x10
c00152fc:	eb 0d                	jmp    c001530b <Reg::readInt(char*, char*, int*)+0x79>
c00152fe:	80 f9 62             	cmp    cl,0x62
c0015301:	75 08                	jne    c001530b <Reg::readInt(char*, char*, int*)+0x79>
c0015303:	83 c2 02             	add    edx,0x2
c0015306:	be 02 00 00 00       	mov    esi,0x2
c001530b:	01 d7                	add    edi,edx
c001530d:	31 d2                	xor    edx,edx
c001530f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015311:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015315:	80 fb 0d             	cmp    bl,0xd
c0015318:	0f 94 c3             	sete   bl
c001531b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015320:	0f 94 c1             	sete   cl
c0015323:	08 cb                	or     bl,cl
c0015325:	75 3a                	jne    c0015361 <Reg::readInt(char*, char*, int*)+0xcf>
c0015327:	0f af d6             	imul   edx,esi
c001532a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001532f:	83 fe 10             	cmp    esi,0x10
c0015332:	75 26                	jne    c001535a <Reg::readInt(char*, char*, int*)+0xc8>
c0015334:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015338:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001533b:	89 e9                	mov    ecx,ebp
c001533d:	80 f9 05             	cmp    cl,0x5
c0015340:	77 06                	ja     c0015348 <Reg::readInt(char*, char*, int*)+0xb6>
c0015342:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015346:	eb 16                	jmp    c001535e <Reg::readInt(char*, char*, int*)+0xcc>
c0015348:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001534c:	83 e9 61             	sub    ecx,0x61
c001534f:	80 f9 05             	cmp    cl,0x5
c0015352:	77 06                	ja     c001535a <Reg::readInt(char*, char*, int*)+0xc8>
c0015354:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015358:	eb 04                	jmp    c001535e <Reg::readInt(char*, char*, int*)+0xcc>
c001535a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001535e:	47                   	inc    edi
c001535f:	eb ae                	jmp    c001530f <Reg::readInt(char*, char*, int*)+0x7d>
c0015361:	84 c0                	test   al,al
c0015363:	74 02                	je     c0015367 <Reg::readInt(char*, char*, int*)+0xd5>
c0015365:	f7 da                	neg    edx
c0015367:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001536e:	89 10                	mov    DWORD PTR [eax],edx
c0015370:	88 d8                	mov    al,bl
c0015372:	81 c4 ec 00 00 00    	add    esp,0xec
c0015378:	5b                   	pop    ebx
c0015379:	5e                   	pop    esi
c001537a:	5f                   	pop    edi
c001537b:	5d                   	pop    ebp
c001537c:	c3                   	ret    

c001537d <Reg::readString(char*, char*, char*, int)>:
c001537d:	57                   	push   edi
c001537e:	56                   	push   esi
c001537f:	53                   	push   ebx
c0015380:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015386:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001538d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015391:	57                   	push   edi
c0015392:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015399:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00153a0:	e8 b6 fe ff ff       	call   c001525b <Reg::getLine(char*, char*, char*)>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	89 c6                	mov    esi,eax
c00153aa:	84 c0                	test   al,al
c00153ac:	74 44                	je     c00153f2 <Reg::readString(char*, char*, char*, int)+0x75>
c00153ae:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00153b5:	31 c0                	xor    eax,eax
c00153b7:	4a                   	dec    edx
c00153b8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00153bb:	84 c9                	test   cl,cl
c00153bd:	74 0f                	je     c00153ce <Reg::readString(char*, char*, char*, int)+0x51>
c00153bf:	39 c2                	cmp    edx,eax
c00153c1:	7e 0b                	jle    c00153ce <Reg::readString(char*, char*, char*, int)+0x51>
c00153c3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00153c6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00153cb:	40                   	inc    eax
c00153cc:	eb ea                	jmp    c00153b8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	53                   	push   ebx
c00153d2:	e8 4e b2 fe ff       	call   c0000625 <strlen>
c00153d7:	83 c4 10             	add    esp,0x10
c00153da:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00153df:	75 11                	jne    c00153f2 <Reg::readString(char*, char*, char*, int)+0x75>
c00153e1:	83 ec 0c             	sub    esp,0xc
c00153e4:	53                   	push   ebx
c00153e5:	e8 3b b2 fe ff       	call   c0000625 <strlen>
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00153f2:	81 c4 d0 00 00 00    	add    esp,0xd0
c00153f8:	89 f0                	mov    eax,esi
c00153fa:	5b                   	pop    ebx
c00153fb:	5e                   	pop    esi
c00153fc:	5f                   	pop    edi
c00153fd:	c3                   	ret    

c00153fe <Reg::readBool(char*, char*, bool*)>:
c00153fe:	83 ec 20             	sub    esp,0x20
c0015401:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015405:	50                   	push   eax
c0015406:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001540a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001540e:	e8 7f fe ff ff       	call   c0015292 <Reg::readInt(char*, char*, int*)>
c0015413:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015418:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001541c:	0f 95 02             	setne  BYTE PTR [edx]
c001541f:	83 c4 2c             	add    esp,0x2c
c0015422:	c3                   	ret    

c0015423 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015423:	53                   	push   ebx
c0015424:	83 ec 1c             	sub    esp,0x1c
c0015427:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001542b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001542f:	50                   	push   eax
c0015430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015438:	e8 c1 ff ff ff       	call   c00153fe <Reg::readBool(char*, char*, bool*)>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	84 c0                	test   al,al
c0015442:	74 04                	je     c0015448 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015444:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015448:	88 d8                	mov    al,bl
c001544a:	83 c4 18             	add    esp,0x18
c001544d:	5b                   	pop    ebx
c001544e:	c3                   	ret    

c001544f <Reg::readIntWithDefault(char*, char*, int)>:
c001544f:	53                   	push   ebx
c0015450:	83 ec 1c             	sub    esp,0x1c
c0015453:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015457:	8d 44 24 10          	lea    eax,[esp+0x10]
c001545b:	50                   	push   eax
c001545c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015460:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015464:	e8 29 fe ff ff       	call   c0015292 <Reg::readInt(char*, char*, int*)>
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	84 c0                	test   al,al
c001546e:	74 04                	je     c0015474 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015470:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015474:	89 d8                	mov    eax,ebx
c0015476:	83 c4 18             	add    esp,0x18
c0015479:	5b                   	pop    ebx
c001547a:	c3                   	ret    

c001547b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001547b:	56                   	push   esi
c001547c:	53                   	push   ebx
c001547d:	51                   	push   ecx
c001547e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015482:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001548a:	56                   	push   esi
c001548b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001548f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015493:	e8 e5 fe ff ff       	call   c001537d <Reg::readString(char*, char*, char*, int)>
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	84 c0                	test   al,al
c001549d:	74 02                	je     c00154a1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001549f:	89 f3                	mov    ebx,esi
c00154a1:	89 d8                	mov    eax,ebx
c00154a3:	5a                   	pop    edx
c00154a4:	5b                   	pop    ebx
c00154a5:	5e                   	pop    esi
c00154a6:	c3                   	ret    

c00154a7 <Sys::exit(regs*)>:
c00154a7:	83 ec 18             	sub    esp,0x18
c00154aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154b1:	e8 14 33 00 00       	call   c00187ca <terminateTask(int)>
c00154b6:	83 c8 ff             	or     eax,0xffffffff
c00154b9:	83 c4 1c             	add    esp,0x1c
c00154bc:	89 c2                	mov    edx,eax
c00154be:	c3                   	ret    

c00154bf <Sys::loadDLL(regs*)>:
c00154bf:	56                   	push   esi
c00154c0:	53                   	push   ebx
c00154c1:	31 d2                	xor    edx,edx
c00154c3:	51                   	push   ecx
c00154c4:	b8 01 00 00 00       	mov    eax,0x1
c00154c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154cd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00154d1:	74 7d                	je     c0015550 <Sys::loadDLL(regs*)+0x91>
c00154d3:	83 ec 0c             	sub    esp,0xc
c00154d6:	68 14 01 00 00       	push   0x114
c00154db:	e8 14 9a ff ff       	call   c000eef4 <operator new(unsigned long)>
c00154e0:	83 c4 0c             	add    esp,0xc
c00154e3:	89 c3                	mov    ebx,eax
c00154e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00154ed:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00154f0:	53                   	push   ebx
c00154f1:	e8 1c a0 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c00154f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154f9:	e8 e6 a2 ff ff       	call   c000f7e4 <File::exists()>
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	84 c0                	test   al,al
c0015503:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015505:	75 11                	jne    c0015518 <Sys::loadDLL(regs*)+0x59>
c0015507:	83 ec 0c             	sub    esp,0xc
c001550a:	53                   	push   ebx
c001550b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	b8 03 00 00 00       	mov    eax,0x3
c0015516:	eb 36                	jmp    c001554e <Sys::loadDLL(regs*)+0x8f>
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	53                   	push   ebx
c001551c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001551f:	58                   	pop    eax
c0015520:	5a                   	pop    edx
c0015521:	6a 00                	push   0x0
c0015523:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015526:	e8 2c 21 00 00       	call   c0017657 <Thr::loadDLL(char const*, bool)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	89 c1                	mov    ecx,eax
c0015530:	31 d2                	xor    edx,edx
c0015532:	b8 04 00 00 00       	mov    eax,0x4
c0015537:	85 c9                	test   ecx,ecx
c0015539:	74 15                	je     c0015550 <Sys::loadDLL(regs*)+0x91>
c001553b:	53                   	push   ebx
c001553c:	53                   	push   ebx
c001553d:	ff 35 48 37 02 c0    	push   DWORD PTR ds:0xc0023748
c0015543:	51                   	push   ecx
c0015544:	e8 61 22 00 00       	call   c00177aa <Thr::executeDLL(unsigned long, void*)>
c0015549:	83 c4 10             	add    esp,0x10
c001554c:	31 c0                	xor    eax,eax
c001554e:	31 d2                	xor    edx,edx
c0015550:	59                   	pop    ecx
c0015551:	5b                   	pop    ebx
c0015552:	5e                   	pop    esi
c0015553:	c3                   	ret    

c0015554 <Sys::read(regs*)>:
c0015554:	57                   	push   edi
c0015555:	56                   	push   esi
c0015556:	53                   	push   ebx
c0015557:	83 ec 10             	sub    esp,0x10
c001555a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001555e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015561:	83 f8 02             	cmp    eax,0x2
c0015564:	77 10                	ja     c0015576 <Sys::read(regs*)+0x22>
c0015566:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001556b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001556e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015574:	eb 0e                	jmp    c0015584 <Sys::read(regs*)+0x30>
c0015576:	83 ec 0c             	sub    esp,0xc
c0015579:	50                   	push   eax
c001557a:	e8 60 86 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	89 c1                	mov    ecx,eax
c0015584:	83 c8 ff             	or     eax,0xffffffff
c0015587:	85 c9                	test   ecx,ecx
c0015589:	89 c2                	mov    edx,eax
c001558b:	74 28                	je     c00155b5 <Sys::read(regs*)+0x61>
c001558d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015595:	31 ff                	xor    edi,edi
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001559c:	8d 54 24 18          	lea    edx,[esp+0x18]
c00155a0:	52                   	push   edx
c00155a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155a4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00155a7:	57                   	push   edi
c00155a8:	56                   	push   esi
c00155a9:	51                   	push   ecx
c00155aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155b1:	83 c4 20             	add    esp,0x20
c00155b4:	99                   	cdq    
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	5b                   	pop    ebx
c00155b9:	5e                   	pop    esi
c00155ba:	5f                   	pop    edi
c00155bb:	c3                   	ret    

c00155bc <Sys::sbrk(regs*)>:
c00155bc:	56                   	push   esi
c00155bd:	53                   	push   ebx
c00155be:	50                   	push   eax
c00155bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155cb:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00155ce:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00155d4:	85 db                	test   ebx,ebx
c00155d6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00155d9:	74 02                	je     c00155dd <Sys::sbrk(regs*)+0x21>
c00155db:	79 06                	jns    c00155e3 <Sys::sbrk(regs*)+0x27>
c00155dd:	89 f0                	mov    eax,esi
c00155df:	31 d2                	xor    edx,edx
c00155e1:	eb 2a                	jmp    c001560d <Sys::sbrk(regs*)+0x51>
c00155e3:	83 c8 ff             	or     eax,0xffffffff
c00155e6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00155ec:	89 c2                	mov    edx,eax
c00155ee:	77 1d                	ja     c001560d <Sys::sbrk(regs*)+0x51>
c00155f0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00155f6:	50                   	push   eax
c00155f7:	c1 ea 0c             	shr    edx,0xc
c00155fa:	68 07 04 00 00       	push   0x407
c00155ff:	52                   	push   edx
c0015600:	51                   	push   ecx
c0015601:	e8 94 8e ff ff       	call   c000e49a <VAS::allocatePages(int, int)>
c0015606:	89 f0                	mov    eax,esi
c0015608:	31 d2                	xor    edx,edx
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	59                   	pop    ecx
c001560e:	5b                   	pop    ebx
c001560f:	5e                   	pop    esi
c0015610:	c3                   	ret    

c0015611 <Sys::write(regs*)>:
c0015611:	57                   	push   edi
c0015612:	56                   	push   esi
c0015613:	53                   	push   ebx
c0015614:	83 ec 18             	sub    esp,0x18
c0015617:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001561b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001561e:	68 f3 19 02 c0       	push   0xc00219f3
c0015623:	e8 bb 99 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001562f:	77 10                	ja     c0015641 <Sys::write(regs*)+0x30>
c0015631:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015636:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015639:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001563f:	eb 1b                	jmp    c001565c <Sys::write(regs*)+0x4b>
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	68 12 1a 02 c0       	push   0xc0021a12
c0015649:	e8 95 99 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001564e:	58                   	pop    eax
c001564f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015652:	e8 88 85 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	89 c1                	mov    ecx,eax
c001565c:	83 c8 ff             	or     eax,0xffffffff
c001565f:	85 c9                	test   ecx,ecx
c0015661:	89 c2                	mov    edx,eax
c0015663:	74 28                	je     c001568d <Sys::write(regs*)+0x7c>
c0015665:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001566d:	31 ff                	xor    edi,edi
c001566f:	83 ec 0c             	sub    esp,0xc
c0015672:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015674:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015678:	52                   	push   edx
c0015679:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001567c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001567f:	57                   	push   edi
c0015680:	56                   	push   esi
c0015681:	51                   	push   ecx
c0015682:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015685:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015689:	83 c4 20             	add    esp,0x20
c001568c:	99                   	cdq    
c001568d:	83 c4 10             	add    esp,0x10
c0015690:	5b                   	pop    ebx
c0015691:	5e                   	pop    esi
c0015692:	5f                   	pop    edi
c0015693:	c3                   	ret    

c0015694 <Sys::yield(regs*)>:
c0015694:	83 ec 0c             	sub    esp,0xc
c0015697:	e8 18 25 00 00       	call   c0017bb4 <lockScheduler()>
c001569c:	e8 47 28 00 00       	call   c0017ee8 <schedule()>
c00156a1:	e8 10 25 00 00       	call   c0017bb6 <unlockScheduler()>
c00156a6:	31 c0                	xor    eax,eax
c00156a8:	31 d2                	xor    edx,edx
c00156aa:	83 c4 0c             	add    esp,0xc
c00156ad:	c3                   	ret    

c00156ae <sysCallGetPID(regs*)>:
c00156ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b8:	99                   	cdq    
c00156b9:	c3                   	ret    

c00156ba <sysCallSeekDir(regs*)>:
c00156ba:	31 c0                	xor    eax,eax
c00156bc:	31 d2                	xor    edx,edx
c00156be:	c3                   	ret    

c00156bf <sysCallTellDir(regs*)>:
c00156bf:	31 c0                	xor    eax,eax
c00156c1:	31 d2                	xor    edx,edx
c00156c3:	c3                   	ret    

c00156c4 <sysCallVerify(regs*)>:
c00156c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156c8:	31 d2                	xor    edx,edx
c00156ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156cd:	c3                   	ret    

c00156ce <sysCallGetArgc(regs*)>:
c00156ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156d6:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00156dc:	99                   	cdq    
c00156dd:	c3                   	ret    

c00156de <sysFormatDisk(regs*)>:
c00156de:	56                   	push   esi
c00156df:	53                   	push   ebx
c00156e0:	53                   	push   ebx
c00156e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156e5:	8b 1d a8 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238a8
c00156eb:	eb 25                	jmp    c0015712 <sysFormatDisk(regs*)+0x34>
c00156ed:	83 ec 0c             	sub    esp,0xc
c00156f0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00156f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00156f5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00156f8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00156fb:	50                   	push   eax
c00156fc:	ff 34 85 40 3d 02 c0 	push   DWORD PTR [eax*4-0x3ffdc2c0]
c0015703:	53                   	push   ebx
c0015704:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015707:	83 c4 20             	add    esp,0x20
c001570a:	83 f8 08             	cmp    eax,0x8
c001570d:	75 12                	jne    c0015721 <sysFormatDisk(regs*)+0x43>
c001570f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015712:	85 db                	test   ebx,ebx
c0015714:	75 d7                	jne    c00156ed <sysFormatDisk(regs*)+0xf>
c0015716:	59                   	pop    ecx
c0015717:	b8 03 00 00 00       	mov    eax,0x3
c001571c:	31 d2                	xor    edx,edx
c001571e:	5b                   	pop    ebx
c001571f:	5e                   	pop    esi
c0015720:	c3                   	ret    
c0015721:	85 c0                	test   eax,eax
c0015723:	74 1b                	je     c0015740 <sysFormatDisk(regs*)+0x62>
c0015725:	83 f8 09             	cmp    eax,0x9
c0015728:	74 0b                	je     c0015735 <sysFormatDisk(regs*)+0x57>
c001572a:	59                   	pop    ecx
c001572b:	b8 02 00 00 00       	mov    eax,0x2
c0015730:	31 d2                	xor    edx,edx
c0015732:	5b                   	pop    ebx
c0015733:	5e                   	pop    esi
c0015734:	c3                   	ret    
c0015735:	59                   	pop    ecx
c0015736:	b8 01 00 00 00       	mov    eax,0x1
c001573b:	31 d2                	xor    edx,edx
c001573d:	5b                   	pop    ebx
c001573e:	5e                   	pop    esi
c001573f:	c3                   	ret    
c0015740:	59                   	pop    ecx
c0015741:	31 c0                	xor    eax,eax
c0015743:	31 d2                	xor    edx,edx
c0015745:	5b                   	pop    ebx
c0015746:	5e                   	pop    esi
c0015747:	c3                   	ret    

c0015748 <sysSetDiskVolumeLabel(regs*)>:
c0015748:	56                   	push   esi
c0015749:	53                   	push   ebx
c001574a:	53                   	push   ebx
c001574b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001574f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015752:	83 f8 19             	cmp    eax,0x19
c0015755:	77 29                	ja     c0015780 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015757:	8b 0c 85 40 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc2c0]
c001575e:	85 c9                	test   ecx,ecx
c0015760:	74 1e                	je     c0015780 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015762:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015765:	85 d2                	test   edx,edx
c0015767:	74 17                	je     c0015780 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015769:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001576f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015771:	52                   	push   edx
c0015772:	50                   	push   eax
c0015773:	51                   	push   ecx
c0015774:	53                   	push   ebx
c0015775:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	99                   	cdq    
c001577c:	59                   	pop    ecx
c001577d:	5b                   	pop    ebx
c001577e:	5e                   	pop    esi
c001577f:	c3                   	ret    
c0015780:	59                   	pop    ecx
c0015781:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015786:	ba ff ff ff ff       	mov    edx,0xffffffff
c001578b:	5b                   	pop    ebx
c001578c:	5e                   	pop    esi
c001578d:	c3                   	ret    

c001578e <sysGetDiskVolumeLabel(regs*)>:
c001578e:	57                   	push   edi
c001578f:	56                   	push   esi
c0015790:	53                   	push   ebx
c0015791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015795:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015798:	83 fa 19             	cmp    edx,0x19
c001579b:	77 34                	ja     c00157d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c001579d:	8b 0c 95 40 3d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdc2c0]
c00157a4:	85 c9                	test   ecx,ecx
c00157a6:	74 29                	je     c00157d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157a8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00157ab:	85 db                	test   ebx,ebx
c00157ad:	74 22                	je     c00157d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157af:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00157b2:	85 c0                	test   eax,eax
c00157b4:	74 1b                	je     c00157d1 <sysGetDiskVolumeLabel(regs*)+0x43>
c00157b6:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00157bc:	83 ec 0c             	sub    esp,0xc
c00157bf:	8b 3e                	mov    edi,DWORD PTR [esi]
c00157c1:	50                   	push   eax
c00157c2:	53                   	push   ebx
c00157c3:	52                   	push   edx
c00157c4:	51                   	push   ecx
c00157c5:	56                   	push   esi
c00157c6:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00157c9:	83 c4 20             	add    esp,0x20
c00157cc:	99                   	cdq    
c00157cd:	5b                   	pop    ebx
c00157ce:	5e                   	pop    esi
c00157cf:	5f                   	pop    edi
c00157d0:	c3                   	ret    
c00157d1:	5b                   	pop    ebx
c00157d2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157dc:	5e                   	pop    esi
c00157dd:	5f                   	pop    edi
c00157de:	c3                   	ret    

c00157df <sysShutdown(regs*)>:
c00157df:	83 ec 0c             	sub    esp,0xc
c00157e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157e9:	85 c0                	test   eax,eax
c00157eb:	74 18                	je     c0015805 <sysShutdown(regs*)+0x26>
c00157ed:	83 f8 01             	cmp    eax,0x1
c00157f0:	74 38                	je     c001582a <sysShutdown(regs*)+0x4b>
c00157f2:	83 f8 02             	cmp    eax,0x2
c00157f5:	74 24                	je     c001581b <sysShutdown(regs*)+0x3c>
c00157f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157fc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015801:	83 c4 0c             	add    esp,0xc
c0015804:	c3                   	ret    
c0015805:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001580a:	8b 10                	mov    edx,DWORD PTR [eax]
c001580c:	6a 00                	push   0x0
c001580e:	6a 00                	push   0x0
c0015810:	6a 00                	push   0x0
c0015812:	50                   	push   eax
c0015813:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015816:	83 c4 10             	add    esp,0x10
c0015819:	eb dc                	jmp    c00157f7 <sysShutdown(regs*)+0x18>
c001581b:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0015820:	8b 10                	mov    edx,DWORD PTR [eax]
c0015822:	6a 00                	push   0x0
c0015824:	6a 00                	push   0x0
c0015826:	6a 01                	push   0x1
c0015828:	eb e8                	jmp    c0015812 <sysShutdown(regs*)+0x33>
c001582a:	a1 c0 3d 02 c0       	mov    eax,ds:0xc0023dc0
c001582f:	85 c0                	test   eax,eax
c0015831:	74 02                	je     c0015835 <sysShutdown(regs*)+0x56>
c0015833:	ff d0                	call   eax
c0015835:	31 c0                	xor    eax,eax
c0015837:	31 d2                	xor    edx,edx
c0015839:	83 c4 0c             	add    esp,0xc
c001583c:	c3                   	ret    

c001583d <sysCallGetCwd(regs*)>:
c001583d:	83 ec 10             	sub    esp,0x10
c0015840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015844:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015847:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001584a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001584f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015852:	e8 2c a0 ff ff       	call   c000f883 <getcwd(Process*, char*, int)>
c0015857:	83 c4 1c             	add    esp,0x1c
c001585a:	99                   	cdq    
c001585b:	c3                   	ret    

c001585c <sysCallSetCwd(regs*)>:
c001585c:	83 ec 14             	sub    esp,0x14
c001585f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015863:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001586b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001586e:	e8 3a a0 ff ff       	call   c000f8ad <setcwd(Process*, char*)>
c0015873:	83 c4 1c             	add    esp,0x1c
c0015876:	99                   	cdq    
c0015877:	c3                   	ret    

c0015878 <sysCallRealpath(regs*)>:
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001587f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015882:	85 d2                	test   edx,edx
c0015884:	74 07                	je     c001588d <sysCallRealpath(regs*)+0x15>
c0015886:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015889:	85 c0                	test   eax,eax
c001588b:	75 0b                	jne    c0015898 <sysCallRealpath(regs*)+0x20>
c001588d:	b8 01 00 00 00       	mov    eax,0x1
c0015892:	31 d2                	xor    edx,edx
c0015894:	83 c4 0c             	add    esp,0xc
c0015897:	c3                   	ret    
c0015898:	51                   	push   ecx
c0015899:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001589f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00158a2:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00158a8:	51                   	push   ecx
c00158a9:	52                   	push   edx
c00158aa:	50                   	push   eax
c00158ab:	e8 b8 9a ff ff       	call   c000f368 <standardiseFiles(char*, char const*, char const*)>
c00158b0:	83 c4 10             	add    esp,0x10
c00158b3:	31 c0                	xor    eax,eax
c00158b5:	31 d2                	xor    edx,edx
c00158b7:	83 c4 0c             	add    esp,0xc
c00158ba:	c3                   	ret    

c00158bb <sysCallReadDir(regs*)>:
c00158bb:	53                   	push   ebx
c00158bc:	83 ec 18             	sub    esp,0x18
c00158bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158c3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158c6:	83 f8 02             	cmp    eax,0x2
c00158c9:	76 53                	jbe    c001591e <sysCallReadDir(regs*)+0x63>
c00158cb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00158ce:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00158d4:	77 4f                	ja     c0015925 <sysCallReadDir(regs*)+0x6a>
c00158d6:	83 ec 0c             	sub    esp,0xc
c00158d9:	50                   	push   eax
c00158da:	e8 00 83 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	85 c0                	test   eax,eax
c00158e4:	74 50                	je     c0015936 <sysCallReadDir(regs*)+0x7b>
c00158e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00158f3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00158f7:	51                   	push   ecx
c00158f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158fb:	6a 00                	push   0x0
c00158fd:	68 10 01 00 00       	push   0x110
c0015902:	50                   	push   eax
c0015903:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015906:	83 c4 20             	add    esp,0x20
c0015909:	85 c0                	test   eax,eax
c001590b:	74 38                	je     c0015945 <sysCallReadDir(regs*)+0x8a>
c001590d:	83 f8 07             	cmp    eax,0x7
c0015910:	74 0c                	je     c001591e <sysCallReadDir(regs*)+0x63>
c0015912:	b8 02 00 00 00       	mov    eax,0x2
c0015917:	31 d2                	xor    edx,edx
c0015919:	83 c4 18             	add    esp,0x18
c001591c:	5b                   	pop    ebx
c001591d:	c3                   	ret    
c001591e:	b8 01 00 00 00       	mov    eax,0x1
c0015923:	eb f2                	jmp    c0015917 <sysCallReadDir(regs*)+0x5c>
c0015925:	83 ec 08             	sub    esp,0x8
c0015928:	52                   	push   edx
c0015929:	68 34 1a 02 c0       	push   0xc0021a34
c001592e:	e8 b0 96 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015933:	83 c4 10             	add    esp,0x10
c0015936:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001593b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015940:	83 c4 18             	add    esp,0x18
c0015943:	5b                   	pop    ebx
c0015944:	c3                   	ret    
c0015945:	31 c0                	xor    eax,eax
c0015947:	eb ce                	jmp    c0015917 <sysCallReadDir(regs*)+0x5c>

c0015949 <sysCallIsATTY(regs*)>:
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015950:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015953:	83 f8 02             	cmp    eax,0x2
c0015956:	76 07                	jbe    c001595f <sysCallIsATTY(regs*)+0x16>
c0015958:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001595d:	75 26                	jne    c0015985 <sysCallIsATTY(regs*)+0x3c>
c001595f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015964:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015967:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001596d:	85 c0                	test   eax,eax
c001596f:	74 24                	je     c0015995 <sysCallIsATTY(regs*)+0x4c>
c0015971:	83 ec 0c             	sub    esp,0xc
c0015974:	8b 10                	mov    edx,DWORD PTR [eax]
c0015976:	50                   	push   eax
c0015977:	ff 12                	call   DWORD PTR [edx]
c0015979:	31 d2                	xor    edx,edx
c001597b:	0f b6 c0             	movzx  eax,al
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	83 c4 0c             	add    esp,0xc
c0015984:	c3                   	ret    
c0015985:	83 ec 0c             	sub    esp,0xc
c0015988:	50                   	push   eax
c0015989:	e8 51 82 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c001598e:	83 c4 10             	add    esp,0x10
c0015991:	85 c0                	test   eax,eax
c0015993:	75 dc                	jne    c0015971 <sysCallIsATTY(regs*)+0x28>
c0015995:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001599a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001599f:	83 c4 0c             	add    esp,0xc
c00159a2:	c3                   	ret    

c00159a3 <sysCallSeek(regs*)>:
c00159a3:	53                   	push   ebx
c00159a4:	83 ec 08             	sub    esp,0x8
c00159a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159ae:	83 f8 02             	cmp    eax,0x2
c00159b1:	76 4a                	jbe    c00159fd <sysCallSeek(regs*)+0x5a>
c00159b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159b8:	77 32                	ja     c00159ec <sysCallSeek(regs*)+0x49>
c00159ba:	83 ec 0c             	sub    esp,0xc
c00159bd:	50                   	push   eax
c00159be:	e8 1c 82 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c00159c3:	83 c4 0c             	add    esp,0xc
c00159c6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00159c9:	31 db                	xor    ebx,ebx
c00159cb:	53                   	push   ebx
c00159cc:	51                   	push   ecx
c00159cd:	50                   	push   eax
c00159ce:	e8 61 9c ff ff       	call   c000f634 <File::seek(unsigned long long)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	85 c0                	test   eax,eax
c00159d8:	0f 95 c0             	setne  al
c00159db:	31 d2                	xor    edx,edx
c00159dd:	0f b6 c0             	movzx  eax,al
c00159e0:	f7 d8                	neg    eax
c00159e2:	83 d2 00             	adc    edx,0x0
c00159e5:	83 c4 08             	add    esp,0x8
c00159e8:	f7 da                	neg    edx
c00159ea:	5b                   	pop    ebx
c00159eb:	c3                   	ret    
c00159ec:	83 ec 08             	sub    esp,0x8
c00159ef:	50                   	push   eax
c00159f0:	68 f0 1a 02 c0       	push   0xc0021af0
c00159f5:	e8 e9 95 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a02:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a07:	83 c4 08             	add    esp,0x8
c0015a0a:	5b                   	pop    ebx
c0015a0b:	c3                   	ret    

c0015a0c <sysCallTell(regs*)>:
c0015a0c:	53                   	push   ebx
c0015a0d:	83 ec 08             	sub    esp,0x8
c0015a10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a17:	83 f8 02             	cmp    eax,0x2
c0015a1a:	76 5e                	jbe    c0015a7a <sysCallTell(regs*)+0x6e>
c0015a1c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a21:	77 2d                	ja     c0015a50 <sysCallTell(regs*)+0x44>
c0015a23:	83 ec 0c             	sub    esp,0xc
c0015a26:	50                   	push   eax
c0015a27:	e8 b3 81 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c0015a2c:	5a                   	pop    edx
c0015a2d:	59                   	pop    ecx
c0015a2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a31:	50                   	push   eax
c0015a32:	e8 53 9c ff ff       	call   c000f68a <File::tell(unsigned long long*)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	85 c0                	test   eax,eax
c0015a3c:	0f 95 c0             	setne  al
c0015a3f:	31 d2                	xor    edx,edx
c0015a41:	0f b6 c0             	movzx  eax,al
c0015a44:	f7 d8                	neg    eax
c0015a46:	83 d2 00             	adc    edx,0x0
c0015a49:	83 c4 08             	add    esp,0x8
c0015a4c:	f7 da                	neg    edx
c0015a4e:	5b                   	pop    ebx
c0015a4f:	c3                   	ret    
c0015a50:	83 ec 08             	sub    esp,0x8
c0015a53:	50                   	push   eax
c0015a54:	68 0a 1b 02 c0       	push   0xc0021b0a
c0015a59:	e8 85 95 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015a5e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a71:	31 d2                	xor    edx,edx
c0015a73:	31 c0                	xor    eax,eax
c0015a75:	83 c4 08             	add    esp,0x8
c0015a78:	5b                   	pop    ebx
c0015a79:	c3                   	ret    
c0015a7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a84:	83 c4 08             	add    esp,0x8
c0015a87:	5b                   	pop    ebx
c0015a88:	c3                   	ret    

c0015a89 <sysCallSizeFromFilename(regs*)>:
c0015a89:	57                   	push   edi
c0015a8a:	56                   	push   esi
c0015a8b:	53                   	push   ebx
c0015a8c:	83 ec 10             	sub    esp,0x10
c0015a8f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015a93:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a96:	83 fb 02             	cmp    ebx,0x2
c0015a99:	0f 86 8a 00 00 00    	jbe    c0015b29 <sysCallSizeFromFilename(regs*)+0xa0>
c0015a9f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015aa5:	77 56                	ja     c0015afd <sysCallSizeFromFilename(regs*)+0x74>
c0015aa7:	83 ec 0c             	sub    esp,0xc
c0015aaa:	68 14 01 00 00       	push   0x114
c0015aaf:	e8 40 94 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0015ab4:	83 c4 0c             	add    esp,0xc
c0015ab7:	89 c7                	mov    edi,eax
c0015ab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015abe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ac1:	53                   	push   ebx
c0015ac2:	57                   	push   edi
c0015ac3:	e8 4a 9a ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0015ac8:	83 c4 0c             	add    esp,0xc
c0015acb:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015acf:	50                   	push   eax
c0015ad0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ad3:	57                   	push   edi
c0015ad4:	e8 49 9d ff ff       	call   c000f822 <File::stat(unsigned long long*, bool*)>
c0015ad9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015adc:	89 c3                	mov    ebx,eax
c0015ade:	8b 07                	mov    eax,DWORD PTR [edi]
c0015ae0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ae3:	83 c4 10             	add    esp,0x10
c0015ae6:	31 c0                	xor    eax,eax
c0015ae8:	85 db                	test   ebx,ebx
c0015aea:	0f 95 c0             	setne  al
c0015aed:	31 d2                	xor    edx,edx
c0015aef:	f7 d8                	neg    eax
c0015af1:	83 d2 00             	adc    edx,0x0
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	f7 da                	neg    edx
c0015af9:	5b                   	pop    ebx
c0015afa:	5e                   	pop    esi
c0015afb:	5f                   	pop    edi
c0015afc:	c3                   	ret    
c0015afd:	83 ec 08             	sub    esp,0x8
c0015b00:	53                   	push   ebx
c0015b01:	68 24 1b 02 c0       	push   0xc0021b24
c0015b06:	e8 d8 94 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015b0b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015b0e:	83 c4 10             	add    esp,0x10
c0015b11:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b1e:	31 d2                	xor    edx,edx
c0015b20:	83 c4 10             	add    esp,0x10
c0015b23:	31 c0                	xor    eax,eax
c0015b25:	5b                   	pop    ebx
c0015b26:	5e                   	pop    esi
c0015b27:	5f                   	pop    edi
c0015b28:	c3                   	ret    
c0015b29:	83 c4 10             	add    esp,0x10
c0015b2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b31:	5b                   	pop    ebx
c0015b32:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b37:	5e                   	pop    esi
c0015b38:	5f                   	pop    edi
c0015b39:	c3                   	ret    

c0015b3a <sysCallSize(regs*)>:
c0015b3a:	53                   	push   ebx
c0015b3b:	83 ec 18             	sub    esp,0x18
c0015b3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b42:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b45:	83 f8 02             	cmp    eax,0x2
c0015b48:	76 64                	jbe    c0015bae <sysCallSize(regs*)+0x74>
c0015b4a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015b4f:	77 33                	ja     c0015b84 <sysCallSize(regs*)+0x4a>
c0015b51:	83 ec 0c             	sub    esp,0xc
c0015b54:	50                   	push   eax
c0015b55:	e8 85 80 ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c0015b5a:	83 c4 0c             	add    esp,0xc
c0015b5d:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015b61:	52                   	push   edx
c0015b62:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b65:	50                   	push   eax
c0015b66:	e8 b7 9c ff ff       	call   c000f822 <File::stat(unsigned long long*, bool*)>
c0015b6b:	83 c4 10             	add    esp,0x10
c0015b6e:	85 c0                	test   eax,eax
c0015b70:	0f 95 c0             	setne  al
c0015b73:	31 d2                	xor    edx,edx
c0015b75:	0f b6 c0             	movzx  eax,al
c0015b78:	f7 d8                	neg    eax
c0015b7a:	83 d2 00             	adc    edx,0x0
c0015b7d:	83 c4 18             	add    esp,0x18
c0015b80:	f7 da                	neg    edx
c0015b82:	5b                   	pop    ebx
c0015b83:	c3                   	ret    
c0015b84:	83 ec 08             	sub    esp,0x8
c0015b87:	50                   	push   eax
c0015b88:	68 24 1b 02 c0       	push   0xc0021b24
c0015b8d:	e8 51 94 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015b92:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015b95:	83 c4 10             	add    esp,0x10
c0015b98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015b9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015ba5:	31 d2                	xor    edx,edx
c0015ba7:	31 c0                	xor    eax,eax
c0015ba9:	83 c4 18             	add    esp,0x18
c0015bac:	5b                   	pop    ebx
c0015bad:	c3                   	ret    
c0015bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bb8:	83 c4 18             	add    esp,0x18
c0015bbb:	5b                   	pop    ebx
c0015bbc:	c3                   	ret    

c0015bbd <sysCallClose(regs*)>:
c0015bbd:	53                   	push   ebx
c0015bbe:	83 ec 08             	sub    esp,0x8
c0015bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bc8:	83 f8 02             	cmp    eax,0x2
c0015bcb:	76 50                	jbe    c0015c1d <sysCallClose(regs*)+0x60>
c0015bcd:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015bd2:	74 58                	je     c0015c2c <sysCallClose(regs*)+0x6f>
c0015bd4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015bd9:	74 60                	je     c0015c3b <sysCallClose(regs*)+0x7e>
c0015bdb:	77 2f                	ja     c0015c0c <sysCallClose(regs*)+0x4f>
c0015bdd:	83 ec 0c             	sub    esp,0xc
c0015be0:	50                   	push   eax
c0015be1:	e8 f9 7f ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c0015be6:	89 c3                	mov    ebx,eax
c0015be8:	89 04 24             	mov    DWORD PTR [esp],eax
c0015beb:	e8 e4 99 ff ff       	call   c000f5d4 <File::close()>
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	85 db                	test   ebx,ebx
c0015bf5:	74 0c                	je     c0015c03 <sysCallClose(regs*)+0x46>
c0015bf7:	83 ec 0c             	sub    esp,0xc
c0015bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bfc:	53                   	push   ebx
c0015bfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	31 c0                	xor    eax,eax
c0015c05:	31 d2                	xor    edx,edx
c0015c07:	83 c4 08             	add    esp,0x8
c0015c0a:	5b                   	pop    ebx
c0015c0b:	c3                   	ret    
c0015c0c:	83 ec 08             	sub    esp,0x8
c0015c0f:	50                   	push   eax
c0015c10:	68 58 1a 02 c0       	push   0xc0021a58
c0015c15:	e8 c9 93 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015c1a:	83 c4 10             	add    esp,0x10
c0015c1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c27:	83 c4 08             	add    esp,0x8
c0015c2a:	5b                   	pop    ebx
c0015c2b:	c3                   	ret    
c0015c2c:	83 ec 0c             	sub    esp,0xc
c0015c2f:	68 3f 1b 02 c0       	push   0xc0021b3f
c0015c34:	e8 aa 93 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015c39:	eb c5                	jmp    c0015c00 <sysCallClose(regs*)+0x43>
c0015c3b:	83 ec 0c             	sub    esp,0xc
c0015c3e:	68 4d 1b 02 c0       	push   0xc0021b4d
c0015c43:	eb ef                	jmp    c0015c34 <sysCallClose(regs*)+0x77>

c0015c45 <sysCallOpenDir(regs*)>:
c0015c45:	56                   	push   esi
c0015c46:	53                   	push   ebx
c0015c47:	53                   	push   ebx
c0015c48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c4c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015c4f:	85 f6                	test   esi,esi
c0015c51:	74 51                	je     c0015ca4 <sysCallOpenDir(regs*)+0x5f>
c0015c53:	83 ec 0c             	sub    esp,0xc
c0015c56:	68 14 01 00 00       	push   0x114
c0015c5b:	e8 94 92 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0015c60:	83 c4 0c             	add    esp,0xc
c0015c63:	89 c6                	mov    esi,eax
c0015c65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c6a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c6d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c70:	56                   	push   esi
c0015c71:	e8 5e 9d ff ff       	call   c000f9d4 <Directory::Directory(char const*, Process*)>
c0015c76:	89 34 24             	mov    DWORD PTR [esp],esi
c0015c79:	e8 ba 9d ff ff       	call   c000fa38 <Directory::open()>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	85 c0                	test   eax,eax
c0015c83:	75 1f                	jne    c0015ca4 <sysCallOpenDir(regs*)+0x5f>
c0015c85:	83 ec 0c             	sub    esp,0xc
c0015c88:	56                   	push   esi
c0015c89:	e8 9c 7c ff ff       	call   c000d92a <UnixFile::getFileDescriptor()>
c0015c8e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	89 02                	mov    DWORD PTR [edx],eax
c0015c96:	c1 f8 1f             	sar    eax,0x1f
c0015c99:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015c9c:	31 c0                	xor    eax,eax
c0015c9e:	59                   	pop    ecx
c0015c9f:	31 d2                	xor    edx,edx
c0015ca1:	5b                   	pop    ebx
c0015ca2:	5e                   	pop    esi
c0015ca3:	c3                   	ret    
c0015ca4:	59                   	pop    ecx
c0015ca5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015caa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015caf:	5b                   	pop    ebx
c0015cb0:	5e                   	pop    esi
c0015cb1:	c3                   	ret    

c0015cb2 <sysCallMakeDir(regs*)>:
c0015cb2:	56                   	push   esi
c0015cb3:	53                   	push   ebx
c0015cb4:	83 ec 10             	sub    esp,0x10
c0015cb7:	68 14 01 00 00       	push   0x114
c0015cbc:	e8 33 92 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0015cc1:	83 c4 0c             	add    esp,0xc
c0015cc4:	89 c3                	mov    ebx,eax
c0015cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ccb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015cce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cd2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015cd5:	53                   	push   ebx
c0015cd6:	e8 f9 9c ff ff       	call   c000f9d4 <Directory::Directory(char const*, Process*)>
c0015cdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cde:	e8 35 9f ff ff       	call   c000fc18 <Directory::create()>
c0015ce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ce6:	89 c6                	mov    esi,eax
c0015ce8:	e8 a7 9d ff ff       	call   c000fa94 <Directory::close()>
c0015ced:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015cef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cf5:	31 c0                	xor    eax,eax
c0015cf7:	85 f6                	test   esi,esi
c0015cf9:	0f 95 c0             	setne  al
c0015cfc:	31 d2                	xor    edx,edx
c0015cfe:	f7 d8                	neg    eax
c0015d00:	83 d2 00             	adc    edx,0x0
c0015d03:	83 c4 14             	add    esp,0x14
c0015d06:	f7 da                	neg    edx
c0015d08:	5b                   	pop    ebx
c0015d09:	5e                   	pop    esi
c0015d0a:	c3                   	ret    

c0015d0b <sysCallCloseDir(regs*)>:
c0015d0b:	53                   	push   ebx
c0015d0c:	83 ec 08             	sub    esp,0x8
c0015d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d16:	83 f8 02             	cmp    eax,0x2
c0015d19:	76 47                	jbe    c0015d62 <sysCallCloseDir(regs*)+0x57>
c0015d1b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015d20:	77 2f                	ja     c0015d51 <sysCallCloseDir(regs*)+0x46>
c0015d22:	83 ec 0c             	sub    esp,0xc
c0015d25:	50                   	push   eax
c0015d26:	e8 b4 7e ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c0015d2b:	89 c3                	mov    ebx,eax
c0015d2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d30:	e8 5f 9d ff ff       	call   c000fa94 <Directory::close()>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	85 db                	test   ebx,ebx
c0015d3a:	74 0c                	je     c0015d48 <sysCallCloseDir(regs*)+0x3d>
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d41:	53                   	push   ebx
c0015d42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015d45:	83 c4 10             	add    esp,0x10
c0015d48:	31 c0                	xor    eax,eax
c0015d4a:	31 d2                	xor    edx,edx
c0015d4c:	83 c4 08             	add    esp,0x8
c0015d4f:	5b                   	pop    ebx
c0015d50:	c3                   	ret    
c0015d51:	83 ec 08             	sub    esp,0x8
c0015d54:	50                   	push   eax
c0015d55:	68 80 1a 02 c0       	push   0xc0021a80
c0015d5a:	e8 84 92 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015d5f:	83 c4 10             	add    esp,0x10
c0015d62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d6c:	83 c4 08             	add    esp,0x8
c0015d6f:	5b                   	pop    ebx
c0015d70:	c3                   	ret    

c0015d71 <sysCallWait(regs*)>:
c0015d71:	83 ec 10             	sub    esp,0x10
c0015d74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015d78:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015d7b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015d7e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015d81:	e8 4e 24 00 00       	call   c00181d4 <waitTask(int, int*, int)>
c0015d86:	83 c4 1c             	add    esp,0x1c
c0015d89:	99                   	cdq    
c0015d8a:	c3                   	ret    

c0015d8b <sysCallFork(regs*)>:
c0015d8b:	83 ec 18             	sub    esp,0x18
c0015d8e:	68 5b 1b 02 c0       	push   0xc0021b5b
c0015d93:	e8 4b 92 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015d98:	58                   	pop    eax
c0015d99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9d:	e8 00 22 00 00       	call   c0017fa2 <forkProcess(regs*)>
c0015da2:	83 c4 1c             	add    esp,0x1c
c0015da5:	99                   	cdq    
c0015da6:	c3                   	ret    

c0015da7 <sysCallExecve(regs*)>:
c0015da7:	53                   	push   ebx
c0015da8:	81 ec 24 01 00 00    	sub    esp,0x124
c0015dae:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015db5:	68 69 1b 02 c0       	push   0xc0021b69
c0015dba:	e8 24 92 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0015dbf:	83 c4 0c             	add    esp,0xc
c0015dc2:	68 00 01 00 00       	push   0x100
c0015dc7:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015dcb:	50                   	push   eax
c0015dcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dd1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015dd4:	e8 aa 9a ff ff       	call   c000f883 <getcwd(Process*, char*, int)>
c0015dd9:	83 c4 0c             	add    esp,0xc
c0015ddc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ddf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015de2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015de5:	e8 1e 25 00 00       	call   c0018308 <execveProcess(char const*, char* const*, char* const*)>
c0015dea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015def:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015df4:	81 c4 28 01 00 00    	add    esp,0x128
c0015dfa:	5b                   	pop    ebx
c0015dfb:	c3                   	ret    

c0015dfc <sysCallRmdir(regs*)>:
c0015dfc:	56                   	push   esi
c0015dfd:	53                   	push   ebx
c0015dfe:	83 ec 10             	sub    esp,0x10
c0015e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e05:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e08:	68 14 01 00 00       	push   0x114
c0015e0d:	e8 e2 90 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0015e12:	83 c4 0c             	add    esp,0xc
c0015e15:	89 c3                	mov    ebx,eax
c0015e17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e1c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e1f:	56                   	push   esi
c0015e20:	53                   	push   ebx
c0015e21:	e8 ec 96 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0015e26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e29:	e8 c0 98 ff ff       	call   c000f6ee <File::unlink()>
c0015e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e31:	89 c6                	mov    esi,eax
c0015e33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e38:	31 c0                	xor    eax,eax
c0015e3a:	85 f6                	test   esi,esi
c0015e3c:	0f 95 c0             	setne  al
c0015e3f:	31 d2                	xor    edx,edx
c0015e41:	f7 d8                	neg    eax
c0015e43:	83 d2 00             	adc    edx,0x0
c0015e46:	83 c4 14             	add    esp,0x14
c0015e49:	f7 da                	neg    edx
c0015e4b:	5b                   	pop    ebx
c0015e4c:	5e                   	pop    esi
c0015e4d:	c3                   	ret    

c0015e4e <sysCallUnlink(regs*)>:
c0015e4e:	56                   	push   esi
c0015e4f:	53                   	push   ebx
c0015e50:	83 ec 10             	sub    esp,0x10
c0015e53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e57:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015e5a:	68 14 01 00 00       	push   0x114
c0015e5f:	e8 90 90 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0015e64:	83 c4 0c             	add    esp,0xc
c0015e67:	89 c3                	mov    ebx,eax
c0015e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015e71:	56                   	push   esi
c0015e72:	53                   	push   ebx
c0015e73:	e8 9a 96 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0015e78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e7b:	e8 6e 98 ff ff       	call   c000f6ee <File::unlink()>
c0015e80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e83:	89 c6                	mov    esi,eax
c0015e85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e8a:	31 c0                	xor    eax,eax
c0015e8c:	85 f6                	test   esi,esi
c0015e8e:	0f 95 c0             	setne  al
c0015e91:	31 d2                	xor    edx,edx
c0015e93:	f7 d8                	neg    eax
c0015e95:	83 d2 00             	adc    edx,0x0
c0015e98:	83 c4 14             	add    esp,0x14
c0015e9b:	f7 da                	neg    edx
c0015e9d:	5b                   	pop    ebx
c0015e9e:	5e                   	pop    esi
c0015e9f:	c3                   	ret    

c0015ea0 <sysCallGetArgv(regs*)>:
c0015ea0:	83 ec 0c             	sub    esp,0xc
c0015ea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ea7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015eaa:	85 c0                	test   eax,eax
c0015eac:	78 2b                	js     c0015ed9 <sysCallGetArgv(regs*)+0x39>
c0015eae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015eb4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015eb7:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015ebd:	7d 1a                	jge    c0015ed9 <sysCallGetArgv(regs*)+0x39>
c0015ebf:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015ec6:	85 c0                	test   eax,eax
c0015ec8:	74 17                	je     c0015ee1 <sysCallGetArgv(regs*)+0x41>
c0015eca:	83 ec 08             	sub    esp,0x8
c0015ecd:	50                   	push   eax
c0015ece:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015ed1:	e8 d1 a7 fe ff       	call   c00006a7 <strcpy>
c0015ed6:	83 c4 10             	add    esp,0x10
c0015ed9:	31 c0                	xor    eax,eax
c0015edb:	31 d2                	xor    edx,edx
c0015edd:	83 c4 0c             	add    esp,0xc
c0015ee0:	c3                   	ret    
c0015ee1:	b8 01 00 00 00       	mov    eax,0x1
c0015ee6:	31 d2                	xor    edx,edx
c0015ee8:	83 c4 0c             	add    esp,0xc
c0015eeb:	c3                   	ret    

c0015eec <sysCallTTYName(regs*)>:
c0015eec:	56                   	push   esi
c0015eed:	53                   	push   ebx
c0015eee:	53                   	push   ebx
c0015eef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ef3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015ef6:	85 c0                	test   eax,eax
c0015ef8:	74 5f                	je     c0015f59 <sysCallTTYName(regs*)+0x6d>
c0015efa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015efd:	83 f8 02             	cmp    eax,0x2
c0015f00:	77 3e                	ja     c0015f40 <sysCallTTYName(regs*)+0x54>
c0015f02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015f0a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015f10:	85 db                	test   ebx,ebx
c0015f12:	74 45                	je     c0015f59 <sysCallTTYName(regs*)+0x6d>
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f19:	53                   	push   ebx
c0015f1a:	ff 10                	call   DWORD PTR [eax]
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	84 c0                	test   al,al
c0015f21:	74 41                	je     c0015f64 <sysCallTTYName(regs*)+0x78>
c0015f23:	83 ec 08             	sub    esp,0x8
c0015f26:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015f2c:	53                   	push   ebx
c0015f2d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015f30:	e8 72 a7 fe ff       	call   c00006a7 <strcpy>
c0015f35:	83 c4 10             	add    esp,0x10
c0015f38:	31 c0                	xor    eax,eax
c0015f3a:	59                   	pop    ecx
c0015f3b:	31 d2                	xor    edx,edx
c0015f3d:	5b                   	pop    ebx
c0015f3e:	5e                   	pop    esi
c0015f3f:	c3                   	ret    
c0015f40:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f45:	74 bb                	je     c0015f02 <sysCallTTYName(regs*)+0x16>
c0015f47:	83 ec 0c             	sub    esp,0xc
c0015f4a:	50                   	push   eax
c0015f4b:	e8 8f 7c ff ff       	call   c000dbdf <getFromFileDescriptor(int)>
c0015f50:	83 c4 10             	add    esp,0x10
c0015f53:	89 c3                	mov    ebx,eax
c0015f55:	85 db                	test   ebx,ebx
c0015f57:	75 bb                	jne    c0015f14 <sysCallTTYName(regs*)+0x28>
c0015f59:	59                   	pop    ecx
c0015f5a:	b8 01 00 00 00       	mov    eax,0x1
c0015f5f:	31 d2                	xor    edx,edx
c0015f61:	5b                   	pop    ebx
c0015f62:	5e                   	pop    esi
c0015f63:	c3                   	ret    
c0015f64:	59                   	pop    ecx
c0015f65:	b8 02 00 00 00       	mov    eax,0x2
c0015f6a:	31 d2                	xor    edx,edx
c0015f6c:	5b                   	pop    ebx
c0015f6d:	5e                   	pop    esi
c0015f6e:	c3                   	ret    

c0015f6f <sysCallGetEnv(regs*)>:
c0015f6f:	83 ec 0c             	sub    esp,0xc
c0015f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f76:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015f79:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f7c:	85 c9                	test   ecx,ecx
c0015f7e:	75 0c                	jne    c0015f8c <sysCallGetEnv(regs*)+0x1d>
c0015f80:	85 d2                	test   edx,edx
c0015f82:	74 14                	je     c0015f98 <sysCallGetEnv(regs*)+0x29>
c0015f84:	31 c0                	xor    eax,eax
c0015f86:	31 d2                	xor    edx,edx
c0015f88:	83 c4 0c             	add    esp,0xc
c0015f8b:	c3                   	ret    
c0015f8c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015f8f:	85 d2                	test   edx,edx
c0015f91:	74 1b                	je     c0015fae <sysCallGetEnv(regs*)+0x3f>
c0015f93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015f96:	eb ec                	jmp    c0015f84 <sysCallGetEnv(regs*)+0x15>
c0015f98:	83 ec 0c             	sub    esp,0xc
c0015f9b:	68 a4 1a 02 c0       	push   0xc0021aa4
c0015fa0:	e8 80 a6 fe ff       	call   c0000625 <strlen>
c0015fa5:	83 c4 10             	add    esp,0x10
c0015fa8:	31 d2                	xor    edx,edx
c0015faa:	83 c4 0c             	add    esp,0xc
c0015fad:	c3                   	ret    
c0015fae:	83 ec 08             	sub    esp,0x8
c0015fb1:	68 a4 1a 02 c0       	push   0xc0021aa4
c0015fb6:	50                   	push   eax
c0015fb7:	e8 eb a6 fe ff       	call   c00006a7 <strcpy>
c0015fbc:	83 c4 10             	add    esp,0x10
c0015fbf:	eb c3                	jmp    c0015f84 <sysCallGetEnv(regs*)+0x15>

c0015fc1 <sysCallUSleep(regs*)>:
c0015fc1:	83 ec 14             	sub    esp,0x14
c0015fc4:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015fc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015fcd:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015fd4:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015fd7:	01 ca                	add    edx,ecx
c0015fd9:	52                   	push   edx
c0015fda:	50                   	push   eax
c0015fdb:	e8 8d 22 00 00       	call   c001826d <nanoSleep(unsigned long long)>
c0015fe0:	31 c0                	xor    eax,eax
c0015fe2:	31 d2                	xor    edx,edx
c0015fe4:	83 c4 1c             	add    esp,0x1c
c0015fe7:	c3                   	ret    

c0015fe8 <sysCallSpawn(regs*)>:
c0015fe8:	56                   	push   esi
c0015fe9:	53                   	push   ebx
c0015fea:	53                   	push   ebx
c0015feb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fef:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015ff2:	85 f6                	test   esi,esi
c0015ff4:	75 08                	jne    c0015ffe <sysCallSpawn(regs*)+0x16>
c0015ff6:	59                   	pop    ecx
c0015ff7:	31 c0                	xor    eax,eax
c0015ff9:	31 d2                	xor    edx,edx
c0015ffb:	5b                   	pop    ebx
c0015ffc:	5e                   	pop    esi
c0015ffd:	c3                   	ret    
c0015ffe:	83 ec 0c             	sub    esp,0xc
c0016001:	68 79 1b 02 c0       	push   0xc0021b79
c0016006:	e8 d8 8f ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001600b:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0016012:	e8 dd 8e ff ff       	call   c000eef4 <operator new(unsigned long)>
c0016017:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001601a:	89 c6                	mov    esi,eax
c001601c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016021:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016024:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016027:	56                   	push   esi
c0016028:	e8 2f 18 00 00       	call   c001785c <Process::Process(char const*, Process*, char**)>
c001602d:	83 c4 20             	add    esp,0x20
c0016030:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016037:	75 bd                	jne    c0015ff6 <sysCallSpawn(regs*)+0xe>
c0016039:	83 ec 0c             	sub    esp,0xc
c001603c:	68 84 1b 02 c0       	push   0xc0021b84
c0016041:	e8 9d 8f ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0016046:	89 34 24             	mov    DWORD PTR [esp],esi
c0016049:	e8 74 1d 00 00       	call   c0017dc2 <Process::createUserThread()>
c001604e:	8b 06                	mov    eax,DWORD PTR [esi]
c0016050:	83 c4 10             	add    esp,0x10
c0016053:	99                   	cdq    
c0016054:	59                   	pop    ecx
c0016055:	5b                   	pop    ebx
c0016056:	5e                   	pop    esi
c0016057:	c3                   	ret    

c0016058 <sysAppSettings(regs*)>:
c0016058:	53                   	push   ebx
c0016059:	83 ec 08             	sub    esp,0x8
c001605c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016060:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016063:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0016069:	25 e0 1f 00 00       	and    eax,0x1fe0
c001606e:	66 3d c0 09          	cmp    ax,0x9c0
c0016072:	75 2f                	jne    c00160a3 <sysAppSettings(regs*)+0x4b>
c0016074:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001607a:	83 e0 1f             	and    eax,0x1f
c001607d:	3c 01                	cmp    al,0x1
c001607f:	74 2e                	je     c00160af <sysAppSettings(regs*)+0x57>
c0016081:	3c 07                	cmp    al,0x7
c0016083:	0f 84 bd 00 00 00    	je     c0016146 <sysAppSettings(regs*)+0xee>
c0016089:	84 c0                	test   al,al
c001608b:	0f 84 dc 00 00 00    	je     c001616d <sysAppSettings(regs*)+0x115>
c0016091:	3c 08                	cmp    al,0x8
c0016093:	74 6d                	je     c0016102 <sysAppSettings(regs*)+0xaa>
c0016095:	0f b6 c0             	movzx  eax,al
c0016098:	83 c4 08             	add    esp,0x8
c001609b:	05 e8 03 00 00       	add    eax,0x3e8
c00160a0:	5b                   	pop    ebx
c00160a1:	99                   	cdq    
c00160a2:	c3                   	ret    
c00160a3:	b8 01 00 00 00       	mov    eax,0x1
c00160a8:	31 d2                	xor    edx,edx
c00160aa:	83 c4 08             	add    esp,0x8
c00160ad:	5b                   	pop    ebx
c00160ae:	c3                   	ret    
c00160af:	51                   	push   ecx
c00160b0:	68 00 01 00 00       	push   0x100
c00160b5:	6a 00                	push   0x0
c00160b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160bf:	83 c0 0c             	add    eax,0xc
c00160c2:	50                   	push   eax
c00160c3:	e8 40 a5 fe ff       	call   c0000608 <memset>
c00160c8:	83 c4 0c             	add    esp,0xc
c00160cb:	68 ff 00 00 00       	push   0xff
c00160d0:	53                   	push   ebx
c00160d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160d9:	83 c0 0c             	add    eax,0xc
c00160dc:	50                   	push   eax
c00160dd:	e8 f0 a4 fe ff       	call   c00005d2 <memcpy>
c00160e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160e7:	5b                   	pop    ebx
c00160e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00160eb:	5a                   	pop    edx
c00160ec:	8d 50 0c             	lea    edx,[eax+0xc]
c00160ef:	52                   	push   edx
c00160f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00160f6:	e8 2d 6c ff ff       	call   c000cd28 <VgaText::setTitle(char*)>
c00160fb:	83 c4 10             	add    esp,0x10
c00160fe:	31 c0                	xor    eax,eax
c0016100:	eb a6                	jmp    c00160a8 <sysAppSettings(regs*)+0x50>
c0016102:	83 ec 08             	sub    esp,0x8
c0016105:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001610b:	83 e0 0f             	and    eax,0xf
c001610e:	50                   	push   eax
c001610f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016114:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016117:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001611d:	e8 f6 6b ff ff       	call   c000cd18 <VgaText::setTitleColour(VgaColour)>
c0016122:	58                   	pop    eax
c0016123:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016129:	5a                   	pop    edx
c001612a:	c1 e8 04             	shr    eax,0x4
c001612d:	83 e0 0f             	and    eax,0xf
c0016130:	50                   	push   eax
c0016131:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016136:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016139:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001613f:	e8 c4 6b ff ff       	call   c000cd08 <VgaText::setTitleTextColour(VgaColour)>
c0016144:	eb b5                	jmp    c00160fb <sysAppSettings(regs*)+0xa3>
c0016146:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001614b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001614e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016154:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001615a:	c0 e8 06             	shr    al,0x6
c001615d:	83 e0 01             	and    eax,0x1
c0016160:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016166:	31 c0                	xor    eax,eax
c0016168:	e9 3b ff ff ff       	jmp    c00160a8 <sysAppSettings(regs*)+0x50>
c001616d:	b8 02 00 00 00       	mov    eax,0x2
c0016172:	e9 31 ff ff ff       	jmp    c00160a8 <sysAppSettings(regs*)+0x50>

c0016177 <sysSetFatAttrib(regs*)>:
c0016177:	57                   	push   edi
c0016178:	56                   	push   esi
c0016179:	53                   	push   ebx
c001617a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001617e:	83 ec 0c             	sub    esp,0xc
c0016181:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016184:	68 14 01 00 00       	push   0x114
c0016189:	e8 66 8d ff ff       	call   c000eef4 <operator new(unsigned long)>
c001618e:	83 c4 0c             	add    esp,0xc
c0016191:	89 c3                	mov    ebx,eax
c0016193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016198:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001619b:	57                   	push   edi
c001619c:	53                   	push   ebx
c001619d:	e8 70 93 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c00161a2:	83 c4 0c             	add    esp,0xc
c00161a5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00161a8:	0f b6 d4             	movzx  edx,ah
c00161ab:	0f b6 c0             	movzx  eax,al
c00161ae:	52                   	push   edx
c00161af:	50                   	push   eax
c00161b0:	53                   	push   ebx
c00161b1:	e8 d2 95 ff ff       	call   c000f788 <File::chfatattr(unsigned char, unsigned char)>
c00161b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161b9:	89 c6                	mov    esi,eax
c00161bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161c0:	83 c4 10             	add    esp,0x10
c00161c3:	31 c0                	xor    eax,eax
c00161c5:	5b                   	pop    ebx
c00161c6:	85 f6                	test   esi,esi
c00161c8:	5e                   	pop    esi
c00161c9:	0f 95 c0             	setne  al
c00161cc:	5f                   	pop    edi
c00161cd:	31 d2                	xor    edx,edx
c00161cf:	f7 d8                	neg    eax
c00161d1:	83 d2 00             	adc    edx,0x0
c00161d4:	f7 da                	neg    edx
c00161d6:	c3                   	ret    

c00161d7 <sysPanic(regs*)>:
c00161d7:	83 ec 18             	sub    esp,0x18
c00161da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161de:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00161e1:	e8 92 ea ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c00161e6:	c7 04 24 91 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b91
c00161ed:	e8 86 ea ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c00161f2:	b8 01 00 00 00       	mov    eax,0x1
c00161f7:	31 d2                	xor    edx,edx
c00161f9:	83 c4 1c             	add    esp,0x1c
c00161fc:	c3                   	ret    

c00161fd <sysPipe(regs*)>:
c00161fd:	57                   	push   edi
c00161fe:	56                   	push   esi
c00161ff:	53                   	push   ebx
c0016200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001620a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001620d:	6a 20                	push   0x20
c001620f:	e8 e0 8c ff ff       	call   c000eef4 <operator new(unsigned long)>
c0016214:	89 c3                	mov    ebx,eax
c0016216:	58                   	pop    eax
c0016217:	5a                   	pop    edx
c0016218:	68 00 50 00 00       	push   0x5000
c001621d:	53                   	push   ebx
c001621e:	e8 43 64 ff ff       	call   c000c666 <Pipe::Pipe(int)>
c0016223:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016226:	e8 ff 76 ff ff       	call   c000d92a <UnixFile::getFileDescriptor()>
c001622b:	89 07                	mov    DWORD PTR [edi],eax
c001622d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016230:	e8 f5 76 ff ff       	call   c000d92a <UnixFile::getFileDescriptor()>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	89 06                	mov    DWORD PTR [esi],eax
c001623a:	31 d2                	xor    edx,edx
c001623c:	5b                   	pop    ebx
c001623d:	31 c0                	xor    eax,eax
c001623f:	5e                   	pop    esi
c0016240:	5f                   	pop    edi
c0016241:	c3                   	ret    

c0016242 <sysGetUnixTime(regs*)>:
c0016242:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c0016247:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001624d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016251:	e9 84 9c ff ff       	jmp    c000feda <Clock::timeInSecondsLocal()>

c0016256 <string_ends_with(char const*, char const*)>:
c0016256:	57                   	push   edi
c0016257:	56                   	push   esi
c0016258:	53                   	push   ebx
c0016259:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001625d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016261:	83 ec 0c             	sub    esp,0xc
c0016264:	53                   	push   ebx
c0016265:	e8 bb a3 fe ff       	call   c0000625 <strlen>
c001626a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001626d:	89 c6                	mov    esi,eax
c001626f:	e8 b1 a3 fe ff       	call   c0000625 <strlen>
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	39 c6                	cmp    esi,eax
c0016279:	7d 06                	jge    c0016281 <string_ends_with(char const*, char const*)+0x2b>
c001627b:	5b                   	pop    ebx
c001627c:	31 c0                	xor    eax,eax
c001627e:	5e                   	pop    esi
c001627f:	5f                   	pop    edi
c0016280:	c3                   	ret    
c0016281:	83 ec 08             	sub    esp,0x8
c0016284:	29 c6                	sub    esi,eax
c0016286:	57                   	push   edi
c0016287:	01 f3                	add    ebx,esi
c0016289:	53                   	push   ebx
c001628a:	e8 69 a4 fe ff       	call   c00006f8 <strcmp>
c001628f:	83 c4 10             	add    esp,0x10
c0016292:	85 c0                	test   eax,eax
c0016294:	5b                   	pop    ebx
c0016295:	0f 94 c0             	sete   al
c0016298:	5e                   	pop    esi
c0016299:	0f b6 c0             	movzx  eax,al
c001629c:	5f                   	pop    edi
c001629d:	c3                   	ret    

c001629e <sysCallOpen(regs*)>:
c001629e:	56                   	push   esi
c001629f:	53                   	push   ebx
c00162a0:	81 ec 04 01 00 00    	sub    esp,0x104
c00162a6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00162ad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162b0:	85 d2                	test   edx,edx
c00162b2:	0f 84 c1 00 00 00    	je     c0016379 <sysCallOpen(regs*)+0xdb>
c00162b8:	50                   	push   eax
c00162b9:	68 a0 1b 02 c0       	push   0xc0021ba0
c00162be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162c1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00162c5:	56                   	push   esi
c00162c6:	e8 9d 90 ff ff       	call   c000f368 <standardiseFiles(char*, char const*, char const*)>
c00162cb:	89 34 24             	mov    DWORD PTR [esp],esi
c00162ce:	e8 52 a3 fe ff       	call   c0000625 <strlen>
c00162d3:	83 c4 10             	add    esp,0x10
c00162d6:	48                   	dec    eax
c00162d7:	74 1d                	je     c00162f6 <sysCallOpen(regs*)+0x58>
c00162d9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00162dc:	eb 0f                	jmp    c00162ed <sysCallOpen(regs*)+0x4f>
c00162de:	80 fa 3a             	cmp    dl,0x3a
c00162e1:	74 0f                	je     c00162f2 <sysCallOpen(regs*)+0x54>
c00162e3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00162e7:	48                   	dec    eax
c00162e8:	74 0c                	je     c00162f6 <sysCallOpen(regs*)+0x58>
c00162ea:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00162ed:	80 fa 2e             	cmp    dl,0x2e
c00162f0:	75 ec                	jne    c00162de <sysCallOpen(regs*)+0x40>
c00162f2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00162f6:	83 ec 08             	sub    esp,0x8
c00162f9:	68 a4 1b 02 c0       	push   0xc0021ba4
c00162fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016301:	e8 50 ff ff ff       	call   c0016256 <string_ends_with(char const*, char const*)>
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	85 c0                	test   eax,eax
c001630b:	75 2e                	jne    c001633b <sysCallOpen(regs*)+0x9d>
c001630d:	83 ec 08             	sub    esp,0x8
c0016310:	68 c5 1b 02 c0       	push   0xc0021bc5
c0016315:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016318:	e8 39 ff ff ff       	call   c0016256 <string_ends_with(char const*, char const*)>
c001631d:	83 c4 10             	add    esp,0x10
c0016320:	85 c0                	test   eax,eax
c0016322:	75 17                	jne    c001633b <sysCallOpen(regs*)+0x9d>
c0016324:	83 ec 08             	sub    esp,0x8
c0016327:	68 a5 1b 02 c0       	push   0xc0021ba5
c001632c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001632f:	e8 c4 a3 fe ff       	call   c00006f8 <strcmp>
c0016334:	83 c4 10             	add    esp,0x10
c0016337:	85 c0                	test   eax,eax
c0016339:	75 51                	jne    c001638c <sysCallOpen(regs*)+0xee>
c001633b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001633e:	83 ec 08             	sub    esp,0x8
c0016341:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016347:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001634e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016351:	ff 30                	push   DWORD PTR [eax]
c0016353:	68 a9 1b 02 c0       	push   0xc0021ba9
c0016358:	e8 86 8c ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001635d:	c7 04 24 b8 1b 02 c0 	mov    DWORD PTR [esp],0xc0021bb8
c0016364:	e8 7a 8c ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0016369:	83 c4 10             	add    esp,0x10
c001636c:	81 c4 04 01 00 00    	add    esp,0x104
c0016372:	31 c0                	xor    eax,eax
c0016374:	31 d2                	xor    edx,edx
c0016376:	5b                   	pop    ebx
c0016377:	5e                   	pop    esi
c0016378:	c3                   	ret    
c0016379:	81 c4 04 01 00 00    	add    esp,0x104
c001637f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016384:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016389:	5b                   	pop    ebx
c001638a:	5e                   	pop    esi
c001638b:	c3                   	ret    
c001638c:	83 ec 08             	sub    esp,0x8
c001638f:	68 a4 1b 02 c0       	push   0xc0021ba4
c0016394:	56                   	push   esi
c0016395:	e8 bc fe ff ff       	call   c0016256 <string_ends_with(char const*, char const*)>
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	85 c0                	test   eax,eax
c001639f:	75 9a                	jne    c001633b <sysCallOpen(regs*)+0x9d>
c00163a1:	83 ec 08             	sub    esp,0x8
c00163a4:	68 ca 1b 02 c0       	push   0xc0021bca
c00163a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163ac:	e8 a5 fe ff ff       	call   c0016256 <string_ends_with(char const*, char const*)>
c00163b1:	83 c4 10             	add    esp,0x10
c00163b4:	85 c0                	test   eax,eax
c00163b6:	0f 85 d1 00 00 00    	jne    c001648d <sysCallOpen(regs*)+0x1ef>
c00163bc:	83 ec 08             	sub    esp,0x8
c00163bf:	68 cf 1b 02 c0       	push   0xc0021bcf
c00163c4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163c7:	e8 8a fe ff ff       	call   c0016256 <string_ends_with(char const*, char const*)>
c00163cc:	83 c4 10             	add    esp,0x10
c00163cf:	85 c0                	test   eax,eax
c00163d1:	0f 85 b6 00 00 00    	jne    c001648d <sysCallOpen(regs*)+0x1ef>
c00163d7:	83 ec 08             	sub    esp,0x8
c00163da:	68 cb 1b 02 c0       	push   0xc0021bcb
c00163df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163e2:	e8 11 a3 fe ff       	call   c00006f8 <strcmp>
c00163e7:	83 c4 10             	add    esp,0x10
c00163ea:	85 c0                	test   eax,eax
c00163ec:	0f 84 9b 00 00 00    	je     c001648d <sysCallOpen(regs*)+0x1ef>
c00163f2:	83 ec 08             	sub    esp,0x8
c00163f5:	68 ca 1b 02 c0       	push   0xc0021bca
c00163fa:	56                   	push   esi
c00163fb:	e8 56 fe ff ff       	call   c0016256 <string_ends_with(char const*, char const*)>
c0016400:	83 c4 10             	add    esp,0x10
c0016403:	85 c0                	test   eax,eax
c0016405:	0f 85 82 00 00 00    	jne    c001648d <sysCallOpen(regs*)+0x1ef>
c001640b:	83 ec 0c             	sub    esp,0xc
c001640e:	68 14 01 00 00       	push   0x114
c0016413:	e8 dc 8a ff ff       	call   c000eef4 <operator new(unsigned long)>
c0016418:	83 c4 0c             	add    esp,0xc
c001641b:	89 c6                	mov    esi,eax
c001641d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016422:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016428:	56                   	push   esi
c0016429:	e8 e4 90 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c001642e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016431:	83 c4 10             	add    esp,0x10
c0016434:	0f b6 c2             	movzx  eax,dl
c0016437:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001643a:	89 d0                	mov    eax,edx
c001643c:	83 e0 01             	and    eax,0x1
c001643f:	f6 c2 02             	test   dl,0x2
c0016442:	74 03                	je     c0016447 <sysCallOpen(regs*)+0x1a9>
c0016444:	83 c8 02             	or     eax,0x2
c0016447:	f6 c2 04             	test   dl,0x4
c001644a:	74 03                	je     c001644f <sysCallOpen(regs*)+0x1b1>
c001644c:	83 c8 04             	or     eax,0x4
c001644f:	f6 c2 08             	test   dl,0x8
c0016452:	74 03                	je     c0016457 <sysCallOpen(regs*)+0x1b9>
c0016454:	83 c8 0a             	or     eax,0xa
c0016457:	83 e2 10             	and    edx,0x10
c001645a:	74 03                	je     c001645f <sysCallOpen(regs*)+0x1c1>
c001645c:	83 c8 12             	or     eax,0x12
c001645f:	83 ec 08             	sub    esp,0x8
c0016462:	50                   	push   eax
c0016463:	56                   	push   esi
c0016464:	e8 0d 91 ff ff       	call   c000f576 <File::open(FileOpenMode)>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	85 c0                	test   eax,eax
c001646e:	0f 85 05 ff ff ff    	jne    c0016379 <sysCallOpen(regs*)+0xdb>
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	56                   	push   esi
c0016478:	e8 ad 74 ff ff       	call   c000d92a <UnixFile::getFileDescriptor()>
c001647d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016480:	89 02                	mov    DWORD PTR [edx],eax
c0016482:	c1 f8 1f             	sar    eax,0x1f
c0016485:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016488:	e9 dc fe ff ff       	jmp    c0016369 <sysCallOpen(regs*)+0xcb>
c001648d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016490:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016496:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001649d:	e9 ca fe ff ff       	jmp    c001636c <sysCallOpen(regs*)+0xce>

c00164a2 <setupSystemCalls()>:
c00164a2:	c7 05 a0 41 02 c0 94 56 01 c0 	mov    DWORD PTR ds:0xc00241a0,0xc0015694
c00164ac:	c7 05 a4 41 02 c0 a7 54 01 c0 	mov    DWORD PTR ds:0xc00241a4,0xc00154a7
c00164b6:	c7 05 a8 41 02 c0 bc 55 01 c0 	mov    DWORD PTR ds:0xc00241a8,0xc00155bc
c00164c0:	c7 05 ac 41 02 c0 11 56 01 c0 	mov    DWORD PTR ds:0xc00241ac,0xc0015611
c00164ca:	c7 05 b0 41 02 c0 54 55 01 c0 	mov    DWORD PTR ds:0xc00241b0,0xc0015554
c00164d4:	c7 05 b4 41 02 c0 ae 56 01 c0 	mov    DWORD PTR ds:0xc00241b4,0xc00156ae
c00164de:	c7 05 b8 41 02 c0 3d 58 01 c0 	mov    DWORD PTR ds:0xc00241b8,0xc001583d
c00164e8:	c7 05 bc 41 02 c0 5c 58 01 c0 	mov    DWORD PTR ds:0xc00241bc,0xc001585c
c00164f2:	c7 05 c4 41 02 c0 bd 5b 01 c0 	mov    DWORD PTR ds:0xc00241c4,0xc0015bbd
c00164fc:	c7 05 c0 41 02 c0 9e 62 01 c0 	mov    DWORD PTR ds:0xc00241c0,0xc001629e
c0016506:	c7 05 c8 41 02 c0 45 5c 01 c0 	mov    DWORD PTR ds:0xc00241c8,0xc0015c45
c0016510:	c7 05 cc 41 02 c0 bb 58 01 c0 	mov    DWORD PTR ds:0xc00241cc,0xc00158bb
c001651a:	c7 05 d0 41 02 c0 ba 56 01 c0 	mov    DWORD PTR ds:0xc00241d0,0xc00156ba
c0016524:	c7 05 d4 41 02 c0 bf 56 01 c0 	mov    DWORD PTR ds:0xc00241d4,0xc00156bf
c001652e:	c7 05 d8 41 02 c0 b2 5c 01 c0 	mov    DWORD PTR ds:0xc00241d8,0xc0015cb2
c0016538:	c7 05 dc 41 02 c0 0b 5d 01 c0 	mov    DWORD PTR ds:0xc00241dc,0xc0015d0b
c0016542:	c7 05 e0 41 02 c0 a3 59 01 c0 	mov    DWORD PTR ds:0xc00241e0,0xc00159a3
c001654c:	c7 05 e4 41 02 c0 0c 5a 01 c0 	mov    DWORD PTR ds:0xc00241e4,0xc0015a0c
c0016556:	c7 05 e8 41 02 c0 3a 5b 01 c0 	mov    DWORD PTR ds:0xc00241e8,0xc0015b3a
c0016560:	c7 05 ec 41 02 c0 c4 56 01 c0 	mov    DWORD PTR ds:0xc00241ec,0xc00156c4
c001656a:	c7 05 f0 41 02 c0 71 5d 01 c0 	mov    DWORD PTR ds:0xc00241f0,0xc0015d71
c0016574:	c7 05 f4 41 02 c0 8b 5d 01 c0 	mov    DWORD PTR ds:0xc00241f4,0xc0015d8b
c001657e:	c7 05 f8 41 02 c0 a7 5d 01 c0 	mov    DWORD PTR ds:0xc00241f8,0xc0015da7
c0016588:	c7 05 fc 41 02 c0 fc 5d 01 c0 	mov    DWORD PTR ds:0xc00241fc,0xc0015dfc
c0016592:	c7 05 00 42 02 c0 4e 5e 01 c0 	mov    DWORD PTR ds:0xc0024200,0xc0015e4e
c001659c:	c7 05 04 42 02 c0 ce 56 01 c0 	mov    DWORD PTR ds:0xc0024204,0xc00156ce
c00165a6:	c7 05 08 42 02 c0 a0 5e 01 c0 	mov    DWORD PTR ds:0xc0024208,0xc0015ea0
c00165b0:	c7 05 0c 42 02 c0 78 58 01 c0 	mov    DWORD PTR ds:0xc002420c,0xc0015878
c00165ba:	c7 05 10 42 02 c0 ec 5e 01 c0 	mov    DWORD PTR ds:0xc0024210,0xc0015eec
c00165c4:	c7 05 14 42 02 c0 49 59 01 c0 	mov    DWORD PTR ds:0xc0024214,0xc0015949
c00165ce:	c7 05 18 42 02 c0 c1 5f 01 c0 	mov    DWORD PTR ds:0xc0024218,0xc0015fc1
c00165d8:	c7 05 1c 42 02 c0 89 5a 01 c0 	mov    DWORD PTR ds:0xc002421c,0xc0015a89
c00165e2:	c7 05 20 42 02 c0 e8 5f 01 c0 	mov    DWORD PTR ds:0xc0024220,0xc0015fe8
c00165ec:	c7 05 24 42 02 c0 6f 5f 01 c0 	mov    DWORD PTR ds:0xc0024224,0xc0015f6f
c00165f6:	c7 05 28 42 02 c0 58 60 01 c0 	mov    DWORD PTR ds:0xc0024228,0xc0016058
c0016600:	c7 05 2c 42 02 c0 de 56 01 c0 	mov    DWORD PTR ds:0xc002422c,0xc00156de
c001660a:	c7 05 30 42 02 c0 48 57 01 c0 	mov    DWORD PTR ds:0xc0024230,0xc0015748
c0016614:	c7 05 34 42 02 c0 8e 57 01 c0 	mov    DWORD PTR ds:0xc0024234,0xc001578e
c001661e:	c7 05 38 42 02 c0 77 61 01 c0 	mov    DWORD PTR ds:0xc0024238,0xc0016177
c0016628:	c7 05 3c 42 02 c0 d7 61 01 c0 	mov    DWORD PTR ds:0xc002423c,0xc00161d7
c0016632:	c7 05 40 42 02 c0 df 57 01 c0 	mov    DWORD PTR ds:0xc0024240,0xc00157df
c001663c:	c7 05 44 42 02 c0 fd 61 01 c0 	mov    DWORD PTR ds:0xc0024244,0xc00161fd
c0016646:	c7 05 48 42 02 c0 42 62 01 c0 	mov    DWORD PTR ds:0xc0024248,0xc0016242
c0016650:	c7 05 4c 42 02 c0 bf 54 01 c0 	mov    DWORD PTR ds:0xc002424c,0xc00154bf
c001665a:	c3                   	ret    

c001665b <systemCall(regs*, void*)>:
c001665b:	53                   	push   ebx
c001665c:	83 ec 08             	sub    esp,0x8
c001665f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016663:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016666:	83 f8 7f             	cmp    eax,0x7f
c0016669:	77 16                	ja     c0016681 <systemCall(regs*, void*)+0x26>
c001666b:	8b 14 85 a0 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe60]
c0016672:	85 d2                	test   edx,edx
c0016674:	74 0b                	je     c0016681 <systemCall(regs*, void*)+0x26>
c0016676:	83 ec 0c             	sub    esp,0xc
c0016679:	53                   	push   ebx
c001667a:	ff d2                	call   edx
c001667c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001667f:	eb 0d                	jmp    c001668e <systemCall(regs*, void*)+0x33>
c0016681:	52                   	push   edx
c0016682:	52                   	push   edx
c0016683:	50                   	push   eax
c0016684:	68 d4 1b 02 c0       	push   0xc0021bd4
c0016689:	e8 55 89 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001668e:	83 c4 10             	add    esp,0x10
c0016691:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016696:	31 d2                	xor    edx,edx
c0016698:	83 c4 08             	add    esp,0x8
c001669b:	5b                   	pop    ebx
c001669c:	c3                   	ret    

c001669d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001669d:	55                   	push   ebp
c001669e:	89 e5                	mov    ebp,esp
c00166a0:	57                   	push   edi
c00166a1:	56                   	push   esi
c00166a2:	53                   	push   ebx
c00166a3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00166a9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00166ac:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00166af:	85 c0                	test   eax,eax
c00166b1:	0f 95 c1             	setne  cl
c00166b4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00166b8:	0f 94 c2             	sete   dl
c00166bb:	84 d1                	test   cl,dl
c00166bd:	74 26                	je     c00166e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00166bf:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00166c6:	74 1d                	je     c00166e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c00166c8:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00166cb:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c00166d1:	89 d6                	mov    esi,edx
c00166d3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00166d9:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c00166df:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00166e2:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c00166e5:	83 ec 0c             	sub    esp,0xc
c00166e8:	05 ff 0f 00 00       	add    eax,0xfff
c00166ed:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00166f0:	6a 01                	push   0x1
c00166f2:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00166f8:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00166fe:	e8 60 76 ff ff       	call   c000dd63 <Virt::allocateKernelVirtualPages(int)>
c0016703:	83 c4 10             	add    esp,0x10
c0016706:	89 c6                	mov    esi,eax
c0016708:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001670e:	0f 86 21 01 00 00    	jbe    c0016835 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0016714:	c1 eb 0c             	shr    ebx,0xc
c0016717:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016721:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016727:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001672a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001672d:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016733:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016736:	29 d8                	sub    eax,ebx
c0016738:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001673e:	0f 83 f4 00 00 00    	jae    c0016838 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001674d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016750:	3d 00 10 00 00       	cmp    eax,0x1000
c0016755:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016757:	52                   	push   edx
c0016758:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001675e:	52                   	push   edx
c001675f:	76 05                	jbe    c0016766 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c0016761:	b8 00 10 00 00       	mov    eax,0x1000
c0016766:	31 d2                	xor    edx,edx
c0016768:	52                   	push   edx
c0016769:	50                   	push   eax
c001676a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001676d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016770:	83 c4 20             	add    esp,0x20
c0016773:	85 c0                	test   eax,eax
c0016775:	74 1f                	je     c0016796 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c0016777:	51                   	push   ecx
c0016778:	51                   	push   ecx
c0016779:	50                   	push   eax
c001677a:	68 e8 1b 02 c0       	push   0xc0021be8
c001677f:	e8 5f 88 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0016784:	89 34 24             	mov    DWORD PTR [esp],esi
c0016787:	e8 0d 79 ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c001678c:	83 c4 10             	add    esp,0x10
c001678f:	31 c0                	xor    eax,eax
c0016791:	e9 7c 01 00 00       	jmp    c0016912 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0016796:	e8 19 14 00 00       	call   c0017bb4 <lockScheduler()>
c001679b:	e8 10 5a ff ff       	call   c000c1b0 <Phys::allocatePage()>
c00167a0:	6a 07                	push   0x7
c00167a2:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00167a8:	56                   	push   esi
c00167a9:	50                   	push   eax
c00167aa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167b0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167b3:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00167b9:	e8 dc 7b ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c00167be:	83 c4 0c             	add    esp,0xc
c00167c1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00167c7:	6a 00                	push   0x0
c00167c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167cf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00167d2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00167d8:	e8 1b 7a ff ff       	call   c000e1f8 <VAS::mapOtherVASIn(bool, VAS*)>
c00167dd:	58                   	pop    eax
c00167de:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00167e4:	5a                   	pop    edx
c00167e5:	68 07 04 00 00       	push   0x407
c00167ea:	53                   	push   ebx
c00167eb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00167f1:	50                   	push   eax
c00167f2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00167f8:	6a 00                	push   0x0
c00167fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016802:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016808:	e8 8d 82 ff ff       	call   c000ea9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001680d:	83 c4 1c             	add    esp,0x1c
c0016810:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016816:	68 00 10 00 00       	push   0x1000
c001681b:	50                   	push   eax
c001681c:	56                   	push   esi
c001681d:	e8 b0 9d fe ff       	call   c00005d2 <memcpy>
c0016822:	e8 8f 13 00 00       	call   c0017bb6 <unlockScheduler()>
c0016827:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001682d:	83 c4 10             	add    esp,0x10
c0016830:	e9 f5 fe ff ff       	jmp    c001672a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c0016835:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016838:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016842:	0f 86 bc 00 00 00    	jbe    c0016904 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c0016848:	e8 67 13 00 00       	call   c0017bb4 <lockScheduler()>
c001684d:	51                   	push   ecx
c001684e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016854:	6a 00                	push   0x0
c0016856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001685b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001685e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016864:	e8 8f 79 ff ff       	call   c000e1f8 <VAS::mapOtherVASIn(bool, VAS*)>
c0016869:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	c1 e8 0c             	shr    eax,0xc
c0016875:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001687f:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0016885:	e8 26 59 ff ff       	call   c000c1b0 <Phys::allocatePage()>
c001688a:	6a 07                	push   0x7
c001688c:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0016892:	56                   	push   esi
c0016893:	50                   	push   eax
c0016894:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001689a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001689d:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00168a3:	e8 f2 7a ff ff       	call   c000e39a <VAS::mapPage(unsigned long, unsigned long, int)>
c00168a8:	58                   	pop    eax
c00168a9:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00168af:	5a                   	pop    edx
c00168b0:	68 07 04 00 00       	push   0x407
c00168b5:	53                   	push   ebx
c00168b6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00168bc:	50                   	push   eax
c00168bd:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00168c3:	6a 00                	push   0x0
c00168c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168cd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00168d3:	e8 c2 81 ff ff       	call   c000ea9a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00168d8:	83 c4 1c             	add    esp,0x1c
c00168db:	68 00 10 00 00       	push   0x1000
c00168e0:	6a 00                	push   0x0
c00168e2:	56                   	push   esi
c00168e3:	e8 20 9d fe ff       	call   c0000608 <memset>
c00168e8:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00168ee:	83 c4 10             	add    esp,0x10
c00168f1:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00168f7:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00168fd:	77 86                	ja     c0016885 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c00168ff:	e8 b2 12 00 00       	call   c0017bb6 <unlockScheduler()>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	56                   	push   esi
c0016908:	e8 8c 77 ff ff       	call   c000e099 <Virt::freeKernelVirtualPages(unsigned long)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	b0 01                	mov    al,0x1
c0016912:	8d 65 f4             	lea    esp,[ebp-0xc]
c0016915:	5b                   	pop    ebx
c0016916:	5e                   	pop    esi
c0016917:	5f                   	pop    edi
c0016918:	5d                   	pop    ebp
c0016919:	c3                   	ret    

c001691a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001691a:	55                   	push   ebp
c001691b:	57                   	push   edi
c001691c:	56                   	push   esi
c001691d:	53                   	push   ebx
c001691e:	83 ec 48             	sub    esp,0x48
c0016921:	68 14 01 00 00       	push   0x114
c0016926:	e8 c9 85 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001692b:	83 c4 0c             	add    esp,0xc
c001692e:	89 c6                	mov    esi,eax
c0016930:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016934:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016938:	50                   	push   eax
c0016939:	e8 d4 8b ff ff       	call   c000f512 <File::File(char const*, Process*)>
c001693e:	58                   	pop    eax
c001693f:	5a                   	pop    edx
c0016940:	6a 01                	push   0x1
c0016942:	56                   	push   esi
c0016943:	e8 2e 8c ff ff       	call   c000f576 <File::open(FileOpenMode)>
c0016948:	83 c4 10             	add    esp,0x10
c001694b:	85 c0                	test   eax,eax
c001694d:	0f 85 47 01 00 00    	jne    c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016953:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001695b:	83 ec 0c             	sub    esp,0xc
c001695e:	6a 34                	push   0x34
c0016960:	e8 a1 52 ff ff       	call   c000bc06 <malloc>
c0016965:	89 c3                	mov    ebx,eax
c0016967:	58                   	pop    eax
c0016968:	8b 06                	mov    eax,DWORD PTR [esi]
c001696a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001696e:	57                   	push   edi
c001696f:	53                   	push   ebx
c0016970:	6a 00                	push   0x0
c0016972:	6a 34                	push   0x34
c0016974:	56                   	push   esi
c0016975:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016978:	83 c4 20             	add    esp,0x20
c001697b:	85 c0                	test   eax,eax
c001697d:	0f 85 17 01 00 00    	jne    c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016983:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016989:	0f 85 0b 01 00 00    	jne    c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001698f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016992:	85 c0                	test   eax,eax
c0016994:	0f 84 00 01 00 00    	je     c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001699a:	31 d2                	xor    edx,edx
c001699c:	55                   	push   ebp
c001699d:	52                   	push   edx
c001699e:	50                   	push   eax
c001699f:	56                   	push   esi
c00169a0:	e8 8f 8c ff ff       	call   c000f634 <File::seek(unsigned long long)>
c00169a5:	83 c4 10             	add    esp,0x10
c00169a8:	85 c0                	test   eax,eax
c00169aa:	0f 85 ea 00 00 00    	jne    c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169b0:	83 ec 0c             	sub    esp,0xc
c00169b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169b6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00169ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00169be:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00169c2:	0f af c2             	imul   eax,edx
c00169c5:	50                   	push   eax
c00169c6:	e8 3b 52 ff ff       	call   c000bc06 <malloc>
c00169cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00169d2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00169d8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00169dc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00169e0:	0f af c2             	imul   eax,edx
c00169e3:	99                   	cdq    
c00169e4:	52                   	push   edx
c00169e5:	50                   	push   eax
c00169e6:	56                   	push   esi
c00169e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169ea:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00169ed:	83 c4 20             	add    esp,0x20
c00169f0:	85 c0                	test   eax,eax
c00169f2:	0f 84 a2 00 00 00    	je     c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00169f8:	31 d2                	xor    edx,edx
c00169fa:	51                   	push   ecx
c00169fb:	52                   	push   edx
c00169fc:	50                   	push   eax
c00169fd:	56                   	push   esi
c00169fe:	e8 31 8c ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016a03:	83 c4 10             	add    esp,0x10
c0016a06:	85 c0                	test   eax,eax
c0016a08:	0f 85 8c 00 00 00    	jne    c0016a9a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016a0e:	83 ec 0c             	sub    esp,0xc
c0016a11:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a15:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a19:	31 ed                	xor    ebp,ebp
c0016a1b:	0f af c2             	imul   eax,edx
c0016a1e:	50                   	push   eax
c0016a1f:	e8 e2 51 ff ff       	call   c000bc06 <malloc>
c0016a24:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a2b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a31:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016a35:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016a39:	0f af c2             	imul   eax,edx
c0016a3c:	99                   	cdq    
c0016a3d:	52                   	push   edx
c0016a3e:	50                   	push   eax
c0016a3f:	56                   	push   esi
c0016a40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a43:	83 c4 20             	add    esp,0x20
c0016a46:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016a4e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016a52:	0f 86 80 00 00 00    	jbe    c0016ad8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016a58:	0f b7 fd             	movzx  edi,bp
c0016a5b:	c1 e7 05             	shl    edi,0x5
c0016a5e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016a62:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016a65:	75 6b                	jne    c0016ad2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a67:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016a6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a6e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a75:	52                   	push   edx
c0016a76:	31 d2                	xor    edx,edx
c0016a78:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016a7b:	52                   	push   edx
c0016a7c:	50                   	push   eax
c0016a7d:	56                   	push   esi
c0016a7e:	e8 b1 8b ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	85 c0                	test   eax,eax
c0016a88:	74 17                	je     c0016aa1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	68 13 1c 02 c0       	push   0xc0021c13
c0016a92:	e8 4c 85 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0016a97:	83 c4 10             	add    esp,0x10
c0016a9a:	31 c0                	xor    eax,eax
c0016a9c:	e9 87 00 00 00       	jmp    c0016b28 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016aa1:	83 ec 0c             	sub    esp,0xc
c0016aa4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016aa7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016aaa:	50                   	push   eax
c0016aab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016aaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ab3:	56                   	push   esi
c0016ab4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016ab8:	e8 e0 fb ff ff       	call   c001669d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016abd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ac1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016ac5:	83 c4 20             	add    esp,0x20
c0016ac8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016acc:	73 04                	jae    c0016ad2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016ace:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ad2:	45                   	inc    ebp
c0016ad3:	e9 76 ff ff ff       	jmp    c0016a4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016ad8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016adc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ae4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016aea:	83 ec 0c             	sub    esp,0xc
c0016aed:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016af3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016af8:	05 00 10 00 00       	add    eax,0x1000
c0016afd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b04:	e8 0d 51 ff ff       	call   c000bc16 <free>
c0016b09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b0c:	e8 05 51 ff ff       	call   c000bc16 <free>
c0016b11:	58                   	pop    eax
c0016b12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b16:	e8 fb 50 ff ff       	call   c000bc16 <free>
c0016b1b:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b1e:	e8 b1 8a ff ff       	call   c000f5d4 <File::close()>
c0016b23:	83 c4 10             	add    esp,0x10
c0016b26:	b0 01                	mov    al,0x1
c0016b28:	83 c4 3c             	add    esp,0x3c
c0016b2b:	5b                   	pop    ebx
c0016b2c:	5e                   	pop    esi
c0016b2d:	5f                   	pop    edi
c0016b2e:	5d                   	pop    ebp
c0016b2f:	c3                   	ret    

c0016b30 <Thr::runtimeReferenceHelper()>:
c0016b30:	83 ec 18             	sub    esp,0x18
c0016b33:	68 1b 1c 02 c0       	push   0xc0021c1b
c0016b38:	e8 a6 84 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0016b3d:	fa                   	cli    
c0016b3e:	83 c4 10             	add    esp,0x10
c0016b41:	eb fe                	jmp    c0016b41 <Thr::runtimeReferenceHelper()+0x11>

c0016b43 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016b43:	57                   	push   edi
c0016b44:	56                   	push   esi
c0016b45:	53                   	push   ebx
c0016b46:	31 db                	xor    ebx,ebx
c0016b48:	39 1d 40 4b 02 c0    	cmp    DWORD PTR ds:0xc0024b40,ebx
c0016b4e:	7e 3c                	jle    c0016b8c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016b50:	8b 34 9d c0 4a 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdb540]
c0016b57:	31 ff                	xor    edi,edi
c0016b59:	39 3c 9d c0 49 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb640],edi
c0016b60:	7e 27                	jle    c0016b89 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016b62:	50                   	push   eax
c0016b63:	50                   	push   eax
c0016b64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b68:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b6a:	03 04 9d 40 4a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdb5c0]
c0016b71:	50                   	push   eax
c0016b72:	e8 81 9b fe ff       	call   c00006f8 <strcmp>
c0016b77:	83 c4 10             	add    esp,0x10
c0016b7a:	85 c0                	test   eax,eax
c0016b7c:	75 05                	jne    c0016b83 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016b7e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016b81:	eb 0b                	jmp    c0016b8e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016b83:	83 c6 10             	add    esi,0x10
c0016b86:	47                   	inc    edi
c0016b87:	eb d0                	jmp    c0016b59 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016b89:	43                   	inc    ebx
c0016b8a:	eb bc                	jmp    c0016b48 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016b8c:	31 c0                	xor    eax,eax
c0016b8e:	5b                   	pop    ebx
c0016b8f:	5e                   	pop    esi
c0016b90:	5f                   	pop    edi
c0016b91:	c3                   	ret    

c0016b92 <Thr::loadKernelSymbolTable(char const*)>:
c0016b92:	55                   	push   ebp
c0016b93:	57                   	push   edi
c0016b94:	56                   	push   esi
c0016b95:	53                   	push   ebx
c0016b96:	83 ec 68             	sub    esp,0x68
c0016b99:	8b 35 94 4b 02 c0    	mov    esi,DWORD PTR ds:0xc0024b94
c0016b9f:	68 14 01 00 00       	push   0x114
c0016ba4:	e8 4b 83 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0016ba9:	83 c4 0c             	add    esp,0xc
c0016bac:	89 c3                	mov    ebx,eax
c0016bae:	56                   	push   esi
c0016baf:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016bb3:	50                   	push   eax
c0016bb4:	e8 59 89 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0016bb9:	5e                   	pop    esi
c0016bba:	5f                   	pop    edi
c0016bbb:	6a 01                	push   0x1
c0016bbd:	53                   	push   ebx
c0016bbe:	e8 b3 89 ff ff       	call   c000f576 <File::open(FileOpenMode)>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	31 d2                	xor    edx,edx
c0016bc8:	85 c0                	test   eax,eax
c0016bca:	0f 85 79 02 00 00    	jne    c0016e49 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016bd0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016bd8:	83 ec 0c             	sub    esp,0xc
c0016bdb:	6a 34                	push   0x34
c0016bdd:	e8 24 50 ff ff       	call   c000bc06 <malloc>
c0016be2:	59                   	pop    ecx
c0016be3:	89 c7                	mov    edi,eax
c0016be5:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016be9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016beb:	56                   	push   esi
c0016bec:	57                   	push   edi
c0016bed:	6a 00                	push   0x0
c0016bef:	6a 34                	push   0x34
c0016bf1:	53                   	push   ebx
c0016bf2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bf5:	83 c4 20             	add    esp,0x20
c0016bf8:	85 c0                	test   eax,eax
c0016bfa:	74 17                	je     c0016c13 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	68 3d 1c 02 c0       	push   0xc0021c3d
c0016c04:	e8 6f e0 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	31 d2                	xor    edx,edx
c0016c0e:	e9 36 02 00 00       	jmp    c0016e49 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016c13:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016c19:	75 e1                	jne    c0016bfc <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c1b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016c1e:	85 c0                	test   eax,eax
c0016c20:	74 da                	je     c0016bfc <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c22:	52                   	push   edx
c0016c23:	31 d2                	xor    edx,edx
c0016c25:	52                   	push   edx
c0016c26:	50                   	push   eax
c0016c27:	53                   	push   ebx
c0016c28:	e8 07 8a ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	85 c0                	test   eax,eax
c0016c32:	75 c8                	jne    c0016bfc <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016c34:	83 ec 0c             	sub    esp,0xc
c0016c37:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c3b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c3f:	31 ed                	xor    ebp,ebp
c0016c41:	0f af c2             	imul   eax,edx
c0016c44:	50                   	push   eax
c0016c45:	e8 bc 4f ff ff       	call   c000bc06 <malloc>
c0016c4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0016c4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c51:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016c53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c57:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016c5b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016c5f:	0f af c2             	imul   eax,edx
c0016c62:	99                   	cdq    
c0016c63:	52                   	push   edx
c0016c64:	50                   	push   eax
c0016c65:	53                   	push   ebx
c0016c66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c69:	83 c4 20             	add    esp,0x20
c0016c6c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016c74:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c84:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c8c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016c90:	0f 86 aa 00 00 00    	jbe    c0016d40 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0016c96:	0f b7 f5             	movzx  esi,bp
c0016c99:	6b f6 28             	imul   esi,esi,0x28
c0016c9c:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0016ca0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ca3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ca7:	50                   	push   eax
c0016ca8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016cac:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016cb0:	8b 16                	mov    edx,DWORD PTR [esi]
c0016cb2:	6b c0 28             	imul   eax,eax,0x28
c0016cb5:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016cb9:	89 d0                	mov    eax,edx
c0016cbb:	31 d2                	xor    edx,edx
c0016cbd:	52                   	push   edx
c0016cbe:	50                   	push   eax
c0016cbf:	53                   	push   ebx
c0016cc0:	e8 6f 89 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016cc5:	83 c4 0c             	add    esp,0xc
c0016cc8:	6a 20                	push   0x20
c0016cca:	6a 00                	push   0x0
c0016ccc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016cd0:	52                   	push   edx
c0016cd1:	e8 32 99 fe ff       	call   c0000608 <memset>
c0016cd6:	58                   	pop    eax
c0016cd7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cd9:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016cdd:	51                   	push   ecx
c0016cde:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016ce2:	52                   	push   edx
c0016ce3:	6a 00                	push   0x0
c0016ce5:	6a 1f                	push   0x1f
c0016ce7:	53                   	push   ebx
c0016ce8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ceb:	83 c4 18             	add    esp,0x18
c0016cee:	68 54 1c 02 c0       	push   0xc0021c54
c0016cf3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016cf7:	52                   	push   edx
c0016cf8:	e8 fb 99 fe ff       	call   c00006f8 <strcmp>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	85 c0                	test   eax,eax
c0016d02:	75 0f                	jne    c0016d13 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0016d04:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d13:	50                   	push   eax
c0016d14:	50                   	push   eax
c0016d15:	68 5c 1c 02 c0       	push   0xc0021c5c
c0016d1a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016d1e:	50                   	push   eax
c0016d1f:	e8 d4 99 fe ff       	call   c00006f8 <strcmp>
c0016d24:	83 c4 10             	add    esp,0x10
c0016d27:	85 c0                	test   eax,eax
c0016d29:	75 0f                	jne    c0016d3a <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016d2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016d2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d3a:	45                   	inc    ebp
c0016d3b:	e9 4c ff ff ff       	jmp    c0016c8c <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016d40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d45:	75 10                	jne    c0016d57 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0016d47:	83 ec 0c             	sub    esp,0xc
c0016d4a:	68 64 1c 02 c0       	push   0xc0021c64
c0016d4f:	e8 24 df ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0016d54:	83 c4 10             	add    esp,0x10
c0016d57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016d5c:	75 10                	jne    c0016d6e <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	68 64 1c 02 c0       	push   0xc0021c64
c0016d66:	e8 0d df ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0016d6b:	83 c4 10             	add    esp,0x10
c0016d6e:	31 d2                	xor    edx,edx
c0016d70:	50                   	push   eax
c0016d71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d75:	52                   	push   edx
c0016d76:	50                   	push   eax
c0016d77:	53                   	push   ebx
c0016d78:	e8 b7 88 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016d7d:	5a                   	pop    edx
c0016d7e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d82:	e8 7f 4e ff ff       	call   c000bc06 <malloc>
c0016d87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016d8f:	89 c1                	mov    ecx,eax
c0016d91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d99:	5e                   	pop    esi
c0016d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d9c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016da0:	55                   	push   ebp
c0016da1:	51                   	push   ecx
c0016da2:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0016da6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016daa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dae:	53                   	push   ebx
c0016daf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016db2:	83 c4 14             	add    esp,0x14
c0016db5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016db9:	e8 48 4e ff ff       	call   c000bc06 <malloc>
c0016dbe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016dc1:	89 c6                	mov    esi,eax
c0016dc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dc5:	56                   	push   esi
c0016dc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dce:	53                   	push   ebx
c0016dcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016dd2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dd6:	8b 15 40 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b40
c0016ddc:	83 c4 1c             	add    esp,0x1c
c0016ddf:	c1 e8 04             	shr    eax,0x4
c0016de2:	89 04 95 c0 49 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb640],eax
c0016de9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ded:	31 d2                	xor    edx,edx
c0016def:	52                   	push   edx
c0016df0:	50                   	push   eax
c0016df1:	53                   	push   ebx
c0016df2:	e8 3d 88 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016df7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016dfa:	31 d2                	xor    edx,edx
c0016dfc:	56                   	push   esi
c0016dfd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e01:	52                   	push   edx
c0016e02:	50                   	push   eax
c0016e03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e05:	53                   	push   ebx
c0016e06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e09:	83 c4 14             	add    esp,0x14
c0016e0c:	53                   	push   ebx
c0016e0d:	e8 c2 87 ff ff       	call   c000f5d4 <File::close()>
c0016e12:	5d                   	pop    ebp
c0016e13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e17:	e8 fa 4d ff ff       	call   c000bc16 <free>
c0016e1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e1f:	e8 f2 4d ff ff       	call   c000bc16 <free>
c0016e24:	a1 40 4b 02 c0       	mov    eax,ds:0xc0024b40
c0016e29:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016e2d:	8d 50 01             	lea    edx,[eax+0x1]
c0016e30:	89 0c 85 c0 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb540],ecx
c0016e37:	89 15 40 4b 02 c0    	mov    DWORD PTR ds:0xc0024b40,edx
c0016e3d:	89 34 85 40 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb5c0],esi
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	b2 01                	mov    dl,0x1
c0016e49:	83 c4 5c             	add    esp,0x5c
c0016e4c:	88 d0                	mov    al,dl
c0016e4e:	5b                   	pop    ebx
c0016e4f:	5e                   	pop    esi
c0016e50:	5f                   	pop    edi
c0016e51:	5d                   	pop    ebp
c0016e52:	c3                   	ret    

c0016e53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016e53:	55                   	push   ebp
c0016e54:	57                   	push   edi
c0016e55:	56                   	push   esi
c0016e56:	53                   	push   ebx
c0016e57:	81 ec 68 03 00 00    	sub    esp,0x368
c0016e5d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016e64:	8b 1d 94 4b 02 c0    	mov    ebx,DWORD PTR ds:0xc0024b94
c0016e6a:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0016e6e:	68 14 01 00 00       	push   0x114
c0016e73:	e8 7c 80 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0016e78:	83 c4 0c             	add    esp,0xc
c0016e7b:	89 c5                	mov    ebp,eax
c0016e7d:	53                   	push   ebx
c0016e7e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016e85:	50                   	push   eax
c0016e86:	e8 87 86 ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0016e8b:	58                   	pop    eax
c0016e8c:	5a                   	pop    edx
c0016e8d:	6a 01                	push   0x1
c0016e8f:	55                   	push   ebp
c0016e90:	e8 e1 86 ff ff       	call   c000f576 <File::open(FileOpenMode)>
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	85 c0                	test   eax,eax
c0016e9a:	0f 85 f2 06 00 00    	jne    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ea0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016ea8:	83 ec 0c             	sub    esp,0xc
c0016eab:	6a 34                	push   0x34
c0016ead:	e8 54 4d ff ff       	call   c000bc06 <malloc>
c0016eb2:	89 c7                	mov    edi,eax
c0016eb4:	58                   	pop    eax
c0016eb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016eb8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016ebc:	53                   	push   ebx
c0016ebd:	57                   	push   edi
c0016ebe:	6a 00                	push   0x0
c0016ec0:	6a 34                	push   0x34
c0016ec2:	55                   	push   ebp
c0016ec3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ec6:	83 c4 20             	add    esp,0x20
c0016ec9:	85 c0                	test   eax,eax
c0016ecb:	0f 85 c1 06 00 00    	jne    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ed1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016ed7:	0f 85 b5 06 00 00    	jne    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016edd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016ee0:	85 c0                	test   eax,eax
c0016ee2:	0f 84 aa 06 00 00    	je     c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016ee8:	31 d2                	xor    edx,edx
c0016eea:	56                   	push   esi
c0016eeb:	52                   	push   edx
c0016eec:	50                   	push   eax
c0016eed:	55                   	push   ebp
c0016eee:	e8 41 87 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016ef3:	83 c4 10             	add    esp,0x10
c0016ef6:	85 c0                	test   eax,eax
c0016ef8:	0f 85 94 06 00 00    	jne    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016f04:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f08:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016f0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f10:	0f af c2             	imul   eax,edx
c0016f13:	50                   	push   eax
c0016f14:	e8 ed 4c ff ff       	call   c000bc06 <malloc>
c0016f19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f20:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f27:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016f2b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f2f:	0f af c2             	imul   eax,edx
c0016f32:	99                   	cdq    
c0016f33:	52                   	push   edx
c0016f34:	50                   	push   eax
c0016f35:	55                   	push   ebp
c0016f36:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f39:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016f3c:	83 c4 20             	add    esp,0x20
c0016f3f:	85 c0                	test   eax,eax
c0016f41:	0f 84 4b 06 00 00    	je     c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f47:	31 d2                	xor    edx,edx
c0016f49:	51                   	push   ecx
c0016f4a:	52                   	push   edx
c0016f4b:	50                   	push   eax
c0016f4c:	55                   	push   ebp
c0016f4d:	e8 e2 86 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016f52:	83 c4 10             	add    esp,0x10
c0016f55:	85 c0                	test   eax,eax
c0016f57:	0f 85 35 06 00 00    	jne    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016f5d:	83 ec 0c             	sub    esp,0xc
c0016f60:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f64:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f68:	31 f6                	xor    esi,esi
c0016f6a:	0f af c2             	imul   eax,edx
c0016f6d:	50                   	push   eax
c0016f6e:	e8 93 4c ff ff       	call   c000bc06 <malloc>
c0016f73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f7a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f81:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016f85:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016f89:	0f af c2             	imul   eax,edx
c0016f8c:	99                   	cdq    
c0016f8d:	52                   	push   edx
c0016f8e:	50                   	push   eax
c0016f8f:	55                   	push   ebp
c0016f90:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f93:	83 c4 20             	add    esp,0x20
c0016f96:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016f9a:	0f 86 8a 00 00 00    	jbe    c001702a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016fa0:	0f b7 de             	movzx  ebx,si
c0016fa3:	c1 e3 05             	shl    ebx,0x5
c0016fa6:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016faa:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016fad:	75 75                	jne    c0017024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016faf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016fb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fbd:	52                   	push   edx
c0016fbe:	31 d2                	xor    edx,edx
c0016fc0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016fc3:	52                   	push   edx
c0016fc4:	50                   	push   eax
c0016fc5:	55                   	push   ebp
c0016fc6:	e8 69 86 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	85 c0                	test   eax,eax
c0016fd0:	0f 85 bc 05 00 00    	jne    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0016fd6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016fdd:	31 d2                	xor    edx,edx
c0016fdf:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016fe3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016fe6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016fea:	83 ec 0c             	sub    esp,0xc
c0016fed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ff1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ff8:	50                   	push   eax
c0016ff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017001:	52                   	push   edx
c0017002:	50                   	push   eax
c0017003:	55                   	push   ebp
c0017004:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017007:	83 c4 1c             	add    esp,0x1c
c001700a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001700d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017010:	50                   	push   eax
c0017011:	6a 00                	push   0x0
c0017013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017017:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001701b:	50                   	push   eax
c001701c:	e8 e7 95 fe ff       	call   c0000608 <memset>
c0017021:	83 c4 10             	add    esp,0x10
c0017024:	46                   	inc    esi
c0017025:	e9 6c ff ff ff       	jmp    c0016f96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001702a:	31 db                	xor    ebx,ebx
c001702c:	50                   	push   eax
c001702d:	68 00 01 00 00       	push   0x100
c0017032:	6a 00                	push   0x0
c0017034:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017038:	50                   	push   eax
c0017039:	e8 ca 95 fe ff       	call   c0000608 <memset>
c001703e:	83 c4 0c             	add    esp,0xc
c0017041:	68 00 01 00 00       	push   0x100
c0017046:	6a 00                	push   0x0
c0017048:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001704f:	50                   	push   eax
c0017050:	e8 b3 95 fe ff       	call   c0000608 <memset>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017060:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017068:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017070:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017078:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017080:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017084:	0f 86 30 01 00 00    	jbe    c00171ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001708a:	0f b7 f3             	movzx  esi,bx
c001708d:	6b f6 28             	imul   esi,esi,0x28
c0017090:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017094:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017097:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001709b:	50                   	push   eax
c001709c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00170a0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00170a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00170a6:	6b d2 28             	imul   edx,edx,0x28
c00170a9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00170ad:	31 d2                	xor    edx,edx
c00170af:	52                   	push   edx
c00170b0:	50                   	push   eax
c00170b1:	55                   	push   ebp
c00170b2:	e8 7d 85 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c00170b7:	83 c4 0c             	add    esp,0xc
c00170ba:	6a 20                	push   0x20
c00170bc:	6a 00                	push   0x0
c00170be:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00170c5:	51                   	push   ecx
c00170c6:	e8 3d 95 fe ff       	call   c0000608 <memset>
c00170cb:	58                   	pop    eax
c00170cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170cf:	8d 54 24 58          	lea    edx,[esp+0x58]
c00170d3:	52                   	push   edx
c00170d4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00170db:	51                   	push   ecx
c00170dc:	6a 00                	push   0x0
c00170de:	6a 1f                	push   0x1f
c00170e0:	55                   	push   ebp
c00170e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170e4:	83 c4 1c             	add    esp,0x1c
c00170e7:	6a 09                	push   0x9
c00170e9:	68 7e 1c 02 c0       	push   0xc0021c7e
c00170ee:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00170f5:	51                   	push   ecx
c00170f6:	e8 74 94 fe ff       	call   c000056f <memcmp>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	85 c0                	test   eax,eax
c0017100:	75 21                	jne    c0017123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001710a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001710e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017112:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017115:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001711c:	89 c8                	mov    eax,ecx
c001711e:	40                   	inc    eax
c001711f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017123:	50                   	push   eax
c0017124:	6a 09                	push   0x9
c0017126:	68 88 1c 02 c0       	push   0xc0021c88
c001712b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017132:	50                   	push   eax
c0017133:	e8 37 94 fe ff       	call   c000056f <memcmp>
c0017138:	83 c4 10             	add    esp,0x10
c001713b:	85 c0                	test   eax,eax
c001713d:	75 21                	jne    c0017160 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001713f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017143:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017147:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001714b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001714f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017152:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017159:	89 c8                	mov    eax,ecx
c001715b:	40                   	inc    eax
c001715c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017160:	50                   	push   eax
c0017161:	50                   	push   eax
c0017162:	68 54 1c 02 c0       	push   0xc0021c54
c0017167:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001716e:	50                   	push   eax
c001716f:	e8 84 95 fe ff       	call   c00006f8 <strcmp>
c0017174:	83 c4 10             	add    esp,0x10
c0017177:	85 c0                	test   eax,eax
c0017179:	75 0f                	jne    c001718a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001717b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001717e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017182:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001718a:	50                   	push   eax
c001718b:	50                   	push   eax
c001718c:	68 5c 1c 02 c0       	push   0xc0021c5c
c0017191:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017198:	50                   	push   eax
c0017199:	e8 5a 95 fe ff       	call   c00006f8 <strcmp>
c001719e:	83 c4 10             	add    esp,0x10
c00171a1:	85 c0                	test   eax,eax
c00171a3:	75 0f                	jne    c00171b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00171a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00171a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00171b4:	43                   	inc    ebx
c00171b5:	e9 c6 fe ff ff       	jmp    c0017080 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00171ba:	31 d2                	xor    edx,edx
c00171bc:	50                   	push   eax
c00171bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171c1:	52                   	push   edx
c00171c2:	50                   	push   eax
c00171c3:	55                   	push   ebp
c00171c4:	e8 6b 84 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c00171c9:	5a                   	pop    edx
c00171ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ce:	e8 33 4a ff ff       	call   c000bc06 <malloc>
c00171d3:	31 d2                	xor    edx,edx
c00171d5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00171d9:	59                   	pop    ecx
c00171da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171dd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00171e1:	53                   	push   ebx
c00171e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171ea:	52                   	push   edx
c00171eb:	50                   	push   eax
c00171ec:	55                   	push   ebp
c00171ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171f0:	83 c4 14             	add    esp,0x14
c00171f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171f7:	e8 0a 4a ff ff       	call   c000bc06 <malloc>
c00171fc:	31 d2                	xor    edx,edx
c00171fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017202:	83 c4 0c             	add    esp,0xc
c0017205:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017209:	52                   	push   edx
c001720a:	50                   	push   eax
c001720b:	55                   	push   ebp
c001720c:	e8 23 84 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0017211:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017214:	31 d2                	xor    edx,edx
c0017216:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001721a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001721d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017221:	52                   	push   edx
c0017222:	50                   	push   eax
c0017223:	55                   	push   ebp
c0017224:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017227:	83 c4 20             	add    esp,0x20
c001722a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017232:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017236:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001723a:	0f 84 56 03 00 00    	je     c0017596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c0017240:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017247:	31 d2                	xor    edx,edx
c0017249:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001724d:	c1 e8 03             	shr    eax,0x3
c0017250:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017254:	50                   	push   eax
c0017255:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017259:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001725d:	52                   	push   edx
c001725e:	50                   	push   eax
c001725f:	55                   	push   ebp
c0017260:	e8 cf 83 ff ff       	call   c000f634 <File::seek(unsigned long long)>
c0017265:	58                   	pop    eax
c0017266:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001726a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017271:	e8 90 49 ff ff       	call   c000bc06 <malloc>
c0017276:	31 d2                	xor    edx,edx
c0017278:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001727c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001727f:	58                   	pop    eax
c0017280:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017284:	50                   	push   eax
c0017285:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017289:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001728d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017294:	52                   	push   edx
c0017295:	50                   	push   eax
c0017296:	55                   	push   ebp
c0017297:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001729a:	83 c4 20             	add    esp,0x20
c001729d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00172a5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00172a9:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00172ad:	0f 8d c7 02 00 00    	jge    c001757a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c00172b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172bb:	31 db                	xor    ebx,ebx
c00172bd:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00172c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172c8:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00172cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172d0:	c1 e8 08             	shr    eax,0x8
c00172d3:	89 c6                	mov    esi,eax
c00172d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172d9:	c1 e6 04             	shl    esi,0x4
c00172dc:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00172e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00172e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172e7:	85 c0                	test   eax,eax
c00172e9:	0f 85 17 01 00 00    	jne    c0017406 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00172ef:	83 ec 0c             	sub    esp,0xc
c00172f2:	b3 01                	mov    bl,0x1
c00172f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172f8:	03 06                	add    eax,DWORD PTR [esi]
c00172fa:	50                   	push   eax
c00172fb:	e8 43 f8 ff ff       	call   c0016b43 <Thr::getAddressOfKernelSymbol(char const*)>
c0017300:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001730c:	0f 85 f4 00 00 00    	jne    c0017406 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0017312:	50                   	push   eax
c0017313:	50                   	push   eax
c0017314:	68 92 1c 02 c0       	push   0xc0021c92
c0017319:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001731d:	03 06                	add    eax,DWORD PTR [esi]
c001731f:	50                   	push   eax
c0017320:	e8 d3 93 fe ff       	call   c00006f8 <strcmp>
c0017325:	83 c4 10             	add    esp,0x10
c0017328:	85 c0                	test   eax,eax
c001732a:	75 0a                	jne    c0017336 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001732c:	b8 5c e7 01 c0       	mov    eax,0xc001e75c
c0017331:	e9 ca 00 00 00       	jmp    c0017400 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0017336:	50                   	push   eax
c0017337:	50                   	push   eax
c0017338:	68 9c 1c 02 c0       	push   0xc0021c9c
c001733d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017341:	03 06                	add    eax,DWORD PTR [esi]
c0017343:	50                   	push   eax
c0017344:	e8 af 93 fe ff       	call   c00006f8 <strcmp>
c0017349:	83 c4 10             	add    esp,0x10
c001734c:	85 c0                	test   eax,eax
c001734e:	75 0a                	jne    c001735a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c0017350:	b8 90 e4 01 c0       	mov    eax,0xc001e490
c0017355:	e9 a6 00 00 00       	jmp    c0017400 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001735a:	53                   	push   ebx
c001735b:	53                   	push   ebx
c001735c:	68 a5 1c 02 c0       	push   0xc0021ca5
c0017361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017365:	03 06                	add    eax,DWORD PTR [esi]
c0017367:	50                   	push   eax
c0017368:	e8 8b 93 fe ff       	call   c00006f8 <strcmp>
c001736d:	83 c4 10             	add    esp,0x10
c0017370:	85 c0                	test   eax,eax
c0017372:	75 0a                	jne    c001737e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c0017374:	b8 5c e8 01 c0       	mov    eax,0xc001e85c
c0017379:	e9 82 00 00 00       	jmp    c0017400 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001737e:	51                   	push   ecx
c001737f:	51                   	push   ecx
c0017380:	68 af 1c 02 c0       	push   0xc0021caf
c0017385:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017389:	03 06                	add    eax,DWORD PTR [esi]
c001738b:	50                   	push   eax
c001738c:	e8 67 93 fe ff       	call   c00006f8 <strcmp>
c0017391:	83 c4 10             	add    esp,0x10
c0017394:	85 c0                	test   eax,eax
c0017396:	74 63                	je     c00173fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0017398:	50                   	push   eax
c0017399:	50                   	push   eax
c001739a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001739e:	03 06                	add    eax,DWORD PTR [esi]
c00173a0:	50                   	push   eax
c00173a1:	68 b8 1c 02 c0       	push   0xc0021cb8
c00173a6:	e8 38 7c ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00173ab:	58                   	pop    eax
c00173ac:	5a                   	pop    edx
c00173ad:	68 d2 1c 02 c0       	push   0xc0021cd2
c00173b2:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00173b9:	53                   	push   ebx
c00173ba:	e8 e8 92 fe ff       	call   c00006a7 <strcpy>
c00173bf:	59                   	pop    ecx
c00173c0:	58                   	pop    eax
c00173c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173c5:	03 06                	add    eax,DWORD PTR [esi]
c00173c7:	50                   	push   eax
c00173c8:	53                   	push   ebx
c00173c9:	e8 90 93 fe ff       	call   c000075e <strcat>
c00173ce:	58                   	pop    eax
c00173cf:	5a                   	pop    edx
c00173d0:	68 68 1d 02 c0       	push   0xc0021d68
c00173d5:	53                   	push   ebx
c00173d6:	e8 83 93 fe ff       	call   c000075e <strcat>
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00173e3:	0f 84 4b 01 00 00    	je     c0017534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00173e9:	83 ec 0c             	sub    esp,0xc
c00173ec:	53                   	push   ebx
c00173ed:	e8 86 d8 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c00173f2:	83 c4 10             	add    esp,0x10
c00173f5:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c00173f9:	eb 0b                	jmp    c0017406 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00173fb:	b8 dc e5 01 c0       	mov    eax,0xc001e5dc
c0017400:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017404:	b3 01                	mov    bl,0x1
c0017406:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001740b:	0f 85 80 00 00 00    	jne    c0017491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0017411:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017418:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001741c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017420:	01 ce                	add    esi,ecx
c0017422:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001742a:	8b 06                	mov    eax,DWORD PTR [esi]
c001742c:	0f 94 c2             	sete   dl
c001742f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017437:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001743c:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017440:	84 db                	test   bl,bl
c0017442:	74 31                	je     c0017475 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c0017444:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017448:	01 c3                	add    ebx,eax
c001744a:	84 d2                	test   dl,dl
c001744c:	75 0a                	jne    c0017458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001744e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017452:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017456:	76 32                	jbe    c001748a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017458:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001745d:	0f 84 d1 00 00 00    	je     c0017534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017463:	83 ec 0c             	sub    esp,0xc
c0017466:	68 e9 1c 02 c0       	push   0xc0021ce9
c001746b:	e8 08 d8 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0017470:	83 c4 10             	add    esp,0x10
c0017473:	eb 15                	jmp    c001748a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017475:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0017478:	84 d2                	test   dl,dl
c001747a:	75 0e                	jne    c001748a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001747c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017480:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017484:	77 04                	ja     c001748a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0017486:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001748a:	89 1e                	mov    DWORD PTR [esi],ebx
c001748c:	e9 e0 00 00 00       	jmp    c0017571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017491:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017496:	75 6e                	jne    c0017506 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c0017498:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001749f:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00174a3:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00174a7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00174af:	74 17                	je     c00174c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174b1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00174b9:	74 0d                	je     c00174c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00174bb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174bf:	83 e8 04             	sub    eax,0x4
c00174c2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00174c6:	76 17                	jbe    c00174df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c00174c8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00174cd:	74 65                	je     c0017534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c00174cf:	83 ec 0c             	sub    esp,0xc
c00174d2:	68 05 1d 02 c0       	push   0xc0021d05
c00174d7:	e8 9c d7 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c00174dc:	83 c4 10             	add    esp,0x10
c00174df:	8b 16                	mov    edx,DWORD PTR [esi]
c00174e1:	84 db                	test   bl,bl
c00174e3:	74 13                	je     c00174f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c00174e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174e9:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00174f0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00174f4:	01 d0                	add    eax,edx
c00174f6:	eb 06                	jmp    c00174fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00174f8:	89 d0                	mov    eax,edx
c00174fa:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00174fe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017502:	89 06                	mov    DWORD PTR [esi],eax
c0017504:	eb 6b                	jmp    c0017571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017506:	50                   	push   eax
c0017507:	50                   	push   eax
c0017508:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001750d:	50                   	push   eax
c001750e:	68 21 1d 02 c0       	push   0xc0021d21
c0017513:	e8 cb 7a ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0017518:	83 c4 10             	add    esp,0x10
c001751b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017520:	74 12                	je     c0017534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c0017522:	83 ec 0c             	sub    esp,0xc
c0017525:	68 2c 1d 02 c0       	push   0xc0021d2c
c001752a:	e8 49 d7 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	eb 3d                	jmp    c0017571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	55                   	push   ebp
c0017538:	e8 97 80 ff ff       	call   c000f5d4 <File::close()>
c001753d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017540:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017543:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017546:	59                   	pop    ecx
c0017547:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001754b:	e8 c6 46 ff ff       	call   c000bc16 <free>
c0017550:	5b                   	pop    ebx
c0017551:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017555:	e8 bc 46 ff ff       	call   c000bc16 <free>
c001755a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001755d:	e8 b4 46 ff ff       	call   c000bc16 <free>
c0017562:	5e                   	pop    esi
c0017563:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017567:	e8 aa 46 ff ff       	call   c000bc16 <free>
c001756c:	83 c4 10             	add    esp,0x10
c001756f:	eb 21                	jmp    c0017592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c0017571:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017575:	e9 2b fd ff ff       	jmp    c00172a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001757a:	83 ec 0c             	sub    esp,0xc
c001757d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017581:	e8 90 46 ff ff       	call   c000bc16 <free>
c0017586:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	e9 a0 fc ff ff       	jmp    c0017232 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017592:	31 c0                	xor    eax,eax
c0017594:	eb 33                	jmp    c00175c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c0017596:	83 ec 0c             	sub    esp,0xc
c0017599:	55                   	push   ebp
c001759a:	e8 35 80 ff ff       	call   c000f5d4 <File::close()>
c001759f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00175a8:	58                   	pop    eax
c00175a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175ad:	e8 64 46 ff ff       	call   c000bc16 <free>
c00175b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175b5:	e8 5c 46 ff ff       	call   c000bc16 <free>
c00175ba:	5a                   	pop    edx
c00175bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00175bf:	e8 52 46 ff ff       	call   c000bc16 <free>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	b0 01                	mov    al,0x1
c00175c9:	81 c4 5c 03 00 00    	add    esp,0x35c
c00175cf:	5b                   	pop    ebx
c00175d0:	5e                   	pop    esi
c00175d1:	5f                   	pop    edi
c00175d2:	5d                   	pop    ebp
c00175d3:	c3                   	ret    

c00175d4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00175d4:	56                   	push   esi
c00175d5:	31 d2                	xor    edx,edx
c00175d7:	53                   	push   ebx
c00175d8:	8b 1d a0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243a0
c00175de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00175e2:	39 d3                	cmp    ebx,edx
c00175e4:	7e 1b                	jle    c0017601 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00175e6:	8b 04 95 c0 45 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdba40]
c00175ed:	39 c8                	cmp    eax,ecx
c00175ef:	77 0d                	ja     c00175fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00175f1:	8b 34 95 c0 43 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdbc40]
c00175f8:	01 c6                	add    esi,eax
c00175fa:	39 ce                	cmp    esi,ecx
c00175fc:	77 05                	ja     c0017603 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00175fe:	42                   	inc    edx
c00175ff:	eb e1                	jmp    c00175e2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017601:	31 c0                	xor    eax,eax
c0017603:	5b                   	pop    ebx
c0017604:	5e                   	pop    esi
c0017605:	c3                   	ret    

c0017606 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017606:	53                   	push   ebx
c0017607:	31 c0                	xor    eax,eax
c0017609:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001760d:	8b 1d a0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243a0
c0017613:	39 c3                	cmp    ebx,eax
c0017615:	7e 22                	jle    c0017639 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017617:	8b 14 85 c0 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdba40]
c001761e:	39 ca                	cmp    edx,ecx
c0017620:	77 14                	ja     c0017636 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017622:	03 14 85 c0 43 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdbc40]
c0017629:	39 ca                	cmp    edx,ecx
c001762b:	76 09                	jbe    c0017636 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001762d:	8b 04 85 c0 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb840]
c0017634:	eb 05                	jmp    c001763b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017636:	40                   	inc    eax
c0017637:	eb da                	jmp    c0017613 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017639:	31 c0                	xor    eax,eax
c001763b:	5b                   	pop    ebx
c001763c:	c3                   	ret    

c001763d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001763d:	53                   	push   ebx
c001763e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017642:	53                   	push   ebx
c0017643:	e8 8c ff ff ff       	call   c00175d4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017648:	5a                   	pop    edx
c0017649:	31 d2                	xor    edx,edx
c001764b:	85 c0                	test   eax,eax
c001764d:	74 04                	je     c0017653 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001764f:	89 da                	mov    edx,ebx
c0017651:	29 c2                	sub    edx,eax
c0017653:	89 d0                	mov    eax,edx
c0017655:	5b                   	pop    ebx
c0017656:	c3                   	ret    

c0017657 <Thr::loadDLL(char const*, bool)>:
c0017657:	55                   	push   ebp
c0017658:	57                   	push   edi
c0017659:	56                   	push   esi
c001765a:	53                   	push   ebx
c001765b:	81 ec 24 01 00 00    	sub    esp,0x124
c0017661:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0017668:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001766f:	56                   	push   esi
c0017670:	68 44 1d 02 c0       	push   0xc0021d44
c0017675:	e8 69 79 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001767a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017681:	e8 6e 78 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0017686:	83 c4 0c             	add    esp,0xc
c0017689:	89 c3                	mov    ebx,eax
c001768b:	ff 35 94 4b 02 c0    	push   DWORD PTR ds:0xc0024b94
c0017691:	56                   	push   esi
c0017692:	50                   	push   eax
c0017693:	e8 7a 7e ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0017698:	83 c4 0c             	add    esp,0xc
c001769b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001769f:	50                   	push   eax
c00176a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00176a4:	50                   	push   eax
c00176a5:	53                   	push   ebx
c00176a6:	e8 77 81 ff ff       	call   c000f822 <File::stat(unsigned long long*, bool*)>
c00176ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00176ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00176bb:	75 0a                	jne    c00176c7 <Thr::loadDLL(char const*, bool)+0x70>
c00176bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176c1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00176c5:	75 3e                	jne    c0017705 <Thr::loadDLL(char const*, bool)+0xae>
c00176c7:	89 f8                	mov    eax,edi
c00176c9:	31 db                	xor    ebx,ebx
c00176cb:	84 c0                	test   al,al
c00176cd:	0f 84 ca 00 00 00    	je     c001779d <Thr::loadDLL(char const*, bool)+0x146>
c00176d3:	50                   	push   eax
c00176d4:	50                   	push   eax
c00176d5:	68 55 1d 02 c0       	push   0xc0021d55
c00176da:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00176de:	53                   	push   ebx
c00176df:	e8 c3 8f fe ff       	call   c00006a7 <strcpy>
c00176e4:	58                   	pop    eax
c00176e5:	5a                   	pop    edx
c00176e6:	56                   	push   esi
c00176e7:	53                   	push   ebx
c00176e8:	e8 71 90 fe ff       	call   c000075e <strcat>
c00176ed:	59                   	pop    ecx
c00176ee:	5d                   	pop    ebp
c00176ef:	68 68 1d 02 c0       	push   0xc0021d68
c00176f4:	53                   	push   ebx
c00176f5:	e8 64 90 fe ff       	call   c000075e <strcat>
c00176fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176fd:	e8 76 d5 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0017702:	83 c4 10             	add    esp,0x10
c0017705:	83 ec 0c             	sub    esp,0xc
c0017708:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001770c:	e8 f5 44 ff ff       	call   c000bc06 <malloc>
c0017711:	89 34 24             	mov    DWORD PTR [esp],esi
c0017714:	89 c3                	mov    ebx,eax
c0017716:	e8 0a 8f fe ff       	call   c0000625 <strlen>
c001771b:	8b 2d a0 43 02 c0    	mov    ebp,DWORD PTR ds:0xc00243a0
c0017721:	40                   	inc    eax
c0017722:	89 04 24             	mov    DWORD PTR [esp],eax
c0017725:	e8 dc 44 ff ff       	call   c000bc06 <malloc>
c001772a:	89 04 ad c0 47 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb840],eax
c0017731:	58                   	pop    eax
c0017732:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c0017737:	5a                   	pop    edx
c0017738:	56                   	push   esi
c0017739:	ff 34 85 c0 47 02 c0 	push   DWORD PTR [eax*4-0x3ffdb840]
c0017740:	e8 62 8f fe ff       	call   c00006a7 <strcpy>
c0017745:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c001774a:	8d 50 01             	lea    edx,[eax+0x1]
c001774d:	89 1c 85 c0 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdba40],ebx
c0017754:	89 15 a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,edx
c001775a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001775e:	59                   	pop    ecx
c001775f:	89 14 85 c0 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc40],edx
c0017766:	5d                   	pop    ebp
c0017767:	53                   	push   ebx
c0017768:	68 6a 1d 02 c0       	push   0xc0021d6a
c001776d:	e8 71 78 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0017772:	83 c4 0c             	add    esp,0xc
c0017775:	6a 01                	push   0x1
c0017777:	53                   	push   ebx
c0017778:	56                   	push   esi
c0017779:	e8 d5 f6 ff ff       	call   c0016e53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001777e:	83 c4 10             	add    esp,0x10
c0017781:	84 c0                	test   al,al
c0017783:	75 18                	jne    c001779d <Thr::loadDLL(char const*, bool)+0x146>
c0017785:	31 db                	xor    ebx,ebx
c0017787:	89 f8                	mov    eax,edi
c0017789:	84 c0                	test   al,al
c001778b:	74 10                	je     c001779d <Thr::loadDLL(char const*, bool)+0x146>
c001778d:	83 ec 0c             	sub    esp,0xc
c0017790:	68 89 1d 02 c0       	push   0xc0021d89
c0017795:	e8 de d4 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001779a:	83 c4 10             	add    esp,0x10
c001779d:	81 c4 1c 01 00 00    	add    esp,0x11c
c00177a3:	89 d8                	mov    eax,ebx
c00177a5:	5b                   	pop    ebx
c00177a6:	5e                   	pop    esi
c00177a7:	5f                   	pop    edi
c00177a8:	5d                   	pop    ebp
c00177a9:	c3                   	ret    

c00177aa <Thr::executeDLL(unsigned long, void*)>:
c00177aa:	56                   	push   esi
c00177ab:	53                   	push   ebx
c00177ac:	51                   	push   ecx
c00177ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177b5:	85 db                	test   ebx,ebx
c00177b7:	75 10                	jne    c00177c9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177b9:	83 ec 0c             	sub    esp,0xc
c00177bc:	68 a8 1d 02 c0       	push   0xc0021da8
c00177c1:	e8 b2 d4 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c00177c6:	83 c4 10             	add    esp,0x10
c00177c9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00177cd:	89 d8                	mov    eax,ebx
c00177cf:	5a                   	pop    edx
c00177d0:	5b                   	pop    ebx
c00177d1:	5e                   	pop    esi
c00177d2:	ff e0                	jmp    eax

c00177d4 <changeTSS>:
c00177d4:	83 ec 0c             	sub    esp,0xc
c00177d7:	e8 96 c7 ff ff       	call   c0013f72 <thisCPU()>
c00177dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00177e2:	83 ec 08             	sub    esp,0x8
c00177e5:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00177e8:	05 7c 11 00 00       	add    eax,0x117c
c00177ed:	c1 e1 15             	shl    ecx,0x15
c00177f0:	ba 00 00 e8 01       	mov    edx,0x1e80000
c00177f5:	29 ca                	sub    edx,ecx
c00177f7:	52                   	push   edx
c00177f8:	50                   	push   eax
c00177f9:	e8 44 5e ff ff       	call   c000d642 <TSS::setESP(unsigned long)>
c00177fe:	83 c4 1c             	add    esp,0x1c
c0017801:	c3                   	ret    

c0017802 <Process::addArgs(char**)>:
c0017802:	57                   	push   edi
c0017803:	56                   	push   esi
c0017804:	53                   	push   ebx
c0017805:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017809:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001780d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0017817:	85 ff                	test   edi,edi
c0017819:	74 3d                	je     c0017858 <Process::addArgs(char**)+0x56>
c001781b:	8b 07                	mov    eax,DWORD PTR [edi]
c001781d:	85 c0                	test   eax,eax
c001781f:	74 37                	je     c0017858 <Process::addArgs(char**)+0x56>
c0017821:	31 db                	xor    ebx,ebx
c0017823:	83 ec 0c             	sub    esp,0xc
c0017826:	50                   	push   eax
c0017827:	e8 f9 8d fe ff       	call   c0000625 <strlen>
c001782c:	40                   	inc    eax
c001782d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017830:	e8 d1 43 ff ff       	call   c000bc06 <malloc>
c0017835:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001783c:	5a                   	pop    edx
c001783d:	59                   	pop    ecx
c001783e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017841:	43                   	inc    ebx
c0017842:	50                   	push   eax
c0017843:	e8 5f 8e fe ff       	call   c00006a7 <strcpy>
c0017848:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001784e:	83 c4 10             	add    esp,0x10
c0017851:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017854:	85 c0                	test   eax,eax
c0017856:	75 cb                	jne    c0017823 <Process::addArgs(char**)+0x21>
c0017858:	5b                   	pop    ebx
c0017859:	5e                   	pop    esi
c001785a:	5f                   	pop    edi
c001785b:	c3                   	ret    

c001785c <Process::Process(char const*, Process*, char**)>:
c001785c:	56                   	push   esi
c001785d:	53                   	push   ebx
c001785e:	83 ec 14             	sub    esp,0x14
c0017861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017865:	05 0c 02 00 00       	add    eax,0x20c
c001786a:	bb 07 00 00 00       	mov    ebx,0x7
c001786f:	89 c6                	mov    esi,eax
c0017871:	85 db                	test   ebx,ebx
c0017873:	78 12                	js     c0017887 <Process::Process(char const*, Process*, char**)+0x2b>
c0017875:	83 ec 0c             	sub    esp,0xc
c0017878:	56                   	push   esi
c0017879:	e8 2a 78 00 00       	call   c001f0a8 <ThreadControlBlock::ThreadControlBlock()>
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	83 c6 63             	add    esi,0x63
c0017884:	4b                   	dec    ebx
c0017885:	eb ea                	jmp    c0017871 <Process::Process(char const*, Process*, char**)+0x15>
c0017887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001788b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017896:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001789f:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c00178a4:	8d 50 01             	lea    edx,[eax+0x1]
c00178a7:	89 15 64 31 02 c0    	mov    DWORD PTR ds:0xc0023164,edx
c00178ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178b1:	89 02                	mov    DWORD PTR [edx],eax
c00178b3:	83 ec 0c             	sub    esp,0xc
c00178b6:	6a 10                	push   0x10
c00178b8:	e8 37 76 ff ff       	call   c000eef4 <operator new(unsigned long)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	89 c3                	mov    ebx,eax
c00178c2:	83 ec 08             	sub    esp,0x8
c00178c5:	6a 00                	push   0x0
c00178c7:	53                   	push   ebx
c00178c8:	e8 bb 72 ff ff       	call   c000eb88 <VAS::VAS(bool)>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d4:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00178da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178de:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00178e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f0:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00178f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178fa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017900:	85 c0                	test   eax,eax
c0017902:	74 42                	je     c0017946 <Process::Process(char const*, Process*, char**)+0xea>
c0017904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017908:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001790e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017918:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001791e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017922:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017928:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001792e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017932:	05 0c 01 00 00       	add    eax,0x10c
c0017937:	83 ec 08             	sub    esp,0x8
c001793a:	52                   	push   edx
c001793b:	50                   	push   eax
c001793c:	e8 66 8d fe ff       	call   c00006a7 <strcpy>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	eb 5c                	jmp    c00179a2 <Process::Process(char const*, Process*, char**)+0x146>
c0017946:	83 ec 0c             	sub    esp,0xc
c0017949:	68 60 12 00 00       	push   0x1260
c001794e:	e8 a1 75 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	89 c3                	mov    ebx,eax
c0017958:	83 ec 08             	sub    esp,0x8
c001795b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001795f:	53                   	push   ebx
c0017960:	e8 db 59 ff ff       	call   c000d340 <VgaText::VgaText(char const*)>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017976:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	50                   	push   eax
c0017980:	e8 bc 4d ff ff       	call   c000c741 <addToTerminalCycle(VgaText*)>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798c:	05 0c 01 00 00       	add    eax,0x10c
c0017991:	83 ec 08             	sub    esp,0x8
c0017994:	68 d2 1d 02 c0       	push   0xc0021dd2
c0017999:	50                   	push   eax
c001799a:	e8 08 8d fe ff       	call   c00006a7 <strcpy>
c001799f:	83 c4 10             	add    esp,0x10
c00179a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a6:	83 c0 0c             	add    eax,0xc
c00179a9:	83 ec 08             	sub    esp,0x8
c00179ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179b0:	50                   	push   eax
c00179b1:	e8 f1 8c fe ff       	call   c00006a7 <strcpy>
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	83 ec 08             	sub    esp,0x8
c00179bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00179c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179c4:	e8 39 fe ff ff       	call   c0017802 <Process::addArgs(char**)>
c00179c9:	83 c4 10             	add    esp,0x10
c00179cc:	83 ec 08             	sub    esp,0x8
c00179cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179d7:	e8 3e ef ff ff       	call   c001691a <Thr::loadProgramIntoMemory(Process*, char const*)>
c00179dc:	83 c4 10             	add    esp,0x10
c00179df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00179e7:	83 f0 01             	xor    eax,0x1
c00179ea:	88 c2                	mov    dl,al
c00179ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f0:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c00179f6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00179fb:	83 ec 08             	sub    esp,0x8
c00179fe:	50                   	push   eax
c00179ff:	68 d0 1e 02 c0       	push   0xc0021ed0
c0017a04:	e8 da 75 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	90                   	nop
c0017a0d:	83 c4 14             	add    esp,0x14
c0017a10:	5b                   	pop    ebx
c0017a11:	5e                   	pop    esi
c0017a12:	c3                   	ret    
c0017a13:	90                   	nop

c0017a14 <Process::Process(bool, char const*, Process*, char**)>:
c0017a14:	56                   	push   esi
c0017a15:	53                   	push   ebx
c0017a16:	83 ec 14             	sub    esp,0x14
c0017a19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a25:	05 0c 02 00 00       	add    eax,0x20c
c0017a2a:	bb 07 00 00 00       	mov    ebx,0x7
c0017a2f:	89 c6                	mov    esi,eax
c0017a31:	85 db                	test   ebx,ebx
c0017a33:	78 12                	js     c0017a47 <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017a35:	83 ec 0c             	sub    esp,0xc
c0017a38:	56                   	push   esi
c0017a39:	e8 6a 76 00 00       	call   c001f0a8 <ThreadControlBlock::ThreadControlBlock()>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	83 c6 63             	add    esi,0x63
c0017a44:	4b                   	dec    ebx
c0017a45:	eb ea                	jmp    c0017a31 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c0017a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a4b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0017a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a56:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0017a5f:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c0017a64:	8d 50 01             	lea    edx,[eax+0x1]
c0017a67:	89 15 64 31 02 c0    	mov    DWORD PTR ds:0xc0023164,edx
c0017a6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a71:	89 02                	mov    DWORD PTR [edx],eax
c0017a73:	83 ec 0c             	sub    esp,0xc
c0017a76:	6a 10                	push   0x10
c0017a78:	e8 77 74 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	89 c3                	mov    ebx,eax
c0017a82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	50                   	push   eax
c0017a8b:	53                   	push   ebx
c0017a8c:	e8 f7 70 ff ff       	call   c000eb88 <VAS::VAS(bool)>
c0017a91:	83 c4 10             	add    esp,0x10
c0017a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a98:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0017a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa2:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017ab4:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0017aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017abe:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ac4:	85 c0                	test   eax,eax
c0017ac6:	74 42                	je     c0017b0a <Process::Process(bool, char const*, Process*, char**)+0xf6>
c0017ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017acc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017ad2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017ad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017adc:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017aec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af6:	05 0c 01 00 00       	add    eax,0x10c
c0017afb:	83 ec 08             	sub    esp,0x8
c0017afe:	52                   	push   edx
c0017aff:	50                   	push   eax
c0017b00:	e8 a2 8b fe ff       	call   c00006a7 <strcpy>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	eb 5c                	jmp    c0017b66 <Process::Process(bool, char const*, Process*, char**)+0x152>
c0017b0a:	83 ec 0c             	sub    esp,0xc
c0017b0d:	68 60 12 00 00       	push   0x1260
c0017b12:	e8 dd 73 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	89 c3                	mov    ebx,eax
c0017b1c:	83 ec 08             	sub    esp,0x8
c0017b1f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b23:	53                   	push   ebx
c0017b24:	e8 17 58 ff ff       	call   c000d340 <VgaText::VgaText(char const*)>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b30:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0017b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017b40:	83 ec 0c             	sub    esp,0xc
c0017b43:	50                   	push   eax
c0017b44:	e8 f8 4b ff ff       	call   c000c741 <addToTerminalCycle(VgaText*)>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b50:	05 0c 01 00 00       	add    eax,0x10c
c0017b55:	83 ec 08             	sub    esp,0x8
c0017b58:	68 d2 1d 02 c0       	push   0xc0021dd2
c0017b5d:	50                   	push   eax
c0017b5e:	e8 44 8b fe ff       	call   c00006a7 <strcpy>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6a:	83 c0 0c             	add    eax,0xc
c0017b6d:	83 ec 08             	sub    esp,0x8
c0017b70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017b74:	50                   	push   eax
c0017b75:	e8 2d 8b fe ff       	call   c00006a7 <strcpy>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	83 ec 08             	sub    esp,0x8
c0017b80:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017b84:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b88:	e8 75 fc ff ff       	call   c0017802 <Process::addArgs(char**)>
c0017b8d:	83 c4 10             	add    esp,0x10
c0017b90:	90                   	nop
c0017b91:	83 c4 14             	add    esp,0x14
c0017b94:	5b                   	pop    ebx
c0017b95:	5e                   	pop    esi
c0017b96:	c3                   	ret    

c0017b97 <disableIRQs()>:
c0017b97:	fa                   	cli    
c0017b98:	ff 05 6c 4b 02 c0    	inc    DWORD PTR ds:0xc0024b6c
c0017b9e:	c3                   	ret    

c0017b9f <getIRQNestingLevel()>:
c0017b9f:	a1 6c 4b 02 c0       	mov    eax,ds:0xc0024b6c
c0017ba4:	c3                   	ret    

c0017ba5 <enableIRQs()>:
c0017ba5:	a1 6c 4b 02 c0       	mov    eax,ds:0xc0024b6c
c0017baa:	48                   	dec    eax
c0017bab:	a3 6c 4b 02 c0       	mov    ds:0xc0024b6c,eax
c0017bb0:	75 01                	jne    c0017bb3 <enableIRQs()+0xe>
c0017bb2:	fb                   	sti    
c0017bb3:	c3                   	ret    

c0017bb4 <lockScheduler()>:
c0017bb4:	eb e1                	jmp    c0017b97 <disableIRQs()>

c0017bb6 <unlockScheduler()>:
c0017bb6:	eb ed                	jmp    c0017ba5 <enableIRQs()>

c0017bb8 <userModeEntryPoint(void*)>:
c0017bb8:	83 ec 0c             	sub    esp,0xc
c0017bbb:	e8 f6 ff ff ff       	call   c0017bb6 <unlockScheduler()>
c0017bc0:	fb                   	sti    
c0017bc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017bc9:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017bcf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bd3:	83 c4 0c             	add    esp,0xc
c0017bd6:	e9 0b 86 fe ff       	jmp    c00001e6 <goToUsermode>

c0017bdb <lockStuff()>:
c0017bdb:	e8 b7 ff ff ff       	call   c0017b97 <disableIRQs()>
c0017be0:	ff 05 68 4b 02 c0    	inc    DWORD PTR ds:0xc0024b68
c0017be6:	c3                   	ret    

c0017be7 <taskStartupFunction>:
c0017be7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017bec:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017bef:	c3                   	ret    

c0017bf0 <updateTimeUsed()>:
c0017bf0:	57                   	push   edi
c0017bf1:	56                   	push   esi
c0017bf2:	53                   	push   ebx
c0017bf3:	e8 7a c3 ff ff       	call   c0013f72 <thisCPU()>
c0017bf8:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017bff:	74 49                	je     c0017c4a <updateTimeUsed()+0x5a>
c0017c01:	0f 31                	rdtsc  
c0017c03:	89 c1                	mov    ecx,eax
c0017c05:	a3 a8 4b 02 c0       	mov    ds:0xc0024ba8,eax
c0017c0a:	2b 0d 98 4b 02 c0    	sub    ecx,DWORD PTR ds:0xc0024b98
c0017c10:	89 d3                	mov    ebx,edx
c0017c12:	89 0d a0 4b 02 c0    	mov    DWORD PTR ds:0xc0024ba0,ecx
c0017c18:	1b 1d 9c 4b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0024b9c
c0017c1e:	a3 98 4b 02 c0       	mov    ds:0xc0024b98,eax
c0017c23:	89 1d a4 4b 02 c0    	mov    DWORD PTR ds:0xc0024ba4,ebx
c0017c29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c2e:	89 15 ac 4b 02 c0    	mov    DWORD PTR ds:0xc0024bac,edx
c0017c34:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0017c37:	89 15 9c 4b 02 c0    	mov    DWORD PTR ds:0xc0024b9c,edx
c0017c3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017c40:	01 f1                	add    ecx,esi
c0017c42:	11 fb                	adc    ebx,edi
c0017c44:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0017c47:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0017c4a:	5b                   	pop    ebx
c0017c4b:	5e                   	pop    esi
c0017c4c:	5f                   	pop    edi
c0017c4d:	c3                   	ret    

c0017c4e <switchToThread(ThreadControlBlock*)>:
c0017c4e:	53                   	push   ebx
c0017c4f:	83 ec 08             	sub    esp,0x8
c0017c52:	a1 68 4b 02 c0       	mov    eax,ds:0xc0024b68
c0017c57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c5b:	85 c0                	test   eax,eax
c0017c5d:	75 30                	jne    c0017c8f <switchToThread(ThreadControlBlock*)+0x41>
c0017c5f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c0017c62:	3c ff                	cmp    al,0xff
c0017c64:	74 25                	je     c0017c8b <switchToThread(ThreadControlBlock*)+0x3d>
c0017c66:	0f b6 d0             	movzx  edx,al
c0017c69:	b8 84 03 00 00       	mov    eax,0x384
c0017c6e:	29 d0                	sub    eax,edx
c0017c70:	c1 e0 10             	shl    eax,0x10
c0017c73:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017c76:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017c79:	e8 72 ff ff ff       	call   c0017bf0 <updateTimeUsed()>
c0017c7e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017c82:	83 c4 08             	add    esp,0x8
c0017c85:	5b                   	pop    ebx
c0017c86:	e9 94 85 fe ff       	jmp    c000021f <switchToThreadASM>
c0017c8b:	31 c0                	xor    eax,eax
c0017c8d:	eb e7                	jmp    c0017c76 <switchToThread(ThreadControlBlock*)+0x28>
c0017c8f:	c7 05 64 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024b64,0x1
c0017c99:	83 c4 08             	add    esp,0x8
c0017c9c:	5b                   	pop    ebx
c0017c9d:	c3                   	ret    

c0017c9e <Semaphore::Semaphore(int)>:
c0017c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca6:	89 10                	mov    DWORD PTR [eax],edx
c0017ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cac:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017cc9:	90                   	nop
c0017cca:	c3                   	ret    
c0017ccb:	90                   	nop

c0017ccc <Mutex::Mutex()>:
c0017ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd0:	6a 01                	push   0x1
c0017cd2:	50                   	push   eax
c0017cd3:	e8 c6 ff ff ff       	call   c0017c9e <Semaphore::Semaphore(int)>
c0017cd8:	83 c4 08             	add    esp,0x8
c0017cdb:	90                   	nop
c0017cdc:	c3                   	ret    
c0017cdd:	90                   	nop

c0017cde <Process::createThread(void (*)(void*), void*, int)>:
c0017cde:	55                   	push   ebp
c0017cdf:	31 c9                	xor    ecx,ecx
c0017ce1:	57                   	push   edi
c0017ce2:	56                   	push   esi
c0017ce3:	53                   	push   ebx
c0017ce4:	83 ec 1c             	sub    esp,0x1c
c0017ce7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017ceb:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017cf2:	89 f2                	mov    edx,esi
c0017cf4:	0f b7 c2             	movzx  eax,dx
c0017cf7:	83 e2 01             	and    edx,0x1
c0017cfa:	74 14                	je     c0017d10 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017cfc:	d1 f8                	sar    eax,1
c0017cfe:	41                   	inc    ecx
c0017cff:	89 c2                	mov    edx,eax
c0017d01:	83 f9 10             	cmp    ecx,0x10
c0017d04:	75 ee                	jne    c0017cf4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0017d06:	83 c4 1c             	add    esp,0x1c
c0017d09:	31 c0                	xor    eax,eax
c0017d0b:	5b                   	pop    ebx
c0017d0c:	5e                   	pop    esi
c0017d0d:	5f                   	pop    edi
c0017d0e:	5d                   	pop    ebp
c0017d0f:	c3                   	ret    
c0017d10:	83 ec 08             	sub    esp,0x8
c0017d13:	b8 01 00 00 00       	mov    eax,0x1
c0017d18:	d3 e0                	shl    eax,cl
c0017d1a:	09 c6                	or     esi,eax
c0017d1c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017d22:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0017d29:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017d2c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d2f:	01 ce                	add    esi,ecx
c0017d31:	89 f0                	mov    eax,esi
c0017d33:	c1 e0 05             	shl    eax,0x5
c0017d36:	01 c6                	add    esi,eax
c0017d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0017d3b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d41:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0017d47:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d4b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0017d51:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0017d57:	89 ca                	mov    edx,ecx
c0017d59:	f7 da                	neg    edx
c0017d5b:	c1 e2 15             	shl    edx,0x15
c0017d5e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d64:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d6a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d6e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d78:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0017d7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017d82:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017d88:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017d92:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017d9c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0017da3:	50                   	push   eax
c0017da4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017da8:	68 88 4b 02 c0       	push   0xc0024b88
c0017dad:	e8 4e 71 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db9:	83 c4 1c             	add    esp,0x1c
c0017dbc:	5b                   	pop    ebx
c0017dbd:	5e                   	pop    esi
c0017dbe:	5f                   	pop    edi
c0017dbf:	5d                   	pop    ebp
c0017dc0:	c3                   	ret    
c0017dc1:	90                   	nop

c0017dc2 <Process::createUserThread()>:
c0017dc2:	83 ec 0c             	sub    esp,0xc
c0017dc5:	68 80 00 00 00       	push   0x80
c0017dca:	6a 00                	push   0x0
c0017dcc:	68 b8 7b 01 c0       	push   0xc0017bb8
c0017dd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dd5:	e8 04 ff ff ff       	call   c0017cde <Process::createThread(void (*)(void*), void*, int)>
c0017dda:	83 c4 1c             	add    esp,0x1c
c0017ddd:	c3                   	ret    

c0017dde <setupMultitasking(void (*)())>:
c0017dde:	56                   	push   esi
c0017ddf:	53                   	push   ebx
c0017de0:	53                   	push   ebx
c0017de1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017de5:	eb 10                	jmp    c0017df7 <setupMultitasking(void (*)())+0x19>
c0017de7:	83 ec 0c             	sub    esp,0xc
c0017dea:	68 88 4b 02 c0       	push   0xc0024b88
c0017def:	e8 5e 70 00 00       	call   c001ee52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	83 ec 0c             	sub    esp,0xc
c0017dfa:	68 88 4b 02 c0       	push   0xc0024b88
c0017dff:	e8 32 70 00 00       	call   c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e04:	83 c4 10             	add    esp,0x10
c0017e07:	84 c0                	test   al,al
c0017e09:	74 dc                	je     c0017de7 <setupMultitasking(void (*)())+0x9>
c0017e0b:	83 ec 0c             	sub    esp,0xc
c0017e0e:	68 3b 07 00 00       	push   0x73b
c0017e13:	e8 dc 70 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0017e18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e1f:	89 c3                	mov    ebx,eax
c0017e21:	6a 00                	push   0x0
c0017e23:	68 d6 1d 02 c0       	push   0xc0021dd6
c0017e28:	6a 01                	push   0x1
c0017e2a:	50                   	push   eax
c0017e2b:	e8 e4 fb ff ff       	call   c0017a14 <Process::Process(bool, char const*, Process*, char**)>
c0017e30:	83 c4 18             	add    esp,0x18
c0017e33:	89 1d 94 4b 02 c0    	mov    DWORD PTR ds:0xc0024b94,ebx
c0017e39:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e3f:	68 f8 1e 02 c0       	push   0xc0021ef8
c0017e44:	e8 9a 71 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0017e49:	58                   	pop    eax
c0017e4a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017e50:	e8 60 50 ff ff       	call   c000ceb5 <setActiveTerminal(VgaText*)>
c0017e55:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c0017e5d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017e63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e66:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017e70:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e76:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017e7c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e86:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0017e90:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017e9a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ea0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017ea6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017eb0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017eb6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ec0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ec6:	5a                   	pop    edx
c0017ec7:	59                   	pop    ecx
c0017ec8:	68 d2 1d 02 c0       	push   0xc0021dd2
c0017ecd:	50                   	push   eax
c0017ece:	e8 d4 87 fe ff       	call   c00006a7 <strcpy>
c0017ed3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0017eda:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ede:	83 c4 14             	add    esp,0x14
c0017ee1:	5b                   	pop    ebx
c0017ee2:	5e                   	pop    esi
c0017ee3:	e9 29 83 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c0017ee8 <schedule()>:
c0017ee8:	a1 68 4b 02 c0       	mov    eax,ds:0xc0024b68
c0017eed:	85 c0                	test   eax,eax
c0017eef:	74 0b                	je     c0017efc <schedule()+0x14>
c0017ef1:	c7 05 64 4b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024b64,0x1
c0017efb:	c3                   	ret    
c0017efc:	53                   	push   ebx
c0017efd:	83 ec 14             	sub    esp,0x14
c0017f00:	68 88 4b 02 c0       	push   0xc0024b88
c0017f05:	e8 2c 6f 00 00       	call   c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	84 c0                	test   al,al
c0017f0f:	75 38                	jne    c0017f49 <schedule()+0x61>
c0017f11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f16:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f19:	4a                   	dec    edx
c0017f1a:	74 32                	je     c0017f4e <schedule()+0x66>
c0017f1c:	83 ec 0c             	sub    esp,0xc
c0017f1f:	68 88 4b 02 c0       	push   0xc0024b88
c0017f24:	e8 05 6f 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f29:	c7 04 24 88 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b88
c0017f30:	89 c3                	mov    ebx,eax
c0017f32:	e8 1b 6f 00 00       	call   c001ee52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f37:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f41:	e8 08 fd ff ff       	call   c0017c4e <switchToThread(ThreadControlBlock*)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	83 c4 08             	add    esp,0x8
c0017f4c:	5b                   	pop    ebx
c0017f4d:	c3                   	ret    
c0017f4e:	83 ec 08             	sub    esp,0x8
c0017f51:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f58:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f5e:	68 88 4b 02 c0       	push   0xc0024b88
c0017f63:	e8 98 6f 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	eb af                	jmp    c0017f1c <schedule()+0x34>

c0017f6d <unlockStuff()>:
c0017f6d:	a1 68 4b 02 c0       	mov    eax,ds:0xc0024b68
c0017f72:	48                   	dec    eax
c0017f73:	a3 68 4b 02 c0       	mov    ds:0xc0024b68,eax
c0017f78:	75 09                	jne    c0017f83 <unlockStuff()+0x16>
c0017f7a:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c0017f7f:	85 c0                	test   eax,eax
c0017f81:	75 05                	jne    c0017f88 <unlockStuff()+0x1b>
c0017f83:	e9 1d fc ff ff       	jmp    c0017ba5 <enableIRQs()>
c0017f88:	83 ec 0c             	sub    esp,0xc
c0017f8b:	c7 05 64 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b64,0x0
c0017f95:	e8 4e ff ff ff       	call   c0017ee8 <schedule()>
c0017f9a:	83 c4 0c             	add    esp,0xc
c0017f9d:	e9 03 fc ff ff       	jmp    c0017ba5 <enableIRQs()>

c0017fa2 <forkProcess(regs*)>:
c0017fa2:	56                   	push   esi
c0017fa3:	53                   	push   ebx
c0017fa4:	50                   	push   eax
c0017fa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017faa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fad:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017fb5:	0f 85 3e 01 00 00    	jne    c00180f9 <forkProcess(regs*)+0x157>
c0017fbb:	e8 1b fc ff ff       	call   c0017bdb <lockStuff()>
c0017fc0:	83 ec 0c             	sub    esp,0xc
c0017fc3:	68 3b 07 00 00       	push   0x73b
c0017fc8:	e8 27 6f ff ff       	call   c000eef4 <operator new(unsigned long)>
c0017fcd:	89 c3                	mov    ebx,eax
c0017fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017fde:	50                   	push   eax
c0017fdf:	83 c0 0c             	add    eax,0xc
c0017fe2:	50                   	push   eax
c0017fe3:	6a 00                	push   0x0
c0017fe5:	53                   	push   ebx
c0017fe6:	e8 29 fa ff ff       	call   c0017a14 <Process::Process(bool, char const*, Process*, char**)>
c0017feb:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017ff1:	83 c4 20             	add    esp,0x20
c0017ff4:	85 f6                	test   esi,esi
c0017ff6:	74 16                	je     c001800e <forkProcess(regs*)+0x6c>
c0017ff8:	83 ec 0c             	sub    esp,0xc
c0017ffb:	56                   	push   esi
c0017ffc:	e8 2d 62 ff ff       	call   c000e22e <VAS::~VAS()>
c0018001:	59                   	pop    ecx
c0018002:	58                   	pop    eax
c0018003:	6a 10                	push   0x10
c0018005:	56                   	push   esi
c0018006:	e8 f8 6e ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001800b:	83 c4 10             	add    esp,0x10
c001800e:	83 ec 0c             	sub    esp,0xc
c0018011:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c001801a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001801f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018022:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018028:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c001802e:	6a 10                	push   0x10
c0018030:	e8 bf 6e ff ff       	call   c000eef4 <operator new(unsigned long)>
c0018035:	59                   	pop    ecx
c0018036:	89 c6                	mov    esi,eax
c0018038:	58                   	pop    eax
c0018039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001803e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018041:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0018047:	56                   	push   esi
c0018048:	e8 03 67 ff ff       	call   c000e750 <VAS::VAS(VAS*)>
c001804d:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0018053:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018056:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018058:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001805e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018063:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018066:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c001806c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018071:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018074:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c001807a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001807f:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c0018082:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001808c:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c0018092:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018098:	81 c3 0c 02 00 00    	add    ebx,0x20c
c001809e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180a3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00180a6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00180ad:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00180b0:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c00180b7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00180be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00180c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180ca:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00180cd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00180d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180d5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00180d8:	58                   	pop    eax
c00180d9:	5a                   	pop    edx
c00180da:	53                   	push   ebx
c00180db:	68 88 4b 02 c0       	push   0xc0024b88
c00180e0:	e8 1b 6e 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00180e5:	e8 83 fe ff ff       	call   c0017f6d <unlockStuff()>
c00180ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00180f5:	5a                   	pop    edx
c00180f6:	5b                   	pop    ebx
c00180f7:	5e                   	pop    esi
c00180f8:	c3                   	ret    
c00180f9:	83 ec 0c             	sub    esp,0xc
c00180fc:	68 2c 1f 02 c0       	push   0xc0021f2c
c0018101:	e8 dd 6e ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001810e:	eb e5                	jmp    c00180f5 <forkProcess(regs*)+0x153>

c0018110 <Semaphore::tryAcquire()>:
c0018110:	83 ec 0c             	sub    esp,0xc
c0018113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018117:	e8 bf fa ff ff       	call   c0017bdb <lockStuff()>
c001811c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001811f:	3b 10                	cmp    edx,DWORD PTR [eax]
c0018121:	7c 0b                	jl     c001812e <Semaphore::tryAcquire()+0x1e>
c0018123:	e8 45 fe ff ff       	call   c0017f6d <unlockStuff()>
c0018128:	31 c0                	xor    eax,eax
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	c3                   	ret    
c001812e:	42                   	inc    edx
c001812f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018132:	e8 36 fe ff ff       	call   c0017f6d <unlockStuff()>
c0018137:	b0 01                	mov    al,0x1
c0018139:	83 c4 0c             	add    esp,0xc
c001813c:	c3                   	ret    
c001813d:	90                   	nop

c001813e <Semaphore::assertLocked(char const*)>:
c001813e:	83 ec 0c             	sub    esp,0xc
c0018141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018145:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018149:	e8 8d fa ff ff       	call   c0017bdb <lockStuff()>
c001814e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018150:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0018153:	7c 08                	jl     c001815d <Semaphore::assertLocked(char const*)+0x1f>
c0018155:	83 c4 0c             	add    esp,0xc
c0018158:	e9 10 fe ff ff       	jmp    c0017f6d <unlockStuff()>
c001815d:	83 ec 0c             	sub    esp,0xc
c0018160:	52                   	push   edx
c0018161:	e8 12 cb ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	83 c4 0c             	add    esp,0xc
c001816c:	e9 fc fd ff ff       	jmp    c0017f6d <unlockStuff()>

c0018171 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018171:	83 ec 0c             	sub    esp,0xc
c0018174:	e8 26 fa ff ff       	call   c0017b9f <getIRQNestingLevel()>
c0018179:	83 ec 08             	sub    esp,0x8
c001817c:	50                   	push   eax
c001817d:	68 58 1f 02 c0       	push   0xc0021f58
c0018182:	e8 5c 6e ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018187:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001818b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018190:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018193:	e8 50 fd ff ff       	call   c0017ee8 <schedule()>
c0018198:	e8 19 fa ff ff       	call   c0017bb6 <unlockScheduler()>
c001819d:	e8 fd f9 ff ff       	call   c0017b9f <getIRQNestingLevel()>
c00181a2:	5a                   	pop    edx
c00181a3:	59                   	pop    ecx
c00181a4:	50                   	push   eax
c00181a5:	68 8c 1f 02 c0       	push   0xc0021f8c
c00181aa:	e8 34 6e ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00181af:	83 c4 1c             	add    esp,0x1c
c00181b2:	c3                   	ret    

c00181b3 <blockTask(TaskState)>:
c00181b3:	83 ec 0c             	sub    esp,0xc
c00181b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181ba:	e8 f5 f9 ff ff       	call   c0017bb4 <lockScheduler()>
c00181bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00181c7:	e8 1c fd ff ff       	call   c0017ee8 <schedule()>
c00181cc:	83 c4 0c             	add    esp,0xc
c00181cf:	e9 e2 f9 ff ff       	jmp    c0017bb6 <unlockScheduler()>

c00181d4 <waitTask(int, int*, int)>:
c00181d4:	83 ec 18             	sub    esp,0x18
c00181d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181e0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00181e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181ec:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00181ef:	6a 07                	push   0x7
c00181f1:	e8 bd ff ff ff       	call   c00181b3 <blockTask(TaskState)>
c00181f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181fb:	83 c4 10             	add    esp,0x10
c00181fe:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018201:	85 d2                	test   edx,edx
c0018203:	74 0a                	je     c001820f <waitTask(int, int*, int)+0x3b>
c0018205:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018208:	89 02                	mov    DWORD PTR [edx],eax
c001820a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001820f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018212:	83 c4 0c             	add    esp,0xc
c0018215:	c3                   	ret    

c0018216 <nanoSleepUntil(unsigned long long)>:
c0018216:	83 ec 0c             	sub    esp,0xc
c0018219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018221:	3b 05 b0 3d 02 c0    	cmp    eax,DWORD PTR ds:0xc0023db0
c0018227:	89 d1                	mov    ecx,edx
c0018229:	1b 0d b4 3d 02 c0    	sbb    ecx,DWORD PTR ds:0xc0023db4
c001822f:	73 04                	jae    c0018235 <nanoSleepUntil(unsigned long long)+0x1f>
c0018231:	83 c4 0c             	add    esp,0xc
c0018234:	c3                   	ret    
c0018235:	e8 a1 f9 ff ff       	call   c0017bdb <lockStuff()>
c001823a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018240:	83 ec 08             	sub    esp,0x8
c0018243:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0018246:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0018249:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001824f:	68 7c 4b 02 c0       	push   0xc0024b7c
c0018254:	e8 a7 6c 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018259:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018260:	e8 4e ff ff ff       	call   c00181b3 <blockTask(TaskState)>
c0018265:	83 c4 1c             	add    esp,0x1c
c0018268:	e9 00 fd ff ff       	jmp    c0017f6d <unlockStuff()>

c001826d <nanoSleep(unsigned long long)>:
c001826d:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c0018272:	8b 15 b4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023db4
c0018278:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001827c:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018280:	eb 94                	jmp    c0018216 <nanoSleepUntil(unsigned long long)>

c0018282 <sleep(unsigned long long)>:
c0018282:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001828a:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001828f:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018293:	01 ca                	add    edx,ecx
c0018295:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018299:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001829d:	eb ce                	jmp    c001826d <nanoSleep(unsigned long long)>
c001829f:	90                   	nop

c00182a0 <Semaphore::acquire()>:
c00182a0:	83 ec 0c             	sub    esp,0xc
c00182a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182a7:	e8 2f f9 ff ff       	call   c0017bdb <lockStuff()>
c00182ac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00182af:	3b 10                	cmp    edx,DWORD PTR [eax]
c00182b1:	7d 0c                	jge    c00182bf <Semaphore::acquire()+0x1f>
c00182b3:	42                   	inc    edx
c00182b4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00182b7:	83 c4 0c             	add    esp,0xc
c00182ba:	e9 ae fc ff ff       	jmp    c0017f6d <unlockStuff()>
c00182bf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182c5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c00182cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00182cf:	85 d2                	test   edx,edx
c00182d1:	74 2a                	je     c00182fd <Semaphore::acquire()+0x5d>
c00182d3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00182d6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00182dc:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c00182df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00182e5:	83 ec 0c             	sub    esp,0xc
c00182e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00182eb:	6a 05                	push   0x5
c00182ed:	e8 c1 fe ff ff       	call   c00181b3 <blockTask(TaskState)>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	83 c4 0c             	add    esp,0xc
c00182f8:	e9 70 fc ff ff       	jmp    c0017f6d <unlockStuff()>
c00182fd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018303:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0018306:	eb d7                	jmp    c00182df <Semaphore::acquire()+0x3f>

c0018308 <execveProcess(char const*, char* const*, char* const*)>:
c0018308:	56                   	push   esi
c0018309:	53                   	push   ebx
c001830a:	50                   	push   eax
c001830b:	e8 cb f8 ff ff       	call   c0017bdb <lockStuff()>
c0018310:	83 ec 0c             	sub    esp,0xc
c0018313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018318:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001831b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0018321:	68 3b 07 00 00       	push   0x73b
c0018326:	e8 c9 6b ff ff       	call   c000eef4 <operator new(unsigned long)>
c001832b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001832f:	89 c3                	mov    ebx,eax
c0018331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018336:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018339:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c001833f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018343:	53                   	push   ebx
c0018344:	e8 13 f5 ff ff       	call   c001785c <Process::Process(char const*, Process*, char**)>
c0018349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001834e:	83 c4 20             	add    esp,0x20
c0018351:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018354:	85 f6                	test   esi,esi
c0018356:	8b 00                	mov    eax,DWORD PTR [eax]
c0018358:	89 03                	mov    DWORD PTR [ebx],eax
c001835a:	74 06                	je     c0018362 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c001835c:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c0018362:	83 ec 0c             	sub    esp,0xc
c0018365:	53                   	push   ebx
c0018366:	e8 57 fa ff ff       	call   c0017dc2 <Process::createUserThread()>
c001836b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018372:	e8 3c fe ff ff       	call   c00181b3 <blockTask(TaskState)>
c0018377:	e8 f1 fb ff ff       	call   c0017f6d <unlockStuff()>
c001837c:	e8 33 f8 ff ff       	call   c0017bb4 <lockScheduler()>
c0018381:	e8 62 fb ff ff       	call   c0017ee8 <schedule()>
c0018386:	e8 2b f8 ff ff       	call   c0017bb6 <unlockScheduler()>
c001838b:	83 c4 14             	add    esp,0x14
c001838e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018393:	5b                   	pop    ebx
c0018394:	5e                   	pop    esi
c0018395:	c3                   	ret    

c0018396 <taskReturned>:
c0018396:	83 ec 18             	sub    esp,0x18
c0018399:	68 c0 1f 02 c0       	push   0xc0021fc0
c001839e:	e8 d5 c8 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c00183a3:	83 c4 10             	add    esp,0x10
c00183a6:	83 ec 0c             	sub    esp,0xc
c00183a9:	6a 02                	push   0x2
c00183ab:	e8 03 fe ff ff       	call   c00181b3 <blockTask(TaskState)>
c00183b0:	e8 ff f7 ff ff       	call   c0017bb4 <lockScheduler()>
c00183b5:	e8 2e fb ff ff       	call   c0017ee8 <schedule()>
c00183ba:	e8 f7 f7 ff ff       	call   c0017bb6 <unlockScheduler()>
c00183bf:	83 c4 10             	add    esp,0x10
c00183c2:	eb e2                	jmp    c00183a6 <taskReturned+0x10>

c00183c4 <unblockTask(ThreadControlBlock*)>:
c00183c4:	53                   	push   ebx
c00183c5:	83 ec 08             	sub    esp,0x8
c00183c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183cc:	e8 e3 f7 ff ff       	call   c0017bb4 <lockScheduler()>
c00183d1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183d4:	85 c0                	test   eax,eax
c00183d6:	74 5c                	je     c0018434 <unblockTask(ThreadControlBlock*)+0x70>
c00183d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183db:	48                   	dec    eax
c00183dc:	74 31                	je     c001840f <unblockTask(ThreadControlBlock*)+0x4b>
c00183de:	83 ec 0c             	sub    esp,0xc
c00183e1:	68 88 4b 02 c0       	push   0xc0024b88
c00183e6:	e8 43 6a 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	85 c0                	test   eax,eax
c00183f0:	75 17                	jne    c0018409 <unblockTask(ThreadControlBlock*)+0x45>
c00183f2:	eb 65                	jmp    c0018459 <unblockTask(ThreadControlBlock*)+0x95>
c00183f4:	83 ec 08             	sub    esp,0x8
c00183f7:	50                   	push   eax
c00183f8:	68 88 4b 02 c0       	push   0xc0024b88
c00183fd:	e8 3c 6d 00 00       	call   c001f13e <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018402:	83 c4 10             	add    esp,0x10
c0018405:	85 c0                	test   eax,eax
c0018407:	74 50                	je     c0018459 <unblockTask(ThreadControlBlock*)+0x95>
c0018409:	39 c3                	cmp    ebx,eax
c001840b:	75 e7                	jne    c00183f4 <unblockTask(ThreadControlBlock*)+0x30>
c001840d:	eb 1c                	jmp    c001842b <unblockTask(ThreadControlBlock*)+0x67>
c001840f:	83 ec 0c             	sub    esp,0xc
c0018412:	68 b0 20 02 c0       	push   0xc00220b0
c0018417:	e8 c7 6b ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001841c:	c7 04 24 3c 20 02 c0 	mov    DWORD PTR [esp],0xc002203c
c0018423:	e8 bb 6b ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018428:	83 c4 10             	add    esp,0x10
c001842b:	83 c4 08             	add    esp,0x8
c001842e:	5b                   	pop    ebx
c001842f:	e9 82 f7 ff ff       	jmp    c0017bb6 <unlockScheduler()>
c0018434:	83 ec 0c             	sub    esp,0xc
c0018437:	68 f4 1f 02 c0       	push   0xc0021ff4
c001843c:	e8 a2 6b ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018441:	c7 04 24 3c 20 02 c0 	mov    DWORD PTR [esp],0xc002203c
c0018448:	e8 96 6b ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001844d:	83 c4 10             	add    esp,0x10
c0018450:	83 c4 08             	add    esp,0x8
c0018453:	5b                   	pop    ebx
c0018454:	e9 5d f7 ff ff       	jmp    c0017bb6 <unlockScheduler()>
c0018459:	83 ec 08             	sub    esp,0x8
c001845c:	53                   	push   ebx
c001845d:	68 88 4b 02 c0       	push   0xc0024b88
c0018462:	e8 99 6a 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	83 c4 08             	add    esp,0x8
c001846d:	5b                   	pop    ebx
c001846e:	e9 43 f7 ff ff       	jmp    c0017bb6 <unlockScheduler()>

c0018473 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018473:	55                   	push   ebp
c0018474:	57                   	push   edi
c0018475:	56                   	push   esi
c0018476:	53                   	push   ebx
c0018477:	83 ec 1c             	sub    esp,0x1c
c001847a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001847e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018481:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0018487:	85 c9                	test   ecx,ecx
c0018489:	7e 20                	jle    c00184ab <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001848b:	31 f6                	xor    esi,esi
c001848d:	83 ec 0c             	sub    esp,0xc
c0018490:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0018497:	46                   	inc    esi
c0018498:	e8 79 37 ff ff       	call   c000bc16 <free>
c001849d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c00184a9:	7f e2                	jg     c001848d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c00184ab:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00184b5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184ba:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00184bd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00184c0:	d3 c0                	rol    eax,cl
c00184c2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c00184c9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00184cc:	89 f7                	mov    edi,esi
c00184ce:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00184d6:	0f 85 4f 01 00 00    	jne    c001862b <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c00184dc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00184e2:	85 c0                	test   eax,eax
c00184e4:	0f 84 aa 00 00 00    	je     c0018594 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00184ea:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00184ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00184f1:	31 c9                	xor    ecx,ecx
c00184f3:	eb 10                	jmp    c0018505 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c00184f5:	41                   	inc    ecx
c00184f6:	83 f9 10             	cmp    ecx,0x10
c00184f9:	0f 84 95 00 00 00    	je     c0018594 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c00184ff:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018505:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001850c:	d3 fa                	sar    edx,cl
c001850e:	83 e2 01             	and    edx,0x1
c0018511:	74 e2                	je     c00184f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018513:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0018516:	01 ca                	add    edx,ecx
c0018518:	89 d5                	mov    ebp,edx
c001851a:	c1 e5 05             	shl    ebp,0x5
c001851d:	01 ea                	add    edx,ebp
c001851f:	01 d0                	add    eax,edx
c0018521:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018527:	83 fd 07             	cmp    ebp,0x7
c001852a:	75 c9                	jne    c00184f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001852c:	05 40 02 00 00       	add    eax,0x240
c0018531:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018534:	83 fd ff             	cmp    ebp,0xffffffff
c0018537:	0f 8c 08 01 00 00    	jl     c0018645 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001853d:	0f 84 b9 01 00 00    	je     c00186fc <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c0018543:	85 ed                	test   ebp,ebp
c0018545:	0f 84 a0 01 00 00    	je     c00186eb <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001854b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001854d:	75 a6                	jne    c00184f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001854f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018555:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018559:	01 d0                	add    eax,edx
c001855b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001855f:	83 ec 0c             	sub    esp,0xc
c0018562:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018568:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001856b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018571:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018578:	50                   	push   eax
c0018579:	e8 46 fe ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c001857e:	83 c4 10             	add    esp,0x10
c0018581:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018588:	89 f7                	mov    edi,esi
c001858a:	41                   	inc    ecx
c001858b:	83 f9 10             	cmp    ecx,0x10
c001858e:	0f 85 6b ff ff ff    	jne    c00184ff <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018594:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001859a:	85 c0                	test   eax,eax
c001859c:	74 5d                	je     c00185fb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001859e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c00185a4:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c00185aa:	74 4f                	je     c00185fb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c00185ac:	83 ec 0c             	sub    esp,0xc
c00185af:	68 88 4b 02 c0       	push   0xc0024b88
c00185b4:	e8 75 68 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185b9:	c7 04 24 88 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b88
c00185c0:	89 c7                	mov    edi,eax
c00185c2:	e8 6f 68 00 00       	call   c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185c7:	83 c4 10             	add    esp,0x10
c00185ca:	84 c0                	test   al,al
c00185cc:	0f 84 e4 00 00 00    	je     c00186b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c00185d2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185d5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00185db:	85 d2                	test   edx,edx
c00185dd:	74 0f                	je     c00185ee <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c00185df:	83 ec 0c             	sub    esp,0xc
c00185e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00185e4:	52                   	push   edx
c00185e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00185f8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00185fb:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018601:	85 db                	test   ebx,ebx
c0018603:	74 16                	je     c001861b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	53                   	push   ebx
c0018609:	e8 20 5c ff ff       	call   c000e22e <VAS::~VAS()>
c001860e:	58                   	pop    eax
c001860f:	5a                   	pop    edx
c0018610:	6a 10                	push   0x10
c0018612:	53                   	push   ebx
c0018613:	e8 eb 68 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	83 ec 0c             	sub    esp,0xc
c001861e:	68 dd 1d 02 c0       	push   0xc0021ddd
c0018623:	e8 bb 69 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018628:	83 c4 10             	add    esp,0x10
c001862b:	83 ec 08             	sub    esp,0x8
c001862e:	68 3b 07 00 00       	push   0x73b
c0018633:	68 eb 1d 02 c0       	push   0xc0021deb
c0018638:	e8 a6 69 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001863d:	83 c4 2c             	add    esp,0x2c
c0018640:	5b                   	pop    ebx
c0018641:	5e                   	pop    esi
c0018642:	5f                   	pop    edi
c0018643:	5d                   	pop    ebp
c0018644:	c3                   	ret    
c0018645:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018649:	83 ec 0c             	sub    esp,0xc
c001864c:	68 f4 20 02 c0       	push   0xc00220f4
c0018651:	e8 22 c6 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0018656:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	89 f7                	mov    edi,esi
c001865e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018662:	e9 8e fe ff ff       	jmp    c00184f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0018667:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001866d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018673:	75 1c                	jne    c0018691 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c0018675:	83 ec 0c             	sub    esp,0xc
c0018678:	68 5c 21 02 c0       	push   0xc002215c
c001867d:	e8 61 69 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018682:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018689:	e8 25 fb ff ff       	call   c00181b3 <blockTask(TaskState)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	83 ec 08             	sub    esp,0x8
c0018694:	56                   	push   esi
c0018695:	68 88 4b 02 c0       	push   0xc0024b88
c001869a:	e8 61 68 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001869f:	c7 04 24 88 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b88
c00186a6:	e8 83 67 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	39 f8                	cmp    eax,edi
c00186b0:	0f 84 1c ff ff ff    	je     c00185d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c00186b6:	83 ec 0c             	sub    esp,0xc
c00186b9:	68 88 4b 02 c0       	push   0xc0024b88
c00186be:	e8 6b 67 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00186c3:	c7 04 24 88 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b88
c00186ca:	89 c6                	mov    esi,eax
c00186cc:	e8 81 67 00 00       	call   c001ee52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186d1:	83 c4 10             	add    esp,0x10
c00186d4:	39 f3                	cmp    ebx,esi
c00186d6:	74 b9                	je     c0018691 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186d8:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00186db:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00186de:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00186e4:	75 ab                	jne    c0018691 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c00186e6:	e9 7c ff ff ff       	jmp    c0018667 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00186eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186ef:	83 ec 0c             	sub    esp,0xc
c00186f2:	68 28 21 02 c0       	push   0xc0022128
c00186f7:	e9 55 ff ff ff       	jmp    c0018651 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c00186fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00186fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018702:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018705:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018708:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001870e:	01 d7                	add    edi,edx
c0018710:	89 f8                	mov    eax,edi
c0018712:	e9 44 fe ff ff       	jmp    c001855b <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018717 <cleanerTaskFunction(void*)>:
c0018717:	53                   	push   ebx
c0018718:	83 ec 08             	sub    esp,0x8
c001871b:	e8 96 f4 ff ff       	call   c0017bb6 <unlockScheduler()>
c0018720:	e8 8f f4 ff ff       	call   c0017bb4 <lockScheduler()>
c0018725:	80 3d 4c 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b4c,0x0
c001872c:	0f 85 8e 00 00 00    	jne    c00187c0 <cleanerTaskFunction(void*)+0xa9>
c0018732:	83 ec 0c             	sub    esp,0xc
c0018735:	6a 02                	push   0x2
c0018737:	e8 35 fa ff ff       	call   c0018171 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001873c:	83 c4 10             	add    esp,0x10
c001873f:	c6 05 4c 4b 02 c0 00 	mov    BYTE PTR ds:0xc0024b4c,0x0
c0018746:	e8 90 f4 ff ff       	call   c0017bdb <lockStuff()>
c001874b:	e8 64 f4 ff ff       	call   c0017bb4 <lockScheduler()>
c0018750:	83 ec 0c             	sub    esp,0xc
c0018753:	68 70 4b 02 c0       	push   0xc0024b70
c0018758:	e8 d9 66 00 00       	call   c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	84 c0                	test   al,al
c0018762:	75 40                	jne    c00187a4 <cleanerTaskFunction(void*)+0x8d>
c0018764:	83 ec 0c             	sub    esp,0xc
c0018767:	68 70 4b 02 c0       	push   0xc0024b70
c001876c:	e8 bd 66 00 00       	call   c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018771:	c7 04 24 70 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b70
c0018778:	89 c3                	mov    ebx,eax
c001877a:	e8 d3 66 00 00       	call   c001ee52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001877f:	c7 04 24 01 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e01
c0018786:	e8 58 68 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001878b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001878e:	e8 e0 fc ff ff       	call   c0018473 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018793:	c7 04 24 1a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e1a
c001879a:	e8 44 68 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	eb ac                	jmp    c0018750 <cleanerTaskFunction(void*)+0x39>
c00187a4:	e8 0d f4 ff ff       	call   c0017bb6 <unlockScheduler()>
c00187a9:	e8 bf f7 ff ff       	call   c0017f6d <unlockStuff()>
c00187ae:	e8 01 f4 ff ff       	call   c0017bb4 <lockScheduler()>
c00187b3:	80 3d 4c 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b4c,0x0
c00187ba:	0f 84 72 ff ff ff    	je     c0018732 <cleanerTaskFunction(void*)+0x1b>
c00187c0:	e8 f1 f3 ff ff       	call   c0017bb6 <unlockScheduler()>
c00187c5:	e9 75 ff ff ff       	jmp    c001873f <cleanerTaskFunction(void*)+0x28>

c00187ca <terminateTask(int)>:
c00187ca:	83 ec 14             	sub    esp,0x14
c00187cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00187d5:	83 c0 0c             	add    eax,0xc
c00187d8:	50                   	push   eax
c00187d9:	68 84 21 02 c0       	push   0xc0022184
c00187de:	e8 00 68 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00187e3:	e8 f3 f3 ff ff       	call   c0017bdb <lockStuff()>
c00187e8:	e8 c7 f3 ff ff       	call   c0017bb4 <lockScheduler()>
c00187ed:	c7 04 24 2d 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e2d
c00187f4:	e8 ea 67 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00187f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018802:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018805:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001880a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001880d:	5a                   	pop    edx
c001880e:	59                   	pop    ecx
c001880f:	50                   	push   eax
c0018810:	68 70 4b 02 c0       	push   0xc0024b70
c0018815:	e8 e6 66 00 00       	call   c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001881a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001881f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018826:	c7 04 24 47 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e47
c001882d:	e8 b1 67 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	a1 48 4b 02 c0       	mov    eax,ds:0xc0024b48
c001883a:	85 c0                	test   eax,eax
c001883c:	74 5a                	je     c0018898 <terminateTask(int)+0xce>
c001883e:	83 ec 0c             	sub    esp,0xc
c0018841:	68 61 1e 02 c0       	push   0xc0021e61
c0018846:	e8 98 67 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001884b:	58                   	pop    eax
c001884c:	c6 05 4c 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b4c,0x1
c0018853:	ff 35 48 4b 02 c0    	push   DWORD PTR ds:0xc0024b48
c0018859:	e8 66 fb ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c001885e:	c7 04 24 7b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e7b
c0018865:	e8 79 67 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001886a:	83 c4 10             	add    esp,0x10
c001886d:	e8 44 f3 ff ff       	call   c0017bb6 <unlockScheduler()>
c0018872:	e8 f6 f6 ff ff       	call   c0017f6d <unlockStuff()>
c0018877:	83 ec 0c             	sub    esp,0xc
c001887a:	68 b3 1e 02 c0       	push   0xc0021eb3
c001887f:	e8 5f 67 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0018884:	83 c4 10             	add    esp,0x10
c0018887:	e8 28 f3 ff ff       	call   c0017bb4 <lockScheduler()>
c001888c:	e8 57 f6 ff ff       	call   c0017ee8 <schedule()>
c0018891:	e8 20 f3 ff ff       	call   c0017bb6 <unlockScheduler()>
c0018896:	eb ef                	jmp    c0018887 <terminateTask(int)+0xbd>
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	68 95 1e 02 c0       	push   0xc0021e95
c00188a0:	e8 3e 67 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c00188a5:	83 c4 10             	add    esp,0x10
c00188a8:	eb c3                	jmp    c001886d <terminateTask(int)+0xa3>

c00188aa <Thr::terminateFromIRQ(int)>:
c00188aa:	83 ec 18             	sub    esp,0x18
c00188ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188b1:	e8 14 ff ff ff       	call   c00187ca <terminateTask(int)>

c00188b6 <Semaphore::release()>:
c00188b6:	83 ec 0c             	sub    esp,0xc
c00188b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188bd:	e8 19 f3 ff ff       	call   c0017bdb <lockStuff()>
c00188c2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00188c5:	85 d2                	test   edx,edx
c00188c7:	74 1a                	je     c00188e3 <Semaphore::release()+0x2d>
c00188c9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00188cc:	83 ec 0c             	sub    esp,0xc
c00188cf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00188d2:	52                   	push   edx
c00188d3:	e8 ec fa ff ff       	call   c00183c4 <unblockTask(ThreadControlBlock*)>
c00188d8:	83 c4 10             	add    esp,0x10
c00188db:	83 c4 0c             	add    esp,0xc
c00188de:	e9 8a f6 ff ff       	jmp    c0017f6d <unlockStuff()>
c00188e3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c00188e6:	83 c4 0c             	add    esp,0xc
c00188e9:	e9 7f f6 ff ff       	jmp    c0017f6d <unlockStuff()>

c00188ee <__static_initialization_and_destruction_0(int, int)>:
c00188ee:	83 ec 0c             	sub    esp,0xc
c00188f1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00188f6:	0f 85 88 00 00 00    	jne    c0018984 <__static_initialization_and_destruction_0(int, int)+0x96>
c00188fc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018904:	75 7e                	jne    c0018984 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018906:	83 ec 0c             	sub    esp,0xc
c0018909:	68 88 4b 02 c0       	push   0xc0024b88
c001890e:	e8 d3 67 00 00       	call   c001f0e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018913:	83 c4 10             	add    esp,0x10
c0018916:	83 ec 04             	sub    esp,0x4
c0018919:	68 68 2b 02 c0       	push   0xc0022b68
c001891e:	68 88 4b 02 c0       	push   0xc0024b88
c0018923:	68 a6 f0 01 c0       	push   0xc001f0a6
c0018928:	e8 52 65 ff ff       	call   c000ee7f <__cxa_atexit>
c001892d:	83 c4 10             	add    esp,0x10
c0018930:	83 ec 0c             	sub    esp,0xc
c0018933:	68 7c 4b 02 c0       	push   0xc0024b7c
c0018938:	e8 a9 67 00 00       	call   c001f0e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001893d:	83 c4 10             	add    esp,0x10
c0018940:	83 ec 04             	sub    esp,0x4
c0018943:	68 68 2b 02 c0       	push   0xc0022b68
c0018948:	68 7c 4b 02 c0       	push   0xc0024b7c
c001894d:	68 a6 f0 01 c0       	push   0xc001f0a6
c0018952:	e8 28 65 ff ff       	call   c000ee7f <__cxa_atexit>
c0018957:	83 c4 10             	add    esp,0x10
c001895a:	83 ec 0c             	sub    esp,0xc
c001895d:	68 70 4b 02 c0       	push   0xc0024b70
c0018962:	e8 7f 67 00 00       	call   c001f0e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018967:	83 c4 10             	add    esp,0x10
c001896a:	83 ec 04             	sub    esp,0x4
c001896d:	68 68 2b 02 c0       	push   0xc0022b68
c0018972:	68 70 4b 02 c0       	push   0xc0024b70
c0018977:	68 a6 f0 01 c0       	push   0xc001f0a6
c001897c:	e8 fe 64 ff ff       	call   c000ee7f <__cxa_atexit>
c0018981:	83 c4 10             	add    esp,0x10
c0018984:	90                   	nop
c0018985:	83 c4 0c             	add    esp,0xc
c0018988:	c3                   	ret    

c0018989 <_GLOBAL__sub_I_kernelProcess>:
c0018989:	83 ec 0c             	sub    esp,0xc
c001898c:	83 ec 08             	sub    esp,0x8
c001898f:	68 ff ff 00 00       	push   0xffff
c0018994:	6a 01                	push   0x1
c0018996:	e8 53 ff ff ff       	call   c00188ee <__static_initialization_and_destruction_0(int, int)>
c001899b:	83 c4 10             	add    esp,0x10
c001899e:	83 c4 0c             	add    esp,0xc
c00189a1:	c3                   	ret    

c00189a2 <Vm::vm8086EntryPoint(void*)>:
c00189a2:	83 ec 0c             	sub    esp,0xc
c00189a5:	e8 0c f2 ff ff       	call   c0017bb6 <unlockScheduler()>
c00189aa:	fb                   	sti    
c00189ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189b0:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00189b4:	52                   	push   edx
c00189b5:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00189b9:	52                   	push   edx
c00189ba:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00189be:	52                   	push   edx
c00189bf:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00189c3:	50                   	push   eax
c00189c4:	e8 ec 77 fe ff       	call   c00001b5 <goToVM86>
c00189c9:	83 c4 1c             	add    esp,0x1c
c00189cc:	c3                   	ret    

c00189cd <Vm::inbv(unsigned short)>:
c00189cd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00189d1:	ec                   	in     al,dx
c00189d2:	c3                   	ret    

c00189d3 <Vm::outbv(unsigned short, unsigned char)>:
c00189d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00189d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189db:	ee                   	out    dx,al
c00189dc:	c3                   	ret    

c00189dd <Vm::realToLinear(unsigned short, unsigned short)>:
c00189dd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00189e2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00189e7:	c1 e0 04             	shl    eax,0x4
c00189ea:	01 d0                	add    eax,edx
c00189ec:	c3                   	ret    

c00189ed <Vm::getSegment(unsigned int)>:
c00189ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189f1:	c1 e8 10             	shr    eax,0x10
c00189f4:	c3                   	ret    

c00189f5 <Vm::getOffset(unsigned int)>:
c00189f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00189f9:	c3                   	ret    

c00189fa <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00189fa:	55                   	push   ebp
c00189fb:	57                   	push   edi
c00189fc:	56                   	push   esi
c00189fd:	53                   	push   ebx
c00189fe:	83 ec 2c             	sub    esp,0x2c
c0018a01:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0018a05:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0018a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018a0d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018a11:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018a15:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0018a19:	e8 96 f1 ff ff       	call   c0017bb4 <lockScheduler()>
c0018a1e:	68 80 00 00 00       	push   0x80
c0018a23:	6a 00                	push   0x0
c0018a25:	68 a2 89 01 c0       	push   0xc00189a2
c0018a2a:	55                   	push   ebp
c0018a2b:	e8 ae f2 ff ff       	call   c0017cde <Process::createThread(void (*)(void*), void*, int)>
c0018a30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a34:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018a38:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018a3c:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018a40:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018a44:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018a48:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018a4f:	e8 a0 64 ff ff       	call   c000eef4 <operator new(unsigned long)>
c0018a54:	83 c4 0c             	add    esp,0xc
c0018a57:	89 c3                	mov    ebx,eax
c0018a59:	55                   	push   ebp
c0018a5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a5e:	50                   	push   eax
c0018a5f:	e8 ae 6a ff ff       	call   c000f512 <File::File(char const*, Process*)>
c0018a64:	83 c4 0c             	add    esp,0xc
c0018a67:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018a6b:	50                   	push   eax
c0018a6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018a70:	50                   	push   eax
c0018a71:	53                   	push   ebx
c0018a72:	e8 ab 6d ff ff       	call   c000f822 <File::stat(unsigned long long*, bool*)>
c0018a77:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018a7b:	83 c4 10             	add    esp,0x10
c0018a7e:	84 d2                	test   dl,dl
c0018a80:	74 1c                	je     c0018a9e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018a82:	83 ec 0c             	sub    esp,0xc
c0018a85:	68 a3 21 02 c0       	push   0xc00221a3
c0018a8a:	e8 e9 c1 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0018a8f:	e8 22 f1 ff ff       	call   c0017bb6 <unlockScheduler()>
c0018a94:	83 c4 10             	add    esp,0x10
c0018a97:	31 d2                	xor    edx,edx
c0018a99:	e9 81 00 00 00       	jmp    c0018b1f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018a9e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018aa2:	51                   	push   ecx
c0018aa3:	51                   	push   ecx
c0018aa4:	6a 01                	push   0x1
c0018aa6:	53                   	push   ebx
c0018aa7:	e8 ca 6a ff ff       	call   c000f576 <File::open(FileOpenMode)>
c0018aac:	83 c4 10             	add    esp,0x10
c0018aaf:	85 c0                	test   eax,eax
c0018ab1:	74 1b                	je     c0018ace <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018ab3:	83 ec 0c             	sub    esp,0xc
c0018ab6:	68 bc 21 02 c0       	push   0xc00221bc
c0018abb:	e8 b8 c1 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0018ac0:	e8 f1 f0 ff ff       	call   c0017bb6 <unlockScheduler()>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018acc:	eb 51                	jmp    c0018b1f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018ace:	83 ec 0c             	sub    esp,0xc
c0018ad1:	0f b7 ff             	movzx  edi,di
c0018ad4:	6a 07                	push   0x7
c0018ad6:	0f b7 f6             	movzx  esi,si
c0018ad9:	68 00 01 00 00       	push   0x100
c0018ade:	6a 00                	push   0x0
c0018ae0:	6a 00                	push   0x0
c0018ae2:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0018ae8:	e8 99 5b ff ff       	call   c000e686 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018aed:	83 c4 18             	add    esp,0x18
c0018af0:	57                   	push   edi
c0018af1:	56                   	push   esi
c0018af2:	e8 e6 fe ff ff       	call   c00189dd <Vm::realToLinear(unsigned short, unsigned short)>
c0018af7:	5a                   	pop    edx
c0018af8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018afa:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018afe:	51                   	push   ecx
c0018aff:	50                   	push   eax
c0018b00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b04:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b08:	53                   	push   ebx
c0018b09:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018b0c:	83 c4 14             	add    esp,0x14
c0018b0f:	53                   	push   ebx
c0018b10:	e8 bf 6a ff ff       	call   c000f5d4 <File::close()>
c0018b15:	e8 9c f0 ff ff       	call   c0017bb6 <unlockScheduler()>
c0018b1a:	83 c4 10             	add    esp,0x10
c0018b1d:	b2 01                	mov    dl,0x1
c0018b1f:	83 c4 2c             	add    esp,0x2c
c0018b22:	88 d0                	mov    al,dl
c0018b24:	5b                   	pop    ebx
c0018b25:	5e                   	pop    esi
c0018b26:	5f                   	pop    edi
c0018b27:	5d                   	pop    ebp
c0018b28:	c3                   	ret    

c0018b29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018b29:	57                   	push   edi
c0018b2a:	56                   	push   esi
c0018b2b:	53                   	push   ebx
c0018b2c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b38:	83 e8 06             	sub    eax,0x6
c0018b3b:	0f b7 c0             	movzx  eax,ax
c0018b3e:	50                   	push   eax
c0018b3f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018b44:	50                   	push   eax
c0018b45:	e8 93 fe ff ff       	call   c00189dd <Vm::realToLinear(unsigned short, unsigned short)>
c0018b4a:	5a                   	pop    edx
c0018b4b:	5e                   	pop    esi
c0018b4c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018b4f:	8d 56 fa             	lea    edx,[esi-0x6]
c0018b52:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018b58:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018b5b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018b5e:	83 c2 02             	add    edx,0x2
c0018b61:	66 89 10             	mov    WORD PTR [eax],dx
c0018b64:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018b67:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018b6b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018b6e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018b72:	89 d6                	mov    esi,edx
c0018b74:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018b7a:	66 81 e6 ff fd       	and    si,0xfdff
c0018b7f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018b83:	74 07                	je     c0018b8c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018b85:	89 d6                	mov    esi,edx
c0018b87:	66 81 ce 00 02       	or     si,0x200
c0018b8c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b95:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018b99:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018ba1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018ba4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018bac:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018baf:	5b                   	pop    ebx
c0018bb0:	5e                   	pop    esi
c0018bb1:	5f                   	pop    edi
c0018bb2:	c3                   	ret    

c0018bb3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018bb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bbd:	c1 e0 04             	shl    eax,0x4
c0018bc0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018bc3:	c3                   	ret    

c0018bc4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018bc4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bc9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bce:	c1 e0 04             	shl    eax,0x4
c0018bd1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018bd5:	c3                   	ret    

c0018bd6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018bd6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bdb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018be0:	c1 e0 04             	shl    eax,0x4
c0018be3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018be6:	c3                   	ret    

c0018be7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018be7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018bec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018bf1:	c1 e0 04             	shl    eax,0x4
c0018bf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018bf8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018bfb:	c3                   	ret    

c0018bfc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018bfc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c01:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c06:	c1 e0 04             	shl    eax,0x4
c0018c09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c0d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018c11:	c3                   	ret    

c0018c12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018c12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018c1c:	c1 e0 04             	shl    eax,0x4
c0018c1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c23:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018c26:	c3                   	ret    

c0018c27 <Vm::faultHandler(regs*)>:
c0018c27:	55                   	push   ebp
c0018c28:	57                   	push   edi
c0018c29:	56                   	push   esi
c0018c2a:	53                   	push   ebx
c0018c2b:	83 ec 1c             	sub    esp,0x1c
c0018c2e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c32:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c35:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018c39:	0f b7 f0             	movzx  esi,ax
c0018c3c:	52                   	push   edx
c0018c3d:	0f b7 c0             	movzx  eax,ax
c0018c40:	50                   	push   eax
c0018c41:	e8 97 fd ff ff       	call   c00189dd <Vm::realToLinear(unsigned short, unsigned short)>
c0018c46:	5a                   	pop    edx
c0018c47:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018c4a:	59                   	pop    ecx
c0018c4b:	89 c7                	mov    edi,eax
c0018c4d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018c59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018c5d:	0f b7 c5             	movzx  eax,bp
c0018c60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c64:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018c68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018c6c:	e8 6c fd ff ff       	call   c00189dd <Vm::realToLinear(unsigned short, unsigned short)>
c0018c71:	5a                   	pop    edx
c0018c72:	59                   	pop    ecx
c0018c73:	b1 06                	mov    cl,0x6
c0018c75:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018c7a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018c7f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018c82:	80 fa 9d             	cmp    dl,0x9d
c0018c85:	0f 84 1d 02 00 00    	je     c0018ea8 <Vm::faultHandler(regs*)+0x281>
c0018c8b:	0f 87 8e 00 00 00    	ja     c0018d1f <Vm::faultHandler(regs*)+0xf8>
c0018c91:	80 fa 66             	cmp    dl,0x66
c0018c94:	0f 84 89 01 00 00    	je     c0018e23 <Vm::faultHandler(regs*)+0x1fc>
c0018c9a:	77 44                	ja     c0018ce0 <Vm::faultHandler(regs*)+0xb9>
c0018c9c:	80 fa 36             	cmp    dl,0x36
c0018c9f:	0f 84 74 01 00 00    	je     c0018e19 <Vm::faultHandler(regs*)+0x1f2>
c0018ca5:	77 1a                	ja     c0018cc1 <Vm::faultHandler(regs*)+0x9a>
c0018ca7:	80 fa 26             	cmp    dl,0x26
c0018caa:	0f 84 4b 01 00 00    	je     c0018dfb <Vm::faultHandler(regs*)+0x1d4>
c0018cb0:	80 fa 2e             	cmp    dl,0x2e
c0018cb3:	0f 85 4a 05 00 00    	jne    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018cb9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cbc:	31 c9                	xor    ecx,ecx
c0018cbe:	47                   	inc    edi
c0018cbf:	eb be                	jmp    c0018c7f <Vm::faultHandler(regs*)+0x58>
c0018cc1:	80 fa 64             	cmp    dl,0x64
c0018cc4:	0f 84 3b 01 00 00    	je     c0018e05 <Vm::faultHandler(regs*)+0x1de>
c0018cca:	0f 87 3f 01 00 00    	ja     c0018e0f <Vm::faultHandler(regs*)+0x1e8>
c0018cd0:	80 fa 3e             	cmp    dl,0x3e
c0018cd3:	0f 85 2a 05 00 00    	jne    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018cd9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cdc:	b1 01                	mov    cl,0x1
c0018cde:	eb de                	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018ce0:	80 fa 6d             	cmp    dl,0x6d
c0018ce3:	0f 84 bf 02 00 00    	je     c0018fa8 <Vm::faultHandler(regs*)+0x381>
c0018ce9:	77 17                	ja     c0018d02 <Vm::faultHandler(regs*)+0xdb>
c0018ceb:	80 fa 67             	cmp    dl,0x67
c0018cee:	0f 84 3c 01 00 00    	je     c0018e30 <Vm::faultHandler(regs*)+0x209>
c0018cf4:	80 fa 6c             	cmp    dl,0x6c
c0018cf7:	0f 84 5d 02 00 00    	je     c0018f5a <Vm::faultHandler(regs*)+0x333>
c0018cfd:	e9 01 05 00 00       	jmp    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018d02:	80 fa 6f             	cmp    dl,0x6f
c0018d05:	0f 84 8b 03 00 00    	je     c0019096 <Vm::faultHandler(regs*)+0x46f>
c0018d0b:	0f 82 0f 03 00 00    	jb     c0019020 <Vm::faultHandler(regs*)+0x3f9>
c0018d11:	80 fa 9c             	cmp    dl,0x9c
c0018d14:	0f 84 23 01 00 00    	je     c0018e3d <Vm::faultHandler(regs*)+0x216>
c0018d1a:	e9 e4 04 00 00       	jmp    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018d1f:	80 fa ec             	cmp    dl,0xec
c0018d22:	0f 84 7f 04 00 00    	je     c00191a7 <Vm::faultHandler(regs*)+0x580>
c0018d28:	77 7b                	ja     c0018da5 <Vm::faultHandler(regs*)+0x17e>
c0018d2a:	80 fa e4             	cmp    dl,0xe4
c0018d2d:	0f 84 fe 03 00 00    	je     c0019131 <Vm::faultHandler(regs*)+0x50a>
c0018d33:	77 53                	ja     c0018d88 <Vm::faultHandler(regs*)+0x161>
c0018d35:	80 fa cd             	cmp    dl,0xcd
c0018d38:	0f 84 cd 01 00 00    	je     c0018f0b <Vm::faultHandler(regs*)+0x2e4>
c0018d3e:	80 fa cf             	cmp    dl,0xcf
c0018d41:	0f 85 bc 04 00 00    	jne    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018d47:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018d4a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018d4d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018d51:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018d54:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018d58:	81 ca 00 02 02 00    	or     edx,0x20200
c0018d5e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018d61:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018d65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018d6b:	66 c1 e8 09          	shr    ax,0x9
c0018d6f:	83 e0 01             	and    eax,0x1
c0018d72:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018d75:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018d78:	83 c0 06             	add    eax,0x6
c0018d7b:	25 ff ff 00 00       	and    eax,0xffff
c0018d80:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018d83:	e9 77 04 00 00       	jmp    c00191ff <Vm::faultHandler(regs*)+0x5d8>
c0018d88:	80 fa e6             	cmp    dl,0xe6
c0018d8b:	0f 84 ea 03 00 00    	je     c001917b <Vm::faultHandler(regs*)+0x554>
c0018d91:	0f 82 b6 03 00 00    	jb     c001914d <Vm::faultHandler(regs*)+0x526>
c0018d97:	80 fa e7             	cmp    dl,0xe7
c0018d9a:	0f 84 f2 03 00 00    	je     c0019192 <Vm::faultHandler(regs*)+0x56b>
c0018da0:	e9 5e 04 00 00       	jmp    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018da5:	80 fa ef             	cmp    dl,0xef
c0018da8:	0f 84 3c 04 00 00    	je     c00191ea <Vm::faultHandler(regs*)+0x5c3>
c0018dae:	77 28                	ja     c0018dd8 <Vm::faultHandler(regs*)+0x1b1>
c0018db0:	80 fa ed             	cmp    dl,0xed
c0018db3:	0f 84 0a 04 00 00    	je     c00191c3 <Vm::faultHandler(regs*)+0x59c>
c0018db9:	80 fa ee             	cmp    dl,0xee
c0018dbc:	0f 85 41 04 00 00    	jne    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018dc2:	50                   	push   eax
c0018dc3:	50                   	push   eax
c0018dc4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018dc8:	50                   	push   eax
c0018dc9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018dcd:	50                   	push   eax
c0018dce:	e8 00 fc ff ff       	call   c00189d3 <Vm::outbv(unsigned short, unsigned char)>
c0018dd3:	e9 0a 04 00 00       	jmp    c00191e2 <Vm::faultHandler(regs*)+0x5bb>
c0018dd8:	80 fa fa             	cmp    dl,0xfa
c0018ddb:	0f 84 5d 01 00 00    	je     c0018f3e <Vm::faultHandler(regs*)+0x317>
c0018de1:	80 fa fb             	cmp    dl,0xfb
c0018de4:	0f 84 62 01 00 00    	je     c0018f4c <Vm::faultHandler(regs*)+0x325>
c0018dea:	80 fa f3             	cmp    dl,0xf3
c0018ded:	0f 85 10 04 00 00    	jne    c0019203 <Vm::faultHandler(regs*)+0x5dc>
c0018df3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018df6:	e9 c3 fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018dfb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018dfe:	b1 02                	mov    cl,0x2
c0018e00:	e9 b9 fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018e05:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e08:	b1 03                	mov    cl,0x3
c0018e0a:	e9 af fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018e0f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e12:	b1 04                	mov    cl,0x4
c0018e14:	e9 a5 fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018e19:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e1c:	b1 05                	mov    cl,0x5
c0018e1e:	e9 9b fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018e23:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e26:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018e2b:	e9 8e fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018e30:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e33:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018e38:	e9 81 fe ff ff       	jmp    c0018cbe <Vm::faultHandler(regs*)+0x97>
c0018e3d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018e40:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e44:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018e49:	74 30                	je     c0018e7b <Vm::faultHandler(regs*)+0x254>
c0018e4b:	83 e9 04             	sub    ecx,0x4
c0018e4e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018e54:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018e5a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018e5d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018e60:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e66:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e6a:	0f 84 8c 03 00 00    	je     c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0018e70:	80 ce 02             	or     dh,0x2
c0018e73:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018e76:	e9 81 03 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0018e7b:	83 e9 02             	sub    ecx,0x2
c0018e7e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018e84:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018e87:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018e8b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018e91:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018e95:	74 05                	je     c0018e9c <Vm::faultHandler(regs*)+0x275>
c0018e97:	80 ce 02             	or     dh,0x2
c0018e9a:	eb 03                	jmp    c0018e9f <Vm::faultHandler(regs*)+0x278>
c0018e9c:	80 e6 fd             	and    dh,0xfd
c0018e9f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018ea3:	e9 54 03 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0018ea8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ead:	74 2a                	je     c0018ed9 <Vm::faultHandler(regs*)+0x2b2>
c0018eaf:	8b 10                	mov    edx,DWORD PTR [eax]
c0018eb1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018eb7:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ebd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ec2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018ec8:	c1 e8 09             	shr    eax,0x9
c0018ecb:	83 e0 01             	and    eax,0x1
c0018ece:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018ed1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018ed4:	83 c0 04             	add    eax,0x4
c0018ed7:	eb 25                	jmp    c0018efe <Vm::faultHandler(regs*)+0x2d7>
c0018ed9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018edc:	81 ca 00 02 02 00    	or     edx,0x20200
c0018ee2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018ee5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018ee8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018eee:	66 c1 e8 09          	shr    ax,0x9
c0018ef2:	83 e0 01             	and    eax,0x1
c0018ef5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018ef8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018efb:	83 c0 02             	add    eax,0x2
c0018efe:	25 ff ff 00 00       	and    eax,0xffff
c0018f03:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f06:	e9 f1 02 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0018f0b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018f0f:	3c ff                	cmp    al,0xff
c0018f11:	75 10                	jne    c0018f23 <Vm::faultHandler(regs*)+0x2fc>
c0018f13:	83 ec 0c             	sub    esp,0xc
c0018f16:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018f19:	e8 8c f9 ff ff       	call   c00188aa <Thr::terminateFromIRQ(int)>
c0018f1e:	e9 c2 02 00 00       	jmp    c00191e5 <Vm::faultHandler(regs*)+0x5be>
c0018f23:	83 ec 0c             	sub    esp,0xc
c0018f26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f2e:	57                   	push   edi
c0018f2f:	50                   	push   eax
c0018f30:	53                   	push   ebx
c0018f31:	e8 f3 fb ff ff       	call   c0018b29 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018f36:	83 c4 20             	add    esp,0x20
c0018f39:	e9 c1 02 00 00       	jmp    c00191ff <Vm::faultHandler(regs*)+0x5d8>
c0018f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f43:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018f47:	e9 b0 02 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0018f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f51:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018f55:	e9 a2 02 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0018f5a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018f5f:	74 0d                	je     c0018f6e <Vm::faultHandler(regs*)+0x347>
c0018f61:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018f68:	0f 87 e9 02 00 00    	ja     c0019257 <Vm::faultHandler(regs*)+0x630>
c0018f6e:	83 ec 0c             	sub    esp,0xc
c0018f71:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018f74:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018f78:	50                   	push   eax
c0018f79:	e8 4f fa ff ff       	call   c00189cd <Vm::inbv(unsigned short)>
c0018f7e:	83 c4 0c             	add    esp,0xc
c0018f81:	0f b6 c0             	movzx  eax,al
c0018f84:	0f b7 c9             	movzx  ecx,cx
c0018f87:	50                   	push   eax
c0018f88:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018f8c:	50                   	push   eax
c0018f8d:	51                   	push   ecx
c0018f8e:	e8 54 fc ff ff       	call   c0018be7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018f99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018f9d:	74 03                	je     c0018fa2 <Vm::faultHandler(regs*)+0x37b>
c0018f9f:	48                   	dec    eax
c0018fa0:	eb 01                	jmp    c0018fa3 <Vm::faultHandler(regs*)+0x37c>
c0018fa2:	40                   	inc    eax
c0018fa3:	0f b7 c0             	movzx  eax,ax
c0018fa6:	eb 70                	jmp    c0019018 <Vm::faultHandler(regs*)+0x3f1>
c0018fa8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018fab:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018fae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018fb3:	74 0c                	je     c0018fc1 <Vm::faultHandler(regs*)+0x39a>
c0018fb5:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018fbb:	0f 87 96 02 00 00    	ja     c0019257 <Vm::faultHandler(regs*)+0x630>
c0018fc1:	0f b7 c9             	movzx  ecx,cx
c0018fc4:	0f b7 f6             	movzx  esi,si
c0018fc7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018fca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018fcf:	74 20                	je     c0018ff1 <Vm::faultHandler(regs*)+0x3ca>
c0018fd1:	ed                   	in     eax,dx
c0018fd2:	55                   	push   ebp
c0018fd3:	50                   	push   eax
c0018fd4:	51                   	push   ecx
c0018fd5:	56                   	push   esi
c0018fd6:	e8 37 fc ff ff       	call   c0018c12 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018fdb:	83 c4 10             	add    esp,0x10
c0018fde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018fe1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018fe5:	74 05                	je     c0018fec <Vm::faultHandler(regs*)+0x3c5>
c0018fe7:	83 e8 04             	sub    eax,0x4
c0018fea:	eb 27                	jmp    c0019013 <Vm::faultHandler(regs*)+0x3ec>
c0018fec:	83 c0 04             	add    eax,0x4
c0018fef:	eb 22                	jmp    c0019013 <Vm::faultHandler(regs*)+0x3ec>
c0018ff1:	66 ed                	in     ax,dx
c0018ff3:	0f b7 c0             	movzx  eax,ax
c0018ff6:	57                   	push   edi
c0018ff7:	50                   	push   eax
c0018ff8:	51                   	push   ecx
c0018ff9:	56                   	push   esi
c0018ffa:	e8 fd fb ff ff       	call   c0018bfc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019005:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019009:	74 05                	je     c0019010 <Vm::faultHandler(regs*)+0x3e9>
c001900b:	83 e8 02             	sub    eax,0x2
c001900e:	eb 03                	jmp    c0019013 <Vm::faultHandler(regs*)+0x3ec>
c0019010:	83 c0 02             	add    eax,0x2
c0019013:	25 ff ff 00 00       	and    eax,0xffff
c0019018:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001901b:	e9 dc 01 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0019020:	49                   	dec    ecx
c0019021:	80 f9 05             	cmp    cl,0x5
c0019024:	77 24                	ja     c001904a <Vm::faultHandler(regs*)+0x423>
c0019026:	0f b6 c9             	movzx  ecx,cl
c0019029:	ff 24 8d 04 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdddfc]
c0019030:	0f b7 f5             	movzx  esi,bp
c0019033:	eb 15                	jmp    c001904a <Vm::faultHandler(regs*)+0x423>
c0019035:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019039:	eb 0f                	jmp    c001904a <Vm::faultHandler(regs*)+0x423>
c001903b:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001903f:	eb 09                	jmp    c001904a <Vm::faultHandler(regs*)+0x423>
c0019041:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019045:	eb 03                	jmp    c001904a <Vm::faultHandler(regs*)+0x423>
c0019047:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001904a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001904d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019052:	74 0b                	je     c001905f <Vm::faultHandler(regs*)+0x438>
c0019054:	3d ff ff 00 00       	cmp    eax,0xffff
c0019059:	0f 87 f8 01 00 00    	ja     c0019257 <Vm::faultHandler(regs*)+0x630>
c001905f:	0f b7 c0             	movzx  eax,ax
c0019062:	52                   	push   edx
c0019063:	52                   	push   edx
c0019064:	50                   	push   eax
c0019065:	56                   	push   esi
c0019066:	e8 48 fb ff ff       	call   c0018bb3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001906b:	59                   	pop    ecx
c001906c:	0f b6 c0             	movzx  eax,al
c001906f:	5e                   	pop    esi
c0019070:	50                   	push   eax
c0019071:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019075:	50                   	push   eax
c0019076:	e8 58 f9 ff ff       	call   c00189d3 <Vm::outbv(unsigned short, unsigned char)>
c001907b:	83 c4 10             	add    esp,0x10
c001907e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019081:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019085:	74 03                	je     c001908a <Vm::faultHandler(regs*)+0x463>
c0019087:	48                   	dec    eax
c0019088:	eb 01                	jmp    c001908b <Vm::faultHandler(regs*)+0x464>
c001908a:	40                   	inc    eax
c001908b:	0f b7 c0             	movzx  eax,ax
c001908e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019091:	e9 66 01 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0019096:	49                   	dec    ecx
c0019097:	80 f9 05             	cmp    cl,0x5
c001909a:	77 1f                	ja     c00190bb <Vm::faultHandler(regs*)+0x494>
c001909c:	0f b6 c9             	movzx  ecx,cl
c001909f:	ff 24 8d 1c 22 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffddde4]
c00190a6:	89 ee                	mov    esi,ebp
c00190a8:	eb 11                	jmp    c00190bb <Vm::faultHandler(regs*)+0x494>
c00190aa:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00190ad:	eb 0c                	jmp    c00190bb <Vm::faultHandler(regs*)+0x494>
c00190af:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00190b2:	eb 07                	jmp    c00190bb <Vm::faultHandler(regs*)+0x494>
c00190b4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00190b7:	eb 02                	jmp    c00190bb <Vm::faultHandler(regs*)+0x494>
c00190b9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00190bb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00190be:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00190c3:	74 0c                	je     c00190d1 <Vm::faultHandler(regs*)+0x4aa>
c00190c5:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c00190cb:	0f 87 86 01 00 00    	ja     c0019257 <Vm::faultHandler(regs*)+0x630>
c00190d1:	0f b7 d6             	movzx  edx,si
c00190d4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00190d7:	0f b7 c1             	movzx  eax,cx
c00190da:	81 e7 00 04 00 00    	and    edi,0x400
c00190e0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00190e3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190e8:	74 1d                	je     c0019107 <Vm::faultHandler(regs*)+0x4e0>
c00190ea:	55                   	push   ebp
c00190eb:	55                   	push   ebp
c00190ec:	50                   	push   eax
c00190ed:	52                   	push   edx
c00190ee:	e8 e3 fa ff ff       	call   c0018bd6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00190f3:	83 c4 10             	add    esp,0x10
c00190f6:	89 f2                	mov    edx,esi
c00190f8:	ef                   	out    dx,eax
c00190f9:	85 ff                	test   edi,edi
c00190fb:	74 05                	je     c0019102 <Vm::faultHandler(regs*)+0x4db>
c00190fd:	83 e9 04             	sub    ecx,0x4
c0019100:	eb 21                	jmp    c0019123 <Vm::faultHandler(regs*)+0x4fc>
c0019102:	83 c1 04             	add    ecx,0x4
c0019105:	eb 1c                	jmp    c0019123 <Vm::faultHandler(regs*)+0x4fc>
c0019107:	55                   	push   ebp
c0019108:	55                   	push   ebp
c0019109:	50                   	push   eax
c001910a:	52                   	push   edx
c001910b:	e8 b4 fa ff ff       	call   c0018bc4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019110:	83 c4 10             	add    esp,0x10
c0019113:	89 f2                	mov    edx,esi
c0019115:	66 ef                	out    dx,ax
c0019117:	85 ff                	test   edi,edi
c0019119:	74 05                	je     c0019120 <Vm::faultHandler(regs*)+0x4f9>
c001911b:	83 e9 02             	sub    ecx,0x2
c001911e:	eb 03                	jmp    c0019123 <Vm::faultHandler(regs*)+0x4fc>
c0019120:	83 c1 02             	add    ecx,0x2
c0019123:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019129:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001912c:	e9 cb 00 00 00       	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c0019131:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001913f:	50                   	push   eax
c0019140:	e8 88 f8 ff ff       	call   c00189cd <Vm::inbv(unsigned short)>
c0019145:	0f b6 c0             	movzx  eax,al
c0019148:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001914b:	eb 3f                	jmp    c001918c <Vm::faultHandler(regs*)+0x565>
c001914d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019152:	74 07                	je     c001915b <Vm::faultHandler(regs*)+0x534>
c0019154:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019158:	ed                   	in     eax,dx
c0019159:	eb 14                	jmp    c001916f <Vm::faultHandler(regs*)+0x548>
c001915b:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001915e:	66 31 c9             	xor    cx,cx
c0019161:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019164:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019168:	66 ed                	in     ax,dx
c001916a:	0f b7 c0             	movzx  eax,ax
c001916d:	09 c8                	or     eax,ecx
c001916f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019172:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019176:	e9 84 00 00 00       	jmp    c00191ff <Vm::faultHandler(regs*)+0x5d8>
c001917b:	52                   	push   edx
c001917c:	52                   	push   edx
c001917d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019181:	50                   	push   eax
c0019182:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019186:	50                   	push   eax
c0019187:	e8 47 f8 ff ff       	call   c00189d3 <Vm::outbv(unsigned short, unsigned char)>
c001918c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019190:	eb 53                	jmp    c00191e5 <Vm::faultHandler(regs*)+0x5be>
c0019192:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019195:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019199:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001919e:	74 03                	je     c00191a3 <Vm::faultHandler(regs*)+0x57c>
c00191a0:	ef                   	out    dx,eax
c00191a1:	eb cf                	jmp    c0019172 <Vm::faultHandler(regs*)+0x54b>
c00191a3:	66 ef                	out    dx,ax
c00191a5:	eb cb                	jmp    c0019172 <Vm::faultHandler(regs*)+0x54b>
c00191a7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00191ae:	83 ec 0c             	sub    esp,0xc
c00191b1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00191b5:	50                   	push   eax
c00191b6:	e8 12 f8 ff ff       	call   c00189cd <Vm::inbv(unsigned short)>
c00191bb:	0f b6 c0             	movzx  eax,al
c00191be:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00191c1:	eb 1f                	jmp    c00191e2 <Vm::faultHandler(regs*)+0x5bb>
c00191c3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191c6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191cb:	74 03                	je     c00191d0 <Vm::faultHandler(regs*)+0x5a9>
c00191cd:	ed                   	in     eax,dx
c00191ce:	eb 0d                	jmp    c00191dd <Vm::faultHandler(regs*)+0x5b6>
c00191d0:	66 ed                	in     ax,dx
c00191d2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00191d5:	0f b7 c0             	movzx  eax,ax
c00191d8:	66 31 d2             	xor    dx,dx
c00191db:	09 d0                	or     eax,edx
c00191dd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00191e0:	eb 1a                	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c00191e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191e5:	83 c4 10             	add    esp,0x10
c00191e8:	eb 15                	jmp    c00191ff <Vm::faultHandler(regs*)+0x5d8>
c00191ea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00191ed:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191f0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191f5:	74 03                	je     c00191fa <Vm::faultHandler(regs*)+0x5d3>
c00191f7:	ef                   	out    dx,eax
c00191f8:	eb 02                	jmp    c00191fc <Vm::faultHandler(regs*)+0x5d5>
c00191fa:	66 ef                	out    dx,ax
c00191fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00191ff:	b0 01                	mov    al,0x1
c0019201:	eb 56                	jmp    c0019259 <Vm::faultHandler(regs*)+0x632>
c0019203:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019207:	50                   	push   eax
c0019208:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001920c:	50                   	push   eax
c001920d:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019211:	50                   	push   eax
c0019212:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019216:	50                   	push   eax
c0019217:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001921b:	50                   	push   eax
c001921c:	52                   	push   edx
c001921d:	52                   	push   edx
c001921e:	68 d5 21 02 c0       	push   0xc00221d5
c0019223:	e8 bb 5d ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c0019228:	83 c4 20             	add    esp,0x20
c001922b:	83 ec 0c             	sub    esp,0xc
c001922e:	6a 60                	push   0x60
c0019230:	e8 98 f7 ff ff       	call   c00189cd <Vm::inbv(unsigned short)>
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	3c 1c                	cmp    al,0x1c
c001923a:	74 04                	je     c0019240 <Vm::faultHandler(regs*)+0x619>
c001923c:	3c 5a                	cmp    al,0x5a
c001923e:	75 eb                	jne    c001922b <Vm::faultHandler(regs*)+0x604>
c0019240:	3c 5a                	cmp    al,0x5a
c0019242:	74 04                	je     c0019248 <Vm::faultHandler(regs*)+0x621>
c0019244:	3c 1c                	cmp    al,0x1c
c0019246:	75 0f                	jne    c0019257 <Vm::faultHandler(regs*)+0x630>
c0019248:	83 ec 0c             	sub    esp,0xc
c001924b:	6a 60                	push   0x60
c001924d:	e8 7b f7 ff ff       	call   c00189cd <Vm::inbv(unsigned short)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	eb e9                	jmp    c0019240 <Vm::faultHandler(regs*)+0x619>
c0019257:	31 c0                	xor    eax,eax
c0019259:	83 c4 1c             	add    esp,0x1c
c001925c:	5b                   	pop    ebx
c001925d:	5e                   	pop    esi
c001925e:	5f                   	pop    edi
c001925f:	5d                   	pop    ebp
c0019260:	c3                   	ret    
c0019261:	90                   	nop

c0019262 <FAT::getName()>:
c0019262:	b8 34 22 02 c0       	mov    eax,0xc0022234
c0019267:	c3                   	ret    

c0019268 <FAT::tell(void*, unsigned long long*)>:
c0019268:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001926d:	75 06                	jne    c0019275 <FAT::tell(void*, unsigned long long*)+0xd>
c001926f:	b8 04 00 00 00       	mov    eax,0x4
c0019274:	c3                   	ret    
c0019275:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001927a:	75 06                	jne    c0019282 <FAT::tell(void*, unsigned long long*)+0x1a>
c001927c:	b8 04 00 00 00       	mov    eax,0x4
c0019281:	c3                   	ret    
c0019282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019286:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019289:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001928c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019290:	89 01                	mov    DWORD PTR [ecx],eax
c0019292:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019295:	b8 00 00 00 00       	mov    eax,0x0
c001929a:	c3                   	ret    
c001929b:	90                   	nop

c001929c <FAT::stat(void*, unsigned long long*)>:
c001929c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00192a1:	75 06                	jne    c00192a9 <FAT::stat(void*, unsigned long long*)+0xd>
c00192a3:	b8 04 00 00 00       	mov    eax,0x4
c00192a8:	c3                   	ret    
c00192a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00192ae:	75 06                	jne    c00192b6 <FAT::stat(void*, unsigned long long*)+0x1a>
c00192b0:	b8 04 00 00 00       	mov    eax,0x4
c00192b5:	c3                   	ret    
c00192b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192ba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00192bd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192c4:	89 01                	mov    DWORD PTR [ecx],eax
c00192c6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00192c9:	b8 00 00 00 00       	mov    eax,0x0
c00192ce:	c3                   	ret    
c00192cf:	90                   	nop

c00192d0 <FAT::~FAT()>:
c00192d0:	83 ec 0c             	sub    esp,0xc
c00192d3:	ba b8 22 02 c0       	mov    edx,0xc00222b8
c00192d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192dc:	89 10                	mov    DWORD PTR [eax],edx
c00192de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192e2:	83 ec 0c             	sub    esp,0xc
c00192e5:	50                   	push   eax
c00192e6:	e8 21 60 ff ff       	call   c000f30c <Filesystem::~Filesystem()>
c00192eb:	83 c4 10             	add    esp,0x10
c00192ee:	90                   	nop
c00192ef:	83 c4 0c             	add    esp,0xc
c00192f2:	c3                   	ret    
c00192f3:	90                   	nop

c00192f4 <FAT::~FAT()>:
c00192f4:	83 ec 0c             	sub    esp,0xc
c00192f7:	83 ec 0c             	sub    esp,0xc
c00192fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192fe:	e8 cd ff ff ff       	call   c00192d0 <FAT::~FAT()>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	83 ec 08             	sub    esp,0x8
c0019309:	6a 08                	push   0x8
c001930b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001930f:	e8 ef 5b ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c0019314:	83 c4 10             	add    esp,0x10
c0019317:	83 c4 0c             	add    esp,0xc
c001931a:	c3                   	ret    
c001931b:	90                   	nop

c001931c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001931c:	83 ec 1c             	sub    esp,0x1c
c001931f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019326:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001932b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001932f:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c0019336:	83 f8 ff             	cmp    eax,0xffffffff
c0019339:	75 34                	jne    c001936f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001933b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001933f:	88 c2                	mov    dl,al
c0019341:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019346:	01 d0                	add    eax,edx
c0019348:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001934c:	8b 15 c0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bc0
c0019352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019356:	89 14 85 e0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb420],edx
c001935d:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019362:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019366:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c001936d:	eb 17                	jmp    c0019386 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001936f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019373:	88 c2                	mov    dl,al
c0019375:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019379:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c0019380:	01 d0                	add    eax,edx
c0019382:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019386:	83 ec 04             	sub    esp,0x4
c0019389:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001938d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019391:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019395:	50                   	push   eax
c0019396:	e8 ca d6 fe ff       	call   c0006a65 <f_getlabel>
c001939b:	83 c4 10             	add    esp,0x10
c001939e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00193a7:	75 07                	jne    c00193b0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00193a9:	b8 00 00 00 00       	mov    eax,0x0
c00193ae:	eb 05                	jmp    c00193b5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00193b0:	b8 01 00 00 00       	mov    eax,0x1
c00193b5:	83 c4 1c             	add    esp,0x1c
c00193b8:	c3                   	ret    
c00193b9:	90                   	nop

c00193ba <FAT::setlabel(LogicalDisk*, int, char*)>:
c00193ba:	57                   	push   edi
c00193bb:	83 ec 58             	sub    esp,0x58
c00193be:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00193c6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193ca:	b9 0f 00 00 00       	mov    ecx,0xf
c00193cf:	b8 00 00 00 00       	mov    eax,0x0
c00193d4:	fc                   	cld    
c00193d5:	89 d7                	mov    edi,edx
c00193d7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00193d9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00193dd:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c00193e4:	83 f8 ff             	cmp    eax,0xffffffff
c00193e7:	75 34                	jne    c001941d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00193e9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00193ed:	88 c2                	mov    dl,al
c00193ef:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c00193f4:	01 d0                	add    eax,edx
c00193f6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00193fa:	8b 15 c0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bc0
c0019400:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019404:	89 14 85 e0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb420],edx
c001940b:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019410:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019414:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c001941b:	eb 17                	jmp    c0019434 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001941d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019421:	88 c2                	mov    dl,al
c0019423:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019427:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c001942e:	01 d0                	add    eax,edx
c0019430:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019434:	83 ec 08             	sub    esp,0x8
c0019437:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001943b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001943f:	50                   	push   eax
c0019440:	e8 19 73 fe ff       	call   c000075e <strcat>
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	83 ec 0c             	sub    esp,0xc
c001944b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001944f:	50                   	push   eax
c0019450:	e8 fe d7 fe ff       	call   c0006c53 <f_setlabel>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001945c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019461:	75 07                	jne    c001946a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019463:	b8 00 00 00 00       	mov    eax,0x0
c0019468:	eb 05                	jmp    c001946f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001946a:	b8 01 00 00 00       	mov    eax,0x1
c001946f:	83 c4 58             	add    esp,0x58
c0019472:	5f                   	pop    edi
c0019473:	c3                   	ret    

c0019474 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019474:	83 ec 2c             	sub    esp,0x2c
c0019477:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001947f:	83 ec 08             	sub    esp,0x8
c0019482:	68 58 22 02 c0       	push   0xc0022258
c0019487:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001948b:	e8 68 72 fe ff       	call   c00006f8 <strcmp>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	85 c0                	test   eax,eax
c0019495:	0f 94 c0             	sete   al
c0019498:	84 c0                	test   al,al
c001949a:	74 0d                	je     c00194a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001949c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194a4:	e9 a6 00 00 00       	jmp    c001954f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194a9:	83 ec 08             	sub    esp,0x8
c00194ac:	68 4a 22 02 c0       	push   0xc002224a
c00194b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194b5:	e8 3e 72 fe ff       	call   c00006f8 <strcmp>
c00194ba:	83 c4 10             	add    esp,0x10
c00194bd:	85 c0                	test   eax,eax
c00194bf:	0f 94 c0             	sete   al
c00194c2:	84 c0                	test   al,al
c00194c4:	74 0a                	je     c00194d0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00194c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194ce:	eb 7f                	jmp    c001954f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194d0:	83 ec 08             	sub    esp,0x8
c00194d3:	68 50 22 02 c0       	push   0xc0022250
c00194d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00194dc:	e8 17 72 fe ff       	call   c00006f8 <strcmp>
c00194e1:	83 c4 10             	add    esp,0x10
c00194e4:	85 c0                	test   eax,eax
c00194e6:	0f 94 c0             	sete   al
c00194e9:	84 c0                	test   al,al
c00194eb:	74 0a                	je     c00194f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00194ed:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00194f5:	eb 58                	jmp    c001954f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00194f7:	83 ec 08             	sub    esp,0x8
c00194fa:	68 ac f7 01 c0       	push   0xc001f7ac
c00194ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019503:	e8 f0 71 fe ff       	call   c00006f8 <strcmp>
c0019508:	83 c4 10             	add    esp,0x10
c001950b:	85 c0                	test   eax,eax
c001950d:	0f 94 c0             	sete   al
c0019510:	84 c0                	test   al,al
c0019512:	74 0a                	je     c001951e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019514:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001951c:	eb 31                	jmp    c001954f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001951e:	83 ec 08             	sub    esp,0x8
c0019521:	68 56 22 02 c0       	push   0xc0022256
c0019526:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001952a:	e8 c9 71 fe ff       	call   c00006f8 <strcmp>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	85 c0                	test   eax,eax
c0019534:	0f 94 c0             	sete   al
c0019537:	84 c0                	test   al,al
c0019539:	74 0a                	je     c0019545 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001953b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019543:	eb 0a                	jmp    c001954f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019545:	b8 08 00 00 00       	mov    eax,0x8
c001954a:	e9 04 01 00 00       	jmp    c0019653 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001954f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019556:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001955b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001955f:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c0019566:	83 f8 ff             	cmp    eax,0xffffffff
c0019569:	75 34                	jne    c001959f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001956b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001956f:	88 c2                	mov    dl,al
c0019571:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019576:	01 d0                	add    eax,edx
c0019578:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001957c:	8b 15 c0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bc0
c0019582:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019586:	89 14 85 e0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb420],edx
c001958d:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019592:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019596:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c001959d:	eb 17                	jmp    c00195b6 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001959f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00195a3:	88 c2                	mov    dl,al
c00195a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195a9:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c00195b0:	01 d0                	add    eax,edx
c00195b2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00195b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ba:	88 04 24             	mov    BYTE PTR [esp],al
c00195bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00195c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195c5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00195cd:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00195d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00195da:	83 ec 0c             	sub    esp,0xc
c00195dd:	68 00 20 00 00       	push   0x2000
c00195e2:	e8 1f 26 ff ff       	call   c000bc06 <malloc>
c00195e7:	83 c4 10             	add    esp,0x10
c00195ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195ee:	68 00 20 00 00       	push   0x2000
c00195f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195f7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195fb:	50                   	push   eax
c00195fc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019600:	50                   	push   eax
c0019601:	e8 98 da fe ff       	call   c000709e <f_mkfs>
c0019606:	83 c4 10             	add    esp,0x10
c0019609:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001960d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019612:	75 07                	jne    c001961b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019614:	b8 00 00 00 00       	mov    eax,0x0
c0019619:	eb 38                	jmp    c0019653 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001961b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019620:	75 17                	jne    c0019639 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019622:	83 ec 0c             	sub    esp,0xc
c0019625:	68 88 22 02 c0       	push   0xc0022288
c001962a:	e8 b4 59 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	b8 09 00 00 00       	mov    eax,0x9
c0019637:	eb 1a                	jmp    c0019653 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001963d:	83 ec 08             	sub    esp,0x8
c0019640:	50                   	push   eax
c0019641:	68 5c 22 02 c0       	push   0xc002225c
c0019646:	e8 98 59 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001964b:	83 c4 10             	add    esp,0x10
c001964e:	b8 01 00 00 00       	mov    eax,0x1
c0019653:	83 c4 2c             	add    esp,0x2c
c0019656:	c3                   	ret    
c0019657:	90                   	nop

c0019658 <FAT::tryMount(LogicalDisk*, int)>:
c0019658:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001965e:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019663:	83 f8 14             	cmp    eax,0x14
c0019666:	75 17                	jne    c001967f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	68 6e 22 02 c0       	push   0xc002226e
c0019670:	e8 03 b6 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c0019675:	83 c4 10             	add    esp,0x10
c0019678:	b0 00                	mov    al,0x0
c001967a:	e9 d7 01 00 00       	jmp    c0019856 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001967f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019686:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001968c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019692:	3d 00 02 00 00       	cmp    eax,0x200
c0019697:	74 07                	je     c00196a0 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019699:	b0 00                	mov    al,0x0
c001969b:	e9 b6 01 00 00       	jmp    c0019856 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196a0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00196a8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00196af:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c00196b6:	83 f8 ff             	cmp    eax,0xffffffff
c00196b9:	74 07                	je     c00196c2 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00196bb:	b0 01                	mov    al,0x1
c00196bd:	e9 94 01 00 00       	jmp    c0019856 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00196c2:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00196cc:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00196d4:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00196db:	88 c2                	mov    dl,al
c00196dd:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c00196e2:	01 d0                	add    eax,edx
c00196e4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00196eb:	8b 15 c0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bc0
c00196f1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00196f8:	89 14 85 e0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb420],edx
c00196ff:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019704:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001970b:	89 14 85 60 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3a0],edx
c0019712:	83 ec 0c             	sub    esp,0xc
c0019715:	68 54 02 00 00       	push   0x254
c001971a:	e8 e7 24 ff ff       	call   c000bc06 <malloc>
c001971f:	83 c4 10             	add    esp,0x10
c0019722:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019729:	83 ec 04             	sub    esp,0x4
c001972c:	6a 00                	push   0x0
c001972e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019735:	50                   	push   eax
c0019736:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001973d:	e8 1a b5 fe ff       	call   c0004c5c <f_mount>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001974c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019754:	74 19                	je     c001976f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019756:	83 ec 0c             	sub    esp,0xc
c0019759:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019760:	e8 c1 24 ff ff       	call   c000bc26 <rfree>
c0019765:	83 c4 10             	add    esp,0x10
c0019768:	b0 00                	mov    al,0x0
c001976a:	e9 e7 00 00 00       	jmp    c0019856 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001976f:	83 ec 04             	sub    esp,0x4
c0019772:	68 00 01 00 00       	push   0x100
c0019777:	6a 00                	push   0x0
c0019779:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019780:	50                   	push   eax
c0019781:	e8 82 6e fe ff       	call   c0000608 <memset>
c0019786:	83 c4 10             	add    esp,0x10
c0019789:	83 ec 08             	sub    esp,0x8
c001978c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019793:	50                   	push   eax
c0019794:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001979b:	50                   	push   eax
c001979c:	e8 bd 6f fe ff       	call   c000075e <strcat>
c00197a1:	83 c4 10             	add    esp,0x10
c00197a4:	83 ec 08             	sub    esp,0x8
c00197a7:	68 7c 22 02 c0       	push   0xc002227c
c00197ac:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00197b3:	50                   	push   eax
c00197b4:	e8 a5 6f fe ff       	call   c000075e <strcat>
c00197b9:	83 c4 10             	add    esp,0x10
c00197bc:	83 ec 04             	sub    esp,0x4
c00197bf:	6a 01                	push   0x1
c00197c1:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00197c8:	50                   	push   eax
c00197c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00197cd:	50                   	push   eax
c00197ce:	e8 eb b4 fe ff       	call   c0004cbe <f_open>
c00197d3:	83 c4 10             	add    esp,0x10
c00197d6:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00197dd:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00197e4:	85 c0                	test   eax,eax
c00197e6:	74 0a                	je     c00197f2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00197e8:	78 2d                	js     c0019817 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00197ea:	83 e8 04             	sub    eax,0x4
c00197ed:	83 f8 01             	cmp    eax,0x1
c00197f0:	77 25                	ja     c0019817 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00197f2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00197fa:	83 ec 0c             	sub    esp,0xc
c00197fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019801:	50                   	push   eax
c0019802:	e8 09 c0 fe ff       	call   c0005810 <f_close>
c0019807:	83 c4 10             	add    esp,0x10
c001980a:	90                   	nop
c001980b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019813:	74 3a                	je     c001984f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019815:	eb 2d                	jmp    c0019844 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019817:	83 ec 0c             	sub    esp,0xc
c001981a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019821:	e8 00 24 ff ff       	call   c000bc26 <rfree>
c0019826:	83 c4 10             	add    esp,0x10
c0019829:	83 ec 04             	sub    esp,0x4
c001982c:	6a 00                	push   0x0
c001982e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019835:	50                   	push   eax
c0019836:	6a 00                	push   0x0
c0019838:	e8 1f b4 fe ff       	call   c0004c5c <f_mount>
c001983d:	83 c4 10             	add    esp,0x10
c0019840:	b0 00                	mov    al,0x0
c0019842:	eb 12                	jmp    c0019856 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019844:	a1 c0 4b 02 c0       	mov    eax,ds:0xc0024bc0
c0019849:	40                   	inc    eax
c001984a:	a3 c0 4b 02 c0       	mov    ds:0xc0024bc0,eax
c001984f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019856:	81 c4 6c 03 00 00    	add    esp,0x36c
c001985c:	c3                   	ret    
c001985d:	90                   	nop

c001985e <FAT::readDir(void*, unsigned long, void*, int*)>:
c001985e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019864:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001986c:	74 0a                	je     c0019878 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001986e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019876:	75 0a                	jne    c0019882 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019878:	b8 04 00 00 00       	mov    eax,0x4
c001987d:	e9 db 00 00 00       	jmp    c001995d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019882:	83 ec 08             	sub    esp,0x8
c0019885:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001988c:	50                   	push   eax
c001988d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019894:	e8 81 c5 fe ff       	call   c0005e1a <f_readdir>
c0019899:	83 c4 10             	add    esp,0x10
c001989c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00198a3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00198a9:	83 ec 0c             	sub    esp,0xc
c00198ac:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00198b3:	83 c0 1a             	add    eax,0x1a
c00198b6:	50                   	push   eax
c00198b7:	e8 69 6d fe ff       	call   c0000625 <strlen>
c00198bc:	83 c4 10             	add    esp,0x10
c00198bf:	ba 00 00 00 00       	mov    edx,0x0
c00198c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00198c8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00198cc:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00198d3:	0f b6 c0             	movzx  eax,al
c00198d6:	83 e0 10             	and    eax,0x10
c00198d9:	74 07                	je     c00198e2 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00198db:	b8 02 00 00 00       	mov    eax,0x2
c00198e0:	eb 05                	jmp    c00198e7 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00198e2:	b8 01 00 00 00       	mov    eax,0x1
c00198e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198eb:	83 ec 08             	sub    esp,0x8
c00198ee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00198f5:	83 c0 1a             	add    eax,0x1a
c00198f8:	50                   	push   eax
c00198f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00198fd:	83 c0 10             	add    eax,0x10
c0019900:	50                   	push   eax
c0019901:	e8 a1 6d fe ff       	call   c00006a7 <strcpy>
c0019906:	83 c4 10             	add    esp,0x10
c0019909:	83 ec 04             	sub    esp,0x4
c001990c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019913:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019917:	50                   	push   eax
c0019918:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001991f:	e8 ae 6c fe ff       	call   c00005d2 <memcpy>
c0019924:	83 c4 10             	add    esp,0x10
c0019927:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001992e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019934:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001993b:	84 c0                	test   al,al
c001993d:	75 07                	jne    c0019946 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001993f:	b8 07 00 00 00       	mov    eax,0x7
c0019944:	eb 17                	jmp    c001995d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019946:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001994d:	85 c0                	test   eax,eax
c001994f:	75 07                	jne    c0019958 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0019951:	b8 00 00 00 00       	mov    eax,0x0
c0019956:	eb 05                	jmp    c001995d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0019958:	b8 01 00 00 00       	mov    eax,0x1
c001995d:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019963:	c3                   	ret    

c0019964 <FAT::read(void*, unsigned long, void*, int*)>:
c0019964:	83 ec 1c             	sub    esp,0x1c
c0019967:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001996c:	74 07                	je     c0019975 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001996e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019973:	75 07                	jne    c001997c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019975:	b8 04 00 00 00       	mov    eax,0x4
c001997a:	eb 3d                	jmp    c00199b9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001997c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019980:	50                   	push   eax
c0019981:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019985:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019989:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001998d:	e8 68 b7 fe ff       	call   c00050fa <f_read>
c0019992:	83 c4 10             	add    esp,0x10
c0019995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001999d:	89 c2                	mov    edx,eax
c001999f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199a3:	89 10                	mov    DWORD PTR [eax],edx
c00199a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199a9:	85 c0                	test   eax,eax
c00199ab:	75 07                	jne    c00199b4 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00199ad:	b8 00 00 00 00       	mov    eax,0x0
c00199b2:	eb 05                	jmp    c00199b9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00199b4:	b8 01 00 00 00       	mov    eax,0x1
c00199b9:	83 c4 1c             	add    esp,0x1c
c00199bc:	c3                   	ret    
c00199bd:	90                   	nop

c00199be <FAT::write(void*, unsigned long, void*, int*)>:
c00199be:	83 ec 1c             	sub    esp,0x1c
c00199c1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199c6:	74 07                	je     c00199cf <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00199c8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00199cd:	75 07                	jne    c00199d6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00199cf:	b8 04 00 00 00       	mov    eax,0x4
c00199d4:	eb 3d                	jmp    c0019a13 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00199d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199da:	50                   	push   eax
c00199db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199e7:	e8 8e b9 fe ff       	call   c000537a <f_write>
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199f7:	89 c2                	mov    edx,eax
c00199f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199fd:	89 10                	mov    DWORD PTR [eax],edx
c00199ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a03:	85 c0                	test   eax,eax
c0019a05:	75 07                	jne    c0019a0e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019a07:	b8 00 00 00 00       	mov    eax,0x0
c0019a0c:	eb 05                	jmp    c0019a13 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019a0e:	b8 01 00 00 00       	mov    eax,0x1
c0019a13:	83 c4 1c             	add    esp,0x1c
c0019a16:	c3                   	ret    
c0019a17:	90                   	nop

c0019a18 <FAT::close(void*)>:
c0019a18:	83 ec 1c             	sub    esp,0x1c
c0019a1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a20:	75 07                	jne    c0019a29 <FAT::close(void*)+0x11>
c0019a22:	b8 04 00 00 00       	mov    eax,0x4
c0019a27:	eb 36                	jmp    c0019a5f <FAT::close(void*)+0x47>
c0019a29:	83 ec 0c             	sub    esp,0xc
c0019a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a30:	e8 db bd fe ff       	call   c0005810 <f_close>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a3c:	83 ec 0c             	sub    esp,0xc
c0019a3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a43:	e8 ce 21 ff ff       	call   c000bc16 <free>
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a4f:	85 c0                	test   eax,eax
c0019a51:	75 07                	jne    c0019a5a <FAT::close(void*)+0x42>
c0019a53:	b8 00 00 00 00       	mov    eax,0x0
c0019a58:	eb 05                	jmp    c0019a5f <FAT::close(void*)+0x47>
c0019a5a:	b8 01 00 00 00       	mov    eax,0x1
c0019a5f:	83 c4 1c             	add    esp,0x1c
c0019a62:	c3                   	ret    
c0019a63:	90                   	nop

c0019a64 <FAT::closeDir(void*)>:
c0019a64:	83 ec 1c             	sub    esp,0x1c
c0019a67:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a6c:	75 07                	jne    c0019a75 <FAT::closeDir(void*)+0x11>
c0019a6e:	b8 04 00 00 00       	mov    eax,0x4
c0019a73:	eb 36                	jmp    c0019aab <FAT::closeDir(void*)+0x47>
c0019a75:	83 ec 0c             	sub    esp,0xc
c0019a78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a7c:	e8 77 c3 fe ff       	call   c0005df8 <f_closedir>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a88:	83 ec 0c             	sub    esp,0xc
c0019a8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a8f:	e8 82 21 ff ff       	call   c000bc16 <free>
c0019a94:	83 c4 10             	add    esp,0x10
c0019a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a9b:	85 c0                	test   eax,eax
c0019a9d:	75 07                	jne    c0019aa6 <FAT::closeDir(void*)+0x42>
c0019a9f:	b8 00 00 00 00       	mov    eax,0x0
c0019aa4:	eb 05                	jmp    c0019aab <FAT::closeDir(void*)+0x47>
c0019aa6:	b8 01 00 00 00       	mov    eax,0x1
c0019aab:	83 c4 1c             	add    esp,0x1c
c0019aae:	c3                   	ret    
c0019aaf:	90                   	nop

c0019ab0 <FAT::seek(void*, unsigned long long)>:
c0019ab0:	83 ec 2c             	sub    esp,0x2c
c0019ab3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ab7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019abb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ac3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019ac8:	75 07                	jne    c0019ad1 <FAT::seek(void*, unsigned long long)+0x21>
c0019aca:	b8 04 00 00 00       	mov    eax,0x4
c0019acf:	eb 2f                	jmp    c0019b00 <FAT::seek(void*, unsigned long long)+0x50>
c0019ad1:	83 ec 04             	sub    esp,0x4
c0019ad4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019ad8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019adc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ae0:	e8 5a bd fe ff       	call   c000583f <f_lseek>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019af0:	85 c0                	test   eax,eax
c0019af2:	75 07                	jne    c0019afb <FAT::seek(void*, unsigned long long)+0x4b>
c0019af4:	b8 00 00 00 00       	mov    eax,0x0
c0019af9:	eb 05                	jmp    c0019b00 <FAT::seek(void*, unsigned long long)+0x50>
c0019afb:	b8 01 00 00 00       	mov    eax,0x1
c0019b00:	83 c4 2c             	add    esp,0x2c
c0019b03:	c3                   	ret    

c0019b04 <fatWrapperReadDisk>:
c0019b04:	83 ec 1c             	sub    esp,0x1c
c0019b07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b0b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b13:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b23:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c0019b2a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b2e:	83 ec 0c             	sub    esp,0xc
c0019b31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b35:	52                   	push   edx
c0019b36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b3e:	50                   	push   eax
c0019b3f:	e8 22 84 ff ff       	call   c0011f66 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b44:	83 c4 20             	add    esp,0x20
c0019b47:	83 c4 1c             	add    esp,0x1c
c0019b4a:	c3                   	ret    

c0019b4b <fatWrapperWriteDisk>:
c0019b4b:	83 ec 1c             	sub    esp,0x1c
c0019b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019b61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b65:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b6a:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c0019b71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b75:	83 ec 0c             	sub    esp,0xc
c0019b78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b7c:	52                   	push   edx
c0019b7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b85:	50                   	push   eax
c0019b86:	e8 47 84 ff ff       	call   c0011fd2 <LogicalDisk::write(unsigned long long, int, void*)>
c0019b8b:	83 c4 20             	add    esp,0x20
c0019b8e:	83 c4 1c             	add    esp,0x1c
c0019b91:	c3                   	ret    

c0019b92 <fatWrapperIoctl>:
c0019b92:	53                   	push   ebx
c0019b93:	83 ec 28             	sub    esp,0x28
c0019b96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019b9e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ba2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019ba6:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019bab:	75 31                	jne    c0019bde <fatWrapperIoctl+0x4c>
c0019bad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019bb5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bba:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c0019bc1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bc7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019bcd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bd1:	66 89 02             	mov    WORD PTR [edx],ax
c0019bd4:	b8 00 00 00 00       	mov    eax,0x0
c0019bd9:	e9 b2 00 00 00       	jmp    c0019c90 <fatWrapperIoctl+0xfe>
c0019bde:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0019be3:	75 6a                	jne    c0019c4f <fatWrapperIoctl+0xbd>
c0019be5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019be9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019bed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bf2:	8b 04 85 40 3d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc2c0]
c0019bf9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019bff:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c05:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c0b:	89 c8                	mov    eax,ecx
c0019c0d:	89 da                	mov    edx,ebx
c0019c0f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c13:	c1 e0 0a             	shl    eax,0xa
c0019c16:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c1b:	8b 0c 8d 40 3d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdc2c0]
c0019c22:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c28:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c2e:	89 cb                	mov    ebx,ecx
c0019c30:	c1 fb 1f             	sar    ebx,0x1f
c0019c33:	53                   	push   ebx
c0019c34:	51                   	push   ecx
c0019c35:	52                   	push   edx
c0019c36:	50                   	push   eax
c0019c37:	e8 20 4b 00 00       	call   c001e75c <__udivdi3>
c0019c3c:	83 c4 10             	add    esp,0x10
c0019c3f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019c43:	89 01                	mov    DWORD PTR [ecx],eax
c0019c45:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019c48:	b8 00 00 00 00       	mov    eax,0x0
c0019c4d:	eb 41                	jmp    c0019c90 <fatWrapperIoctl+0xfe>
c0019c4f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019c54:	75 07                	jne    c0019c5d <fatWrapperIoctl+0xcb>
c0019c56:	b8 00 00 00 00       	mov    eax,0x0
c0019c5b:	eb 33                	jmp    c0019c90 <fatWrapperIoctl+0xfe>
c0019c5d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019c62:	75 19                	jne    c0019c7d <fatWrapperIoctl+0xeb>
c0019c64:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c70:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019c76:	b8 00 00 00 00       	mov    eax,0x0
c0019c7b:	eb 13                	jmp    c0019c90 <fatWrapperIoctl+0xfe>
c0019c7d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019c82:	75 07                	jne    c0019c8b <fatWrapperIoctl+0xf9>
c0019c84:	b8 00 00 00 00       	mov    eax,0x0
c0019c89:	eb 05                	jmp    c0019c90 <fatWrapperIoctl+0xfe>
c0019c8b:	b8 04 00 00 00       	mov    eax,0x4
c0019c90:	83 c4 28             	add    esp,0x28
c0019c93:	5b                   	pop    ebx
c0019c94:	c3                   	ret    
c0019c95:	90                   	nop

c0019c96 <FAT::FAT()>:
c0019c96:	83 ec 1c             	sub    esp,0x1c
c0019c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c9d:	83 ec 0c             	sub    esp,0xc
c0019ca0:	50                   	push   eax
c0019ca1:	e8 42 56 ff ff       	call   c000f2e8 <Filesystem::Filesystem()>
c0019ca6:	83 c4 10             	add    esp,0x10
c0019ca9:	ba b8 22 02 c0       	mov    edx,0xc00222b8
c0019cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cb2:	89 10                	mov    DWORD PTR [eax],edx
c0019cb4:	c7 05 c0 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024bc0,0x0
c0019cbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cc6:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019ccb:	7f 15                	jg     c0019ce2 <FAT::FAT()+0x4c>
c0019ccd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cd1:	c7 04 85 e0 4b 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdb420],0xffffffff
c0019cdc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019ce0:	eb e4                	jmp    c0019cc6 <FAT::FAT()+0x30>
c0019ce2:	90                   	nop
c0019ce3:	83 c4 1c             	add    esp,0x1c
c0019ce6:	c3                   	ret    
c0019ce7:	90                   	nop

c0019ce8 <FAT::fixFilepath(char*)>:
c0019ce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cec:	8a 00                	mov    al,BYTE PTR [eax]
c0019cee:	3c 40                	cmp    al,0x40
c0019cf0:	7e 2c                	jle    c0019d1e <FAT::fixFilepath(char*)+0x36>
c0019cf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cf6:	8a 00                	mov    al,BYTE PTR [eax]
c0019cf8:	83 e8 41             	sub    eax,0x41
c0019cfb:	88 c2                	mov    dl,al
c0019cfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d01:	88 10                	mov    BYTE PTR [eax],dl
c0019d03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d07:	8a 00                	mov    al,BYTE PTR [eax]
c0019d09:	0f be c0             	movsx  eax,al
c0019d0c:	8b 04 85 e0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb420]
c0019d13:	83 c0 30             	add    eax,0x30
c0019d16:	88 c2                	mov    dl,al
c0019d18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d1c:	88 10                	mov    BYTE PTR [eax],dl
c0019d1e:	90                   	nop
c0019d1f:	c3                   	ret    

c0019d20 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d26:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d2e:	74 0a                	je     c0019d3a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019d30:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d38:	75 0a                	jne    c0019d44 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019d3a:	b8 04 00 00 00       	mov    eax,0x4
c0019d3f:	e9 fd 00 00 00       	jmp    c0019e41 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019d44:	83 ec 08             	sub    esp,0x8
c0019d47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d4e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d52:	50                   	push   eax
c0019d53:	e8 4f 69 fe ff       	call   c00006a7 <strcpy>
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	83 ec 08             	sub    esp,0x8
c0019d5e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d62:	50                   	push   eax
c0019d63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d6a:	e8 79 ff ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c0019d6f:	83 c4 10             	add    esp,0x10
c0019d72:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019d7a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d81:	83 e0 01             	and    eax,0x1
c0019d84:	74 08                	je     c0019d8e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019d86:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019d8e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d95:	83 e0 04             	and    eax,0x4
c0019d98:	74 10                	je     c0019daa <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019d9a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019da2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019daa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019db1:	83 e0 02             	and    eax,0x2
c0019db4:	74 08                	je     c0019dbe <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019db6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019dbe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dc5:	83 e0 08             	and    eax,0x8
c0019dc8:	74 08                	je     c0019dd2 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019dca:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0019dd2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019dd9:	83 e0 10             	and    eax,0x10
c0019ddc:	74 08                	je     c0019de6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0019dde:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019de6:	83 ec 0c             	sub    esp,0xc
c0019de9:	68 50 02 00 00       	push   0x250
c0019dee:	e8 13 1e ff ff       	call   c000bc06 <malloc>
c0019df3:	83 c4 10             	add    esp,0x10
c0019df6:	89 c2                	mov    edx,eax
c0019df8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dff:	89 10                	mov    DWORD PTR [eax],edx
c0019e01:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019e09:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e12:	83 ec 04             	sub    esp,0x4
c0019e15:	52                   	push   edx
c0019e16:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e1a:	52                   	push   edx
c0019e1b:	50                   	push   eax
c0019e1c:	e8 9d ae fe ff       	call   c0004cbe <f_open>
c0019e21:	83 c4 10             	add    esp,0x10
c0019e24:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019e2b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019e33:	74 07                	je     c0019e3c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019e35:	b8 01 00 00 00       	mov    eax,0x1
c0019e3a:	eb 05                	jmp    c0019e41 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019e3c:	b8 00 00 00 00       	mov    eax,0x0
c0019e41:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e47:	c3                   	ret    

c0019e48 <FAT::openDir(char const*, void**)>:
c0019e48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e56:	74 0a                	je     c0019e62 <FAT::openDir(char const*, void**)+0x1a>
c0019e58:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e60:	75 07                	jne    c0019e69 <FAT::openDir(char const*, void**)+0x21>
c0019e62:	b8 04 00 00 00       	mov    eax,0x4
c0019e67:	eb 7d                	jmp    c0019ee6 <FAT::openDir(char const*, void**)+0x9e>
c0019e69:	83 ec 08             	sub    esp,0x8
c0019e6c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e73:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e77:	50                   	push   eax
c0019e78:	e8 2a 68 fe ff       	call   c00006a7 <strcpy>
c0019e7d:	83 c4 10             	add    esp,0x10
c0019e80:	83 ec 08             	sub    esp,0x8
c0019e83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e87:	50                   	push   eax
c0019e88:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e8f:	e8 54 fe ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c0019e94:	83 c4 10             	add    esp,0x10
c0019e97:	83 ec 0c             	sub    esp,0xc
c0019e9a:	6a 4c                	push   0x4c
c0019e9c:	e8 65 1d ff ff       	call   c000bc06 <malloc>
c0019ea1:	83 c4 10             	add    esp,0x10
c0019ea4:	89 c2                	mov    edx,eax
c0019ea6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ead:	89 10                	mov    DWORD PTR [eax],edx
c0019eaf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019eb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eb8:	83 ec 08             	sub    esp,0x8
c0019ebb:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019ebf:	52                   	push   edx
c0019ec0:	50                   	push   eax
c0019ec1:	e8 30 be fe ff       	call   c0005cf6 <f_opendir>
c0019ec6:	83 c4 10             	add    esp,0x10
c0019ec9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ed0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019ed8:	74 07                	je     c0019ee1 <FAT::openDir(char const*, void**)+0x99>
c0019eda:	b8 01 00 00 00       	mov    eax,0x1
c0019edf:	eb 05                	jmp    c0019ee6 <FAT::openDir(char const*, void**)+0x9e>
c0019ee1:	b8 00 00 00 00       	mov    eax,0x0
c0019ee6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eec:	c3                   	ret    
c0019eed:	90                   	nop

c0019eee <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019eee:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019ef4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019efc:	75 0a                	jne    c0019f08 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019efe:	b8 04 00 00 00       	mov    eax,0x4
c0019f03:	e9 c9 00 00 00       	jmp    c0019fd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f08:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019f10:	75 0a                	jne    c0019f1c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019f12:	b8 04 00 00 00       	mov    eax,0x4
c0019f17:	e9 b5 00 00 00       	jmp    c0019fd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f1c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019f24:	75 0a                	jne    c0019f30 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019f26:	b8 04 00 00 00       	mov    eax,0x4
c0019f2b:	e9 a1 00 00 00       	jmp    c0019fd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019f30:	83 ec 08             	sub    esp,0x8
c0019f33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f3a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f41:	50                   	push   eax
c0019f42:	e8 60 67 fe ff       	call   c00006a7 <strcpy>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	83 ec 08             	sub    esp,0x8
c0019f4d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f54:	50                   	push   eax
c0019f55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f5c:	e8 87 fd ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c0019f61:	83 c4 10             	add    esp,0x10
c0019f64:	83 ec 08             	sub    esp,0x8
c0019f67:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f6b:	50                   	push   eax
c0019f6c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f73:	50                   	push   eax
c0019f74:	e8 3c bf fe ff       	call   c0005eb5 <f_stat>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f83:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f8a:	85 c0                	test   eax,eax
c0019f8c:	74 07                	je     c0019f95 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019f8e:	83 f8 04             	cmp    eax,0x4
c0019f91:	74 32                	je     c0019fc5 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019f93:	eb 37                	jmp    c0019fcc <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019f95:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f99:	0f b6 c0             	movzx  eax,al
c0019f9c:	83 e0 10             	and    eax,0x10
c0019f9f:	0f 95 c2             	setne  dl
c0019fa2:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019fa9:	88 10                	mov    BYTE PTR [eax],dl
c0019fab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019fae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019fb2:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019fb9:	89 01                	mov    DWORD PTR [ecx],eax
c0019fbb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019fbe:	b8 00 00 00 00       	mov    eax,0x0
c0019fc3:	eb 0c                	jmp    c0019fd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019fc5:	b8 02 00 00 00       	mov    eax,0x2
c0019fca:	eb 05                	jmp    c0019fd1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019fcc:	b8 01 00 00 00       	mov    eax,0x1
c0019fd1:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fd7:	c3                   	ret    

c0019fd8 <FAT::unlink(char const*)>:
c0019fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fe6:	75 07                	jne    c0019fef <FAT::unlink(char const*)+0x17>
c0019fe8:	b8 04 00 00 00       	mov    eax,0x4
c0019fed:	eb 5c                	jmp    c001a04b <FAT::unlink(char const*)+0x73>
c0019fef:	83 ec 08             	sub    esp,0x8
c0019ff2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ff9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ffd:	50                   	push   eax
c0019ffe:	e8 a4 66 fe ff       	call   c00006a7 <strcpy>
c001a003:	83 c4 10             	add    esp,0x10
c001a006:	83 ec 08             	sub    esp,0x8
c001a009:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a00d:	50                   	push   eax
c001a00e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a015:	e8 ce fc ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c001a01a:	83 c4 10             	add    esp,0x10
c001a01d:	83 ec 0c             	sub    esp,0xc
c001a020:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a024:	50                   	push   eax
c001a025:	e8 dd c1 fe ff       	call   c0006207 <f_unlink>
c001a02a:	83 c4 10             	add    esp,0x10
c001a02d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a034:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a03b:	85 c0                	test   eax,eax
c001a03d:	75 07                	jne    c001a046 <FAT::unlink(char const*)+0x6e>
c001a03f:	b8 00 00 00 00       	mov    eax,0x0
c001a044:	eb 05                	jmp    c001a04b <FAT::unlink(char const*)+0x73>
c001a046:	b8 01 00 00 00       	mov    eax,0x1
c001a04b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a051:	c3                   	ret    

c001a052 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a052:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a058:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a05f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a066:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a06a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a06e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a076:	75 0a                	jne    c001a082 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a078:	b8 04 00 00 00       	mov    eax,0x4
c001a07d:	e9 1c 01 00 00       	jmp    c001a19e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a082:	83 ec 08             	sub    esp,0x8
c001a085:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a08c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a090:	50                   	push   eax
c001a091:	e8 11 66 fe ff       	call   c00006a7 <strcpy>
c001a096:	83 c4 10             	add    esp,0x10
c001a099:	83 ec 08             	sub    esp,0x8
c001a09c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a0a0:	50                   	push   eax
c001a0a1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a0a8:	e8 3b fc ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a0b8:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a0c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0c5:	83 e0 01             	and    eax,0x1
c001a0c8:	74 08                	je     c001a0d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001a0ca:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a0d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0d7:	83 e0 02             	and    eax,0x2
c001a0da:	74 08                	je     c001a0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001a0dc:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a0e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0e9:	83 e0 04             	and    eax,0x4
c001a0ec:	74 08                	je     c001a0f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001a0ee:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a0f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0fb:	83 e0 08             	and    eax,0x8
c001a0fe:	74 08                	je     c001a108 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001a100:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a108:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a10d:	83 e0 01             	and    eax,0x1
c001a110:	74 08                	je     c001a11a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a112:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a11a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a11f:	83 e0 02             	and    eax,0x2
c001a122:	74 08                	je     c001a12c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001a124:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a12c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a131:	83 e0 04             	and    eax,0x4
c001a134:	74 08                	je     c001a13e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001a136:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a13e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a143:	83 e0 08             	and    eax,0x8
c001a146:	74 08                	je     c001a150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001a148:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a150:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a157:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a15e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a166:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a16e:	83 ec 04             	sub    esp,0x4
c001a171:	52                   	push   edx
c001a172:	50                   	push   eax
c001a173:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a177:	50                   	push   eax
c001a178:	e8 2c c7 fe ff       	call   c00068a9 <f_chmod>
c001a17d:	83 c4 10             	add    esp,0x10
c001a180:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a187:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a18e:	85 c0                	test   eax,eax
c001a190:	75 07                	jne    c001a199 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001a192:	b8 00 00 00 00       	mov    eax,0x0
c001a197:	eb 05                	jmp    c001a19e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001a199:	b8 01 00 00 00       	mov    eax,0x1
c001a19e:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1a4:	c3                   	ret    
c001a1a5:	90                   	nop

c001a1a6 <FAT::rename(char const*, char const*)>:
c001a1a6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1ac:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1b4:	74 0a                	je     c001a1c0 <FAT::rename(char const*, char const*)+0x1a>
c001a1b6:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1be:	75 0a                	jne    c001a1ca <FAT::rename(char const*, char const*)+0x24>
c001a1c0:	b8 04 00 00 00       	mov    eax,0x4
c001a1c5:	e9 98 00 00 00       	jmp    c001a262 <FAT::rename(char const*, char const*)+0xbc>
c001a1ca:	83 ec 08             	sub    esp,0x8
c001a1cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1d4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1db:	50                   	push   eax
c001a1dc:	e8 c6 64 fe ff       	call   c00006a7 <strcpy>
c001a1e1:	83 c4 10             	add    esp,0x10
c001a1e4:	83 ec 08             	sub    esp,0x8
c001a1e7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a1ee:	50                   	push   eax
c001a1ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1f6:	e8 ed fa ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	83 ec 08             	sub    esp,0x8
c001a201:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a208:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a20c:	50                   	push   eax
c001a20d:	e8 95 64 fe ff       	call   c00006a7 <strcpy>
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	83 ec 08             	sub    esp,0x8
c001a218:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a21c:	50                   	push   eax
c001a21d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a224:	e8 bf fa ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c001a229:	83 c4 10             	add    esp,0x10
c001a22c:	83 ec 08             	sub    esp,0x8
c001a22f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a233:	50                   	push   eax
c001a234:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a23b:	50                   	push   eax
c001a23c:	e8 75 c3 fe ff       	call   c00065b6 <f_rename>
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a24b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a252:	85 c0                	test   eax,eax
c001a254:	75 07                	jne    c001a25d <FAT::rename(char const*, char const*)+0xb7>
c001a256:	b8 00 00 00 00       	mov    eax,0x0
c001a25b:	eb 05                	jmp    c001a262 <FAT::rename(char const*, char const*)+0xbc>
c001a25d:	b8 01 00 00 00       	mov    eax,0x1
c001a262:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a268:	c3                   	ret    
c001a269:	90                   	nop

c001a26a <FAT::mkdir(char const*)>:
c001a26a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a270:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a278:	75 07                	jne    c001a281 <FAT::mkdir(char const*)+0x17>
c001a27a:	b8 04 00 00 00       	mov    eax,0x4
c001a27f:	eb 5c                	jmp    c001a2dd <FAT::mkdir(char const*)+0x73>
c001a281:	83 ec 08             	sub    esp,0x8
c001a284:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a28b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a28f:	50                   	push   eax
c001a290:	e8 12 64 fe ff       	call   c00006a7 <strcpy>
c001a295:	83 c4 10             	add    esp,0x10
c001a298:	83 ec 08             	sub    esp,0x8
c001a29b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a29f:	50                   	push   eax
c001a2a0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2a7:	e8 3c fa ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	83 ec 0c             	sub    esp,0xc
c001a2b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2b6:	50                   	push   eax
c001a2b7:	e8 ce c0 fe ff       	call   c000638a <f_mkdir>
c001a2bc:	83 c4 10             	add    esp,0x10
c001a2bf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a2c6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a2cd:	85 c0                	test   eax,eax
c001a2cf:	75 07                	jne    c001a2d8 <FAT::mkdir(char const*)+0x6e>
c001a2d1:	b8 00 00 00 00       	mov    eax,0x0
c001a2d6:	eb 05                	jmp    c001a2dd <FAT::mkdir(char const*)+0x73>
c001a2d8:	b8 01 00 00 00       	mov    eax,0x1
c001a2dd:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a2e3:	c3                   	ret    

c001a2e4 <FAT::exists(char const*)>:
c001a2e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a2ea:	83 ec 08             	sub    esp,0x8
c001a2ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2f8:	50                   	push   eax
c001a2f9:	e8 a9 63 fe ff       	call   c00006a7 <strcpy>
c001a2fe:	83 c4 10             	add    esp,0x10
c001a301:	83 ec 08             	sub    esp,0x8
c001a304:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a308:	50                   	push   eax
c001a309:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a310:	e8 d3 f9 ff ff       	call   c0019ce8 <FAT::fixFilepath(char*)>
c001a315:	83 c4 10             	add    esp,0x10
c001a318:	83 ec 08             	sub    esp,0x8
c001a31b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a322:	50                   	push   eax
c001a323:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a327:	50                   	push   eax
c001a328:	e8 88 bb fe ff       	call   c0005eb5 <f_stat>
c001a32d:	83 c4 10             	add    esp,0x10
c001a330:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a337:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a33e:	85 c0                	test   eax,eax
c001a340:	75 04                	jne    c001a346 <FAT::exists(char const*)+0x62>
c001a342:	b0 01                	mov    al,0x1
c001a344:	eb 02                	jmp    c001a348 <FAT::exists(char const*)+0x64>
c001a346:	b0 00                	mov    al,0x0
c001a348:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a34e:	c3                   	ret    
c001a34f:	90                   	nop

c001a350 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a350:	b8 08 00 00 00       	mov    eax,0x8
c001a355:	c3                   	ret    

c001a356 <ISO9660::seek(void*, unsigned long long)>:
c001a356:	53                   	push   ebx
c001a357:	b8 04 00 00 00       	mov    eax,0x4
c001a35c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a360:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a364:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a368:	85 d2                	test   edx,edx
c001a36a:	74 17                	je     c001a383 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a36c:	89 c8                	mov    eax,ecx
c001a36e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001a371:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001a374:	b8 01 00 00 00       	mov    eax,0x1
c001a379:	73 08                	jae    c001a383 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001a37b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001a37e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001a381:	31 c0                	xor    eax,eax
c001a383:	5b                   	pop    ebx
c001a384:	c3                   	ret    
c001a385:	90                   	nop

c001a386 <ISO9660::tell(void*, unsigned long long*)>:
c001a386:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a38a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a38e:	85 d2                	test   edx,edx
c001a390:	74 12                	je     c001a3a4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a392:	85 c0                	test   eax,eax
c001a394:	74 0e                	je     c001a3a4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001a396:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a399:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001a39c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a39f:	89 10                	mov    DWORD PTR [eax],edx
c001a3a1:	31 c0                	xor    eax,eax
c001a3a3:	c3                   	ret    
c001a3a4:	b8 04 00 00 00       	mov    eax,0x4
c001a3a9:	c3                   	ret    

c001a3aa <ISO9660::getName()>:
c001a3aa:	b8 14 23 02 c0       	mov    eax,0xc0022314
c001a3af:	c3                   	ret    

c001a3b0 <ISO9660::stat(void*, unsigned long long*)>:
c001a3b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3b8:	85 d2                	test   edx,edx
c001a3ba:	74 12                	je     c001a3ce <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a3bc:	85 c0                	test   eax,eax
c001a3be:	74 0e                	je     c001a3ce <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001a3c0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001a3c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001a3c6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001a3c9:	89 10                	mov    DWORD PTR [eax],edx
c001a3cb:	31 c0                	xor    eax,eax
c001a3cd:	c3                   	ret    
c001a3ce:	b8 04 00 00 00       	mov    eax,0x4
c001a3d3:	c3                   	ret    

c001a3d4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a3d4:	b8 01 00 00 00       	mov    eax,0x1
c001a3d9:	c3                   	ret    

c001a3da <ISO9660::unlink(char const*)>:
c001a3da:	b8 01 00 00 00       	mov    eax,0x1
c001a3df:	c3                   	ret    

c001a3e0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a3e0:	b8 01 00 00 00       	mov    eax,0x1
c001a3e5:	c3                   	ret    

c001a3e6 <ISO9660::rename(char const*, char const*)>:
c001a3e6:	b8 01 00 00 00       	mov    eax,0x1
c001a3eb:	c3                   	ret    

c001a3ec <ISO9660::mkdir(char const*)>:
c001a3ec:	b8 01 00 00 00       	mov    eax,0x1
c001a3f1:	c3                   	ret    

c001a3f2 <ISO9660::close(void*)>:
c001a3f2:	83 ec 0c             	sub    esp,0xc
c001a3f5:	b8 04 00 00 00       	mov    eax,0x4
c001a3fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a3fe:	85 d2                	test   edx,edx
c001a400:	74 0e                	je     c001a410 <ISO9660::close(void*)+0x1e>
c001a402:	83 ec 0c             	sub    esp,0xc
c001a405:	52                   	push   edx
c001a406:	e8 0b 18 ff ff       	call   c000bc16 <free>
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	31 c0                	xor    eax,eax
c001a410:	83 c4 0c             	add    esp,0xc
c001a413:	c3                   	ret    

c001a414 <ISO9660::closeDir(void*)>:
c001a414:	83 ec 0c             	sub    esp,0xc
c001a417:	b8 04 00 00 00       	mov    eax,0x4
c001a41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a420:	85 d2                	test   edx,edx
c001a422:	74 0e                	je     c001a432 <ISO9660::closeDir(void*)+0x1e>
c001a424:	83 ec 0c             	sub    esp,0xc
c001a427:	52                   	push   edx
c001a428:	e8 e9 17 ff ff       	call   c000bc16 <free>
c001a42d:	83 c4 10             	add    esp,0x10
c001a430:	31 c0                	xor    eax,eax
c001a432:	83 c4 0c             	add    esp,0xc
c001a435:	c3                   	ret    

c001a436 <ISO9660::~ISO9660()>:
c001a436:	83 ec 0c             	sub    esp,0xc
c001a439:	ba 68 23 02 c0       	mov    edx,0xc0022368
c001a43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a442:	89 10                	mov    DWORD PTR [eax],edx
c001a444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a448:	83 ec 0c             	sub    esp,0xc
c001a44b:	50                   	push   eax
c001a44c:	e8 bb 4e ff ff       	call   c000f30c <Filesystem::~Filesystem()>
c001a451:	83 c4 10             	add    esp,0x10
c001a454:	90                   	nop
c001a455:	83 c4 0c             	add    esp,0xc
c001a458:	c3                   	ret    
c001a459:	90                   	nop

c001a45a <ISO9660::~ISO9660()>:
c001a45a:	83 ec 0c             	sub    esp,0xc
c001a45d:	83 ec 0c             	sub    esp,0xc
c001a460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a464:	e8 cd ff ff ff       	call   c001a436 <ISO9660::~ISO9660()>
c001a469:	83 c4 10             	add    esp,0x10
c001a46c:	83 ec 08             	sub    esp,0x8
c001a46f:	6a 08                	push   0x8
c001a471:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a475:	e8 89 4a ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	83 c4 0c             	add    esp,0xc
c001a480:	c3                   	ret    

c001a481 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001a481:	55                   	push   ebp
c001a482:	31 c9                	xor    ecx,ecx
c001a484:	57                   	push   edi
c001a485:	56                   	push   esi
c001a486:	53                   	push   ebx
c001a487:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001a48b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a48f:	89 eb                	mov    ebx,ebp
c001a491:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001a495:	39 ce                	cmp    esi,ecx
c001a497:	7e 17                	jle    c001a4b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001a499:	31 d2                	xor    edx,edx
c001a49b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001a49f:	7d 13                	jge    c001a4b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001a4a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a4a5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a4a8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001a4ab:	75 0d                	jne    c001a4ba <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001a4ad:	42                   	inc    edx
c001a4ae:	eb eb                	jmp    c001a49b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001a4b0:	31 c0                	xor    eax,eax
c001a4b2:	eb 0a                	jmp    c001a4be <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4b4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001a4b8:	eb 04                	jmp    c001a4be <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001a4ba:	41                   	inc    ecx
c001a4bb:	43                   	inc    ebx
c001a4bc:	eb d7                	jmp    c001a495 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001a4be:	5b                   	pop    ebx
c001a4bf:	5e                   	pop    esi
c001a4c0:	5f                   	pop    edi
c001a4c1:	5d                   	pop    ebp
c001a4c2:	c3                   	ret    

c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a4c3:	56                   	push   esi
c001a4c4:	53                   	push   ebx
c001a4c5:	52                   	push   edx
c001a4c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a4ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4d2:	39 0d c0 4c 02 c0    	cmp    DWORD PTR ds:0xc0024cc0,ecx
c001a4d8:	75 08                	jne    c001a4e2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001a4da:	38 05 68 31 02 c0    	cmp    BYTE PTR ds:0xc0023168,al
c001a4e0:	74 2b                	je     c001a50d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001a4e2:	83 ec 0c             	sub    esp,0xc
c001a4e5:	a2 68 31 02 c0       	mov    ds:0xc0023168,al
c001a4ea:	68 e0 4c 02 c0       	push   0xc0024ce0
c001a4ef:	0f be c0             	movsx  eax,al
c001a4f2:	6a 01                	push   0x1
c001a4f4:	89 0d c0 4c 02 c0    	mov    DWORD PTR ds:0xc0024cc0,ecx
c001a4fa:	31 db                	xor    ebx,ebx
c001a4fc:	53                   	push   ebx
c001a4fd:	51                   	push   ecx
c001a4fe:	ff 34 85 3c 3c 02 c0 	push   DWORD PTR [eax*4-0x3ffdc3c4]
c001a505:	e8 5c 7a ff ff       	call   c0011f66 <LogicalDisk::read(unsigned long long, int, void*)>
c001a50a:	83 c4 20             	add    esp,0x20
c001a50d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a515:	c7 44 24 14 e0 4c 02 c0 	mov    DWORD PTR [esp+0x14],0xc0024ce0
c001a51d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a521:	58                   	pop    eax
c001a522:	5b                   	pop    ebx
c001a523:	5e                   	pop    esi
c001a524:	e9 a9 60 fe ff       	jmp    c00005d2 <memcpy>
c001a529:	90                   	nop

c001a52a <ISO9660::tryMount(LogicalDisk*, int)>:
c001a52a:	81 ec 10 08 00 00    	sub    esp,0x810
c001a530:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a537:	83 c0 41             	add    eax,0x41
c001a53a:	0f be c0             	movsx  eax,al
c001a53d:	50                   	push   eax
c001a53e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a542:	50                   	push   eax
c001a543:	6a 10                	push   0x10
c001a545:	e8 79 ff ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	31 c0                	xor    eax,eax
c001a54f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a554:	75 1d                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a556:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a55b:	75 16                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a55d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a562:	75 0f                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a564:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a569:	75 08                	jne    c001a573 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a56b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a570:	0f 94 c0             	sete   al
c001a573:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a579:	c3                   	ret    

c001a57a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a57a:	55                   	push   ebp
c001a57b:	57                   	push   edi
c001a57c:	56                   	push   esi
c001a57d:	53                   	push   ebx
c001a57e:	81 ec 34 08 00 00    	sub    esp,0x834
c001a584:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a58b:	55                   	push   ebp
c001a58c:	68 2f 23 02 c0       	push   0xc002232f
c001a591:	e8 4d 4a ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001a596:	83 c4 10             	add    esp,0x10
c001a599:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a5a1:	0f 84 06 02 00 00    	je     c001a7ad <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5a7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a5af:	0f 84 f8 01 00 00    	je     c001a7ad <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a5b5:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a5bc:	b8 01 00 00 00       	mov    eax,0x1
c001a5c1:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a5c5:	0f 85 e7 01 00 00    	jne    c001a7b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a5cb:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a5ce:	31 d2                	xor    edx,edx
c001a5d0:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a5d3:	89 e9                	mov    ecx,ebp
c001a5d5:	89 d3                	mov    ebx,edx
c001a5d7:	01 f1                	add    ecx,esi
c001a5d9:	11 fb                	adc    ebx,edi
c001a5db:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a5df:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a5e3:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a5ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a5ed:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a5f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a5f4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a5f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a5fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a600:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a604:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a608:	72 19                	jb     c001a623 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a60a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a612:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a616:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a621:	eb 13                	jmp    c001a636 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a623:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a627:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a62b:	29 f0                	sub    eax,esi
c001a62d:	19 fa                	sbb    edx,edi
c001a62f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a632:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a636:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a63d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a640:	8b 00                	mov    eax,DWORD PTR [eax]
c001a642:	53                   	push   ebx
c001a643:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a647:	c1 e0 0b             	shl    eax,0xb
c001a64a:	01 c6                	add    esi,eax
c001a64c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a653:	11 d7                	adc    edi,edx
c001a655:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a659:	89 fa                	mov    edx,edi
c001a65b:	50                   	push   eax
c001a65c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a660:	50                   	push   eax
c001a661:	89 f0                	mov    eax,esi
c001a663:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a667:	50                   	push   eax
c001a668:	e8 56 fe ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a66d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a674:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a678:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a67b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a67f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	b8 00 08 00 00       	mov    eax,0x800
c001a68d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a691:	29 d0                	sub    eax,edx
c001a693:	39 c1                	cmp    ecx,eax
c001a695:	83 db 00             	sbb    ebx,0x0
c001a698:	7d 19                	jge    c001a6b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a69a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a69f:	75 16                	jne    c001a6b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a6a1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a6a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a6ae:	e9 f6 00 00 00       	jmp    c001a7a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a6b3:	89 c5                	mov    ebp,eax
c001a6b5:	eb 03                	jmp    c001a6ba <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a6b7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a6ba:	51                   	push   ecx
c001a6bb:	55                   	push   ebp
c001a6bc:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a6c0:	50                   	push   eax
c001a6c1:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a6c8:	e8 05 5f fe ff       	call   c00005d2 <memcpy>
c001a6cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6d5:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a6dc:	01 e8                	add    eax,ebp
c001a6de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6e2:	89 e8                	mov    eax,ebp
c001a6e4:	99                   	cdq    
c001a6e5:	01 ee                	add    esi,ebp
c001a6e7:	11 d7                	adc    edi,edx
c001a6e9:	29 e9                	sub    ecx,ebp
c001a6eb:	19 d3                	sbb    ebx,edx
c001a6ed:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a6f1:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a6fd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a700:	b8 00 00 00 00       	mov    eax,0x0
c001a705:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a709:	7d 3f                	jge    c001a74a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a70b:	52                   	push   edx
c001a70c:	89 fa                	mov    edx,edi
c001a70e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a715:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a719:	50                   	push   eax
c001a71a:	89 f0                	mov    eax,esi
c001a71c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a720:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a724:	50                   	push   eax
c001a725:	e8 99 fd ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a72a:	81 c6 00 08 00 00    	add    esi,0x800
c001a730:	83 d7 00             	adc    edi,0x0
c001a733:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a73b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a743:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a748:	eb ab                	jmp    c001a6f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a74e:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a751:	74 34                	je     c001a787 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a753:	89 fa                	mov    edx,edi
c001a755:	50                   	push   eax
c001a756:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a75d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a761:	50                   	push   eax
c001a762:	89 f0                	mov    eax,esi
c001a764:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a768:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a76c:	55                   	push   ebp
c001a76d:	50                   	push   eax
c001a76e:	e8 50 fd ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a773:	83 c4 0c             	add    esp,0xc
c001a776:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a77a:	55                   	push   ebp
c001a77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a77f:	e8 4e 5e fe ff       	call   c00005d2 <memcpy>
c001a784:	83 c4 10             	add    esp,0x10
c001a787:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a78e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a796:	89 38                	mov    DWORD PTR [eax],edi
c001a798:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a79f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7a3:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a7a6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a7a9:	31 c0                	xor    eax,eax
c001a7ab:	eb 05                	jmp    c001a7b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a7ad:	b8 04 00 00 00       	mov    eax,0x4
c001a7b2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a7b8:	5b                   	pop    ebx
c001a7b9:	5e                   	pop    esi
c001a7ba:	5f                   	pop    edi
c001a7bb:	5d                   	pop    ebp
c001a7bc:	c3                   	ret    
c001a7bd:	90                   	nop

c001a7be <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a7be:	55                   	push   ebp
c001a7bf:	57                   	push   edi
c001a7c0:	56                   	push   esi
c001a7c1:	53                   	push   ebx
c001a7c2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a7c8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a7cf:	85 f6                	test   esi,esi
c001a7d1:	0f 84 64 02 00 00    	je     c001aa3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a7d7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a7df:	0f 84 56 02 00 00    	je     c001aa3b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001a7e5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a7e8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a7eb:	75 0a                	jne    c001a7f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a7ed:	b8 07 00 00 00       	mov    eax,0x7
c001a7f2:	e9 49 02 00 00       	jmp    c001aa40 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001a7f7:	50                   	push   eax
c001a7f8:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a7fc:	50                   	push   eax
c001a7fd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a804:	53                   	push   ebx
c001a805:	8b 06                	mov    eax,DWORD PTR [esi]
c001a807:	c1 e0 0b             	shl    eax,0xb
c001a80a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a80d:	c1 e8 0b             	shr    eax,0xb
c001a810:	50                   	push   eax
c001a811:	e8 ad fc ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a816:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	89 c1                	mov    ecx,eax
c001a81e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a821:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a827:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a82a:	84 db                	test   bl,bl
c001a82c:	0f 85 90 00 00 00    	jne    c001a8c2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a832:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a838:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a83e:	29 c7                	sub    edi,eax
c001a840:	89 fb                	mov    ebx,edi
c001a842:	c1 fb 1f             	sar    ebx,0x1f
c001a845:	01 f8                	add    eax,edi
c001a847:	11 da                	adc    edx,ebx
c001a849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a84d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a851:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a854:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a857:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a85a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a85d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a860:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a864:	89 d8                	mov    eax,ebx
c001a866:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a869:	ba 00 00 00 00       	mov    edx,0x0
c001a86e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a872:	b8 00 00 00 00       	mov    eax,0x0
c001a877:	73 0b                	jae    c001a884 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a879:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a87c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a880:	29 f8                	sub    eax,edi
c001a882:	19 da                	sbb    edx,ebx
c001a884:	89 d3                	mov    ebx,edx
c001a886:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a889:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a88c:	09 c3                	or     ebx,eax
c001a88e:	0f 84 59 ff ff ff    	je     c001a7ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a894:	55                   	push   ebp
c001a895:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a899:	50                   	push   eax
c001a89a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a8a1:	53                   	push   ebx
c001a8a2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a8a4:	c1 e0 0b             	shl    eax,0xb
c001a8a7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a8ab:	c1 e8 0b             	shr    eax,0xb
c001a8ae:	50                   	push   eax
c001a8af:	e8 0f fc ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a8b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	25 ff 07 00 00       	and    eax,0x7ff
c001a8bf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a8c2:	57                   	push   edi
c001a8c3:	6a 28                	push   0x28
c001a8c5:	6a 00                	push   0x0
c001a8c7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8cb:	50                   	push   eax
c001a8cc:	e8 37 5d fe ff       	call   c0000608 <memset>
c001a8d1:	31 d2                	xor    edx,edx
c001a8d3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a8d6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a8dc:	89 f8                	mov    eax,edi
c001a8de:	83 c0 21             	add    eax,0x21
c001a8e1:	83 d2 00             	adc    edx,0x0
c001a8e4:	89 c7                	mov    edi,eax
c001a8e6:	89 d5                	mov    ebp,edx
c001a8e8:	83 c4 10             	add    esp,0x10
c001a8eb:	31 c9                	xor    ecx,ecx
c001a8ed:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a8f4:	83 f9 28             	cmp    ecx,0x28
c001a8f7:	88 04 24             	mov    BYTE PTR [esp],al
c001a8fa:	0f 94 c2             	sete   dl
c001a8fd:	88 d0                	mov    al,dl
c001a8ff:	ba ff 07 00 00       	mov    edx,0x7ff
c001a904:	39 fa                	cmp    edx,edi
c001a906:	ba 00 00 00 00       	mov    edx,0x0
c001a90b:	19 ea                	sbb    edx,ebp
c001a90d:	0f 92 c2             	setb   dl
c001a910:	09 c2                	or     edx,eax
c001a912:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a916:	0f 94 c0             	sete   al
c001a919:	08 d0                	or     al,dl
c001a91b:	75 16                	jne    c001a933 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a91d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a921:	74 10                	je     c001a933 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a923:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a926:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a92a:	41                   	inc    ecx
c001a92b:	83 c7 01             	add    edi,0x1
c001a92e:	83 d5 00             	adc    ebp,0x0
c001a931:	eb ba                	jmp    c001a8ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a933:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001a93a:	83 ec 0c             	sub    esp,0xc
c001a93d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a941:	57                   	push   edi
c001a942:	e8 de 5c fe ff       	call   c0000625 <strlen>
c001a947:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a94f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a953:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a95a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a95d:	5a                   	pop    edx
c001a95e:	25 ff 07 00 00       	and    eax,0x7ff
c001a963:	01 c8                	add    eax,ecx
c001a965:	59                   	pop    ecx
c001a966:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a96c:	83 e0 02             	and    eax,0x2
c001a96f:	3c 01                	cmp    al,0x1
c001a971:	19 c0                	sbb    eax,eax
c001a973:	83 c0 02             	add    eax,0x2
c001a976:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a97a:	57                   	push   edi
c001a97b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a97f:	50                   	push   eax
c001a980:	e8 22 5d fe ff       	call   c00006a7 <strcpy>
c001a985:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	84 c0                	test   al,al
c001a98e:	75 21                	jne    c001a9b1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001a990:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a998:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9a0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9a8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a9af:	eb 28                	jmp    c001a9d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9b1:	fe c8                	dec    al
c001a9b3:	75 24                	jne    c001a9d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001a9b5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a9bd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a9c5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a9cd:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a9d4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a9d9:	0f b6 fb             	movzx  edi,bl
c001a9dc:	31 db                	xor    ebx,ebx
c001a9de:	50                   	push   eax
c001a9df:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a9e6:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a9ea:	50                   	push   eax
c001a9eb:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a9f2:	e8 db 5b fe ff       	call   c00005d2 <memcpy>
c001a9f7:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a9fe:	89 f9                	mov    ecx,edi
c001aa00:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001aa06:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001aa09:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001aa0c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001aa0f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001aa12:	83 c4 10             	add    esp,0x10
c001aa15:	39 c7                	cmp    edi,eax
c001aa17:	89 df                	mov    edi,ebx
c001aa19:	19 d7                	sbb    edi,edx
c001aa1b:	72 10                	jb     c001aa2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001aa1d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001aa24:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001aa2b:	eb 0a                	jmp    c001aa37 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001aa2d:	29 c8                	sub    eax,ecx
c001aa2f:	19 da                	sbb    edx,ebx
c001aa31:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001aa34:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001aa37:	31 c0                	xor    eax,eax
c001aa39:	eb 05                	jmp    c001aa40 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001aa3b:	b8 04 00 00 00       	mov    eax,0x4
c001aa40:	81 c4 5c 09 00 00    	add    esp,0x95c
c001aa46:	5b                   	pop    ebx
c001aa47:	5e                   	pop    esi
c001aa48:	5f                   	pop    edi
c001aa49:	5d                   	pop    ebp
c001aa4a:	c3                   	ret    

c001aa4b <readRoot(unsigned int*, unsigned int*, char)>:
c001aa4b:	81 ec 40 08 00 00    	sub    esp,0x840
c001aa51:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001aa59:	50                   	push   eax
c001aa5a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001aa5e:	50                   	push   eax
c001aa5f:	6a 10                	push   0x10
c001aa61:	e8 5d fa ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa66:	83 c4 0c             	add    esp,0xc
c001aa69:	6a 22                	push   0x22
c001aa6b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001aa72:	50                   	push   eax
c001aa73:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001aa77:	50                   	push   eax
c001aa78:	e8 55 5b fe ff       	call   c00005d2 <memcpy>
c001aa7d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001aa84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aa88:	89 10                	mov    DWORD PTR [eax],edx
c001aa8a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001aa91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa95:	89 10                	mov    DWORD PTR [eax],edx
c001aa97:	b0 01                	mov    al,0x1
c001aa99:	81 c4 4c 08 00 00    	add    esp,0x84c
c001aa9f:	c3                   	ret    

c001aaa0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001aaa0:	55                   	push   ebp
c001aaa1:	57                   	push   edi
c001aaa2:	56                   	push   esi
c001aaa3:	53                   	push   ebx
c001aaa4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aaaa:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001aab1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001aab8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aabc:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001aac0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001aac4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aac8:	75 03                	jne    c001aacd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aaca:	83 c3 02             	add    ebx,0x2
c001aacd:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001aad0:	75 03                	jne    c001aad5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001aad2:	43                   	inc    ebx
c001aad3:	eb f8                	jmp    c001aacd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001aad5:	51                   	push   ecx
c001aad6:	68 00 01 00 00       	push   0x100
c001aadb:	6a 00                	push   0x0
c001aadd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aae1:	50                   	push   eax
c001aae2:	e8 21 5b fe ff       	call   c0000608 <memset>
c001aae7:	83 c4 10             	add    esp,0x10
c001aaea:	31 d2                	xor    edx,edx
c001aaec:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001aaef:	84 c0                	test   al,al
c001aaf1:	74 21                	je     c001ab14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001aaf3:	3c 2f                	cmp    al,0x2f
c001aaf5:	75 0b                	jne    c001ab02 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001aaf7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001aafb:	bd 01 00 00 00       	mov    ebp,0x1
c001ab00:	eb 14                	jmp    c001ab16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001ab02:	8d 48 9f             	lea    ecx,[eax-0x61]
c001ab05:	80 f9 19             	cmp    cl,0x19
c001ab08:	77 03                	ja     c001ab0d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001ab0a:	83 e8 20             	sub    eax,0x20
c001ab0d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001ab11:	42                   	inc    edx
c001ab12:	eb d8                	jmp    c001aaec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001ab14:	31 ed                	xor    ebp,ebp
c001ab16:	83 ec 0c             	sub    esp,0xc
c001ab19:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001ab20:	e8 e1 10 ff ff       	call   c000bc06 <malloc>
c001ab25:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001ab2c:	89 c6                	mov    esi,eax
c001ab2e:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001ab34:	c1 ef 0b             	shr    edi,0xb
c001ab37:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ab3e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ab42:	83 c4 10             	add    esp,0x10
c001ab45:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ab4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab4e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001ab55:	74 28                	je     c001ab7f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001ab57:	52                   	push   edx
c001ab58:	57                   	push   edi
c001ab59:	50                   	push   eax
c001ab5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab5e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ab65:	e8 59 f9 ff ff       	call   c001a4c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ab6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab6e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001ab75:	05 00 08 00 00       	add    eax,0x800
c001ab7a:	83 c4 10             	add    esp,0x10
c001ab7d:	eb cb                	jmp    c001ab4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001ab7f:	83 ec 0c             	sub    esp,0xc
c001ab82:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab86:	57                   	push   edi
c001ab87:	e8 99 5a fe ff       	call   c0000625 <strlen>
c001ab8c:	50                   	push   eax
c001ab8d:	57                   	push   edi
c001ab8e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ab95:	56                   	push   esi
c001ab96:	e8 e6 f8 ff ff       	call   c001a481 <__memmem(unsigned char*, int, unsigned char*, int)>
c001ab9b:	83 c4 20             	add    esp,0x20
c001ab9e:	85 c0                	test   eax,eax
c001aba0:	75 13                	jne    c001abb5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001aba2:	83 ec 0c             	sub    esp,0xc
c001aba5:	56                   	push   esi
c001aba6:	e8 6b 10 ff ff       	call   c000bc16 <free>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	31 c0                	xor    eax,eax
c001abb0:	e9 b3 00 00 00       	jmp    c001ac68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001abb5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001abb9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001abbd:	c1 e7 08             	shl    edi,0x8
c001abc0:	c1 e2 10             	shl    edx,0x10
c001abc3:	09 d7                	or     edi,edx
c001abc5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001abc9:	09 d7                	or     edi,edx
c001abcb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001abcf:	c1 e2 18             	shl    edx,0x18
c001abd2:	09 d7                	or     edi,edx
c001abd4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001abd8:	89 d1                	mov    ecx,edx
c001abda:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001abde:	c1 e1 08             	shl    ecx,0x8
c001abe1:	c1 e2 10             	shl    edx,0x10
c001abe4:	09 ca                	or     edx,ecx
c001abe6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001abea:	09 ca                	or     edx,ecx
c001abec:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001abf0:	c1 e1 18             	shl    ecx,0x18
c001abf3:	09 ca                	or     edx,ecx
c001abf5:	89 e9                	mov    ecx,ebp
c001abf7:	84 c9                	test   cl,cl
c001abf9:	74 3c                	je     c001ac37 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001abfb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001abff:	83 ec 0c             	sub    esp,0xc
c001ac02:	56                   	push   esi
c001ac03:	e8 0e 10 ff ff       	call   c000bc16 <free>
c001ac08:	83 c4 0c             	add    esp,0xc
c001ac0b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac12:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ac17:	50                   	push   eax
c001ac18:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac1f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ac26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac2a:	52                   	push   edx
c001ac2b:	57                   	push   edi
c001ac2c:	53                   	push   ebx
c001ac2d:	e8 6e fe ff ff       	call   c001aaa0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ac32:	83 c4 20             	add    esp,0x20
c001ac35:	eb 31                	jmp    c001ac68 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ac37:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ac3a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ac41:	d0 e8                	shr    al,1
c001ac43:	89 3b                	mov    DWORD PTR [ebx],edi
c001ac45:	83 e0 01             	and    eax,0x1
c001ac48:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	89 13                	mov    DWORD PTR [ebx],edx
c001ac54:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001ac5b:	89 03                	mov    DWORD PTR [ebx],eax
c001ac5d:	56                   	push   esi
c001ac5e:	e8 b3 0f ff ff       	call   c000bc16 <free>
c001ac63:	83 c4 10             	add    esp,0x10
c001ac66:	b0 01                	mov    al,0x1
c001ac68:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac6e:	5b                   	pop    ebx
c001ac6f:	5e                   	pop    esi
c001ac70:	5f                   	pop    edi
c001ac71:	5d                   	pop    ebp
c001ac72:	c3                   	ret    

c001ac73 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001ac73:	55                   	push   ebp
c001ac74:	57                   	push   edi
c001ac75:	56                   	push   esi
c001ac76:	53                   	push   ebx
c001ac77:	83 ec 20             	sub    esp,0x20
c001ac7a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac7e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ac82:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac8e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ac96:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001ac9b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001aca1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001aca7:	57                   	push   edi
c001aca8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acac:	50                   	push   eax
c001acad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acb1:	50                   	push   eax
c001acb2:	e8 94 fd ff ff       	call   c001aa4b <readRoot(unsigned int*, unsigned int*, char)>
c001acb7:	5a                   	pop    edx
c001acb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acbc:	e8 64 59 fe ff       	call   c0000625 <strlen>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	83 f8 03             	cmp    eax,0x3
c001acc7:	77 17                	ja     c001ace0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001acc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001accd:	89 03                	mov    DWORD PTR [ebx],eax
c001accf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acd3:	89 06                	mov    DWORD PTR [esi],eax
c001acd5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001acdc:	b0 01                	mov    al,0x1
c001acde:	eb 19                	jmp    c001acf9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001ace0:	50                   	push   eax
c001ace1:	55                   	push   ebp
c001ace2:	57                   	push   edi
c001ace3:	56                   	push   esi
c001ace4:	53                   	push   ebx
c001ace5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ace9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aced:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001acf1:	e8 aa fd ff ff       	call   c001aaa0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001acf6:	83 c4 20             	add    esp,0x20
c001acf9:	83 c4 1c             	add    esp,0x1c
c001acfc:	5b                   	pop    ebx
c001acfd:	5e                   	pop    esi
c001acfe:	5f                   	pop    edi
c001acff:	5d                   	pop    ebp
c001ad00:	c3                   	ret    
c001ad01:	90                   	nop

c001ad02 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ad02:	57                   	push   edi
c001ad03:	56                   	push   esi
c001ad04:	53                   	push   ebx
c001ad05:	83 ec 10             	sub    esp,0x10
c001ad08:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ad0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ad10:	85 ff                	test   edi,edi
c001ad12:	74 7b                	je     c001ad8f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad14:	85 f6                	test   esi,esi
c001ad16:	74 77                	je     c001ad8f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ad18:	83 ec 0c             	sub    esp,0xc
c001ad1b:	6a 1c                	push   0x1c
c001ad1d:	e8 e4 0e ff ff       	call   c000bc06 <malloc>
c001ad22:	89 07                	mov    DWORD PTR [edi],eax
c001ad24:	89 c3                	mov    ebx,eax
c001ad26:	58                   	pop    eax
c001ad27:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad2b:	50                   	push   eax
c001ad2c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ad2f:	50                   	push   eax
c001ad30:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad34:	50                   	push   eax
c001ad35:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad39:	50                   	push   eax
c001ad3a:	56                   	push   esi
c001ad3b:	e8 33 ff ff ff       	call   c001ac73 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ad40:	83 c4 20             	add    esp,0x20
c001ad43:	84 c0                	test   al,al
c001ad45:	74 07                	je     c001ad4e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ad47:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad4c:	74 0b                	je     c001ad59 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad4e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ad52:	b8 01 00 00 00       	mov    eax,0x1
c001ad57:	eb 3b                	jmp    c001ad94 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad5d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ad61:	89 03                	mov    DWORD PTR [ebx],eax
c001ad63:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ad6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ad75:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ad7c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ad7f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ad86:	8a 06                	mov    al,BYTE PTR [esi]
c001ad88:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ad8b:	31 c0                	xor    eax,eax
c001ad8d:	eb 05                	jmp    c001ad94 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ad8f:	b8 04 00 00 00       	mov    eax,0x4
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	5b                   	pop    ebx
c001ad98:	5e                   	pop    esi
c001ad99:	5f                   	pop    edi
c001ad9a:	c3                   	ret    
c001ad9b:	90                   	nop

c001ad9c <ISO9660::exists(char const*)>:
c001ad9c:	83 ec 28             	sub    esp,0x28
c001ad9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ada3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ada7:	52                   	push   edx
c001ada8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001adab:	52                   	push   edx
c001adac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001adb0:	52                   	push   edx
c001adb1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001adb5:	52                   	push   edx
c001adb6:	50                   	push   eax
c001adb7:	e8 b7 fe ff ff       	call   c001ac73 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001adbc:	83 c4 3c             	add    esp,0x3c
c001adbf:	c3                   	ret    

c001adc0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001adc0:	56                   	push   esi
c001adc1:	53                   	push   ebx
c001adc2:	83 ec 14             	sub    esp,0x14
c001adc5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001adc9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001adcd:	85 db                	test   ebx,ebx
c001adcf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001add3:	0f 94 c2             	sete   dl
c001add6:	85 f6                	test   esi,esi
c001add8:	0f 94 c0             	sete   al
c001addb:	08 c2                	or     dl,al
c001addd:	75 68                	jne    c001ae47 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001addf:	85 c9                	test   ecx,ecx
c001ade1:	74 64                	je     c001ae47 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ade3:	83 ec 0c             	sub    esp,0xc
c001ade6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ade9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aded:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001adf3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001adfa:	50                   	push   eax
c001adfb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001adfe:	50                   	push   eax
c001adff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae03:	50                   	push   eax
c001ae04:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae08:	50                   	push   eax
c001ae09:	51                   	push   ecx
c001ae0a:	e8 64 fe ff ff       	call   c001ac73 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae0f:	83 c4 20             	add    esp,0x20
c001ae12:	ba 01 00 00 00       	mov    edx,0x1
c001ae17:	84 c0                	test   al,al
c001ae19:	74 31                	je     c001ae4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae1f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae26:	89 03                	mov    DWORD PTR [ebx],eax
c001ae28:	ba 00 00 00 00       	mov    edx,0x0
c001ae2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae31:	85 c0                	test   eax,eax
c001ae33:	0f 95 06             	setne  BYTE PTR [esi]
c001ae36:	74 14                	je     c001ae4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae38:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ae3e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae45:	eb 05                	jmp    c001ae4c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ae47:	ba 04 00 00 00       	mov    edx,0x4
c001ae4c:	83 c4 14             	add    esp,0x14
c001ae4f:	89 d0                	mov    eax,edx
c001ae51:	5b                   	pop    ebx
c001ae52:	5e                   	pop    esi
c001ae53:	c3                   	ret    

c001ae54 <ISO9660::openDir(char const*, void**)>:
c001ae54:	57                   	push   edi
c001ae55:	56                   	push   esi
c001ae56:	53                   	push   ebx
c001ae57:	83 ec 10             	sub    esp,0x10
c001ae5a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ae5e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ae62:	85 ff                	test   edi,edi
c001ae64:	0f 84 95 00 00 00    	je     c001aeff <ISO9660::openDir(char const*, void**)+0xab>
c001ae6a:	85 f6                	test   esi,esi
c001ae6c:	0f 84 8d 00 00 00    	je     c001aeff <ISO9660::openDir(char const*, void**)+0xab>
c001ae72:	83 ec 0c             	sub    esp,0xc
c001ae75:	6a 1c                	push   0x1c
c001ae77:	e8 8a 0d ff ff       	call   c000bc06 <malloc>
c001ae7c:	89 07                	mov    DWORD PTR [edi],eax
c001ae7e:	89 c3                	mov    ebx,eax
c001ae80:	59                   	pop    ecx
c001ae81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae85:	50                   	push   eax
c001ae86:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ae89:	50                   	push   eax
c001ae8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae8e:	50                   	push   eax
c001ae8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ae93:	50                   	push   eax
c001ae94:	56                   	push   esi
c001ae95:	e8 d9 fd ff ff       	call   c001ac73 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ae9a:	83 c4 20             	add    esp,0x20
c001ae9d:	84 c0                	test   al,al
c001ae9f:	74 07                	je     c001aea8 <ISO9660::openDir(char const*, void**)+0x54>
c001aea1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aea6:	75 21                	jne    c001aec9 <ISO9660::openDir(char const*, void**)+0x75>
c001aea8:	0f b6 c0             	movzx  eax,al
c001aeab:	52                   	push   edx
c001aeac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aeb0:	50                   	push   eax
c001aeb1:	68 42 23 02 c0       	push   0xc0022342
c001aeb6:	e8 28 41 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001aebb:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	b8 01 00 00 00       	mov    eax,0x1
c001aec7:	eb 3b                	jmp    c001af04 <ISO9660::openDir(char const*, void**)+0xb0>
c001aec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aecd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001aed1:	89 03                	mov    DWORD PTR [ebx],eax
c001aed3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001aeda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aede:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001aee5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aeec:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001aeef:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001aef6:	8a 06                	mov    al,BYTE PTR [esi]
c001aef8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001aefb:	31 c0                	xor    eax,eax
c001aefd:	eb 05                	jmp    c001af04 <ISO9660::openDir(char const*, void**)+0xb0>
c001aeff:	b8 04 00 00 00       	mov    eax,0x4
c001af04:	83 c4 10             	add    esp,0x10
c001af07:	5b                   	pop    ebx
c001af08:	5e                   	pop    esi
c001af09:	5f                   	pop    edi
c001af0a:	c3                   	ret    
c001af0b:	90                   	nop

c001af0c <ISO9660::ISO9660()>:
c001af0c:	83 ec 0c             	sub    esp,0xc
c001af0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af13:	83 ec 0c             	sub    esp,0xc
c001af16:	50                   	push   eax
c001af17:	e8 cc 43 ff ff       	call   c000f2e8 <Filesystem::Filesystem()>
c001af1c:	83 c4 10             	add    esp,0x10
c001af1f:	ba 68 23 02 c0       	mov    edx,0xc0022368
c001af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af28:	89 10                	mov    DWORD PTR [eax],edx
c001af2a:	90                   	nop
c001af2b:	83 c4 0c             	add    esp,0xc
c001af2e:	c3                   	ret    
c001af2f:	90                   	nop

c001af30 <SoundChannel::~SoundChannel()>:
c001af30:	83 ec 0c             	sub    esp,0xc
c001af33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af3a:	83 ec 0c             	sub    esp,0xc
c001af3d:	50                   	push   eax
c001af3e:	e8 d3 0c ff ff       	call   c000bc16 <free>
c001af43:	83 c4 10             	add    esp,0x10
c001af46:	90                   	nop
c001af47:	83 c4 0c             	add    esp,0xc
c001af4a:	c3                   	ret    
c001af4b:	90                   	nop

c001af4c <SoundChannel::setSpeed(float)>:
c001af4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af50:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001af54:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001af57:	c3                   	ret    

c001af58 <SoundChannel::getSpeed()>:
c001af58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af5c:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001af5f:	c3                   	ret    

c001af60 <SoundChannel::setVolume(int)>:
c001af60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af64:	83 f8 64             	cmp    eax,0x64
c001af67:	7e 05                	jle    c001af6e <SoundChannel::setVolume(int)+0xe>
c001af69:	b8 64 00 00 00       	mov    eax,0x64
c001af6e:	85 c0                	test   eax,eax
c001af70:	79 02                	jns    c001af74 <SoundChannel::setVolume(int)+0x14>
c001af72:	31 c0                	xor    eax,eax
c001af74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001af78:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001af7b:	c3                   	ret    

c001af7c <SoundChannel::getVolume()>:
c001af7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af80:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001af83:	c3                   	ret    

c001af84 <SoundChannel::pause()>:
c001af84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af88:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001af8c:	c3                   	ret    
c001af8d:	90                   	nop

c001af8e <SoundChannel::SoundChannel(int, int, int, int)>:
c001af8e:	83 ec 1c             	sub    esp,0x1c
c001af91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af95:	e8 ea ff ff ff       	call   c001af84 <SoundChannel::pause()>
c001af9a:	83 c4 04             	add    esp,0x4
c001af9d:	6a 50                	push   0x50
c001af9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afa3:	e8 b8 ff ff ff       	call   c001af60 <SoundChannel::setVolume(int)>
c001afa8:	83 c4 08             	add    esp,0x8
c001afab:	d9 e8                	fld1   
c001afad:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001afb1:	d9 1c 24             	fstp   DWORD PTR [esp]
c001afb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afb8:	e8 8f ff ff ff       	call   c001af4c <SoundChannel::setSpeed(float)>
c001afbd:	83 c4 08             	add    esp,0x8
c001afc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afc4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afc8:	89 10                	mov    DWORD PTR [eax],edx
c001afca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001afd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afd9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001afdd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001afe0:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001afe5:	75 23                	jne    c001b00a <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001afe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afeb:	8b 10                	mov    edx,DWORD PTR [eax]
c001afed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aff4:	0f af c2             	imul   eax,edx
c001aff7:	85 c0                	test   eax,eax
c001aff9:	79 03                	jns    c001affe <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001affb:	83 c0 03             	add    eax,0x3
c001affe:	c1 f8 02             	sar    eax,0x2
c001b001:	05 a0 0f 00 00       	add    eax,0xfa0
c001b006:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b00e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b012:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b019:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b024:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b02f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b032:	c1 e0 02             	shl    eax,0x2
c001b035:	83 ec 0c             	sub    esp,0xc
c001b038:	50                   	push   eax
c001b039:	e8 c8 0b ff ff       	call   c000bc06 <malloc>
c001b03e:	83 c4 10             	add    esp,0x10
c001b041:	89 c2                	mov    edx,eax
c001b043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b047:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b04a:	83 ec 04             	sub    esp,0x4
c001b04d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b051:	50                   	push   eax
c001b052:	6a 01                	push   0x1
c001b054:	6a 04                	push   0x4
c001b056:	e8 f0 d7 fe ff       	call   c000884b <src_new>
c001b05b:	83 c4 10             	add    esp,0x10
c001b05e:	89 c2                	mov    edx,eax
c001b060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b064:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b067:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b06b:	85 c0                	test   eax,eax
c001b06d:	74 10                	je     c001b07f <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001b06f:	83 ec 0c             	sub    esp,0xc
c001b072:	68 c4 23 02 c0       	push   0xc00223c4
c001b077:	e8 fc 9b ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	90                   	nop
c001b080:	83 c4 1c             	add    esp,0x1c
c001b083:	c3                   	ret    

c001b084 <SoundChannel::play()>:
c001b084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b088:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b08c:	c3                   	ret    
c001b08d:	90                   	nop

c001b08e <SoundChannel::paused()>:
c001b08e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b092:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b095:	c3                   	ret    

c001b096 <SoundChannel::getSampleRate()>:
c001b096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b09a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b09c:	c3                   	ret    
c001b09d:	90                   	nop

c001b09e <SoundChannel::getBits()>:
c001b09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b0a5:	c3                   	ret    

c001b0a6 <SoundChannel::getBufferUsed()>:
c001b0a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0aa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b0ad:	c3                   	ret    

c001b0ae <SoundChannel::getBufferSize()>:
c001b0ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0b2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0b5:	c3                   	ret    

c001b0b6 <SoundChannel::unbuffer(float*, int, int)>:
c001b0b6:	53                   	push   ebx
c001b0b7:	83 ec 40             	sub    esp,0x40
c001b0ba:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b0be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b0c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b0c9:	db 03                	fild   DWORD PTR [ebx]
c001b0cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0cf:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b0d3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b0d6:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b0d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0dd:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b0e1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b0e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b0e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b0ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0f5:	50                   	push   eax
c001b0f6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b0f9:	e8 07 d4 fe ff       	call   c0008505 <src_process>
c001b0fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b102:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b105:	83 c4 0c             	add    esp,0xc
c001b108:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b10b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b10e:	29 d0                	sub    eax,edx
c001b110:	c1 e0 02             	shl    eax,0x2
c001b113:	50                   	push   eax
c001b114:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b117:	50                   	push   eax
c001b118:	51                   	push   ecx
c001b119:	e8 7c 54 fe ff       	call   c000059a <memmove>
c001b11e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b122:	83 c4 48             	add    esp,0x48
c001b125:	5b                   	pop    ebx
c001b126:	c3                   	ret    
c001b127:	90                   	nop

c001b128 <SoundChannel::buffer8(unsigned char*, int)>:
c001b128:	53                   	push   ebx
c001b129:	31 c0                	xor    eax,eax
c001b12b:	83 ec 08             	sub    esp,0x8
c001b12e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b132:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b135:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b138:	74 35                	je     c001b16f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b13a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b13e:	7d 2f                	jge    c001b16f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b140:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b144:	d9 05 e0 23 02 c0    	fld    DWORD PTR ds:0xc00223e0
c001b14a:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b14e:	40                   	inc    eax
c001b14f:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b154:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b157:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b15b:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b15e:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b161:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b164:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b167:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b16a:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b16d:	eb c9                	jmp    c001b138 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b16f:	83 c4 08             	add    esp,0x8
c001b172:	5b                   	pop    ebx
c001b173:	c3                   	ret    

c001b174 <SoundDevice::SoundDevice(char const*)>:
c001b174:	83 ec 1c             	sub    esp,0x1c
c001b177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b17b:	83 ec 08             	sub    esp,0x8
c001b17e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b182:	50                   	push   eax
c001b183:	e8 56 54 ff ff       	call   c00105de <Device::Device(char const*)>
c001b188:	83 c4 10             	add    esp,0x10
c001b18b:	ba ec 23 02 c0       	mov    edx,0xc00223ec
c001b190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b194:	89 10                	mov    DWORD PTR [eax],edx
c001b196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b19a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b1a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1a8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b1b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1ba:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b1bf:	7f 19                	jg     c001b1da <SoundDevice::SoundDevice(char const*)+0x66>
c001b1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1c9:	83 c2 54             	add    edx,0x54
c001b1cc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b1d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b1d8:	eb e0                	jmp    c001b1ba <SoundDevice::SoundDevice(char const*)+0x46>
c001b1da:	90                   	nop
c001b1db:	83 c4 1c             	add    esp,0x1c
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <SoundDevice::~SoundDevice()>:
c001b1e0:	53                   	push   ebx
c001b1e1:	83 ec 18             	sub    esp,0x18
c001b1e4:	ba ec 23 02 c0       	mov    edx,0xc00223ec
c001b1e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1ed:	89 10                	mov    DWORD PTR [eax],edx
c001b1ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b1f7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b1fc:	7f 46                	jg     c001b244 <SoundDevice::~SoundDevice()+0x64>
c001b1fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b202:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b206:	83 c2 54             	add    edx,0x54
c001b209:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b20d:	85 c0                	test   eax,eax
c001b20f:	74 2d                	je     c001b23e <SoundDevice::~SoundDevice()+0x5e>
c001b211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b219:	83 c2 54             	add    edx,0x54
c001b21c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b220:	85 db                	test   ebx,ebx
c001b222:	74 1a                	je     c001b23e <SoundDevice::~SoundDevice()+0x5e>
c001b224:	83 ec 0c             	sub    esp,0xc
c001b227:	53                   	push   ebx
c001b228:	e8 03 fd ff ff       	call   c001af30 <SoundChannel::~SoundChannel()>
c001b22d:	83 c4 10             	add    esp,0x10
c001b230:	83 ec 08             	sub    esp,0x8
c001b233:	6a 2c                	push   0x2c
c001b235:	53                   	push   ebx
c001b236:	e8 c8 3c ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001b23b:	83 c4 10             	add    esp,0x10
c001b23e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b242:	eb b3                	jmp    c001b1f7 <SoundDevice::~SoundDevice()+0x17>
c001b244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b248:	83 ec 0c             	sub    esp,0xc
c001b24b:	50                   	push   eax
c001b24c:	e8 3f 50 ff ff       	call   c0010290 <Device::~Device()>
c001b251:	83 c4 10             	add    esp,0x10
c001b254:	90                   	nop
c001b255:	83 c4 18             	add    esp,0x18
c001b258:	5b                   	pop    ebx
c001b259:	c3                   	ret    

c001b25a <SoundDevice::~SoundDevice()>:
c001b25a:	83 ec 0c             	sub    esp,0xc
c001b25d:	83 ec 0c             	sub    esp,0xc
c001b260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b264:	e8 77 ff ff ff       	call   c001b1e0 <SoundDevice::~SoundDevice()>
c001b269:	83 c4 10             	add    esp,0x10
c001b26c:	83 ec 08             	sub    esp,0x8
c001b26f:	68 e4 01 00 00       	push   0x1e4
c001b274:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b278:	e8 86 3c ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001b27d:	83 c4 10             	add    esp,0x10
c001b280:	83 c4 0c             	add    esp,0xc
c001b283:	c3                   	ret    

c001b284 <SoundDevice::getFreeChannelNum()>:
c001b284:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b288:	31 c0                	xor    eax,eax
c001b28a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b292:	74 09                	je     c001b29d <SoundDevice::getFreeChannelNum()+0x19>
c001b294:	40                   	inc    eax
c001b295:	83 f8 20             	cmp    eax,0x20
c001b298:	75 f0                	jne    c001b28a <SoundDevice::getFreeChannelNum()+0x6>
c001b29a:	83 c8 ff             	or     eax,0xffffffff
c001b29d:	c3                   	ret    

c001b29e <SoundDevice::addChannel(SoundChannel*)>:
c001b29e:	56                   	push   esi
c001b29f:	53                   	push   ebx
c001b2a0:	51                   	push   ecx
c001b2a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2a9:	53                   	push   ebx
c001b2aa:	e8 d5 ff ff ff       	call   c001b284 <SoundDevice::getFreeChannelNum()>
c001b2af:	5a                   	pop    edx
c001b2b0:	83 f8 ff             	cmp    eax,0xffffffff
c001b2b3:	74 51                	je     c001b306 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2b5:	85 f6                	test   esi,esi
c001b2b7:	74 4d                	je     c001b306 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b2b9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b2c0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b2c7:	75 30                	jne    c001b2f9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b2c9:	83 ec 0c             	sub    esp,0xc
c001b2cc:	56                   	push   esi
c001b2cd:	e8 c4 fd ff ff       	call   c001b096 <SoundChannel::getSampleRate()>
c001b2d2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b2d8:	89 34 24             	mov    DWORD PTR [esp],esi
c001b2db:	e8 be fd ff ff       	call   c001b09e <SoundChannel::getBits()>
c001b2e0:	83 c4 0c             	add    esp,0xc
c001b2e3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b2e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2eb:	50                   	push   eax
c001b2ec:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b2f2:	53                   	push   ebx
c001b2f3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b2f6:	83 c4 10             	add    esp,0x10
c001b2f9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b2ff:	b8 01 00 00 00       	mov    eax,0x1
c001b304:	eb 03                	jmp    c001b309 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b306:	83 c8 ff             	or     eax,0xffffffff
c001b309:	5a                   	pop    edx
c001b30a:	5b                   	pop    ebx
c001b30b:	5e                   	pop    esi
c001b30c:	c3                   	ret    
c001b30d:	90                   	nop

c001b30e <SoundDevice::removeChannel(int)>:
c001b30e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b316:	83 fa 1f             	cmp    edx,0x1f
c001b319:	77 23                	ja     c001b33e <SoundDevice::removeChannel(int)+0x30>
c001b31b:	8d 14 90             	lea    edx,[eax+edx*4]
c001b31e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b325:	74 17                	je     c001b33e <SoundDevice::removeChannel(int)+0x30>
c001b327:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b331:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b337:	75 05                	jne    c001b33e <SoundDevice::removeChannel(int)+0x30>
c001b339:	8b 00                	mov    eax,DWORD PTR [eax]
c001b33b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b33e:	c3                   	ret    
c001b33f:	90                   	nop

c001b340 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b340:	56                   	push   esi
c001b341:	53                   	push   ebx
c001b342:	31 db                	xor    ebx,ebx
c001b344:	83 ec 14             	sub    esp,0x14
c001b347:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b34b:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b34f:	7d 55                	jge    c001b3a6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b351:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b355:	d9 e8                	fld1   
c001b357:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b35a:	d8 0d 1c 24 02 c0    	fmul   DWORD PTR ds:0xc002241c
c001b360:	d8 0d 20 24 02 c0    	fmul   DWORD PTR ds:0xc0022420
c001b366:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001b36a:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b36e:	d8 15 24 24 02 c0    	fcom   DWORD PTR ds:0xc0022424
c001b374:	df e0                	fnstsw ax
c001b376:	9e                   	sahf   
c001b377:	72 08                	jb     c001b381 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001b379:	dd d8                	fstp   st(0)
c001b37b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001b37f:	eb 22                	jmp    c001b3a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b381:	d9 ee                	fldz   
c001b383:	d8 d9                	fcomp  st(1)
c001b385:	df e0                	fnstsw ax
c001b387:	9e                   	sahf   
c001b388:	72 08                	jb     c001b392 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001b38a:	dd d8                	fstp   st(0)
c001b38c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001b390:	eb 11                	jmp    c001b3a3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001b392:	83 ec 10             	sub    esp,0x10
c001b395:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b398:	e8 0f 36 00 00       	call   c001e9ac <lrintf>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001b3a3:	43                   	inc    ebx
c001b3a4:	eb a5                	jmp    c001b34b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001b3a6:	83 c4 14             	add    esp,0x14
c001b3a9:	5b                   	pop    ebx
c001b3aa:	5e                   	pop    esi
c001b3ab:	c3                   	ret    

c001b3ac <SoundDevice::getAudio(int, float*, float*)>:
c001b3ac:	55                   	push   ebp
c001b3ad:	57                   	push   edi
c001b3ae:	56                   	push   esi
c001b3af:	53                   	push   ebx
c001b3b0:	31 db                	xor    ebx,ebx
c001b3b2:	83 ec 20             	sub    esp,0x20
c001b3b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b3b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b3bd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b3c1:	c1 e0 02             	shl    eax,0x2
c001b3c4:	50                   	push   eax
c001b3c5:	6a 00                	push   0x0
c001b3c7:	55                   	push   ebp
c001b3c8:	e8 3b 52 fe ff       	call   c0000608 <memset>
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b3d4:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001b3db:	85 c0                	test   eax,eax
c001b3dd:	0f 84 94 00 00 00    	je     c001b477 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b3e3:	83 ec 0c             	sub    esp,0xc
c001b3e6:	50                   	push   eax
c001b3e7:	e8 a2 fc ff ff       	call   c001b08e <SoundChannel::paused()>
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	84 c0                	test   al,al
c001b3f1:	0f 85 80 00 00 00    	jne    c001b477 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b3f7:	83 ec 0c             	sub    esp,0xc
c001b3fa:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b401:	e8 76 fb ff ff       	call   c001af7c <SoundChannel::getVolume()>
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	85 c0                	test   eax,eax
c001b40b:	74 6a                	je     c001b477 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b40d:	83 ec 0c             	sub    esp,0xc
c001b410:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b417:	e8 60 fb ff ff       	call   c001af7c <SoundChannel::getVolume()>
c001b41c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b420:	d9 05 28 24 02 c0    	fld    DWORD PTR ds:0xc0022428
c001b426:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001b42a:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001b42e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001b432:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001b438:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001b43c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001b443:	e8 6e fc ff ff       	call   c001b0b6 <SoundChannel::unbuffer(float*, int, int)>
c001b448:	83 c4 20             	add    esp,0x20
c001b44b:	31 d2                	xor    edx,edx
c001b44d:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001b451:	39 c2                	cmp    edx,eax
c001b453:	7d 1a                	jge    c001b46f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001b455:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001b459:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001b45c:	d8 c9                	fmul   st,st(1)
c001b45e:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001b464:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001b468:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001b46c:	42                   	inc    edx
c001b46d:	eb e2                	jmp    c001b451 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001b46f:	dd d8                	fstp   st(0)
c001b471:	39 c7                	cmp    edi,eax
c001b473:	7e 02                	jle    c001b477 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001b475:	89 c7                	mov    edi,eax
c001b477:	43                   	inc    ebx
c001b478:	83 fb 20             	cmp    ebx,0x20
c001b47b:	0f 85 53 ff ff ff    	jne    c001b3d4 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001b481:	83 c4 1c             	add    esp,0x1c
c001b484:	89 f8                	mov    eax,edi
c001b486:	5b                   	pop    ebx
c001b487:	5e                   	pop    esi
c001b488:	5f                   	pop    edi
c001b489:	5d                   	pop    ebp
c001b48a:	c3                   	ret    
c001b48b:	90                   	nop

c001b48c <PCI::open(int, int, void*)>:
c001b48c:	83 ec 18             	sub    esp,0x18
c001b48f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b493:	8b 10                	mov    edx,DWORD PTR [eax]
c001b495:	50                   	push   eax
c001b496:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b499:	31 c0                	xor    eax,eax
c001b49b:	83 c4 1c             	add    esp,0x1c
c001b49e:	c3                   	ret    
c001b49f:	90                   	nop

c001b4a0 <PCI::close(int, int, void*)>:
c001b4a0:	31 c0                	xor    eax,eax
c001b4a2:	c3                   	ret    
c001b4a3:	90                   	nop

c001b4a4 <PCI::PCI()>:
c001b4a4:	83 ec 0c             	sub    esp,0xc
c001b4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4ab:	83 ec 08             	sub    esp,0x8
c001b4ae:	68 2c 24 02 c0       	push   0xc002242c
c001b4b3:	50                   	push   eax
c001b4b4:	e8 b1 47 ff ff       	call   c000fc6a <Bus::Bus(char const*)>
c001b4b9:	83 c4 10             	add    esp,0x10
c001b4bc:	ba d8 24 02 c0       	mov    edx,0xc00224d8
c001b4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c5:	89 10                	mov    DWORD PTR [eax],edx
c001b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4d1:	0f b6 d0             	movzx  edx,al
c001b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4e9:	0f b6 d0             	movzx  edx,al
c001b4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f0:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b4ff:	8d 50 01             	lea    edx,[eax+0x1]
c001b502:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b506:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b50c:	0f b6 d0             	movzx  edx,al
c001b50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b513:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b517:	83 c9 c0             	or     ecx,0xffffffc0
c001b51a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b51e:	90                   	nop
c001b51f:	83 c4 0c             	add    esp,0xc
c001b522:	c3                   	ret    
c001b523:	90                   	nop

c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b524:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b528:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b52d:	89 ca                	mov    edx,ecx
c001b52f:	c1 e0 10             	shl    eax,0x10
c001b532:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b538:	09 d0                	or     eax,edx
c001b53a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b53f:	c1 e2 08             	shl    edx,0x8
c001b542:	09 d0                	or     eax,edx
c001b544:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b549:	c1 e2 0b             	shl    edx,0xb
c001b54c:	09 d0                	or     eax,edx
c001b54e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b553:	0d 00 00 00 80       	or     eax,0x80000000
c001b558:	ef                   	out    dx,eax
c001b559:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b55e:	ed                   	in     eax,dx
c001b55f:	83 e1 02             	and    ecx,0x2
c001b562:	0f b6 c9             	movzx  ecx,cl
c001b565:	c1 e1 03             	shl    ecx,0x3
c001b568:	d3 e8                	shr    eax,cl
c001b56a:	c3                   	ret    
c001b56b:	90                   	nop

c001b56c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b56c:	6a 00                	push   0x0
c001b56e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b573:	50                   	push   eax
c001b574:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b579:	50                   	push   eax
c001b57a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b57f:	50                   	push   eax
c001b580:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b584:	e8 9b ff ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b589:	83 c4 14             	add    esp,0x14
c001b58c:	c3                   	ret    
c001b58d:	90                   	nop

c001b58e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b58e:	6a 0e                	push   0xe
c001b590:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b595:	50                   	push   eax
c001b596:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b59b:	50                   	push   eax
c001b59c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5a1:	50                   	push   eax
c001b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b5a6:	e8 79 ff ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5ab:	83 c4 14             	add    esp,0x14
c001b5ae:	0f b6 c0             	movzx  eax,al
c001b5b1:	c3                   	ret    

c001b5b2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b5b2:	55                   	push   ebp
c001b5b3:	57                   	push   edi
c001b5b4:	56                   	push   esi
c001b5b5:	53                   	push   ebx
c001b5b6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b5bb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b5c0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b5c5:	6a 0a                	push   0xa
c001b5c7:	56                   	push   esi
c001b5c8:	55                   	push   ebp
c001b5c9:	57                   	push   edi
c001b5ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b5ce:	e8 51 ff ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d3:	6a 0a                	push   0xa
c001b5d5:	89 c3                	mov    ebx,eax
c001b5d7:	56                   	push   esi
c001b5d8:	0f b6 db             	movzx  ebx,bl
c001b5db:	55                   	push   ebp
c001b5dc:	57                   	push   edi
c001b5dd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b5e1:	e8 3e ff ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5e6:	83 c4 28             	add    esp,0x28
c001b5e9:	25 00 ff 00 00       	and    eax,0xff00
c001b5ee:	09 d8                	or     eax,ebx
c001b5f0:	5b                   	pop    ebx
c001b5f1:	5e                   	pop    esi
c001b5f2:	5f                   	pop    edi
c001b5f3:	5d                   	pop    ebp
c001b5f4:	c3                   	ret    
c001b5f5:	90                   	nop

c001b5f6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b5f6:	6a 08                	push   0x8
c001b5f8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b5fd:	50                   	push   eax
c001b5fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b603:	50                   	push   eax
c001b604:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b609:	50                   	push   eax
c001b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b60e:	e8 11 ff ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b613:	83 c4 14             	add    esp,0x14
c001b616:	0f b6 c4             	movzx  eax,ah
c001b619:	c3                   	ret    

c001b61a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b61a:	6a 08                	push   0x8
c001b61c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b621:	50                   	push   eax
c001b622:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b627:	50                   	push   eax
c001b628:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b62d:	50                   	push   eax
c001b62e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b632:	e8 ed fe ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b637:	83 c4 14             	add    esp,0x14
c001b63a:	c3                   	ret    
c001b63b:	90                   	nop

c001b63c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b63c:	6a 3c                	push   0x3c
c001b63e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b643:	50                   	push   eax
c001b644:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b649:	50                   	push   eax
c001b64a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b64f:	50                   	push   eax
c001b650:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b654:	e8 cb fe ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b659:	83 c4 14             	add    esp,0x14
c001b65c:	c3                   	ret    
c001b65d:	90                   	nop

c001b65e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b65e:	6a 18                	push   0x18
c001b660:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b665:	50                   	push   eax
c001b666:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b66b:	50                   	push   eax
c001b66c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b671:	50                   	push   eax
c001b672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b676:	e8 a9 fe ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b67b:	83 c4 14             	add    esp,0x14
c001b67e:	0f b6 c4             	movzx  eax,ah
c001b681:	c3                   	ret    

c001b682 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b682:	55                   	push   ebp
c001b683:	57                   	push   edi
c001b684:	56                   	push   esi
c001b685:	53                   	push   ebx
c001b686:	50                   	push   eax
c001b687:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b68b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b690:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b695:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b69a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b6a1:	8d 43 12             	lea    eax,[ebx+0x12]
c001b6a4:	83 c3 10             	add    ebx,0x10
c001b6a7:	0f b6 c0             	movzx  eax,al
c001b6aa:	0f b6 db             	movzx  ebx,bl
c001b6ad:	50                   	push   eax
c001b6ae:	51                   	push   ecx
c001b6af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b6b3:	57                   	push   edi
c001b6b4:	55                   	push   ebp
c001b6b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b6b9:	e8 66 fe ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6be:	53                   	push   ebx
c001b6bf:	89 c6                	mov    esi,eax
c001b6c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b6c5:	c1 e6 10             	shl    esi,0x10
c001b6c8:	51                   	push   ecx
c001b6c9:	57                   	push   edi
c001b6ca:	55                   	push   ebp
c001b6cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b6cf:	e8 50 fe ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6d4:	83 c4 2c             	add    esp,0x2c
c001b6d7:	0f b7 c0             	movzx  eax,ax
c001b6da:	5b                   	pop    ebx
c001b6db:	09 f0                	or     eax,esi
c001b6dd:	5e                   	pop    esi
c001b6de:	5f                   	pop    edi
c001b6df:	5d                   	pop    ebp
c001b6e0:	c3                   	ret    
c001b6e1:	90                   	nop

c001b6e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b6e2:	53                   	push   ebx
c001b6e3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6e8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b6ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6f1:	c1 e1 10             	shl    ecx,0x10
c001b6f4:	25 fc 00 00 00       	and    eax,0xfc
c001b6f9:	09 c1                	or     ecx,eax
c001b6fb:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b700:	c1 e0 08             	shl    eax,0x8
c001b703:	09 c1                	or     ecx,eax
c001b705:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b70a:	c1 e0 0b             	shl    eax,0xb
c001b70d:	09 c1                	or     ecx,eax
c001b70f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b715:	89 c8                	mov    eax,ecx
c001b717:	ef                   	out    dx,eax
c001b718:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b71d:	ed                   	in     eax,dx
c001b71e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b723:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b728:	74 0a                	je     c001b734 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b72a:	0f b7 d8             	movzx  ebx,ax
c001b72d:	89 d0                	mov    eax,edx
c001b72f:	c1 e0 10             	shl    eax,0x10
c001b732:	eb 05                	jmp    c001b739 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b734:	66 31 c0             	xor    ax,ax
c001b737:	89 d3                	mov    ebx,edx
c001b739:	09 c3                	or     ebx,eax
c001b73b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b740:	89 c8                	mov    eax,ecx
c001b742:	ef                   	out    dx,eax
c001b743:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b748:	89 d8                	mov    eax,ebx
c001b74a:	ef                   	out    dx,eax
c001b74b:	5b                   	pop    ebx
c001b74c:	c3                   	ret    
c001b74d:	90                   	nop

c001b74e <PCI::checkBus(unsigned char)>:
c001b74e:	56                   	push   esi
c001b74f:	53                   	push   ebx
c001b750:	31 db                	xor    ebx,ebx
c001b752:	51                   	push   ecx
c001b753:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b758:	52                   	push   edx
c001b759:	53                   	push   ebx
c001b75a:	43                   	inc    ebx
c001b75b:	56                   	push   esi
c001b75c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b760:	e8 4d 03 00 00       	call   c001bab2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b765:	83 c4 10             	add    esp,0x10
c001b768:	83 fb 20             	cmp    ebx,0x20
c001b76b:	75 eb                	jne    c001b758 <PCI::checkBus(unsigned char)+0xa>
c001b76d:	58                   	pop    eax
c001b76e:	5b                   	pop    ebx
c001b76f:	5e                   	pop    esi
c001b770:	c3                   	ret    
c001b771:	90                   	nop

c001b772 <PCI::foundDevice(PCIDeviceInfo)>:
c001b772:	55                   	push   ebp
c001b773:	57                   	push   edi
c001b774:	56                   	push   esi
c001b775:	53                   	push   ebx
c001b776:	83 ec 1c             	sub    esp,0x1c
c001b779:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b77d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b783:	0f 84 51 01 00 00    	je     c001b8da <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b789:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b78d:	66 81 f9 06 04       	cmp    cx,0x406
c001b792:	75 2c                	jne    c001b7c0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b794:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b799:	50                   	push   eax
c001b79a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b79f:	50                   	push   eax
c001b7a0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b7a5:	50                   	push   eax
c001b7a6:	56                   	push   esi
c001b7a7:	e8 b2 fe ff ff       	call   c001b65e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b7ac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b7b0:	0f b6 c0             	movzx  eax,al
c001b7b3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b7b7:	83 c4 2c             	add    esp,0x2c
c001b7ba:	5b                   	pop    ebx
c001b7bb:	5e                   	pop    esi
c001b7bc:	5f                   	pop    edi
c001b7bd:	5d                   	pop    ebp
c001b7be:	eb 8e                	jmp    c001b74e <PCI::checkBus(unsigned char)>
c001b7c0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b7c4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b7ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b7ce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b7d2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b7d6:	88 d3                	mov    bl,dl
c001b7d8:	85 c0                	test   eax,eax
c001b7da:	74 33                	je     c001b80f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b7dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b7df:	85 d2                	test   edx,edx
c001b7e1:	74 28                	je     c001b80b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b7e3:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b7e9:	31 ef                	xor    edi,ebp
c001b7eb:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b7f1:	75 18                	jne    c001b80b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b7f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b7f7:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b7fd:	75 0c                	jne    c001b80b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b7ff:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b805:	0f 84 cf 00 00 00    	je     c001b8da <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b80b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b80d:	eb c9                	jmp    c001b7d8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b80f:	66 81 f9 01 06       	cmp    cx,0x601
c001b814:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b818:	75 18                	jne    c001b832 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b81a:	83 ec 0c             	sub    esp,0xc
c001b81d:	68 58 01 00 00       	push   0x158
c001b822:	e8 cd 36 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001b827:	59                   	pop    ecx
c001b828:	89 c5                	mov    ebp,eax
c001b82a:	5f                   	pop    edi
c001b82b:	68 34 24 02 c0       	push   0xc0022434
c001b830:	eb 7d                	jmp    c001b8af <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b832:	66 81 f9 01 01       	cmp    cx,0x101
c001b837:	75 60                	jne    c001b899 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b839:	83 ec 0c             	sub    esp,0xc
c001b83c:	68 70 02 00 00       	push   0x270
c001b841:	e8 ae 36 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001b846:	89 04 24             	mov    DWORD PTR [esp],eax
c001b849:	89 c5                	mov    ebp,eax
c001b84b:	e8 26 03 00 00       	call   c001bb76 <IDE::IDE()>
c001b850:	58                   	pop    eax
c001b851:	5a                   	pop    edx
c001b852:	55                   	push   ebp
c001b853:	56                   	push   esi
c001b854:	e8 95 4b ff ff       	call   c00103ee <Device::addChild(Device*)>
c001b859:	83 ec 1c             	sub    esp,0x1c
c001b85c:	b9 09 00 00 00       	mov    ecx,0x9
c001b861:	fc                   	cld    
c001b862:	89 e7                	mov    edi,esp
c001b864:	89 de                	mov    esi,ebx
c001b866:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b868:	55                   	push   ebp
c001b869:	e8 5a 4a ff ff       	call   c00102c8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b86e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b871:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b875:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b87d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b885:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b88d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b890:	83 c4 4c             	add    esp,0x4c
c001b893:	5b                   	pop    ebx
c001b894:	5e                   	pop    esi
c001b895:	5f                   	pop    edi
c001b896:	5d                   	pop    ebp
c001b897:	ff e0                	jmp    eax
c001b899:	83 ec 0c             	sub    esp,0xc
c001b89c:	68 58 01 00 00       	push   0x158
c001b8a1:	e8 4e 36 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001b8a6:	59                   	pop    ecx
c001b8a7:	89 c5                	mov    ebp,eax
c001b8a9:	5f                   	pop    edi
c001b8aa:	68 53 24 02 c0       	push   0xc0022453
c001b8af:	55                   	push   ebp
c001b8b0:	e8 25 4e ff ff       	call   c00106da <DriverlessDevice::DriverlessDevice(char const*)>
c001b8b5:	58                   	pop    eax
c001b8b6:	5a                   	pop    edx
c001b8b7:	55                   	push   ebp
c001b8b8:	56                   	push   esi
c001b8b9:	e8 30 4b ff ff       	call   c00103ee <Device::addChild(Device*)>
c001b8be:	b9 09 00 00 00       	mov    ecx,0x9
c001b8c3:	fc                   	cld    
c001b8c4:	89 df                	mov    edi,ebx
c001b8c6:	89 de                	mov    esi,ebx
c001b8c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b8ca:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b8ce:	83 c4 2c             	add    esp,0x2c
c001b8d1:	5b                   	pop    ebx
c001b8d2:	5e                   	pop    esi
c001b8d3:	5f                   	pop    edi
c001b8d4:	5d                   	pop    ebp
c001b8d5:	e9 ee 49 ff ff       	jmp    c00102c8 <Device::preOpenPCI(PCIDeviceInfo)>
c001b8da:	83 c4 1c             	add    esp,0x1c
c001b8dd:	5b                   	pop    ebx
c001b8de:	5e                   	pop    esi
c001b8df:	5f                   	pop    edi
c001b8e0:	5d                   	pop    ebp
c001b8e1:	c3                   	ret    

c001b8e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b8e2:	55                   	push   ebp
c001b8e3:	57                   	push   edi
c001b8e4:	56                   	push   esi
c001b8e5:	53                   	push   ebx
c001b8e6:	83 ec 5c             	sub    esp,0x5c
c001b8e9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b8ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b8f1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b8f5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b8fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8fe:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b902:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b907:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b90b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b910:	6a 0c                	push   0xc
c001b912:	55                   	push   ebp
c001b913:	53                   	push   ebx
c001b914:	57                   	push   edi
c001b915:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b91c:	e8 03 fc ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b921:	83 c4 0c             	add    esp,0xc
c001b924:	6a 00                	push   0x0
c001b926:	68 6d 24 02 c0       	push   0xc002246d
c001b92b:	e8 b3 36 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001b930:	55                   	push   ebp
c001b931:	53                   	push   ebx
c001b932:	57                   	push   edi
c001b933:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b93a:	e8 73 fc ff ff       	call   c001b5b2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b93f:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b944:	83 c4 20             	add    esp,0x20
c001b947:	55                   	push   ebp
c001b948:	53                   	push   ebx
c001b949:	57                   	push   edi
c001b94a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b94e:	e8 e9 fc ff ff       	call   c001b63c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b953:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b95a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b95e:	55                   	push   ebp
c001b95f:	53                   	push   ebx
c001b960:	57                   	push   edi
c001b961:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b968:	e8 b7 fb ff ff       	call   c001b524 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b96d:	0f b6 c4             	movzx  eax,ah
c001b970:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b974:	83 c4 18             	add    esp,0x18
c001b977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b97b:	68 81 24 02 c0       	push   0xc0022481
c001b980:	e8 5e 36 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001b985:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b989:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b98d:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b99b:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b9a2:	74 6c                	je     c001ba10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9a4:	31 f6                	xor    esi,esi
c001b9a6:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c001b9ac:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b9b2:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b9b8:	7e 56                	jle    c001ba10 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b9ba:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b9bd:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b9c4:	39 cb                	cmp    ebx,ecx
c001b9c6:	75 45                	jne    c001ba0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b9c8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b9cf:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b9d3:	75 38                	jne    c001ba0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b9d5:	83 ec 0c             	sub    esp,0xc
c001b9d8:	68 90 24 02 c0       	push   0xc0022490
c001b9dd:	e8 01 36 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001b9e2:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c001b9e8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b9ee:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b9f6:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b9fa:	52                   	push   edx
c001b9fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9ff:	53                   	push   ebx
c001ba00:	68 b5 24 02 c0       	push   0xc00224b5
c001ba05:	e8 d9 35 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001ba0a:	83 c4 20             	add    esp,0x20
c001ba0d:	46                   	inc    esi
c001ba0e:	eb 96                	jmp    c001b9a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001ba10:	31 d2                	xor    edx,edx
c001ba12:	83 ec 0c             	sub    esp,0xc
c001ba15:	55                   	push   ebp
c001ba16:	53                   	push   ebx
c001ba17:	57                   	push   edi
c001ba18:	52                   	push   edx
c001ba19:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ba1d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba24:	e8 59 fc ff ff       	call   c001b682 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba29:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001ba2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba31:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ba35:	42                   	inc    edx
c001ba36:	83 c4 20             	add    esp,0x20
c001ba39:	83 fa 06             	cmp    edx,0x6
c001ba3c:	75 d4                	jne    c001ba12 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001ba3e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ba42:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001ba46:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ba4a:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001ba4e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ba52:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ba56:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ba5b:	86 e0                	xchg   al,ah
c001ba5d:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001ba62:	55                   	push   ebp
c001ba63:	53                   	push   ebx
c001ba64:	57                   	push   edi
c001ba65:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001ba69:	e8 88 fb ff ff       	call   c001b5f6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ba6e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ba72:	55                   	push   ebp
c001ba73:	53                   	push   ebx
c001ba74:	57                   	push   edi
c001ba75:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001ba7c:	e8 eb fa ff ff       	call   c001b56c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba81:	83 ec 0c             	sub    esp,0xc
c001ba84:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001ba89:	b9 09 00 00 00       	mov    ecx,0x9
c001ba8e:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001ba92:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001ba96:	fc                   	cld    
c001ba97:	89 e7                	mov    edi,esp
c001ba99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba9b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001baa2:	e8 cb fc ff ff       	call   c001b772 <PCI::foundDevice(PCIDeviceInfo)>
c001baa7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001baad:	5b                   	pop    ebx
c001baae:	5e                   	pop    esi
c001baaf:	5f                   	pop    edi
c001bab0:	5d                   	pop    ebp
c001bab1:	c3                   	ret    

c001bab2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bab2:	55                   	push   ebp
c001bab3:	57                   	push   edi
c001bab4:	56                   	push   esi
c001bab5:	53                   	push   ebx
c001bab6:	83 ec 0c             	sub    esp,0xc
c001bab9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001babd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bac2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bac7:	6a 00                	push   0x0
c001bac9:	56                   	push   esi
c001baca:	57                   	push   edi
c001bacb:	55                   	push   ebp
c001bacc:	e8 9b fa ff ff       	call   c001b56c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bad1:	6a 00                	push   0x0
c001bad3:	56                   	push   esi
c001bad4:	57                   	push   edi
c001bad5:	55                   	push   ebp
c001bad6:	e8 07 fe ff ff       	call   c001b8e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001badb:	83 c4 20             	add    esp,0x20
c001bade:	6a 00                	push   0x0
c001bae0:	56                   	push   esi
c001bae1:	57                   	push   edi
c001bae2:	55                   	push   ebp
c001bae3:	e8 a6 fa ff ff       	call   c001b58e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	84 c0                	test   al,al
c001baed:	79 27                	jns    c001bb16 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001baef:	bb 01 00 00 00       	mov    ebx,0x1
c001baf4:	53                   	push   ebx
c001baf5:	56                   	push   esi
c001baf6:	57                   	push   edi
c001baf7:	55                   	push   ebp
c001baf8:	e8 6f fa ff ff       	call   c001b56c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	66 40                	inc    ax
c001bb02:	74 0c                	je     c001bb10 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001bb04:	53                   	push   ebx
c001bb05:	56                   	push   esi
c001bb06:	57                   	push   edi
c001bb07:	55                   	push   ebp
c001bb08:	e8 d5 fd ff ff       	call   c001b8e2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bb0d:	83 c4 10             	add    esp,0x10
c001bb10:	43                   	inc    ebx
c001bb11:	83 fb 08             	cmp    ebx,0x8
c001bb14:	75 de                	jne    c001baf4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bb16:	83 c4 0c             	add    esp,0xc
c001bb19:	5b                   	pop    ebx
c001bb1a:	5e                   	pop    esi
c001bb1b:	5f                   	pop    edi
c001bb1c:	5d                   	pop    ebp
c001bb1d:	c3                   	ret    

c001bb1e <PCI::detect()>:
c001bb1e:	56                   	push   esi
c001bb1f:	53                   	push   ebx
c001bb20:	53                   	push   ebx
c001bb21:	31 db                	xor    ebx,ebx
c001bb23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb27:	6a 00                	push   0x0
c001bb29:	6a 00                	push   0x0
c001bb2b:	6a 00                	push   0x0
c001bb2d:	56                   	push   esi
c001bb2e:	e8 5b fa ff ff       	call   c001b58e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bb33:	83 c4 10             	add    esp,0x10
c001bb36:	a8 80                	test   al,0x80
c001bb38:	75 21                	jne    c001bb5b <PCI::detect()+0x3d>
c001bb3a:	51                   	push   ecx
c001bb3b:	51                   	push   ecx
c001bb3c:	6a 00                	push   0x0
c001bb3e:	56                   	push   esi
c001bb3f:	e8 0a fc ff ff       	call   c001b74e <PCI::checkBus(unsigned char)>
c001bb44:	83 c4 10             	add    esp,0x10
c001bb47:	eb 24                	jmp    c001bb6d <PCI::detect()+0x4f>
c001bb49:	52                   	push   edx
c001bb4a:	52                   	push   edx
c001bb4b:	53                   	push   ebx
c001bb4c:	43                   	inc    ebx
c001bb4d:	56                   	push   esi
c001bb4e:	e8 fb fb ff ff       	call   c001b74e <PCI::checkBus(unsigned char)>
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	83 fb 08             	cmp    ebx,0x8
c001bb59:	74 12                	je     c001bb6d <PCI::detect()+0x4f>
c001bb5b:	53                   	push   ebx
c001bb5c:	6a 00                	push   0x0
c001bb5e:	6a 00                	push   0x0
c001bb60:	56                   	push   esi
c001bb61:	e8 06 fa ff ff       	call   c001b56c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb66:	83 c4 10             	add    esp,0x10
c001bb69:	66 40                	inc    ax
c001bb6b:	74 dc                	je     c001bb49 <PCI::detect()+0x2b>
c001bb6d:	58                   	pop    eax
c001bb6e:	5b                   	pop    ebx
c001bb6f:	5e                   	pop    esi
c001bb70:	c3                   	ret    
c001bb71:	90                   	nop

c001bb72 <IDE::close(int, int, void*)>:
c001bb72:	83 c8 ff             	or     eax,0xffffffff
c001bb75:	c3                   	ret    

c001bb76 <IDE::IDE()>:
c001bb76:	83 ec 0c             	sub    esp,0xc
c001bb79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb7d:	83 ec 08             	sub    esp,0x8
c001bb80:	68 fc 24 02 c0       	push   0xc00224fc
c001bb85:	50                   	push   eax
c001bb86:	e8 e5 4b ff ff       	call   c0010770 <HardDiskController::HardDiskController(char const*)>
c001bb8b:	83 c4 10             	add    esp,0x10
c001bb8e:	ba 3c 27 02 c0       	mov    edx,0xc002273c
c001bb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb97:	89 10                	mov    DWORD PTR [eax],edx
c001bb99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb9d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bba4:	90                   	nop
c001bba5:	83 c4 0c             	add    esp,0xc
c001bba8:	c3                   	ret    
c001bba9:	90                   	nop

c001bbaa <IDE::prepareInterrupt(unsigned char)>:
c001bbaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bbaf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bbb3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bbbb:	c3                   	ret    

c001bbbc <selectDrive(unsigned char, unsigned char)>:
c001bbbc:	c3                   	ret    
c001bbbd:	90                   	nop

c001bbbe <IDE::getBase(unsigned char)>:
c001bbbe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bbc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbc7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bbcf:	c3                   	ret    

c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bbd0:	55                   	push   ebp
c001bbd1:	57                   	push   edi
c001bbd2:	56                   	push   esi
c001bbd3:	53                   	push   ebx
c001bbd4:	83 ec 1c             	sub    esp,0x1c
c001bbd7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bbdb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbdf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bbe2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbea:	80 f9 03             	cmp    cl,0x3
c001bbed:	77 51                	ja     c001bc40 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bbef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbf3:	0f b6 f2             	movzx  esi,dl
c001bbf6:	0f b6 db             	movzx  ebx,bl
c001bbf9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bbfc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bc00:	83 ca 80             	or     edx,0xffffff80
c001bc03:	0f b6 d2             	movzx  edx,dl
c001bc06:	52                   	push   edx
c001bc07:	6a 0c                	push   0xc
c001bc09:	56                   	push   esi
c001bc0a:	57                   	push   edi
c001bc0b:	e8 c0 ff ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc10:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bc15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc19:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bc1d:	ee                   	out    dx,al
c001bc1e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bc23:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bc27:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bc2b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc2f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc37:	83 c4 2c             	add    esp,0x2c
c001bc3a:	5b                   	pop    ebx
c001bc3b:	5e                   	pop    esi
c001bc3c:	5f                   	pop    edi
c001bc3d:	5d                   	pop    ebp
c001bc3e:	eb 90                	jmp    c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc40:	80 fb 07             	cmp    bl,0x7
c001bc43:	77 12                	ja     c001bc57 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc45:	0f b6 d2             	movzx  edx,dl
c001bc48:	0f b6 db             	movzx  ebx,bl
c001bc4b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc53:	89 da                	mov    edx,ebx
c001bc55:	eb 2f                	jmp    c001bc86 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc57:	80 fb 0d             	cmp    bl,0xd
c001bc5a:	77 13                	ja     c001bc6f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bc5c:	0f b6 d2             	movzx  edx,dl
c001bc5f:	0f b6 db             	movzx  ebx,bl
c001bc62:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bc69:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc6d:	eb 17                	jmp    c001bc86 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc6f:	80 fb 15             	cmp    bl,0x15
c001bc72:	77 13                	ja     c001bc87 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc74:	0f b6 d2             	movzx  edx,dl
c001bc77:	0f b6 db             	movzx  ebx,bl
c001bc7a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bc82:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc86:	ee                   	out    dx,al
c001bc87:	83 c4 1c             	add    esp,0x1c
c001bc8a:	5b                   	pop    ebx
c001bc8b:	5e                   	pop    esi
c001bc8c:	5f                   	pop    edi
c001bc8d:	5d                   	pop    ebp
c001bc8e:	c3                   	ret    
c001bc8f:	90                   	nop

c001bc90 <IDE::read(unsigned char, unsigned char)>:
c001bc90:	55                   	push   ebp
c001bc91:	57                   	push   edi
c001bc92:	56                   	push   esi
c001bc93:	53                   	push   ebx
c001bc94:	83 ec 1c             	sub    esp,0x1c
c001bc97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc9f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bca2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bca6:	3c 03                	cmp    al,0x3
c001bca8:	77 43                	ja     c001bced <IDE::read(unsigned char, unsigned char)+0x5d>
c001bcaa:	0f b6 f2             	movzx  esi,dl
c001bcad:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bcb0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bcb4:	83 c8 80             	or     eax,0xffffff80
c001bcb7:	0f b6 c0             	movzx  eax,al
c001bcba:	50                   	push   eax
c001bcbb:	6a 0c                	push   0xc
c001bcbd:	56                   	push   esi
c001bcbe:	57                   	push   edi
c001bcbf:	e8 0c ff ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcc4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bcc9:	0f b6 c3             	movzx  eax,bl
c001bccc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bcd0:	ec                   	in     al,dx
c001bcd1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bcd5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bcda:	52                   	push   edx
c001bcdb:	6a 0c                	push   0xc
c001bcdd:	56                   	push   esi
c001bcde:	57                   	push   edi
c001bcdf:	e8 ec fe ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce4:	83 c4 20             	add    esp,0x20
c001bce7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bceb:	eb 49                	jmp    c001bd36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bced:	80 fb 07             	cmp    bl,0x7
c001bcf0:	77 12                	ja     c001bd04 <IDE::read(unsigned char, unsigned char)+0x74>
c001bcf2:	0f b6 d2             	movzx  edx,dl
c001bcf5:	0f b6 c3             	movzx  eax,bl
c001bcf8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bd00:	89 c2                	mov    edx,eax
c001bd02:	eb 31                	jmp    c001bd35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd04:	80 fb 0d             	cmp    bl,0xd
c001bd07:	77 13                	ja     c001bd1c <IDE::read(unsigned char, unsigned char)+0x8c>
c001bd09:	0f b6 d2             	movzx  edx,dl
c001bd0c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bd13:	0f b6 d3             	movzx  edx,bl
c001bd16:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bd1a:	eb 19                	jmp    c001bd35 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bd1c:	31 c0                	xor    eax,eax
c001bd1e:	80 fb 15             	cmp    bl,0x15
c001bd21:	77 13                	ja     c001bd36 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bd23:	0f b6 d2             	movzx  edx,dl
c001bd26:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bd2e:	0f b6 d3             	movzx  edx,bl
c001bd31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bd35:	ec                   	in     al,dx
c001bd36:	83 c4 1c             	add    esp,0x1c
c001bd39:	5b                   	pop    ebx
c001bd3a:	5e                   	pop    esi
c001bd3b:	5f                   	pop    edi
c001bd3c:	5d                   	pop    ebp
c001bd3d:	c3                   	ret    

c001bd3e <IDE::waitInterrupt(unsigned char)>:
c001bd3e:	55                   	push   ebp
c001bd3f:	57                   	push   edi
c001bd40:	56                   	push   esi
c001bd41:	53                   	push   ebx
c001bd42:	31 db                	xor    ebx,ebx
c001bd44:	83 ec 0c             	sub    esp,0xc
c001bd47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd4b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd50:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd58:	89 e8                	mov    eax,ebp
c001bd5a:	84 c0                	test   al,al
c001bd5c:	75 34                	jne    c001bd92 <IDE::waitInterrupt(unsigned char)+0x54>
c001bd5e:	52                   	push   edx
c001bd5f:	6a 0c                	push   0xc
c001bd61:	56                   	push   esi
c001bd62:	57                   	push   edi
c001bd63:	e8 28 ff ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	a8 01                	test   al,0x1
c001bd6d:	75 2b                	jne    c001bd9a <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd6f:	f6 c3 04             	test   bl,0x4
c001bd72:	75 16                	jne    c001bd8a <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd74:	83 fb 32             	cmp    ebx,0x32
c001bd77:	7e 11                	jle    c001bd8a <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd79:	50                   	push   eax
c001bd7a:	50                   	push   eax
c001bd7b:	6a 00                	push   0x0
c001bd7d:	68 80 96 98 00       	push   0x989680
c001bd82:	e8 e6 c4 ff ff       	call   c001826d <nanoSleep(unsigned long long)>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	83 fb 3c             	cmp    ebx,0x3c
c001bd8d:	74 0b                	je     c001bd9a <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd8f:	43                   	inc    ebx
c001bd90:	eb be                	jmp    c001bd50 <IDE::waitInterrupt(unsigned char)+0x12>
c001bd92:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd9a:	83 c4 0c             	add    esp,0xc
c001bd9d:	89 e8                	mov    eax,ebp
c001bd9f:	5b                   	pop    ebx
c001bda0:	5e                   	pop    esi
c001bda1:	5f                   	pop    edi
c001bda2:	5d                   	pop    ebp
c001bda3:	c3                   	ret    

c001bda4 <ideChannel0IRQHandler(regs*, void*)>:
c001bda4:	83 ec 10             	sub    esp,0x10
c001bda7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bdb2:	6a 07                	push   0x7
c001bdb4:	6a 00                	push   0x0
c001bdb6:	50                   	push   eax
c001bdb7:	e8 d4 fe ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001bdbc:	83 c4 1c             	add    esp,0x1c
c001bdbf:	c3                   	ret    

c001bdc0 <ideChannel1IRQHandler(regs*, void*)>:
c001bdc0:	83 ec 10             	sub    esp,0x10
c001bdc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdc7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bdce:	6a 07                	push   0x7
c001bdd0:	6a 01                	push   0x1
c001bdd2:	50                   	push   eax
c001bdd3:	e8 b8 fe ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001bdd8:	83 c4 1c             	add    esp,0x1c
c001bddb:	c3                   	ret    

c001bddc <IDE::enableIRQs(unsigned char, bool)>:
c001bddc:	57                   	push   edi
c001bddd:	56                   	push   esi
c001bdde:	be 04 00 00 00       	mov    esi,0x4
c001bde3:	53                   	push   ebx
c001bde4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bde9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bded:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bdf2:	0f 94 c0             	sete   al
c001bdf5:	d1 e0                	shl    eax,1
c001bdf7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bdfe:	0f b6 c0             	movzx  eax,al
c001be01:	50                   	push   eax
c001be02:	6a 0c                	push   0xc
c001be04:	57                   	push   edi
c001be05:	53                   	push   ebx
c001be06:	e8 c5 fd ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	50                   	push   eax
c001be0f:	6a 0c                	push   0xc
c001be11:	57                   	push   edi
c001be12:	53                   	push   ebx
c001be13:	e8 78 fe ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001be18:	83 c4 10             	add    esp,0x10
c001be1b:	4e                   	dec    esi
c001be1c:	75 f0                	jne    c001be0e <IDE::enableIRQs(unsigned char, bool)+0x32>
c001be1e:	5b                   	pop    ebx
c001be1f:	5e                   	pop    esi
c001be20:	5f                   	pop    edi
c001be21:	c3                   	ret    

c001be22 <IDE::open(int, int, void*)>:
c001be22:	55                   	push   ebp
c001be23:	57                   	push   edi
c001be24:	56                   	push   esi
c001be25:	53                   	push   ebx
c001be26:	83 ec 1c             	sub    esp,0x1c
c001be29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be2d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be36:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be3f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be46:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be4d:	0f 85 b0 02 00 00    	jne    c001c103 <IDE::open(int, int, void*)+0x2e1>
c001be53:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be59:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001be5d:	83 e0 7f             	and    eax,0x7f
c001be60:	3c 05                	cmp    al,0x5
c001be62:	74 04                	je     c001be68 <IDE::open(int, int, void*)+0x46>
c001be64:	3c 0f                	cmp    al,0xf
c001be66:	75 32                	jne    c001be9a <IDE::open(int, int, void*)+0x78>
c001be68:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be6e:	83 e0 fc             	and    eax,0xfffffffc
c001be71:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be78:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be7e:	83 e0 fc             	and    eax,0xfffffffc
c001be81:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be88:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be8e:	83 e0 fc             	and    eax,0xfffffffc
c001be91:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be98:	eb 14                	jmp    c001beae <IDE::open(int, int, void*)+0x8c>
c001be9a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bea4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001beae:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001beb5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bebc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bec0:	89 c6                	mov    esi,eax
c001bec2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bec7:	c1 e6 10             	shl    esi,0x10
c001beca:	89 e8                	mov    eax,ebp
c001becc:	89 fa                	mov    edx,edi
c001bece:	c1 e0 0b             	shl    eax,0xb
c001bed1:	09 f0                	or     eax,esi
c001bed3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001beda:	c1 e6 08             	shl    esi,0x8
c001bedd:	09 c6                	or     esi,eax
c001bedf:	89 f0                	mov    eax,esi
c001bee1:	0d 08 00 00 80       	or     eax,0x80000008
c001bee6:	ef                   	out    dx,eax
c001bee7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001beec:	89 ca                	mov    edx,ecx
c001beee:	ed                   	in     eax,dx
c001beef:	c1 e8 10             	shr    eax,0x10
c001bef2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bef7:	0f 84 f5 00 00 00    	je     c001bff2 <IDE::open(int, int, void*)+0x1d0>
c001befd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bf03:	89 fa                	mov    edx,edi
c001bf05:	89 f0                	mov    eax,esi
c001bf07:	ef                   	out    dx,eax
c001bf08:	b0 fe                	mov    al,0xfe
c001bf0a:	89 ca                	mov    edx,ecx
c001bf0c:	ee                   	out    dx,al
c001bf0d:	89 f0                	mov    eax,esi
c001bf0f:	89 fa                	mov    edx,edi
c001bf11:	ef                   	out    dx,eax
c001bf12:	89 ca                	mov    edx,ecx
c001bf14:	ed                   	in     eax,dx
c001bf15:	3c fe                	cmp    al,0xfe
c001bf17:	0f 85 a9 00 00 00    	jne    c001bfc6 <IDE::open(int, int, void*)+0x1a4>
c001bf1d:	8b 15 48 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023748
c001bf23:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bf2a:	74 33                	je     c001bf5f <IDE::open(int, int, void*)+0x13d>
c001bf2c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bf32:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf36:	40                   	inc    eax
c001bf37:	83 ec 0c             	sub    esp,0xc
c001bf3a:	0f b6 c0             	movzx  eax,al
c001bf3d:	50                   	push   eax
c001bf3e:	55                   	push   ebp
c001bf3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf43:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf49:	51                   	push   ecx
c001bf4a:	e8 e9 75 ff ff       	call   c0013538 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf4f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf54:	83 c4 1c             	add    esp,0x1c
c001bf57:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf5d:	eb 0a                	jmp    c001bf69 <IDE::open(int, int, void*)+0x147>
c001bf5f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf69:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf70:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf77:	c1 e1 10             	shl    ecx,0x10
c001bf7a:	c1 e0 08             	shl    eax,0x8
c001bf7d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf82:	09 c1                	or     ecx,eax
c001bf84:	89 fa                	mov    edx,edi
c001bf86:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf8d:	c1 e0 0b             	shl    eax,0xb
c001bf90:	09 c1                	or     ecx,eax
c001bf92:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf98:	89 c8                	mov    eax,ecx
c001bf9a:	ef                   	out    dx,eax
c001bf9b:	be fc 0c 00 00       	mov    esi,0xcfc
c001bfa0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bfa6:	89 f2                	mov    edx,esi
c001bfa8:	ee                   	out    dx,al
c001bfa9:	89 c8                	mov    eax,ecx
c001bfab:	89 fa                	mov    edx,edi
c001bfad:	ef                   	out    dx,eax
c001bfae:	89 f2                	mov    edx,esi
c001bfb0:	ed                   	in     eax,dx
c001bfb1:	0f b6 c0             	movzx  eax,al
c001bfb4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bfba:	74 46                	je     c001c002 <IDE::open(int, int, void*)+0x1e0>
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	68 14 25 02 c0       	push   0xc0022514
c001bfc4:	eb 34                	jmp    c001bffa <IDE::open(int, int, void*)+0x1d8>
c001bfc6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bfcf:	75 17                	jne    c001bfe8 <IDE::open(int, int, void*)+0x1c6>
c001bfd1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bfd6:	74 07                	je     c001bfdf <IDE::open(int, int, void*)+0x1bd>
c001bfd8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bfdd:	75 09                	jne    c001bfe8 <IDE::open(int, int, void*)+0x1c6>
c001bfdf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bfe6:	eb 1a                	jmp    c001c002 <IDE::open(int, int, void*)+0x1e0>
c001bfe8:	83 ec 0c             	sub    esp,0xc
c001bfeb:	68 1c 25 02 c0       	push   0xc002251c
c001bff0:	eb 08                	jmp    c001bffa <IDE::open(int, int, void*)+0x1d8>
c001bff2:	83 ec 0c             	sub    esp,0xc
c001bff5:	68 4d 25 02 c0       	push   0xc002254d
c001bffa:	e8 79 8c ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001bfff:	83 c4 10             	add    esp,0x10
c001c002:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c009:	79 1a                	jns    c001c025 <IDE::open(int, int, void*)+0x203>
c001c00b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c011:	83 e0 fc             	and    eax,0xfffffffc
c001c014:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c01b:	83 c0 08             	add    eax,0x8
c001c01e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c025:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c02b:	89 c2                	mov    edx,eax
c001c02d:	83 e2 0f             	and    edx,0xf
c001c030:	66 83 fa 08          	cmp    dx,0x8
c001c034:	75 0a                	jne    c001c040 <IDE::open(int, int, void*)+0x21e>
c001c036:	83 e8 02             	sub    eax,0x2
c001c039:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c040:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c046:	89 c2                	mov    edx,eax
c001c048:	83 e2 0f             	and    edx,0xf
c001c04b:	66 83 fa 08          	cmp    dx,0x8
c001c04f:	75 0a                	jne    c001c05b <IDE::open(int, int, void*)+0x239>
c001c051:	83 e8 02             	sub    eax,0x2
c001c054:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c05b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c062:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c069:	89 d0                	mov    eax,edx
c001c06b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c06e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c072:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c076:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c079:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c07e:	0f b6 c9             	movzx  ecx,cl
c001c081:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c088:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c08b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c08f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c093:	8d 50 02             	lea    edx,[eax+0x2]
c001c096:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c09b:	0f b6 d2             	movzx  edx,dl
c001c09e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c0a4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0a7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0ab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c0af:	8d 48 03             	lea    ecx,[eax+0x3]
c001c0b2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0b7:	0f b6 c9             	movzx  ecx,cl
c001c0ba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c0c0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c0c3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c0c7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c0cb:	8d 50 04             	lea    edx,[eax+0x4]
c001c0ce:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c0d4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0d9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c0e0:	66 85 f6             	test   si,si
c001c0e3:	74 3e                	je     c001c123 <IDE::open(int, int, void*)+0x301>
c001c0e5:	0f b6 d2             	movzx  edx,dl
c001c0e8:	83 c0 05             	add    eax,0x5
c001c0eb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0ee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0f2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c0f6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c0fc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c101:	eb 20                	jmp    c001c123 <IDE::open(int, int, void*)+0x301>
c001c103:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c10d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c117:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c11e:	e9 02 ff ff ff       	jmp    c001c025 <IDE::open(int, int, void*)+0x203>
c001c123:	52                   	push   edx
c001c124:	52                   	push   edx
c001c125:	6a 00                	push   0x0
c001c127:	53                   	push   ebx
c001c128:	e8 7d fa ff ff       	call   c001bbaa <IDE::prepareInterrupt(unsigned char)>
c001c12d:	59                   	pop    ecx
c001c12e:	5e                   	pop    esi
c001c12f:	6a 01                	push   0x1
c001c131:	53                   	push   ebx
c001c132:	e8 73 fa ff ff       	call   c001bbaa <IDE::prepareInterrupt(unsigned char)>
c001c137:	83 c4 0c             	add    esp,0xc
c001c13a:	6a 00                	push   0x0
c001c13c:	6a 00                	push   0x0
c001c13e:	53                   	push   ebx
c001c13f:	e8 98 fc ff ff       	call   c001bddc <IDE::enableIRQs(unsigned char, bool)>
c001c144:	83 c4 0c             	add    esp,0xc
c001c147:	6a 00                	push   0x0
c001c149:	6a 01                	push   0x1
c001c14b:	53                   	push   ebx
c001c14c:	e8 8b fc ff ff       	call   c001bddc <IDE::enableIRQs(unsigned char, bool)>
c001c151:	83 c4 10             	add    esp,0x10
c001c154:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c15b:	74 40                	je     c001c19d <IDE::open(int, int, void*)+0x37b>
c001c15d:	83 ec 0c             	sub    esp,0xc
c001c160:	68 77 25 02 c0       	push   0xc0022577
c001c165:	e8 79 2e ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c16a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c16d:	6a 01                	push   0x1
c001c16f:	68 a4 bd 01 c0       	push   0xc001bda4
c001c174:	6a 0e                	push   0xe
c001c176:	53                   	push   ebx
c001c177:	e8 c6 41 ff ff       	call   c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c17c:	83 c4 14             	add    esp,0x14
c001c17f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c185:	53                   	push   ebx
c001c186:	6a 01                	push   0x1
c001c188:	68 c0 bd 01 c0       	push   0xc001bdc0
c001c18d:	6a 0f                	push   0xf
c001c18f:	53                   	push   ebx
c001c190:	e8 ad 41 ff ff       	call   c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c195:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c19b:	eb 4a                	jmp    c001c1e7 <IDE::open(int, int, void*)+0x3c5>
c001c19d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c1a7:	50                   	push   eax
c001c1a8:	6a 0f                	push   0xf
c001c1aa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1b0:	68 93 25 02 c0       	push   0xc0022593
c001c1b5:	e8 29 2e ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c1ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1bd:	6a 00                	push   0x0
c001c1bf:	68 a4 bd 01 c0       	push   0xc001bda4
c001c1c4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c1ca:	53                   	push   ebx
c001c1cb:	e8 72 41 ff ff       	call   c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1d0:	83 c4 14             	add    esp,0x14
c001c1d3:	53                   	push   ebx
c001c1d4:	6a 00                	push   0x0
c001c1d6:	68 c0 bd 01 c0       	push   0xc001bdc0
c001c1db:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c1e1:	53                   	push   ebx
c001c1e2:	e8 5b 41 ff ff       	call   c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1e9:	83 c4 20             	add    esp,0x20
c001c1ec:	83 ec 0c             	sub    esp,0xc
c001c1ef:	53                   	push   ebx
c001c1f0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c1f3:	83 c4 0c             	add    esp,0xc
c001c1f6:	6a 07                	push   0x7
c001c1f8:	6a 00                	push   0x0
c001c1fa:	53                   	push   ebx
c001c1fb:	e8 90 fa ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c200:	83 c4 0c             	add    esp,0xc
c001c203:	6a 07                	push   0x7
c001c205:	6a 01                	push   0x1
c001c207:	53                   	push   ebx
c001c208:	e8 83 fa ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c20d:	83 c4 0c             	add    esp,0xc
c001c210:	6a 01                	push   0x1
c001c212:	6a 00                	push   0x0
c001c214:	53                   	push   ebx
c001c215:	e8 c2 fb ff ff       	call   c001bddc <IDE::enableIRQs(unsigned char, bool)>
c001c21a:	83 c4 0c             	add    esp,0xc
c001c21d:	6a 01                	push   0x1
c001c21f:	6a 01                	push   0x1
c001c221:	53                   	push   ebx
c001c222:	e8 b5 fb ff ff       	call   c001bddc <IDE::enableIRQs(unsigned char, bool)>
c001c227:	83 c4 2c             	add    esp,0x2c
c001c22a:	31 c0                	xor    eax,eax
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	90                   	nop

c001c232 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c232:	55                   	push   ebp
c001c233:	57                   	push   edi
c001c234:	56                   	push   esi
c001c235:	53                   	push   ebx
c001c236:	83 ec 1c             	sub    esp,0x1c
c001c239:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c23d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c241:	8d 50 f8             	lea    edx,[eax-0x8]
c001c244:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c248:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c24c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c250:	80 fa 03             	cmp    dl,0x3
c001c253:	77 5d                	ja     c001c2b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c255:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c25d:	0f b6 db             	movzx  ebx,bl
c001c260:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c263:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c267:	83 ca 80             	or     edx,0xffffff80
c001c26a:	0f b6 d2             	movzx  edx,dl
c001c26d:	52                   	push   edx
c001c26e:	6a 0c                	push   0xc
c001c270:	53                   	push   ebx
c001c271:	56                   	push   esi
c001c272:	e8 59 f9 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c277:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c27c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c280:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c284:	0f b6 c0             	movzx  eax,al
c001c287:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c28b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c28d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c292:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c296:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c29a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c29e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c2a6:	83 c4 2c             	add    esp,0x2c
c001c2a9:	5b                   	pop    ebx
c001c2aa:	5e                   	pop    esi
c001c2ab:	5f                   	pop    edi
c001c2ac:	5d                   	pop    ebp
c001c2ad:	e9 1e f9 ff ff       	jmp    c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2b2:	3c 07                	cmp    al,0x7
c001c2b4:	77 10                	ja     c001c2c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c2b6:	0f b6 db             	movzx  ebx,bl
c001c2b9:	0f b6 d0             	movzx  edx,al
c001c2bc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c2c4:	eb 2d                	jmp    c001c2f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2c6:	3c 0d                	cmp    al,0xd
c001c2c8:	77 13                	ja     c001c2dd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c2ca:	0f b6 db             	movzx  ebx,bl
c001c2cd:	0f b6 c0             	movzx  eax,al
c001c2d0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c2d7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c2db:	eb 16                	jmp    c001c2f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2dd:	3c 15                	cmp    al,0x15
c001c2df:	77 14                	ja     c001c2f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c2e1:	0f b6 db             	movzx  ebx,bl
c001c2e4:	0f b6 c0             	movzx  eax,al
c001c2e7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c2ef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c2f3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2f5:	83 c4 1c             	add    esp,0x1c
c001c2f8:	5b                   	pop    ebx
c001c2f9:	5e                   	pop    esi
c001c2fa:	5f                   	pop    edi
c001c2fb:	5d                   	pop    ebp
c001c2fc:	c3                   	ret    
c001c2fd:	90                   	nop

c001c2fe <IDE::detect()>:
c001c2fe:	55                   	push   ebp
c001c2ff:	57                   	push   edi
c001c300:	56                   	push   esi
c001c301:	53                   	push   ebx
c001c302:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c308:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c30f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c316:	0f 85 be 02 00 00    	jne    c001c5da <IDE::detect()+0x2dc>
c001c31c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c323:	31 f6                	xor    esi,esi
c001c325:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c32d:	31 ed                	xor    ebp,ebp
c001c32f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c333:	c1 e0 06             	shl    eax,0x6
c001c336:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c33e:	89 e8                	mov    eax,ebp
c001c340:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c344:	c1 e0 04             	shl    eax,0x4
c001c347:	83 c8 a0             	or     eax,0xffffffa0
c001c34a:	0f b6 c0             	movzx  eax,al
c001c34d:	50                   	push   eax
c001c34e:	6a 06                	push   0x6
c001c350:	56                   	push   esi
c001c351:	53                   	push   ebx
c001c352:	e8 79 f8 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c357:	83 c4 0c             	add    esp,0xc
c001c35a:	6a 0c                	push   0xc
c001c35c:	56                   	push   esi
c001c35d:	53                   	push   ebx
c001c35e:	e8 2d f9 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c363:	83 c4 0c             	add    esp,0xc
c001c366:	6a 0c                	push   0xc
c001c368:	56                   	push   esi
c001c369:	53                   	push   ebx
c001c36a:	e8 21 f9 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c36f:	83 c4 0c             	add    esp,0xc
c001c372:	6a 0c                	push   0xc
c001c374:	56                   	push   esi
c001c375:	53                   	push   ebx
c001c376:	e8 15 f9 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c37b:	83 c4 0c             	add    esp,0xc
c001c37e:	6a 0c                	push   0xc
c001c380:	56                   	push   esi
c001c381:	53                   	push   ebx
c001c382:	e8 09 f9 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c387:	68 ec 00 00 00       	push   0xec
c001c38c:	6a 07                	push   0x7
c001c38e:	56                   	push   esi
c001c38f:	53                   	push   ebx
c001c390:	e8 3b f8 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c395:	83 c4 1c             	add    esp,0x1c
c001c398:	6a 0c                	push   0xc
c001c39a:	56                   	push   esi
c001c39b:	53                   	push   ebx
c001c39c:	e8 ef f8 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c3a1:	83 c4 0c             	add    esp,0xc
c001c3a4:	6a 0c                	push   0xc
c001c3a6:	56                   	push   esi
c001c3a7:	53                   	push   ebx
c001c3a8:	e8 e3 f8 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c3ad:	83 c4 0c             	add    esp,0xc
c001c3b0:	6a 0c                	push   0xc
c001c3b2:	56                   	push   esi
c001c3b3:	53                   	push   ebx
c001c3b4:	e8 d7 f8 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c3b9:	83 c4 0c             	add    esp,0xc
c001c3bc:	6a 0c                	push   0xc
c001c3be:	56                   	push   esi
c001c3bf:	53                   	push   ebx
c001c3c0:	e8 cb f8 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c3c5:	83 c4 0c             	add    esp,0xc
c001c3c8:	6a 0c                	push   0xc
c001c3ca:	56                   	push   esi
c001c3cb:	53                   	push   ebx
c001c3cc:	e8 bf f8 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c3d1:	83 c4 10             	add    esp,0x10
c001c3d4:	84 c0                	test   al,al
c001c3d6:	0f 84 8b 01 00 00    	je     c001c567 <IDE::detect()+0x269>
c001c3dc:	31 ff                	xor    edi,edi
c001c3de:	50                   	push   eax
c001c3df:	6a 0c                	push   0xc
c001c3e1:	56                   	push   esi
c001c3e2:	53                   	push   ebx
c001c3e3:	e8 a8 f8 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	a8 01                	test   al,0x1
c001c3ed:	0f 85 8e 01 00 00    	jne    c001c581 <IDE::detect()+0x283>
c001c3f3:	84 c0                	test   al,al
c001c3f5:	78 04                	js     c001c3fb <IDE::detect()+0xfd>
c001c3f7:	a8 08                	test   al,0x8
c001c3f9:	75 27                	jne    c001c422 <IDE::detect()+0x124>
c001c3fb:	47                   	inc    edi
c001c3fc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c402:	7e da                	jle    c001c3de <IDE::detect()+0xe0>
c001c404:	50                   	push   eax
c001c405:	50                   	push   eax
c001c406:	6a 00                	push   0x0
c001c408:	68 40 4b 4c 00       	push   0x4c4b40
c001c40d:	e8 5b be ff ff       	call   c001826d <nanoSleep(unsigned long long)>
c001c412:	83 c4 10             	add    esp,0x10
c001c415:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c41b:	75 c1                	jne    c001c3de <IDE::detect()+0xe0>
c001c41d:	e9 5f 01 00 00       	jmp    c001c581 <IDE::detect()+0x283>
c001c422:	31 c9                	xor    ecx,ecx
c001c424:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c428:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	68 80 00 00 00       	push   0x80
c001c434:	57                   	push   edi
c001c435:	6a 00                	push   0x0
c001c437:	56                   	push   esi
c001c438:	53                   	push   ebx
c001c439:	e8 f4 fd ff ff       	call   c001c232 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c43e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c443:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c447:	89 d1                	mov    ecx,edx
c001c449:	c1 e0 06             	shl    eax,0x6
c001c44c:	01 d8                	add    eax,ebx
c001c44e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c455:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c45c:	89 f2                	mov    edx,esi
c001c45e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c464:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c468:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c46e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c472:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c479:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c481:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c488:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c490:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c496:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c49d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c4a3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c4a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c4ab:	83 c4 20             	add    esp,0x20
c001c4ae:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c4b1:	83 c0 02             	add    eax,0x2
c001c4b4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c4ba:	83 c7 02             	add    edi,0x2
c001c4bd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c4c0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c4c6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c4ca:	75 e2                	jne    c001c4ae <IDE::detect()+0x1b0>
c001c4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d0:	c1 e0 06             	shl    eax,0x6
c001c4d3:	01 d8                	add    eax,ebx
c001c4d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c4db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c4e2:	66 c1 ea 09          	shr    dx,0x9
c001c4e6:	83 e2 01             	and    edx,0x1
c001c4e9:	84 c9                	test   cl,cl
c001c4eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c4f1:	75 2f                	jne    c001c522 <IDE::detect()+0x224>
c001c4f3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c4f9:	85 c0                	test   eax,eax
c001c4fb:	74 66                	je     c001c563 <IDE::detect()+0x265>
c001c4fd:	50                   	push   eax
c001c4fe:	55                   	push   ebp
c001c4ff:	56                   	push   esi
c001c500:	68 af 25 02 c0       	push   0xc00225af
c001c505:	e8 d9 2a ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c50a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c511:	e8 de 29 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001c516:	89 c7                	mov    edi,eax
c001c518:	89 04 24             	mov    DWORD PTR [esp],eax
c001c51b:	e8 e8 02 00 00       	call   c001c808 <ATA::ATA()>
c001c520:	eb 28                	jmp    c001c54a <IDE::detect()+0x24c>
c001c522:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c528:	55                   	push   ebp
c001c529:	56                   	push   esi
c001c52a:	68 de 25 02 c0       	push   0xc00225de
c001c52f:	e8 af 2a ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c534:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c53b:	e8 b4 29 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001c540:	89 c7                	mov    edi,eax
c001c542:	89 04 24             	mov    DWORD PTR [esp],eax
c001c545:	e8 ee 08 00 00       	call   c001ce38 <ATAPI::ATAPI()>
c001c54a:	5a                   	pop    edx
c001c54b:	59                   	pop    ecx
c001c54c:	57                   	push   edi
c001c54d:	53                   	push   ebx
c001c54e:	e8 9b 3e ff ff       	call   c00103ee <Device::addChild(Device*)>
c001c553:	8b 07                	mov    eax,DWORD PTR [edi]
c001c555:	53                   	push   ebx
c001c556:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c55a:	6a 00                	push   0x0
c001c55c:	57                   	push   edi
c001c55d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c560:	83 c4 20             	add    esp,0x20
c001c563:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c567:	4d                   	dec    ebp
c001c568:	74 0a                	je     c001c574 <IDE::detect()+0x276>
c001c56a:	bd 01 00 00 00       	mov    ebp,0x1
c001c56f:	e9 bb fd ff ff       	jmp    c001c32f <IDE::detect()+0x31>
c001c574:	4e                   	dec    esi
c001c575:	74 63                	je     c001c5da <IDE::detect()+0x2dc>
c001c577:	be 01 00 00 00       	mov    esi,0x1
c001c57c:	e9 ac fd ff ff       	jmp    c001c32d <IDE::detect()+0x2f>
c001c581:	50                   	push   eax
c001c582:	6a 04                	push   0x4
c001c584:	56                   	push   esi
c001c585:	53                   	push   ebx
c001c586:	e8 05 f7 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c58b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c58f:	83 c4 0c             	add    esp,0xc
c001c592:	6a 05                	push   0x5
c001c594:	56                   	push   esi
c001c595:	53                   	push   ebx
c001c596:	e8 f5 f6 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c5a2:	80 fa 14             	cmp    dl,0x14
c001c5a5:	75 04                	jne    c001c5ab <IDE::detect()+0x2ad>
c001c5a7:	3c eb                	cmp    al,0xeb
c001c5a9:	eb 07                	jmp    c001c5b2 <IDE::detect()+0x2b4>
c001c5ab:	3c 96                	cmp    al,0x96
c001c5ad:	75 b8                	jne    c001c567 <IDE::detect()+0x269>
c001c5af:	80 fa 69             	cmp    dl,0x69
c001c5b2:	75 b3                	jne    c001c567 <IDE::detect()+0x269>
c001c5b4:	68 a1 00 00 00       	push   0xa1
c001c5b9:	6a 07                	push   0x7
c001c5bb:	56                   	push   esi
c001c5bc:	53                   	push   ebx
c001c5bd:	e8 0e f6 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5c2:	5f                   	pop    edi
c001c5c3:	58                   	pop    eax
c001c5c4:	6a 00                	push   0x0
c001c5c6:	68 40 42 0f 00       	push   0xf4240
c001c5cb:	e8 9d bc ff ff       	call   c001826d <nanoSleep(unsigned long long)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	b1 01                	mov    cl,0x1
c001c5d5:	e9 4a fe ff ff       	jmp    c001c424 <IDE::detect()+0x126>
c001c5da:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c5e0:	5b                   	pop    ebx
c001c5e1:	5e                   	pop    esi
c001c5e2:	5f                   	pop    edi
c001c5e3:	5d                   	pop    ebp
c001c5e4:	c3                   	ret    
c001c5e5:	90                   	nop

c001c5e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c5e6:	55                   	push   ebp
c001c5e7:	57                   	push   edi
c001c5e8:	56                   	push   esi
c001c5e9:	53                   	push   ebx
c001c5ea:	83 ec 1c             	sub    esp,0x1c
c001c5ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c5f9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c5fd:	88 c3                	mov    bl,al
c001c5ff:	84 c0                	test   al,al
c001c601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c605:	0f 84 67 01 00 00    	je     c001c772 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c60b:	83 ec 0c             	sub    esp,0xc
c001c60e:	68 0f 26 02 c0       	push   0xc002260f
c001c613:	e8 cb 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c618:	83 c4 10             	add    esp,0x10
c001c61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c61f:	3c 01                	cmp    al,0x1
c001c621:	75 17                	jne    c001c63a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c623:	83 ec 0c             	sub    esp,0xc
c001c626:	b3 13                	mov    bl,0x13
c001c628:	68 1b 26 02 c0       	push   0xc002261b
c001c62d:	e8 b1 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c632:	83 c4 10             	add    esp,0x10
c001c635:	e9 25 01 00 00       	jmp    c001c75f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c63a:	3c 02                	cmp    al,0x2
c001c63c:	0f 85 ef 00 00 00    	jne    c001c731 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c642:	d1 e6                	shl    esi,1
c001c644:	09 ee                	or     esi,ebp
c001c646:	52                   	push   edx
c001c647:	89 f0                	mov    eax,esi
c001c649:	6a 01                	push   0x1
c001c64b:	0f b6 f0             	movzx  esi,al
c001c64e:	c1 e6 06             	shl    esi,0x6
c001c651:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c659:	50                   	push   eax
c001c65a:	57                   	push   edi
c001c65b:	e8 30 f6 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c660:	83 c4 10             	add    esp,0x10
c001c663:	89 c6                	mov    esi,eax
c001c665:	a8 01                	test   al,0x1
c001c667:	74 12                	je     c001c67b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c669:	83 ec 0c             	sub    esp,0xc
c001c66c:	b3 07                	mov    bl,0x7
c001c66e:	68 30 26 02 c0       	push   0xc0022630
c001c673:	e8 6b 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c678:	83 c4 10             	add    esp,0x10
c001c67b:	f7 c6 02 00 00 00    	test   esi,0x2
c001c681:	74 12                	je     c001c695 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c683:	83 ec 0c             	sub    esp,0xc
c001c686:	b3 03                	mov    bl,0x3
c001c688:	68 4e 26 02 c0       	push   0xc002264e
c001c68d:	e8 51 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c692:	83 c4 10             	add    esp,0x10
c001c695:	f7 c6 04 00 00 00    	test   esi,0x4
c001c69b:	74 12                	je     c001c6af <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c69d:	83 ec 0c             	sub    esp,0xc
c001c6a0:	b3 14                	mov    bl,0x14
c001c6a2:	68 6e 26 02 c0       	push   0xc002266e
c001c6a7:	e8 37 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c6ac:	83 c4 10             	add    esp,0x10
c001c6af:	f7 c6 08 00 00 00    	test   esi,0x8
c001c6b5:	74 12                	je     c001c6c9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c6b7:	83 ec 0c             	sub    esp,0xc
c001c6ba:	b3 03                	mov    bl,0x3
c001c6bc:	68 4e 26 02 c0       	push   0xc002264e
c001c6c1:	e8 1d 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	f7 c6 10 00 00 00    	test   esi,0x10
c001c6cf:	74 12                	je     c001c6e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c6d1:	83 ec 0c             	sub    esp,0xc
c001c6d4:	b3 15                	mov    bl,0x15
c001c6d6:	68 86 26 02 c0       	push   0xc0022686
c001c6db:	e8 03 29 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c6e0:	83 c4 10             	add    esp,0x10
c001c6e3:	f7 c6 20 00 00 00    	test   esi,0x20
c001c6e9:	74 12                	je     c001c6fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c6eb:	83 ec 0c             	sub    esp,0xc
c001c6ee:	b3 03                	mov    bl,0x3
c001c6f0:	68 4e 26 02 c0       	push   0xc002264e
c001c6f5:	e8 e9 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c6fa:	83 c4 10             	add    esp,0x10
c001c6fd:	f7 c6 40 00 00 00    	test   esi,0x40
c001c703:	74 12                	je     c001c717 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c705:	83 ec 0c             	sub    esp,0xc
c001c708:	b3 16                	mov    bl,0x16
c001c70a:	68 a0 26 02 c0       	push   0xc00226a0
c001c70f:	e8 cf 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c714:	83 c4 10             	add    esp,0x10
c001c717:	89 f0                	mov    eax,esi
c001c719:	84 c0                	test   al,al
c001c71b:	79 42                	jns    c001c75f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c71d:	83 ec 0c             	sub    esp,0xc
c001c720:	b3 0d                	mov    bl,0xd
c001c722:	68 c1 26 02 c0       	push   0xc00226c1
c001c727:	e8 b7 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c72c:	83 c4 10             	add    esp,0x10
c001c72f:	eb 2e                	jmp    c001c75f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c731:	3c 03                	cmp    al,0x3
c001c733:	75 14                	jne    c001c749 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c735:	83 ec 0c             	sub    esp,0xc
c001c738:	b3 17                	mov    bl,0x17
c001c73a:	68 d5 26 02 c0       	push   0xc00226d5
c001c73f:	e8 9f 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c744:	83 c4 10             	add    esp,0x10
c001c747:	eb 16                	jmp    c001c75f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c749:	3c 04                	cmp    al,0x4
c001c74b:	75 12                	jne    c001c75f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c74d:	83 ec 0c             	sub    esp,0xc
c001c750:	b3 08                	mov    bl,0x8
c001c752:	68 eb 26 02 c0       	push   0xc00226eb
c001c757:	e8 87 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c75c:	83 c4 10             	add    esp,0x10
c001c75f:	50                   	push   eax
c001c760:	50                   	push   eax
c001c761:	0f b6 c3             	movzx  eax,bl
c001c764:	50                   	push   eax
c001c765:	68 03 27 02 c0       	push   0xc0022703
c001c76a:	e8 74 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c76f:	83 c4 10             	add    esp,0x10
c001c772:	83 c4 1c             	add    esp,0x1c
c001c775:	88 d8                	mov    al,bl
c001c777:	5b                   	pop    ebx
c001c778:	5e                   	pop    esi
c001c779:	5f                   	pop    edi
c001c77a:	5d                   	pop    ebp
c001c77b:	c3                   	ret    

c001c77c <IDE::polling(unsigned char, unsigned int)>:
c001c77c:	57                   	push   edi
c001c77d:	56                   	push   esi
c001c77e:	53                   	push   ebx
c001c77f:	bb 04 00 00 00       	mov    ebx,0x4
c001c784:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c788:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c78d:	52                   	push   edx
c001c78e:	6a 0c                	push   0xc
c001c790:	56                   	push   esi
c001c791:	57                   	push   edi
c001c792:	e8 f9 f4 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	4b                   	dec    ebx
c001c79b:	75 f0                	jne    c001c78d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c79d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c7a2:	50                   	push   eax
c001c7a3:	6a 0c                	push   0xc
c001c7a5:	56                   	push   esi
c001c7a6:	57                   	push   edi
c001c7a7:	e8 e4 f4 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c7ac:	83 c4 10             	add    esp,0x10
c001c7af:	a8 01                	test   al,0x1
c001c7b1:	74 12                	je     c001c7c5 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c7b3:	83 ec 0c             	sub    esp,0xc
c001c7b6:	68 1d 27 02 c0       	push   0xc002271d
c001c7bb:	e8 23 28 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001c7c0:	83 c4 10             	add    esp,0x10
c001c7c3:	eb 17                	jmp    c001c7dc <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7c5:	a8 20                	test   al,0x20
c001c7c7:	75 0f                	jne    c001c7d8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c7c9:	4b                   	dec    ebx
c001c7ca:	74 10                	je     c001c7dc <IDE::polling(unsigned char, unsigned int)+0x60>
c001c7cc:	84 c0                	test   al,al
c001c7ce:	78 d2                	js     c001c7a2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7d0:	a8 08                	test   al,0x8
c001c7d2:	74 ce                	je     c001c7a2 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7d4:	31 c0                	xor    eax,eax
c001c7d6:	eb 06                	jmp    c001c7de <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7d8:	b0 01                	mov    al,0x1
c001c7da:	eb 02                	jmp    c001c7de <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7dc:	b0 02                	mov    al,0x2
c001c7de:	5b                   	pop    ebx
c001c7df:	5e                   	pop    esi
c001c7e0:	5f                   	pop    edi
c001c7e1:	c3                   	ret    

c001c7e2 <ATA::close(int, int, void*)>:
c001c7e2:	83 ec 0c             	sub    esp,0xc
c001c7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7ef:	85 c0                	test   eax,eax
c001c7f1:	74 0c                	je     c001c7ff <ATA::close(int, int, void*)+0x1d>
c001c7f3:	83 ec 0c             	sub    esp,0xc
c001c7f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7f8:	50                   	push   eax
c001c7f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7fc:	83 c4 10             	add    esp,0x10
c001c7ff:	31 c0                	xor    eax,eax
c001c801:	83 c4 0c             	add    esp,0xc
c001c804:	c3                   	ret    
c001c805:	90                   	nop

c001c806 <ATA::powerSaving(PowerSavingLevel)>:
c001c806:	c3                   	ret    
c001c807:	90                   	nop

c001c808 <ATA::ATA()>:
c001c808:	83 ec 0c             	sub    esp,0xc
c001c80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80f:	83 ec 04             	sub    esp,0x4
c001c812:	68 00 02 00 00       	push   0x200
c001c817:	68 60 27 02 c0       	push   0xc0022760
c001c81c:	50                   	push   eax
c001c81d:	e8 d2 3f ff ff       	call   c00107f4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c822:	83 c4 10             	add    esp,0x10
c001c825:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c001c82a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82e:	89 10                	mov    DWORD PTR [eax],edx
c001c830:	90                   	nop
c001c831:	83 c4 0c             	add    esp,0xc
c001c834:	c3                   	ret    
c001c835:	90                   	nop

c001c836 <ATA::flush(bool)>:
c001c836:	53                   	push   ebx
c001c837:	83 ec 08             	sub    esp,0x8
c001c83a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c83f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c843:	19 c0                	sbb    eax,eax
c001c845:	83 e0 fd             	and    eax,0xfffffffd
c001c848:	05 ea 00 00 00       	add    eax,0xea
c001c84d:	50                   	push   eax
c001c84e:	6a 07                	push   0x7
c001c850:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c857:	50                   	push   eax
c001c858:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c85e:	e8 6d f3 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c863:	83 c4 0c             	add    esp,0xc
c001c866:	6a 00                	push   0x0
c001c868:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c86f:	50                   	push   eax
c001c870:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c876:	e8 01 ff ff ff       	call   c001c77c <IDE::polling(unsigned char, unsigned int)>
c001c87b:	83 c4 18             	add    esp,0x18
c001c87e:	5b                   	pop    ebx
c001c87f:	c3                   	ret    

c001c880 <ATA::readyForCommand()>:
c001c880:	56                   	push   esi
c001c881:	53                   	push   ebx
c001c882:	31 db                	xor    ebx,ebx
c001c884:	50                   	push   eax
c001c885:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c889:	50                   	push   eax
c001c88a:	6a 0c                	push   0xc
c001c88c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c893:	50                   	push   eax
c001c894:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c89a:	e8 f1 f3 ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001c89f:	83 c4 10             	add    esp,0x10
c001c8a2:	a8 88                	test   al,0x88
c001c8a4:	74 23                	je     c001c8c9 <ATA::readyForCommand()+0x49>
c001c8a6:	43                   	inc    ebx
c001c8a7:	83 fb 63             	cmp    ebx,0x63
c001c8aa:	7e dd                	jle    c001c889 <ATA::readyForCommand()+0x9>
c001c8ac:	51                   	push   ecx
c001c8ad:	51                   	push   ecx
c001c8ae:	6a 00                	push   0x0
c001c8b0:	68 40 42 0f 00       	push   0xf4240
c001c8b5:	e8 b3 b9 ff ff       	call   c001826d <nanoSleep(unsigned long long)>
c001c8ba:	83 c4 10             	add    esp,0x10
c001c8bd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c8c3:	75 c4                	jne    c001c889 <ATA::readyForCommand()+0x9>
c001c8c5:	31 c0                	xor    eax,eax
c001c8c7:	eb 02                	jmp    c001c8cb <ATA::readyForCommand()+0x4b>
c001c8c9:	b0 01                	mov    al,0x1
c001c8cb:	5a                   	pop    edx
c001c8cc:	5b                   	pop    ebx
c001c8cd:	5e                   	pop    esi
c001c8ce:	c3                   	ret    
c001c8cf:	90                   	nop

c001c8d0 <ATA::access(unsigned long long, int, void*, bool)>:
c001c8d0:	55                   	push   ebp
c001c8d1:	57                   	push   edi
c001c8d2:	56                   	push   esi
c001c8d3:	53                   	push   ebx
c001c8d4:	83 ec 2c             	sub    esp,0x2c
c001c8d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c8df:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c8e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8e7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8eb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8f3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c903:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c907:	c1 e0 06             	shl    eax,0x6
c001c90a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c912:	74 5d                	je     c001c971 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c914:	89 fa                	mov    edx,edi
c001c916:	89 f0                	mov    eax,esi
c001c918:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c91c:	c1 ea 1c             	shr    edx,0x1c
c001c91f:	89 d1                	mov    ecx,edx
c001c921:	09 c1                	or     ecx,eax
c001c923:	74 25                	je     c001c94a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c925:	31 ed                	xor    ebp,ebp
c001c927:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c92e:	89 fa                	mov    edx,edi
c001c930:	89 f0                	mov    eax,esi
c001c932:	0f ad d0             	shrd   eax,edx,cl
c001c935:	d3 ea                	shr    edx,cl
c001c937:	f6 c1 20             	test   cl,0x20
c001c93a:	74 02                	je     c001c93e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c93c:	89 d0                	mov    eax,edx
c001c93e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c942:	45                   	inc    ebp
c001c943:	83 fd 06             	cmp    ebp,0x6
c001c946:	75 df                	jne    c001c927 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c948:	eb 76                	jmp    c001c9c0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c94a:	89 f0                	mov    eax,esi
c001c94c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c951:	89 fa                	mov    edx,edi
c001c953:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c95a:	0f ac d0 10          	shrd   eax,edx,0x10
c001c95e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c963:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c967:	c1 ee 18             	shr    esi,0x18
c001c96a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c96f:	eb 56                	jmp    c001c9c7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c971:	6a 00                	push   0x0
c001c973:	6a 3f                	push   0x3f
c001c975:	57                   	push   edi
c001c976:	56                   	push   esi
c001c977:	e8 e0 1e 00 00       	call   c001e85c <__umoddi3>
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	40                   	inc    eax
c001c980:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c984:	6a 00                	push   0x0
c001c986:	68 f0 03 00 00       	push   0x3f0
c001c98b:	57                   	push   edi
c001c98c:	56                   	push   esi
c001c98d:	e8 ca 1d 00 00       	call   c001e75c <__udivdi3>
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c99a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c9a1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c9a6:	6a 00                	push   0x0
c001c9a8:	6a 3f                	push   0x3f
c001c9aa:	57                   	push   edi
c001c9ab:	56                   	push   esi
c001c9ac:	e8 ab 1d 00 00       	call   c001e75c <__udivdi3>
c001c9b1:	83 c4 10             	add    esp,0x10
c001c9b4:	89 c6                	mov    esi,eax
c001c9b6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c9bb:	83 e6 0f             	and    esi,0xf
c001c9be:	eb 07                	jmp    c001c9c7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c9c0:	31 f6                	xor    esi,esi
c001c9c2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c9c7:	bf 01 00 00 00       	mov    edi,0x1
c001c9cc:	50                   	push   eax
c001c9cd:	6a 00                	push   0x0
c001c9cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9d6:	50                   	push   eax
c001c9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9db:	e8 fc f3 ff ff       	call   c001bddc <IDE::enableIRQs(unsigned char, bool)>
c001c9e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9e3:	e8 98 fe ff ff       	call   c001c880 <ATA::readyForCommand()>
c001c9e8:	83 c4 10             	add    esp,0x10
c001c9eb:	84 c0                	test   al,al
c001c9ed:	0f 84 50 02 00 00    	je     c001cc43 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c9f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9ff:	c1 e0 04             	shl    eax,0x4
c001ca02:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ca09:	09 c6                	or     esi,eax
c001ca0b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ca10:	75 05                	jne    c001ca17 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001ca12:	83 ce a0             	or     esi,0xffffffa0
c001ca15:	eb 03                	jmp    c001ca1a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001ca17:	83 ce e0             	or     esi,0xffffffe0
c001ca1a:	89 f0                	mov    eax,esi
c001ca1c:	0f b6 f0             	movzx  esi,al
c001ca1f:	56                   	push   esi
c001ca20:	6a 06                	push   0x6
c001ca22:	51                   	push   ecx
c001ca23:	52                   	push   edx
c001ca24:	e8 a7 f1 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca29:	83 c4 10             	add    esp,0x10
c001ca2c:	6a 00                	push   0x0
c001ca2e:	6a 01                	push   0x1
c001ca30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca37:	50                   	push   eax
c001ca38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca3e:	e8 8d f1 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca43:	83 c4 10             	add    esp,0x10
c001ca46:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca4b:	75 6e                	jne    c001cabb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca4d:	6a 00                	push   0x0
c001ca4f:	6a 08                	push   0x8
c001ca51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca58:	50                   	push   eax
c001ca59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca5f:	e8 6c f1 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca64:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca69:	50                   	push   eax
c001ca6a:	6a 09                	push   0x9
c001ca6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca73:	50                   	push   eax
c001ca74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7a:	e8 51 f1 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca7f:	83 c4 20             	add    esp,0x20
c001ca82:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca87:	50                   	push   eax
c001ca88:	6a 0a                	push   0xa
c001ca8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca91:	50                   	push   eax
c001ca92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca98:	e8 33 f1 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca9d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001caa2:	50                   	push   eax
c001caa3:	6a 0b                	push   0xb
c001caa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caac:	50                   	push   eax
c001caad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab3:	e8 18 f1 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cab8:	83 c4 20             	add    esp,0x20
c001cabb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cac0:	50                   	push   eax
c001cac1:	6a 02                	push   0x2
c001cac3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caca:	50                   	push   eax
c001cacb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad1:	e8 fa f0 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cad6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cadb:	50                   	push   eax
c001cadc:	6a 03                	push   0x3
c001cade:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae5:	50                   	push   eax
c001cae6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caec:	e8 df f0 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf1:	83 c4 20             	add    esp,0x20
c001caf4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001caf9:	50                   	push   eax
c001cafa:	6a 04                	push   0x4
c001cafc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb03:	50                   	push   eax
c001cb04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb0a:	e8 c1 f0 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb0f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb14:	50                   	push   eax
c001cb15:	6a 05                	push   0x5
c001cb17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb1e:	50                   	push   eax
c001cb1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb25:	e8 a6 f0 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2a:	83 c4 20             	add    esp,0x20
c001cb2d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cb32:	0f 94 c0             	sete   al
c001cb35:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb3a:	74 09                	je     c001cb45 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb3c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb43:	eb 07                	jmp    c001cb4c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb45:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb4c:	0f b6 c0             	movzx  eax,al
c001cb4f:	50                   	push   eax
c001cb50:	6a 07                	push   0x7
c001cb52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb59:	50                   	push   eax
c001cb5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb60:	e8 6b f0 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb65:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb69:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb6d:	83 c4 10             	add    esp,0x10
c001cb70:	85 f6                	test   esi,esi
c001cb72:	0f 84 ac 00 00 00    	je     c001cc24 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cb78:	50                   	push   eax
c001cb79:	6a 01                	push   0x1
c001cb7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb82:	50                   	push   eax
c001cb83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb89:	e8 ee fb ff ff       	call   c001c77c <IDE::polling(unsigned char, unsigned int)>
c001cb8e:	83 c4 10             	add    esp,0x10
c001cb91:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb97:	84 c0                	test   al,al
c001cb99:	74 20                	je     c001cbbb <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb9b:	0f b6 f8             	movzx  edi,al
c001cb9e:	0f b6 d2             	movzx  edx,dl
c001cba1:	57                   	push   edi
c001cba2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cba9:	50                   	push   eax
c001cbaa:	52                   	push   edx
c001cbab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbb1:	e8 30 fa ff ff       	call   c001c5e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cbb6:	e9 85 00 00 00       	jmp    c001cc40 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cbbb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cbc0:	74 41                	je     c001cc03 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cbc2:	31 c9                	xor    ecx,ecx
c001cbc4:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cbc8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cbcc:	50                   	push   eax
c001cbcd:	50                   	push   eax
c001cbce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbd5:	50                   	push   eax
c001cbd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbdc:	e8 dd ef ff ff       	call   c001bbbe <IDE::getBase(unsigned char)>
c001cbe1:	89 c2                	mov    edx,eax
c001cbe3:	89 e8                	mov    eax,ebp
c001cbe5:	66 ef                	out    dx,ax
c001cbe7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	41                   	inc    ecx
c001cbef:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbf5:	75 cd                	jne    c001cbc4 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cbf7:	4e                   	dec    esi
c001cbf8:	81 c7 00 02 00 00    	add    edi,0x200
c001cbfe:	e9 6d ff ff ff       	jmp    c001cb70 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cc03:	0f b6 d2             	movzx  edx,dl
c001cc06:	51                   	push   ecx
c001cc07:	51                   	push   ecx
c001cc08:	52                   	push   edx
c001cc09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc0f:	e8 aa ef ff ff       	call   c001bbbe <IDE::getBase(unsigned char)>
c001cc14:	b9 00 01 00 00       	mov    ecx,0x100
c001cc19:	89 c2                	mov    edx,eax
c001cc1b:	fc                   	cld    
c001cc1c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	eb d3                	jmp    c001cbf7 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cc24:	31 ff                	xor    edi,edi
c001cc26:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc2b:	74 16                	je     c001cc43 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cc2d:	50                   	push   eax
c001cc2e:	50                   	push   eax
c001cc2f:	31 c0                	xor    eax,eax
c001cc31:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc36:	0f 94 c0             	sete   al
c001cc39:	50                   	push   eax
c001cc3a:	53                   	push   ebx
c001cc3b:	e8 f6 fb ff ff       	call   c001c836 <ATA::flush(bool)>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	83 c4 2c             	add    esp,0x2c
c001cc46:	89 f8                	mov    eax,edi
c001cc48:	5b                   	pop    ebx
c001cc49:	5e                   	pop    esi
c001cc4a:	5f                   	pop    edi
c001cc4b:	5d                   	pop    ebp
c001cc4c:	c3                   	ret    
c001cc4d:	90                   	nop

c001cc4e <ATA::read(unsigned long long, int, void*)>:
c001cc4e:	57                   	push   edi
c001cc4f:	b8 04 00 00 00       	mov    eax,0x4
c001cc54:	56                   	push   esi
c001cc55:	53                   	push   ebx
c001cc56:	83 ec 10             	sub    esp,0x10
c001cc59:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc5d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc61:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc64:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc6c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc72:	77 3b                	ja     c001ccaf <ATA::read(unsigned long long, int, void*)+0x61>
c001cc74:	b8 06 00 00 00       	mov    eax,0x6
c001cc79:	85 d2                	test   edx,edx
c001cc7b:	74 32                	je     c001ccaf <ATA::read(unsigned long long, int, void*)+0x61>
c001cc7d:	50                   	push   eax
c001cc7e:	50                   	push   eax
c001cc7f:	6a 00                	push   0x0
c001cc81:	52                   	push   edx
c001cc82:	53                   	push   ebx
c001cc83:	57                   	push   edi
c001cc84:	56                   	push   esi
c001cc85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc89:	e8 42 fc ff ff       	call   c001c8d0 <ATA::access(unsigned long long, int, void*, bool)>
c001cc8e:	83 c4 20             	add    esp,0x20
c001cc91:	85 c0                	test   eax,eax
c001cc93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc97:	75 11                	jne    c001ccaa <ATA::read(unsigned long long, int, void*)+0x5c>
c001cc99:	01 1d e4 54 02 c0    	add    DWORD PTR ds:0xc00254e4,ebx
c001cc9f:	e8 b8 fe fe ff       	call   c000cb5c <VgaText::updateDiskUsage()>
c001cca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cca8:	eb 05                	jmp    c001ccaf <ATA::read(unsigned long long, int, void*)+0x61>
c001ccaa:	b8 01 00 00 00       	mov    eax,0x1
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	5b                   	pop    ebx
c001ccb3:	5e                   	pop    esi
c001ccb4:	5f                   	pop    edi
c001ccb5:	c3                   	ret    

c001ccb6 <ATA::write(unsigned long long, int, void*)>:
c001ccb6:	57                   	push   edi
c001ccb7:	b8 04 00 00 00       	mov    eax,0x4
c001ccbc:	56                   	push   esi
c001ccbd:	53                   	push   ebx
c001ccbe:	83 ec 10             	sub    esp,0x10
c001ccc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ccc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ccc9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cccc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccd4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001ccda:	77 3b                	ja     c001cd17 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccdc:	b8 06 00 00 00       	mov    eax,0x6
c001cce1:	85 d2                	test   edx,edx
c001cce3:	74 32                	je     c001cd17 <ATA::write(unsigned long long, int, void*)+0x61>
c001cce5:	50                   	push   eax
c001cce6:	50                   	push   eax
c001cce7:	6a 01                	push   0x1
c001cce9:	52                   	push   edx
c001ccea:	53                   	push   ebx
c001cceb:	57                   	push   edi
c001ccec:	56                   	push   esi
c001cced:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccf1:	e8 da fb ff ff       	call   c001c8d0 <ATA::access(unsigned long long, int, void*, bool)>
c001ccf6:	83 c4 20             	add    esp,0x20
c001ccf9:	85 c0                	test   eax,eax
c001ccfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccff:	75 11                	jne    c001cd12 <ATA::write(unsigned long long, int, void*)+0x5c>
c001cd01:	01 1d e0 54 02 c0    	add    DWORD PTR ds:0xc00254e0,ebx
c001cd07:	e8 50 fe fe ff       	call   c000cb5c <VgaText::updateDiskUsage()>
c001cd0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd10:	eb 05                	jmp    c001cd17 <ATA::write(unsigned long long, int, void*)+0x61>
c001cd12:	b8 01 00 00 00       	mov    eax,0x1
c001cd17:	83 c4 10             	add    esp,0x10
c001cd1a:	5b                   	pop    ebx
c001cd1b:	5e                   	pop    esi
c001cd1c:	5f                   	pop    edi
c001cd1d:	c3                   	ret    

c001cd1e <ATA::detectCHS()>:
c001cd1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd22:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cd28:	c1 e0 06             	shl    eax,0x6
c001cd2b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cd31:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd3b:	c7 44 24 04 6f 27 02 c0 	mov    DWORD PTR [esp+0x4],0xc002276f
c001cd43:	e9 30 7f ff ff       	jmp    c0014c78 <Krnl::panic(char const*)>

c001cd48 <ATA::open(int, int, void*)>:
c001cd48:	53                   	push   ebx
c001cd49:	83 ec 08             	sub    esp,0x8
c001cd4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd58:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd5e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd64:	c1 e0 06             	shl    eax,0x6
c001cd67:	01 d0                	add    eax,edx
c001cd69:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd70:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd76:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd7d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd87:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd8d:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd94:	75 0c                	jne    c001cda2 <ATA::open(int, int, void*)+0x5a>
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	53                   	push   ebx
c001cd9a:	e8 7f ff ff ff       	call   c001cd1e <ATA::detectCHS()>
c001cd9f:	83 c4 10             	add    esp,0x10
c001cda2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cda8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdae:	c1 e0 06             	shl    eax,0x6
c001cdb1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cdb8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cdc2:	d1 e8                	shr    eax,1
c001cdc4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cdca:	6a 04                	push   0x4
c001cdcc:	6a 0c                	push   0xc
c001cdce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdd5:	50                   	push   eax
c001cdd6:	52                   	push   edx
c001cdd7:	e8 f4 ed ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cddc:	90                   	nop
c001cddd:	90                   	nop
c001cdde:	6a 00                	push   0x0
c001cde0:	6a 0c                	push   0xc
c001cde2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cde9:	50                   	push   eax
c001cdea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdf0:	e8 db ed ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdf5:	83 c4 14             	add    esp,0x14
c001cdf8:	53                   	push   ebx
c001cdf9:	e8 5e 3a ff ff       	call   c001085c <PhysicalDisk::startCache()>
c001cdfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce01:	e8 64 53 ff ff       	call   c001216a <createPartitionsForDisk(PhysicalDisk*)>
c001ce06:	31 c0                	xor    eax,eax
c001ce08:	83 c4 18             	add    esp,0x18
c001ce0b:	5b                   	pop    ebx
c001ce0c:	c3                   	ret    
c001ce0d:	90                   	nop

c001ce0e <ATAPI::write(unsigned long long, int, void*)>:
c001ce0e:	b8 03 00 00 00       	mov    eax,0x3
c001ce13:	c3                   	ret    

c001ce14 <ATAPI::close(int, int, void*)>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ce21:	85 c0                	test   eax,eax
c001ce23:	74 0c                	je     c001ce31 <ATAPI::close(int, int, void*)+0x1d>
c001ce25:	83 ec 0c             	sub    esp,0xc
c001ce28:	8b 10                	mov    edx,DWORD PTR [eax]
c001ce2a:	50                   	push   eax
c001ce2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce2e:	83 c4 10             	add    esp,0x10
c001ce31:	31 c0                	xor    eax,eax
c001ce33:	83 c4 0c             	add    esp,0xc
c001ce36:	c3                   	ret    
c001ce37:	90                   	nop

c001ce38 <ATAPI::ATAPI()>:
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3f:	83 ec 04             	sub    esp,0x4
c001ce42:	68 00 08 00 00       	push   0x800
c001ce47:	68 b8 27 02 c0       	push   0xc00227b8
c001ce4c:	50                   	push   eax
c001ce4d:	e8 a2 39 ff ff       	call   c00107f4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce52:	83 c4 10             	add    esp,0x10
c001ce55:	ba f8 27 02 c0       	mov    edx,0xc00227f8
c001ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5e:	89 10                	mov    DWORD PTR [eax],edx
c001ce60:	90                   	nop
c001ce61:	83 c4 0c             	add    esp,0xc
c001ce64:	c3                   	ret    
c001ce65:	90                   	nop

c001ce66 <ATAPI::readyForCommand()>:
c001ce66:	56                   	push   esi
c001ce67:	53                   	push   ebx
c001ce68:	31 db                	xor    ebx,ebx
c001ce6a:	50                   	push   eax
c001ce6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce6f:	50                   	push   eax
c001ce70:	6a 0c                	push   0xc
c001ce72:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce79:	50                   	push   eax
c001ce7a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce80:	e8 0b ee ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001ce85:	83 c4 10             	add    esp,0x10
c001ce88:	a8 88                	test   al,0x88
c001ce8a:	74 23                	je     c001ceaf <ATAPI::readyForCommand()+0x49>
c001ce8c:	43                   	inc    ebx
c001ce8d:	83 fb 63             	cmp    ebx,0x63
c001ce90:	7e dd                	jle    c001ce6f <ATAPI::readyForCommand()+0x9>
c001ce92:	51                   	push   ecx
c001ce93:	51                   	push   ecx
c001ce94:	6a 00                	push   0x0
c001ce96:	68 40 42 0f 00       	push   0xf4240
c001ce9b:	e8 cd b3 ff ff       	call   c001826d <nanoSleep(unsigned long long)>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cea9:	75 c4                	jne    c001ce6f <ATAPI::readyForCommand()+0x9>
c001ceab:	31 c0                	xor    eax,eax
c001cead:	eb 02                	jmp    c001ceb1 <ATAPI::readyForCommand()+0x4b>
c001ceaf:	b0 01                	mov    al,0x1
c001ceb1:	5a                   	pop    edx
c001ceb2:	5b                   	pop    ebx
c001ceb3:	5e                   	pop    esi
c001ceb4:	c3                   	ret    
c001ceb5:	90                   	nop

c001ceb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ceb6:	55                   	push   ebp
c001ceb7:	57                   	push   edi
c001ceb8:	56                   	push   esi
c001ceb9:	53                   	push   ebx
c001ceba:	83 ec 20             	sub    esp,0x20
c001cebd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cec1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cec5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cec9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cecd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ced1:	6a 01                	push   0x1
c001ced3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ceda:	50                   	push   eax
c001cedb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cee1:	e8 f6 ee ff ff       	call   c001bddc <IDE::enableIRQs(unsigned char, bool)>
c001cee6:	5e                   	pop    esi
c001cee7:	58                   	pop    eax
c001cee8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ceef:	50                   	push   eax
c001cef0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cef6:	e8 af ec ff ff       	call   c001bbaa <IDE::prepareInterrupt(unsigned char)>
c001cefb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cefe:	e8 63 ff ff ff       	call   c001ce66 <ATAPI::readyForCommand()>
c001cf03:	83 c4 10             	add    esp,0x10
c001cf06:	84 c0                	test   al,al
c001cf08:	75 0a                	jne    c001cf14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001cf0a:	bb 01 00 00 00       	mov    ebx,0x1
c001cf0f:	e9 57 02 00 00       	jmp    c001d16b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf14:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cf1a:	c1 e0 04             	shl    eax,0x4
c001cf1d:	0f b6 c0             	movzx  eax,al
c001cf20:	50                   	push   eax
c001cf21:	6a 06                	push   0x6
c001cf23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf31:	e8 9a ec ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf36:	6a 00                	push   0x0
c001cf38:	6a 01                	push   0x1
c001cf3a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf41:	50                   	push   eax
c001cf42:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf48:	e8 83 ec ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4d:	83 c4 20             	add    esp,0x20
c001cf50:	0f b6 c3             	movzx  eax,bl
c001cf53:	0f b6 df             	movzx  ebx,bh
c001cf56:	50                   	push   eax
c001cf57:	6a 04                	push   0x4
c001cf59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf60:	50                   	push   eax
c001cf61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf67:	e8 64 ec ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf6c:	53                   	push   ebx
c001cf6d:	6a 05                	push   0x5
c001cf6f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf76:	50                   	push   eax
c001cf77:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf7d:	e8 4e ec ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf82:	83 c4 20             	add    esp,0x20
c001cf85:	68 a0 00 00 00       	push   0xa0
c001cf8a:	6a 07                	push   0x7
c001cf8c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf93:	50                   	push   eax
c001cf94:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf9a:	e8 31 ec ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf9f:	83 c4 0c             	add    esp,0xc
c001cfa2:	6a 01                	push   0x1
c001cfa4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfab:	50                   	push   eax
c001cfac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfb2:	e8 c5 f7 ff ff       	call   c001c77c <IDE::polling(unsigned char, unsigned int)>
c001cfb7:	83 c4 10             	add    esp,0x10
c001cfba:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cfc0:	84 c0                	test   al,al
c001cfc2:	74 23                	je     c001cfe7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cfc4:	0f b6 d8             	movzx  ebx,al
c001cfc7:	0f b6 d2             	movzx  edx,dl
c001cfca:	53                   	push   ebx
c001cfcb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cfd2:	50                   	push   eax
c001cfd3:	52                   	push   edx
c001cfd4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfda:	e8 07 f6 ff ff       	call   c001c5e6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfdf:	83 c4 10             	add    esp,0x10
c001cfe2:	e9 84 01 00 00       	jmp    c001d16b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cfe7:	0f b6 d2             	movzx  edx,dl
c001cfea:	53                   	push   ebx
c001cfeb:	53                   	push   ebx
c001cfec:	52                   	push   edx
c001cfed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cff3:	e8 c6 eb ff ff       	call   c001bbbe <IDE::getBase(unsigned char)>
c001cff8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cffc:	b9 06 00 00 00       	mov    ecx,0x6
c001d001:	89 c2                	mov    edx,eax
c001d003:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d006:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d00a:	83 c4 10             	add    esp,0x10
c001d00d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d013:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d01a:	85 db                	test   ebx,ebx
c001d01c:	0f 84 ec 00 00 00    	je     c001d10e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d022:	51                   	push   ecx
c001d023:	51                   	push   ecx
c001d024:	52                   	push   edx
c001d025:	50                   	push   eax
c001d026:	e8 13 ed ff ff       	call   c001bd3e <IDE::waitInterrupt(unsigned char)>
c001d02b:	83 c4 10             	add    esp,0x10
c001d02e:	84 c0                	test   al,al
c001d030:	0f 84 d4 fe ff ff    	je     c001cf0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d036:	56                   	push   esi
c001d037:	56                   	push   esi
c001d038:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d03f:	50                   	push   eax
c001d040:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d046:	e8 5f eb ff ff       	call   c001bbaa <IDE::prepareInterrupt(unsigned char)>
c001d04b:	83 c4 0c             	add    esp,0xc
c001d04e:	6a 04                	push   0x4
c001d050:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d057:	50                   	push   eax
c001d058:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d05e:	e8 2d ec ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001d063:	83 c4 0c             	add    esp,0xc
c001d066:	89 c6                	mov    esi,eax
c001d068:	6a 05                	push   0x5
c001d06a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d071:	50                   	push   eax
c001d072:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d078:	e8 13 ec ff ff       	call   c001bc90 <IDE::read(unsigned char, unsigned char)>
c001d07d:	89 f1                	mov    ecx,esi
c001d07f:	0f b6 c0             	movzx  eax,al
c001d082:	0f b6 f1             	movzx  esi,cl
c001d085:	c1 e0 08             	shl    eax,0x8
c001d088:	09 c6                	or     esi,eax
c001d08a:	d1 fe                	sar    esi,1
c001d08c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d090:	83 c4 10             	add    esp,0x10
c001d093:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d098:	74 41                	je     c001d0db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d09a:	31 c9                	xor    ecx,ecx
c001d09c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0a2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0a9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d0ad:	75 0a                	jne    c001d0b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d0af:	01 c9                	add    ecx,ecx
c001d0b1:	01 cd                	add    ebp,ecx
c001d0b3:	4b                   	dec    ebx
c001d0b4:	e9 54 ff ff ff       	jmp    c001d00d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d0b9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d0be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d0c2:	51                   	push   ecx
c001d0c3:	51                   	push   ecx
c001d0c4:	52                   	push   edx
c001d0c5:	50                   	push   eax
c001d0c6:	e8 f3 ea ff ff       	call   c001bbbe <IDE::getBase(unsigned char)>
c001d0cb:	89 c2                	mov    edx,eax
c001d0cd:	89 f0                	mov    eax,esi
c001d0cf:	66 ef                	out    dx,ax
c001d0d1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d0d5:	83 c4 10             	add    esp,0x10
c001d0d8:	41                   	inc    ecx
c001d0d9:	eb c1                	jmp    c001d09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d0db:	31 f6                	xor    esi,esi
c001d0dd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0e3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0ea:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d0ee:	75 06                	jne    c001d0f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d0f0:	01 f6                	add    esi,esi
c001d0f2:	01 f5                	add    ebp,esi
c001d0f4:	eb bd                	jmp    c001d0b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d0f6:	51                   	push   ecx
c001d0f7:	51                   	push   ecx
c001d0f8:	52                   	push   edx
c001d0f9:	50                   	push   eax
c001d0fa:	e8 bf ea ff ff       	call   c001bbbe <IDE::getBase(unsigned char)>
c001d0ff:	89 c2                	mov    edx,eax
c001d101:	66 ed                	in     ax,dx
c001d103:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d108:	83 c4 10             	add    esp,0x10
c001d10b:	46                   	inc    esi
c001d10c:	eb cf                	jmp    c001d0dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d10e:	51                   	push   ecx
c001d10f:	51                   	push   ecx
c001d110:	52                   	push   edx
c001d111:	50                   	push   eax
c001d112:	e8 27 ec ff ff       	call   c001bd3e <IDE::waitInterrupt(unsigned char)>
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	84 c0                	test   al,al
c001d11c:	0f 84 e8 fd ff ff    	je     c001cf0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d122:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d127:	52                   	push   edx
c001d128:	52                   	push   edx
c001d129:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d130:	50                   	push   eax
c001d131:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d137:	e8 6e ea ff ff       	call   c001bbaa <IDE::prepareInterrupt(unsigned char)>
c001d13c:	83 c4 10             	add    esp,0x10
c001d13f:	50                   	push   eax
c001d140:	50                   	push   eax
c001d141:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d148:	50                   	push   eax
c001d149:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d14f:	e8 6a ea ff ff       	call   c001bbbe <IDE::getBase(unsigned char)>
c001d154:	8d 50 07             	lea    edx,[eax+0x7]
c001d157:	ec                   	in     al,dx
c001d158:	83 c4 10             	add    esp,0x10
c001d15b:	a8 88                	test   al,0x88
c001d15d:	74 0a                	je     c001d169 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d15f:	4b                   	dec    ebx
c001d160:	75 dd                	jne    c001d13f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d162:	bb 02 00 00 00       	mov    ebx,0x2
c001d167:	eb 02                	jmp    c001d16b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d169:	31 db                	xor    ebx,ebx
c001d16b:	83 c4 1c             	add    esp,0x1c
c001d16e:	89 d8                	mov    eax,ebx
c001d170:	5b                   	pop    ebx
c001d171:	5e                   	pop    esi
c001d172:	5f                   	pop    edi
c001d173:	5d                   	pop    ebp
c001d174:	c3                   	ret    
c001d175:	90                   	nop

c001d176 <ATAPI::diskRemoved()>:
c001d176:	83 ec 18             	sub    esp,0x18
c001d179:	68 c3 27 02 c0       	push   0xc00227c3
c001d17e:	e8 60 1e ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001d183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d187:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d18e:	83 c4 1c             	add    esp,0x1c
c001d191:	c3                   	ret    

c001d192 <ATAPI::eject()>:
c001d192:	57                   	push   edi
c001d193:	b9 03 00 00 00       	mov    ecx,0x3
c001d198:	53                   	push   ebx
c001d199:	83 ec 14             	sub    esp,0x14
c001d19c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d1a0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d1a4:	fc                   	cld    
c001d1a5:	31 c0                	xor    eax,eax
c001d1a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d1a9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d1ae:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d1b3:	50                   	push   eax
c001d1b4:	50                   	push   eax
c001d1b5:	6a 00                	push   0x0
c001d1b7:	6a 00                	push   0x0
c001d1b9:	6a 00                	push   0x0
c001d1bb:	6a 02                	push   0x2
c001d1bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d1c1:	50                   	push   eax
c001d1c2:	53                   	push   ebx
c001d1c3:	e8 ee fc ff ff       	call   c001ceb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1c8:	83 c4 14             	add    esp,0x14
c001d1cb:	53                   	push   ebx
c001d1cc:	e8 a5 ff ff ff       	call   c001d176 <ATAPI::diskRemoved()>
c001d1d1:	83 c4 24             	add    esp,0x24
c001d1d4:	5b                   	pop    ebx
c001d1d5:	5f                   	pop    edi
c001d1d6:	c3                   	ret    
c001d1d7:	90                   	nop

c001d1d8 <ATAPI::diskInserted()>:
c001d1d8:	53                   	push   ebx
c001d1d9:	83 ec 14             	sub    esp,0x14
c001d1dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d1e0:	68 d9 27 02 c0       	push   0xc00227d9
c001d1e5:	e8 f9 1d ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001d1ea:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d1f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1f4:	e8 63 36 ff ff       	call   c001085c <PhysicalDisk::startCache()>
c001d1f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d1fd:	83 c4 18             	add    esp,0x18
c001d200:	5b                   	pop    ebx
c001d201:	e9 64 4f ff ff       	jmp    c001216a <createPartitionsForDisk(PhysicalDisk*)>

c001d206 <ATAPI::detectMedia()>:
c001d206:	56                   	push   esi
c001d207:	53                   	push   ebx
c001d208:	83 ec 28             	sub    esp,0x28
c001d20b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d20f:	6a 0c                	push   0xc
c001d211:	6a 00                	push   0x0
c001d213:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d217:	56                   	push   esi
c001d218:	e8 eb 33 fe ff       	call   c0000608 <memset>
c001d21d:	58                   	pop    eax
c001d21e:	5a                   	pop    edx
c001d21f:	6a 00                	push   0x0
c001d221:	6a 00                	push   0x0
c001d223:	6a 00                	push   0x0
c001d225:	6a 00                	push   0x0
c001d227:	56                   	push   esi
c001d228:	53                   	push   ebx
c001d229:	e8 88 fc ff ff       	call   c001ceb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d22e:	83 c4 1c             	add    esp,0x1c
c001d231:	6a 0c                	push   0xc
c001d233:	6a 00                	push   0x0
c001d235:	56                   	push   esi
c001d236:	e8 cd 33 fe ff       	call   c0000608 <memset>
c001d23b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d240:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d245:	59                   	pop    ecx
c001d246:	58                   	pop    eax
c001d247:	6a 01                	push   0x1
c001d249:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d24d:	50                   	push   eax
c001d24e:	6a 00                	push   0x0
c001d250:	6a 12                	push   0x12
c001d252:	56                   	push   esi
c001d253:	53                   	push   ebx
c001d254:	e8 5d fc ff ff       	call   c001ceb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d259:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d25d:	83 c4 20             	add    esp,0x20
c001d260:	83 e0 7f             	and    eax,0x7f
c001d263:	3c 70                	cmp    al,0x70
c001d265:	74 15                	je     c001d27c <ATAPI::detectMedia()+0x76>
c001d267:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d26e:	75 0c                	jne    c001d27c <ATAPI::detectMedia()+0x76>
c001d270:	83 ec 0c             	sub    esp,0xc
c001d273:	53                   	push   ebx
c001d274:	e8 5f ff ff ff       	call   c001d1d8 <ATAPI::diskInserted()>
c001d279:	83 c4 10             	add    esp,0x10
c001d27c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d280:	83 e0 0f             	and    eax,0xf
c001d283:	3c 02                	cmp    al,0x2
c001d285:	75 1b                	jne    c001d2a2 <ATAPI::detectMedia()+0x9c>
c001d287:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d28c:	75 2d                	jne    c001d2bb <ATAPI::detectMedia()+0xb5>
c001d28e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d295:	74 24                	je     c001d2bb <ATAPI::detectMedia()+0xb5>
c001d297:	83 ec 0c             	sub    esp,0xc
c001d29a:	53                   	push   ebx
c001d29b:	e8 d6 fe ff ff       	call   c001d176 <ATAPI::diskRemoved()>
c001d2a0:	eb 16                	jmp    c001d2b8 <ATAPI::detectMedia()+0xb2>
c001d2a2:	84 c0                	test   al,al
c001d2a4:	75 15                	jne    c001d2bb <ATAPI::detectMedia()+0xb5>
c001d2a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d2ad:	75 0c                	jne    c001d2bb <ATAPI::detectMedia()+0xb5>
c001d2af:	83 ec 0c             	sub    esp,0xc
c001d2b2:	53                   	push   ebx
c001d2b3:	e8 20 ff ff ff       	call   c001d1d8 <ATAPI::diskInserted()>
c001d2b8:	83 c4 10             	add    esp,0x10
c001d2bb:	83 c4 24             	add    esp,0x24
c001d2be:	5b                   	pop    ebx
c001d2bf:	5e                   	pop    esi
c001d2c0:	c3                   	ret    
c001d2c1:	90                   	nop

c001d2c2 <ATAPI::open(int, int, void*)>:
c001d2c2:	53                   	push   ebx
c001d2c3:	83 ec 08             	sub    esp,0x8
c001d2c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d2d8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d2de:	c1 e0 06             	shl    eax,0x6
c001d2e1:	01 d0                	add    eax,edx
c001d2e3:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d2ea:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d2f0:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d2f7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d301:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d307:	6a 04                	push   0x4
c001d309:	6a 0c                	push   0xc
c001d30b:	51                   	push   ecx
c001d30c:	52                   	push   edx
c001d30d:	e8 be e8 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d312:	90                   	nop
c001d313:	90                   	nop
c001d314:	6a 00                	push   0x0
c001d316:	6a 0c                	push   0xc
c001d318:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d31f:	50                   	push   eax
c001d320:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d326:	e8 a5 e8 ff ff       	call   c001bbd0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d32b:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d332:	83 c4 14             	add    esp,0x14
c001d335:	53                   	push   ebx
c001d336:	e8 cb fe ff ff       	call   c001d206 <ATAPI::detectMedia()>
c001d33b:	31 c0                	xor    eax,eax
c001d33d:	83 c4 18             	add    esp,0x18
c001d340:	5b                   	pop    ebx
c001d341:	c3                   	ret    

c001d342 <ATAPI::read(unsigned long long, int, void*)>:
c001d342:	55                   	push   ebp
c001d343:	57                   	push   edi
c001d344:	56                   	push   esi
c001d345:	53                   	push   ebx
c001d346:	83 ec 1c             	sub    esp,0x1c
c001d349:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d34d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d351:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d355:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d35c:	74 41                	je     c001d39f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d35e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d362:	b9 03 00 00 00       	mov    ecx,0x3
c001d367:	fc                   	cld    
c001d368:	31 c0                	xor    eax,eax
c001d36a:	86 fb                	xchg   bl,bh
c001d36c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d36e:	c1 c3 10             	rol    ebx,0x10
c001d371:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d376:	89 e8                	mov    eax,ebp
c001d378:	86 fb                	xchg   bl,bh
c001d37a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d37e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d382:	50                   	push   eax
c001d383:	50                   	push   eax
c001d384:	55                   	push   ebp
c001d385:	c1 e5 0b             	shl    ebp,0xb
c001d388:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d38c:	6a 00                	push   0x0
c001d38e:	55                   	push   ebp
c001d38f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d393:	50                   	push   eax
c001d394:	56                   	push   esi
c001d395:	e8 1c fb ff ff       	call   c001ceb6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d39a:	83 c4 20             	add    esp,0x20
c001d39d:	eb 1a                	jmp    c001d3b9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d39f:	83 ec 0c             	sub    esp,0xc
c001d3a2:	56                   	push   esi
c001d3a3:	e8 5e fe ff ff       	call   c001d206 <ATAPI::detectMedia()>
c001d3a8:	83 c4 10             	add    esp,0x10
c001d3ab:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d3b2:	75 aa                	jne    c001d35e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d3b4:	b8 02 00 00 00       	mov    eax,0x2
c001d3b9:	83 c4 1c             	add    esp,0x1c
c001d3bc:	5b                   	pop    ebx
c001d3bd:	5e                   	pop    esi
c001d3be:	5f                   	pop    edi
c001d3bf:	5d                   	pop    ebp
c001d3c0:	c3                   	ret    
c001d3c1:	90                   	nop

c001d3c2 <AVX::open(int, int, void*)>:
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	e8 0e 10 00 00       	call   c001e3d8 <avxInit>
c001d3ca:	b8 00 00 00 00       	mov    eax,0x0
c001d3cf:	83 c4 0c             	add    esp,0xc
c001d3d2:	c3                   	ret    
c001d3d3:	90                   	nop

c001d3d4 <AVX::close(int, int, void*)>:
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	e8 fd 0f 00 00       	call   c001e3d9 <avxClose>
c001d3dc:	b8 00 00 00 00       	mov    eax,0x0
c001d3e1:	83 c4 0c             	add    esp,0xc
c001d3e4:	c3                   	ret    
c001d3e5:	90                   	nop

c001d3e6 <AVX::available()>:
c001d3e6:	83 ec 0c             	sub    esp,0xc
c001d3e9:	e8 e2 0f 00 00       	call   c001e3d0 <avxDetect>
c001d3ee:	85 c0                	test   eax,eax
c001d3f0:	0f 95 c0             	setne  al
c001d3f3:	83 c4 0c             	add    esp,0xc
c001d3f6:	c3                   	ret    
c001d3f7:	90                   	nop

c001d3f8 <AVX::save(void*)>:
c001d3f8:	83 ec 0c             	sub    esp,0xc
c001d3fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3ff:	83 ec 0c             	sub    esp,0xc
c001d402:	50                   	push   eax
c001d403:	e8 ce 0f 00 00       	call   c001e3d6 <avxSave>
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	90                   	nop
c001d40c:	83 c4 0c             	add    esp,0xc
c001d40f:	c3                   	ret    

c001d410 <AVX::load(void*)>:
c001d410:	83 ec 0c             	sub    esp,0xc
c001d413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d417:	83 ec 0c             	sub    esp,0xc
c001d41a:	50                   	push   eax
c001d41b:	e8 b7 0f 00 00       	call   c001e3d7 <avxLoad>
c001d420:	83 c4 10             	add    esp,0x10
c001d423:	90                   	nop
c001d424:	83 c4 0c             	add    esp,0xc
c001d427:	c3                   	ret    

c001d428 <AVX::AVX()>:
c001d428:	83 ec 0c             	sub    esp,0xc
c001d42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d42f:	83 ec 08             	sub    esp,0x8
c001d432:	68 24 28 02 c0       	push   0xc0022824
c001d437:	50                   	push   eax
c001d438:	e8 95 34 ff ff       	call   c00108d2 <FPU::FPU(char const*)>
c001d43d:	83 c4 10             	add    esp,0x10
c001d440:	ba 34 28 02 c0       	mov    edx,0xc0022834
c001d445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d449:	89 10                	mov    DWORD PTR [eax],edx
c001d44b:	90                   	nop
c001d44c:	83 c4 0c             	add    esp,0xc
c001d44f:	c3                   	ret    

c001d450 <MMX::available()>:
c001d450:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001d455:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d45b:	83 e0 20             	and    eax,0x20
c001d45e:	84 c0                	test   al,al
c001d460:	0f 95 c0             	setne  al
c001d463:	c3                   	ret    

c001d464 <MMX::open(int, int, void*)>:
c001d464:	83 ec 0c             	sub    esp,0xc
c001d467:	e8 e0 0f 00 00       	call   c001e44c <x87Init>
c001d46c:	b8 00 00 00 00       	mov    eax,0x0
c001d471:	83 c4 0c             	add    esp,0xc
c001d474:	c3                   	ret    
c001d475:	90                   	nop

c001d476 <MMX::close(int, int, void*)>:
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	e8 e8 0f 00 00       	call   c001e466 <x87Close>
c001d47e:	b8 00 00 00 00       	mov    eax,0x0
c001d483:	83 c4 0c             	add    esp,0xc
c001d486:	c3                   	ret    
c001d487:	90                   	nop

c001d488 <MMX::save(void*)>:
c001d488:	83 ec 0c             	sub    esp,0xc
c001d48b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d48f:	83 ec 0c             	sub    esp,0xc
c001d492:	50                   	push   eax
c001d493:	e8 a9 0f 00 00       	call   c001e441 <x87Save>
c001d498:	83 c4 10             	add    esp,0x10
c001d49b:	90                   	nop
c001d49c:	83 c4 0c             	add    esp,0xc
c001d49f:	c3                   	ret    

c001d4a0 <MMX::load(void*)>:
c001d4a0:	83 ec 0c             	sub    esp,0xc
c001d4a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4a7:	83 ec 0c             	sub    esp,0xc
c001d4aa:	50                   	push   eax
c001d4ab:	e8 97 0f 00 00       	call   c001e447 <x87Load>
c001d4b0:	83 c4 10             	add    esp,0x10
c001d4b3:	90                   	nop
c001d4b4:	83 c4 0c             	add    esp,0xc
c001d4b7:	c3                   	ret    

c001d4b8 <MMX::MMX()>:
c001d4b8:	83 ec 0c             	sub    esp,0xc
c001d4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bf:	83 ec 08             	sub    esp,0x8
c001d4c2:	68 64 28 02 c0       	push   0xc0022864
c001d4c7:	50                   	push   eax
c001d4c8:	e8 05 34 ff ff       	call   c00108d2 <FPU::FPU(char const*)>
c001d4cd:	83 c4 10             	add    esp,0x10
c001d4d0:	ba 74 28 02 c0       	mov    edx,0xc0022874
c001d4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4d9:	89 10                	mov    DWORD PTR [eax],edx
c001d4db:	90                   	nop
c001d4dc:	83 c4 0c             	add    esp,0xc
c001d4df:	c3                   	ret    

c001d4e0 <SSE::open(int, int, void*)>:
c001d4e0:	83 ec 0c             	sub    esp,0xc
c001d4e3:	e8 1f 0f 00 00       	call   c001e407 <sseInit>
c001d4e8:	b8 00 00 00 00       	mov    eax,0x0
c001d4ed:	83 c4 0c             	add    esp,0xc
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <SSE::close(int, int, void*)>:
c001d4f2:	83 ec 0c             	sub    esp,0xc
c001d4f5:	e8 1d 0f 00 00       	call   c001e417 <sseClose>
c001d4fa:	b8 00 00 00 00       	mov    eax,0x0
c001d4ff:	83 c4 0c             	add    esp,0xc
c001d502:	c3                   	ret    
c001d503:	90                   	nop

c001d504 <SSE::available()>:
c001d504:	83 ec 1c             	sub    esp,0x1c
c001d507:	e8 d4 0e 00 00       	call   c001e3e0 <sseDetect>
c001d50c:	85 c0                	test   eax,eax
c001d50e:	0f 95 c0             	setne  al
c001d511:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d515:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d519:	83 c4 1c             	add    esp,0x1c
c001d51c:	c3                   	ret    
c001d51d:	90                   	nop

c001d51e <SSE::save(void*)>:
c001d51e:	83 ec 0c             	sub    esp,0xc
c001d521:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d525:	83 ec 0c             	sub    esp,0xc
c001d528:	50                   	push   eax
c001d529:	e8 cd 0e 00 00       	call   c001e3fb <sseSave>
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	90                   	nop
c001d532:	83 c4 0c             	add    esp,0xc
c001d535:	c3                   	ret    

c001d536 <SSE::load(void*)>:
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d53d:	83 ec 0c             	sub    esp,0xc
c001d540:	50                   	push   eax
c001d541:	e8 bb 0e 00 00       	call   c001e401 <sseLoad>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	90                   	nop
c001d54a:	83 c4 0c             	add    esp,0xc
c001d54d:	c3                   	ret    

c001d54e <SSE::SSE()>:
c001d54e:	83 ec 0c             	sub    esp,0xc
c001d551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d555:	83 ec 08             	sub    esp,0x8
c001d558:	68 a4 28 02 c0       	push   0xc00228a4
c001d55d:	50                   	push   eax
c001d55e:	e8 6f 33 ff ff       	call   c00108d2 <FPU::FPU(char const*)>
c001d563:	83 c4 10             	add    esp,0x10
c001d566:	ba b4 28 02 c0       	mov    edx,0xc00228b4
c001d56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56f:	89 10                	mov    DWORD PTR [eax],edx
c001d571:	90                   	nop
c001d572:	83 c4 0c             	add    esp,0xc
c001d575:	c3                   	ret    

c001d576 <x87::open(int, int, void*)>:
c001d576:	83 ec 0c             	sub    esp,0xc
c001d579:	e8 ce 0e 00 00       	call   c001e44c <x87Init>
c001d57e:	b8 00 00 00 00       	mov    eax,0x0
c001d583:	83 c4 0c             	add    esp,0xc
c001d586:	c3                   	ret    
c001d587:	90                   	nop

c001d588 <x87::close(int, int, void*)>:
c001d588:	83 ec 0c             	sub    esp,0xc
c001d58b:	e8 d6 0e 00 00       	call   c001e466 <x87Close>
c001d590:	b8 00 00 00 00       	mov    eax,0x0
c001d595:	83 c4 0c             	add    esp,0xc
c001d598:	c3                   	ret    
c001d599:	90                   	nop

c001d59a <x87::available()>:
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	e8 84 0e 00 00       	call   c001e426 <x87Detect>
c001d5a2:	85 c0                	test   eax,eax
c001d5a4:	0f 95 c0             	setne  al
c001d5a7:	83 c4 0c             	add    esp,0xc
c001d5aa:	c3                   	ret    
c001d5ab:	90                   	nop

c001d5ac <x87::save(void*)>:
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5b3:	83 ec 0c             	sub    esp,0xc
c001d5b6:	50                   	push   eax
c001d5b7:	e8 85 0e 00 00       	call   c001e441 <x87Save>
c001d5bc:	83 c4 10             	add    esp,0x10
c001d5bf:	90                   	nop
c001d5c0:	83 c4 0c             	add    esp,0xc
c001d5c3:	c3                   	ret    

c001d5c4 <x87::load(void*)>:
c001d5c4:	83 ec 0c             	sub    esp,0xc
c001d5c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5cb:	83 ec 0c             	sub    esp,0xc
c001d5ce:	50                   	push   eax
c001d5cf:	e8 73 0e 00 00       	call   c001e447 <x87Load>
c001d5d4:	83 c4 10             	add    esp,0x10
c001d5d7:	90                   	nop
c001d5d8:	83 c4 0c             	add    esp,0xc
c001d5db:	c3                   	ret    

c001d5dc <x87::x87()>:
c001d5dc:	83 ec 0c             	sub    esp,0xc
c001d5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e3:	83 ec 08             	sub    esp,0x8
c001d5e6:	68 e4 28 02 c0       	push   0xc00228e4
c001d5eb:	50                   	push   eax
c001d5ec:	e8 e1 32 ff ff       	call   c00108d2 <FPU::FPU(char const*)>
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	ba f4 28 02 c0       	mov    edx,0xc00228f4
c001d5f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fd:	89 10                	mov    DWORD PTR [eax],edx
c001d5ff:	90                   	nop
c001d600:	83 c4 0c             	add    esp,0xc
c001d603:	c3                   	ret    

c001d604 <APIC::disable()>:
c001d604:	90                   	nop
c001d605:	c3                   	ret    

c001d606 <APIC::close(int, int, void*)>:
c001d606:	55                   	push   ebp
c001d607:	89 e5                	mov    ebp,esp
c001d609:	83 ec 08             	sub    esp,0x8
c001d60c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d60f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d611:	83 c0 3c             	add    eax,0x3c
c001d614:	8b 00                	mov    eax,DWORD PTR [eax]
c001d616:	83 ec 0c             	sub    esp,0xc
c001d619:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d61c:	ff d0                	call   eax
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	b8 00 00 00 00       	mov    eax,0x0
c001d626:	c9                   	leave  
c001d627:	c3                   	ret    

c001d628 <IOAPIC::close(int, int, void*)>:
c001d628:	b8 00 00 00 00       	mov    eax,0x0
c001d62d:	c3                   	ret    

c001d62e <APIC::io_wait()>:
c001d62e:	eb 00                	jmp    c001d630 <APIC::io_wait()+0x2>
c001d630:	eb 00                	jmp    c001d632 <APIC::io_wait()+0x4>
c001d632:	90                   	nop
c001d633:	c3                   	ret    

c001d634 <APIC::getBase()>:
c001d634:	55                   	push   ebp
c001d635:	89 e5                	mov    ebp,esp
c001d637:	83 ec 18             	sub    esp,0x18
c001d63a:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001d63f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d645:	83 e0 08             	and    eax,0x8
c001d648:	84 c0                	test   al,al
c001d64a:	75 07                	jne    c001d653 <APIC::getBase()+0x1f>
c001d64c:	b8 00 00 00 00       	mov    eax,0x0
c001d651:	eb 21                	jmp    c001d674 <APIC::getBase()+0x40>
c001d653:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001d658:	83 ec 08             	sub    esp,0x8
c001d65b:	6a 1b                	push   0x1b
c001d65d:	50                   	push   eax
c001d65e:	e8 4b db fe ff       	call   c000b1ae <Computer::rdmsr(unsigned int)>
c001d663:	83 c4 10             	add    esp,0x10
c001d666:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d669:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d66c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d66f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d674:	c9                   	leave  
c001d675:	c3                   	ret    

c001d676 <APIC::eoi(unsigned char)>:
c001d676:	55                   	push   ebp
c001d677:	89 e5                	mov    ebp,esp
c001d679:	83 ec 28             	sub    esp,0x28
c001d67c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d67f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d688:	e8 a7 ff ff ff       	call   c001d634 <APIC::getBase()>
c001d68d:	83 c4 10             	add    esp,0x10
c001d690:	05 b0 00 00 00       	add    eax,0xb0
c001d695:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d698:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d69b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d6a1:	90                   	nop
c001d6a2:	c9                   	leave  
c001d6a3:	c3                   	ret    

c001d6a4 <APIC::open(int, int, void*)>:
c001d6a4:	55                   	push   ebp
c001d6a5:	89 e5                	mov    ebp,esp
c001d6a7:	57                   	push   edi
c001d6a8:	56                   	push   esi
c001d6a9:	53                   	push   ebx
c001d6aa:	83 ec 1c             	sub    esp,0x1c
c001d6ad:	83 ec 0c             	sub    esp,0xc
c001d6b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6b3:	e8 7c ff ff ff       	call   c001d634 <APIC::getBase()>
c001d6b8:	83 c4 10             	add    esp,0x10
c001d6bb:	05 f0 00 00 00       	add    eax,0xf0
c001d6c0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d6c3:	83 ec 0c             	sub    esp,0xc
c001d6c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d6c9:	e8 66 ff ff ff       	call   c001d634 <APIC::getBase()>
c001d6ce:	83 c4 10             	add    esp,0x10
c001d6d1:	89 c2                	mov    edx,eax
c001d6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6d6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6dc:	0f b6 f8             	movzx  edi,al
c001d6df:	89 d0                	mov    eax,edx
c001d6e1:	ba 00 00 00 00       	mov    edx,0x0
c001d6e6:	89 c1                	mov    ecx,eax
c001d6e8:	80 e5 ff             	and    ch,0xff
c001d6eb:	89 cb                	mov    ebx,ecx
c001d6ed:	0f b6 f2             	movzx  esi,dl
c001d6f0:	89 d8                	mov    eax,ebx
c001d6f2:	89 f2                	mov    edx,esi
c001d6f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6f7:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d6fa:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d6fe:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d702:	83 e0 00             	and    eax,0x0
c001d705:	09 d0                	or     eax,edx
c001d707:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d70b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d70e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d714:	8d 50 01             	lea    edx,[eax+0x1]
c001d717:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d71a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d720:	0f b6 d0             	movzx  edx,al
c001d723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d726:	83 c2 08             	add    edx,0x8
c001d729:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d72d:	0f b6 c9             	movzx  ecx,cl
c001d730:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d736:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d73a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d73d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d73f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d742:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d749:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d74c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d74f:	89 10                	mov    DWORD PTR [eax],edx
c001d751:	b8 00 00 00 00       	mov    eax,0x0
c001d756:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d759:	5b                   	pop    ebx
c001d75a:	5e                   	pop    esi
c001d75b:	5f                   	pop    edi
c001d75c:	5d                   	pop    ebp
c001d75d:	c3                   	ret    

c001d75e <IOAPIC::IOAPIC()>:
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d765:	83 ec 08             	sub    esp,0x8
c001d768:	68 24 29 02 c0       	push   0xc0022924
c001d76d:	50                   	push   eax
c001d76e:	e8 6b 2e ff ff       	call   c00105de <Device::Device(char const*)>
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	ba 4c 2a 02 c0       	mov    edx,0xc0022a4c
c001d77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d77f:	89 10                	mov    DWORD PTR [eax],edx
c001d781:	90                   	nop
c001d782:	83 c4 0c             	add    esp,0xc
c001d785:	c3                   	ret    

c001d786 <APIC::APIC()>:
c001d786:	53                   	push   ebx
c001d787:	83 ec 18             	sub    esp,0x18
c001d78a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d78e:	83 ec 08             	sub    esp,0x8
c001d791:	68 2c 29 02 c0       	push   0xc002292c
c001d796:	50                   	push   eax
c001d797:	e8 84 35 ff ff       	call   c0010d20 <InterruptController::InterruptController(char const*)>
c001d79c:	83 c4 10             	add    esp,0x10
c001d79f:	ba 04 2a 02 c0       	mov    edx,0xc0022a04
c001d7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7a8:	89 10                	mov    DWORD PTR [eax],edx
c001d7aa:	a0 40 55 02 c0       	mov    al,ds:0xc0025540
c001d7af:	83 f0 01             	xor    eax,0x1
c001d7b2:	84 c0                	test   al,al
c001d7b4:	0f 84 96 00 00 00    	je     c001d850 <APIC::APIC()+0xca>
c001d7ba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d7bf:	a0 f0 3f 02 c0       	mov    al,ds:0xc0023ff0
c001d7c4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d7c8:	73 7f                	jae    c001d849 <APIC::APIC()+0xc3>
c001d7ca:	83 ec 0c             	sub    esp,0xc
c001d7cd:	68 68 01 00 00       	push   0x168
c001d7d2:	e8 1d 17 ff ff       	call   c000eef4 <operator new(unsigned long)>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	89 c3                	mov    ebx,eax
c001d7dc:	83 ec 0c             	sub    esp,0xc
c001d7df:	53                   	push   ebx
c001d7e0:	e8 79 ff ff ff       	call   c001d75e <IOAPIC::IOAPIC()>
c001d7e5:	83 c4 10             	add    esp,0x10
c001d7e8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d7ec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d7f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7f5:	89 14 85 20 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaae0],edx
c001d7fc:	a1 00 55 02 c0       	mov    eax,ds:0xc0025500
c001d801:	40                   	inc    eax
c001d802:	a3 00 55 02 c0       	mov    ds:0xc0025500,eax
c001d807:	a1 48 37 02 c0       	mov    eax,ds:0xc0023748
c001d80c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d812:	83 ec 08             	sub    esp,0x8
c001d815:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d819:	50                   	push   eax
c001d81a:	e8 cf 2b ff ff       	call   c00103ee <Device::addChild(Device*)>
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d826:	8b 00                	mov    eax,DWORD PTR [eax]
c001d828:	83 c0 08             	add    eax,0x8
c001d82b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d82d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d832:	6a 00                	push   0x0
c001d834:	6a 00                	push   0x0
c001d836:	52                   	push   edx
c001d837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d83b:	ff d0                	call   eax
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d844:	e9 76 ff ff ff       	jmp    c001d7bf <APIC::APIC()+0x39>
c001d849:	c6 05 40 55 02 c0 01 	mov    BYTE PTR ds:0xc0025540,0x1
c001d850:	90                   	nop
c001d851:	83 c4 18             	add    esp,0x18
c001d854:	5b                   	pop    ebx
c001d855:	c3                   	ret    

c001d856 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d856:	55                   	push   ebp
c001d857:	89 e5                	mov    ebp,esp
c001d859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d85c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d862:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d865:	72 1d                	jb     c001d884 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d867:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d86a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d873:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d879:	01 d0                	add    eax,edx
c001d87b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d87e:	73 04                	jae    c001d884 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d880:	b0 01                	mov    al,0x1
c001d882:	eb 02                	jmp    c001d886 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d884:	b0 00                	mov    al,0x0
c001d886:	5d                   	pop    ebp
c001d887:	c3                   	ret    

c001d888 <IOAPIC::read(int)>:
c001d888:	55                   	push   ebp
c001d889:	89 e5                	mov    ebp,esp
c001d88b:	83 ec 10             	sub    esp,0x10
c001d88e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d891:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d897:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d89a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d89d:	0f b6 d0             	movzx  edx,al
c001d8a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8a3:	89 10                	mov    DWORD PTR [eax],edx
c001d8a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8a8:	83 c0 10             	add    eax,0x10
c001d8ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8ad:	c9                   	leave  
c001d8ae:	c3                   	ret    
c001d8af:	90                   	nop

c001d8b0 <IOAPIC::open(int, int, void*)>:
c001d8b0:	55                   	push   ebp
c001d8b1:	89 e5                	mov    ebp,esp
c001d8b3:	57                   	push   edi
c001d8b4:	56                   	push   esi
c001d8b5:	53                   	push   ebx
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	83 ec 0c             	sub    esp,0xc
c001d8bc:	68 57 29 02 c0       	push   0xc0022957
c001d8c1:	e8 1d 17 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001d8c6:	83 c4 10             	add    esp,0x10
c001d8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d8cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d8d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8de:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c001d8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d8ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8f7:	8b 14 85 a0 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf60]
c001d8fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d901:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d90a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d913:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d919:	0f b6 f8             	movzx  edi,al
c001d91c:	89 d0                	mov    eax,edx
c001d91e:	ba 00 00 00 00       	mov    edx,0x0
c001d923:	89 c1                	mov    ecx,eax
c001d925:	80 e5 ff             	and    ch,0xff
c001d928:	89 cb                	mov    ebx,ecx
c001d92a:	0f b6 f2             	movzx  esi,dl
c001d92d:	89 d8                	mov    eax,ebx
c001d92f:	89 f2                	mov    edx,esi
c001d931:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d934:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d937:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d93b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d93f:	83 e0 00             	and    eax,0x0
c001d942:	09 d0                	or     eax,edx
c001d944:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d94b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d951:	8d 50 01             	lea    edx,[eax+0x1]
c001d954:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d957:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d95d:	0f b6 d0             	movzx  edx,al
c001d960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d963:	83 c2 08             	add    edx,0x8
c001d966:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d96a:	0f b6 c9             	movzx  ecx,cl
c001d96d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d973:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d977:	83 ec 08             	sub    esp,0x8
c001d97a:	6a 01                	push   0x1
c001d97c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d97f:	e8 04 ff ff ff       	call   c001d888 <IOAPIC::read(int)>
c001d984:	83 c4 10             	add    esp,0x10
c001d987:	c1 f8 10             	sar    eax,0x10
c001d98a:	0f b6 c0             	movzx  eax,al
c001d98d:	8d 50 01             	lea    edx,[eax+0x1]
c001d990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d993:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d999:	b8 00 00 00 00       	mov    eax,0x0
c001d99e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d9a1:	5b                   	pop    ebx
c001d9a2:	5e                   	pop    esi
c001d9a3:	5f                   	pop    edi
c001d9a4:	5d                   	pop    ebp
c001d9a5:	c3                   	ret    

c001d9a6 <IOAPIC::write(int, int)>:
c001d9a6:	55                   	push   ebp
c001d9a7:	89 e5                	mov    ebp,esp
c001d9a9:	83 ec 10             	sub    esp,0x10
c001d9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9b5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9bb:	0f b6 d0             	movzx  edx,al
c001d9be:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9c1:	89 10                	mov    DWORD PTR [eax],edx
c001d9c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9c6:	8d 50 10             	lea    edx,[eax+0x10]
c001d9c9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9cc:	89 02                	mov    DWORD PTR [edx],eax
c001d9ce:	90                   	nop
c001d9cf:	c9                   	leave  
c001d9d0:	c3                   	ret    
c001d9d1:	90                   	nop

c001d9d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d9d2:	55                   	push   ebp
c001d9d3:	89 e5                	mov    ebp,esp
c001d9d5:	83 ec 20             	sub    esp,0x20
c001d9d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9db:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d9de:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d9e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9e4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d9e7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d9ed:	88 d0                	mov    al,dl
c001d9ef:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d9f2:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9f6:	83 c0 08             	add    eax,0x8
c001d9f9:	01 c0                	add    eax,eax
c001d9fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9fe:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001da02:	83 c0 08             	add    eax,0x8
c001da05:	01 c0                	add    eax,eax
c001da07:	40                   	inc    eax
c001da08:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001da0b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da0e:	50                   	push   eax
c001da0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da12:	e8 71 fe ff ff       	call   c001d888 <IOAPIC::read(int)>
c001da17:	83 c4 08             	add    esp,0x8
c001da1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001da1d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001da24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001da27:	c1 e0 18             	shl    eax,0x18
c001da2a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da2d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da30:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001da33:	52                   	push   edx
c001da34:	50                   	push   eax
c001da35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da38:	e8 69 ff ff ff       	call   c001d9a6 <IOAPIC::write(int, int)>
c001da3d:	83 c4 0c             	add    esp,0xc
c001da40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da43:	50                   	push   eax
c001da44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da47:	e8 3c fe ff ff       	call   c001d888 <IOAPIC::read(int)>
c001da4c:	83 c4 08             	add    esp,0x8
c001da4f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da52:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da59:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001da60:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001da67:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da6e:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da72:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001da75:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001da78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da7b:	52                   	push   edx
c001da7c:	50                   	push   eax
c001da7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da80:	e8 21 ff ff ff       	call   c001d9a6 <IOAPIC::write(int, int)>
c001da85:	83 c4 0c             	add    esp,0xc
c001da88:	90                   	nop
c001da89:	c9                   	leave  
c001da8a:	c3                   	ret    
c001da8b:	90                   	nop

c001da8c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001da8c:	55                   	push   ebp
c001da8d:	89 e5                	mov    ebp,esp
c001da8f:	56                   	push   esi
c001da90:	53                   	push   ebx
c001da91:	83 ec 20             	sub    esp,0x20
c001da94:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da97:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da9a:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da9e:	74 28                	je     c001dac8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001daa0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001daa4:	7f 12                	jg     c001dab8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001daa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001daa9:	05 a0 2e 02 c0       	add    eax,0xc0022ea0
c001daae:	8a 00                	mov    al,BYTE PTR [eax]
c001dab0:	0f b6 c0             	movzx  eax,al
c001dab3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001dab6:	eb 10                	jmp    c001dac8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001dab8:	83 ec 0c             	sub    esp,0xc
c001dabb:	68 68 29 02 c0       	push   0xc0022968
c001dac0:	e8 b3 71 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dacc:	a1 00 55 02 c0       	mov    eax,ds:0xc0025500
c001dad1:	83 ec 08             	sub    esp,0x8
c001dad4:	50                   	push   eax
c001dad5:	68 a0 29 02 c0       	push   0xc00229a0
c001dada:	e8 04 15 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001dadf:	83 c4 10             	add    esp,0x10
c001dae2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dae9:	a1 00 55 02 c0       	mov    eax,ds:0xc0025500
c001daee:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001daf1:	7d 58                	jge    c001db4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001daf3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001daf6:	8b 04 85 20 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaae0]
c001dafd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db00:	83 ec 08             	sub    esp,0x8
c001db03:	52                   	push   edx
c001db04:	50                   	push   eax
c001db05:	e8 4c fd ff ff       	call   c001d856 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001db0a:	83 c4 10             	add    esp,0x10
c001db0d:	84 c0                	test   al,al
c001db0f:	74 35                	je     c001db46 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001db11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db14:	8b 1c 85 20 55 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdaae0]
c001db1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db1e:	83 c0 20             	add    eax,0x20
c001db21:	0f b6 f0             	movzx  esi,al
c001db24:	e8 46 64 ff ff       	call   c0013f6f <getCPUNumber()>
c001db29:	99                   	cdq    
c001db2a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001db2d:	0f b6 c9             	movzx  ecx,cl
c001db30:	83 ec 0c             	sub    esp,0xc
c001db33:	56                   	push   esi
c001db34:	52                   	push   edx
c001db35:	50                   	push   eax
c001db36:	51                   	push   ecx
c001db37:	53                   	push   ebx
c001db38:	e8 95 fe ff ff       	call   c001d9d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db3d:	83 c4 20             	add    esp,0x20
c001db40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db44:	eb 05                	jmp    c001db4b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db46:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db49:	eb 9e                	jmp    c001dae9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db4b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db4e:	83 f0 01             	xor    eax,0x1
c001db51:	84 c0                	test   al,al
c001db53:	74 10                	je     c001db65 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db55:	83 ec 0c             	sub    esp,0xc
c001db58:	68 b7 29 02 c0       	push   0xc00229b7
c001db5d:	e8 16 71 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001db62:	83 c4 10             	add    esp,0x10
c001db65:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001db69:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db70:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001db74:	7f 65                	jg     c001dbdb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001db76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db79:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db7c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db83:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db86:	01 ca                	add    edx,ecx
c001db88:	83 c2 54             	add    edx,0x54
c001db8b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001db8f:	85 c0                	test   eax,eax
c001db91:	75 43                	jne    c001dbd6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001db93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db96:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db99:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dba0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dba3:	01 ca                	add    edx,ecx
c001dba5:	8d 4a 54             	lea    ecx,[edx+0x54]
c001dba8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001dbab:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbb2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dbb5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dbbc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dbbf:	01 ca                	add    edx,ecx
c001dbc1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001dbc7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dbca:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dbce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dbd1:	83 e8 20             	sub    eax,0x20
c001dbd4:	eb 1a                	jmp    c001dbf0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dbd6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dbd9:	eb 95                	jmp    c001db70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dbdb:	83 ec 0c             	sub    esp,0xc
c001dbde:	68 c4 29 02 c0       	push   0xc00229c4
c001dbe3:	e8 90 70 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001dbe8:	83 c4 10             	add    esp,0x10
c001dbeb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dbf0:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dbf3:	5b                   	pop    ebx
c001dbf4:	5e                   	pop    esi
c001dbf5:	5d                   	pop    ebp
c001dbf6:	c3                   	ret    
c001dbf7:	90                   	nop

c001dbf8 <PIC::disable()>:
c001dbf8:	55                   	push   ebp
c001dbf9:	89 e5                	mov    ebp,esp
c001dbfb:	83 ec 10             	sub    esp,0x10
c001dbfe:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dc04:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dc08:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc0b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dc0f:	ee                   	out    dx,al
c001dc10:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dc16:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dc1a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dc1d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dc21:	ee                   	out    dx,al
c001dc22:	90                   	nop
c001dc23:	c9                   	leave  
c001dc24:	c3                   	ret    
c001dc25:	90                   	nop

c001dc26 <PIC::close(int, int, void*)>:
c001dc26:	55                   	push   ebp
c001dc27:	89 e5                	mov    ebp,esp
c001dc29:	83 ec 08             	sub    esp,0x8
c001dc2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dc2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc31:	83 c0 3c             	add    eax,0x3c
c001dc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc3c:	ff d0                	call   eax
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	b8 00 00 00 00       	mov    eax,0x0
c001dc46:	c9                   	leave  
c001dc47:	c3                   	ret    

c001dc48 <PIC::PIC()>:
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4f:	83 ec 08             	sub    esp,0x8
c001dc52:	68 70 2a 02 c0       	push   0xc0022a70
c001dc57:	50                   	push   eax
c001dc58:	e8 c3 30 ff ff       	call   c0010d20 <InterruptController::InterruptController(char const*)>
c001dc5d:	83 c4 10             	add    esp,0x10
c001dc60:	ba 9c 2a 02 c0       	mov    edx,0xc0022a9c
c001dc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc69:	89 10                	mov    DWORD PTR [eax],edx
c001dc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc75:	0f b6 d0             	movzx  edx,al
c001dc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc8d:	0f b6 d0             	movzx  edx,al
c001dc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc94:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dca3:	8d 50 01             	lea    edx,[eax+0x1]
c001dca6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcaa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcb0:	0f b6 d0             	movzx  edx,al
c001dcb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcbb:	83 e1 3f             	and    ecx,0x3f
c001dcbe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dccc:	0f b6 d0             	movzx  edx,al
c001dccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dcda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dce4:	0f b6 d0             	movzx  edx,al
c001dce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dceb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcfa:	8d 50 01             	lea    edx,[eax+0x1]
c001dcfd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd01:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd07:	0f b6 d0             	movzx  edx,al
c001dd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd12:	83 e1 3f             	and    ecx,0x3f
c001dd15:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd19:	90                   	nop
c001dd1a:	83 c4 0c             	add    esp,0xc
c001dd1d:	c3                   	ret    

c001dd1e <PIC::ioWait()>:
c001dd1e:	eb 00                	jmp    c001dd20 <PIC::ioWait()+0x2>
c001dd20:	eb 00                	jmp    c001dd22 <PIC::ioWait()+0x4>
c001dd22:	90                   	nop
c001dd23:	c3                   	ret    

c001dd24 <PIC::getIRQReg(int)>:
c001dd24:	55                   	push   ebp
c001dd25:	89 e5                	mov    ebp,esp
c001dd27:	83 ec 10             	sub    esp,0x10
c001dd2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd2d:	0f b6 c0             	movzx  eax,al
c001dd30:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd36:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd39:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd3c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd40:	ee                   	out    dx,al
c001dd41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd44:	0f b6 c0             	movzx  eax,al
c001dd47:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd4d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd50:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd53:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd57:	ee                   	out    dx,al
c001dd58:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dd5e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dd62:	89 c2                	mov    edx,eax
c001dd64:	ec                   	in     al,dx
c001dd65:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dd68:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd6b:	0f b6 c0             	movzx  eax,al
c001dd6e:	c1 e0 08             	shl    eax,0x8
c001dd71:	89 c1                	mov    ecx,eax
c001dd73:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dd79:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dd7d:	89 c2                	mov    edx,eax
c001dd7f:	ec                   	in     al,dx
c001dd80:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dd83:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dd86:	0f b6 c0             	movzx  eax,al
c001dd89:	09 c8                	or     eax,ecx
c001dd8b:	c9                   	leave  
c001dd8c:	c3                   	ret    
c001dd8d:	90                   	nop

c001dd8e <PIC::eoi(unsigned char)>:
c001dd8e:	55                   	push   ebp
c001dd8f:	89 e5                	mov    ebp,esp
c001dd91:	83 ec 14             	sub    esp,0x14
c001dd94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd97:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd9a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd9e:	75 1e                	jne    c001ddbe <PIC::eoi(unsigned char)+0x30>
c001dda0:	6a 0b                	push   0xb
c001dda2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dda5:	e8 7a ff ff ff       	call   c001dd24 <PIC::getIRQReg(int)>
c001ddaa:	83 c4 08             	add    esp,0x8
c001ddad:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001ddb1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001ddb5:	25 80 00 00 00       	and    eax,0x80
c001ddba:	85 c0                	test   eax,eax
c001ddbc:	74 5f                	je     c001de1d <PIC::eoi(unsigned char)+0x8f>
c001ddbe:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ddc2:	75 2d                	jne    c001ddf1 <PIC::eoi(unsigned char)+0x63>
c001ddc4:	6a 0b                	push   0xb
c001ddc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddc9:	e8 56 ff ff ff       	call   c001dd24 <PIC::getIRQReg(int)>
c001ddce:	83 c4 08             	add    esp,0x8
c001ddd1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ddd5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ddd8:	66 85 c0             	test   ax,ax
c001dddb:	78 14                	js     c001ddf1 <PIC::eoi(unsigned char)+0x63>
c001dddd:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dde3:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dde7:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ddea:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ddee:	ee                   	out    dx,al
c001ddef:	eb 2d                	jmp    c001de1e <PIC::eoi(unsigned char)+0x90>
c001ddf1:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ddf5:	76 12                	jbe    c001de09 <PIC::eoi(unsigned char)+0x7b>
c001ddf7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ddfd:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001de01:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001de04:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001de08:	ee                   	out    dx,al
c001de09:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001de0f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001de13:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001de16:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001de1a:	ee                   	out    dx,al
c001de1b:	eb 01                	jmp    c001de1e <PIC::eoi(unsigned char)+0x90>
c001de1d:	90                   	nop
c001de1e:	c9                   	leave  
c001de1f:	c3                   	ret    

c001de20 <PIC::remap()>:
c001de20:	55                   	push   ebp
c001de21:	89 e5                	mov    ebp,esp
c001de23:	83 ec 48             	sub    esp,0x48
c001de26:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001de2d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001de34:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de3a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de3d:	89 c2                	mov    edx,eax
c001de3f:	ec                   	in     al,dx
c001de40:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de43:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de46:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de49:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de4f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de52:	89 c2                	mov    edx,eax
c001de54:	ec                   	in     al,dx
c001de55:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de58:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001de5b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001de5e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001de64:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001de68:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de6b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de6e:	ee                   	out    dx,al
c001de6f:	83 ec 0c             	sub    esp,0xc
c001de72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de75:	e8 a4 fe ff ff       	call   c001dd1e <PIC::ioWait()>
c001de7a:	83 c4 10             	add    esp,0x10
c001de7d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001de83:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001de87:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001de8a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001de8d:	ee                   	out    dx,al
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de94:	e8 85 fe ff ff       	call   c001dd1e <PIC::ioWait()>
c001de99:	83 c4 10             	add    esp,0x10
c001de9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de9f:	0f b6 c0             	movzx  eax,al
c001dea2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001dea8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001deab:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001deae:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001deb1:	ee                   	out    dx,al
c001deb2:	83 ec 0c             	sub    esp,0xc
c001deb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001deb8:	e8 61 fe ff ff       	call   c001dd1e <PIC::ioWait()>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dec3:	0f b6 c0             	movzx  eax,al
c001dec6:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001decc:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001decf:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ded2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ded5:	ee                   	out    dx,al
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dedc:	e8 3d fe ff ff       	call   c001dd1e <PIC::ioWait()>
c001dee1:	83 c4 10             	add    esp,0x10
c001dee4:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001deea:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001deee:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001def1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001def4:	ee                   	out    dx,al
c001def5:	83 ec 0c             	sub    esp,0xc
c001def8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001defb:	e8 1e fe ff ff       	call   c001dd1e <PIC::ioWait()>
c001df00:	83 c4 10             	add    esp,0x10
c001df03:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001df09:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001df0d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001df10:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001df13:	ee                   	out    dx,al
c001df14:	83 ec 0c             	sub    esp,0xc
c001df17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df1a:	e8 ff fd ff ff       	call   c001dd1e <PIC::ioWait()>
c001df1f:	83 c4 10             	add    esp,0x10
c001df22:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001df28:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001df2c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001df2f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001df32:	ee                   	out    dx,al
c001df33:	83 ec 0c             	sub    esp,0xc
c001df36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df39:	e8 e0 fd ff ff       	call   c001dd1e <PIC::ioWait()>
c001df3e:	83 c4 10             	add    esp,0x10
c001df41:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df47:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df4b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df4e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df51:	ee                   	out    dx,al
c001df52:	83 ec 0c             	sub    esp,0xc
c001df55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df58:	e8 c1 fd ff ff       	call   c001dd1e <PIC::ioWait()>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001df64:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df6a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df6d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df73:	ee                   	out    dx,al
c001df74:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001df78:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001df7e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001df81:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001df84:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df87:	ee                   	out    dx,al
c001df88:	90                   	nop
c001df89:	c9                   	leave  
c001df8a:	c3                   	ret    
c001df8b:	90                   	nop

c001df8c <PIC::open(int, int, void*)>:
c001df8c:	55                   	push   ebp
c001df8d:	89 e5                	mov    ebp,esp
c001df8f:	83 ec 18             	sub    esp,0x18
c001df92:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001df98:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df9c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df9f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dfa3:	ee                   	out    dx,al
c001dfa4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001dfaa:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001dfae:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dfb1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dfb5:	ee                   	out    dx,al
c001dfb6:	83 ec 0c             	sub    esp,0xc
c001dfb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfbc:	e8 5f fe ff ff       	call   c001de20 <PIC::remap()>
c001dfc1:	83 c4 10             	add    esp,0x10
c001dfc4:	b8 00 00 00 00       	mov    eax,0x0
c001dfc9:	c9                   	leave  
c001dfca:	c3                   	ret    
c001dfcb:	90                   	nop

c001dfcc <APICTimer::close(int, int, void*)>:
c001dfcc:	b8 00 00 00 00       	mov    eax,0x0
c001dfd1:	c3                   	ret    

c001dfd2 <apicTimerHandler(regs*, void*)>:
c001dfd2:	83 ec 0c             	sub    esp,0xc
c001dfd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfd9:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfdb:	99                   	cdq    
c001dfdc:	52                   	push   edx
c001dfdd:	50                   	push   eax
c001dfde:	6a 00                	push   0x0
c001dfe0:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dfe5:	e8 72 07 00 00       	call   c001e75c <__udivdi3>
c001dfea:	83 c4 10             	add    esp,0x10
c001dfed:	83 ec 08             	sub    esp,0x8
c001dff0:	52                   	push   edx
c001dff1:	50                   	push   eax
c001dff2:	e8 94 44 ff ff       	call   c001248b <timerHandler(unsigned long long)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	90                   	nop
c001dffb:	83 c4 0c             	add    esp,0xc
c001dffe:	c3                   	ret    
c001dfff:	90                   	nop

c001e000 <APICTimer::write(int)>:
c001e000:	53                   	push   ebx
c001e001:	83 ec 28             	sub    esp,0x28
c001e004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e008:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e00c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e012:	e8 5b 5f ff ff       	call   c0013f72 <thisCPU()>
c001e017:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e01d:	83 ec 0c             	sub    esp,0xc
c001e020:	50                   	push   eax
c001e021:	e8 0e f6 ff ff       	call   c001d634 <APIC::getBase()>
c001e026:	83 c4 10             	add    esp,0x10
c001e029:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e02d:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c001e032:	8b 15 b4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023db4
c001e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e044:	05 e0 03 00 00       	add    eax,0x3e0
c001e049:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e04f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e053:	05 80 03 00 00       	add    eax,0x380
c001e058:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e05e:	fb                   	sti    
c001e05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e063:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e067:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e06c:	83 d2 00             	adc    edx,0x0
c001e06f:	89 c1                	mov    ecx,eax
c001e071:	89 d3                	mov    ebx,edx
c001e073:	a1 b0 3d 02 c0       	mov    eax,ds:0xc0023db0
c001e078:	8b 15 b4 3d 02 c0    	mov    edx,DWORD PTR ds:0xc0023db4
c001e07e:	39 c8                	cmp    eax,ecx
c001e080:	89 d0                	mov    eax,edx
c001e082:	19 d8                	sbb    eax,ebx
c001e084:	73 02                	jae    c001e088 <APICTimer::write(int)+0x88>
c001e086:	eb d7                	jmp    c001e05f <APICTimer::write(int)+0x5f>
c001e088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e08c:	05 20 03 00 00       	add    eax,0x320
c001e091:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e097:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e09b:	05 90 03 00 00       	add    eax,0x390
c001e0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a2:	f7 d0                	not    eax
c001e0a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e0a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0b0:	ba 00 00 00 00       	mov    edx,0x0
c001e0b5:	f7 f3                	div    ebx
c001e0b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0c5:	0d 00 00 02 00       	or     eax,0x20000
c001e0ca:	89 c2                	mov    edx,eax
c001e0cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0d0:	05 20 03 00 00       	add    eax,0x320
c001e0d5:	89 10                	mov    DWORD PTR [eax],edx
c001e0d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0db:	05 e0 03 00 00       	add    eax,0x3e0
c001e0e0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e0e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0ea:	05 80 03 00 00       	add    eax,0x380
c001e0ef:	89 c2                	mov    edx,eax
c001e0f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0f5:	89 02                	mov    DWORD PTR [edx],eax
c001e0f7:	90                   	nop
c001e0f8:	83 c4 28             	add    esp,0x28
c001e0fb:	5b                   	pop    ebx
c001e0fc:	c3                   	ret    
c001e0fd:	90                   	nop

c001e0fe <APICTimer::open(int, int, void*)>:
c001e0fe:	57                   	push   edi
c001e0ff:	56                   	push   esi
c001e100:	53                   	push   ebx
c001e101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e105:	8b 00                	mov    eax,DWORD PTR [eax]
c001e107:	83 c0 24             	add    eax,0x24
c001e10a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e10c:	83 ec 08             	sub    esp,0x8
c001e10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e117:	ff d0                	call   eax
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	e8 51 5e ff ff       	call   c0013f72 <thisCPU()>
c001e121:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e127:	83 ec 0c             	sub    esp,0xc
c001e12a:	50                   	push   eax
c001e12b:	e8 04 f5 ff ff       	call   c001d634 <APIC::getBase()>
c001e130:	83 c4 10             	add    esp,0x10
c001e133:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e143:	0f b6 f8             	movzx  edi,al
c001e146:	89 d0                	mov    eax,edx
c001e148:	ba 00 00 00 00       	mov    edx,0x0
c001e14d:	89 c1                	mov    ecx,eax
c001e14f:	80 e5 ff             	and    ch,0xff
c001e152:	89 cb                	mov    ebx,ecx
c001e154:	0f b6 f2             	movzx  esi,dl
c001e157:	89 d8                	mov    eax,ebx
c001e159:	89 f2                	mov    edx,esi
c001e15b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e15f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e162:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e166:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e16a:	83 e0 00             	and    eax,0x0
c001e16d:	09 d0                	or     eax,edx
c001e16f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e177:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e17d:	8d 50 01             	lea    edx,[eax+0x1]
c001e180:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e184:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e18a:	0f b6 d0             	movzx  edx,al
c001e18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e191:	83 c2 08             	add    edx,0x8
c001e194:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e198:	0f b6 c9             	movzx  ecx,cl
c001e19b:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e1a1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1ad:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1bb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e1c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1c5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1cb:	83 ec 0c             	sub    esp,0xc
c001e1ce:	51                   	push   ecx
c001e1cf:	6a 01                	push   0x1
c001e1d1:	68 d2 df 01 c0       	push   0xc001dfd2
c001e1d6:	52                   	push   edx
c001e1d7:	50                   	push   eax
c001e1d8:	e8 65 21 ff ff       	call   c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1dd:	83 c4 20             	add    esp,0x20
c001e1e0:	89 c2                	mov    edx,eax
c001e1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e6:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1ec:	b8 00 00 00 00       	mov    eax,0x0
c001e1f1:	5b                   	pop    ebx
c001e1f2:	5e                   	pop    esi
c001e1f3:	5f                   	pop    edi
c001e1f4:	c3                   	ret    
c001e1f5:	90                   	nop

c001e1f6 <APICTimer::APICTimer()>:
c001e1f6:	83 ec 0c             	sub    esp,0xc
c001e1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1fd:	83 ec 08             	sub    esp,0x8
c001e200:	68 dc 2a 02 c0       	push   0xc0022adc
c001e205:	50                   	push   eax
c001e206:	e8 f1 41 ff ff       	call   c00123fc <Timer::Timer(char const*)>
c001e20b:	83 c4 10             	add    esp,0x10
c001e20e:	ba f0 2a 02 c0       	mov    edx,0xc0022af0
c001e213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e217:	89 10                	mov    DWORD PTR [eax],edx
c001e219:	90                   	nop
c001e21a:	83 c4 0c             	add    esp,0xc
c001e21d:	c3                   	ret    

c001e21e <PIT::write(int)>:
c001e21e:	83 ec 10             	sub    esp,0x10
c001e221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e225:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e229:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e22f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e233:	a3 44 55 02 c0       	mov    ds:0xc0025544,eax
c001e238:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e23d:	99                   	cdq    
c001e23e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e242:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e246:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e24d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e252:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e256:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e25b:	ee                   	out    dx,al
c001e25c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e260:	0f b6 c0             	movzx  eax,al
c001e263:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e26a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e26e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e272:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e277:	ee                   	out    dx,al
c001e278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e27c:	c1 f8 08             	sar    eax,0x8
c001e27f:	0f b6 c0             	movzx  eax,al
c001e282:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e289:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e28d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e291:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e296:	ee                   	out    dx,al
c001e297:	90                   	nop
c001e298:	83 c4 10             	add    esp,0x10
c001e29b:	c3                   	ret    

c001e29c <pitHandler(regs*, void*)>:
c001e29c:	83 ec 0c             	sub    esp,0xc
c001e29f:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c001e2a4:	99                   	cdq    
c001e2a5:	52                   	push   edx
c001e2a6:	50                   	push   eax
c001e2a7:	6a 00                	push   0x0
c001e2a9:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e2ae:	e8 a9 04 00 00       	call   c001e75c <__udivdi3>
c001e2b3:	83 c4 10             	add    esp,0x10
c001e2b6:	83 ec 08             	sub    esp,0x8
c001e2b9:	52                   	push   edx
c001e2ba:	50                   	push   eax
c001e2bb:	e8 cb 41 ff ff       	call   c001248b <timerHandler(unsigned long long)>
c001e2c0:	83 c4 10             	add    esp,0x10
c001e2c3:	90                   	nop
c001e2c4:	83 c4 0c             	add    esp,0xc
c001e2c7:	c3                   	ret    

c001e2c8 <PIT::open(int, int, void*)>:
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2d1:	83 c0 24             	add    eax,0x24
c001e2d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2d6:	83 ec 08             	sub    esp,0x8
c001e2d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2e1:	ff d0                	call   eax
c001e2e3:	83 c4 10             	add    esp,0x10
c001e2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ea:	83 ec 0c             	sub    esp,0xc
c001e2ed:	6a 00                	push   0x0
c001e2ef:	6a 01                	push   0x1
c001e2f1:	68 9c e2 01 c0       	push   0xc001e29c
c001e2f6:	6a 00                	push   0x0
c001e2f8:	50                   	push   eax
c001e2f9:	e8 44 20 ff ff       	call   c0010342 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e2fe:	83 c4 20             	add    esp,0x20
c001e301:	89 c2                	mov    edx,eax
c001e303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e307:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e30d:	b8 00 00 00 00       	mov    eax,0x0
c001e312:	83 c4 0c             	add    esp,0xc
c001e315:	c3                   	ret    

c001e316 <PIT::close(int, int, void*)>:
c001e316:	83 ec 0c             	sub    esp,0xc
c001e319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32b:	6a 01                	push   0x1
c001e32d:	68 9c e2 01 c0       	push   0xc001e29c
c001e332:	6a 00                	push   0x0
c001e334:	50                   	push   eax
c001e335:	e8 66 20 ff ff       	call   c00103a0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	b8 00 00 00 00       	mov    eax,0x0
c001e342:	83 c4 0c             	add    esp,0xc
c001e345:	c3                   	ret    

c001e346 <PIT::PIT()>:
c001e346:	83 ec 0c             	sub    esp,0xc
c001e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34d:	83 ec 08             	sub    esp,0x8
c001e350:	68 18 2b 02 c0       	push   0xc0022b18
c001e355:	50                   	push   eax
c001e356:	e8 a1 40 ff ff       	call   c00123fc <Timer::Timer(char const*)>
c001e35b:	83 c4 10             	add    esp,0x10
c001e35e:	ba 40 2b 02 c0       	mov    edx,0xc0022b40
c001e363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e367:	89 10                	mov    DWORD PTR [eax],edx
c001e369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e373:	0f b6 d0             	movzx  edx,al
c001e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e385:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e38b:	0f b6 d0             	movzx  edx,al
c001e38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e392:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3a1:	8d 50 01             	lea    edx,[eax+0x1]
c001e3a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3a8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e3ae:	0f b6 d0             	movzx  edx,al
c001e3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e3b9:	83 e1 3f             	and    ecx,0x3f
c001e3bc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e3c0:	90                   	nop
c001e3c1:	83 c4 0c             	add    esp,0xc
c001e3c4:	c3                   	ret    
c001e3c5:	66 90                	xchg   ax,ax
c001e3c7:	66 90                	xchg   ax,ax
c001e3c9:	66 90                	xchg   ax,ax
c001e3cb:	66 90                	xchg   ax,ax
c001e3cd:	66 90                	xchg   ax,ax
c001e3cf:	90                   	nop

c001e3d0 <avxDetect>:
c001e3d0:	b8 00 00 00 00       	mov    eax,0x0
c001e3d5:	c3                   	ret    

c001e3d6 <avxSave>:
c001e3d6:	c3                   	ret    

c001e3d7 <avxLoad>:
c001e3d7:	c3                   	ret    

c001e3d8 <avxInit>:
c001e3d8:	c3                   	ret    

c001e3d9 <avxClose>:
c001e3d9:	c3                   	ret    
c001e3da:	66 90                	xchg   ax,ax
c001e3dc:	66 90                	xchg   ax,ax
c001e3de:	66 90                	xchg   ax,ax

c001e3e0 <sseDetect>:
c001e3e0:	b8 01 00 00 00       	mov    eax,0x1
c001e3e5:	0f a2                	cpuid  
c001e3e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e3ed:	74 06                	je     c001e3f5 <sseDetect.noSSE>
c001e3ef:	b8 01 00 00 00       	mov    eax,0x1
c001e3f4:	c3                   	ret    

c001e3f5 <sseDetect.noSSE>:
c001e3f5:	b8 00 00 00 00       	mov    eax,0x0
c001e3fa:	c3                   	ret    

c001e3fb <sseSave>:
c001e3fb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e400:	c3                   	ret    

c001e401 <sseLoad>:
c001e401:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e406:	c3                   	ret    

c001e407 <sseInit>:
c001e407:	e8 40 00 00 00       	call   c001e44c <x87Init>
c001e40c:	0f 20 e0             	mov    eax,cr4
c001e40f:	66 0d 00 06          	or     ax,0x600
c001e413:	0f 22 e0             	mov    cr4,eax
c001e416:	c3                   	ret    

c001e417 <sseClose>:
c001e417:	c3                   	ret    
c001e418:	66 90                	xchg   ax,ax
c001e41a:	66 90                	xchg   ax,ax
c001e41c:	66 90                	xchg   ax,ax
c001e41e:	66 90                	xchg   ax,ax

c001e420 <value_37F>:
c001e420:	7f 03                	jg     c001e425 <value_37A+0x1>

c001e422 <value_37E>:
c001e422:	7e 03                	jle    c001e427 <x87Detect+0x1>

c001e424 <value_37A>:
c001e424:	7a 03                	jp     c001e429 <x87Detect+0x3>

c001e426 <x87Detect>:
c001e426:	b8 01 00 00 00       	mov    eax,0x1
c001e42b:	0f a2                	cpuid  
c001e42d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e433:	74 06                	je     c001e43b <x87Detect.nox87>
c001e435:	b8 01 00 00 00       	mov    eax,0x1
c001e43a:	c3                   	ret    

c001e43b <x87Detect.nox87>:
c001e43b:	b8 00 00 00 00       	mov    eax,0x0
c001e440:	c3                   	ret    

c001e441 <x87Save>:
c001e441:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e446:	c3                   	ret    

c001e447 <x87Load>:
c001e447:	dd 64 24 08          	frstor [esp+0x8]
c001e44b:	c3                   	ret    

c001e44c <x87Init>:
c001e44c:	9b db e3             	finit  
c001e44f:	0f 20 c0             	mov    eax,cr0
c001e452:	66 25 fb ff          	and    ax,0xfffb
c001e456:	66 0d 22 00          	or     ax,0x22
c001e45a:	0f 22 c0             	mov    cr0,eax
c001e45d:	0f 06                	clts   
c001e45f:	d9 2d 24 e4 01 c0    	fldcw  WORD PTR ds:0xc001e424
c001e465:	c3                   	ret    

c001e466 <x87Close>:
c001e466:	c3                   	ret    
c001e467:	90                   	nop

c001e468 <__do_global_ctors_aux>:
c001e468:	a1 44 f5 01 c0       	mov    eax,ds:0xc001f544
c001e46d:	83 f8 ff             	cmp    eax,0xffffffff
c001e470:	74 1a                	je     c001e48c <__do_global_ctors_aux+0x24>
c001e472:	55                   	push   ebp
c001e473:	89 e5                	mov    ebp,esp
c001e475:	53                   	push   ebx
c001e476:	52                   	push   edx
c001e477:	bb 44 f5 01 c0       	mov    ebx,0xc001f544
c001e47c:	ff d0                	call   eax
c001e47e:	83 eb 04             	sub    ebx,0x4
c001e481:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e483:	83 f8 ff             	cmp    eax,0xffffffff
c001e486:	75 f4                	jne    c001e47c <__do_global_ctors_aux+0x14>
c001e488:	58                   	pop    eax
c001e489:	5b                   	pop    ebx
c001e48a:	5d                   	pop    ebp
c001e48b:	c3                   	ret    
c001e48c:	c3                   	ret    
c001e48d:	66 90                	xchg   ax,ax
c001e48f:	90                   	nop

c001e490 <__divdi3>:
c001e490:	55                   	push   ebp
c001e491:	57                   	push   edi
c001e492:	56                   	push   esi
c001e493:	53                   	push   ebx
c001e494:	83 ec 1c             	sub    esp,0x1c
c001e497:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e49b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e49f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e4a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e4a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e4aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e4ae:	85 db                	test   ebx,ebx
c001e4b0:	0f 88 8e 00 00 00    	js     c001e544 <__divdi3+0xb4>
c001e4b6:	89 dd                	mov    ebp,ebx
c001e4b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e4c0:	89 d3                	mov    ebx,edx
c001e4c2:	85 d2                	test   edx,edx
c001e4c4:	79 0d                	jns    c001e4d3 <__divdi3+0x43>
c001e4c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e4ca:	f7 d8                	neg    eax
c001e4cc:	83 d2 00             	adc    edx,0x0
c001e4cf:	f7 da                	neg    edx
c001e4d1:	89 d3                	mov    ebx,edx
c001e4d3:	89 c7                	mov    edi,eax
c001e4d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4d8:	85 db                	test   ebx,ebx
c001e4da:	75 48                	jne    c001e524 <__divdi3+0x94>
c001e4dc:	39 ef                	cmp    edi,ebp
c001e4de:	76 24                	jbe    c001e504 <__divdi3+0x74>
c001e4e0:	89 ea                	mov    edx,ebp
c001e4e2:	f7 f7                	div    edi
c001e4e4:	89 c1                	mov    ecx,eax
c001e4e6:	31 f6                	xor    esi,esi
c001e4e8:	89 c8                	mov    eax,ecx
c001e4ea:	89 f2                	mov    edx,esi
c001e4ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4f0:	85 c9                	test   ecx,ecx
c001e4f2:	74 07                	je     c001e4fb <__divdi3+0x6b>
c001e4f4:	f7 d8                	neg    eax
c001e4f6:	83 d2 00             	adc    edx,0x0
c001e4f9:	f7 da                	neg    edx
c001e4fb:	83 c4 1c             	add    esp,0x1c
c001e4fe:	5b                   	pop    ebx
c001e4ff:	5e                   	pop    esi
c001e500:	5f                   	pop    edi
c001e501:	5d                   	pop    ebp
c001e502:	c3                   	ret    
c001e503:	90                   	nop
c001e504:	85 ff                	test   edi,edi
c001e506:	75 0b                	jne    c001e513 <__divdi3+0x83>
c001e508:	b8 01 00 00 00       	mov    eax,0x1
c001e50d:	31 d2                	xor    edx,edx
c001e50f:	f7 f3                	div    ebx
c001e511:	89 c7                	mov    edi,eax
c001e513:	31 d2                	xor    edx,edx
c001e515:	89 e8                	mov    eax,ebp
c001e517:	f7 f7                	div    edi
c001e519:	89 c6                	mov    esi,eax
c001e51b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e51e:	f7 f7                	div    edi
c001e520:	89 c1                	mov    ecx,eax
c001e522:	eb c4                	jmp    c001e4e8 <__divdi3+0x58>
c001e524:	39 eb                	cmp    ebx,ebp
c001e526:	77 3c                	ja     c001e564 <__divdi3+0xd4>
c001e528:	0f bd f3             	bsr    esi,ebx
c001e52b:	83 f6 1f             	xor    esi,0x1f
c001e52e:	75 40                	jne    c001e570 <__divdi3+0xe0>
c001e530:	39 eb                	cmp    ebx,ebp
c001e532:	72 09                	jb     c001e53d <__divdi3+0xad>
c001e534:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e537:	0f 87 97 00 00 00    	ja     c001e5d4 <__divdi3+0x144>
c001e53d:	b9 01 00 00 00       	mov    ecx,0x1
c001e542:	eb a4                	jmp    c001e4e8 <__divdi3+0x58>
c001e544:	f7 d9                	neg    ecx
c001e546:	83 d3 00             	adc    ebx,0x0
c001e549:	f7 db                	neg    ebx
c001e54b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e54e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e552:	89 dd                	mov    ebp,ebx
c001e554:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e55c:	e9 5f ff ff ff       	jmp    c001e4c0 <__divdi3+0x30>
c001e561:	8d 76 00             	lea    esi,[esi+0x0]
c001e564:	31 f6                	xor    esi,esi
c001e566:	31 c9                	xor    ecx,ecx
c001e568:	e9 7b ff ff ff       	jmp    c001e4e8 <__divdi3+0x58>
c001e56d:	8d 76 00             	lea    esi,[esi+0x0]
c001e570:	b8 20 00 00 00       	mov    eax,0x20
c001e575:	29 f0                	sub    eax,esi
c001e577:	89 f1                	mov    ecx,esi
c001e579:	d3 e3                	shl    ebx,cl
c001e57b:	89 fa                	mov    edx,edi
c001e57d:	88 c1                	mov    cl,al
c001e57f:	d3 ea                	shr    edx,cl
c001e581:	09 da                	or     edx,ebx
c001e583:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e587:	89 f1                	mov    ecx,esi
c001e589:	d3 e7                	shl    edi,cl
c001e58b:	89 eb                	mov    ebx,ebp
c001e58d:	88 c1                	mov    cl,al
c001e58f:	d3 eb                	shr    ebx,cl
c001e591:	89 f1                	mov    ecx,esi
c001e593:	d3 e5                	shl    ebp,cl
c001e595:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e598:	88 c1                	mov    cl,al
c001e59a:	d3 ea                	shr    edx,cl
c001e59c:	09 d5                	or     ebp,edx
c001e59e:	89 e8                	mov    eax,ebp
c001e5a0:	89 da                	mov    edx,ebx
c001e5a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e5a6:	89 d3                	mov    ebx,edx
c001e5a8:	89 c5                	mov    ebp,eax
c001e5aa:	f7 e7                	mul    edi
c001e5ac:	39 d3                	cmp    ebx,edx
c001e5ae:	72 18                	jb     c001e5c8 <__divdi3+0x138>
c001e5b0:	74 0a                	je     c001e5bc <__divdi3+0x12c>
c001e5b2:	89 e9                	mov    ecx,ebp
c001e5b4:	31 f6                	xor    esi,esi
c001e5b6:	e9 2d ff ff ff       	jmp    c001e4e8 <__divdi3+0x58>
c001e5bb:	90                   	nop
c001e5bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e5bf:	89 f1                	mov    ecx,esi
c001e5c1:	d3 e7                	shl    edi,cl
c001e5c3:	39 c7                	cmp    edi,eax
c001e5c5:	73 eb                	jae    c001e5b2 <__divdi3+0x122>
c001e5c7:	90                   	nop
c001e5c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e5cb:	31 f6                	xor    esi,esi
c001e5cd:	e9 16 ff ff ff       	jmp    c001e4e8 <__divdi3+0x58>
c001e5d2:	66 90                	xchg   ax,ax
c001e5d4:	31 c9                	xor    ecx,ecx
c001e5d6:	e9 0d ff ff ff       	jmp    c001e4e8 <__divdi3+0x58>
c001e5db:	90                   	nop

c001e5dc <__moddi3>:
c001e5dc:	55                   	push   ebp
c001e5dd:	57                   	push   edi
c001e5de:	56                   	push   esi
c001e5df:	53                   	push   ebx
c001e5e0:	83 ec 2c             	sub    esp,0x2c
c001e5e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e5eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e5ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5f3:	85 db                	test   ebx,ebx
c001e5f5:	0f 88 85 00 00 00    	js     c001e680 <__moddi3+0xa4>
c001e5fb:	89 de                	mov    esi,ebx
c001e5fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e605:	89 d7                	mov    edi,edx
c001e607:	85 d2                	test   edx,edx
c001e609:	79 09                	jns    c001e614 <__moddi3+0x38>
c001e60b:	f7 d8                	neg    eax
c001e60d:	83 d2 00             	adc    edx,0x0
c001e610:	f7 da                	neg    edx
c001e612:	89 d7                	mov    edi,edx
c001e614:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e618:	89 cd                	mov    ebp,ecx
c001e61a:	85 ff                	test   edi,edi
c001e61c:	75 52                	jne    c001e670 <__moddi3+0x94>
c001e61e:	89 c3                	mov    ebx,eax
c001e620:	39 f0                	cmp    eax,esi
c001e622:	76 24                	jbe    c001e648 <__moddi3+0x6c>
c001e624:	89 c8                	mov    eax,ecx
c001e626:	89 f2                	mov    edx,esi
c001e628:	f7 f3                	div    ebx
c001e62a:	89 d6                	mov    esi,edx
c001e62c:	89 f0                	mov    eax,esi
c001e62e:	31 d2                	xor    edx,edx
c001e630:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e634:	85 c9                	test   ecx,ecx
c001e636:	74 07                	je     c001e63f <__moddi3+0x63>
c001e638:	f7 d8                	neg    eax
c001e63a:	83 d2 00             	adc    edx,0x0
c001e63d:	f7 da                	neg    edx
c001e63f:	83 c4 2c             	add    esp,0x2c
c001e642:	5b                   	pop    ebx
c001e643:	5e                   	pop    esi
c001e644:	5f                   	pop    edi
c001e645:	5d                   	pop    ebp
c001e646:	c3                   	ret    
c001e647:	90                   	nop
c001e648:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e64c:	85 db                	test   ebx,ebx
c001e64e:	75 0d                	jne    c001e65d <__moddi3+0x81>
c001e650:	b8 01 00 00 00       	mov    eax,0x1
c001e655:	31 d2                	xor    edx,edx
c001e657:	f7 f7                	div    edi
c001e659:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e65d:	89 f0                	mov    eax,esi
c001e65f:	31 d2                	xor    edx,edx
c001e661:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e665:	f7 f7                	div    edi
c001e667:	89 e8                	mov    eax,ebp
c001e669:	f7 f7                	div    edi
c001e66b:	89 d6                	mov    esi,edx
c001e66d:	eb bd                	jmp    c001e62c <__moddi3+0x50>
c001e66f:	90                   	nop
c001e670:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e674:	39 f7                	cmp    edi,esi
c001e676:	76 20                	jbe    c001e698 <__moddi3+0xbc>
c001e678:	89 c8                	mov    eax,ecx
c001e67a:	89 f2                	mov    edx,esi
c001e67c:	eb b2                	jmp    c001e630 <__moddi3+0x54>
c001e67e:	66 90                	xchg   ax,ax
c001e680:	f7 d9                	neg    ecx
c001e682:	83 d3 00             	adc    ebx,0x0
c001e685:	f7 db                	neg    ebx
c001e687:	89 de                	mov    esi,ebx
c001e689:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e691:	e9 6f ff ff ff       	jmp    c001e605 <__moddi3+0x29>
c001e696:	66 90                	xchg   ax,ax
c001e698:	0f bd c7             	bsr    eax,edi
c001e69b:	83 f0 1f             	xor    eax,0x1f
c001e69e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e6a2:	75 24                	jne    c001e6c8 <__moddi3+0xec>
c001e6a4:	39 f7                	cmp    edi,esi
c001e6a6:	72 06                	jb     c001e6ae <__moddi3+0xd2>
c001e6a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e6ac:	77 0c                	ja     c001e6ba <__moddi3+0xde>
c001e6ae:	89 e9                	mov    ecx,ebp
c001e6b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e6b4:	19 fe                	sbb    esi,edi
c001e6b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e6ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6be:	89 f2                	mov    edx,esi
c001e6c0:	e9 6b ff ff ff       	jmp    c001e630 <__moddi3+0x54>
c001e6c5:	8d 76 00             	lea    esi,[esi+0x0]
c001e6c8:	b8 20 00 00 00       	mov    eax,0x20
c001e6cd:	89 c2                	mov    edx,eax
c001e6cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6d3:	29 da                	sub    edx,ebx
c001e6d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e6d9:	88 d9                	mov    cl,bl
c001e6db:	d3 e7                	shl    edi,cl
c001e6dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6e1:	88 d1                	mov    cl,dl
c001e6e3:	d3 e8                	shr    eax,cl
c001e6e5:	09 c7                	or     edi,eax
c001e6e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e6eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6ef:	89 d8                	mov    eax,ebx
c001e6f1:	88 d9                	mov    cl,bl
c001e6f3:	d3 e7                	shl    edi,cl
c001e6f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6f9:	89 f3                	mov    ebx,esi
c001e6fb:	88 d1                	mov    cl,dl
c001e6fd:	d3 eb                	shr    ebx,cl
c001e6ff:	89 c7                	mov    edi,eax
c001e701:	88 c1                	mov    cl,al
c001e703:	d3 e6                	shl    esi,cl
c001e705:	89 e8                	mov    eax,ebp
c001e707:	88 d1                	mov    cl,dl
c001e709:	d3 e8                	shr    eax,cl
c001e70b:	09 f0                	or     eax,esi
c001e70d:	89 f9                	mov    ecx,edi
c001e70f:	d3 e5                	shl    ebp,cl
c001e711:	89 da                	mov    edx,ebx
c001e713:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e717:	89 d3                	mov    ebx,edx
c001e719:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e71d:	89 c6                	mov    esi,eax
c001e71f:	89 d1                	mov    ecx,edx
c001e721:	39 d3                	cmp    ebx,edx
c001e723:	72 27                	jb     c001e74c <__moddi3+0x170>
c001e725:	74 21                	je     c001e748 <__moddi3+0x16c>
c001e727:	29 f5                	sub    ebp,esi
c001e729:	19 cb                	sbb    ebx,ecx
c001e72b:	89 de                	mov    esi,ebx
c001e72d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e731:	d3 e6                	shl    esi,cl
c001e733:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e737:	89 f9                	mov    ecx,edi
c001e739:	d3 ed                	shr    ebp,cl
c001e73b:	09 ee                	or     esi,ebp
c001e73d:	89 f0                	mov    eax,esi
c001e73f:	d3 eb                	shr    ebx,cl
c001e741:	89 da                	mov    edx,ebx
c001e743:	e9 e8 fe ff ff       	jmp    c001e630 <__moddi3+0x54>
c001e748:	39 c5                	cmp    ebp,eax
c001e74a:	73 db                	jae    c001e727 <__moddi3+0x14b>
c001e74c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e750:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e754:	89 d1                	mov    ecx,edx
c001e756:	89 c6                	mov    esi,eax
c001e758:	eb cd                	jmp    c001e727 <__moddi3+0x14b>
c001e75a:	66 90                	xchg   ax,ax

c001e75c <__udivdi3>:
c001e75c:	55                   	push   ebp
c001e75d:	57                   	push   edi
c001e75e:	56                   	push   esi
c001e75f:	53                   	push   ebx
c001e760:	83 ec 1c             	sub    esp,0x1c
c001e763:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e767:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e76b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e76f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e773:	85 d2                	test   edx,edx
c001e775:	75 41                	jne    c001e7b8 <__udivdi3+0x5c>
c001e777:	39 f7                	cmp    edi,esi
c001e779:	76 15                	jbe    c001e790 <__udivdi3+0x34>
c001e77b:	89 e8                	mov    eax,ebp
c001e77d:	89 f2                	mov    edx,esi
c001e77f:	f7 f7                	div    edi
c001e781:	31 db                	xor    ebx,ebx
c001e783:	89 da                	mov    edx,ebx
c001e785:	83 c4 1c             	add    esp,0x1c
c001e788:	5b                   	pop    ebx
c001e789:	5e                   	pop    esi
c001e78a:	5f                   	pop    edi
c001e78b:	5d                   	pop    ebp
c001e78c:	c3                   	ret    
c001e78d:	8d 76 00             	lea    esi,[esi+0x0]
c001e790:	89 f9                	mov    ecx,edi
c001e792:	85 ff                	test   edi,edi
c001e794:	75 0b                	jne    c001e7a1 <__udivdi3+0x45>
c001e796:	b8 01 00 00 00       	mov    eax,0x1
c001e79b:	31 d2                	xor    edx,edx
c001e79d:	f7 f7                	div    edi
c001e79f:	89 c1                	mov    ecx,eax
c001e7a1:	31 d2                	xor    edx,edx
c001e7a3:	89 f0                	mov    eax,esi
c001e7a5:	f7 f1                	div    ecx
c001e7a7:	89 c3                	mov    ebx,eax
c001e7a9:	89 e8                	mov    eax,ebp
c001e7ab:	f7 f1                	div    ecx
c001e7ad:	89 da                	mov    edx,ebx
c001e7af:	83 c4 1c             	add    esp,0x1c
c001e7b2:	5b                   	pop    ebx
c001e7b3:	5e                   	pop    esi
c001e7b4:	5f                   	pop    edi
c001e7b5:	5d                   	pop    ebp
c001e7b6:	c3                   	ret    
c001e7b7:	90                   	nop
c001e7b8:	39 f2                	cmp    edx,esi
c001e7ba:	77 1c                	ja     c001e7d8 <__udivdi3+0x7c>
c001e7bc:	0f bd da             	bsr    ebx,edx
c001e7bf:	83 f3 1f             	xor    ebx,0x1f
c001e7c2:	75 24                	jne    c001e7e8 <__udivdi3+0x8c>
c001e7c4:	39 f2                	cmp    edx,esi
c001e7c6:	72 08                	jb     c001e7d0 <__udivdi3+0x74>
c001e7c8:	39 ef                	cmp    edi,ebp
c001e7ca:	0f 87 84 00 00 00    	ja     c001e854 <__udivdi3+0xf8>
c001e7d0:	b8 01 00 00 00       	mov    eax,0x1
c001e7d5:	eb ac                	jmp    c001e783 <__udivdi3+0x27>
c001e7d7:	90                   	nop
c001e7d8:	31 db                	xor    ebx,ebx
c001e7da:	31 c0                	xor    eax,eax
c001e7dc:	89 da                	mov    edx,ebx
c001e7de:	83 c4 1c             	add    esp,0x1c
c001e7e1:	5b                   	pop    ebx
c001e7e2:	5e                   	pop    esi
c001e7e3:	5f                   	pop    edi
c001e7e4:	5d                   	pop    ebp
c001e7e5:	c3                   	ret    
c001e7e6:	66 90                	xchg   ax,ax
c001e7e8:	b8 20 00 00 00       	mov    eax,0x20
c001e7ed:	29 d8                	sub    eax,ebx
c001e7ef:	88 d9                	mov    cl,bl
c001e7f1:	d3 e2                	shl    edx,cl
c001e7f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7f7:	89 fa                	mov    edx,edi
c001e7f9:	88 c1                	mov    cl,al
c001e7fb:	d3 ea                	shr    edx,cl
c001e7fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e801:	09 d1                	or     ecx,edx
c001e803:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e807:	88 d9                	mov    cl,bl
c001e809:	d3 e7                	shl    edi,cl
c001e80b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e80f:	89 f7                	mov    edi,esi
c001e811:	88 c1                	mov    cl,al
c001e813:	d3 ef                	shr    edi,cl
c001e815:	88 d9                	mov    cl,bl
c001e817:	d3 e6                	shl    esi,cl
c001e819:	89 ea                	mov    edx,ebp
c001e81b:	88 c1                	mov    cl,al
c001e81d:	d3 ea                	shr    edx,cl
c001e81f:	09 d6                	or     esi,edx
c001e821:	89 f0                	mov    eax,esi
c001e823:	89 fa                	mov    edx,edi
c001e825:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e829:	89 d7                	mov    edi,edx
c001e82b:	89 c6                	mov    esi,eax
c001e82d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e831:	39 d7                	cmp    edi,edx
c001e833:	72 13                	jb     c001e848 <__udivdi3+0xec>
c001e835:	74 09                	je     c001e840 <__udivdi3+0xe4>
c001e837:	89 f0                	mov    eax,esi
c001e839:	31 db                	xor    ebx,ebx
c001e83b:	e9 43 ff ff ff       	jmp    c001e783 <__udivdi3+0x27>
c001e840:	88 d9                	mov    cl,bl
c001e842:	d3 e5                	shl    ebp,cl
c001e844:	39 c5                	cmp    ebp,eax
c001e846:	73 ef                	jae    c001e837 <__udivdi3+0xdb>
c001e848:	8d 46 ff             	lea    eax,[esi-0x1]
c001e84b:	31 db                	xor    ebx,ebx
c001e84d:	e9 31 ff ff ff       	jmp    c001e783 <__udivdi3+0x27>
c001e852:	66 90                	xchg   ax,ax
c001e854:	31 c0                	xor    eax,eax
c001e856:	e9 28 ff ff ff       	jmp    c001e783 <__udivdi3+0x27>
c001e85b:	90                   	nop

c001e85c <__umoddi3>:
c001e85c:	55                   	push   ebp
c001e85d:	57                   	push   edi
c001e85e:	56                   	push   esi
c001e85f:	53                   	push   ebx
c001e860:	83 ec 1c             	sub    esp,0x1c
c001e863:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e867:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e86b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e86f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e873:	89 da                	mov    edx,ebx
c001e875:	85 c0                	test   eax,eax
c001e877:	75 37                	jne    c001e8b0 <__umoddi3+0x54>
c001e879:	39 df                	cmp    edi,ebx
c001e87b:	76 13                	jbe    c001e890 <__umoddi3+0x34>
c001e87d:	89 f0                	mov    eax,esi
c001e87f:	f7 f7                	div    edi
c001e881:	89 d0                	mov    eax,edx
c001e883:	31 d2                	xor    edx,edx
c001e885:	83 c4 1c             	add    esp,0x1c
c001e888:	5b                   	pop    ebx
c001e889:	5e                   	pop    esi
c001e88a:	5f                   	pop    edi
c001e88b:	5d                   	pop    ebp
c001e88c:	c3                   	ret    
c001e88d:	8d 76 00             	lea    esi,[esi+0x0]
c001e890:	89 fd                	mov    ebp,edi
c001e892:	85 ff                	test   edi,edi
c001e894:	75 0b                	jne    c001e8a1 <__umoddi3+0x45>
c001e896:	b8 01 00 00 00       	mov    eax,0x1
c001e89b:	31 d2                	xor    edx,edx
c001e89d:	f7 f7                	div    edi
c001e89f:	89 c5                	mov    ebp,eax
c001e8a1:	89 d8                	mov    eax,ebx
c001e8a3:	31 d2                	xor    edx,edx
c001e8a5:	f7 f5                	div    ebp
c001e8a7:	89 f0                	mov    eax,esi
c001e8a9:	f7 f5                	div    ebp
c001e8ab:	89 d0                	mov    eax,edx
c001e8ad:	eb d4                	jmp    c001e883 <__umoddi3+0x27>
c001e8af:	90                   	nop
c001e8b0:	89 f1                	mov    ecx,esi
c001e8b2:	39 d8                	cmp    eax,ebx
c001e8b4:	76 0a                	jbe    c001e8c0 <__umoddi3+0x64>
c001e8b6:	89 f0                	mov    eax,esi
c001e8b8:	83 c4 1c             	add    esp,0x1c
c001e8bb:	5b                   	pop    ebx
c001e8bc:	5e                   	pop    esi
c001e8bd:	5f                   	pop    edi
c001e8be:	5d                   	pop    ebp
c001e8bf:	c3                   	ret    
c001e8c0:	0f bd e8             	bsr    ebp,eax
c001e8c3:	83 f5 1f             	xor    ebp,0x1f
c001e8c6:	75 1c                	jne    c001e8e4 <__umoddi3+0x88>
c001e8c8:	39 d8                	cmp    eax,ebx
c001e8ca:	72 04                	jb     c001e8d0 <__umoddi3+0x74>
c001e8cc:	39 f7                	cmp    edi,esi
c001e8ce:	77 08                	ja     c001e8d8 <__umoddi3+0x7c>
c001e8d0:	89 da                	mov    edx,ebx
c001e8d2:	29 fe                	sub    esi,edi
c001e8d4:	19 c2                	sbb    edx,eax
c001e8d6:	89 f1                	mov    ecx,esi
c001e8d8:	89 c8                	mov    eax,ecx
c001e8da:	83 c4 1c             	add    esp,0x1c
c001e8dd:	5b                   	pop    ebx
c001e8de:	5e                   	pop    esi
c001e8df:	5f                   	pop    edi
c001e8e0:	5d                   	pop    ebp
c001e8e1:	c3                   	ret    
c001e8e2:	66 90                	xchg   ax,ax
c001e8e4:	ba 20 00 00 00       	mov    edx,0x20
c001e8e9:	29 ea                	sub    edx,ebp
c001e8eb:	89 e9                	mov    ecx,ebp
c001e8ed:	d3 e0                	shl    eax,cl
c001e8ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8f3:	89 f8                	mov    eax,edi
c001e8f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e8f9:	88 d1                	mov    cl,dl
c001e8fb:	d3 e8                	shr    eax,cl
c001e8fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e901:	09 c1                	or     ecx,eax
c001e903:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e907:	89 e9                	mov    ecx,ebp
c001e909:	d3 e7                	shl    edi,cl
c001e90b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e90f:	89 d8                	mov    eax,ebx
c001e911:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e915:	88 d1                	mov    cl,dl
c001e917:	d3 e8                	shr    eax,cl
c001e919:	89 c7                	mov    edi,eax
c001e91b:	89 e9                	mov    ecx,ebp
c001e91d:	d3 e3                	shl    ebx,cl
c001e91f:	89 f0                	mov    eax,esi
c001e921:	88 d1                	mov    cl,dl
c001e923:	d3 e8                	shr    eax,cl
c001e925:	09 d8                	or     eax,ebx
c001e927:	89 e9                	mov    ecx,ebp
c001e929:	d3 e6                	shl    esi,cl
c001e92b:	89 f3                	mov    ebx,esi
c001e92d:	89 fa                	mov    edx,edi
c001e92f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e933:	89 d1                	mov    ecx,edx
c001e935:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e939:	89 c6                	mov    esi,eax
c001e93b:	89 d7                	mov    edi,edx
c001e93d:	39 d1                	cmp    ecx,edx
c001e93f:	72 27                	jb     c001e968 <__umoddi3+0x10c>
c001e941:	74 21                	je     c001e964 <__umoddi3+0x108>
c001e943:	89 ca                	mov    edx,ecx
c001e945:	29 f3                	sub    ebx,esi
c001e947:	19 fa                	sbb    edx,edi
c001e949:	89 d0                	mov    eax,edx
c001e94b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e94f:	d3 e0                	shl    eax,cl
c001e951:	89 e9                	mov    ecx,ebp
c001e953:	d3 eb                	shr    ebx,cl
c001e955:	09 d8                	or     eax,ebx
c001e957:	d3 ea                	shr    edx,cl
c001e959:	83 c4 1c             	add    esp,0x1c
c001e95c:	5b                   	pop    ebx
c001e95d:	5e                   	pop    esi
c001e95e:	5f                   	pop    edi
c001e95f:	5d                   	pop    ebp
c001e960:	c3                   	ret    
c001e961:	8d 76 00             	lea    esi,[esi+0x0]
c001e964:	39 c3                	cmp    ebx,eax
c001e966:	73 db                	jae    c001e943 <__umoddi3+0xe7>
c001e968:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e96c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e970:	89 d7                	mov    edi,edx
c001e972:	89 c6                	mov    esi,eax
c001e974:	eb cd                	jmp    c001e943 <__umoddi3+0xe7>
c001e976:	66 90                	xchg   ax,ax
c001e978:	66 90                	xchg   ax,ax
c001e97a:	66 90                	xchg   ax,ax
c001e97c:	66 90                	xchg   ax,ax
c001e97e:	66 90                	xchg   ax,ax

c001e980 <fabs>:
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e987:	89 04 24             	mov    DWORD PTR [esp],eax
c001e98a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e98e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e993:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e997:	dd 04 24             	fld    QWORD PTR [esp]
c001e99a:	83 c4 0c             	add    esp,0xc
c001e99d:	c3                   	ret    
c001e99e:	66 90                	xchg   ax,ax

c001e9a0 <lrint>:
c001e9a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e9a4:	83 ec 04             	sub    esp,0x4
c001e9a7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9aa:	58                   	pop    eax
c001e9ab:	c3                   	ret    

c001e9ac <lrintf>:
c001e9ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e9b0:	83 ec 04             	sub    esp,0x4
c001e9b3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e9b6:	58                   	pop    eax
c001e9b7:	c3                   	ret    

Disassembly of section .init:

c001e9b8 <_init>:
c001e9b8:	55                   	push   ebp
c001e9b9:	89 e5                	mov    ebp,esp
c001e9bb:	e8 58 17 fe ff       	call   c0000118 <frame_dummy>
c001e9c0:	e8 a3 fa ff ff       	call   c001e468 <__do_global_ctors_aux>
c001e9c5:	5d                   	pop    ebp
c001e9c6:	c3                   	ret    

Disassembly of section .fini:

c001e9c7 <_fini>:
c001e9c7:	55                   	push   ebp
c001e9c8:	89 e5                	mov    ebp,esp
c001e9ca:	e8 d9 16 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e9cf:	5d                   	pop    ebp
c001e9d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e9d2 <Computer::~Computer()>:
c001e9d2:	55                   	push   ebp
c001e9d3:	89 e5                	mov    ebp,esp
c001e9d5:	83 ec 08             	sub    esp,0x8
c001e9d8:	ba 98 03 02 c0       	mov    edx,0xc0020398
c001e9dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9e0:	89 10                	mov    DWORD PTR [eax],edx
c001e9e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e9e5:	83 ec 0c             	sub    esp,0xc
c001e9e8:	50                   	push   eax
c001e9e9:	e8 a2 18 ff ff       	call   c0010290 <Device::~Device()>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	90                   	nop
c001e9f2:	c9                   	leave  
c001e9f3:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e9f4 <Computer::~Computer()>:
c001e9f4:	55                   	push   ebp
c001e9f5:	89 e5                	mov    ebp,esp
c001e9f7:	83 ec 08             	sub    esp,0x8
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea00:	e8 cd ff ff ff       	call   c001e9d2 <Computer::~Computer()>
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	83 ec 08             	sub    esp,0x8
c001ea0b:	68 ec 01 00 00       	push   0x1ec
c001ea10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea13:	e8 eb 04 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001ea18:	83 c4 10             	add    esp,0x10
c001ea1b:	c9                   	leave  
c001ea1c:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ea1d <idleCommon()>:
c001ea1d:	83 ec 0c             	sub    esp,0xc
c001ea20:	e8 8f 91 ff ff       	call   c0017bb4 <lockScheduler()>
c001ea25:	e8 be 94 ff ff       	call   c0017ee8 <schedule()>
c001ea2a:	83 c4 0c             	add    esp,0xc
c001ea2d:	e9 84 91 ff ff       	jmp    c0017bb6 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea32 <CPU::readCR3()>:
c001ea32:	83 ec 10             	sub    esp,0x10
c001ea35:	0f 20 d8             	mov    eax,cr3
c001ea38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea40:	83 c4 10             	add    esp,0x10
c001ea43:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea44 <CPU::writeCR3(unsigned long)>:
c001ea44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea48:	0f 22 d8             	mov    cr3,eax
c001ea4b:	90                   	nop
c001ea4c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ea4e <LinkedList<UnixFile>::~LinkedList()>:
c001ea4e:	90                   	nop
c001ea4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ea50 <LinkedList<UnixFile>::LinkedList()>:
c001ea50:	83 ec 0c             	sub    esp,0xc
c001ea53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea93:	83 ec 0c             	sub    esp,0xc
c001ea96:	68 31 06 02 c0       	push   0xc0020631
c001ea9b:	e8 43 05 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	90                   	nop
c001eaa4:	83 c4 0c             	add    esp,0xc
c001eaa7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001eaa8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eab0:	75 10                	jne    c001eac2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001eab2:	83 ec 0c             	sub    esp,0xc
c001eab5:	68 4c 06 02 c0       	push   0xc002064c
c001eaba:	e8 b9 61 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001eabf:	83 c4 10             	add    esp,0x10
c001eac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac6:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac8:	85 c0                	test   eax,eax
c001eaca:	74 34                	je     c001eb00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001eacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead3:	85 c0                	test   eax,eax
c001ead5:	74 29                	je     c001eb00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ead7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eae2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eafe:	eb 65                	jmp    c001eb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb04:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb06:	85 c0                	test   eax,eax
c001eb08:	75 4b                	jne    c001eb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb11:	85 c0                	test   eax,eax
c001eb13:	75 40                	jne    c001eb55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001eb15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb1d:	89 10                	mov    DWORD PTR [eax],edx
c001eb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb3f:	85 c0                	test   eax,eax
c001eb41:	74 22                	je     c001eb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb43:	83 ec 0c             	sub    esp,0xc
c001eb46:	68 6e 06 02 c0       	push   0xc002066e
c001eb4b:	e8 28 61 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001eb50:	83 c4 10             	add    esp,0x10
c001eb53:	eb 10                	jmp    c001eb65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001eb55:	83 ec 0c             	sub    esp,0xc
c001eb58:	68 78 06 02 c0       	push   0xc0020678
c001eb5d:	e8 16 61 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001eb62:	83 c4 10             	add    esp,0x10
c001eb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb6c:	8d 50 01             	lea    edx,[eax+0x1]
c001eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb73:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb76:	90                   	nop
c001eb77:	83 c4 0c             	add    esp,0xc
c001eb7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001eb7c <LinkedList<UnixFile>::getFirstElement()>:
c001eb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001eb84 <LinkedList<UnixFile>::removeFirst()>:
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb8d:	85 c0                	test   eax,eax
c001eb8f:	75 12                	jne    c001eba3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001eb91:	83 ec 0c             	sub    esp,0xc
c001eb94:	68 84 06 02 c0       	push   0xc0020684
c001eb99:	e8 da 60 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001eb9e:	83 c4 10             	add    esp,0x10
c001eba1:	eb 7e                	jmp    c001ec21 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001eba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebad:	85 c0                	test   eax,eax
c001ebaf:	74 10                	je     c001ebc1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	68 cf 06 02 c0       	push   0xc00206cf
c001ebb9:	e8 ba 60 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ebbe:	83 c4 10             	add    esp,0x10
c001ebc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebca:	85 c0                	test   eax,eax
c001ebcc:	75 33                	jne    c001ec01 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ebce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebea:	83 f8 01             	cmp    eax,0x1
c001ebed:	74 21                	je     c001ec10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ebef:	83 ec 0c             	sub    esp,0xc
c001ebf2:	68 a8 06 02 c0       	push   0xc00206a8
c001ebf7:	e8 7c 60 ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ebfc:	83 c4 10             	add    esp,0x10
c001ebff:	eb 0f                	jmp    c001ec10 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec07:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ec0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0e:	89 10                	mov    DWORD PTR [eax],edx
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec17:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec21:	83 c4 0c             	add    esp,0xc
c001ec24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ec26 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ec26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec2d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ec2e <DriverlessDevice::~DriverlessDevice()>:
c001ec2e:	ba e4 0d 02 c0       	mov    edx,0xc0020de4
c001ec33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec37:	89 10                	mov    DWORD PTR [eax],edx
c001ec39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3d:	50                   	push   eax
c001ec3e:	e8 4d 16 ff ff       	call   c0010290 <Device::~Device()>
c001ec43:	83 c4 04             	add    esp,0x4
c001ec46:	90                   	nop
c001ec47:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ec48 <DriverlessDevice::~DriverlessDevice()>:
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	83 ec 0c             	sub    esp,0xc
c001ec4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec52:	e8 d7 ff ff ff       	call   c001ec2e <DriverlessDevice::~DriverlessDevice()>
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	83 ec 08             	sub    esp,0x8
c001ec5d:	68 58 01 00 00       	push   0x158
c001ec62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec66:	e8 98 02 ff ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	83 c4 0c             	add    esp,0xc
c001ec71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ec72 <LinkedList<Device>::addElement(Device*)>:
c001ec72:	83 ec 0c             	sub    esp,0xc
c001ec75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec7a:	75 10                	jne    c001ec8c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	68 4c 06 02 c0       	push   0xc002064c
c001ec84:	e8 ef 5f ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec92:	85 c0                	test   eax,eax
c001ec94:	74 3a                	je     c001ecd0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ec96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec9d:	85 c0                	test   eax,eax
c001ec9f:	74 2f                	je     c001ecd0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eca8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ecb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecc4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ecce:	eb 68                	jmp    c001ed38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ecd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd6:	85 c0                	test   eax,eax
c001ecd8:	75 4e                	jne    c001ed28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ece1:	85 c0                	test   eax,eax
c001ece3:	75 43                	jne    c001ed28 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ece5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eced:	89 10                	mov    DWORD PTR [eax],edx
c001ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed01:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed12:	85 c0                	test   eax,eax
c001ed14:	74 22                	je     c001ed38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed16:	83 ec 0c             	sub    esp,0xc
c001ed19:	68 6e 06 02 c0       	push   0xc002066e
c001ed1e:	e8 55 5f ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	eb 10                	jmp    c001ed38 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ed28:	83 ec 0c             	sub    esp,0xc
c001ed2b:	68 78 06 02 c0       	push   0xc0020678
c001ed30:	e8 43 5f ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ed35:	83 c4 10             	add    esp,0x10
c001ed38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed3f:	8d 50 01             	lea    edx,[eax+0x1]
c001ed42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed46:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed49:	90                   	nop
c001ed4a:	83 c4 0c             	add    esp,0xc
c001ed4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ed4e <LinkedList<Device>::LinkedList()>:
c001ed4e:	83 ec 0c             	sub    esp,0xc
c001ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed55:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed91:	83 ec 0c             	sub    esp,0xc
c001ed94:	68 31 06 02 c0       	push   0xc0020631
c001ed99:	e8 45 02 ff ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001ed9e:	83 c4 10             	add    esp,0x10
c001eda1:	90                   	nop
c001eda2:	83 c4 0c             	add    esp,0xc
c001eda5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001eda6 <CPU::readCR0()>:
c001eda6:	83 ec 10             	sub    esp,0x10
c001eda9:	0f 20 c0             	mov    eax,cr0
c001edac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edb4:	83 c4 10             	add    esp,0x10
c001edb7:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001edb8 <CPU::writeCR0(unsigned long)>:
c001edb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edbc:	0f 22 c0             	mov    cr0,eax
c001edbf:	90                   	nop
c001edc0:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001edc1 <CPU::readDR0()>:
c001edc1:	83 ec 10             	sub    esp,0x10
c001edc4:	0f 21 c0             	mov    eax,db0
c001edc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edcf:	83 c4 10             	add    esp,0x10
c001edd2:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001edd3 <CPU::readDR1()>:
c001edd3:	83 ec 10             	sub    esp,0x10
c001edd6:	0f 21 c8             	mov    eax,db1
c001edd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eddd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ede1:	83 c4 10             	add    esp,0x10
c001ede4:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001ede5 <CPU::readDR2()>:
c001ede5:	83 ec 10             	sub    esp,0x10
c001ede8:	0f 21 d0             	mov    eax,db2
c001edeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edf3:	83 c4 10             	add    esp,0x10
c001edf6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001edf7 <CPU::readDR3()>:
c001edf7:	83 ec 10             	sub    esp,0x10
c001edfa:	0f 21 d8             	mov    eax,db3
c001edfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee05:	83 c4 10             	add    esp,0x10
c001ee08:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001ee09 <CPU::readDR6()>:
c001ee09:	83 ec 10             	sub    esp,0x10
c001ee0c:	0f 21 f0             	mov    eax,db6
c001ee0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee17:	83 c4 10             	add    esp,0x10
c001ee1a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001ee1b <CPU::readDR7()>:
c001ee1b:	83 ec 10             	sub    esp,0x10
c001ee1e:	0f 21 f8             	mov    eax,db7
c001ee21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee29:	83 c4 10             	add    esp,0x10
c001ee2c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ee2e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ee2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee32:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ee36 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ee36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee3a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee3c:	85 c0                	test   eax,eax
c001ee3e:	75 0e                	jne    c001ee4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee47:	85 c0                	test   eax,eax
c001ee49:	75 03                	jne    c001ee4e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ee4b:	b0 01                	mov    al,0x1
c001ee4d:	c3                   	ret    
c001ee4e:	b0 00                	mov    al,0x0
c001ee50:	90                   	nop
c001ee51:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ee52 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ee52:	83 ec 0c             	sub    esp,0xc
c001ee55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee59:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee5b:	85 c0                	test   eax,eax
c001ee5d:	75 15                	jne    c001ee74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ee5f:	83 ec 0c             	sub    esp,0xc
c001ee62:	68 84 06 02 c0       	push   0xc0020684
c001ee67:	e8 0c 5e ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ee6c:	83 c4 10             	add    esp,0x10
c001ee6f:	e9 88 00 00 00       	jmp    c001eefc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ee74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee7e:	85 c0                	test   eax,eax
c001ee80:	0f 95 c0             	setne  al
c001ee83:	84 c0                	test   al,al
c001ee85:	74 10                	je     c001ee97 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ee87:	83 ec 0c             	sub    esp,0xc
c001ee8a:	68 cf 06 02 c0       	push   0xc00206cf
c001ee8f:	e8 e4 5d ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ee94:	83 c4 10             	add    esp,0x10
c001ee97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eea0:	85 c0                	test   eax,eax
c001eea2:	0f 94 c0             	sete   al
c001eea5:	84 c0                	test   al,al
c001eea7:	74 33                	je     c001eedc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eead:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eec5:	83 f8 01             	cmp    eax,0x1
c001eec8:	74 21                	je     c001eeeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eeca:	83 ec 0c             	sub    esp,0xc
c001eecd:	68 a8 06 02 c0       	push   0xc00206a8
c001eed2:	e8 a1 5d ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001eed7:	83 c4 10             	add    esp,0x10
c001eeda:	eb 0f                	jmp    c001eeeb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eee2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee9:	89 10                	mov    DWORD PTR [eax],edx
c001eeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eef2:	8d 50 ff             	lea    edx,[eax-0x1]
c001eef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eefc:	83 c4 0c             	add    esp,0xc
c001eeff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ef00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef08:	75 10                	jne    c001ef1a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ef0a:	83 ec 0c             	sub    esp,0xc
c001ef0d:	68 4c 06 02 c0       	push   0xc002064c
c001ef12:	e8 61 5d ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001ef17:	83 c4 10             	add    esp,0x10
c001ef1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef20:	85 c0                	test   eax,eax
c001ef22:	74 34                	je     c001ef58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef2b:	85 c0                	test   eax,eax
c001ef2d:	74 29                	je     c001ef58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ef2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef3a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ef3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef4f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef56:	eb 65                	jmp    c001efbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef5e:	85 c0                	test   eax,eax
c001ef60:	75 4b                	jne    c001efad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ef62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef69:	85 c0                	test   eax,eax
c001ef6b:	75 40                	jne    c001efad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001ef6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef75:	89 10                	mov    DWORD PTR [eax],edx
c001ef77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ef90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef97:	85 c0                	test   eax,eax
c001ef99:	74 22                	je     c001efbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ef9b:	83 ec 0c             	sub    esp,0xc
c001ef9e:	68 6e 06 02 c0       	push   0xc002066e
c001efa3:	e8 d0 5c ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001efa8:	83 c4 10             	add    esp,0x10
c001efab:	eb 10                	jmp    c001efbd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001efad:	83 ec 0c             	sub    esp,0xc
c001efb0:	68 78 06 02 c0       	push   0xc0020678
c001efb5:	e8 be 5c ff ff       	call   c0014c78 <Krnl::panic(char const*)>
c001efba:	83 c4 10             	add    esp,0x10
c001efbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efc4:	8d 50 01             	lea    edx,[eax+0x1]
c001efc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001efce:	90                   	nop
c001efcf:	83 c4 0c             	add    esp,0xc
c001efd2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001efd4 <ACPI::~ACPI()>:
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	ba 70 15 02 c0       	mov    edx,0xc0021570
c001efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe0:	89 10                	mov    DWORD PTR [eax],edx
c001efe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	50                   	push   eax
c001efea:	e8 a1 12 ff ff       	call   c0010290 <Device::~Device()>
c001efef:	83 c4 10             	add    esp,0x10
c001eff2:	90                   	nop
c001eff3:	83 c4 0c             	add    esp,0xc
c001eff6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eff8 <ACPI::~ACPI()>:
c001eff8:	83 ec 0c             	sub    esp,0xc
c001effb:	83 ec 0c             	sub    esp,0xc
c001effe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f002:	e8 cd ff ff ff       	call   c001efd4 <ACPI::~ACPI()>
c001f007:	83 c4 10             	add    esp,0x10
c001f00a:	83 ec 08             	sub    esp,0x8
c001f00d:	68 68 22 00 00       	push   0x2268
c001f012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f016:	e8 e8 fe fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f01b:	83 c4 10             	add    esp,0x10
c001f01e:	83 c4 0c             	add    esp,0xc
c001f021:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f022 <CPU::~CPU()>:
c001f022:	83 ec 0c             	sub    esp,0xc
c001f025:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c001f02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02e:	89 10                	mov    DWORD PTR [eax],edx
c001f030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	50                   	push   eax
c001f038:	e8 53 12 ff ff       	call   c0010290 <Device::~Device()>
c001f03d:	83 c4 10             	add    esp,0x10
c001f040:	90                   	nop
c001f041:	83 c4 0c             	add    esp,0xc
c001f044:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f046 <CPU::~CPU()>:
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	83 ec 0c             	sub    esp,0xc
c001f04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f050:	e8 cd ff ff ff       	call   c001f022 <CPU::~CPU()>
c001f055:	83 c4 10             	add    esp,0x10
c001f058:	83 ec 08             	sub    esp,0x8
c001f05b:	68 98 11 00 00       	push   0x1198
c001f060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f064:	e8 9a fe fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f069:	83 c4 10             	add    esp,0x10
c001f06c:	83 c4 0c             	add    esp,0xc
c001f06f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f070 <CPU::readCR4()>:
c001f070:	83 ec 10             	sub    esp,0x10
c001f073:	0f 20 e0             	mov    eax,cr4
c001f076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f07e:	83 c4 10             	add    esp,0x10
c001f081:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f082 <CPU::writeDR7(unsigned long)>:
c001f082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f086:	0f 23 f8             	mov    db7,eax
c001f089:	90                   	nop
c001f08a:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f08b <CPU::writeCR4(unsigned long)>:
c001f08b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f08f:	0f 22 e0             	mov    cr4,eax
c001f092:	90                   	nop
c001f093:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f094 <CPU::readCR2()>:
c001f094:	83 ec 10             	sub    esp,0x10
c001f097:	0f 20 d0             	mov    eax,cr2
c001f09a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a2:	83 c4 10             	add    esp,0x10
c001f0a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f0a6 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f0a6:	90                   	nop
c001f0a7:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f0a8 <ThreadControlBlock::ThreadControlBlock()>:
c001f0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0c2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f0c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0cd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0d8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0e0:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f0e4:	90                   	nop
c001f0e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f0e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f0f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f102:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f117:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f122:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f129:	83 ec 0c             	sub    esp,0xc
c001f12c:	68 31 06 02 c0       	push   0xc0020631
c001f131:	e8 ad fe fe ff       	call   c000efe3 <Dbg::kprintf(char const*, ...)>
c001f136:	83 c4 10             	add    esp,0x10
c001f139:	90                   	nop
c001f13a:	83 c4 0c             	add    esp,0xc
c001f13d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f13e <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f13e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f142:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f145:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f146 <PCI::~PCI()>:
c001f146:	83 ec 0c             	sub    esp,0xc
c001f149:	ba d8 24 02 c0       	mov    edx,0xc00224d8
c001f14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f152:	89 10                	mov    DWORD PTR [eax],edx
c001f154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f158:	83 ec 0c             	sub    esp,0xc
c001f15b:	50                   	push   eax
c001f15c:	e8 3f 0b ff ff       	call   c000fca0 <Bus::~Bus()>
c001f161:	83 c4 10             	add    esp,0x10
c001f164:	90                   	nop
c001f165:	83 c4 0c             	add    esp,0xc
c001f168:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f16a <PCI::~PCI()>:
c001f16a:	83 ec 0c             	sub    esp,0xc
c001f16d:	83 ec 0c             	sub    esp,0xc
c001f170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f174:	e8 cd ff ff ff       	call   c001f146 <PCI::~PCI()>
c001f179:	83 c4 10             	add    esp,0x10
c001f17c:	83 ec 08             	sub    esp,0x8
c001f17f:	68 58 01 00 00       	push   0x158
c001f184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f188:	e8 76 fd fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f18d:	83 c4 10             	add    esp,0x10
c001f190:	83 c4 0c             	add    esp,0xc
c001f193:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f194 <IDE::~IDE()>:
c001f194:	83 ec 0c             	sub    esp,0xc
c001f197:	ba 3c 27 02 c0       	mov    edx,0xc002273c
c001f19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a0:	89 10                	mov    DWORD PTR [eax],edx
c001f1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a6:	83 ec 0c             	sub    esp,0xc
c001f1a9:	50                   	push   eax
c001f1aa:	e8 f7 15 ff ff       	call   c00107a6 <HardDiskController::~HardDiskController()>
c001f1af:	83 c4 10             	add    esp,0x10
c001f1b2:	90                   	nop
c001f1b3:	83 c4 0c             	add    esp,0xc
c001f1b6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1b8 <IDE::~IDE()>:
c001f1b8:	83 ec 0c             	sub    esp,0xc
c001f1bb:	83 ec 0c             	sub    esp,0xc
c001f1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c2:	e8 cd ff ff ff       	call   c001f194 <IDE::~IDE()>
c001f1c7:	83 c4 10             	add    esp,0x10
c001f1ca:	83 ec 08             	sub    esp,0x8
c001f1cd:	68 70 02 00 00       	push   0x270
c001f1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d6:	e8 28 fd fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f1db:	83 c4 10             	add    esp,0x10
c001f1de:	83 c4 0c             	add    esp,0xc
c001f1e1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f1e2 <ATA::~ATA()>:
c001f1e2:	83 ec 0c             	sub    esp,0xc
c001f1e5:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c001f1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ee:	89 10                	mov    DWORD PTR [eax],edx
c001f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f4:	83 ec 0c             	sub    esp,0xc
c001f1f7:	50                   	push   eax
c001f1f8:	e8 87 16 ff ff       	call   c0010884 <PhysicalDisk::~PhysicalDisk()>
c001f1fd:	83 c4 10             	add    esp,0x10
c001f200:	90                   	nop
c001f201:	83 c4 0c             	add    esp,0xc
c001f204:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f206 <ATA::~ATA()>:
c001f206:	83 ec 0c             	sub    esp,0xc
c001f209:	83 ec 0c             	sub    esp,0xc
c001f20c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f210:	e8 cd ff ff ff       	call   c001f1e2 <ATA::~ATA()>
c001f215:	83 c4 10             	add    esp,0x10
c001f218:	83 ec 08             	sub    esp,0x8
c001f21b:	68 7c 01 00 00       	push   0x17c
c001f220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f224:	e8 da fc fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f229:	83 c4 10             	add    esp,0x10
c001f22c:	83 c4 0c             	add    esp,0xc
c001f22f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f230 <ATAPI::~ATAPI()>:
c001f230:	83 ec 0c             	sub    esp,0xc
c001f233:	ba f8 27 02 c0       	mov    edx,0xc00227f8
c001f238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23c:	89 10                	mov    DWORD PTR [eax],edx
c001f23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f242:	83 ec 0c             	sub    esp,0xc
c001f245:	50                   	push   eax
c001f246:	e8 39 16 ff ff       	call   c0010884 <PhysicalDisk::~PhysicalDisk()>
c001f24b:	83 c4 10             	add    esp,0x10
c001f24e:	90                   	nop
c001f24f:	83 c4 0c             	add    esp,0xc
c001f252:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f254 <ATAPI::~ATAPI()>:
c001f254:	83 ec 0c             	sub    esp,0xc
c001f257:	83 ec 0c             	sub    esp,0xc
c001f25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f25e:	e8 cd ff ff ff       	call   c001f230 <ATAPI::~ATAPI()>
c001f263:	83 c4 10             	add    esp,0x10
c001f266:	83 ec 08             	sub    esp,0x8
c001f269:	68 80 01 00 00       	push   0x180
c001f26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f272:	e8 8c fc fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f277:	83 c4 10             	add    esp,0x10
c001f27a:	83 c4 0c             	add    esp,0xc
c001f27d:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f27e <AVX::~AVX()>:
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	ba 34 28 02 c0       	mov    edx,0xc0022834
c001f286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28a:	89 10                	mov    DWORD PTR [eax],edx
c001f28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	50                   	push   eax
c001f294:	e8 6f 16 ff ff       	call   c0010908 <FPU::~FPU()>
c001f299:	83 c4 10             	add    esp,0x10
c001f29c:	90                   	nop
c001f29d:	83 c4 0c             	add    esp,0xc
c001f2a0:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2a2 <AVX::~AVX()>:
c001f2a2:	83 ec 0c             	sub    esp,0xc
c001f2a5:	83 ec 0c             	sub    esp,0xc
c001f2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ac:	e8 cd ff ff ff       	call   c001f27e <AVX::~AVX()>
c001f2b1:	83 c4 10             	add    esp,0x10
c001f2b4:	83 ec 08             	sub    esp,0x8
c001f2b7:	68 58 01 00 00       	push   0x158
c001f2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c0:	e8 3e fc fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f2c5:	83 c4 10             	add    esp,0x10
c001f2c8:	83 c4 0c             	add    esp,0xc
c001f2cb:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f2cc <MMX::~MMX()>:
c001f2cc:	83 ec 0c             	sub    esp,0xc
c001f2cf:	ba 74 28 02 c0       	mov    edx,0xc0022874
c001f2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d8:	89 10                	mov    DWORD PTR [eax],edx
c001f2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2de:	83 ec 0c             	sub    esp,0xc
c001f2e1:	50                   	push   eax
c001f2e2:	e8 21 16 ff ff       	call   c0010908 <FPU::~FPU()>
c001f2e7:	83 c4 10             	add    esp,0x10
c001f2ea:	90                   	nop
c001f2eb:	83 c4 0c             	add    esp,0xc
c001f2ee:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f2f0 <MMX::~MMX()>:
c001f2f0:	83 ec 0c             	sub    esp,0xc
c001f2f3:	83 ec 0c             	sub    esp,0xc
c001f2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2fa:	e8 cd ff ff ff       	call   c001f2cc <MMX::~MMX()>
c001f2ff:	83 c4 10             	add    esp,0x10
c001f302:	83 ec 08             	sub    esp,0x8
c001f305:	68 58 01 00 00       	push   0x158
c001f30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f30e:	e8 f0 fb fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f313:	83 c4 10             	add    esp,0x10
c001f316:	83 c4 0c             	add    esp,0xc
c001f319:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f31a <SSE::~SSE()>:
c001f31a:	83 ec 0c             	sub    esp,0xc
c001f31d:	ba b4 28 02 c0       	mov    edx,0xc00228b4
c001f322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f326:	89 10                	mov    DWORD PTR [eax],edx
c001f328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32c:	83 ec 0c             	sub    esp,0xc
c001f32f:	50                   	push   eax
c001f330:	e8 d3 15 ff ff       	call   c0010908 <FPU::~FPU()>
c001f335:	83 c4 10             	add    esp,0x10
c001f338:	90                   	nop
c001f339:	83 c4 0c             	add    esp,0xc
c001f33c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f33e <SSE::~SSE()>:
c001f33e:	83 ec 0c             	sub    esp,0xc
c001f341:	83 ec 0c             	sub    esp,0xc
c001f344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f348:	e8 cd ff ff ff       	call   c001f31a <SSE::~SSE()>
c001f34d:	83 c4 10             	add    esp,0x10
c001f350:	83 ec 08             	sub    esp,0x8
c001f353:	68 58 01 00 00       	push   0x158
c001f358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f35c:	e8 a2 fb fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f361:	83 c4 10             	add    esp,0x10
c001f364:	83 c4 0c             	add    esp,0xc
c001f367:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f368 <x87::~x87()>:
c001f368:	83 ec 0c             	sub    esp,0xc
c001f36b:	ba f4 28 02 c0       	mov    edx,0xc00228f4
c001f370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f374:	89 10                	mov    DWORD PTR [eax],edx
c001f376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f37a:	83 ec 0c             	sub    esp,0xc
c001f37d:	50                   	push   eax
c001f37e:	e8 85 15 ff ff       	call   c0010908 <FPU::~FPU()>
c001f383:	83 c4 10             	add    esp,0x10
c001f386:	90                   	nop
c001f387:	83 c4 0c             	add    esp,0xc
c001f38a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f38c <x87::~x87()>:
c001f38c:	83 ec 0c             	sub    esp,0xc
c001f38f:	83 ec 0c             	sub    esp,0xc
c001f392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f396:	e8 cd ff ff ff       	call   c001f368 <x87::~x87()>
c001f39b:	83 c4 10             	add    esp,0x10
c001f39e:	83 ec 08             	sub    esp,0x8
c001f3a1:	68 58 01 00 00       	push   0x158
c001f3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3aa:	e8 54 fb fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f3af:	83 c4 10             	add    esp,0x10
c001f3b2:	83 c4 0c             	add    esp,0xc
c001f3b5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3b6 <IOAPIC::~IOAPIC()>:
c001f3b6:	83 ec 0c             	sub    esp,0xc
c001f3b9:	ba 4c 2a 02 c0       	mov    edx,0xc0022a4c
c001f3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c2:	89 10                	mov    DWORD PTR [eax],edx
c001f3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c8:	83 ec 0c             	sub    esp,0xc
c001f3cb:	50                   	push   eax
c001f3cc:	e8 bf 0e ff ff       	call   c0010290 <Device::~Device()>
c001f3d1:	83 c4 10             	add    esp,0x10
c001f3d4:	90                   	nop
c001f3d5:	83 c4 0c             	add    esp,0xc
c001f3d8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f3da <IOAPIC::~IOAPIC()>:
c001f3da:	83 ec 0c             	sub    esp,0xc
c001f3dd:	83 ec 0c             	sub    esp,0xc
c001f3e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3e4:	e8 cd ff ff ff       	call   c001f3b6 <IOAPIC::~IOAPIC()>
c001f3e9:	83 c4 10             	add    esp,0x10
c001f3ec:	83 ec 08             	sub    esp,0x8
c001f3ef:	68 68 01 00 00       	push   0x168
c001f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f8:	e8 06 fb fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f3fd:	83 c4 10             	add    esp,0x10
c001f400:	83 c4 0c             	add    esp,0xc
c001f403:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f404 <APIC::~APIC()>:
c001f404:	83 ec 0c             	sub    esp,0xc
c001f407:	ba 04 2a 02 c0       	mov    edx,0xc0022a04
c001f40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f410:	89 10                	mov    DWORD PTR [eax],edx
c001f412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f416:	83 ec 0c             	sub    esp,0xc
c001f419:	50                   	push   eax
c001f41a:	e8 a7 19 ff ff       	call   c0010dc6 <InterruptController::~InterruptController()>
c001f41f:	83 c4 10             	add    esp,0x10
c001f422:	90                   	nop
c001f423:	83 c4 0c             	add    esp,0xc
c001f426:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f428 <APIC::~APIC()>:
c001f428:	83 ec 0c             	sub    esp,0xc
c001f42b:	83 ec 0c             	sub    esp,0xc
c001f42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f432:	e8 cd ff ff ff       	call   c001f404 <APIC::~APIC()>
c001f437:	83 c4 10             	add    esp,0x10
c001f43a:	83 ec 08             	sub    esp,0x8
c001f43d:	68 58 21 00 00       	push   0x2158
c001f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f446:	e8 b8 fa fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f44b:	83 c4 10             	add    esp,0x10
c001f44e:	83 c4 0c             	add    esp,0xc
c001f451:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f452 <PIC::~PIC()>:
c001f452:	83 ec 0c             	sub    esp,0xc
c001f455:	ba 9c 2a 02 c0       	mov    edx,0xc0022a9c
c001f45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45e:	89 10                	mov    DWORD PTR [eax],edx
c001f460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f464:	83 ec 0c             	sub    esp,0xc
c001f467:	50                   	push   eax
c001f468:	e8 59 19 ff ff       	call   c0010dc6 <InterruptController::~InterruptController()>
c001f46d:	83 c4 10             	add    esp,0x10
c001f470:	90                   	nop
c001f471:	83 c4 0c             	add    esp,0xc
c001f474:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f476 <PIC::~PIC()>:
c001f476:	83 ec 0c             	sub    esp,0xc
c001f479:	83 ec 0c             	sub    esp,0xc
c001f47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f480:	e8 cd ff ff ff       	call   c001f452 <PIC::~PIC()>
c001f485:	83 c4 10             	add    esp,0x10
c001f488:	83 ec 08             	sub    esp,0x8
c001f48b:	68 58 21 00 00       	push   0x2158
c001f490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f494:	e8 6a fa fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f499:	83 c4 10             	add    esp,0x10
c001f49c:	83 c4 0c             	add    esp,0xc
c001f49f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4a0 <APICTimer::~APICTimer()>:
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	ba f0 2a 02 c0       	mov    edx,0xc0022af0
c001f4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ac:	89 10                	mov    DWORD PTR [eax],edx
c001f4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b2:	83 ec 0c             	sub    esp,0xc
c001f4b5:	50                   	push   eax
c001f4b6:	e8 77 2f ff ff       	call   c0012432 <Timer::~Timer()>
c001f4bb:	83 c4 10             	add    esp,0x10
c001f4be:	90                   	nop
c001f4bf:	83 c4 0c             	add    esp,0xc
c001f4c2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f4c4 <APICTimer::~APICTimer()>:
c001f4c4:	83 ec 0c             	sub    esp,0xc
c001f4c7:	83 ec 0c             	sub    esp,0xc
c001f4ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4ce:	e8 cd ff ff ff       	call   c001f4a0 <APICTimer::~APICTimer()>
c001f4d3:	83 c4 10             	add    esp,0x10
c001f4d6:	83 ec 08             	sub    esp,0x8
c001f4d9:	68 60 01 00 00       	push   0x160
c001f4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e2:	e8 1c fa fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f4e7:	83 c4 10             	add    esp,0x10
c001f4ea:	83 c4 0c             	add    esp,0xc
c001f4ed:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f4ee <PIT::~PIT()>:
c001f4ee:	83 ec 0c             	sub    esp,0xc
c001f4f1:	ba 40 2b 02 c0       	mov    edx,0xc0022b40
c001f4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fa:	89 10                	mov    DWORD PTR [eax],edx
c001f4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f500:	83 ec 0c             	sub    esp,0xc
c001f503:	50                   	push   eax
c001f504:	e8 29 2f ff ff       	call   c0012432 <Timer::~Timer()>
c001f509:	83 c4 10             	add    esp,0x10
c001f50c:	90                   	nop
c001f50d:	83 c4 0c             	add    esp,0xc
c001f510:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f512 <PIT::~PIT()>:
c001f512:	83 ec 0c             	sub    esp,0xc
c001f515:	83 ec 0c             	sub    esp,0xc
c001f518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f51c:	e8 cd ff ff ff       	call   c001f4ee <PIT::~PIT()>
c001f521:	83 c4 10             	add    esp,0x10
c001f524:	83 ec 08             	sub    esp,0x8
c001f527:	68 5c 01 00 00       	push   0x15c
c001f52c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f530:	e8 ce f9 fe ff       	call   c000ef03 <operator delete(void*, unsigned long)>
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	83 c4 0c             	add    esp,0xc
c001f53b:	c3                   	ret    
