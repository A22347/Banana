
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d6 c2 00 00       	call   c000c2f6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 f6 01 00       	call   c001f668 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 01 02 c0       	mov    ebx,0xc00201f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 01 02 c0    	cmp    ebx,0xc00201fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ec 3f 02 c0       	mov    eax,0xc0023fec
c0000049:	3d ec 3f 02 c0       	cmp    eax,0xc0023fec
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ec 3f 02 c0       	push   0xc0023fec
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ec 3f 02 c0       	mov    eax,0xc0023fec
c0000075:	2d ec 3f 02 c0       	sub    eax,0xc0023fec
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ec 3f 02 c0       	push   0xc0023fec
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 8c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002418c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 02 02 c0       	mov    ebx,0xc0020204
c00000bb:	81 eb 00 02 02 c0    	sub    ebx,0xc0020200
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 02 02 c0       	mov    esi,0xc0020200
c00000ca:	a1 90 41 02 c0       	mov    eax,ds:0xc0024190
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 90 41 02 c0       	mov    ds:0xc0024190,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 90 41 02 c0       	mov    eax,ds:0xc0024190
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ec 3f 02 c0       	push   0xc0023fec
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 8c 41 02 c0 01 	mov    BYTE PTR ds:0xc002418c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 94 41 02 c0       	push   0xc0024194
c000012c:	68 ec 3f 02 c0       	push   0xc0023fec
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	fa                   	cli    
c0000299:	55                   	push   ebp
c000029a:	89 e5                	mov    ebp,esp
c000029c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000029f:	66 b8 23 00          	mov    ax,0x23
c00002a3:	66 8e d8             	mov    ds,ax
c00002a6:	66 8e c0             	mov    es,ax
c00002a9:	66 8e e0             	mov    fs,ax
c00002ac:	66 8e e8             	mov    gs,ax
c00002af:	89 e0                	mov    eax,esp
c00002b1:	68 23 00 00 00       	push   0x23
c00002b6:	50                   	push   eax
c00002b7:	68 02 02 00 00       	push   0x202
c00002bc:	68 1b 00 00 00       	push   0x1b
c00002c1:	53                   	push   ebx
c00002c2:	cf                   	iret   

c00002c3 <switchToThreadASMFirstTime>:
c00002c3:	9c                   	pushf  
c00002c4:	fa                   	cli    
c00002c5:	50                   	push   eax
c00002c6:	53                   	push   ebx
c00002c7:	51                   	push   ecx
c00002c8:	52                   	push   edx
c00002c9:	56                   	push   esi
c00002ca:	57                   	push   edi
c00002cb:	55                   	push   ebp
c00002cc:	e9 11 00 00 00       	jmp    c00002e2 <commonThreadSwitch>

c00002d1 <switchToThreadASM>:
c00002d1:	9c                   	pushf  
c00002d2:	50                   	push   eax
c00002d3:	53                   	push   ebx
c00002d4:	51                   	push   ecx
c00002d5:	52                   	push   edx
c00002d6:	56                   	push   esi
c00002d7:	57                   	push   edi
c00002d8:	55                   	push   ebp
c00002d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002df:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e2 <commonThreadSwitch>:
c00002e2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002e6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00002ee:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002f4:	0f 20 d9             	mov    ecx,cr3
c00002f7:	39 c8                	cmp    eax,ecx
c00002f9:	74 03                	je     c00002fe <commonThreadSwitch.doneVAS>
c00002fb:	0f 22 d8             	mov    cr3,eax

c00002fe <commonThreadSwitch.doneVAS>:
c00002fe:	85 d2                	test   edx,edx
c0000300:	74 4e                	je     c0000350 <commonThreadSwitch.notFirstTime>
c0000302:	fa                   	cli    
c0000303:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000306:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000030b:	60                   	pusha  
c000030c:	e8 d7 eb 00 00       	call   c000eee8 <mapVASFirstTime>
c0000311:	61                   	popa   
c0000312:	89 c4                	mov    esp,eax
c0000314:	56                   	push   esi
c0000315:	52                   	push   edx
c0000316:	e8 65 82 01 00       	call   c0018580 <changeTSS>
c000031b:	5a                   	pop    edx
c000031c:	5e                   	pop    esi
c000031d:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000324:	81 fa 01 00 00 00    	cmp    edx,0x1
c000032a:	74 39                	je     c0000365 <commonThreadSwitch.cameOffAFork>
c000032c:	5d                   	pop    ebp
c000032d:	5f                   	pop    edi
c000032e:	5e                   	pop    esi
c000032f:	59                   	pop    ecx
c0000330:	59                   	pop    ecx
c0000331:	5b                   	pop    ebx
c0000332:	58                   	pop    eax
c0000333:	81 c4 04 00 00 00    	add    esp,0x4
c0000339:	6a 02                	push   0x2
c000033b:	9d                   	popf   
c000033c:	52                   	push   edx
c000033d:	e8 6b 86 01 00       	call   c00189ad <taskStartupFunction>
c0000342:	5a                   	pop    edx
c0000343:	50                   	push   eax
c0000344:	ff d2                	call   edx
c0000346:	e8 20 8c 01 00       	call   c0018f6b <taskReturned>
c000034b:	e9 fb ff ff ff       	jmp    c000034b <commonThreadSwitch.doneVAS+0x4d>

c0000350 <commonThreadSwitch.notFirstTime>:
c0000350:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000353:	56                   	push   esi
c0000354:	52                   	push   edx
c0000355:	e8 26 82 01 00       	call   c0018580 <changeTSS>
c000035a:	5a                   	pop    edx
c000035b:	5e                   	pop    esi
c000035c:	5d                   	pop    ebp
c000035d:	5f                   	pop    edi
c000035e:	5e                   	pop    esi
c000035f:	5a                   	pop    edx
c0000360:	59                   	pop    ecx
c0000361:	5b                   	pop    ebx
c0000362:	58                   	pop    eax
c0000363:	9d                   	popf   
c0000364:	c3                   	ret    

c0000365 <commonThreadSwitch.cameOffAFork>:
c0000365:	31 c0                	xor    eax,eax
c0000367:	31 d2                	xor    edx,edx
c0000369:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000036c:	e9 a2 02 00 00       	jmp    c0000613 <offAForkJumpThingy>

c0000371 <detectCPUID>:
c0000371:	9c                   	pushf  
c0000372:	9c                   	pushf  
c0000373:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c000037a:	9d                   	popf   
c000037b:	9c                   	pushf  
c000037c:	58                   	pop    eax
c000037d:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000380:	9d                   	popf   
c0000381:	25 00 00 20 00       	and    eax,0x200000
c0000386:	c3                   	ret    

c0000387 <asmQuickAcquireLock>:
c0000387:	55                   	push   ebp
c0000388:	89 e5                	mov    ebp,esp
c000038a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000038d <asmQuickAcquireLock.retry>:
c000038d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000392:	72 02                	jb     c0000396 <asmQuickAcquireLock.spin_with_pause>
c0000394:	fa                   	cli    
c0000395:	c3                   	ret    

c0000396 <asmQuickAcquireLock.spin_with_pause>:
c0000396:	f3 90                	pause  
c0000398:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000039e:	75 f6                	jne    c0000396 <asmQuickAcquireLock.spin_with_pause>
c00003a0:	e9 e8 ff ff ff       	jmp    c000038d <asmQuickAcquireLock.retry>

c00003a5 <asmQuickReleaseLock>:
c00003a5:	55                   	push   ebp
c00003a6:	89 e5                	mov    ebp,esp
c00003a8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003af:	5d                   	pop    ebp
c00003b0:	c3                   	ret    

c00003b1 <asmAcquireLock>:
c00003b1:	55                   	push   ebp
c00003b2:	89 e5                	mov    ebp,esp
c00003b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003b7 <asmAcquireLock.retry>:
c00003b7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003bc:	72 05                	jb     c00003c3 <asmAcquireLock.spin_with_pause>
c00003be:	9c                   	pushf  
c00003bf:	58                   	pop    eax
c00003c0:	fa                   	cli    
c00003c1:	5d                   	pop    ebp
c00003c2:	c3                   	ret    

c00003c3 <asmAcquireLock.spin_with_pause>:
c00003c3:	f3 90                	pause  
c00003c5:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003cb:	75 f6                	jne    c00003c3 <asmAcquireLock.spin_with_pause>
c00003cd:	e9 e5 ff ff ff       	jmp    c00003b7 <asmAcquireLock.retry>

c00003d2 <asmReleaseLock>:
c00003d2:	55                   	push   ebp
c00003d3:	89 e5                	mov    ebp,esp
c00003d5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e1:	52                   	push   edx
c00003e2:	9d                   	popf   
c00003e3:	5d                   	pop    ebp
c00003e4:	c3                   	ret    

c00003e5 <loadGDT>:
c00003e5:	0f 01 15 d0 45 02 c0 	lgdtd  ds:0xc00245d0
c00003ec:	66 b8 10 00          	mov    ax,0x10
c00003f0:	66 8e d8             	mov    ds,ax
c00003f3:	66 8e c0             	mov    es,ax
c00003f6:	66 8e e0             	mov    fs,ax
c00003f9:	66 8e e8             	mov    gs,ax
c00003fc:	66 8e d0             	mov    ss,ax
c00003ff:	e9 00 00 00 00       	jmp    c0000404 <flush2>

c0000404 <flush2>:
c0000404:	c3                   	ret    

c0000405 <isr0>:
c0000405:	fa                   	cli    
c0000406:	68 00 00 00 00       	push   0x0
c000040b:	68 00 00 00 00       	push   0x0
c0000410:	e9 a2 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000415 <isr1>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 01                	push   0x1
c000041a:	e9 98 01 00 00       	jmp    c00005b7 <int_common_stub>

c000041f <isr2>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 02                	push   0x2
c0000424:	e9 8e 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000429 <isr3>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 03                	push   0x3
c000042e:	e9 84 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000433 <isr4>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 04                	push   0x4
c0000438:	e9 7a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000043d <isr5>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 05                	push   0x5
c0000442:	e9 70 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000447 <isr6>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 06                	push   0x6
c000044c:	e9 66 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000451 <isr7>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 07                	push   0x7
c0000456:	e9 5c 01 00 00       	jmp    c00005b7 <int_common_stub>

c000045b <isr8>:
c000045b:	fa                   	cli    
c000045c:	6a 08                	push   0x8
c000045e:	e9 54 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000463 <isr9>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 09                	push   0x9
c0000468:	e9 4a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000046d <isr10>:
c000046d:	fa                   	cli    
c000046e:	6a 0a                	push   0xa
c0000470:	e9 42 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000475 <isr11>:
c0000475:	fa                   	cli    
c0000476:	6a 0b                	push   0xb
c0000478:	e9 3a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000047d <isr12>:
c000047d:	fa                   	cli    
c000047e:	6a 0c                	push   0xc
c0000480:	e9 32 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000485 <isr13>:
c0000485:	fa                   	cli    
c0000486:	6a 0d                	push   0xd
c0000488:	e9 2a 01 00 00       	jmp    c00005b7 <int_common_stub>

c000048d <isr14>:
c000048d:	fa                   	cli    
c000048e:	6a 0e                	push   0xe
c0000490:	e9 22 01 00 00       	jmp    c00005b7 <int_common_stub>

c0000495 <isr15>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 0f                	push   0xf
c000049a:	e9 18 01 00 00       	jmp    c00005b7 <int_common_stub>

c000049f <isr16>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 10                	push   0x10
c00004a4:	e9 0e 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004a9 <isr17>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 11                	push   0x11
c00004ae:	e9 04 01 00 00       	jmp    c00005b7 <int_common_stub>

c00004b3 <isr18>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 12                	push   0x12
c00004b8:	e9 fa 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004bd <isr96>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 60                	push   0x60
c00004c2:	e9 20 01 00 00       	jmp    c00005e7 <syscall_common_stub>

c00004c7 <irq0>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 20                	push   0x20
c00004cc:	e9 e6 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004d1 <irq1>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 21                	push   0x21
c00004d6:	e9 dc 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004db <irq2>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 22                	push   0x22
c00004e0:	e9 d2 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004e5 <irq3>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 23                	push   0x23
c00004ea:	e9 c8 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004ef <irq4>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 24                	push   0x24
c00004f4:	e9 be 00 00 00       	jmp    c00005b7 <int_common_stub>

c00004f9 <irq5>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 25                	push   0x25
c00004fe:	e9 b4 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000503 <irq6>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 26                	push   0x26
c0000508:	e9 aa 00 00 00       	jmp    c00005b7 <int_common_stub>

c000050d <irq7>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 27                	push   0x27
c0000512:	e9 a0 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000517 <irq8>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 28                	push   0x28
c000051c:	e9 96 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000521 <irq9>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 29                	push   0x29
c0000526:	e9 8c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000052b <irq10>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 2a                	push   0x2a
c0000530:	e9 82 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000535 <irq11>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 2b                	push   0x2b
c000053a:	e9 78 00 00 00       	jmp    c00005b7 <int_common_stub>

c000053f <irq12>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 2c                	push   0x2c
c0000544:	e9 6e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000549 <irq13>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 2d                	push   0x2d
c000054e:	e9 64 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000553 <irq14>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 2e                	push   0x2e
c0000558:	e9 5a 00 00 00       	jmp    c00005b7 <int_common_stub>

c000055d <irq15>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2f                	push   0x2f
c0000562:	e9 50 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000567 <irq16>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 30                	push   0x30
c000056c:	e9 46 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000571 <irq17>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 31                	push   0x31
c0000576:	e9 3c 00 00 00       	jmp    c00005b7 <int_common_stub>

c000057b <irq18>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 32                	push   0x32
c0000580:	e9 32 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000585 <irq19>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 33                	push   0x33
c000058a:	e9 28 00 00 00       	jmp    c00005b7 <int_common_stub>

c000058f <irq20>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 34                	push   0x34
c0000594:	e9 1e 00 00 00       	jmp    c00005b7 <int_common_stub>

c0000599 <irq21>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 35                	push   0x35
c000059e:	e9 14 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005a3 <irq22>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 36                	push   0x36
c00005a8:	e9 0a 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005ad <irq23>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 37                	push   0x37
c00005b2:	e9 00 00 00 00       	jmp    c00005b7 <int_common_stub>

c00005b7 <int_common_stub>:
c00005b7:	60                   	pusha  
c00005b8:	1e                   	push   ds
c00005b9:	06                   	push   es
c00005ba:	0f a0                	push   fs
c00005bc:	0f a8                	push   gs
c00005be:	66 b8 10 00          	mov    ax,0x10
c00005c2:	66 8e d8             	mov    ds,ax
c00005c5:	66 8e c0             	mov    es,ax
c00005c8:	66 8e e0             	mov    fs,ax
c00005cb:	66 8e e8             	mov    gs,ax
c00005ce:	89 e1                	mov    ecx,esp
c00005d0:	51                   	push   ecx
c00005d1:	b9 11 0e 01 c0       	mov    ecx,0xc0010e11
c00005d6:	ff d1                	call   ecx
c00005d8:	59                   	pop    ecx
c00005d9:	0f a9                	pop    gs
c00005db:	0f a1                	pop    fs
c00005dd:	07                   	pop    es
c00005de:	1f                   	pop    ds
c00005df:	61                   	popa   
c00005e0:	81 c4 08 00 00 00    	add    esp,0x8
c00005e6:	cf                   	iret   

c00005e7 <syscall_common_stub>:
c00005e7:	60                   	pusha  
c00005e8:	1e                   	push   ds
c00005e9:	06                   	push   es
c00005ea:	0f a0                	push   fs
c00005ec:	0f a8                	push   gs
c00005ee:	66 b8 10 00          	mov    ax,0x10
c00005f2:	66 8e d8             	mov    ds,ax
c00005f5:	66 8e c0             	mov    es,ax
c00005f8:	66 8e e0             	mov    fs,ax
c00005fb:	66 8e e8             	mov    gs,ax
c00005fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000604:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000607:	89 e1                	mov    ecx,esp
c0000609:	51                   	push   ecx
c000060a:	fb                   	sti    
c000060b:	b9 11 0e 01 c0       	mov    ecx,0xc0010e11
c0000610:	ff d1                	call   ecx
c0000612:	59                   	pop    ecx

c0000613 <offAForkJumpThingy>:
c0000613:	0f a9                	pop    gs
c0000615:	0f a1                	pop    fs
c0000617:	07                   	pop    es
c0000618:	1f                   	pop    ds
c0000619:	61                   	popa   
c000061a:	81 c4 08 00 00 00    	add    esp,0x8
c0000620:	cf                   	iret   

c0000621 <memcmp>:
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000627:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000062f:	01 d6                	add    esi,edx
c0000631:	39 f2                	cmp    edx,esi
c0000633:	74 0e                	je     c0000643 <memcmp+0x22>
c0000635:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000638:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000063b:	38 c8                	cmp    al,cl
c000063d:	75 08                	jne    c0000647 <memcmp+0x26>
c000063f:	42                   	inc    edx
c0000640:	43                   	inc    ebx
c0000641:	eb ee                	jmp    c0000631 <memcmp+0x10>
c0000643:	31 c0                	xor    eax,eax
c0000645:	eb 02                	jmp    c0000649 <memcmp+0x28>
c0000647:	29 c8                	sub    eax,ecx
c0000649:	5b                   	pop    ebx
c000064a:	5e                   	pop    esi
c000064b:	c3                   	ret    

c000064c <memmove>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000652:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000656:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000065a:	39 c8                	cmp    eax,ecx
c000065c:	73 12                	jae    c0000670 <memmove+0x24>
c000065e:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000661:	89 c3                	mov    ebx,eax
c0000663:	39 f1                	cmp    ecx,esi
c0000665:	74 1a                	je     c0000681 <memmove+0x35>
c0000667:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000669:	43                   	inc    ebx
c000066a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000066d:	41                   	inc    ecx
c000066e:	eb f3                	jmp    c0000663 <memmove+0x17>
c0000670:	76 0f                	jbe    c0000681 <memmove+0x35>
c0000672:	85 d2                	test   edx,edx
c0000674:	74 0b                	je     c0000681 <memmove+0x35>
c0000676:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000067a:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000067e:	4a                   	dec    edx
c000067f:	eb f1                	jmp    c0000672 <memmove+0x26>
c0000681:	5b                   	pop    ebx
c0000682:	5e                   	pop    esi
c0000683:	c3                   	ret    

c0000684 <memcpy>:
c0000684:	57                   	push   edi
c0000685:	56                   	push   esi
c0000686:	53                   	push   ebx
c0000687:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000068f:	89 da                	mov    edx,ebx
c0000691:	89 d9                	mov    ecx,ebx
c0000693:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000697:	83 e2 fc             	and    edx,0xfffffffc
c000069a:	c1 e9 02             	shr    ecx,0x2
c000069d:	89 c7                	mov    edi,eax
c000069f:	fc                   	cld    
c00006a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a2:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006a5:	01 c2                	add    edx,eax
c00006a7:	01 de                	add    esi,ebx
c00006a9:	39 f1                	cmp    ecx,esi
c00006ab:	74 09                	je     c00006b6 <memcpy+0x32>
c00006ad:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006af:	42                   	inc    edx
c00006b0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006b3:	41                   	inc    ecx
c00006b4:	eb f3                	jmp    c00006a9 <memcpy+0x25>
c00006b6:	5b                   	pop    ebx
c00006b7:	5e                   	pop    esi
c00006b8:	5f                   	pop    edi
c00006b9:	c3                   	ret    

c00006ba <memset>:
c00006ba:	53                   	push   ebx
c00006bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006c3:	01 c1                	add    ecx,eax
c00006c5:	89 c2                	mov    edx,eax
c00006c7:	39 ca                	cmp    edx,ecx
c00006c9:	74 0a                	je     c00006d5 <memset+0x1b>
c00006cb:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006cf:	42                   	inc    edx
c00006d0:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006d3:	eb f2                	jmp    c00006c7 <memset+0xd>
c00006d5:	5b                   	pop    ebx
c00006d6:	c3                   	ret    

c00006d7 <strlen>:
c00006d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006db:	31 c0                	xor    eax,eax
c00006dd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e1:	74 03                	je     c00006e6 <strlen+0xf>
c00006e3:	40                   	inc    eax
c00006e4:	eb f7                	jmp    c00006dd <strlen+0x6>
c00006e6:	c3                   	ret    

c00006e7 <strpbrk>:
c00006e7:	53                   	push   ebx
c00006e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ec:	8a 08                	mov    cl,BYTE PTR [eax]
c00006ee:	84 c9                	test   cl,cl
c00006f0:	74 14                	je     c0000706 <strpbrk+0x1f>
c00006f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006f6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006f8:	84 db                	test   bl,bl
c00006fa:	74 07                	je     c0000703 <strpbrk+0x1c>
c00006fc:	38 cb                	cmp    bl,cl
c00006fe:	74 08                	je     c0000708 <strpbrk+0x21>
c0000700:	42                   	inc    edx
c0000701:	eb f3                	jmp    c00006f6 <strpbrk+0xf>
c0000703:	40                   	inc    eax
c0000704:	eb e6                	jmp    c00006ec <strpbrk+0x5>
c0000706:	31 c0                	xor    eax,eax
c0000708:	5b                   	pop    ebx
c0000709:	c3                   	ret    

c000070a <strtok>:
c000070a:	56                   	push   esi
c000070b:	53                   	push   ebx
c000070c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000710:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000714:	85 db                	test   ebx,ebx
c0000716:	75 0e                	jne    c0000726 <strtok+0x1c>
c0000718:	8b 1d ac 41 02 c0    	mov    ebx,DWORD PTR ds:0xc00241ac
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 04                	jne    c0000726 <strtok+0x1c>
c0000722:	31 db                	xor    ebx,ebx
c0000724:	eb 2e                	jmp    c0000754 <strtok+0x4a>
c0000726:	56                   	push   esi
c0000727:	53                   	push   ebx
c0000728:	e8 ba ff ff ff       	call   c00006e7 <strpbrk>
c000072d:	a3 ac 41 02 c0       	mov    ds:0xc00241ac,eax
c0000732:	5a                   	pop    edx
c0000733:	a1 ac 41 02 c0       	mov    eax,ds:0xc00241ac
c0000738:	59                   	pop    ecx
c0000739:	39 d8                	cmp    eax,ebx
c000073b:	75 07                	jne    c0000744 <strtok+0x3a>
c000073d:	43                   	inc    ebx
c000073e:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000742:	eb e2                	jmp    c0000726 <strtok+0x1c>
c0000744:	85 c0                	test   eax,eax
c0000746:	74 da                	je     c0000722 <strtok+0x18>
c0000748:	8d 50 01             	lea    edx,[eax+0x1]
c000074b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000074e:	89 15 ac 41 02 c0    	mov    DWORD PTR ds:0xc00241ac,edx
c0000754:	89 d8                	mov    eax,ebx
c0000756:	5b                   	pop    ebx
c0000757:	5e                   	pop    esi
c0000758:	c3                   	ret    

c0000759 <strcpy>:
c0000759:	53                   	push   ebx
c000075a:	31 d2                	xor    edx,edx
c000075c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000764:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000767:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000076a:	84 c9                	test   cl,cl
c000076c:	74 06                	je     c0000774 <strcpy+0x1b>
c000076e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000771:	42                   	inc    edx
c0000772:	eb ec                	jmp    c0000760 <strcpy+0x7>
c0000774:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000777:	5b                   	pop    ebx
c0000778:	c3                   	ret    

c0000779 <strncpy>:
c0000779:	56                   	push   esi
c000077a:	53                   	push   ebx
c000077b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000783:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000787:	89 c3                	mov    ebx,eax
c0000789:	85 c9                	test   ecx,ecx
c000078b:	74 1a                	je     c00007a7 <strncpy+0x2e>
c000078d:	46                   	inc    esi
c000078e:	43                   	inc    ebx
c000078f:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000792:	49                   	dec    ecx
c0000793:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000796:	84 d2                	test   dl,dl
c0000798:	75 ef                	jne    c0000789 <strncpy+0x10>
c000079a:	31 d2                	xor    edx,edx
c000079c:	39 d1                	cmp    ecx,edx
c000079e:	74 07                	je     c00007a7 <strncpy+0x2e>
c00007a0:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007a4:	42                   	inc    edx
c00007a5:	eb f5                	jmp    c000079c <strncpy+0x23>
c00007a7:	5b                   	pop    ebx
c00007a8:	5e                   	pop    esi
c00007a9:	c3                   	ret    

c00007aa <strcmp>:
c00007aa:	31 c9                	xor    ecx,ecx
c00007ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007b8:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007bc:	38 d0                	cmp    al,dl
c00007be:	75 08                	jne    c00007c8 <strcmp+0x1e>
c00007c0:	41                   	inc    ecx
c00007c1:	84 c0                	test   al,al
c00007c3:	75 e7                	jne    c00007ac <strcmp+0x2>
c00007c5:	31 c0                	xor    eax,eax
c00007c7:	c3                   	ret    
c00007c8:	29 d0                	sub    eax,edx
c00007ca:	c3                   	ret    

c00007cb <strchr>:
c00007cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007cf:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 09                	je     c00007de <strchr+0x13>
c00007d5:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007d9:	74 05                	je     c00007e0 <strchr+0x15>
c00007db:	40                   	inc    eax
c00007dc:	eb f1                	jmp    c00007cf <strchr+0x4>
c00007de:	31 c0                	xor    eax,eax
c00007e0:	c3                   	ret    

c00007e1 <strncmp>:
c00007e1:	56                   	push   esi
c00007e2:	53                   	push   ebx
c00007e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ef:	01 d6                	add    esi,edx
c00007f1:	39 f2                	cmp    edx,esi
c00007f3:	74 12                	je     c0000807 <strncmp+0x26>
c00007f5:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007f8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007fb:	38 c8                	cmp    al,cl
c00007fd:	75 0c                	jne    c000080b <strncmp+0x2a>
c00007ff:	42                   	inc    edx
c0000800:	84 c0                	test   al,al
c0000802:	74 03                	je     c0000807 <strncmp+0x26>
c0000804:	43                   	inc    ebx
c0000805:	eb ea                	jmp    c00007f1 <strncmp+0x10>
c0000807:	31 c0                	xor    eax,eax
c0000809:	eb 02                	jmp    c000080d <strncmp+0x2c>
c000080b:	29 c8                	sub    eax,ecx
c000080d:	5b                   	pop    ebx
c000080e:	5e                   	pop    esi
c000080f:	c3                   	ret    

c0000810 <strcat>:
c0000810:	53                   	push   ebx
c0000811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000815:	89 c1                	mov    ecx,eax
c0000817:	8d 51 01             	lea    edx,[ecx+0x1]
c000081a:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000081e:	74 04                	je     c0000824 <strcat+0x14>
c0000820:	89 d1                	mov    ecx,edx
c0000822:	eb f3                	jmp    c0000817 <strcat+0x7>
c0000824:	31 d2                	xor    edx,edx
c0000826:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000082a:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000082d:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000830:	42                   	inc    edx
c0000831:	84 db                	test   bl,bl
c0000833:	75 f1                	jne    c0000826 <strcat+0x16>
c0000835:	5b                   	pop    ebx
c0000836:	c3                   	ret    

c0000837 <strncat>:
c0000837:	56                   	push   esi
c0000838:	53                   	push   ebx
c0000839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000083d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000841:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000845:	89 c2                	mov    edx,eax
c0000847:	85 db                	test   ebx,ebx
c0000849:	74 23                	je     c000086e <strncat+0x37>
c000084b:	8d 72 01             	lea    esi,[edx+0x1]
c000084e:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000852:	74 04                	je     c0000858 <strncat+0x21>
c0000854:	89 f2                	mov    edx,esi
c0000856:	eb f3                	jmp    c000084b <strncat+0x14>
c0000858:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000085b:	41                   	inc    ecx
c000085c:	42                   	inc    edx
c000085d:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000860:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000863:	84 db                	test   bl,bl
c0000865:	74 07                	je     c000086e <strncat+0x37>
c0000867:	39 f1                	cmp    ecx,esi
c0000869:	75 f0                	jne    c000085b <strncat+0x24>
c000086b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000086e:	5b                   	pop    ebx
c000086f:	5e                   	pop    esi
c0000870:	c3                   	ret    

c0000871 <strstr>:
c0000871:	57                   	push   edi
c0000872:	56                   	push   esi
c0000873:	53                   	push   ebx
c0000874:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000087c:	57                   	push   edi
c000087d:	e8 55 fe ff ff       	call   c00006d7 <strlen>
c0000882:	59                   	pop    ecx
c0000883:	89 c6                	mov    esi,eax
c0000885:	85 c0                	test   eax,eax
c0000887:	74 1f                	je     c00008a8 <strstr+0x37>
c0000889:	53                   	push   ebx
c000088a:	e8 48 fe ff ff       	call   c00006d7 <strlen>
c000088f:	5a                   	pop    edx
c0000890:	39 f0                	cmp    eax,esi
c0000892:	72 12                	jb     c00008a6 <strstr+0x35>
c0000894:	56                   	push   esi
c0000895:	57                   	push   edi
c0000896:	53                   	push   ebx
c0000897:	e8 85 fd ff ff       	call   c0000621 <memcmp>
c000089c:	83 c4 0c             	add    esp,0xc
c000089f:	85 c0                	test   eax,eax
c00008a1:	74 05                	je     c00008a8 <strstr+0x37>
c00008a3:	43                   	inc    ebx
c00008a4:	eb e3                	jmp    c0000889 <strstr+0x18>
c00008a6:	31 db                	xor    ebx,ebx
c00008a8:	89 d8                	mov    eax,ebx
c00008aa:	5b                   	pop    ebx
c00008ab:	5e                   	pop    esi
c00008ac:	5f                   	pop    edi
c00008ad:	c3                   	ret    

c00008ae <toupper>:
c00008ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b2:	0f b6 d0             	movzx  edx,al
c00008b5:	f6 82 20 02 02 c0 02 	test   BYTE PTR [edx-0x3ffdfde0],0x2
c00008bc:	74 03                	je     c00008c1 <toupper+0x13>
c00008be:	83 e8 20             	sub    eax,0x20
c00008c1:	c3                   	ret    

c00008c2 <tolower>:
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	0f b6 d0             	movzx  edx,al
c00008c9:	f6 82 20 02 02 c0 01 	test   BYTE PTR [edx-0x3ffdfde0],0x1
c00008d0:	74 03                	je     c00008d5 <tolower+0x13>
c00008d2:	83 c0 20             	add    eax,0x20
c00008d5:	c3                   	ret    

c00008d6 <simple_strtoul>:
c00008d6:	55                   	push   ebp
c00008d7:	57                   	push   edi
c00008d8:	56                   	push   esi
c00008d9:	53                   	push   ebx
c00008da:	83 ec 08             	sub    esp,0x8
c00008dd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008e5:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008e8:	f6 82 20 02 02 c0 08 	test   BYTE PTR [edx-0x3ffdfde0],0x8
c00008ef:	74 03                	je     c00008f4 <simple_strtoul+0x1e>
c00008f1:	41                   	inc    ecx
c00008f2:	eb f1                	jmp    c00008e5 <simple_strtoul+0xf>
c00008f4:	80 fa 09             	cmp    dl,0x9
c00008f7:	74 f8                	je     c00008f1 <simple_strtoul+0x1b>
c00008f9:	80 fa 2d             	cmp    dl,0x2d
c00008fc:	75 0b                	jne    c0000909 <simple_strtoul+0x33>
c00008fe:	41                   	inc    ecx
c00008ff:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000907:	eb 0e                	jmp    c0000917 <simple_strtoul+0x41>
c0000909:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000911:	80 fa 2b             	cmp    dl,0x2b
c0000914:	75 01                	jne    c0000917 <simple_strtoul+0x41>
c0000916:	41                   	inc    ecx
c0000917:	85 f6                	test   esi,esi
c0000919:	75 22                	jne    c000093d <simple_strtoul+0x67>
c000091b:	be 0a 00 00 00       	mov    esi,0xa
c0000920:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000923:	75 5a                	jne    c000097f <simple_strtoul+0xa9>
c0000925:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000929:	50                   	push   eax
c000092a:	e8 93 ff ff ff       	call   c00008c2 <tolower>
c000092f:	5a                   	pop    edx
c0000930:	83 f8 78             	cmp    eax,0x78
c0000933:	74 03                	je     c0000938 <simple_strtoul+0x62>
c0000935:	41                   	inc    ecx
c0000936:	eb 16                	jmp    c000094e <simple_strtoul+0x78>
c0000938:	83 c1 02             	add    ecx,0x2
c000093b:	eb 22                	jmp    c000095f <simple_strtoul+0x89>
c000093d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000940:	83 f8 22             	cmp    eax,0x22
c0000943:	0f 87 ab 00 00 00    	ja     c00009f4 <simple_strtoul+0x11e>
c0000949:	83 fe 08             	cmp    esi,0x8
c000094c:	75 0c                	jne    c000095a <simple_strtoul+0x84>
c000094e:	be 08 00 00 00       	mov    esi,0x8
c0000953:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000956:	75 27                	jne    c000097f <simple_strtoul+0xa9>
c0000958:	eb 1f                	jmp    c0000979 <simple_strtoul+0xa3>
c000095a:	83 fe 10             	cmp    esi,0x10
c000095d:	75 20                	jne    c000097f <simple_strtoul+0xa9>
c000095f:	be 10 00 00 00       	mov    esi,0x10
c0000964:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000967:	75 16                	jne    c000097f <simple_strtoul+0xa9>
c0000969:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000096d:	50                   	push   eax
c000096e:	e8 4f ff ff ff       	call   c00008c2 <tolower>
c0000973:	5d                   	pop    ebp
c0000974:	83 f8 78             	cmp    eax,0x78
c0000977:	74 03                	je     c000097c <simple_strtoul+0xa6>
c0000979:	41                   	inc    ecx
c000097a:	eb 03                	jmp    c000097f <simple_strtoul+0xa9>
c000097c:	83 c1 02             	add    ecx,0x2
c000097f:	31 ed                	xor    ebp,ebp
c0000981:	31 db                	xor    ebx,ebx
c0000983:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000098a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000098c:	84 d2                	test   dl,dl
c000098e:	74 27                	je     c00009b7 <simple_strtoul+0xe1>
c0000990:	0f b6 fa             	movzx  edi,dl
c0000993:	f6 87 20 02 02 c0 04 	test   BYTE PTR [edi-0x3ffdfde0],0x4
c000099a:	74 05                	je     c00009a1 <simple_strtoul+0xcb>
c000099c:	83 ef 30             	sub    edi,0x30
c000099f:	eb 22                	jmp    c00009c3 <simple_strtoul+0xed>
c00009a1:	0f be d2             	movsx  edx,dl
c00009a4:	52                   	push   edx
c00009a5:	e8 04 ff ff ff       	call   c00008ae <toupper>
c00009aa:	0f b6 d0             	movzx  edx,al
c00009ad:	5f                   	pop    edi
c00009ae:	f6 82 20 02 02 c0 01 	test   BYTE PTR [edx-0x3ffdfde0],0x1
c00009b5:	75 09                	jne    c00009c0 <simple_strtoul+0xea>
c00009b7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009bc:	75 2d                	jne    c00009eb <simple_strtoul+0x115>
c00009be:	eb 59                	jmp    c0000a19 <simple_strtoul+0x143>
c00009c0:	8d 78 c9             	lea    edi,[eax-0x37]
c00009c3:	39 f7                	cmp    edi,esi
c00009c5:	73 f0                	jae    c00009b7 <simple_strtoul+0xe1>
c00009c7:	89 f8                	mov    eax,edi
c00009c9:	31 d2                	xor    edx,edx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 d8                	cmp    eax,ebx
c00009d1:	72 0e                	jb     c00009e1 <simple_strtoul+0x10b>
c00009d3:	0f af de             	imul   ebx,esi
c00009d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009dd:	01 fb                	add    ebx,edi
c00009df:	eb 07                	jmp    c00009e8 <simple_strtoul+0x112>
c00009e1:	bd 01 00 00 00       	mov    ebp,0x1
c00009e6:	31 db                	xor    ebx,ebx
c00009e8:	41                   	inc    ecx
c00009e9:	eb 9f                	jmp    c000098a <simple_strtoul+0xb4>
c00009eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009ee:	09 d8                	or     eax,ebx
c00009f0:	75 21                	jne    c0000a13 <simple_strtoul+0x13d>
c00009f2:	eb 11                	jmp    c0000a05 <simple_strtoul+0x12f>
c00009f4:	31 db                	xor    ebx,ebx
c00009f6:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009fb:	74 22                	je     c0000a1f <simple_strtoul+0x149>
c00009fd:	31 ed                	xor    ebp,ebp
c00009ff:	31 db                	xor    ebx,ebx
c0000a01:	85 c9                	test   ecx,ecx
c0000a03:	74 0e                	je     c0000a13 <simple_strtoul+0x13d>
c0000a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a09:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0d:	31 db                	xor    ebx,ebx
c0000a0f:	89 38                	mov    DWORD PTR [eax],edi
c0000a11:	eb 06                	jmp    c0000a19 <simple_strtoul+0x143>
c0000a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a17:	89 08                	mov    DWORD PTR [eax],ecx
c0000a19:	4d                   	dec    ebp
c0000a1a:	75 03                	jne    c0000a1f <simple_strtoul+0x149>
c0000a1c:	83 cb ff             	or     ebx,0xffffffff
c0000a1f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a24:	75 02                	jne    c0000a28 <simple_strtoul+0x152>
c0000a26:	f7 db                	neg    ebx
c0000a28:	83 c4 08             	add    esp,0x8
c0000a2b:	89 d8                	mov    eax,ebx
c0000a2d:	5b                   	pop    ebx
c0000a2e:	5e                   	pop    esi
c0000a2f:	5f                   	pop    edi
c0000a30:	5d                   	pop    ebp
c0000a31:	c3                   	ret    

c0000a32 <largebin_index>:
c0000a32:	89 c2                	mov    edx,eax
c0000a34:	c1 ea 08             	shr    edx,0x8
c0000a37:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a3d:	77 10                	ja     c0000a4f <largebin_index+0x1d>
c0000a3f:	0f bd d2             	bsr    edx,edx
c0000a42:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a45:	d3 e8                	shr    eax,cl
c0000a47:	83 e0 03             	and    eax,0x3
c0000a4a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a4e:	c3                   	ret    
c0000a4f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a54:	c3                   	ret    

c0000a55 <malloc_init_state>:
c0000a55:	8d 50 34             	lea    edx,[eax+0x34]
c0000a58:	53                   	push   ebx
c0000a59:	89 d1                	mov    ecx,edx
c0000a5b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a61:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a64:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a67:	83 c2 08             	add    edx,0x8
c0000a6a:	39 da                	cmp    edx,ebx
c0000a6c:	75 f3                	jne    c0000a61 <malloc_init_state+0xc>
c0000a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a70:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a7a:	83 e2 03             	and    edx,0x3
c0000a7d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a87:	83 ca 48             	or     edx,0x48
c0000a8a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a94:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aa7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aaa:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ab4:	5b                   	pop    ebx
c0000ab5:	c3                   	ret    

c0000ab6 <malloc_consolidate>:
c0000ab6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ab8:	85 d2                	test   edx,edx
c0000aba:	0f 84 d8 00 00 00    	je     c0000b98 <malloc_consolidate+0xe2>
c0000ac0:	55                   	push   ebp
c0000ac1:	83 e2 fd             	and    edx,0xfffffffd
c0000ac4:	57                   	push   edi
c0000ac5:	8d 78 34             	lea    edi,[eax+0x34]
c0000ac8:	56                   	push   esi
c0000ac9:	89 c5                	mov    ebp,eax
c0000acb:	53                   	push   ebx
c0000acc:	83 ec 10             	sub    esp,0x10
c0000acf:	89 10                	mov    DWORD PTR [eax],edx
c0000ad1:	c1 ea 03             	shr    edx,0x3
c0000ad4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ad8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000adc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ae3:	85 d2                	test   edx,edx
c0000ae5:	0f 84 98 00 00 00    	je     c0000b83 <malloc_consolidate+0xcd>
c0000aeb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000af5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000af8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000afc:	89 f9                	mov    ecx,edi
c0000afe:	83 e1 fe             	and    ecx,0xfffffffe
c0000b01:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b04:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b07:	83 e3 fc             	and    ebx,0xfffffffc
c0000b0a:	83 e7 01             	and    edi,0x1
c0000b0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b10:	75 14                	jne    c0000b26 <malloc_consolidate+0x70>
c0000b12:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b14:	29 fa                	sub    edx,edi
c0000b16:	01 f9                	add    ecx,edi
c0000b18:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b1b:	89 fb                	mov    ebx,edi
c0000b1d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b20:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b23:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b26:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b29:	74 40                	je     c0000b6b <malloc_consolidate+0xb5>
c0000b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b2e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b31:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b35:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b38:	83 e7 01             	and    edi,0x1
c0000b3b:	75 0e                	jne    c0000b4b <malloc_consolidate+0x95>
c0000b3d:	01 d9                	add    ecx,ebx
c0000b3f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b42:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b45:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b48:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b4b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b4e:	89 ce                	mov    esi,ecx
c0000b50:	83 ce 01             	or     esi,0x1
c0000b53:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b56:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b59:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b5c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b60:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b63:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b66:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b69:	eb 0c                	jmp    c0000b77 <malloc_consolidate+0xc1>
c0000b6b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b6e:	83 c9 01             	or     ecx,0x1
c0000b71:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b7b:	85 d2                	test   edx,edx
c0000b7d:	0f 85 6f ff ff ff    	jne    c0000af2 <malloc_consolidate+0x3c>
c0000b83:	83 c5 04             	add    ebp,0x4
c0000b86:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b8a:	0f 85 50 ff ff ff    	jne    c0000ae0 <malloc_consolidate+0x2a>
c0000b90:	83 c4 10             	add    esp,0x10
c0000b93:	5b                   	pop    ebx
c0000b94:	5e                   	pop    esi
c0000b95:	5f                   	pop    edi
c0000b96:	5d                   	pop    ebp
c0000b97:	c3                   	ret    
c0000b98:	e9 b8 fe ff ff       	jmp    c0000a55 <malloc_init_state>

c0000b9d <dlfree>:
c0000b9d:	57                   	push   edi
c0000b9e:	56                   	push   esi
c0000b9f:	53                   	push   ebx
c0000ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ba4:	85 db                	test   ebx,ebx
c0000ba6:	0f 84 e2 00 00 00    	je     c0000c8e <dlfree+0xf1>
c0000bac:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000baf:	8b 0d c0 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241c0
c0000bb5:	89 f0                	mov    eax,esi
c0000bb7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bba:	83 e0 fc             	and    eax,0xfffffffc
c0000bbd:	39 c1                	cmp    ecx,eax
c0000bbf:	72 24                	jb     c0000be5 <dlfree+0x48>
c0000bc1:	c1 e8 03             	shr    eax,0x3
c0000bc4:	83 c9 03             	or     ecx,0x3
c0000bc7:	83 e8 02             	sub    eax,0x2
c0000bca:	89 0d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,ecx
c0000bd0:	8b 0c 85 c4 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbe3c]
c0000bd7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000bd9:	89 14 85 c4 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe3c],edx
c0000be0:	e9 a9 00 00 00       	jmp    c0000c8e <dlfree+0xf1>
c0000be5:	83 e6 02             	and    esi,0x2
c0000be8:	0f 85 a0 00 00 00    	jne    c0000c8e <dlfree+0xf1>
c0000bee:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf1:	83 c9 01             	or     ecx,0x1
c0000bf4:	89 0d c0 41 02 c0    	mov    DWORD PTR ds:0xc00241c0,ecx
c0000bfa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bfd:	83 e1 fc             	and    ecx,0xfffffffc
c0000c00:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c04:	75 13                	jne    c0000c19 <dlfree+0x7c>
c0000c06:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c09:	29 da                	sub    edx,ebx
c0000c0b:	01 d8                	add    eax,ebx
c0000c0d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c10:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c13:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c16:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c19:	39 35 ec 41 02 c0    	cmp    DWORD PTR ds:0xc00241ec,esi
c0000c1f:	74 40                	je     c0000c61 <dlfree+0xc4>
c0000c21:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c25:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c28:	80 e3 01             	and    bl,0x1
c0000c2b:	75 0e                	jne    c0000c3b <dlfree+0x9e>
c0000c2d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c30:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c33:	01 c8                	add    eax,ecx
c0000c35:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c38:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c3b:	8b 0d fc 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241fc
c0000c41:	c7 42 0c f4 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc00241f4
c0000c48:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c4b:	89 15 fc 41 02 c0    	mov    DWORD PTR ds:0xc00241fc,edx
c0000c51:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c54:	89 c1                	mov    ecx,eax
c0000c56:	83 c9 01             	or     ecx,0x1
c0000c59:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c5c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c5f:	eb 10                	jmp    c0000c71 <dlfree+0xd4>
c0000c61:	01 c8                	add    eax,ecx
c0000c63:	89 c1                	mov    ecx,eax
c0000c65:	83 c9 01             	or     ecx,0x1
c0000c68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6b:	89 15 ec 41 02 c0    	mov    DWORD PTR ds:0xc00241ec,edx
c0000c71:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c76:	76 16                	jbe    c0000c8e <dlfree+0xf1>
c0000c78:	f6 05 c0 41 02 c0 02 	test   BYTE PTR ds:0xc00241c0,0x2
c0000c7f:	74 0d                	je     c0000c8e <dlfree+0xf1>
c0000c81:	5b                   	pop    ebx
c0000c82:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0000c87:	5e                   	pop    esi
c0000c88:	5f                   	pop    edi
c0000c89:	e9 28 fe ff ff       	jmp    c0000ab6 <malloc_consolidate>
c0000c8e:	5b                   	pop    ebx
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	c3                   	ret    

c0000c92 <sYSMALLOc>:
c0000c92:	55                   	push   ebp
c0000c93:	57                   	push   edi
c0000c94:	56                   	push   esi
c0000c95:	53                   	push   ebx
c0000c96:	89 d3                	mov    ebx,edx
c0000c98:	83 ec 2c             	sub    esp,0x2c
c0000c9b:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca1:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000ca4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ca8:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	74 1f                	je     c0000cd0 <sYSMALLOc+0x3e>
c0000cb1:	89 d0                	mov    eax,edx
c0000cb3:	e8 fe fd ff ff       	call   c0000ab6 <malloc_consolidate>
c0000cb8:	83 ec 0c             	sub    esp,0xc
c0000cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cbf:	83 e8 07             	sub    eax,0x7
c0000cc2:	50                   	push   eax
c0000cc3:	e8 33 02 00 00       	call   c0000efb <dlmalloc>
c0000cc8:	83 c4 10             	add    esp,0x10
c0000ccb:	e9 23 02 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000cd0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cd7:	83 c0 10             	add    eax,0x10
c0000cda:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce0:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ce3:	01 c2                	add    edx,eax
c0000ce5:	83 e5 fc             	and    ebp,0xfffffffc
c0000ce8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cf3:	74 02                	je     c0000cf7 <sYSMALLOc+0x65>
c0000cf5:	29 ea                	sub    edx,ebp
c0000cf7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000cfb:	f7 d9                	neg    ecx
c0000cfd:	21 ca                	and    edx,ecx
c0000cff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d07:	7f 07                	jg     c0000d10 <sYSMALLOc+0x7e>
c0000d09:	31 c0                	xor    eax,eax
c0000d0b:	e9 e3 01 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000d10:	83 ec 0c             	sub    esp,0xc
c0000d13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d17:	e8 1d b1 00 00       	call   c000be39 <sbrk>
c0000d1c:	83 c4 10             	add    esp,0x10
c0000d1f:	89 c6                	mov    esi,eax
c0000d21:	83 f8 ff             	cmp    eax,0xffffffff
c0000d24:	74 e3                	je     c0000d09 <sYSMALLOc+0x77>
c0000d26:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d2a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d2d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d33:	39 c2                	cmp    edx,eax
c0000d35:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d3b:	75 11                	jne    c0000d4e <sYSMALLOc+0xbc>
c0000d3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d41:	01 e8                	add    eax,ebp
c0000d43:	83 c8 01             	or     eax,0x1
c0000d46:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d49:	e9 93 00 00 00       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000d4e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d54:	a8 01                	test   al,0x1
c0000d56:	0f 84 73 01 00 00    	je     c0000ecf <sYSMALLOc+0x23d>
c0000d5c:	85 ed                	test   ebp,ebp
c0000d5e:	74 12                	je     c0000d72 <sYSMALLOc+0xe0>
c0000d60:	39 f2                	cmp    edx,esi
c0000d62:	76 0e                	jbe    c0000d72 <sYSMALLOc+0xe0>
c0000d64:	83 e0 fe             	and    eax,0xfffffffe
c0000d67:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d6d:	e9 5d 01 00 00       	jmp    c0000ecf <sYSMALLOc+0x23d>
c0000d72:	85 ed                	test   ebp,ebp
c0000d74:	74 0c                	je     c0000d82 <sYSMALLOc+0xf0>
c0000d76:	89 f0                	mov    eax,esi
c0000d78:	29 d0                	sub    eax,edx
c0000d7a:	01 c1                	add    ecx,eax
c0000d7c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d82:	89 f2                	mov    edx,esi
c0000d84:	83 e2 07             	and    edx,0x7
c0000d87:	0f 84 b1 00 00 00    	je     c0000e3e <sYSMALLOc+0x1ac>
c0000d8d:	b8 08 00 00 00       	mov    eax,0x8
c0000d92:	29 d0                	sub    eax,edx
c0000d94:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d97:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d9f:	01 e8                	add    eax,ebp
c0000da1:	83 ec 0c             	sub    esp,0xc
c0000da4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000da7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000dab:	01 f2                	add    edx,esi
c0000dad:	01 d1                	add    ecx,edx
c0000daf:	29 d0                	sub    eax,edx
c0000db1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000db5:	01 c1                	add    ecx,eax
c0000db7:	51                   	push   ecx
c0000db8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dbc:	e8 78 b0 00 00       	call   c000be39 <sbrk>
c0000dc1:	83 c4 10             	add    esp,0x10
c0000dc4:	83 f8 ff             	cmp    eax,0xffffffff
c0000dc7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dcb:	75 7c                	jne    c0000e49 <sYSMALLOc+0x1b7>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	6a 00                	push   0x0
c0000dd2:	e8 62 b0 00 00       	call   c000be39 <sbrk>
c0000dd7:	83 c4 10             	add    esp,0x10
c0000dda:	31 c9                	xor    ecx,ecx
c0000ddc:	83 f8 ff             	cmp    eax,0xffffffff
c0000ddf:	75 7e                	jne    c0000e5f <sYSMALLOc+0x1cd>
c0000de1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000de7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ded:	73 06                	jae    c0000df5 <sYSMALLOc+0x163>
c0000def:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e01:	73 06                	jae    c0000e09 <sYSMALLOc+0x177>
c0000e03:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e09:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e0f:	83 e2 fc             	and    edx,0xfffffffc
c0000e12:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e16:	0f 87 ed fe ff ff    	ja     c0000d09 <sYSMALLOc+0x77>
c0000e1c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e20:	29 fa                	sub    edx,edi
c0000e22:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e25:	83 ca 01             	or     edx,0x1
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	89 fb                	mov    ebx,edi
c0000e2d:	83 cb 01             	or     ebx,0x1
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e39:	e9 b5 00 00 00       	jmp    c0000ef3 <sYSMALLOc+0x261>
c0000e3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e42:	31 c0                	xor    eax,eax
c0000e44:	e9 52 ff ff ff       	jmp    c0000d9b <sYSMALLOc+0x109>
c0000e49:	39 c6                	cmp    esi,eax
c0000e4b:	76 12                	jbe    c0000e5f <sYSMALLOc+0x1cd>
c0000e4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e51:	01 f0                	add    eax,esi
c0000e53:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e5a:	e9 7b ff ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000e5f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e63:	29 f0                	sub    eax,esi
c0000e65:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e68:	01 c8                	add    eax,ecx
c0000e6a:	83 c8 01             	or     eax,0x1
c0000e6d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e70:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e76:	85 ed                	test   ebp,ebp
c0000e78:	0f 84 63 ff ff ff    	je     c0000de1 <sYSMALLOc+0x14f>
c0000e7e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e81:	83 e0 f8             	and    eax,0xfffffff8
c0000e84:	89 c2                	mov    edx,eax
c0000e86:	83 ca 01             	or     edx,0x1
c0000e89:	83 f8 0f             	cmp    eax,0xf
c0000e8c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e8f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e97:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e9f:	0f 86 3c ff ff ff    	jbe    c0000de1 <sYSMALLOc+0x14f>
c0000ea5:	83 ec 0c             	sub    esp,0xc
c0000ea8:	83 c7 08             	add    edi,0x8
c0000eab:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ebb:	57                   	push   edi
c0000ebc:	e8 dc fc ff ff       	call   c0000b9d <dlfree>
c0000ec1:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec7:	83 c4 10             	add    esp,0x10
c0000eca:	e9 12 ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x14f>
c0000ecf:	83 ec 0c             	sub    esp,0xc
c0000ed2:	6a 00                	push   0x0
c0000ed4:	e8 60 af 00 00       	call   c000be39 <sbrk>
c0000ed9:	89 c2                	mov    edx,eax
c0000edb:	29 f2                	sub    edx,esi
c0000edd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee1:	83 c4 10             	add    esp,0x10
c0000ee4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000eea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000eee:	e9 e7 fe ff ff       	jmp    c0000dda <sYSMALLOc+0x148>
c0000ef3:	83 c4 2c             	add    esp,0x2c
c0000ef6:	5b                   	pop    ebx
c0000ef7:	5e                   	pop    esi
c0000ef8:	5f                   	pop    edi
c0000ef9:	5d                   	pop    ebp
c0000efa:	c3                   	ret    

c0000efb <dlmalloc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	83 ec 1c             	sub    esp,0x1c
c0000f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f06:	83 f8 df             	cmp    eax,0xffffffdf
c0000f09:	0f 87 70 03 00 00    	ja     c000127f <dlmalloc+0x384>
c0000f0f:	83 c0 0b             	add    eax,0xb
c0000f12:	be 10 00 00 00       	mov    esi,0x10
c0000f17:	83 f8 0f             	cmp    eax,0xf
c0000f1a:	76 05                	jbe    c0000f21 <dlmalloc+0x26>
c0000f1c:	83 e0 f8             	and    eax,0xfffffff8
c0000f1f:	89 c6                	mov    esi,eax
c0000f21:	8b 3d c0 41 02 c0    	mov    edi,DWORD PTR ds:0xc00241c0
c0000f27:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f2d:	75 17                	jne    c0000f46 <dlmalloc+0x4b>
c0000f2f:	85 ff                	test   edi,edi
c0000f31:	0f 85 05 03 00 00    	jne    c000123c <dlmalloc+0x341>
c0000f37:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0000f3c:	e8 75 fb ff ff       	call   c0000ab6 <malloc_consolidate>
c0000f41:	e9 f6 02 00 00       	jmp    c000123c <dlmalloc+0x341>
c0000f46:	39 f7                	cmp    edi,esi
c0000f48:	72 1f                	jb     c0000f69 <dlmalloc+0x6e>
c0000f4a:	89 f2                	mov    edx,esi
c0000f4c:	c1 ea 03             	shr    edx,0x3
c0000f4f:	83 ea 02             	sub    edx,0x2
c0000f52:	8b 04 95 c4 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbe3c]
c0000f59:	85 c0                	test   eax,eax
c0000f5b:	74 0c                	je     c0000f69 <dlmalloc+0x6e>
c0000f5d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f60:	89 0c 95 c4 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbe3c],ecx
c0000f67:	eb 30                	jmp    c0000f99 <dlmalloc+0x9e>
c0000f69:	89 f0                	mov    eax,esi
c0000f6b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f71:	77 2e                	ja     c0000fa1 <dlmalloc+0xa6>
c0000f73:	c1 e8 03             	shr    eax,0x3
c0000f76:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f7a:	8d 14 c5 f4 41 02 c0 	lea    edx,[eax*8-0x3ffdbe0c]
c0000f81:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f84:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f87:	39 c3                	cmp    ebx,eax
c0000f89:	74 2e                	je     c0000fb9 <dlmalloc+0xbe>
c0000f8b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f8e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f96:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f99:	83 c0 08             	add    eax,0x8
c0000f9c:	e9 e0 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0000fa1:	e8 8c fa ff ff       	call   c0000a32 <largebin_index>
c0000fa6:	83 e7 02             	and    edi,0x2
c0000fa9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fad:	74 0a                	je     c0000fb9 <dlmalloc+0xbe>
c0000faf:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0000fb4:	e8 fd fa ff ff       	call   c0000ab6 <malloc_consolidate>
c0000fb9:	8d 46 10             	lea    eax,[esi+0x10]
c0000fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc0:	8b 1d 00 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024200
c0000fc6:	81 fb f4 41 02 c0    	cmp    ebx,0xc00241f4
c0000fcc:	0f 84 13 01 00 00    	je     c00010e5 <dlmalloc+0x1ea>
c0000fd2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fd5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fd8:	83 e7 fc             	and    edi,0xfffffffc
c0000fdb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe1:	77 4c                	ja     c000102f <dlmalloc+0x134>
c0000fe3:	3d f4 41 02 c0       	cmp    eax,0xc00241f4
c0000fe8:	75 45                	jne    c000102f <dlmalloc+0x134>
c0000fea:	39 1d f0 41 02 c0    	cmp    DWORD PTR ds:0xc00241f0,ebx
c0000ff0:	75 3d                	jne    c000102f <dlmalloc+0x134>
c0000ff2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ff6:	73 37                	jae    c000102f <dlmalloc+0x134>
c0000ff8:	89 fa                	mov    edx,edi
c0000ffa:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000ffd:	29 f2                	sub    edx,esi
c0000fff:	83 ce 01             	or     esi,0x1
c0001002:	89 d1                	mov    ecx,edx
c0001004:	a3 fc 41 02 c0       	mov    ds:0xc00241fc,eax
c0001009:	83 c9 01             	or     ecx,0x1
c000100c:	a3 00 42 02 c0       	mov    ds:0xc0024200,eax
c0001011:	a3 f0 41 02 c0       	mov    ds:0xc00241f0,eax
c0001016:	c7 40 08 f4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241f4
c000101d:	c7 40 0c f4 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc00241f4
c0001024:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001027:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000102d:	eb 15                	jmp    c0001044 <dlmalloc+0x149>
c000102f:	a3 00 42 02 c0       	mov    ds:0xc0024200,eax
c0001034:	39 fe                	cmp    esi,edi
c0001036:	c7 40 08 f4 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc00241f4
c000103d:	75 0d                	jne    c000104c <dlmalloc+0x151>
c000103f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001044:	8d 43 08             	lea    eax,[ebx+0x8]
c0001047:	e9 35 02 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000104c:	89 f8                	mov    eax,edi
c000104e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001054:	77 19                	ja     c000106f <dlmalloc+0x174>
c0001056:	c1 e8 03             	shr    eax,0x3
c0001059:	8d 14 00             	lea    edx,[eax+eax*1]
c000105c:	83 c2 0d             	add    edx,0xd
c000105f:	8d 2c 95 b8 41 02 c0 	lea    ebp,[edx*4-0x3ffdbe48]
c0001066:	8b 14 95 c0 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe40]
c000106d:	eb 46                	jmp    c00010b5 <dlmalloc+0x1ba>
c000106f:	e8 be f9 ff ff       	call   c0000a32 <largebin_index>
c0001074:	8d 14 00             	lea    edx,[eax+eax*1]
c0001077:	83 c2 0d             	add    edx,0xd
c000107a:	8d 0c 95 c0 41 02 c0 	lea    ecx,[edx*4-0x3ffdbe40]
c0001081:	8b 14 95 c0 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbe40]
c0001088:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000108b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000108f:	89 d5                	mov    ebp,edx
c0001091:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001095:	74 1e                	je     c00010b5 <dlmalloc+0x1ba>
c0001097:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000109d:	77 12                	ja     c00010b1 <dlmalloc+0x1b6>
c000109f:	83 cf 01             	or     edi,0x1
c00010a2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010a5:	76 05                	jbe    c00010ac <dlmalloc+0x1b1>
c00010a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010aa:	eb f6                	jmp    c00010a2 <dlmalloc+0x1a7>
c00010ac:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010af:	eb 04                	jmp    c00010b5 <dlmalloc+0x1ba>
c00010b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010b5:	89 c7                	mov    edi,eax
c00010b7:	88 c1                	mov    cl,al
c00010b9:	c1 ff 05             	sar    edi,0x5
c00010bc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c0:	bf 01 00 00 00       	mov    edi,0x1
c00010c5:	d3 e7                	shl    edi,cl
c00010c7:	89 f8                	mov    eax,edi
c00010c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cd:	09 04 bd f4 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbb0c],eax
c00010d4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010d7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010da:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010dd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e0:	e9 db fe ff ff       	jmp    c0000fc0 <dlmalloc+0xc5>
c00010e5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010eb:	76 78                	jbe    c0001165 <dlmalloc+0x26a>
c00010ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f1:	8d 04 c5 f4 41 02 c0 	lea    eax,[eax*8-0x3ffdbe0c]
c00010f8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010fe:	39 ca                	cmp    edx,ecx
c0001100:	74 63                	je     c0001165 <dlmalloc+0x26a>
c0001102:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001105:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001108:	83 e3 fc             	and    ebx,0xfffffffc
c000110b:	39 de                	cmp    esi,ebx
c000110d:	77 52                	ja     c0001161 <dlmalloc+0x266>
c000110f:	89 df                	mov    edi,ebx
c0001111:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001114:	29 f7                	sub    edi,esi
c0001116:	01 d3                	add    ebx,edx
c0001118:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111b:	83 ff 0f             	cmp    edi,0xf
c000111e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001121:	8d 42 08             	lea    eax,[edx+0x8]
c0001124:	77 09                	ja     c000112f <dlmalloc+0x234>
c0001126:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112a:	e9 52 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c000112f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001132:	83 ce 01             	or     esi,0x1
c0001135:	89 0d fc 41 02 c0    	mov    DWORD PTR ds:0xc00241fc,ecx
c000113b:	89 0d 00 42 02 c0    	mov    DWORD PTR ds:0xc0024200,ecx
c0001141:	c7 41 08 f4 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00241f4
c0001148:	c7 41 0c f4 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00241f4
c000114f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001152:	89 fa                	mov    edx,edi
c0001154:	83 ca 01             	or     edx,0x1
c0001157:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115a:	89 3b                	mov    DWORD PTR [ebx],edi
c000115c:	e9 20 01 00 00       	jmp    c0001281 <dlmalloc+0x386>
c0001161:	89 c2                	mov    edx,eax
c0001163:	eb 99                	jmp    c00010fe <dlmalloc+0x203>
c0001165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	41                   	inc    ecx
c000116f:	89 cb                	mov    ebx,ecx
c0001171:	c1 eb 05             	shr    ebx,0x5
c0001174:	8d 14 cd ec 41 02 c0 	lea    edx,[ecx*8-0x3ffdbe14]
c000117b:	d3 e0                	shl    eax,cl
c000117d:	8b 3c 9d f4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb0c]
c0001184:	39 f8                	cmp    eax,edi
c0001186:	77 04                	ja     c000118c <dlmalloc+0x291>
c0001188:	85 c0                	test   eax,eax
c000118a:	75 26                	jne    c00011b2 <dlmalloc+0x2b7>
c000118c:	43                   	inc    ebx
c000118d:	83 fb 02             	cmp    ebx,0x2
c0001190:	0f 87 a6 00 00 00    	ja     c000123c <dlmalloc+0x341>
c0001196:	8b 3c 9d f4 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbb0c]
c000119d:	85 ff                	test   edi,edi
c000119f:	74 eb                	je     c000118c <dlmalloc+0x291>
c00011a1:	89 d8                	mov    eax,ebx
c00011a3:	c1 e0 06             	shl    eax,0x6
c00011a6:	8d 14 85 ec 41 02 c0 	lea    edx,[eax*4-0x3ffdbe14]
c00011ad:	b8 01 00 00 00       	mov    eax,0x1
c00011b2:	85 f8                	test   eax,edi
c00011b4:	75 07                	jne    c00011bd <dlmalloc+0x2c2>
c00011b6:	83 c2 08             	add    edx,0x8
c00011b9:	01 c0                	add    eax,eax
c00011bb:	eb f5                	jmp    c00011b2 <dlmalloc+0x2b7>
c00011bd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c0:	39 ca                	cmp    edx,ecx
c00011c2:	75 14                	jne    c00011d8 <dlmalloc+0x2dd>
c00011c4:	89 c1                	mov    ecx,eax
c00011c6:	83 c2 08             	add    edx,0x8
c00011c9:	f7 d1                	not    ecx
c00011cb:	21 cf                	and    edi,ecx
c00011cd:	01 c0                	add    eax,eax
c00011cf:	89 3c 9d f4 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbb0c],edi
c00011d6:	eb ac                	jmp    c0001184 <dlmalloc+0x289>
c00011d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011db:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011de:	83 e0 fc             	and    eax,0xfffffffc
c00011e1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e4:	89 c3                	mov    ebx,eax
c00011e6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011e9:	29 f3                	sub    ebx,esi
c00011eb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ee:	83 fb 0f             	cmp    ebx,0xf
c00011f1:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f4:	77 09                	ja     c00011ff <dlmalloc+0x304>
c00011f6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011fa:	e9 82 00 00 00       	jmp    c0001281 <dlmalloc+0x386>
c00011ff:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001202:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001208:	89 3d fc 41 02 c0    	mov    DWORD PTR ds:0xc00241fc,edi
c000120e:	89 3d 00 42 02 c0    	mov    DWORD PTR ds:0xc0024200,edi
c0001214:	c7 47 08 f4 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc00241f4
c000121b:	c7 47 0c f4 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc00241f4
c0001222:	77 06                	ja     c000122a <dlmalloc+0x32f>
c0001224:	89 3d f0 41 02 c0    	mov    DWORD PTR ds:0xc00241f0,edi
c000122a:	83 ce 01             	or     esi,0x1
c000122d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001230:	89 d9                	mov    ecx,ebx
c0001232:	83 c9 01             	or     ecx,0x1
c0001235:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001238:	89 1a                	mov    DWORD PTR [edx],ebx
c000123a:	eb 45                	jmp    c0001281 <dlmalloc+0x386>
c000123c:	a1 ec 41 02 c0       	mov    eax,ds:0xc00241ec
c0001241:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001244:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001247:	83 e2 fc             	and    edx,0xfffffffc
c000124a:	39 d1                	cmp    ecx,edx
c000124c:	77 1e                	ja     c000126c <dlmalloc+0x371>
c000124e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001251:	89 f3                	mov    ebx,esi
c0001253:	29 f2                	sub    edx,esi
c0001255:	83 cb 01             	or     ebx,0x1
c0001258:	83 ca 01             	or     edx,0x1
c000125b:	89 0d ec 41 02 c0    	mov    DWORD PTR ds:0xc00241ec,ecx
c0001261:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001264:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001267:	e9 2d fd ff ff       	jmp    c0000f99 <dlmalloc+0x9e>
c000126c:	83 c4 1c             	add    esp,0x1c
c000126f:	89 f0                	mov    eax,esi
c0001271:	ba c0 41 02 c0       	mov    edx,0xc00241c0
c0001276:	5b                   	pop    ebx
c0001277:	5e                   	pop    esi
c0001278:	5f                   	pop    edi
c0001279:	5d                   	pop    ebp
c000127a:	e9 13 fa ff ff       	jmp    c0000c92 <sYSMALLOc>
c000127f:	31 c0                	xor    eax,eax
c0001281:	83 c4 1c             	add    esp,0x1c
c0001284:	5b                   	pop    ebx
c0001285:	5e                   	pop    esi
c0001286:	5f                   	pop    edi
c0001287:	5d                   	pop    ebp
c0001288:	c3                   	ret    

c0001289 <iALLOc>:
c0001289:	55                   	push   ebp
c000128a:	89 c5                	mov    ebp,eax
c000128c:	57                   	push   edi
c000128d:	56                   	push   esi
c000128e:	53                   	push   ebx
c000128f:	83 ec 2c             	sub    esp,0x2c
c0001292:	83 3d c0 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241c0,0x0
c0001299:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a5:	75 12                	jne    c00012b9 <iALLOc+0x30>
c00012a7:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	e8 01 f8 ff ff       	call   c0000ab6 <malloc_consolidate>
c00012b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012be:	74 12                	je     c00012d2 <iALLOc+0x49>
c00012c0:	85 ed                	test   ebp,ebp
c00012c2:	0f 84 64 01 00 00    	je     c000142c <iALLOc+0x1a3>
c00012c8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d0:	eb 33                	jmp    c0001305 <iALLOc+0x7c>
c00012d2:	85 ed                	test   ebp,ebp
c00012d4:	75 14                	jne    c00012ea <iALLOc+0x61>
c00012d6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012de:	83 c4 2c             	add    esp,0x2c
c00012e1:	5b                   	pop    ebx
c00012e2:	5e                   	pop    esi
c00012e3:	5f                   	pop    edi
c00012e4:	5d                   	pop    ebp
c00012e5:	e9 11 fc ff ff       	jmp    c0000efb <dlmalloc>
c00012ea:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012f9:	83 f8 0f             	cmp    eax,0xf
c00012fc:	76 07                	jbe    c0001305 <iALLOc+0x7c>
c00012fe:	83 e0 f8             	and    eax,0xfffffff8
c0001301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001305:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130a:	75 09                	jne    c0001315 <iALLOc+0x8c>
c000130c:	89 d0                	mov    eax,edx
c000130e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001311:	31 f6                	xor    esi,esi
c0001313:	eb 3b                	jmp    c0001350 <iALLOc+0xc7>
c0001315:	8b 02                	mov    eax,DWORD PTR [edx]
c0001317:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000131f:	83 c0 0b             	add    eax,0xb
c0001322:	83 f8 0f             	cmp    eax,0xf
c0001325:	76 07                	jbe    c000132e <iALLOc+0xa5>
c0001327:	83 e0 f8             	and    eax,0xfffffff8
c000132a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000132e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001332:	0f af f5             	imul   esi,ebp
c0001335:	eb 25                	jmp    c000135c <iALLOc+0xd3>
c0001337:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001339:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000133c:	bb 10 00 00 00       	mov    ebx,0x10
c0001341:	83 f9 0f             	cmp    ecx,0xf
c0001344:	76 05                	jbe    c000134b <iALLOc+0xc2>
c0001346:	83 e1 f8             	and    ecx,0xfffffff8
c0001349:	89 cb                	mov    ebx,ecx
c000134b:	01 de                	add    esi,ebx
c000134d:	83 c0 04             	add    eax,0x4
c0001350:	39 c7                	cmp    edi,eax
c0001352:	75 e3                	jne    c0001337 <iALLOc+0xae>
c0001354:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000135c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001360:	83 ec 0c             	sub    esp,0xc
c0001363:	8b 1d 14 45 02 c0    	mov    ebx,DWORD PTR ds:0xc0024514
c0001369:	c7 05 14 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024514,0x0
c0001373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001377:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000137b:	50                   	push   eax
c000137c:	e8 7a fb ff ff       	call   c0000efb <dlmalloc>
c0001381:	83 c4 10             	add    esp,0x10
c0001384:	89 1d 14 45 02 c0    	mov    DWORD PTR ds:0xc0024514,ebx
c000138a:	85 c0                	test   eax,eax
c000138c:	0f 84 92 00 00 00    	je     c0001424 <iALLOc+0x19b>
c0001392:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001395:	8d 78 f8             	lea    edi,[eax-0x8]
c0001398:	83 e3 fc             	and    ebx,0xfffffffc
c000139b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000139f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a4:	74 1e                	je     c00013c4 <iALLOc+0x13b>
c00013a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013aa:	89 d9                	mov    ecx,ebx
c00013ac:	52                   	push   edx
c00013ad:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b1:	83 e9 04             	sub    ecx,0x4
c00013b4:	51                   	push   ecx
c00013b5:	6a 00                	push   0x0
c00013b7:	50                   	push   eax
c00013b8:	e8 fd f2 ff ff       	call   c00006ba <memset>
c00013bd:	83 c4 10             	add    esp,0x10
c00013c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c9:	75 14                	jne    c00013df <iALLOc+0x156>
c00013cb:	8d 04 37             	lea    eax,[edi+esi*1]
c00013ce:	29 f3                	sub    ebx,esi
c00013d0:	83 cb 01             	or     ebx,0x1
c00013d3:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013dd:	89 f3                	mov    ebx,esi
c00013df:	31 c0                	xor    eax,eax
c00013e1:	4d                   	dec    ebp
c00013e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013e6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013e9:	39 c5                	cmp    ebp,eax
c00013eb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ee:	74 2c                	je     c000141c <iALLOc+0x193>
c00013f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f4:	85 c9                	test   ecx,ecx
c00013f6:	75 15                	jne    c000140d <iALLOc+0x184>
c00013f8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013fb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013fe:	b9 10 00 00 00       	mov    ecx,0x10
c0001403:	83 fe 0f             	cmp    esi,0xf
c0001406:	76 05                	jbe    c000140d <iALLOc+0x184>
c0001408:	83 e6 f8             	and    esi,0xfffffff8
c000140b:	89 f1                	mov    ecx,esi
c000140d:	89 ce                	mov    esi,ecx
c000140f:	29 cb                	sub    ebx,ecx
c0001411:	83 ce 01             	or     esi,0x1
c0001414:	40                   	inc    eax
c0001415:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001418:	01 cf                	add    edi,ecx
c000141a:	eb c6                	jmp    c00013e2 <iALLOc+0x159>
c000141c:	83 cb 01             	or     ebx,0x1
c000141f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001422:	eb 08                	jmp    c000142c <iALLOc+0x1a3>
c0001424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000142c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	c3                   	ret    

c0001438 <dlrealloc>:
c0001438:	55                   	push   ebp
c0001439:	57                   	push   edi
c000143a:	56                   	push   esi
c000143b:	53                   	push   ebx
c000143c:	83 ec 1c             	sub    esp,0x1c
c000143f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001443:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001447:	85 db                	test   ebx,ebx
c0001449:	75 10                	jne    c000145b <dlrealloc+0x23>
c000144b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000144f:	83 c4 1c             	add    esp,0x1c
c0001452:	5b                   	pop    ebx
c0001453:	5e                   	pop    esi
c0001454:	5f                   	pop    edi
c0001455:	5d                   	pop    ebp
c0001456:	e9 a0 fa ff ff       	jmp    c0000efb <dlmalloc>
c000145b:	83 f8 df             	cmp    eax,0xffffffdf
c000145e:	76 07                	jbe    c0001467 <dlrealloc+0x2f>
c0001460:	31 db                	xor    ebx,ebx
c0001462:	e9 7c 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c0001467:	83 c0 0b             	add    eax,0xb
c000146a:	bf 10 00 00 00       	mov    edi,0x10
c000146f:	83 f8 0f             	cmp    eax,0xf
c0001472:	76 05                	jbe    c0001479 <dlrealloc+0x41>
c0001474:	83 e0 f8             	and    eax,0xfffffff8
c0001477:	89 c7                	mov    edi,eax
c0001479:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000147c:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000147f:	89 c6                	mov    esi,eax
c0001481:	83 e6 fc             	and    esi,0xfffffffc
c0001484:	a8 02                	test   al,0x2
c0001486:	75 d8                	jne    c0001460 <dlrealloc+0x28>
c0001488:	39 f7                	cmp    edi,esi
c000148a:	0f 86 15 01 00 00    	jbe    c00015a5 <dlrealloc+0x16d>
c0001490:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001494:	39 15 ec 41 02 c0    	cmp    DWORD PTR ds:0xc00241ec,edx
c000149a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149d:	75 33                	jne    c00014d2 <dlrealloc+0x9a>
c000149f:	83 e1 fc             	and    ecx,0xfffffffc
c00014a2:	01 f1                	add    ecx,esi
c00014a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014a8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014ab:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014af:	77 49                	ja     c00014fa <dlrealloc+0xc2>
c00014b1:	83 e0 01             	and    eax,0x1
c00014b4:	01 fd                	add    ebp,edi
c00014b6:	09 f8                	or     eax,edi
c00014b8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014bf:	29 f8                	sub    eax,edi
c00014c1:	89 2d ec 41 02 c0    	mov    DWORD PTR ds:0xc00241ec,ebp
c00014c7:	83 c8 01             	or     eax,0x1
c00014ca:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014cd:	e9 11 01 00 00       	jmp    c00015e3 <dlrealloc+0x1ab>
c00014d2:	89 c8                	mov    eax,ecx
c00014d4:	83 e0 fe             	and    eax,0xfffffffe
c00014d7:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014dc:	75 1c                	jne    c00014fa <dlrealloc+0xc2>
c00014de:	83 e1 fc             	and    ecx,0xfffffffc
c00014e1:	01 f1                	add    ecx,esi
c00014e3:	39 cf                	cmp    edi,ecx
c00014e5:	77 13                	ja     c00014fa <dlrealloc+0xc2>
c00014e7:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ea:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ed:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f0:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f3:	89 ce                	mov    esi,ecx
c00014f5:	e9 ab 00 00 00       	jmp    c00015a5 <dlrealloc+0x16d>
c00014fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014fe:	83 ec 0c             	sub    esp,0xc
c0001501:	8d 47 f9             	lea    eax,[edi-0x7]
c0001504:	50                   	push   eax
c0001505:	e8 f1 f9 ff ff       	call   c0000efb <dlmalloc>
c000150a:	83 c4 10             	add    esp,0x10
c000150d:	89 c1                	mov    ecx,eax
c000150f:	85 c0                	test   eax,eax
c0001511:	0f 84 49 ff ff ff    	je     c0001460 <dlrealloc+0x28>
c0001517:	8d 40 f8             	lea    eax,[eax-0x8]
c000151a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000151e:	39 c2                	cmp    edx,eax
c0001520:	75 0a                	jne    c000152c <dlrealloc+0xf4>
c0001522:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001525:	83 e0 fc             	and    eax,0xfffffffc
c0001528:	01 c6                	add    esi,eax
c000152a:	eb 79                	jmp    c00015a5 <dlrealloc+0x16d>
c000152c:	83 ee 04             	sub    esi,0x4
c000152f:	83 fe 27             	cmp    esi,0x27
c0001532:	76 16                	jbe    c000154a <dlrealloc+0x112>
c0001534:	50                   	push   eax
c0001535:	56                   	push   esi
c0001536:	53                   	push   ebx
c0001537:	51                   	push   ecx
c0001538:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000153c:	e8 43 f1 ff ff       	call   c0000684 <memcpy>
c0001541:	83 c4 10             	add    esp,0x10
c0001544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001548:	eb 43                	jmp    c000158d <dlrealloc+0x155>
c000154a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000154c:	83 fe 13             	cmp    esi,0x13
c000154f:	89 01                	mov    DWORD PTR [ecx],eax
c0001551:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001554:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001557:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000155d:	76 2e                	jbe    c000158d <dlrealloc+0x155>
c000155f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001562:	83 fe 1b             	cmp    esi,0x1b
c0001565:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001568:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000156b:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000156e:	76 1d                	jbe    c000158d <dlrealloc+0x155>
c0001570:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001573:	83 fe 23             	cmp    esi,0x23
c0001576:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001579:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000157c:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000157f:	76 0c                	jbe    c000158d <dlrealloc+0x155>
c0001581:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001584:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001587:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158a:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000158d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	53                   	push   ebx
c0001595:	e8 03 f6 ff ff       	call   c0000b9d <dlfree>
c000159a:	83 c4 10             	add    esp,0x10
c000159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a1:	89 cb                	mov    ebx,ecx
c00015a3:	eb 3e                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015a5:	89 f2                	mov    edx,esi
c00015a7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015aa:	29 fa                	sub    edx,edi
c00015ac:	83 e1 01             	and    ecx,0x1
c00015af:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b3:	83 fa 0f             	cmp    edx,0xf
c00015b6:	77 0b                	ja     c00015c3 <dlrealloc+0x18b>
c00015b8:	09 ce                	or     esi,ecx
c00015ba:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c1:	eb 20                	jmp    c00015e3 <dlrealloc+0x1ab>
c00015c3:	01 fd                	add    ebp,edi
c00015c5:	83 ca 01             	or     edx,0x1
c00015c8:	09 cf                	or     edi,ecx
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015d7:	83 c5 08             	add    ebp,0x8
c00015da:	55                   	push   ebp
c00015db:	e8 bd f5 ff ff       	call   c0000b9d <dlfree>
c00015e0:	83 c4 10             	add    esp,0x10
c00015e3:	83 c4 1c             	add    esp,0x1c
c00015e6:	89 d8                	mov    eax,ebx
c00015e8:	5b                   	pop    ebx
c00015e9:	5e                   	pop    esi
c00015ea:	5f                   	pop    edi
c00015eb:	5d                   	pop    ebp
c00015ec:	c3                   	ret    

c00015ed <dlmemalign>:
c00015ed:	55                   	push   ebp
c00015ee:	57                   	push   edi
c00015ef:	56                   	push   esi
c00015f0:	53                   	push   ebx
c00015f1:	83 ec 0c             	sub    esp,0xc
c00015f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015fc:	83 fa 08             	cmp    edx,0x8
c00015ff:	77 10                	ja     c0001611 <dlmemalign+0x24>
c0001601:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001605:	83 c4 0c             	add    esp,0xc
c0001608:	5b                   	pop    ebx
c0001609:	5e                   	pop    esi
c000160a:	5f                   	pop    edi
c000160b:	5d                   	pop    ebp
c000160c:	e9 ea f8 ff ff       	jmp    c0000efb <dlmalloc>
c0001611:	bf 10 00 00 00       	mov    edi,0x10
c0001616:	83 fa 0f             	cmp    edx,0xf
c0001619:	76 13                	jbe    c000162e <dlmemalign+0x41>
c000161b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000161e:	85 d1                	test   ecx,edx
c0001620:	75 04                	jne    c0001626 <dlmemalign+0x39>
c0001622:	89 d7                	mov    edi,edx
c0001624:	eb 08                	jmp    c000162e <dlmemalign+0x41>
c0001626:	39 d7                	cmp    edi,edx
c0001628:	73 04                	jae    c000162e <dlmemalign+0x41>
c000162a:	01 ff                	add    edi,edi
c000162c:	eb f8                	jmp    c0001626 <dlmemalign+0x39>
c000162e:	83 f8 df             	cmp    eax,0xffffffdf
c0001631:	76 07                	jbe    c000163a <dlmemalign+0x4d>
c0001633:	31 c0                	xor    eax,eax
c0001635:	e9 ce 00 00 00       	jmp    c0001708 <dlmemalign+0x11b>
c000163a:	83 c0 0b             	add    eax,0xb
c000163d:	bd 10 00 00 00       	mov    ebp,0x10
c0001642:	83 f8 0f             	cmp    eax,0xf
c0001645:	76 05                	jbe    c000164c <dlmemalign+0x5f>
c0001647:	83 e0 f8             	and    eax,0xfffffff8
c000164a:	89 c5                	mov    ebp,eax
c000164c:	83 ec 0c             	sub    esp,0xc
c000164f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001653:	50                   	push   eax
c0001654:	e8 a2 f8 ff ff       	call   c0000efb <dlmalloc>
c0001659:	83 c4 10             	add    esp,0x10
c000165c:	89 c1                	mov    ecx,eax
c000165e:	85 c0                	test   eax,eax
c0001660:	74 d1                	je     c0001633 <dlmemalign+0x46>
c0001662:	31 d2                	xor    edx,edx
c0001664:	8d 70 f8             	lea    esi,[eax-0x8]
c0001667:	f7 f7                	div    edi
c0001669:	85 d2                	test   edx,edx
c000166b:	74 62                	je     c00016cf <dlmemalign+0xe2>
c000166d:	89 f8                	mov    eax,edi
c000166f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001673:	f7 d8                	neg    eax
c0001675:	21 c3                	and    ebx,eax
c0001677:	83 eb 08             	sub    ebx,0x8
c000167a:	89 d8                	mov    eax,ebx
c000167c:	29 f0                	sub    eax,esi
c000167e:	83 f8 0f             	cmp    eax,0xf
c0001681:	77 02                	ja     c0001685 <dlmemalign+0x98>
c0001683:	01 fb                	add    ebx,edi
c0001685:	89 d8                	mov    eax,ebx
c0001687:	29 f0                	sub    eax,esi
c0001689:	89 c6                	mov    esi,eax
c000168b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000168e:	89 c2                	mov    edx,eax
c0001690:	83 e2 fc             	and    edx,0xfffffffc
c0001693:	29 f2                	sub    edx,esi
c0001695:	a8 02                	test   al,0x2
c0001697:	74 10                	je     c00016a9 <dlmemalign+0xbc>
c0001699:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000169c:	83 ca 02             	or     edx,0x2
c000169f:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a2:	89 33                	mov    DWORD PTR [ebx],esi
c00016a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016a7:	eb 5f                	jmp    c0001708 <dlmemalign+0x11b>
c00016a9:	89 d0                	mov    eax,edx
c00016ab:	83 ec 0c             	sub    esp,0xc
c00016ae:	83 c8 01             	or     eax,0x1
c00016b1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016b9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bc:	83 e0 01             	and    eax,0x1
c00016bf:	09 f0                	or     eax,esi
c00016c1:	89 de                	mov    esi,ebx
c00016c3:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016c6:	51                   	push   ecx
c00016c7:	e8 d1 f4 ff ff       	call   c0000b9d <dlfree>
c00016cc:	83 c4 10             	add    esp,0x10
c00016cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d2:	a8 02                	test   al,0x2
c00016d4:	75 2f                	jne    c0001705 <dlmemalign+0x118>
c00016d6:	83 e0 fc             	and    eax,0xfffffffc
c00016d9:	8d 55 10             	lea    edx,[ebp+0x10]
c00016dc:	39 c2                	cmp    edx,eax
c00016de:	73 25                	jae    c0001705 <dlmemalign+0x118>
c00016e0:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e3:	29 e8                	sub    eax,ebp
c00016e5:	83 c8 01             	or     eax,0x1
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016ee:	83 c2 08             	add    edx,0x8
c00016f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f4:	83 e0 01             	and    eax,0x1
c00016f7:	09 c5                	or     ebp,eax
c00016f9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016fc:	52                   	push   edx
c00016fd:	e8 9b f4 ff ff       	call   c0000b9d <dlfree>
c0001702:	83 c4 10             	add    esp,0x10
c0001705:	8d 46 08             	lea    eax,[esi+0x8]
c0001708:	83 c4 0c             	add    esp,0xc
c000170b:	5b                   	pop    ebx
c000170c:	5e                   	pop    esi
c000170d:	5f                   	pop    edi
c000170e:	5d                   	pop    ebp
c000170f:	c3                   	ret    

c0001710 <dlcalloc>:
c0001710:	53                   	push   ebx
c0001711:	83 ec 14             	sub    esp,0x14
c0001714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001718:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000171d:	50                   	push   eax
c000171e:	e8 d8 f7 ff ff       	call   c0000efb <dlmalloc>
c0001723:	83 c4 10             	add    esp,0x10
c0001726:	89 c3                	mov    ebx,eax
c0001728:	85 c0                	test   eax,eax
c000172a:	74 77                	je     c00017a3 <dlcalloc+0x93>
c000172c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000172f:	89 d0                	mov    eax,edx
c0001731:	83 e0 fc             	and    eax,0xfffffffc
c0001734:	80 e2 02             	and    dl,0x2
c0001737:	75 5a                	jne    c0001793 <dlcalloc+0x83>
c0001739:	83 e8 04             	sub    eax,0x4
c000173c:	83 f8 27             	cmp    eax,0x27
c000173f:	76 03                	jbe    c0001744 <dlcalloc+0x34>
c0001741:	51                   	push   ecx
c0001742:	eb 53                	jmp    c0001797 <dlcalloc+0x87>
c0001744:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001751:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001758:	83 f8 13             	cmp    eax,0x13
c000175b:	76 46                	jbe    c00017a3 <dlcalloc+0x93>
c000175d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001764:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000176b:	83 f8 1b             	cmp    eax,0x1b
c000176e:	76 33                	jbe    c00017a3 <dlcalloc+0x93>
c0001770:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001777:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000177e:	83 f8 23             	cmp    eax,0x23
c0001781:	76 20                	jbe    c00017a3 <dlcalloc+0x93>
c0001783:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001791:	eb 10                	jmp    c00017a3 <dlcalloc+0x93>
c0001793:	83 e8 08             	sub    eax,0x8
c0001796:	52                   	push   edx
c0001797:	50                   	push   eax
c0001798:	6a 00                	push   0x0
c000179a:	53                   	push   ebx
c000179b:	e8 1a ef ff ff       	call   c00006ba <memset>
c00017a0:	83 c4 10             	add    esp,0x10
c00017a3:	83 c4 08             	add    esp,0x8
c00017a6:	89 d8                	mov    eax,ebx
c00017a8:	5b                   	pop    ebx
c00017a9:	c3                   	ret    

c00017aa <dlcfree>:
c00017aa:	e9 ee f3 ff ff       	jmp    c0000b9d <dlfree>

c00017af <dlindependent_calloc>:
c00017af:	83 ec 28             	sub    esp,0x28
c00017b2:	b9 03 00 00 00       	mov    ecx,0x3
c00017b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cb:	e8 b9 fa ff ff       	call   c0001289 <iALLOc>
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	c3                   	ret    

c00017d4 <dlindependent_comalloc>:
c00017d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017dc:	31 c9                	xor    ecx,ecx
c00017de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017e6:	e9 9e fa ff ff       	jmp    c0001289 <iALLOc>

c00017eb <dlvalloc>:
c00017eb:	83 ec 0c             	sub    esp,0xc
c00017ee:	83 3d c0 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241c0,0x0
c00017f5:	75 0a                	jne    c0001801 <dlvalloc+0x16>
c00017f7:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c00017fc:	e8 b5 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001801:	50                   	push   eax
c0001802:	50                   	push   eax
c0001803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001807:	ff 35 1c 45 02 c0    	push   DWORD PTR ds:0xc002451c
c000180d:	e8 db fd ff ff       	call   c00015ed <dlmemalign>
c0001812:	83 c4 1c             	add    esp,0x1c
c0001815:	c3                   	ret    

c0001816 <dlpvalloc>:
c0001816:	83 ec 0c             	sub    esp,0xc
c0001819:	83 3d c0 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241c0,0x0
c0001820:	75 0a                	jne    c000182c <dlpvalloc+0x16>
c0001822:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0001827:	e8 8a f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c000182c:	52                   	push   edx
c000182d:	a1 1c 45 02 c0       	mov    eax,ds:0xc002451c
c0001832:	52                   	push   edx
c0001833:	89 c1                	mov    ecx,eax
c0001835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001839:	f7 d9                	neg    ecx
c000183b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000183f:	21 ca                	and    edx,ecx
c0001841:	52                   	push   edx
c0001842:	50                   	push   eax
c0001843:	e8 a5 fd ff ff       	call   c00015ed <dlmemalign>
c0001848:	83 c4 1c             	add    esp,0x1c
c000184b:	c3                   	ret    

c000184c <dlmalloc_trim>:
c000184c:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0001851:	e8 60 f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c0001856:	31 c0                	xor    eax,eax
c0001858:	c3                   	ret    

c0001859 <dlmalloc_usable_size>:
c0001859:	53                   	push   ebx
c000185a:	31 c0                	xor    eax,eax
c000185c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001860:	85 c9                	test   ecx,ecx
c0001862:	74 24                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001864:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001867:	f6 c2 02             	test   dl,0x2
c000186a:	74 08                	je     c0001874 <dlmalloc_usable_size+0x1b>
c000186c:	83 e2 fc             	and    edx,0xfffffffc
c000186f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001872:	eb 14                	jmp    c0001888 <dlmalloc_usable_size+0x2f>
c0001874:	89 d3                	mov    ebx,edx
c0001876:	31 c0                	xor    eax,eax
c0001878:	83 e3 fe             	and    ebx,0xfffffffe
c000187b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001880:	74 06                	je     c0001888 <dlmalloc_usable_size+0x2f>
c0001882:	83 e2 fc             	and    edx,0xfffffffc
c0001885:	8d 42 fc             	lea    eax,[edx-0x4]
c0001888:	5b                   	pop    ebx
c0001889:	c3                   	ret    

c000188a <dlmallinfo>:
c000188a:	55                   	push   ebp
c000188b:	57                   	push   edi
c000188c:	56                   	push   esi
c000188d:	53                   	push   ebx
c000188e:	83 ec 08             	sub    esp,0x8
c0001891:	83 3d ec 41 02 c0 00 	cmp    DWORD PTR ds:0xc00241ec,0x0
c0001898:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189c:	75 0a                	jne    c00018a8 <dlmallinfo+0x1e>
c000189e:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c00018a3:	e8 0e f2 ff ff       	call   c0000ab6 <malloc_consolidate>
c00018a8:	a1 ec 41 02 c0       	mov    eax,ds:0xc00241ec
c00018ad:	31 ed                	xor    ebp,ebp
c00018af:	31 c9                	xor    ecx,ecx
c00018b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b4:	83 e0 fc             	and    eax,0xfffffffc
c00018b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018bb:	31 c0                	xor    eax,eax
c00018bd:	8b 14 85 c4 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbe3c]
c00018c4:	85 d2                	test   edx,edx
c00018c6:	74 0e                	je     c00018d6 <dlmallinfo+0x4c>
c00018c8:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018cb:	45                   	inc    ebp
c00018cc:	83 e6 fc             	and    esi,0xfffffffc
c00018cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d2:	01 f1                	add    ecx,esi
c00018d4:	eb ee                	jmp    c00018c4 <dlmallinfo+0x3a>
c00018d6:	40                   	inc    eax
c00018d7:	83 f8 0a             	cmp    eax,0xa
c00018da:	75 e1                	jne    c00018bd <dlmallinfo+0x33>
c00018dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018e7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ea:	b8 f4 41 02 c0       	mov    eax,0xc00241f4
c00018ef:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f2:	39 f0                	cmp    eax,esi
c00018f4:	74 10                	je     c0001906 <dlmallinfo+0x7c>
c00018f6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018f9:	ff 04 24             	inc    DWORD PTR [esp]
c00018fc:	83 e7 fc             	and    edi,0xfffffffc
c00018ff:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001902:	01 fa                	add    edx,edi
c0001904:	eb ec                	jmp    c00018f2 <dlmallinfo+0x68>
c0001906:	83 c0 08             	add    eax,0x8
c0001909:	3d ec 44 02 c0       	cmp    eax,0xc00244ec
c000190e:	75 df                	jne    c00018ef <dlmallinfo+0x65>
c0001910:	a1 28 45 02 c0       	mov    eax,ds:0xc0024528
c0001915:	8b 35 10 45 02 c0    	mov    esi,DWORD PTR ds:0xc0024510
c000191b:	89 03                	mov    DWORD PTR [ebx],eax
c000191d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001920:	29 d0                	sub    eax,edx
c0001922:	8b 35 24 45 02 c0    	mov    esi,DWORD PTR ds:0xc0024524
c0001928:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000192b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000192e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001931:	8b 35 34 45 02 c0    	mov    esi,DWORD PTR ds:0xc0024534
c0001937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000193b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000193e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001941:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001947:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000194a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000194d:	83 c4 08             	add    esp,0x8
c0001950:	89 d8                	mov    eax,ebx
c0001952:	5b                   	pop    ebx
c0001953:	5e                   	pop    esi
c0001954:	5f                   	pop    edi
c0001955:	5d                   	pop    ebp
c0001956:	c2 04 00             	ret    0x4

c0001959 <dlmalloc_stats>:
c0001959:	83 ec 30             	sub    esp,0x30
c000195c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001960:	50                   	push   eax
c0001961:	e8 24 ff ff ff       	call   c000188a <dlmallinfo>
c0001966:	83 c4 30             	add    esp,0x30
c0001969:	c3                   	ret    

c000196a <dlmallopt>:
c000196a:	56                   	push   esi
c000196b:	b8 c0 41 02 c0       	mov    eax,0xc00241c0
c0001970:	53                   	push   ebx
c0001971:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001975:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001979:	e8 38 f1 ff ff       	call   c0000ab6 <malloc_consolidate>
c000197e:	8d 46 04             	lea    eax,[esi+0x4]
c0001981:	83 f8 05             	cmp    eax,0x5
c0001984:	77 67                	ja     c00019ed <dlmallopt+0x83>
c0001986:	ff 24 85 24 03 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfcdc]
c000198d:	83 fb 50             	cmp    ebx,0x50
c0001990:	77 5b                	ja     c00019ed <dlmallopt+0x83>
c0001992:	ba 08 00 00 00       	mov    edx,0x8
c0001997:	85 db                	test   ebx,ebx
c0001999:	74 12                	je     c00019ad <dlmallopt+0x43>
c000199b:	83 c3 0b             	add    ebx,0xb
c000199e:	ba 10 00 00 00       	mov    edx,0x10
c00019a3:	83 fb 0f             	cmp    ebx,0xf
c00019a6:	76 05                	jbe    c00019ad <dlmallopt+0x43>
c00019a8:	89 da                	mov    edx,ebx
c00019aa:	83 e2 f8             	and    edx,0xfffffff8
c00019ad:	a1 c0 41 02 c0       	mov    eax,ds:0xc00241c0
c00019b2:	83 e0 03             	and    eax,0x3
c00019b5:	09 d0                	or     eax,edx
c00019b7:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c00019bc:	eb 31                	jmp    c00019ef <dlmallopt+0x85>
c00019be:	89 1d 04 45 02 c0    	mov    DWORD PTR ds:0xc0024504,ebx
c00019c4:	eb 06                	jmp    c00019cc <dlmallopt+0x62>
c00019c6:	89 1d 08 45 02 c0    	mov    DWORD PTR ds:0xc0024508,ebx
c00019cc:	be 01 00 00 00       	mov    esi,0x1
c00019d1:	eb 1c                	jmp    c00019ef <dlmallopt+0x85>
c00019d3:	89 1d 0c 45 02 c0    	mov    DWORD PTR ds:0xc002450c,ebx
c00019d9:	eb f1                	jmp    c00019cc <dlmallopt+0x62>
c00019db:	31 f6                	xor    esi,esi
c00019dd:	85 db                	test   ebx,ebx
c00019df:	75 0e                	jne    c00019ef <dlmallopt+0x85>
c00019e1:	c7 05 14 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024514,0x0
c00019eb:	eb df                	jmp    c00019cc <dlmallopt+0x62>
c00019ed:	31 f6                	xor    esi,esi
c00019ef:	5b                   	pop    ebx
c00019f0:	89 f0                	mov    eax,esi
c00019f2:	5e                   	pop    esi
c00019f3:	c3                   	ret    

c00019f4 <disk_status>:
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <disk_initialize>:
c00019f7:	31 c0                	xor    eax,eax
c00019f9:	c3                   	ret    

c00019fa <disk_read>:
c00019fa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019ff:	0f b6 04 85 e0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda520]
c0001a07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0b:	e9 d6 8c 01 00       	jmp    c001a6e6 <fatWrapperReadDisk>

c0001a10 <disk_write>:
c0001a10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a15:	0f b6 04 85 e0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda520]
c0001a1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a21:	e9 0b 8d 01 00       	jmp    c001a731 <fatWrapperWriteDisk>

c0001a26 <disk_ioctl>:
c0001a26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a2f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a34:	0f b6 04 85 e0 5a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda520]
c0001a3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a40:	e9 37 8d 01 00       	jmp    c001a77c <fatWrapperIoctl>

c0001a45 <ld_word>:
c0001a45:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a4c:	c1 e2 08             	shl    edx,0x8
c0001a4f:	09 d0                	or     eax,edx
c0001a51:	c3                   	ret    

c0001a52 <ld_dword>:
c0001a52:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a56:	89 d1                	mov    ecx,edx
c0001a58:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a5c:	c1 e1 08             	shl    ecx,0x8
c0001a5f:	09 ca                	or     edx,ecx
c0001a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a64:	c1 e2 08             	shl    edx,0x8
c0001a67:	09 d0                	or     eax,edx
c0001a69:	c3                   	ret    

c0001a6a <ld_qword>:
c0001a6a:	57                   	push   edi
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	31 db                	xor    ebx,ebx
c0001a6f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a72:	89 df                	mov    edi,ebx
c0001a74:	89 ce                	mov    esi,ecx
c0001a76:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a7e:	c1 e6 08             	shl    esi,0x8
c0001a81:	09 f2                	or     edx,esi
c0001a83:	89 d6                	mov    esi,edx
c0001a85:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a89:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8d:	c1 e6 08             	shl    esi,0x8
c0001a90:	09 f2                	or     edx,esi
c0001a92:	89 d6                	mov    esi,edx
c0001a94:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a98:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9c:	c1 e6 08             	shl    esi,0x8
c0001a9f:	89 fb                	mov    ebx,edi
c0001aa1:	09 f2                	or     edx,esi
c0001aa3:	89 d1                	mov    ecx,edx
c0001aa5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001aa9:	89 da                	mov    edx,ebx
c0001aab:	5b                   	pop    ebx
c0001aac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aaf:	c1 e1 08             	shl    ecx,0x8
c0001ab2:	5e                   	pop    esi
c0001ab3:	09 c8                	or     eax,ecx
c0001ab5:	5f                   	pop    edi
c0001ab6:	c3                   	ret    

c0001ab7 <st_word>:
c0001ab7:	66 89 10             	mov    WORD PTR [eax],dx
c0001aba:	c3                   	ret    

c0001abb <st_dword>:
c0001abb:	89 10                	mov    DWORD PTR [eax],edx
c0001abd:	c3                   	ret    

c0001abe <st_qword>:
c0001abe:	89 10                	mov    DWORD PTR [eax],edx
c0001ac0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac3:	c3                   	ret    

c0001ac4 <mem_cpy>:
c0001ac4:	85 c9                	test   ecx,ecx
c0001ac6:	74 10                	je     c0001ad8 <mem_cpy+0x14>
c0001ac8:	57                   	push   edi
c0001ac9:	01 c1                	add    ecx,eax
c0001acb:	56                   	push   esi
c0001acc:	89 c7                	mov    edi,eax
c0001ace:	89 d6                	mov    esi,edx
c0001ad0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad1:	39 f9                	cmp    ecx,edi
c0001ad3:	75 fb                	jne    c0001ad0 <mem_cpy+0xc>
c0001ad5:	5e                   	pop    esi
c0001ad6:	5f                   	pop    edi
c0001ad7:	c3                   	ret    
c0001ad8:	c3                   	ret    

c0001ad9 <mem_set>:
c0001ad9:	01 c1                	add    ecx,eax
c0001adb:	40                   	inc    eax
c0001adc:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001adf:	39 c8                	cmp    eax,ecx
c0001ae1:	75 f8                	jne    c0001adb <mem_set+0x2>
c0001ae3:	c3                   	ret    

c0001ae4 <mem_cmp>:
c0001ae4:	57                   	push   edi
c0001ae5:	56                   	push   esi
c0001ae6:	89 c6                	mov    esi,eax
c0001ae8:	53                   	push   ebx
c0001ae9:	46                   	inc    esi
c0001aea:	42                   	inc    edx
c0001aeb:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aef:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af3:	29 fb                	sub    ebx,edi
c0001af5:	89 cf                	mov    edi,ecx
c0001af7:	29 f7                	sub    edi,esi
c0001af9:	01 c7                	add    edi,eax
c0001afb:	74 04                	je     c0001b01 <mem_cmp+0x1d>
c0001afd:	85 db                	test   ebx,ebx
c0001aff:	74 e8                	je     c0001ae9 <mem_cmp+0x5>
c0001b01:	89 d8                	mov    eax,ebx
c0001b03:	5b                   	pop    ebx
c0001b04:	5e                   	pop    esi
c0001b05:	5f                   	pop    edi
c0001b06:	c3                   	ret    

c0001b07 <chk_chr>:
c0001b07:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b0d:	74 07                	je     c0001b16 <chk_chr+0xf>
c0001b0f:	39 d1                	cmp    ecx,edx
c0001b11:	74 03                	je     c0001b16 <chk_chr+0xf>
c0001b13:	40                   	inc    eax
c0001b14:	eb f1                	jmp    c0001b07 <chk_chr>
c0001b16:	89 c8                	mov    eax,ecx
c0001b18:	c3                   	ret    

c0001b19 <dbc_1st>:
c0001b19:	31 c0                	xor    eax,eax
c0001b1b:	c3                   	ret    

c0001b1c <dbc_2nd>:
c0001b1c:	31 c0                	xor    eax,eax
c0001b1e:	c3                   	ret    

c0001b1f <tchar2uni>:
c0001b1f:	57                   	push   edi
c0001b20:	89 c7                	mov    edi,eax
c0001b22:	56                   	push   esi
c0001b23:	53                   	push   ebx
c0001b24:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b26:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b28:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b2b:	84 c9                	test   cl,cl
c0001b2d:	78 0a                	js     c0001b39 <tchar2uni+0x1a>
c0001b2f:	0f b6 d1             	movzx  edx,cl
c0001b32:	89 f3                	mov    ebx,esi
c0001b34:	e9 9f 00 00 00       	jmp    c0001bd8 <tchar2uni+0xb9>
c0001b39:	88 ca                	mov    dl,cl
c0001b3b:	83 e2 e0             	and    edx,0xffffffe0
c0001b3e:	80 fa c0             	cmp    dl,0xc0
c0001b41:	75 0c                	jne    c0001b4f <tchar2uni+0x30>
c0001b43:	89 ca                	mov    edx,ecx
c0001b45:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4a:	83 e2 1f             	and    edx,0x1f
c0001b4d:	eb 2e                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b4f:	88 ca                	mov    dl,cl
c0001b51:	83 e2 f0             	and    edx,0xfffffff0
c0001b54:	80 fa e0             	cmp    dl,0xe0
c0001b57:	75 0c                	jne    c0001b65 <tchar2uni+0x46>
c0001b59:	89 ca                	mov    edx,ecx
c0001b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0001b60:	83 e2 0f             	and    edx,0xf
c0001b63:	eb 18                	jmp    c0001b7d <tchar2uni+0x5e>
c0001b65:	88 ca                	mov    dl,cl
c0001b67:	83 e2 f8             	and    edx,0xfffffff8
c0001b6a:	88 d0                	mov    al,dl
c0001b6c:	83 ca ff             	or     edx,0xffffffff
c0001b6f:	3c f0                	cmp    al,0xf0
c0001b71:	75 6c                	jne    c0001bdf <tchar2uni+0xc0>
c0001b73:	89 ca                	mov    edx,ecx
c0001b75:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7a:	83 e2 07             	and    edx,0x7
c0001b7d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b81:	46                   	inc    esi
c0001b82:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b85:	88 c8                	mov    al,cl
c0001b87:	83 e0 c0             	and    eax,0xffffffc0
c0001b8a:	3c 80                	cmp    al,0x80
c0001b8c:	75 4e                	jne    c0001bdc <tchar2uni+0xbd>
c0001b8e:	c1 e2 06             	shl    edx,0x6
c0001b91:	83 e1 3f             	and    ecx,0x3f
c0001b94:	09 ca                	or     edx,ecx
c0001b96:	39 de                	cmp    esi,ebx
c0001b98:	75 e7                	jne    c0001b81 <tchar2uni+0x62>
c0001b9a:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ba6:	76 34                	jbe    c0001bdc <tchar2uni+0xbd>
c0001ba8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb1:	77 29                	ja     c0001bdc <tchar2uni+0xbd>
c0001bb3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bb9:	76 1d                	jbe    c0001bd8 <tchar2uni+0xb9>
c0001bbb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc1:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bc7:	c1 e1 06             	shl    ecx,0x6
c0001bca:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd0:	09 ca                	or     edx,ecx
c0001bd2:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bd8:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bda:	eb 03                	jmp    c0001bdf <tchar2uni+0xc0>
c0001bdc:	83 ca ff             	or     edx,0xffffffff
c0001bdf:	5b                   	pop    ebx
c0001be0:	89 d0                	mov    eax,edx
c0001be2:	5e                   	pop    esi
c0001be3:	5f                   	pop    edi
c0001be4:	c3                   	ret    

c0001be5 <put_utf>:
c0001be5:	53                   	push   ebx
c0001be6:	83 f8 7f             	cmp    eax,0x7f
c0001be9:	89 c3                	mov    ebx,eax
c0001beb:	b0 00                	mov    al,0x0
c0001bed:	77 11                	ja     c0001c00 <put_utf+0x1b>
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	0f 84 e5 00 00 00    	je     c0001cdc <put_utf+0xf7>
c0001bf7:	88 1a                	mov    BYTE PTR [edx],bl
c0001bf9:	b0 01                	mov    al,0x1
c0001bfb:	e9 dc 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c00:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c06:	77 23                	ja     c0001c2b <put_utf+0x46>
c0001c08:	83 f9 01             	cmp    ecx,0x1
c0001c0b:	0f 86 cb 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c11:	89 d8                	mov    eax,ebx
c0001c13:	83 e3 3f             	and    ebx,0x3f
c0001c16:	c1 e8 06             	shr    eax,0x6
c0001c19:	83 cb 80             	or     ebx,0xffffff80
c0001c1c:	83 c8 c0             	or     eax,0xffffffc0
c0001c1f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	b0 02                	mov    al,0x2
c0001c26:	e9 b1 00 00 00       	jmp    c0001cdc <put_utf+0xf7>
c0001c2b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c31:	77 40                	ja     c0001c73 <put_utf+0x8e>
c0001c33:	83 f9 02             	cmp    ecx,0x2
c0001c36:	0f 86 a0 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c3c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c48:	0f 86 8e 00 00 00    	jbe    c0001cdc <put_utf+0xf7>
c0001c4e:	89 d8                	mov    eax,ebx
c0001c50:	c1 e8 0c             	shr    eax,0xc
c0001c53:	83 c8 e0             	or     eax,0xffffffe0
c0001c56:	88 02                	mov    BYTE PTR [edx],al
c0001c58:	89 d8                	mov    eax,ebx
c0001c5a:	c1 e8 06             	shr    eax,0x6
c0001c5d:	83 e3 3f             	and    ebx,0x3f
c0001c60:	83 e0 3f             	and    eax,0x3f
c0001c63:	83 cb 80             	or     ebx,0xffffff80
c0001c66:	83 c8 80             	or     eax,0xffffff80
c0001c69:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c6f:	b0 03                	mov    al,0x3
c0001c71:	eb 69                	jmp    c0001cdc <put_utf+0xf7>
c0001c73:	83 f9 03             	cmp    ecx,0x3
c0001c76:	76 64                	jbe    c0001cdc <put_utf+0xf7>
c0001c78:	89 d9                	mov    ecx,ebx
c0001c7a:	66 31 c9             	xor    cx,cx
c0001c7d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c83:	0f b7 c3             	movzx  eax,bx
c0001c86:	c1 e9 06             	shr    ecx,0x6
c0001c89:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8f:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c95:	77 43                	ja     c0001cda <put_utf+0xf5>
c0001c97:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9d:	77 3b                	ja     c0001cda <put_utf+0xf5>
c0001c9f:	09 cb                	or     ebx,ecx
c0001ca1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ca7:	89 d8                	mov    eax,ebx
c0001ca9:	c1 e8 12             	shr    eax,0x12
c0001cac:	83 c8 f0             	or     eax,0xfffffff0
c0001caf:	88 02                	mov    BYTE PTR [edx],al
c0001cb1:	89 d8                	mov    eax,ebx
c0001cb3:	c1 e8 0c             	shr    eax,0xc
c0001cb6:	83 e0 3f             	and    eax,0x3f
c0001cb9:	83 c8 80             	or     eax,0xffffff80
c0001cbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cbf:	89 d8                	mov    eax,ebx
c0001cc1:	c1 e8 06             	shr    eax,0x6
c0001cc4:	83 e3 3f             	and    ebx,0x3f
c0001cc7:	83 e0 3f             	and    eax,0x3f
c0001cca:	83 cb 80             	or     ebx,0xffffff80
c0001ccd:	83 c8 80             	or     eax,0xffffff80
c0001cd0:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd3:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cd6:	b0 04                	mov    al,0x4
c0001cd8:	eb 02                	jmp    c0001cdc <put_utf+0xf7>
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	5b                   	pop    ebx
c0001cdd:	c3                   	ret    

c0001cde <clst2sect>:
c0001cde:	89 c1                	mov    ecx,eax
c0001ce0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ce3:	83 ea 02             	sub    edx,0x2
c0001ce6:	83 e8 02             	sub    eax,0x2
c0001ce9:	39 d0                	cmp    eax,edx
c0001ceb:	76 0d                	jbe    c0001cfa <clst2sect+0x1c>
c0001ced:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf1:	f7 e2                	mul    edx
c0001cf3:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cf6:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cf9:	c3                   	ret    
c0001cfa:	31 c0                	xor    eax,eax
c0001cfc:	31 d2                	xor    edx,edx
c0001cfe:	c3                   	ret    

c0001cff <clmt_clust>:
c0001cff:	57                   	push   edi
c0001d00:	89 cf                	mov    edi,ecx
c0001d02:	56                   	push   esi
c0001d03:	89 d6                	mov    esi,edx
c0001d05:	53                   	push   ebx
c0001d06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	c1 ef 09             	shr    edi,0x9
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d17:	89 f9                	mov    ecx,edi
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	31 ff                	xor    edi,edi
c0001d1f:	57                   	push   edi
c0001d20:	56                   	push   esi
c0001d21:	51                   	push   ecx
c0001d22:	52                   	push   edx
c0001d23:	e8 e4 d6 01 00       	call   c001f40c <__udivdi3>
c0001d28:	83 c4 10             	add    esp,0x10
c0001d2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d2d:	85 d2                	test   edx,edx
c0001d2f:	74 10                	je     c0001d41 <clmt_clust+0x42>
c0001d31:	39 d0                	cmp    eax,edx
c0001d33:	72 07                	jb     c0001d3c <clmt_clust+0x3d>
c0001d35:	29 d0                	sub    eax,edx
c0001d37:	83 c3 08             	add    ebx,0x8
c0001d3a:	eb ef                	jmp    c0001d2b <clmt_clust+0x2c>
c0001d3c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d3f:	89 c2                	mov    edx,eax
c0001d41:	5b                   	pop    ebx
c0001d42:	89 d0                	mov    eax,edx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <pick_lfn>:
c0001d47:	55                   	push   ebp
c0001d48:	57                   	push   edi
c0001d49:	56                   	push   esi
c0001d4a:	89 d6                	mov    esi,edx
c0001d4c:	53                   	push   ebx
c0001d4d:	89 c3                	mov    ebx,eax
c0001d4f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d52:	e8 ee fc ff ff       	call   c0001a45 <ld_word>
c0001d57:	66 85 c0             	test   ax,ax
c0001d5a:	74 04                	je     c0001d60 <pick_lfn+0x19>
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	eb 5c                	jmp    c0001dbc <pick_lfn+0x75>
c0001d60:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d63:	83 e1 bf             	and    ecx,0xffffffbf
c0001d66:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6b:	49                   	dec    ecx
c0001d6c:	31 ff                	xor    edi,edi
c0001d6e:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d71:	0f b6 87 40 04 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfbc0]
c0001d78:	01 f0                	add    eax,esi
c0001d7a:	e8 c6 fc ff ff       	call   c0001a45 <ld_word>
c0001d7f:	66 85 ed             	test   bp,bp
c0001d82:	74 11                	je     c0001d95 <pick_lfn+0x4e>
c0001d84:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8a:	77 d0                	ja     c0001d5c <pick_lfn+0x15>
c0001d8c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d90:	89 c5                	mov    ebp,eax
c0001d92:	41                   	inc    ecx
c0001d93:	eb 04                	jmp    c0001d99 <pick_lfn+0x52>
c0001d95:	66 40                	inc    ax
c0001d97:	75 c3                	jne    c0001d5c <pick_lfn+0x15>
c0001d99:	47                   	inc    edi
c0001d9a:	83 ff 0d             	cmp    edi,0xd
c0001d9d:	75 d2                	jne    c0001d71 <pick_lfn+0x2a>
c0001d9f:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da2:	74 13                	je     c0001db7 <pick_lfn+0x70>
c0001da4:	66 85 ed             	test   bp,bp
c0001da7:	74 0e                	je     c0001db7 <pick_lfn+0x70>
c0001da9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001daf:	77 ab                	ja     c0001d5c <pick_lfn+0x15>
c0001db1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001db7:	b8 01 00 00 00       	mov    eax,0x1
c0001dbc:	5b                   	pop    ebx
c0001dbd:	5e                   	pop    esi
c0001dbe:	5f                   	pop    edi
c0001dbf:	5d                   	pop    ebp
c0001dc0:	c3                   	ret    

c0001dc1 <put_lfn>:
c0001dc1:	55                   	push   ebp
c0001dc2:	31 ed                	xor    ebp,ebp
c0001dc4:	57                   	push   edi
c0001dc5:	89 d7                	mov    edi,edx
c0001dc7:	56                   	push   esi
c0001dc8:	31 f6                	xor    esi,esi
c0001dca:	53                   	push   ebx
c0001dcb:	83 ec 08             	sub    esp,0x8
c0001dce:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dd5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dd8:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de1:	31 d2                	xor    edx,edx
c0001de3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de7:	e8 cb fc ff ff       	call   c0001ab7 <st_word>
c0001dec:	0f b6 d9             	movzx  ebx,cl
c0001def:	4b                   	dec    ebx
c0001df0:	6b db 0d             	imul   ebx,ebx,0xd
c0001df3:	66 83 fe ff          	cmp    si,0xffff
c0001df7:	74 08                	je     c0001e01 <put_lfn+0x40>
c0001df9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dfc:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e00:	43                   	inc    ebx
c0001e01:	0f b6 85 40 04 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfbc0]
c0001e08:	0f b7 d6             	movzx  edx,si
c0001e0b:	01 f8                	add    eax,edi
c0001e0d:	e8 a5 fc ff ff       	call   c0001ab7 <st_word>
c0001e12:	66 85 f6             	test   si,si
c0001e15:	75 03                	jne    c0001e1a <put_lfn+0x59>
c0001e17:	83 ce ff             	or     esi,0xffffffff
c0001e1a:	45                   	inc    ebp
c0001e1b:	83 fd 0d             	cmp    ebp,0xd
c0001e1e:	75 d3                	jne    c0001df3 <put_lfn+0x32>
c0001e20:	66 46                	inc    si
c0001e22:	74 0a                	je     c0001e2e <put_lfn+0x6d>
c0001e24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e27:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e2c:	75 09                	jne    c0001e37 <put_lfn+0x76>
c0001e2e:	88 c8                	mov    al,cl
c0001e30:	83 c8 40             	or     eax,0x40
c0001e33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e37:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e3b:	88 07                	mov    BYTE PTR [edi],al
c0001e3d:	83 c4 08             	add    esp,0x8
c0001e40:	5b                   	pop    ebx
c0001e41:	5e                   	pop    esi
c0001e42:	5f                   	pop    edi
c0001e43:	5d                   	pop    ebp
c0001e44:	c3                   	ret    

c0001e45 <gen_numname>:
c0001e45:	57                   	push   edi
c0001e46:	89 cf                	mov    edi,ecx
c0001e48:	56                   	push   esi
c0001e49:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e4e:	53                   	push   ebx
c0001e4f:	89 c6                	mov    esi,eax
c0001e51:	83 ec 10             	sub    esp,0x10
c0001e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e58:	e8 67 fc ff ff       	call   c0001ac4 <mem_cpy>
c0001e5d:	83 fb 05             	cmp    ebx,0x5
c0001e60:	76 2d                	jbe    c0001e8f <gen_numname+0x4a>
c0001e62:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 25                	je     c0001e8f <gen_numname+0x4a>
c0001e6a:	83 c7 02             	add    edi,0x2
c0001e6d:	ba 10 00 00 00       	mov    edx,0x10
c0001e72:	89 c1                	mov    ecx,eax
c0001e74:	01 db                	add    ebx,ebx
c0001e76:	66 d1 e8             	shr    ax,1
c0001e79:	83 e1 01             	and    ecx,0x1
c0001e7c:	01 cb                	add    ebx,ecx
c0001e7e:	0f ba e3 10          	bt     ebx,0x10
c0001e82:	73 06                	jae    c0001e8a <gen_numname+0x45>
c0001e84:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8a:	4a                   	dec    edx
c0001e8b:	75 e5                	jne    c0001e72 <gen_numname+0x2d>
c0001e8d:	eb d3                	jmp    c0001e62 <gen_numname+0x1d>
c0001e8f:	b8 07 00 00 00       	mov    eax,0x7
c0001e94:	88 d9                	mov    cl,bl
c0001e96:	83 e1 0f             	and    ecx,0xf
c0001e99:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e9c:	80 fa 39             	cmp    dl,0x39
c0001e9f:	76 03                	jbe    c0001ea4 <gen_numname+0x5f>
c0001ea1:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ea7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eab:	89 da                	mov    edx,ebx
c0001ead:	c1 ea 04             	shr    edx,0x4
c0001eb0:	83 fb 0f             	cmp    ebx,0xf
c0001eb3:	76 06                	jbe    c0001ebb <gen_numname+0x76>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	89 d3                	mov    ebx,edx
c0001eb9:	eb d9                	jmp    c0001e94 <gen_numname+0x4f>
c0001ebb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ec5:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ec8:	39 ca                	cmp    edx,ecx
c0001eca:	73 18                	jae    c0001ee4 <gen_numname+0x9f>
c0001ecc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ecf:	3c 20                	cmp    al,0x20
c0001ed1:	74 11                	je     c0001ee4 <gen_numname+0x9f>
c0001ed3:	e8 41 fc ff ff       	call   c0001b19 <dbc_1st>
c0001ed8:	85 c0                	test   eax,eax
c0001eda:	74 05                	je     c0001ee1 <gen_numname+0x9c>
c0001edc:	39 d3                	cmp    ebx,edx
c0001ede:	74 04                	je     c0001ee4 <gen_numname+0x9f>
c0001ee0:	42                   	inc    edx
c0001ee1:	42                   	inc    edx
c0001ee2:	eb e1                	jmp    c0001ec5 <gen_numname+0x80>
c0001ee4:	b0 20                	mov    al,0x20
c0001ee6:	83 f9 07             	cmp    ecx,0x7
c0001ee9:	77 05                	ja     c0001ef0 <gen_numname+0xab>
c0001eeb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eef:	41                   	inc    ecx
c0001ef0:	42                   	inc    edx
c0001ef1:	83 fa 07             	cmp    edx,0x7
c0001ef4:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ef8:	76 ea                	jbe    c0001ee4 <gen_numname+0x9f>
c0001efa:	83 c4 10             	add    esp,0x10
c0001efd:	5b                   	pop    ebx
c0001efe:	5e                   	pop    esi
c0001eff:	5f                   	pop    edi
c0001f00:	c3                   	ret    

c0001f01 <sum_sfn>:
c0001f01:	31 c9                	xor    ecx,ecx
c0001f03:	31 d2                	xor    edx,edx
c0001f05:	d0 ca                	ror    dl,1
c0001f07:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0a:	41                   	inc    ecx
c0001f0b:	83 f9 0b             	cmp    ecx,0xb
c0001f0e:	75 f5                	jne    c0001f05 <sum_sfn+0x4>
c0001f10:	88 d0                	mov    al,dl
c0001f12:	c3                   	ret    

c0001f13 <xdir_sum>:
c0001f13:	56                   	push   esi
c0001f14:	31 c9                	xor    ecx,ecx
c0001f16:	53                   	push   ebx
c0001f17:	31 d2                	xor    edx,edx
c0001f19:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f1d:	43                   	inc    ebx
c0001f1e:	c1 e3 05             	shl    ebx,0x5
c0001f21:	83 fa 02             	cmp    edx,0x2
c0001f24:	74 0b                	je     c0001f31 <xdir_sum+0x1e>
c0001f26:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2a:	66 d1 c9             	ror    cx,1
c0001f2d:	01 f1                	add    ecx,esi
c0001f2f:	eb 05                	jmp    c0001f36 <xdir_sum+0x23>
c0001f31:	ba 03 00 00 00       	mov    edx,0x3
c0001f36:	42                   	inc    edx
c0001f37:	39 d3                	cmp    ebx,edx
c0001f39:	77 e6                	ja     c0001f21 <xdir_sum+0xe>
c0001f3b:	5b                   	pop    ebx
c0001f3c:	89 c8                	mov    eax,ecx
c0001f3e:	5e                   	pop    esi
c0001f3f:	c3                   	ret    

c0001f40 <xsum32>:
c0001f40:	d1 ca                	ror    edx,1
c0001f42:	0f b6 c0             	movzx  eax,al
c0001f45:	01 d0                	add    eax,edx
c0001f47:	c3                   	ret    

c0001f48 <get_xfileinfo>:
c0001f48:	55                   	push   ebp
c0001f49:	31 c9                	xor    ecx,ecx
c0001f4b:	57                   	push   edi
c0001f4c:	bd 40 00 00 00       	mov    ebp,0x40
c0001f51:	56                   	push   esi
c0001f52:	31 ff                	xor    edi,edi
c0001f54:	53                   	push   ebx
c0001f55:	89 c6                	mov    esi,eax
c0001f57:	83 ec 0c             	sub    esp,0xc
c0001f5a:	89 d3                	mov    ebx,edx
c0001f5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f63:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f67:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6a:	76 6d                	jbe    c0001fd9 <get_xfileinfo+0x91>
c0001f6c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f72:	76 0b                	jbe    c0001f7f <get_xfileinfo+0x37>
c0001f74:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f78:	bf 01 00 00 00       	mov    edi,0x1
c0001f7d:	eb 63                	jmp    c0001fe2 <get_xfileinfo+0x9a>
c0001f7f:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f85:	75 03                	jne    c0001f8a <get_xfileinfo+0x42>
c0001f87:	83 c5 02             	add    ebp,0x2
c0001f8a:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f8d:	83 c5 02             	add    ebp,0x2
c0001f90:	e8 b0 fa ff ff       	call   c0001a45 <ld_word>
c0001f95:	ff 04 24             	inc    DWORD PTR [esp]
c0001f98:	66 85 c9             	test   cx,cx
c0001f9b:	75 0d                	jne    c0001faa <get_xfileinfo+0x62>
c0001f9d:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fa8:	76 2b                	jbe    c0001fd5 <get_xfileinfo+0x8d>
c0001faa:	c1 e1 10             	shl    ecx,0x10
c0001fad:	ba ff 00 00 00       	mov    edx,0xff
c0001fb2:	29 fa                	sub    edx,edi
c0001fb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fb8:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fbc:	0f b7 c0             	movzx  eax,ax
c0001fbf:	09 c8                	or     eax,ecx
c0001fc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fc5:	e8 1b fc ff ff       	call   c0001be5 <put_utf>
c0001fca:	84 c0                	test   al,al
c0001fcc:	74 a6                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fce:	0f b6 c0             	movzx  eax,al
c0001fd1:	01 c7                	add    edi,eax
c0001fd3:	31 c0                	xor    eax,eax
c0001fd5:	89 c1                	mov    ecx,eax
c0001fd7:	eb 8a                	jmp    c0001f63 <get_xfileinfo+0x1b>
c0001fd9:	85 ff                	test   edi,edi
c0001fdb:	74 97                	je     c0001f74 <get_xfileinfo+0x2c>
c0001fdd:	66 85 c9             	test   cx,cx
c0001fe0:	75 92                	jne    c0001f74 <get_xfileinfo+0x2c>
c0001fe2:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fe7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001feb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fee:	31 c0                	xor    eax,eax
c0001ff0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ff3:	31 d2                	xor    edx,edx
c0001ff5:	80 e1 10             	and    cl,0x10
c0001ff8:	75 08                	jne    c0002002 <get_xfileinfo+0xba>
c0001ffa:	8d 46 38             	lea    eax,[esi+0x38]
c0001ffd:	e8 68 fa ff ff       	call   c0001a6a <ld_qword>
c0002002:	89 03                	mov    DWORD PTR [ebx],eax
c0002004:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002007:	8d 46 0c             	lea    eax,[esi+0xc]
c000200a:	e8 36 fa ff ff       	call   c0001a45 <ld_word>
c000200f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002013:	8d 46 0e             	lea    eax,[esi+0xe]
c0002016:	e8 2a fa ff ff       	call   c0001a45 <ld_word>
c000201b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000201f:	83 c4 0c             	add    esp,0xc
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <get_ldnumber>:
c0002027:	57                   	push   edi
c0002028:	56                   	push   esi
c0002029:	53                   	push   ebx
c000202a:	83 cb ff             	or     ebx,0xffffffff
c000202d:	8b 10                	mov    edx,DWORD PTR [eax]
c000202f:	85 d2                	test   edx,edx
c0002031:	74 34                	je     c0002067 <get_ldnumber+0x40>
c0002033:	89 c7                	mov    edi,eax
c0002035:	89 d1                	mov    ecx,edx
c0002037:	41                   	inc    ecx
c0002038:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000203b:	3c 1f                	cmp    al,0x1f
c000203d:	76 04                	jbe    c0002043 <get_ldnumber+0x1c>
c000203f:	3c 3a                	cmp    al,0x3a
c0002041:	75 f4                	jne    c0002037 <get_ldnumber+0x10>
c0002043:	31 db                	xor    ebx,ebx
c0002045:	3c 3a                	cmp    al,0x3a
c0002047:	75 1e                	jne    c0002067 <get_ldnumber+0x40>
c0002049:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000204c:	83 cb ff             	or     ebx,0xffffffff
c000204f:	8d 46 d0             	lea    eax,[esi-0x30]
c0002052:	3c 09                	cmp    al,0x9
c0002054:	77 11                	ja     c0002067 <get_ldnumber+0x40>
c0002056:	83 c2 02             	add    edx,0x2
c0002059:	39 d1                	cmp    ecx,edx
c000205b:	75 0a                	jne    c0002067 <get_ldnumber+0x40>
c000205d:	89 f0                	mov    eax,esi
c000205f:	89 0f                	mov    DWORD PTR [edi],ecx
c0002061:	0f be d8             	movsx  ebx,al
c0002064:	83 eb 30             	sub    ebx,0x30
c0002067:	89 d8                	mov    eax,ebx
c0002069:	5b                   	pop    ebx
c000206a:	5e                   	pop    esi
c000206b:	5f                   	pop    edi
c000206c:	c3                   	ret    

c000206d <crc32>:
c000206d:	56                   	push   esi
c000206e:	89 d6                	mov    esi,edx
c0002070:	53                   	push   ebx
c0002071:	b2 01                	mov    dl,0x1
c0002073:	bb 08 00 00 00       	mov    ebx,0x8
c0002078:	89 f1                	mov    ecx,esi
c000207a:	84 d1                	test   cl,dl
c000207c:	0f 95 c1             	setne  cl
c000207f:	0f b6 c9             	movzx  ecx,cl
c0002082:	31 c1                	xor    ecx,eax
c0002084:	89 c8                	mov    eax,ecx
c0002086:	d1 e8                	shr    eax,1
c0002088:	80 e1 01             	and    cl,0x1
c000208b:	74 05                	je     c0002092 <crc32+0x25>
c000208d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002092:	01 d2                	add    edx,edx
c0002094:	4b                   	dec    ebx
c0002095:	75 e1                	jne    c0002078 <crc32+0xb>
c0002097:	5b                   	pop    ebx
c0002098:	5e                   	pop    esi
c0002099:	c3                   	ret    

c000209a <test_gpt_header>:
c000209a:	55                   	push   ebp
c000209b:	b9 10 00 00 00       	mov    ecx,0x10
c00020a0:	57                   	push   edi
c00020a1:	ba 40 03 02 c0       	mov    edx,0xc0020340
c00020a6:	56                   	push   esi
c00020a7:	31 ff                	xor    edi,edi
c00020a9:	53                   	push   ebx
c00020aa:	89 c3                	mov    ebx,eax
c00020ac:	e8 33 fa ff ff       	call   c0001ae4 <mem_cmp>
c00020b1:	85 c0                	test   eax,eax
c00020b3:	75 55                	jne    c000210a <test_gpt_header+0x70>
c00020b5:	89 c7                	mov    edi,eax
c00020b7:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020bc:	83 ce ff             	or     esi,0xffffffff
c00020bf:	31 d2                	xor    edx,edx
c00020c1:	83 fd 03             	cmp    ebp,0x3
c00020c4:	76 05                	jbe    c00020cb <test_gpt_header+0x31>
c00020c6:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020cb:	89 f0                	mov    eax,esi
c00020cd:	45                   	inc    ebp
c00020ce:	e8 9a ff ff ff       	call   c000206d <crc32>
c00020d3:	83 fd 4c             	cmp    ebp,0x4c
c00020d6:	89 c6                	mov    esi,eax
c00020d8:	75 e5                	jne    c00020bf <test_gpt_header+0x25>
c00020da:	8d 43 10             	lea    eax,[ebx+0x10]
c00020dd:	e8 70 f9 ff ff       	call   c0001a52 <ld_dword>
c00020e2:	f7 d6                	not    esi
c00020e4:	39 c6                	cmp    esi,eax
c00020e6:	75 22                	jne    c000210a <test_gpt_header+0x70>
c00020e8:	8d 43 54             	lea    eax,[ebx+0x54]
c00020eb:	e8 62 f9 ff ff       	call   c0001a52 <ld_dword>
c00020f0:	83 c0 80             	add    eax,0xffffff80
c00020f3:	75 15                	jne    c000210a <test_gpt_header+0x70>
c00020f5:	8d 43 50             	lea    eax,[ebx+0x50]
c00020f8:	e8 55 f9 ff ff       	call   c0001a52 <ld_dword>
c00020fd:	3d 80 00 00 00       	cmp    eax,0x80
c0002102:	0f 96 c0             	setbe  al
c0002105:	0f b6 c0             	movzx  eax,al
c0002108:	89 c7                	mov    edi,eax
c000210a:	5b                   	pop    ebx
c000210b:	89 f8                	mov    eax,edi
c000210d:	5e                   	pop    esi
c000210e:	5f                   	pop    edi
c000210f:	5d                   	pop    ebp
c0002110:	c3                   	ret    

c0002111 <make_rand>:
c0002111:	56                   	push   esi
c0002112:	85 c0                	test   eax,eax
c0002114:	53                   	push   ebx
c0002115:	75 05                	jne    c000211c <make_rand+0xb>
c0002117:	b8 01 00 00 00       	mov    eax,0x1
c000211c:	01 d1                	add    ecx,edx
c000211e:	bb 08 00 00 00       	mov    ebx,0x8
c0002123:	89 c6                	mov    esi,eax
c0002125:	d1 e8                	shr    eax,1
c0002127:	83 e6 01             	and    esi,0x1
c000212a:	85 f6                	test   esi,esi
c000212c:	74 05                	je     c0002133 <make_rand+0x22>
c000212e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002133:	4b                   	dec    ebx
c0002134:	75 ed                	jne    c0002123 <make_rand+0x12>
c0002136:	42                   	inc    edx
c0002137:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000213a:	39 ca                	cmp    edx,ecx
c000213c:	75 e0                	jne    c000211e <make_rand+0xd>
c000213e:	5b                   	pop    ebx
c000213f:	5e                   	pop    esi
c0002140:	c3                   	ret    

c0002141 <validate>:
c0002141:	56                   	push   esi
c0002142:	89 d6                	mov    esi,edx
c0002144:	53                   	push   ebx
c0002145:	85 c0                	test   eax,eax
c0002147:	51                   	push   ecx
c0002148:	75 09                	jne    c0002153 <validate+0x12>
c000214a:	b8 09 00 00 00       	mov    eax,0x9
c000214f:	31 c9                	xor    ecx,ecx
c0002151:	eb 2f                	jmp    c0002182 <validate+0x41>
c0002153:	89 c3                	mov    ebx,eax
c0002155:	8b 00                	mov    eax,DWORD PTR [eax]
c0002157:	85 c0                	test   eax,eax
c0002159:	74 ef                	je     c000214a <validate+0x9>
c000215b:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000215e:	74 ea                	je     c000214a <validate+0x9>
c0002160:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002164:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002168:	75 e0                	jne    c000214a <validate+0x9>
c000216a:	83 ec 0c             	sub    esp,0xc
c000216d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002171:	50                   	push   eax
c0002172:	e8 7d f8 ff ff       	call   c00019f4 <disk_status>
c0002177:	83 c4 10             	add    esp,0x10
c000217a:	a8 01                	test   al,0x1
c000217c:	75 cc                	jne    c000214a <validate+0x9>
c000217e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002180:	31 c0                	xor    eax,eax
c0002182:	89 0e                	mov    DWORD PTR [esi],ecx
c0002184:	5a                   	pop    edx
c0002185:	5b                   	pop    ebx
c0002186:	5e                   	pop    esi
c0002187:	c3                   	ret    

c0002188 <sync_window>:
c0002188:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000218c:	0f 84 85 00 00 00    	je     c0002217 <sync_window+0x8f>
c0002192:	55                   	push   ebp
c0002193:	8d 68 54             	lea    ebp,[eax+0x54]
c0002196:	57                   	push   edi
c0002197:	56                   	push   esi
c0002198:	53                   	push   ebx
c0002199:	89 c3                	mov    ebx,eax
c000219b:	83 ec 28             	sub    esp,0x28
c000219e:	6a 01                	push   0x1
c00021a0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021a3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021a6:	55                   	push   ebp
c00021a7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ab:	50                   	push   eax
c00021ac:	e8 5f f8 ff ff       	call   c0001a10 <disk_write>
c00021b1:	83 c4 20             	add    esp,0x20
c00021b4:	ba 01 00 00 00       	mov    edx,0x1
c00021b9:	85 c0                	test   eax,eax
c00021bb:	75 50                	jne    c000220d <sync_window+0x85>
c00021bd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021c7:	89 c6                	mov    esi,eax
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021ce:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d5:	89 d7                	mov    edi,edx
c00021d7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021db:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021de:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e2:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021e6:	73 23                	jae    c000220b <sync_window+0x83>
c00021e8:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021ec:	75 1d                	jne    c000220b <sync_window+0x83>
c00021ee:	83 ec 0c             	sub    esp,0xc
c00021f1:	6a 01                	push   0x1
c00021f3:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021f7:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021fb:	52                   	push   edx
c00021fc:	50                   	push   eax
c00021fd:	55                   	push   ebp
c00021fe:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002202:	50                   	push   eax
c0002203:	e8 08 f8 ff ff       	call   c0001a10 <disk_write>
c0002208:	83 c4 20             	add    esp,0x20
c000220b:	31 d2                	xor    edx,edx
c000220d:	83 c4 1c             	add    esp,0x1c
c0002210:	89 d0                	mov    eax,edx
c0002212:	5b                   	pop    ebx
c0002213:	5e                   	pop    esi
c0002214:	5f                   	pop    edi
c0002215:	5d                   	pop    ebp
c0002216:	c3                   	ret    
c0002217:	31 d2                	xor    edx,edx
c0002219:	89 d0                	mov    eax,edx
c000221b:	c3                   	ret    

c000221c <move_window>:
c000221c:	56                   	push   esi
c000221d:	53                   	push   ebx
c000221e:	89 c3                	mov    ebx,eax
c0002220:	83 ec 14             	sub    esp,0x14
c0002223:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002226:	75 07                	jne    c000222f <move_window+0x13>
c0002228:	31 f6                	xor    esi,esi
c000222a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000222d:	74 59                	je     c0002288 <move_window+0x6c>
c000222f:	89 d8                	mov    eax,ebx
c0002231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002239:	e8 4a ff ff ff       	call   c0002188 <sync_window>
c000223e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002242:	89 c6                	mov    esi,eax
c0002244:	85 c0                	test   eax,eax
c0002246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000224a:	75 3c                	jne    c0002288 <move_window+0x6c>
c000224c:	83 ec 0c             	sub    esp,0xc
c000224f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002252:	6a 01                	push   0x1
c0002254:	51                   	push   ecx
c0002255:	52                   	push   edx
c0002256:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000225a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000225e:	50                   	push   eax
c000225f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002263:	50                   	push   eax
c0002264:	e8 91 f7 ff ff       	call   c00019fa <disk_read>
c0002269:	83 c4 20             	add    esp,0x20
c000226c:	85 c0                	test   eax,eax
c000226e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002272:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002276:	74 0a                	je     c0002282 <move_window+0x66>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	89 d1                	mov    ecx,edx
c0002282:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002285:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002288:	83 c4 14             	add    esp,0x14
c000228b:	89 f0                	mov    eax,esi
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <check_fs>:
c0002290:	53                   	push   ebx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	83 ec 08             	sub    esp,0x8
c0002296:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000229a:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022a8:	e8 6f ff ff ff       	call   c000221c <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	0f 85 89 00 00 00    	jne    c0002343 <check_fs+0xb3>
c00022ba:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c0:	e8 80 f7 ff ff       	call   c0001a45 <ld_word>
c00022c5:	ba 03 00 00 00       	mov    edx,0x3
c00022ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ce:	75 73                	jne    c0002343 <check_fs+0xb3>
c00022d0:	ba 60 04 02 c0       	mov    edx,0xc0020460
c00022d5:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00022dd:	e8 02 f8 ff ff       	call   c0001ae4 <mem_cmp>
c00022e2:	ba 01 00 00 00       	mov    edx,0x1
c00022e7:	85 c0                	test   eax,eax
c00022e9:	74 58                	je     c0002343 <check_fs+0xb3>
c00022eb:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022ee:	8d 50 18             	lea    edx,[eax+0x18]
c00022f1:	80 fa 01             	cmp    dl,0x1
c00022f4:	76 09                	jbe    c00022ff <check_fs+0x6f>
c00022f6:	ba 02 00 00 00       	mov    edx,0x2
c00022fb:	3c eb                	cmp    al,0xeb
c00022fd:	75 44                	jne    c0002343 <check_fs+0xb3>
c00022ff:	ba ec 30 02 c0       	mov    edx,0xc00230ec
c0002304:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000230a:	b9 03 00 00 00       	mov    ecx,0x3
c000230f:	e8 d0 f7 ff ff       	call   c0001ae4 <mem_cmp>
c0002314:	31 d2                	xor    edx,edx
c0002316:	85 c0                	test   eax,eax
c0002318:	74 29                	je     c0002343 <check_fs+0xb3>
c000231a:	ba 6c 04 02 c0       	mov    edx,0xc002046c
c000231f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002325:	b9 05 00 00 00       	mov    ecx,0x5
c000232a:	e8 b5 f7 ff ff       	call   c0001ae4 <mem_cmp>
c000232f:	31 d2                	xor    edx,edx
c0002331:	85 c0                	test   eax,eax
c0002333:	74 0e                	je     c0002343 <check_fs+0xb3>
c0002335:	31 d2                	xor    edx,edx
c0002337:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000233e:	0f 95 c2             	setne  dl
c0002341:	01 d2                	add    edx,edx
c0002343:	83 c4 08             	add    esp,0x8
c0002346:	89 d0                	mov    eax,edx
c0002348:	5b                   	pop    ebx
c0002349:	c3                   	ret    

c000234a <find_volume>:
c000234a:	55                   	push   ebp
c000234b:	31 c9                	xor    ecx,ecx
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	89 d6                	mov    esi,edx
c0002351:	53                   	push   ebx
c0002352:	31 d2                	xor    edx,edx
c0002354:	83 ec 3c             	sub    esp,0x3c
c0002357:	89 c3                	mov    ebx,eax
c0002359:	e8 32 ff ff ff       	call   c0002290 <check_fs>
c000235e:	83 f8 02             	cmp    eax,0x2
c0002361:	74 0e                	je     c0002371 <find_volume+0x27>
c0002363:	0f 87 56 01 00 00    	ja     c00024bf <find_volume+0x175>
c0002369:	85 f6                	test   esi,esi
c000236b:	0f 84 4e 01 00 00    	je     c00024bf <find_volume+0x175>
c0002371:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002378:	0f 85 df 00 00 00    	jne    c000245d <find_volume+0x113>
c000237e:	31 c9                	xor    ecx,ecx
c0002380:	ba 01 00 00 00       	mov    edx,0x1
c0002385:	89 d8                	mov    eax,ebx
c0002387:	e8 90 fe ff ff       	call   c000221c <move_window>
c000238c:	85 c0                	test   eax,eax
c000238e:	74 0a                	je     c000239a <find_volume+0x50>
c0002390:	b8 04 00 00 00       	mov    eax,0x4
c0002395:	e9 25 01 00 00       	jmp    c00024bf <find_volume+0x175>
c000239a:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000239d:	89 e8                	mov    eax,ebp
c000239f:	e8 f6 fc ff ff       	call   c000209a <test_gpt_header>
c00023a4:	85 c0                	test   eax,eax
c00023a6:	75 0a                	jne    c00023b2 <find_volume+0x68>
c00023a8:	b8 03 00 00 00       	mov    eax,0x3
c00023ad:	e9 0d 01 00 00       	jmp    c00024bf <find_volume+0x175>
c00023b2:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023b8:	e8 95 f6 ff ff       	call   c0001a52 <ld_dword>
c00023bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c1:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023c7:	e8 9e f6 ff ff       	call   c0001a6a <ld_qword>
c00023cc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023e4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023ec:	74 ba                	je     c00023a8 <find_volume+0x5e>
c00023ee:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f2:	31 c9                	xor    ecx,ecx
c00023f4:	c1 e7 07             	shl    edi,0x7
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	89 fa                	mov    edx,edi
c00023fb:	c1 ea 09             	shr    edx,0x9
c00023fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002402:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002406:	e8 11 fe ff ff       	call   c000221c <move_window>
c000240b:	85 c0                	test   eax,eax
c000240d:	75 81                	jne    c0002390 <find_volume+0x46>
c000240f:	81 e7 80 01 00 00    	and    edi,0x180
c0002415:	b9 10 00 00 00       	mov    ecx,0x10
c000241a:	ba 50 04 02 c0       	mov    edx,0xc0020450
c000241f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002423:	e8 bc f6 ff ff       	call   c0001ae4 <mem_cmp>
c0002428:	85 c0                	test   eax,eax
c000242a:	75 2b                	jne    c0002457 <find_volume+0x10d>
c000242c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002430:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002434:	e8 31 f6 ff ff       	call   c0001a6a <ld_qword>
c0002439:	89 d1                	mov    ecx,edx
c000243b:	89 c2                	mov    edx,eax
c000243d:	89 d8                	mov    eax,ebx
c000243f:	e8 4c fe ff ff       	call   c0002290 <check_fs>
c0002444:	85 f6                	test   esi,esi
c0002446:	75 05                	jne    c000244d <find_volume+0x103>
c0002448:	83 f8 01             	cmp    eax,0x1
c000244b:	76 72                	jbe    c00024bf <find_volume+0x175>
c000244d:	85 f6                	test   esi,esi
c000244f:	74 06                	je     c0002457 <find_volume+0x10d>
c0002451:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002455:	74 68                	je     c00024bf <find_volume+0x175>
c0002457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000245b:	eb 87                	jmp    c00023e4 <find_volume+0x9a>
c000245d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002461:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002467:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000246d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002471:	89 cd                	mov    ebp,ecx
c0002473:	89 f8                	mov    eax,edi
c0002475:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002479:	e8 d4 f5 ff ff       	call   c0001a52 <ld_dword>
c000247e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002482:	83 c7 10             	add    edi,0x10
c0002485:	83 c1 04             	add    ecx,0x4
c0002488:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000248b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000248f:	75 e2                	jne    c0002473 <find_volume+0x129>
c0002491:	31 ff                	xor    edi,edi
c0002493:	85 f6                	test   esi,esi
c0002495:	74 03                	je     c000249a <find_volume+0x150>
c0002497:	8d 7e ff             	lea    edi,[esi-0x1]
c000249a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000249e:	b8 03 00 00 00       	mov    eax,0x3
c00024a3:	85 d2                	test   edx,edx
c00024a5:	74 09                	je     c00024b0 <find_volume+0x166>
c00024a7:	31 c9                	xor    ecx,ecx
c00024a9:	89 d8                	mov    eax,ebx
c00024ab:	e8 e0 fd ff ff       	call   c0002290 <check_fs>
c00024b0:	85 f6                	test   esi,esi
c00024b2:	75 0b                	jne    c00024bf <find_volume+0x175>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 06                	jbe    c00024bf <find_volume+0x175>
c00024b9:	47                   	inc    edi
c00024ba:	83 ff 03             	cmp    edi,0x3
c00024bd:	76 db                	jbe    c000249a <find_volume+0x150>
c00024bf:	83 c4 3c             	add    esp,0x3c
c00024c2:	5b                   	pop    ebx
c00024c3:	5e                   	pop    esi
c00024c4:	5f                   	pop    edi
c00024c5:	5d                   	pop    ebp
c00024c6:	c3                   	ret    

c00024c7 <mount_volume>:
c00024c7:	55                   	push   ebp
c00024c8:	57                   	push   edi
c00024c9:	89 cf                	mov    edi,ecx
c00024cb:	56                   	push   esi
c00024cc:	53                   	push   ebx
c00024cd:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d2:	83 ec 3c             	sub    esp,0x3c
c00024d5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024df:	e8 43 fb ff ff       	call   c0002027 <get_ldnumber>
c00024e4:	85 c0                	test   eax,eax
c00024e6:	0f 88 3b 05 00 00    	js     c0002a27 <mount_volume+0x560>
c00024ec:	8b 2c 85 60 45 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbaa0]
c00024f3:	89 c6                	mov    esi,eax
c00024f5:	bb 0c 00 00 00       	mov    ebx,0xc
c00024fa:	85 ed                	test   ebp,ebp
c00024fc:	0f 84 25 05 00 00    	je     c0002a27 <mount_volume+0x560>
c0002502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002506:	83 e7 fe             	and    edi,0xfffffffe
c0002509:	89 2a                	mov    DWORD PTR [edx],ebp
c000250b:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000250f:	74 32                	je     c0002543 <mount_volume+0x7c>
c0002511:	83 ec 0c             	sub    esp,0xc
c0002514:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002518:	50                   	push   eax
c0002519:	e8 d6 f4 ff ff       	call   c00019f4 <disk_status>
c000251e:	83 c4 10             	add    esp,0x10
c0002521:	a8 01                	test   al,0x1
c0002523:	75 1e                	jne    c0002543 <mount_volume+0x7c>
c0002525:	89 f9                	mov    ecx,edi
c0002527:	31 db                	xor    ebx,ebx
c0002529:	84 c9                	test   cl,cl
c000252b:	0f 84 f6 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002531:	a8 04                	test   al,0x4
c0002533:	0f 84 ee 04 00 00    	je     c0002a27 <mount_volume+0x560>
c0002539:	bb 0a 00 00 00       	mov    ebx,0xa
c000253e:	e9 e4 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002543:	83 ec 0c             	sub    esp,0xc
c0002546:	89 f0                	mov    eax,esi
c0002548:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000254c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000254f:	0f b6 f0             	movzx  esi,al
c0002552:	56                   	push   esi
c0002553:	e8 9f f4 ff ff       	call   c00019f7 <disk_initialize>
c0002558:	bb 03 00 00 00       	mov    ebx,0x3
c000255d:	83 c4 10             	add    esp,0x10
c0002560:	a8 01                	test   al,0x1
c0002562:	0f 85 bf 04 00 00    	jne    c0002a27 <mount_volume+0x560>
c0002568:	89 f9                	mov    ecx,edi
c000256a:	84 c9                	test   cl,cl
c000256c:	74 04                	je     c0002572 <mount_volume+0xab>
c000256e:	a8 04                	test   al,0x4
c0002570:	75 c7                	jne    c0002539 <mount_volume+0x72>
c0002572:	31 d2                	xor    edx,edx
c0002574:	89 e8                	mov    eax,ebp
c0002576:	e8 cf fd ff ff       	call   c000234a <find_volume>
c000257b:	83 f8 04             	cmp    eax,0x4
c000257e:	75 0a                	jne    c000258a <mount_volume+0xc3>
c0002580:	bb 01 00 00 00       	mov    ebx,0x1
c0002585:	e9 9d 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000258a:	83 f8 01             	cmp    eax,0x1
c000258d:	76 0a                	jbe    c0002599 <mount_volume+0xd2>
c000258f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002594:	e9 8e 04 00 00       	jmp    c0002a27 <mount_volume+0x560>
c0002599:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000259c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000259f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025a7:	75 17                	jne    c00025c0 <mount_volume+0xf9>
c00025a9:	b8 0b 00 00 00       	mov    eax,0xb
c00025ae:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025b3:	75 da                	jne    c000258f <mount_volume+0xc8>
c00025b5:	40                   	inc    eax
c00025b6:	83 f8 40             	cmp    eax,0x40
c00025b9:	75 f3                	jne    c00025ae <mount_volume+0xe7>
c00025bb:	e9 5a 02 00 00       	jmp    c000281a <mount_volume+0x353>
c00025c0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025c3:	e8 7d f4 ff ff       	call   c0001a45 <ld_word>
c00025c8:	66 3d 00 02          	cmp    ax,0x200
c00025cc:	75 c1                	jne    c000258f <mount_volume+0xc8>
c00025ce:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d1:	e8 6f f4 ff ff       	call   c0001a45 <ld_word>
c00025d6:	0f b7 c0             	movzx  eax,ax
c00025d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dd:	85 c0                	test   eax,eax
c00025df:	75 0c                	jne    c00025ed <mount_volume+0x126>
c00025e1:	8d 45 78             	lea    eax,[ebp+0x78]
c00025e4:	e8 69 f4 ff ff       	call   c0001a52 <ld_dword>
c00025e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025f4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025f7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025fb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025fe:	48                   	dec    eax
c00025ff:	3c 01                	cmp    al,0x1
c0002601:	77 8c                	ja     c000258f <mount_volume+0xc8>
c0002603:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002607:	89 c3                	mov    ebx,eax
c0002609:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000260d:	66 85 c0             	test   ax,ax
c0002610:	0f 84 79 ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002616:	8d 40 ff             	lea    eax,[eax-0x1]
c0002619:	85 d8                	test   eax,ebx
c000261b:	0f 85 6e ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002621:	8d 45 65             	lea    eax,[ebp+0x65]
c0002624:	e8 1c f4 ff ff       	call   c0001a45 <ld_word>
c0002629:	89 c7                	mov    edi,eax
c000262b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000262f:	a8 0f                	test   al,0xf
c0002631:	0f 85 58 ff ff ff    	jne    c000258f <mount_volume+0xc8>
c0002637:	8d 45 67             	lea    eax,[ebp+0x67]
c000263a:	e8 06 f4 ff ff       	call   c0001a45 <ld_word>
c000263f:	0f b7 f0             	movzx  esi,ax
c0002642:	85 f6                	test   esi,esi
c0002644:	75 0a                	jne    c0002650 <mount_volume+0x189>
c0002646:	8d 45 74             	lea    eax,[ebp+0x74]
c0002649:	e8 04 f4 ff ff       	call   c0001a52 <ld_dword>
c000264e:	89 c6                	mov    esi,eax
c0002650:	8d 45 62             	lea    eax,[ebp+0x62]
c0002653:	e8 ed f3 ff ff       	call   c0001a45 <ld_word>
c0002658:	66 85 c0             	test   ax,ax
c000265b:	0f 84 2e ff ff ff    	je     c000258f <mount_volume+0xc8>
c0002661:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002666:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000266b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000266f:	89 fa                	mov    edx,edi
c0002671:	66 c1 ea 04          	shr    dx,0x4
c0002675:	0f b7 d2             	movzx  edx,dx
c0002678:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000267c:	0f b7 c8             	movzx  ecx,ax
c000267f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002682:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002686:	39 c6                	cmp    esi,eax
c0002688:	0f 82 01 ff ff ff    	jb     c000258f <mount_volume+0xc8>
c000268e:	29 c6                	sub    esi,eax
c0002690:	31 d2                	xor    edx,edx
c0002692:	89 f0                	mov    eax,esi
c0002694:	f7 f3                	div    ebx
c0002696:	39 de                	cmp    esi,ebx
c0002698:	0f 82 f1 fe ff ff    	jb     c000258f <mount_volume+0xc8>
c000269e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026a3:	0f 87 e6 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c00026a9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026ae:	0f 86 63 03 00 00    	jbe    c0002a17 <mount_volume+0x550>
c00026b4:	bb 03 00 00 00       	mov    ebx,0x3
c00026b9:	8d 70 02             	lea    esi,[eax+0x2]
c00026bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026c4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026c7:	89 c8                	mov    eax,ecx
c00026c9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026cc:	31 d2                	xor    edx,edx
c00026ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026d6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026da:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026e5:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026e8:	31 d2                	xor    edx,edx
c00026ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026ee:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026f5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026f8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 2b                	jne    c000272b <mount_volume+0x264>
c0002700:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002703:	e8 3d f3 ff ff       	call   c0001a45 <ld_word>
c0002708:	66 09 c7             	or     di,ax
c000270b:	0f 85 7e fe ff ff    	jne    c000258f <mount_volume+0xc8>
c0002711:	c1 e6 02             	shl    esi,0x2
c0002714:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000271a:	e8 33 f3 ff ff       	call   c0001a52 <ld_dword>
c000271f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002726:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002729:	eb 30                	jmp    c000275b <mount_volume+0x294>
c000272b:	66 85 ff             	test   di,di
c000272e:	0f 84 5b fe ff ff    	je     c000258f <mount_volume+0xc8>
c0002734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002738:	31 d2                	xor    edx,edx
c000273a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000273e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002742:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002745:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002748:	83 fb 02             	cmp    ebx,0x2
c000274b:	75 04                	jne    c0002751 <mount_volume+0x28a>
c000274d:	01 f6                	add    esi,esi
c000274f:	eb 0a                	jmp    c000275b <mount_volume+0x294>
c0002751:	8d 04 76             	lea    eax,[esi+esi*2]
c0002754:	83 e6 01             	and    esi,0x1
c0002757:	d1 e8                	shr    eax,1
c0002759:	01 c6                	add    esi,eax
c000275b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002761:	c1 ee 09             	shr    esi,0x9
c0002764:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002768:	0f 87 21 fe ff ff    	ja     c000258f <mount_volume+0xc8>
c000276e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002775:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000277c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002780:	83 fb 03             	cmp    ebx,0x3
c0002783:	75 7a                	jne    c00027ff <mount_volume+0x338>
c0002785:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000278b:	e8 b5 f2 ff ff       	call   c0001a45 <ld_word>
c0002790:	66 48                	dec    ax
c0002792:	75 6b                	jne    c00027ff <mount_volume+0x338>
c0002794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002798:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279c:	83 c2 01             	add    edx,0x1
c000279f:	89 e8                	mov    eax,ebp
c00027a1:	83 d1 00             	adc    ecx,0x0
c00027a4:	e8 73 fa ff ff       	call   c000221c <move_window>
c00027a9:	85 c0                	test   eax,eax
c00027ab:	75 52                	jne    c00027ff <mount_volume+0x338>
c00027ad:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027b7:	e8 89 f2 ff ff       	call   c0001a45 <ld_word>
c00027bc:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c0:	75 3d                	jne    c00027ff <mount_volume+0x338>
c00027c2:	8d 45 54             	lea    eax,[ebp+0x54]
c00027c5:	e8 88 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ca:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027cf:	75 2e                	jne    c00027ff <mount_volume+0x338>
c00027d1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027d7:	e8 76 f2 ff ff       	call   c0001a52 <ld_dword>
c00027dc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e1:	75 1c                	jne    c00027ff <mount_volume+0x338>
c00027e3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027e9:	e8 64 f2 ff ff       	call   c0001a52 <ld_dword>
c00027ee:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027f7:	e8 56 f2 ff ff       	call   c0001a52 <ld_dword>
c00027fc:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ff:	66 a1 40 45 02 c0    	mov    ax,ds:0xc0024540
c0002805:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002808:	40                   	inc    eax
c0002809:	31 db                	xor    ebx,ebx
c000280b:	66 a3 40 45 02 c0    	mov    ds:0xc0024540,ax
c0002811:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002815:	e9 0d 02 00 00       	jmp    c0002a27 <mount_volume+0x560>
c000281a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002820:	e8 20 f2 ff ff       	call   c0001a45 <ld_word>
c0002825:	66 3d 00 01          	cmp    ax,0x100
c0002829:	0f 85 60 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000282f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002836:	0f 85 53 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000283c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002842:	e8 23 f2 ff ff       	call   c0001a6a <ld_qword>
c0002847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000284b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002851:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002855:	e8 f8 f1 ff ff       	call   c0001a52 <ld_dword>
c000285a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000285d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002863:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002866:	fe c8                	dec    al
c0002868:	0f 85 21 fd ff ff    	jne    c000258f <mount_volume+0xc8>
c000286e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002875:	bb 01 00 00 00       	mov    ebx,0x1
c000287a:	d3 e3                	shl    ebx,cl
c000287c:	66 85 db             	test   bx,bx
c000287f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002883:	0f 84 06 fd ff ff    	je     c000258f <mount_volume+0xc8>
c0002889:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000288f:	e8 be f1 ff ff       	call   c0001a52 <ld_dword>
c0002894:	89 c6                	mov    esi,eax
c0002896:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c000289b:	0f 87 ee fc ff ff    	ja     c000258f <mount_volume+0xc8>
c00028a1:	8d 40 02             	lea    eax,[eax+0x2]
c00028a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a8:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028af:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028bb:	e8 92 f1 ff ff       	call   c0001a52 <ld_dword>
c00028c0:	31 d2                	xor    edx,edx
c00028c2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028ce:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028d4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028de:	e8 6f f1 ff ff       	call   c0001a52 <ld_dword>
c00028e3:	31 d2                	xor    edx,edx
c00028e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028f4:	0f b7 c3             	movzx  eax,bx
c00028f7:	0f af f0             	imul   esi,eax
c00028fa:	89 f0                	mov    eax,esi
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	31 d2                	xor    edx,edx
c0002901:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002905:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002909:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000290d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002911:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002915:	39 c1                	cmp    ecx,eax
c0002917:	89 df                	mov    edi,ebx
c0002919:	19 d7                	sbb    edi,edx
c000291b:	0f 82 6e fc ff ff    	jb     c000258f <mount_volume+0xc8>
c0002921:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002927:	31 db                	xor    ebx,ebx
c0002929:	e8 24 f1 ff ff       	call   c0001a52 <ld_dword>
c000292e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002935:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002940:	85 db                	test   ebx,ebx
c0002942:	75 39                	jne    c000297d <mount_volume+0x4b6>
c0002944:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002948:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000294c:	0f 86 3d fc ff ff    	jbe    c000258f <mount_volume+0xc8>
c0002952:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002955:	89 e8                	mov    eax,ebp
c0002957:	e8 82 f3 ff ff       	call   c0001cde <clst2sect>
c000295c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002960:	31 ff                	xor    edi,edi
c0002962:	01 c6                	add    esi,eax
c0002964:	11 d7                	adc    edi,edx
c0002966:	89 e8                	mov    eax,ebp
c0002968:	89 f2                	mov    edx,esi
c000296a:	89 f9                	mov    ecx,edi
c000296c:	e8 ab f8 ff ff       	call   c000221c <move_window>
c0002971:	85 c0                	test   eax,eax
c0002973:	0f 85 07 fc ff ff    	jne    c0002580 <mount_volume+0xb9>
c0002979:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000297d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002982:	74 0b                	je     c000298f <mount_volume+0x4c8>
c0002984:	83 c3 20             	add    ebx,0x20
c0002987:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000298d:	eb b1                	jmp    c0002940 <mount_volume+0x479>
c000298f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002992:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002996:	e8 b7 f0 ff ff       	call   c0001a52 <ld_dword>
c000299b:	89 c3                	mov    ebx,eax
c000299d:	83 f8 01             	cmp    eax,0x1
c00029a0:	0f 86 e9 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029a6:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029a9:	0f 86 e0 fb ff ff    	jbe    c000258f <mount_volume+0xc8>
c00029af:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029b3:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029b6:	0f af c2             	imul   eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029be:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029c4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029c7:	89 da                	mov    edx,ebx
c00029c9:	31 c9                	xor    ecx,ecx
c00029cb:	c1 ea 07             	shr    edx,0x7
c00029ce:	89 e8                	mov    eax,ebp
c00029d0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029d3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029d6:	e8 41 f8 ff ff       	call   c000221c <move_window>
c00029db:	85 c0                	test   eax,eax
c00029dd:	0f 85 9d fb ff ff    	jne    c0002580 <mount_volume+0xb9>
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 e0 7f             	and    eax,0x7f
c00029e8:	8d 04 86             	lea    eax,[esi+eax*4]
c00029eb:	e8 62 f0 ff ff       	call   c0001a52 <ld_dword>
c00029f0:	83 f8 ff             	cmp    eax,0xffffffff
c00029f3:	74 0a                	je     c00029ff <mount_volume+0x538>
c00029f5:	43                   	inc    ebx
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	74 cd                	je     c00029c7 <mount_volume+0x500>
c00029fa:	e9 90 fb ff ff       	jmp    c000258f <mount_volume+0xc8>
c00029ff:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a06:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a0d:	bb 04 00 00 00       	mov    ebx,0x4
c0002a12:	e9 e8 fd ff ff       	jmp    c00027ff <mount_volume+0x338>
c0002a17:	31 db                	xor    ebx,ebx
c0002a19:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a1e:	0f 97 c3             	seta   bl
c0002a21:	43                   	inc    ebx
c0002a22:	e9 92 fc ff ff       	jmp    c00026b9 <mount_volume+0x1f2>
c0002a27:	83 c4 3c             	add    esp,0x3c
c0002a2a:	89 d8                	mov    eax,ebx
c0002a2c:	5b                   	pop    ebx
c0002a2d:	5e                   	pop    esi
c0002a2e:	5f                   	pop    edi
c0002a2f:	5d                   	pop    ebp
c0002a30:	c3                   	ret    

c0002a31 <find_bitmap>:
c0002a31:	55                   	push   ebp
c0002a32:	57                   	push   edi
c0002a33:	89 c7                	mov    edi,eax
c0002a35:	56                   	push   esi
c0002a36:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a39:	53                   	push   ebx
c0002a3a:	83 ec 1c             	sub    esp,0x1c
c0002a3d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a40:	83 e8 02             	sub    eax,0x2
c0002a43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a47:	39 f0                	cmp    eax,esi
c0002a49:	77 02                	ja     c0002a4d <find_bitmap+0x1c>
c0002a4b:	31 f6                	xor    esi,esi
c0002a4d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a51:	89 f3                	mov    ebx,esi
c0002a53:	31 ed                	xor    ebp,ebp
c0002a55:	89 da                	mov    edx,ebx
c0002a57:	31 c9                	xor    ecx,ecx
c0002a59:	c1 ea 0c             	shr    edx,0xc
c0002a5c:	89 f8                	mov    eax,edi
c0002a5e:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a61:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a64:	e8 b3 f7 ff ff       	call   c000221c <move_window>
c0002a69:	85 c0                	test   eax,eax
c0002a6b:	75 68                	jne    c0002ad5 <find_bitmap+0xa4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	b8 01 00 00 00       	mov    eax,0x1
c0002a74:	83 e1 07             	and    ecx,0x7
c0002a77:	89 da                	mov    edx,ebx
c0002a79:	d3 e0                	shl    eax,cl
c0002a7b:	c1 ea 03             	shr    edx,0x3
c0002a7e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a81:	83 e9 02             	sub    ecx,0x2
c0002a84:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a8a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a8e:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a92:	43                   	inc    ebx
c0002a93:	21 c1                	and    ecx,eax
c0002a95:	01 c0                	add    eax,eax
c0002a97:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a9b:	77 09                	ja     c0002aa6 <find_bitmap+0x75>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	ba 00 02 00 00       	mov    edx,0x200
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	84 c9                	test   cl,cl
c0002aa8:	75 10                	jne    c0002aba <find_bitmap+0x89>
c0002aaa:	45                   	inc    ebp
c0002aab:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002aaf:	75 0f                	jne    c0002ac0 <find_bitmap+0x8f>
c0002ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ab5:	83 c0 02             	add    eax,0x2
c0002ab8:	eb 22                	jmp    c0002adc <find_bitmap+0xab>
c0002aba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002abe:	31 ed                	xor    ebp,ebp
c0002ac0:	39 de                	cmp    esi,ebx
c0002ac2:	74 16                	je     c0002ada <find_bitmap+0xa9>
c0002ac4:	84 c0                	test   al,al
c0002ac6:	75 c6                	jne    c0002a8e <find_bitmap+0x5d>
c0002ac8:	42                   	inc    edx
c0002ac9:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002acf:	77 84                	ja     c0002a55 <find_bitmap+0x24>
c0002ad1:	b0 01                	mov    al,0x1
c0002ad3:	eb b9                	jmp    c0002a8e <find_bitmap+0x5d>
c0002ad5:	83 c8 ff             	or     eax,0xffffffff
c0002ad8:	eb 02                	jmp    c0002adc <find_bitmap+0xab>
c0002ada:	31 c0                	xor    eax,eax
c0002adc:	83 c4 1c             	add    esp,0x1c
c0002adf:	5b                   	pop    ebx
c0002ae0:	5e                   	pop    esi
c0002ae1:	5f                   	pop    edi
c0002ae2:	5d                   	pop    ebp
c0002ae3:	c3                   	ret    

c0002ae4 <change_bitmap>:
c0002ae4:	55                   	push   ebp
c0002ae5:	89 cd                	mov    ebp,ecx
c0002ae7:	57                   	push   edi
c0002ae8:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002aeb:	56                   	push   esi
c0002aec:	89 c7                	mov    edi,eax
c0002aee:	53                   	push   ebx
c0002aef:	89 c8                	mov    eax,ecx
c0002af1:	83 ec 1c             	sub    esp,0x1c
c0002af4:	31 d2                	xor    edx,edx
c0002af6:	c1 e8 0c             	shr    eax,0xc
c0002af9:	89 ce                	mov    esi,ecx
c0002afb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002afe:	bb 01 00 00 00       	mov    ebx,0x1
c0002b03:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b06:	83 e1 07             	and    ecx,0x7
c0002b09:	c1 ee 03             	shr    esi,0x3
c0002b0c:	d3 e3                	shl    ebx,cl
c0002b0e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b14:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b18:	89 c1                	mov    ecx,eax
c0002b1a:	89 d3                	mov    ebx,edx
c0002b1c:	83 c1 01             	add    ecx,0x1
c0002b1f:	83 d3 00             	adc    ebx,0x0
c0002b22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b26:	89 d1                	mov    ecx,edx
c0002b28:	89 c2                	mov    edx,eax
c0002b2a:	89 f8                	mov    eax,edi
c0002b2c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b30:	e8 e7 f6 ff ff       	call   c000221c <move_window>
c0002b35:	89 c1                	mov    ecx,eax
c0002b37:	85 c0                	test   eax,eax
c0002b39:	75 48                	jne    c0002b83 <change_bitmap+0x9f>
c0002b3b:	31 d2                	xor    edx,edx
c0002b3d:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b41:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b45:	0f 95 c2             	setne  dl
c0002b48:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b4c:	74 3c                	je     c0002b8a <change_bitmap+0xa6>
c0002b4e:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b52:	4d                   	dec    ebp
c0002b53:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b57:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b5b:	74 32                	je     c0002b8f <change_bitmap+0xab>
c0002b5d:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b61:	75 d8                	jne    c0002b3b <change_bitmap+0x57>
c0002b63:	8d 46 01             	lea    eax,[esi+0x1]
c0002b66:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b6b:	89 c3                	mov    ebx,eax
c0002b6d:	31 f6                	xor    esi,esi
c0002b6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b77:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b7d:	74 99                	je     c0002b18 <change_bitmap+0x34>
c0002b7f:	89 de                	mov    esi,ebx
c0002b81:	eb b8                	jmp    c0002b3b <change_bitmap+0x57>
c0002b83:	b9 01 00 00 00       	mov    ecx,0x1
c0002b88:	eb 05                	jmp    c0002b8f <change_bitmap+0xab>
c0002b8a:	b9 02 00 00 00       	mov    ecx,0x2
c0002b8f:	83 c4 1c             	add    esp,0x1c
c0002b92:	89 c8                	mov    eax,ecx
c0002b94:	5b                   	pop    ebx
c0002b95:	5e                   	pop    esi
c0002b96:	5f                   	pop    edi
c0002b97:	5d                   	pop    ebp
c0002b98:	c3                   	ret    

c0002b99 <put_fat>:
c0002b99:	83 fa 01             	cmp    edx,0x1
c0002b9c:	0f 86 7b 01 00 00    	jbe    c0002d1d <put_fat+0x184>
c0002ba2:	55                   	push   ebp
c0002ba3:	57                   	push   edi
c0002ba4:	89 cf                	mov    edi,ecx
c0002ba6:	56                   	push   esi
c0002ba7:	b9 02 00 00 00       	mov    ecx,0x2
c0002bac:	53                   	push   ebx
c0002bad:	89 c6                	mov    esi,eax
c0002baf:	83 ec 1c             	sub    esp,0x1c
c0002bb2:	89 d3                	mov    ebx,edx
c0002bb4:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bb7:	0f 86 68 01 00 00    	jbe    c0002d25 <put_fat+0x18c>
c0002bbd:	8a 00                	mov    al,BYTE PTR [eax]
c0002bbf:	3c 02                	cmp    al,0x2
c0002bc1:	0f 84 c7 00 00 00    	je     c0002c8e <put_fat+0xf5>
c0002bc7:	77 09                	ja     c0002bd2 <put_fat+0x39>
c0002bc9:	fe c8                	dec    al
c0002bcb:	74 17                	je     c0002be4 <put_fat+0x4b>
c0002bcd:	e9 53 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002bd2:	b9 02 00 00 00       	mov    ecx,0x2
c0002bd7:	3c 04                	cmp    al,0x4
c0002bd9:	0f 86 e1 00 00 00    	jbe    c0002cc0 <put_fat+0x127>
c0002bdf:	e9 41 01 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002be4:	89 d5                	mov    ebp,edx
c0002be6:	31 c9                	xor    ecx,ecx
c0002be8:	d1 ed                	shr    ebp,1
c0002bea:	89 f0                	mov    eax,esi
c0002bec:	01 d5                	add    ebp,edx
c0002bee:	89 ea                	mov    edx,ebp
c0002bf0:	c1 ea 09             	shr    edx,0x9
c0002bf3:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bf6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf9:	e8 1e f6 ff ff       	call   c000221c <move_window>
c0002bfe:	89 c1                	mov    ecx,eax
c0002c00:	85 c0                	test   eax,eax
c0002c02:	0f 85 1d 01 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c08:	8d 46 54             	lea    eax,[esi+0x54]
c0002c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c0f:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c12:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c20:	83 e3 01             	and    ebx,0x1
c0002c23:	89 f8                	mov    eax,edi
c0002c25:	74 0d                	je     c0002c34 <put_fat+0x9b>
c0002c27:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c2a:	89 fa                	mov    edx,edi
c0002c2c:	c1 e2 04             	shl    edx,0x4
c0002c2f:	83 e0 0f             	and    eax,0xf
c0002c32:	09 d0                	or     eax,edx
c0002c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c38:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c3b:	c1 ea 09             	shr    edx,0x9
c0002c3e:	31 c9                	xor    ecx,ecx
c0002c40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c43:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c47:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c4a:	89 f0                	mov    eax,esi
c0002c4c:	e8 cb f5 ff ff       	call   c000221c <move_window>
c0002c51:	89 c1                	mov    ecx,eax
c0002c53:	85 c0                	test   eax,eax
c0002c55:	0f 85 ca 00 00 00    	jne    c0002d25 <put_fat+0x18c>
c0002c5b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c65:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c69:	85 db                	test   ebx,ebx
c0002c6b:	74 07                	je     c0002c74 <put_fat+0xdb>
c0002c6d:	c1 ef 04             	shr    edi,0x4
c0002c70:	89 fa                	mov    edx,edi
c0002c72:	eb 0e                	jmp    c0002c82 <put_fat+0xe9>
c0002c74:	c1 ef 08             	shr    edi,0x8
c0002c77:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c7a:	83 e2 f0             	and    edx,0xfffffff0
c0002c7d:	83 e7 0f             	and    edi,0xf
c0002c80:	09 fa                	or     edx,edi
c0002c82:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c85:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c89:	e9 97 00 00 00       	jmp    c0002d25 <put_fat+0x18c>
c0002c8e:	c1 ea 08             	shr    edx,0x8
c0002c91:	31 c9                	xor    ecx,ecx
c0002c93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c96:	89 f0                	mov    eax,esi
c0002c98:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c9b:	e8 7c f5 ff ff       	call   c000221c <move_window>
c0002ca0:	89 c1                	mov    ecx,eax
c0002ca2:	85 c0                	test   eax,eax
c0002ca4:	75 7f                	jne    c0002d25 <put_fat+0x18c>
c0002ca6:	01 db                	add    ebx,ebx
c0002ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cac:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb2:	0f b7 d7             	movzx  edx,di
c0002cb5:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cb9:	e8 f9 ed ff ff       	call   c0001ab7 <st_word>
c0002cbe:	eb 53                	jmp    c0002d13 <put_fat+0x17a>
c0002cc0:	c1 ea 07             	shr    edx,0x7
c0002cc3:	31 c9                	xor    ecx,ecx
c0002cc5:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ccd:	e8 4a f5 ff ff       	call   c000221c <move_window>
c0002cd2:	89 c1                	mov    ecx,eax
c0002cd4:	85 c0                	test   eax,eax
c0002cd6:	75 4d                	jne    c0002d25 <put_fat+0x18c>
c0002cd8:	c1 e3 02             	shl    ebx,0x2
c0002cdb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ce4:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ce8:	74 1c                	je     c0002d06 <put_fat+0x16d>
c0002cea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cee:	89 d8                	mov    eax,ebx
c0002cf0:	e8 5d ed ff ff       	call   c0001a52 <ld_dword>
c0002cf5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cfb:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d04:	09 c7                	or     edi,eax
c0002d06:	89 fa                	mov    edx,edi
c0002d08:	89 d8                	mov    eax,ebx
c0002d0a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d0e:	e8 a8 ed ff ff       	call   c0001abb <st_dword>
c0002d13:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d1b:	eb 08                	jmp    c0002d25 <put_fat+0x18c>
c0002d1d:	b9 02 00 00 00       	mov    ecx,0x2
c0002d22:	89 c8                	mov    eax,ecx
c0002d24:	c3                   	ret    
c0002d25:	83 c4 1c             	add    esp,0x1c
c0002d28:	89 c8                	mov    eax,ecx
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	5d                   	pop    ebp
c0002d2e:	c3                   	ret    

c0002d2f <fill_last_frag>:
c0002d2f:	57                   	push   edi
c0002d30:	89 cf                	mov    edi,ecx
c0002d32:	56                   	push   esi
c0002d33:	89 d6                	mov    esi,edx
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d3b:	85 c0                	test   eax,eax
c0002d3d:	74 21                	je     c0002d60 <fill_last_frag+0x31>
c0002d3f:	89 f9                	mov    ecx,edi
c0002d41:	83 f8 01             	cmp    eax,0x1
c0002d44:	76 05                	jbe    c0002d4b <fill_last_frag+0x1c>
c0002d46:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d49:	29 c1                	sub    ecx,eax
c0002d4b:	8d 56 01             	lea    edx,[esi+0x1]
c0002d4e:	29 c2                	sub    edx,eax
c0002d50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d52:	e8 42 fe ff ff       	call   c0002b99 <put_fat>
c0002d57:	85 c0                	test   eax,eax
c0002d59:	75 05                	jne    c0002d60 <fill_last_frag+0x31>
c0002d5b:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d5e:	eb d8                	jmp    c0002d38 <fill_last_frag+0x9>
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	c3                   	ret    

c0002d64 <fill_first_frag>:
c0002d64:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d68:	75 2d                	jne    c0002d97 <fill_first_frag+0x33>
c0002d6a:	57                   	push   edi
c0002d6b:	56                   	push   esi
c0002d6c:	53                   	push   ebx
c0002d6d:	89 c3                	mov    ebx,eax
c0002d6f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d72:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d75:	01 d7                	add    edi,edx
c0002d77:	39 fa                	cmp    edx,edi
c0002d79:	74 14                	je     c0002d8f <fill_first_frag+0x2b>
c0002d7b:	8d 72 01             	lea    esi,[edx+0x1]
c0002d7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d80:	89 f1                	mov    ecx,esi
c0002d82:	e8 12 fe ff ff       	call   c0002b99 <put_fat>
c0002d87:	89 f2                	mov    edx,esi
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	74 ea                	je     c0002d77 <fill_first_frag+0x13>
c0002d8d:	eb 0b                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d8f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d93:	31 c0                	xor    eax,eax
c0002d95:	eb 03                	jmp    c0002d9a <fill_first_frag+0x36>
c0002d97:	31 c0                	xor    eax,eax
c0002d99:	c3                   	ret    
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <get_fat>:
c0002d9e:	83 fa 01             	cmp    edx,0x1
c0002da1:	0f 86 db 01 00 00    	jbe    c0002f82 <get_fat+0x1e4>
c0002da7:	55                   	push   ebp
c0002da8:	b9 01 00 00 00       	mov    ecx,0x1
c0002dad:	57                   	push   edi
c0002dae:	56                   	push   esi
c0002daf:	53                   	push   ebx
c0002db0:	83 ec 1c             	sub    esp,0x1c
c0002db3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002db5:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002db8:	0f 86 cc 01 00 00    	jbe    c0002f8a <get_fat+0x1ec>
c0002dbe:	89 c3                	mov    ebx,eax
c0002dc0:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc2:	89 d6                	mov    esi,edx
c0002dc4:	3c 02                	cmp    al,0x2
c0002dc6:	0f 84 99 00 00 00    	je     c0002e65 <get_fat+0xc7>
c0002dcc:	77 09                	ja     c0002dd7 <get_fat+0x39>
c0002dce:	fe c8                	dec    al
c0002dd0:	74 1a                	je     c0002dec <get_fat+0x4e>
c0002dd2:	e9 b3 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dd7:	3c 03                	cmp    al,0x3
c0002dd9:	0f 84 b5 00 00 00    	je     c0002e94 <get_fat+0xf6>
c0002ddf:	3c 04                	cmp    al,0x4
c0002de1:	0f 84 e3 00 00 00    	je     c0002eca <get_fat+0x12c>
c0002de7:	e9 9e 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002dec:	89 d3                	mov    ebx,edx
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	d1 eb                	shr    ebx,1
c0002df2:	89 f8                	mov    eax,edi
c0002df4:	01 d3                	add    ebx,edx
c0002df6:	89 da                	mov    edx,ebx
c0002df8:	c1 ea 09             	shr    edx,0x9
c0002dfb:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dfe:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e01:	e8 16 f4 ff ff       	call   c000221c <move_window>
c0002e06:	85 c0                	test   eax,eax
c0002e08:	74 08                	je     c0002e12 <get_fat+0x74>
c0002e0a:	83 c9 ff             	or     ecx,0xffffffff
c0002e0d:	e9 78 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e12:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e15:	31 c9                	xor    ecx,ecx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e1f:	c1 ea 09             	shr    edx,0x9
c0002e22:	89 f8                	mov    eax,edi
c0002e24:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e27:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e2b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e2e:	e8 e9 f3 ff ff       	call   c000221c <move_window>
c0002e33:	85 c0                	test   eax,eax
c0002e35:	75 d3                	jne    c0002e0a <get_fat+0x6c>
c0002e37:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e3d:	0f b6 c3             	movzx  eax,bl
c0002e40:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e45:	c1 e3 08             	shl    ebx,0x8
c0002e48:	09 c3                	or     ebx,eax
c0002e4a:	89 d9                	mov    ecx,ebx
c0002e4c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e52:	83 e6 01             	and    esi,0x1
c0002e55:	0f 84 2f 01 00 00    	je     c0002f8a <get_fat+0x1ec>
c0002e5b:	89 d9                	mov    ecx,ebx
c0002e5d:	c1 e9 04             	shr    ecx,0x4
c0002e60:	e9 25 01 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e65:	c1 ea 08             	shr    edx,0x8
c0002e68:	31 c9                	xor    ecx,ecx
c0002e6a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e72:	e8 a5 f3 ff ff       	call   c000221c <move_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	75 8f                	jne    c0002e0a <get_fat+0x6c>
c0002e7b:	01 f6                	add    esi,esi
c0002e7d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e83:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e87:	e8 b9 eb ff ff       	call   c0001a45 <ld_word>
c0002e8c:	0f b7 c8             	movzx  ecx,ax
c0002e8f:	e9 f6 00 00 00       	jmp    c0002f8a <get_fat+0x1ec>
c0002e94:	c1 ea 07             	shr    edx,0x7
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e9c:	89 f8                	mov    eax,edi
c0002e9e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea1:	e8 76 f3 ff ff       	call   c000221c <move_window>
c0002ea6:	85 c0                	test   eax,eax
c0002ea8:	0f 85 5c ff ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002eae:	c1 e6 02             	shl    esi,0x2
c0002eb1:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002eb7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ebb:	e8 92 eb ff ff       	call   c0001a52 <ld_dword>
c0002ec0:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ec5:	e9 b4 00 00 00       	jmp    c0002f7e <get_fat+0x1e0>
c0002eca:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ecd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed0:	89 d1                	mov    ecx,edx
c0002ed2:	09 c1                	or     ecx,eax
c0002ed4:	74 06                	je     c0002edc <get_fat+0x13e>
c0002ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eda:	75 0f                	jne    c0002eeb <get_fat+0x14d>
c0002edc:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee1:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ee5:	0f 85 9f 00 00 00    	jne    c0002f8a <get_fat+0x1ec>
c0002eeb:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eef:	89 f5                	mov    ebp,esi
c0002ef1:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ef6:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ef9:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002efc:	80 f9 02             	cmp    cl,0x2
c0002eff:	75 35                	jne    c0002f36 <get_fat+0x198>
c0002f01:	83 c0 ff             	add    eax,0xffffffff
c0002f04:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f09:	83 d2 ff             	adc    edx,0xffffffff
c0002f0c:	31 db                	xor    ebx,ebx
c0002f0e:	53                   	push   ebx
c0002f0f:	51                   	push   ecx
c0002f10:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f14:	c1 ea 09             	shr    edx,0x9
c0002f17:	52                   	push   edx
c0002f18:	50                   	push   eax
c0002f19:	e8 ee c4 01 00       	call   c001f40c <__udivdi3>
c0002f1e:	83 c4 10             	add    esp,0x10
c0002f21:	b9 01 00 00 00       	mov    ecx,0x1
c0002f26:	39 c5                	cmp    ebp,eax
c0002f28:	77 60                	ja     c0002f8a <get_fat+0x1ec>
c0002f2a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f2f:	74 59                	je     c0002f8a <get_fat+0x1ec>
c0002f31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f34:	eb 54                	jmp    c0002f8a <get_fat+0x1ec>
c0002f36:	80 f9 03             	cmp    cl,0x3
c0002f39:	75 05                	jne    c0002f40 <get_fat+0x1a2>
c0002f3b:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f3e:	77 f1                	ja     c0002f31 <get_fat+0x193>
c0002f40:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f45:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f49:	75 3f                	jne    c0002f8a <get_fat+0x1ec>
c0002f4b:	89 f2                	mov    edx,esi
c0002f4d:	31 c9                	xor    ecx,ecx
c0002f4f:	c1 ea 07             	shr    edx,0x7
c0002f52:	89 f8                	mov    eax,edi
c0002f54:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f57:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f5a:	e8 bd f2 ff ff       	call   c000221c <move_window>
c0002f5f:	85 c0                	test   eax,eax
c0002f61:	0f 85 a3 fe ff ff    	jne    c0002e0a <get_fat+0x6c>
c0002f67:	c1 e6 02             	shl    esi,0x2
c0002f6a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f70:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f74:	e8 d9 ea ff ff       	call   c0001a52 <ld_dword>
c0002f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f7e:	89 c1                	mov    ecx,eax
c0002f80:	eb 08                	jmp    c0002f8a <get_fat+0x1ec>
c0002f82:	b9 01 00 00 00       	mov    ecx,0x1
c0002f87:	89 c8                	mov    eax,ecx
c0002f89:	c3                   	ret    
c0002f8a:	83 c4 1c             	add    esp,0x1c
c0002f8d:	89 c8                	mov    eax,ecx
c0002f8f:	5b                   	pop    ebx
c0002f90:	5e                   	pop    esi
c0002f91:	5f                   	pop    edi
c0002f92:	5d                   	pop    ebp
c0002f93:	c3                   	ret    

c0002f94 <dir_sdi>:
c0002f94:	55                   	push   ebp
c0002f95:	57                   	push   edi
c0002f96:	56                   	push   esi
c0002f97:	53                   	push   ebx
c0002f98:	89 c3                	mov    ebx,eax
c0002f9a:	83 ec 1c             	sub    esp,0x1c
c0002f9d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f9f:	31 c0                	xor    eax,eax
c0002fa1:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fa4:	0f 94 c0             	sete   al
c0002fa7:	48                   	dec    eax
c0002fa8:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fad:	05 00 00 00 10       	add    eax,0x10000000
c0002fb2:	39 d0                	cmp    eax,edx
c0002fb4:	77 0a                	ja     c0002fc0 <dir_sdi+0x2c>
c0002fb6:	b8 02 00 00 00       	mov    eax,0x2
c0002fbb:	e9 c4 00 00 00       	jmp    c0003084 <dir_sdi+0xf0>
c0002fc0:	89 d6                	mov    esi,edx
c0002fc2:	f6 c2 1f             	test   dl,0x1f
c0002fc5:	75 ef                	jne    c0002fb6 <dir_sdi+0x22>
c0002fc7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fca:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fcd:	85 c9                	test   ecx,ecx
c0002fcf:	75 2d                	jne    c0002ffe <dir_sdi+0x6a>
c0002fd1:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fd4:	77 1b                	ja     c0002ff1 <dir_sdi+0x5d>
c0002fd6:	89 f2                	mov    edx,esi
c0002fd8:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fdc:	c1 ea 05             	shr    edx,0x5
c0002fdf:	39 c2                	cmp    edx,eax
c0002fe1:	73 d3                	jae    c0002fb6 <dir_sdi+0x22>
c0002fe3:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fe6:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fe9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fec:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fef:	eb 4b                	jmp    c000303c <dir_sdi+0xa8>
c0002ff1:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff4:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ff8:	85 c0                	test   eax,eax
c0002ffa:	74 da                	je     c0002fd6 <dir_sdi+0x42>
c0002ffc:	89 c1                	mov    ecx,eax
c0002ffe:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003002:	c1 e5 09             	shl    ebp,0x9
c0003005:	89 ca                	mov    edx,ecx
c0003007:	39 ee                	cmp    esi,ebp
c0003009:	72 1c                	jb     c0003027 <dir_sdi+0x93>
c000300b:	89 d8                	mov    eax,ebx
c000300d:	e8 8c fd ff ff       	call   c0002d9e <get_fat>
c0003012:	89 c1                	mov    ecx,eax
c0003014:	83 f8 ff             	cmp    eax,0xffffffff
c0003017:	74 66                	je     c000307f <dir_sdi+0xeb>
c0003019:	83 f8 01             	cmp    eax,0x1
c000301c:	76 98                	jbe    c0002fb6 <dir_sdi+0x22>
c000301e:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003021:	76 93                	jbe    c0002fb6 <dir_sdi+0x22>
c0003023:	29 ee                	sub    esi,ebp
c0003025:	eb de                	jmp    c0003005 <dir_sdi+0x71>
c0003027:	89 f8                	mov    eax,edi
c0003029:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302d:	e8 ac ec ff ff       	call   c0001cde <clst2sect>
c0003032:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003036:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000303f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003042:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003045:	89 d1                	mov    ecx,edx
c0003047:	09 c1                	or     ecx,eax
c0003049:	0f 84 67 ff ff ff    	je     c0002fb6 <dir_sdi+0x22>
c000304f:	89 f1                	mov    ecx,esi
c0003051:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003059:	c1 e9 09             	shr    ecx,0x9
c000305c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003060:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003064:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003068:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000306e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003071:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003075:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003078:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000307b:	31 c0                	xor    eax,eax
c000307d:	eb 05                	jmp    c0003084 <dir_sdi+0xf0>
c000307f:	b8 01 00 00 00       	mov    eax,0x1
c0003084:	83 c4 1c             	add    esp,0x1c
c0003087:	5b                   	pop    ebx
c0003088:	5e                   	pop    esi
c0003089:	5f                   	pop    edi
c000308a:	5d                   	pop    ebp
c000308b:	c3                   	ret    

c000308c <create_chain>:
c000308c:	55                   	push   ebp
c000308d:	89 c5                	mov    ebp,eax
c000308f:	57                   	push   edi
c0003090:	56                   	push   esi
c0003091:	53                   	push   ebx
c0003092:	83 ec 1c             	sub    esp,0x1c
c0003095:	85 d2                	test   edx,edx
c0003097:	8b 30                	mov    esi,DWORD PTR [eax]
c0003099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000309d:	75 0e                	jne    c00030ad <create_chain+0x21>
c000309f:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a2:	85 ff                	test   edi,edi
c00030a4:	74 39                	je     c00030df <create_chain+0x53>
c00030a6:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030a9:	77 39                	ja     c00030e4 <create_chain+0x58>
c00030ab:	eb 32                	jmp    c00030df <create_chain+0x53>
c00030ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b1:	e8 e8 fc ff ff       	call   c0002d9e <get_fat>
c00030b6:	89 c3                	mov    ebx,eax
c00030b8:	83 f8 01             	cmp    eax,0x1
c00030bb:	77 0a                	ja     c00030c7 <create_chain+0x3b>
c00030bd:	bb 01 00 00 00       	mov    ebx,0x1
c00030c2:	e9 bc 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030c7:	83 f8 ff             	cmp    eax,0xffffffff
c00030ca:	0f 84 60 01 00 00    	je     c0003230 <create_chain+0x1a4>
c00030d0:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030d3:	0f 87 aa 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c00030d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030dd:	eb 05                	jmp    c00030e4 <create_chain+0x58>
c00030df:	bf 01 00 00 00       	mov    edi,0x1
c00030e4:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030e8:	75 07                	jne    c00030f1 <create_chain+0x65>
c00030ea:	31 db                	xor    ebx,ebx
c00030ec:	e9 92 01 00 00       	jmp    c0003283 <create_chain+0x1f7>
c00030f1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030f4:	75 74                	jne    c000316a <create_chain+0xde>
c00030f6:	b9 01 00 00 00       	mov    ecx,0x1
c00030fb:	89 fa                	mov    edx,edi
c00030fd:	89 f0                	mov    eax,esi
c00030ff:	e8 2d f9 ff ff       	call   c0002a31 <find_bitmap>
c0003104:	89 c3                	mov    ebx,eax
c0003106:	8d 40 ff             	lea    eax,[eax-0x1]
c0003109:	83 f8 fd             	cmp    eax,0xfffffffd
c000310c:	0f 87 71 01 00 00    	ja     c0003283 <create_chain+0x1f7>
c0003112:	83 ec 0c             	sub    esp,0xc
c0003115:	b9 01 00 00 00       	mov    ecx,0x1
c000311a:	89 da                	mov    edx,ebx
c000311c:	89 f0                	mov    eax,esi
c000311e:	6a 01                	push   0x1
c0003120:	e8 bf f9 ff ff       	call   c0002ae4 <change_bitmap>
c0003125:	83 c4 10             	add    esp,0x10
c0003128:	83 f8 02             	cmp    eax,0x2
c000312b:	74 90                	je     c00030bd <create_chain+0x31>
c000312d:	83 f8 01             	cmp    eax,0x1
c0003130:	0f 84 fa 00 00 00    	je     c0003230 <create_chain+0x1a4>
c0003136:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000313b:	75 09                	jne    c0003146 <create_chain+0xba>
c000313d:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003141:	e9 0e 01 00 00       	jmp    c0003254 <create_chain+0x1c8>
c0003146:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000314a:	0f 85 e9 00 00 00    	jne    c0003239 <create_chain+0x1ad>
c0003150:	8d 57 01             	lea    edx,[edi+0x1]
c0003153:	39 da                	cmp    edx,ebx
c0003155:	0f 84 f9 00 00 00    	je     c0003254 <create_chain+0x1c8>
c000315b:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000315e:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003162:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003165:	e9 cf 00 00 00       	jmp    c0003239 <create_chain+0x1ad>
c000316a:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000316e:	75 41                	jne    c00031b1 <create_chain+0x125>
c0003170:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003173:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003176:	77 05                	ja     c000317d <create_chain+0xf1>
c0003178:	bb 02 00 00 00       	mov    ebx,0x2
c000317d:	89 da                	mov    edx,ebx
c000317f:	89 e8                	mov    eax,ebp
c0003181:	e8 18 fc ff ff       	call   c0002d9e <get_fat>
c0003186:	83 f8 01             	cmp    eax,0x1
c0003189:	0f 84 a6 00 00 00    	je     c0003235 <create_chain+0x1a9>
c000318f:	83 f8 ff             	cmp    eax,0xffffffff
c0003192:	0f 84 9d 00 00 00    	je     c0003235 <create_chain+0x1a9>
c0003198:	85 c0                	test   eax,eax
c000319a:	74 11                	je     c00031ad <create_chain+0x121>
c000319c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	76 0d                	jbe    c00031b1 <create_chain+0x125>
c00031a4:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031a7:	76 08                	jbe    c00031b1 <create_chain+0x125>
c00031a9:	89 c7                	mov    edi,eax
c00031ab:	eb 04                	jmp    c00031b1 <create_chain+0x125>
c00031ad:	85 db                	test   ebx,ebx
c00031af:	75 36                	jne    c00031e7 <create_chain+0x15b>
c00031b1:	89 fb                	mov    ebx,edi
c00031b3:	43                   	inc    ebx
c00031b4:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b7:	77 0e                	ja     c00031c7 <create_chain+0x13b>
c00031b9:	83 ff 01             	cmp    edi,0x1
c00031bc:	0f 86 28 ff ff ff    	jbe    c00030ea <create_chain+0x5e>
c00031c2:	bb 02 00 00 00       	mov    ebx,0x2
c00031c7:	89 da                	mov    edx,ebx
c00031c9:	89 e8                	mov    eax,ebp
c00031cb:	e8 ce fb ff ff       	call   c0002d9e <get_fat>
c00031d0:	85 c0                	test   eax,eax
c00031d2:	74 13                	je     c00031e7 <create_chain+0x15b>
c00031d4:	83 f8 01             	cmp    eax,0x1
c00031d7:	74 5c                	je     c0003235 <create_chain+0x1a9>
c00031d9:	83 f8 ff             	cmp    eax,0xffffffff
c00031dc:	74 57                	je     c0003235 <create_chain+0x1a9>
c00031de:	39 fb                	cmp    ebx,edi
c00031e0:	75 d1                	jne    c00031b3 <create_chain+0x127>
c00031e2:	e9 03 ff ff ff       	jmp    c00030ea <create_chain+0x5e>
c00031e7:	83 c9 ff             	or     ecx,0xffffffff
c00031ea:	89 da                	mov    edx,ebx
c00031ec:	89 f0                	mov    eax,esi
c00031ee:	e8 a6 f9 ff ff       	call   c0002b99 <put_fat>
c00031f3:	85 c0                	test   eax,eax
c00031f5:	75 14                	jne    c000320b <create_chain+0x17f>
c00031f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031fc:	74 0d                	je     c000320b <create_chain+0x17f>
c00031fe:	89 d9                	mov    ecx,ebx
c0003200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003204:	89 f0                	mov    eax,esi
c0003206:	e8 8e f9 ff ff       	call   c0002b99 <put_fat>
c000320b:	85 c0                	test   eax,eax
c000320d:	75 1a                	jne    c0003229 <create_chain+0x19d>
c000320f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003212:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003215:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003218:	8d 51 fe             	lea    edx,[ecx-0x2]
c000321b:	39 d0                	cmp    eax,edx
c000321d:	77 04                	ja     c0003223 <create_chain+0x197>
c000321f:	48                   	dec    eax
c0003220:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003223:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003227:	eb 5a                	jmp    c0003283 <create_chain+0x1f7>
c0003229:	48                   	dec    eax
c000322a:	0f 85 8d fe ff ff    	jne    c00030bd <create_chain+0x31>
c0003230:	83 cb ff             	or     ebx,0xffffffff
c0003233:	eb 4e                	jmp    c0003283 <create_chain+0x1f7>
c0003235:	89 c3                	mov    ebx,eax
c0003237:	eb 4a                	jmp    c0003283 <create_chain+0x1f7>
c0003239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000323d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003240:	41                   	inc    ecx
c0003241:	39 d9                	cmp    ecx,ebx
c0003243:	75 19                	jne    c000325e <create_chain+0x1d2>
c0003245:	b9 02 00 00 00       	mov    ecx,0x2
c000324a:	85 d2                	test   edx,edx
c000324c:	74 03                	je     c0003251 <create_chain+0x1c5>
c000324e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003251:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003254:	85 c0                	test   eax,eax
c0003256:	0f 85 61 fe ff ff    	jne    c00030bd <create_chain+0x31>
c000325c:	eb b1                	jmp    c000320f <create_chain+0x183>
c000325e:	85 d2                	test   edx,edx
c0003260:	75 07                	jne    c0003269 <create_chain+0x1dd>
c0003262:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003269:	89 d9                	mov    ecx,ebx
c000326b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000326f:	89 e8                	mov    eax,ebp
c0003271:	e8 b9 fa ff ff       	call   c0002d2f <fill_last_frag>
c0003276:	85 c0                	test   eax,eax
c0003278:	75 af                	jne    c0003229 <create_chain+0x19d>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	eb 8c                	jmp    c000320f <create_chain+0x183>
c0003283:	83 c4 1c             	add    esp,0x1c
c0003286:	89 d8                	mov    eax,ebx
c0003288:	5b                   	pop    ebx
c0003289:	5e                   	pop    esi
c000328a:	5f                   	pop    edi
c000328b:	5d                   	pop    ebp
c000328c:	c3                   	ret    

c000328d <remove_chain>:
c000328d:	55                   	push   ebp
c000328e:	57                   	push   edi
c000328f:	56                   	push   esi
c0003290:	53                   	push   ebx
c0003291:	83 ec 1c             	sub    esp,0x1c
c0003294:	83 fa 01             	cmp    edx,0x1
c0003297:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003299:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329d:	77 0a                	ja     c00032a9 <remove_chain+0x1c>
c000329f:	b8 02 00 00 00       	mov    eax,0x2
c00032a4:	e9 24 01 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032a9:	89 d6                	mov    esi,edx
c00032ab:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032ae:	76 ef                	jbe    c000329f <remove_chain+0x12>
c00032b0:	89 c7                	mov    edi,eax
c00032b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032b7:	75 06                	jne    c00032bf <remove_chain+0x32>
c00032b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032bd:	eb 54                	jmp    c0003313 <remove_chain+0x86>
c00032bf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c2:	75 06                	jne    c00032ca <remove_chain+0x3d>
c00032c4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032c8:	74 ef                	je     c00032b9 <remove_chain+0x2c>
c00032ca:	83 c9 ff             	or     ecx,0xffffffff
c00032cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d1:	89 d8                	mov    eax,ebx
c00032d3:	e8 c1 f8 ff ff       	call   c0002b99 <put_fat>
c00032d8:	85 c0                	test   eax,eax
c00032da:	74 dd                	je     c00032b9 <remove_chain+0x2c>
c00032dc:	e9 ec 00 00 00       	jmp    c00033cd <remove_chain+0x140>
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	74 b9                	je     c000329f <remove_chain+0x12>
c00032e6:	83 f8 ff             	cmp    eax,0xffffffff
c00032e9:	74 6d                	je     c0003358 <remove_chain+0xcb>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	75 6f                	jne    c000335f <remove_chain+0xd2>
c00032f0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032f6:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032f9:	39 d0                	cmp    eax,edx
c00032fb:	73 08                	jae    c0003305 <remove_chain+0x78>
c00032fd:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003301:	40                   	inc    eax
c0003302:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003305:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003308:	39 e9                	cmp    ecx,ebp
c000330a:	75 64                	jne    c0003370 <remove_chain+0xe3>
c000330c:	89 ee                	mov    esi,ebp
c000330e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003311:	76 0f                	jbe    c0003322 <remove_chain+0x95>
c0003313:	89 f2                	mov    edx,esi
c0003315:	89 f8                	mov    eax,edi
c0003317:	e8 82 fa ff ff       	call   c0002d9e <get_fat>
c000331c:	89 c5                	mov    ebp,eax
c000331e:	85 c0                	test   eax,eax
c0003320:	75 bf                	jne    c00032e1 <remove_chain+0x54>
c0003322:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003325:	0f 85 a0 00 00 00    	jne    c00033cb <remove_chain+0x13e>
c000332b:	eb 6c                	jmp    c0003399 <remove_chain+0x10c>
c000332d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003330:	84 c0                	test   al,al
c0003332:	75 7d                	jne    c00033b1 <remove_chain+0x124>
c0003334:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003337:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000333b:	0f 84 86 00 00 00    	je     c00033c7 <remove_chain+0x13a>
c0003341:	89 da                	mov    edx,ebx
c0003343:	89 f8                	mov    eax,edi
c0003345:	e8 54 fa ff ff       	call   c0002d9e <get_fat>
c000334a:	83 f8 01             	cmp    eax,0x1
c000334d:	0f 86 4c ff ff ff    	jbe    c000329f <remove_chain+0x12>
c0003353:	83 f8 ff             	cmp    eax,0xffffffff
c0003356:	75 4e                	jne    c00033a6 <remove_chain+0x119>
c0003358:	b8 01 00 00 00       	mov    eax,0x1
c000335d:	eb 6e                	jmp    c00033cd <remove_chain+0x140>
c000335f:	31 c9                	xor    ecx,ecx
c0003361:	89 f2                	mov    edx,esi
c0003363:	89 d8                	mov    eax,ebx
c0003365:	e8 2f f8 ff ff       	call   c0002b99 <put_fat>
c000336a:	85 c0                	test   eax,eax
c000336c:	74 82                	je     c00032f0 <remove_chain+0x63>
c000336e:	eb 5d                	jmp    c00033cd <remove_chain+0x140>
c0003370:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003373:	75 1b                	jne    c0003390 <remove_chain+0x103>
c0003375:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003379:	83 ec 0c             	sub    esp,0xc
c000337c:	6a 00                	push   0x0
c000337e:	89 d8                	mov    eax,ebx
c0003380:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003384:	e8 5b f7 ff ff       	call   c0002ae4 <change_bitmap>
c0003389:	83 c4 10             	add    esp,0x10
c000338c:	85 c0                	test   eax,eax
c000338e:	75 3d                	jne    c00033cd <remove_chain+0x140>
c0003390:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003394:	e9 73 ff ff ff       	jmp    c000330c <remove_chain+0x7f>
c0003399:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000339e:	75 8d                	jne    c000332d <remove_chain+0xa0>
c00033a0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033a4:	eb 25                	jmp    c00033cb <remove_chain+0x13e>
c00033a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033a9:	89 c3                	mov    ebx,eax
c00033ab:	39 c2                	cmp    edx,eax
c00033ad:	74 88                	je     c0003337 <remove_chain+0xaa>
c00033af:	eb 1a                	jmp    c00033cb <remove_chain+0x13e>
c00033b1:	3c 03                	cmp    al,0x3
c00033b3:	75 16                	jne    c00033cb <remove_chain+0x13e>
c00033b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033b8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033bc:	77 0d                	ja     c00033cb <remove_chain+0x13e>
c00033be:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c5:	72 04                	jb     c00033cb <remove_chain+0x13e>
c00033c7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033cb:	31 c0                	xor    eax,eax
c00033cd:	83 c4 1c             	add    esp,0x1c
c00033d0:	5b                   	pop    ebx
c00033d1:	5e                   	pop    esi
c00033d2:	5f                   	pop    edi
c00033d3:	5d                   	pop    ebp
c00033d4:	c3                   	ret    

c00033d5 <dir_clear>:
c00033d5:	55                   	push   ebp
c00033d6:	57                   	push   edi
c00033d7:	56                   	push   esi
c00033d8:	89 c6                	mov    esi,eax
c00033da:	53                   	push   ebx
c00033db:	83 ec 1c             	sub    esp,0x1c
c00033de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e2:	e8 a1 ed ff ff       	call   c0002188 <sync_window>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	0f 85 de 00 00 00    	jne    c00034cd <dir_clear+0xf8>
c00033ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f3:	89 f0                	mov    eax,esi
c00033f5:	e8 e4 e8 ff ff       	call   c0001cde <clst2sect>
c00033fa:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003405:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003408:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000340b:	b9 00 02 00 00       	mov    ecx,0x200
c0003410:	31 d2                	xor    edx,edx
c0003412:	89 e8                	mov    eax,ebp
c0003414:	e8 c0 e6 ff ff       	call   c0001ad9 <mem_set>
c0003419:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000341d:	c1 e3 09             	shl    ebx,0x9
c0003420:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003426:	76 1f                	jbe    c0003447 <dir_clear+0x72>
c0003428:	bb 00 80 00 00       	mov    ebx,0x8000
c000342d:	eb 18                	jmp    c0003447 <dir_clear+0x72>
c000342f:	83 ec 0c             	sub    esp,0xc
c0003432:	53                   	push   ebx
c0003433:	e8 f3 4d 00 00       	call   c000822b <ff_memalloc>
c0003438:	83 c4 10             	add    esp,0x10
c000343b:	89 c7                	mov    edi,eax
c000343d:	85 c0                	test   eax,eax
c000343f:	0f 85 8f 00 00 00    	jne    c00034d4 <dir_clear+0xff>
c0003445:	d1 eb                	shr    ebx,1
c0003447:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000344d:	77 e0                	ja     c000342f <dir_clear+0x5a>
c000344f:	31 db                	xor    ebx,ebx
c0003451:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003455:	39 d8                	cmp    eax,ebx
c0003457:	76 66                	jbe    c00034bf <dir_clear+0xea>
c0003459:	83 ec 0c             	sub    esp,0xc
c000345c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003460:	6a 01                	push   0x1
c0003462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346a:	55                   	push   ebp
c000346b:	50                   	push   eax
c000346c:	e8 9f e5 ff ff       	call   c0001a10 <disk_write>
c0003471:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003476:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000347b:	83 c4 20             	add    esp,0x20
c000347e:	85 c0                	test   eax,eax
c0003480:	75 3d                	jne    c00034bf <dir_clear+0xea>
c0003482:	43                   	inc    ebx
c0003483:	eb cc                	jmp    c0003451 <dir_clear+0x7c>
c0003485:	83 ec 0c             	sub    esp,0xc
c0003488:	89 d8                	mov    eax,ebx
c000348a:	31 d2                	xor    edx,edx
c000348c:	55                   	push   ebp
c000348d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003491:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003495:	52                   	push   edx
c0003496:	50                   	push   eax
c0003497:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000349b:	57                   	push   edi
c000349c:	50                   	push   eax
c000349d:	e8 6e e5 ff ff       	call   c0001a10 <disk_write>
c00034a2:	83 c4 20             	add    esp,0x20
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 0a                	jne    c00034b3 <dir_clear+0xde>
c00034a9:	01 eb                	add    ebx,ebp
c00034ab:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034af:	39 d8                	cmp    eax,ebx
c00034b1:	77 d2                	ja     c0003485 <dir_clear+0xb0>
c00034b3:	83 ec 0c             	sub    esp,0xc
c00034b6:	57                   	push   edi
c00034b7:	e8 85 4d 00 00       	call   c0008241 <ff_memfree>
c00034bc:	83 c4 10             	add    esp,0x10
c00034bf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c3:	39 d8                	cmp    eax,ebx
c00034c5:	0f 95 c0             	setne  al
c00034c8:	0f b6 c0             	movzx  eax,al
c00034cb:	eb 19                	jmp    c00034e6 <dir_clear+0x111>
c00034cd:	b8 01 00 00 00       	mov    eax,0x1
c00034d2:	eb 12                	jmp    c00034e6 <dir_clear+0x111>
c00034d4:	89 d9                	mov    ecx,ebx
c00034d6:	31 d2                	xor    edx,edx
c00034d8:	c1 eb 09             	shr    ebx,0x9
c00034db:	e8 f9 e5 ff ff       	call   c0001ad9 <mem_set>
c00034e0:	89 dd                	mov    ebp,ebx
c00034e2:	31 db                	xor    ebx,ebx
c00034e4:	eb c5                	jmp    c00034ab <dir_clear+0xd6>
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_next>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	53                   	push   ebx
c00034f2:	89 c3                	mov    ebx,eax
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034f9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003500:	8d 78 20             	lea    edi,[eax+0x20]
c0003503:	31 c0                	xor    eax,eax
c0003505:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003509:	0f 94 c0             	sete   al
c000350c:	48                   	dec    eax
c000350d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003512:	05 00 00 00 10       	add    eax,0x10000000
c0003517:	39 f8                	cmp    eax,edi
c0003519:	77 0e                	ja     c0003529 <dir_next+0x3b>
c000351b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003522:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003529:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000352c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000352f:	89 ce                	mov    esi,ecx
c0003531:	b8 04 00 00 00       	mov    eax,0x4
c0003536:	09 d6                	or     esi,edx
c0003538:	0f 84 da 00 00 00    	je     c0003618 <dir_next+0x12a>
c000353e:	89 f8                	mov    eax,edi
c0003540:	25 ff 01 00 00       	and    eax,0x1ff
c0003545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003549:	0f 85 b9 00 00 00    	jne    c0003608 <dir_next+0x11a>
c000354f:	83 c2 01             	add    edx,0x1
c0003552:	83 d1 00             	adc    ecx,0x0
c0003555:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003558:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000355b:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000355e:	85 d2                	test   edx,edx
c0003560:	75 29                	jne    c000358b <dir_next+0x9d>
c0003562:	89 fa                	mov    edx,edi
c0003564:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003568:	c1 ea 05             	shr    edx,0x5
c000356b:	39 c2                	cmp    edx,eax
c000356d:	0f 82 95 00 00 00    	jb     c0003608 <dir_next+0x11a>
c0003573:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000357a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003581:	b8 04 00 00 00       	mov    eax,0x4
c0003586:	e9 8d 00 00 00       	jmp    c0003618 <dir_next+0x12a>
c000358b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000358f:	89 f9                	mov    ecx,edi
c0003591:	48                   	dec    eax
c0003592:	c1 e9 09             	shr    ecx,0x9
c0003595:	85 c8                	test   eax,ecx
c0003597:	75 6f                	jne    c0003608 <dir_next+0x11a>
c0003599:	89 d8                	mov    eax,ebx
c000359b:	e8 fe f7 ff ff       	call   c0002d9e <get_fat>
c00035a0:	89 c6                	mov    esi,eax
c00035a2:	83 f8 01             	cmp    eax,0x1
c00035a5:	77 07                	ja     c00035ae <dir_next+0xc0>
c00035a7:	b8 02 00 00 00       	mov    eax,0x2
c00035ac:	eb 6a                	jmp    c0003618 <dir_next+0x12a>
c00035ae:	83 f8 ff             	cmp    eax,0xffffffff
c00035b1:	75 07                	jne    c00035ba <dir_next+0xcc>
c00035b3:	b8 01 00 00 00       	mov    eax,0x1
c00035b8:	eb 5e                	jmp    c0003618 <dir_next+0x12a>
c00035ba:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035bd:	77 37                	ja     c00035f6 <dir_next+0x108>
c00035bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035c4:	74 ad                	je     c0003573 <dir_next+0x85>
c00035c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035c9:	89 d8                	mov    eax,ebx
c00035cb:	e8 bc fa ff ff       	call   c000308c <create_chain>
c00035d0:	89 c6                	mov    esi,eax
c00035d2:	b8 07 00 00 00       	mov    eax,0x7
c00035d7:	85 f6                	test   esi,esi
c00035d9:	74 3d                	je     c0003618 <dir_next+0x12a>
c00035db:	83 fe 01             	cmp    esi,0x1
c00035de:	74 c7                	je     c00035a7 <dir_next+0xb9>
c00035e0:	83 fe ff             	cmp    esi,0xffffffff
c00035e3:	74 ce                	je     c00035b3 <dir_next+0xc5>
c00035e5:	89 f2                	mov    edx,esi
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 e7 fd ff ff       	call   c00033d5 <dir_clear>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	75 c1                	jne    c00035b3 <dir_next+0xc5>
c00035f2:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035f9:	89 f2                	mov    edx,esi
c00035fb:	89 e8                	mov    eax,ebp
c00035fd:	e8 dc e6 ff ff       	call   c0001cde <clst2sect>
c0003602:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003605:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000360c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000360f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003613:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <load_xdir>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	8b 00                	mov    eax,DWORD PTR [eax]
c000362b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000362e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003631:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003634:	e8 e3 eb ff ff       	call   c000221c <move_window>
c0003639:	89 c3                	mov    ebx,eax
c000363b:	85 c0                	test   eax,eax
c000363d:	0f 85 0c 01 00 00    	jne    c000374f <load_xdir+0x12f>
c0003643:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003646:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003649:	0f 85 fb 00 00 00    	jne    c000374a <load_xdir+0x12a>
c000364f:	89 f8                	mov    eax,edi
c0003651:	b9 20 00 00 00       	mov    ecx,0x20
c0003656:	e8 69 e4 ff ff       	call   c0001ac4 <mem_cpy>
c000365b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000365f:	40                   	inc    eax
c0003660:	c1 e0 05             	shl    eax,0x5
c0003663:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003667:	83 e8 60             	sub    eax,0x60
c000366a:	3d 00 02 00 00       	cmp    eax,0x200
c000366f:	0f 87 d5 00 00 00    	ja     c000374a <load_xdir+0x12a>
c0003675:	31 d2                	xor    edx,edx
c0003677:	89 f0                	mov    eax,esi
c0003679:	e8 70 fe ff ff       	call   c00034ee <dir_next>
c000367e:	89 c3                	mov    ebx,eax
c0003680:	83 f8 04             	cmp    eax,0x4
c0003683:	0f 84 c1 00 00 00    	je     c000374a <load_xdir+0x12a>
c0003689:	85 c0                	test   eax,eax
c000368b:	0f 85 be 00 00 00    	jne    c000374f <load_xdir+0x12f>
c0003691:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003694:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003697:	8b 06                	mov    eax,DWORD PTR [esi]
c0003699:	e8 7e eb ff ff       	call   c000221c <move_window>
c000369e:	89 c3                	mov    ebx,eax
c00036a0:	85 c0                	test   eax,eax
c00036a2:	0f 85 a7 00 00 00    	jne    c000374f <load_xdir+0x12f>
c00036a8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036ab:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036ae:	0f 85 96 00 00 00    	jne    c000374a <load_xdir+0x12a>
c00036b4:	8d 47 20             	lea    eax,[edi+0x20]
c00036b7:	b9 20 00 00 00       	mov    ecx,0x20
c00036bc:	e8 03 e4 ff ff       	call   c0001ac4 <mem_cpy>
c00036c1:	31 d2                	xor    edx,edx
c00036c3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036c7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036cc:	83 c0 2c             	add    eax,0x2c
c00036cf:	f7 f1                	div    ecx
c00036d1:	c1 e0 05             	shl    eax,0x5
c00036d4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036d8:	77 70                	ja     c000374a <load_xdir+0x12a>
c00036da:	bd 40 00 00 00       	mov    ebp,0x40
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 f0                	mov    eax,esi
c00036e3:	e8 06 fe ff ff       	call   c00034ee <dir_next>
c00036e8:	89 c3                	mov    ebx,eax
c00036ea:	83 f8 04             	cmp    eax,0x4
c00036ed:	74 5b                	je     c000374a <load_xdir+0x12a>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 5c                	jne    c000374f <load_xdir+0x12f>
c00036f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036f6:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fb:	e8 1c eb ff ff       	call   c000221c <move_window>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	85 c0                	test   eax,eax
c0003704:	75 49                	jne    c000374f <load_xdir+0x12f>
c0003706:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003709:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000370c:	75 3c                	jne    c000374a <load_xdir+0x12a>
c000370e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003714:	77 0d                	ja     c0003723 <load_xdir+0x103>
c0003716:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003719:	b9 20 00 00 00       	mov    ecx,0x20
c000371e:	e8 a1 e3 ff ff       	call   c0001ac4 <mem_cpy>
c0003723:	83 c5 20             	add    ebp,0x20
c0003726:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000372a:	77 b3                	ja     c00036df <load_xdir+0xbf>
c000372c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003732:	77 1b                	ja     c000374f <load_xdir+0x12f>
c0003734:	89 f8                	mov    eax,edi
c0003736:	e8 d8 e7 ff ff       	call   c0001f13 <xdir_sum>
c000373b:	89 c1                	mov    ecx,eax
c000373d:	8d 47 02             	lea    eax,[edi+0x2]
c0003740:	e8 00 e3 ff ff       	call   c0001a45 <ld_word>
c0003745:	66 39 c1             	cmp    cx,ax
c0003748:	74 05                	je     c000374f <load_xdir+0x12f>
c000374a:	bb 02 00 00 00       	mov    ebx,0x2
c000374f:	83 c4 1c             	add    esp,0x1c
c0003752:	89 d8                	mov    eax,ebx
c0003754:	5b                   	pop    ebx
c0003755:	5e                   	pop    esi
c0003756:	5f                   	pop    edi
c0003757:	5d                   	pop    ebp
c0003758:	c3                   	ret    

c0003759 <load_obj_xdir>:
c0003759:	53                   	push   ebx
c000375a:	89 c3                	mov    ebx,eax
c000375c:	83 ec 08             	sub    esp,0x8
c000375f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003761:	89 03                	mov    DWORD PTR [ebx],eax
c0003763:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003766:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003769:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000376c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000376f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003772:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003779:	30 c0                	xor    al,al
c000377b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000378a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000378d:	e8 02 f8 ff ff       	call   c0002f94 <dir_sdi>
c0003792:	85 c0                	test   eax,eax
c0003794:	75 0b                	jne    c00037a1 <load_obj_xdir+0x48>
c0003796:	83 c4 08             	add    esp,0x8
c0003799:	89 d8                	mov    eax,ebx
c000379b:	5b                   	pop    ebx
c000379c:	e9 7f fe ff ff       	jmp    c0003620 <load_xdir>
c00037a1:	83 c4 08             	add    esp,0x8
c00037a4:	5b                   	pop    ebx
c00037a5:	c3                   	ret    

c00037a6 <dir_read>:
c00037a6:	55                   	push   ebp
c00037a7:	bd 04 00 00 00       	mov    ebp,0x4
c00037ac:	57                   	push   edi
c00037ad:	56                   	push   esi
c00037ae:	be ff ff ff ff       	mov    esi,0xffffffff
c00037b3:	53                   	push   ebx
c00037b4:	89 c3                	mov    ebx,eax
c00037b6:	83 ec 1c             	sub    esp,0x1c
c00037b9:	8b 38                	mov    edi,DWORD PTR [eax]
c00037bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037bf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037c4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ca:	89 c8                	mov    eax,ecx
c00037cc:	09 d0                	or     eax,edx
c00037ce:	0f 84 25 01 00 00    	je     c00038f9 <dir_read+0x153>
c00037d4:	89 f8                	mov    eax,edi
c00037d6:	e8 41 ea ff ff       	call   c000221c <move_window>
c00037db:	89 c5                	mov    ebp,eax
c00037dd:	85 c0                	test   eax,eax
c00037df:	0f 85 23 01 00 00    	jne    c0003908 <dir_read+0x162>
c00037e5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037e8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037ea:	84 c9                	test   cl,cl
c00037ec:	0f 84 11 01 00 00    	je     c0003903 <dir_read+0x15d>
c00037f2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037f5:	75 48                	jne    c000383f <dir_read+0x99>
c00037f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037fc:	74 10                	je     c000380e <dir_read+0x68>
c00037fe:	80 f9 83             	cmp    cl,0x83
c0003801:	0f 85 dd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003807:	31 ed                	xor    ebp,ebp
c0003809:	e9 08 01 00 00       	jmp    c0003916 <dir_read+0x170>
c000380e:	80 f9 85             	cmp    cl,0x85
c0003811:	0f 85 cd 00 00 00    	jne    c00038e4 <dir_read+0x13e>
c0003817:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000381a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000381d:	89 d8                	mov    eax,ebx
c000381f:	e8 fc fd ff ff       	call   c0003620 <load_xdir>
c0003824:	89 c5                	mov    ebp,eax
c0003826:	85 c0                	test   eax,eax
c0003828:	0f 85 da 00 00 00    	jne    c0003908 <dir_read+0x162>
c000382e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003831:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003834:	83 e0 3f             	and    eax,0x3f
c0003837:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000383a:	e9 d7 00 00 00       	jmp    c0003916 <dir_read+0x170>
c000383f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003842:	83 e0 3f             	and    eax,0x3f
c0003845:	80 f9 e5             	cmp    cl,0xe5
c0003848:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000384c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384f:	0f 84 8a 00 00 00    	je     c00038df <dir_read+0x139>
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	0f 84 81 00 00 00    	je     c00038df <dir_read+0x139>
c000385e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003862:	83 e0 1f             	and    eax,0x1f
c0003865:	83 f8 08             	cmp    eax,0x8
c0003868:	0f 94 c0             	sete   al
c000386b:	0f b6 c0             	movzx  eax,al
c000386e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003872:	75 6b                	jne    c00038df <dir_read+0x139>
c0003874:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003879:	75 44                	jne    c00038bf <dir_read+0x119>
c000387b:	f6 c1 40             	test   cl,0x40
c000387e:	74 12                	je     c0003892 <dir_read+0xec>
c0003880:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003883:	83 e1 bf             	and    ecx,0xffffffbf
c0003886:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000388a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000388d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003890:	eb 06                	jmp    c0003898 <dir_read+0xf2>
c0003892:	89 f0                	mov    eax,esi
c0003894:	38 c8                	cmp    al,cl
c0003896:	75 47                	jne    c00038df <dir_read+0x139>
c0003898:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000389c:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038a4:	75 3e                	jne    c00038e4 <dir_read+0x13e>
c00038a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038a9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ad:	e8 95 e4 ff ff       	call   c0001d47 <pick_lfn>
c00038b2:	85 c0                	test   eax,eax
c00038b4:	74 2e                	je     c00038e4 <dir_read+0x13e>
c00038b6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ba:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038bd:	eb 25                	jmp    c00038e4 <dir_read+0x13e>
c00038bf:	89 f0                	mov    eax,esi
c00038c1:	84 c0                	test   al,al
c00038c3:	75 11                	jne    c00038d6 <dir_read+0x130>
c00038c5:	89 d0                	mov    eax,edx
c00038c7:	e8 35 e6 ff ff       	call   c0001f01 <sum_sfn>
c00038cc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d0:	0f 84 31 ff ff ff    	je     c0003807 <dir_read+0x61>
c00038d6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038dd:	eb 37                	jmp    c0003916 <dir_read+0x170>
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	31 d2                	xor    edx,edx
c00038e6:	89 d8                	mov    eax,ebx
c00038e8:	e8 01 fc ff ff       	call   c00034ee <dir_next>
c00038ed:	89 c5                	mov    ebp,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	0f 84 cd fe ff ff    	je     c00037c4 <dir_read+0x1e>
c00038f7:	eb 0f                	jmp    c0003908 <dir_read+0x162>
c00038f9:	85 ed                	test   ebp,ebp
c00038fb:	0f 84 06 ff ff ff    	je     c0003807 <dir_read+0x61>
c0003901:	eb 05                	jmp    c0003908 <dir_read+0x162>
c0003903:	bd 04 00 00 00       	mov    ebp,0x4
c0003908:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000390f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003916:	83 c4 1c             	add    esp,0x1c
c0003919:	89 e8                	mov    eax,ebp
c000391b:	5b                   	pop    ebx
c000391c:	5e                   	pop    esi
c000391d:	5f                   	pop    edi
c000391e:	5d                   	pop    ebp
c000391f:	c3                   	ret    

c0003920 <dir_alloc>:
c0003920:	55                   	push   ebp
c0003921:	89 d5                	mov    ebp,edx
c0003923:	57                   	push   edi
c0003924:	31 d2                	xor    edx,edx
c0003926:	56                   	push   esi
c0003927:	53                   	push   ebx
c0003928:	89 c3                	mov    ebx,eax
c000392a:	83 ec 0c             	sub    esp,0xc
c000392d:	8b 38                	mov    edi,DWORD PTR [eax]
c000392f:	e8 60 f6 ff ff       	call   c0002f94 <dir_sdi>
c0003934:	85 c0                	test   eax,eax
c0003936:	75 4e                	jne    c0003986 <dir_alloc+0x66>
c0003938:	31 f6                	xor    esi,esi
c000393a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000393d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003940:	89 f8                	mov    eax,edi
c0003942:	e8 d5 e8 ff ff       	call   c000221c <move_window>
c0003947:	85 c0                	test   eax,eax
c0003949:	75 3b                	jne    c0003986 <dir_alloc+0x66>
c000394b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000394e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003951:	8a 12                	mov    dl,BYTE PTR [edx]
c0003953:	75 07                	jne    c000395c <dir_alloc+0x3c>
c0003955:	f7 d2                	not    edx
c0003957:	c0 ea 07             	shr    dl,0x7
c000395a:	eb 0d                	jmp    c0003969 <dir_alloc+0x49>
c000395c:	80 fa e5             	cmp    dl,0xe5
c000395f:	0f 94 c1             	sete   cl
c0003962:	84 d2                	test   dl,dl
c0003964:	0f 94 c2             	sete   dl
c0003967:	09 ca                	or     edx,ecx
c0003969:	84 d2                	test   dl,dl
c000396b:	74 07                	je     c0003974 <dir_alloc+0x54>
c000396d:	46                   	inc    esi
c000396e:	39 ee                	cmp    esi,ebp
c0003970:	75 04                	jne    c0003976 <dir_alloc+0x56>
c0003972:	eb 1c                	jmp    c0003990 <dir_alloc+0x70>
c0003974:	31 f6                	xor    esi,esi
c0003976:	ba 01 00 00 00       	mov    edx,0x1
c000397b:	89 d8                	mov    eax,ebx
c000397d:	e8 6c fb ff ff       	call   c00034ee <dir_next>
c0003982:	85 c0                	test   eax,eax
c0003984:	74 b4                	je     c000393a <dir_alloc+0x1a>
c0003986:	83 f8 04             	cmp    eax,0x4
c0003989:	75 05                	jne    c0003990 <dir_alloc+0x70>
c000398b:	b8 07 00 00 00       	mov    eax,0x7
c0003990:	83 c4 0c             	add    esp,0xc
c0003993:	5b                   	pop    ebx
c0003994:	5e                   	pop    esi
c0003995:	5f                   	pop    edi
c0003996:	5d                   	pop    ebp
c0003997:	c3                   	ret    

c0003998 <store_xdir>:
c0003998:	55                   	push   ebp
c0003999:	57                   	push   edi
c000399a:	89 c7                	mov    edi,eax
c000399c:	56                   	push   esi
c000399d:	53                   	push   ebx
c000399e:	83 ec 0c             	sub    esp,0xc
c00039a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039a3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039a6:	89 e8                	mov    eax,ebp
c00039a8:	e8 66 e5 ff ff       	call   c0001f13 <xdir_sum>
c00039ad:	0f b7 d0             	movzx  edx,ax
c00039b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039b3:	e8 ff e0 ff ff       	call   c0001ab7 <st_word>
c00039b8:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039bb:	89 f8                	mov    eax,edi
c00039bd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c1:	e8 ce f5 ff ff       	call   c0002f94 <dir_sdi>
c00039c6:	89 c6                	mov    esi,eax
c00039c8:	85 f6                	test   esi,esi
c00039ca:	75 3d                	jne    c0003a09 <store_xdir+0x71>
c00039cc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039cf:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039d4:	e8 43 e8 ff ff       	call   c000221c <move_window>
c00039d9:	89 c6                	mov    esi,eax
c00039db:	85 c0                	test   eax,eax
c00039dd:	75 2a                	jne    c0003a09 <store_xdir+0x71>
c00039df:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e2:	b9 20 00 00 00       	mov    ecx,0x20
c00039e7:	89 ea                	mov    edx,ebp
c00039e9:	e8 d6 e0 ff ff       	call   c0001ac4 <mem_cpy>
c00039ee:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f0:	85 db                	test   ebx,ebx
c00039f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039f6:	74 11                	je     c0003a09 <store_xdir+0x71>
c00039f8:	31 d2                	xor    edx,edx
c00039fa:	89 f8                	mov    eax,edi
c00039fc:	e8 ed fa ff ff       	call   c00034ee <dir_next>
c0003a01:	83 c5 20             	add    ebp,0x20
c0003a04:	89 c6                	mov    esi,eax
c0003a06:	4b                   	dec    ebx
c0003a07:	eb bf                	jmp    c00039c8 <store_xdir+0x30>
c0003a09:	89 f0                	mov    eax,esi
c0003a0b:	83 fe 02             	cmp    esi,0x2
c0003a0e:	76 05                	jbe    c0003a15 <store_xdir+0x7d>
c0003a10:	b8 02 00 00 00       	mov    eax,0x2
c0003a15:	83 c4 0c             	add    esp,0xc
c0003a18:	5b                   	pop    ebx
c0003a19:	5e                   	pop    esi
c0003a1a:	5f                   	pop    edi
c0003a1b:	5d                   	pop    ebp
c0003a1c:	c3                   	ret    

c0003a1d <dir_remove>:
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	53                   	push   ebx
c0003a20:	89 c3                	mov    ebx,eax
c0003a22:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a25:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a27:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a2a:	83 fa ff             	cmp    edx,0xffffffff
c0003a2d:	74 09                	je     c0003a38 <dir_remove+0x1b>
c0003a2f:	e8 60 f5 ff ff       	call   c0002f94 <dir_sdi>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	75 41                	jne    c0003a79 <dir_remove+0x5c>
c0003a38:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a3b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3e:	89 f0                	mov    eax,esi
c0003a40:	e8 d7 e7 ff ff       	call   c000221c <move_window>
c0003a45:	85 c0                	test   eax,eax
c0003a47:	75 26                	jne    c0003a6f <dir_remove+0x52>
c0003a49:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a4c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a4f:	75 05                	jne    c0003a56 <dir_remove+0x39>
c0003a51:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a54:	eb 03                	jmp    c0003a59 <dir_remove+0x3c>
c0003a56:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a59:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a60:	73 17                	jae    c0003a79 <dir_remove+0x5c>
c0003a62:	31 d2                	xor    edx,edx
c0003a64:	89 d8                	mov    eax,ebx
c0003a66:	e8 83 fa ff ff       	call   c00034ee <dir_next>
c0003a6b:	85 c0                	test   eax,eax
c0003a6d:	74 c9                	je     c0003a38 <dir_remove+0x1b>
c0003a6f:	83 f8 04             	cmp    eax,0x4
c0003a72:	75 05                	jne    c0003a79 <dir_remove+0x5c>
c0003a74:	b8 02 00 00 00       	mov    eax,0x2
c0003a79:	5b                   	pop    ebx
c0003a7a:	5e                   	pop    esi
c0003a7b:	5f                   	pop    edi
c0003a7c:	c3                   	ret    

c0003a7d <create_name>:
c0003a7d:	55                   	push   ebp
c0003a7e:	89 d5                	mov    ebp,edx
c0003a80:	57                   	push   edi
c0003a81:	89 c7                	mov    edi,eax
c0003a83:	56                   	push   esi
c0003a84:	31 f6                	xor    esi,esi
c0003a86:	53                   	push   ebx
c0003a87:	83 ec 3c             	sub    esp,0x3c
c0003a8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a90:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a92:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a9d:	e8 7d e0 ff ff       	call   c0001b1f <tchar2uni>
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 f8 ff             	cmp    eax,0xffffffff
c0003aa7:	75 0a                	jne    c0003ab3 <create_name+0x36>
c0003aa9:	b8 06 00 00 00       	mov    eax,0x6
c0003aae:	e9 83 02 00 00       	jmp    c0003d36 <create_name+0x2b9>
c0003ab3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ab8:	76 0c                	jbe    c0003ac6 <create_name+0x49>
c0003aba:	c1 e8 10             	shr    eax,0x10
c0003abd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ac5:	46                   	inc    esi
c0003ac6:	66 83 fb 1f          	cmp    bx,0x1f
c0003aca:	89 d8                	mov    eax,ebx
c0003acc:	76 36                	jbe    c0003b04 <create_name+0x87>
c0003ace:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad2:	74 30                	je     c0003b04 <create_name+0x87>
c0003ad4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ad8:	74 39                	je     c0003b13 <create_name+0x96>
c0003ada:	66 83 fb 7f          	cmp    bx,0x7f
c0003ade:	77 11                	ja     c0003af1 <create_name+0x74>
c0003ae0:	0f b7 d3             	movzx  edx,bx
c0003ae3:	b8 72 04 02 c0       	mov    eax,0xc0020472
c0003ae8:	e8 1a e0 ff ff       	call   c0001b07 <chk_chr>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	75 b8                	jne    c0003aa9 <create_name+0x2c>
c0003af1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003af7:	77 b0                	ja     c0003aa9 <create_name+0x2c>
c0003af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003afd:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b01:	46                   	inc    esi
c0003b02:	eb 95                	jmp    c0003a99 <create_name+0x1c>
c0003b04:	66 83 f8 1f          	cmp    ax,0x1f
c0003b08:	b3 04                	mov    bl,0x4
c0003b0a:	76 19                	jbe    c0003b25 <create_name+0xa8>
c0003b0c:	eb 05                	jmp    c0003b13 <create_name+0x96>
c0003b0e:	40                   	inc    eax
c0003b0f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b17:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b19:	80 fa 2f             	cmp    dl,0x2f
c0003b1c:	74 f0                	je     c0003b0e <create_name+0x91>
c0003b1e:	80 fa 5c             	cmp    dl,0x5c
c0003b21:	74 eb                	je     c0003b0e <create_name+0x91>
c0003b23:	31 db                	xor    ebx,ebx
c0003b25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b2c:	85 f6                	test   esi,esi
c0003b2e:	74 18                	je     c0003b48 <create_name+0xcb>
c0003b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b39:	66 83 f8 20          	cmp    ax,0x20
c0003b3d:	74 06                	je     c0003b45 <create_name+0xc8>
c0003b3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b43:	75 03                	jne    c0003b48 <create_name+0xcb>
c0003b45:	4e                   	dec    esi
c0003b46:	eb e4                	jmp    c0003b2c <create_name+0xaf>
c0003b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b4c:	31 ed                	xor    ebp,ebp
c0003b4e:	85 f6                	test   esi,esi
c0003b50:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b56:	0f 84 4d ff ff ff    	je     c0003aa9 <create_name+0x2c>
c0003b5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b67:	66 83 f8 20          	cmp    ax,0x20
c0003b6b:	75 04                	jne    c0003b71 <create_name+0xf4>
c0003b6d:	89 d5                	mov    ebp,edx
c0003b6f:	eb eb                	jmp    c0003b5c <create_name+0xdf>
c0003b71:	85 ed                	test   ebp,ebp
c0003b73:	75 06                	jne    c0003b7b <create_name+0xfe>
c0003b75:	66 83 f8 2e          	cmp    ax,0x2e
c0003b79:	75 08                	jne    c0003b83 <create_name+0x106>
c0003b7b:	83 cb 03             	or     ebx,0x3
c0003b7e:	eb 03                	jmp    c0003b83 <create_name+0x106>
c0003b80:	4e                   	dec    esi
c0003b81:	74 0c                	je     c0003b8f <create_name+0x112>
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b8d:	75 f1                	jne    c0003b80 <create_name+0x103>
c0003b8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b97:	ba 20 00 00 00       	mov    edx,0x20
c0003b9c:	e8 38 df ff ff       	call   c0001ad9 <mem_set>
c0003ba1:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003ba9:	31 c9                	xor    ecx,ecx
c0003bab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bbf:	66 85 ed             	test   bp,bp
c0003bc2:	0f 84 1f 01 00 00    	je     c0003ce7 <create_name+0x26a>
c0003bc8:	66 83 fd 20          	cmp    bp,0x20
c0003bcc:	74 0c                	je     c0003bda <create_name+0x15d>
c0003bce:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd2:	75 0f                	jne    c0003be3 <create_name+0x166>
c0003bd4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bd8:	74 09                	je     c0003be3 <create_name+0x166>
c0003bda:	83 cb 03             	or     ebx,0x3
c0003bdd:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be1:	eb cd                	jmp    c0003bb0 <create_name+0x133>
c0003be3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003be7:	73 06                	jae    c0003bef <create_name+0x172>
c0003be9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bed:	75 3a                	jne    c0003c29 <create_name+0x1ac>
c0003bef:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bf4:	75 08                	jne    c0003bfe <create_name+0x181>
c0003bf6:	83 cb 03             	or     ebx,0x3
c0003bf9:	e9 e9 00 00 00       	jmp    c0003ce7 <create_name+0x26a>
c0003bfe:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c02:	74 0d                	je     c0003c11 <create_name+0x194>
c0003c04:	83 cb 03             	or     ebx,0x3
c0003c07:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c0b:	0f 87 d6 00 00 00    	ja     c0003ce7 <create_name+0x26a>
c0003c11:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c16:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c1a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c22:	b9 08 00 00 00       	mov    ecx,0x8
c0003c27:	eb b4                	jmp    c0003bdd <create_name+0x160>
c0003c29:	66 83 fd 7f          	cmp    bp,0x7f
c0003c2d:	76 68                	jbe    c0003c97 <create_name+0x21a>
c0003c2f:	88 da                	mov    dl,bl
c0003c31:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c35:	83 ca 02             	or     edx,0x2
c0003c38:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c3c:	50                   	push   eax
c0003c3d:	50                   	push   eax
c0003c3e:	68 b5 01 00 00       	push   0x1b5
c0003c43:	55                   	push   ebp
c0003c44:	e8 0f 46 00 00       	call   c0008258 <ff_uni2oem>
c0003c49:	83 c4 10             	add    esp,0x10
c0003c4c:	89 c5                	mov    ebp,eax
c0003c4e:	a8 80                	test   al,0x80
c0003c50:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c58:	74 0c                	je     c0003c66 <create_name+0x1e9>
c0003c5a:	83 e5 7f             	and    ebp,0x7f
c0003c5d:	0f b6 ad c0 03 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfc40]
c0003c64:	eb 2a                	jmp    c0003c90 <create_name+0x213>
c0003c66:	66 3d ff 00          	cmp    ax,0xff
c0003c6a:	76 24                	jbe    c0003c90 <create_name+0x213>
c0003c6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c70:	48                   	dec    eax
c0003c71:	39 c8                	cmp    eax,ecx
c0003c73:	77 0c                	ja     c0003c81 <create_name+0x204>
c0003c75:	83 cb 03             	or     ebx,0x3
c0003c78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c7c:	e9 5c ff ff ff       	jmp    c0003bdd <create_name+0x160>
c0003c81:	89 e8                	mov    eax,ebp
c0003c83:	88 d3                	mov    bl,dl
c0003c85:	66 c1 e8 08          	shr    ax,0x8
c0003c89:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c8d:	41                   	inc    ecx
c0003c8e:	eb 4b                	jmp    c0003cdb <create_name+0x25e>
c0003c90:	66 85 ed             	test   bp,bp
c0003c93:	88 d3                	mov    bl,dl
c0003c95:	74 19                	je     c0003cb0 <create_name+0x233>
c0003c97:	0f b7 d5             	movzx  edx,bp
c0003c9a:	b8 7b 04 02 c0       	mov    eax,0xc002047b
c0003c9f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ca3:	e8 5f de ff ff       	call   c0001b07 <chk_chr>
c0003ca8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cac:	85 c0                	test   eax,eax
c0003cae:	74 0a                	je     c0003cba <create_name+0x23d>
c0003cb0:	83 cb 03             	or     ebx,0x3
c0003cb3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cb8:	eb 21                	jmp    c0003cdb <create_name+0x25e>
c0003cba:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cbd:	66 83 f8 19          	cmp    ax,0x19
c0003cc1:	77 07                	ja     c0003cca <create_name+0x24d>
c0003cc3:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003cc8:	eb 11                	jmp    c0003cdb <create_name+0x25e>
c0003cca:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ccd:	66 83 f8 19          	cmp    ax,0x19
c0003cd1:	77 08                	ja     c0003cdb <create_name+0x25e>
c0003cd3:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cd8:	83 ed 20             	sub    ebp,0x20
c0003cdb:	89 e8                	mov    eax,ebp
c0003cdd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce1:	41                   	inc    ecx
c0003ce2:	e9 f6 fe ff ff       	jmp    c0003bdd <create_name+0x160>
c0003ce7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ceb:	75 04                	jne    c0003cf1 <create_name+0x274>
c0003ced:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cf6:	75 05                	jne    c0003cfd <create_name+0x280>
c0003cf8:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003cfd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d01:	83 e0 0c             	and    eax,0xc
c0003d04:	3c 0c                	cmp    al,0xc
c0003d06:	74 0b                	je     c0003d13 <create_name+0x296>
c0003d08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d0c:	83 e0 03             	and    eax,0x3
c0003d0f:	3c 03                	cmp    al,0x3
c0003d11:	75 05                	jne    c0003d18 <create_name+0x29b>
c0003d13:	83 cb 02             	or     ebx,0x2
c0003d16:	eb 19                	jmp    c0003d31 <create_name+0x2b4>
c0003d18:	f6 c3 02             	test   bl,0x2
c0003d1b:	75 14                	jne    c0003d31 <create_name+0x2b4>
c0003d1d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d22:	74 03                	je     c0003d27 <create_name+0x2aa>
c0003d24:	83 cb 10             	or     ebx,0x10
c0003d27:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d2c:	74 03                	je     c0003d31 <create_name+0x2b4>
c0003d2e:	83 cb 08             	or     ebx,0x8
c0003d31:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d34:	31 c0                	xor    eax,eax
c0003d36:	83 c4 3c             	add    esp,0x3c
c0003d39:	5b                   	pop    ebx
c0003d3a:	5e                   	pop    esi
c0003d3b:	5f                   	pop    edi
c0003d3c:	5d                   	pop    ebp
c0003d3d:	c3                   	ret    

c0003d3e <xname_sum>:
c0003d3e:	56                   	push   esi
c0003d3f:	89 c6                	mov    esi,eax
c0003d41:	53                   	push   ebx
c0003d42:	31 db                	xor    ebx,ebx
c0003d44:	51                   	push   ecx
c0003d45:	83 c6 02             	add    esi,0x2
c0003d48:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d4c:	66 85 c0             	test   ax,ax
c0003d4f:	74 1f                	je     c0003d70 <xname_sum+0x32>
c0003d51:	66 d1 cb             	ror    bx,1
c0003d54:	83 ec 0c             	sub    esp,0xc
c0003d57:	50                   	push   eax
c0003d58:	e8 00 46 00 00       	call   c000835d <ff_wtoupper>
c0003d5d:	0f b6 d0             	movzx  edx,al
c0003d60:	01 d3                	add    ebx,edx
c0003d62:	83 c4 10             	add    esp,0x10
c0003d65:	66 c1 e8 08          	shr    ax,0x8
c0003d69:	66 d1 cb             	ror    bx,1
c0003d6c:	01 c3                	add    ebx,eax
c0003d6e:	eb d5                	jmp    c0003d45 <xname_sum+0x7>
c0003d70:	5a                   	pop    edx
c0003d71:	89 d8                	mov    eax,ebx
c0003d73:	5b                   	pop    ebx
c0003d74:	5e                   	pop    esi
c0003d75:	c3                   	ret    

c0003d76 <create_xdir>:
c0003d76:	55                   	push   ebp
c0003d77:	b9 40 00 00 00       	mov    ecx,0x40
c0003d7c:	57                   	push   edi
c0003d7d:	bd 01 00 00 00       	mov    ebp,0x1
c0003d82:	56                   	push   esi
c0003d83:	31 ff                	xor    edi,edi
c0003d85:	53                   	push   ebx
c0003d86:	89 c3                	mov    ebx,eax
c0003d88:	83 ec 1c             	sub    esp,0x1c
c0003d8b:	be 40 00 00 00       	mov    esi,0x40
c0003d90:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d94:	31 d2                	xor    edx,edx
c0003d96:	e8 3e dd ff ff       	call   c0001ad9 <mem_set>
c0003d9b:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d9e:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da2:	31 c9                	xor    ecx,ecx
c0003da4:	8d 46 01             	lea    eax,[esi+0x1]
c0003da7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dab:	83 c6 02             	add    esi,0x2
c0003dae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db2:	66 85 ed             	test   bp,bp
c0003db5:	74 12                	je     c0003dc9 <create_xdir+0x53>
c0003db7:	0f b6 c1             	movzx  eax,cl
c0003dba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbe:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc2:	66 83 fd 01          	cmp    bp,0x1
c0003dc6:	80 d9 ff             	sbb    cl,0xff
c0003dc9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dcc:	83 c6 02             	add    esi,0x2
c0003dcf:	0f b7 d5             	movzx  edx,bp
c0003dd2:	e8 e0 dc ff ff       	call   c0001ab7 <st_word>
c0003dd7:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003ddd:	75 d3                	jne    c0003db2 <create_xdir+0x3c>
c0003ddf:	8d 47 01             	lea    eax,[edi+0x1]
c0003de2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df2:	74 07                	je     c0003dfb <create_xdir+0x85>
c0003df4:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003df9:	eb a9                	jmp    c0003da4 <create_xdir+0x2e>
c0003dfb:	8d 47 02             	lea    eax,[edi+0x2]
c0003dfe:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e01:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e04:	89 d0                	mov    eax,edx
c0003e06:	e8 33 ff ff ff       	call   c0003d3e <xname_sum>
c0003e0b:	83 c4 1c             	add    esp,0x1c
c0003e0e:	0f b7 d0             	movzx  edx,ax
c0003e11:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e14:	5b                   	pop    ebx
c0003e15:	5e                   	pop    esi
c0003e16:	5f                   	pop    edi
c0003e17:	5d                   	pop    ebp
c0003e18:	e9 9a dc ff ff       	jmp    c0001ab7 <st_word>

c0003e1d <cmp_lfn>:
c0003e1d:	55                   	push   ebp
c0003e1e:	57                   	push   edi
c0003e1f:	89 d7                	mov    edi,edx
c0003e21:	56                   	push   esi
c0003e22:	53                   	push   ebx
c0003e23:	83 ec 1c             	sub    esp,0x1c
c0003e26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e2d:	e8 13 dc ff ff       	call   c0001a45 <ld_word>
c0003e32:	66 85 c0             	test   ax,ax
c0003e35:	74 07                	je     c0003e3e <cmp_lfn+0x21>
c0003e37:	31 c0                	xor    eax,eax
c0003e39:	e9 9a 00 00 00       	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003e3e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e40:	bd 01 00 00 00       	mov    ebp,0x1
c0003e45:	83 e3 3f             	and    ebx,0x3f
c0003e48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e50:	4b                   	dec    ebx
c0003e51:	6b db 0d             	imul   ebx,ebx,0xd
c0003e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e58:	0f b6 80 40 04 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfbc0]
c0003e5f:	01 f8                	add    eax,edi
c0003e61:	e8 df db ff ff       	call   c0001a45 <ld_word>
c0003e66:	66 85 ed             	test   bp,bp
c0003e69:	89 c6                	mov    esi,eax
c0003e6b:	74 3c                	je     c0003ea9 <cmp_lfn+0x8c>
c0003e6d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e73:	77 c2                	ja     c0003e37 <cmp_lfn+0x1a>
c0003e75:	83 ec 0c             	sub    esp,0xc
c0003e78:	0f b7 c0             	movzx  eax,ax
c0003e7b:	50                   	push   eax
c0003e7c:	e8 dc 44 00 00       	call   c000835d <ff_wtoupper>
c0003e81:	89 c5                	mov    ebp,eax
c0003e83:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e8e:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e92:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e95:	e8 c3 44 00 00       	call   c000835d <ff_wtoupper>
c0003e9a:	83 c4 10             	add    esp,0x10
c0003e9d:	39 c5                	cmp    ebp,eax
c0003e9f:	75 96                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ea1:	89 f5                	mov    ebp,esi
c0003ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ea7:	eb 04                	jmp    c0003ead <cmp_lfn+0x90>
c0003ea9:	66 46                	inc    si
c0003eab:	75 8a                	jne    c0003e37 <cmp_lfn+0x1a>
c0003ead:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003eb6:	75 9c                	jne    c0003e54 <cmp_lfn+0x37>
c0003eb8:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ebb:	74 16                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ebd:	66 85 ed             	test   bp,bp
c0003ec0:	74 11                	je     c0003ed3 <cmp_lfn+0xb6>
c0003ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ecb:	0f 94 c0             	sete   al
c0003ece:	0f b6 c0             	movzx  eax,al
c0003ed1:	eb 05                	jmp    c0003ed8 <cmp_lfn+0xbb>
c0003ed3:	b8 01 00 00 00       	mov    eax,0x1
c0003ed8:	83 c4 1c             	add    esp,0x1c
c0003edb:	5b                   	pop    ebx
c0003edc:	5e                   	pop    esi
c0003edd:	5f                   	pop    edi
c0003ede:	5d                   	pop    ebp
c0003edf:	c3                   	ret    

c0003ee0 <dir_find>:
c0003ee0:	55                   	push   ebp
c0003ee1:	31 d2                	xor    edx,edx
c0003ee3:	57                   	push   edi
c0003ee4:	56                   	push   esi
c0003ee5:	53                   	push   ebx
c0003ee6:	89 c3                	mov    ebx,eax
c0003ee8:	83 ec 1c             	sub    esp,0x1c
c0003eeb:	8b 30                	mov    esi,DWORD PTR [eax]
c0003eed:	e8 a2 f0 ff ff       	call   c0002f94 <dir_sdi>
c0003ef2:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ef5:	85 c0                	test   eax,eax
c0003ef7:	0f 85 9f 01 00 00    	jne    c000409c <dir_find+0x1bc>
c0003efd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f00:	0f 85 8e 00 00 00    	jne    c0003f94 <dir_find+0xb4>
c0003f06:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f09:	e8 30 fe ff ff       	call   c0003d3e <xname_sum>
c0003f0e:	89 c5                	mov    ebp,eax
c0003f10:	31 d2                	xor    edx,edx
c0003f12:	89 d8                	mov    eax,ebx
c0003f14:	e8 8d f8 ff ff       	call   c00037a6 <dir_read>
c0003f19:	85 c0                	test   eax,eax
c0003f1b:	0f 85 5f 01 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003f21:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f24:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f27:	e8 19 db ff ff       	call   c0001a45 <ld_word>
c0003f2c:	66 39 e8             	cmp    ax,bp
c0003f2f:	75 df                	jne    c0003f10 <dir_find+0x30>
c0003f31:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f35:	31 ff                	xor    edi,edi
c0003f37:	ba 40 00 00 00       	mov    edx,0x40
c0003f3c:	39 f9                	cmp    ecx,edi
c0003f3e:	0f 84 4a 01 00 00    	je     c000408e <dir_find+0x1ae>
c0003f44:	f6 c2 1f             	test   dl,0x1f
c0003f47:	75 03                	jne    c0003f4c <dir_find+0x6c>
c0003f49:	83 c2 02             	add    edx,0x2
c0003f4c:	89 d0                	mov    eax,edx
c0003f4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f59:	e8 e7 da ff ff       	call   c0001a45 <ld_word>
c0003f5e:	83 ec 0c             	sub    esp,0xc
c0003f61:	0f b7 c0             	movzx  eax,ax
c0003f64:	50                   	push   eax
c0003f65:	e8 f3 43 00 00       	call   c000835d <ff_wtoupper>
c0003f6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f6e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f71:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f78:	e8 e0 43 00 00       	call   c000835d <ff_wtoupper>
c0003f7d:	83 c4 10             	add    esp,0x10
c0003f80:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f84:	75 8a                	jne    c0003f10 <dir_find+0x30>
c0003f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f8a:	47                   	inc    edi
c0003f8b:	83 c2 02             	add    edx,0x2
c0003f8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f92:	eb a8                	jmp    c0003f3c <dir_find+0x5c>
c0003f94:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f9b:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fa5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fa8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fab:	89 f0                	mov    eax,esi
c0003fad:	e8 6a e2 ff ff       	call   c000221c <move_window>
c0003fb2:	85 c0                	test   eax,eax
c0003fb4:	0f 85 c6 00 00 00    	jne    c0004080 <dir_find+0x1a0>
c0003fba:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fbd:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc0:	84 c9                	test   cl,cl
c0003fc2:	0f 84 bd 00 00 00    	je     c0004085 <dir_find+0x1a5>
c0003fc8:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fcb:	88 d0                	mov    al,dl
c0003fcd:	83 e0 3f             	and    eax,0x3f
c0003fd0:	80 f9 e5             	cmp    cl,0xe5
c0003fd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fd6:	0f 84 87 00 00 00    	je     c0004063 <dir_find+0x183>
c0003fdc:	80 e2 08             	and    dl,0x8
c0003fdf:	74 06                	je     c0003fe7 <dir_find+0x107>
c0003fe1:	3c 0f                	cmp    al,0xf
c0003fe3:	75 7e                	jne    c0004063 <dir_find+0x183>
c0003fe5:	eb 04                	jmp    c0003feb <dir_find+0x10b>
c0003fe7:	3c 0f                	cmp    al,0xf
c0003fe9:	75 4c                	jne    c0004037 <dir_find+0x157>
c0003feb:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fef:	75 7e                	jne    c000406f <dir_find+0x18f>
c0003ff1:	f6 c1 40             	test   cl,0x40
c0003ff4:	74 12                	je     c0004008 <dir_find+0x128>
c0003ff6:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003ff9:	83 e1 bf             	and    ecx,0xffffffbf
c0003ffc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004000:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004003:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004006:	eb 06                	jmp    c000400e <dir_find+0x12e>
c0004008:	89 f8                	mov    eax,edi
c000400a:	38 c8                	cmp    al,cl
c000400c:	75 5c                	jne    c000406a <dir_find+0x18a>
c000400e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004012:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004017:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000401a:	75 53                	jne    c000406f <dir_find+0x18f>
c000401c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000401f:	89 ea                	mov    edx,ebp
c0004021:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0004025:	e8 f3 fd ff ff       	call   c0003e1d <cmp_lfn>
c000402a:	85 c0                	test   eax,eax
c000402c:	74 41                	je     c000406f <dir_find+0x18f>
c000402e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004032:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004035:	eb 38                	jmp    c000406f <dir_find+0x18f>
c0004037:	89 f8                	mov    eax,edi
c0004039:	84 c0                	test   al,al
c000403b:	75 0d                	jne    c000404a <dir_find+0x16a>
c000403d:	89 e8                	mov    eax,ebp
c000403f:	e8 bd de ff ff       	call   c0001f01 <sum_sfn>
c0004044:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004048:	74 52                	je     c000409c <dir_find+0x1bc>
c000404a:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000404e:	75 13                	jne    c0004063 <dir_find+0x183>
c0004050:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004053:	b9 0b 00 00 00       	mov    ecx,0xb
c0004058:	89 e8                	mov    eax,ebp
c000405a:	e8 85 da ff ff       	call   c0001ae4 <mem_cmp>
c000405f:	85 c0                	test   eax,eax
c0004061:	74 39                	je     c000409c <dir_find+0x1bc>
c0004063:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000406a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000406f:	31 d2                	xor    edx,edx
c0004071:	89 d8                	mov    eax,ebx
c0004073:	e8 76 f4 ff ff       	call   c00034ee <dir_next>
c0004078:	85 c0                	test   eax,eax
c000407a:	0f 84 25 ff ff ff    	je     c0003fa5 <dir_find+0xc5>
c0004080:	89 04 24             	mov    DWORD PTR [esp],eax
c0004083:	eb 17                	jmp    c000409c <dir_find+0x1bc>
c0004085:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000408c:	eb 0e                	jmp    c000409c <dir_find+0x1bc>
c000408e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004091:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0004096:	0f 85 74 fe ff ff    	jne    c0003f10 <dir_find+0x30>
c000409c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000409f:	83 c4 1c             	add    esp,0x1c
c00040a2:	5b                   	pop    ebx
c00040a3:	5e                   	pop    esi
c00040a4:	5f                   	pop    edi
c00040a5:	5d                   	pop    ebp
c00040a6:	c3                   	ret    

c00040a7 <dir_register>:
c00040a7:	55                   	push   ebp
c00040a8:	57                   	push   edi
c00040a9:	56                   	push   esi
c00040aa:	be 06 00 00 00       	mov    esi,0x6
c00040af:	53                   	push   ebx
c00040b0:	83 ec 6c             	sub    esp,0x6c
c00040b3:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040b7:	0f 85 63 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040bd:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040bf:	31 ff                	xor    edi,edi
c00040c1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040c4:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040c9:	74 03                	je     c00040ce <dir_register+0x27>
c00040cb:	47                   	inc    edi
c00040cc:	eb f6                	jmp    c00040c4 <dir_register+0x1d>
c00040ce:	89 c3                	mov    ebx,eax
c00040d0:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040d4:	0f 85 e1 00 00 00    	jne    c00041bb <dir_register+0x114>
c00040da:	83 c7 0e             	add    edi,0xe
c00040dd:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e2:	89 f8                	mov    eax,edi
c00040e4:	31 d2                	xor    edx,edx
c00040e6:	f7 f1                	div    ecx
c00040e8:	89 c7                	mov    edi,eax
c00040ea:	8d 50 02             	lea    edx,[eax+0x2]
c00040ed:	89 d8                	mov    eax,ebx
c00040ef:	e8 2c f8 ff ff       	call   c0003920 <dir_alloc>
c00040f4:	89 c6                	mov    esi,eax
c00040f6:	85 c0                	test   eax,eax
c00040f8:	0f 85 22 02 00 00    	jne    c0004320 <dir_register+0x279>
c00040fe:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004104:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004107:	c1 e7 05             	shl    edi,0x5
c000410a:	29 f8                	sub    eax,edi
c000410c:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000410f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004112:	a8 04                	test   al,0x4
c0004114:	0f 84 91 00 00 00    	je     c00041ab <dir_register+0x104>
c000411a:	83 e0 fb             	and    eax,0xfffffffb
c000411d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004120:	89 d8                	mov    eax,ebx
c0004122:	e8 3d ec ff ff       	call   c0002d64 <fill_first_frag>
c0004127:	85 c0                	test   eax,eax
c0004129:	0f 85 ef 01 00 00    	jne    c000431e <dir_register+0x277>
c000412f:	83 c9 ff             	or     ecx,0xffffffff
c0004132:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 f3 eb ff ff       	call   c0002d2f <fill_last_frag>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 da 01 00 00    	jne    c000431e <dir_register+0x277>
c0004144:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004148:	74 61                	je     c00041ab <dir_register+0x104>
c000414a:	89 da                	mov    edx,ebx
c000414c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004150:	e8 04 f6 ff ff       	call   c0003759 <load_obj_xdir>
c0004155:	85 c0                	test   eax,eax
c0004157:	0f 85 c1 01 00 00    	jne    c000431e <dir_register+0x277>
c000415d:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004161:	c1 e2 09             	shl    edx,0x9
c0004164:	31 c9                	xor    ecx,ecx
c0004166:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004169:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000416c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000416f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004172:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004175:	83 c0 38             	add    eax,0x38
c0004178:	e8 41 d9 ff ff       	call   c0001abe <st_qword>
c000417d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004180:	83 c0 28             	add    eax,0x28
c0004183:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004186:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004189:	e8 30 d9 ff ff       	call   c0001abe <st_qword>
c000418e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004191:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004194:	83 c8 01             	or     eax,0x1
c0004197:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000419a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000419e:	e8 f5 f7 ff ff       	call   c0003998 <store_xdir>
c00041a3:	85 c0                	test   eax,eax
c00041a5:	0f 85 73 01 00 00    	jne    c000431e <dir_register+0x277>
c00041ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b1:	e8 c0 fb ff ff       	call   c0003d76 <create_xdir>
c00041b6:	e9 65 01 00 00       	jmp    c0004320 <dir_register+0x279>
c00041bb:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041be:	b9 0c 00 00 00       	mov    ecx,0xc
c00041c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041c7:	89 c2                	mov    edx,eax
c00041c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041cd:	e8 f2 d8 ff ff       	call   c0001ac4 <mem_cpy>
c00041d2:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041d7:	74 58                	je     c0004231 <dir_register+0x18a>
c00041d9:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041dd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041e5:	83 ec 0c             	sub    esp,0xc
c00041e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041f3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041f7:	e8 49 dc ff ff       	call   c0001e45 <gen_numname>
c00041fc:	89 d8                	mov    eax,ebx
c00041fe:	e8 dd fc ff ff       	call   c0003ee0 <dir_find>
c0004203:	83 c4 10             	add    esp,0x10
c0004206:	89 c6                	mov    esi,eax
c0004208:	85 c0                	test   eax,eax
c000420a:	75 15                	jne    c0004221 <dir_register+0x17a>
c000420c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004210:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004215:	75 ce                	jne    c00041e5 <dir_register+0x13e>
c0004217:	be 07 00 00 00       	mov    esi,0x7
c000421c:	e9 ff 00 00 00       	jmp    c0004320 <dir_register+0x279>
c0004221:	83 f8 04             	cmp    eax,0x4
c0004224:	0f 85 f6 00 00 00    	jne    c0004320 <dir_register+0x279>
c000422a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000422e:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004231:	b9 01 00 00 00       	mov    ecx,0x1
c0004236:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000423b:	74 0f                	je     c000424c <dir_register+0x1a5>
c000423d:	b9 0d 00 00 00       	mov    ecx,0xd
c0004242:	8d 47 0c             	lea    eax,[edi+0xc]
c0004245:	31 d2                	xor    edx,edx
c0004247:	f7 f1                	div    ecx
c0004249:	8d 48 01             	lea    ecx,[eax+0x1]
c000424c:	89 ca                	mov    edx,ecx
c000424e:	89 d8                	mov    eax,ebx
c0004250:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004254:	e8 c7 f6 ff ff       	call   c0003920 <dir_alloc>
c0004259:	89 c6                	mov    esi,eax
c000425b:	85 c0                	test   eax,eax
c000425d:	0f 85 bd 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004267:	89 cf                	mov    edi,ecx
c0004269:	4f                   	dec    edi
c000426a:	74 6d                	je     c00042d9 <dir_register+0x232>
c000426c:	89 f8                	mov    eax,edi
c000426e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004271:	c1 e0 05             	shl    eax,0x5
c0004274:	29 c2                	sub    edx,eax
c0004276:	89 d8                	mov    eax,ebx
c0004278:	e8 17 ed ff ff       	call   c0002f94 <dir_sdi>
c000427d:	89 c6                	mov    esi,eax
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 85 99 00 00 00    	jne    c0004320 <dir_register+0x279>
c0004287:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000428b:	e8 71 dc ff ff       	call   c0001f01 <sum_sfn>
c0004290:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004294:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004297:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000429a:	89 e8                	mov    eax,ebp
c000429c:	e8 7b df ff ff       	call   c000221c <move_window>
c00042a1:	89 c6                	mov    esi,eax
c00042a3:	85 c0                	test   eax,eax
c00042a5:	75 79                	jne    c0004320 <dir_register+0x279>
c00042a7:	83 ec 0c             	sub    esp,0xc
c00042aa:	89 f8                	mov    eax,edi
c00042ac:	0f b6 c8             	movzx  ecx,al
c00042af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042b7:	52                   	push   edx
c00042b8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042bb:	e8 01 db ff ff       	call   c0001dc1 <put_lfn>
c00042c0:	31 d2                	xor    edx,edx
c00042c2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042c6:	89 d8                	mov    eax,ebx
c00042c8:	e8 21 f2 ff ff       	call   c00034ee <dir_next>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	89 c6                	mov    esi,eax
c00042d2:	85 c0                	test   eax,eax
c00042d4:	75 4a                	jne    c0004320 <dir_register+0x279>
c00042d6:	4f                   	dec    edi
c00042d7:	75 bb                	jne    c0004294 <dir_register+0x1ed>
c00042d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042df:	89 e8                	mov    eax,ebp
c00042e1:	e8 36 df ff ff       	call   c000221c <move_window>
c00042e6:	89 c6                	mov    esi,eax
c00042e8:	85 c0                	test   eax,eax
c00042ea:	75 34                	jne    c0004320 <dir_register+0x279>
c00042ec:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ef:	b9 20 00 00 00       	mov    ecx,0x20
c00042f4:	31 d2                	xor    edx,edx
c00042f6:	e8 de d7 ff ff       	call   c0001ad9 <mem_set>
c00042fb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004302:	b9 0b 00 00 00       	mov    ecx,0xb
c0004307:	e8 b8 d7 ff ff       	call   c0001ac4 <mem_cpy>
c000430c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000430f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004312:	83 e0 18             	and    eax,0x18
c0004315:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004318:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000431c:	eb 02                	jmp    c0004320 <dir_register+0x279>
c000431e:	89 c6                	mov    esi,eax
c0004320:	83 c4 6c             	add    esp,0x6c
c0004323:	89 f0                	mov    eax,esi
c0004325:	5b                   	pop    ebx
c0004326:	5e                   	pop    esi
c0004327:	5f                   	pop    edi
c0004328:	5d                   	pop    ebp
c0004329:	c3                   	ret    

c000432a <sync_fs>:
c000432a:	56                   	push   esi
c000432b:	53                   	push   ebx
c000432c:	53                   	push   ebx
c000432d:	89 c3                	mov    ebx,eax
c000432f:	e8 54 de ff ff       	call   c0002188 <sync_window>
c0004334:	85 c0                	test   eax,eax
c0004336:	0f 85 b1 00 00 00    	jne    c00043ed <sync_fs+0xc3>
c000433c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000433f:	0f 85 8e 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c0004345:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004349:	0f 85 84 00 00 00    	jne    c00043d3 <sync_fs+0xa9>
c000434f:	8d 73 54             	lea    esi,[ebx+0x54]
c0004352:	b9 00 02 00 00       	mov    ecx,0x200
c0004357:	31 d2                	xor    edx,edx
c0004359:	89 f0                	mov    eax,esi
c000435b:	e8 79 d7 ff ff       	call   c0001ad9 <mem_set>
c0004360:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004366:	ba 55 aa 00 00       	mov    edx,0xaa55
c000436b:	e8 47 d7 ff ff       	call   c0001ab7 <st_word>
c0004370:	ba 52 52 61 41       	mov    edx,0x41615252
c0004375:	89 f0                	mov    eax,esi
c0004377:	e8 3f d7 ff ff       	call   c0001abb <st_dword>
c000437c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004382:	ba 72 72 41 61       	mov    edx,0x61417272
c0004387:	e8 2f d7 ff ff       	call   c0001abb <st_dword>
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004395:	e8 21 d7 ff ff       	call   c0001abb <st_dword>
c000439a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000439d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043a3:	e8 13 d7 ff ff       	call   c0001abb <st_dword>
c00043a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043ab:	83 c0 01             	add    eax,0x1
c00043ae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b1:	83 d2 00             	adc    edx,0x0
c00043b4:	83 ec 0c             	sub    esp,0xc
c00043b7:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043ba:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043bd:	6a 01                	push   0x1
c00043bf:	52                   	push   edx
c00043c0:	50                   	push   eax
c00043c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c5:	56                   	push   esi
c00043c6:	50                   	push   eax
c00043c7:	e8 44 d6 ff ff       	call   c0001a10 <disk_write>
c00043cc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d0:	83 c4 20             	add    esp,0x20
c00043d3:	51                   	push   ecx
c00043d4:	6a 00                	push   0x0
c00043d6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043da:	6a 00                	push   0x0
c00043dc:	50                   	push   eax
c00043dd:	e8 44 d6 ff ff       	call   c0001a26 <disk_ioctl>
c00043e2:	83 c4 10             	add    esp,0x10
c00043e5:	85 c0                	test   eax,eax
c00043e7:	0f 95 c0             	setne  al
c00043ea:	0f b6 c0             	movzx  eax,al
c00043ed:	5a                   	pop    edx
c00043ee:	5b                   	pop    ebx
c00043ef:	5e                   	pop    esi
c00043f0:	c3                   	ret    

c00043f1 <create_partition>:
c00043f1:	55                   	push   ebp
c00043f2:	57                   	push   edi
c00043f3:	56                   	push   esi
c00043f4:	53                   	push   ebx
c00043f5:	83 ec 60             	sub    esp,0x60
c00043f8:	0f b6 c0             	movzx  eax,al
c00043fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ff:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004403:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004407:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000440b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000440f:	50                   	push   eax
c0004410:	6a 01                	push   0x1
c0004412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004416:	e8 0b d6 ff ff       	call   c0001a26 <disk_ioctl>
c000441b:	83 c4 10             	add    esp,0x10
c000441e:	85 c0                	test   eax,eax
c0004420:	74 0a                	je     c000442c <create_partition+0x3b>
c0004422:	b8 01 00 00 00       	mov    eax,0x1
c0004427:	e9 73 05 00 00       	jmp    c000499f <create_partition+0x5ae>
c000442c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004430:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004434:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004438:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000443c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004441:	0f 86 ed 03 00 00    	jbe    c0004834 <create_partition+0x443>
c0004447:	83 c0 df             	add    eax,0xffffffdf
c000444a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004452:	83 d2 ff             	adc    edx,0xffffffff
c0004455:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004459:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004461:	83 c0 bd             	add    eax,0xffffffbd
c0004464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004468:	83 d2 ff             	adc    edx,0xffffffff
c000446b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000446f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000447a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004482:	be 22 00 00 00       	mov    esi,0x22
c0004487:	31 ff                	xor    edi,edi
c0004489:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004491:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044a5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044ab:	75 0e                	jne    c00044bb <create_partition+0xca>
c00044ad:	b9 00 02 00 00       	mov    ecx,0x200
c00044b2:	31 d2                	xor    edx,edx
c00044b4:	89 d8                	mov    eax,ebx
c00044b6:	e8 1e d6 ff ff       	call   c0001ad9 <mem_set>
c00044bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044bf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044c7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ca:	0f 84 23 01 00 00    	je     c00045f3 <create_partition+0x202>
c00044d0:	89 f0                	mov    eax,esi
c00044d2:	89 fa                	mov    edx,edi
c00044d4:	05 ff 07 00 00       	add    eax,0x7ff
c00044d9:	83 d2 00             	adc    edx,0x0
c00044dc:	89 c1                	mov    ecx,eax
c00044de:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044e8:	89 ce                	mov    esi,ecx
c00044ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044ee:	89 d7                	mov    edi,edx
c00044f0:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044f4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044f8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00044fe:	b8 64 00 00 00       	mov    eax,0x64
c0004503:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004506:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000450a:	b8 00 00 00 00       	mov    eax,0x0
c000450f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004513:	72 41                	jb     c0004556 <create_partition+0x165>
c0004515:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000451d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004522:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004526:	01 c1                	add    ecx,eax
c0004528:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000452c:	f7 24 24             	mul    DWORD PTR [esp]
c000452f:	6a 00                	push   0x0
c0004531:	01 ca                	add    edx,ecx
c0004533:	6a 64                	push   0x64
c0004535:	52                   	push   edx
c0004536:	50                   	push   eax
c0004537:	e8 d0 ae 01 00       	call   c001f40c <__udivdi3>
c000453c:	83 c4 10             	add    esp,0x10
c000453f:	05 ff 07 00 00       	add    eax,0x7ff
c0004544:	83 d2 00             	adc    edx,0x0
c0004547:	89 c1                	mov    ecx,eax
c0004549:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000454f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004553:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004556:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000455d:	01 f0                	add    eax,esi
c000455f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004563:	11 fa                	adc    edx,edi
c0004565:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004569:	19 d1                	sbb    ecx,edx
c000456b:	73 2e                	jae    c000459b <create_partition+0x1aa>
c000456d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004571:	89 f8                	mov    eax,edi
c0004573:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004577:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000457e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004586:	73 6b                	jae    c00045f3 <create_partition+0x202>
c0004588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000458c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004590:	29 f0                	sub    eax,esi
c0004592:	19 fa                	sbb    edx,edi
c0004594:	89 04 24             	mov    DWORD PTR [esp],eax
c0004597:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000459f:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a2:	74 4f                	je     c00045f3 <create_partition+0x202>
c00045a4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045a7:	b9 10 00 00 00       	mov    ecx,0x10
c00045ac:	ba 50 04 02 c0       	mov    edx,0xc0020450
c00045b1:	e8 0e d5 ff ff       	call   c0001ac4 <mem_cpy>
c00045b6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045ba:	b9 10 00 00 00       	mov    ecx,0x10
c00045bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045c3:	e8 49 db ff ff       	call   c0002111 <make_rand>
c00045c8:	89 f2                	mov    edx,esi
c00045ca:	89 f9                	mov    ecx,edi
c00045cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045d4:	e8 e5 d4 ff ff       	call   c0001abe <st_qword>
c00045d9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045dc:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e0:	89 f2                	mov    edx,esi
c00045e2:	89 f9                	mov    ecx,edi
c00045e4:	83 c2 ff             	add    edx,0xffffffff
c00045e7:	83 d1 ff             	adc    ecx,0xffffffff
c00045ea:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045ee:	e8 cb d4 ff ff       	call   c0001abe <st_qword>
c00045f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045f7:	83 e8 80             	sub    eax,0xffffff80
c00045fa:	89 c5                	mov    ebp,eax
c00045fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004600:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004606:	75 6b                	jne    c0004673 <create_partition+0x282>
c0004608:	45                   	inc    ebp
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004612:	e8 56 da ff ff       	call   c000206d <crc32>
c0004617:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000461d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004621:	75 e5                	jne    c0004608 <create_partition+0x217>
c0004623:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004627:	83 ec 0c             	sub    esp,0xc
c000462a:	c1 ed 09             	shr    ebp,0x9
c000462d:	31 d2                	xor    edx,edx
c000462f:	6a 01                	push   0x1
c0004631:	52                   	push   edx
c0004632:	8d 45 02             	lea    eax,[ebp+0x2]
c0004635:	50                   	push   eax
c0004636:	53                   	push   ebx
c0004637:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000463b:	e8 d0 d3 ff ff       	call   c0001a10 <disk_write>
c0004640:	83 c4 20             	add    esp,0x20
c0004643:	85 c0                	test   eax,eax
c0004645:	0f 85 d7 fd ff ff    	jne    c0004422 <create_partition+0x31>
c000464b:	83 ec 0c             	sub    esp,0xc
c000464e:	89 e8                	mov    eax,ebp
c0004650:	31 d2                	xor    edx,edx
c0004652:	6a 01                	push   0x1
c0004654:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004658:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000465c:	52                   	push   edx
c000465d:	50                   	push   eax
c000465e:	53                   	push   ebx
c000465f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004663:	e8 a8 d3 ff ff       	call   c0001a10 <disk_write>
c0004668:	83 c4 20             	add    esp,0x20
c000466b:	85 c0                	test   eax,eax
c000466d:	0f 85 af fd ff ff    	jne    c0004422 <create_partition+0x31>
c0004673:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000467b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004680:	74 0d                	je     c000468f <create_partition+0x29e>
c0004682:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004686:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000468a:	e9 12 fe ff ff       	jmp    c00044a1 <create_partition+0xb0>
c000468f:	31 d2                	xor    edx,edx
c0004691:	b9 00 02 00 00       	mov    ecx,0x200
c0004696:	89 d8                	mov    eax,ebx
c0004698:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000469b:	e8 39 d4 ff ff       	call   c0001ad9 <mem_set>
c00046a0:	b9 10 00 00 00       	mov    ecx,0x10
c00046a5:	ba 40 03 02 c0       	mov    edx,0xc0020340
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 13 d4 ff ff       	call   c0001ac4 <mem_cpy>
c00046b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046b5:	f7 d2                	not    edx
c00046b7:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ba:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046bd:	e8 f9 d3 ff ff       	call   c0001abb <st_dword>
c00046c2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	ba 01 00 00 00       	mov    edx,0x1
c00046cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00046cf:	e8 ea d3 ff ff       	call   c0001abe <st_qword>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	89 e8                	mov    eax,ebp
c00046e1:	83 d1 ff             	adc    ecx,0xffffffff
c00046e4:	e8 d5 d3 ff ff       	call   c0001abe <st_qword>
c00046e9:	31 c9                	xor    ecx,ecx
c00046eb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ee:	ba 22 00 00 00       	mov    edx,0x22
c00046f3:	e8 c6 d3 ff ff       	call   c0001abe <st_qword>
c00046f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046fc:	83 c2 de             	add    edx,0xffffffde
c00046ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004703:	83 d1 ff             	adc    ecx,0xffffffff
c0004706:	8d 43 30             	lea    eax,[ebx+0x30]
c0004709:	e8 b0 d3 ff ff       	call   c0001abe <st_qword>
c000470e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004711:	ba 80 00 00 00       	mov    edx,0x80
c0004716:	31 f6                	xor    esi,esi
c0004718:	e8 9e d3 ff ff       	call   c0001abb <st_dword>
c000471d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004720:	ba 80 00 00 00       	mov    edx,0x80
c0004725:	e8 91 d3 ff ff       	call   c0001abb <st_dword>
c000472a:	ba 02 00 00 00       	mov    edx,0x2
c000472f:	89 f8                	mov    eax,edi
c0004731:	e8 85 d3 ff ff       	call   c0001abb <st_dword>
c0004736:	8d 53 38             	lea    edx,[ebx+0x38]
c0004739:	b9 10 00 00 00       	mov    ecx,0x10
c000473e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004742:	e8 ca d9 ff ff       	call   c0002111 <make_rand>
c0004747:	83 c8 ff             	or     eax,0xffffffff
c000474a:	46                   	inc    esi
c000474b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004750:	e8 18 d9 ff ff       	call   c000206d <crc32>
c0004755:	83 fe 5c             	cmp    esi,0x5c
c0004758:	75 f0                	jne    c000474a <create_partition+0x359>
c000475a:	f7 d0                	not    eax
c000475c:	8d 73 10             	lea    esi,[ebx+0x10]
c000475f:	89 c2                	mov    edx,eax
c0004761:	89 f0                	mov    eax,esi
c0004763:	e8 53 d3 ff ff       	call   c0001abb <st_dword>
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	6a 01                	push   0x1
c000476d:	6a 00                	push   0x0
c000476f:	6a 01                	push   0x1
c0004771:	53                   	push   ebx
c0004772:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004776:	e8 95 d2 ff ff       	call   c0001a10 <disk_write>
c000477b:	83 c4 20             	add    esp,0x20
c000477e:	85 c0                	test   eax,eax
c0004780:	0f 85 9c fc ff ff    	jne    c0004422 <create_partition+0x31>
c0004786:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000478a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000478e:	83 c2 ff             	add    edx,0xffffffff
c0004791:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004794:	83 d1 ff             	adc    ecx,0xffffffff
c0004797:	e8 22 d3 ff ff       	call   c0001abe <st_qword>
c000479c:	ba 01 00 00 00       	mov    edx,0x1
c00047a1:	31 c9                	xor    ecx,ecx
c00047a3:	89 e8                	mov    eax,ebp
c00047a5:	e8 14 d3 ff ff       	call   c0001abe <st_qword>
c00047aa:	89 f8                	mov    eax,edi
c00047ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047b4:	e8 05 d3 ff ff       	call   c0001abe <st_qword>
c00047b9:	89 f0                	mov    eax,esi
c00047bb:	31 d2                	xor    edx,edx
c00047bd:	31 ff                	xor    edi,edi
c00047bf:	e8 f7 d2 ff ff       	call   c0001abb <st_dword>
c00047c4:	83 c8 ff             	or     eax,0xffffffff
c00047c7:	47                   	inc    edi
c00047c8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047cd:	e8 9b d8 ff ff       	call   c000206d <crc32>
c00047d2:	83 ff 5c             	cmp    edi,0x5c
c00047d5:	75 f0                	jne    c00047c7 <create_partition+0x3d6>
c00047d7:	f7 d0                	not    eax
c00047d9:	89 c2                	mov    edx,eax
c00047db:	89 f0                	mov    eax,esi
c00047dd:	e8 d9 d2 ff ff       	call   c0001abb <st_dword>
c00047e2:	83 ec 0c             	sub    esp,0xc
c00047e5:	6a 01                	push   0x1
c00047e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047eb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047ef:	83 c0 ff             	add    eax,0xffffffff
c00047f2:	83 d2 ff             	adc    edx,0xffffffff
c00047f5:	52                   	push   edx
c00047f6:	50                   	push   eax
c00047f7:	53                   	push   ebx
c00047f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047fc:	e8 0f d2 ff ff       	call   c0001a10 <disk_write>
c0004801:	83 c4 20             	add    esp,0x20
c0004804:	85 c0                	test   eax,eax
c0004806:	0f 85 16 fc ff ff    	jne    c0004422 <create_partition+0x31>
c000480c:	31 d2                	xor    edx,edx
c000480e:	89 d8                	mov    eax,ebx
c0004810:	b9 00 02 00 00       	mov    ecx,0x200
c0004815:	e8 bf d2 ff ff       	call   c0001ad9 <mem_set>
c000481a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004820:	b9 10 00 00 00       	mov    ecx,0x10
c0004825:	ba 50 03 02 c0       	mov    edx,0xc0020350
c000482a:	e8 95 d2 ff ff       	call   c0001ac4 <mem_cpy>
c000482f:	e9 3d 01 00 00       	jmp    c0004971 <create_partition+0x580>
c0004834:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004838:	b9 05 00 00 00       	mov    ecx,0x5
c000483d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004840:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004845:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c000484a:	31 d2                	xor    edx,edx
c000484c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000484f:	f7 f6                	div    esi
c0004851:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004856:	76 0c                	jbe    c0004864 <create_partition+0x473>
c0004858:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c000485c:	49                   	dec    ecx
c000485d:	75 e6                	jne    c0004845 <create_partition+0x454>
c000485f:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c0004864:	b9 00 02 00 00       	mov    ecx,0x200
c0004869:	31 d2                	xor    edx,edx
c000486b:	89 d8                	mov    eax,ebx
c000486d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004872:	e8 62 d2 ff ff       	call   c0001ad9 <mem_set>
c0004877:	b9 64 00 00 00       	mov    ecx,0x64
c000487c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000487f:	31 d2                	xor    edx,edx
c0004881:	f7 f1                	div    ecx
c0004883:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004887:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c000488d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0004895:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c000489a:	0f 96 c2             	setbe  dl
c000489d:	85 ed                	test   ebp,ebp
c000489f:	0f 95 c0             	setne  al
c00048a2:	84 c2                	test   dl,al
c00048a4:	0f 84 c7 00 00 00    	je     c0004971 <create_partition+0x580>
c00048aa:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048ad:	0f 83 be 00 00 00    	jae    c0004971 <create_partition+0x580>
c00048b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048bb:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048be:	83 fe 64             	cmp    esi,0x64
c00048c1:	77 0c                	ja     c00048cf <create_partition+0x4de>
c00048c3:	74 07                	je     c00048cc <create_partition+0x4db>
c00048c5:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048ca:	eb 03                	jmp    c00048cf <create_partition+0x4de>
c00048cc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048cf:	89 e8                	mov    eax,ebp
c00048d1:	01 f0                	add    eax,esi
c00048d3:	72 05                	jb     c00048da <create_partition+0x4e9>
c00048d5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048d8:	76 07                	jbe    c00048e1 <create_partition+0x4f0>
c00048da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048dd:	29 ee                	sub    esi,ebp
c00048df:	eb 08                	jmp    c00048e9 <create_partition+0x4f8>
c00048e1:	85 f6                	test   esi,esi
c00048e3:	0f 84 88 00 00 00    	je     c0004971 <create_partition+0x580>
c00048e9:	89 c8                	mov    eax,ecx
c00048eb:	89 ea                	mov    edx,ebp
c00048ed:	e8 c9 d1 ff ff       	call   c0001abb <st_dword>
c00048f2:	89 f2                	mov    edx,esi
c00048f4:	bf 3f 00 00 00       	mov    edi,0x3f
c00048f9:	8d 41 04             	lea    eax,[ecx+0x4]
c00048fc:	e8 ba d1 ff ff       	call   c0001abb <st_dword>
c0004901:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004905:	31 d2                	xor    edx,edx
c0004907:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000490b:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000490e:	83 c1 10             	add    ecx,0x10
c0004911:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004916:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000491a:	89 e8                	mov    eax,ebp
c000491c:	f7 f7                	div    edi
c000491e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004922:	31 d2                	xor    edx,edx
c0004924:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004928:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c000492b:	89 c2                	mov    edx,eax
c000492d:	c1 ea 02             	shr    edx,0x2
c0004930:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004934:	47                   	inc    edi
c0004935:	01 f5                	add    ebp,esi
c0004937:	83 e2 c0             	and    edx,0xffffffc0
c000493a:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000493d:	09 fa                	or     edx,edi
c000493f:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004942:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004945:	bf 3f 00 00 00       	mov    edi,0x3f
c000494a:	31 d2                	xor    edx,edx
c000494c:	f7 f7                	div    edi
c000494e:	89 d6                	mov    esi,edx
c0004950:	31 d2                	xor    edx,edx
c0004952:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004956:	89 c7                	mov    edi,eax
c0004958:	46                   	inc    esi
c0004959:	c1 ef 02             	shr    edi,0x2
c000495c:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c000495f:	83 e7 c0             	and    edi,0xffffffc0
c0004962:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c0004965:	09 fe                	or     esi,edi
c0004967:	89 f2                	mov    edx,esi
c0004969:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c000496c:	e9 24 ff ff ff       	jmp    c0004895 <create_partition+0x4a4>
c0004971:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004977:	ba 55 aa 00 00       	mov    edx,0xaa55
c000497c:	e8 36 d1 ff ff       	call   c0001ab7 <st_word>
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	6a 01                	push   0x1
c0004986:	6a 00                	push   0x0
c0004988:	6a 00                	push   0x0
c000498a:	53                   	push   ebx
c000498b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000498f:	e8 7c d0 ff ff       	call   c0001a10 <disk_write>
c0004994:	83 c4 20             	add    esp,0x20
c0004997:	85 c0                	test   eax,eax
c0004999:	0f 95 c0             	setne  al
c000499c:	0f b6 c0             	movzx  eax,al
c000499f:	83 c4 5c             	add    esp,0x5c
c00049a2:	5b                   	pop    ebx
c00049a3:	5e                   	pop    esi
c00049a4:	5f                   	pop    edi
c00049a5:	5d                   	pop    ebp
c00049a6:	c3                   	ret    

c00049a7 <get_fileinfo>:
c00049a7:	55                   	push   ebp
c00049a8:	57                   	push   edi
c00049a9:	56                   	push   esi
c00049aa:	53                   	push   ebx
c00049ab:	83 ec 1c             	sub    esp,0x1c
c00049ae:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b0:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049b4:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049b7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049bb:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049be:	0f 84 dc 01 00 00    	je     c0004ba0 <get_fileinfo+0x1f9>
c00049c4:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049c7:	75 0f                	jne    c00049d8 <get_fileinfo+0x31>
c00049c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049cc:	83 c4 1c             	add    esp,0x1c
c00049cf:	5b                   	pop    ebx
c00049d0:	5e                   	pop    esi
c00049d1:	5f                   	pop    edi
c00049d2:	5d                   	pop    ebp
c00049d3:	e9 70 d5 ff ff       	jmp    c0001f48 <get_xfileinfo>
c00049d8:	89 d3                	mov    ebx,edx
c00049da:	89 c6                	mov    esi,eax
c00049dc:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e0:	74 6a                	je     c0004a4c <get_fileinfo+0xa5>
c00049e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ea:	31 ed                	xor    ebp,ebp
c00049ec:	31 ff                	xor    edi,edi
c00049ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049f9:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049fd:	66 85 d2             	test   dx,dx
c0004a00:	74 3e                	je     c0004a40 <get_fileinfo+0x99>
c0004a02:	66 85 ed             	test   bp,bp
c0004a05:	75 0c                	jne    c0004a13 <get_fileinfo+0x6c>
c0004a07:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a0d:	66 3d ff 07          	cmp    ax,0x7ff
c0004a11:	76 22                	jbe    c0004a35 <get_fileinfo+0x8e>
c0004a13:	89 e8                	mov    eax,ebp
c0004a15:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a1a:	c1 e0 10             	shl    eax,0x10
c0004a1d:	29 f9                	sub    ecx,edi
c0004a1f:	09 d0                	or     eax,edx
c0004a21:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a25:	e8 bb d1 ff ff       	call   c0001be5 <put_utf>
c0004a2a:	84 c0                	test   al,al
c0004a2c:	74 10                	je     c0004a3e <get_fileinfo+0x97>
c0004a2e:	0f b6 c0             	movzx  eax,al
c0004a31:	01 c7                	add    edi,eax
c0004a33:	31 d2                	xor    edx,edx
c0004a35:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a3a:	89 d5                	mov    ebp,edx
c0004a3c:	eb b0                	jmp    c00049ee <get_fileinfo+0x47>
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	66 85 ed             	test   bp,bp
c0004a43:	74 02                	je     c0004a47 <get_fileinfo+0xa0>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	83 f9 0a             	cmp    ecx,0xa
c0004a53:	0f 87 ad 00 00 00    	ja     c0004b06 <get_fileinfo+0x15f>
c0004a59:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a5c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a5f:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a63:	66 83 fa 20          	cmp    dx,0x20
c0004a67:	0f 84 92 00 00 00    	je     c0004aff <get_fileinfo+0x158>
c0004a6d:	66 83 fa 05          	cmp    dx,0x5
c0004a71:	75 05                	jne    c0004a78 <get_fileinfo+0xd1>
c0004a73:	ba e5 00 00 00       	mov    edx,0xe5
c0004a78:	83 fd 09             	cmp    ebp,0x9
c0004a7b:	75 0b                	jne    c0004a88 <get_fileinfo+0xe1>
c0004a7d:	83 ff 0b             	cmp    edi,0xb
c0004a80:	77 06                	ja     c0004a88 <get_fileinfo+0xe1>
c0004a82:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a87:	47                   	inc    edi
c0004a88:	0f b7 c2             	movzx  eax,dx
c0004a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a8f:	e8 85 d0 ff ff       	call   c0001b19 <dbc_1st>
c0004a94:	85 c0                	test   eax,eax
c0004a96:	74 2f                	je     c0004ac7 <get_fileinfo+0x120>
c0004a98:	83 fd 08             	cmp    ebp,0x8
c0004a9b:	74 2a                	je     c0004ac7 <get_fileinfo+0x120>
c0004a9d:	83 fd 0b             	cmp    ebp,0xb
c0004aa0:	74 25                	je     c0004ac7 <get_fileinfo+0x120>
c0004aa2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aa9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aad:	e8 6a d0 ff ff       	call   c0001b1c <dbc_2nd>
c0004ab2:	85 c0                	test   eax,eax
c0004ab4:	74 11                	je     c0004ac7 <get_fileinfo+0x120>
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004abd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac2:	c1 e2 08             	shl    edx,0x8
c0004ac5:	09 c2                	or     edx,eax
c0004ac7:	50                   	push   eax
c0004ac8:	50                   	push   eax
c0004ac9:	68 b5 01 00 00       	push   0x1b5
c0004ace:	0f b7 d2             	movzx  edx,dx
c0004ad1:	52                   	push   edx
c0004ad2:	e8 17 38 00 00       	call   c00082ee <ff_oem2uni>
c0004ad7:	83 c4 10             	add    esp,0x10
c0004ada:	66 85 c0             	test   ax,ax
c0004add:	75 04                	jne    c0004ae3 <get_fileinfo+0x13c>
c0004adf:	31 ff                	xor    edi,edi
c0004ae1:	eb 23                	jmp    c0004b06 <get_fileinfo+0x15f>
c0004ae3:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ae8:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004aec:	29 f9                	sub    ecx,edi
c0004aee:	0f b7 c0             	movzx  eax,ax
c0004af1:	e8 ef d0 ff ff       	call   c0001be5 <put_utf>
c0004af6:	84 c0                	test   al,al
c0004af8:	74 e5                	je     c0004adf <get_fileinfo+0x138>
c0004afa:	0f b6 c0             	movzx  eax,al
c0004afd:	01 c7                	add    edi,eax
c0004aff:	89 e9                	mov    ecx,ebp
c0004b01:	e9 4a ff ff ff       	jmp    c0004a50 <get_fileinfo+0xa9>
c0004b06:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b0b:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b0f:	75 54                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b11:	85 ff                	test   edi,edi
c0004b13:	75 0b                	jne    c0004b20 <get_fileinfo+0x179>
c0004b15:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b19:	ba 01 00 00 00       	mov    edx,0x1
c0004b1e:	eb 33                	jmp    c0004b53 <get_fileinfo+0x1ac>
c0004b20:	b1 08                	mov    cl,0x8
c0004b22:	31 d2                	xor    edx,edx
c0004b24:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b2a:	84 c0                	test   al,al
c0004b2c:	74 25                	je     c0004b53 <get_fileinfo+0x1ac>
c0004b2e:	66 83 f8 2e          	cmp    ax,0x2e
c0004b32:	74 16                	je     c0004b4a <get_fileinfo+0x1a3>
c0004b34:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b37:	66 83 ff 19          	cmp    di,0x19
c0004b3b:	77 0f                	ja     c0004b4c <get_fileinfo+0x1a5>
c0004b3d:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b40:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b43:	74 07                	je     c0004b4c <get_fileinfo+0x1a5>
c0004b45:	83 c0 20             	add    eax,0x20
c0004b48:	eb 02                	jmp    c0004b4c <get_fileinfo+0x1a5>
c0004b4a:	b1 10                	mov    cl,0x10
c0004b4c:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b50:	42                   	inc    edx
c0004b51:	eb d1                	jmp    c0004b24 <get_fileinfo+0x17d>
c0004b53:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b5f:	75 04                	jne    c0004b65 <get_fileinfo+0x1be>
c0004b61:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b6b:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b71:	83 c0 1c             	add    eax,0x1c
c0004b74:	e8 d9 ce ff ff       	call   c0001a52 <ld_dword>
c0004b79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b80:	89 03                	mov    DWORD PTR [ebx],eax
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	83 c0 16             	add    eax,0x16
c0004b88:	e8 b8 ce ff ff       	call   c0001a45 <ld_word>
c0004b8d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b91:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b94:	83 c0 18             	add    eax,0x18
c0004b97:	e8 a9 ce ff ff       	call   c0001a45 <ld_word>
c0004b9c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba0:	83 c4 1c             	add    esp,0x1c
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	5f                   	pop    edi
c0004ba6:	5d                   	pop    ebp
c0004ba7:	c3                   	ret    

c0004ba8 <ld_clust.isra.0>:
c0004ba8:	56                   	push   esi
c0004ba9:	89 c6                	mov    esi,eax
c0004bab:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bae:	53                   	push   ebx
c0004baf:	89 d3                	mov    ebx,edx
c0004bb1:	e8 8f ce ff ff       	call   c0001a45 <ld_word>
c0004bb6:	0f b7 c8             	movzx  ecx,ax
c0004bb9:	89 f0                	mov    eax,esi
c0004bbb:	3c 03                	cmp    al,0x3
c0004bbd:	75 0d                	jne    c0004bcc <ld_clust.isra.0+0x24>
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	e8 7e ce ff ff       	call   c0001a45 <ld_word>
c0004bc7:	c1 e0 10             	shl    eax,0x10
c0004bca:	09 c1                	or     ecx,eax
c0004bcc:	5b                   	pop    ebx
c0004bcd:	89 c8                	mov    eax,ecx
c0004bcf:	5e                   	pop    esi
c0004bd0:	c3                   	ret    

c0004bd1 <st_clust.isra.1>:
c0004bd1:	56                   	push   esi
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	53                   	push   ebx
c0004bd5:	89 d3                	mov    ebx,edx
c0004bd7:	0f b7 d1             	movzx  edx,cx
c0004bda:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bdd:	e8 d5 ce ff ff       	call   c0001ab7 <st_word>
c0004be2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004be5:	75 0f                	jne    c0004bf6 <st_clust.isra.1+0x25>
c0004be7:	c1 e9 10             	shr    ecx,0x10
c0004bea:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bed:	89 ca                	mov    edx,ecx
c0004bef:	5b                   	pop    ebx
c0004bf0:	5e                   	pop    esi
c0004bf1:	e9 c1 ce ff ff       	jmp    c0001ab7 <st_word>
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	c3                   	ret    

c0004bf9 <init_alloc_info.isra.2>:
c0004bf9:	56                   	push   esi
c0004bfa:	89 c6                	mov    esi,eax
c0004bfc:	53                   	push   ebx
c0004bfd:	89 d3                	mov    ebx,edx
c0004bff:	51                   	push   ecx
c0004c00:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c02:	83 c0 34             	add    eax,0x34
c0004c05:	e8 48 ce ff ff       	call   c0001a52 <ld_dword>
c0004c0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c0d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c0f:	83 c0 38             	add    eax,0x38
c0004c12:	e8 53 ce ff ff       	call   c0001a6a <ld_qword>
c0004c17:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c1a:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c1f:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c29:	83 e0 02             	and    eax,0x2
c0004c2c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c2f:	5b                   	pop    ebx
c0004c30:	5b                   	pop    ebx
c0004c31:	5e                   	pop    esi
c0004c32:	c3                   	ret    

c0004c33 <follow_path>:
c0004c33:	56                   	push   esi
c0004c34:	53                   	push   ebx
c0004c35:	89 c3                	mov    ebx,eax
c0004c37:	83 ec 14             	sub    esp,0x14
c0004c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c44:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c46:	80 fa 2f             	cmp    dl,0x2f
c0004c49:	75 07                	jne    c0004c52 <follow_path+0x1f>
c0004c4b:	40                   	inc    eax
c0004c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c50:	eb ee                	jmp    c0004c40 <follow_path+0xd>
c0004c52:	80 fa 5c             	cmp    dl,0x5c
c0004c55:	74 f4                	je     c0004c4b <follow_path+0x18>
c0004c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c5e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c65:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c68:	77 52                	ja     c0004cbc <follow_path+0x89>
c0004c6a:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c6e:	31 d2                	xor    edx,edx
c0004c70:	89 d8                	mov    eax,ebx
c0004c72:	e8 1d e3 ff ff       	call   c0002f94 <dir_sdi>
c0004c77:	eb 7c                	jmp    c0004cf5 <follow_path+0xc2>
c0004c79:	89 d8                	mov    eax,ebx
c0004c7b:	e8 60 f2 ff ff       	call   c0003ee0 <dir_find>
c0004c80:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c83:	85 c0                	test   eax,eax
c0004c85:	75 46                	jne    c0004ccd <follow_path+0x9a>
c0004c87:	80 e2 04             	and    dl,0x4
c0004c8a:	75 69                	jne    c0004cf5 <follow_path+0xc2>
c0004c8c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c90:	74 5e                	je     c0004cf0 <follow_path+0xbd>
c0004c92:	8a 06                	mov    al,BYTE PTR [esi]
c0004c94:	3c 04                	cmp    al,0x4
c0004c96:	75 41                	jne    c0004cd9 <follow_path+0xa6>
c0004c98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c9b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c9f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ca5:	30 c0                	xor    al,al
c0004ca7:	09 d0                	or     eax,edx
c0004ca9:	89 da                	mov    edx,ebx
c0004cab:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cae:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb1:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cb4:	8d 46 10             	lea    eax,[esi+0x10]
c0004cb7:	e8 3d ff ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004cbc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc0:	89 d8                	mov    eax,ebx
c0004cc2:	e8 b6 ed ff ff       	call   c0003a7d <create_name>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 ae                	je     c0004c79 <follow_path+0x46>
c0004ccb:	eb 28                	jmp    c0004cf5 <follow_path+0xc2>
c0004ccd:	83 f8 04             	cmp    eax,0x4
c0004cd0:	75 23                	jne    c0004cf5 <follow_path+0xc2>
c0004cd2:	80 e2 04             	and    dl,0x4
c0004cd5:	74 19                	je     c0004cf0 <follow_path+0xbd>
c0004cd7:	eb 1c                	jmp    c0004cf5 <follow_path+0xc2>
c0004cd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cdc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce2:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ce6:	e8 bd fe ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004ceb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cee:	eb cc                	jmp    c0004cbc <follow_path+0x89>
c0004cf0:	b8 05 00 00 00       	mov    eax,0x5
c0004cf5:	83 c4 14             	add    esp,0x14
c0004cf8:	5b                   	pop    ebx
c0004cf9:	5e                   	pop    esi
c0004cfa:	c3                   	ret    

c0004cfb <f_mount>:
c0004cfb:	53                   	push   ebx
c0004cfc:	83 ec 18             	sub    esp,0x18
c0004cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d03:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d0f:	e8 13 d3 ff ff       	call   c0002027 <get_ldnumber>
c0004d14:	89 c2                	mov    edx,eax
c0004d16:	b8 0b 00 00 00       	mov    eax,0xb
c0004d1b:	85 d2                	test   edx,edx
c0004d1d:	78 39                	js     c0004d58 <f_mount+0x5d>
c0004d1f:	8b 04 95 60 45 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbaa0]
c0004d26:	85 c0                	test   eax,eax
c0004d28:	74 03                	je     c0004d2d <f_mount+0x32>
c0004d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d31:	85 c0                	test   eax,eax
c0004d33:	74 03                	je     c0004d38 <f_mount+0x3d>
c0004d35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d3c:	89 04 95 60 45 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbaa0],eax
c0004d43:	31 c0                	xor    eax,eax
c0004d45:	84 db                	test   bl,bl
c0004d47:	74 0f                	je     c0004d58 <f_mount+0x5d>
c0004d49:	31 c9                	xor    ecx,ecx
c0004d4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d53:	e8 6f d7 ff ff       	call   c00024c7 <mount_volume>
c0004d58:	83 c4 18             	add    esp,0x18
c0004d5b:	5b                   	pop    ebx
c0004d5c:	c3                   	ret    

c0004d5d <f_open>:
c0004d5d:	55                   	push   ebp
c0004d5e:	bd 09 00 00 00       	mov    ebp,0x9
c0004d63:	57                   	push   edi
c0004d64:	56                   	push   esi
c0004d65:	53                   	push   ebx
c0004d66:	83 ec 7c             	sub    esp,0x7c
c0004d69:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d70:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d77:	85 db                	test   ebx,ebx
c0004d79:	0f 84 10 04 00 00    	je     c000518f <f_open+0x432>
c0004d7f:	89 fe                	mov    esi,edi
c0004d81:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d85:	83 e6 3f             	and    esi,0x3f
c0004d88:	89 f0                	mov    eax,esi
c0004d8a:	0f b6 c8             	movzx  ecx,al
c0004d8d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d94:	e8 2e d7 ff ff       	call   c00024c7 <mount_volume>
c0004d99:	89 c5                	mov    ebp,eax
c0004d9b:	85 c0                	test   eax,eax
c0004d9d:	0f 85 e6 03 00 00    	jne    c0005189 <f_open+0x42c>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	83 ec 0c             	sub    esp,0xc
c0004daa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004dae:	bd 11 00 00 00       	mov    ebp,0x11
c0004db3:	68 60 04 00 00       	push   0x460
c0004db8:	e8 6e 34 00 00       	call   c000822b <ff_memalloc>
c0004dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc1:	83 c4 10             	add    esp,0x10
c0004dc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dc9:	0f 84 c0 03 00 00    	je     c000518f <f_open+0x432>
c0004dcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dd7:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ddd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004de3:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dee:	e8 40 fe ff ff       	call   c0004c33 <follow_path>
c0004df3:	89 c5                	mov    ebp,eax
c0004df5:	85 c0                	test   eax,eax
c0004df7:	75 0c                	jne    c0004e05 <f_open+0xa8>
c0004df9:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dfe:	79 05                	jns    c0004e05 <f_open+0xa8>
c0004e00:	bd 06 00 00 00       	mov    ebp,0x6
c0004e05:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e0b:	0f 84 84 01 00 00    	je     c0004f95 <f_open+0x238>
c0004e11:	85 ed                	test   ebp,ebp
c0004e13:	74 20                	je     c0004e35 <f_open+0xd8>
c0004e15:	83 fd 04             	cmp    ebp,0x4
c0004e18:	0f 85 58 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e22:	83 ce 08             	or     esi,0x8
c0004e25:	e8 7d f2 ff ff       	call   c00040a7 <dir_register>
c0004e2a:	89 c5                	mov    ebp,eax
c0004e2c:	85 c0                	test   eax,eax
c0004e2e:	74 2f                	je     c0004e5f <f_open+0x102>
c0004e30:	e9 41 03 00 00       	jmp    c0005176 <f_open+0x419>
c0004e35:	bd 07 00 00 00       	mov    ebp,0x7
c0004e3a:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e3f:	0f 85 31 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e45:	bd 08 00 00 00       	mov    ebp,0x8
c0004e4a:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e50:	0f 85 20 03 00 00    	jne    c0005176 <f_open+0x419>
c0004e56:	83 e7 08             	and    edi,0x8
c0004e59:	0f 84 65 01 00 00    	je     c0004fc4 <f_open+0x267>
c0004e5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e63:	8a 02                	mov    al,BYTE PTR [edx]
c0004e65:	3c 04                	cmp    al,0x4
c0004e67:	0f 85 97 00 00 00    	jne    c0004f04 <f_open+0x1a7>
c0004e6d:	8d 42 10             	lea    eax,[edx+0x10]
c0004e70:	89 13                	mov    DWORD PTR [ebx],edx
c0004e72:	89 da                	mov    edx,ebx
c0004e74:	e8 80 fd ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e80:	31 d2                	xor    edx,edx
c0004e82:	83 c0 02             	add    eax,0x2
c0004e85:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e8a:	e8 4a cc ff ff       	call   c0001ad9 <mem_set>
c0004e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e96:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e9b:	83 c0 26             	add    eax,0x26
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	e8 34 cc ff ff       	call   c0001ad9 <mem_set>
c0004ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eac:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb0:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eb8:	83 c0 08             	add    eax,0x8
c0004ebb:	e8 fb cb ff ff       	call   c0001abb <st_dword>
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec7:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ecf:	e8 c4 ea ff ff       	call   c0003998 <store_xdir>
c0004ed4:	89 c5                	mov    ebp,eax
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	0f 85 98 02 00 00    	jne    c0005176 <f_open+0x419>
c0004ede:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee1:	85 d2                	test   edx,edx
c0004ee3:	0f 84 db 00 00 00    	je     c0004fc4 <f_open+0x267>
c0004ee9:	31 c9                	xor    ecx,ecx
c0004eeb:	89 d8                	mov    eax,ebx
c0004eed:	e8 9b e3 ff ff       	call   c000328d <remove_chain>
c0004ef2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ef6:	89 c5                	mov    ebp,eax
c0004ef8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004efb:	48                   	dec    eax
c0004efc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004eff:	e9 b8 00 00 00       	jmp    c0004fbc <f_open+0x25f>
c0004f04:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f08:	89 ea                	mov    edx,ebp
c0004f0a:	e8 99 fc ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0004f0f:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f14:	89 c7                	mov    edi,eax
c0004f16:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f19:	e8 9d cb ff ff       	call   c0001abb <st_dword>
c0004f1e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f26:	31 c9                	xor    ecx,ecx
c0004f28:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f30:	e8 9c fc ff ff       	call   c0004bd1 <st_clust.isra.1>
c0004f35:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f39:	83 c0 1c             	add    eax,0x1c
c0004f3c:	31 d2                	xor    edx,edx
c0004f3e:	e8 78 cb ff ff       	call   c0001abb <st_dword>
c0004f43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f47:	85 ff                	test   edi,edi
c0004f49:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4d:	74 75                	je     c0004fc4 <f_open+0x267>
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	31 c9                	xor    ecx,ecx
c0004f55:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f58:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	89 fa                	mov    edx,edi
c0004f69:	e8 1f e3 ff ff       	call   c000328d <remove_chain>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	85 c0                	test   eax,eax
c0004f72:	0f 85 fe 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	4f                   	dec    edi
c0004f85:	e8 92 d2 ff ff       	call   c000221c <move_window>
c0004f8a:	89 c5                	mov    ebp,eax
c0004f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f90:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f93:	eb 27                	jmp    c0004fbc <f_open+0x25f>
c0004f95:	85 ed                	test   ebp,ebp
c0004f97:	0f 85 d9 01 00 00    	jne    c0005176 <f_open+0x419>
c0004f9d:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa1:	bd 04 00 00 00       	mov    ebp,0x4
c0004fa6:	a8 10                	test   al,0x10
c0004fa8:	0f 85 c8 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fae:	83 e7 02             	and    edi,0x2
c0004fb1:	74 11                	je     c0004fc4 <f_open+0x267>
c0004fb3:	bd 07 00 00 00       	mov    ebp,0x7
c0004fb8:	a8 01                	test   al,0x1
c0004fba:	eb 02                	jmp    c0004fbe <f_open+0x261>
c0004fbc:	85 ed                	test   ebp,ebp
c0004fbe:	0f 85 b2 01 00 00    	jne    c0005176 <f_open+0x419>
c0004fc4:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fca:	74 03                	je     c0004fcf <f_open+0x272>
c0004fcc:	83 ce 40             	or     esi,0x40
c0004fcf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fd3:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fd6:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fd9:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fdc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fe3:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fe6:	8a 02                	mov    al,BYTE PTR [edx]
c0004fe8:	3c 04                	cmp    al,0x4
c0004fea:	75 2a                	jne    c0005016 <f_open+0x2b9>
c0004fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ff7:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004ffc:	30 c0                	xor    al,al
c0004ffe:	09 c8                	or     eax,ecx
c0005000:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005003:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005007:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000500a:	8d 42 10             	lea    eax,[edx+0x10]
c000500d:	89 da                	mov    edx,ebx
c000500f:	e8 e5 fb ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005014:	eb 1c                	jmp    c0005032 <f_open+0x2d5>
c0005016:	89 fa                	mov    edx,edi
c0005018:	e8 8b fb ff ff       	call   c0004ba8 <ld_clust.isra.0>
c000501d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005020:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005023:	e8 2a ca ff ff       	call   c0001a52 <ld_dword>
c0005028:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000502f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005036:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000503d:	89 03                	mov    DWORD PTR [ebx],eax
c000503f:	31 d2                	xor    edx,edx
c0005041:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005045:	b9 00 02 00 00       	mov    ecx,0x200
c000504a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000504e:	89 f0                	mov    eax,esi
c0005050:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005053:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005057:	8d 43 50             	lea    eax,[ebx+0x50]
c000505a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005061:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005068:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000506f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000507a:	e8 5a ca ff ff       	call   c0001ad9 <mem_set>
c000507f:	83 e6 20             	and    esi,0x20
c0005082:	75 07                	jne    c000508b <f_open+0x32e>
c0005084:	31 ed                	xor    ebp,ebp
c0005086:	e9 eb 00 00 00       	jmp    c0005176 <f_open+0x419>
c000508b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000508e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000509d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a1:	74 e1                	je     c0005084 <f_open+0x327>
c00050a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050ab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050b5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050b8:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050bc:	c1 e5 09             	shl    ebp,0x9
c00050bf:	31 ff                	xor    edi,edi
c00050c1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050c5:	89 f8                	mov    eax,edi
c00050c7:	89 ee                	mov    esi,ebp
c00050c9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050cd:	73 22                	jae    c00050f1 <f_open+0x394>
c00050cf:	89 d8                	mov    eax,ebx
c00050d1:	e8 c8 dc ff ff       	call   c0002d9e <get_fat>
c00050d6:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050da:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050de:	89 c2                	mov    edx,eax
c00050e0:	83 f8 01             	cmp    eax,0x1
c00050e3:	76 10                	jbe    c00050f5 <f_open+0x398>
c00050e5:	83 f8 ff             	cmp    eax,0xffffffff
c00050e8:	75 d5                	jne    c00050bf <f_open+0x362>
c00050ea:	bd 01 00 00 00       	mov    ebp,0x1
c00050ef:	eb 09                	jmp    c00050fa <f_open+0x39d>
c00050f1:	31 ed                	xor    ebp,ebp
c00050f3:	eb 05                	jmp    c00050fa <f_open+0x39d>
c00050f5:	bd 02 00 00 00       	mov    ebp,0x2
c00050fa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050fd:	85 ed                	test   ebp,ebp
c00050ff:	75 75                	jne    c0005176 <f_open+0x419>
c0005101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005105:	25 ff 01 00 00       	and    eax,0x1ff
c000510a:	0f 84 74 ff ff ff    	je     c0005084 <f_open+0x327>
c0005110:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005114:	bd 02 00 00 00       	mov    ebp,0x2
c0005119:	89 c8                	mov    eax,ecx
c000511b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000511f:	e8 ba cb ff ff       	call   c0001cde <clst2sect>
c0005124:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005128:	89 d7                	mov    edi,edx
c000512a:	09 c7                	or     edi,eax
c000512c:	74 48                	je     c0005176 <f_open+0x419>
c000512e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005136:	0f ac fe 09          	shrd   esi,edi,0x9
c000513a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000513e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005146:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000514a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000514e:	83 ec 0c             	sub    esp,0xc
c0005151:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005154:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005157:	6a 01                	push   0x1
c0005159:	52                   	push   edx
c000515a:	50                   	push   eax
c000515b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000515f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005163:	50                   	push   eax
c0005164:	e8 91 c8 ff ff       	call   c00019fa <disk_read>
c0005169:	83 c4 20             	add    esp,0x20
c000516c:	85 c0                	test   eax,eax
c000516e:	0f 95 c0             	setne  al
c0005171:	0f b6 c0             	movzx  eax,al
c0005174:	89 c5                	mov    ebp,eax
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000517d:	e8 bf 30 00 00       	call   c0008241 <ff_memfree>
c0005182:	83 c4 10             	add    esp,0x10
c0005185:	85 ed                	test   ebp,ebp
c0005187:	74 06                	je     c000518f <f_open+0x432>
c0005189:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000518f:	83 c4 7c             	add    esp,0x7c
c0005192:	89 e8                	mov    eax,ebp
c0005194:	5b                   	pop    ebx
c0005195:	5e                   	pop    esi
c0005196:	5f                   	pop    edi
c0005197:	5d                   	pop    ebp
c0005198:	c3                   	ret    

c0005199 <f_read>:
c0005199:	55                   	push   ebp
c000519a:	57                   	push   edi
c000519b:	56                   	push   esi
c000519c:	53                   	push   ebx
c000519d:	83 ec 2c             	sub    esp,0x2c
c00051a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b2:	89 d8                	mov    eax,ebx
c00051b4:	e8 88 cf ff ff       	call   c0002141 <validate>
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	85 c0                	test   eax,eax
c00051bd:	0f 85 4c 02 00 00    	jne    c000540f <f_read+0x276>
c00051c3:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051c7:	85 ed                	test   ebp,ebp
c00051c9:	0f 85 40 02 00 00    	jne    c000540f <f_read+0x276>
c00051cf:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051d3:	0f 84 31 02 00 00    	je     c000540a <f_read+0x271>
c00051d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051df:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e2:	bf 00 00 00 00       	mov    edi,0x0
c00051e7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ea:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051ee:	89 d1                	mov    ecx,edx
c00051f0:	19 f9                	sbb    ecx,edi
c00051f2:	0f 83 cf 00 00 00    	jae    c00052c7 <f_read+0x12e>
c00051f8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051fc:	e9 c6 00 00 00       	jmp    c00052c7 <f_read+0x12e>
c0005201:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005204:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005207:	89 d0                	mov    eax,edx
c0005209:	25 ff 01 00 00       	and    eax,0x1ff
c000520e:	0f 85 c9 01 00 00    	jne    c00053dd <f_read+0x244>
c0005214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005218:	89 d6                	mov    esi,edx
c000521a:	89 cf                	mov    edi,ecx
c000521c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005220:	0f ac fe 09          	shrd   esi,edi,0x9
c0005224:	48                   	dec    eax
c0005225:	21 f0                	and    eax,esi
c0005227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000522b:	0f 84 a6 00 00 00    	je     c00052d7 <f_read+0x13e>
c0005231:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005235:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005238:	89 c8                	mov    eax,ecx
c000523a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000523d:	e8 9c ca ff ff       	call   c0001cde <clst2sect>
c0005242:	89 d7                	mov    edi,edx
c0005244:	09 c7                	or     edi,eax
c0005246:	0f 84 b4 00 00 00    	je     c0005300 <f_read+0x167>
c000524c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005250:	31 ff                	xor    edi,edi
c0005252:	01 c6                	add    esi,eax
c0005254:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005257:	11 d7                	adc    edi,edx
c0005259:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005261:	0f 86 fd 00 00 00    	jbe    c0005364 <f_read+0x1cb>
c0005267:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000526b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000526f:	c1 e8 09             	shr    eax,0x9
c0005272:	89 04 24             	mov    DWORD PTR [esp],eax
c0005275:	03 14 24             	add    edx,DWORD PTR [esp]
c0005278:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000527c:	39 c2                	cmp    edx,eax
c000527e:	76 07                	jbe    c0005287 <f_read+0xee>
c0005280:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005284:	89 04 24             	mov    DWORD PTR [esp],eax
c0005287:	83 ec 0c             	sub    esp,0xc
c000528a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000528e:	57                   	push   edi
c000528f:	56                   	push   esi
c0005290:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005294:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005298:	50                   	push   eax
c0005299:	e8 5c c7 ff ff       	call   c00019fa <disk_read>
c000529e:	83 c4 20             	add    esp,0x20
c00052a1:	85 c0                	test   eax,eax
c00052a3:	75 6e                	jne    c0005313 <f_read+0x17a>
c00052a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052a9:	78 7e                	js     c0005329 <f_read+0x190>
c00052ab:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052ae:	c1 e6 09             	shl    esi,0x9
c00052b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052b5:	31 ff                	xor    edi,edi
c00052b7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052bb:	01 30                	add    DWORD PTR [eax],esi
c00052bd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c1:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052c4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052c7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052cc:	0f 85 2f ff ff ff    	jne    c0005201 <f_read+0x68>
c00052d2:	e9 38 01 00 00       	jmp    c000540f <f_read+0x276>
c00052d7:	89 c8                	mov    eax,ecx
c00052d9:	09 d0                	or     eax,edx
c00052db:	75 05                	jne    c00052e2 <f_read+0x149>
c00052dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e0:	eb 19                	jmp    c00052fb <f_read+0x162>
c00052e2:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052e6:	74 09                	je     c00052f1 <f_read+0x158>
c00052e8:	89 d8                	mov    eax,ebx
c00052ea:	e8 10 ca ff ff       	call   c0001cff <clmt_clust>
c00052ef:	eb 0a                	jmp    c00052fb <f_read+0x162>
c00052f1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052f4:	89 d8                	mov    eax,ebx
c00052f6:	e8 a3 da ff ff       	call   c0002d9e <get_fat>
c00052fb:	83 f8 01             	cmp    eax,0x1
c00052fe:	77 0e                	ja     c000530e <f_read+0x175>
c0005300:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005304:	bd 02 00 00 00       	mov    ebp,0x2
c0005309:	e9 01 01 00 00       	jmp    c000540f <f_read+0x276>
c000530e:	83 f8 ff             	cmp    eax,0xffffffff
c0005311:	75 0e                	jne    c0005321 <f_read+0x188>
c0005313:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005317:	bd 01 00 00 00       	mov    ebp,0x1
c000531c:	e9 ee 00 00 00       	jmp    c000540f <f_read+0x276>
c0005321:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005324:	e9 08 ff ff ff       	jmp    c0005231 <f_read+0x98>
c0005329:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000532c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000532f:	29 f0                	sub    eax,esi
c0005331:	19 fa                	sbb    edx,edi
c0005333:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005336:	89 d7                	mov    edi,edx
c0005338:	ba 00 00 00 00       	mov    edx,0x0
c000533d:	89 f9                	mov    ecx,edi
c000533f:	19 d1                	sbb    ecx,edx
c0005341:	0f 83 64 ff ff ff    	jae    c00052ab <f_read+0x112>
c0005347:	89 c7                	mov    edi,eax
c0005349:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534d:	c1 e7 09             	shl    edi,0x9
c0005350:	8d 53 50             	lea    edx,[ebx+0x50]
c0005353:	01 f8                	add    eax,edi
c0005355:	b9 00 02 00 00       	mov    ecx,0x200
c000535a:	e8 65 c7 ff ff       	call   c0001ac4 <mem_cpy>
c000535f:	e9 47 ff ff ff       	jmp    c00052ab <f_read+0x112>
c0005364:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005367:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000536a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000536e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005371:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005375:	75 05                	jne    c000537c <f_read+0x1e3>
c0005377:	39 34 24             	cmp    DWORD PTR [esp],esi
c000537a:	74 5b                	je     c00053d7 <f_read+0x23e>
c000537c:	8d 43 50             	lea    eax,[ebx+0x50]
c000537f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005383:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005387:	79 2a                	jns    c00053b3 <f_read+0x21a>
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000539a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000539e:	50                   	push   eax
c000539f:	e8 6c c6 ff ff       	call   c0001a10 <disk_write>
c00053a4:	83 c4 20             	add    esp,0x20
c00053a7:	85 c0                	test   eax,eax
c00053a9:	0f 85 64 ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053b3:	83 ec 0c             	sub    esp,0xc
c00053b6:	6a 01                	push   0x1
c00053b8:	57                   	push   edi
c00053b9:	56                   	push   esi
c00053ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 2e c6 ff ff       	call   c00019fa <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 3c ff ff ff    	jne    c0005313 <f_read+0x17a>
c00053d7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053da:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e0:	ba 00 02 00 00       	mov    edx,0x200
c00053e5:	25 ff 01 00 00       	and    eax,0x1ff
c00053ea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053ee:	29 c2                	sub    edx,eax
c00053f0:	39 d6                	cmp    esi,edx
c00053f2:	76 02                	jbe    c00053f6 <f_read+0x25d>
c00053f4:	89 d6                	mov    esi,edx
c00053f6:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053fa:	89 f1                	mov    ecx,esi
c00053fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005400:	e8 bf c6 ff ff       	call   c0001ac4 <mem_cpy>
c0005405:	e9 a7 fe ff ff       	jmp    c00052b1 <f_read+0x118>
c000540a:	bd 07 00 00 00       	mov    ebp,0x7
c000540f:	83 c4 2c             	add    esp,0x2c
c0005412:	89 e8                	mov    eax,ebp
c0005414:	5b                   	pop    ebx
c0005415:	5e                   	pop    esi
c0005416:	5f                   	pop    edi
c0005417:	5d                   	pop    ebp
c0005418:	c3                   	ret    

c0005419 <f_write>:
c0005419:	55                   	push   ebp
c000541a:	57                   	push   edi
c000541b:	56                   	push   esi
c000541c:	53                   	push   ebx
c000541d:	83 ec 2c             	sub    esp,0x2c
c0005420:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005424:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005428:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000542c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 08 cd ff ff       	call   c0002141 <validate>
c0005439:	89 c5                	mov    ebp,eax
c000543b:	85 c0                	test   eax,eax
c000543d:	0f 85 86 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c0005443:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005447:	85 ed                	test   ebp,ebp
c0005449:	0f 85 7a 02 00 00    	jne    c00056c9 <f_write+0x2b0>
c000544f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005453:	0f 84 6b 02 00 00    	je     c00056c4 <f_write+0x2ab>
c0005459:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000545d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005460:	0f 84 43 01 00 00    	je     c00055a9 <f_write+0x190>
c0005466:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005469:	89 c1                	mov    ecx,eax
c000546b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000546f:	0f 83 34 01 00 00    	jae    c00055a9 <f_write+0x190>
c0005475:	f7 d0                	not    eax
c0005477:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547b:	e9 29 01 00 00       	jmp    c00055a9 <f_write+0x190>
c0005480:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005483:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005486:	89 d0                	mov    eax,edx
c0005488:	25 ff 01 00 00       	and    eax,0x1ff
c000548d:	0f 85 00 02 00 00    	jne    c0005693 <f_write+0x27a>
c0005493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005497:	89 d6                	mov    esi,edx
c0005499:	89 cf                	mov    edi,ecx
c000549b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	48                   	dec    eax
c00054a4:	21 f0                	and    eax,esi
c00054a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054aa:	0f 84 06 01 00 00    	je     c00055b6 <f_write+0x19d>
c00054b0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b4:	0f 88 6e 01 00 00    	js     c0005628 <f_write+0x20f>
c00054ba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054be:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c1:	89 c8                	mov    eax,ecx
c00054c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054c7:	e8 12 c8 ff ff       	call   c0001cde <clst2sect>
c00054cc:	89 d1                	mov    ecx,edx
c00054ce:	09 c1                	or     ecx,eax
c00054d0:	0f 84 1c 01 00 00    	je     c00055f2 <f_write+0x1d9>
c00054d6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 c6                	add    esi,eax
c00054de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e2:	11 d7                	adc    edi,edx
c00054e4:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054ec:	0f 86 63 01 00 00    	jbe    c0005655 <f_write+0x23c>
c00054f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054fa:	c1 e8 09             	shr    eax,0x9
c00054fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005501:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005505:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005509:	39 c2                	cmp    edx,eax
c000550b:	76 08                	jbe    c0005515 <f_write+0xfc>
c000550d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005515:	83 ec 0c             	sub    esp,0xc
c0005518:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000551c:	57                   	push   edi
c000551d:	56                   	push   esi
c000551e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005522:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005526:	50                   	push   eax
c0005527:	e8 e4 c4 ff ff       	call   c0001a10 <disk_write>
c000552c:	83 c4 20             	add    esp,0x20
c000552f:	85 c0                	test   eax,eax
c0005531:	0f 85 ce 00 00 00    	jne    c0005605 <f_write+0x1ec>
c0005537:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000553a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000553d:	29 f0                	sub    eax,esi
c000553f:	19 fa                	sbb    edx,edi
c0005541:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005545:	89 d7                	mov    edi,edx
c0005547:	ba 00 00 00 00       	mov    edx,0x0
c000554c:	89 f9                	mov    ecx,edi
c000554e:	19 d1                	sbb    ecx,edx
c0005550:	73 1c                	jae    c000556e <f_write+0x155>
c0005552:	89 c7                	mov    edi,eax
c0005554:	b9 00 02 00 00       	mov    ecx,0x200
c0005559:	c1 e7 09             	shl    edi,0x9
c000555c:	8d 43 50             	lea    eax,[ebx+0x50]
c000555f:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005563:	89 fa                	mov    edx,edi
c0005565:	e8 5a c5 ff ff       	call   c0001ac4 <mem_cpy>
c000556a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000556e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005572:	c1 e6 09             	shl    esi,0x9
c0005575:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005579:	31 ff                	xor    edi,edi
c000557b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000557f:	01 30                	add    DWORD PTR [eax],esi
c0005581:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005585:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005588:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000558b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000558e:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005591:	89 c1                	mov    ecx,eax
c0005593:	39 f2                	cmp    edx,esi
c0005595:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005598:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000559b:	19 f9                	sbb    ecx,edi
c000559d:	73 04                	jae    c00055a3 <f_write+0x18a>
c000559f:	89 f2                	mov    edx,esi
c00055a1:	89 f8                	mov    eax,edi
c00055a3:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055a9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055ae:	0f 85 cc fe ff ff    	jne    c0005480 <f_write+0x67>
c00055b4:	eb 2e                	jmp    c00055e4 <f_write+0x1cb>
c00055b6:	89 c8                	mov    eax,ecx
c00055b8:	09 d0                	or     eax,edx
c00055ba:	75 0b                	jne    c00055c7 <f_write+0x1ae>
c00055bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	85 c0                	test   eax,eax
c00055c3:	75 28                	jne    c00055ed <f_write+0x1d4>
c00055c5:	eb 12                	jmp    c00055d9 <f_write+0x1c0>
c00055c7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055cb:	74 09                	je     c00055d6 <f_write+0x1bd>
c00055cd:	89 d8                	mov    eax,ebx
c00055cf:	e8 2b c7 ff ff       	call   c0001cff <clmt_clust>
c00055d4:	eb 0a                	jmp    c00055e0 <f_write+0x1c7>
c00055d6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055d9:	89 d8                	mov    eax,ebx
c00055db:	e8 ac da ff ff       	call   c000308c <create_chain>
c00055e0:	85 c0                	test   eax,eax
c00055e2:	75 09                	jne    c00055ed <f_write+0x1d4>
c00055e4:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055e8:	e9 dc 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c00055ed:	83 f8 01             	cmp    eax,0x1
c00055f0:	75 0e                	jne    c0005600 <f_write+0x1e7>
c00055f2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055f6:	bd 02 00 00 00       	mov    ebp,0x2
c00055fb:	e9 c9 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005600:	83 f8 ff             	cmp    eax,0xffffffff
c0005603:	75 0e                	jne    c0005613 <f_write+0x1fa>
c0005605:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005609:	bd 01 00 00 00       	mov    ebp,0x1
c000560e:	e9 b6 00 00 00       	jmp    c00056c9 <f_write+0x2b0>
c0005613:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005616:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000561a:	0f 85 90 fe ff ff    	jne    c00054b0 <f_write+0x97>
c0005620:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005623:	e9 88 fe ff ff       	jmp    c00054b0 <f_write+0x97>
c0005628:	83 ec 0c             	sub    esp,0xc
c000562b:	8d 43 50             	lea    eax,[ebx+0x50]
c000562e:	6a 01                	push   0x1
c0005630:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005633:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005636:	50                   	push   eax
c0005637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000563b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000563f:	50                   	push   eax
c0005640:	e8 cb c3 ff ff       	call   c0001a10 <disk_write>
c0005645:	83 c4 20             	add    esp,0x20
c0005648:	85 c0                	test   eax,eax
c000564a:	75 b9                	jne    c0005605 <f_write+0x1ec>
c000564c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005650:	e9 65 fe ff ff       	jmp    c00054ba <f_write+0xa1>
c0005655:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005658:	75 05                	jne    c000565f <f_write+0x246>
c000565a:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000565d:	74 2e                	je     c000568d <f_write+0x274>
c000565f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005662:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005665:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005668:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000566b:	73 20                	jae    c000568d <f_write+0x274>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	57                   	push   edi
c0005676:	56                   	push   esi
c0005677:	50                   	push   eax
c0005678:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000567c:	50                   	push   eax
c000567d:	e8 78 c3 ff ff       	call   c00019fa <disk_read>
c0005682:	83 c4 20             	add    esp,0x20
c0005685:	85 c0                	test   eax,eax
c0005687:	0f 85 78 ff ff ff    	jne    c0005605 <f_write+0x1ec>
c000568d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005690:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005693:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005696:	ba 00 02 00 00       	mov    edx,0x200
c000569b:	25 ff 01 00 00       	and    eax,0x1ff
c00056a0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056a4:	29 c2                	sub    edx,eax
c00056a6:	39 d6                	cmp    esi,edx
c00056a8:	76 02                	jbe    c00056ac <f_write+0x293>
c00056aa:	89 d6                	mov    esi,edx
c00056ac:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b0:	89 f1                	mov    ecx,esi
c00056b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056b6:	e8 09 c4 ff ff       	call   c0001ac4 <mem_cpy>
c00056bb:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056bf:	e9 b1 fe ff ff       	jmp    c0005575 <f_write+0x15c>
c00056c4:	bd 07 00 00 00       	mov    ebp,0x7
c00056c9:	83 c4 2c             	add    esp,0x2c
c00056cc:	89 e8                	mov    eax,ebp
c00056ce:	5b                   	pop    ebx
c00056cf:	5e                   	pop    esi
c00056d0:	5f                   	pop    edi
c00056d1:	5d                   	pop    ebp
c00056d2:	c3                   	ret    

c00056d3 <f_sync>:
c00056d3:	56                   	push   esi
c00056d4:	53                   	push   ebx
c00056d5:	83 ec 64             	sub    esp,0x64
c00056d8:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e0:	89 d8                	mov    eax,ebx
c00056e2:	e8 5a ca ff ff       	call   c0002141 <validate>
c00056e7:	85 c0                	test   eax,eax
c00056e9:	0f 85 ba 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c00056ef:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f2:	f6 c2 40             	test   dl,0x40
c00056f5:	0f 84 ae 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c00056fb:	84 d2                	test   dl,dl
c00056fd:	79 33                	jns    c0005732 <f_sync+0x5f>
c00056ff:	83 ec 0c             	sub    esp,0xc
c0005702:	8d 43 50             	lea    eax,[ebx+0x50]
c0005705:	6a 01                	push   0x1
c0005707:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000570a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000570d:	50                   	push   eax
c000570e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005712:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005716:	50                   	push   eax
c0005717:	e8 f4 c2 ff ff       	call   c0001a10 <disk_write>
c000571c:	89 c2                	mov    edx,eax
c000571e:	83 c4 20             	add    esp,0x20
c0005721:	b8 01 00 00 00       	mov    eax,0x1
c0005726:	85 d2                	test   edx,edx
c0005728:	0f 85 7b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000572e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005736:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005739:	0f 85 11 01 00 00    	jne    c0005850 <f_sync+0x17d>
c000573f:	89 d8                	mov    eax,ebx
c0005741:	e8 1e d6 ff ff       	call   c0002d64 <fill_first_frag>
c0005746:	85 c0                	test   eax,eax
c0005748:	0f 85 5b 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c000574e:	83 c9 ff             	or     ecx,0xffffffff
c0005751:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005754:	89 d8                	mov    eax,ebx
c0005756:	e8 d4 d5 ff ff       	call   c0002d2f <fill_last_frag>
c000575b:	85 c0                	test   eax,eax
c000575d:	0f 85 46 01 00 00    	jne    c00058a9 <f_sync+0x1d6>
c0005763:	83 ec 0c             	sub    esp,0xc
c0005766:	68 60 04 00 00       	push   0x460
c000576b:	e8 bb 2a 00 00       	call   c000822b <ff_memalloc>
c0005770:	89 c6                	mov    esi,eax
c0005772:	83 c4 10             	add    esp,0x10
c0005775:	b8 11 00 00 00       	mov    eax,0x11
c000577a:	85 f6                	test   esi,esi
c000577c:	0f 84 27 01 00 00    	je     c00058a9 <f_sync+0x1d6>
c0005782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005786:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000578c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000578f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005792:	89 da                	mov    edx,ebx
c0005794:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005798:	e8 bc df ff ff       	call   c0003759 <load_obj_xdir>
c000579d:	85 c0                	test   eax,eax
c000579f:	0f 85 95 00 00 00    	jne    c000583a <f_sync+0x167>
c00057a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057ac:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b0:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057b3:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057b6:	83 ca 01             	or     edx,0x1
c00057b9:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057bf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c2:	83 c0 34             	add    eax,0x34
c00057c5:	e8 f1 c2 ff ff       	call   c0001abb <st_dword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d4:	83 c0 38             	add    eax,0x38
c00057d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057da:	e8 df c2 ff ff       	call   c0001abe <st_qword>
c00057df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e9:	83 c0 28             	add    eax,0x28
c00057ec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ef:	e8 ca c2 ff ff       	call   c0001abe <st_qword>
c00057f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fb:	ba 00 00 21 50       	mov    edx,0x50210000
c0005800:	83 c0 0c             	add    eax,0xc
c0005803:	e8 b3 c2 ff ff       	call   c0001abb <st_dword>
c0005808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000580f:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005813:	31 d2                	xor    edx,edx
c0005815:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005818:	83 c0 10             	add    eax,0x10
c000581b:	e8 9b c2 ff ff       	call   c0001abb <st_dword>
c0005820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005824:	e8 6f e1 ff ff       	call   c0003998 <store_xdir>
c0005829:	85 c0                	test   eax,eax
c000582b:	75 0d                	jne    c000583a <f_sync+0x167>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	e8 f4 ea ff ff       	call   c000432a <sync_fs>
c0005836:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000583a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000583e:	83 ec 0c             	sub    esp,0xc
c0005841:	56                   	push   esi
c0005842:	e8 fa 29 00 00       	call   c0008241 <ff_memfree>
c0005847:	83 c4 10             	add    esp,0x10
c000584a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000584e:	eb 59                	jmp    c00058a9 <f_sync+0x1d6>
c0005850:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005853:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005856:	e8 c1 c9 ff ff       	call   c000221c <move_window>
c000585b:	85 c0                	test   eax,eax
c000585d:	75 4a                	jne    c00058a9 <f_sync+0x1d6>
c000585f:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005862:	89 f2                	mov    edx,esi
c0005864:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005868:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000586b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000586d:	e8 5f f3 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0005872:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005875:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005878:	e8 3e c2 ff ff       	call   c0001abb <st_dword>
c000587d:	8d 46 16             	lea    eax,[esi+0x16]
c0005880:	ba 00 00 21 50       	mov    edx,0x50210000
c0005885:	e8 31 c2 ff ff       	call   c0001abb <st_dword>
c000588a:	8d 46 12             	lea    eax,[esi+0x12]
c000588d:	31 d2                	xor    edx,edx
c000588f:	e8 23 c2 ff ff       	call   c0001ab7 <st_word>
c0005894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005898:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000589c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a0:	e8 85 ea ff ff       	call   c000432a <sync_fs>
c00058a5:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058a9:	83 c4 64             	add    esp,0x64
c00058ac:	5b                   	pop    ebx
c00058ad:	5e                   	pop    esi
c00058ae:	c3                   	ret    

c00058af <f_close>:
c00058af:	53                   	push   ebx
c00058b0:	83 ec 24             	sub    esp,0x24
c00058b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058b7:	53                   	push   ebx
c00058b8:	e8 16 fe ff ff       	call   c00056d3 <f_sync>
c00058bd:	83 c4 10             	add    esp,0x10
c00058c0:	85 c0                	test   eax,eax
c00058c2:	75 15                	jne    c00058d9 <f_close+0x2a>
c00058c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058c8:	89 d8                	mov    eax,ebx
c00058ca:	e8 72 c8 ff ff       	call   c0002141 <validate>
c00058cf:	85 c0                	test   eax,eax
c00058d1:	75 06                	jne    c00058d9 <f_close+0x2a>
c00058d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058d9:	83 c4 18             	add    esp,0x18
c00058dc:	5b                   	pop    ebx
c00058dd:	c3                   	ret    

c00058de <f_lseek>:
c00058de:	55                   	push   ebp
c00058df:	57                   	push   edi
c00058e0:	56                   	push   esi
c00058e1:	53                   	push   ebx
c00058e2:	83 ec 3c             	sub    esp,0x3c
c00058e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058e9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058ed:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00058f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058f8:	89 d8                	mov    eax,ebx
c00058fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058fe:	e8 3e c8 ff ff       	call   c0002141 <validate>
c0005903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005907:	85 c0                	test   eax,eax
c0005909:	0f 85 28 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000590f:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005917:	85 c0                	test   eax,eax
c0005919:	0f 85 18 04 00 00    	jne    c0005d37 <f_lseek+0x459>
c000591f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005923:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005926:	74 0c                	je     c0005934 <f_lseek+0x56>
c0005928:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000592b:	85 c0                	test   eax,eax
c000592d:	75 1f                	jne    c000594e <f_lseek+0x70>
c000592f:	e9 8b 01 00 00       	jmp    c0005abf <f_lseek+0x1e1>
c0005934:	83 c9 ff             	or     ecx,0xffffffff
c0005937:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000593a:	89 d8                	mov    eax,ebx
c000593c:	e8 ee d3 ff ff       	call   c0002d2f <fill_last_frag>
c0005941:	85 c0                	test   eax,eax
c0005943:	74 e3                	je     c0005928 <f_lseek+0x4a>
c0005945:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005949:	e9 e9 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c000594e:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005953:	0f 85 ac 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005959:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000595d:	0f 85 a2 00 00 00    	jne    c0005a05 <f_lseek+0x127>
c0005963:	8d 78 04             	lea    edi,[eax+0x4]
c0005966:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005969:	8b 00                	mov    eax,DWORD PTR [eax]
c000596b:	be 02 00 00 00       	mov    esi,0x2
c0005970:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005974:	85 ed                	test   ebp,ebp
c0005976:	74 73                	je     c00059eb <f_lseek+0x10d>
c0005978:	89 e9                	mov    ecx,ebp
c000597a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005981:	89 ca                	mov    edx,ecx
c0005983:	89 d8                	mov    eax,ebx
c0005985:	ff 04 24             	inc    DWORD PTR [esp]
c0005988:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000598c:	e8 0d d4 ff ff       	call   c0002d9e <get_fat>
c0005991:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005995:	83 f8 01             	cmp    eax,0x1
c0005998:	77 11                	ja     c00059ab <f_lseek+0xcd>
c000599a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000599e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059a6:	e9 8c 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059ab:	83 f8 ff             	cmp    eax,0xffffffff
c00059ae:	75 11                	jne    c00059c1 <f_lseek+0xe3>
c00059b0:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059b4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059bc:	e9 76 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c00059c1:	8d 51 01             	lea    edx,[ecx+0x1]
c00059c4:	89 c1                	mov    ecx,eax
c00059c6:	39 c2                	cmp    edx,eax
c00059c8:	74 b7                	je     c0005981 <f_lseek+0xa3>
c00059ca:	83 c6 02             	add    esi,0x2
c00059cd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d1:	72 0b                	jb     c00059de <f_lseek+0x100>
c00059d3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059d6:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059d9:	89 0f                	mov    DWORD PTR [edi],ecx
c00059db:	83 c7 08             	add    edi,0x8
c00059de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e2:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059e5:	76 04                	jbe    c00059eb <f_lseek+0x10d>
c00059e7:	89 c5                	mov    ebp,eax
c00059e9:	eb 8d                	jmp    c0005978 <f_lseek+0x9a>
c00059eb:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059ee:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f2:	89 30                	mov    DWORD PTR [eax],esi
c00059f4:	0f 87 35 03 00 00    	ja     c0005d2f <f_lseek+0x451>
c00059fa:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a00:	e9 32 03 00 00       	jmp    c0005d37 <f_lseek+0x459>
c0005a05:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a08:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a0b:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a12:	19 f8                	sbb    eax,edi
c0005a14:	73 07                	jae    c0005a1d <f_lseek+0x13f>
c0005a16:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a19:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a1d:	89 f8                	mov    eax,edi
c0005a1f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a22:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a25:	09 f0                	or     eax,esi
c0005a27:	0f 84 0a 03 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a2d:	89 f0                	mov    eax,esi
c0005a2f:	89 fa                	mov    edx,edi
c0005a31:	83 c0 ff             	add    eax,0xffffffff
c0005a34:	83 d2 ff             	adc    edx,0xffffffff
c0005a37:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a3a:	89 d1                	mov    ecx,edx
c0005a3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a40:	89 c2                	mov    edx,eax
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 b6 c2 ff ff       	call   c0001cff <clmt_clust>
c0005a49:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a50:	89 c2                	mov    edx,eax
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a58:	e8 81 c2 ff ff       	call   c0001cde <clst2sect>
c0005a5d:	89 d1                	mov    ecx,edx
c0005a5f:	09 c1                	or     ecx,eax
c0005a61:	0f 84 33 ff ff ff    	je     c000599a <f_lseek+0xbc>
c0005a67:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a6d:	0f 84 c4 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005a73:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1c3>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 96 02 00 00    	je     c0005d37 <f_lseek+0x459>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 58 02 00 00    	jns    c0005d06 <f_lseek+0x428>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 32 02 00 00       	jmp    c0005cf1 <f_lseek+0x413>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x200>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x200>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x21e>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x21e>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b00:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b03:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x244>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 87 01 00 00       	jmp    c0005ca9 <f_lseek+0x3cb>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	89 d7                	mov    edi,edx
c0005b2b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b2f:	09 c7                	or     edi,eax
c0005b31:	74 6b                	je     c0005b9e <f_lseek+0x2c0>
c0005b33:	83 c0 ff             	add    eax,0xffffffff
c0005b36:	89 cf                	mov    edi,ecx
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b46:	83 c0 ff             	add    eax,0xffffffff
c0005b49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b4d:	83 d2 ff             	adc    edx,0xffffffff
c0005b50:	31 ed                	xor    ebp,ebp
c0005b52:	55                   	push   ebp
c0005b53:	51                   	push   ecx
c0005b54:	52                   	push   edx
c0005b55:	50                   	push   eax
c0005b56:	e8 b1 98 01 00       	call   c001f40c <__udivdi3>
c0005b5b:	83 c4 10             	add    esp,0x10
c0005b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b62:	89 d6                	mov    esi,edx
c0005b64:	55                   	push   ebp
c0005b65:	57                   	push   edi
c0005b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b6e:	e8 99 98 01 00       	call   c001f40c <__udivdi3>
c0005b73:	83 c4 10             	add    esp,0x10
c0005b76:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b7a:	19 d6                	sbb    esi,edx
c0005b7c:	72 20                	jb     c0005b9e <f_lseek+0x2c0>
c0005b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b86:	f7 d9                	neg    ecx
c0005b88:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b8c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b8f:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b95:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x2e8>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x2e5>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 de d4 ff ff       	call   c000308c <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 e3 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 f0 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005bce:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd2:	31 ff                	xor    edi,edi
c0005bd4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bd7:	89 fd                	mov    ebp,edi
c0005bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bdd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be3:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005be7:	73 7d                	jae    c0005c66 <f_lseek+0x388>
c0005be9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bec:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf0:	01 d6                	add    esi,edx
c0005bf2:	11 cf                	adc    edi,ecx
c0005bf4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bf7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005bfa:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005bfd:	f6 c2 02             	test   dl,0x2
c0005c00:	74 25                	je     c0005c27 <f_lseek+0x349>
c0005c02:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c05:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c08:	19 f9                	sbb    ecx,edi
c0005c0a:	73 0c                	jae    c0005c18 <f_lseek+0x33a>
c0005c0c:	83 ca 40             	or     edx,0x40
c0005c0f:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c12:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c15:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c18:	89 c2                	mov    edx,eax
c0005c1a:	89 d8                	mov    eax,ebx
c0005c1c:	e8 6b d4 ff ff       	call   c000308c <create_chain>
c0005c21:	85 c0                	test   eax,eax
c0005c23:	75 0b                	jne    c0005c30 <f_lseek+0x352>
c0005c25:	eb 30                	jmp    c0005c57 <f_lseek+0x379>
c0005c27:	89 c2                	mov    edx,eax
c0005c29:	89 d8                	mov    eax,ebx
c0005c2b:	e8 6e d1 ff ff       	call   c0002d9e <get_fat>
c0005c30:	83 f8 ff             	cmp    eax,0xffffffff
c0005c33:	0f 84 77 fd ff ff    	je     c00059b0 <f_lseek+0xd2>
c0005c39:	83 f8 01             	cmp    eax,0x1
c0005c3c:	0f 86 58 fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c46:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c49:	0f 86 4b fd ff ff    	jbe    c000599a <f_lseek+0xbc>
c0005c4f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c52:	e9 77 ff ff ff       	jmp    c0005bce <f_lseek+0x2f0>
c0005c57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c69:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c6d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c70:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c73:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c76:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c7c:	0f 84 97 fe ff ff    	je     c0005b19 <f_lseek+0x23b>
c0005c82:	89 c2                	mov    edx,eax
c0005c84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c88:	e8 51 c0 ff ff       	call   c0001cde <clst2sect>
c0005c8d:	89 d7                	mov    edi,edx
c0005c8f:	09 c7                	or     edi,eax
c0005c91:	0f 84 03 fd ff ff    	je     c000599a <f_lseek+0xbc>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c9e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca2:	c1 ef 09             	shr    edi,0x9
c0005ca5:	01 c6                	add    esi,eax
c0005ca7:	11 d7                	adc    edi,edx
c0005ca9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005caf:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb2:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cb5:	19 d1                	sbb    ecx,edx
c0005cb7:	73 0a                	jae    c0005cc3 <f_lseek+0x3e5>
c0005cb9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cbd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cc8:	74 6d                	je     c0005d37 <f_lseek+0x459>
c0005cca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ccd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd0:	39 fa                	cmp    edx,edi
c0005cd2:	75 04                	jne    c0005cd8 <f_lseek+0x3fa>
c0005cd4:	39 f0                	cmp    eax,esi
c0005cd6:	74 5f                	je     c0005d37 <f_lseek+0x459>
c0005cd8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cdb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cdf:	79 25                	jns    c0005d06 <f_lseek+0x428>
c0005ce1:	83 ec 0c             	sub    esp,0xc
c0005ce4:	6a 01                	push   0x1
c0005ce6:	52                   	push   edx
c0005ce7:	50                   	push   eax
c0005ce8:	55                   	push   ebp
c0005ce9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf1:	50                   	push   eax
c0005cf2:	e8 19 bd ff ff       	call   c0001a10 <disk_write>
c0005cf7:	83 c4 20             	add    esp,0x20
c0005cfa:	85 c0                	test   eax,eax
c0005cfc:	0f 85 ae fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d02:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d06:	83 ec 0c             	sub    esp,0xc
c0005d09:	6a 01                	push   0x1
c0005d0b:	57                   	push   edi
c0005d0c:	56                   	push   esi
c0005d0d:	55                   	push   ebp
c0005d0e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d12:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d16:	50                   	push   eax
c0005d17:	e8 de bc ff ff       	call   c00019fa <disk_read>
c0005d1c:	83 c4 20             	add    esp,0x20
c0005d1f:	85 c0                	test   eax,eax
c0005d21:	0f 85 89 fc ff ff    	jne    c00059b0 <f_lseek+0xd2>
c0005d27:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d2a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d2d:	eb 08                	jmp    c0005d37 <f_lseek+0x459>
c0005d2f:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3b:	83 c4 3c             	add    esp,0x3c
c0005d3e:	5b                   	pop    ebx
c0005d3f:	5e                   	pop    esi
c0005d40:	5f                   	pop    edi
c0005d41:	5d                   	pop    ebp
c0005d42:	c3                   	ret    

c0005d43 <f_opendir>:
c0005d43:	56                   	push   esi
c0005d44:	b8 09 00 00 00       	mov    eax,0x9
c0005d49:	53                   	push   ebx
c0005d4a:	83 ec 24             	sub    esp,0x24
c0005d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d51:	85 db                	test   ebx,ebx
c0005d53:	0f 84 e6 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d59:	31 c9                	xor    ecx,ecx
c0005d5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d5f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d63:	e8 5f c7 ff ff       	call   c00024c7 <mount_volume>
c0005d68:	85 c0                	test   eax,eax
c0005d6a:	0f 85 c9 00 00 00    	jne    c0005e39 <f_opendir+0xf6>
c0005d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	89 03                	mov    DWORD PTR [ebx],eax
c0005d79:	68 60 04 00 00       	push   0x460
c0005d7e:	e8 a8 24 00 00       	call   c000822b <ff_memalloc>
c0005d83:	89 c6                	mov    esi,eax
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	b8 11 00 00 00       	mov    eax,0x11
c0005d8d:	85 f6                	test   esi,esi
c0005d8f:	0f 84 aa 00 00 00    	je     c0005e3f <f_opendir+0xfc>
c0005d95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d99:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005da5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 83 ee ff ff       	call   c0004c33 <follow_path>
c0005db0:	85 c0                	test   eax,eax
c0005db2:	75 61                	jne    c0005e15 <f_opendir+0xd2>
c0005db4:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005db8:	78 46                	js     c0005e00 <f_opendir+0xbd>
c0005dba:	b8 05 00 00 00       	mov    eax,0x5
c0005dbf:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dc3:	74 50                	je     c0005e15 <f_opendir+0xd2>
c0005dc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc9:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dcb:	3c 04                	cmp    al,0x4
c0005dcd:	75 26                	jne    c0005df5 <f_opendir+0xb2>
c0005dcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dd5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dd8:	30 d2                	xor    dl,dl
c0005dda:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005dde:	09 c2                	or     edx,eax
c0005de0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005de3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005de6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005de9:	89 da                	mov    edx,ebx
c0005deb:	8d 41 10             	lea    eax,[ecx+0x10]
c0005dee:	e8 06 ee ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0005df3:	eb 0b                	jmp    c0005e00 <f_opendir+0xbd>
c0005df5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005df8:	e8 ab ed ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0005dfd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e0a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 7f d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e19:	83 ec 0c             	sub    esp,0xc
c0005e1c:	56                   	push   esi
c0005e1d:	e8 1f 24 00 00       	call   c0008241 <ff_memfree>
c0005e22:	83 c4 10             	add    esp,0x10
c0005e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e29:	83 f8 04             	cmp    eax,0x4
c0005e2c:	74 06                	je     c0005e34 <f_opendir+0xf1>
c0005e2e:	85 c0                	test   eax,eax
c0005e30:	74 0d                	je     c0005e3f <f_opendir+0xfc>
c0005e32:	eb 05                	jmp    c0005e39 <f_opendir+0xf6>
c0005e34:	b8 05 00 00 00       	mov    eax,0x5
c0005e39:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e3f:	83 c4 24             	add    esp,0x24
c0005e42:	5b                   	pop    ebx
c0005e43:	5e                   	pop    esi
c0005e44:	c3                   	ret    

c0005e45 <f_closedir>:
c0005e45:	53                   	push   ebx
c0005e46:	83 ec 18             	sub    esp,0x18
c0005e49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e4d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e51:	89 d8                	mov    eax,ebx
c0005e53:	e8 e9 c2 ff ff       	call   c0002141 <validate>
c0005e58:	85 c0                	test   eax,eax
c0005e5a:	75 06                	jne    c0005e62 <f_closedir+0x1d>
c0005e5c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e62:	83 c4 18             	add    esp,0x18
c0005e65:	5b                   	pop    ebx
c0005e66:	c3                   	ret    

c0005e67 <f_readdir>:
c0005e67:	57                   	push   edi
c0005e68:	56                   	push   esi
c0005e69:	53                   	push   ebx
c0005e6a:	83 ec 20             	sub    esp,0x20
c0005e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e7b:	e8 c1 c2 ff ff       	call   c0002141 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 77                	jne    c0005efb <f_readdir+0x94>
c0005e84:	85 ff                	test   edi,edi
c0005e86:	75 0b                	jne    c0005e93 <f_readdir+0x2c>
c0005e88:	31 d2                	xor    edx,edx
c0005e8a:	89 d8                	mov    eax,ebx
c0005e8c:	e8 03 d1 ff ff       	call   c0002f94 <dir_sdi>
c0005e91:	eb 68                	jmp    c0005efb <f_readdir+0x94>
c0005e93:	83 ec 0c             	sub    esp,0xc
c0005e96:	68 60 04 00 00       	push   0x460
c0005e9b:	e8 8b 23 00 00       	call   c000822b <ff_memalloc>
c0005ea0:	89 c6                	mov    esi,eax
c0005ea2:	83 c4 10             	add    esp,0x10
c0005ea5:	b8 11 00 00 00       	mov    eax,0x11
c0005eaa:	85 f6                	test   esi,esi
c0005eac:	74 4d                	je     c0005efb <f_readdir+0x94>
c0005eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ebb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 df d8 ff ff       	call   c00037a6 <dir_read>
c0005ec7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ecc:	75 19                	jne    c0005ee7 <f_readdir+0x80>
c0005ece:	89 fa                	mov    edx,edi
c0005ed0:	89 d8                	mov    eax,ebx
c0005ed2:	e8 d0 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005ed7:	31 d2                	xor    edx,edx
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	e8 0e d6 ff ff       	call   c00034ee <dir_next>
c0005ee0:	83 f8 04             	cmp    eax,0x4
c0005ee3:	75 02                	jne    c0005ee7 <f_readdir+0x80>
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eeb:	83 ec 0c             	sub    esp,0xc
c0005eee:	56                   	push   esi
c0005eef:	e8 4d 23 00 00       	call   c0008241 <ff_memfree>
c0005ef4:	83 c4 10             	add    esp,0x10
c0005ef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005efb:	83 c4 20             	add    esp,0x20
c0005efe:	5b                   	pop    ebx
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <f_stat>:
c0005f02:	57                   	push   edi
c0005f03:	31 c9                	xor    ecx,ecx
c0005f05:	56                   	push   esi
c0005f06:	53                   	push   ebx
c0005f07:	83 ec 50             	sub    esp,0x50
c0005f0a:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f0e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f12:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f16:	e8 ac c5 ff ff       	call   c00024c7 <mount_volume>
c0005f1b:	89 c3                	mov    ebx,eax
c0005f1d:	85 c0                	test   eax,eax
c0005f1f:	75 67                	jne    c0005f88 <f_stat+0x86>
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	bb 11 00 00 00       	mov    ebx,0x11
c0005f29:	68 60 04 00 00       	push   0x460
c0005f2e:	e8 f8 22 00 00       	call   c000822b <ff_memalloc>
c0005f33:	83 c4 10             	add    esp,0x10
c0005f36:	89 c6                	mov    esi,eax
c0005f38:	85 c0                	test   eax,eax
c0005f3a:	74 4c                	je     c0005f88 <f_stat+0x86>
c0005f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f40:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f46:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f49:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f4c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f54:	e8 da ec ff ff       	call   c0004c33 <follow_path>
c0005f59:	89 c3                	mov    ebx,eax
c0005f5b:	85 c0                	test   eax,eax
c0005f5d:	75 1d                	jne    c0005f7c <f_stat+0x7a>
c0005f5f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f64:	78 11                	js     c0005f77 <f_stat+0x75>
c0005f66:	85 ff                	test   edi,edi
c0005f68:	74 12                	je     c0005f7c <f_stat+0x7a>
c0005f6a:	89 fa                	mov    edx,edi
c0005f6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f70:	e8 32 ea ff ff       	call   c00049a7 <get_fileinfo>
c0005f75:	eb 05                	jmp    c0005f7c <f_stat+0x7a>
c0005f77:	bb 06 00 00 00       	mov    ebx,0x6
c0005f7c:	83 ec 0c             	sub    esp,0xc
c0005f7f:	56                   	push   esi
c0005f80:	e8 bc 22 00 00       	call   c0008241 <ff_memfree>
c0005f85:	83 c4 10             	add    esp,0x10
c0005f88:	83 c4 50             	add    esp,0x50
c0005f8b:	89 d8                	mov    eax,ebx
c0005f8d:	5b                   	pop    ebx
c0005f8e:	5e                   	pop    esi
c0005f8f:	5f                   	pop    edi
c0005f90:	c3                   	ret    

c0005f91 <f_getfree>:
c0005f91:	55                   	push   ebp
c0005f92:	31 c9                	xor    ecx,ecx
c0005f94:	57                   	push   edi
c0005f95:	56                   	push   esi
c0005f96:	53                   	push   ebx
c0005f97:	83 ec 5c             	sub    esp,0x5c
c0005f9a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f9e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa2:	e8 20 c5 ff ff       	call   c00024c7 <mount_volume>
c0005fa7:	89 c5                	mov    ebp,eax
c0005fa9:	85 c0                	test   eax,eax
c0005fab:	0f 85 be 01 00 00    	jne    c000616f <f_getfree+0x1de>
c0005fb1:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fb9:	89 02                	mov    DWORD PTR [edx],eax
c0005fbb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fc5:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fc8:	39 f2                	cmp    edx,esi
c0005fca:	77 0b                	ja     c0005fd7 <f_getfree+0x46>
c0005fcc:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd0:	89 10                	mov    DWORD PTR [eax],edx
c0005fd2:	e9 98 01 00 00       	jmp    c000616f <f_getfree+0x1de>
c0005fd7:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fd9:	80 fa 01             	cmp    dl,0x1
c0005fdc:	75 3a                	jne    c0006018 <f_getfree+0x87>
c0005fde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe2:	be 02 00 00 00       	mov    esi,0x2
c0005fe7:	31 db                	xor    ebx,ebx
c0005fe9:	89 f2                	mov    edx,esi
c0005feb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fef:	e8 aa cd ff ff       	call   c0002d9e <get_fat>
c0005ff4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ff7:	0f 84 51 01 00 00    	je     c000614e <f_getfree+0x1bd>
c0005ffd:	83 f8 01             	cmp    eax,0x1
c0006000:	0f 84 4f 01 00 00    	je     c0006155 <f_getfree+0x1c4>
c0006006:	83 d3 00             	adc    ebx,0x0
c0006009:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600d:	46                   	inc    esi
c000600e:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006011:	77 d6                	ja     c0005fe9 <f_getfree+0x58>
c0006013:	e9 46 01 00 00       	jmp    c000615e <f_getfree+0x1cd>
c0006018:	80 fa 04             	cmp    dl,0x4
c000601b:	0f 85 94 00 00 00    	jne    c00060b5 <f_getfree+0x124>
c0006021:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006024:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000602b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000602f:	31 ff                	xor    edi,edi
c0006031:	31 db                	xor    ebx,ebx
c0006033:	85 ff                	test   edi,edi
c0006035:	75 3f                	jne    c0006076 <f_getfree+0xe5>
c0006037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000603b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000603f:	83 c0 01             	add    eax,0x1
c0006042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006046:	83 d2 00             	adc    edx,0x0
c0006049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000604d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006051:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006055:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006059:	e8 be c1 ff ff       	call   c000221c <move_window>
c000605e:	85 c0                	test   eax,eax
c0006060:	0f 85 f6 00 00 00    	jne    c000615c <f_getfree+0x1cb>
c0006066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000606a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000606e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006072:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006076:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607a:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c000607e:	88 c2                	mov    dl,al
c0006080:	b8 08 00 00 00       	mov    eax,0x8
c0006085:	29 f0                	sub    eax,esi
c0006087:	89 c1                	mov    ecx,eax
c0006089:	01 f1                	add    ecx,esi
c000608b:	74 18                	je     c00060a5 <f_getfree+0x114>
c000608d:	85 f6                	test   esi,esi
c000608f:	74 14                	je     c00060a5 <f_getfree+0x114>
c0006091:	88 d1                	mov    cl,dl
c0006093:	83 e1 01             	and    ecx,0x1
c0006096:	80 f9 01             	cmp    cl,0x1
c0006099:	88 d1                	mov    cl,dl
c000609b:	83 d3 00             	adc    ebx,0x0
c000609e:	4e                   	dec    esi
c000609f:	d0 e9                	shr    cl,1
c00060a1:	88 ca                	mov    dl,cl
c00060a3:	eb e2                	jmp    c0006087 <f_getfree+0xf6>
c00060a5:	47                   	inc    edi
c00060a6:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060ac:	85 f6                	test   esi,esi
c00060ae:	75 83                	jne    c0006033 <f_getfree+0xa2>
c00060b0:	e9 a9 00 00 00       	jmp    c000615e <f_getfree+0x1cd>
c00060b5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060b8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060ca:	75 1b                	jne    c00060e7 <f_getfree+0x156>
c00060cc:	89 d6                	mov    esi,edx
c00060ce:	89 cf                	mov    edi,ecx
c00060d0:	83 c6 01             	add    esi,0x1
c00060d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060d7:	83 d7 00             	adc    edi,0x0
c00060da:	e8 3d c1 ff ff       	call   c000221c <move_window>
c00060df:	85 c0                	test   eax,eax
c00060e1:	75 79                	jne    c000615c <f_getfree+0x1cb>
c00060e3:	89 f2                	mov    edx,esi
c00060e5:	89 f9                	mov    ecx,edi
c00060e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060f3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060f7:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c00060fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00060ff:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006102:	75 15                	jne    c0006119 <f_getfree+0x188>
c0006104:	e8 3c b9 ff ff       	call   c0001a45 <ld_word>
c0006109:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000610d:	66 83 f8 01          	cmp    ax,0x1
c0006111:	83 d3 00             	adc    ebx,0x0
c0006114:	83 c6 02             	add    esi,0x2
c0006117:	eb 17                	jmp    c0006130 <f_getfree+0x19f>
c0006119:	e8 34 b9 ff ff       	call   c0001a52 <ld_dword>
c000611e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006122:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006127:	83 f8 01             	cmp    eax,0x1
c000612a:	83 d3 00             	adc    ebx,0x0
c000612d:	83 c6 04             	add    esi,0x4
c0006130:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006136:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000613a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000613e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006142:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006146:	0f 85 79 ff ff ff    	jne    c00060c5 <f_getfree+0x134>
c000614c:	eb 10                	jmp    c000615e <f_getfree+0x1cd>
c000614e:	bd 01 00 00 00       	mov    ebp,0x1
c0006153:	eb 09                	jmp    c000615e <f_getfree+0x1cd>
c0006155:	bd 02 00 00 00       	mov    ebp,0x2
c000615a:	eb 02                	jmp    c000615e <f_getfree+0x1cd>
c000615c:	89 c5                	mov    ebp,eax
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 18                	mov    DWORD PTR [eax],ebx
c0006164:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006168:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000616c:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000616f:	83 c4 5c             	add    esp,0x5c
c0006172:	89 e8                	mov    eax,ebp
c0006174:	5b                   	pop    ebx
c0006175:	5e                   	pop    esi
c0006176:	5f                   	pop    edi
c0006177:	5d                   	pop    ebp
c0006178:	c3                   	ret    

c0006179 <f_truncate>:
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 14             	sub    esp,0x14
c000617e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006182:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006186:	89 d8                	mov    eax,ebx
c0006188:	e8 b4 bf ff ff       	call   c0002141 <validate>
c000618d:	89 c6                	mov    esi,eax
c000618f:	85 c0                	test   eax,eax
c0006191:	0f 85 d2 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c0006197:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000619b:	85 f6                	test   esi,esi
c000619d:	0f 85 c6 00 00 00    	jne    c0006269 <f_truncate+0xf0>
c00061a3:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061a7:	0f 84 b7 00 00 00    	je     c0006264 <f_truncate+0xeb>
c00061ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061b3:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061b6:	89 d1                	mov    ecx,edx
c00061b8:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061bb:	0f 83 a8 00 00 00    	jae    c0006269 <f_truncate+0xf0>
c00061c1:	09 c2                	or     edx,eax
c00061c3:	75 15                	jne    c00061da <f_truncate+0x61>
c00061c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061c8:	31 c9                	xor    ecx,ecx
c00061ca:	89 d8                	mov    eax,ebx
c00061cc:	e8 bc d0 ff ff       	call   c000328d <remove_chain>
c00061d1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061d8:	eb 35                	jmp    c000620f <f_truncate+0x96>
c00061da:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061dd:	89 d8                	mov    eax,ebx
c00061df:	e8 ba cb ff ff       	call   c0002d9e <get_fat>
c00061e4:	89 c2                	mov    edx,eax
c00061e6:	b8 01 00 00 00       	mov    eax,0x1
c00061eb:	83 fa ff             	cmp    edx,0xffffffff
c00061ee:	74 1f                	je     c000620f <f_truncate+0x96>
c00061f0:	b8 02 00 00 00       	mov    eax,0x2
c00061f5:	83 fa 01             	cmp    edx,0x1
c00061f8:	74 15                	je     c000620f <f_truncate+0x96>
c00061fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061fe:	31 c0                	xor    eax,eax
c0006200:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006203:	76 0a                	jbe    c000620f <f_truncate+0x96>
c0006205:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006208:	89 d8                	mov    eax,ebx
c000620a:	e8 7e d0 ff ff       	call   c000328d <remove_chain>
c000620f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006212:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006215:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006218:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000621b:	83 ca 40             	or     edx,0x40
c000621e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006221:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006224:	85 c0                	test   eax,eax
c0006226:	75 35                	jne    c000625d <f_truncate+0xe4>
c0006228:	84 d2                	test   dl,dl
c000622a:	79 3d                	jns    c0006269 <f_truncate+0xf0>
c000622c:	83 ec 0c             	sub    esp,0xc
c000622f:	8d 43 50             	lea    eax,[ebx+0x50]
c0006232:	6a 01                	push   0x1
c0006234:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006237:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000623a:	50                   	push   eax
c000623b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000623f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006243:	50                   	push   eax
c0006244:	e8 c7 b7 ff ff       	call   c0001a10 <disk_write>
c0006249:	83 c4 20             	add    esp,0x20
c000624c:	85 c0                	test   eax,eax
c000624e:	75 08                	jne    c0006258 <f_truncate+0xdf>
c0006250:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006254:	31 f6                	xor    esi,esi
c0006256:	eb 11                	jmp    c0006269 <f_truncate+0xf0>
c0006258:	b8 01 00 00 00       	mov    eax,0x1
c000625d:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006260:	89 c6                	mov    esi,eax
c0006262:	eb 05                	jmp    c0006269 <f_truncate+0xf0>
c0006264:	be 07 00 00 00       	mov    esi,0x7
c0006269:	83 c4 14             	add    esp,0x14
c000626c:	89 f0                	mov    eax,esi
c000626e:	5b                   	pop    ebx
c000626f:	5e                   	pop    esi
c0006270:	c3                   	ret    

c0006271 <f_unlink>:
c0006271:	56                   	push   esi
c0006272:	b9 02 00 00 00       	mov    ecx,0x2
c0006277:	53                   	push   ebx
c0006278:	81 ec e4 00 00 00    	sub    esp,0xe4
c000627e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006282:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006289:	e8 39 c2 ff ff       	call   c00024c7 <mount_volume>
c000628e:	85 c0                	test   eax,eax
c0006290:	0f 85 53 01 00 00    	jne    c00063e9 <f_unlink+0x178>
c0006296:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000629a:	83 ec 0c             	sub    esp,0xc
c000629d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a1:	68 60 04 00 00       	push   0x460
c00062a6:	e8 80 1f 00 00       	call   c000822b <ff_memalloc>
c00062ab:	89 c3                	mov    ebx,eax
c00062ad:	83 c4 10             	add    esp,0x10
c00062b0:	b8 11 00 00 00       	mov    eax,0x11
c00062b5:	85 db                	test   ebx,ebx
c00062b7:	0f 84 2c 01 00 00    	je     c00063e9 <f_unlink+0x178>
c00062bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062ca:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062cd:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 56 e9 ff ff       	call   c0004c33 <follow_path>
c00062dd:	85 c0                	test   eax,eax
c00062df:	0f 85 f0 00 00 00    	jne    c00063d5 <f_unlink+0x164>
c00062e5:	b8 06 00 00 00       	mov    eax,0x6
c00062ea:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f2:	0f 88 dd 00 00 00    	js     c00063d5 <f_unlink+0x164>
c00062f8:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00062fd:	74 0a                	je     c0006309 <f_unlink+0x98>
c00062ff:	b8 07 00 00 00       	mov    eax,0x7
c0006304:	e9 cc 00 00 00       	jmp    c00063d5 <f_unlink+0x164>
c0006309:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	8a 02                	mov    al,BYTE PTR [edx]
c0006313:	3c 04                	cmp    al,0x4
c0006315:	75 12                	jne    c0006329 <f_unlink+0xb8>
c0006317:	8d 42 10             	lea    eax,[edx+0x10]
c000631a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000631e:	e8 d6 e8 ff ff       	call   c0004bf9 <init_alloc_info.isra.2>
c0006323:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006327:	eb 0e                	jmp    c0006337 <f_unlink+0xc6>
c0006329:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006330:	e8 73 e8 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006335:	89 c6                	mov    esi,eax
c0006337:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000633c:	75 20                	jne    c000635e <f_unlink+0xed>
c000633e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006342:	e8 d6 d6 ff ff       	call   c0003a1d <dir_remove>
c0006347:	85 c0                	test   eax,eax
c0006349:	75 7d                	jne    c00063c8 <f_unlink+0x157>
c000634b:	85 f6                	test   esi,esi
c000634d:	74 79                	je     c00063c8 <f_unlink+0x157>
c000634f:	31 c9                	xor    ecx,ecx
c0006351:	89 f2                	mov    edx,esi
c0006353:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006357:	e8 31 cf ff ff       	call   c000328d <remove_chain>
c000635c:	eb 6a                	jmp    c00063c8 <f_unlink+0x157>
c000635e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006362:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006369:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006370:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006373:	75 21                	jne    c0006396 <f_unlink+0x125>
c0006375:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006379:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637d:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006384:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006388:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000638f:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006396:	31 d2                	xor    edx,edx
c0006398:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639f:	e8 f0 cb ff ff       	call   c0002f94 <dir_sdi>
c00063a4:	85 c0                	test   eax,eax
c00063a6:	75 2d                	jne    c00063d5 <f_unlink+0x164>
c00063a8:	31 d2                	xor    edx,edx
c00063aa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b1:	e8 f0 d3 ff ff       	call   c00037a6 <dir_read>
c00063b6:	85 c0                	test   eax,eax
c00063b8:	0f 84 41 ff ff ff    	je     c00062ff <f_unlink+0x8e>
c00063be:	83 f8 04             	cmp    eax,0x4
c00063c1:	75 12                	jne    c00063d5 <f_unlink+0x164>
c00063c3:	e9 76 ff ff ff       	jmp    c000633e <f_unlink+0xcd>
c00063c8:	85 c0                	test   eax,eax
c00063ca:	75 09                	jne    c00063d5 <f_unlink+0x164>
c00063cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d0:	e8 55 df ff ff       	call   c000432a <sync_fs>
c00063d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063d9:	83 ec 0c             	sub    esp,0xc
c00063dc:	53                   	push   ebx
c00063dd:	e8 5f 1e 00 00       	call   c0008241 <ff_memfree>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063e9:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063ef:	5b                   	pop    ebx
c00063f0:	5e                   	pop    esi
c00063f1:	c3                   	ret    

c00063f2 <f_mkdir>:
c00063f2:	57                   	push   edi
c00063f3:	b9 02 00 00 00       	mov    ecx,0x2
c00063f8:	56                   	push   esi
c00063f9:	53                   	push   ebx
c00063fa:	83 c4 80             	add    esp,0xffffff80
c00063fd:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006401:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006408:	e8 ba c0 ff ff       	call   c00024c7 <mount_volume>
c000640d:	89 c3                	mov    ebx,eax
c000640f:	85 c0                	test   eax,eax
c0006411:	0f 85 fe 01 00 00    	jne    c0006615 <f_mkdir+0x223>
c0006417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000641b:	83 ec 0c             	sub    esp,0xc
c000641e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006422:	bb 11 00 00 00       	mov    ebx,0x11
c0006427:	68 60 04 00 00       	push   0x460
c000642c:	e8 fa 1d 00 00       	call   c000822b <ff_memalloc>
c0006431:	83 c4 10             	add    esp,0x10
c0006434:	89 c7                	mov    edi,eax
c0006436:	85 c0                	test   eax,eax
c0006438:	0f 84 d7 01 00 00    	je     c0006615 <f_mkdir+0x223>
c000643e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006442:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006448:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000644b:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000644e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006455:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006459:	e8 d5 e7 ff ff       	call   c0004c33 <follow_path>
c000645e:	89 c3                	mov    ebx,eax
c0006460:	85 c0                	test   eax,eax
c0006462:	74 3e                	je     c00064a2 <f_mkdir+0xb0>
c0006464:	83 f8 04             	cmp    eax,0x4
c0006467:	75 3e                	jne    c00064a7 <f_mkdir+0xb5>
c0006469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646d:	31 d2                	xor    edx,edx
c000646f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006473:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006477:	e8 10 cc ff ff       	call   c000308c <create_chain>
c000647c:	89 c6                	mov    esi,eax
c000647e:	85 c0                	test   eax,eax
c0006480:	74 0c                	je     c000648e <f_mkdir+0x9c>
c0006482:	bb 02 00 00 00       	mov    ebx,0x2
c0006487:	83 f8 01             	cmp    eax,0x1
c000648a:	74 07                	je     c0006493 <f_mkdir+0xa1>
c000648c:	eb 2a                	jmp    c00064b8 <f_mkdir+0xc6>
c000648e:	bb 07 00 00 00       	mov    ebx,0x7
c0006493:	31 c9                	xor    ecx,ecx
c0006495:	89 f2                	mov    edx,esi
c0006497:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000649b:	e8 ed cd ff ff       	call   c000328d <remove_chain>
c00064a0:	eb 05                	jmp    c00064a7 <f_mkdir+0xb5>
c00064a2:	bb 08 00 00 00       	mov    ebx,0x8
c00064a7:	83 ec 0c             	sub    esp,0xc
c00064aa:	57                   	push   edi
c00064ab:	e8 91 1d 00 00       	call   c0008241 <ff_memfree>
c00064b0:	83 c4 10             	add    esp,0x10
c00064b3:	e9 5d 01 00 00       	jmp    c0006615 <f_mkdir+0x223>
c00064b8:	bb 01 00 00 00       	mov    ebx,0x1
c00064bd:	83 f8 ff             	cmp    eax,0xffffffff
c00064c0:	74 d1                	je     c0006493 <f_mkdir+0xa1>
c00064c2:	89 f2                	mov    edx,esi
c00064c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c8:	e8 08 cf ff ff       	call   c00033d5 <dir_clear>
c00064cd:	89 c3                	mov    ebx,eax
c00064cf:	85 c0                	test   eax,eax
c00064d1:	75 c0                	jne    c0006493 <f_mkdir+0xa1>
c00064d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064da:	74 69                	je     c0006545 <f_mkdir+0x153>
c00064dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e1:	83 c0 54             	add    eax,0x54
c00064e4:	ba 20 00 00 00       	mov    edx,0x20
c00064e9:	e8 eb b5 ff ff       	call   c0001ad9 <mem_set>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	83 c0 6a             	add    eax,0x6a
c00064f5:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c00064f9:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	e8 b4 b5 ff ff       	call   c0001abb <st_dword>
c0006507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650b:	89 f1                	mov    ecx,esi
c000650d:	8d 50 54             	lea    edx,[eax+0x54]
c0006510:	e8 bc e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c0006515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006519:	b9 20 00 00 00       	mov    ecx,0x20
c000651e:	8d 50 54             	lea    edx,[eax+0x54]
c0006521:	83 c0 74             	add    eax,0x74
c0006524:	e8 9b b5 ff ff       	call   c0001ac4 <mem_cpy>
c0006529:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006531:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006535:	8d 50 74             	lea    edx,[eax+0x74]
c0006538:	e8 94 e6 ff ff       	call   c0004bd1 <st_clust.isra.1>
c000653d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006541:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006545:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006549:	e8 59 db ff ff       	call   c00040a7 <dir_register>
c000654e:	89 c3                	mov    ebx,eax
c0006550:	85 c0                	test   eax,eax
c0006552:	0f 85 3b ff ff ff    	jne    c0006493 <f_mkdir+0xa1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000655f:	75 74                	jne    c00065d5 <f_mkdir+0x1e3>
c0006561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006564:	ba 00 00 21 50       	mov    edx,0x50210000
c0006569:	83 c0 0c             	add    eax,0xc
c000656c:	e8 4a b5 ff ff       	call   c0001abb <st_dword>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006578:	89 f2                	mov    edx,esi
c000657a:	83 c0 34             	add    eax,0x34
c000657d:	e8 39 b5 ff ff       	call   c0001abb <st_dword>
c0006582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006586:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000658a:	c1 e2 09             	shl    edx,0x9
c000658d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006590:	83 c0 38             	add    eax,0x38
c0006593:	e8 23 b5 ff ff       	call   c0001abb <st_dword>
c0006598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659c:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a0:	c1 e2 09             	shl    edx,0x9
c00065a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a6:	83 c0 28             	add    eax,0x28
c00065a9:	e8 0d b5 ff ff       	call   c0001abb <st_dword>
c00065ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065b5:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065bc:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c4:	e8 cf d3 ff ff       	call   c0003998 <store_xdir>
c00065c9:	89 c3                	mov    ebx,eax
c00065cb:	85 c0                	test   eax,eax
c00065cd:	0f 85 d4 fe ff ff    	jne    c00064a7 <f_mkdir+0xb5>
c00065d3:	eb 30                	jmp    c0006605 <f_mkdir+0x213>
c00065d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00065de:	83 c0 16             	add    eax,0x16
c00065e1:	e8 d5 b4 ff ff       	call   c0001abb <st_dword>
c00065e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ea:	89 f1                	mov    ecx,esi
c00065ec:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f0:	e8 dc e5 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00065f5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f9:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00065fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006601:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006605:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006609:	e8 1c dd ff ff       	call   c000432a <sync_fs>
c000660e:	89 c3                	mov    ebx,eax
c0006610:	e9 92 fe ff ff       	jmp    c00064a7 <f_mkdir+0xb5>
c0006615:	83 ec 80             	sub    esp,0xffffff80
c0006618:	89 d8                	mov    eax,ebx
c000661a:	5b                   	pop    ebx
c000661b:	5e                   	pop    esi
c000661c:	5f                   	pop    edi
c000661d:	c3                   	ret    

c000661e <f_rename>:
c000661e:	55                   	push   ebp
c000661f:	57                   	push   edi
c0006620:	56                   	push   esi
c0006621:	53                   	push   ebx
c0006622:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006628:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000662f:	e8 f3 b9 ff ff       	call   c0002027 <get_ldnumber>
c0006634:	b9 02 00 00 00       	mov    ecx,0x2
c0006639:	8d 54 24 14          	lea    edx,[esp+0x14]
c000663d:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006644:	e8 7e be ff ff       	call   c00024c7 <mount_volume>
c0006649:	85 c0                	test   eax,eax
c000664b:	0f 85 b5 02 00 00    	jne    c0006906 <f_rename+0x2e8>
c0006651:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000665c:	68 60 04 00 00       	push   0x460
c0006661:	e8 c5 1b 00 00       	call   c000822b <ff_memalloc>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	83 c4 10             	add    esp,0x10
c000666b:	b8 11 00 00 00       	mov    eax,0x11
c0006670:	85 db                	test   ebx,ebx
c0006672:	0f 84 8e 02 00 00    	je     c0006906 <f_rename+0x2e8>
c0006678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000667c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006685:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006688:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000668f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006693:	e8 9b e5 ff ff       	call   c0004c33 <follow_path>
c0006698:	85 c0                	test   eax,eax
c000669a:	0f 85 52 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066a0:	b8 06 00 00 00       	mov    eax,0x6
c00066a5:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ad:	0f 85 3f 02 00 00    	jne    c00068f2 <f_rename+0x2d4>
c00066b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066ba:	0f 85 05 01 00 00    	jne    c00067c5 <f_rename+0x1a7>
c00066c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066c3:	b9 40 00 00 00       	mov    ecx,0x40
c00066c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066cc:	e8 f3 b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066d1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066d6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066da:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e1:	e8 de b3 ff ff       	call   c0001ac4 <mem_cpy>
c00066e6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066ed:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066f4:	e8 3a e5 ff ff       	call   c0004c33 <follow_path>
c00066f9:	85 c0                	test   eax,eax
c00066fb:	75 29                	jne    c0006726 <f_rename+0x108>
c00066fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006701:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006708:	74 0a                	je     c0006714 <f_rename+0xf6>
c000670a:	b8 08 00 00 00       	mov    eax,0x8
c000670f:	e9 de 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c0006714:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000671b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006722:	75 e6                	jne    c000670a <f_rename+0xec>
c0006724:	eb 09                	jmp    c000672f <f_rename+0x111>
c0006726:	83 f8 04             	cmp    eax,0x4
c0006729:	0f 85 c3 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000672f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006736:	e8 6c d9 ff ff       	call   c00040a7 <dir_register>
c000673b:	85 c0                	test   eax,eax
c000673d:	0f 85 af 01 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006743:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006747:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000674a:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000674d:	89 c5                	mov    ebp,eax
c000674f:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006752:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006756:	8d 46 24             	lea    eax,[esi+0x24]
c0006759:	e8 e7 b2 ff ff       	call   c0001a45 <ld_word>
c000675e:	b9 40 00 00 00       	mov    ecx,0x40
c0006763:	89 c7                	mov    edi,eax
c0006765:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006769:	89 f0                	mov    eax,esi
c000676b:	e8 54 b3 ff ff       	call   c0001ac4 <mem_cpy>
c0006770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006774:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006777:	89 e9                	mov    ecx,ebp
c0006779:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c000677c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006780:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006784:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006787:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c000678a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000678d:	83 c0 24             	add    eax,0x24
c0006790:	0f b7 d7             	movzx  edx,di
c0006793:	e8 1f b3 ff ff       	call   c0001ab7 <st_word>
c0006798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000679f:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a2:	a8 10                	test   al,0x10
c00067a4:	75 06                	jne    c00067ac <f_rename+0x18e>
c00067a6:	83 c8 20             	or     eax,0x20
c00067a9:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067ac:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b3:	e8 e0 d1 ff ff       	call   c0003998 <store_xdir>
c00067b8:	85 c0                	test   eax,eax
c00067ba:	0f 84 1c 01 00 00    	je     c00068dc <f_rename+0x2be>
c00067c0:	e9 2d 01 00 00       	jmp    c00068f2 <f_rename+0x2d4>
c00067c5:	b9 20 00 00 00       	mov    ecx,0x20
c00067ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067d5:	e8 ea b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067da:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067df:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067e3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ea:	e8 d5 b2 ff ff       	call   c0001ac4 <mem_cpy>
c00067ef:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067f6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067fd:	e8 31 e4 ff ff       	call   c0004c33 <follow_path>
c0006802:	85 c0                	test   eax,eax
c0006804:	75 27                	jne    c000682d <f_rename+0x20f>
c0006806:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000680a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006811:	0f 85 f3 fe ff ff    	jne    c000670a <f_rename+0xec>
c0006817:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000681e:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006825:	0f 85 df fe ff ff    	jne    c000670a <f_rename+0xec>
c000682b:	eb 09                	jmp    c0006836 <f_rename+0x218>
c000682d:	83 f8 04             	cmp    eax,0x4
c0006830:	0f 85 bc 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c0006836:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683d:	e8 65 d8 ff ff       	call   c00040a7 <dir_register>
c0006842:	85 c0                	test   eax,eax
c0006844:	0f 85 a8 00 00 00    	jne    c00068f2 <f_rename+0x2d4>
c000684a:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006851:	b9 13 00 00 00       	mov    ecx,0x13
c0006856:	8d 54 24 25          	lea    edx,[esp+0x25]
c000685a:	8d 46 0d             	lea    eax,[esi+0xd]
c000685d:	e8 62 b2 ff ff       	call   c0001ac4 <mem_cpy>
c0006862:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006866:	a8 10                	test   al,0x10
c0006868:	75 03                	jne    c000686d <f_rename+0x24f>
c000686a:	83 c8 20             	or     eax,0x20
c000686d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006874:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006878:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c000687c:	74 5e                	je     c00068dc <f_rename+0x2be>
c000687e:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006885:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006889:	74 51                	je     c00068dc <f_rename+0x2be>
c000688b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000688f:	89 f2                	mov    edx,esi
c0006891:	8a 07                	mov    al,BYTE PTR [edi]
c0006893:	e8 10 e3 ff ff       	call   c0004ba8 <ld_clust.isra.0>
c0006898:	89 c2                	mov    edx,eax
c000689a:	89 f8                	mov    eax,edi
c000689c:	e8 3d b4 ff ff       	call   c0001cde <clst2sect>
c00068a1:	89 c6                	mov    esi,eax
c00068a3:	89 d1                	mov    ecx,edx
c00068a5:	b8 02 00 00 00       	mov    eax,0x2
c00068aa:	09 f2                	or     edx,esi
c00068ac:	74 44                	je     c00068f2 <f_rename+0x2d4>
c00068ae:	89 f2                	mov    edx,esi
c00068b0:	89 f8                	mov    eax,edi
c00068b2:	e8 65 b9 ff ff       	call   c000221c <move_window>
c00068b7:	85 c0                	test   eax,eax
c00068b9:	75 37                	jne    c00068f2 <f_rename+0x2d4>
c00068bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bf:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068c3:	75 17                	jne    c00068dc <f_rename+0x2be>
c00068c5:	8d 50 74             	lea    edx,[eax+0x74]
c00068c8:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068cf:	e8 fd e2 ff ff       	call   c0004bd1 <st_clust.isra.1>
c00068d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068dc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e0:	e8 38 d1 ff ff       	call   c0003a1d <dir_remove>
c00068e5:	85 c0                	test   eax,eax
c00068e7:	75 09                	jne    c00068f2 <f_rename+0x2d4>
c00068e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ed:	e8 38 da ff ff       	call   c000432a <sync_fs>
c00068f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068f6:	83 ec 0c             	sub    esp,0xc
c00068f9:	53                   	push   ebx
c00068fa:	e8 42 19 00 00       	call   c0008241 <ff_memfree>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006906:	81 c4 fc 00 00 00    	add    esp,0xfc
c000690c:	5b                   	pop    ebx
c000690d:	5e                   	pop    esi
c000690e:	5f                   	pop    edi
c000690f:	5d                   	pop    ebp
c0006910:	c3                   	ret    

c0006911 <f_chmod>:
c0006911:	57                   	push   edi
c0006912:	b9 02 00 00 00       	mov    ecx,0x2
c0006917:	56                   	push   esi
c0006918:	53                   	push   ebx
c0006919:	83 ec 60             	sub    esp,0x60
c000691c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006920:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006924:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006928:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692c:	e8 96 bb ff ff       	call   c00024c7 <mount_volume>
c0006931:	85 c0                	test   eax,eax
c0006933:	0f 85 af 00 00 00    	jne    c00069e8 <f_chmod+0xd7>
c0006939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000693d:	83 ec 0c             	sub    esp,0xc
c0006940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006944:	68 60 04 00 00       	push   0x460
c0006949:	e8 dd 18 00 00       	call   c000822b <ff_memalloc>
c000694e:	89 c6                	mov    esi,eax
c0006950:	83 c4 10             	add    esp,0x10
c0006953:	b8 11 00 00 00       	mov    eax,0x11
c0006958:	85 f6                	test   esi,esi
c000695a:	0f 84 88 00 00 00    	je     c00069e8 <f_chmod+0xd7>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000696a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000696d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006970:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006974:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006978:	e8 b6 e2 ff ff       	call   c0004c33 <follow_path>
c000697d:	85 c0                	test   eax,eax
c000697f:	75 53                	jne    c00069d4 <f_chmod+0xc3>
c0006981:	b8 06 00 00 00       	mov    eax,0x6
c0006986:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c000698b:	75 47                	jne    c00069d4 <f_chmod+0xc3>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	89 f9                	mov    ecx,edi
c0006993:	83 e1 27             	and    ecx,0x27
c0006996:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006999:	75 1d                	jne    c00069b8 <f_chmod+0xa7>
c000699b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000699e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a1:	21 cb                	and    ebx,ecx
c00069a3:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a6:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ad:	e8 e6 cf ff ff       	call   c0003998 <store_xdir>
c00069b2:	85 c0                	test   eax,eax
c00069b4:	75 1e                	jne    c00069d4 <f_chmod+0xc3>
c00069b6:	eb 13                	jmp    c00069cb <f_chmod+0xba>
c00069b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069bc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069bf:	21 cb                	and    ebx,ecx
c00069c1:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c4:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069cf:	e8 56 d9 ff ff       	call   c000432a <sync_fs>
c00069d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069d8:	83 ec 0c             	sub    esp,0xc
c00069db:	56                   	push   esi
c00069dc:	e8 60 18 00 00       	call   c0008241 <ff_memfree>
c00069e1:	83 c4 10             	add    esp,0x10
c00069e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069e8:	83 c4 60             	add    esp,0x60
c00069eb:	5b                   	pop    ebx
c00069ec:	5e                   	pop    esi
c00069ed:	5f                   	pop    edi
c00069ee:	c3                   	ret    

c00069ef <f_utime>:
c00069ef:	56                   	push   esi
c00069f0:	b9 02 00 00 00       	mov    ecx,0x2
c00069f5:	53                   	push   ebx
c00069f6:	83 ec 64             	sub    esp,0x64
c00069f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069fd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a01:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a05:	e8 bd ba ff ff       	call   c00024c7 <mount_volume>
c0006a0a:	85 c0                	test   eax,eax
c0006a0c:	0f 85 b5 00 00 00    	jne    c0006ac7 <f_utime+0xd8>
c0006a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a16:	83 ec 0c             	sub    esp,0xc
c0006a19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a1d:	68 60 04 00 00       	push   0x460
c0006a22:	e8 04 18 00 00       	call   c000822b <ff_memalloc>
c0006a27:	89 c3                	mov    ebx,eax
c0006a29:	83 c4 10             	add    esp,0x10
c0006a2c:	b8 11 00 00 00       	mov    eax,0x11
c0006a31:	85 db                	test   ebx,ebx
c0006a33:	0f 84 8e 00 00 00    	je     c0006ac7 <f_utime+0xd8>
c0006a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3d:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a43:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a46:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a49:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a4d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a51:	e8 dd e1 ff ff       	call   c0004c33 <follow_path>
c0006a56:	85 c0                	test   eax,eax
c0006a58:	75 59                	jne    c0006ab3 <f_utime+0xc4>
c0006a5a:	b8 06 00 00 00       	mov    eax,0x6
c0006a5f:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a64:	75 4d                	jne    c0006ab3 <f_utime+0xc4>
c0006a66:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6e:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a72:	c1 e2 10             	shl    edx,0x10
c0006a75:	09 ca                	or     edx,ecx
c0006a77:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a7a:	75 1a                	jne    c0006a96 <f_utime+0xa7>
c0006a7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a7f:	83 c0 0c             	add    eax,0xc
c0006a82:	e8 34 b0 ff ff       	call   c0001abb <st_dword>
c0006a87:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a8b:	e8 08 cf ff ff       	call   c0003998 <store_xdir>
c0006a90:	85 c0                	test   eax,eax
c0006a92:	75 1f                	jne    c0006ab3 <f_utime+0xc4>
c0006a94:	eb 14                	jmp    c0006aaa <f_utime+0xbb>
c0006a96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a9a:	83 c0 16             	add    eax,0x16
c0006a9d:	e8 19 b0 ff ff       	call   c0001abb <st_dword>
c0006aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aae:	e8 77 d8 ff ff       	call   c000432a <sync_fs>
c0006ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ab7:	83 ec 0c             	sub    esp,0xc
c0006aba:	53                   	push   ebx
c0006abb:	e8 81 17 00 00       	call   c0008241 <ff_memfree>
c0006ac0:	83 c4 10             	add    esp,0x10
c0006ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ac7:	83 c4 64             	add    esp,0x64
c0006aca:	5b                   	pop    ebx
c0006acb:	5e                   	pop    esi
c0006acc:	c3                   	ret    

c0006acd <f_getlabel>:
c0006acd:	55                   	push   ebp
c0006ace:	31 c9                	xor    ecx,ecx
c0006ad0:	57                   	push   edi
c0006ad1:	56                   	push   esi
c0006ad2:	53                   	push   ebx
c0006ad3:	83 ec 6c             	sub    esp,0x6c
c0006ad6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ada:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae1:	e8 e1 b9 ff ff       	call   c00024c7 <mount_volume>
c0006ae6:	89 c3                	mov    ebx,eax
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 85 73 01 00 00    	jne    c0006c63 <f_getlabel+0x196>
c0006af0:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006af8:	0f 84 65 01 00 00    	je     c0006c63 <f_getlabel+0x196>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	31 d2                	xor    edx,edx
c0006b04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b14:	e8 7b c4 ff ff       	call   c0002f94 <dir_sdi>
c0006b19:	89 c3                	mov    ebx,eax
c0006b1b:	85 c0                	test   eax,eax
c0006b1d:	0f 85 2f 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b23:	ba 01 00 00 00       	mov    edx,0x1
c0006b28:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2c:	e8 75 cc ff ff       	call   c00037a6 <dir_read>
c0006b31:	89 c3                	mov    ebx,eax
c0006b33:	85 c0                	test   eax,eax
c0006b35:	0f 85 17 01 00 00    	jne    c0006c52 <f_getlabel+0x185>
c0006b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b42:	74 09                	je     c0006b4d <f_getlabel+0x80>
c0006b44:	31 f6                	xor    esi,esi
c0006b46:	31 c9                	xor    ecx,ecx
c0006b48:	e9 c8 00 00 00       	jmp    c0006c15 <f_getlabel+0x148>
c0006b4d:	31 ed                	xor    ebp,ebp
c0006b4f:	31 f6                	xor    esi,esi
c0006b51:	31 ff                	xor    edi,edi
c0006b53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b57:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b5b:	39 fa                	cmp    edx,edi
c0006b5d:	76 4b                	jbe    c0006baa <f_getlabel+0xdd>
c0006b5f:	47                   	inc    edi
c0006b60:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b63:	01 d0                	add    eax,edx
c0006b65:	e8 db ae ff ff       	call   c0001a45 <ld_word>
c0006b6a:	66 85 ed             	test   bp,bp
c0006b6d:	75 0d                	jne    c0006b7c <f_getlabel+0xaf>
c0006b6f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b75:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b7a:	76 28                	jbe    c0006ba4 <f_getlabel+0xd7>
c0006b7c:	89 e9                	mov    ecx,ebp
c0006b7e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b85:	c1 e1 10             	shl    ecx,0x10
c0006b88:	01 f2                	add    edx,esi
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	09 c8                	or     eax,ecx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 4c b0 ff ff       	call   c0001be5 <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 0b                	je     c0006ba8 <f_getlabel+0xdb>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c6                	add    esi,eax
c0006ba2:	31 c0                	xor    eax,eax
c0006ba4:	89 c5                	mov    ebp,eax
c0006ba6:	eb ab                	jmp    c0006b53 <f_getlabel+0x86>
c0006ba8:	31 f6                	xor    esi,esi
c0006baa:	66 85 ed             	test   bp,bp
c0006bad:	74 02                	je     c0006bb1 <f_getlabel+0xe4>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bb8:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bbc:	e9 a2 00 00 00       	jmp    c0006c63 <f_getlabel+0x196>
c0006bc1:	83 ff 0b             	cmp    edi,0xb
c0006bc4:	74 11                	je     c0006bd7 <f_getlabel+0x10a>
c0006bc6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bcf:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd2:	c1 e0 08             	shl    eax,0x8
c0006bd5:	09 c2                	or     edx,eax
c0006bd7:	50                   	push   eax
c0006bd8:	50                   	push   eax
c0006bd9:	68 b5 01 00 00       	push   0x1b5
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	52                   	push   edx
c0006be2:	e8 07 17 00 00       	call   c00082ee <ff_oem2uni>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	66 85 c0             	test   ax,ax
c0006bed:	74 46                	je     c0006c35 <f_getlabel+0x168>
c0006bef:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bf6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bfb:	01 f2                	add    edx,esi
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	e8 e0 af ff ff       	call   c0001be5 <put_utf>
c0006c05:	84 c0                	test   al,al
c0006c07:	74 2c                	je     c0006c35 <f_getlabel+0x168>
c0006c09:	0f b6 c0             	movzx  eax,al
c0006c0c:	01 c6                	add    esi,eax
c0006c0e:	83 ff 0b             	cmp    edi,0xb
c0006c11:	74 24                	je     c0006c37 <f_getlabel+0x16a>
c0006c13:	89 f9                	mov    ecx,edi
c0006c15:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c19:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c1c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c21:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2a:	e8 ea ae ff ff       	call   c0001b19 <dbc_1st>
c0006c2f:	85 c0                	test   eax,eax
c0006c31:	74 a4                	je     c0006bd7 <f_getlabel+0x10a>
c0006c33:	eb 8c                	jmp    c0006bc1 <f_getlabel+0xf4>
c0006c35:	31 f6                	xor    esi,esi
c0006c37:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c41:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c48:	74 19                	je     c0006c63 <f_getlabel+0x196>
c0006c4a:	4e                   	dec    esi
c0006c4b:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c4e:	74 ee                	je     c0006c3e <f_getlabel+0x171>
c0006c50:	eb 11                	jmp    c0006c63 <f_getlabel+0x196>
c0006c52:	83 fb 04             	cmp    ebx,0x4
c0006c55:	75 0c                	jne    c0006c63 <f_getlabel+0x196>
c0006c57:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c5e:	31 db                	xor    ebx,ebx
c0006c60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c63:	85 db                	test   ebx,ebx
c0006c65:	75 50                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c67:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c6f:	74 46                	je     c0006cb7 <f_getlabel+0x1ea>
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c78:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7b:	e8 9c b5 ff ff       	call   c000221c <move_window>
c0006c80:	89 c3                	mov    ebx,eax
c0006c82:	85 c0                	test   eax,eax
c0006c84:	75 31                	jne    c0006cb7 <f_getlabel+0x1ea>
c0006c86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8a:	b8 43 00 00 00       	mov    eax,0x43
c0006c8f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c91:	80 f9 03             	cmp    cl,0x3
c0006c94:	74 0f                	je     c0006ca5 <f_getlabel+0x1d8>
c0006c96:	31 c0                	xor    eax,eax
c0006c98:	80 f9 04             	cmp    cl,0x4
c0006c9b:	0f 94 c0             	sete   al
c0006c9e:	48                   	dec    eax
c0006c9f:	83 e0 c3             	and    eax,0xffffffc3
c0006ca2:	83 c0 64             	add    eax,0x64
c0006ca5:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ca9:	e8 a4 ad ff ff       	call   c0001a52 <ld_dword>
c0006cae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb5:	89 07                	mov    DWORD PTR [edi],eax
c0006cb7:	83 c4 6c             	add    esp,0x6c
c0006cba:	89 d8                	mov    eax,ebx
c0006cbc:	5b                   	pop    ebx
c0006cbd:	5e                   	pop    esi
c0006cbe:	5f                   	pop    edi
c0006cbf:	5d                   	pop    ebp
c0006cc0:	c3                   	ret    

c0006cc1 <f_setlabel>:
c0006cc1:	56                   	push   esi
c0006cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0006cc7:	53                   	push   ebx
c0006cc8:	83 ec 74             	sub    esp,0x74
c0006ccb:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ccf:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cd6:	e8 ec b7 ff ff       	call   c00024c7 <mount_volume>
c0006cdb:	89 c6                	mov    esi,eax
c0006cdd:	85 c0                	test   eax,eax
c0006cdf:	0f 85 41 02 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ce9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cec:	0f 85 8e 00 00 00    	jne    c0006d80 <f_setlabel+0xbf>
c0006cf2:	b9 16 00 00 00       	mov    ecx,0x16
c0006cf7:	31 d2                	xor    edx,edx
c0006cf9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cfd:	31 db                	xor    ebx,ebx
c0006cff:	e8 d5 ad ff ff       	call   c0001ad9 <mem_set>
c0006d04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d0e:	0f 86 0a 01 00 00    	jbe    c0006e1e <f_setlabel+0x15d>
c0006d14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d1b:	e8 ff ad ff ff       	call   c0001b1f <tchar2uni>
c0006d20:	89 c6                	mov    esi,eax
c0006d22:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d27:	76 2a                	jbe    c0006d53 <f_setlabel+0x92>
c0006d29:	83 f8 ff             	cmp    eax,0xffffffff
c0006d2c:	74 05                	je     c0006d33 <f_setlabel+0x72>
c0006d2e:	83 fb 09             	cmp    ebx,0x9
c0006d31:	76 0a                	jbe    c0006d3d <f_setlabel+0x7c>
c0006d33:	be 06 00 00 00       	mov    esi,0x6
c0006d38:	e9 e9 01 00 00       	jmp    c0006f26 <f_setlabel+0x265>
c0006d3d:	89 c2                	mov    edx,eax
c0006d3f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d43:	c1 ea 10             	shr    edx,0x10
c0006d46:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d49:	01 c8                	add    eax,ecx
c0006d4b:	43                   	inc    ebx
c0006d4c:	e8 66 ad ff ff       	call   c0001ab7 <st_word>
c0006d51:	eb 04                	jmp    c0006d57 <f_setlabel+0x96>
c0006d53:	85 c0                	test   eax,eax
c0006d55:	74 dc                	je     c0006d33 <f_setlabel+0x72>
c0006d57:	89 f2                	mov    edx,esi
c0006d59:	b8 97 03 02 c0       	mov    eax,0xc0020397
c0006d5e:	e8 a4 ad ff ff       	call   c0001b07 <chk_chr>
c0006d63:	85 c0                	test   eax,eax
c0006d65:	75 cc                	jne    c0006d33 <f_setlabel+0x72>
c0006d67:	83 fb 0a             	cmp    ebx,0xa
c0006d6a:	77 c7                	ja     c0006d33 <f_setlabel+0x72>
c0006d6c:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d6f:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d73:	0f b7 d6             	movzx  edx,si
c0006d76:	01 c8                	add    eax,ecx
c0006d78:	43                   	inc    ebx
c0006d79:	e8 39 ad ff ff       	call   c0001ab7 <st_word>
c0006d7e:	eb 84                	jmp    c0006d04 <f_setlabel+0x43>
c0006d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d85:	ba 20 00 00 00       	mov    edx,0x20
c0006d8a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	e8 44 ad ff ff       	call   c0001ad9 <mem_set>
c0006d95:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d9c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d9f:	76 60                	jbe    c0006e01 <f_setlabel+0x140>
c0006da1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006da8:	e8 72 ad ff ff       	call   c0001b1f <tchar2uni>
c0006dad:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db2:	0f 87 7b ff ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006db8:	83 ec 0c             	sub    esp,0xc
c0006dbb:	50                   	push   eax
c0006dbc:	e8 9c 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc1:	5a                   	pop    edx
c0006dc2:	59                   	pop    ecx
c0006dc3:	68 b5 01 00 00       	push   0x1b5
c0006dc8:	50                   	push   eax
c0006dc9:	e8 8a 14 00 00       	call   c0008258 <ff_uni2oem>
c0006dce:	83 c4 10             	add    esp,0x10
c0006dd1:	89 c6                	mov    esi,eax
c0006dd3:	66 85 c0             	test   ax,ax
c0006dd6:	0f 84 57 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006ddc:	0f b7 d0             	movzx  edx,ax
c0006ddf:	b8 90 03 02 c0       	mov    eax,0xc0020390
c0006de4:	e8 1e ad ff ff       	call   c0001b07 <chk_chr>
c0006de9:	85 c0                	test   eax,eax
c0006deb:	0f 85 42 ff ff ff    	jne    c0006d33 <f_setlabel+0x72>
c0006df1:	66 81 fe ff 00       	cmp    si,0xff
c0006df6:	0f 87 14 01 00 00    	ja     c0006f10 <f_setlabel+0x24f>
c0006dfc:	e9 fa 00 00 00       	jmp    c0006efb <f_setlabel+0x23a>
c0006e01:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e06:	0f 84 27 ff ff ff    	je     c0006d33 <f_setlabel+0x72>
c0006e0c:	85 db                	test   ebx,ebx
c0006e0e:	74 0e                	je     c0006e1e <f_setlabel+0x15d>
c0006e10:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e13:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e18:	75 04                	jne    c0006e1e <f_setlabel+0x15d>
c0006e1a:	89 c3                	mov    ebx,eax
c0006e1c:	eb ee                	jmp    c0006e0c <f_setlabel+0x14b>
c0006e1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e22:	31 d2                	xor    edx,edx
c0006e24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e34:	e8 5b c1 ff ff       	call   c0002f94 <dir_sdi>
c0006e39:	89 c6                	mov    esi,eax
c0006e3b:	85 c0                	test   eax,eax
c0006e3d:	0f 85 e3 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e43:	ba 01 00 00 00       	mov    edx,0x1
c0006e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e4c:	e8 55 c9 ff ff       	call   c00037a6 <dir_read>
c0006e51:	85 c0                	test   eax,eax
c0006e53:	75 21                	jne    c0006e76 <f_setlabel+0x1b5>
c0006e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e60:	74 5d                	je     c0006ebf <f_setlabel+0x1fe>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0b                	je     c0006e71 <f_setlabel+0x1b0>
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	eb 70                	jmp    c0006ee1 <f_setlabel+0x220>
c0006e71:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x225>
c0006e76:	83 f8 04             	cmp    eax,0x4
c0006e79:	75 7c                	jne    c0006ef7 <f_setlabel+0x236>
c0006e7b:	85 db                	test   ebx,ebx
c0006e7d:	0f 84 a3 00 00 00    	je     c0006f26 <f_setlabel+0x265>
c0006e83:	ba 01 00 00 00       	mov    edx,0x1
c0006e88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8c:	e8 8f ca ff ff       	call   c0003920 <dir_alloc>
c0006e91:	89 c6                	mov    esi,eax
c0006e93:	85 c0                	test   eax,eax
c0006e95:	0f 85 8b 00 00 00    	jne    c0006f26 <f_setlabel+0x265>
c0006e9b:	31 d2                	xor    edx,edx
c0006e9d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea1:	b9 20 00 00 00       	mov    ecx,0x20
c0006ea6:	e8 2e ac ff ff       	call   c0001ad9 <mem_set>
c0006eab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eaf:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	75 18                	jne    c0006ed0 <f_setlabel+0x20f>
c0006eb8:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ebb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebf:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec2:	b9 16 00 00 00       	mov    ecx,0x16
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	83 c0 02             	add    eax,0x2
c0006ece:	eb 9b                	jmp    c0006e6b <f_setlabel+0x1aa>
c0006ed0:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ed9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006edd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee1:	e8 de ab ff ff       	call   c0001ac4 <mem_cpy>
c0006ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eea:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006eee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef2:	e8 33 d4 ff ff       	call   c000432a <sync_fs>
c0006ef7:	89 c6                	mov    esi,eax
c0006ef9:	eb 2b                	jmp    c0006f26 <f_setlabel+0x265>
c0006efb:	83 fb 0a             	cmp    ebx,0xa
c0006efe:	0f 87 2f fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f04:	89 f0                	mov    eax,esi
c0006f06:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0a:	43                   	inc    ebx
c0006f0b:	e9 85 fe ff ff       	jmp    c0006d95 <f_setlabel+0xd4>
c0006f10:	83 fb 09             	cmp    ebx,0x9
c0006f13:	0f 87 1a fe ff ff    	ja     c0006d33 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	66 c1 e8 08          	shr    ax,0x8
c0006f1f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f23:	43                   	inc    ebx
c0006f24:	eb de                	jmp    c0006f04 <f_setlabel+0x243>
c0006f26:	83 c4 74             	add    esp,0x74
c0006f29:	89 f0                	mov    eax,esi
c0006f2b:	5b                   	pop    ebx
c0006f2c:	5e                   	pop    esi
c0006f2d:	c3                   	ret    

c0006f2e <f_forward>:
c0006f2e:	55                   	push   ebp
c0006f2f:	57                   	push   edi
c0006f30:	56                   	push   esi
c0006f31:	53                   	push   ebx
c0006f32:	83 ec 2c             	sub    esp,0x2c
c0006f35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f3d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f47:	89 d8                	mov    eax,ebx
c0006f49:	e8 f3 b1 ff ff       	call   c0002141 <validate>
c0006f4e:	89 c5                	mov    ebp,eax
c0006f50:	85 c0                	test   eax,eax
c0006f52:	0f 85 aa 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f58:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f5c:	85 ed                	test   ebp,ebp
c0006f5e:	0f 85 9e 01 00 00    	jne    c0007102 <f_forward+0x1d4>
c0006f64:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f68:	0f 84 8f 01 00 00    	je     c00070fd <f_forward+0x1cf>
c0006f6e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f71:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f74:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f77:	bf 00 00 00 00       	mov    edi,0x0
c0006f7c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f7f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f83:	89 d1                	mov    ecx,edx
c0006f85:	19 f9                	sbb    ecx,edi
c0006f87:	0f 83 cf 00 00 00    	jae    c000705c <f_forward+0x12e>
c0006f8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f91:	e9 c6 00 00 00       	jmp    c000705c <f_forward+0x12e>
c0006f96:	50                   	push   eax
c0006f97:	50                   	push   eax
c0006f98:	6a 00                	push   0x0
c0006f9a:	6a 00                	push   0x0
c0006f9c:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	0f 84 57 01 00 00    	je     c0007102 <f_forward+0x1d4>
c0006fab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006faf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fb5:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fb9:	89 d7                	mov    edi,edx
c0006fbb:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fbe:	89 c6                	mov    esi,eax
c0006fc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc4:	21 ce                	and    esi,ecx
c0006fc6:	89 c1                	mov    ecx,eax
c0006fc8:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fce:	0f 84 98 00 00 00    	je     c000706c <f_forward+0x13e>
c0006fd4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fd8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fdb:	89 c8                	mov    eax,ecx
c0006fdd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe1:	e8 f8 ac ff ff       	call   c0001cde <clst2sect>
c0006fe6:	89 d7                	mov    edi,edx
c0006fe8:	09 c7                	or     edi,eax
c0006fea:	0f 84 9e 00 00 00    	je     c000708e <f_forward+0x160>
c0006ff0:	31 ff                	xor    edi,edi
c0006ff2:	01 c6                	add    esi,eax
c0006ff4:	11 d7                	adc    edi,edx
c0006ff6:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ff9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007003:	39 fa                	cmp    edx,edi
c0007005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007009:	0f 85 a2 00 00 00    	jne    c00070b1 <f_forward+0x183>
c000700f:	39 f0                	cmp    eax,esi
c0007011:	0f 85 9a 00 00 00    	jne    c00070b1 <f_forward+0x183>
c0007017:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701a:	ba 00 02 00 00       	mov    edx,0x200
c000701f:	25 ff 01 00 00       	and    eax,0x1ff
c0007024:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007028:	29 c2                	sub    edx,eax
c000702a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000702d:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007030:	39 d1                	cmp    ecx,edx
c0007032:	76 02                	jbe    c0007036 <f_forward+0x108>
c0007034:	89 d1                	mov    ecx,edx
c0007036:	52                   	push   edx
c0007037:	8d 73 50             	lea    esi,[ebx+0x50]
c000703a:	52                   	push   edx
c000703b:	01 c6                	add    esi,eax
c000703d:	51                   	push   ecx
c000703e:	56                   	push   esi
c000703f:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	85 c0                	test   eax,eax
c0007048:	74 44                	je     c000708e <f_forward+0x160>
c000704a:	31 ff                	xor    edi,edi
c000704c:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000704f:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007052:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007056:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705a:	01 07                	add    DWORD PTR [edi],eax
c000705c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007061:	0f 85 2f ff ff ff    	jne    c0006f96 <f_forward+0x68>
c0007067:	e9 96 00 00 00       	jmp    c0007102 <f_forward+0x1d4>
c000706c:	85 f6                	test   esi,esi
c000706e:	0f 85 60 ff ff ff    	jne    c0006fd4 <f_forward+0xa6>
c0007074:	89 d7                	mov    edi,edx
c0007076:	09 c7                	or     edi,eax
c0007078:	75 05                	jne    c000707f <f_forward+0x151>
c000707a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000707d:	eb 0a                	jmp    c0007089 <f_forward+0x15b>
c000707f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007082:	89 d8                	mov    eax,ebx
c0007084:	e8 15 bd ff ff       	call   c0002d9e <get_fat>
c0007089:	83 f8 01             	cmp    eax,0x1
c000708c:	77 0b                	ja     c0007099 <f_forward+0x16b>
c000708e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007092:	bd 02 00 00 00       	mov    ebp,0x2
c0007097:	eb 69                	jmp    c0007102 <f_forward+0x1d4>
c0007099:	83 f8 ff             	cmp    eax,0xffffffff
c000709c:	75 0b                	jne    c00070a9 <f_forward+0x17b>
c000709e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a2:	bd 01 00 00 00       	mov    ebp,0x1
c00070a7:	eb 59                	jmp    c0007102 <f_forward+0x1d4>
c00070a9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070ac:	e9 23 ff ff ff       	jmp    c0006fd4 <f_forward+0xa6>
c00070b1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070b5:	79 20                	jns    c00070d7 <f_forward+0x1a9>
c00070b7:	83 ec 0c             	sub    esp,0xc
c00070ba:	6a 01                	push   0x1
c00070bc:	52                   	push   edx
c00070bd:	50                   	push   eax
c00070be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070c6:	50                   	push   eax
c00070c7:	e8 44 a9 ff ff       	call   c0001a10 <disk_write>
c00070cc:	83 c4 20             	add    esp,0x20
c00070cf:	85 c0                	test   eax,eax
c00070d1:	75 cb                	jne    c000709e <f_forward+0x170>
c00070d3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070d7:	83 ec 0c             	sub    esp,0xc
c00070da:	6a 01                	push   0x1
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ea:	50                   	push   eax
c00070eb:	e8 0a a9 ff ff       	call   c00019fa <disk_read>
c00070f0:	83 c4 20             	add    esp,0x20
c00070f3:	85 c0                	test   eax,eax
c00070f5:	0f 84 1c ff ff ff    	je     c0007017 <f_forward+0xe9>
c00070fb:	eb a1                	jmp    c000709e <f_forward+0x170>
c00070fd:	bd 07 00 00 00       	mov    ebp,0x7
c0007102:	83 c4 2c             	add    esp,0x2c
c0007105:	89 e8                	mov    eax,ebp
c0007107:	5b                   	pop    ebx
c0007108:	5e                   	pop    esi
c0007109:	5f                   	pop    edi
c000710a:	5d                   	pop    ebp
c000710b:	c3                   	ret    

c000710c <f_mkfs>:
c000710c:	55                   	push   ebp
c000710d:	57                   	push   edi
c000710e:	56                   	push   esi
c000710f:	53                   	push   ebx
c0007110:	bb 0b 00 00 00       	mov    ebx,0xb
c0007115:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000711b:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	e8 f9 ae ff ff       	call   c0002027 <get_ldnumber>
c000712e:	85 c0                	test   eax,eax
c0007130:	0f 88 e8 10 00 00    	js     c000821e <f_mkfs+0x1112>
c0007136:	8b 14 85 60 45 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbaa0]
c000713d:	85 d2                	test   edx,edx
c000713f:	74 03                	je     c0007144 <f_mkfs+0x38>
c0007141:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007144:	85 f6                	test   esi,esi
c0007146:	75 05                	jne    c000714d <f_mkfs+0x41>
c0007148:	be 80 03 02 c0       	mov    esi,0xc0020380
c000714d:	0f b6 c0             	movzx  eax,al
c0007150:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	bb 03 00 00 00       	mov    ebx,0x3
c000715c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007160:	e8 92 a8 ff ff       	call   c00019f7 <disk_initialize>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	a8 01                	test   al,0x1
c000716a:	0f 85 ae 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c0007170:	bb 0a 00 00 00       	mov    ebx,0xa
c0007175:	a8 04                	test   al,0x4
c0007177:	0f 85 a1 10 00 00    	jne    c000821e <f_mkfs+0x1112>
c000717d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007180:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007184:	85 c0                	test   eax,eax
c0007186:	75 20                	jne    c00071a8 <f_mkfs+0x9c>
c0007188:	51                   	push   ecx
c0007189:	8d 44 24 78          	lea    eax,[esp+0x78]
c000718d:	50                   	push   eax
c000718e:	6a 03                	push   0x3
c0007190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007194:	e8 8d a8 ff ff       	call   c0001a26 <disk_ioctl>
c0007199:	83 c4 10             	add    esp,0x10
c000719c:	85 c0                	test   eax,eax
c000719e:	74 08                	je     c00071a8 <f_mkfs+0x9c>
c00071a0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071a8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071ac:	8d 42 ff             	lea    eax,[edx-0x1]
c00071af:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b4:	77 04                	ja     c00071ba <f_mkfs+0xae>
c00071b6:	85 c2                	test   edx,eax
c00071b8:	74 08                	je     c00071c2 <f_mkfs+0xb6>
c00071ba:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071c5:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071c9:	48                   	dec    eax
c00071ca:	3c 01                	cmp    al,0x1
c00071cc:	76 05                	jbe    c00071d3 <f_mkfs+0xc7>
c00071ce:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071da:	48                   	dec    eax
c00071db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e0:	77 07                	ja     c00071e9 <f_mkfs+0xdd>
c00071e2:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071e7:	74 08                	je     c00071f1 <f_mkfs+0xe5>
c00071e9:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f4:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071fa:	77 07                	ja     c0007203 <f_mkfs+0xf7>
c00071fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00071ff:	85 d8                	test   eax,ebx
c0007201:	74 02                	je     c0007205 <f_mkfs+0xf9>
c0007203:	31 db                	xor    ebx,ebx
c0007205:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007210:	77 0a                	ja     c000721c <f_mkfs+0x110>
c0007212:	bb 11 00 00 00       	mov    ebx,0x11
c0007217:	e9 02 10 00 00       	jmp    c000821e <f_mkfs+0x1112>
c000721c:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007223:	8b 36                	mov    esi,DWORD PTR [esi]
c0007225:	85 ed                	test   ebp,ebp
c0007227:	75 1e                	jne    c0007247 <f_mkfs+0x13b>
c0007229:	83 ec 0c             	sub    esp,0xc
c000722c:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007233:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007238:	50                   	push   eax
c0007239:	e8 ed 0f 00 00       	call   c000822b <ff_memalloc>
c000723e:	83 c4 10             	add    esp,0x10
c0007241:	89 c5                	mov    ebp,eax
c0007243:	85 c0                	test   eax,eax
c0007245:	74 cb                	je     c0007212 <f_mkfs+0x106>
c0007247:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000724f:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007257:	52                   	push   edx
c0007258:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000725c:	50                   	push   eax
c000725d:	6a 01                	push   0x1
c000725f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007263:	e8 be a7 ff ff       	call   c0001a26 <disk_ioctl>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	85 c0                	test   eax,eax
c000726d:	0f 85 46 0f 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007273:	89 f1                	mov    ecx,esi
c0007275:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000727d:	83 e1 0f             	and    ecx,0xf
c0007280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007288:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000728c:	83 e6 08             	and    esi,0x8
c000728f:	75 56                	jne    c00072e7 <f_mkfs+0x1db>
c0007291:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007295:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007299:	83 ff 00             	cmp    edi,0x0
c000729c:	76 20                	jbe    c00072be <f_mkfs+0x1b2>
c000729e:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a3:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	83 d7 ff             	adc    edi,0xffffffff
c00072b4:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072b8:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072bc:	eb 21                	jmp    c00072df <f_mkfs+0x1d3>
c00072be:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c3:	39 f2                	cmp    edx,esi
c00072c5:	19 f8                	sbb    eax,edi
c00072c7:	73 1e                	jae    c00072e7 <f_mkfs+0x1db>
c00072c9:	83 c6 c1             	add    esi,0xffffffc1
c00072cc:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d4:	83 d7 ff             	adc    edi,0xffffffff
c00072d7:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072db:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072f6:	ba 7f 00 00 00       	mov    edx,0x7f
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007300:	89 c7                	mov    edi,eax
c0007302:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007306:	0f 83 c1 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c000730c:	89 df                	mov    edi,ebx
c000730e:	c1 ef 09             	shr    edi,0x9
c0007311:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007315:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000731c:	c1 ef 09             	shr    edi,0x9
c000731f:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007324:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007328:	74 29                	je     c0007353 <f_mkfs+0x247>
c000732a:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	0f 97 c2             	seta   dl
c0007338:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000733b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733f:	0f 92 c0             	setb   al
c0007342:	08 c2                	or     dl,al
c0007344:	75 5b                	jne    c00073a1 <f_mkfs+0x295>
c0007346:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734a:	83 e0 07             	and    eax,0x7
c000734d:	3c 04                	cmp    al,0x4
c000734f:	74 50                	je     c00073a1 <f_mkfs+0x295>
c0007351:	eb 1b                	jmp    c000736e <f_mkfs+0x262>
c0007353:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007358:	0f 87 6f 0a 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c000735e:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007364:	76 08                	jbe    c000736e <f_mkfs+0x262>
c0007366:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000736e:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007372:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007376:	83 e0 01             	and    eax,0x1
c0007379:	80 e1 02             	and    cl,0x2
c000737c:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007380:	74 0d                	je     c000738f <f_mkfs+0x283>
c0007382:	84 c0                	test   al,al
c0007384:	0f 84 4f 09 00 00    	je     c0007cd9 <f_mkfs+0xbcd>
c000738a:	e9 0e 08 00 00       	jmp    c0007b9d <f_mkfs+0xa91>
c000738f:	bb 13 00 00 00       	mov    ebx,0x13
c0007394:	84 c0                	test   al,al
c0007396:	0f 85 01 08 00 00    	jne    c0007b9d <f_mkfs+0xa91>
c000739c:	e9 35 0e 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c00073a1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073ab:	89 c7                	mov    edi,eax
c00073ad:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b1:	0f 83 16 0a 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c00073b7:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073bd:	77 39                	ja     c00073f8 <f_mkfs+0x2ec>
c00073bf:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073cc:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073cf:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d3:	73 08                	jae    c00073dd <f_mkfs+0x2d1>
c00073d5:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073dd:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073e5:	b8 00 00 00 00       	mov    eax,0x0
c00073ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073ee:	73 08                	jae    c00073f8 <f_mkfs+0x2ec>
c00073f0:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007400:	83 c0 20             	add    eax,0x20
c0007403:	83 d2 00             	adc    edx,0x0
c0007406:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000740a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000740e:	31 d2                	xor    edx,edx
c0007410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007414:	52                   	push   edx
c0007415:	50                   	push   eax
c0007416:	31 ff                	xor    edi,edi
c0007418:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000741c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007420:	e8 e7 7f 01 00       	call   c001f40c <__udivdi3>
c0007425:	83 c4 10             	add    esp,0x10
c0007428:	c1 e0 02             	shl    eax,0x2
c000742b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000742f:	05 07 02 00 00       	add    eax,0x207
c0007434:	89 f1                	mov    ecx,esi
c0007436:	c1 e8 09             	shr    eax,0x9
c0007439:	89 fb                	mov    ebx,edi
c000743b:	83 c1 ff             	add    ecx,0xffffffff
c000743e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007442:	83 d3 ff             	adc    ebx,0xffffffff
c0007445:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007449:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000744d:	31 d2                	xor    edx,edx
c000744f:	01 c8                	add    eax,ecx
c0007451:	11 da                	adc    edx,ebx
c0007453:	89 c1                	mov    ecx,eax
c0007455:	f7 de                	neg    esi
c0007457:	83 d7 00             	adc    edi,0x0
c000745a:	21 f1                	and    ecx,esi
c000745c:	f7 df                	neg    edi
c000745e:	89 d0                	mov    eax,edx
c0007460:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007464:	21 f8                	and    eax,edi
c0007466:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000746a:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000746e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007476:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000747a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000747e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007481:	0f ac d0 01          	shrd   eax,edx,0x1
c0007485:	d1 ea                	shr    edx,1
c0007487:	89 df                	mov    edi,ebx
c0007489:	39 c1                	cmp    ecx,eax
c000748b:	19 d7                	sbb    edi,edx
c000748d:	0f 83 3a 09 00 00    	jae    c0007dcd <f_mkfs+0xcc1>
c0007493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007497:	31 d2                	xor    edx,edx
c0007499:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000749d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a1:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074a8:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074ac:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b0:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074b8:	83 f8 0f             	cmp    eax,0xf
c00074bb:	0f 86 0c 09 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c00074c1:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074c9:	0f 87 fe 08 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c00074cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074d3:	31 d2                	xor    edx,edx
c00074d5:	83 c0 07             	add    eax,0x7
c00074d8:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e0:	c1 e8 03             	shr    eax,0x3
c00074e3:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074eb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074f3:	c1 e0 09             	shl    eax,0x9
c00074f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007501:	48                   	dec    eax
c0007502:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007506:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c000750a:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000750e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007512:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751d:	31 d2                	xor    edx,edx
c000751f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007524:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007528:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000752c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007530:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007534:	31 ff                	xor    edi,edi
c0007536:	31 f6                	xor    esi,esi
c0007538:	31 db                	xor    ebx,ebx
c000753a:	85 ff                	test   edi,edi
c000753c:	74 05                	je     c0007543 <f_mkfs+0x437>
c000753e:	4f                   	dec    edi
c000753f:	74 44                	je     c0007585 <f_mkfs+0x479>
c0007541:	eb 4f                	jmp    c0007592 <f_mkfs+0x486>
c0007543:	83 ec 0c             	sub    esp,0xc
c0007546:	0f b7 c3             	movzx  eax,bx
c0007549:	50                   	push   eax
c000754a:	e8 0e 0e 00 00       	call   c000835d <ff_wtoupper>
c000754f:	83 c4 10             	add    esp,0x10
c0007552:	89 c1                	mov    ecx,eax
c0007554:	66 39 c3             	cmp    bx,ax
c0007557:	8d 53 01             	lea    edx,[ebx+0x1]
c000755a:	75 3e                	jne    c000759a <f_mkfs+0x48e>
c000755c:	be 01 00 00 00       	mov    esi,0x1
c0007561:	89 df                	mov    edi,ebx
c0007563:	66 01 f7             	add    di,si
c0007566:	75 07                	jne    c000756f <f_mkfs+0x463>
c0007568:	83 fe 7f             	cmp    esi,0x7f
c000756b:	77 31                	ja     c000759e <f_mkfs+0x492>
c000756d:	eb 16                	jmp    c0007585 <f_mkfs+0x479>
c000756f:	83 ec 0c             	sub    esp,0xc
c0007572:	0f b7 ff             	movzx  edi,di
c0007575:	57                   	push   edi
c0007576:	e8 e2 0d 00 00       	call   c000835d <ff_wtoupper>
c000757b:	83 c4 10             	add    esp,0x10
c000757e:	39 c7                	cmp    edi,eax
c0007580:	75 e6                	jne    c0007568 <f_mkfs+0x45c>
c0007582:	46                   	inc    esi
c0007583:	eb dc                	jmp    c0007561 <f_mkfs+0x455>
c0007585:	31 c0                	xor    eax,eax
c0007587:	4e                   	dec    esi
c0007588:	0f 95 c0             	setne  al
c000758b:	89 d9                	mov    ecx,ebx
c000758d:	89 c7                	mov    edi,eax
c000758f:	43                   	inc    ebx
c0007590:	eb 14                	jmp    c00075a6 <f_mkfs+0x49a>
c0007592:	89 f1                	mov    ecx,esi
c0007594:	01 f3                	add    ebx,esi
c0007596:	31 ff                	xor    edi,edi
c0007598:	eb 0c                	jmp    c00075a6 <f_mkfs+0x49a>
c000759a:	89 d3                	mov    ebx,edx
c000759c:	eb 08                	jmp    c00075a6 <f_mkfs+0x49a>
c000759e:	bf 02 00 00 00       	mov    edi,0x2
c00075a3:	83 c9 ff             	or     ecx,0xffffffff
c00075a6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075a9:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075ad:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b1:	0f b6 c1             	movzx  eax,cl
c00075b4:	e8 87 a9 ff ff       	call   c0001f40 <xsum32>
c00075b9:	66 c1 e9 08          	shr    cx,0x8
c00075bd:	89 c2                	mov    edx,eax
c00075bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c2:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075c6:	0f b7 c1             	movzx  eax,cx
c00075c9:	e8 72 a9 ff ff       	call   c0001f40 <xsum32>
c00075ce:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075d3:	66 85 db             	test   bx,bx
c00075d6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075da:	74 1f                	je     c00075fb <f_mkfs+0x4ef>
c00075dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075df:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075e6:	83 c0 02             	add    eax,0x2
c00075e9:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075ef:	39 c2                	cmp    edx,eax
c00075f1:	74 08                	je     c00075fb <f_mkfs+0x4ef>
c00075f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00075f6:	e9 3f ff ff ff       	jmp    c000753a <f_mkfs+0x42e>
c00075fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075fe:	83 ec 0c             	sub    esp,0xc
c0007601:	05 01 02 00 00       	add    eax,0x201
c0007606:	c1 e8 09             	shr    eax,0x9
c0007609:	50                   	push   eax
c000760a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000760e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007612:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007616:	55                   	push   ebp
c0007617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000761b:	e8 f0 a3 ff ff       	call   c0001a10 <disk_write>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	85 c0                	test   eax,eax
c0007625:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007628:	0f 85 8b 0b 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000762e:	89 d0                	mov    eax,edx
c0007630:	31 d2                	xor    edx,edx
c0007632:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007636:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000763a:	66 85 db             	test   bx,bx
c000763d:	74 04                	je     c0007643 <f_mkfs+0x537>
c000763f:	31 c0                	xor    eax,eax
c0007641:	eb b0                	jmp    c00075f3 <f_mkfs+0x4e7>
c0007643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007647:	31 d2                	xor    edx,edx
c0007649:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000764d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007651:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007655:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000765c:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007660:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007666:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766a:	8d 70 01             	lea    esi,[eax+0x1]
c000766d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007675:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007680:	c1 eb 09             	shr    ebx,0x9
c0007683:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007687:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000768b:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007692:	31 d2                	xor    edx,edx
c0007694:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007699:	89 04 24             	mov    DWORD PTR [esp],eax
c000769c:	89 c1                	mov    ecx,eax
c000769e:	89 e8                	mov    eax,ebp
c00076a0:	e8 34 a4 ff ff       	call   c0001ad9 <mem_set>
c00076a5:	31 c0                	xor    eax,eax
c00076a7:	83 fe 07             	cmp    esi,0x7
c00076aa:	76 10                	jbe    c00076bc <f_mkfs+0x5b0>
c00076ac:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076af:	76 0b                	jbe    c00076bc <f_mkfs+0x5b0>
c00076b1:	40                   	inc    eax
c00076b2:	83 ee 08             	sub    esi,0x8
c00076b5:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076ba:	eb eb                	jmp    c00076a7 <f_mkfs+0x59b>
c00076bc:	b2 01                	mov    dl,0x1
c00076be:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c2:	85 f6                	test   esi,esi
c00076c4:	74 0c                	je     c00076d2 <f_mkfs+0x5c6>
c00076c6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c9:	76 07                	jbe    c00076d2 <f_mkfs+0x5c6>
c00076cb:	08 11                	or     BYTE PTR [ecx],dl
c00076cd:	4e                   	dec    esi
c00076ce:	01 d2                	add    edx,edx
c00076d0:	eb f0                	jmp    c00076c2 <f_mkfs+0x5b6>
c00076d2:	89 df                	mov    edi,ebx
c00076d4:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076d8:	76 04                	jbe    c00076de <f_mkfs+0x5d2>
c00076da:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076de:	83 ec 0c             	sub    esp,0xc
c00076e1:	57                   	push   edi
c00076e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ea:	55                   	push   ebp
c00076eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076ef:	e8 1c a3 ff ff       	call   c0001a10 <disk_write>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	85 c0                	test   eax,eax
c00076f9:	0f 85 ba 0a 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00076ff:	31 d2                	xor    edx,edx
c0007701:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007705:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007709:	29 fb                	sub    ebx,edi
c000770b:	0f 85 7a ff ff ff    	jne    c000768b <f_mkfs+0x57f>
c0007711:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007715:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000771d:	31 f6                	xor    esi,esi
c000771f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007723:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007726:	31 d2                	xor    edx,edx
c0007728:	89 e8                	mov    eax,ebp
c000772a:	e8 aa a3 ff ff       	call   c0001ad9 <mem_set>
c000772f:	31 c9                	xor    ecx,ecx
c0007731:	85 db                	test   ebx,ebx
c0007733:	75 40                	jne    c0007775 <f_mkfs+0x669>
c0007735:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000773a:	89 e8                	mov    eax,ebp
c000773c:	e8 7a a3 ff ff       	call   c0001abb <st_dword>
c0007741:	8d 45 04             	lea    eax,[ebp+0x4]
c0007744:	83 ca ff             	or     edx,0xffffffff
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 6a a3 ff ff       	call   c0001abb <st_dword>
c0007751:	b9 08 00 00 00       	mov    ecx,0x8
c0007756:	eb 1d                	jmp    c0007775 <f_mkfs+0x669>
c0007758:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000775b:	76 3b                	jbe    c0007798 <f_mkfs+0x68c>
c000775d:	43                   	inc    ebx
c000775e:	83 fe 01             	cmp    esi,0x1
c0007761:	89 da                	mov    edx,ebx
c0007763:	77 03                	ja     c0007768 <f_mkfs+0x65c>
c0007765:	83 ca ff             	or     edx,0xffffffff
c0007768:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000776c:	4e                   	dec    esi
c000776d:	e8 49 a3 ff ff       	call   c0001abb <st_dword>
c0007772:	83 c1 04             	add    ecx,0x4
c0007775:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007779:	85 f6                	test   esi,esi
c000777b:	75 db                	jne    c0007758 <f_mkfs+0x64c>
c000777d:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007782:	77 14                	ja     c0007798 <f_mkfs+0x68c>
c0007784:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000778b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000778f:	85 f6                	test   esi,esi
c0007791:	74 05                	je     c0007798 <f_mkfs+0x68c>
c0007793:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007796:	77 dd                	ja     c0007775 <f_mkfs+0x669>
c0007798:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000779c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a0:	39 cf                	cmp    edi,ecx
c00077a2:	76 02                	jbe    c00077a6 <f_mkfs+0x69a>
c00077a4:	89 cf                	mov    edi,ecx
c00077a6:	83 ec 0c             	sub    esp,0xc
c00077a9:	57                   	push   edi
c00077aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077ae:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b2:	55                   	push   ebp
c00077b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077b7:	e8 54 a2 ff ff       	call   c0001a10 <disk_write>
c00077bc:	83 c4 20             	add    esp,0x20
c00077bf:	85 c0                	test   eax,eax
c00077c1:	0f 85 f2 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00077c7:	31 d2                	xor    edx,edx
c00077c9:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077cd:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d1:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077d5:	0f 85 48 ff ff ff    	jne    c0007723 <f_mkfs+0x617>
c00077db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077de:	31 d2                	xor    edx,edx
c00077e0:	89 e8                	mov    eax,ebp
c00077e2:	31 ff                	xor    edi,edi
c00077e4:	e8 f0 a2 ff ff       	call   c0001ad9 <mem_set>
c00077e9:	8d 45 34             	lea    eax,[ebp+0x34]
c00077ec:	ba 02 00 00 00       	mov    edx,0x2
c00077f1:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077f5:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c00077f9:	e8 bd a2 ff ff       	call   c0001abb <st_dword>
c00077fe:	8d 45 38             	lea    eax,[ebp+0x38]
c0007801:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007805:	e8 b1 a2 ff ff       	call   c0001abb <st_dword>
c000780a:	8d 45 44             	lea    eax,[ebp+0x44]
c000780d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007811:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007815:	e8 a1 a2 ff ff       	call   c0001abb <st_dword>
c000781a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000781e:	8d 45 54             	lea    eax,[ebp+0x54]
c0007821:	83 c2 02             	add    edx,0x2
c0007824:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007828:	e8 8e a2 ff ff       	call   c0001abb <st_dword>
c000782d:	8d 45 58             	lea    eax,[ebp+0x58]
c0007830:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007834:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007838:	e8 7e a2 ff ff       	call   c0001abb <st_dword>
c000783d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007841:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007846:	89 c6                	mov    esi,eax
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007850:	89 04 24             	mov    DWORD PTR [esp],eax
c0007853:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007857:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000785a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000785e:	39 cb                	cmp    ebx,ecx
c0007860:	76 02                	jbe    c0007864 <f_mkfs+0x758>
c0007862:	89 cb                	mov    ebx,ecx
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	57                   	push   edi
c0007869:	56                   	push   esi
c000786a:	55                   	push   ebp
c000786b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000786f:	e8 9c a1 ff ff       	call   c0001a10 <disk_write>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	85 c0                	test   eax,eax
c0007879:	0f 85 3a 09 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000787f:	31 d2                	xor    edx,edx
c0007881:	b9 00 02 00 00       	mov    ecx,0x200
c0007886:	89 e8                	mov    eax,ebp
c0007888:	e8 4c a2 ff ff       	call   c0001ad9 <mem_set>
c000788d:	31 d2                	xor    edx,edx
c000788f:	01 de                	add    esi,ebx
c0007891:	11 d7                	adc    edi,edx
c0007893:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007896:	75 bf                	jne    c0007857 <f_mkfs+0x74b>
c0007898:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000789c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a0:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078a8:	b9 00 02 00 00       	mov    ecx,0x200
c00078ad:	31 d2                	xor    edx,edx
c00078af:	89 e8                	mov    eax,ebp
c00078b1:	e8 23 a2 ff ff       	call   c0001ad9 <mem_set>
c00078b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00078bb:	ba 60 04 02 c0       	mov    edx,0xc0020460
c00078c0:	89 e8                	mov    eax,ebp
c00078c2:	e8 fd a1 ff ff       	call   c0001ac4 <mem_cpy>
c00078c7:	8d 45 40             	lea    eax,[ebp+0x40]
c00078ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d2:	e8 e7 a1 ff ff       	call   c0001abe <st_qword>
c00078d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078db:	8d 45 48             	lea    eax,[ebp+0x48]
c00078de:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e2:	e8 d7 a1 ff ff       	call   c0001abe <st_qword>
c00078e7:	8d 45 50             	lea    eax,[ebp+0x50]
c00078ea:	ba 20 00 00 00       	mov    edx,0x20
c00078ef:	e8 c7 a1 ff ff       	call   c0001abb <st_dword>
c00078f4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fc:	e8 ba a1 ff ff       	call   c0001abb <st_dword>
c0007901:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007905:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007909:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000790d:	e8 a9 a1 ff ff       	call   c0001abb <st_dword>
c0007912:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007915:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007919:	e8 9d a1 ff ff       	call   c0001abb <st_dword>
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	8d 50 02             	lea    edx,[eax+0x2]
c0007925:	8d 45 60             	lea    eax,[ebp+0x60]
c0007928:	e8 8e a1 ff ff       	call   c0001abb <st_dword>
c000792d:	8d 45 64             	lea    eax,[ebp+0x64]
c0007930:	ba 00 00 21 50       	mov    edx,0x50210000
c0007935:	e8 81 a1 ff ff       	call   c0001abb <st_dword>
c000793a:	8d 45 68             	lea    eax,[ebp+0x68]
c000793d:	ba 00 01 00 00       	mov    edx,0x100
c0007942:	e8 70 a1 ff ff       	call   c0001ab7 <st_word>
c0007947:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000794b:	b8 0a 00 00 00       	mov    eax,0xa
c0007950:	48                   	dec    eax
c0007951:	74 05                	je     c0007958 <f_mkfs+0x84c>
c0007953:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007956:	eb f8                	jmp    c0007950 <f_mkfs+0x844>
c0007958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000795c:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007960:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007964:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007968:	74 05                	je     c000796f <f_mkfs+0x863>
c000796a:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c000796d:	eb f5                	jmp    c0007964 <f_mkfs+0x858>
c000796f:	8d 45 78             	lea    eax,[ebp+0x78]
c0007972:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007977:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c000797d:	31 db                	xor    ebx,ebx
c000797f:	e8 33 a1 ff ff       	call   c0001ab7 <st_word>
c0007984:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c000798a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000798f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007992:	e8 20 a1 ff ff       	call   c0001ab7 <st_word>
c0007997:	31 c9                	xor    ecx,ecx
c0007999:	8d 41 96             	lea    eax,[ecx-0x6a]
c000799c:	83 f8 01             	cmp    eax,0x1
c000799f:	76 13                	jbe    c00079b4 <f_mkfs+0x8a8>
c00079a1:	83 f9 70             	cmp    ecx,0x70
c00079a4:	74 0e                	je     c00079b4 <f_mkfs+0x8a8>
c00079a6:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	e8 8e a5 ff ff       	call   c0001f40 <xsum32>
c00079b2:	89 c3                	mov    ebx,eax
c00079b4:	41                   	inc    ecx
c00079b5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079bb:	75 dc                	jne    c0007999 <f_mkfs+0x88d>
c00079bd:	89 f0                	mov    eax,esi
c00079bf:	89 fa                	mov    edx,edi
c00079c1:	83 c0 01             	add    eax,0x1
c00079c4:	83 d2 00             	adc    edx,0x0
c00079c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079cf:	83 ec 0c             	sub    esp,0xc
c00079d2:	6a 01                	push   0x1
c00079d4:	57                   	push   edi
c00079d5:	56                   	push   esi
c00079d6:	55                   	push   ebp
c00079d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079db:	e8 30 a0 ff ff       	call   c0001a10 <disk_write>
c00079e0:	83 c4 20             	add    esp,0x20
c00079e3:	85 c0                	test   eax,eax
c00079e5:	0f 85 ce 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00079eb:	31 d2                	xor    edx,edx
c00079ed:	b9 00 02 00 00       	mov    ecx,0x200
c00079f2:	89 e8                	mov    eax,ebp
c00079f4:	e8 e0 a0 ff ff       	call   c0001ad9 <mem_set>
c00079f9:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a01:	e8 b1 a0 ff ff       	call   c0001ab7 <st_word>
c0007a06:	89 f0                	mov    eax,esi
c0007a08:	83 c0 09             	add    eax,0x9
c0007a0b:	89 fa                	mov    edx,edi
c0007a0d:	83 d2 00             	adc    edx,0x0
c0007a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a17:	31 c9                	xor    ecx,ecx
c0007a19:	41                   	inc    ecx
c0007a1a:	89 da                	mov    edx,ebx
c0007a1c:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a21:	e8 1a a5 ff ff       	call   c0001f40 <xsum32>
c0007a26:	89 c3                	mov    ebx,eax
c0007a28:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a2e:	75 e9                	jne    c0007a19 <f_mkfs+0x90d>
c0007a30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a34:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a38:	83 c0 01             	add    eax,0x1
c0007a3b:	83 d2 00             	adc    edx,0x0
c0007a3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a46:	83 ec 0c             	sub    esp,0xc
c0007a49:	6a 01                	push   0x1
c0007a4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a53:	55                   	push   ebp
c0007a54:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a58:	e8 b3 9f ff ff       	call   c0001a10 <disk_write>
c0007a5d:	83 c4 20             	add    esp,0x20
c0007a60:	85 c0                	test   eax,eax
c0007a62:	0f 85 51 07 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6c:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a70:	75 09                	jne    c0007a7b <f_mkfs+0x96f>
c0007a72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a75:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a79:	74 12                	je     c0007a8d <f_mkfs+0x981>
c0007a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a8b:	eb 8a                	jmp    c0007a17 <f_mkfs+0x90b>
c0007a8d:	31 d2                	xor    edx,edx
c0007a8f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a94:	89 e8                	mov    eax,ebp
c0007a96:	e8 3e a0 ff ff       	call   c0001ad9 <mem_set>
c0007a9b:	83 c6 0b             	add    esi,0xb
c0007a9e:	83 d7 00             	adc    edi,0x0
c0007aa1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007aa9:	31 c9                	xor    ecx,ecx
c0007aab:	41                   	inc    ecx
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ab3:	e8 88 a4 ff ff       	call   c0001f40 <xsum32>
c0007ab8:	89 c3                	mov    ebx,eax
c0007aba:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac0:	75 e9                	jne    c0007aab <f_mkfs+0x99f>
c0007ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ac5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ac9:	83 c6 01             	add    esi,0x1
c0007acc:	83 d7 00             	adc    edi,0x0
c0007acf:	83 ec 0c             	sub    esp,0xc
c0007ad2:	6a 01                	push   0x1
c0007ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ad8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adc:	55                   	push   ebp
c0007add:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae1:	e8 2a 9f ff ff       	call   c0001a10 <disk_write>
c0007ae6:	83 c4 20             	add    esp,0x20
c0007ae9:	85 c0                	test   eax,eax
c0007aeb:	0f 85 c8 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007af1:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007af5:	75 06                	jne    c0007afd <f_mkfs+0x9f1>
c0007af7:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007afb:	74 09                	je     c0007b06 <f_mkfs+0x9fa>
c0007afd:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b00:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b04:	eb a3                	jmp    c0007aa9 <f_mkfs+0x99d>
c0007b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	01 e8                	add    eax,ebp
c0007b0e:	e8 a8 9f ff ff       	call   c0001abb <st_dword>
c0007b13:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b18:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b20:	75 e4                	jne    c0007b06 <f_mkfs+0x9fa>
c0007b22:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b25:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b29:	83 c6 02             	add    esi,0x2
c0007b2c:	83 d7 00             	adc    edi,0x0
c0007b2f:	83 ec 0c             	sub    esp,0xc
c0007b32:	6a 01                	push   0x1
c0007b34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3c:	55                   	push   ebp
c0007b3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b41:	e8 ca 9e ff ff       	call   c0001a10 <disk_write>
c0007b46:	83 c4 20             	add    esp,0x20
c0007b49:	85 c0                	test   eax,eax
c0007b4b:	0f 85 68 06 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007b51:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b56:	74 0d                	je     c0007b65 <f_mkfs+0xa59>
c0007b58:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b60:	e9 43 fd ff ff       	jmp    c00078a8 <f_mkfs+0x79c>
c0007b65:	b1 07                	mov    cl,0x7
c0007b67:	e9 e3 05 00 00       	jmp    c000814f <f_mkfs+0x1043>
c0007b6c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b71:	0f 85 4f 02 00 00    	jne    c0007dc6 <f_mkfs+0xcba>
c0007b77:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b7c:	0f 86 22 02 00 00    	jbe    c0007da4 <f_mkfs+0xc98>
c0007b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b87:	0f 85 81 06 00 00    	jne    c000820e <f_mkfs+0x1102>
c0007b8d:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b94:	83 f8 40             	cmp    eax,0x40
c0007b97:	0f 87 51 06 00 00    	ja     c00081ee <f_mkfs+0x10e2>
c0007b9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba1:	85 ff                	test   edi,edi
c0007ba3:	75 1c                	jne    c0007bc1 <f_mkfs+0xab5>
c0007ba5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ba8:	ba 60 03 02 c0       	mov    edx,0xc0020360
c0007bad:	c1 e9 0c             	shr    ecx,0xc
c0007bb0:	bf 01 00 00 00       	mov    edi,0x1
c0007bb5:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bb8:	66 85 c0             	test   ax,ax
c0007bbb:	0f 85 95 01 00 00    	jne    c0007d56 <f_mkfs+0xc4a>
c0007bc1:	31 d2                	xor    edx,edx
c0007bc3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bc6:	f7 f7                	div    edi
c0007bc8:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bcd:	0f 86 95 01 00 00    	jbe    c0007d68 <f_mkfs+0xc5c>
c0007bd3:	83 c0 02             	add    eax,0x2
c0007bd6:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bdb:	01 c0                	add    eax,eax
c0007bdd:	05 ff 01 00 00       	add    eax,0x1ff
c0007be2:	be 01 00 00 00       	mov    esi,0x1
c0007be7:	c1 e8 09             	shr    eax,0x9
c0007bea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf2:	c1 e0 05             	shl    eax,0x5
c0007bf5:	c1 e8 09             	shr    eax,0x9
c0007bf8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bfc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	89 f0                	mov    eax,esi
c0007c07:	31 d2                	xor    edx,edx
c0007c09:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c15:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c19:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c1d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c2c:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	01 c8                	add    eax,ecx
c0007c34:	11 da                	adc    edx,ebx
c0007c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c3a:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c3e:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c42:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c46:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c4a:	f7 da                	neg    edx
c0007c4c:	21 d1                	and    ecx,edx
c0007c4e:	29 d9                	sub    ecx,ebx
c0007c50:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c55:	0f 85 20 01 00 00    	jne    c0007d7b <f_mkfs+0xc6f>
c0007c5b:	31 db                	xor    ebx,ebx
c0007c5d:	01 ce                	add    esi,ecx
c0007c5f:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c63:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c67:	89 f8                	mov    eax,edi
c0007c69:	31 d2                	xor    edx,edx
c0007c6b:	c1 e0 04             	shl    eax,0x4
c0007c6e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c72:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c76:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c7a:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c7e:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c82:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c85:	19 d3                	sbb    ebx,edx
c0007c87:	0f 82 40 01 00 00    	jb     c0007dcd <f_mkfs+0xcc1>
c0007c8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c91:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c94:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007c99:	89 c8                	mov    eax,ecx
c0007c9b:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007c9f:	29 f0                	sub    eax,esi
c0007ca1:	29 d0                	sub    eax,edx
c0007ca3:	31 d2                	xor    edx,edx
c0007ca5:	f7 f7                	div    edi
c0007ca7:	89 c3                	mov    ebx,eax
c0007ca9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cae:	0f 85 b8 fe ff ff    	jne    c0007b6c <f_mkfs+0xa60>
c0007cb4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cb9:	0f 87 1d 01 00 00    	ja     c0007ddc <f_mkfs+0xcd0>
c0007cbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cc4:	0f 85 03 01 00 00    	jne    c0007dcd <f_mkfs+0xcc1>
c0007cca:	83 ff 01             	cmp    edi,0x1
c0007ccd:	0f 86 fa 00 00 00    	jbe    c0007dcd <f_mkfs+0xcc1>
c0007cd3:	d1 ef                	shr    edi,1
c0007cd5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cdd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce0:	85 db                	test   ebx,ebx
c0007ce2:	75 2d                	jne    c0007d11 <f_mkfs+0xc05>
c0007ce4:	89 cb                	mov    ebx,ecx
c0007ce6:	ba 70 03 02 c0       	mov    edx,0xc0020370
c0007ceb:	c1 eb 11             	shr    ebx,0x11
c0007cee:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cf6:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	74 11                	je     c0007d0f <f_mkfs+0xc03>
c0007cfe:	83 c2 02             	add    edx,0x2
c0007d01:	39 d8                	cmp    eax,ebx
c0007d03:	77 0a                	ja     c0007d0f <f_mkfs+0xc03>
c0007d05:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d09:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d0d:	eb e7                	jmp    c0007cf6 <f_mkfs+0xbea>
c0007d0f:	31 db                	xor    ebx,ebx
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d19:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d20:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d25:	c1 ea 09             	shr    edx,0x9
c0007d28:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d2d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d31:	0f 87 96 00 00 00    	ja     c0007dcd <f_mkfs+0xcc1>
c0007d37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d3b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d47:	be 20 00 00 00       	mov    esi,0x20
c0007d4c:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d51:	e9 a6 fe ff ff       	jmp    c0007bfc <f_mkfs+0xaf0>
c0007d56:	83 c2 02             	add    edx,0x2
c0007d59:	39 c8                	cmp    eax,ecx
c0007d5b:	0f 87 60 fe ff ff    	ja     c0007bc1 <f_mkfs+0xab5>
c0007d61:	01 ff                	add    edi,edi
c0007d63:	e9 4d fe ff ff       	jmp    c0007bb5 <f_mkfs+0xaa9>
c0007d68:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d6b:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d70:	40                   	inc    eax
c0007d71:	d1 e8                	shr    eax,1
c0007d73:	83 c0 03             	add    eax,0x3
c0007d76:	e9 62 fe ff ff       	jmp    c0007bdd <f_mkfs+0xad1>
c0007d7b:	31 d2                	xor    edx,edx
c0007d7d:	89 c8                	mov    eax,ecx
c0007d7f:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d83:	85 d2                	test   edx,edx
c0007d85:	74 0c                	je     c0007d93 <f_mkfs+0xc87>
c0007d87:	49                   	dec    ecx
c0007d88:	46                   	inc    esi
c0007d89:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d8e:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	31 d2                	xor    edx,edx
c0007d97:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d9b:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d9f:	e9 c3 fe ff ff       	jmp    c0007c67 <f_mkfs+0xb5b>
c0007da4:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007da9:	77 31                	ja     c0007ddc <f_mkfs+0xcd0>
c0007dab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db0:	75 1b                	jne    c0007dcd <f_mkfs+0xcc1>
c0007db2:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007db5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007db9:	3d 80 00 00 00       	cmp    eax,0x80
c0007dbe:	0f 86 d9 fd ff ff    	jbe    c0007b9d <f_mkfs+0xa91>
c0007dc4:	eb 07                	jmp    c0007dcd <f_mkfs+0xcc1>
c0007dc6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dcb:	76 0a                	jbe    c0007dd7 <f_mkfs+0xccb>
c0007dcd:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd2:	e9 ff 03 00 00       	jmp    c00081d6 <f_mkfs+0x10ca>
c0007dd7:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ddc:	31 d2                	xor    edx,edx
c0007dde:	b9 00 02 00 00       	mov    ecx,0x200
c0007de3:	89 e8                	mov    eax,ebp
c0007de5:	e8 ef 9c ff ff       	call   c0001ad9 <mem_set>
c0007dea:	b9 0b 00 00 00       	mov    ecx,0xb
c0007def:	ba 82 04 02 c0       	mov    edx,0xc0020482
c0007df4:	89 e8                	mov    eax,ebp
c0007df6:	e8 c9 9c ff ff       	call   c0001ac4 <mem_cpy>
c0007dfb:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007dfe:	ba 00 02 00 00       	mov    edx,0x200
c0007e03:	e8 af 9c ff ff       	call   c0001ab7 <st_word>
c0007e08:	89 f8                	mov    eax,edi
c0007e0a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e0d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e10:	0f b7 d6             	movzx  edx,si
c0007e13:	e8 9f 9c ff ff       	call   c0001ab7 <st_word>
c0007e18:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e1c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e1f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e24:	75 08                	jne    c0007e2e <f_mkfs+0xd22>
c0007e26:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e2e:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e35:	e8 7d 9c ff ff       	call   c0001ab7 <st_word>
c0007e3a:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e3f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e43:	39 d0                	cmp    eax,edx
c0007e45:	b8 00 00 00 00       	mov    eax,0x0
c0007e4a:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e4e:	72 0a                	jb     c0007e5a <f_mkfs+0xd4e>
c0007e50:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e53:	e8 5f 9c ff ff       	call   c0001ab7 <st_word>
c0007e58:	eb 08                	jmp    c0007e62 <f_mkfs+0xd56>
c0007e5a:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e5d:	e8 59 9c ff ff       	call   c0001abb <st_dword>
c0007e62:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e65:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e6a:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e6e:	e8 44 9c ff ff       	call   c0001ab7 <st_word>
c0007e73:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e76:	ba ff 00 00 00       	mov    edx,0xff
c0007e7b:	e8 37 9c ff ff       	call   c0001ab7 <st_word>
c0007e80:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e87:	e8 2f 9c ff ff       	call   c0001abb <st_dword>
c0007e8c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e91:	75 57                	jne    c0007eea <f_mkfs+0xdde>
c0007e93:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e96:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e9b:	e8 1b 9c ff ff       	call   c0001abb <st_dword>
c0007ea0:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ea3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ea7:	e8 0f 9c ff ff       	call   c0001abb <st_dword>
c0007eac:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eaf:	ba 02 00 00 00       	mov    edx,0x2
c0007eb4:	e8 02 9c ff ff       	call   c0001abb <st_dword>
c0007eb9:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ebc:	ba 01 00 00 00       	mov    edx,0x1
c0007ec1:	e8 f1 9b ff ff       	call   c0001ab7 <st_word>
c0007ec6:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ec9:	ba 06 00 00 00       	mov    edx,0x6
c0007ece:	e8 e4 9b ff ff       	call   c0001ab7 <st_word>
c0007ed3:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ed7:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007edb:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ede:	b9 13 00 00 00       	mov    ecx,0x13
c0007ee3:	ba 8e 04 02 c0       	mov    edx,0xc002048e
c0007ee8:	eb 2f                	jmp    c0007f19 <f_mkfs+0xe0d>
c0007eea:	8d 45 27             	lea    eax,[ebp+0x27]
c0007eed:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef2:	e8 c4 9b ff ff       	call   c0001abb <st_dword>
c0007ef7:	8d 45 16             	lea    eax,[ebp+0x16]
c0007efa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007eff:	e8 b3 9b ff ff       	call   c0001ab7 <st_word>
c0007f04:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f08:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f0c:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f0f:	b9 13 00 00 00       	mov    ecx,0x13
c0007f14:	ba a2 04 02 c0       	mov    edx,0xc00204a2
c0007f19:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f1f:	e8 a0 9b ff ff       	call   c0001ac4 <mem_cpy>
c0007f24:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f29:	89 f0                	mov    eax,esi
c0007f2b:	e8 87 9b ff ff       	call   c0001ab7 <st_word>
c0007f30:	83 ec 0c             	sub    esp,0xc
c0007f33:	6a 01                	push   0x1
c0007f35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f3d:	55                   	push   ebp
c0007f3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f42:	e8 c9 9a ff ff       	call   c0001a10 <disk_write>
c0007f47:	83 c4 20             	add    esp,0x20
c0007f4a:	85 c0                	test   eax,eax
c0007f4c:	0f 85 67 02 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c0007f52:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f57:	0f 85 b7 00 00 00    	jne    c0008014 <f_mkfs+0xf08>
c0007f5d:	83 ec 0c             	sub    esp,0xc
c0007f60:	6a 01                	push   0x1
c0007f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f6a:	83 c0 06             	add    eax,0x6
c0007f6d:	83 d2 00             	adc    edx,0x0
c0007f70:	52                   	push   edx
c0007f71:	50                   	push   eax
c0007f72:	55                   	push   ebp
c0007f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f77:	e8 94 9a ff ff       	call   c0001a10 <disk_write>
c0007f7c:	83 c4 20             	add    esp,0x20
c0007f7f:	b9 00 02 00 00       	mov    ecx,0x200
c0007f84:	31 d2                	xor    edx,edx
c0007f86:	89 e8                	mov    eax,ebp
c0007f88:	e8 4c 9b ff ff       	call   c0001ad9 <mem_set>
c0007f8d:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f92:	89 e8                	mov    eax,ebp
c0007f94:	e8 22 9b ff ff       	call   c0001abb <st_dword>
c0007f99:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f9f:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fa4:	e8 12 9b ff ff       	call   c0001abb <st_dword>
c0007fa9:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fac:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb2:	e8 04 9b ff ff       	call   c0001abb <st_dword>
c0007fb7:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fbd:	ba 02 00 00 00       	mov    edx,0x2
c0007fc2:	e8 f4 9a ff ff       	call   c0001abb <st_dword>
c0007fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fcc:	89 f0                	mov    eax,esi
c0007fce:	e8 e4 9a ff ff       	call   c0001ab7 <st_word>
c0007fd3:	83 ec 0c             	sub    esp,0xc
c0007fd6:	6a 01                	push   0x1
c0007fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fdc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe0:	83 c0 07             	add    eax,0x7
c0007fe3:	83 d2 00             	adc    edx,0x0
c0007fe6:	52                   	push   edx
c0007fe7:	50                   	push   eax
c0007fe8:	55                   	push   ebp
c0007fe9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fed:	e8 1e 9a ff ff       	call   c0001a10 <disk_write>
c0007ff2:	83 c4 14             	add    esp,0x14
c0007ff5:	6a 01                	push   0x1
c0007ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ffb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fff:	83 c0 01             	add    eax,0x1
c0008002:	83 d2 00             	adc    edx,0x0
c0008005:	52                   	push   edx
c0008006:	50                   	push   eax
c0008007:	55                   	push   ebp
c0008008:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000800c:	e8 ff 99 ff ff       	call   c0001a10 <disk_write>
c0008011:	83 c4 20             	add    esp,0x20
c0008014:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000801b:	31 d2                	xor    edx,edx
c000801d:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008023:	31 db                	xor    ebx,ebx
c0008025:	89 e8                	mov    eax,ebp
c0008027:	e8 ad 9a ff ff       	call   c0001ad9 <mem_set>
c000802c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008033:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008038:	0f 94 c3             	sete   bl
c000803b:	4b                   	dec    ebx
c000803c:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008042:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008048:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000804d:	75 21                	jne    c0008070 <f_mkfs+0xf64>
c000804f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008054:	89 e8                	mov    eax,ebp
c0008056:	e8 60 9a ff ff       	call   c0001abb <st_dword>
c000805b:	8d 45 04             	lea    eax,[ebp+0x4]
c000805e:	83 ca ff             	or     edx,0xffffffff
c0008061:	e8 55 9a ff ff       	call   c0001abb <st_dword>
c0008066:	8d 45 08             	lea    eax,[ebp+0x8]
c0008069:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000806e:	eb 04                	jmp    c0008074 <f_mkfs+0xf68>
c0008070:	89 da                	mov    edx,ebx
c0008072:	89 e8                	mov    eax,ebp
c0008074:	e8 42 9a ff ff       	call   c0001abb <st_dword>
c0008079:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000807d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008081:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008085:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008089:	39 ce                	cmp    esi,ecx
c000808b:	76 02                	jbe    c000808f <f_mkfs+0xf83>
c000808d:	89 ce                	mov    esi,ecx
c000808f:	83 ec 0c             	sub    esp,0xc
c0008092:	56                   	push   esi
c0008093:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008097:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809b:	55                   	push   ebp
c000809c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a0:	e8 6b 99 ff ff       	call   c0001a10 <disk_write>
c00080a5:	83 c4 20             	add    esp,0x20
c00080a8:	85 c0                	test   eax,eax
c00080aa:	0f 85 09 01 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c00080b0:	31 d2                	xor    edx,edx
c00080b2:	b9 00 02 00 00       	mov    ecx,0x200
c00080b7:	89 e8                	mov    eax,ebp
c00080b9:	e8 1b 9a ff ff       	call   c0001ad9 <mem_set>
c00080be:	31 d2                	xor    edx,edx
c00080c0:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080c4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080c8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080cc:	75 b3                	jne    c0008081 <f_mkfs+0xf75>
c00080ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080d8:	40                   	inc    eax
c00080d9:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080dd:	0f 87 65 ff ff ff    	ja     c0008048 <f_mkfs+0xf3c>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	74 04                	je     c00080ee <f_mkfs+0xfe2>
c00080ea:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080ee:	89 fb                	mov    ebx,edi
c00080f0:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080f4:	76 04                	jbe    c00080fa <f_mkfs+0xfee>
c00080f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00080fa:	83 ec 0c             	sub    esp,0xc
c00080fd:	53                   	push   ebx
c00080fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008106:	55                   	push   ebp
c0008107:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000810b:	e8 00 99 ff ff       	call   c0001a10 <disk_write>
c0008110:	83 c4 20             	add    esp,0x20
c0008113:	85 c0                	test   eax,eax
c0008115:	0f 85 9e 00 00 00    	jne    c00081b9 <f_mkfs+0x10ad>
c000811b:	31 d2                	xor    edx,edx
c000811d:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008121:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008125:	29 df                	sub    edi,ebx
c0008127:	75 c5                	jne    c00080ee <f_mkfs+0xfe2>
c0008129:	b1 0c                	mov    cl,0xc
c000812b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008130:	74 1d                	je     c000814f <f_mkfs+0x1043>
c0008132:	b8 ff ff 00 00       	mov    eax,0xffff
c0008137:	b1 06                	mov    cl,0x6
c0008139:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000813d:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008141:	72 0c                	jb     c000814f <f_mkfs+0x1043>
c0008143:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008148:	0f 94 c1             	sete   cl
c000814b:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000814f:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008154:	75 4c                	jne    c00081a2 <f_mkfs+0x1096>
c0008156:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000815a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000815e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008165:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000816c:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008177:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008182:	83 ec 0c             	sub    esp,0xc
c0008185:	0f b6 c9             	movzx  ecx,cl
c0008188:	55                   	push   ebp
c0008189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000818d:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008194:	e8 58 c2 ff ff       	call   c00043f1 <create_partition>
c0008199:	83 c4 10             	add    esp,0x10
c000819c:	89 c3                	mov    ebx,eax
c000819e:	85 c0                	test   eax,eax
c00081a0:	75 34                	jne    c00081d6 <f_mkfs+0x10ca>
c00081a2:	50                   	push   eax
c00081a3:	31 db                	xor    ebx,ebx
c00081a5:	6a 00                	push   0x0
c00081a7:	6a 00                	push   0x0
c00081a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ad:	e8 74 98 ff ff       	call   c0001a26 <disk_ioctl>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	85 c0                	test   eax,eax
c00081b7:	74 1d                	je     c00081d6 <f_mkfs+0x10ca>
c00081b9:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c1:	75 0c                	jne    c00081cf <f_mkfs+0x10c3>
c00081c3:	83 ec 0c             	sub    esp,0xc
c00081c6:	55                   	push   ebp
c00081c7:	e8 75 00 00 00       	call   c0008241 <ff_memfree>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	bb 01 00 00 00       	mov    ebx,0x1
c00081d4:	eb 48                	jmp    c000821e <f_mkfs+0x1112>
c00081d6:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081de:	75 3e                	jne    c000821e <f_mkfs+0x1112>
c00081e0:	83 ec 0c             	sub    esp,0xc
c00081e3:	55                   	push   ebp
c00081e4:	e8 58 00 00 00       	call   c0008241 <ff_memfree>
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	eb 30                	jmp    c000821e <f_mkfs+0x1112>
c00081ee:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081f3:	0f 85 eb fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd8>
c00081f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081fd:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008203:	0f 86 b8 f9 ff ff    	jbe    c0007bc1 <f_mkfs+0xab5>
c0008209:	e9 bf fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000820e:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008213:	0f 85 c0 fa ff ff    	jne    c0007cd9 <f_mkfs+0xbcd>
c0008219:	e9 af fb ff ff       	jmp    c0007dcd <f_mkfs+0xcc1>
c000821e:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008224:	89 d8                	mov    eax,ebx
c0008226:	5b                   	pop    ebx
c0008227:	5e                   	pop    esi
c0008228:	5f                   	pop    edi
c0008229:	5d                   	pop    ebp
c000822a:	c3                   	ret    

c000822b <ff_memalloc>:
c000822b:	83 ec 0c             	sub    esp,0xc
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 b1 3d 00 00       	call   c000bfeb <malloc>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    

c0008241 <ff_memfree>:
c0008241:	83 ec 0c             	sub    esp,0xc
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824b:	e8 ab 3d 00 00       	call   c000bffb <free>
c0008250:	83 c4 10             	add    esp,0x10
c0008253:	90                   	nop
c0008254:	83 c4 0c             	add    esp,0xc
c0008257:	c3                   	ret    

c0008258 <ff_uni2oem>:
c0008258:	83 ec 14             	sub    esp,0x14
c000825b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000825f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008263:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000826a:	c7 44 24 0c c0 07 02 c0 	mov    DWORD PTR [esp+0xc],0xc00207c0
c0008272:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008277:	77 0b                	ja     c0008284 <ff_uni2oem+0x2c>
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008282:	eb 61                	jmp    c00082e5 <ff_uni2oem+0x8d>
c0008284:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000828c:	77 57                	ja     c00082e5 <ff_uni2oem+0x8d>
c000828e:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008294:	75 4f                	jne    c00082e5 <ff_uni2oem+0x8d>
c0008296:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000829d:	eb 0b                	jmp    c00082aa <ff_uni2oem+0x52>
c000829f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082a4:	40                   	inc    eax
c00082a5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082aa:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b0:	77 21                	ja     c00082d3 <ff_uni2oem+0x7b>
c00082b2:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082b7:	25 ff ff 00 00       	and    eax,0xffff
c00082bc:	8d 14 00             	lea    edx,[eax+eax*1]
c00082bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c3:	01 d0                	add    eax,edx
c00082c5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082c8:	25 ff ff 00 00       	and    eax,0xffff
c00082cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d1:	75 cc                	jne    c000829f <ff_uni2oem+0x47>
c00082d3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082d8:	83 e8 80             	sub    eax,0xffffff80
c00082db:	25 ff 00 00 00       	and    eax,0xff
c00082e0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ea:	83 c4 14             	add    esp,0x14
c00082ed:	c3                   	ret    

c00082ee <ff_oem2uni>:
c00082ee:	83 ec 18             	sub    esp,0x18
c00082f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f9:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00082fe:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008302:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008309:	c7 44 24 10 c0 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc00207c0
c0008311:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008317:	77 0b                	ja     c0008324 <ff_oem2uni+0x36>
c0008319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008322:	eb 30                	jmp    c0008354 <ff_oem2uni+0x66>
c0008324:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832a:	75 28                	jne    c0008354 <ff_oem2uni+0x66>
c000832c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008333:	77 1f                	ja     c0008354 <ff_oem2uni+0x66>
c0008335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008339:	25 ff ff 00 00       	and    eax,0xffff
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	8d 14 00             	lea    edx,[eax+eax*1]
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 62 01 00 00    	ja     c00084d0 <ff_wtoupper+0x173>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 c0 05 02 c0       	mov    eax,0xc00205c0
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 00 05 02 c0       	mov    eax,0xc0020500
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 13 01 00 00    	je     c00084c2 <ff_wtoupper+0x165>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 03 01 00 00    	jb     c00084c2 <ff_wtoupper+0x165>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083ec:	31 d2                	xor    edx,edx
c00083ee:	66 89 c2             	mov    dx,ax
c00083f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083f5:	31 c9                	xor    ecx,ecx
c00083f7:	66 89 c1             	mov    cx,ax
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c8                	add    eax,ecx
c0008406:	39 c2                	cmp    edx,eax
c0008408:	0f 8d 92 00 00 00    	jge    c00084a0 <ff_wtoupper+0x143>
c000840e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008412:	25 ff ff 00 00       	and    eax,0xffff
c0008417:	83 f8 08             	cmp    eax,0x8
c000841a:	0f 87 a1 00 00 00    	ja     c00084c1 <ff_wtoupper+0x164>
c0008420:	8b 04 85 c0 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb40]
c0008427:	ff e0                	jmp    eax
c0008429:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000842e:	31 d2                	xor    edx,edx
c0008430:	66 89 c2             	mov    dx,ax
c0008433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008437:	25 ff ff 00 00       	and    eax,0xffff
c000843c:	29 c2                	sub    edx,eax
c000843e:	89 d0                	mov    eax,edx
c0008440:	8d 14 00             	lea    edx,[eax+eax*1]
c0008443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008447:	01 d0                	add    eax,edx
c0008449:	66 8b 00             	mov    ax,WORD PTR [eax]
c000844c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008451:	eb 4b                	jmp    c000849e <ff_wtoupper+0x141>
c0008453:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008458:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000845c:	83 e0 01             	and    eax,0x1
c000845f:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008464:	eb 38                	jmp    c000849e <ff_wtoupper+0x141>
c0008466:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000846c:	eb 30                	jmp    c000849e <ff_wtoupper+0x141>
c000846e:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008474:	eb 28                	jmp    c000849e <ff_wtoupper+0x141>
c0008476:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000847c:	eb 20                	jmp    c000849e <ff_wtoupper+0x141>
c000847e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008484:	eb 18                	jmp    c000849e <ff_wtoupper+0x141>
c0008486:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000848c:	eb 10                	jmp    c000849e <ff_wtoupper+0x141>
c000848e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008494:	eb 08                	jmp    c000849e <ff_wtoupper+0x141>
c0008496:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000849d:	90                   	nop
c000849e:	eb 21                	jmp    c00084c1 <ff_wtoupper+0x164>
c00084a0:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084a6:	0f 85 e4 fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c00084ac:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b1:	25 ff ff 00 00       	and    eax,0xffff
c00084b6:	01 c0                	add    eax,eax
c00084b8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084bc:	e9 cf fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084c1:	90                   	nop
c00084c2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084c7:	25 ff ff 00 00       	and    eax,0xffff
c00084cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	c3                   	ret    

c00084d8 <is_bad_src_ratio>:
c00084d8:	83 ec 0c             	sub    esp,0xc
c00084db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084df:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084ea:	dd 04 24             	fld    QWORD PTR [esp]
c00084ed:	dd 05 80 0d 02 c0    	fld    QWORD PTR ds:0xc0020d80
c00084f3:	de d9                	fcompp 
c00084f5:	df e0                	fnstsw ax
c00084f7:	f6 c4 45             	test   ah,0x45
c00084fa:	74 10                	je     c000850c <is_bad_src_ratio+0x34>
c00084fc:	dd 04 24             	fld    QWORD PTR [esp]
c00084ff:	dc 1d 88 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d88
c0008505:	df e0                	fnstsw ax
c0008507:	f6 c4 45             	test   ah,0x45
c000850a:	75 07                	jne    c0008513 <is_bad_src_ratio+0x3b>
c000850c:	b8 01 00 00 00       	mov    eax,0x1
c0008511:	eb 05                	jmp    c0008518 <is_bad_src_ratio+0x40>
c0008513:	b8 00 00 00 00       	mov    eax,0x0
c0008518:	83 c4 0c             	add    esp,0xc
c000851b:	c3                   	ret    

c000851c <psrc_set_converter>:
c000851c:	56                   	push   esi
c000851d:	89 d6                	mov    esi,edx
c000851f:	53                   	push   ebx
c0008520:	89 c3                	mov    ebx,eax
c0008522:	83 ec 0c             	sub    esp,0xc
c0008525:	52                   	push   edx
c0008526:	50                   	push   eax
c0008527:	e8 21 24 00 00       	call   c000a94d <sinc_set_converter>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	85 c0                	test   eax,eax
c0008531:	74 25                	je     c0008558 <psrc_set_converter+0x3c>
c0008533:	50                   	push   eax
c0008534:	50                   	push   eax
c0008535:	56                   	push   esi
c0008536:	53                   	push   ebx
c0008537:	e8 1c 28 00 00       	call   c000ad58 <zoh_set_converter>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	85 c0                	test   eax,eax
c0008541:	74 15                	je     c0008558 <psrc_set_converter+0x3c>
c0008543:	51                   	push   ecx
c0008544:	51                   	push   ecx
c0008545:	56                   	push   esi
c0008546:	53                   	push   ebx
c0008547:	e8 0c 0a 00 00       	call   c0008f58 <linear_set_converter>
c000854c:	83 c4 10             	add    esp,0x10
c000854f:	ba 0a 00 00 00       	mov    edx,0xa
c0008554:	85 c0                	test   eax,eax
c0008556:	75 02                	jne    c000855a <psrc_set_converter+0x3e>
c0008558:	31 d2                	xor    edx,edx
c000855a:	89 d0                	mov    eax,edx
c000855c:	5a                   	pop    edx
c000855d:	5b                   	pop    ebx
c000855e:	5e                   	pop    esi
c000855f:	c3                   	ret    

c0008560 <src_delete>:
c0008560:	53                   	push   ebx
c0008561:	83 ec 08             	sub    esp,0x8
c0008564:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008568:	85 db                	test   ebx,ebx
c000856a:	74 29                	je     c0008595 <src_delete+0x35>
c000856c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856f:	85 c0                	test   eax,eax
c0008571:	74 0c                	je     c000857f <src_delete+0x1f>
c0008573:	83 ec 0c             	sub    esp,0xc
c0008576:	50                   	push   eax
c0008577:	e8 7f 3a 00 00       	call   c000bffb <free>
c000857c:	83 c4 10             	add    esp,0x10
c000857f:	50                   	push   eax
c0008580:	6a 3c                	push   0x3c
c0008582:	6a 00                	push   0x0
c0008584:	53                   	push   ebx
c0008585:	e8 30 81 ff ff       	call   c00006ba <memset>
c000858a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858d:	e8 69 3a 00 00       	call   c000bffb <free>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	83 c4 08             	add    esp,0x8
c0008598:	31 c0                	xor    eax,eax
c000859a:	5b                   	pop    ebx
c000859b:	c3                   	ret    

c000859c <src_process>:
c000859c:	56                   	push   esi
c000859d:	53                   	push   ebx
c000859e:	53                   	push   ebx
c000859f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085a7:	85 f6                	test   esi,esi
c00085a9:	0f 84 e2 00 00 00    	je     c0008691 <src_process+0xf5>
c00085af:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b3:	0f 84 df 00 00 00    	je     c0008698 <src_process+0xfc>
c00085b9:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bd:	0f 84 d5 00 00 00    	je     c0008698 <src_process+0xfc>
c00085c3:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085ca:	0f 85 cf 00 00 00    	jne    c000869f <src_process+0x103>
c00085d0:	85 db                	test   ebx,ebx
c00085d2:	0f 84 ce 00 00 00    	je     c00086a6 <src_process+0x10a>
c00085d8:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085db:	0f 84 cc 00 00 00    	je     c00086ad <src_process+0x111>
c00085e1:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e5:	0f 84 c2 00 00 00    	je     c00086ad <src_process+0x111>
c00085eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f1:	e8 e2 fe ff ff       	call   c00084d8 <is_bad_src_ratio>
c00085f6:	5a                   	pop    edx
c00085f7:	85 c0                	test   eax,eax
c00085f9:	59                   	pop    ecx
c00085fa:	0f 85 b4 00 00 00    	jne    c00086b4 <src_process+0x118>
c0008600:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008604:	79 07                	jns    c000860d <src_process+0x71>
c0008606:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008611:	79 07                	jns    c000861a <src_process+0x7e>
c0008613:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000861f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008622:	39 ca                	cmp    edx,ecx
c0008624:	73 0b                	jae    c0008631 <src_process+0x95>
c0008626:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862a:	8d 04 82             	lea    eax,[edx+eax*4]
c000862d:	39 c1                	cmp    ecx,eax
c000862f:	eb 09                	jmp    c000863a <src_process+0x9e>
c0008631:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008635:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008638:	39 c2                	cmp    edx,eax
c000863a:	72 7f                	jb     c00086bb <src_process+0x11f>
c000863c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	d9 05 a0 0d 02 c0    	fld    DWORD PTR ds:0xc0020da0
c0008650:	dc 1e                	fcomp  QWORD PTR [esi]
c0008652:	df e0                	fnstsw ax
c0008654:	9e                   	sahf   
c0008655:	76 05                	jbe    c000865c <src_process+0xc0>
c0008657:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c000865a:	dd 1e                	fstp   QWORD PTR [esi]
c000865c:	dd 06                	fld    QWORD PTR [esi]
c000865e:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008661:	83 ec 10             	sub    esp,0x10
c0008664:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008667:	e8 c4 6f 01 00       	call   c001f630 <fabs>
c000866c:	83 c4 10             	add    esp,0x10
c000866f:	dd 05 90 0d 02 c0    	fld    QWORD PTR ds:0xc0020d90
c0008675:	de d9                	fcompp 
c0008677:	df e0                	fnstsw ax
c0008679:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000867d:	9e                   	sahf   
c000867e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008682:	76 05                	jbe    c0008689 <src_process+0xed>
c0008684:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0008687:	eb 03                	jmp    c000868c <src_process+0xf0>
c0008689:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000868c:	59                   	pop    ecx
c000868d:	5b                   	pop    ebx
c000868e:	5e                   	pop    esi
c000868f:	ff e0                	jmp    eax
c0008691:	b8 02 00 00 00       	mov    eax,0x2
c0008696:	eb 28                	jmp    c00086c0 <src_process+0x124>
c0008698:	b8 07 00 00 00       	mov    eax,0x7
c000869d:	eb 21                	jmp    c00086c0 <src_process+0x124>
c000869f:	b8 12 00 00 00       	mov    eax,0x12
c00086a4:	eb 1a                	jmp    c00086c0 <src_process+0x124>
c00086a6:	b8 03 00 00 00       	mov    eax,0x3
c00086ab:	eb 13                	jmp    c00086c0 <src_process+0x124>
c00086ad:	b8 04 00 00 00       	mov    eax,0x4
c00086b2:	eb 0c                	jmp    c00086c0 <src_process+0x124>
c00086b4:	b8 06 00 00 00       	mov    eax,0x6
c00086b9:	eb 05                	jmp    c00086c0 <src_process+0x124>
c00086bb:	b8 10 00 00 00       	mov    eax,0x10
c00086c0:	5a                   	pop    edx
c00086c1:	5b                   	pop    ebx
c00086c2:	5e                   	pop    esi
c00086c3:	c3                   	ret    

c00086c4 <src_callback_read>:
c00086c4:	55                   	push   ebp
c00086c5:	57                   	push   edi
c00086c6:	56                   	push   esi
c00086c7:	53                   	push   ebx
c00086c8:	83 ec 4c             	sub    esp,0x4c
c00086cb:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086cf:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086d3:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086d7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086db:	85 ff                	test   edi,edi
c00086dd:	0f 8e 36 01 00 00    	jle    c0008819 <src_callback_read+0x155>
c00086e3:	85 db                	test   ebx,ebx
c00086e5:	0f 84 2e 01 00 00    	je     c0008819 <src_callback_read+0x155>
c00086eb:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f2:	74 0c                	je     c0008700 <src_callback_read+0x3c>
c00086f4:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00086fb:	e9 19 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008700:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008704:	75 0c                	jne    c0008712 <src_callback_read+0x4e>
c0008706:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000870d:	e9 07 01 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008712:	51                   	push   ecx
c0008713:	6a 24                	push   0x24
c0008715:	6a 00                	push   0x0
c0008717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000871b:	50                   	push   eax
c000871c:	e8 99 7f ff ff       	call   c00006ba <memset>
c0008721:	5e                   	pop    esi
c0008722:	5d                   	pop    ebp
c0008723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008727:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872b:	e8 a8 fd ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008730:	83 c4 10             	add    esp,0x10
c0008733:	85 c0                	test   eax,eax
c0008735:	74 0c                	je     c0008743 <src_callback_read+0x7f>
c0008737:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000873e:	e9 d6 00 00 00       	jmp    c0008819 <src_callback_read+0x155>
c0008743:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008747:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000874b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000874f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008753:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008756:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000875a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000875d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008761:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008765:	31 f6                	xor    esi,esi
c0008767:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000876c:	75 30                	jne    c000879e <src_callback_read+0xda>
c000876e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008776:	52                   	push   edx
c0008777:	52                   	push   edx
c0008778:	8d 44 24 20          	lea    eax,[esp+0x20]
c000877c:	50                   	push   eax
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008783:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008787:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000878b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000878f:	83 c4 10             	add    esp,0x10
c0008792:	85 c0                	test   eax,eax
c0008794:	75 08                	jne    c000879e <src_callback_read+0xda>
c0008796:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000879e:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087a5:	50                   	push   eax
c00087a6:	50                   	push   eax
c00087a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087ab:	50                   	push   eax
c00087ac:	53                   	push   ebx
c00087ad:	e8 ea fd ff ff       	call   c000859c <src_process>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087bc:	85 c0                	test   eax,eax
c00087be:	75 42                	jne    c0008802 <src_callback_read+0x13e>
c00087c0:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087c7:	89 e9                	mov    ecx,ebp
c00087c9:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087cd:	0f af ca             	imul   ecx,edx
c00087d0:	c1 e1 02             	shl    ecx,0x2
c00087d3:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087db:	0f af d1             	imul   edx,ecx
c00087de:	c1 e2 02             	shl    edx,0x2
c00087e1:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087e5:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087e9:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087ec:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f1:	75 04                	jne    c00087f7 <src_callback_read+0x133>
c00087f3:	85 c9                	test   ecx,ecx
c00087f5:	74 0b                	je     c0008802 <src_callback_read+0x13e>
c00087f7:	39 d7                	cmp    edi,edx
c00087f9:	7e 09                	jle    c0008804 <src_callback_read+0x140>
c00087fb:	89 d6                	mov    esi,edx
c00087fd:	e9 65 ff ff ff       	jmp    c0008767 <src_callback_read+0xa3>
c0008802:	89 f2                	mov    edx,esi
c0008804:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008808:	85 c0                	test   eax,eax
c000880a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000880d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008811:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008814:	74 05                	je     c000881b <src_callback_read+0x157>
c0008816:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008819:	31 d2                	xor    edx,edx
c000881b:	83 c4 4c             	add    esp,0x4c
c000881e:	89 d0                	mov    eax,edx
c0008820:	5b                   	pop    ebx
c0008821:	5e                   	pop    esi
c0008822:	5f                   	pop    edi
c0008823:	5d                   	pop    ebp
c0008824:	c3                   	ret    

c0008825 <src_set_ratio>:
c0008825:	53                   	push   ebx
c0008826:	b8 02 00 00 00       	mov    eax,0x2
c000882b:	83 ec 08             	sub    esp,0x8
c000882e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008832:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008836:	85 db                	test   ebx,ebx
c0008838:	74 33                	je     c000886d <src_set_ratio+0x48>
c000883a:	b8 07 00 00 00       	mov    eax,0x7
c000883f:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008843:	74 2c                	je     c0008871 <src_set_ratio+0x4c>
c0008845:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008849:	74 2a                	je     c0008875 <src_set_ratio+0x50>
c000884b:	50                   	push   eax
c000884c:	50                   	push   eax
c000884d:	dd 14 24             	fst    QWORD PTR [esp]
c0008850:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008854:	e8 7f fc ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008859:	5a                   	pop    edx
c000885a:	59                   	pop    ecx
c000885b:	85 c0                	test   eax,eax
c000885d:	75 07                	jne    c0008866 <src_set_ratio+0x41>
c000885f:	dd 04 24             	fld    QWORD PTR [esp]
c0008862:	dd 1b                	fstp   QWORD PTR [ebx]
c0008864:	eb 11                	jmp    c0008877 <src_set_ratio+0x52>
c0008866:	b8 06 00 00 00       	mov    eax,0x6
c000886b:	eb 0a                	jmp    c0008877 <src_set_ratio+0x52>
c000886d:	dd d8                	fstp   st(0)
c000886f:	eb 06                	jmp    c0008877 <src_set_ratio+0x52>
c0008871:	dd d8                	fstp   st(0)
c0008873:	eb 02                	jmp    c0008877 <src_set_ratio+0x52>
c0008875:	dd d8                	fstp   st(0)
c0008877:	83 c4 08             	add    esp,0x8
c000887a:	5b                   	pop    ebx
c000887b:	c3                   	ret    

c000887c <src_get_channels>:
c000887c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008880:	b8 02 00 00 00       	mov    eax,0x2
c0008885:	85 d2                	test   edx,edx
c0008887:	74 14                	je     c000889d <src_get_channels+0x21>
c0008889:	b8 07 00 00 00       	mov    eax,0x7
c000888e:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008892:	74 09                	je     c000889d <src_get_channels+0x21>
c0008894:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008898:	74 03                	je     c000889d <src_get_channels+0x21>
c000889a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000889d:	c3                   	ret    

c000889e <src_reset>:
c000889e:	53                   	push   ebx
c000889f:	b8 02 00 00 00       	mov    eax,0x2
c00088a4:	83 ec 08             	sub    esp,0x8
c00088a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088ab:	85 db                	test   ebx,ebx
c00088ad:	74 2e                	je     c00088dd <src_reset+0x3f>
c00088af:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b2:	85 c0                	test   eax,eax
c00088b4:	74 09                	je     c00088bf <src_reset+0x21>
c00088b6:	83 ec 0c             	sub    esp,0xc
c00088b9:	53                   	push   ebx
c00088ba:	ff d0                	call   eax
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	d9 ee                	fldz   
c00088c1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088cf:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088d9:	31 c0                	xor    eax,eax
c00088db:	dd 1b                	fstp   QWORD PTR [ebx]
c00088dd:	83 c4 08             	add    esp,0x8
c00088e0:	5b                   	pop    ebx
c00088e1:	c3                   	ret    

c00088e2 <src_new>:
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	53                   	push   ebx
c00088e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088ed:	85 f6                	test   esi,esi
c00088ef:	74 73                	je     c0008964 <src_new+0x82>
c00088f1:	85 ff                	test   edi,edi
c00088f3:	7f 08                	jg     c00088fd <src_new+0x1b>
c00088f5:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00088fb:	eb 1e                	jmp    c000891b <src_new+0x39>
c00088fd:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008903:	50                   	push   eax
c0008904:	50                   	push   eax
c0008905:	6a 3c                	push   0x3c
c0008907:	6a 01                	push   0x1
c0008909:	e8 0d 37 00 00       	call   c000c01b <calloc>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	89 c3                	mov    ebx,eax
c0008913:	85 c0                	test   eax,eax
c0008915:	75 10                	jne    c0008927 <src_new+0x45>
c0008917:	85 f6                	test   esi,esi
c0008919:	75 04                	jne    c000891f <src_new+0x3d>
c000891b:	31 db                	xor    ebx,ebx
c000891d:	eb 4b                	jmp    c000896a <src_new+0x88>
c000891f:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008925:	eb 43                	jmp    c000896a <src_new+0x88>
c0008927:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000892a:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008931:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008935:	e8 e2 fb ff ff       	call   c000851c <psrc_set_converter>
c000893a:	85 c0                	test   eax,eax
c000893c:	74 18                	je     c0008956 <src_new+0x74>
c000893e:	85 f6                	test   esi,esi
c0008940:	74 06                	je     c0008948 <src_new+0x66>
c0008942:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	53                   	push   ebx
c000894c:	31 db                	xor    ebx,ebx
c000894e:	e8 a8 36 00 00       	call   c000bffb <free>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	53                   	push   ebx
c000895a:	e8 3f ff ff ff       	call   c000889e <src_reset>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	eb 06                	jmp    c000896a <src_new+0x88>
c0008964:	85 ff                	test   edi,edi
c0008966:	7f 9b                	jg     c0008903 <src_new+0x21>
c0008968:	eb b1                	jmp    c000891b <src_new+0x39>
c000896a:	89 d8                	mov    eax,ebx
c000896c:	5b                   	pop    ebx
c000896d:	5e                   	pop    esi
c000896e:	5f                   	pop    edi
c000896f:	c3                   	ret    

c0008970 <src_callback_new>:
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	53                   	push   ebx
c0008973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897b:	85 f6                	test   esi,esi
c000897d:	75 0e                	jne    c000898d <src_callback_new+0x1d>
c000897f:	31 db                	xor    ebx,ebx
c0008981:	85 c0                	test   eax,eax
c0008983:	74 47                	je     c00089cc <src_callback_new+0x5c>
c0008985:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c000898b:	eb 3f                	jmp    c00089cc <src_callback_new+0x5c>
c000898d:	85 c0                	test   eax,eax
c000898f:	74 06                	je     c0008997 <src_callback_new+0x27>
c0008991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008997:	51                   	push   ecx
c0008998:	50                   	push   eax
c0008999:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000899d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a1:	e8 3c ff ff ff       	call   c00088e2 <src_new>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	89 c3                	mov    ebx,eax
c00089ab:	85 c0                	test   eax,eax
c00089ad:	74 1d                	je     c00089cc <src_callback_new+0x5c>
c00089af:	83 ec 0c             	sub    esp,0xc
c00089b2:	50                   	push   eax
c00089b3:	e8 e6 fe ff ff       	call   c000889e <src_reset>
c00089b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089c6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	5a                   	pop    edx
c00089cd:	89 d8                	mov    eax,ebx
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <src_get_name>:
c00089d2:	53                   	push   ebx
c00089d3:	83 ec 14             	sub    esp,0x14
c00089d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089da:	53                   	push   ebx
c00089db:	e8 47 1f 00 00       	call   c000a927 <sinc_get_name>
c00089e0:	83 c4 10             	add    esp,0x10
c00089e3:	85 c0                	test   eax,eax
c00089e5:	75 1d                	jne    c0008a04 <src_get_name+0x32>
c00089e7:	83 ec 0c             	sub    esp,0xc
c00089ea:	53                   	push   ebx
c00089eb:	e8 4a 23 00 00       	call   c000ad3a <zoh_get_name>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 0d                	jne    c0008a04 <src_get_name+0x32>
c00089f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089fb:	83 c4 08             	add    esp,0x8
c00089fe:	5b                   	pop    ebx
c00089ff:	e9 36 05 00 00       	jmp    c0008f3a <linear_get_name>
c0008a04:	83 c4 08             	add    esp,0x8
c0008a07:	5b                   	pop    ebx
c0008a08:	c3                   	ret    

c0008a09 <src_get_description>:
c0008a09:	53                   	push   ebx
c0008a0a:	83 ec 14             	sub    esp,0x14
c0008a0d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a11:	53                   	push   ebx
c0008a12:	e8 23 1f 00 00       	call   c000a93a <sinc_get_description>
c0008a17:	83 c4 10             	add    esp,0x10
c0008a1a:	85 c0                	test   eax,eax
c0008a1c:	75 1d                	jne    c0008a3b <src_get_description+0x32>
c0008a1e:	83 ec 0c             	sub    esp,0xc
c0008a21:	53                   	push   ebx
c0008a22:	e8 22 23 00 00       	call   c000ad49 <zoh_get_description>
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	85 c0                	test   eax,eax
c0008a2c:	75 0d                	jne    c0008a3b <src_get_description+0x32>
c0008a2e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a32:	83 c4 08             	add    esp,0x8
c0008a35:	5b                   	pop    ebx
c0008a36:	e9 0e 05 00 00       	jmp    c0008f49 <linear_get_description>
c0008a3b:	83 c4 08             	add    esp,0x8
c0008a3e:	5b                   	pop    ebx
c0008a3f:	c3                   	ret    

c0008a40 <src_get_version>:
c0008a40:	b8 c0 08 02 c0       	mov    eax,0xc00208c0
c0008a45:	c3                   	ret    

c0008a46 <src_is_valid_ratio>:
c0008a46:	50                   	push   eax
c0008a47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a4f:	e8 84 fa ff ff       	call   c00084d8 <is_bad_src_ratio>
c0008a54:	85 c0                	test   eax,eax
c0008a56:	0f 94 c0             	sete   al
c0008a59:	0f b6 c0             	movzx  eax,al
c0008a5c:	83 c4 0c             	add    esp,0xc
c0008a5f:	c3                   	ret    

c0008a60 <src_error>:
c0008a60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a64:	31 c0                	xor    eax,eax
c0008a66:	85 d2                	test   edx,edx
c0008a68:	74 03                	je     c0008a6d <src_error+0xd>
c0008a6a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a6d:	c3                   	ret    

c0008a6e <src_strerror>:
c0008a6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	83 fa 17             	cmp    edx,0x17
c0008a77:	77 07                	ja     c0008a80 <src_strerror+0x12>
c0008a79:	8b 04 95 20 0d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf2e0]
c0008a80:	c3                   	ret    

c0008a81 <src_simple>:
c0008a81:	56                   	push   esi
c0008a82:	53                   	push   ebx
c0008a83:	83 ec 18             	sub    esp,0x18
c0008a86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a8a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a97:	e8 46 fe ff ff       	call   c00088e2 <src_new>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 06                	jne    c0008aa9 <src_simple+0x28>
c0008aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aa7:	eb 25                	jmp    c0008ace <src_simple+0x4d>
c0008aa9:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab0:	89 c3                	mov    ebx,eax
c0008ab2:	50                   	push   eax
c0008ab3:	50                   	push   eax
c0008ab4:	56                   	push   esi
c0008ab5:	53                   	push   ebx
c0008ab6:	e8 e1 fa ff ff       	call   c000859c <src_process>
c0008abb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008abe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac2:	e8 99 fa ff ff       	call   c0008560 <src_delete>
c0008ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	83 c4 14             	add    esp,0x14
c0008ad1:	5b                   	pop    ebx
c0008ad2:	5e                   	pop    esi
c0008ad3:	c3                   	ret    

c0008ad4 <src_short_to_float_array>:
c0008ad4:	83 ec 0c             	sub    esp,0xc
c0008ad7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008adb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008adf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ae3:	85 c0                	test   eax,eax
c0008ae5:	74 0f                	je     c0008af6 <src_short_to_float_array+0x22>
c0008ae7:	48                   	dec    eax
c0008ae8:	d9 05 a4 0d 02 c0    	fld    DWORD PTR ds:0xc0020da4
c0008aee:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af1:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008af4:	eb ed                	jmp    c0008ae3 <src_short_to_float_array+0xf>
c0008af6:	83 c4 0c             	add    esp,0xc
c0008af9:	c3                   	ret    

c0008afa <src_float_to_short_array>:
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	52                   	push   edx
c0008afd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b05:	85 db                	test   ebx,ebx
c0008b07:	74 51                	je     c0008b5a <src_float_to_short_array+0x60>
c0008b09:	4b                   	dec    ebx
c0008b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b0e:	d9 05 a8 0d 02 c0    	fld    DWORD PTR ds:0xc0020da8
c0008b14:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b17:	dc 15 98 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d98
c0008b1d:	df e0                	fnstsw ax
c0008b1f:	9e                   	sahf   
c0008b20:	72 0a                	jb     c0008b2c <src_float_to_short_array+0x32>
c0008b22:	dd d8                	fstp   st(0)
c0008b24:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b2a:	eb d9                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b2c:	d9 05 ac 0d 02 c0    	fld    DWORD PTR ds:0xc0020dac
c0008b32:	d8 d9                	fcomp  st(1)
c0008b34:	df e0                	fnstsw ax
c0008b36:	9e                   	sahf   
c0008b37:	72 0a                	jb     c0008b43 <src_float_to_short_array+0x49>
c0008b39:	dd d8                	fstp   st(0)
c0008b3b:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b41:	eb c2                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b43:	83 ec 10             	sub    esp,0x10
c0008b46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b49:	e8 02 6b 01 00       	call   c001f650 <lrint>
c0008b4e:	83 c4 10             	add    esp,0x10
c0008b51:	c1 f8 10             	sar    eax,0x10
c0008b54:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b58:	eb ab                	jmp    c0008b05 <src_float_to_short_array+0xb>
c0008b5a:	58                   	pop    eax
c0008b5b:	5b                   	pop    ebx
c0008b5c:	5e                   	pop    esi
c0008b5d:	c3                   	ret    

c0008b5e <src_int_to_float_array>:
c0008b5e:	83 ec 0c             	sub    esp,0xc
c0008b61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b65:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b6d:	85 c0                	test   eax,eax
c0008b6f:	74 0f                	je     c0008b80 <src_int_to_float_array+0x22>
c0008b71:	48                   	dec    eax
c0008b72:	d9 05 b0 0d 02 c0    	fld    DWORD PTR ds:0xc0020db0
c0008b78:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b7b:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b7e:	eb ed                	jmp    c0008b6d <src_int_to_float_array+0xf>
c0008b80:	83 c4 0c             	add    esp,0xc
c0008b83:	c3                   	ret    

c0008b84 <src_float_to_int_array>:
c0008b84:	56                   	push   esi
c0008b85:	53                   	push   ebx
c0008b86:	52                   	push   edx
c0008b87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b8f:	85 db                	test   ebx,ebx
c0008b91:	74 4f                	je     c0008be2 <src_float_to_int_array+0x5e>
c0008b93:	4b                   	dec    ebx
c0008b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b98:	d9 05 a8 0d 02 c0    	fld    DWORD PTR ds:0xc0020da8
c0008b9e:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba1:	dc 15 98 0d 02 c0    	fcom   QWORD PTR ds:0xc0020d98
c0008ba7:	df e0                	fnstsw ax
c0008ba9:	9e                   	sahf   
c0008baa:	72 0b                	jb     c0008bb7 <src_float_to_int_array+0x33>
c0008bac:	dd d8                	fstp   st(0)
c0008bae:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bb5:	eb d8                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bb7:	d9 05 ac 0d 02 c0    	fld    DWORD PTR ds:0xc0020dac
c0008bbd:	d8 d9                	fcomp  st(1)
c0008bbf:	df e0                	fnstsw ax
c0008bc1:	9e                   	sahf   
c0008bc2:	72 0b                	jb     c0008bcf <src_float_to_int_array+0x4b>
c0008bc4:	dd d8                	fstp   st(0)
c0008bc6:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bcd:	eb c0                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008bcf:	83 ec 10             	sub    esp,0x10
c0008bd2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bd5:	e8 76 6a 01 00       	call   c001f650 <lrint>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be0:	eb ad                	jmp    c0008b8f <src_float_to_int_array+0xb>
c0008be2:	58                   	pop    eax
c0008be3:	5b                   	pop    ebx
c0008be4:	5e                   	pop    esi
c0008be5:	c3                   	ret    

c0008be6 <is_bad_src_ratio>:
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bf8:	dd 04 24             	fld    QWORD PTR [esp]
c0008bfb:	dd 05 80 0d 02 c0    	fld    QWORD PTR ds:0xc0020d80
c0008c01:	de d9                	fcompp 
c0008c03:	df e0                	fnstsw ax
c0008c05:	f6 c4 45             	test   ah,0x45
c0008c08:	74 10                	je     c0008c1a <is_bad_src_ratio+0x34>
c0008c0a:	dd 04 24             	fld    QWORD PTR [esp]
c0008c0d:	dc 1d 88 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d88
c0008c13:	df e0                	fnstsw ax
c0008c15:	f6 c4 45             	test   ah,0x45
c0008c18:	75 07                	jne    c0008c21 <is_bad_src_ratio+0x3b>
c0008c1a:	b8 01 00 00 00       	mov    eax,0x1
c0008c1f:	eb 05                	jmp    c0008c26 <is_bad_src_ratio+0x40>
c0008c21:	b8 00 00 00 00       	mov    eax,0x0
c0008c26:	83 c4 0c             	add    esp,0xc
c0008c29:	c3                   	ret    

c0008c2a <fmod_one>:
c0008c2a:	83 ec 2c             	sub    esp,0x2c
c0008c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c3d:	83 ec 08             	sub    esp,0x8
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 03 6a 01 00       	call   c001f650 <lrint>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c54:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c5c:	de e1                	fsubrp st(1),st
c0008c5e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c62:	d9 ee                	fldz   
c0008c64:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c68:	df e0                	fnstsw ax
c0008c6a:	f6 c4 45             	test   ah,0x45
c0008c6d:	75 0a                	jne    c0008c79 <fmod_one+0x4f>
c0008c6f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c73:	d9 e8                	fld1   
c0008c75:	de c1                	faddp  st(1),st
c0008c77:	eb 04                	jmp    c0008c7d <fmod_one+0x53>
c0008c79:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7d:	83 c4 2c             	add    esp,0x2c
c0008c80:	c3                   	ret    

c0008c81 <linear_vari_process>:
c0008c81:	55                   	push   ebp
c0008c82:	57                   	push   edi
c0008c83:	56                   	push   esi
c0008c84:	53                   	push   ebx
c0008c85:	83 ec 2c             	sub    esp,0x2c
c0008c88:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c90:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c98:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c9c:	0f 8e 5a 02 00 00    	jle    c0008efc <linear_vari_process+0x27b>
c0008ca2:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008ca5:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cad:	85 db                	test   ebx,ebx
c0008caf:	0f 84 47 02 00 00    	je     c0008efc <linear_vari_process+0x27b>
c0008cb5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cb8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cbc:	74 19                	je     c0008cd7 <linear_vari_process+0x56>
c0008cbe:	31 d2                	xor    edx,edx
c0008cc0:	39 c2                	cmp    edx,eax
c0008cc2:	7d 0c                	jge    c0008cd0 <linear_vari_process+0x4f>
c0008cc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008cc6:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cc9:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ccd:	42                   	inc    edx
c0008cce:	eb f0                	jmp    c0008cc0 <linear_vari_process+0x3f>
c0008cd0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cd7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008cda:	0f af d0             	imul   edx,eax
c0008cdd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ce4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008ceb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cee:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cf5:	dd 07                	fld    QWORD PTR [edi]
c0008cf7:	dd 14 24             	fst    QWORD PTR [esp]
c0008cfa:	50                   	push   eax
c0008cfb:	50                   	push   eax
c0008cfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cff:	e8 e2 fe ff ff       	call   c0008be6 <is_bad_src_ratio>
c0008d04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d08:	5a                   	pop    edx
c0008d09:	59                   	pop    ecx
c0008d0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d0f:	0f 85 df 01 00 00    	jne    c0008ef4 <linear_vari_process+0x273>
c0008d15:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d18:	d9 e8                	fld1   
c0008d1a:	d8 d1                	fcom   st(1)
c0008d1c:	df e0                	fnstsw ax
c0008d1e:	9e                   	sahf   
c0008d1f:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d23:	0f 86 97 00 00 00    	jbe    c0008dc0 <linear_vari_process+0x13f>
c0008d29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d2c:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d2f:	0f 8d 8b 00 00 00    	jge    c0008dc0 <linear_vari_process+0x13f>
c0008d35:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d39:	d8 c1                	fadd   st,st(1)
c0008d3b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d3e:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d41:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d44:	df e0                	fnstsw ax
c0008d46:	9e                   	sahf   
c0008d47:	73 77                	jae    c0008dc0 <linear_vari_process+0x13f>
c0008d49:	85 d2                	test   edx,edx
c0008d4b:	7e 36                	jle    c0008d83 <linear_vari_process+0x102>
c0008d4d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d51:	dd 07                	fld    QWORD PTR [edi]
c0008d53:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d56:	83 ec 10             	sub    esp,0x10
c0008d59:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d5c:	e8 cf 68 01 00       	call   c001f630 <fabs>
c0008d61:	83 c4 10             	add    esp,0x10
c0008d64:	dc 1d f8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020df8
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d71:	76 10                	jbe    c0008d83 <linear_vari_process+0x102>
c0008d73:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d76:	dc 27                	fsub   QWORD PTR [edi]
c0008d78:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d7b:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d7e:	dc 07                	fadd   QWORD PTR [edi]
c0008d80:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d83:	31 c0                	xor    eax,eax
c0008d85:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d88:	7e 1f                	jle    c0008da9 <linear_vari_process+0x128>
c0008d8a:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d8f:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d93:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d97:	d8 e1                	fsub   st,st(1)
c0008d99:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d9c:	40                   	inc    eax
c0008d9d:	d8 ca                	fmul   st,st(2)
c0008d9f:	de c1                	faddp  st(1),st
c0008da1:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008da4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008da7:	eb dc                	jmp    c0008d85 <linear_vari_process+0x104>
c0008da9:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dad:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db0:	de c1                	faddp  st(1),st
c0008db2:	e9 61 ff ff ff       	jmp    c0008d18 <linear_vari_process+0x97>
c0008db7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dbb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dbe:	de c1                	faddp  st(1),st
c0008dc0:	83 ec 10             	sub    esp,0x10
c0008dc3:	dd 14 24             	fst    QWORD PTR [esp]
c0008dc6:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dca:	e8 5b fe ff ff       	call   c0008c2a <fmod_one>
c0008dcf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008dd6:	d8 e1                	fsub   st,st(1)
c0008dd8:	d9 c9                	fxch   st(1)
c0008dda:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dde:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de1:	e8 6a 68 01 00       	call   c001f650 <lrint>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	0f af e8             	imul   ebp,eax
c0008dec:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008def:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008df6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008df9:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008dfc:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008dff:	0f 8d 95 00 00 00    	jge    c0008e9a <linear_vari_process+0x219>
c0008e05:	d9 c0                	fld    st(0)
c0008e07:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e0a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e0e:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e12:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e16:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e1a:	de d9                	fcompp 
c0008e1c:	df e0                	fnstsw ax
c0008e1e:	9e                   	sahf   
c0008e1f:	76 79                	jbe    c0008e9a <linear_vari_process+0x219>
c0008e21:	85 ed                	test   ebp,ebp
c0008e23:	7e 36                	jle    c0008e5b <linear_vari_process+0x1da>
c0008e25:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e29:	dd 07                	fld    QWORD PTR [edi]
c0008e2b:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e2e:	83 ec 10             	sub    esp,0x10
c0008e31:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e34:	e8 f7 67 01 00       	call   c001f630 <fabs>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	dc 1d f8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020df8
c0008e42:	df e0                	fnstsw ax
c0008e44:	9e                   	sahf   
c0008e45:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e49:	76 10                	jbe    c0008e5b <linear_vari_process+0x1da>
c0008e4b:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e4e:	dc 27                	fsub   QWORD PTR [edi]
c0008e50:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e53:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e56:	dc 07                	fadd   QWORD PTR [edi]
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	31 c0                	xor    eax,eax
c0008e5d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e60:	39 c2                	cmp    edx,eax
c0008e62:	0f 8e 4f ff ff ff    	jle    c0008db7 <linear_vari_process+0x136>
c0008e68:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e6a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e6d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e71:	89 e9                	mov    ecx,ebp
c0008e73:	29 d1                	sub    ecx,edx
c0008e75:	01 c5                	add    ebp,eax
c0008e77:	89 ca                	mov    edx,ecx
c0008e79:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e7d:	01 c2                	add    edx,eax
c0008e7f:	40                   	inc    eax
c0008e80:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e83:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e86:	d8 e1                	fsub   st,st(1)
c0008e88:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e8b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e8e:	d8 ca                	fmul   st,st(2)
c0008e90:	de c1                	faddp  st(1),st
c0008e92:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e95:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e98:	eb c3                	jmp    c0008e5d <linear_vari_process+0x1dc>
c0008e9a:	39 d1                	cmp    ecx,edx
c0008e9c:	7d 13                	jge    c0008eb1 <linear_vari_process+0x230>
c0008e9e:	89 d0                	mov    eax,edx
c0008ea0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008ea3:	29 c8                	sub    eax,ecx
c0008ea5:	99                   	cdq    
c0008ea6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ead:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb1:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008eb4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eb7:	85 c0                	test   eax,eax
c0008eb9:	7f 1b                	jg     c0008ed6 <linear_vari_process+0x255>
c0008ebb:	dd 04 24             	fld    QWORD PTR [esp]
c0008ebe:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ec3:	99                   	cdq    
c0008ec4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ec7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008eca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ecd:	99                   	cdq    
c0008ece:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008ed4:	eb 26                	jmp    c0008efc <linear_vari_process+0x27b>
c0008ed6:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ed9:	31 d2                	xor    edx,edx
c0008edb:	29 c8                	sub    eax,ecx
c0008edd:	c1 e0 02             	shl    eax,0x2
c0008ee0:	39 d1                	cmp    ecx,edx
c0008ee2:	7e d7                	jle    c0008ebb <linear_vari_process+0x23a>
c0008ee4:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008ee6:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008eea:	83 c0 04             	add    eax,0x4
c0008eed:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef1:	42                   	inc    edx
c0008ef2:	eb ec                	jmp    c0008ee0 <linear_vari_process+0x25f>
c0008ef4:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008efc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f00:	83 c4 2c             	add    esp,0x2c
c0008f03:	5b                   	pop    ebx
c0008f04:	5e                   	pop    esi
c0008f05:	5f                   	pop    edi
c0008f06:	5d                   	pop    ebp
c0008f07:	c3                   	ret    

c0008f08 <linear_reset>:
c0008f08:	83 ec 0c             	sub    esp,0xc
c0008f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f12:	85 c0                	test   eax,eax
c0008f14:	74 20                	je     c0008f36 <linear_reset+0x2e>
c0008f16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f23:	51                   	push   ecx
c0008f24:	c1 e2 02             	shl    edx,0x2
c0008f27:	83 c0 1c             	add    eax,0x1c
c0008f2a:	52                   	push   edx
c0008f2b:	6a 00                	push   0x0
c0008f2d:	50                   	push   eax
c0008f2e:	e8 87 77 ff ff       	call   c00006ba <memset>
c0008f33:	83 c4 10             	add    esp,0x10
c0008f36:	83 c4 0c             	add    esp,0xc
c0008f39:	c3                   	ret    

c0008f3a <linear_get_name>:
c0008f3a:	31 c0                	xor    eax,eax
c0008f3c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f41:	75 05                	jne    c0008f48 <linear_get_name+0xe>
c0008f43:	b8 b4 0d 02 c0       	mov    eax,0xc0020db4
c0008f48:	c3                   	ret    

c0008f49 <linear_get_description>:
c0008f49:	31 c0                	xor    eax,eax
c0008f4b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f50:	75 05                	jne    c0008f57 <linear_get_description+0xe>
c0008f52:	b8 c8 0d 02 c0       	mov    eax,0xc0020dc8
c0008f57:	c3                   	ret    

c0008f58 <linear_set_converter>:
c0008f58:	53                   	push   ebx
c0008f59:	b8 0a 00 00 00       	mov    eax,0xa
c0008f5e:	83 ec 08             	sub    esp,0x8
c0008f61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f65:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f6a:	75 6e                	jne    c0008fda <linear_set_converter+0x82>
c0008f6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f6f:	85 c0                	test   eax,eax
c0008f71:	74 13                	je     c0008f86 <linear_set_converter+0x2e>
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	50                   	push   eax
c0008f77:	e8 7f 30 00 00       	call   c000bffb <free>
c0008f7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	50                   	push   eax
c0008f87:	50                   	push   eax
c0008f88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f92:	50                   	push   eax
c0008f93:	6a 01                	push   0x1
c0008f95:	e8 81 30 00 00       	call   c000c01b <calloc>
c0008f9a:	89 c2                	mov    edx,eax
c0008f9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f9f:	83 c4 10             	add    esp,0x10
c0008fa2:	b8 01 00 00 00       	mov    eax,0x1
c0008fa7:	85 d2                	test   edx,edx
c0008fa9:	74 2f                	je     c0008fda <linear_set_converter+0x82>
c0008fab:	83 ec 0c             	sub    esp,0xc
c0008fae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fb4:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fba:	c7 43 24 81 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c81
c0008fc1:	c7 43 20 81 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c81
c0008fc8:	c7 43 28 08 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f08
c0008fcf:	53                   	push   ebx
c0008fd0:	e8 33 ff ff ff       	call   c0008f08 <linear_reset>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	31 c0                	xor    eax,eax
c0008fda:	83 c4 08             	add    esp,0x8
c0008fdd:	5b                   	pop    ebx
c0008fde:	c3                   	ret    

c0008fdf <is_bad_src_ratio>:
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe6:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fe9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008fed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff1:	dd 04 24             	fld    QWORD PTR [esp]
c0008ff4:	dd 05 80 0d 02 c0    	fld    QWORD PTR ds:0xc0020d80
c0008ffa:	de d9                	fcompp 
c0008ffc:	df e0                	fnstsw ax
c0008ffe:	f6 c4 45             	test   ah,0x45
c0009001:	74 10                	je     c0009013 <is_bad_src_ratio+0x34>
c0009003:	dd 04 24             	fld    QWORD PTR [esp]
c0009006:	dc 1d 88 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d88
c000900c:	df e0                	fnstsw ax
c000900e:	f6 c4 45             	test   ah,0x45
c0009011:	75 07                	jne    c000901a <is_bad_src_ratio+0x3b>
c0009013:	b8 01 00 00 00       	mov    eax,0x1
c0009018:	eb 05                	jmp    c000901f <is_bad_src_ratio+0x40>
c000901a:	b8 00 00 00 00       	mov    eax,0x0
c000901f:	83 c4 0c             	add    esp,0xc
c0009022:	c3                   	ret    

c0009023 <int_to_fp>:
c0009023:	c1 e0 0c             	shl    eax,0xc
c0009026:	c3                   	ret    

c0009027 <fp_to_int>:
c0009027:	c1 f8 0c             	sar    eax,0xc
c000902a:	c3                   	ret    

c000902b <fp_fraction_part>:
c000902b:	25 ff 0f 00 00       	and    eax,0xfff
c0009030:	c3                   	ret    

c0009031 <fp_to_double>:
c0009031:	83 ec 0c             	sub    esp,0xc
c0009034:	e8 f2 ff ff ff       	call   c000902b <fp_fraction_part>
c0009039:	d9 05 88 0f 02 c0    	fld    DWORD PTR ds:0xc0020f88
c000903f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009043:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0009047:	83 c4 0c             	add    esp,0xc
c000904a:	c3                   	ret    

c000904b <calc_output_single>:
c000904b:	55                   	push   ebp
c000904c:	57                   	push   edi
c000904d:	89 c7                	mov    edi,eax
c000904f:	56                   	push   esi
c0009050:	53                   	push   ebx
c0009051:	89 d3                	mov    ebx,edx
c0009053:	83 ec 24             	sub    esp,0x24
c0009056:	89 de                	mov    esi,ebx
c0009058:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000905b:	e8 c3 ff ff ff       	call   c0009023 <int_to_fp>
c0009060:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009063:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009067:	29 c8                	sub    eax,ecx
c0009069:	99                   	cdq    
c000906a:	f7 fb                	idiv   ebx
c000906c:	0f af f0             	imul   esi,eax
c000906f:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009072:	01 ce                	add    esi,ecx
c0009074:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009078:	29 c2                	sub    edx,eax
c000907a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009089:	8d 14 97             	lea    edx,[edi+edx*4]
c000908c:	89 f0                	mov    eax,esi
c000908e:	e8 9e ff ff ff       	call   c0009031 <fp_to_double>
c0009093:	89 f0                	mov    eax,esi
c0009095:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009099:	e8 89 ff ff ff       	call   c0009027 <fp_to_int>
c000909e:	83 c2 04             	add    edx,0x4
c00090a1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090a5:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090a9:	d8 e1                	fsub   st,st(1)
c00090ab:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090af:	de c9                	fmulp  st(1),st
c00090b1:	de c1                	faddp  st(1),st
c00090b3:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090b9:	29 de                	sub    esi,ebx
c00090bb:	dc 04 24             	fadd   QWORD PTR [esp]
c00090be:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c1:	79 c9                	jns    c000908c <calc_output_single+0x41>
c00090c3:	89 d8                	mov    eax,ebx
c00090c5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090c9:	29 c8                	sub    eax,ecx
c00090cb:	89 c1                	mov    ecx,eax
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	29 c8                	sub    eax,ecx
c00090d3:	99                   	cdq    
c00090d4:	f7 fb                	idiv   ebx
c00090d6:	89 da                	mov    edx,ebx
c00090d8:	0f af d0             	imul   edx,eax
c00090db:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090df:	01 d1                	add    ecx,edx
c00090e1:	d9 ee                	fldz   
c00090e3:	8d 14 87             	lea    edx,[edi+eax*4]
c00090e6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090ea:	89 c8                	mov    eax,ecx
c00090ec:	e8 40 ff ff ff       	call   c0009031 <fp_to_double>
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090f7:	e8 2b ff ff ff       	call   c0009027 <fp_to_int>
c00090fc:	29 d9                	sub    ecx,ebx
c00090fe:	83 ea 04             	sub    edx,0x4
c0009101:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009105:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009109:	d8 e1                	fsub   st,st(1)
c000910b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000910f:	de c9                	fmulp  st(1),st
c0009111:	de c1                	faddp  st(1),st
c0009113:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009119:	85 c9                	test   ecx,ecx
c000911b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000911f:	de c1                	faddp  st(1),st
c0009121:	7f c3                	jg     c00090e6 <calc_output_single+0x9b>
c0009123:	dd 04 24             	fld    QWORD PTR [esp]
c0009126:	de c1                	faddp  st(1),st
c0009128:	83 c4 24             	add    esp,0x24
c000912b:	5b                   	pop    ebx
c000912c:	5e                   	pop    esi
c000912d:	5f                   	pop    edi
c000912e:	5d                   	pop    ebp
c000912f:	c3                   	ret    

c0009130 <calc_output_stereo>:
c0009130:	55                   	push   ebp
c0009131:	57                   	push   edi
c0009132:	89 c7                	mov    edi,eax
c0009134:	56                   	push   esi
c0009135:	53                   	push   ebx
c0009136:	89 d3                	mov    ebx,edx
c0009138:	83 ec 44             	sub    esp,0x44
c000913b:	89 de                	mov    esi,ebx
c000913d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009140:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009144:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009148:	e8 d6 fe ff ff       	call   c0009023 <int_to_fp>
c000914d:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009150:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009154:	29 c8                	sub    eax,ecx
c0009156:	99                   	cdq    
c0009157:	f7 fb                	idiv   ebx
c0009159:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000915c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000916b:	0f af f0             	imul   esi,eax
c000916e:	0f af c2             	imul   eax,edx
c0009171:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009175:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009179:	d9 ee                	fldz   
c000917b:	29 c2                	sub    edx,eax
c000917d:	01 ce                	add    esi,ecx
c000917f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009182:	8d 14 97             	lea    edx,[edi+edx*4]
c0009185:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000918d:	89 f0                	mov    eax,esi
c000918f:	e8 9d fe ff ff       	call   c0009031 <fp_to_double>
c0009194:	89 f0                	mov    eax,esi
c0009196:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000919a:	e8 88 fe ff ff       	call   c0009027 <fp_to_int>
c000919f:	83 c2 08             	add    edx,0x8
c00091a2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091a6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091aa:	d8 e1                	fsub   st,st(1)
c00091ac:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b0:	de c9                	fmulp  st(1),st
c00091b2:	de c1                	faddp  st(1),st
c00091b4:	d9 c0                	fld    st(0)
c00091b6:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091bc:	dc 04 24             	fadd   QWORD PTR [esp]
c00091bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c2:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091c8:	29 de                	sub    esi,ebx
c00091ca:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091ce:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d2:	79 b9                	jns    c000918d <calc_output_stereo+0x5d>
c00091d4:	89 d8                	mov    eax,ebx
c00091d6:	29 c8                	sub    eax,ecx
c00091d8:	89 c1                	mov    ecx,eax
c00091da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091de:	29 c8                	sub    eax,ecx
c00091e0:	99                   	cdq    
c00091e1:	f7 fb                	idiv   ebx
c00091e3:	89 da                	mov    edx,ebx
c00091e5:	0f af d0             	imul   edx,eax
c00091e8:	40                   	inc    eax
c00091e9:	01 d1                	add    ecx,edx
c00091eb:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091f4:	d9 ee                	fldz   
c00091f6:	d9 ee                	fldz   
c00091f8:	8d 14 87             	lea    edx,[edi+eax*4]
c00091fb:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00091ff:	89 c8                	mov    eax,ecx
c0009201:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009205:	e8 27 fe ff ff       	call   c0009031 <fp_to_double>
c000920a:	89 c8                	mov    eax,ecx
c000920c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009210:	e8 12 fe ff ff       	call   c0009027 <fp_to_int>
c0009215:	29 d9                	sub    ecx,ebx
c0009217:	83 ea 08             	sub    edx,0x8
c000921a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000921e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009222:	d8 e1                	fsub   st,st(1)
c0009224:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009228:	de c9                	fmulp  st(1),st
c000922a:	de c1                	faddp  st(1),st
c000922c:	d9 c0                	fld    st(0)
c000922e:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009234:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009238:	de c1                	faddp  st(1),st
c000923a:	d9 c9                	fxch   st(1)
c000923c:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009242:	85 c9                	test   ecx,ecx
c0009244:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009248:	de c1                	faddp  st(1),st
c000924a:	7f af                	jg     c00091fb <calc_output_stereo+0xcb>
c000924c:	dd 04 24             	fld    QWORD PTR [esp]
c000924f:	de c2                	faddp  st(2),st
c0009251:	d9 c9                	fxch   st(1)
c0009253:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009257:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000925b:	d9 18                	fstp   DWORD PTR [eax]
c000925d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009261:	de c1                	faddp  st(1),st
c0009263:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009267:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c000926a:	83 c4 44             	add    esp,0x44
c000926d:	5b                   	pop    ebx
c000926e:	5e                   	pop    esi
c000926f:	5f                   	pop    edi
c0009270:	5d                   	pop    ebp
c0009271:	c3                   	ret    

c0009272 <calc_output_quad>:
c0009272:	55                   	push   ebp
c0009273:	57                   	push   edi
c0009274:	56                   	push   esi
c0009275:	89 c6                	mov    esi,eax
c0009277:	53                   	push   ebx
c0009278:	89 d3                	mov    ebx,edx
c000927a:	83 ec 5c             	sub    esp,0x5c
c000927d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009280:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009284:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009288:	dd 1c 24             	fstp   QWORD PTR [esp]
c000928b:	e8 93 fd ff ff       	call   c0009023 <int_to_fp>
c0009290:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009293:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009297:	29 c8                	sub    eax,ecx
c0009299:	99                   	cdq    
c000929a:	f7 fb                	idiv   ebx
c000929c:	89 da                	mov    edx,ebx
c000929e:	0f af d0             	imul   edx,eax
c00092a1:	01 ca                	add    edx,ecx
c00092a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092a7:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b1:	0f af c2             	imul   eax,edx
c00092b4:	d9 ee                	fldz   
c00092b6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092be:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c2:	29 c2                	sub    edx,eax
c00092c4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092c8:	8d 14 96             	lea    edx,[esi+edx*4]
c00092cb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092cf:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d7:	e8 55 fd ff ff       	call   c0009031 <fp_to_double>
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092e4:	e8 3e fd ff ff       	call   c0009027 <fp_to_int>
c00092e9:	83 c2 10             	add    edx,0x10
c00092ec:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f0:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092f4:	d8 e1                	fsub   st,st(1)
c00092f6:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00092fa:	de c9                	fmulp  st(1),st
c00092fc:	de c1                	faddp  st(1),st
c00092fe:	d9 c0                	fld    st(0)
c0009300:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009306:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000930a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000930e:	d9 c0                	fld    st(0)
c0009310:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009316:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000931a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000931e:	d9 c0                	fld    st(0)
c0009320:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009326:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000932a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000932e:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009334:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009338:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933c:	de c1                	faddp  st(1),st
c000933e:	79 8f                	jns    c00092cf <calc_output_quad+0x5d>
c0009340:	89 d8                	mov    eax,ebx
c0009342:	29 c8                	sub    eax,ecx
c0009344:	89 c1                	mov    ecx,eax
c0009346:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000934a:	29 c8                	sub    eax,ecx
c000934c:	99                   	cdq    
c000934d:	f7 fb                	idiv   ebx
c000934f:	89 da                	mov    edx,ebx
c0009351:	0f af d0             	imul   edx,eax
c0009354:	40                   	inc    eax
c0009355:	01 d1                	add    ecx,edx
c0009357:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000935c:	d9 ee                	fldz   
c000935e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009362:	d9 ee                	fldz   
c0009364:	d9 ee                	fldz   
c0009366:	d9 ee                	fldz   
c0009368:	8d 14 86             	lea    edx,[esi+eax*4]
c000936b:	eb 0a                	jmp    c0009377 <calc_output_quad+0x105>
c000936d:	d9 cc                	fxch   st(4)
c000936f:	d9 ca                	fxch   st(2)
c0009371:	d9 c9                	fxch   st(1)
c0009373:	d9 cb                	fxch   st(3)
c0009375:	d9 c9                	fxch   st(1)
c0009377:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000937b:	d9 c9                	fxch   st(1)
c000937d:	89 c8                	mov    eax,ecx
c000937f:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009383:	d9 c9                	fxch   st(1)
c0009385:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009389:	d9 c9                	fxch   st(1)
c000938b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000938f:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009393:	e8 99 fc ff ff       	call   c0009031 <fp_to_double>
c0009398:	89 c8                	mov    eax,ecx
c000939a:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000939e:	e8 84 fc ff ff       	call   c0009027 <fp_to_int>
c00093a3:	29 d9                	sub    ecx,ebx
c00093a5:	83 ea 10             	sub    edx,0x10
c00093a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b0:	d8 e1                	fsub   st,st(1)
c00093b2:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093b6:	de c9                	fmulp  st(1),st
c00093b8:	de c1                	faddp  st(1),st
c00093ba:	d9 c0                	fld    st(0)
c00093bc:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093c6:	de c1                	faddp  st(1),st
c00093c8:	d9 c1                	fld    st(1)
c00093ca:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093d4:	de c1                	faddp  st(1),st
c00093d6:	d9 c2                	fld    st(2)
c00093d8:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093de:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e2:	de c1                	faddp  st(1),st
c00093e4:	d9 cb                	fxch   st(3)
c00093e6:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093ec:	85 c9                	test   ecx,ecx
c00093ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f2:	de c1                	faddp  st(1),st
c00093f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093f8:	0f 8f 6f ff ff ff    	jg     c000936d <calc_output_quad+0xfb>
c00093fe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009402:	de c4                	faddp  st(4),st
c0009404:	d9 cb                	fxch   st(3)
c0009406:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009409:	d9 1f                	fstp   DWORD PTR [edi]
c000940b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000940f:	de c2                	faddp  st(2),st
c0009411:	d9 c9                	fxch   st(1)
c0009413:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009416:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009419:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000941d:	de c3                	faddp  st(3),st
c000941f:	d9 ca                	fxch   st(2)
c0009421:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009424:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009427:	de c1                	faddp  st(1),st
c0009429:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942c:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000942f:	83 c4 5c             	add    esp,0x5c
c0009432:	5b                   	pop    ebx
c0009433:	5e                   	pop    esi
c0009434:	5f                   	pop    edi
c0009435:	5d                   	pop    ebp
c0009436:	c3                   	ret    

c0009437 <calc_output_hex>:
c0009437:	55                   	push   ebp
c0009438:	57                   	push   edi
c0009439:	89 c7                	mov    edi,eax
c000943b:	56                   	push   esi
c000943c:	53                   	push   ebx
c000943d:	89 d3                	mov    ebx,edx
c000943f:	83 ec 7c             	sub    esp,0x7c
c0009442:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009445:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000944c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c0009453:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009456:	e8 c8 fb ff ff       	call   c0009023 <int_to_fp>
c000945b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000945e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009462:	29 c8                	sub    eax,ecx
c0009464:	99                   	cdq    
c0009465:	f7 fb                	idiv   ebx
c0009467:	89 da                	mov    edx,ebx
c0009469:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009471:	0f af d0             	imul   edx,eax
c0009474:	01 ca                	add    edx,ecx
c0009476:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000947e:	d9 ee                	fldz   
c0009480:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009484:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009487:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000948b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000948e:	0f af c2             	imul   eax,edx
c0009491:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009495:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009499:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000949d:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a1:	29 c2                	sub    edx,eax
c00094a3:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094a7:	8d 14 97             	lea    edx,[edi+edx*4]
c00094aa:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094ae:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094b6:	e8 76 fb ff ff       	call   c0009031 <fp_to_double>
c00094bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bf:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094c3:	e8 5f fb ff ff       	call   c0009027 <fp_to_int>
c00094c8:	83 c2 18             	add    edx,0x18
c00094cb:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094cf:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094d3:	d8 e1                	fsub   st,st(1)
c00094d5:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094d9:	de c9                	fmulp  st(1),st
c00094db:	de c1                	faddp  st(1),st
c00094dd:	d9 c0                	fld    st(0)
c00094df:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094e5:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094e9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094ed:	d9 c0                	fld    st(0)
c00094ef:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094f5:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00094f9:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00094fd:	d9 c0                	fld    st(0)
c00094ff:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009505:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009509:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000950d:	d9 c0                	fld    st(0)
c000950f:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009515:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009519:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000951d:	d9 c0                	fld    st(0)
c000951f:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009525:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009529:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000952d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009533:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009537:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c000953b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000953f:	0f 89 6d ff ff ff    	jns    c00094b2 <calc_output_hex+0x7b>
c0009545:	89 d8                	mov    eax,ebx
c0009547:	29 c8                	sub    eax,ecx
c0009549:	89 c1                	mov    ecx,eax
c000954b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000954f:	29 c8                	sub    eax,ecx
c0009551:	99                   	cdq    
c0009552:	f7 fb                	idiv   ebx
c0009554:	89 da                	mov    edx,ebx
c0009556:	0f af d0             	imul   edx,eax
c0009559:	40                   	inc    eax
c000955a:	01 d1                	add    ecx,edx
c000955c:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009561:	d9 ee                	fldz   
c0009563:	d9 ee                	fldz   
c0009565:	d9 ee                	fldz   
c0009567:	d9 ca                	fxch   st(2)
c0009569:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c000956d:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009571:	d9 ee                	fldz   
c0009573:	8d 14 87             	lea    edx,[edi+eax*4]
c0009576:	d9 ee                	fldz   
c0009578:	d9 ca                	fxch   st(2)
c000957a:	eb 0a                	jmp    c0009586 <calc_output_hex+0x14f>
c000957c:	d9 c9                	fxch   st(1)
c000957e:	d9 cc                	fxch   st(4)
c0009580:	d9 cb                	fxch   st(3)
c0009582:	d9 ca                	fxch   st(2)
c0009584:	d9 c9                	fxch   st(1)
c0009586:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c000958a:	89 c8                	mov    eax,ecx
c000958c:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009590:	d9 ca                	fxch   st(2)
c0009592:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009596:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000959a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000959e:	e8 8e fa ff ff       	call   c0009031 <fp_to_double>
c00095a3:	89 c8                	mov    eax,ecx
c00095a5:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095a9:	e8 79 fa ff ff       	call   c0009027 <fp_to_int>
c00095ae:	29 d9                	sub    ecx,ebx
c00095b0:	83 ea 18             	sub    edx,0x18
c00095b3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095b7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095bb:	d8 e1                	fsub   st,st(1)
c00095bd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c1:	de c9                	fmulp  st(1),st
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	d9 c0                	fld    st(0)
c00095c7:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095cd:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d1:	de c1                	faddp  st(1),st
c00095d3:	d9 c1                	fld    st(1)
c00095d5:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095db:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095df:	de c1                	faddp  st(1),st
c00095e1:	d9 c2                	fld    st(2)
c00095e3:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095e9:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095ed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f1:	d9 c2                	fld    st(2)
c00095f3:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c00095f9:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00095fd:	de c1                	faddp  st(1),st
c00095ff:	d9 c3                	fld    st(3)
c0009601:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009607:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c000960b:	de c1                	faddp  st(1),st
c000960d:	d9 cc                	fxch   st(4)
c000960f:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009615:	85 c9                	test   ecx,ecx
c0009617:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c000961b:	de c1                	faddp  st(1),st
c000961d:	0f 8f 59 ff ff ff    	jg     c000957c <calc_output_hex+0x145>
c0009623:	d9 cb                	fxch   st(3)
c0009625:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009629:	dc 0c 24             	fmul   QWORD PTR [esp]
c000962c:	d9 1e                	fstp   DWORD PTR [esi]
c000962e:	d9 c9                	fxch   st(1)
c0009630:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009634:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009637:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009642:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009645:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009648:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000964c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964f:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009652:	d9 c9                	fxch   st(1)
c0009654:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009658:	dc 0c 24             	fmul   QWORD PTR [esp]
c000965b:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c000965e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009662:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009665:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c0009668:	83 c4 7c             	add    esp,0x7c
c000966b:	5b                   	pop    ebx
c000966c:	5e                   	pop    esi
c000966d:	5f                   	pop    edi
c000966e:	5d                   	pop    ebp
c000966f:	c3                   	ret    

c0009670 <sinc_reset>:
c0009670:	56                   	push   esi
c0009671:	53                   	push   ebx
c0009672:	51                   	push   ecx
c0009673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009677:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000967a:	85 db                	test   ebx,ebx
c000967c:	74 51                	je     c00096cf <sinc_reset+0x5f>
c000967e:	d9 ee                	fldz   
c0009680:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009687:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000968e:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009691:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009698:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000969e:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a1:	52                   	push   edx
c00096a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096a5:	c1 e0 02             	shl    eax,0x2
c00096a8:	50                   	push   eax
c00096a9:	6a 00                	push   0x0
c00096ab:	56                   	push   esi
c00096ac:	e8 09 70 ff ff       	call   c00006ba <memset>
c00096b1:	83 c4 0c             	add    esp,0xc
c00096b4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096b7:	c1 e0 02             	shl    eax,0x2
c00096ba:	50                   	push   eax
c00096bb:	68 aa 00 00 00       	push   0xaa
c00096c0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00096c6:	50                   	push   eax
c00096c7:	e8 ee 6f ff ff       	call   c00006ba <memset>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	58                   	pop    eax
c00096d0:	5b                   	pop    ebx
c00096d1:	5e                   	pop    esi
c00096d2:	c3                   	ret    

c00096d3 <calc_output_multi>:
c00096d3:	55                   	push   ebp
c00096d4:	57                   	push   edi
c00096d5:	8d 78 44             	lea    edi,[eax+0x44]
c00096d8:	56                   	push   esi
c00096d9:	89 c6                	mov    esi,eax
c00096db:	53                   	push   ebx
c00096dc:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e2:	83 ec 4c             	sub    esp,0x4c
c00096e5:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096ed:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096f4:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096f8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00096fc:	e8 22 f9 ff ff       	call   c0009023 <int_to_fp>
c0009701:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009709:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000970d:	99                   	cdq    
c000970e:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009716:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009719:	0f af d0             	imul   edx,eax
c000971c:	0f af c3             	imul   eax,ebx
c000971f:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009723:	29 c5                	sub    ebp,eax
c0009725:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000972c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009730:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009734:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009738:	52                   	push   edx
c0009739:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973d:	6a 00                	push   0x0
c000973f:	57                   	push   edi
c0009740:	e8 75 6f ff ff       	call   c00006ba <memset>
c0009745:	83 c4 10             	add    esp,0x10
c0009748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000974c:	e8 e0 f8 ff ff       	call   c0009031 <fp_to_double>
c0009751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009755:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009759:	e8 c9 f8 ff ff       	call   c0009027 <fp_to_int>
c000975e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009761:	89 d9                	mov    ecx,ebx
c0009763:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009766:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000976a:	d8 e1                	fsub   st,st(1)
c000976c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009770:	de c9                	fmulp  st(1),st
c0009772:	de c1                	faddp  st(1),st
c0009774:	89 c8                	mov    eax,ecx
c0009776:	bd 08 00 00 00       	mov    ebp,0x8
c000977b:	99                   	cdq    
c000977c:	f7 fd                	idiv   ebp
c000977e:	4a                   	dec    edx
c000977f:	83 fa 06             	cmp    edx,0x6
c0009782:	77 07                	ja     c000978b <calc_output_multi+0xb8>
c0009784:	ff 24 95 00 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf200]
c000978b:	49                   	dec    ecx
c000978c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009790:	d9 c0                	fld    st(0)
c0009792:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009799:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000979c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a0:	dc 00                	fadd   QWORD PTR [eax]
c00097a2:	dd 18                	fstp   QWORD PTR [eax]
c00097a4:	49                   	dec    ecx
c00097a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097a9:	d9 c0                	fld    st(0)
c00097ab:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097b9:	dc 00                	fadd   QWORD PTR [eax]
c00097bb:	dd 18                	fstp   QWORD PTR [eax]
c00097bd:	49                   	dec    ecx
c00097be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c2:	d9 c0                	fld    st(0)
c00097c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097cb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ce:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d2:	dc 00                	fadd   QWORD PTR [eax]
c00097d4:	dd 18                	fstp   QWORD PTR [eax]
c00097d6:	49                   	dec    ecx
c00097d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097db:	d9 c0                	fld    st(0)
c00097dd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097e4:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097e7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097eb:	dc 00                	fadd   QWORD PTR [eax]
c00097ed:	dd 18                	fstp   QWORD PTR [eax]
c00097ef:	49                   	dec    ecx
c00097f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097f4:	d9 c0                	fld    st(0)
c00097f6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097fd:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009800:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009804:	dc 00                	fadd   QWORD PTR [eax]
c0009806:	dd 18                	fstp   QWORD PTR [eax]
c0009808:	49                   	dec    ecx
c0009809:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000980d:	d9 c0                	fld    st(0)
c000980f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009816:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009819:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000981d:	dc 00                	fadd   QWORD PTR [eax]
c000981f:	dd 18                	fstp   QWORD PTR [eax]
c0009821:	49                   	dec    ecx
c0009822:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009826:	d9 c0                	fld    st(0)
c0009828:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000982f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009832:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009836:	dc 00                	fadd   QWORD PTR [eax]
c0009838:	dd 18                	fstp   QWORD PTR [eax]
c000983a:	49                   	dec    ecx
c000983b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000983f:	d9 c0                	fld    st(0)
c0009841:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009848:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000984b:	85 c9                	test   ecx,ecx
c000984d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009851:	dc 00                	fadd   QWORD PTR [eax]
c0009853:	dd 18                	fstp   QWORD PTR [eax]
c0009855:	0f 8f 19 ff ff ff    	jg     c0009774 <calc_output_multi+0xa1>
c000985b:	dd d8                	fstp   st(0)
c000985d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009861:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0009865:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009869:	0f 89 d9 fe ff ff    	jns    c0009748 <calc_output_multi+0x75>
c000986f:	89 d1                	mov    ecx,edx
c0009871:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009875:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009879:	29 c8                	sub    eax,ecx
c000987b:	99                   	cdq    
c000987c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009884:	0f af d0             	imul   edx,eax
c0009887:	40                   	inc    eax
c0009888:	01 d1                	add    ecx,edx
c000988a:	0f af c3             	imul   eax,ebx
c000988d:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009890:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009894:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009898:	50                   	push   eax
c0009899:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000989d:	6a 00                	push   0x0
c000989f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098a3:	e8 12 6e ff ff       	call   c00006ba <memset>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098af:	e8 7d f7 ff ff       	call   c0009031 <fp_to_double>
c00098b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098bc:	e8 66 f7 ff ff       	call   c0009027 <fp_to_int>
c00098c1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098c4:	89 d9                	mov    ecx,ebx
c00098c6:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098c9:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098cd:	d8 e1                	fsub   st,st(1)
c00098cf:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098d3:	de c9                	fmulp  st(1),st
c00098d5:	de c1                	faddp  st(1),st
c00098d7:	89 c8                	mov    eax,ecx
c00098d9:	bd 08 00 00 00       	mov    ebp,0x8
c00098de:	99                   	cdq    
c00098df:	f7 fd                	idiv   ebp
c00098e1:	4a                   	dec    edx
c00098e2:	83 fa 06             	cmp    edx,0x6
c00098e5:	77 07                	ja     c00098ee <calc_output_multi+0x21b>
c00098e7:	ff 24 95 1c 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf1e4]
c00098ee:	49                   	dec    ecx
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fe:	d9 c0                	fld    st(0)
c0009900:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009904:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009907:	dc 00                	fadd   QWORD PTR [eax]
c0009909:	dd 18                	fstp   QWORD PTR [eax]
c000990b:	49                   	dec    ecx
c000990c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009914:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000991b:	d9 c0                	fld    st(0)
c000991d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009921:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009924:	dc 00                	fadd   QWORD PTR [eax]
c0009926:	dd 18                	fstp   QWORD PTR [eax]
c0009928:	49                   	dec    ecx
c0009929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000992d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009931:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009938:	d9 c0                	fld    st(0)
c000993a:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000993e:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009941:	dc 00                	fadd   QWORD PTR [eax]
c0009943:	dd 18                	fstp   QWORD PTR [eax]
c0009945:	49                   	dec    ecx
c0009946:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000994a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994e:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009955:	d9 c0                	fld    st(0)
c0009957:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000995b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000995e:	dc 00                	fadd   QWORD PTR [eax]
c0009960:	dd 18                	fstp   QWORD PTR [eax]
c0009962:	49                   	dec    ecx
c0009963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009967:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009972:	d9 c0                	fld    st(0)
c0009974:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009978:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000997b:	dc 00                	fadd   QWORD PTR [eax]
c000997d:	dd 18                	fstp   QWORD PTR [eax]
c000997f:	49                   	dec    ecx
c0009980:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009988:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000998f:	d9 c0                	fld    st(0)
c0009991:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009995:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009998:	dc 00                	fadd   QWORD PTR [eax]
c000999a:	dd 18                	fstp   QWORD PTR [eax]
c000999c:	49                   	dec    ecx
c000999d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099ac:	d9 c0                	fld    st(0)
c00099ae:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b2:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099b5:	dc 00                	fadd   QWORD PTR [eax]
c00099b7:	dd 18                	fstp   QWORD PTR [eax]
c00099b9:	49                   	dec    ecx
c00099ba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	85 c9                	test   ecx,ecx
c00099c4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099cb:	d9 c0                	fld    st(0)
c00099cd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099d4:	dc 00                	fadd   QWORD PTR [eax]
c00099d6:	dd 18                	fstp   QWORD PTR [eax]
c00099d8:	0f 8f f9 fe ff ff    	jg     c00098d7 <calc_output_multi+0x204>
c00099de:	dd d8                	fstp   st(0)
c00099e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099e4:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099e8:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099ec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f1:	0f 8f b4 fe ff ff    	jg     c00098ab <calc_output_multi+0x1d8>
c00099f7:	b9 08 00 00 00       	mov    ecx,0x8
c00099fc:	89 d8                	mov    eax,ebx
c00099fe:	99                   	cdq    
c00099ff:	f7 f9                	idiv   ecx
c0009a01:	4a                   	dec    edx
c0009a02:	83 fa 06             	cmp    edx,0x6
c0009a05:	77 07                	ja     c0009a0e <calc_output_multi+0x33b>
c0009a07:	ff 24 95 38 0e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf1c8]
c0009a0e:	4b                   	dec    ebx
c0009a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a13:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a16:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a19:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a1d:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a21:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a24:	4b                   	dec    ebx
c0009a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a29:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a2c:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a2f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a33:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a37:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a3a:	4b                   	dec    ebx
c0009a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a3f:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a42:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a45:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a49:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a4d:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a50:	4b                   	dec    ebx
c0009a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a55:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a58:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a5b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a5f:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a63:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a66:	4b                   	dec    ebx
c0009a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6b:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a6e:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a71:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a75:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a79:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a7c:	4b                   	dec    ebx
c0009a7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a81:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a84:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a87:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a8b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a8f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a92:	4b                   	dec    ebx
c0009a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a97:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a9a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a9d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa1:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aa5:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aa8:	4b                   	dec    ebx
c0009aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aad:	85 db                	test   ebx,ebx
c0009aaf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ab5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ab9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009abd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac0:	0f 8f 36 ff ff ff    	jg     c00099fc <calc_output_multi+0x329>
c0009ac6:	83 c4 4c             	add    esp,0x4c
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	5d                   	pop    ebp
c0009acd:	c3                   	ret    

c0009ace <double_to_fp>:
c0009ace:	d9 05 8c 0f 02 c0    	fld    DWORD PTR ds:0xc0020f8c
c0009ad4:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009ad8:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009adc:	e9 6f 5b 01 00       	jmp    c001f650 <lrint>

c0009ae1 <fmod_one>:
c0009ae1:	83 ec 2c             	sub    esp,0x2c
c0009ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009aec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009af4:	83 ec 08             	sub    esp,0x8
c0009af7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009aff:	e8 4c 5b 01 00       	call   c001f650 <lrint>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b0b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b0f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b13:	de e1                	fsubrp st(1),st
c0009b15:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b19:	d9 ee                	fldz   
c0009b1b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b1f:	df e0                	fnstsw ax
c0009b21:	f6 c4 45             	test   ah,0x45
c0009b24:	75 0a                	jne    c0009b30 <fmod_one+0x4f>
c0009b26:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b2a:	d9 e8                	fld1   
c0009b2c:	de c1                	faddp  st(1),st
c0009b2e:	eb 04                	jmp    c0009b34 <fmod_one+0x53>
c0009b30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b34:	83 c4 2c             	add    esp,0x2c
c0009b37:	c3                   	ret    

c0009b38 <prepare_data>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b47:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b4b:	0f 89 57 01 00 00    	jns    c0009ca8 <prepare_data+0x170>
c0009b51:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b54:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b57:	85 d2                	test   edx,edx
c0009b59:	75 0d                	jne    c0009b68 <prepare_data+0x30>
c0009b5b:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b5e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b61:	29 d0                	sub    eax,edx
c0009b63:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b66:	eb 44                	jmp    c0009bac <prepare_data+0x74>
c0009b68:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b6b:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b6e:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b71:	39 c1                	cmp    ecx,eax
c0009b73:	7d 04                	jge    c0009b79 <prepare_data+0x41>
c0009b75:	29 d0                	sub    eax,edx
c0009b77:	eb 2d                	jmp    c0009ba6 <prepare_data+0x6e>
c0009b79:	29 d7                	sub    edi,edx
c0009b7b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b81:	01 f7                	add    edi,esi
c0009b83:	29 f2                	sub    edx,esi
c0009b85:	51                   	push   ecx
c0009b86:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b8d:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b90:	51                   	push   ecx
c0009b91:	52                   	push   edx
c0009b92:	50                   	push   eax
c0009b93:	e8 b4 6a ff ff       	call   c000064c <memmove>
c0009b98:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b9b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b9e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba1:	29 f0                	sub    eax,esi
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	29 f0                	sub    eax,esi
c0009ba8:	79 02                	jns    c0009bac <prepare_data+0x74>
c0009baa:	31 c0                	xor    eax,eax
c0009bac:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009baf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb2:	29 ef                	sub    edi,ebp
c0009bb4:	39 c7                	cmp    edi,eax
c0009bb6:	7e 02                	jle    c0009bba <prepare_data+0x82>
c0009bb8:	89 c7                	mov    edi,eax
c0009bba:	89 f8                	mov    eax,edi
c0009bbc:	99                   	cdq    
c0009bbd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc0:	29 d7                	sub    edi,edx
c0009bc2:	b8 15 00 00 00       	mov    eax,0x15
c0009bc7:	0f 88 dd 00 00 00    	js     c0009caa <prepare_data+0x172>
c0009bcd:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd0:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bd3:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bd6:	0f 8f ce 00 00 00    	jg     c0009caa <prepare_data+0x172>
c0009bdc:	50                   	push   eax
c0009bdd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009be4:	50                   	push   eax
c0009be5:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009beb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf1:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bf4:	50                   	push   eax
c0009bf5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009bfc:	50                   	push   eax
c0009bfd:	e8 82 6a ff ff       	call   c0000684 <memcpy>
c0009c02:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c05:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c08:	83 c4 10             	add    esp,0x10
c0009c0b:	01 fd                	add    ebp,edi
c0009c0d:	01 f9                	add    ecx,edi
c0009c0f:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c12:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c15:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c1c:	0f 85 86 00 00 00    	jne    c0009ca8 <prepare_data+0x170>
c0009c22:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c25:	89 e8                	mov    eax,ebp
c0009c27:	29 c8                	sub    eax,ecx
c0009c29:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c2c:	39 f8                	cmp    eax,edi
c0009c2e:	7d 78                	jge    c0009ca8 <prepare_data+0x170>
c0009c30:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c34:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c38:	74 6e                	je     c0009ca8 <prepare_data+0x170>
c0009c3a:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c41:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c44:	29 ef                	sub    edi,ebp
c0009c46:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c4a:	7c 29                	jl     c0009c75 <prepare_data+0x13d>
c0009c4c:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c4f:	29 f1                	sub    ecx,esi
c0009c51:	55                   	push   ebp
c0009c52:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c59:	50                   	push   eax
c0009c5a:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c5d:	50                   	push   eax
c0009c5e:	52                   	push   edx
c0009c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c63:	e8 e4 69 ff ff       	call   c000064c <memmove>
c0009c68:	83 c4 10             	add    esp,0x10
c0009c6b:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c6e:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c75:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c78:	83 c6 05             	add    esi,0x5
c0009c7b:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c7e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c81:	78 07                	js     c0009c8a <prepare_data+0x152>
c0009c83:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c86:	39 cf                	cmp    edi,ecx
c0009c88:	7e 04                	jle    c0009c8e <prepare_data+0x156>
c0009c8a:	89 ce                	mov    esi,ecx
c0009c8c:	29 c6                	sub    esi,eax
c0009c8e:	51                   	push   ecx
c0009c8f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c96:	51                   	push   ecx
c0009c97:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c9a:	6a 00                	push   0x0
c0009c9c:	50                   	push   eax
c0009c9d:	e8 18 6a ff ff       	call   c00006ba <memset>
c0009ca2:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	31 c0                	xor    eax,eax
c0009caa:	83 c4 1c             	add    esp,0x1c
c0009cad:	5b                   	pop    ebx
c0009cae:	5e                   	pop    esi
c0009caf:	5f                   	pop    edi
c0009cb0:	5d                   	pop    ebp
c0009cb1:	c3                   	ret    

c0009cb2 <sinc_multichan_vari_process>:
c0009cb2:	55                   	push   ebp
c0009cb3:	b8 05 00 00 00       	mov    eax,0x5
c0009cb8:	57                   	push   edi
c0009cb9:	56                   	push   esi
c0009cba:	53                   	push   ebx
c0009cbb:	83 ec 3c             	sub    esp,0x3c
c0009cbe:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cc6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cc9:	85 db                	test   ebx,ebx
c0009ccb:	0f 84 5b 02 00 00    	je     c0009f2c <sinc_multichan_vari_process+0x27a>
c0009cd1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cd4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cd7:	0f af d0             	imul   edx,eax
c0009cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009cdd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009ce8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ceb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf2:	dd 06                	fld    QWORD PTR [esi]
c0009cf4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cf8:	55                   	push   ebp
c0009cf9:	55                   	push   ebp
c0009cfa:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfd:	e8 dd f2 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009d02:	89 c2                	mov    edx,eax
c0009d04:	58                   	pop    eax
c0009d05:	59                   	pop    ecx
c0009d06:	b8 16 00 00 00       	mov    eax,0x16
c0009d0b:	85 d2                	test   edx,edx
c0009d0d:	0f 85 19 02 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009d13:	d9 05 90 0f 02 c0    	fld    DWORD PTR ds:0xc0020f90
c0009d19:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d1c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d1f:	dd 06                	fld    QWORD PTR [esi]
c0009d21:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d24:	d8 d1                	fcom   st(1)
c0009d26:	df e0                	fnstsw ax
c0009d28:	9e                   	sahf   
c0009d29:	76 0f                	jbe    c0009d3a <sinc_multichan_vari_process+0x88>
c0009d2b:	dd d8                	fstp   st(0)
c0009d2d:	d9 e8                	fld1   
c0009d2f:	d8 d9                	fcomp  st(1)
c0009d31:	df e0                	fnstsw ax
c0009d33:	9e                   	sahf   
c0009d34:	77 0f                	ja     c0009d45 <sinc_multichan_vari_process+0x93>
c0009d36:	dd d8                	fstp   st(0)
c0009d38:	eb 11                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d3a:	dd d9                	fstp   st(1)
c0009d3c:	d9 e8                	fld1   
c0009d3e:	d8 d9                	fcomp  st(1)
c0009d40:	df e0                	fnstsw ax
c0009d42:	9e                   	sahf   
c0009d43:	76 04                	jbe    c0009d49 <sinc_multichan_vari_process+0x97>
c0009d45:	de f9                	fdivp  st(1),st
c0009d47:	eb 02                	jmp    c0009d4b <sinc_multichan_vari_process+0x99>
c0009d49:	dd d8                	fstp   st(0)
c0009d4b:	83 ec 10             	sub    esp,0x10
c0009d4e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d54:	e8 f7 58 01 00       	call   c001f650 <lrint>
c0009d59:	40                   	inc    eax
c0009d5a:	0f af c5             	imul   eax,ebp
c0009d5d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d64:	dd 14 24             	fst    QWORD PTR [esp]
c0009d67:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d6b:	e8 71 fd ff ff       	call   c0009ae1 <fmod_one>
c0009d70:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d7a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d7e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d82:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d86:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d89:	e8 c2 58 01 00       	call   c001f650 <lrint>
c0009d8e:	d9 e8                	fld1   
c0009d90:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d94:	0f af e8             	imul   ebp,eax
c0009d97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d9b:	01 e8                	add    eax,ebp
c0009d9d:	99                   	cdq    
c0009d9e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009da4:	dc 05 f8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020df8
c0009daa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009dae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db1:	83 c4 10             	add    esp,0x10
c0009db4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009db7:	7d 4b                	jge    c0009e04 <sinc_multichan_vari_process+0x152>
c0009db9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dbc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dbf:	01 c8                	add    eax,ecx
c0009dc1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dc4:	99                   	cdq    
c0009dc5:	f7 f9                	idiv   ecx
c0009dc7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dcb:	7d 09                	jge    c0009dd6 <sinc_multichan_vari_process+0x124>
c0009dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd0:	85 c0                	test   eax,eax
c0009dd2:	79 57                	jns    c0009e2b <sinc_multichan_vari_process+0x179>
c0009dd4:	eb 70                	jmp    c0009e46 <sinc_multichan_vari_process+0x194>
c0009dd6:	51                   	push   ecx
c0009dd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009ddb:	57                   	push   edi
c0009ddc:	53                   	push   ebx
c0009ddd:	e8 56 fd ff ff       	call   c0009b38 <prepare_data>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009de8:	85 c0                	test   eax,eax
c0009dea:	0f 85 3c 01 00 00    	jne    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009df0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009df3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009df6:	01 c8                	add    eax,ecx
c0009df8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dfb:	99                   	cdq    
c0009dfc:	f7 f9                	idiv   ecx
c0009dfe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e02:	7c c9                	jl     c0009dcd <sinc_multichan_vari_process+0x11b>
c0009e04:	dd 04 24             	fld    QWORD PTR [esp]
c0009e07:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e0a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e0e:	dd 1e                	fstp   QWORD PTR [esi]
c0009e10:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e13:	99                   	cdq    
c0009e14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e17:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e1a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e1d:	99                   	cdq    
c0009e1e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e21:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e24:	31 c0                	xor    eax,eax
c0009e26:	e9 01 01 00 00       	jmp    c0009f2c <sinc_multichan_vari_process+0x27a>
c0009e2b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e2e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e35:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e39:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e3d:	d9 c9                	fxch   st(1)
c0009e3f:	de d9                	fcompp 
c0009e41:	df e0                	fnstsw ax
c0009e43:	9e                   	sahf   
c0009e44:	73 be                	jae    c0009e04 <sinc_multichan_vari_process+0x152>
c0009e46:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e4a:	7e 2f                	jle    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e4c:	dd 06                	fld    QWORD PTR [esi]
c0009e4e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e51:	83 ec 10             	sub    esp,0x10
c0009e54:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e57:	e8 d4 57 01 00       	call   c001f630 <fabs>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	dc 1d 80 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f80
c0009e65:	df e0                	fnstsw ax
c0009e67:	9e                   	sahf   
c0009e68:	76 11                	jbe    c0009e7b <sinc_multichan_vari_process+0x1c9>
c0009e6a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e6d:	dc 26                	fsub   QWORD PTR [esi]
c0009e6f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e72:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e75:	dc 06                	fadd   QWORD PTR [esi]
c0009e77:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e7b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e7e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e82:	d9 e8                	fld1   
c0009e84:	d8 d9                	fcomp  st(1)
c0009e86:	df e0                	fnstsw ax
c0009e88:	9e                   	sahf   
c0009e89:	77 04                	ja     c0009e8f <sinc_multichan_vari_process+0x1dd>
c0009e8b:	dd d8                	fstp   st(0)
c0009e8d:	d9 e8                	fld1   
c0009e8f:	de c9                	fmulp  st(1),st
c0009e91:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e95:	50                   	push   eax
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 2a fc ff ff       	call   c0009ace <double_to_fp>
c0009ea4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009ea8:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eac:	89 c5                	mov    ebp,eax
c0009eae:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb1:	e8 18 fc ff ff       	call   c0009ace <double_to_fp>
c0009eb6:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009eb9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ebc:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ebf:	89 c1                	mov    ecx,eax
c0009ec1:	52                   	push   edx
c0009ec2:	89 d8                	mov    eax,ebx
c0009ec4:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ec8:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ecb:	52                   	push   edx
c0009ecc:	52                   	push   edx
c0009ecd:	89 ea                	mov    edx,ebp
c0009ecf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ed5:	e8 f9 f7 ff ff       	call   c00096d3 <calc_output_multi>
c0009eda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009edd:	d9 e8                	fld1   
c0009edf:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009ee3:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009ee6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009ef4:	e8 e8 fb ff ff       	call   c0009ae1 <fmod_one>
c0009ef9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009efc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009eff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f03:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f07:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f0b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f0f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f12:	e8 39 57 01 00       	call   c001f650 <lrint>
c0009f17:	0f af e8             	imul   ebp,eax
c0009f1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f1e:	01 e8                	add    eax,ebp
c0009f20:	99                   	cdq    
c0009f21:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f24:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f27:	e9 82 fe ff ff       	jmp    c0009dae <sinc_multichan_vari_process+0xfc>
c0009f2c:	83 c4 3c             	add    esp,0x3c
c0009f2f:	5b                   	pop    ebx
c0009f30:	5e                   	pop    esi
c0009f31:	5f                   	pop    edi
c0009f32:	5d                   	pop    ebp
c0009f33:	c3                   	ret    

c0009f34 <sinc_hex_vari_process>:
c0009f34:	55                   	push   ebp
c0009f35:	b8 05 00 00 00       	mov    eax,0x5
c0009f3a:	57                   	push   edi
c0009f3b:	56                   	push   esi
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 3c             	sub    esp,0x3c
c0009f40:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f44:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f48:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f4b:	85 db                	test   ebx,ebx
c0009f4d:	0f 84 56 02 00 00    	je     c000a1a9 <sinc_hex_vari_process+0x275>
c0009f53:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f56:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f59:	0f af d0             	imul   edx,eax
c0009f5c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f5f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f6a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f6d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f74:	dd 06                	fld    QWORD PTR [esi]
c0009f76:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f7a:	55                   	push   ebp
c0009f7b:	55                   	push   ebp
c0009f7c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7f:	e8 5b f0 ff ff       	call   c0008fdf <is_bad_src_ratio>
c0009f84:	89 c2                	mov    edx,eax
c0009f86:	58                   	pop    eax
c0009f87:	59                   	pop    ecx
c0009f88:	b8 16 00 00 00       	mov    eax,0x16
c0009f8d:	85 d2                	test   edx,edx
c0009f8f:	0f 85 14 02 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c0009f95:	d9 05 90 0f 02 c0    	fld    DWORD PTR ds:0xc0020f90
c0009f9b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f9e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa1:	dd 06                	fld    QWORD PTR [esi]
c0009fa3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fa6:	d8 d1                	fcom   st(1)
c0009fa8:	df e0                	fnstsw ax
c0009faa:	9e                   	sahf   
c0009fab:	76 0f                	jbe    c0009fbc <sinc_hex_vari_process+0x88>
c0009fad:	dd d8                	fstp   st(0)
c0009faf:	d9 e8                	fld1   
c0009fb1:	d8 d9                	fcomp  st(1)
c0009fb3:	df e0                	fnstsw ax
c0009fb5:	9e                   	sahf   
c0009fb6:	77 0f                	ja     c0009fc7 <sinc_hex_vari_process+0x93>
c0009fb8:	dd d8                	fstp   st(0)
c0009fba:	eb 11                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fbc:	dd d9                	fstp   st(1)
c0009fbe:	d9 e8                	fld1   
c0009fc0:	d8 d9                	fcomp  st(1)
c0009fc2:	df e0                	fnstsw ax
c0009fc4:	9e                   	sahf   
c0009fc5:	76 04                	jbe    c0009fcb <sinc_hex_vari_process+0x97>
c0009fc7:	de f9                	fdivp  st(1),st
c0009fc9:	eb 02                	jmp    c0009fcd <sinc_hex_vari_process+0x99>
c0009fcb:	dd d8                	fstp   st(0)
c0009fcd:	83 ec 10             	sub    esp,0x10
c0009fd0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fd3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fd6:	e8 75 56 01 00       	call   c001f650 <lrint>
c0009fdb:	40                   	inc    eax
c0009fdc:	0f af c5             	imul   eax,ebp
c0009fdf:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fe6:	dd 14 24             	fst    QWORD PTR [esp]
c0009fe9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009fed:	e8 ef fa ff ff       	call   c0009ae1 <fmod_one>
c0009ff2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ff5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ff8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ffc:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a000:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a004:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a00b:	e8 40 56 01 00       	call   c001f650 <lrint>
c000a010:	d9 e8                	fld1   
c000a012:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a016:	0f af e8             	imul   ebp,eax
c000a019:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a01d:	01 e8                	add    eax,ebp
c000a01f:	99                   	cdq    
c000a020:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a023:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a026:	dc 05 f8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020df8
c000a02c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a030:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a033:	83 c4 10             	add    esp,0x10
c000a036:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a039:	7d 4b                	jge    c000a086 <sinc_hex_vari_process+0x152>
c000a03b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a03e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a041:	01 c8                	add    eax,ecx
c000a043:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a046:	99                   	cdq    
c000a047:	f7 f9                	idiv   ecx
c000a049:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a04d:	7d 09                	jge    c000a058 <sinc_hex_vari_process+0x124>
c000a04f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a052:	85 c0                	test   eax,eax
c000a054:	79 57                	jns    c000a0ad <sinc_hex_vari_process+0x179>
c000a056:	eb 70                	jmp    c000a0c8 <sinc_hex_vari_process+0x194>
c000a058:	51                   	push   ecx
c000a059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a05d:	57                   	push   edi
c000a05e:	53                   	push   ebx
c000a05f:	e8 d4 fa ff ff       	call   c0009b38 <prepare_data>
c000a064:	83 c4 10             	add    esp,0x10
c000a067:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a06a:	85 c0                	test   eax,eax
c000a06c:	0f 85 37 01 00 00    	jne    c000a1a9 <sinc_hex_vari_process+0x275>
c000a072:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a075:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a078:	01 c8                	add    eax,ecx
c000a07a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a07d:	99                   	cdq    
c000a07e:	f7 f9                	idiv   ecx
c000a080:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a084:	7c c9                	jl     c000a04f <sinc_hex_vari_process+0x11b>
c000a086:	dd 04 24             	fld    QWORD PTR [esp]
c000a089:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a08c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a090:	dd 1e                	fstp   QWORD PTR [esi]
c000a092:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a095:	99                   	cdq    
c000a096:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a099:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a09c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a09f:	99                   	cdq    
c000a0a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	e9 fc 00 00 00       	jmp    c000a1a9 <sinc_hex_vari_process+0x275>
c000a0ad:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0b7:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0bb:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0bf:	d9 c9                	fxch   st(1)
c000a0c1:	de d9                	fcompp 
c000a0c3:	df e0                	fnstsw ax
c000a0c5:	9e                   	sahf   
c000a0c6:	73 be                	jae    c000a086 <sinc_hex_vari_process+0x152>
c000a0c8:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0cc:	7e 2f                	jle    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ce:	dd 06                	fld    QWORD PTR [esi]
c000a0d0:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0d3:	83 ec 10             	sub    esp,0x10
c000a0d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0d9:	e8 52 55 01 00       	call   c001f630 <fabs>
c000a0de:	83 c4 10             	add    esp,0x10
c000a0e1:	dc 1d 80 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f80
c000a0e7:	df e0                	fnstsw ax
c000a0e9:	9e                   	sahf   
c000a0ea:	76 11                	jbe    c000a0fd <sinc_hex_vari_process+0x1c9>
c000a0ec:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0ef:	dc 26                	fsub   QWORD PTR [esi]
c000a0f1:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0f4:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0f7:	dc 06                	fadd   QWORD PTR [esi]
c000a0f9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a0fd:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a100:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a104:	d9 e8                	fld1   
c000a106:	d8 d9                	fcomp  st(1)
c000a108:	df e0                	fnstsw ax
c000a10a:	9e                   	sahf   
c000a10b:	77 04                	ja     c000a111 <sinc_hex_vari_process+0x1dd>
c000a10d:	dd d8                	fstp   st(0)
c000a10f:	d9 e8                	fld1   
c000a111:	de c9                	fmulp  st(1),st
c000a113:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a117:	50                   	push   eax
c000a118:	50                   	push   eax
c000a119:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a11d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a121:	e8 a8 f9 ff ff       	call   c0009ace <double_to_fp>
c000a126:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a12a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a12e:	89 c5                	mov    ebp,eax
c000a130:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a133:	e8 96 f9 ff ff       	call   c0009ace <double_to_fp>
c000a138:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a13b:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a13e:	83 c4 0c             	add    esp,0xc
c000a141:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a144:	89 c1                	mov    ecx,eax
c000a146:	52                   	push   edx
c000a147:	89 d8                	mov    eax,ebx
c000a149:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a14d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a150:	52                   	push   edx
c000a151:	52                   	push   edx
c000a152:	89 ea                	mov    edx,ebp
c000a154:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a157:	e8 db f2 ff ff       	call   c0009437 <calc_output_hex>
c000a15c:	d9 e8                	fld1   
c000a15e:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a162:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a166:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a16a:	dd 14 24             	fst    QWORD PTR [esp]
c000a16d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a171:	e8 6b f9 ff ff       	call   c0009ae1 <fmod_one>
c000a176:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a179:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a17c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a180:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a184:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a188:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a18c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a18f:	e8 bc 54 01 00       	call   c001f650 <lrint>
c000a194:	0f af e8             	imul   ebp,eax
c000a197:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a19b:	01 e8                	add    eax,ebp
c000a19d:	99                   	cdq    
c000a19e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1a4:	e9 87 fe ff ff       	jmp    c000a030 <sinc_hex_vari_process+0xfc>
c000a1a9:	83 c4 3c             	add    esp,0x3c
c000a1ac:	5b                   	pop    ebx
c000a1ad:	5e                   	pop    esi
c000a1ae:	5f                   	pop    edi
c000a1af:	5d                   	pop    ebp
c000a1b0:	c3                   	ret    

c000a1b1 <sinc_quad_vari_process>:
c000a1b1:	55                   	push   ebp
c000a1b2:	b8 05 00 00 00       	mov    eax,0x5
c000a1b7:	57                   	push   edi
c000a1b8:	56                   	push   esi
c000a1b9:	53                   	push   ebx
c000a1ba:	83 ec 3c             	sub    esp,0x3c
c000a1bd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1c5:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1c8:	85 db                	test   ebx,ebx
c000a1ca:	0f 84 56 02 00 00    	je     c000a426 <sinc_quad_vari_process+0x275>
c000a1d0:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1d3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1d6:	0f af d0             	imul   edx,eax
c000a1d9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1dc:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1e7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f1:	dd 06                	fld    QWORD PTR [esi]
c000a1f3:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1f7:	55                   	push   ebp
c000a1f8:	55                   	push   ebp
c000a1f9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fc:	e8 de ed ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a201:	89 c2                	mov    edx,eax
c000a203:	58                   	pop    eax
c000a204:	59                   	pop    ecx
c000a205:	b8 16 00 00 00       	mov    eax,0x16
c000a20a:	85 d2                	test   edx,edx
c000a20c:	0f 85 14 02 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a212:	d9 05 90 0f 02 c0    	fld    DWORD PTR ds:0xc0020f90
c000a218:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a21b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a21e:	dd 06                	fld    QWORD PTR [esi]
c000a220:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a223:	d8 d1                	fcom   st(1)
c000a225:	df e0                	fnstsw ax
c000a227:	9e                   	sahf   
c000a228:	76 0f                	jbe    c000a239 <sinc_quad_vari_process+0x88>
c000a22a:	dd d8                	fstp   st(0)
c000a22c:	d9 e8                	fld1   
c000a22e:	d8 d9                	fcomp  st(1)
c000a230:	df e0                	fnstsw ax
c000a232:	9e                   	sahf   
c000a233:	77 0f                	ja     c000a244 <sinc_quad_vari_process+0x93>
c000a235:	dd d8                	fstp   st(0)
c000a237:	eb 11                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a239:	dd d9                	fstp   st(1)
c000a23b:	d9 e8                	fld1   
c000a23d:	d8 d9                	fcomp  st(1)
c000a23f:	df e0                	fnstsw ax
c000a241:	9e                   	sahf   
c000a242:	76 04                	jbe    c000a248 <sinc_quad_vari_process+0x97>
c000a244:	de f9                	fdivp  st(1),st
c000a246:	eb 02                	jmp    c000a24a <sinc_quad_vari_process+0x99>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	83 ec 10             	sub    esp,0x10
c000a24d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a250:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a253:	e8 f8 53 01 00       	call   c001f650 <lrint>
c000a258:	40                   	inc    eax
c000a259:	0f af c5             	imul   eax,ebp
c000a25c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a25f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a263:	dd 14 24             	fst    QWORD PTR [esp]
c000a266:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a26a:	e8 72 f8 ff ff       	call   c0009ae1 <fmod_one>
c000a26f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a272:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a275:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a279:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a27d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a281:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a285:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a288:	e8 c3 53 01 00       	call   c001f650 <lrint>
c000a28d:	d9 e8                	fld1   
c000a28f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a293:	0f af e8             	imul   ebp,eax
c000a296:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a29a:	01 e8                	add    eax,ebp
c000a29c:	99                   	cdq    
c000a29d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2a3:	dc 05 f8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020df8
c000a2a9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b0:	83 c4 10             	add    esp,0x10
c000a2b3:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2b6:	7d 4b                	jge    c000a303 <sinc_quad_vari_process+0x152>
c000a2b8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2bb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2be:	01 c8                	add    eax,ecx
c000a2c0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2c3:	99                   	cdq    
c000a2c4:	f7 f9                	idiv   ecx
c000a2c6:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2ca:	7d 09                	jge    c000a2d5 <sinc_quad_vari_process+0x124>
c000a2cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2cf:	85 c0                	test   eax,eax
c000a2d1:	79 57                	jns    c000a32a <sinc_quad_vari_process+0x179>
c000a2d3:	eb 70                	jmp    c000a345 <sinc_quad_vari_process+0x194>
c000a2d5:	51                   	push   ecx
c000a2d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2da:	57                   	push   edi
c000a2db:	53                   	push   ebx
c000a2dc:	e8 57 f8 ff ff       	call   c0009b38 <prepare_data>
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2e7:	85 c0                	test   eax,eax
c000a2e9:	0f 85 37 01 00 00    	jne    c000a426 <sinc_quad_vari_process+0x275>
c000a2ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2f5:	01 c8                	add    eax,ecx
c000a2f7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2fa:	99                   	cdq    
c000a2fb:	f7 f9                	idiv   ecx
c000a2fd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a301:	7c c9                	jl     c000a2cc <sinc_quad_vari_process+0x11b>
c000a303:	dd 04 24             	fld    QWORD PTR [esp]
c000a306:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a309:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a30d:	dd 1e                	fstp   QWORD PTR [esi]
c000a30f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a312:	99                   	cdq    
c000a313:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a316:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a319:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a31c:	99                   	cdq    
c000a31d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a320:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a323:	31 c0                	xor    eax,eax
c000a325:	e9 fc 00 00 00       	jmp    c000a426 <sinc_quad_vari_process+0x275>
c000a32a:	dd 04 24             	fld    QWORD PTR [esp]
c000a32d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a330:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a334:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a338:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a33c:	d9 c9                	fxch   st(1)
c000a33e:	de d9                	fcompp 
c000a340:	df e0                	fnstsw ax
c000a342:	9e                   	sahf   
c000a343:	73 be                	jae    c000a303 <sinc_quad_vari_process+0x152>
c000a345:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a349:	7e 2f                	jle    c000a37a <sinc_quad_vari_process+0x1c9>
c000a34b:	dd 06                	fld    QWORD PTR [esi]
c000a34d:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a350:	83 ec 10             	sub    esp,0x10
c000a353:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a356:	e8 d5 52 01 00       	call   c001f630 <fabs>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	dc 1d 80 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f80
c000a364:	df e0                	fnstsw ax
c000a366:	9e                   	sahf   
c000a367:	76 11                	jbe    c000a37a <sinc_quad_vari_process+0x1c9>
c000a369:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a36c:	dc 26                	fsub   QWORD PTR [esi]
c000a36e:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a371:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a374:	dc 06                	fadd   QWORD PTR [esi]
c000a376:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a37a:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a37d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a381:	d9 e8                	fld1   
c000a383:	d8 d9                	fcomp  st(1)
c000a385:	df e0                	fnstsw ax
c000a387:	9e                   	sahf   
c000a388:	77 04                	ja     c000a38e <sinc_quad_vari_process+0x1dd>
c000a38a:	dd d8                	fstp   st(0)
c000a38c:	d9 e8                	fld1   
c000a38e:	de c9                	fmulp  st(1),st
c000a390:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a394:	50                   	push   eax
c000a395:	50                   	push   eax
c000a396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a39e:	e8 2b f7 ff ff       	call   c0009ace <double_to_fp>
c000a3a3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3a7:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3ab:	89 c5                	mov    ebp,eax
c000a3ad:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b0:	e8 19 f7 ff ff       	call   c0009ace <double_to_fp>
c000a3b5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3b8:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3bb:	83 c4 0c             	add    esp,0xc
c000a3be:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c1:	89 c1                	mov    ecx,eax
c000a3c3:	52                   	push   edx
c000a3c4:	89 d8                	mov    eax,ebx
c000a3c6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3ca:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3cd:	52                   	push   edx
c000a3ce:	52                   	push   edx
c000a3cf:	89 ea                	mov    edx,ebp
c000a3d1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3d4:	e8 99 ee ff ff       	call   c0009272 <calc_output_quad>
c000a3d9:	d9 e8                	fld1   
c000a3db:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3df:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3e3:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3ee:	e8 ee f6 ff ff       	call   c0009ae1 <fmod_one>
c000a3f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a3f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a401:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a405:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a409:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a40c:	e8 3f 52 01 00       	call   c001f650 <lrint>
c000a411:	0f af e8             	imul   ebp,eax
c000a414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a418:	01 e8                	add    eax,ebp
c000a41a:	99                   	cdq    
c000a41b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a41e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a421:	e9 87 fe ff ff       	jmp    c000a2ad <sinc_quad_vari_process+0xfc>
c000a426:	83 c4 3c             	add    esp,0x3c
c000a429:	5b                   	pop    ebx
c000a42a:	5e                   	pop    esi
c000a42b:	5f                   	pop    edi
c000a42c:	5d                   	pop    ebp
c000a42d:	c3                   	ret    

c000a42e <sinc_stereo_vari_process>:
c000a42e:	55                   	push   ebp
c000a42f:	b8 05 00 00 00       	mov    eax,0x5
c000a434:	57                   	push   edi
c000a435:	56                   	push   esi
c000a436:	53                   	push   ebx
c000a437:	83 ec 3c             	sub    esp,0x3c
c000a43a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a43e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a442:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a445:	85 db                	test   ebx,ebx
c000a447:	0f 84 56 02 00 00    	je     c000a6a3 <sinc_stereo_vari_process+0x275>
c000a44d:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a450:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a453:	0f af d0             	imul   edx,eax
c000a456:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a459:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a45d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a464:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a467:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a46e:	dd 06                	fld    QWORD PTR [esi]
c000a470:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a474:	55                   	push   ebp
c000a475:	55                   	push   ebp
c000a476:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a479:	e8 61 eb ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a47e:	89 c2                	mov    edx,eax
c000a480:	58                   	pop    eax
c000a481:	59                   	pop    ecx
c000a482:	b8 16 00 00 00       	mov    eax,0x16
c000a487:	85 d2                	test   edx,edx
c000a489:	0f 85 14 02 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a48f:	d9 05 90 0f 02 c0    	fld    DWORD PTR ds:0xc0020f90
c000a495:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a498:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a49b:	dd 06                	fld    QWORD PTR [esi]
c000a49d:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a0:	d8 d1                	fcom   st(1)
c000a4a2:	df e0                	fnstsw ax
c000a4a4:	9e                   	sahf   
c000a4a5:	76 0f                	jbe    c000a4b6 <sinc_stereo_vari_process+0x88>
c000a4a7:	dd d8                	fstp   st(0)
c000a4a9:	d9 e8                	fld1   
c000a4ab:	d8 d9                	fcomp  st(1)
c000a4ad:	df e0                	fnstsw ax
c000a4af:	9e                   	sahf   
c000a4b0:	77 0f                	ja     c000a4c1 <sinc_stereo_vari_process+0x93>
c000a4b2:	dd d8                	fstp   st(0)
c000a4b4:	eb 11                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4b6:	dd d9                	fstp   st(1)
c000a4b8:	d9 e8                	fld1   
c000a4ba:	d8 d9                	fcomp  st(1)
c000a4bc:	df e0                	fnstsw ax
c000a4be:	9e                   	sahf   
c000a4bf:	76 04                	jbe    c000a4c5 <sinc_stereo_vari_process+0x97>
c000a4c1:	de f9                	fdivp  st(1),st
c000a4c3:	eb 02                	jmp    c000a4c7 <sinc_stereo_vari_process+0x99>
c000a4c5:	dd d8                	fstp   st(0)
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d0:	e8 7b 51 01 00       	call   c001f650 <lrint>
c000a4d5:	40                   	inc    eax
c000a4d6:	0f af c5             	imul   eax,ebp
c000a4d9:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e0:	dd 14 24             	fst    QWORD PTR [esp]
c000a4e3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4e7:	e8 f5 f5 ff ff       	call   c0009ae1 <fmod_one>
c000a4ec:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4ef:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4f6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a4fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a4fe:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a502:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a505:	e8 46 51 01 00       	call   c001f650 <lrint>
c000a50a:	d9 e8                	fld1   
c000a50c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a510:	0f af e8             	imul   ebp,eax
c000a513:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a517:	01 e8                	add    eax,ebp
c000a519:	99                   	cdq    
c000a51a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a51d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a520:	dc 05 f8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020df8
c000a526:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a52a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a52d:	83 c4 10             	add    esp,0x10
c000a530:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a533:	7d 4b                	jge    c000a580 <sinc_stereo_vari_process+0x152>
c000a535:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a538:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a53b:	01 c8                	add    eax,ecx
c000a53d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a540:	99                   	cdq    
c000a541:	f7 f9                	idiv   ecx
c000a543:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a547:	7d 09                	jge    c000a552 <sinc_stereo_vari_process+0x124>
c000a549:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a54c:	85 c0                	test   eax,eax
c000a54e:	79 57                	jns    c000a5a7 <sinc_stereo_vari_process+0x179>
c000a550:	eb 70                	jmp    c000a5c2 <sinc_stereo_vari_process+0x194>
c000a552:	51                   	push   ecx
c000a553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a557:	57                   	push   edi
c000a558:	53                   	push   ebx
c000a559:	e8 da f5 ff ff       	call   c0009b38 <prepare_data>
c000a55e:	83 c4 10             	add    esp,0x10
c000a561:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a564:	85 c0                	test   eax,eax
c000a566:	0f 85 37 01 00 00    	jne    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a56c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a56f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a572:	01 c8                	add    eax,ecx
c000a574:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a577:	99                   	cdq    
c000a578:	f7 f9                	idiv   ecx
c000a57a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a57e:	7c c9                	jl     c000a549 <sinc_stereo_vari_process+0x11b>
c000a580:	dd 04 24             	fld    QWORD PTR [esp]
c000a583:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a586:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a58a:	dd 1e                	fstp   QWORD PTR [esi]
c000a58c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a58f:	99                   	cdq    
c000a590:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a593:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a596:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a599:	99                   	cdq    
c000a59a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	e9 fc 00 00 00       	jmp    c000a6a3 <sinc_stereo_vari_process+0x275>
c000a5a7:	dd 04 24             	fld    QWORD PTR [esp]
c000a5aa:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b1:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5b5:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5b9:	d9 c9                	fxch   st(1)
c000a5bb:	de d9                	fcompp 
c000a5bd:	df e0                	fnstsw ax
c000a5bf:	9e                   	sahf   
c000a5c0:	73 be                	jae    c000a580 <sinc_stereo_vari_process+0x152>
c000a5c2:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5c6:	7e 2f                	jle    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5c8:	dd 06                	fld    QWORD PTR [esi]
c000a5ca:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5cd:	83 ec 10             	sub    esp,0x10
c000a5d0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d3:	e8 58 50 01 00       	call   c001f630 <fabs>
c000a5d8:	83 c4 10             	add    esp,0x10
c000a5db:	dc 1d 80 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f80
c000a5e1:	df e0                	fnstsw ax
c000a5e3:	9e                   	sahf   
c000a5e4:	76 11                	jbe    c000a5f7 <sinc_stereo_vari_process+0x1c9>
c000a5e6:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5e9:	dc 26                	fsub   QWORD PTR [esi]
c000a5eb:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5ee:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f1:	dc 06                	fadd   QWORD PTR [esi]
c000a5f3:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5f7:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a5fa:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a5fe:	d9 e8                	fld1   
c000a600:	d8 d9                	fcomp  st(1)
c000a602:	df e0                	fnstsw ax
c000a604:	9e                   	sahf   
c000a605:	77 04                	ja     c000a60b <sinc_stereo_vari_process+0x1dd>
c000a607:	dd d8                	fstp   st(0)
c000a609:	d9 e8                	fld1   
c000a60b:	de c9                	fmulp  st(1),st
c000a60d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a611:	50                   	push   eax
c000a612:	50                   	push   eax
c000a613:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a617:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61b:	e8 ae f4 ff ff       	call   c0009ace <double_to_fp>
c000a620:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a624:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a628:	89 c5                	mov    ebp,eax
c000a62a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a62d:	e8 9c f4 ff ff       	call   c0009ace <double_to_fp>
c000a632:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a635:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a638:	83 c4 0c             	add    esp,0xc
c000a63b:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a63e:	89 c1                	mov    ecx,eax
c000a640:	52                   	push   edx
c000a641:	89 d8                	mov    eax,ebx
c000a643:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a647:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a64a:	52                   	push   edx
c000a64b:	52                   	push   edx
c000a64c:	89 ea                	mov    edx,ebp
c000a64e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a651:	e8 da ea ff ff       	call   c0009130 <calc_output_stereo>
c000a656:	d9 e8                	fld1   
c000a658:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a65c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a660:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a664:	dd 14 24             	fst    QWORD PTR [esp]
c000a667:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a66b:	e8 71 f4 ff ff       	call   c0009ae1 <fmod_one>
c000a670:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a673:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a676:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a67a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a67e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a682:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a686:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a689:	e8 c2 4f 01 00       	call   c001f650 <lrint>
c000a68e:	0f af e8             	imul   ebp,eax
c000a691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a695:	01 e8                	add    eax,ebp
c000a697:	99                   	cdq    
c000a698:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a69b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a69e:	e9 87 fe ff ff       	jmp    c000a52a <sinc_stereo_vari_process+0xfc>
c000a6a3:	83 c4 3c             	add    esp,0x3c
c000a6a6:	5b                   	pop    ebx
c000a6a7:	5e                   	pop    esi
c000a6a8:	5f                   	pop    edi
c000a6a9:	5d                   	pop    ebp
c000a6aa:	c3                   	ret    

c000a6ab <sinc_mono_vari_process>:
c000a6ab:	55                   	push   ebp
c000a6ac:	b8 05 00 00 00       	mov    eax,0x5
c000a6b1:	57                   	push   edi
c000a6b2:	56                   	push   esi
c000a6b3:	53                   	push   ebx
c000a6b4:	83 ec 3c             	sub    esp,0x3c
c000a6b7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6bb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6bf:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c2:	85 db                	test   ebx,ebx
c000a6c4:	0f 84 55 02 00 00    	je     c000a91f <sinc_mono_vari_process+0x274>
c000a6ca:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6cd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d0:	0f af d0             	imul   edx,eax
c000a6d3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6d6:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6e4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6eb:	dd 06                	fld    QWORD PTR [esi]
c000a6ed:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f1:	51                   	push   ecx
c000a6f2:	51                   	push   ecx
c000a6f3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6f6:	e8 e4 e8 ff ff       	call   c0008fdf <is_bad_src_ratio>
c000a6fb:	5d                   	pop    ebp
c000a6fc:	89 c2                	mov    edx,eax
c000a6fe:	58                   	pop    eax
c000a6ff:	85 d2                	test   edx,edx
c000a701:	b8 16 00 00 00       	mov    eax,0x16
c000a706:	0f 85 13 02 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a70c:	d9 05 90 0f 02 c0    	fld    DWORD PTR ds:0xc0020f90
c000a712:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a715:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a718:	dd 06                	fld    QWORD PTR [esi]
c000a71a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a71d:	d8 d1                	fcom   st(1)
c000a71f:	df e0                	fnstsw ax
c000a721:	9e                   	sahf   
c000a722:	76 0f                	jbe    c000a733 <sinc_mono_vari_process+0x88>
c000a724:	dd d8                	fstp   st(0)
c000a726:	d9 e8                	fld1   
c000a728:	d8 d9                	fcomp  st(1)
c000a72a:	df e0                	fnstsw ax
c000a72c:	9e                   	sahf   
c000a72d:	77 0f                	ja     c000a73e <sinc_mono_vari_process+0x93>
c000a72f:	dd d8                	fstp   st(0)
c000a731:	eb 11                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a733:	dd d9                	fstp   st(1)
c000a735:	d9 e8                	fld1   
c000a737:	d8 d9                	fcomp  st(1)
c000a739:	df e0                	fnstsw ax
c000a73b:	9e                   	sahf   
c000a73c:	76 04                	jbe    c000a742 <sinc_mono_vari_process+0x97>
c000a73e:	de f9                	fdivp  st(1),st
c000a740:	eb 02                	jmp    c000a744 <sinc_mono_vari_process+0x99>
c000a742:	dd d8                	fstp   st(0)
c000a744:	83 ec 10             	sub    esp,0x10
c000a747:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a74a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a74d:	e8 fe 4e 01 00       	call   c001f650 <lrint>
c000a752:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a755:	40                   	inc    eax
c000a756:	dd 14 24             	fst    QWORD PTR [esp]
c000a759:	0f af e8             	imul   ebp,eax
c000a75c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a760:	e8 7c f3 ff ff       	call   c0009ae1 <fmod_one>
c000a765:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a768:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a76c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a76f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a773:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a777:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a77b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a77f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a782:	e8 c9 4e 01 00       	call   c001f650 <lrint>
c000a787:	d9 e8                	fld1   
c000a789:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a78d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a792:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a796:	99                   	cdq    
c000a797:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a79a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a79d:	dc 05 f8 0d 02 c0    	fadd   QWORD PTR ds:0xc0020df8
c000a7a3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7aa:	83 c4 10             	add    esp,0x10
c000a7ad:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b0:	7d 44                	jge    c000a7f6 <sinc_mono_vari_process+0x14b>
c000a7b2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7b8:	01 c8                	add    eax,ecx
c000a7ba:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7bd:	99                   	cdq    
c000a7be:	f7 f9                	idiv   ecx
c000a7c0:	39 d5                	cmp    ebp,edx
c000a7c2:	7d 09                	jge    c000a7cd <sinc_mono_vari_process+0x122>
c000a7c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7c7:	85 c0                	test   eax,eax
c000a7c9:	79 52                	jns    c000a81d <sinc_mono_vari_process+0x172>
c000a7cb:	eb 6b                	jmp    c000a838 <sinc_mono_vari_process+0x18d>
c000a7cd:	52                   	push   edx
c000a7ce:	55                   	push   ebp
c000a7cf:	57                   	push   edi
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 62 f3 ff ff       	call   c0009b38 <prepare_data>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7dc:	85 c0                	test   eax,eax
c000a7de:	0f 85 3b 01 00 00    	jne    c000a91f <sinc_mono_vari_process+0x274>
c000a7e4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7e7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7ea:	01 c8                	add    eax,ecx
c000a7ec:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7ef:	99                   	cdq    
c000a7f0:	f7 f9                	idiv   ecx
c000a7f2:	39 d5                	cmp    ebp,edx
c000a7f4:	7c ce                	jl     c000a7c4 <sinc_mono_vari_process+0x119>
c000a7f6:	dd 04 24             	fld    QWORD PTR [esp]
c000a7f9:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a7fc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a800:	dd 1e                	fstp   QWORD PTR [esi]
c000a802:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a805:	99                   	cdq    
c000a806:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a809:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a80c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a80f:	99                   	cdq    
c000a810:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a813:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a816:	31 c0                	xor    eax,eax
c000a818:	e9 02 01 00 00       	jmp    c000a91f <sinc_mono_vari_process+0x274>
c000a81d:	dd 04 24             	fld    QWORD PTR [esp]
c000a820:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a827:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a82b:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a82f:	d9 c9                	fxch   st(1)
c000a831:	de d9                	fcompp 
c000a833:	df e0                	fnstsw ax
c000a835:	9e                   	sahf   
c000a836:	77 be                	ja     c000a7f6 <sinc_mono_vari_process+0x14b>
c000a838:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a83c:	7e 2f                	jle    c000a86d <sinc_mono_vari_process+0x1c2>
c000a83e:	dd 06                	fld    QWORD PTR [esi]
c000a840:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a843:	83 ec 10             	sub    esp,0x10
c000a846:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a849:	e8 e2 4d 01 00       	call   c001f630 <fabs>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	dc 1d 80 0f 02 c0    	fcomp  QWORD PTR ds:0xc0020f80
c000a857:	df e0                	fnstsw ax
c000a859:	9e                   	sahf   
c000a85a:	76 11                	jbe    c000a86d <sinc_mono_vari_process+0x1c2>
c000a85c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a85f:	dc 26                	fsub   QWORD PTR [esi]
c000a861:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a864:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a867:	dc 06                	fadd   QWORD PTR [esi]
c000a869:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a86d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a870:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a874:	d9 e8                	fld1   
c000a876:	d8 d9                	fcomp  st(1)
c000a878:	df e0                	fnstsw ax
c000a87a:	9e                   	sahf   
c000a87b:	77 04                	ja     c000a881 <sinc_mono_vari_process+0x1d6>
c000a87d:	dd d8                	fstp   st(0)
c000a87f:	d9 e8                	fld1   
c000a881:	de c9                	fmulp  st(1),st
c000a883:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a887:	50                   	push   eax
c000a888:	50                   	push   eax
c000a889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a891:	e8 38 f2 ff ff       	call   c0009ace <double_to_fp>
c000a896:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a89a:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a89e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8a5:	e8 24 f2 ff ff       	call   c0009ace <double_to_fp>
c000a8aa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8ae:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8b5:	89 c1                	mov    ecx,eax
c000a8b7:	89 d8                	mov    eax,ebx
c000a8b9:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8bd:	e8 89 e7 ff ff       	call   c000904b <calc_output_single>
c000a8c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8c5:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8cc:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8cf:	d9 e8                	fld1   
c000a8d1:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8d5:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8d8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8dc:	dd 14 24             	fst    QWORD PTR [esp]
c000a8df:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8e3:	e8 f9 f1 ff ff       	call   c0009ae1 <fmod_one>
c000a8e8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ef:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8f6:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a8fa:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a8fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a902:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a905:	e8 46 4d 01 00       	call   c001f650 <lrint>
c000a90a:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a90f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a913:	99                   	cdq    
c000a914:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a917:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a91a:	e9 88 fe ff ff       	jmp    c000a7a7 <sinc_mono_vari_process+0xfc>
c000a91f:	83 c4 3c             	add    esp,0x3c
c000a922:	5b                   	pop    ebx
c000a923:	5e                   	pop    esi
c000a924:	5f                   	pop    edi
c000a925:	5d                   	pop    ebp
c000a926:	c3                   	ret    

c000a927 <sinc_get_name>:
c000a927:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a92b:	31 c0                	xor    eax,eax
c000a92d:	83 fa 02             	cmp    edx,0x2
c000a930:	77 07                	ja     c000a939 <sinc_get_name+0x12>
c000a932:	8b 04 95 60 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1a0]
c000a939:	c3                   	ret    

c000a93a <sinc_get_description>:
c000a93a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a93e:	31 c0                	xor    eax,eax
c000a940:	83 fa 02             	cmp    edx,0x2
c000a943:	77 07                	ja     c000a94c <sinc_get_description+0x12>
c000a945:	8b 04 95 54 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1ac]
c000a94c:	c3                   	ret    

c000a94d <sinc_set_converter>:
c000a94d:	53                   	push   ebx
c000a94e:	81 ec 58 08 00 00    	sub    esp,0x858
c000a954:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a95b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a95e:	85 c0                	test   eax,eax
c000a960:	74 13                	je     c000a975 <sinc_set_converter+0x28>
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	50                   	push   eax
c000a966:	e8 90 16 00 00       	call   c000bffb <free>
c000a96b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	50                   	push   eax
c000a976:	68 44 08 00 00       	push   0x844
c000a97b:	6a 00                	push   0x0
c000a97d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a981:	50                   	push   eax
c000a982:	e8 33 5d ff ff       	call   c00006ba <memset>
c000a987:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a98a:	83 c4 10             	add    esp,0x10
c000a98d:	b8 0b 00 00 00       	mov    eax,0xb
c000a992:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a998:	7f 6e                	jg     c000aa08 <sinc_set_converter+0xbb>
c000a99a:	83 fa 01             	cmp    edx,0x1
c000a99d:	75 10                	jne    c000a9af <sinc_set_converter+0x62>
c000a99f:	c7 43 24 ab a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6ab
c000a9a6:	c7 43 20 ab a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6ab
c000a9ad:	eb 4d                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9af:	83 fa 02             	cmp    edx,0x2
c000a9b2:	75 10                	jne    c000a9c4 <sinc_set_converter+0x77>
c000a9b4:	c7 43 24 2e a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a42e
c000a9bb:	c7 43 20 2e a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a42e
c000a9c2:	eb 38                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9c4:	83 fa 04             	cmp    edx,0x4
c000a9c7:	75 10                	jne    c000a9d9 <sinc_set_converter+0x8c>
c000a9c9:	c7 43 24 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b1
c000a9d0:	c7 43 20 b1 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b1
c000a9d7:	eb 23                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9d9:	83 fa 06             	cmp    edx,0x6
c000a9dc:	75 10                	jne    c000a9ee <sinc_set_converter+0xa1>
c000a9de:	c7 43 24 34 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f34
c000a9e5:	c7 43 20 34 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f34
c000a9ec:	eb 0e                	jmp    c000a9fc <sinc_set_converter+0xaf>
c000a9ee:	c7 43 24 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb2
c000a9f5:	c7 43 20 b2 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb2
c000a9fc:	c7 43 28 70 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009670
c000aa03:	b8 0a 00 00 00       	mov    eax,0xa
c000aa08:	81 c4 58 08 00 00    	add    esp,0x858
c000aa0e:	5b                   	pop    ebx
c000aa0f:	c3                   	ret    

c000aa10 <is_bad_src_ratio>:
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa17:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa22:	dd 04 24             	fld    QWORD PTR [esp]
c000aa25:	dd 05 80 0d 02 c0    	fld    QWORD PTR ds:0xc0020d80
c000aa2b:	de d9                	fcompp 
c000aa2d:	df e0                	fnstsw ax
c000aa2f:	f6 c4 45             	test   ah,0x45
c000aa32:	74 10                	je     c000aa44 <is_bad_src_ratio+0x34>
c000aa34:	dd 04 24             	fld    QWORD PTR [esp]
c000aa37:	dc 1d 88 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020d88
c000aa3d:	df e0                	fnstsw ax
c000aa3f:	f6 c4 45             	test   ah,0x45
c000aa42:	75 07                	jne    c000aa4b <is_bad_src_ratio+0x3b>
c000aa44:	b8 01 00 00 00       	mov    eax,0x1
c000aa49:	eb 05                	jmp    c000aa50 <is_bad_src_ratio+0x40>
c000aa4b:	b8 00 00 00 00       	mov    eax,0x0
c000aa50:	83 c4 0c             	add    esp,0xc
c000aa53:	c3                   	ret    

c000aa54 <fmod_one>:
c000aa54:	83 ec 2c             	sub    esp,0x2c
c000aa57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa67:	83 ec 08             	sub    esp,0x8
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa72:	e8 d9 4b 01 00       	call   c001f650 <lrint>
c000aa77:	83 c4 10             	add    esp,0x10
c000aa7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa7e:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa82:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa86:	de e1                	fsubrp st(1),st
c000aa88:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa8c:	d9 ee                	fldz   
c000aa8e:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa92:	df e0                	fnstsw ax
c000aa94:	f6 c4 45             	test   ah,0x45
c000aa97:	75 0a                	jne    c000aaa3 <fmod_one+0x4f>
c000aa99:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa9d:	d9 e8                	fld1   
c000aa9f:	de c1                	faddp  st(1),st
c000aaa1:	eb 04                	jmp    c000aaa7 <fmod_one+0x53>
c000aaa3:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa7:	83 c4 2c             	add    esp,0x2c
c000aaaa:	c3                   	ret    

c000aaab <zoh_vari_process>:
c000aaab:	55                   	push   ebp
c000aaac:	57                   	push   edi
c000aaad:	56                   	push   esi
c000aaae:	53                   	push   ebx
c000aaaf:	83 ec 2c             	sub    esp,0x2c
c000aab2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aab6:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aaba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aac6:	0f 8e 30 02 00 00    	jle    c000acfc <zoh_vari_process+0x251>
c000aacc:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aacf:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aad7:	85 db                	test   ebx,ebx
c000aad9:	0f 84 1d 02 00 00    	je     c000acfc <zoh_vari_process+0x251>
c000aadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aae6:	74 19                	je     c000ab01 <zoh_vari_process+0x56>
c000aae8:	31 d2                	xor    edx,edx
c000aaea:	39 c2                	cmp    edx,eax
c000aaec:	7d 0c                	jge    c000aafa <zoh_vari_process+0x4f>
c000aaee:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf0:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aaf3:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aaf7:	42                   	inc    edx
c000aaf8:	eb f0                	jmp    c000aaea <zoh_vari_process+0x3f>
c000aafa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab01:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab04:	0f af d0             	imul   edx,eax
c000ab07:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab0a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab0e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab15:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab18:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab1f:	dd 07                	fld    QWORD PTR [edi]
c000ab21:	dd 14 24             	fst    QWORD PTR [esp]
c000ab24:	50                   	push   eax
c000ab25:	50                   	push   eax
c000ab26:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab29:	e8 e2 fe ff ff       	call   c000aa10 <is_bad_src_ratio>
c000ab2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab32:	5a                   	pop    edx
c000ab33:	59                   	pop    ecx
c000ab34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab39:	0f 85 b5 01 00 00    	jne    c000acf4 <zoh_vari_process+0x249>
c000ab3f:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab42:	d9 e8                	fld1   
c000ab44:	d8 d1                	fcom   st(1)
c000ab46:	df e0                	fnstsw ax
c000ab48:	9e                   	sahf   
c000ab49:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab4d:	0f 86 83 00 00 00    	jbe    c000abd6 <zoh_vari_process+0x12b>
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab59:	7d 7b                	jge    c000abd6 <zoh_vari_process+0x12b>
c000ab5b:	d9 c0                	fld    st(0)
c000ab5d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab60:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab63:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab66:	df e0                	fnstsw ax
c000ab68:	9e                   	sahf   
c000ab69:	73 6b                	jae    c000abd6 <zoh_vari_process+0x12b>
c000ab6b:	85 d2                	test   edx,edx
c000ab6d:	7e 36                	jle    c000aba5 <zoh_vari_process+0xfa>
c000ab6f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab73:	dd 07                	fld    QWORD PTR [edi]
c000ab75:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab78:	83 ec 10             	sub    esp,0x10
c000ab7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab7e:	e8 ad 4a 01 00       	call   c001f630 <fabs>
c000ab83:	83 c4 10             	add    esp,0x10
c000ab86:	dc 1d f8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020df8
c000ab8c:	df e0                	fnstsw ax
c000ab8e:	9e                   	sahf   
c000ab8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab93:	76 10                	jbe    c000aba5 <zoh_vari_process+0xfa>
c000ab95:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab98:	dc 27                	fsub   QWORD PTR [edi]
c000ab9a:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab9d:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba0:	dc 07                	fadd   QWORD PTR [edi]
c000aba2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aba5:	31 c0                	xor    eax,eax
c000aba7:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abaa:	7e 13                	jle    c000abbf <zoh_vari_process+0x114>
c000abac:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abb3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abb6:	40                   	inc    eax
c000abb7:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abba:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abbd:	eb e8                	jmp    c000aba7 <zoh_vari_process+0xfc>
c000abbf:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abc3:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abc6:	de c1                	faddp  st(1),st
c000abc8:	e9 75 ff ff ff       	jmp    c000ab42 <zoh_vari_process+0x97>
c000abcd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd1:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abd4:	de c1                	faddp  st(1),st
c000abd6:	83 ec 10             	sub    esp,0x10
c000abd9:	dd 14 24             	fst    QWORD PTR [esp]
c000abdc:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe0:	e8 6f fe ff ff       	call   c000aa54 <fmod_one>
c000abe5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abe8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abec:	d8 e1                	fsub   st,st(1)
c000abee:	d9 c9                	fxch   st(1)
c000abf0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abf4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf7:	e8 54 4a 01 00       	call   c001f650 <lrint>
c000abfc:	83 c4 10             	add    esp,0x10
c000abff:	0f af e8             	imul   ebp,eax
c000ac02:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac05:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac08:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac0c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac0f:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac12:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac15:	0f 8d 80 00 00 00    	jge    c000ac9b <zoh_vari_process+0x1f0>
c000ac1b:	d9 c0                	fld    st(0)
c000ac1d:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac20:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac24:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac28:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac2c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac30:	de d9                	fcompp 
c000ac32:	df e0                	fnstsw ax
c000ac34:	9e                   	sahf   
c000ac35:	72 64                	jb     c000ac9b <zoh_vari_process+0x1f0>
c000ac37:	85 d2                	test   edx,edx
c000ac39:	7e 36                	jle    c000ac71 <zoh_vari_process+0x1c6>
c000ac3b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac3f:	dd 07                	fld    QWORD PTR [edi]
c000ac41:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac44:	83 ec 10             	sub    esp,0x10
c000ac47:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac4a:	e8 e1 49 01 00       	call   c001f630 <fabs>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	dc 1d f8 0d 02 c0    	fcomp  QWORD PTR ds:0xc0020df8
c000ac58:	df e0                	fnstsw ax
c000ac5a:	9e                   	sahf   
c000ac5b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac5f:	76 10                	jbe    c000ac71 <zoh_vari_process+0x1c6>
c000ac61:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac64:	dc 27                	fsub   QWORD PTR [edi]
c000ac66:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac69:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac6c:	dc 07                	fadd   QWORD PTR [edi]
c000ac6e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac71:	31 d2                	xor    edx,edx
c000ac73:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac76:	39 d0                	cmp    eax,edx
c000ac78:	0f 8e 4f ff ff ff    	jle    c000abcd <zoh_vari_process+0x122>
c000ac7e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac81:	29 c1                	sub    ecx,eax
c000ac83:	89 c8                	mov    eax,ecx
c000ac85:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac87:	01 d0                	add    eax,edx
c000ac89:	42                   	inc    edx
c000ac8a:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac8d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac93:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac96:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac99:	eb d8                	jmp    c000ac73 <zoh_vari_process+0x1c8>
c000ac9b:	39 e9                	cmp    ecx,ebp
c000ac9d:	7d 13                	jge    c000acb2 <zoh_vari_process+0x207>
c000ac9f:	89 e8                	mov    eax,ebp
c000aca1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000aca4:	29 c8                	sub    eax,ecx
c000aca6:	99                   	cdq    
c000aca7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acae:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb2:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acb5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acb8:	85 c0                	test   eax,eax
c000acba:	7f 1b                	jg     c000acd7 <zoh_vari_process+0x22c>
c000acbc:	dd 04 24             	fld    QWORD PTR [esp]
c000acbf:	dd 1f                	fstp   QWORD PTR [edi]
c000acc1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acc4:	99                   	cdq    
c000acc5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acc8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000accb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acce:	99                   	cdq    
c000accf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acd5:	eb 25                	jmp    c000acfc <zoh_vari_process+0x251>
c000acd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000acda:	31 d2                	xor    edx,edx
c000acdc:	29 e8                	sub    eax,ebp
c000acde:	c1 e0 02             	shl    eax,0x2
c000ace1:	39 d5                	cmp    ebp,edx
c000ace3:	7e d7                	jle    c000acbc <zoh_vari_process+0x211>
c000ace5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ace7:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acea:	83 c0 04             	add    eax,0x4
c000aced:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf1:	42                   	inc    edx
c000acf2:	eb ed                	jmp    c000ace1 <zoh_vari_process+0x236>
c000acf4:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000acfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad00:	83 c4 2c             	add    esp,0x2c
c000ad03:	5b                   	pop    ebx
c000ad04:	5e                   	pop    esi
c000ad05:	5f                   	pop    edi
c000ad06:	5d                   	pop    ebp
c000ad07:	c3                   	ret    

c000ad08 <zoh_reset>:
c000ad08:	83 ec 0c             	sub    esp,0xc
c000ad0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad0f:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 20                	je     c000ad36 <zoh_reset+0x2e>
c000ad16:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad19:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad20:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad23:	51                   	push   ecx
c000ad24:	c1 e2 02             	shl    edx,0x2
c000ad27:	83 c0 1c             	add    eax,0x1c
c000ad2a:	52                   	push   edx
c000ad2b:	6a 00                	push   0x0
c000ad2d:	50                   	push   eax
c000ad2e:	e8 87 59 ff ff       	call   c00006ba <memset>
c000ad33:	83 c4 10             	add    esp,0x10
c000ad36:	83 c4 0c             	add    esp,0xc
c000ad39:	c3                   	ret    

c000ad3a <zoh_get_name>:
c000ad3a:	31 c0                	xor    eax,eax
c000ad3c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad41:	75 05                	jne    c000ad48 <zoh_get_name+0xe>
c000ad43:	b8 94 0f 02 c0       	mov    eax,0xc0020f94
c000ad48:	c3                   	ret    

c000ad49 <zoh_get_description>:
c000ad49:	31 c0                	xor    eax,eax
c000ad4b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad50:	75 05                	jne    c000ad57 <zoh_get_description+0xe>
c000ad52:	b8 a5 0f 02 c0       	mov    eax,0xc0020fa5
c000ad57:	c3                   	ret    

c000ad58 <zoh_set_converter>:
c000ad58:	53                   	push   ebx
c000ad59:	b8 0a 00 00 00       	mov    eax,0xa
c000ad5e:	83 ec 08             	sub    esp,0x8
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad6a:	75 6e                	jne    c000adda <zoh_set_converter+0x82>
c000ad6c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad6f:	85 c0                	test   eax,eax
c000ad71:	74 13                	je     c000ad86 <zoh_set_converter+0x2e>
c000ad73:	83 ec 0c             	sub    esp,0xc
c000ad76:	50                   	push   eax
c000ad77:	e8 7f 12 00 00       	call   c000bffb <free>
c000ad7c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad83:	83 c4 10             	add    esp,0x10
c000ad86:	50                   	push   eax
c000ad87:	50                   	push   eax
c000ad88:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad8b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad92:	50                   	push   eax
c000ad93:	6a 01                	push   0x1
c000ad95:	e8 81 12 00 00       	call   c000c01b <calloc>
c000ad9a:	89 c2                	mov    edx,eax
c000ad9c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	b8 01 00 00 00       	mov    eax,0x1
c000ada7:	85 d2                	test   edx,edx
c000ada9:	74 2f                	je     c000adda <zoh_set_converter+0x82>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adb4:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adba:	c7 43 24 ab aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aaab
c000adc1:	c7 43 20 ab aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aaab
c000adc8:	c7 43 28 08 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad08
c000adcf:	53                   	push   ebx
c000add0:	e8 33 ff ff ff       	call   c000ad08 <zoh_reset>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	31 c0                	xor    eax,eax
c000adda:	83 c4 08             	add    esp,0x8
c000addd:	5b                   	pop    ebx
c000adde:	c3                   	ret    
c000addf:	90                   	nop

c000ade0 <Computer::close(int, int, void*)>:
c000ade0:	57                   	push   edi
c000ade1:	56                   	push   esi
c000ade2:	53                   	push   ebx
c000ade3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ade7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adeb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adef:	83 ec 0c             	sub    esp,0xc
c000adf2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000adf8:	e8 e7 58 00 00       	call   c00106e4 <Device::closeAll()>
c000adfd:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae08:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae0c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae14:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae1c:	5b                   	pop    ebx
c000ae1d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae20:	5e                   	pop    esi
c000ae21:	5f                   	pop    edi
c000ae22:	ff e0                	jmp    eax

c000ae24 <Computer::Computer()>:
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2b:	83 ec 08             	sub    esp,0x8
c000ae2e:	68 dc 0f 02 c0       	push   0xc0020fdc
c000ae33:	50                   	push   eax
c000ae34:	e8 25 59 00 00       	call   c001075e <Device::Device(char const*)>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	ba a4 11 02 c0       	mov    edx,0xc00211a4
c000ae41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae45:	89 10                	mov    DWORD PTR [eax],edx
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae59:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae6d:	83 ca 04             	or     edx,0x4
c000ae70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae80:	0f b6 d0             	movzx  edx,al
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae98:	0f b6 d0             	movzx  edx,al
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeae:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aeb5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aebb:	0f b6 d0             	movzx  edx,al
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aec6:	83 e1 3f             	and    ecx,0x3f
c000aec9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aed7:	0f b6 d0             	movzx  edx,al
c000aeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aede:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeef:	0f b6 d0             	movzx  edx,al
c000aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aefb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af05:	8d 50 01             	lea    edx,[eax+0x1]
c000af08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af12:	0f b6 d0             	movzx  edx,al
c000af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af19:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af1d:	83 e1 3f             	and    ecx,0x3f
c000af20:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af2e:	0f b6 d0             	movzx  edx,al
c000af31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af35:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af46:	0f b6 d0             	movzx  edx,al
c000af49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af5c:	8d 50 01             	lea    edx,[eax+0x1]
c000af5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af63:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af69:	0f b6 d0             	movzx  edx,al
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af74:	83 e1 3f             	and    ecx,0x3f
c000af77:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af7b:	90                   	nop
c000af7c:	83 c4 0c             	add    esp,0xc
c000af7f:	c3                   	ret    

c000af80 <Computer::setBootMessage(char const*)>:
c000af80:	c3                   	ret    
c000af81:	90                   	nop

c000af82 <Computer::start()>:
c000af82:	56                   	push   esi
c000af83:	53                   	push   ebx
c000af84:	50                   	push   eax
c000af85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af89:	e8 e7 d9 00 00       	call   c0018975 <lockScheduler()>
c000af8e:	e8 2b dd 00 00       	call   c0018cbe <schedule()>
c000af93:	e8 df d9 00 00       	call   c0018977 <unlockScheduler()>
c000af98:	fb                   	sti    
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	68 3b 07 00 00       	push   0x73b
c000afa1:	e8 7e 40 00 00       	call   c000f024 <operator new(unsigned long)>
c000afa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afad:	89 c6                	mov    esi,eax
c000afaf:	ff 35 14 5a 02 c0    	push   DWORD PTR ds:0xc0025a14
c000afb5:	68 e5 0f 02 c0       	push   0xc0020fe5
c000afba:	6a 01                	push   0x1
c000afbc:	50                   	push   eax
c000afbd:	e8 0a d8 00 00       	call   c00187cc <Process::Process(bool, char const*, Process*, char**)>
c000afc2:	83 c4 20             	add    esp,0x20
c000afc5:	68 ff 00 00 00       	push   0xff
c000afca:	6a 00                	push   0x0
c000afcc:	68 79 b9 00 c0       	push   0xc000b979
c000afd1:	56                   	push   esi
c000afd2:	e8 d3 da 00 00       	call   c0018aaa <Process::createThread(void (*)(void*), void*, int)>
c000afd7:	6a 7a                	push   0x7a
c000afd9:	6a 00                	push   0x0
c000afdb:	68 ef 92 01 c0       	push   0xc00192ef
c000afe0:	ff 35 14 5a 02 c0    	push   DWORD PTR ds:0xc0025a14
c000afe6:	e8 bf da 00 00       	call   c0018aaa <Process::createThread(void (*)(void*), void*, int)>
c000afeb:	83 c4 20             	add    esp,0x20
c000afee:	a3 c8 59 02 c0       	mov    ds:0xc00259c8,eax
c000aff3:	c6 05 cd 45 02 c0 01 	mov    BYTE PTR ds:0xc00245cd,0x1
c000affa:	e8 bd 44 00 00       	call   c000f4bc <initVFS()>
c000afff:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b005:	8b 10                	mov    edx,DWORD PTR [eax]
c000b007:	6a 00                	push   0x0
c000b009:	6a 00                	push   0x0
c000b00b:	6a 00                	push   0x0
c000b00d:	50                   	push   eax
c000b00e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b011:	e8 ae c1 00 00       	call   c00171c4 <setupSystemCalls()>
c000b016:	e8 9f 4f 00 00       	call   c000ffba <loadClockSettings()>
c000b01b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b01e:	e8 95 56 00 00       	call   c00106b8 <Device::loadDriversForAll()>
c000b023:	5a                   	pop    edx
c000b024:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c000b02a:	59                   	pop    ecx
c000b02b:	6a 01                	push   0x1
c000b02d:	68 f2 0f 02 c0       	push   0xc0020ff2
c000b032:	e8 59 d3 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c000b037:	5e                   	pop    esi
c000b038:	5a                   	pop    edx
c000b039:	53                   	push   ebx
c000b03a:	50                   	push   eax
c000b03b:	e8 16 d5 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c000b040:	c7 04 24 68 21 02 c0 	mov    DWORD PTR [esp],0xc0022168
c000b047:	e8 0d 41 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b04c:	83 c4 10             	add    esp,0x10
c000b04f:	83 ec 0c             	sub    esp,0xc
c000b052:	6a 02                	push   0x2
c000b054:	e8 be dd 00 00       	call   c0018e17 <blockTask(TaskState)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	eb f1                	jmp    c000b04f <Computer::start()+0xcd>

c000b05e <firstTask()>:
c000b05e:	83 ec 18             	sub    esp,0x18
c000b061:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c000b067:	e8 16 ff ff ff       	call   c000af82 <Computer::start()>

c000b06c <Computer::detectFeatures()>:
c000b06c:	55                   	push   ebp
c000b06d:	57                   	push   edi
c000b06e:	56                   	push   esi
c000b06f:	53                   	push   ebx
c000b070:	83 ec 1c             	sub    esp,0x1c
c000b073:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b077:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b081:	e8 eb 52 ff ff       	call   c0000371 <detectCPUID>
c000b086:	85 c0                	test   eax,eax
c000b088:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b08e:	0f 95 c2             	setne  dl
c000b091:	83 e0 fd             	and    eax,0xfffffffd
c000b094:	d1 e2                	shl    edx,1
c000b096:	09 d0                	or     eax,edx
c000b098:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b09e:	a8 02                	test   al,0x2
c000b0a0:	75 46                	jne    c000b0e8 <Computer::detectFeatures()+0x7c>
c000b0a2:	f6 05 e1 45 02 c0 04 	test   BYTE PTR ds:0xc00245e1,0x4
c000b0a9:	74 07                	je     c000b0b2 <Computer::detectFeatures()+0x46>
c000b0ab:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b0b2:	e8 1f 40 01 00       	call   c001f0d6 <x87Detect>
c000b0b7:	83 e0 01             	and    eax,0x1
c000b0ba:	c1 e0 04             	shl    eax,0x4
c000b0bd:	88 c2                	mov    dl,al
c000b0bf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0c5:	83 e0 ef             	and    eax,0xffffffef
c000b0c8:	09 d0                	or     eax,edx
c000b0ca:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0d0:	a8 10                	test   al,0x10
c000b0d2:	0f 85 10 01 00 00    	jne    c000b1e8 <Computer::detectFeatures()+0x17c>
c000b0d8:	84 c0                	test   al,al
c000b0da:	0f 88 2b 01 00 00    	js     c000b20b <Computer::detectFeatures()+0x19f>
c000b0e0:	83 c4 1c             	add    esp,0x1c
c000b0e3:	5b                   	pop    ebx
c000b0e4:	5e                   	pop    esi
c000b0e5:	5f                   	pop    edi
c000b0e6:	5d                   	pop    ebp
c000b0e7:	c3                   	ret    
c000b0e8:	83 ec 0c             	sub    esp,0xc
c000b0eb:	6a 20                	push   0x20
c000b0ed:	e8 73 96 00 00       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c000b0f2:	83 e0 01             	and    eax,0x1
c000b0f5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b0fc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b102:	83 e0 f7             	and    eax,0xfffffff7
c000b105:	09 d0                	or     eax,edx
c000b107:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b10d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b114:	e8 4c 96 00 00       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c000b119:	83 e0 01             	and    eax,0x1
c000b11c:	88 c2                	mov    dl,al
c000b11e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b124:	83 e0 fe             	and    eax,0xfffffffe
c000b127:	09 d0                	or     eax,edx
c000b129:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b12f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b136:	e8 2a 96 00 00       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c000b13b:	c1 e0 07             	shl    eax,0x7
c000b13e:	88 c2                	mov    dl,al
c000b140:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b146:	83 e0 7f             	and    eax,0x7f
c000b149:	09 d0                	or     eax,edx
c000b14b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b151:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b158:	e8 08 96 00 00       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	83 e0 01             	and    eax,0x1
c000b163:	c1 e0 05             	shl    eax,0x5
c000b166:	88 c2                	mov    dl,al
c000b168:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b16e:	83 e0 df             	and    eax,0xffffffdf
c000b171:	09 d0                	or     eax,edx
c000b173:	f7 05 e0 45 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00245e0,0x401
c000b17d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b183:	0f 84 a8 00 00 00    	je     c000b231 <Computer::detectFeatures()+0x1c5>
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b193:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b197:	50                   	push   eax
c000b198:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b19c:	55                   	push   ebp
c000b19d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1a1:	57                   	push   edi
c000b1a2:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1a6:	56                   	push   esi
c000b1a7:	68 00 00 00 80       	push   0x80000000
c000b1ac:	e8 31 95 00 00       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1b1:	83 c4 20             	add    esp,0x20
c000b1b4:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b1bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b1bf:	0f 86 dd fe ff ff    	jbe    c000b0a2 <Computer::detectFeatures()+0x36>
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	50                   	push   eax
c000b1c9:	55                   	push   ebp
c000b1ca:	57                   	push   edi
c000b1cb:	56                   	push   esi
c000b1cc:	68 01 00 00 80       	push   0x80000001
c000b1d1:	e8 0c 95 00 00       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b1d6:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b1e0:	83 c4 20             	add    esp,0x20
c000b1e3:	e9 ba fe ff ff       	jmp    c000b0a2 <Computer::detectFeatures()+0x36>
c000b1e8:	e8 a3 3e 01 00       	call   c001f090 <sseDetect>
c000b1ed:	88 c2                	mov    dl,al
c000b1ef:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1f5:	c1 e2 07             	shl    edx,0x7
c000b1f8:	83 e0 7f             	and    eax,0x7f
c000b1fb:	09 d0                	or     eax,edx
c000b1fd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b203:	84 c0                	test   al,al
c000b205:	0f 89 d5 fe ff ff    	jns    c000b0e0 <Computer::detectFeatures()+0x74>
c000b20b:	e8 70 3e 01 00       	call   c001f080 <avxDetect>
c000b210:	83 e0 01             	and    eax,0x1
c000b213:	c1 e0 05             	shl    eax,0x5
c000b216:	88 c2                	mov    dl,al
c000b218:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b21e:	83 e0 df             	and    eax,0xffffffdf
c000b221:	09 d0                	or     eax,edx
c000b223:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b229:	83 c4 1c             	add    esp,0x1c
c000b22c:	5b                   	pop    ebx
c000b22d:	5e                   	pop    esi
c000b22e:	5f                   	pop    edi
c000b22f:	5d                   	pop    ebp
c000b230:	c3                   	ret    
c000b231:	83 ec 0c             	sub    esp,0xc
c000b234:	68 00 02 00 00       	push   0x200
c000b239:	e8 27 95 00 00       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c000b23e:	83 c4 10             	add    esp,0x10
c000b241:	e9 43 ff ff ff       	jmp    c000b189 <Computer::detectFeatures()+0x11d>

c000b246 <Computer::displayFeatures()>:
c000b246:	53                   	push   ebx
c000b247:	83 ec 14             	sub    esp,0x14
c000b24a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b24e:	68 15 10 02 c0       	push   0xc0021015
c000b253:	e8 01 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b262:	0f 85 73 02 00 00    	jne    c000b4db <Computer::displayFeatures()+0x295>
c000b268:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b26d:	83 ec 08             	sub    esp,0x8
c000b270:	50                   	push   eax
c000b271:	68 28 10 02 c0       	push   0xc0021028
c000b276:	e8 de 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b27b:	83 c4 10             	add    esp,0x10
c000b27e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b285:	0f 85 8c 02 00 00    	jne    c000b517 <Computer::displayFeatures()+0x2d1>
c000b28b:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b290:	83 ec 08             	sub    esp,0x8
c000b293:	50                   	push   eax
c000b294:	68 39 10 02 c0       	push   0xc0021039
c000b299:	e8 bb 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b29e:	83 c4 10             	add    esp,0x10
c000b2a1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b2a8:	0f 85 5f 02 00 00    	jne    c000b50d <Computer::displayFeatures()+0x2c7>
c000b2ae:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b2b3:	83 ec 08             	sub    esp,0x8
c000b2b6:	50                   	push   eax
c000b2b7:	68 4a 10 02 c0       	push   0xc002104a
c000b2bc:	e8 98 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b2cb:	0f 85 32 02 00 00    	jne    c000b503 <Computer::displayFeatures()+0x2bd>
c000b2d1:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b2d6:	83 ec 08             	sub    esp,0x8
c000b2d9:	50                   	push   eax
c000b2da:	68 5b 10 02 c0       	push   0xc002105b
c000b2df:	e8 75 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b2ee:	0f 85 05 02 00 00    	jne    c000b4f9 <Computer::displayFeatures()+0x2b3>
c000b2f4:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b2f9:	83 ec 08             	sub    esp,0x8
c000b2fc:	50                   	push   eax
c000b2fd:	68 6c 10 02 c0       	push   0xc002106c
c000b302:	e8 52 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b311:	0f 85 d8 01 00 00    	jne    c000b4ef <Computer::displayFeatures()+0x2a9>
c000b317:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b31c:	83 ec 08             	sub    esp,0x8
c000b31f:	50                   	push   eax
c000b320:	68 7d 10 02 c0       	push   0xc002107d
c000b325:	e8 2f 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b334:	0f 85 ab 01 00 00    	jne    c000b4e5 <Computer::displayFeatures()+0x29f>
c000b33a:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b33f:	83 ec 08             	sub    esp,0x8
c000b342:	50                   	push   eax
c000b343:	68 8e 10 02 c0       	push   0xc002108e
c000b348:	e8 0c 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b357:	0f 88 1b 02 00 00    	js     c000b578 <Computer::displayFeatures()+0x332>
c000b35d:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b362:	83 ec 08             	sub    esp,0x8
c000b365:	50                   	push   eax
c000b366:	68 9f 10 02 c0       	push   0xc002109f
c000b36b:	e8 e9 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b37a:	0f 85 a1 01 00 00    	jne    c000b521 <Computer::displayFeatures()+0x2db>
c000b380:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b385:	83 ec 08             	sub    esp,0x8
c000b388:	50                   	push   eax
c000b389:	68 b0 10 02 c0       	push   0xc00210b0
c000b38e:	e8 c6 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b39d:	0f 85 cb 01 00 00    	jne    c000b56e <Computer::displayFeatures()+0x328>
c000b3a3:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b3a8:	83 ec 08             	sub    esp,0x8
c000b3ab:	50                   	push   eax
c000b3ac:	68 c1 10 02 c0       	push   0xc00210c1
c000b3b1:	e8 a3 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b3c0:	0f 85 9e 01 00 00    	jne    c000b564 <Computer::displayFeatures()+0x31e>
c000b3c6:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b3cb:	83 ec 08             	sub    esp,0x8
c000b3ce:	50                   	push   eax
c000b3cf:	68 d2 10 02 c0       	push   0xc00210d2
c000b3d4:	e8 80 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3d9:	83 c4 10             	add    esp,0x10
c000b3dc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b3e3:	0f 85 71 01 00 00    	jne    c000b55a <Computer::displayFeatures()+0x314>
c000b3e9:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b3ee:	83 ec 08             	sub    esp,0x8
c000b3f1:	50                   	push   eax
c000b3f2:	68 e3 10 02 c0       	push   0xc00210e3
c000b3f7:	e8 5d 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3fc:	83 c4 10             	add    esp,0x10
c000b3ff:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b406:	0f 85 44 01 00 00    	jne    c000b550 <Computer::displayFeatures()+0x30a>
c000b40c:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b411:	83 ec 08             	sub    esp,0x8
c000b414:	50                   	push   eax
c000b415:	68 f4 10 02 c0       	push   0xc00210f4
c000b41a:	e8 3a 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b429:	0f 85 17 01 00 00    	jne    c000b546 <Computer::displayFeatures()+0x300>
c000b42f:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b434:	83 ec 08             	sub    esp,0x8
c000b437:	50                   	push   eax
c000b438:	68 05 11 02 c0       	push   0xc0021105
c000b43d:	e8 17 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b44c:	0f 85 ea 00 00 00    	jne    c000b53c <Computer::displayFeatures()+0x2f6>
c000b452:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b457:	83 ec 08             	sub    esp,0x8
c000b45a:	50                   	push   eax
c000b45b:	68 16 11 02 c0       	push   0xc0021116
c000b460:	e8 f4 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b465:	83 c4 10             	add    esp,0x10
c000b468:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b46f:	0f 88 0d 01 00 00    	js     c000b582 <Computer::displayFeatures()+0x33c>
c000b475:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b47a:	83 ec 08             	sub    esp,0x8
c000b47d:	50                   	push   eax
c000b47e:	68 27 11 02 c0       	push   0xc0021127
c000b483:	e8 d1 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b492:	0f 85 9a 00 00 00    	jne    c000b532 <Computer::displayFeatures()+0x2ec>
c000b498:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b49d:	83 ec 08             	sub    esp,0x8
c000b4a0:	50                   	push   eax
c000b4a1:	68 38 11 02 c0       	push   0xc0021138
c000b4a6:	e8 ae 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b4b5:	75 74                	jne    c000b52b <Computer::displayFeatures()+0x2e5>
c000b4b7:	b8 12 10 02 c0       	mov    eax,0xc0021012
c000b4bc:	83 ec 08             	sub    esp,0x8
c000b4bf:	50                   	push   eax
c000b4c0:	68 49 11 02 c0       	push   0xc0021149
c000b4c5:	e8 8f 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b4ca:	c7 44 24 20 46 27 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022746
c000b4d2:	83 c4 18             	add    esp,0x18
c000b4d5:	5b                   	pop    ebx
c000b4d6:	e9 7e 3c 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c000b4db:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b4e0:	e9 88 fd ff ff       	jmp    c000b26d <Computer::displayFeatures()+0x27>
c000b4e5:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b4ea:	e9 50 fe ff ff       	jmp    c000b33f <Computer::displayFeatures()+0xf9>
c000b4ef:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b4f4:	e9 23 fe ff ff       	jmp    c000b31c <Computer::displayFeatures()+0xd6>
c000b4f9:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b4fe:	e9 f6 fd ff ff       	jmp    c000b2f9 <Computer::displayFeatures()+0xb3>
c000b503:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b508:	e9 c9 fd ff ff       	jmp    c000b2d6 <Computer::displayFeatures()+0x90>
c000b50d:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b512:	e9 9c fd ff ff       	jmp    c000b2b3 <Computer::displayFeatures()+0x6d>
c000b517:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b51c:	e9 6f fd ff ff       	jmp    c000b290 <Computer::displayFeatures()+0x4a>
c000b521:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b526:	e9 5a fe ff ff       	jmp    c000b385 <Computer::displayFeatures()+0x13f>
c000b52b:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b530:	eb 8a                	jmp    c000b4bc <Computer::displayFeatures()+0x276>
c000b532:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b537:	e9 61 ff ff ff       	jmp    c000b49d <Computer::displayFeatures()+0x257>
c000b53c:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b541:	e9 11 ff ff ff       	jmp    c000b457 <Computer::displayFeatures()+0x211>
c000b546:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b54b:	e9 e4 fe ff ff       	jmp    c000b434 <Computer::displayFeatures()+0x1ee>
c000b550:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b555:	e9 b7 fe ff ff       	jmp    c000b411 <Computer::displayFeatures()+0x1cb>
c000b55a:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b55f:	e9 8a fe ff ff       	jmp    c000b3ee <Computer::displayFeatures()+0x1a8>
c000b564:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b569:	e9 5d fe ff ff       	jmp    c000b3cb <Computer::displayFeatures()+0x185>
c000b56e:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b573:	e9 30 fe ff ff       	jmp    c000b3a8 <Computer::displayFeatures()+0x162>
c000b578:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b57d:	e9 e0 fd ff ff       	jmp    c000b362 <Computer::displayFeatures()+0x11c>
c000b582:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c000b587:	e9 ee fe ff ff       	jmp    c000b47a <Computer::displayFeatures()+0x234>

c000b58c <Computer::rdmsr(unsigned int)>:
c000b58c:	83 ec 0c             	sub    esp,0xc
c000b58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b593:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b59a:	74 0a                	je     c000b5a6 <Computer::rdmsr(unsigned int)+0x1a>
c000b59c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5a0:	0f 32                	rdmsr  
c000b5a2:	83 c4 0c             	add    esp,0xc
c000b5a5:	c3                   	ret    
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	68 5a 11 02 c0       	push   0xc002115a
c000b5ae:	e8 d5 a3 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000b5b3:	83 c4 10             	add    esp,0x10
c000b5b6:	eb e4                	jmp    c000b59c <Computer::rdmsr(unsigned int)+0x10>

c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5b8:	57                   	push   edi
c000b5b9:	56                   	push   esi
c000b5ba:	52                   	push   edx
c000b5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5c7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5ce:	74 0e                	je     c000b5de <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d4:	89 f0                	mov    eax,esi
c000b5d6:	89 fa                	mov    edx,edi
c000b5d8:	0f 30                	wrmsr  
c000b5da:	58                   	pop    eax
c000b5db:	5e                   	pop    esi
c000b5dc:	5f                   	pop    edi
c000b5dd:	c3                   	ret    
c000b5de:	83 ec 0c             	sub    esp,0xc
c000b5e1:	68 60 11 02 c0       	push   0xc0021160
c000b5e6:	e8 9d a3 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	eb e0                	jmp    c000b5d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5f0 <Computer::nmiEnabled()>:
c000b5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5fa:	c3                   	ret    
c000b5fb:	90                   	nop

c000b5fc <Computer::readCMOS(unsigned char)>:
c000b5fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b600:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b607:	19 c0                	sbb    eax,eax
c000b609:	83 e0 80             	and    eax,0xffffff80
c000b60c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b610:	e6 70                	out    0x70,al
c000b612:	e4 71                	in     al,0x71
c000b614:	c3                   	ret    
c000b615:	90                   	nop

c000b616 <Computer::enableNMI(bool)>:
c000b616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b61a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b61e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b624:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b62c:	eb ce                	jmp    c000b5fc <Computer::readCMOS(unsigned char)>

c000b62e <Computer::open(int, int, void*)>:
c000b62e:	56                   	push   esi
c000b62f:	53                   	push   ebx
c000b630:	83 ec 10             	sub    esp,0x10
c000b633:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b637:	f6 05 e0 45 02 c0 04 	test   BYTE PTR ds:0xc00245e0,0x4
c000b63e:	68 68 22 00 00       	push   0x2268
c000b643:	0f 94 05 00 3a 02 c0 	sete   BYTE PTR ds:0xc0023a00
c000b64a:	e8 d5 39 00 00       	call   c000f024 <operator new(unsigned long)>
c000b64f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b652:	89 c6                	mov    esi,eax
c000b654:	e8 f9 86 00 00       	call   c0013d52 <ACPI::ACPI()>
c000b659:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b65f:	58                   	pop    eax
c000b660:	5a                   	pop    edx
c000b661:	56                   	push   esi
c000b662:	53                   	push   ebx
c000b663:	e8 06 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b668:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b66b:	e8 fc f9 ff ff       	call   c000b06c <Computer::detectFeatures()>
c000b670:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b673:	e8 ce fb ff ff       	call   c000b246 <Computer::displayFeatures()>
c000b678:	59                   	pop    ecx
c000b679:	5e                   	pop    esi
c000b67a:	6a 01                	push   0x1
c000b67c:	53                   	push   ebx
c000b67d:	e8 94 ff ff ff       	call   c000b616 <Computer::enableNMI(bool)>
c000b682:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b689:	e8 96 39 00 00       	call   c000f024 <operator new(unsigned long)>
c000b68e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b691:	89 c6                	mov    esi,eax
c000b693:	e8 98 91 00 00       	call   c0014830 <CPU::CPU()>
c000b698:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b69e:	58                   	pop    eax
c000b69f:	5a                   	pop    edx
c000b6a0:	56                   	push   esi
c000b6a1:	53                   	push   ebx
c000b6a2:	e8 c7 4e 00 00       	call   c001056e <Device::addChild(Device*)>
c000b6a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b6ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6b3:	6a 00                	push   0x0
c000b6b5:	6a 00                	push   0x0
c000b6b7:	50                   	push   eax
c000b6b8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6bb:	83 c4 20             	add    esp,0x20
c000b6be:	e8 13 54 00 00       	call   c0010ad6 <setupFPU()>
c000b6c3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6c9:	85 c0                	test   eax,eax
c000b6cb:	74 1f                	je     c000b6ec <Computer::open(int, int, void*)+0xbe>
c000b6cd:	83 ec 08             	sub    esp,0x8
c000b6d0:	50                   	push   eax
c000b6d1:	53                   	push   ebx
c000b6d2:	e8 97 4e 00 00       	call   c001056e <Device::addChild(Device*)>
c000b6d7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6df:	6a 00                	push   0x0
c000b6e1:	6a 00                	push   0x0
c000b6e3:	6a 00                	push   0x0
c000b6e5:	50                   	push   eax
c000b6e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6e9:	83 c4 20             	add    esp,0x20
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	68 5e b0 00 c0       	push   0xc000b05e
c000b6f4:	e8 b0 d4 00 00       	call   c0018ba9 <setupMultitasking(void (*)())>
c000b6f9:	83 c4 14             	add    esp,0x14
c000b6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b701:	5b                   	pop    ebx
c000b702:	5e                   	pop    esi
c000b703:	c3                   	ret    

c000b704 <Computer::disableNMI()>:
c000b704:	6a 00                	push   0x0
c000b706:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b70a:	e8 07 ff ff ff       	call   c000b616 <Computer::enableNMI(bool)>
c000b70f:	58                   	pop    eax
c000b710:	5a                   	pop    edx
c000b711:	c3                   	ret    

c000b712 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b716:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b71d:	19 c0                	sbb    eax,eax
c000b71f:	83 e0 80             	and    eax,0xffffff80
c000b722:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b726:	e6 70                	out    0x70,al
c000b728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b72c:	e6 71                	out    0x71,al
c000b72e:	c3                   	ret    
c000b72f:	90                   	nop

c000b730 <Computer::handleNMI()>:
c000b730:	56                   	push   esi
c000b731:	53                   	push   ebx
c000b732:	83 ec 10             	sub    esp,0x10
c000b735:	e4 92                	in     al,0x92
c000b737:	89 c6                	mov    esi,eax
c000b739:	e4 61                	in     al,0x61
c000b73b:	68 66 11 02 c0       	push   0xc0021166
c000b740:	88 c3                	mov    bl,al
c000b742:	e8 12 3a 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	83 e6 10             	and    esi,0x10
c000b74d:	75 0d                	jne    c000b75c <Computer::handleNMI()+0x2c>
c000b74f:	f6 c3 40             	test   bl,0x40
c000b752:	75 1d                	jne    c000b771 <Computer::handleNMI()+0x41>
c000b754:	84 db                	test   bl,bl
c000b756:	78 2d                	js     c000b785 <Computer::handleNMI()+0x55>
c000b758:	58                   	pop    eax
c000b759:	5b                   	pop    ebx
c000b75a:	5e                   	pop    esi
c000b75b:	c3                   	ret    
c000b75c:	83 ec 0c             	sub    esp,0xc
c000b75f:	68 77 11 02 c0       	push   0xc0021177
c000b764:	e8 1f a2 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	f6 c3 40             	test   bl,0x40
c000b76f:	74 e3                	je     c000b754 <Computer::handleNMI()+0x24>
c000b771:	83 ec 0c             	sub    esp,0xc
c000b774:	68 84 11 02 c0       	push   0xc0021184
c000b779:	e8 0a a2 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000b77e:	83 c4 10             	add    esp,0x10
c000b781:	84 db                	test   bl,bl
c000b783:	79 d3                	jns    c000b758 <Computer::handleNMI()+0x28>
c000b785:	c7 44 24 10 8e 11 02 c0 	mov    DWORD PTR [esp+0x10],0xc002118e
c000b78d:	5a                   	pop    edx
c000b78e:	5b                   	pop    ebx
c000b78f:	5e                   	pop    esi
c000b790:	e9 f3 a1 00 00       	jmp    c0015988 <Krnl::panic(char const*)>
c000b795:	90                   	nop

c000b796 <Computer::setDiskActivityLight(int, bool)>:
c000b796:	56                   	push   esi
c000b797:	53                   	push   ebx
c000b798:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b79c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7a1:	77 1b                	ja     c000b7be <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7a3:	e4 92                	in     al,0x92
c000b7a5:	bb 40 00 00 00       	mov    ebx,0x40
c000b7aa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7ae:	89 da                	mov    edx,ebx
c000b7b0:	d3 e2                	shl    edx,cl
c000b7b2:	89 f1                	mov    ecx,esi
c000b7b4:	f7 d2                	not    edx
c000b7b6:	d3 e3                	shl    ebx,cl
c000b7b8:	21 d0                	and    eax,edx
c000b7ba:	09 d8                	or     eax,ebx
c000b7bc:	e6 92                	out    0x92,al
c000b7be:	5b                   	pop    ebx
c000b7bf:	5e                   	pop    esi
c000b7c0:	c3                   	ret    
c000b7c1:	90                   	nop

c000b7c2 <GDTEntry::setBase(unsigned int)>:
c000b7c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7ca:	89 c1                	mov    ecx,eax
c000b7cc:	c1 e9 10             	shr    ecx,0x10
c000b7cf:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7d3:	c1 e8 18             	shr    eax,0x18
c000b7d6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7d9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7dc:	c3                   	ret    
c000b7dd:	90                   	nop

c000b7de <GDTEntry::setLimit(unsigned int)>:
c000b7de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7e6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7e9:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7ec:	c1 e8 10             	shr    eax,0x10
c000b7ef:	83 e2 f0             	and    edx,0xfffffff0
c000b7f2:	83 e0 0f             	and    eax,0xf
c000b7f5:	09 d0                	or     eax,edx
c000b7f7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7fa:	c3                   	ret    
c000b7fb:	90                   	nop

c000b7fc <GDT::GDT()>:
c000b7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b80a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b810:	90                   	nop
c000b811:	c3                   	ret    

c000b812 <GDT::addEntry(GDTEntry)>:
c000b812:	53                   	push   ebx
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b81a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b81c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b823:	52                   	push   edx
c000b824:	50                   	push   eax
c000b825:	68 c8 11 02 c0       	push   0xc00211c8
c000b82a:	e8 2a 39 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b82f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b831:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b835:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b839:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b83d:	8d 50 01             	lea    edx,[eax+0x1]
c000b840:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b844:	89 13                	mov    DWORD PTR [ebx],edx
c000b846:	c1 e0 03             	shl    eax,0x3
c000b849:	83 c4 18             	add    esp,0x18
c000b84c:	5b                   	pop    ebx
c000b84d:	c3                   	ret    

c000b84e <GDT::getNumberOfEntries()>:
c000b84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b852:	8b 00                	mov    eax,DWORD PTR [eax]
c000b854:	c3                   	ret    
c000b855:	90                   	nop

c000b856 <GDT::flush()>:
c000b856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b85a:	83 c0 04             	add    eax,0x4
c000b85d:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b860:	a3 d2 45 02 c0       	mov    ds:0xc00245d2,eax
c000b865:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b86c:	66 89 15 d0 45 02 c0 	mov    WORD PTR ds:0xc00245d0,dx
c000b873:	e9 6d 4b ff ff       	jmp    c00003e5 <loadGDT>

c000b878 <GDT::setup()>:
c000b878:	55                   	push   ebp
c000b879:	57                   	push   edi
c000b87a:	56                   	push   esi
c000b87b:	53                   	push   ebx
c000b87c:	83 ec 3c             	sub    esp,0x3c
c000b87f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b883:	6a 00                	push   0x0
c000b885:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b889:	53                   	push   ebx
c000b88a:	e8 33 ff ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b88f:	6a 00                	push   0x0
c000b891:	53                   	push   ebx
c000b892:	e8 47 ff ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b897:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b89f:	6a 00                	push   0x0
c000b8a1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b8a5:	53                   	push   ebx
c000b8a6:	e8 17 ff ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b8ab:	68 ff ff ff 00       	push   0xffffff
c000b8b0:	53                   	push   ebx
c000b8b1:	e8 28 ff ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b8b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ba:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8bf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8c8:	83 c4 20             	add    esp,0x20
c000b8cb:	6a 00                	push   0x0
c000b8cd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8d1:	53                   	push   ebx
c000b8d2:	e8 eb fe ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000b8d7:	68 ff ff ff 00       	push   0xffffff
c000b8dc:	53                   	push   ebx
c000b8dd:	e8 fc fe ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000b8e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8ea:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8f3:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8fc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b900:	89 d8                	mov    eax,ebx
c000b902:	80 cc 60             	or     ah,0x60
c000b905:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b909:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b90d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	89 f8                	mov    eax,edi
c000b916:	80 cc 60             	or     ah,0x60
c000b919:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b91d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b921:	89 c7                	mov    edi,eax
c000b923:	55                   	push   ebp
c000b924:	e8 e9 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b929:	83 c4 0c             	add    esp,0xc
c000b92c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b930:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b934:	55                   	push   ebp
c000b935:	e8 d8 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b93a:	83 c4 0c             	add    esp,0xc
c000b93d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b941:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b945:	55                   	push   ebp
c000b946:	e8 c7 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b94b:	83 c4 0c             	add    esp,0xc
c000b94e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b952:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b956:	53                   	push   ebx
c000b957:	51                   	push   ecx
c000b958:	55                   	push   ebp
c000b959:	e8 b4 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b95e:	83 c4 0c             	add    esp,0xc
c000b961:	57                   	push   edi
c000b962:	56                   	push   esi
c000b963:	55                   	push   ebp
c000b964:	e8 a9 fe ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000b969:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b96c:	e8 e5 fe ff ff       	call   c000b856 <GDT::flush()>
c000b971:	83 c4 4c             	add    esp,0x4c
c000b974:	5b                   	pop    ebx
c000b975:	5e                   	pop    esi
c000b976:	5f                   	pop    edi
c000b977:	5d                   	pop    ebp
c000b978:	c3                   	ret    

c000b979 <idleFunction(void*)>:
c000b979:	53                   	push   ebx
c000b97a:	83 ec 08             	sub    esp,0x8
c000b97d:	e8 f5 cf 00 00       	call   c0018977 <unlockScheduler()>
c000b982:	e8 95 8e 00 00       	call   c001481c <thisCPU()>
c000b987:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b98e:	74 41                	je     c000b9d1 <idleFunction(void*)+0x58>
c000b990:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c000b995:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b99c:	74 33                	je     c000b9d1 <idleFunction(void*)+0x58>
c000b99e:	52                   	push   edx
c000b99f:	31 db                	xor    ebx,ebx
c000b9a1:	52                   	push   edx
c000b9a2:	68 e1 00 00 00       	push   0xe1
c000b9a7:	50                   	push   eax
c000b9a8:	e8 df fb ff ff       	call   c000b58c <Computer::rdmsr(unsigned int)>
c000b9ad:	53                   	push   ebx
c000b9ae:	83 e0 02             	and    eax,0x2
c000b9b1:	50                   	push   eax
c000b9b2:	68 e1 00 00 00       	push   0xe1
c000b9b7:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c000b9bd:	e8 f6 fb ff ff       	call   c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9c2:	83 c4 20             	add    esp,0x20
c000b9c5:	e8 38 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9ca:	e8 01 3d 01 00       	call   c001f6d0 <idleCommon()>
c000b9cf:	eb f4                	jmp    c000b9c5 <idleFunction(void*)+0x4c>
c000b9d1:	fb                   	sti    
c000b9d2:	f4                   	hlt    
c000b9d3:	e8 f8 3c 01 00       	call   c001f6d0 <idleCommon()>
c000b9d8:	eb f7                	jmp    c000b9d1 <idleFunction(void*)+0x58>

c000b9da <IDTEntry::IDTEntry(bool)>:
c000b9da:	83 ec 04             	sub    esp,0x4
c000b9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9e1:	88 04 24             	mov    BYTE PTR [esp],al
c000b9e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9f2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9fa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9fd:	83 e2 f0             	and    edx,0xfffffff0
c000ba00:	83 ca 0e             	or     edx,0xe
c000ba03:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba0a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba0d:	83 e2 ef             	and    edx,0xffffffef
c000ba10:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba13:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba17:	74 04                	je     c000ba1d <IDTEntry::IDTEntry(bool)+0x43>
c000ba19:	b2 03                	mov    dl,0x3
c000ba1b:	eb 02                	jmp    c000ba1f <IDTEntry::IDTEntry(bool)+0x45>
c000ba1d:	b2 00                	mov    dl,0x0
c000ba1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba23:	83 e2 03             	and    edx,0x3
c000ba26:	88 d1                	mov    cl,dl
c000ba28:	c1 e1 05             	shl    ecx,0x5
c000ba2b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba2e:	83 e2 9f             	and    edx,0xffffff9f
c000ba31:	09 ca                	or     edx,ecx
c000ba33:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba3a:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba3d:	83 ca 80             	or     edx,0xffffff80
c000ba40:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba43:	90                   	nop
c000ba44:	83 c4 04             	add    esp,0x4
c000ba47:	c3                   	ret    

c000ba48 <IDTEntry::setOffset(unsigned int)>:
c000ba48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba50:	66 89 02             	mov    WORD PTR [edx],ax
c000ba53:	c1 e8 10             	shr    eax,0x10
c000ba56:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba5a:	c3                   	ret    
c000ba5b:	90                   	nop

c000ba5c <IDT::IDT()>:
c000ba5c:	90                   	nop
c000ba5d:	c3                   	ret    

c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba62:	83 c0 30             	add    eax,0x30
c000ba65:	c3                   	ret    

c000ba66 <IDT::addEntry(IDTEntry, int)>:
c000ba66:	53                   	push   ebx
c000ba67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba77:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba7a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba7e:	5b                   	pop    ebx
c000ba7f:	c3                   	ret    

c000ba80 <IDT::addEntry(int, void (*)(), bool)>:
c000ba80:	53                   	push   ebx
c000ba81:	83 ec 10             	sub    esp,0x10
c000ba84:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba89:	50                   	push   eax
c000ba8a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba8e:	53                   	push   ebx
c000ba8f:	e8 46 ff ff ff       	call   c000b9da <IDTEntry::IDTEntry(bool)>
c000ba94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba98:	53                   	push   ebx
c000ba99:	e8 aa ff ff ff       	call   c000ba48 <IDTEntry::setOffset(unsigned int)>
c000ba9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000baa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000baaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baae:	e8 b3 ff ff ff       	call   c000ba66 <IDT::addEntry(IDTEntry, int)>
c000bab3:	83 c4 30             	add    esp,0x30
c000bab6:	5b                   	pop    ebx
c000bab7:	c3                   	ret    

c000bab8 <IDT::flush()>:
c000bab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000babc:	66 c7 05 d8 45 02 c0 ff 07 	mov    WORD PTR ds:0xc00245d8,0x7ff
c000bac5:	a3 da 45 02 c0       	mov    ds:0xc00245da,eax
c000baca:	0f 01 1d d8 45 02 c0 	lidtd  ds:0xc00245d8
c000bad1:	c3                   	ret    

c000bad2 <IDT::setup()>:
c000bad2:	57                   	push   edi
c000bad3:	56                   	push   esi
c000bad4:	53                   	push   ebx
c000bad5:	83 ec 10             	sub    esp,0x10
c000bad8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000badc:	6a 00                	push   0x0
c000bade:	68 05 04 00 c0       	push   0xc0000405
c000bae3:	6a 00                	push   0x0
c000bae5:	53                   	push   ebx
c000bae6:	e8 95 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000baeb:	6a 00                	push   0x0
c000baed:	68 15 04 00 c0       	push   0xc0000415
c000baf2:	6a 01                	push   0x1
c000baf4:	53                   	push   ebx
c000baf5:	e8 86 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bafa:	83 c4 20             	add    esp,0x20
c000bafd:	6a 00                	push   0x0
c000baff:	68 1f 04 00 c0       	push   0xc000041f
c000bb04:	6a 02                	push   0x2
c000bb06:	53                   	push   ebx
c000bb07:	e8 74 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb0c:	6a 00                	push   0x0
c000bb0e:	68 29 04 00 c0       	push   0xc0000429
c000bb13:	6a 03                	push   0x3
c000bb15:	53                   	push   ebx
c000bb16:	e8 65 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb1b:	83 c4 20             	add    esp,0x20
c000bb1e:	6a 00                	push   0x0
c000bb20:	68 33 04 00 c0       	push   0xc0000433
c000bb25:	6a 04                	push   0x4
c000bb27:	53                   	push   ebx
c000bb28:	e8 53 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb2d:	6a 00                	push   0x0
c000bb2f:	68 3d 04 00 c0       	push   0xc000043d
c000bb34:	6a 05                	push   0x5
c000bb36:	53                   	push   ebx
c000bb37:	e8 44 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb3c:	83 c4 20             	add    esp,0x20
c000bb3f:	6a 00                	push   0x0
c000bb41:	68 47 04 00 c0       	push   0xc0000447
c000bb46:	6a 06                	push   0x6
c000bb48:	53                   	push   ebx
c000bb49:	e8 32 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb4e:	6a 00                	push   0x0
c000bb50:	68 51 04 00 c0       	push   0xc0000451
c000bb55:	6a 07                	push   0x7
c000bb57:	53                   	push   ebx
c000bb58:	e8 23 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb5d:	83 c4 20             	add    esp,0x20
c000bb60:	6a 00                	push   0x0
c000bb62:	68 5b 04 00 c0       	push   0xc000045b
c000bb67:	6a 08                	push   0x8
c000bb69:	53                   	push   ebx
c000bb6a:	e8 11 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb6f:	6a 00                	push   0x0
c000bb71:	68 63 04 00 c0       	push   0xc0000463
c000bb76:	6a 09                	push   0x9
c000bb78:	53                   	push   ebx
c000bb79:	e8 02 ff ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb7e:	83 c4 20             	add    esp,0x20
c000bb81:	6a 00                	push   0x0
c000bb83:	68 6d 04 00 c0       	push   0xc000046d
c000bb88:	6a 0a                	push   0xa
c000bb8a:	53                   	push   ebx
c000bb8b:	e8 f0 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb90:	6a 00                	push   0x0
c000bb92:	68 75 04 00 c0       	push   0xc0000475
c000bb97:	6a 0b                	push   0xb
c000bb99:	53                   	push   ebx
c000bb9a:	e8 e1 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bb9f:	83 c4 20             	add    esp,0x20
c000bba2:	6a 00                	push   0x0
c000bba4:	68 7d 04 00 c0       	push   0xc000047d
c000bba9:	6a 0c                	push   0xc
c000bbab:	53                   	push   ebx
c000bbac:	e8 cf fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbb1:	6a 00                	push   0x0
c000bbb3:	68 85 04 00 c0       	push   0xc0000485
c000bbb8:	6a 0d                	push   0xd
c000bbba:	53                   	push   ebx
c000bbbb:	e8 c0 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbc0:	83 c4 20             	add    esp,0x20
c000bbc3:	6a 00                	push   0x0
c000bbc5:	68 8d 04 00 c0       	push   0xc000048d
c000bbca:	6a 0e                	push   0xe
c000bbcc:	53                   	push   ebx
c000bbcd:	e8 ae fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbd2:	6a 00                	push   0x0
c000bbd4:	68 95 04 00 c0       	push   0xc0000495
c000bbd9:	6a 0f                	push   0xf
c000bbdb:	53                   	push   ebx
c000bbdc:	e8 9f fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbe1:	83 c4 20             	add    esp,0x20
c000bbe4:	6a 00                	push   0x0
c000bbe6:	68 9f 04 00 c0       	push   0xc000049f
c000bbeb:	6a 10                	push   0x10
c000bbed:	53                   	push   ebx
c000bbee:	e8 8d fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bbf3:	6a 00                	push   0x0
c000bbf5:	68 a9 04 00 c0       	push   0xc00004a9
c000bbfa:	6a 11                	push   0x11
c000bbfc:	53                   	push   ebx
c000bbfd:	e8 7e fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc02:	83 c4 20             	add    esp,0x20
c000bc05:	6a 00                	push   0x0
c000bc07:	68 b3 04 00 c0       	push   0xc00004b3
c000bc0c:	6a 12                	push   0x12
c000bc0e:	53                   	push   ebx
c000bc0f:	e8 6c fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc14:	6a 01                	push   0x1
c000bc16:	68 bd 04 00 c0       	push   0xc00004bd
c000bc1b:	6a 60                	push   0x60
c000bc1d:	53                   	push   ebx
c000bc1e:	e8 5d fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc23:	83 c4 20             	add    esp,0x20
c000bc26:	6a 00                	push   0x0
c000bc28:	68 c7 04 00 c0       	push   0xc00004c7
c000bc2d:	6a 20                	push   0x20
c000bc2f:	53                   	push   ebx
c000bc30:	e8 4b fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc35:	6a 00                	push   0x0
c000bc37:	68 d1 04 00 c0       	push   0xc00004d1
c000bc3c:	6a 21                	push   0x21
c000bc3e:	53                   	push   ebx
c000bc3f:	e8 3c fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc44:	83 c4 20             	add    esp,0x20
c000bc47:	6a 00                	push   0x0
c000bc49:	68 db 04 00 c0       	push   0xc00004db
c000bc4e:	6a 22                	push   0x22
c000bc50:	53                   	push   ebx
c000bc51:	e8 2a fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc56:	6a 00                	push   0x0
c000bc58:	68 e5 04 00 c0       	push   0xc00004e5
c000bc5d:	6a 23                	push   0x23
c000bc5f:	53                   	push   ebx
c000bc60:	e8 1b fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc65:	83 c4 20             	add    esp,0x20
c000bc68:	6a 00                	push   0x0
c000bc6a:	68 ef 04 00 c0       	push   0xc00004ef
c000bc6f:	6a 24                	push   0x24
c000bc71:	53                   	push   ebx
c000bc72:	e8 09 fe ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc77:	6a 00                	push   0x0
c000bc79:	68 f9 04 00 c0       	push   0xc00004f9
c000bc7e:	6a 25                	push   0x25
c000bc80:	53                   	push   ebx
c000bc81:	e8 fa fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc86:	83 c4 20             	add    esp,0x20
c000bc89:	6a 00                	push   0x0
c000bc8b:	68 03 05 00 c0       	push   0xc0000503
c000bc90:	6a 26                	push   0x26
c000bc92:	53                   	push   ebx
c000bc93:	e8 e8 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bc98:	6a 00                	push   0x0
c000bc9a:	68 0d 05 00 c0       	push   0xc000050d
c000bc9f:	6a 27                	push   0x27
c000bca1:	53                   	push   ebx
c000bca2:	e8 d9 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bca7:	83 c4 20             	add    esp,0x20
c000bcaa:	6a 00                	push   0x0
c000bcac:	68 17 05 00 c0       	push   0xc0000517
c000bcb1:	6a 28                	push   0x28
c000bcb3:	53                   	push   ebx
c000bcb4:	e8 c7 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcb9:	6a 00                	push   0x0
c000bcbb:	68 21 05 00 c0       	push   0xc0000521
c000bcc0:	6a 29                	push   0x29
c000bcc2:	53                   	push   ebx
c000bcc3:	e8 b8 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcc8:	83 c4 20             	add    esp,0x20
c000bccb:	6a 00                	push   0x0
c000bccd:	68 2b 05 00 c0       	push   0xc000052b
c000bcd2:	6a 2a                	push   0x2a
c000bcd4:	53                   	push   ebx
c000bcd5:	e8 a6 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcda:	6a 00                	push   0x0
c000bcdc:	68 35 05 00 c0       	push   0xc0000535
c000bce1:	6a 2b                	push   0x2b
c000bce3:	53                   	push   ebx
c000bce4:	e8 97 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bce9:	83 c4 20             	add    esp,0x20
c000bcec:	6a 00                	push   0x0
c000bcee:	68 3f 05 00 c0       	push   0xc000053f
c000bcf3:	6a 2c                	push   0x2c
c000bcf5:	53                   	push   ebx
c000bcf6:	e8 85 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bcfb:	6a 00                	push   0x0
c000bcfd:	68 49 05 00 c0       	push   0xc0000549
c000bd02:	6a 2d                	push   0x2d
c000bd04:	53                   	push   ebx
c000bd05:	e8 76 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd0a:	83 c4 20             	add    esp,0x20
c000bd0d:	6a 00                	push   0x0
c000bd0f:	68 53 05 00 c0       	push   0xc0000553
c000bd14:	6a 2e                	push   0x2e
c000bd16:	53                   	push   ebx
c000bd17:	e8 64 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd1c:	6a 00                	push   0x0
c000bd1e:	68 5d 05 00 c0       	push   0xc000055d
c000bd23:	6a 2f                	push   0x2f
c000bd25:	53                   	push   ebx
c000bd26:	e8 55 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd2b:	83 c4 20             	add    esp,0x20
c000bd2e:	6a 00                	push   0x0
c000bd30:	68 67 05 00 c0       	push   0xc0000567
c000bd35:	6a 30                	push   0x30
c000bd37:	53                   	push   ebx
c000bd38:	e8 43 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd3d:	6a 00                	push   0x0
c000bd3f:	68 71 05 00 c0       	push   0xc0000571
c000bd44:	6a 31                	push   0x31
c000bd46:	53                   	push   ebx
c000bd47:	e8 34 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd4c:	83 c4 20             	add    esp,0x20
c000bd4f:	6a 00                	push   0x0
c000bd51:	68 7b 05 00 c0       	push   0xc000057b
c000bd56:	6a 32                	push   0x32
c000bd58:	53                   	push   ebx
c000bd59:	e8 22 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd5e:	6a 00                	push   0x0
c000bd60:	68 85 05 00 c0       	push   0xc0000585
c000bd65:	6a 33                	push   0x33
c000bd67:	53                   	push   ebx
c000bd68:	e8 13 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd6d:	83 c4 20             	add    esp,0x20
c000bd70:	6a 00                	push   0x0
c000bd72:	68 8f 05 00 c0       	push   0xc000058f
c000bd77:	6a 34                	push   0x34
c000bd79:	53                   	push   ebx
c000bd7a:	e8 01 fd ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd7f:	6a 00                	push   0x0
c000bd81:	68 99 05 00 c0       	push   0xc0000599
c000bd86:	6a 35                	push   0x35
c000bd88:	53                   	push   ebx
c000bd89:	e8 f2 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bd8e:	83 c4 20             	add    esp,0x20
c000bd91:	6a 00                	push   0x0
c000bd93:	68 a3 05 00 c0       	push   0xc00005a3
c000bd98:	6a 36                	push   0x36
c000bd9a:	53                   	push   ebx
c000bd9b:	e8 e0 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bda0:	6a 00                	push   0x0
c000bda2:	68 ad 05 00 c0       	push   0xc00005ad
c000bda7:	6a 37                	push   0x37
c000bda9:	53                   	push   ebx
c000bdaa:	e8 d1 fc ff ff       	call   c000ba80 <IDT::addEntry(int, void (*)(), bool)>
c000bdaf:	83 c4 20             	add    esp,0x20
c000bdb2:	e8 14 25 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bdb7:	52                   	push   edx
c000bdb8:	6a 03                	push   0x3
c000bdba:	6a 02                	push   0x2
c000bdbc:	50                   	push   eax
c000bdbd:	e8 4a 2b 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bdc2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdc9:	89 c6                	mov    esi,eax
c000bdcb:	e8 54 32 00 00       	call   c000f024 <operator new(unsigned long)>
c000bdd0:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdd6:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdd9:	89 c7                	mov    edi,eax
c000bddb:	e8 ee 1c 00 00       	call   c000dace <TSS::TSS()>
c000bde0:	83 c4 0c             	add    esp,0xc
c000bde3:	68 5b 04 00 c0       	push   0xc000045b
c000bde8:	56                   	push   esi
c000bde9:	57                   	push   edi
c000bdea:	e8 1f 1d 00 00       	call   c000db0e <TSS::setup(unsigned long, unsigned long)>
c000bdef:	59                   	pop    ecx
c000bdf0:	89 c6                	mov    esi,eax
c000bdf2:	5f                   	pop    edi
c000bdf3:	6a 00                	push   0x0
c000bdf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bdf9:	50                   	push   eax
c000bdfa:	e8 db fb ff ff       	call   c000b9da <IDTEntry::IDTEntry(bool)>
c000bdff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be03:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000be08:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be0e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be15:	80 ce 05             	or     dh,0x5
c000be18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be20:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be27:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be2d:	e8 86 fc ff ff       	call   c000bab8 <IDT::flush()>
c000be32:	83 c4 20             	add    esp,0x20
c000be35:	5b                   	pop    ebx
c000be36:	5e                   	pop    esi
c000be37:	5f                   	pop    edi
c000be38:	c3                   	ret    

c000be39 <sbrk>:
c000be39:	55                   	push   ebp
c000be3a:	57                   	push   edi
c000be3b:	56                   	push   esi
c000be3c:	53                   	push   ebx
c000be3d:	83 ec 1c             	sub    esp,0x1c
c000be40:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be44:	85 db                	test   ebx,ebx
c000be46:	a1 e0 39 02 c0       	mov    eax,ds:0xc00239e0
c000be4b:	0f 84 e4 00 00 00    	je     c000bf35 <sbrk+0xfc>
c000be51:	78 3d                	js     c000be90 <sbrk+0x57>
c000be53:	e8 c4 89 00 00       	call   c001481c <thisCPU()>
c000be58:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be5e:	83 e0 01             	and    eax,0x1
c000be61:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be65:	a1 e0 39 02 c0       	mov    eax,ds:0xc00239e0
c000be6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be6e:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be74:	89 d8                	mov    eax,ebx
c000be76:	c1 f8 1f             	sar    eax,0x1f
c000be79:	25 ff 0f 00 00       	and    eax,0xfff
c000be7e:	01 c3                	add    ebx,eax
c000be80:	c1 fb 0c             	sar    ebx,0xc
c000be83:	89 df                	mov    edi,ebx
c000be85:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be89:	be 00 00 00 00       	mov    esi,0x0
c000be8e:	eb 2a                	jmp    c000beba <sbrk+0x81>
c000be90:	83 ec 08             	sub    esp,0x8
c000be93:	53                   	push   ebx
c000be94:	68 e4 11 02 c0       	push   0xc00211e4
c000be99:	e8 bb 32 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000be9e:	83 c4 10             	add    esp,0x10
c000bea1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bea6:	e9 8a 00 00 00       	jmp    c000bf35 <sbrk+0xfc>
c000beab:	81 05 e0 39 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00239e0,0x1000
c000beb5:	46                   	inc    esi
c000beb6:	39 f7                	cmp    edi,esi
c000beb8:	74 34                	je     c000beee <sbrk+0xb5>
c000beba:	e8 0c 24 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bebf:	89 c3                	mov    ebx,eax
c000bec1:	8b 2d e0 39 02 c0    	mov    ebp,DWORD PTR ds:0xc00239e0
c000bec7:	e8 f5 06 00 00       	call   c000c5c1 <Phys::allocatePage()>
c000becc:	68 01 04 00 00       	push   0x401
c000bed1:	55                   	push   ebp
c000bed2:	50                   	push   eax
c000bed3:	53                   	push   ebx
c000bed4:	e8 31 29 00 00       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee1:	74 c8                	je     c000beab <sbrk+0x72>
c000bee3:	8b 1d e0 39 02 c0    	mov    ebx,DWORD PTR ds:0xc00239e0
c000bee9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000beec:	eb bd                	jmp    c000beab <sbrk+0x72>
c000beee:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bef3:	74 48                	je     c000bf3d <sbrk+0x104>
c000bef5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bef9:	89 d3                	mov    ebx,edx
c000befb:	c1 eb 0a             	shr    ebx,0xa
c000befe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf04:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf0e:	c1 e0 0c             	shl    eax,0xc
c000bf11:	01 d0                	add    eax,edx
c000bf13:	c1 e8 0a             	shr    eax,0xa
c000bf16:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf1b:	2d 00 00 40 00       	sub    eax,0x400000
c000bf20:	39 c3                	cmp    ebx,eax
c000bf22:	77 0d                	ja     c000bf31 <sbrk+0xf8>
c000bf24:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf27:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf2d:	39 d8                	cmp    eax,ebx
c000bf2f:	73 f3                	jae    c000bf24 <sbrk+0xeb>
c000bf31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf35:	83 c4 1c             	add    esp,0x1c
c000bf38:	5b                   	pop    ebx
c000bf39:	5e                   	pop    esi
c000bf3a:	5f                   	pop    edi
c000bf3b:	5d                   	pop    ebp
c000bf3c:	c3                   	ret    
c000bf3d:	e8 a3 37 01 00       	call   c001f6e5 <CPU::readCR3()>
c000bf42:	83 ec 0c             	sub    esp,0xc
c000bf45:	50                   	push   eax
c000bf46:	e8 ac 37 01 00       	call   c001f6f7 <CPU::writeCR3(unsigned long)>
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	eb e1                	jmp    c000bf31 <sbrk+0xf8>

c000bf50 <mmap>:
c000bf50:	83 ec 18             	sub    esp,0x18
c000bf53:	68 14 12 02 c0       	push   0xc0021214
c000bf58:	e8 2b 9a 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000bf5d:	b8 00 00 00 00       	mov    eax,0x0
c000bf62:	83 c4 1c             	add    esp,0x1c
c000bf65:	c3                   	ret    

c000bf66 <munmap>:
c000bf66:	83 ec 18             	sub    esp,0x18
c000bf69:	68 19 12 02 c0       	push   0xc0021219
c000bf6e:	e8 15 9a 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000bf73:	b8 00 00 00 00       	mov    eax,0x0
c000bf78:	83 c4 1c             	add    esp,0x1c
c000bf7b:	c3                   	ret    

c000bf7c <liballoc_lock()>:
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	e8 f1 c9 00 00       	call   c0018975 <lockScheduler()>
c000bf84:	b8 00 00 00 00       	mov    eax,0x0
c000bf89:	83 c4 0c             	add    esp,0xc
c000bf8c:	c3                   	ret    

c000bf8d <liballoc_unlock()>:
c000bf8d:	83 ec 0c             	sub    esp,0xc
c000bf90:	e8 e2 c9 00 00       	call   c0018977 <unlockScheduler()>
c000bf95:	b8 00 00 00 00       	mov    eax,0x0
c000bf9a:	83 c4 0c             	add    esp,0xc
c000bf9d:	c3                   	ret    

c000bf9e <liballoc_alloc(int)>:
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	e8 25 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bfa6:	83 ec 04             	sub    esp,0x4
c000bfa9:	6a 01                	push   0x1
c000bfab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfaf:	50                   	push   eax
c000bfb0:	e8 57 29 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bfb5:	83 c4 1c             	add    esp,0x1c
c000bfb8:	c3                   	ret    

c000bfb9 <liballoc_free(void*, int)>:
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	e8 0a 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bfc1:	83 ec 08             	sub    esp,0x8
c000bfc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc8:	50                   	push   eax
c000bfc9:	e8 de 25 00 00       	call   c000e5ac <VAS::freeAllocatedPages(unsigned long)>
c000bfce:	b8 00 00 00 00       	mov    eax,0x0
c000bfd3:	83 c4 1c             	add    esp,0x1c
c000bfd6:	c3                   	ret    

c000bfd7 <realloc>:
c000bfd7:	83 ec 14             	sub    esp,0x14
c000bfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe2:	e8 51 54 ff ff       	call   c0001438 <dlrealloc>
c000bfe7:	83 c4 1c             	add    esp,0x1c
c000bfea:	c3                   	ret    

c000bfeb <malloc>:
c000bfeb:	83 ec 18             	sub    esp,0x18
c000bfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff2:	e8 04 4f ff ff       	call   c0000efb <dlmalloc>
c000bff7:	83 c4 1c             	add    esp,0x1c
c000bffa:	c3                   	ret    

c000bffb <free>:
c000bffb:	83 ec 18             	sub    esp,0x18
c000bffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c002:	e8 96 4b ff ff       	call   c0000b9d <dlfree>
c000c007:	83 c4 1c             	add    esp,0x1c
c000c00a:	c3                   	ret    

c000c00b <rfree>:
c000c00b:	83 ec 18             	sub    esp,0x18
c000c00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c012:	e8 e4 ff ff ff       	call   c000bffb <free>
c000c017:	83 c4 1c             	add    esp,0x1c
c000c01a:	c3                   	ret    

c000c01b <calloc>:
c000c01b:	56                   	push   esi
c000c01c:	53                   	push   ebx
c000c01d:	83 ec 10             	sub    esp,0x10
c000c020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c024:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c029:	53                   	push   ebx
c000c02a:	e8 bc ff ff ff       	call   c000bfeb <malloc>
c000c02f:	89 c6                	mov    esi,eax
c000c031:	83 c4 0c             	add    esp,0xc
c000c034:	53                   	push   ebx
c000c035:	6a 00                	push   0x0
c000c037:	50                   	push   eax
c000c038:	e8 7d 46 ff ff       	call   c00006ba <memset>
c000c03d:	89 f0                	mov    eax,esi
c000c03f:	83 c4 14             	add    esp,0x14
c000c042:	5b                   	pop    ebx
c000c043:	5e                   	pop    esi
c000c044:	c3                   	ret    

c000c045 <hwTextMode_loadInData(VgaText*)>:
c000c045:	57                   	push   edi
c000c046:	56                   	push   esi
c000c047:	53                   	push   ebx
c000c048:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c04c:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c052:	85 c0                	test   eax,eax
c000c054:	7e 30                	jle    c000c086 <hwTextMode_loadInData(VgaText*)+0x41>
c000c056:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c059:	31 f6                	xor    esi,esi
c000c05b:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c05e:	31 c0                	xor    eax,eax
c000c060:	c1 e1 05             	shl    ecx,0x5
c000c063:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c069:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c06d:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c071:	40                   	inc    eax
c000c072:	83 f8 50             	cmp    eax,0x50
c000c075:	75 f2                	jne    c000c069 <hwTextMode_loadInData(VgaText*)+0x24>
c000c077:	46                   	inc    esi
c000c078:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c07e:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c084:	7f d5                	jg     c000c05b <hwTextMode_loadInData(VgaText*)+0x16>
c000c086:	5b                   	pop    ebx
c000c087:	5e                   	pop    esi
c000c088:	5f                   	pop    edi
c000c089:	c3                   	ret    

c000c08a <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c08a:	56                   	push   esi
c000c08b:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c090:	53                   	push   ebx
c000c091:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c095:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c099:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c09f:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c0a5:	c1 e0 04             	shl    eax,0x4
c000c0a8:	83 e6 0f             	and    esi,0xf
c000c0ab:	25 ff 00 00 00       	and    eax,0xff
c000c0b0:	83 c2 02             	add    edx,0x2
c000c0b3:	09 f0                	or     eax,esi
c000c0b5:	41                   	inc    ecx
c000c0b6:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0ba:	c1 e0 08             	shl    eax,0x8
c000c0bd:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0c3:	09 f0                	or     eax,esi
c000c0c5:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0c9:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0cf:	75 c8                	jne    c000c099 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0d1:	5b                   	pop    ebx
c000c0d2:	5e                   	pop    esi
c000c0d3:	c3                   	ret    

c000c0d4 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0d4:	56                   	push   esi
c000c0d5:	53                   	push   ebx
c000c0d6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0db:	74 38                	je     c000c115 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0dd:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0e2:	b0 0a                	mov    al,0xa
c000c0e4:	89 da                	mov    edx,ebx
c000c0e6:	ee                   	out    dx,al
c000c0e7:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0ec:	89 ca                	mov    edx,ecx
c000c0ee:	ec                   	in     al,dx
c000c0ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0f3:	b2 0f                	mov    dl,0xf
c000c0f5:	83 e0 c0             	and    eax,0xffffffc0
c000c0f8:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0fe:	09 d0                	or     eax,edx
c000c100:	89 ca                	mov    edx,ecx
c000c102:	ee                   	out    dx,al
c000c103:	b0 0b                	mov    al,0xb
c000c105:	89 da                	mov    edx,ebx
c000c107:	ee                   	out    dx,al
c000c108:	89 ca                	mov    edx,ecx
c000c10a:	ec                   	in     al,dx
c000c10b:	83 e0 e0             	and    eax,0xffffffe0
c000c10e:	83 c8 0f             	or     eax,0xf
c000c111:	ee                   	out    dx,al
c000c112:	5b                   	pop    ebx
c000c113:	5e                   	pop    esi
c000c114:	c3                   	ret    
c000c115:	b0 0a                	mov    al,0xa
c000c117:	ba d4 03 00 00       	mov    edx,0x3d4
c000c11c:	ee                   	out    dx,al
c000c11d:	b0 20                	mov    al,0x20
c000c11f:	ba d5 03 00 00       	mov    edx,0x3d5
c000c124:	ee                   	out    dx,al
c000c125:	5b                   	pop    ebx
c000c126:	5e                   	pop    esi
c000c127:	c3                   	ret    

c000c128 <hwTextMode_update(VgaText*)>:
c000c128:	c3                   	ret    

c000c129 <hwTextMode_updateCursor(VgaText*)>:
c000c129:	56                   	push   esi
c000c12a:	b9 19 00 00 00       	mov    ecx,0x19
c000c12f:	53                   	push   ebx
c000c130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c134:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c13a:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c140:	29 d1                	sub    ecx,edx
c000c142:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c148:	01 d9                	add    ecx,ebx
c000c14a:	b0 0f                	mov    al,0xf
c000c14c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c14f:	c1 e1 04             	shl    ecx,0x4
c000c152:	01 f1                	add    ecx,esi
c000c154:	be d4 03 00 00       	mov    esi,0x3d4
c000c159:	89 f2                	mov    edx,esi
c000c15b:	ee                   	out    dx,al
c000c15c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c161:	88 c8                	mov    al,cl
c000c163:	89 da                	mov    edx,ebx
c000c165:	ee                   	out    dx,al
c000c166:	b0 0e                	mov    al,0xe
c000c168:	89 f2                	mov    edx,esi
c000c16a:	ee                   	out    dx,al
c000c16b:	89 c8                	mov    eax,ecx
c000c16d:	89 da                	mov    edx,ebx
c000c16f:	66 c1 e8 08          	shr    ax,0x8
c000c173:	ee                   	out    dx,al
c000c174:	5b                   	pop    ebx
c000c175:	5e                   	pop    esi
c000c176:	c3                   	ret    

c000c177 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c177:	ba da 03 00 00       	mov    edx,0x3da
c000c17c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c181:	75 18                	jne    c000c19b <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c183:	ec                   	in     al,dx
c000c184:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c189:	b0 30                	mov    al,0x30
c000c18b:	89 ca                	mov    edx,ecx
c000c18d:	ee                   	out    dx,al
c000c18e:	ba c1 03 00 00       	mov    edx,0x3c1
c000c193:	ec                   	in     al,dx
c000c194:	83 c8 08             	or     eax,0x8
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	c3                   	ret    
c000c19b:	ec                   	in     al,dx
c000c19c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c1a1:	b0 30                	mov    al,0x30
c000c1a3:	89 ca                	mov    edx,ecx
c000c1a5:	ee                   	out    dx,al
c000c1a6:	ba c1 03 00 00       	mov    edx,0x3c1
c000c1ab:	ec                   	in     al,dx
c000c1ac:	83 e0 f7             	and    eax,0xfffffff7
c000c1af:	89 ca                	mov    edx,ecx
c000c1b1:	ee                   	out    dx,al
c000c1b2:	c3                   	ret    

c000c1b3 <hwTextMode_scrollScreen(VgaText*)>:
c000c1b3:	55                   	push   ebp
c000c1b4:	bd 02 00 00 00       	mov    ebp,0x2
c000c1b9:	57                   	push   edi
c000c1ba:	56                   	push   esi
c000c1bb:	53                   	push   ebx
c000c1bc:	83 ec 1c             	sub    esp,0x1c
c000c1bf:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1c7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1cb:	31 c0                	xor    eax,eax
c000c1cd:	eb 0b                	jmp    c000c1da <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1cf:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1d5:	74 58                	je     c000c22f <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1d7:	43                   	inc    ebx
c000c1d8:	89 f0                	mov    eax,esi
c000c1da:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1e0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1e6:	88 13                	mov    BYTE PTR [ebx],dl
c000c1e8:	8d 70 01             	lea    esi,[eax+0x1]
c000c1eb:	83 fd 18             	cmp    ebp,0x18
c000c1ee:	75 df                	jne    c000c1cf <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1f0:	a8 01                	test   al,0x1
c000c1f2:	75 13                	jne    c000c207 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1f4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1f7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1fd:	75 d8                	jne    c000c1d7 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1ff:	83 c4 1c             	add    esp,0x1c
c000c202:	5b                   	pop    ebx
c000c203:	5e                   	pop    esi
c000c204:	5f                   	pop    edi
c000c205:	5d                   	pop    ebp
c000c206:	c3                   	ret    
c000c207:	52                   	push   edx
c000c208:	31 c0                	xor    eax,eax
c000c20a:	52                   	push   edx
c000c20b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c20f:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c215:	50                   	push   eax
c000c216:	31 c0                	xor    eax,eax
c000c218:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c21c:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c222:	50                   	push   eax
c000c223:	e8 84 0b 00 00       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	88 07                	mov    BYTE PTR [edi],al
c000c22d:	eb c8                	jmp    c000c1f7 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c22f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c233:	45                   	inc    ebp
c000c234:	05 a0 00 00 00       	add    eax,0xa0
c000c239:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c23d:	eb 88                	jmp    c000c1c7 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c23f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c23f:	56                   	push   esi
c000c240:	31 c0                	xor    eax,eax
c000c242:	53                   	push   ebx
c000c243:	83 ec 0c             	sub    esp,0xc
c000c246:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c24a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c24e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c252:	50                   	push   eax
c000c253:	31 c0                	xor    eax,eax
c000c255:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c259:	50                   	push   eax
c000c25a:	e8 4d 0b 00 00       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000c25f:	5a                   	pop    edx
c000c260:	25 ff 00 00 00       	and    eax,0xff
c000c265:	59                   	pop    ecx
c000c266:	50                   	push   eax
c000c267:	89 f0                	mov    eax,esi
c000c269:	0f be f0             	movsx  esi,al
c000c26c:	56                   	push   esi
c000c26d:	e8 e0 0b 00 00       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000c272:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c276:	ba 19 00 00 00       	mov    edx,0x19
c000c27b:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c281:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c284:	29 f2                	sub    edx,esi
c000c286:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c28a:	c1 e1 04             	shl    ecx,0x4
c000c28d:	8d 14 92             	lea    edx,[edx+edx*4]
c000c290:	01 d9                	add    ecx,ebx
c000c292:	c1 e2 04             	shl    edx,0x4
c000c295:	01 ca                	add    edx,ecx
c000c297:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c29f:	83 c4 14             	add    esp,0x14
c000c2a2:	5b                   	pop    ebx
c000c2a3:	5e                   	pop    esi
c000c2a4:	c3                   	ret    

c000c2a5 <setupTextMode()>:
c000c2a5:	c7 05 78 46 02 c0 77 c1 00 c0 	mov    DWORD PTR ds:0xc0024678,0xc000c177
c000c2af:	c7 05 64 46 02 c0 45 c0 00 c0 	mov    DWORD PTR ds:0xc0024664,0xc000c045
c000c2b9:	c7 05 60 46 02 c0 8a c0 00 c0 	mov    DWORD PTR ds:0xc0024660,0xc000c08a
c000c2c3:	c7 05 6c 46 02 c0 b3 c1 00 c0 	mov    DWORD PTR ds:0xc002466c,0xc000c1b3
c000c2cd:	c7 05 74 46 02 c0 d4 c0 00 c0 	mov    DWORD PTR ds:0xc0024674,0xc000c0d4
c000c2d7:	c7 05 68 46 02 c0 28 c1 00 c0 	mov    DWORD PTR ds:0xc0024668,0xc000c128
c000c2e1:	c7 05 70 46 02 c0 29 c1 00 c0 	mov    DWORD PTR ds:0xc0024670,0xc000c129
c000c2eb:	c7 05 7c 46 02 c0 3f c2 00 c0 	mov    DWORD PTR ds:0xc002467c,0xc000c23f
c000c2f5:	c3                   	ret    

c000c2f6 <kernel_main>:
c000c2f6:	57                   	push   edi
c000c2f7:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2fc:	56                   	push   esi
c000c2fd:	31 f6                	xor    esi,esi
c000c2ff:	53                   	push   ebx
c000c300:	83 ec 10             	sub    esp,0x10
c000c303:	e8 fe 08 00 00       	call   c000cc06 <installVgaTextImplementation()>
c000c308:	e8 98 ff ff ff       	call   c000c2a5 <setupTextMode()>
c000c30d:	89 f0                	mov    eax,esi
c000c30f:	89 fa                	mov    edx,edi
c000c311:	ee                   	out    dx,al
c000c312:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c317:	b0 80                	mov    al,0x80
c000c319:	89 da                	mov    edx,ebx
c000c31b:	ee                   	out    dx,al
c000c31c:	b1 03                	mov    cl,0x3
c000c31e:	ba f8 03 00 00       	mov    edx,0x3f8
c000c323:	88 c8                	mov    al,cl
c000c325:	ee                   	out    dx,al
c000c326:	89 f0                	mov    eax,esi
c000c328:	89 fa                	mov    edx,edi
c000c32a:	ee                   	out    dx,al
c000c32b:	88 c8                	mov    al,cl
c000c32d:	89 da                	mov    edx,ebx
c000c32f:	ee                   	out    dx,al
c000c330:	b0 c7                	mov    al,0xc7
c000c332:	ba fa 03 00 00       	mov    edx,0x3fa
c000c337:	ee                   	out    dx,al
c000c338:	b0 0b                	mov    al,0xb
c000c33a:	ba fc 03 00 00       	mov    edx,0x3fc
c000c33f:	ee                   	out    dx,al
c000c340:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c345:	83 ec 0c             	sub    esp,0xc
c000c348:	05 ff 0f 00 00       	add    eax,0xfff
c000c34d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c352:	50                   	push   eax
c000c353:	e8 6d 03 00 00       	call   c000c6c5 <Phys::physicalMemorySetup(unsigned int)>
c000c358:	e8 f2 1e 00 00       	call   c000e24f <Virt::virtualMemorySetup()>
c000c35d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c363:	83 c4 10             	add    esp,0x10
c000c366:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c36c:	75 0e                	jne    c000c37c <kernel_main+0x86>
c000c36e:	89 d8                	mov    eax,ebx
c000c370:	25 48 03 00 00       	and    eax,0x348
c000c375:	3d 00 03 00 00       	cmp    eax,0x300
c000c37a:	74 10                	je     c000c38c <kernel_main+0x96>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	68 47 27 02 c0       	push   0xc0022747
c000c384:	e8 ff 95 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	83 ec 0c             	sub    esp,0xc
c000c38f:	89 1d e0 45 02 c0    	mov    DWORD PTR ds:0xc00245e0,ebx
c000c395:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c399:	53                   	push   ebx
c000c39a:	e8 4d 20 00 00       	call   c000e3ec <VAS::VAS()>
c000c39f:	89 1d 24 47 02 c0    	mov    DWORD PTR ds:0xc0024724,ebx
c000c3a5:	e8 76 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c3aa:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3b1:	e8 6e 2c 00 00       	call   c000f024 <operator new(unsigned long)>
c000c3b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3b9:	89 c6                	mov    esi,eax
c000c3bb:	e8 64 ea ff ff       	call   c000ae24 <Computer::Computer()>
c000c3c0:	6a 00                	push   0x0
c000c3c2:	6a 00                	push   0x0
c000c3c4:	89 35 c8 45 02 c0    	mov    DWORD PTR ds:0xc00245c8,esi
c000c3ca:	6a 00                	push   0x0
c000c3cc:	56                   	push   esi
c000c3cd:	e8 5c f2 ff ff       	call   c000b62e <Computer::open(int, int, void*)>
c000c3d2:	83 c4 14             	add    esp,0x14
c000c3d5:	53                   	push   ebx
c000c3d6:	e8 c3 22 00 00       	call   c000e69e <VAS::~VAS()>
c000c3db:	c7 04 24 20 12 02 c0 	mov    DWORD PTR [esp],0xc0021220
c000c3e2:	e8 a1 95 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000c3e7:	83 c4 20             	add    esp,0x20
c000c3ea:	5b                   	pop    ebx
c000c3eb:	5e                   	pop    esi
c000c3ec:	5f                   	pop    edi
c000c3ed:	c3                   	ret    

c000c3ee <Phys::allocateDMA(unsigned long)>:
c000c3ee:	57                   	push   edi
c000c3ef:	31 d2                	xor    edx,edx
c000c3f1:	56                   	push   esi
c000c3f2:	31 ff                	xor    edi,edi
c000c3f4:	53                   	push   ebx
c000c3f5:	31 c9                	xor    ecx,ecx
c000c3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3fb:	31 f6                	xor    esi,esi
c000c3fd:	05 ff 0f 00 00       	add    eax,0xfff
c000c402:	c1 e8 0c             	shr    eax,0xc
c000c405:	eb 17                	jmp    c000c41e <Phys::allocateDMA(unsigned long)+0x30>
c000c407:	85 c9                	test   ecx,ecx
c000c409:	75 04                	jne    c000c40f <Phys::allocateDMA(unsigned long)+0x21>
c000c40b:	89 d7                	mov    edi,edx
c000c40d:	89 d6                	mov    esi,edx
c000c40f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c412:	39 d8                	cmp    eax,ebx
c000c414:	74 1f                	je     c000c435 <Phys::allocateDMA(unsigned long)+0x47>
c000c416:	42                   	inc    edx
c000c417:	89 d9                	mov    ecx,ebx
c000c419:	83 fa 2f             	cmp    edx,0x2f
c000c41c:	7f 11                	jg     c000c42f <Phys::allocateDMA(unsigned long)+0x41>
c000c41e:	80 ba 20 46 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb9e0],0x0
c000c425:	74 e0                	je     c000c407 <Phys::allocateDMA(unsigned long)+0x19>
c000c427:	31 c9                	xor    ecx,ecx
c000c429:	42                   	inc    edx
c000c42a:	83 fa 2f             	cmp    edx,0x2f
c000c42d:	7e ef                	jle    c000c41e <Phys::allocateDMA(unsigned long)+0x30>
c000c42f:	5b                   	pop    ebx
c000c430:	31 c0                	xor    eax,eax
c000c432:	5e                   	pop    esi
c000c433:	5f                   	pop    edi
c000c434:	c3                   	ret    
c000c435:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c439:	89 d3                	mov    ebx,edx
c000c43b:	c1 fb 1f             	sar    ebx,0x1f
c000c43e:	83 e3 0f             	and    ebx,0xf
c000c441:	01 d3                	add    ebx,edx
c000c443:	89 f2                	mov    edx,esi
c000c445:	c1 fb 04             	sar    ebx,0x4
c000c448:	c1 fa 04             	sar    edx,0x4
c000c44b:	39 da                	cmp    edx,ebx
c000c44d:	75 30                	jne    c000c47f <Phys::allocateDMA(unsigned long)+0x91>
c000c44f:	85 c0                	test   eax,eax
c000c451:	74 1b                	je     c000c46e <Phys::allocateDMA(unsigned long)+0x80>
c000c453:	bf 20 46 02 c0       	mov    edi,0xc0024620
c000c458:	8d 96 20 46 02 c0    	lea    edx,[esi-0x3ffdb9e0]
c000c45e:	83 f7 ff             	xor    edi,0xffffffff
c000c461:	29 f7                	sub    edi,esi
c000c463:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c466:	42                   	inc    edx
c000c467:	8d 04 17             	lea    eax,[edi+edx*1]
c000c46a:	39 c1                	cmp    ecx,eax
c000c46c:	7f f5                	jg     c000c463 <Phys::allocateDMA(unsigned long)+0x75>
c000c46e:	85 db                	test   ebx,ebx
c000c470:	74 13                	je     c000c485 <Phys::allocateDMA(unsigned long)+0x97>
c000c472:	5b                   	pop    ebx
c000c473:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c479:	c1 e0 0c             	shl    eax,0xc
c000c47c:	5e                   	pop    esi
c000c47d:	5f                   	pop    edi
c000c47e:	c3                   	ret    
c000c47f:	89 fa                	mov    edx,edi
c000c481:	31 c9                	xor    ecx,ecx
c000c483:	eb a4                	jmp    c000c429 <Phys::allocateDMA(unsigned long)+0x3b>
c000c485:	c1 e6 0c             	shl    esi,0xc
c000c488:	5b                   	pop    ebx
c000c489:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c48f:	5e                   	pop    esi
c000c490:	5f                   	pop    edi
c000c491:	c3                   	ret    

c000c492 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c492:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c49a:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c4a0:	c1 e9 0c             	shr    ecx,0xc
c000c4a3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c4a8:	76 25                	jbe    c000c4cf <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c4aa:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4af:	c1 e8 0c             	shr    eax,0xc
c000c4b2:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b5:	85 c9                	test   ecx,ecx
c000c4b7:	74 15                	je     c000c4ce <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4b9:	8d 82 20 46 02 c0    	lea    eax,[edx-0x3ffdb9e0]
c000c4bf:	8d 94 11 20 46 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb9e0]
c000c4c6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4c9:	40                   	inc    eax
c000c4ca:	39 d0                	cmp    eax,edx
c000c4cc:	75 f8                	jne    c000c4c6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4ce:	c3                   	ret    
c000c4cf:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4d5:	c1 ea 0c             	shr    edx,0xc
c000c4d8:	eb db                	jmp    c000c4b5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4da <Phys::setPageState(unsigned long, bool)>:
c000c4da:	56                   	push   esi
c000c4db:	ba 01 00 00 00       	mov    edx,0x1
c000c4e0:	53                   	push   ebx
c000c4e1:	8b 35 e4 39 02 c0    	mov    esi,DWORD PTR ds:0xc00239e4
c000c4e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4ef:	89 c8                	mov    eax,ecx
c000c4f1:	83 e1 07             	and    ecx,0x7
c000c4f4:	c1 e8 03             	shr    eax,0x3
c000c4f7:	01 c6                	add    esi,eax
c000c4f9:	d3 e2                	shl    edx,cl
c000c4fb:	83 f2 ff             	xor    edx,0xffffffff
c000c4fe:	20 16                	and    BYTE PTR [esi],dl
c000c500:	8b 15 e4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239e4
c000c506:	01 d0                	add    eax,edx
c000c508:	d3 e3                	shl    ebx,cl
c000c50a:	8a 08                	mov    cl,BYTE PTR [eax]
c000c50c:	09 d9                	or     ecx,ebx
c000c50e:	88 08                	mov    BYTE PTR [eax],cl
c000c510:	5b                   	pop    ebx
c000c511:	5e                   	pop    esi
c000c512:	c3                   	ret    

c000c513 <Phys::getPageState(unsigned long)>:
c000c513:	53                   	push   ebx
c000c514:	8b 15 e4 39 02 c0    	mov    edx,DWORD PTR ds:0xc00239e4
c000c51a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c51e:	31 db                	xor    ebx,ebx
c000c520:	89 c8                	mov    eax,ecx
c000c522:	83 e1 07             	and    ecx,0x7
c000c525:	c1 e8 03             	shr    eax,0x3
c000c528:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c52b:	89 d8                	mov    eax,ebx
c000c52d:	5b                   	pop    ebx
c000c52e:	d3 f8                	sar    eax,cl
c000c530:	83 e0 01             	and    eax,0x1
c000c533:	c3                   	ret    

c000c534 <Phys::freePage(unsigned long)>:
c000c534:	53                   	push   ebx
c000c535:	83 ec 08             	sub    esp,0x8
c000c538:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c53c:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c542:	76 5a                	jbe    c000c59e <Phys::freePage(unsigned long)+0x6a>
c000c544:	c1 eb 0c             	shr    ebx,0xc
c000c547:	53                   	push   ebx
c000c548:	e8 c6 ff ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c54d:	5a                   	pop    edx
c000c54e:	84 c0                	test   al,al
c000c550:	74 5e                	je     c000c5b0 <Phys::freePage(unsigned long)+0x7c>
c000c552:	a1 0c 46 02 c0       	mov    eax,ds:0xc002460c
c000c557:	48                   	dec    eax
c000c558:	a3 0c 46 02 c0       	mov    ds:0xc002460c,eax
c000c55d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c560:	8d 04 80             	lea    eax,[eax+eax*4]
c000c563:	c1 e0 02             	shl    eax,0x2
c000c566:	89 c2                	mov    edx,eax
c000c568:	c1 fa 1f             	sar    edx,0x1f
c000c56b:	f7 3d 10 46 02 c0    	idiv   DWORD PTR ds:0xc0024610
c000c571:	39 05 08 46 02 c0    	cmp    DWORD PTR ds:0xc0024608,eax
c000c577:	75 12                	jne    c000c58b <Phys::freePage(unsigned long)+0x57>
c000c579:	51                   	push   ecx
c000c57a:	51                   	push   ecx
c000c57b:	6a 00                	push   0x0
c000c57d:	53                   	push   ebx
c000c57e:	e8 57 ff ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c583:	83 c4 10             	add    esp,0x10
c000c586:	83 c4 08             	add    esp,0x8
c000c589:	5b                   	pop    ebx
c000c58a:	c3                   	ret    
c000c58b:	83 ec 0c             	sub    esp,0xc
c000c58e:	a3 08 46 02 c0       	mov    ds:0xc0024608,eax
c000c593:	50                   	push   eax
c000c594:	e8 01 0a 00 00       	call   c000cf9a <VgaText::updateRAMUsageDisplay(int)>
c000c599:	83 c4 10             	add    esp,0x10
c000c59c:	eb db                	jmp    c000c579 <Phys::freePage(unsigned long)+0x45>
c000c59e:	68 00 10 00 00       	push   0x1000
c000c5a3:	53                   	push   ebx
c000c5a4:	e8 e9 fe ff ff       	call   c000c492 <Phys::freeDMA(unsigned long, unsigned long)>
c000c5a9:	59                   	pop    ecx
c000c5aa:	5b                   	pop    ebx
c000c5ab:	83 c4 08             	add    esp,0x8
c000c5ae:	5b                   	pop    ebx
c000c5af:	c3                   	ret    
c000c5b0:	c7 44 24 10 3b 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002123b
c000c5b8:	83 c4 08             	add    esp,0x8
c000c5bb:	5b                   	pop    ebx
c000c5bc:	e9 c7 93 00 00       	jmp    c0015988 <Krnl::panic(char const*)>

c000c5c1 <Phys::allocatePage()>:
c000c5c1:	56                   	push   esi
c000c5c2:	53                   	push   ebx
c000c5c3:	51                   	push   ecx
c000c5c4:	8b 35 00 46 02 c0    	mov    esi,DWORD PTR ds:0xc0024600
c000c5ca:	89 f3                	mov    ebx,esi
c000c5cc:	eb 0a                	jmp    c000c5d8 <Phys::allocatePage()+0x17>
c000c5ce:	89 1d 00 46 02 c0    	mov    DWORD PTR ds:0xc0024600,ebx
c000c5d4:	39 de                	cmp    esi,ebx
c000c5d6:	74 24                	je     c000c5fc <Phys::allocatePage()+0x3b>
c000c5d8:	53                   	push   ebx
c000c5d9:	e8 35 ff ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c5de:	5a                   	pop    edx
c000c5df:	84 c0                	test   al,al
c000c5e1:	74 5a                	je     c000c63d <Phys::allocatePage()+0x7c>
c000c5e3:	43                   	inc    ebx
c000c5e4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5ea:	75 e2                	jne    c000c5ce <Phys::allocatePage()+0xd>
c000c5ec:	31 db                	xor    ebx,ebx
c000c5ee:	c7 05 00 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024600,0x0
c000c5f8:	39 de                	cmp    esi,ebx
c000c5fa:	75 dc                	jne    c000c5d8 <Phys::allocatePage()+0x17>
c000c5fc:	83 ec 0c             	sub    esp,0xc
c000c5ff:	68 51 12 02 c0       	push   0xc0021251
c000c604:	e8 50 2b 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c609:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c610:	e8 d9 fd ff ff       	call   c000c3ee <Phys::allocateDMA(unsigned long)>
c000c615:	83 c4 10             	add    esp,0x10
c000c618:	85 c0                	test   eax,eax
c000c61a:	75 5a                	jne    c000c676 <Phys::allocatePage()+0xb5>
c000c61c:	83 ec 0c             	sub    esp,0xc
c000c61f:	68 62 12 02 c0       	push   0xc0021262
c000c624:	e8 5f 93 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000c629:	83 c4 10             	add    esp,0x10
c000c62c:	8b 1d 00 46 02 c0    	mov    ebx,DWORD PTR ds:0xc0024600
c000c632:	53                   	push   ebx
c000c633:	e8 db fe ff ff       	call   c000c513 <Phys::getPageState(unsigned long)>
c000c638:	5a                   	pop    edx
c000c639:	84 c0                	test   al,al
c000c63b:	75 a6                	jne    c000c5e3 <Phys::allocatePage()+0x22>
c000c63d:	6a 01                	push   0x1
c000c63f:	53                   	push   ebx
c000c640:	e8 95 fe ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c645:	a1 0c 46 02 c0       	mov    eax,ds:0xc002460c
c000c64a:	59                   	pop    ecx
c000c64b:	40                   	inc    eax
c000c64c:	5b                   	pop    ebx
c000c64d:	a3 0c 46 02 c0       	mov    ds:0xc002460c,eax
c000c652:	8d 04 80             	lea    eax,[eax+eax*4]
c000c655:	8d 04 80             	lea    eax,[eax+eax*4]
c000c658:	c1 e0 02             	shl    eax,0x2
c000c65b:	89 c2                	mov    edx,eax
c000c65d:	c1 fa 1f             	sar    edx,0x1f
c000c660:	f7 3d 10 46 02 c0    	idiv   DWORD PTR ds:0xc0024610
c000c666:	39 05 08 46 02 c0    	cmp    DWORD PTR ds:0xc0024608,eax
c000c66c:	75 0c                	jne    c000c67a <Phys::allocatePage()+0xb9>
c000c66e:	a1 00 46 02 c0       	mov    eax,ds:0xc0024600
c000c673:	c1 e0 0c             	shl    eax,0xc
c000c676:	5a                   	pop    edx
c000c677:	5b                   	pop    ebx
c000c678:	5e                   	pop    esi
c000c679:	c3                   	ret    
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	a3 08 46 02 c0       	mov    ds:0xc0024608,eax
c000c682:	50                   	push   eax
c000c683:	e8 12 09 00 00       	call   c000cf9a <VgaText::updateRAMUsageDisplay(int)>
c000c688:	83 c4 10             	add    esp,0x10
c000c68b:	eb e1                	jmp    c000c66e <Phys::allocatePage()+0xad>

c000c68d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c68d:	56                   	push   esi
c000c68e:	53                   	push   ebx
c000c68f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c693:	39 1d 04 46 02 c0    	cmp    DWORD PTR ds:0xc0024604,ebx
c000c699:	73 06                	jae    c000c6a1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c69b:	89 1d 04 46 02 c0    	mov    DWORD PTR ds:0xc0024604,ebx
c000c6a1:	c1 eb 0c             	shr    ebx,0xc
c000c6a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6a8:	c1 e8 0c             	shr    eax,0xc
c000c6ab:	39 d8                	cmp    eax,ebx
c000c6ad:	73 13                	jae    c000c6c2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6af:	6a 00                	push   0x0
c000c6b1:	8d 70 01             	lea    esi,[eax+0x1]
c000c6b4:	50                   	push   eax
c000c6b5:	e8 20 fe ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c6ba:	5a                   	pop    edx
c000c6bb:	89 f0                	mov    eax,esi
c000c6bd:	59                   	pop    ecx
c000c6be:	39 f3                	cmp    ebx,esi
c000c6c0:	75 ed                	jne    c000c6af <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6c2:	5b                   	pop    ebx
c000c6c3:	5e                   	pop    esi
c000c6c4:	c3                   	ret    

c000c6c5 <Phys::physicalMemorySetup(unsigned int)>:
c000c6c5:	55                   	push   ebp
c000c6c6:	57                   	push   edi
c000c6c7:	56                   	push   esi
c000c6c8:	53                   	push   ebx
c000c6c9:	31 db                	xor    ebx,ebx
c000c6cb:	83 ec 40             	sub    esp,0x40
c000c6ce:	6a 30                	push   0x30
c000c6d0:	6a 00                	push   0x0
c000c6d2:	68 20 46 02 c0       	push   0xc0024620
c000c6d7:	e8 de 3f ff ff       	call   c00006ba <memset>
c000c6dc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6e5:	05 00 10 00 00       	add    eax,0x1000
c000c6ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6ee:	83 c4 10             	add    esp,0x10
c000c6f1:	56                   	push   esi
c000c6f2:	56                   	push   esi
c000c6f3:	6a 01                	push   0x1
c000c6f5:	53                   	push   ebx
c000c6f6:	43                   	inc    ebx
c000c6f7:	e8 de fd ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c705:	75 ea                	jne    c000c6f1 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c707:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c70d:	66 85 c0             	test   ax,ax
c000c710:	0f 84 3b 01 00 00    	je     c000c851 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c716:	89 c7                	mov    edi,eax
c000c718:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c720:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c726:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c72b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c72f:	eb 6d                	jmp    c000c79e <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c731:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c735:	89 c1                	mov    ecx,eax
c000c737:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c73b:	0f 83 bc 00 00 00    	jae    c000c7fd <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c741:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c745:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c74a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c74e:	39 f2                	cmp    edx,esi
c000c750:	19 f8                	sbb    eax,edi
c000c752:	73 07                	jae    c000c75b <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c754:	be 00 00 0a 00       	mov    esi,0xa0000
c000c759:	31 ff                	xor    edi,edi
c000c75b:	89 f2                	mov    edx,esi
c000c75d:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c762:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c768:	89 f9                	mov    ecx,edi
c000c76a:	83 d1 ff             	adc    ecx,0xffffffff
c000c76d:	39 d0                	cmp    eax,edx
c000c76f:	b8 00 00 00 00       	mov    eax,0x0
c000c774:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c778:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c77c:	19 c8                	sbb    eax,ecx
c000c77e:	0f 82 0d 01 00 00    	jb     c000c891 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c784:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c788:	83 c3 18             	add    ebx,0x18
c000c78b:	41                   	inc    ecx
c000c78c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c794:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c798:	0f 84 c3 00 00 00    	je     c000c861 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c79e:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c7a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c7a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c7a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7aa:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7ad:	01 f0                	add    eax,esi
c000c7af:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7ba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7be:	11 fa                	adc    edx,edi
c000c7c0:	55                   	push   ebp
c000c7c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7cd:	51                   	push   ecx
c000c7ce:	56                   	push   esi
c000c7cf:	68 9c 12 02 c0       	push   0xc002129c
c000c7d4:	e8 80 29 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c7d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7dd:	83 c4 10             	add    esp,0x10
c000c7e0:	09 f8                	or     eax,edi
c000c7e2:	75 7d                	jne    c000c861 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7e4:	83 fd 01             	cmp    ebp,0x1
c000c7e7:	75 11                	jne    c000c7fa <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7e9:	ba 00 00 08 00       	mov    edx,0x80000
c000c7ee:	89 c1                	mov    ecx,eax
c000c7f0:	39 f2                	cmp    edx,esi
c000c7f2:	19 f9                	sbb    ecx,edi
c000c7f4:	0f 83 37 ff ff ff    	jae    c000c731 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7fa:	4d                   	dec    ebp
c000c7fb:	75 87                	jne    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7fd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c801:	31 d2                	xor    edx,edx
c000c803:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c807:	89 c8                	mov    eax,ecx
c000c809:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c80d:	19 d1                	sbb    ecx,edx
c000c80f:	0f 82 6f ff ff ff    	jb     c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c815:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c81a:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c81e:	b9 00 00 00 00       	mov    ecx,0x0
c000c823:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c827:	0f 83 57 ff ff ff    	jae    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c82d:	39 c6                	cmp    esi,eax
c000c82f:	19 d7                	sbb    edi,edx
c000c831:	73 6a                	jae    c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c833:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c837:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c83b:	29 c7                	sub    edi,eax
c000c83d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c841:	19 d5                	sbb    ebp,edx
c000c843:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c847:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c84b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c84f:	eb 4c                	jmp    c000c89d <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c851:	83 ec 0c             	sub    esp,0xc
c000c854:	68 70 12 02 c0       	push   0xc0021270
c000c859:	e8 2a 91 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000c85e:	83 c4 10             	add    esp,0x10
c000c861:	bb 40 01 00 00       	mov    ebx,0x140
c000c866:	50                   	push   eax
c000c867:	50                   	push   eax
c000c868:	6a 00                	push   0x0
c000c86a:	53                   	push   ebx
c000c86b:	e8 6a fc ff ff       	call   c000c4da <Phys::setPageState(unsigned long, bool)>
c000c870:	8b 15 10 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024610
c000c876:	43                   	inc    ebx
c000c877:	42                   	inc    edx
c000c878:	83 c4 10             	add    esp,0x10
c000c87b:	89 15 10 46 02 c0    	mov    DWORD PTR ds:0xc0024610,edx
c000c881:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c887:	75 dd                	jne    c000c866 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c889:	83 c4 3c             	add    esp,0x3c
c000c88c:	5b                   	pop    ebx
c000c88d:	5e                   	pop    esi
c000c88e:	5f                   	pop    edi
c000c88f:	5d                   	pop    ebp
c000c890:	c3                   	ret    
c000c891:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c895:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c89d:	56                   	push   esi
c000c89e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c8a2:	56                   	push   esi
c000c8a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c8a7:	57                   	push   edi
c000c8a8:	68 c0 12 02 c0       	push   0xc00212c0
c000c8ad:	e8 a7 28 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c8b2:	5d                   	pop    ebp
c000c8b3:	58                   	pop    eax
c000c8b4:	56                   	push   esi
c000c8b5:	57                   	push   edi
c000c8b6:	e8 d2 fd ff ff       	call   c000c68d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8c3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8c7:	8b 15 10 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024610
c000c8cd:	83 c4 0c             	add    esp,0xc
c000c8d0:	01 d0                	add    eax,edx
c000c8d2:	a3 10 46 02 c0       	mov    ds:0xc0024610,eax
c000c8d7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8de:	52                   	push   edx
c000c8df:	50                   	push   eax
c000c8e0:	68 7e 12 02 c0       	push   0xc002127e
c000c8e5:	e8 6f 28 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c8ea:	83 c4 10             	add    esp,0x10
c000c8ed:	e9 92 fe ff ff       	jmp    c000c784 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8f2 <Pipe::isAtty()>:
c000c8f2:	31 c0                	xor    eax,eax
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <Pipe::~Pipe()>:
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	ba 2c 13 02 c0       	mov    edx,0xc002132c
c000c8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c902:	89 10                	mov    DWORD PTR [eax],edx
c000c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c908:	83 ec 0c             	sub    esp,0xc
c000c90b:	50                   	push   eax
c000c90c:	e8 c7 15 00 00       	call   c000ded8 <UnixFile::~UnixFile()>
c000c911:	83 c4 10             	add    esp,0x10
c000c914:	90                   	nop
c000c915:	83 c4 0c             	add    esp,0xc
c000c918:	c3                   	ret    
c000c919:	90                   	nop

c000c91a <Pipe::~Pipe()>:
c000c91a:	83 ec 0c             	sub    esp,0xc
c000c91d:	83 ec 0c             	sub    esp,0xc
c000c920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c924:	e8 cd ff ff ff       	call   c000c8f6 <Pipe::~Pipe()>
c000c929:	83 c4 10             	add    esp,0x10
c000c92c:	83 ec 08             	sub    esp,0x8
c000c92f:	6a 20                	push   0x20
c000c931:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c935:	e8 f9 26 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000c93a:	83 c4 10             	add    esp,0x10
c000c93d:	83 c4 0c             	add    esp,0xc
c000c940:	c3                   	ret    
c000c941:	90                   	nop

c000c942 <Pipe::read(unsigned long long, void*, int*)>:
c000c942:	55                   	push   ebp
c000c943:	57                   	push   edi
c000c944:	56                   	push   esi
c000c945:	53                   	push   ebx
c000c946:	83 ec 1c             	sub    esp,0x1c
c000c949:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c94d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c951:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c955:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c958:	89 c8                	mov    eax,ecx
c000c95a:	99                   	cdq    
c000c95b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c95f:	74 19                	je     c000c97a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c961:	39 f9                	cmp    ecx,edi
c000c963:	89 d1                	mov    ecx,edx
c000c965:	19 f1                	sbb    ecx,esi
c000c967:	73 11                	jae    c000c97a <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c969:	e8 07 c0 00 00       	call   c0018975 <lockScheduler()>
c000c96e:	e8 4b c3 00 00       	call   c0018cbe <schedule()>
c000c973:	e8 ff bf 00 00       	call   c0018977 <unlockScheduler()>
c000c978:	eb db                	jmp    c000c955 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c97a:	39 f8                	cmp    eax,edi
c000c97c:	89 d1                	mov    ecx,edx
c000c97e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c982:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c986:	19 f1                	sbb    ecx,esi
c000c988:	73 08                	jae    c000c992 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c98a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c98e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c992:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c995:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c998:	29 c6                	sub    esi,eax
c000c99a:	89 f1                	mov    ecx,esi
c000c99c:	c1 f9 1f             	sar    ecx,0x1f
c000c99f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c9a3:	89 ca                	mov    edx,ecx
c000c9a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9a9:	19 d1                	sbb    ecx,edx
c000c9ab:	73 04                	jae    c000c9b1 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9ad:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9b1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9b5:	89 fd                	mov    ebp,edi
c000c9b7:	29 f5                	sub    ebp,esi
c000c9b9:	85 f6                	test   esi,esi
c000c9bb:	74 12                	je     c000c9cf <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9bd:	52                   	push   edx
c000c9be:	56                   	push   esi
c000c9bf:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9c2:	50                   	push   eax
c000c9c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9c7:	e8 b8 3c ff ff       	call   c0000684 <memcpy>
c000c9cc:	83 c4 10             	add    esp,0x10
c000c9cf:	85 ed                	test   ebp,ebp
c000c9d1:	74 12                	je     c000c9e5 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9d3:	50                   	push   eax
c000c9d4:	55                   	push   ebp
c000c9d5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9d8:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9dc:	56                   	push   esi
c000c9dd:	e8 a2 3c ff ff       	call   c0000684 <memcpy>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9e8:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9eb:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9ee:	99                   	cdq    
c000c9ef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9f3:	89 f7                	mov    edi,esi
c000c9f5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9f9:	c1 ff 1f             	sar    edi,0x1f
c000c9fc:	57                   	push   edi
c000c9fd:	56                   	push   esi
c000c9fe:	52                   	push   edx
c000c9ff:	50                   	push   eax
c000ca00:	e8 07 2b 01 00       	call   c001f50c <__umoddi3>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca0b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca10:	75 10                	jne    c000ca22 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca12:	83 ec 0c             	sub    esp,0xc
c000ca15:	68 e9 12 02 c0       	push   0xc00212e9
c000ca1a:	e8 69 8f 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000ca1f:	83 c4 10             	add    esp,0x10
c000ca22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca2a:	89 10                	mov    DWORD PTR [eax],edx
c000ca2c:	83 c4 1c             	add    esp,0x1c
c000ca2f:	31 c0                	xor    eax,eax
c000ca31:	5b                   	pop    ebx
c000ca32:	5e                   	pop    esi
c000ca33:	5f                   	pop    edi
c000ca34:	5d                   	pop    ebp
c000ca35:	c3                   	ret    

c000ca36 <Pipe::write(unsigned long long, void*, int*)>:
c000ca36:	55                   	push   ebp
c000ca37:	57                   	push   edi
c000ca38:	56                   	push   esi
c000ca39:	53                   	push   ebx
c000ca3a:	83 ec 1c             	sub    esp,0x1c
c000ca3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca45:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca49:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca4c:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca4f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca52:	89 de                	mov    esi,ebx
c000ca54:	89 df                	mov    edi,ebx
c000ca56:	c1 ff 1f             	sar    edi,0x1f
c000ca59:	01 c6                	add    esi,eax
c000ca5b:	89 c8                	mov    eax,ecx
c000ca5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca61:	11 d7                	adc    edi,edx
c000ca63:	99                   	cdq    
c000ca64:	89 d0                	mov    eax,edx
c000ca66:	39 f1                	cmp    ecx,esi
c000ca68:	19 f8                	sbb    eax,edi
c000ca6a:	b8 01 00 00 00       	mov    eax,0x1
c000ca6f:	0f 82 80 00 00 00    	jb     c000caf5 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca78:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca7b:	01 d8                	add    eax,ebx
c000ca7d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca81:	99                   	cdq    
c000ca82:	f7 f9                	idiv   ecx
c000ca84:	29 d1                	sub    ecx,edx
c000ca86:	89 d7                	mov    edi,edx
c000ca88:	89 c8                	mov    eax,ecx
c000ca8a:	99                   	cdq    
c000ca8b:	39 ce                	cmp    esi,ecx
c000ca8d:	19 d3                	sbb    ebx,edx
c000ca8f:	bb 00 00 00 00       	mov    ebx,0x0
c000ca94:	72 04                	jb     c000ca9a <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca96:	89 f3                	mov    ebx,esi
c000ca98:	29 cb                	sub    ebx,ecx
c000ca9a:	89 f1                	mov    ecx,esi
c000ca9c:	29 d9                	sub    ecx,ebx
c000ca9e:	74 1a                	je     c000caba <Pipe::write(unsigned long long, void*, int*)+0x84>
c000caa0:	52                   	push   edx
c000caa1:	51                   	push   ecx
c000caa2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000caa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000caaa:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000caad:	57                   	push   edi
c000caae:	e8 d1 3b ff ff       	call   c0000684 <memcpy>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caba:	85 db                	test   ebx,ebx
c000cabc:	74 12                	je     c000cad0 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cabe:	50                   	push   eax
c000cabf:	53                   	push   ebx
c000cac0:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cac4:	51                   	push   ecx
c000cac5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cac8:	e8 b7 3b ff ff       	call   c0000684 <memcpy>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cad3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cad8:	75 10                	jne    c000caea <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cada:	83 ec 0c             	sub    esp,0xc
c000cadd:	68 05 13 02 c0       	push   0xc0021305
c000cae2:	e8 a1 8e 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000caee:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000caf1:	89 38                	mov    DWORD PTR [eax],edi
c000caf3:	31 c0                	xor    eax,eax
c000caf5:	83 c4 1c             	add    esp,0x1c
c000caf8:	5b                   	pop    ebx
c000caf9:	5e                   	pop    esi
c000cafa:	5f                   	pop    edi
c000cafb:	5d                   	pop    ebp
c000cafc:	c3                   	ret    
c000cafd:	90                   	nop

c000cafe <Pipe::Pipe(int)>:
c000cafe:	83 ec 0c             	sub    esp,0xc
c000cb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb05:	83 ec 08             	sub    esp,0x8
c000cb08:	6a 00                	push   0x0
c000cb0a:	50                   	push   eax
c000cb0b:	e8 26 12 00 00       	call   c000dd36 <UnixFile::UnixFile(int)>
c000cb10:	83 c4 10             	add    esp,0x10
c000cb13:	ba 2c 13 02 c0       	mov    edx,0xc002132c
c000cb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1c:	89 10                	mov    DWORD PTR [eax],edx
c000cb1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb38:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb43:	83 ec 0c             	sub    esp,0xc
c000cb46:	50                   	push   eax
c000cb47:	e8 9f f4 ff ff       	call   c000bfeb <malloc>
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	89 c2                	mov    edx,eax
c000cb51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb5c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb60:	90                   	nop
c000cb61:	83 c4 0c             	add    esp,0xc
c000cb64:	c3                   	ret    
c000cb65:	90                   	nop

c000cb66 <VgaText::isAtty()>:
c000cb66:	b0 01                	mov    al,0x1
c000cb68:	c3                   	ret    
c000cb69:	90                   	nop

c000cb6a <VgaText::~VgaText()>:
c000cb6a:	83 ec 0c             	sub    esp,0xc
c000cb6d:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c000cb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb76:	89 10                	mov    DWORD PTR [eax],edx
c000cb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	50                   	push   eax
c000cb80:	e8 53 13 00 00       	call   c000ded8 <UnixFile::~UnixFile()>
c000cb85:	83 c4 10             	add    esp,0x10
c000cb88:	90                   	nop
c000cb89:	83 c4 0c             	add    esp,0xc
c000cb8c:	c3                   	ret    
c000cb8d:	90                   	nop

c000cb8e <VgaText::~VgaText()>:
c000cb8e:	83 ec 0c             	sub    esp,0xc
c000cb91:	83 ec 0c             	sub    esp,0xc
c000cb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb98:	e8 cd ff ff ff       	call   c000cb6a <VgaText::~VgaText()>
c000cb9d:	83 c4 10             	add    esp,0x10
c000cba0:	83 ec 08             	sub    esp,0x8
c000cba3:	68 60 12 00 00       	push   0x1260
c000cba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbac:	e8 82 24 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000cbb1:	83 c4 10             	add    esp,0x10
c000cbb4:	83 c4 0c             	add    esp,0xc
c000cbb7:	c3                   	ret    

c000cbb8 <VgaText::read(unsigned long long, void*, int*)>:
c000cbb8:	83 ec 10             	sub    esp,0x10
c000cbbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc7:	e8 a5 57 00 00       	call   c0012371 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbcc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbd0:	89 02                	mov    DWORD PTR [edx],eax
c000cbd2:	31 c0                	xor    eax,eax
c000cbd4:	83 c4 1c             	add    esp,0x1c
c000cbd7:	c3                   	ret    

c000cbd8 <setTerminalScrollLock(bool)>:
c000cbd8:	c3                   	ret    

c000cbd9 <addToTerminalCycle(VgaText*)>:
c000cbd9:	8b 15 80 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024680
c000cbdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbe3:	85 d2                	test   edx,edx
c000cbe5:	75 0c                	jne    c000cbf3 <addToTerminalCycle(VgaText*)+0x1a>
c000cbe7:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbed:	a3 80 46 02 c0       	mov    ds:0xc0024680,eax
c000cbf2:	c3                   	ret    
c000cbf3:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbf9:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbff:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc05:	c3                   	ret    

c000cc06 <installVgaTextImplementation()>:
c000cc06:	83 ec 10             	sub    esp,0x10
c000cc09:	6a 20                	push   0x20
c000cc0b:	6a 00                	push   0x0
c000cc0d:	68 60 46 02 c0       	push   0xc0024660
c000cc12:	e8 a3 3a ff ff       	call   c00006ba <memset>
c000cc17:	83 c4 1c             	add    esp,0x1c
c000cc1a:	c3                   	ret    

c000cc1b <scrollTerminalScrollLock(int)>:
c000cc1b:	c3                   	ret    

c000cc1c <VgaText::load()>:
c000cc1c:	53                   	push   ebx
c000cc1d:	31 c0                	xor    eax,eax
c000cc1f:	83 ec 58             	sub    esp,0x58
c000cc22:	89 e2                	mov    edx,esp
c000cc24:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc28:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc2c:	40                   	inc    eax
c000cc2d:	83 f8 50             	cmp    eax,0x50
c000cc30:	75 f6                	jne    c000cc28 <VgaText::load()+0xc>
c000cc32:	31 c0                	xor    eax,eax
c000cc34:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc3b:	84 c9                	test   cl,cl
c000cc3d:	74 06                	je     c000cc45 <VgaText::load()+0x29>
c000cc3f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc42:	40                   	inc    eax
c000cc43:	eb ef                	jmp    c000cc34 <VgaText::load()+0x18>
c000cc45:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc4b:	85 c0                	test   eax,eax
c000cc4d:	74 09                	je     c000cc58 <VgaText::load()+0x3c>
c000cc4f:	51                   	push   ecx
c000cc50:	51                   	push   ecx
c000cc51:	52                   	push   edx
c000cc52:	53                   	push   ebx
c000cc53:	ff d0                	call   eax
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc5e:	85 c0                	test   eax,eax
c000cc60:	74 09                	je     c000cc6b <VgaText::load()+0x4f>
c000cc62:	83 ec 0c             	sub    esp,0xc
c000cc65:	53                   	push   ebx
c000cc66:	ff d0                	call   eax
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	83 c4 58             	add    esp,0x58
c000cc6e:	5b                   	pop    ebx
c000cc6f:	c3                   	ret    

c000cc70 <VgaText::updateCursor()>:
c000cc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc74:	39 05 84 46 02 c0    	cmp    DWORD PTR ds:0xc0024684,eax
c000cc7a:	75 0c                	jne    c000cc88 <VgaText::updateCursor()+0x18>
c000cc7c:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc82:	85 c0                	test   eax,eax
c000cc84:	74 02                	je     c000cc88 <VgaText::updateCursor()+0x18>
c000cc86:	ff e0                	jmp    eax
c000cc88:	c3                   	ret    
c000cc89:	90                   	nop

c000cc8a <VgaText::showCursor(bool)>:
c000cc8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc92:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc98:	c3                   	ret    
c000cc99:	90                   	nop

c000cc9a <VgaText::disableBlink(bool)>:
c000cc9a:	56                   	push   esi
c000cc9b:	53                   	push   ebx
c000cc9c:	51                   	push   ecx
c000cc9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cca1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cca5:	39 1d 84 46 02 c0    	cmp    DWORD PTR ds:0xc0024684,ebx
c000ccab:	75 18                	jne    c000ccc5 <VgaText::disableBlink(bool)+0x2b>
c000ccad:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ccb3:	85 c0                	test   eax,eax
c000ccb5:	74 0e                	je     c000ccc5 <VgaText::disableBlink(bool)+0x2b>
c000ccb7:	89 f1                	mov    ecx,esi
c000ccb9:	52                   	push   edx
c000ccba:	52                   	push   edx
c000ccbb:	0f b6 d1             	movzx  edx,cl
c000ccbe:	52                   	push   edx
c000ccbf:	53                   	push   ebx
c000ccc0:	ff d0                	call   eax
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	89 f0                	mov    eax,esi
c000ccc7:	83 f0 01             	xor    eax,0x1
c000ccca:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccd0:	58                   	pop    eax
c000ccd1:	5b                   	pop    ebx
c000ccd2:	5e                   	pop    esi
c000ccd3:	c3                   	ret    

c000ccd4 <VgaText::doANSI_SGR(int)>:
c000ccd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccdc:	85 d2                	test   edx,edx
c000ccde:	75 14                	jne    c000ccf4 <VgaText::doANSI_SGR(int)+0x20>
c000cce0:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cce6:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccec:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ccf2:	eb 65                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000ccf4:	83 fa 07             	cmp    edx,0x7
c000ccf7:	75 14                	jne    c000cd0d <VgaText::doANSI_SGR(int)+0x39>
c000ccf9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccff:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd05:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd0b:	eb 4c                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000cd0d:	83 fa 1b             	cmp    edx,0x1b
c000cd10:	74 ce                	je     c000cce0 <VgaText::doANSI_SGR(int)+0xc>
c000cd12:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd15:	83 f9 07             	cmp    ecx,0x7
c000cd18:	77 09                	ja     c000cd23 <VgaText::doANSI_SGR(int)+0x4f>
c000cd1a:	8b 14 8d 20 3a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc5e0]
c000cd21:	eb 20                	jmp    c000cd43 <VgaText::doANSI_SGR(int)+0x6f>
c000cd23:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd26:	83 f9 07             	cmp    ecx,0x7
c000cd29:	77 09                	ja     c000cd34 <VgaText::doANSI_SGR(int)+0x60>
c000cd2b:	8b 14 8d 20 3a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc5e0]
c000cd32:	eb 25                	jmp    c000cd59 <VgaText::doANSI_SGR(int)+0x85>
c000cd34:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd37:	83 f9 07             	cmp    ecx,0x7
c000cd3a:	77 0e                	ja     c000cd4a <VgaText::doANSI_SGR(int)+0x76>
c000cd3c:	8b 14 95 d8 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc728]
c000cd43:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd49:	c3                   	ret    
c000cd4a:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd4d:	83 f9 07             	cmp    ecx,0x7
c000cd50:	77 0d                	ja     c000cd5f <VgaText::doANSI_SGR(int)+0x8b>
c000cd52:	8b 14 95 b0 38 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc750]
c000cd59:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd5f:	c3                   	ret    

c000cd60 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd68:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd6e:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <VgaText::setDefaultFgColour(VgaColour)>:
c000cd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd7e:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd84:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd8a:	c3                   	ret    
c000cd8b:	90                   	nop

c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd8c:	53                   	push   ebx
c000cd8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd99:	51                   	push   ecx
c000cd9a:	e8 c1 ff ff ff       	call   c000cd60 <VgaText::setDefaultBgColour(VgaColour)>
c000cd9f:	58                   	pop    eax
c000cda0:	5a                   	pop    edx
c000cda1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cda5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cda9:	5b                   	pop    ebx
c000cdaa:	eb ca                	jmp    c000cd76 <VgaText::setDefaultFgColour(VgaColour)>

c000cdac <VgaText::combineColours(unsigned char, unsigned char)>:
c000cdac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cdb1:	c1 e2 04             	shl    edx,0x4
c000cdb4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdb8:	83 e0 0f             	and    eax,0xf
c000cdbb:	09 d0                	or     eax,edx
c000cdbd:	c3                   	ret    

c000cdbe <VgaText::scrollScreen()>:
c000cdbe:	57                   	push   edi
c000cdbf:	56                   	push   esi
c000cdc0:	be 01 00 00 00       	mov    esi,0x1
c000cdc5:	53                   	push   ebx
c000cdc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdca:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdd0:	31 ff                	xor    edi,edi
c000cdd2:	01 d9                	add    ecx,ebx
c000cdd4:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdd7:	83 fe 17             	cmp    esi,0x17
c000cdda:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cde0:	75 28                	jne    c000ce0a <VgaText::scrollScreen()+0x4c>
c000cde2:	f7 c7 01 00 00 00    	test   edi,0x1
c000cde8:	74 1c                	je     c000ce06 <VgaText::scrollScreen()+0x48>
c000cdea:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cdf1:	50                   	push   eax
c000cdf2:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cdf9:	50                   	push   eax
c000cdfa:	e8 ad ff ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000cdff:	5a                   	pop    edx
c000ce00:	5a                   	pop    edx
c000ce01:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce04:	eb 04                	jmp    c000ce0a <VgaText::scrollScreen()+0x4c>
c000ce06:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce0a:	47                   	inc    edi
c000ce0b:	41                   	inc    ecx
c000ce0c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce12:	75 c0                	jne    c000cdd4 <VgaText::scrollScreen()+0x16>
c000ce14:	46                   	inc    esi
c000ce15:	83 fe 18             	cmp    esi,0x18
c000ce18:	75 b0                	jne    c000cdca <VgaText::scrollScreen()+0xc>
c000ce1a:	39 1d 84 46 02 c0    	cmp    DWORD PTR ds:0xc0024684,ebx
c000ce20:	75 24                	jne    c000ce46 <VgaText::scrollScreen()+0x88>
c000ce22:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce29:	74 08                	je     c000ce33 <VgaText::scrollScreen()+0x75>
c000ce2b:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce31:	eb 13                	jmp    c000ce46 <VgaText::scrollScreen()+0x88>
c000ce33:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce39:	85 c0                	test   eax,eax
c000ce3b:	74 09                	je     c000ce46 <VgaText::scrollScreen()+0x88>
c000ce3d:	83 ec 0c             	sub    esp,0xc
c000ce40:	53                   	push   ebx
c000ce41:	ff d0                	call   eax
c000ce43:	83 c4 10             	add    esp,0x10
c000ce46:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce4a:	5b                   	pop    ebx
c000ce4b:	5e                   	pop    esi
c000ce4c:	5f                   	pop    edi
c000ce4d:	e9 1e fe ff ff       	jmp    c000cc70 <VgaText::updateCursor()>

c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce57:	c1 e0 08             	shl    eax,0x8
c000ce5a:	89 c2                	mov    edx,eax
c000ce5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce61:	09 d0                	or     eax,edx
c000ce63:	c3                   	ret    

c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce64:	53                   	push   ebx
c000ce65:	83 ec 08             	sub    esp,0x8
c000ce68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce71:	50                   	push   eax
c000ce72:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce77:	50                   	push   eax
c000ce78:	e8 2f ff ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000ce7d:	5a                   	pop    edx
c000ce7e:	5b                   	pop    ebx
c000ce7f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce84:	0f b6 c0             	movzx  eax,al
c000ce87:	50                   	push   eax
c000ce88:	53                   	push   ebx
c000ce89:	e8 c4 ff ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce8e:	5a                   	pop    edx
c000ce8f:	5a                   	pop    edx
c000ce90:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce96:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce9a:	0f b7 d2             	movzx  edx,dx
c000ce9d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cea2:	39 0d 84 46 02 c0    	cmp    DWORD PTR ds:0xc0024684,ecx
c000cea8:	75 14                	jne    c000cebe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceaa:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ceb0:	85 c0                	test   eax,eax
c000ceb2:	74 0a                	je     c000cebe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ceb4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceb8:	83 c4 08             	add    esp,0x8
c000cebb:	5b                   	pop    ebx
c000cebc:	ff e0                	jmp    eax
c000cebe:	83 c4 08             	add    esp,0x8
c000cec1:	5b                   	pop    ebx
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::getCursorX()>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cece:	c3                   	ret    
c000cecf:	90                   	nop

c000ced0 <VgaText::getCursorY()>:
c000ced0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced4:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ceda:	c3                   	ret    
c000cedb:	90                   	nop

c000cedc <VgaText::setCursor(int, int)>:
c000cedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cee4:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ceea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ceee:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cef4:	e9 77 fd ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000cef9:	90                   	nop

c000cefa <VgaText::setCursorX(int)>:
c000cefa:	83 ec 10             	sub    esp,0x10
c000cefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf01:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0b:	50                   	push   eax
c000cf0c:	e8 cb ff ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000cf11:	83 c4 1c             	add    esp,0x1c
c000cf14:	c3                   	ret    
c000cf15:	90                   	nop

c000cf16 <VgaText::setCursorY(int)>:
c000cf16:	83 ec 10             	sub    esp,0x10
c000cf19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf21:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf27:	50                   	push   eax
c000cf28:	e8 af ff ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000cf2d:	83 c4 1c             	add    esp,0x1c
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <VgaText::incrementCursor(bool)>:
c000cf32:	56                   	push   esi
c000cf33:	53                   	push   ebx
c000cf34:	51                   	push   ecx
c000cf35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf3d:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf43:	40                   	inc    eax
c000cf44:	83 f8 50             	cmp    eax,0x50
c000cf47:	74 08                	je     c000cf51 <VgaText::incrementCursor(bool)+0x1f>
c000cf49:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf4f:	eb 33                	jmp    c000cf84 <VgaText::incrementCursor(bool)+0x52>
c000cf51:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf57:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf61:	8d 50 01             	lea    edx,[eax+0x1]
c000cf64:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf6a:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf70:	75 12                	jne    c000cf84 <VgaText::incrementCursor(bool)+0x52>
c000cf72:	83 ec 0c             	sub    esp,0xc
c000cf75:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf7b:	53                   	push   ebx
c000cf7c:	e8 3d fe ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	89 f0                	mov    eax,esi
c000cf86:	84 c0                	test   al,al
c000cf88:	74 0c                	je     c000cf96 <VgaText::incrementCursor(bool)+0x64>
c000cf8a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf8e:	5a                   	pop    edx
c000cf8f:	5b                   	pop    ebx
c000cf90:	5e                   	pop    esi
c000cf91:	e9 da fc ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000cf96:	58                   	pop    eax
c000cf97:	5b                   	pop    ebx
c000cf98:	5e                   	pop    esi
c000cf99:	c3                   	ret    

c000cf9a <VgaText::updateRAMUsageDisplay(int)>:
c000cf9a:	53                   	push   ebx
c000cf9b:	bb 0a 00 00 00       	mov    ebx,0xa
c000cfa0:	6a 0f                	push   0xf
c000cfa2:	6a 00                	push   0x0
c000cfa4:	e8 03 fe ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000cfa9:	5a                   	pop    edx
c000cfaa:	59                   	pop    ecx
c000cfab:	0f b6 c8             	movzx  ecx,al
c000cfae:	51                   	push   ecx
c000cfaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfb3:	99                   	cdq    
c000cfb4:	f7 fb                	idiv   ebx
c000cfb6:	83 c0 30             	add    eax,0x30
c000cfb9:	89 d3                	mov    ebx,edx
c000cfbb:	0f be c0             	movsx  eax,al
c000cfbe:	50                   	push   eax
c000cfbf:	e8 8e fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfc4:	5a                   	pop    edx
c000cfc5:	83 c3 30             	add    ebx,0x30
c000cfc8:	5a                   	pop    edx
c000cfc9:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfcf:	0f b6 db             	movzx  ebx,bl
c000cfd2:	51                   	push   ecx
c000cfd3:	53                   	push   ebx
c000cfd4:	e8 79 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfd9:	5b                   	pop    ebx
c000cfda:	5a                   	pop    edx
c000cfdb:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfe1:	51                   	push   ecx
c000cfe2:	6a 25                	push   0x25
c000cfe4:	e8 69 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfe9:	59                   	pop    ecx
c000cfea:	5b                   	pop    ebx
c000cfeb:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cff1:	5b                   	pop    ebx
c000cff2:	c3                   	ret    
c000cff3:	90                   	nop

c000cff4 <VgaText::updateDiskUsage()>:
c000cff4:	55                   	push   ebp
c000cff5:	bd 10 27 00 00       	mov    ebp,0x2710
c000cffa:	57                   	push   edi
c000cffb:	56                   	push   esi
c000cffc:	53                   	push   ebx
c000cffd:	6a 0f                	push   0xf
c000cfff:	6a 00                	push   0x0
c000d001:	e8 a6 fd ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000d006:	0f b6 d8             	movzx  ebx,al
c000d009:	a1 64 63 02 c0       	mov    eax,ds:0xc0026364
c000d00e:	5a                   	pop    edx
c000d00f:	99                   	cdq    
c000d010:	f7 fd                	idiv   ebp
c000d012:	59                   	pop    ecx
c000d013:	b9 0a 00 00 00       	mov    ecx,0xa
c000d018:	99                   	cdq    
c000d019:	f7 f9                	idiv   ecx
c000d01b:	53                   	push   ebx
c000d01c:	8d 42 30             	lea    eax,[edx+0x30]
c000d01f:	0f b6 c0             	movzx  eax,al
c000d022:	50                   	push   eax
c000d023:	e8 2a fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d028:	5e                   	pop    esi
c000d029:	5f                   	pop    edi
c000d02a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d030:	a1 64 63 02 c0       	mov    eax,ds:0xc0026364
c000d035:	bf e8 03 00 00       	mov    edi,0x3e8
c000d03a:	99                   	cdq    
c000d03b:	f7 ff                	idiv   edi
c000d03d:	99                   	cdq    
c000d03e:	f7 f9                	idiv   ecx
c000d040:	53                   	push   ebx
c000d041:	8d 42 30             	lea    eax,[edx+0x30]
c000d044:	0f b6 c0             	movzx  eax,al
c000d047:	50                   	push   eax
c000d048:	e8 05 fe ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d04d:	5a                   	pop    edx
c000d04e:	5e                   	pop    esi
c000d04f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d055:	a1 64 63 02 c0       	mov    eax,ds:0xc0026364
c000d05a:	be 64 00 00 00       	mov    esi,0x64
c000d05f:	99                   	cdq    
c000d060:	f7 fe                	idiv   esi
c000d062:	99                   	cdq    
c000d063:	f7 f9                	idiv   ecx
c000d065:	53                   	push   ebx
c000d066:	8d 42 30             	lea    eax,[edx+0x30]
c000d069:	0f b6 c0             	movzx  eax,al
c000d06c:	50                   	push   eax
c000d06d:	e8 e0 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d072:	5a                   	pop    edx
c000d073:	5a                   	pop    edx
c000d074:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d07a:	a1 64 63 02 c0       	mov    eax,ds:0xc0026364
c000d07f:	53                   	push   ebx
c000d080:	99                   	cdq    
c000d081:	f7 f9                	idiv   ecx
c000d083:	99                   	cdq    
c000d084:	f7 f9                	idiv   ecx
c000d086:	8d 42 30             	lea    eax,[edx+0x30]
c000d089:	0f b6 c0             	movzx  eax,al
c000d08c:	50                   	push   eax
c000d08d:	e8 c0 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d092:	5a                   	pop    edx
c000d093:	5a                   	pop    edx
c000d094:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d09a:	a1 64 63 02 c0       	mov    eax,ds:0xc0026364
c000d09f:	53                   	push   ebx
c000d0a0:	99                   	cdq    
c000d0a1:	f7 f9                	idiv   ecx
c000d0a3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0a6:	0f b6 c0             	movzx  eax,al
c000d0a9:	50                   	push   eax
c000d0aa:	e8 a3 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0af:	5a                   	pop    edx
c000d0b0:	5a                   	pop    edx
c000d0b1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0b7:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c000d0bc:	53                   	push   ebx
c000d0bd:	99                   	cdq    
c000d0be:	f7 fd                	idiv   ebp
c000d0c0:	99                   	cdq    
c000d0c1:	f7 f9                	idiv   ecx
c000d0c3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0c6:	0f b6 c0             	movzx  eax,al
c000d0c9:	50                   	push   eax
c000d0ca:	e8 83 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0cf:	5d                   	pop    ebp
c000d0d0:	5a                   	pop    edx
c000d0d1:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0d7:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c000d0dc:	53                   	push   ebx
c000d0dd:	99                   	cdq    
c000d0de:	f7 ff                	idiv   edi
c000d0e0:	99                   	cdq    
c000d0e1:	f7 f9                	idiv   ecx
c000d0e3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0e6:	0f b6 c0             	movzx  eax,al
c000d0e9:	50                   	push   eax
c000d0ea:	e8 63 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ef:	5f                   	pop    edi
c000d0f0:	5d                   	pop    ebp
c000d0f1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0f7:	53                   	push   ebx
c000d0f8:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c000d0fd:	99                   	cdq    
c000d0fe:	f7 fe                	idiv   esi
c000d100:	99                   	cdq    
c000d101:	f7 f9                	idiv   ecx
c000d103:	8d 42 30             	lea    eax,[edx+0x30]
c000d106:	0f b6 c0             	movzx  eax,al
c000d109:	50                   	push   eax
c000d10a:	e8 43 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d10f:	5a                   	pop    edx
c000d110:	5e                   	pop    esi
c000d111:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d117:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c000d11c:	53                   	push   ebx
c000d11d:	99                   	cdq    
c000d11e:	f7 f9                	idiv   ecx
c000d120:	99                   	cdq    
c000d121:	f7 f9                	idiv   ecx
c000d123:	8d 42 30             	lea    eax,[edx+0x30]
c000d126:	0f b6 c0             	movzx  eax,al
c000d129:	50                   	push   eax
c000d12a:	e8 23 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d12f:	5f                   	pop    edi
c000d130:	5d                   	pop    ebp
c000d131:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d137:	a1 60 63 02 c0       	mov    eax,ds:0xc0026360
c000d13c:	53                   	push   ebx
c000d13d:	99                   	cdq    
c000d13e:	f7 f9                	idiv   ecx
c000d140:	83 c2 30             	add    edx,0x30
c000d143:	0f b6 d2             	movzx  edx,dl
c000d146:	52                   	push   edx
c000d147:	e8 06 fd ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d14c:	5a                   	pop    edx
c000d14d:	59                   	pop    ecx
c000d14e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d154:	5b                   	pop    ebx
c000d155:	5e                   	pop    esi
c000d156:	5f                   	pop    edi
c000d157:	5d                   	pop    ebp
c000d158:	c3                   	ret    
c000d159:	90                   	nop

c000d15a <VgaText::updateTitle()>:
c000d15a:	53                   	push   ebx
c000d15b:	31 c0                	xor    eax,eax
c000d15d:	83 ec 58             	sub    esp,0x58
c000d160:	89 e1                	mov    ecx,esp
c000d162:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d166:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d16a:	40                   	inc    eax
c000d16b:	83 f8 50             	cmp    eax,0x50
c000d16e:	75 f6                	jne    c000d166 <VgaText::updateTitle()+0xc>
c000d170:	31 c0                	xor    eax,eax
c000d172:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d179:	84 db                	test   bl,bl
c000d17b:	74 06                	je     c000d183 <VgaText::updateTitle()+0x29>
c000d17d:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d180:	40                   	inc    eax
c000d181:	eb ef                	jmp    c000d172 <VgaText::updateTitle()+0x18>
c000d183:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d189:	85 c0                	test   eax,eax
c000d18b:	74 09                	je     c000d196 <VgaText::updateTitle()+0x3c>
c000d18d:	53                   	push   ebx
c000d18e:	53                   	push   ebx
c000d18f:	51                   	push   ecx
c000d190:	52                   	push   edx
c000d191:	ff d0                	call   eax
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	e8 59 fe ff ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c000d19b:	83 c4 58             	add    esp,0x58
c000d19e:	5b                   	pop    ebx
c000d19f:	c3                   	ret    

c000d1a0 <VgaText::setTitleTextColour(VgaColour)>:
c000d1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a8:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1ae:	eb aa                	jmp    c000d15a <VgaText::updateTitle()>

c000d1b0 <VgaText::setTitleColour(VgaColour)>:
c000d1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1b8:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1be:	eb 9a                	jmp    c000d15a <VgaText::updateTitle()>

c000d1c0 <VgaText::setTitle(char*)>:
c000d1c0:	53                   	push   ebx
c000d1c1:	83 ec 10             	sub    esp,0x10
c000d1c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1cc:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1d2:	50                   	push   eax
c000d1d3:	e8 81 35 ff ff       	call   c0000759 <strcpy>
c000d1d8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1dc:	83 c4 18             	add    esp,0x18
c000d1df:	5b                   	pop    ebx
c000d1e0:	e9 75 ff ff ff       	jmp    c000d15a <VgaText::updateTitle()>
c000d1e5:	90                   	nop

c000d1e6 <VgaText::decrementCursor(bool)>:
c000d1e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1ee:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1f4:	85 c0                	test   eax,eax
c000d1f6:	74 07                	je     c000d1ff <VgaText::decrementCursor(bool)+0x19>
c000d1f8:	48                   	dec    eax
c000d1f9:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1ff:	84 c9                	test   cl,cl
c000d201:	74 09                	je     c000d20c <VgaText::decrementCursor(bool)+0x26>
c000d203:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d207:	e9 64 fa ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000d20c:	c3                   	ret    
c000d20d:	90                   	nop

c000d20e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d20e:	53                   	push   ebx
c000d20f:	83 ec 08             	sub    esp,0x8
c000d212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d216:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d21a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d21e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d222:	3c 07                	cmp    al,0x7
c000d224:	75 2a                	jne    c000d250 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d226:	a1 2c 47 02 c0       	mov    eax,ds:0xc002472c
c000d22b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d233:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d23b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d243:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d247:	83 c4 08             	add    esp,0x8
c000d24a:	5b                   	pop    ebx
c000d24b:	e9 fc 2c 00 00       	jmp    c000ff4c <Buzzer::beep(int, int, bool)>
c000d250:	3c 0d                	cmp    al,0xd
c000d252:	75 0c                	jne    c000d260 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d254:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d25e:	eb 3b                	jmp    c000d29b <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d260:	3c 0a                	cmp    al,0xa
c000d262:	75 40                	jne    c000d2a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d264:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d26a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d274:	8d 50 01             	lea    edx,[eax+0x1]
c000d277:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d27d:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d283:	75 12                	jne    c000d297 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d285:	83 ec 0c             	sub    esp,0xc
c000d288:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d28e:	53                   	push   ebx
c000d28f:	e8 2a fb ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d29b:	83 c4 08             	add    esp,0x8
c000d29e:	5b                   	pop    ebx
c000d29f:	e9 cc f9 ff ff       	jmp    c000cc70 <VgaText::updateCursor()>
c000d2a4:	3c 08                	cmp    al,0x8
c000d2a6:	75 31                	jne    c000d2d9 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d2a8:	50                   	push   eax
c000d2a9:	50                   	push   eax
c000d2aa:	6a 01                	push   0x1
c000d2ac:	53                   	push   ebx
c000d2ad:	e8 34 ff ff ff       	call   c000d1e6 <VgaText::decrementCursor(bool)>
c000d2b2:	5a                   	pop    edx
c000d2b3:	59                   	pop    ecx
c000d2b4:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ba:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2c0:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2c6:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2cc:	6a 20                	push   0x20
c000d2ce:	53                   	push   ebx
c000d2cf:	e8 90 fb ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2d4:	83 c4 28             	add    esp,0x28
c000d2d7:	5b                   	pop    ebx
c000d2d8:	c3                   	ret    
c000d2d9:	83 ec 08             	sub    esp,0x8
c000d2dc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2e8:	0f be c0             	movsx  eax,al
c000d2eb:	51                   	push   ecx
c000d2ec:	52                   	push   edx
c000d2ed:	50                   	push   eax
c000d2ee:	53                   	push   ebx
c000d2ef:	e8 70 fb ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2f4:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2f8:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d300:	83 c4 28             	add    esp,0x28
c000d303:	5b                   	pop    ebx
c000d304:	e9 29 fc ff ff       	jmp    c000cf32 <VgaText::incrementCursor(bool)>
c000d309:	90                   	nop

c000d30a <VgaText::isShowingCursor()>:
c000d30a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d30e:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d314:	c3                   	ret    
c000d315:	90                   	nop

c000d316 <VgaText::isBlinkDisabled()>:
c000d316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31a:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d320:	83 f0 01             	xor    eax,0x1
c000d323:	c3                   	ret    

c000d324 <VgaText::setCursorHeight(int)>:
c000d324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d32c:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d332:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d339:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d33d:	e9 48 f9 ff ff       	jmp    c000cc8a <VgaText::showCursor(bool)>

c000d342 <VgaText::getCursorHeight()>:
c000d342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d346:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d34c:	c3                   	ret    

c000d34d <setActiveTerminal(VgaText*)>:
c000d34d:	53                   	push   ebx
c000d34e:	83 ec 08             	sub    esp,0x8
c000d351:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d355:	85 db                	test   ebx,ebx
c000d357:	75 11                	jne    c000d36a <setActiveTerminal(VgaText*)+0x1d>
c000d359:	c7 44 24 10 40 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021340
c000d361:	83 c4 08             	add    esp,0x8
c000d364:	5b                   	pop    ebx
c000d365:	e9 1e 86 00 00       	jmp    c0015988 <Krnl::panic(char const*)>
c000d36a:	50                   	push   eax
c000d36b:	50                   	push   eax
c000d36c:	53                   	push   ebx
c000d36d:	68 4e 13 02 c0       	push   0xc002134e
c000d372:	e8 e2 1d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d377:	a1 84 46 02 c0       	mov    eax,ds:0xc0024684
c000d37c:	83 c4 10             	add    esp,0x10
c000d37f:	85 c0                	test   eax,eax
c000d381:	74 0c                	je     c000d38f <setActiveTerminal(VgaText*)+0x42>
c000d383:	83 ec 0c             	sub    esp,0xc
c000d386:	50                   	push   eax
c000d387:	e8 e4 f8 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	51                   	push   ecx
c000d390:	89 1d 84 46 02 c0    	mov    DWORD PTR ds:0xc0024684,ebx
c000d396:	51                   	push   ecx
c000d397:	53                   	push   ebx
c000d398:	68 66 13 02 c0       	push   0xc0021366
c000d39d:	e8 b7 1d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d3a2:	83 c4 0c             	add    esp,0xc
c000d3a5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d3ab:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3b1:	53                   	push   ebx
c000d3b2:	e8 25 fb ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d3b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ba:	e8 57 ff ff ff       	call   c000d316 <VgaText::isBlinkDisabled()>
c000d3bf:	5a                   	pop    edx
c000d3c0:	59                   	pop    ecx
c000d3c1:	0f b6 c0             	movzx  eax,al
c000d3c4:	50                   	push   eax
c000d3c5:	53                   	push   ebx
c000d3c6:	e8 cf f8 ff ff       	call   c000cc9a <VgaText::disableBlink(bool)>
c000d3cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ce:	e8 6f ff ff ff       	call   c000d342 <VgaText::getCursorHeight()>
c000d3d3:	5a                   	pop    edx
c000d3d4:	59                   	pop    ecx
c000d3d5:	50                   	push   eax
c000d3d6:	53                   	push   ebx
c000d3d7:	e8 48 ff ff ff       	call   c000d324 <VgaText::setCursorHeight(int)>
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3e6:	75 0a                	jne    c000d3f2 <setActiveTerminal(VgaText*)+0xa5>
c000d3e8:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3f2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3f6:	83 c4 08             	add    esp,0x8
c000d3f9:	5b                   	pop    ebx
c000d3fa:	e9 1d f8 ff ff       	jmp    c000cc1c <VgaText::load()>

c000d3ff <doTerminalCycle()>:
c000d3ff:	83 ec 18             	sub    esp,0x18
c000d402:	a1 80 46 02 c0       	mov    eax,ds:0xc0024680
c000d407:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d40d:	50                   	push   eax
c000d40e:	a3 80 46 02 c0       	mov    ds:0xc0024680,eax
c000d413:	e8 35 ff ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c000d418:	83 c4 1c             	add    esp,0x1c
c000d41b:	c3                   	ret    

c000d41c <VgaText::doUpdate()>:
c000d41c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d420:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d426:	85 c0                	test   eax,eax
c000d428:	74 02                	je     c000d42c <VgaText::doUpdate()+0x10>
c000d42a:	ff e0                	jmp    eax
c000d42c:	c3                   	ret    
c000d42d:	90                   	nop

c000d42e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	83 ec 1c             	sub    esp,0x1c
c000d435:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d439:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d43e:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d445:	50                   	push   eax
c000d446:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d44b:	50                   	push   eax
c000d44c:	e8 5b f9 ff ff       	call   c000cdac <VgaText::combineColours(unsigned char, unsigned char)>
c000d451:	59                   	pop    ecx
c000d452:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d455:	5b                   	pop    ebx
c000d456:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d45e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d464:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d468:	0f b7 db             	movzx  ebx,bx
c000d46b:	01 db                	add    ebx,ebx
c000d46d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d471:	01 fb                	add    ebx,edi
c000d473:	31 c0                	xor    eax,eax
c000d475:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d478:	84 c9                	test   cl,cl
c000d47a:	0f 84 3d 01 00 00    	je     c000d5bd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d480:	80 f9 0d             	cmp    cl,0xd
c000d483:	75 0f                	jne    c000d494 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d485:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d48f:	e9 23 01 00 00       	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d494:	80 f9 0a             	cmp    cl,0xa
c000d497:	75 5b                	jne    c000d4f4 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d499:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d49f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d4a9:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4ac:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4b2:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4b8:	75 12                	jne    c000d4cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4ba:	83 ec 0c             	sub    esp,0xc
c000d4bd:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4c3:	55                   	push   ebp
c000d4c4:	e8 f5 f8 ff ff       	call   c000cdbe <VgaText::scrollScreen()>
c000d4c9:	83 c4 10             	add    esp,0x10
c000d4cc:	83 ec 0c             	sub    esp,0xc
c000d4cf:	55                   	push   ebp
c000d4d0:	e8 9b f7 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d4d5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4dd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4e3:	83 c4 10             	add    esp,0x10
c000d4e6:	0f b7 db             	movzx  ebx,bx
c000d4e9:	01 db                	add    ebx,ebx
c000d4eb:	31 c0                	xor    eax,eax
c000d4ed:	01 fb                	add    ebx,edi
c000d4ef:	e9 c3 00 00 00       	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4f4:	80 f9 08             	cmp    cl,0x8
c000d4f7:	75 4e                	jne    c000d547 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4fd:	50                   	push   eax
c000d4fe:	50                   	push   eax
c000d4ff:	6a 01                	push   0x1
c000d501:	55                   	push   ebp
c000d502:	e8 df fc ff ff       	call   c000d1e6 <VgaText::decrementCursor(bool)>
c000d507:	58                   	pop    eax
c000d508:	5a                   	pop    edx
c000d509:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d50f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d515:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d51b:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d521:	6a 20                	push   0x20
c000d523:	55                   	push   ebp
c000d524:	e8 3b f9 ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d529:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d531:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d537:	83 c4 20             	add    esp,0x20
c000d53a:	0f b7 db             	movzx  ebx,bx
c000d53d:	01 db                	add    ebx,ebx
c000d53f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d543:	01 fb                	add    ebx,edi
c000d545:	eb 70                	jmp    c000d5b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d547:	50                   	push   eax
c000d548:	50                   	push   eax
c000d549:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d54e:	50                   	push   eax
c000d54f:	51                   	push   ecx
c000d550:	e8 fd f8 ff ff       	call   c000ce52 <VgaText::combineCharAndColour(char, unsigned char)>
c000d555:	66 89 03             	mov    WORD PTR [ebx],ax
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	39 2d 84 46 02 c0    	cmp    DWORD PTR ds:0xc0024684,ebp
c000d561:	75 2a                	jne    c000d58d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d563:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d569:	85 c0                	test   eax,eax
c000d56b:	74 20                	je     c000d58d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d56d:	52                   	push   edx
c000d56e:	52                   	push   edx
c000d56f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d575:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d57b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d57f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d583:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d586:	51                   	push   ecx
c000d587:	55                   	push   ebp
c000d588:	ff d0                	call   eax
c000d58a:	83 c4 20             	add    esp,0x20
c000d58d:	50                   	push   eax
c000d58e:	83 c3 02             	add    ebx,0x2
c000d591:	50                   	push   eax
c000d592:	6a 00                	push   0x0
c000d594:	55                   	push   ebp
c000d595:	e8 98 f9 ff ff       	call   c000cf32 <VgaText::incrementCursor(bool)>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d5a4:	75 0f                	jne    c000d5b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5a6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5ae:	0f b7 db             	movzx  ebx,bx
c000d5b1:	01 db                	add    ebx,ebx
c000d5b3:	01 fb                	add    ebx,edi
c000d5b5:	b0 01                	mov    al,0x1
c000d5b7:	46                   	inc    esi
c000d5b8:	e9 b8 fe ff ff       	jmp    c000d475 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5c1:	83 ec 0c             	sub    esp,0xc
c000d5c4:	55                   	push   ebp
c000d5c5:	e8 a6 f6 ff ff       	call   c000cc70 <VgaText::updateCursor()>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5d1:	84 c0                	test   al,al
c000d5d3:	74 0c                	je     c000d5e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5d5:	83 ec 0c             	sub    esp,0xc
c000d5d8:	55                   	push   ebp
c000d5d9:	e8 3e fe ff ff       	call   c000d41c <VgaText::doUpdate()>
c000d5de:	83 c4 10             	add    esp,0x10
c000d5e1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5e8:	83 c4 1c             	add    esp,0x1c
c000d5eb:	5b                   	pop    ebx
c000d5ec:	5e                   	pop    esi
c000d5ed:	5f                   	pop    edi
c000d5ee:	5d                   	pop    ebp
c000d5ef:	c3                   	ret    

c000d5f0 <VgaText::clearScreen()>:
c000d5f0:	57                   	push   edi
c000d5f1:	56                   	push   esi
c000d5f2:	31 f6                	xor    esi,esi
c000d5f4:	53                   	push   ebx
c000d5f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5f9:	52                   	push   edx
c000d5fa:	6a 00                	push   0x0
c000d5fc:	6a 00                	push   0x0
c000d5fe:	53                   	push   ebx
c000d5ff:	e8 d8 f8 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d604:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d60b:	83 c4 10             	add    esp,0x10
c000d60e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d614:	7e 26                	jle    c000d63c <VgaText::clearScreen()+0x4c>
c000d616:	31 ff                	xor    edi,edi
c000d618:	50                   	push   eax
c000d619:	50                   	push   eax
c000d61a:	56                   	push   esi
c000d61b:	57                   	push   edi
c000d61c:	47                   	inc    edi
c000d61d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d623:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d629:	6a 20                	push   0x20
c000d62b:	53                   	push   ebx
c000d62c:	e8 33 f8 ff ff       	call   c000ce64 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d631:	83 c4 20             	add    esp,0x20
c000d634:	83 ff 50             	cmp    edi,0x50
c000d637:	75 df                	jne    c000d618 <VgaText::clearScreen()+0x28>
c000d639:	46                   	inc    esi
c000d63a:	eb d2                	jmp    c000d60e <VgaText::clearScreen()+0x1e>
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	53                   	push   ebx
c000d640:	e8 d7 fd ff ff       	call   c000d41c <VgaText::doUpdate()>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d64f:	5b                   	pop    ebx
c000d650:	5e                   	pop    esi
c000d651:	5f                   	pop    edi
c000d652:	c3                   	ret    
c000d653:	90                   	nop

c000d654 <VgaText::putchar(char)>:
c000d654:	56                   	push   esi
c000d655:	53                   	push   ebx
c000d656:	83 ec 14             	sub    esp,0x14
c000d659:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d65d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d661:	3c 5b                	cmp    al,0x5b
c000d663:	75 21                	jne    c000d686 <VgaText::putchar(char)+0x32>
c000d665:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d66c:	74 28                	je     c000d696 <VgaText::putchar(char)+0x42>
c000d66e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d677:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d681:	e9 e2 00 00 00       	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d686:	3c 1b                	cmp    al,0x1b
c000d688:	75 0c                	jne    c000d696 <VgaText::putchar(char)+0x42>
c000d68a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d691:	e9 d2 00 00 00       	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d696:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d69c:	84 c9                	test   cl,cl
c000d69e:	0f 84 ab 00 00 00    	je     c000d74f <VgaText::putchar(char)+0xfb>
c000d6a4:	8d 50 c0             	lea    edx,[eax-0x40]
c000d6a7:	80 fa 3e             	cmp    dl,0x3e
c000d6aa:	0f 87 82 00 00 00    	ja     c000d732 <VgaText::putchar(char)+0xde>
c000d6b0:	3c 6d                	cmp    al,0x6d
c000d6b2:	75 4d                	jne    c000d701 <VgaText::putchar(char)+0xad>
c000d6b4:	31 f6                	xor    esi,esi
c000d6b6:	31 d2                	xor    edx,edx
c000d6b8:	31 c0                	xor    eax,eax
c000d6ba:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6c0:	7e 30                	jle    c000d6f2 <VgaText::putchar(char)+0x9e>
c000d6c2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6ca:	80 fa 3b             	cmp    dl,0x3b
c000d6cd:	75 17                	jne    c000d6e6 <VgaText::putchar(char)+0x92>
c000d6cf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6d3:	50                   	push   eax
c000d6d4:	53                   	push   ebx
c000d6d5:	e8 fa f5 ff ff       	call   c000ccd4 <VgaText::doANSI_SGR(int)>
c000d6da:	59                   	pop    ecx
c000d6db:	31 d2                	xor    edx,edx
c000d6dd:	58                   	pop    eax
c000d6de:	31 c0                	xor    eax,eax
c000d6e0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6e4:	eb 09                	jmp    c000d6ef <VgaText::putchar(char)+0x9b>
c000d6e6:	6b c0 0a             	imul   eax,eax,0xa
c000d6e9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6ed:	88 ca                	mov    dl,cl
c000d6ef:	46                   	inc    esi
c000d6f0:	eb c8                	jmp    c000d6ba <VgaText::putchar(char)+0x66>
c000d6f2:	84 d2                	test   dl,dl
c000d6f4:	74 31                	je     c000d727 <VgaText::putchar(char)+0xd3>
c000d6f6:	50                   	push   eax
c000d6f7:	53                   	push   ebx
c000d6f8:	e8 d7 f5 ff ff       	call   c000ccd4 <VgaText::doANSI_SGR(int)>
c000d6fd:	58                   	pop    eax
c000d6fe:	5a                   	pop    edx
c000d6ff:	eb 26                	jmp    c000d727 <VgaText::putchar(char)+0xd3>
c000d701:	3c 4a                	cmp    al,0x4a
c000d703:	75 22                	jne    c000d727 <VgaText::putchar(char)+0xd3>
c000d705:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d70c:	75 19                	jne    c000d727 <VgaText::putchar(char)+0xd3>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	53                   	push   ebx
c000d712:	e8 d9 fe ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c000d717:	83 c4 0c             	add    esp,0xc
c000d71a:	6a 00                	push   0x0
c000d71c:	6a 00                	push   0x0
c000d71e:	53                   	push   ebx
c000d71f:	e8 b8 f7 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d724:	83 c4 10             	add    esp,0x10
c000d727:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d730:	eb 36                	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d732:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d738:	83 fa 0e             	cmp    edx,0xe
c000d73b:	7f 2b                	jg     c000d768 <VgaText::putchar(char)+0x114>
c000d73d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d740:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d746:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d74d:	eb 19                	jmp    c000d768 <VgaText::putchar(char)+0x114>
c000d74f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d755:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d75b:	0f be c0             	movsx  eax,al
c000d75e:	50                   	push   eax
c000d75f:	53                   	push   ebx
c000d760:	e8 a9 fa ff ff       	call   c000d20e <VgaText::putchar(char, VgaColour, VgaColour)>
c000d765:	83 c4 10             	add    esp,0x10
c000d768:	83 c4 14             	add    esp,0x14
c000d76b:	5b                   	pop    ebx
c000d76c:	5e                   	pop    esi
c000d76d:	c3                   	ret    

c000d76e <VgaText::puts(char const*)>:
c000d76e:	53                   	push   ebx
c000d76f:	83 ec 08             	sub    esp,0x8
c000d772:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d776:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d779:	84 c0                	test   al,al
c000d77b:	74 12                	je     c000d78f <VgaText::puts(char const*)+0x21>
c000d77d:	51                   	push   ecx
c000d77e:	43                   	inc    ebx
c000d77f:	51                   	push   ecx
c000d780:	50                   	push   eax
c000d781:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d785:	e8 ca fe ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	eb e7                	jmp    c000d776 <VgaText::puts(char const*)+0x8>
c000d78f:	83 c4 08             	add    esp,0x8
c000d792:	5b                   	pop    ebx
c000d793:	c3                   	ret    

c000d794 <VgaText::putx(unsigned int)>:
c000d794:	57                   	push   edi
c000d795:	b9 11 00 00 00       	mov    ecx,0x11
c000d79a:	56                   	push   esi
c000d79b:	be 82 13 02 c0       	mov    esi,0xc0021382
c000d7a0:	53                   	push   ebx
c000d7a1:	83 ec 20             	sub    esp,0x20
c000d7a4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7a8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7ac:	fc                   	cld    
c000d7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7af:	be 08 00 00 00       	mov    esi,0x8
c000d7b4:	50                   	push   eax
c000d7b5:	50                   	push   eax
c000d7b6:	89 d8                	mov    eax,ebx
c000d7b8:	c1 e8 1c             	shr    eax,0x1c
c000d7bb:	c1 e3 04             	shl    ebx,0x4
c000d7be:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7c3:	50                   	push   eax
c000d7c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7c8:	e8 87 fe ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	4e                   	dec    esi
c000d7d1:	75 e1                	jne    c000d7b4 <VgaText::putx(unsigned int)+0x20>
c000d7d3:	83 c4 20             	add    esp,0x20
c000d7d6:	5b                   	pop    ebx
c000d7d7:	5e                   	pop    esi
c000d7d8:	5f                   	pop    edi
c000d7d9:	c3                   	ret    

c000d7da <VgaText::VgaText(char const*)>:
c000d7da:	57                   	push   edi
c000d7db:	56                   	push   esi
c000d7dc:	53                   	push   ebx
c000d7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e1:	83 ec 08             	sub    esp,0x8
c000d7e4:	6a 00                	push   0x0
c000d7e6:	50                   	push   eax
c000d7e7:	e8 4a 05 00 00       	call   c000dd36 <UnixFile::UnixFile(int)>
c000d7ec:	83 c4 10             	add    esp,0x10
c000d7ef:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c000d7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f8:	89 10                	mov    DWORD PTR [eax],edx
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d825:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d830:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d857:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d862:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d868:	bb 60 46 02 c0       	mov    ebx,0xc0024660
c000d86d:	b8 08 00 00 00       	mov    eax,0x8
c000d872:	fc                   	cld    
c000d873:	89 d7                	mov    edi,edx
c000d875:	89 de                	mov    esi,ebx
c000d877:	89 c1                	mov    ecx,eax
c000d879:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d87f:	05 1e 10 00 00       	add    eax,0x101e
c000d884:	83 ec 08             	sub    esp,0x8
c000d887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d88b:	50                   	push   eax
c000d88c:	e8 c8 2e ff ff       	call   c0000759 <strcpy>
c000d891:	83 c4 10             	add    esp,0x10
c000d894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d898:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a6:	83 c0 0c             	add    eax,0xc
c000d8a9:	83 ec 04             	sub    esp,0x4
c000d8ac:	68 00 0f 00 00       	push   0xf00
c000d8b1:	6a 00                	push   0x0
c000d8b3:	50                   	push   eax
c000d8b4:	e8 01 2e ff ff       	call   c00006ba <memset>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	83 ec 04             	sub    esp,0x4
c000d8bf:	6a 00                	push   0x0
c000d8c1:	6a 07                	push   0x7
c000d8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8c7:	e8 c0 f4 ff ff       	call   c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	83 ec 08             	sub    esp,0x8
c000d8d2:	6a 02                	push   0x2
c000d8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8d8:	e8 47 fa ff ff       	call   c000d324 <VgaText::setCursorHeight(int)>
c000d8dd:	83 c4 10             	add    esp,0x10
c000d8e0:	83 ec 04             	sub    esp,0x4
c000d8e3:	6a 00                	push   0x0
c000d8e5:	6a 00                	push   0x0
c000d8e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8eb:	e8 ec f5 ff ff       	call   c000cedc <VgaText::setCursor(int, int)>
c000d8f0:	83 c4 10             	add    esp,0x10
c000d8f3:	83 ec 08             	sub    esp,0x8
c000d8f6:	6a 01                	push   0x1
c000d8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fc:	e8 89 f3 ff ff       	call   c000cc8a <VgaText::showCursor(bool)>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	83 ec 08             	sub    esp,0x8
c000d907:	6a 01                	push   0x1
c000d909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d90d:	e8 88 f3 ff ff       	call   c000cc9a <VgaText::disableBlink(bool)>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	83 ec 0c             	sub    esp,0xc
c000d918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91c:	e8 cf fc ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d928:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d933:	05 9e 10 00 00       	add    eax,0x109e
c000d938:	83 ec 04             	sub    esp,0x4
c000d93b:	68 96 00 00 00       	push   0x96
c000d940:	6a 00                	push   0x0
c000d942:	50                   	push   eax
c000d943:	e8 72 2d ff ff       	call   c00006ba <memset>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d94f:	05 34 11 00 00       	add    eax,0x1134
c000d954:	83 ec 04             	sub    esp,0x4
c000d957:	68 2c 01 00 00       	push   0x12c
c000d95c:	6a 00                	push   0x0
c000d95e:	50                   	push   eax
c000d95f:	e8 56 2d ff ff       	call   c00006ba <memset>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	90                   	nop
c000d968:	5b                   	pop    ebx
c000d969:	5e                   	pop    esi
c000d96a:	5f                   	pop    edi
c000d96b:	c3                   	ret    

c000d96c <VgaText::receiveKey(unsigned char)>:
c000d96c:	55                   	push   ebp
c000d96d:	57                   	push   edi
c000d96e:	56                   	push   esi
c000d96f:	53                   	push   ebx
c000d970:	83 ec 1c             	sub    esp,0x1c
c000d973:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d97b:	84 db                	test   bl,bl
c000d97d:	0f 84 c9 00 00 00    	je     c000da4c <VgaText::receiveKey(unsigned char)+0xe0>
c000d983:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d989:	80 fb 08             	cmp    bl,0x8
c000d98c:	75 2c                	jne    c000d9ba <VgaText::receiveKey(unsigned char)+0x4e>
c000d98e:	83 ec 0c             	sub    esp,0xc
c000d991:	57                   	push   edi
c000d992:	e8 40 2d ff ff       	call   c00006d7 <strlen>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	85 c0                	test   eax,eax
c000d99c:	74 41                	je     c000d9df <VgaText::receiveKey(unsigned char)+0x73>
c000d99e:	50                   	push   eax
c000d99f:	50                   	push   eax
c000d9a0:	6a 08                	push   0x8
c000d9a2:	56                   	push   esi
c000d9a3:	e8 ac fc ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d9a8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ab:	e8 27 2d ff ff       	call   c00006d7 <strlen>
c000d9b0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9b8:	eb 22                	jmp    c000d9dc <VgaText::receiveKey(unsigned char)+0x70>
c000d9ba:	52                   	push   edx
c000d9bb:	52                   	push   edx
c000d9bc:	0f be c3             	movsx  eax,bl
c000d9bf:	50                   	push   eax
c000d9c0:	56                   	push   esi
c000d9c1:	e8 8e fc ff ff       	call   c000d654 <VgaText::putchar(char)>
c000d9c6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9ca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9cf:	59                   	pop    ecx
c000d9d0:	5d                   	pop    ebp
c000d9d1:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9d5:	50                   	push   eax
c000d9d6:	57                   	push   edi
c000d9d7:	e8 34 2e ff ff       	call   c0000810 <strcat>
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9e6:	75 05                	jne    c000d9ed <VgaText::receiveKey(unsigned char)+0x81>
c000d9e8:	80 fb 0a             	cmp    bl,0xa
c000d9eb:	75 53                	jne    c000da40 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9ed:	83 ec 0c             	sub    esp,0xc
c000d9f0:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9f6:	53                   	push   ebx
c000d9f7:	e8 db 2c ff ff       	call   c00006d7 <strlen>
c000d9fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9ff:	89 c5                	mov    ebp,eax
c000da01:	e8 d1 2c ff ff       	call   c00006d7 <strlen>
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da0d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da12:	76 10                	jbe    c000da24 <VgaText::receiveKey(unsigned char)+0xb8>
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	68 93 13 02 c0       	push   0xc0021393
c000da1c:	e8 67 7f 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000da21:	83 c4 10             	add    esp,0x10
c000da24:	50                   	push   eax
c000da25:	50                   	push   eax
c000da26:	57                   	push   edi
c000da27:	53                   	push   ebx
c000da28:	e8 e3 2d ff ff       	call   c0000810 <strcat>
c000da2d:	83 c4 0c             	add    esp,0xc
c000da30:	68 96 00 00 00       	push   0x96
c000da35:	6a 00                	push   0x0
c000da37:	57                   	push   edi
c000da38:	e8 7d 2c ff ff       	call   c00006ba <memset>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	56                   	push   esi
c000da44:	e8 d3 f9 ff ff       	call   c000d41c <VgaText::doUpdate()>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	5b                   	pop    ebx
c000da50:	5e                   	pop    esi
c000da51:	5f                   	pop    edi
c000da52:	5d                   	pop    ebp
c000da53:	c3                   	ret    

c000da54 <VgaText::write(unsigned long long, void*, int*)>:
c000da54:	55                   	push   ebp
c000da55:	57                   	push   edi
c000da56:	56                   	push   esi
c000da57:	53                   	push   ebx
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da5f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da67:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da6e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da71:	39 eb                	cmp    ebx,ebp
c000da73:	74 13                	je     c000da88 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da75:	50                   	push   eax
c000da76:	43                   	inc    ebx
c000da77:	50                   	push   eax
c000da78:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da7c:	50                   	push   eax
c000da7d:	56                   	push   esi
c000da7e:	e8 d1 fb ff ff       	call   c000d654 <VgaText::putchar(char)>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	eb e9                	jmp    c000da71 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da88:	83 ec 0c             	sub    esp,0xc
c000da8b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da92:	56                   	push   esi
c000da93:	e8 84 f9 ff ff       	call   c000d41c <VgaText::doUpdate()>
c000da98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da9c:	89 38                	mov    DWORD PTR [eax],edi
c000da9e:	83 c4 1c             	add    esp,0x1c
c000daa1:	31 c0                	xor    eax,eax
c000daa3:	5b                   	pop    ebx
c000daa4:	5e                   	pop    esi
c000daa5:	5f                   	pop    edi
c000daa6:	5d                   	pop    ebp
c000daa7:	c3                   	ret    

c000daa8 <newTerminal(char*)>:
c000daa8:	83 ec 28             	sub    esp,0x28
c000daab:	68 60 12 00 00       	push   0x1260
c000dab0:	e8 6f 15 00 00       	call   c000f024 <operator new(unsigned long)>
c000dab5:	5a                   	pop    edx
c000dab6:	59                   	pop    ecx
c000dab7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dabb:	50                   	push   eax
c000dabc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac0:	e8 15 fd ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c000dac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dac9:	83 c4 2c             	add    esp,0x2c
c000dacc:	c3                   	ret    
c000dacd:	90                   	nop

c000dace <TSS::TSS()>:
c000dace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dad9:	90                   	nop
c000dada:	c3                   	ret    
c000dadb:	90                   	nop

c000dadc <TSS::setESP(unsigned long)>:
c000dadc:	55                   	push   ebp
c000dadd:	89 e5                	mov    ebp,esp
c000dadf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dae2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dae8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daeb:	90                   	nop
c000daec:	5d                   	pop    ebp
c000daed:	c3                   	ret    

c000daee <TSS::flush()>:
c000daee:	55                   	push   ebp
c000daef:	89 e5                	mov    ebp,esp
c000daf1:	83 ec 10             	sub    esp,0x10
c000daf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000daf9:	83 c8 03             	or     eax,0x3
c000dafc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db00:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db04:	66 89 d0             	mov    ax,dx
c000db07:	0f 00 d8             	ltr    ax
c000db0a:	90                   	nop
c000db0b:	c9                   	leave  
c000db0c:	c3                   	ret    
c000db0d:	90                   	nop

c000db0e <TSS::setup(unsigned long, unsigned long)>:
c000db0e:	55                   	push   ebp
c000db0f:	89 e5                	mov    ebp,esp
c000db11:	53                   	push   ebx
c000db12:	83 ec 14             	sub    esp,0x14
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	6a 68                	push   0x68
c000db1a:	e8 cc e4 ff ff       	call   c000bfeb <malloc>
c000db1f:	83 c4 10             	add    esp,0x10
c000db22:	89 c2                	mov    edx,eax
c000db24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db30:	83 ec 04             	sub    esp,0x4
c000db33:	6a 68                	push   0x68
c000db35:	6a 00                	push   0x0
c000db37:	50                   	push   eax
c000db38:	e8 7d 2b ff ff       	call   c00006ba <memset>
c000db3d:	83 c4 10             	add    esp,0x10
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db46:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db9d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dba9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dbac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbc:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbbf:	e8 21 1b 01 00       	call   c001f6e5 <CPU::readCR3()>
c000dbc4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbcd:	83 ec 08             	sub    esp,0x8
c000dbd0:	50                   	push   eax
c000dbd1:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd4:	50                   	push   eax
c000dbd5:	e8 e8 db ff ff       	call   c000b7c2 <GDTEntry::setBase(unsigned int)>
c000dbda:	83 c4 10             	add    esp,0x10
c000dbdd:	83 ec 08             	sub    esp,0x8
c000dbe0:	6a 68                	push   0x68
c000dbe2:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbe5:	50                   	push   eax
c000dbe6:	e8 f3 db ff ff       	call   c000b7de <GDTEntry::setLimit(unsigned int)>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbf2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf5:	83 e0 0f             	and    eax,0xf
c000dbf8:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbfb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbfe:	83 c8 40             	or     eax,0x40
c000dc01:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc04:	e8 13 6c 00 00       	call   c001481c <thisCPU()>
c000dc09:	05 78 01 00 00       	add    eax,0x178
c000dc0e:	83 ec 04             	sub    esp,0x4
c000dc11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc14:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc17:	50                   	push   eax
c000dc18:	e8 f5 db ff ff       	call   c000b812 <GDT::addEntry(GDTEntry)>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	89 c2                	mov    edx,eax
c000dc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc25:	89 10                	mov    DWORD PTR [eax],edx
c000dc27:	e8 f0 6b 00 00       	call   c001481c <thisCPU()>
c000dc2c:	05 78 01 00 00       	add    eax,0x178
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	50                   	push   eax
c000dc35:	e8 1c dc ff ff       	call   c000b856 <GDT::flush()>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc40:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc42:	83 ec 08             	sub    esp,0x8
c000dc45:	50                   	push   eax
c000dc46:	68 fc 13 02 c0       	push   0xc00213fc
c000dc4b:	e8 09 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dc50:	83 c4 10             	add    esp,0x10
c000dc53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc56:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc5b:	c9                   	leave  
c000dc5c:	c3                   	ret    
c000dc5d:	90                   	nop

c000dc5e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dc66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc69:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc6e:	75 08                	jne    c000dc78 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000dc70:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dc76:	eb 38                	jmp    c000dcb0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000dc78:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc7d:	75 17                	jne    c000dc96 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000dc7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc87:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dc8d:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc93:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000dc96:	89 c1                	mov    ecx,eax
c000dc98:	83 e1 fd             	and    ecx,0xfffffffd
c000dc9b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000dca1:	74 cd                	je     c000dc70 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dca3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dca8:	83 e0 ef             	and    eax,0xffffffef
c000dcab:	83 f8 08             	cmp    eax,0x8
c000dcae:	76 c0                	jbe    c000dc70 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000dcb0:	31 c0                	xor    eax,eax
c000dcb2:	c3                   	ret    
c000dcb3:	90                   	nop

c000dcb4 <ReservedFilename::isAtty()>:
c000dcb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcb8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcbb:	31 c0                	xor    eax,eax
c000dcbd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000dcc3:	74 09                	je     c000dcce <ReservedFilename::isAtty()+0x1a>
c000dcc5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000dccb:	0f 94 c0             	sete   al
c000dcce:	c3                   	ret    
c000dccf:	90                   	nop

c000dcd0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dcdf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dce4:	75 08                	jne    c000dcee <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000dce6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000dcec:	eb 3d                	jmp    c000dd2b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dcee:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dcf3:	75 17                	jne    c000dd0c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000dcf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcfa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcfd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd03:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd09:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000dd0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd11:	75 04                	jne    c000dd17 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000dd13:	89 0a                	mov    DWORD PTR [edx],ecx
c000dd15:	eb 14                	jmp    c000dd2b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000dd17:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd1c:	74 c8                	je     c000dce6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd1e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dd23:	83 e0 ef             	and    eax,0xffffffef
c000dd26:	83 f8 08             	cmp    eax,0x8
c000dd29:	76 bb                	jbe    c000dce6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000dd2b:	31 c0                	xor    eax,eax
c000dd2d:	c3                   	ret    

c000dd2e <UnixFile::getFileDescriptor()>:
c000dd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd35:	c3                   	ret    

c000dd36 <UnixFile::UnixFile(int)>:
c000dd36:	53                   	push   ebx
c000dd37:	83 ec 18             	sub    esp,0x18
c000dd3a:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000dd3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd43:	89 10                	mov    DWORD PTR [eax],edx
c000dd45:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd4d:	0f 8f 4d 01 00 00    	jg     c000dea0 <UnixFile::UnixFile(int)+0x16a>
c000dd53:	a1 60 3a 02 c0       	mov    eax,ds:0xc0023a60
c000dd58:	8d 50 01             	lea    edx,[eax+0x1]
c000dd5b:	89 15 60 3a 02 c0    	mov    DWORD PTR ds:0xc0023a60,edx
c000dd61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd65:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd68:	83 ec 08             	sub    esp,0x8
c000dd6b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd6f:	68 18 47 02 c0       	push   0xc0024718
c000dd74:	e8 e1 19 01 00       	call   c001f75a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd79:	83 c4 10             	add    esp,0x10
c000dd7c:	a0 14 47 02 c0       	mov    al,ds:0xc0024714
c000dd81:	83 f0 01             	xor    eax,0x1
c000dd84:	84 c0                	test   al,al
c000dd86:	0f 84 15 01 00 00    	je     c000dea1 <UnixFile::UnixFile(int)+0x16b>
c000dd8c:	c6 05 14 47 02 c0 01 	mov    BYTE PTR ds:0xc0024714,0x1
c000dd93:	83 ec 0c             	sub    esp,0xc
c000dd96:	6a 0c                	push   0xc
c000dd98:	e8 87 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	89 c3                	mov    ebx,eax
c000dda2:	83 ec 08             	sub    esp,0x8
c000dda5:	68 03 ff ff 0f       	push   0xfffff03
c000ddaa:	53                   	push   ebx
c000ddab:	e8 f6 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	89 1d 0c 47 02 c0    	mov    DWORD PTR ds:0xc002470c,ebx
c000ddb9:	83 ec 0c             	sub    esp,0xc
c000ddbc:	6a 0c                	push   0xc
c000ddbe:	e8 61 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000ddc3:	83 c4 10             	add    esp,0x10
c000ddc6:	89 c3                	mov    ebx,eax
c000ddc8:	83 ec 08             	sub    esp,0x8
c000ddcb:	68 01 ff ff 0f       	push   0xfffff01
c000ddd0:	53                   	push   ebx
c000ddd1:	e8 d0 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000ddd6:	83 c4 10             	add    esp,0x10
c000ddd9:	89 1d 10 47 02 c0    	mov    DWORD PTR ds:0xc0024710,ebx
c000dddf:	83 ec 0c             	sub    esp,0xc
c000dde2:	6a 0c                	push   0xc
c000dde4:	e8 3b 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	89 c3                	mov    ebx,eax
c000ddee:	83 ec 08             	sub    esp,0x8
c000ddf1:	68 00 ff ff 0f       	push   0xfffff00
c000ddf6:	53                   	push   ebx
c000ddf7:	e8 aa 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000ddfc:	83 c4 10             	add    esp,0x10
c000ddff:	89 1d 04 47 02 c0    	mov    DWORD PTR ds:0xc0024704,ebx
c000de05:	83 ec 0c             	sub    esp,0xc
c000de08:	6a 0c                	push   0xc
c000de0a:	e8 15 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000de0f:	83 c4 10             	add    esp,0x10
c000de12:	89 c3                	mov    ebx,eax
c000de14:	83 ec 08             	sub    esp,0x8
c000de17:	68 02 ff ff 0f       	push   0xfffff02
c000de1c:	53                   	push   ebx
c000de1d:	e8 84 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000de22:	83 c4 10             	add    esp,0x10
c000de25:	89 1d 08 47 02 c0    	mov    DWORD PTR ds:0xc0024708,ebx
c000de2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de33:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de38:	7f 67                	jg     c000dea1 <UnixFile::UnixFile(int)+0x16b>
c000de3a:	83 ec 0c             	sub    esp,0xc
c000de3d:	6a 0c                	push   0xc
c000de3f:	e8 e0 11 00 00       	call   c000f024 <operator new(unsigned long)>
c000de44:	83 c4 10             	add    esp,0x10
c000de47:	89 c3                	mov    ebx,eax
c000de49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4d:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de52:	83 ec 08             	sub    esp,0x8
c000de55:	50                   	push   eax
c000de56:	53                   	push   ebx
c000de57:	e8 4a 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de63:	89 1c 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],ebx
c000de6a:	83 ec 0c             	sub    esp,0xc
c000de6d:	6a 0c                	push   0xc
c000de6f:	e8 b0 11 00 00       	call   c000f024 <operator new(unsigned long)>
c000de74:	83 c4 10             	add    esp,0x10
c000de77:	89 c3                	mov    ebx,eax
c000de79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de7d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de82:	83 ec 08             	sub    esp,0x8
c000de85:	50                   	push   eax
c000de86:	53                   	push   ebx
c000de87:	e8 1a 00 00 00       	call   c000dea6 <ReservedFilename::ReservedFilename(int)>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de93:	89 1c 85 a0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb960],ebx
c000de9a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de9e:	eb 93                	jmp    c000de33 <UnixFile::UnixFile(int)+0xfd>
c000dea0:	90                   	nop
c000dea1:	83 c4 18             	add    esp,0x18
c000dea4:	5b                   	pop    ebx
c000dea5:	c3                   	ret    

c000dea6 <ReservedFilename::ReservedFilename(int)>:
c000dea6:	83 ec 0c             	sub    esp,0xc
c000dea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dead:	83 ec 08             	sub    esp,0x8
c000deb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb4:	50                   	push   eax
c000deb5:	e8 7c fe ff ff       	call   c000dd36 <UnixFile::UnixFile(int)>
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	ba 04 15 02 c0       	mov    edx,0xc0021504
c000dec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec6:	89 10                	mov    DWORD PTR [eax],edx
c000dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ded0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ded3:	90                   	nop
c000ded4:	83 c4 0c             	add    esp,0xc
c000ded7:	c3                   	ret    

c000ded8 <UnixFile::~UnixFile()>:
c000ded8:	83 ec 1c             	sub    esp,0x1c
c000dedb:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000dee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000def2:	7f 73                	jg     c000df67 <UnixFile::~UnixFile()+0x8f>
c000def4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000defc:	83 ec 0c             	sub    esp,0xc
c000deff:	68 18 47 02 c0       	push   0xc0024718
c000df04:	e8 25 19 01 00       	call   c001f82e <LinkedList<UnixFile>::getFirstElement()>
c000df09:	83 c4 10             	add    esp,0x10
c000df0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	68 18 47 02 c0       	push   0xc0024718
c000df18:	e8 19 19 01 00       	call   c001f836 <LinkedList<UnixFile>::removeFirst()>
c000df1d:	83 c4 10             	add    esp,0x10
c000df20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df24:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000df28:	74 40                	je     c000df6a <UnixFile::~UnixFile()+0x92>
c000df2a:	83 ec 08             	sub    esp,0x8
c000df2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df31:	68 18 47 02 c0       	push   0xc0024718
c000df36:	e8 1f 18 01 00       	call   c001f75a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df42:	8d 50 01             	lea    edx,[eax+0x1]
c000df45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df49:	3d 88 13 00 00       	cmp    eax,0x1388
c000df4e:	0f 94 c0             	sete   al
c000df51:	84 c0                	test   al,al
c000df53:	74 a7                	je     c000defc <UnixFile::~UnixFile()+0x24>
c000df55:	83 ec 0c             	sub    esp,0xc
c000df58:	68 c0 14 02 c0       	push   0xc00214c0
c000df5d:	e8 26 7a 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	eb 95                	jmp    c000defc <UnixFile::~UnixFile()+0x24>
c000df67:	90                   	nop
c000df68:	eb 01                	jmp    c000df6b <UnixFile::~UnixFile()+0x93>
c000df6a:	90                   	nop
c000df6b:	90                   	nop
c000df6c:	83 c4 1c             	add    esp,0x1c
c000df6f:	c3                   	ret    

c000df70 <UnixFile::~UnixFile()>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	83 ec 0c             	sub    esp,0xc
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	e8 59 ff ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000df7f:	83 c4 10             	add    esp,0x10
c000df82:	83 ec 08             	sub    esp,0x8
c000df85:	6a 0c                	push   0xc
c000df87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8b:	e8 a3 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	83 c4 0c             	add    esp,0xc
c000df96:	c3                   	ret    
c000df97:	90                   	nop

c000df98 <ReservedFilename::~ReservedFilename()>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	ba 04 15 02 c0       	mov    edx,0xc0021504
c000dfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa4:	89 10                	mov    DWORD PTR [eax],edx
c000dfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfaa:	83 ec 0c             	sub    esp,0xc
c000dfad:	50                   	push   eax
c000dfae:	e8 25 ff ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	90                   	nop
c000dfb7:	83 c4 0c             	add    esp,0xc
c000dfba:	c3                   	ret    
c000dfbb:	90                   	nop

c000dfbc <ReservedFilename::~ReservedFilename()>:
c000dfbc:	83 ec 0c             	sub    esp,0xc
c000dfbf:	83 ec 0c             	sub    esp,0xc
c000dfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc6:	e8 cd ff ff ff       	call   c000df98 <ReservedFilename::~ReservedFilename()>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	83 ec 08             	sub    esp,0x8
c000dfd1:	6a 0c                	push   0xc
c000dfd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd7:	e8 57 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	83 c4 0c             	add    esp,0xc
c000dfe2:	c3                   	ret    

c000dfe3 <getFromFileDescriptor(int)>:
c000dfe3:	53                   	push   ebx
c000dfe4:	83 ec 08             	sub    esp,0x8
c000dfe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfeb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dff1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dff7:	7f 2c                	jg     c000e025 <getFromFileDescriptor(int)+0x42>
c000dff9:	83 ec 0c             	sub    esp,0xc
c000dffc:	68 18 47 02 c0       	push   0xc0024718
c000e001:	e8 28 18 01 00       	call   c001f82e <LinkedList<UnixFile>::getFirstElement()>
c000e006:	83 c4 10             	add    esp,0x10
c000e009:	85 c0                	test   eax,eax
c000e00b:	75 04                	jne    c000e011 <getFromFileDescriptor(int)+0x2e>
c000e00d:	31 c0                	xor    eax,eax
c000e00f:	eb 6e                	jmp    c000e07f <getFromFileDescriptor(int)+0x9c>
c000e011:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e014:	74 69                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e016:	52                   	push   edx
c000e017:	52                   	push   edx
c000e018:	50                   	push   eax
c000e019:	68 18 47 02 c0       	push   0xc0024718
c000e01e:	e8 b5 18 01 00       	call   c001f8d8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e023:	eb e1                	jmp    c000e006 <getFromFileDescriptor(int)+0x23>
c000e025:	a1 0c 47 02 c0       	mov    eax,ds:0xc002470c
c000e02a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e030:	74 4d                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e032:	a1 10 47 02 c0       	mov    eax,ds:0xc0024710
c000e037:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e03d:	74 40                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e03f:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c000e044:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e04a:	74 33                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e04c:	a1 04 47 02 c0       	mov    eax,ds:0xc0024704
c000e051:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e057:	74 26                	je     c000e07f <getFromFileDescriptor(int)+0x9c>
c000e059:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e05f:	83 f8 08             	cmp    eax,0x8
c000e062:	77 09                	ja     c000e06d <getFromFileDescriptor(int)+0x8a>
c000e064:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c000e06b:	eb 12                	jmp    c000e07f <getFromFileDescriptor(int)+0x9c>
c000e06d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e073:	83 fb 08             	cmp    ebx,0x8
c000e076:	77 95                	ja     c000e00d <getFromFileDescriptor(int)+0x2a>
c000e078:	8b 04 9d a0 46 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb960]
c000e07f:	83 c4 08             	add    esp,0x8
c000e082:	5b                   	pop    ebx
c000e083:	c3                   	ret    

c000e084 <__static_initialization_and_destruction_0(int, int)>:
c000e084:	83 ec 0c             	sub    esp,0xc
c000e087:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e08c:	75 34                	jne    c000e0c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e08e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e096:	75 2a                	jne    c000e0c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	68 18 47 02 c0       	push   0xc0024718
c000e0a0:	e8 5d 16 01 00       	call   c001f702 <LinkedList<UnixFile>::LinkedList()>
c000e0a5:	83 c4 10             	add    esp,0x10
c000e0a8:	83 ec 04             	sub    esp,0x4
c000e0ab:	68 dc 39 02 c0       	push   0xc00239dc
c000e0b0:	68 18 47 02 c0       	push   0xc0024718
c000e0b5:	68 00 f7 01 c0       	push   0xc001f700
c000e0ba:	e8 f0 0e 00 00       	call   c000efaf <__cxa_atexit>
c000e0bf:	83 c4 10             	add    esp,0x10
c000e0c2:	90                   	nop
c000e0c3:	83 c4 0c             	add    esp,0xc
c000e0c6:	c3                   	ret    

c000e0c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0c7:	83 ec 0c             	sub    esp,0xc
c000e0ca:	83 ec 08             	sub    esp,0x8
c000e0cd:	68 ff ff 00 00       	push   0xffff
c000e0d2:	6a 01                	push   0x1
c000e0d4:	e8 ab ff ff ff       	call   c000e084 <__static_initialization_and_destruction_0(int, int)>
c000e0d9:	83 c4 10             	add    esp,0x10
c000e0dc:	83 c4 0c             	add    esp,0xc
c000e0df:	c3                   	ret    

c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0e0:	53                   	push   ebx
c000e0e1:	8b 15 68 3a 02 c0    	mov    edx,DWORD PTR ds:0xc0023a68
c000e0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0ef:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0f5:	89 c8                	mov    eax,ecx
c000e0f7:	d1 e8                	shr    eax,1
c000e0f9:	01 d0                	add    eax,edx
c000e0fb:	83 e1 01             	and    ecx,0x1
c000e0fe:	8a 10                	mov    dl,BYTE PTR [eax]
c000e100:	75 09                	jne    c000e10b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e102:	83 e2 f0             	and    edx,0xfffffff0
c000e105:	09 da                	or     edx,ebx
c000e107:	88 10                	mov    BYTE PTR [eax],dl
c000e109:	5b                   	pop    ebx
c000e10a:	c3                   	ret    
c000e10b:	c1 e3 04             	shl    ebx,0x4
c000e10e:	83 e2 0f             	and    edx,0xf
c000e111:	09 da                	or     edx,ebx
c000e113:	88 10                	mov    BYTE PTR [eax],dl
c000e115:	5b                   	pop    ebx
c000e116:	c3                   	ret    

c000e117 <Virt::getPageState(unsigned long)>:
c000e117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11b:	8b 0d 68 3a 02 c0    	mov    ecx,DWORD PTR ds:0xc0023a68
c000e121:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e127:	89 d0                	mov    eax,edx
c000e129:	d1 e8                	shr    eax,1
c000e12b:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e12e:	88 c8                	mov    al,cl
c000e130:	c0 e8 04             	shr    al,0x4
c000e133:	83 e2 01             	and    edx,0x1
c000e136:	75 05                	jne    c000e13d <Virt::getPageState(unsigned long)+0x26>
c000e138:	88 c8                	mov    al,cl
c000e13a:	83 e0 0f             	and    eax,0xf
c000e13d:	c3                   	ret    

c000e13e <Virt::allocateKernelVirtualPages(int)>:
c000e13e:	55                   	push   ebp
c000e13f:	31 ed                	xor    ebp,ebp
c000e141:	57                   	push   edi
c000e142:	56                   	push   esi
c000e143:	53                   	push   ebx
c000e144:	31 db                	xor    ebx,ebx
c000e146:	83 ec 1c             	sub    esp,0x1c
c000e149:	8b 3d 64 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a64
c000e14f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e153:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e158:	57                   	push   edi
c000e159:	e8 b9 ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e15e:	5a                   	pop    edx
c000e15f:	84 c0                	test   al,al
c000e161:	75 3a                	jne    c000e19d <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e163:	85 db                	test   ebx,ebx
c000e165:	75 02                	jne    c000e169 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e167:	89 fd                	mov    ebp,edi
c000e169:	43                   	inc    ebx
c000e16a:	39 f3                	cmp    ebx,esi
c000e16c:	74 5a                	je     c000e1c8 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e16e:	47                   	inc    edi
c000e16f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e175:	76 31                	jbe    c000e1a8 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e177:	c7 05 64 3a 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023a64,0xc8000
c000e181:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e186:	75 28                	jne    c000e1b0 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e188:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e18d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e192:	57                   	push   edi
c000e193:	e8 7f ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e198:	5a                   	pop    edx
c000e199:	84 c0                	test   al,al
c000e19b:	74 c6                	je     c000e163 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e19d:	47                   	inc    edi
c000e19e:	31 db                	xor    ebx,ebx
c000e1a0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1a6:	77 cf                	ja     c000e177 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1a8:	89 3d 64 3a 02 c0    	mov    DWORD PTR ds:0xc0023a64,edi
c000e1ae:	eb a8                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1b0:	83 ec 0c             	sub    esp,0xc
c000e1b3:	68 18 15 02 c0       	push   0xc0021518
c000e1b8:	e8 cb 77 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e1bd:	8b 3d 64 3a 02 c0    	mov    edi,DWORD PTR ds:0xc0023a64
c000e1c3:	83 c4 10             	add    esp,0x10
c000e1c6:	eb 90                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1c8:	89 2d 64 3a 02 c0    	mov    DWORD PTR ds:0xc0023a64,ebp
c000e1ce:	4b                   	dec    ebx
c000e1cf:	74 5f                	je     c000e230 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1d1:	85 f6                	test   esi,esi
c000e1d3:	74 3d                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d5:	89 e8                	mov    eax,ebp
c000e1d7:	31 db                	xor    ebx,ebx
c000e1d9:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1dc:	eb 14                	jmp    c000e1f2 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1de:	6a 01                	push   0x1
c000e1e0:	43                   	inc    ebx
c000e1e1:	50                   	push   eax
c000e1e2:	e8 f9 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e7:	58                   	pop    eax
c000e1e8:	39 f3                	cmp    ebx,esi
c000e1ea:	5a                   	pop    edx
c000e1eb:	74 25                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ed:	a1 64 3a 02 c0       	mov    eax,ds:0xc0023a64
c000e1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f5:	85 db                	test   ebx,ebx
c000e1f7:	89 15 64 3a 02 c0    	mov    DWORD PTR ds:0xc0023a64,edx
c000e1fd:	74 20                	je     c000e21f <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1ff:	39 df                	cmp    edi,ebx
c000e201:	75 db                	jne    c000e1de <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e203:	6a 03                	push   0x3
c000e205:	43                   	inc    ebx
c000e206:	50                   	push   eax
c000e207:	e8 d4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e20c:	59                   	pop    ecx
c000e20d:	39 f3                	cmp    ebx,esi
c000e20f:	58                   	pop    eax
c000e210:	75 db                	jne    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e212:	83 c4 1c             	add    esp,0x1c
c000e215:	89 e8                	mov    eax,ebp
c000e217:	c1 e0 0c             	shl    eax,0xc
c000e21a:	5b                   	pop    ebx
c000e21b:	5e                   	pop    esi
c000e21c:	5f                   	pop    edi
c000e21d:	5d                   	pop    ebp
c000e21e:	c3                   	ret    
c000e21f:	6a 02                	push   0x2
c000e221:	bb 01 00 00 00       	mov    ebx,0x1
c000e226:	50                   	push   eax
c000e227:	e8 b4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e22c:	58                   	pop    eax
c000e22d:	5a                   	pop    edx
c000e22e:	eb bd                	jmp    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e230:	6a 04                	push   0x4
c000e232:	8d 45 01             	lea    eax,[ebp+0x1]
c000e235:	55                   	push   ebp
c000e236:	a3 64 3a 02 c0       	mov    ds:0xc0023a64,eax
c000e23b:	e8 a0 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e240:	59                   	pop    ecx
c000e241:	5b                   	pop    ebx
c000e242:	89 e8                	mov    eax,ebp
c000e244:	c1 e0 0c             	shl    eax,0xc
c000e247:	83 c4 1c             	add    esp,0x1c
c000e24a:	5b                   	pop    ebx
c000e24b:	5e                   	pop    esi
c000e24c:	5f                   	pop    edi
c000e24d:	5d                   	pop    ebp
c000e24e:	c3                   	ret    

c000e24f <Virt::virtualMemorySetup()>:
c000e24f:	53                   	push   ebx
c000e250:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	6a 0f                	push   0xf
c000e25a:	53                   	push   ebx
c000e25b:	43                   	inc    ebx
c000e25c:	e8 7f fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e261:	59                   	pop    ecx
c000e262:	58                   	pop    eax
c000e263:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e269:	75 ed                	jne    c000e258 <Virt::virtualMemorySetup()+0x9>
c000e26b:	50                   	push   eax
c000e26c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e271:	50                   	push   eax
c000e272:	68 00 00 00 c8       	push   0xc8000000
c000e277:	68 9f 16 02 c0       	push   0xc002169f
c000e27c:	e8 d8 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e281:	58                   	pop    eax
c000e282:	5a                   	pop    edx
c000e283:	68 00 f0 ff ef       	push   0xeffff000
c000e288:	68 b3 16 02 c0       	push   0xc00216b3
c000e28d:	e8 c7 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e292:	83 c4 10             	add    esp,0x10
c000e295:	50                   	push   eax
c000e296:	50                   	push   eax
c000e297:	6a 00                	push   0x0
c000e299:	53                   	push   ebx
c000e29a:	43                   	inc    ebx
c000e29b:	e8 40 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a0:	83 c4 10             	add    esp,0x10
c000e2a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2a9:	75 ea                	jne    c000e295 <Virt::virtualMemorySetup()+0x46>
c000e2ab:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2b0:	51                   	push   ecx
c000e2b1:	51                   	push   ecx
c000e2b2:	6a 0f                	push   0xf
c000e2b4:	53                   	push   ebx
c000e2b5:	43                   	inc    ebx
c000e2b6:	e8 25 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2c4:	75 ea                	jne    c000e2b0 <Virt::virtualMemorySetup()+0x61>
c000e2c6:	83 c4 08             	add    esp,0x8
c000e2c9:	5b                   	pop    ebx
c000e2ca:	c3                   	ret    

c000e2cb <Virt::getAKernelVAS()>:
c000e2cb:	a1 24 47 02 c0       	mov    eax,ds:0xc0024724
c000e2d0:	c3                   	ret    

c000e2d1 <Virt::setupPageSwapping(int)>:
c000e2d1:	57                   	push   edi
c000e2d2:	56                   	push   esi
c000e2d3:	53                   	push   ebx
c000e2d4:	83 ec 1c             	sub    esp,0x1c
c000e2d7:	68 14 01 00 00       	push   0x114
c000e2dc:	e8 43 0d 00 00       	call   c000f024 <operator new(unsigned long)>
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	8b 3d 14 5a 02 c0    	mov    edi,DWORD PTR ds:0xc0025a14
c000e2ea:	89 c6                	mov    esi,eax
c000e2ec:	57                   	push   edi
c000e2ed:	68 c7 16 02 c0       	push   0xc00216c7
c000e2f2:	50                   	push   eax
c000e2f3:	e8 98 13 00 00       	call   c000f690 <File::File(char const*, Process*)>
c000e2f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2fb:	e8 6c 15 00 00       	call   c000f86c <File::unlink()>
c000e300:	58                   	pop    eax
c000e301:	5a                   	pop    edx
c000e302:	6a 12                	push   0x12
c000e304:	56                   	push   esi
c000e305:	e8 ea 13 00 00       	call   c000f6f4 <File::open(FileOpenMode)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	85 c0                	test   eax,eax
c000e30f:	0f 85 b6 00 00 00    	jne    c000e3cb <Virt::setupPageSwapping(int)+0xfa>
c000e315:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e319:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e321:	c1 e3 08             	shl    ebx,0x8
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	c1 fb 04             	sar    ebx,0x4
c000e32a:	68 00 00 01 00       	push   0x10000
c000e32f:	e8 b7 dc ff ff       	call   c000bfeb <malloc>
c000e334:	83 c4 0c             	add    esp,0xc
c000e337:	89 c7                	mov    edi,eax
c000e339:	68 00 00 01 00       	push   0x10000
c000e33e:	6a 00                	push   0x0
c000e340:	50                   	push   eax
c000e341:	e8 74 23 ff ff       	call   c00006ba <memset>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	4b                   	dec    ebx
c000e34a:	83 fb ff             	cmp    ebx,0xffffffff
c000e34d:	74 4a                	je     c000e399 <Virt::setupPageSwapping(int)+0xc8>
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	8b 06                	mov    eax,DWORD PTR [esi]
c000e354:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e358:	52                   	push   edx
c000e359:	57                   	push   edi
c000e35a:	6a 00                	push   0x0
c000e35c:	68 00 00 01 00       	push   0x10000
c000e361:	56                   	push   esi
c000e362:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e365:	83 c4 20             	add    esp,0x20
c000e368:	85 c0                	test   eax,eax
c000e36a:	75 4d                	jne    c000e3b9 <Virt::setupPageSwapping(int)+0xe8>
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	3d 00 00 01 00       	cmp    eax,0x10000
c000e375:	74 d2                	je     c000e349 <Virt::setupPageSwapping(int)+0x78>
c000e377:	52                   	push   edx
c000e378:	4b                   	dec    ebx
c000e379:	52                   	push   edx
c000e37a:	50                   	push   eax
c000e37b:	68 1a 17 02 c0       	push   0xc002171a
c000e380:	e8 d4 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e385:	c7 04 24 23 17 02 c0 	mov    DWORD PTR [esp],0xc0021723
c000e38c:	e8 f7 75 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e391:	83 c4 10             	add    esp,0x10
c000e394:	83 fb ff             	cmp    ebx,0xffffffff
c000e397:	75 b6                	jne    c000e34f <Virt::setupPageSwapping(int)+0x7e>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	56                   	push   esi
c000e39d:	e8 b0 13 00 00       	call   c000f752 <File::close()>
c000e3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3a5:	e8 61 dc ff ff       	call   c000c00b <rfree>
c000e3aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b2:	83 c4 20             	add    esp,0x20
c000e3b5:	5b                   	pop    ebx
c000e3b6:	5e                   	pop    esi
c000e3b7:	5f                   	pop    edi
c000e3b8:	c3                   	ret    
c000e3b9:	51                   	push   ecx
c000e3ba:	51                   	push   ecx
c000e3bb:	50                   	push   eax
c000e3bc:	68 02 17 02 c0       	push   0xc0021702
c000e3c1:	e8 93 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	eb a1                	jmp    c000e36c <Virt::setupPageSwapping(int)+0x9b>
c000e3cb:	53                   	push   ebx
c000e3cc:	53                   	push   ebx
c000e3cd:	50                   	push   eax
c000e3ce:	68 de 16 02 c0       	push   0xc00216de
c000e3d3:	e8 81 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3d8:	c7 04 24 e7 16 02 c0 	mov    DWORD PTR [esp],0xc00216e7
c000e3df:	e8 a4 75 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	e9 29 ff ff ff       	jmp    c000e315 <Virt::setupPageSwapping(int)+0x44>

c000e3ec <VAS::VAS()>:
c000e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fb:	a3 24 47 02 c0       	mov    ds:0xc0024724,eax
c000e400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e404:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e40f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e413:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e41a:	90                   	nop
c000e41b:	c3                   	ret    

c000e41c <VAS::VAS(VAS*)>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e423:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e42a:	83 ec 0c             	sub    esp,0xc
c000e42d:	68 38 15 02 c0       	push   0xc0021538
c000e432:	e8 51 75 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	90                   	nop
c000e43b:	83 c4 0c             	add    esp,0xc
c000e43e:	c3                   	ret    
c000e43f:	90                   	nop

c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e444:	89 c2                	mov    edx,eax
c000e446:	c1 ea 16             	shr    edx,0x16
c000e449:	c1 e8 0a             	shr    eax,0xa
c000e44c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e451:	19 c9                	sbb    ecx,ecx
c000e453:	25 fc 0f 00 00       	and    eax,0xffc
c000e458:	c1 e2 0c             	shl    edx,0xc
c000e45b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e461:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e468:	01 d0                	add    eax,edx
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <VAS::getPageTableEntry(unsigned long)>:
c000e46c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e470:	89 ca                	mov    edx,ecx
c000e472:	c1 ea 16             	shr    edx,0x16
c000e475:	c1 e9 0a             	shr    ecx,0xa
c000e478:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e47e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e484:	c1 e0 0c             	shl    eax,0xc
c000e487:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e48a:	c3                   	ret    

c000e48b <Virt::freeKernelVirtualPages(unsigned long)>:
c000e48b:	57                   	push   edi
c000e48c:	56                   	push   esi
c000e48d:	be 01 00 00 00       	mov    esi,0x1
c000e492:	53                   	push   ebx
c000e493:	83 ec 10             	sub    esp,0x10
c000e496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e49a:	c1 eb 0c             	shr    ebx,0xc
c000e49d:	eb 3e                	jmp    c000e4dd <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e49f:	e8 27 fe ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e4a4:	51                   	push   ecx
c000e4a5:	51                   	push   ecx
c000e4a6:	57                   	push   edi
c000e4a7:	50                   	push   eax
c000e4a8:	e8 bf ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e4ad:	83 c4 10             	add    esp,0x10
c000e4b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4b6:	f6 c4 04             	test   ah,0x4
c000e4b9:	75 5f                	jne    c000e51a <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4bb:	80 fa 04             	cmp    dl,0x4
c000e4be:	74 78                	je     c000e538 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4c0:	80 fa 02             	cmp    dl,0x2
c000e4c3:	0f 84 88 00 00 00    	je     c000e551 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4c9:	80 fa 03             	cmp    dl,0x3
c000e4cc:	0f 84 ac 00 00 00    	je     c000e57e <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4d2:	fe ca                	dec    dl
c000e4d4:	0f 84 92 00 00 00    	je     c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4da:	43                   	inc    ebx
c000e4db:	31 f6                	xor    esi,esi
c000e4dd:	53                   	push   ebx
c000e4de:	e8 34 fc ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e4e3:	5f                   	pop    edi
c000e4e4:	89 df                	mov    edi,ebx
c000e4e6:	c1 e7 0c             	shl    edi,0xc
c000e4e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4ed:	84 c0                	test   al,al
c000e4ef:	75 ae                	jne    c000e49f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4f1:	83 ec 0c             	sub    esp,0xc
c000e4f4:	68 29 17 02 c0       	push   0xc0021729
c000e4f9:	e8 8a 74 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e4fe:	e8 c8 fd ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	57                   	push   edi
c000e506:	50                   	push   eax
c000e507:	e8 60 ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e513:	8b 00                	mov    eax,DWORD PTR [eax]
c000e515:	f6 c4 04             	test   ah,0x4
c000e518:	74 c0                	je     c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e51a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e526:	50                   	push   eax
c000e527:	e8 08 e0 ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e533:	80 fa 04             	cmp    dl,0x4
c000e536:	75 88                	jne    c000e4c0 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e538:	89 f0                	mov    eax,esi
c000e53a:	84 c0                	test   al,al
c000e53c:	75 46                	jne    c000e584 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e53e:	c7 44 24 20 5c 15 02 c0 	mov    DWORD PTR [esp+0x20],0xc002155c
c000e546:	83 c4 10             	add    esp,0x10
c000e549:	5b                   	pop    ebx
c000e54a:	5e                   	pop    esi
c000e54b:	5f                   	pop    edi
c000e54c:	e9 37 74 00 00       	jmp    c0015988 <Krnl::panic(char const*)>
c000e551:	89 f0                	mov    eax,esi
c000e553:	84 c0                	test   al,al
c000e555:	75 15                	jne    c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e557:	83 ec 0c             	sub    esp,0xc
c000e55a:	68 45 17 02 c0       	push   0xc0021745
c000e55f:	e8 24 74 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	e9 6e ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e56c:	50                   	push   eax
c000e56d:	50                   	push   eax
c000e56e:	6a 00                	push   0x0
c000e570:	53                   	push   ebx
c000e571:	e8 6a fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	e9 5c ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e57e:	89 f0                	mov    eax,esi
c000e580:	84 c0                	test   al,al
c000e582:	75 14                	jne    c000e598 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e584:	52                   	push   edx
c000e585:	52                   	push   edx
c000e586:	6a 00                	push   0x0
c000e588:	53                   	push   ebx
c000e589:	e8 52 fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e58e:	83 c4 10             	add    esp,0x10
c000e591:	83 c4 10             	add    esp,0x10
c000e594:	5b                   	pop    ebx
c000e595:	5e                   	pop    esi
c000e596:	5f                   	pop    edi
c000e597:	c3                   	ret    
c000e598:	c7 44 24 20 61 17 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021761
c000e5a0:	83 c4 10             	add    esp,0x10
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	e9 dd 73 00 00       	jmp    c0015988 <Krnl::panic(char const*)>
c000e5ab:	90                   	nop

c000e5ac <VAS::freeAllocatedPages(unsigned long)>:
c000e5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5b4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5b8:	74 09                	je     c000e5c3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5be:	e9 c8 fe ff ff       	jmp    c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e5c3:	c7 44 24 04 80 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021580
c000e5cb:	e9 89 0b 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>

c000e5d0 <VAS::virtualToPhysical(unsigned long)>:
c000e5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5d4:	50                   	push   eax
c000e5d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d9:	52                   	push   edx
c000e5da:	e8 8d fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e5df:	59                   	pop    ecx
c000e5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5e2:	5a                   	pop    edx
c000e5e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5e8:	c3                   	ret    
c000e5e9:	90                   	nop

c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5ea:	55                   	push   ebp
c000e5eb:	57                   	push   edi
c000e5ec:	56                   	push   esi
c000e5ed:	53                   	push   ebx
c000e5ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5f6:	89 c3                	mov    ebx,eax
c000e5f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5fc:	c1 e3 0c             	shl    ebx,0xc
c000e5ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e603:	01 f3                	add    ebx,esi
c000e605:	85 c0                	test   eax,eax
c000e607:	7e 1f                	jle    c000e628 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e609:	56                   	push   esi
c000e60a:	81 c6 00 10 00 00    	add    esi,0x1000
c000e610:	55                   	push   ebp
c000e611:	e8 56 fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e616:	5a                   	pop    edx
c000e617:	59                   	pop    ecx
c000e618:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e61a:	21 f9                	and    ecx,edi
c000e61c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e620:	09 d1                	or     ecx,edx
c000e622:	39 f3                	cmp    ebx,esi
c000e624:	89 08                	mov    DWORD PTR [eax],ecx
c000e626:	75 e1                	jne    c000e609 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e628:	5b                   	pop    ebx
c000e629:	5e                   	pop    esi
c000e62a:	5f                   	pop    edi
c000e62b:	5d                   	pop    ebp
c000e62c:	c3                   	ret    
c000e62d:	90                   	nop

c000e62e <VAS::setToWriteCombining(unsigned long, int)>:
c000e62e:	83 ec 0c             	sub    esp,0xc
c000e631:	e8 e6 61 00 00       	call   c001481c <thisCPU()>
c000e636:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e63d:	75 04                	jne    c000e643 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e63f:	83 c4 0c             	add    esp,0xc
c000e642:	c3                   	ret    
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	68 80 00 00 00       	push   0x80
c000e64b:	6a ff                	push   0xffffffff
c000e64d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e651:	50                   	push   eax
c000e652:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e656:	52                   	push   edx
c000e657:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e65b:	51                   	push   ecx
c000e65c:	e8 89 ff ff ff       	call   c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>
c000e661:	83 c4 20             	add    esp,0x20
c000e664:	83 c4 0c             	add    esp,0xc
c000e667:	c3                   	ret    

c000e668 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e66f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e674:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e67e:	19 c0                	sbb    eax,eax
c000e680:	83 ca 03             	or     edx,0x3
c000e683:	83 e0 fc             	and    eax,0xfffffffc
c000e686:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e68d:	e8 53 10 01 00       	call   c001f6e5 <CPU::readCR3()>
c000e692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e696:	83 c4 0c             	add    esp,0xc
c000e699:	e9 59 10 01 00       	jmp    c001f6f7 <CPU::writeCR3(unsigned long)>

c000e69e <VAS::~VAS()>:
c000e69e:	83 ec 2c             	sub    esp,0x2c
c000e6a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6a9:	e8 c7 a2 00 00       	call   c0018975 <lockScheduler()>
c000e6ae:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6b8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6be:	83 ec 04             	sub    esp,0x4
c000e6c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6c5:	6a 01                	push   0x1
c000e6c7:	50                   	push   eax
c000e6c8:	e8 9b ff ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6d8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6e0:	0f 8f d7 00 00 00    	jg     c000e7bd <VAS::~VAS()+0x11f>
c000e6e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f1:	c1 e2 02             	shl    edx,0x2
c000e6f4:	01 d0                	add    eax,edx
c000e6f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e700:	83 e0 01             	and    eax,0x1
c000e703:	0f 84 ab 00 00 00    	je     c000e7b4 <VAS::~VAS()+0x116>
c000e709:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e711:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e719:	7f 75                	jg     c000e790 <VAS::~VAS()+0xf2>
c000e71b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71f:	c1 e0 0a             	shl    eax,0xa
c000e722:	89 c2                	mov    edx,eax
c000e724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e728:	01 d0                	add    eax,edx
c000e72a:	c1 e0 0c             	shl    eax,0xc
c000e72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e731:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e736:	8b 00                	mov    eax,DWORD PTR [eax]
c000e738:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e73b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e741:	83 ec 04             	sub    esp,0x4
c000e744:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e748:	6a 01                	push   0x1
c000e74a:	50                   	push   eax
c000e74b:	e8 f0 fc ff ff       	call   c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e750:	83 c4 10             	add    esp,0x10
c000e753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e75b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e75d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e765:	25 01 04 00 00       	and    eax,0x401
c000e76a:	3d 01 04 00 00       	cmp    eax,0x401
c000e76f:	75 19                	jne    c000e78a <VAS::~VAS()+0xec>
c000e771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e775:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	50                   	push   eax
c000e77e:	e8 b1 dd ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e78e:	eb 81                	jmp    c000e711 <VAS::~VAS()+0x73>
c000e790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e794:	25 00 04 00 00       	and    eax,0x400
c000e799:	74 19                	je     c000e7b4 <VAS::~VAS()+0x116>
c000e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	50                   	push   eax
c000e7a8:	e8 87 dd ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7b4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7b8:	e9 1b ff ff ff       	jmp    c000e6d8 <VAS::~VAS()+0x3a>
c000e7bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7c4:	83 ec 0c             	sub    esp,0xc
c000e7c7:	50                   	push   eax
c000e7c8:	e8 be fc ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e7cd:	83 c4 10             	add    esp,0x10
c000e7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7d7:	83 ec 0c             	sub    esp,0xc
c000e7da:	50                   	push   eax
c000e7db:	e8 54 dd ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7eb:	c1 e0 02             	shl    eax,0x2
c000e7ee:	83 ec 08             	sub    esp,0x8
c000e7f1:	50                   	push   eax
c000e7f2:	68 a4 15 02 c0       	push   0xc00215a4
c000e7f7:	e8 5d 09 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	e8 73 a1 00 00       	call   c0018977 <unlockScheduler()>
c000e804:	90                   	nop
c000e805:	83 c4 2c             	add    esp,0x2c
c000e808:	c3                   	ret    
c000e809:	90                   	nop

c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e80a:	55                   	push   ebp
c000e80b:	57                   	push   edi
c000e80c:	56                   	push   esi
c000e80d:	53                   	push   ebx
c000e80e:	83 ec 1c             	sub    esp,0x1c
c000e811:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e815:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e819:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e81f:	77 08                	ja     c000e829 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e821:	0f 20 d8             	mov    eax,cr3
c000e824:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e827:	75 49                	jne    c000e872 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e829:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e82d:	09 d8                	or     eax,ebx
c000e82f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e834:	75 59                	jne    c000e88f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e836:	89 de                	mov    esi,ebx
c000e838:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e83b:	c1 ee 16             	shr    esi,0x16
c000e83e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e845:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e849:	74 56                	je     c000e8a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e84b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e851:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e855:	c1 eb 0a             	shr    ebx,0xa
c000e858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e85c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e862:	09 d0                	or     eax,edx
c000e864:	c1 e6 0c             	shl    esi,0xc
c000e867:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e86a:	83 c4 1c             	add    esp,0x1c
c000e86d:	5b                   	pop    ebx
c000e86e:	5e                   	pop    esi
c000e86f:	5f                   	pop    edi
c000e870:	5d                   	pop    ebp
c000e871:	c3                   	ret    
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	68 c4 15 02 c0       	push   0xc00215c4
c000e87a:	e8 da 08 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e886:	09 d8                	or     eax,ebx
c000e888:	a9 ff 0f 00 00       	test   eax,0xfff
c000e88d:	74 a7                	je     c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	68 2c 16 02 c0       	push   0xc002162c
c000e897:	e8 ec 70 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e89c:	83 c4 10             	add    esp,0x10
c000e89f:	eb 95                	jmp    c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8a5:	e8 17 dd ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000e8aa:	89 c5                	mov    ebp,eax
c000e8ac:	e8 1a fa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e8b1:	83 ec 0c             	sub    esp,0xc
c000e8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8b8:	6a 01                	push   0x1
c000e8ba:	e8 7f f8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000e8bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8c6:	6a 01                	push   0x1
c000e8c8:	50                   	push   eax
c000e8c9:	55                   	push   ebp
c000e8ca:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8d4:	51                   	push   ecx
c000e8d5:	e8 22 02 00 00       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8da:	83 c4 1c             	add    esp,0x1c
c000e8dd:	68 00 10 00 00       	push   0x1000
c000e8e2:	6a 00                	push   0x0
c000e8e4:	50                   	push   eax
c000e8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8e9:	e8 cc 1d ff ff       	call   c00006ba <memset>
c000e8ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8f5:	e8 91 fb ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8fe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e907:	e9 3f ff ff ff       	jmp    c000e84b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e90c <VAS::allocatePages(int, int)>:
c000e90c:	55                   	push   ebp
c000e90d:	57                   	push   edi
c000e90e:	56                   	push   esi
c000e90f:	53                   	push   ebx
c000e910:	83 ec 1c             	sub    esp,0x1c
c000e913:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e917:	e8 00 5f 00 00       	call   c001481c <thisCPU()>
c000e91c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e922:	83 e0 01             	and    eax,0x1
c000e925:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e929:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e92d:	0f 85 d5 00 00 00    	jne    c000ea08 <VAS::allocatePages(int, int)+0xfc>
c000e933:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93a:	85 c0                	test   eax,eax
c000e93c:	0f 84 aa 00 00 00    	je     c000e9ec <VAS::allocatePages(int, int)+0xe0>
c000e942:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e946:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e94a:	c1 e6 0c             	shl    esi,0xc
c000e94d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e951:	01 de                	add    esi,ebx
c000e953:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e957:	81 cd 00 04 00 00    	or     ebp,0x400
c000e95d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e960:	85 c0                	test   eax,eax
c000e962:	7e 25                	jle    c000e989 <VAS::allocatePages(int, int)+0x7d>
c000e964:	e8 58 dc ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000e969:	55                   	push   ebp
c000e96a:	53                   	push   ebx
c000e96b:	50                   	push   eax
c000e96c:	57                   	push   edi
c000e96d:	e8 98 fe ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e972:	83 c4 10             	add    esp,0x10
c000e975:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97a:	74 03                	je     c000e97f <VAS::allocatePages(int, int)+0x73>
c000e97c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e97f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e985:	39 de                	cmp    esi,ebx
c000e987:	75 db                	jne    c000e964 <VAS::allocatePages(int, int)+0x58>
c000e989:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e98e:	74 3f                	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000e990:	c1 ee 0a             	shr    esi,0xa
c000e993:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e997:	c1 eb 0a             	shr    ebx,0xa
c000e99a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9a6:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9ac:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9b2:	39 f3                	cmp    ebx,esi
c000e9b4:	77 0d                	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000e9b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9bf:	39 de                	cmp    esi,ebx
c000e9c1:	73 f3                	jae    c000e9b6 <VAS::allocatePages(int, int)+0xaa>
c000e9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c7:	83 c4 1c             	add    esp,0x1c
c000e9ca:	5b                   	pop    ebx
c000e9cb:	5e                   	pop    esi
c000e9cc:	5f                   	pop    edi
c000e9cd:	5d                   	pop    ebp
c000e9ce:	c3                   	ret    
c000e9cf:	e8 11 0d 01 00       	call   c001f6e5 <CPU::readCR3()>
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	50                   	push   eax
c000e9d8:	e8 1a 0d 01 00       	call   c001f6f7 <CPU::writeCR3(unsigned long)>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e4:	83 c4 1c             	add    esp,0x1c
c000e9e7:	5b                   	pop    ebx
c000e9e8:	5e                   	pop    esi
c000e9e9:	5f                   	pop    edi
c000e9ea:	5d                   	pop    ebp
c000e9eb:	c3                   	ret    
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	68 50 16 02 c0       	push   0xc0021650
c000e9f4:	e8 8f 6f 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000e9f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea00:	83 c4 10             	add    esp,0x10
c000ea03:	e9 3a ff ff ff       	jmp    c000e942 <VAS::allocatePages(int, int)+0x36>
c000ea08:	83 ec 0c             	sub    esp,0xc
c000ea0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea0f:	53                   	push   ebx
c000ea10:	e8 29 f7 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea21:	0f 87 94 00 00 00    	ja     c000eabb <VAS::allocatePages(int, int)+0x1af>
c000ea27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea2b:	85 d2                	test   edx,edx
c000ea2d:	7e 3c                	jle    c000ea6b <VAS::allocatePages(int, int)+0x15f>
c000ea2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea37:	c1 e5 0c             	shl    ebp,0xc
c000ea3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea3e:	81 ce 00 04 00 00    	or     esi,0x400
c000ea44:	01 dd                	add    ebp,ebx
c000ea46:	e8 76 db ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ea4b:	56                   	push   esi
c000ea4c:	53                   	push   ebx
c000ea4d:	50                   	push   eax
c000ea4e:	57                   	push   edi
c000ea4f:	e8 b6 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5c:	74 03                	je     c000ea61 <VAS::allocatePages(int, int)+0x155>
c000ea5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea61:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea67:	39 dd                	cmp    ebp,ebx
c000ea69:	75 db                	jne    c000ea46 <VAS::allocatePages(int, int)+0x13a>
c000ea6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea70:	0f 84 59 ff ff ff    	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000ea76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7e:	c1 e0 0c             	shl    eax,0xc
c000ea81:	89 d3                	mov    ebx,edx
c000ea83:	c1 eb 0a             	shr    ebx,0xa
c000ea86:	01 d0                	add    eax,edx
c000ea88:	c1 e8 0a             	shr    eax,0xa
c000ea8b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea91:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea9c:	2d 00 00 40 00       	sub    eax,0x400000
c000eaa1:	39 c3                	cmp    ebx,eax
c000eaa3:	0f 87 1a ff ff ff    	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eaa9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eaac:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eab2:	39 d8                	cmp    eax,ebx
c000eab4:	73 f3                	jae    c000eaa9 <VAS::allocatePages(int, int)+0x19d>
c000eab6:	e9 08 ff ff ff       	jmp    c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eabb:	e8 5c 5d 00 00       	call   c001481c <thisCPU()>
c000eac0:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eac7:	0f 84 5a ff ff ff    	je     c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eacd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead1:	80 cd 01             	or     ch,0x1
c000ead4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000ead8:	e9 4a ff ff ff       	jmp    c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eadd:	90                   	nop

c000eade <VAS::setCPUSpecific(unsigned long)>:
c000eade:	83 ec 0c             	sub    esp,0xc
c000eae1:	6a 05                	push   0x5
c000eae3:	68 00 00 40 c2       	push   0xc2400000
c000eae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaec:	50                   	push   eax
c000eaed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eaf1:	52                   	push   edx
c000eaf2:	e8 13 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eaf7:	83 c4 1c             	add    esp,0x1c
c000eafa:	c3                   	ret    
c000eafb:	90                   	nop

c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eafc:	55                   	push   ebp
c000eafd:	57                   	push   edi
c000eafe:	56                   	push   esi
c000eaff:	53                   	push   ebx
c000eb00:	83 ec 1c             	sub    esp,0x1c
c000eb03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb0b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb0f:	e8 08 5d 00 00       	call   c001481c <thisCPU()>
c000eb14:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb1a:	83 e0 01             	and    eax,0x1
c000eb1d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb25:	85 c0                	test   eax,eax
c000eb27:	7e 39                	jle    c000eb62 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2d:	89 f3                	mov    ebx,esi
c000eb2f:	c1 e0 0c             	shl    eax,0xc
c000eb32:	01 f0                	add    eax,esi
c000eb34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb38:	55                   	push   ebp
c000eb39:	53                   	push   ebx
c000eb3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3e:	29 f0                	sub    eax,esi
c000eb40:	01 d8                	add    eax,ebx
c000eb42:	50                   	push   eax
c000eb43:	57                   	push   edi
c000eb44:	e8 c1 fc ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb51:	74 03                	je     c000eb56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb53:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb56:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb5c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb60:	75 d6                	jne    c000eb38 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb62:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb67:	74 42                	je     c000ebab <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6d:	89 f3                	mov    ebx,esi
c000eb6f:	c1 e0 0c             	shl    eax,0xc
c000eb72:	c1 eb 0a             	shr    ebx,0xa
c000eb75:	01 f0                	add    eax,esi
c000eb77:	c1 e8 0a             	shr    eax,0xa
c000eb7a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb80:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb85:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb8b:	2d 00 00 40 00       	sub    eax,0x400000
c000eb90:	39 c3                	cmp    ebx,eax
c000eb92:	77 0d                	ja     c000eba1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb94:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb97:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb9d:	39 d8                	cmp    eax,ebx
c000eb9f:	73 f3                	jae    c000eb94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eba1:	83 c4 1c             	add    esp,0x1c
c000eba4:	89 f0                	mov    eax,esi
c000eba6:	5b                   	pop    ebx
c000eba7:	5e                   	pop    esi
c000eba8:	5f                   	pop    edi
c000eba9:	5d                   	pop    ebp
c000ebaa:	c3                   	ret    
c000ebab:	e8 35 0b 01 00       	call   c001f6e5 <CPU::readCR3()>
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	50                   	push   eax
c000ebb4:	e8 3e 0b 01 00       	call   c001f6f7 <CPU::writeCR3(unsigned long)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	89 f0                	mov    eax,esi
c000ebbe:	83 c4 1c             	add    esp,0x1c
c000ebc1:	5b                   	pop    ebx
c000ebc2:	5e                   	pop    esi
c000ebc3:	5f                   	pop    edi
c000ebc4:	5d                   	pop    ebp
c000ebc5:	c3                   	ret    

c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebc6:	55                   	push   ebp
c000ebc7:	57                   	push   edi
c000ebc8:	56                   	push   esi
c000ebc9:	53                   	push   ebx
c000ebca:	83 ec 1c             	sub    esp,0x1c
c000ebcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebd1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebd5:	09 f0                	or     eax,esi
c000ebd7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebdb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebdf:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebe4:	75 4c                	jne    c000ec32 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebe6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebed:	c1 eb 16             	shr    ebx,0x16
c000ebf0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebf7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebfb:	74 4f                	je     c000ec4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec01:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec05:	c1 e8 0a             	shr    eax,0xa
c000ec08:	80 fa 01             	cmp    dl,0x1
c000ec0b:	19 d2                	sbb    edx,edx
c000ec0d:	25 fc 0f 00 00       	and    eax,0xffc
c000ec12:	c1 e3 0c             	shl    ebx,0xc
c000ec15:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec1b:	01 d8                	add    eax,ebx
c000ec1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec21:	09 d9                	or     ecx,ebx
c000ec23:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec2a:	83 c4 1c             	add    esp,0x1c
c000ec2d:	5b                   	pop    ebx
c000ec2e:	5e                   	pop    esi
c000ec2f:	5f                   	pop    edi
c000ec30:	5d                   	pop    ebp
c000ec31:	c3                   	ret    
c000ec32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec36:	83 ec 0c             	sub    esp,0xc
c000ec39:	68 7c 16 02 c0       	push   0xc002167c
c000ec3e:	e8 45 6d 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec4a:	eb 9a                	jmp    c000ebe6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec50:	e8 6c d9 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ec55:	89 c5                	mov    ebp,eax
c000ec57:	e8 6f f6 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec63:	6a 01                	push   0x1
c000ec65:	e8 d4 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ec6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec71:	6a 01                	push   0x1
c000ec73:	50                   	push   eax
c000ec74:	55                   	push   ebp
c000ec75:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec7f:	51                   	push   ecx
c000ec80:	e8 77 fe ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec85:	83 c4 1c             	add    esp,0x1c
c000ec88:	68 00 10 00 00       	push   0x1000
c000ec8d:	6a 00                	push   0x0
c000ec8f:	50                   	push   eax
c000ec90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec94:	e8 21 1a ff ff       	call   c00006ba <memset>
c000ec99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec9d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eca0:	e8 e6 f7 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000eca5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca8:	83 c4 10             	add    esp,0x10
c000ecab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecaf:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecb2:	e9 46 ff ff ff       	jmp    c000ebfd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ecb7:	90                   	nop

c000ecb8 <VAS::VAS(bool)>:
c000ecb8:	53                   	push   ebx
c000ecb9:	83 ec 28             	sub    esp,0x28
c000ecbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecd7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecda:	e8 e2 d8 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ecdf:	89 c2                	mov    edx,eax
c000ece1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ece8:	e8 de f5 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000eced:	89 c3                	mov    ebx,eax
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	6a 01                	push   0x1
c000ecf4:	e8 45 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	89 c2                	mov    edx,eax
c000ecfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed05:	83 ec 0c             	sub    esp,0xc
c000ed08:	6a 03                	push   0x3
c000ed0a:	6a 01                	push   0x1
c000ed0c:	52                   	push   edx
c000ed0d:	50                   	push   eax
c000ed0e:	53                   	push   ebx
c000ed0f:	e8 e8 fd ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed14:	83 c4 20             	add    esp,0x20
c000ed17:	89 c2                	mov    edx,eax
c000ed19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed30:	7f 1c                	jg     c000ed4e <VAS::VAS(bool)+0x96>
c000ed32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed3d:	c1 e2 02             	shl    edx,0x2
c000ed40:	01 d0                	add    eax,edx
c000ed42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed4c:	eb da                	jmp    c000ed28 <VAS::VAS(bool)+0x70>
c000ed4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed5e:	7f 71                	jg     c000edd1 <VAS::VAS(bool)+0x119>
c000ed60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed64:	2d 00 02 00 00       	sub    eax,0x200
c000ed69:	c1 e0 0c             	shl    eax,0xc
c000ed6c:	83 c8 03             	or     eax,0x3
c000ed6f:	89 c3                	mov    ebx,eax
c000ed71:	e8 a6 5a 00 00       	call   c001481c <thisCPU()>
c000ed76:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed7c:	83 e0 10             	and    eax,0x10
c000ed7f:	84 c0                	test   al,al
c000ed81:	74 07                	je     c000ed8a <VAS::VAS(bool)+0xd2>
c000ed83:	b8 00 01 00 00       	mov    eax,0x100
c000ed88:	eb 05                	jmp    c000ed8f <VAS::VAS(bool)+0xd7>
c000ed8a:	b8 00 00 00 00       	mov    eax,0x0
c000ed8f:	09 d8                	or     eax,ebx
c000ed91:	89 c1                	mov    ecx,eax
c000ed93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed9e:	c1 e2 02             	shl    edx,0x2
c000eda1:	01 d0                	add    eax,edx
c000eda3:	89 ca                	mov    edx,ecx
c000eda5:	89 10                	mov    DWORD PTR [eax],edx
c000eda7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edab:	2d 40 03 00 00       	sub    eax,0x340
c000edb0:	83 f8 7f             	cmp    eax,0x7f
c000edb3:	77 16                	ja     c000edcb <VAS::VAS(bool)+0x113>
c000edb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc0:	c1 e2 02             	shl    edx,0x2
c000edc3:	01 d0                	add    eax,edx
c000edc5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edcb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edcf:	eb 85                	jmp    c000ed56 <VAS::VAS(bool)+0x9e>
c000edd1:	e8 46 5a 00 00       	call   c001481c <thisCPU()>
c000edd6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eddc:	83 e0 10             	and    eax,0x10
c000eddf:	84 c0                	test   al,al
c000ede1:	74 07                	je     c000edea <VAS::VAS(bool)+0x132>
c000ede3:	b8 03 41 00 00       	mov    eax,0x4103
c000ede8:	eb 05                	jmp    c000edef <VAS::VAS(bool)+0x137>
c000edea:	b8 03 40 00 00       	mov    eax,0x4003
c000edef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edf3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edf6:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edfc:	89 02                	mov    DWORD PTR [edx],eax
c000edfe:	e8 19 5a 00 00       	call   c001481c <thisCPU()>
c000ee03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee09:	83 ec 08             	sub    esp,0x8
c000ee0c:	50                   	push   eax
c000ee0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee11:	e8 c8 fc ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee20:	e8 f7 59 00 00       	call   c001481c <thisCPU()>
c000ee25:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee2b:	83 e0 10             	and    eax,0x10
c000ee2e:	84 c0                	test   al,al
c000ee30:	74 07                	je     c000ee39 <VAS::VAS(bool)+0x181>
c000ee32:	b8 00 01 00 00       	mov    eax,0x100
c000ee37:	eb 05                	jmp    c000ee3e <VAS::VAS(bool)+0x186>
c000ee39:	b8 00 00 00 00       	mov    eax,0x0
c000ee3e:	09 d8                	or     eax,ebx
c000ee40:	89 c2                	mov    edx,eax
c000ee42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee49:	05 fc 0f 00 00       	add    eax,0xffc
c000ee4e:	83 ca 03             	or     edx,0x3
c000ee51:	89 10                	mov    DWORD PTR [eax],edx
c000ee53:	e8 c4 59 00 00       	call   c001481c <thisCPU()>
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	50                   	push   eax
c000ee5c:	e8 ef 19 00 00       	call   c0010850 <Device::getName()>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	83 ec 08             	sub    esp,0x8
c000ee67:	68 7b 17 02 c0       	push   0xc002177b
c000ee6c:	50                   	push   eax
c000ee6d:	e8 38 19 ff ff       	call   c00007aa <strcmp>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	85 c0                	test   eax,eax
c000ee77:	0f 94 c0             	sete   al
c000ee7a:	84 c0                	test   al,al
c000ee7c:	74 64                	je     c000eee2 <VAS::VAS(bool)+0x22a>
c000ee7e:	e8 d0 9a 00 00       	call   c0018953 <disableIRQs()>
c000ee83:	e8 94 59 00 00       	call   c001481c <thisCPU()>
c000ee88:	05 7c 09 00 00       	add    eax,0x97c
c000ee8d:	83 ec 0c             	sub    esp,0xc
c000ee90:	50                   	push   eax
c000ee91:	e8 c8 cb ff ff       	call   c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee96:	83 c4 10             	add    esp,0x10
c000ee99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee9e:	89 c3                	mov    ebx,eax
c000eea0:	e8 77 59 00 00       	call   c001481c <thisCPU()>
c000eea5:	05 7c 09 00 00       	add    eax,0x97c
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	50                   	push   eax
c000eeae:	e8 ab cb ff ff       	call   c000ba5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	83 ec 08             	sub    esp,0x8
c000eeb9:	50                   	push   eax
c000eeba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eebe:	e8 a9 f5 ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000eec3:	83 c4 10             	add    esp,0x10
c000eec6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eecd:	6a 11                	push   0x11
c000eecf:	53                   	push   ebx
c000eed0:	50                   	push   eax
c000eed1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eed5:	e8 30 f9 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eeda:	83 c4 10             	add    esp,0x10
c000eedd:	e8 84 9a 00 00       	call   c0018966 <enableIRQs()>
c000eee2:	90                   	nop
c000eee3:	83 c4 28             	add    esp,0x28
c000eee6:	5b                   	pop    ebx
c000eee7:	c3                   	ret    

c000eee8 <mapVASFirstTime>:
c000eee8:	55                   	push   ebp
c000eee9:	57                   	push   edi
c000eeea:	56                   	push   esi
c000eeeb:	53                   	push   ebx
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eef4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eef7:	4a                   	dec    edx
c000eef8:	0f 84 99 00 00 00    	je     c000ef97 <mapVASFirstTime+0xaf>
c000eefe:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef01:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef04:	c1 e5 15             	shl    ebp,0x15
c000ef07:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef0c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef11:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef17:	29 eb                	sub    ebx,ebp
c000ef19:	29 ee                	sub    esi,ebp
c000ef1b:	e8 a1 d6 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	68 03 04 00 00       	push   0x403
c000ef28:	6a 01                	push   0x1
c000ef2a:	53                   	push   ebx
c000ef2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef31:	50                   	push   eax
c000ef32:	57                   	push   edi
c000ef33:	e8 c4 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef38:	83 c4 20             	add    esp,0x20
c000ef3b:	39 f3                	cmp    ebx,esi
c000ef3d:	75 dc                	jne    c000ef1b <mapVASFirstTime+0x33>
c000ef3f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef44:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef49:	29 e8                	sub    eax,ebp
c000ef4b:	29 ee                	sub    esi,ebp
c000ef4d:	89 c5                	mov    ebp,eax
c000ef4f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef53:	19 db                	sbb    ebx,ebx
c000ef55:	e8 67 d6 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c000ef5a:	83 e3 04             	and    ebx,0x4
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef66:	53                   	push   ebx
c000ef67:	6a 01                	push   0x1
c000ef69:	56                   	push   esi
c000ef6a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef70:	50                   	push   eax
c000ef71:	57                   	push   edi
c000ef72:	e8 85 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef77:	83 c4 20             	add    esp,0x20
c000ef7a:	39 f5                	cmp    ebp,esi
c000ef7c:	75 d1                	jne    c000ef4f <mapVASFirstTime+0x67>
c000ef7e:	e8 62 07 01 00       	call   c001f6e5 <CPU::readCR3()>
c000ef83:	83 ec 0c             	sub    esp,0xc
c000ef86:	50                   	push   eax
c000ef87:	e8 6b 07 01 00       	call   c001f6f7 <CPU::writeCR3(unsigned long)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	83 c4 0c             	add    esp,0xc
c000ef92:	5b                   	pop    ebx
c000ef93:	5e                   	pop    esi
c000ef94:	5f                   	pop    edi
c000ef95:	5d                   	pop    ebp
c000ef96:	c3                   	ret    
c000ef97:	83 ec 0c             	sub    esp,0xc
c000ef9a:	68 89 17 02 c0       	push   0xc0021789
c000ef9f:	e8 b5 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	5b                   	pop    ebx
c000efab:	5e                   	pop    esi
c000efac:	5f                   	pop    edi
c000efad:	5d                   	pop    ebp
c000efae:	c3                   	ret    

c000efaf <__cxa_atexit>:
c000efaf:	31 c0                	xor    eax,eax
c000efb1:	c3                   	ret    

c000efb2 <__cxa_finalize>:
c000efb2:	c3                   	ret    

c000efb3 <__stack_chk_fail>:
c000efb3:	55                   	push   ebp
c000efb4:	89 e5                	mov    ebp,esp
c000efb6:	83 ec 10             	sub    esp,0x10
c000efb9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efbc:	68 a2 17 02 c0       	push   0xc00217a2
c000efc1:	e8 93 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efc6:	58                   	pop    eax
c000efc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efca:	5a                   	pop    edx
c000efcb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efce:	68 a2 17 02 c0       	push   0xc00217a2
c000efd3:	e8 81 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efdb:	59                   	pop    ecx
c000efdc:	5a                   	pop    edx
c000efdd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efdf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe2:	68 a2 17 02 c0       	push   0xc00217a2
c000efe7:	e8 6d 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efef:	59                   	pop    ecx
c000eff0:	5a                   	pop    edx
c000eff1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff8:	68 a2 17 02 c0       	push   0xc00217a2
c000effd:	e8 57 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000f002:	c7 04 24 aa 17 02 c0 	mov    DWORD PTR [esp],0xc00217aa
c000f009:	e8 7a 69 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	c9                   	leave  
c000f012:	c3                   	ret    

c000f013 <__cxa_pure_virtual>:
c000f013:	83 ec 18             	sub    esp,0x18
c000f016:	68 c2 17 02 c0       	push   0xc00217c2
c000f01b:	e8 68 69 00 00       	call   c0015988 <Krnl::panic(char const*)>
c000f020:	83 c4 1c             	add    esp,0x1c
c000f023:	c3                   	ret    

c000f024 <operator new(unsigned long)>:
c000f024:	e9 c2 cf ff ff       	jmp    c000bfeb <malloc>

c000f029 <operator new[](unsigned long)>:
c000f029:	e9 bd cf ff ff       	jmp    c000bfeb <malloc>

c000f02e <operator delete(void*)>:
c000f02e:	e9 d8 cf ff ff       	jmp    c000c00b <rfree>

c000f033 <operator delete(void*, unsigned long)>:
c000f033:	e9 d3 cf ff ff       	jmp    c000c00b <rfree>

c000f038 <operator delete[](void*)>:
c000f038:	e9 ce cf ff ff       	jmp    c000c00b <rfree>

c000f03d <operator delete[](void*, unsigned long)>:
c000f03d:	e9 c9 cf ff ff       	jmp    c000c00b <rfree>

c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f042:	57                   	push   edi
c000f043:	56                   	push   esi
c000f044:	be d9 17 02 c0       	mov    esi,0xc00217d9
c000f049:	53                   	push   ebx
c000f04a:	83 ec 40             	sub    esp,0x40
c000f04d:	a0 d8 17 02 c0       	mov    al,ds:0xc00217d8
c000f052:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f056:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f05a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f05e:	b8 3e 00 00 00       	mov    eax,0x3e
c000f063:	f7 c7 02 00 00 00    	test   edi,0x2
c000f069:	75 69                	jne    c000f0d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f06b:	89 c1                	mov    ecx,eax
c000f06d:	c1 e9 02             	shr    ecx,0x2
c000f070:	fc                   	cld    
c000f071:	31 d2                	xor    edx,edx
c000f073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f075:	a8 02                	test   al,0x2
c000f077:	74 0b                	je     c000f084 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f079:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f07c:	66 89 17             	mov    WORD PTR [edi],dx
c000f07f:	ba 02 00 00 00       	mov    edx,0x2
c000f084:	a8 01                	test   al,0x1
c000f086:	74 06                	je     c000f08e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f088:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f08b:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f08e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f092:	83 f9 3e             	cmp    ecx,0x3e
c000f095:	7e 05                	jle    c000f09c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f097:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f09c:	89 df                	mov    edi,ebx
c000f09e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f0a2:	eb 02                	jmp    c000f0a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f0a4:	89 c7                	mov    edi,eax
c000f0a6:	31 d2                	xor    edx,edx
c000f0a8:	89 f8                	mov    eax,edi
c000f0aa:	46                   	inc    esi
c000f0ab:	f7 f1                	div    ecx
c000f0ad:	39 cf                	cmp    edi,ecx
c000f0af:	73 f3                	jae    c000f0a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f0b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0b4:	eb 02                	jmp    c000f0b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f0b6:	89 c3                	mov    ebx,eax
c000f0b8:	31 d2                	xor    edx,edx
c000f0ba:	89 d8                	mov    eax,ebx
c000f0bc:	f7 f1                	div    ecx
c000f0be:	4e                   	dec    esi
c000f0bf:	39 cb                	cmp    ebx,ecx
c000f0c1:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0c5:	88 16                	mov    BYTE PTR [esi],dl
c000f0c7:	73 ed                	jae    c000f0b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0cd:	83 c4 40             	add    esp,0x40
c000f0d0:	5b                   	pop    ebx
c000f0d1:	5e                   	pop    esi
c000f0d2:	5f                   	pop    edi
c000f0d3:	c3                   	ret    
c000f0d4:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0d7:	83 c7 02             	add    edi,0x2
c000f0da:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0de:	83 c6 02             	add    esi,0x2
c000f0e1:	83 e8 02             	sub    eax,0x2
c000f0e4:	eb 85                	jmp    c000f06b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0e6 <Dbg::logc(char)>:
c000f0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0ef:	ec                   	in     al,dx
c000f0f0:	a8 20                	test   al,0x20
c000f0f2:	74 fb                	je     c000f0ef <Dbg::logc(char)+0x9>
c000f0f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0f9:	88 c8                	mov    al,cl
c000f0fb:	ee                   	out    dx,al
c000f0fc:	c3                   	ret    

c000f0fd <Dbg::logs(char*)>:
c000f0fd:	53                   	push   ebx
c000f0fe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f102:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f105:	84 c0                	test   al,al
c000f107:	74 0f                	je     c000f118 <Dbg::logs(char*)+0x1b>
c000f109:	43                   	inc    ebx
c000f10a:	50                   	push   eax
c000f10b:	e8 d6 ff ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f110:	5a                   	pop    edx
c000f111:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f114:	84 c0                	test   al,al
c000f116:	75 f1                	jne    c000f109 <Dbg::logs(char*)+0xc>
c000f118:	5b                   	pop    ebx
c000f119:	c3                   	ret    

c000f11a <Dbg::logWriteInt(unsigned int)>:
c000f11a:	83 ec 10             	sub    esp,0x10
c000f11d:	6a 0a                	push   0xa
c000f11f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f123:	50                   	push   eax
c000f124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f128:	50                   	push   eax
c000f129:	e8 14 ff ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f12e:	50                   	push   eax
c000f12f:	e8 c9 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	c3                   	ret    

c000f138 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f138:	83 ec 10             	sub    esp,0x10
c000f13b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f13f:	50                   	push   eax
c000f140:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f144:	50                   	push   eax
c000f145:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f149:	52                   	push   edx
c000f14a:	e8 f3 fe ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f14f:	50                   	push   eax
c000f150:	e8 a8 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	c3                   	ret    

c000f159 <Dbg::kprintf(char const*, ...)>:
c000f159:	55                   	push   ebp
c000f15a:	57                   	push   edi
c000f15b:	56                   	push   esi
c000f15c:	53                   	push   ebx
c000f15d:	83 ec 0c             	sub    esp,0xc
c000f160:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f164:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f16c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f16f:	84 c0                	test   al,al
c000f171:	74 4d                	je     c000f1c0 <Dbg::kprintf(char const*, ...)+0x67>
c000f173:	31 ff                	xor    edi,edi
c000f175:	8d 77 01             	lea    esi,[edi+0x1]
c000f178:	3c 25                	cmp    al,0x25
c000f17a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f17d:	0f 85 ec 00 00 00    	jne    c000f26f <Dbg::kprintf(char const*, ...)+0x116>
c000f183:	83 c7 02             	add    edi,0x2
c000f186:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f189:	83 e8 25             	sub    eax,0x25
c000f18c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f18f:	3c 53                	cmp    al,0x53
c000f191:	0f 87 c0 00 00 00    	ja     c000f257 <Dbg::kprintf(char const*, ...)+0xfe>
c000f197:	25 ff 00 00 00       	and    eax,0xff
c000f19c:	ff 24 85 18 18 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde7e8]
c000f1a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a7:	89 c8                	mov    eax,ecx
c000f1a9:	83 c1 04             	add    ecx,0x4
c000f1ac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b2:	50                   	push   eax
c000f1b3:	e8 45 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f1b8:	58                   	pop    eax
c000f1b9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1bc:	84 c0                	test   al,al
c000f1be:	75 b5                	jne    c000f175 <Dbg::kprintf(char const*, ...)+0x1c>
c000f1c0:	83 c4 0c             	add    esp,0xc
c000f1c3:	5b                   	pop    ebx
c000f1c4:	5e                   	pop    esi
c000f1c5:	5f                   	pop    edi
c000f1c6:	5d                   	pop    ebp
c000f1c7:	c3                   	ret    
c000f1c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1cc:	89 d0                	mov    eax,edx
c000f1ce:	83 c2 04             	add    edx,0x4
c000f1d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d7:	50                   	push   eax
c000f1d8:	e8 3d ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f1dd:	58                   	pop    eax
c000f1de:	eb d9                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1e4:	89 d0                	mov    eax,edx
c000f1e6:	83 c2 04             	add    edx,0x4
c000f1e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1ed:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1f0:	50                   	push   eax
c000f1f1:	e8 f0 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f1f6:	58                   	pop    eax
c000f1f7:	eb c0                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1fd:	89 c8                	mov    eax,ecx
c000f1ff:	83 c1 04             	add    ecx,0x4
c000f202:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f206:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f208:	55                   	push   ebp
c000f209:	e8 0c ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f20e:	58                   	pop    eax
c000f20f:	eb a8                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f211:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f215:	89 c8                	mov    eax,ecx
c000f217:	83 c1 04             	add    ecx,0x4
c000f21a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f21e:	6a 10                	push   0x10
c000f220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f222:	51                   	push   ecx
c000f223:	e8 10 ff ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f228:	5d                   	pop    ebp
c000f229:	58                   	pop    eax
c000f22a:	eb 8d                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f22c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f230:	89 d0                	mov    eax,edx
c000f232:	83 c2 08             	add    edx,0x8
c000f235:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f239:	6a 10                	push   0x10
c000f23b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f23d:	50                   	push   eax
c000f23e:	e8 f5 fe ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f243:	58                   	pop    eax
c000f244:	5a                   	pop    edx
c000f245:	e9 6f ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f24a:	6a 25                	push   0x25
c000f24c:	e8 95 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f251:	5a                   	pop    edx
c000f252:	e9 62 ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f257:	6a 25                	push   0x25
c000f259:	e8 88 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f25e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f262:	50                   	push   eax
c000f263:	e8 7e fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f268:	5a                   	pop    edx
c000f269:	59                   	pop    ecx
c000f26a:	e9 4a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f26f:	50                   	push   eax
c000f270:	89 f7                	mov    edi,esi
c000f272:	e8 6f fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f277:	89 ee                	mov    esi,ebp
c000f279:	58                   	pop    eax
c000f27a:	e9 3a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f27f:	90                   	nop

c000f280 <File::read(unsigned long long, void*, int*)>:
c000f280:	53                   	push   ebx
c000f281:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f285:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f289:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f290:	3c 19                	cmp    al,0x19
c000f292:	77 35                	ja     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f294:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c000f29b:	85 c0                	test   eax,eax
c000f29d:	74 2a                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f29f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2a5:	85 c0                	test   eax,eax
c000f2a7:	74 20                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f2a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2ad:	74 21                	je     c000f2d0 <File::read(unsigned long long, void*, int*)+0x50>
c000f2af:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2c3:	5b                   	pop    ebx
c000f2c4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2c7:	ff e0                	jmp    eax
c000f2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ce:	eb 05                	jmp    c000f2d5 <File::read(unsigned long long, void*, int*)+0x55>
c000f2d0:	b8 05 00 00 00       	mov    eax,0x5
c000f2d5:	5b                   	pop    ebx
c000f2d6:	c3                   	ret    
c000f2d7:	90                   	nop

c000f2d8 <File::write(unsigned long long, void*, int*)>:
c000f2d8:	53                   	push   ebx
c000f2d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2e8:	3c 19                	cmp    al,0x19
c000f2ea:	77 35                	ja     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2ec:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c000f2f3:	85 c0                	test   eax,eax
c000f2f5:	74 2a                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2fd:	85 c0                	test   eax,eax
c000f2ff:	74 20                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f301:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f305:	74 21                	je     c000f328 <File::write(unsigned long long, void*, int*)+0x50>
c000f307:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f309:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f30d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f317:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f31b:	5b                   	pop    ebx
c000f31c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f31f:	ff e0                	jmp    eax
c000f321:	b8 0b 00 00 00       	mov    eax,0xb
c000f326:	eb 05                	jmp    c000f32d <File::write(unsigned long long, void*, int*)+0x55>
c000f328:	b8 05 00 00 00       	mov    eax,0x5
c000f32d:	5b                   	pop    ebx
c000f32e:	c3                   	ret    
c000f32f:	90                   	nop

c000f330 <Directory::read(unsigned long long, void*, int*)>:
c000f330:	53                   	push   ebx
c000f331:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f335:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f339:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f340:	3c 19                	cmp    al,0x19
c000f342:	77 35                	ja     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f344:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c000f34b:	85 c0                	test   eax,eax
c000f34d:	74 2a                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f34f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f355:	85 c0                	test   eax,eax
c000f357:	74 20                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f359:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f35d:	74 21                	je     c000f380 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f35f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f361:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f365:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f36b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f36f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f373:	5b                   	pop    ebx
c000f374:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f377:	ff e0                	jmp    eax
c000f379:	b8 0b 00 00 00       	mov    eax,0xb
c000f37e:	eb 05                	jmp    c000f385 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f380:	b8 05 00 00 00       	mov    eax,0x5
c000f385:	5b                   	pop    ebx
c000f386:	c3                   	ret    
c000f387:	90                   	nop

c000f388 <Directory::write(unsigned long long, void*, int*)>:
c000f388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f38c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f393:	b8 0b 00 00 00       	mov    eax,0xb
c000f398:	80 fa 19             	cmp    dl,0x19
c000f39b:	77 18                	ja     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f39d:	8b 14 95 c0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb440]
c000f3a4:	85 d2                	test   edx,edx
c000f3a6:	74 0d                	je     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f3a8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f3af:	19 c0                	sbb    eax,eax
c000f3b1:	83 e0 0a             	and    eax,0xa
c000f3b4:	40                   	inc    eax
c000f3b5:	c3                   	ret    

c000f3b6 <File::isAtty()>:
c000f3b6:	31 c0                	xor    eax,eax
c000f3b8:	c3                   	ret    
c000f3b9:	90                   	nop

c000f3ba <Directory::isAtty()>:
c000f3ba:	31 c0                	xor    eax,eax
c000f3bc:	c3                   	ret    
c000f3bd:	90                   	nop

c000f3be <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3be:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c3:	c3                   	ret    

c000f3c4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3c4:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c9:	c3                   	ret    

c000f3ca <File::~File()>:
c000f3ca:	83 ec 0c             	sub    esp,0xc
c000f3cd:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	89 10                	mov    DWORD PTR [eax],edx
c000f3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	50                   	push   eax
c000f3e0:	e8 f3 ea ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	90                   	nop
c000f3e9:	83 c4 0c             	add    esp,0xc
c000f3ec:	c3                   	ret    
c000f3ed:	90                   	nop

c000f3ee <File::~File()>:
c000f3ee:	83 ec 0c             	sub    esp,0xc
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f8:	e8 cd ff ff ff       	call   c000f3ca <File::~File()>
c000f3fd:	83 c4 10             	add    esp,0x10
c000f400:	83 ec 08             	sub    esp,0x8
c000f403:	68 14 01 00 00       	push   0x114
c000f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f40c:	e8 22 fc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f411:	83 c4 10             	add    esp,0x10
c000f414:	83 c4 0c             	add    esp,0xc
c000f417:	c3                   	ret    

c000f418 <Directory::~Directory()>:
c000f418:	83 ec 0c             	sub    esp,0xc
c000f41b:	ba f0 19 02 c0       	mov    edx,0xc00219f0
c000f420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f424:	89 10                	mov    DWORD PTR [eax],edx
c000f426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42a:	83 ec 0c             	sub    esp,0xc
c000f42d:	50                   	push   eax
c000f42e:	e8 a5 ea ff ff       	call   c000ded8 <UnixFile::~UnixFile()>
c000f433:	83 c4 10             	add    esp,0x10
c000f436:	90                   	nop
c000f437:	83 c4 0c             	add    esp,0xc
c000f43a:	c3                   	ret    
c000f43b:	90                   	nop

c000f43c <Directory::~Directory()>:
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	83 ec 0c             	sub    esp,0xc
c000f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f446:	e8 cd ff ff ff       	call   c000f418 <Directory::~Directory()>
c000f44b:	83 c4 10             	add    esp,0x10
c000f44e:	83 ec 08             	sub    esp,0x8
c000f451:	68 14 01 00 00       	push   0x114
c000f456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45a:	e8 d4 fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	83 c4 0c             	add    esp,0xc
c000f465:	c3                   	ret    

c000f466 <Filesystem::Filesystem()>:
c000f466:	ba 70 19 02 c0       	mov    edx,0xc0021970
c000f46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46f:	89 10                	mov    DWORD PTR [eax],edx
c000f471:	8b 15 28 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024728
c000f477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f47b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f482:	a3 28 47 02 c0       	mov    ds:0xc0024728,eax
c000f487:	90                   	nop
c000f488:	c3                   	ret    
c000f489:	90                   	nop

c000f48a <Filesystem::~Filesystem()>:
c000f48a:	ba 70 19 02 c0       	mov    edx,0xc0021970
c000f48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f493:	89 10                	mov    DWORD PTR [eax],edx
c000f495:	90                   	nop
c000f496:	c3                   	ret    
c000f497:	90                   	nop

c000f498 <Filesystem::~Filesystem()>:
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f49f:	e8 e6 ff ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c000f4a4:	83 c4 04             	add    esp,0x4
c000f4a7:	83 ec 08             	sub    esp,0x8
c000f4aa:	6a 08                	push   0x8
c000f4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b0:	e8 7e fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	83 c4 0c             	add    esp,0xc
c000f4bb:	c3                   	ret    

c000f4bc <initVFS()>:
c000f4bc:	83 ec 18             	sub    esp,0x18
c000f4bf:	6a 08                	push   0x8
c000f4c1:	e8 5e fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c9:	e8 be b3 00 00       	call   c001a88c <FAT::FAT()>
c000f4ce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4d5:	e8 4a fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4da:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4dd:	e8 4a c6 00 00       	call   c001bb2c <ISO9660::ISO9660()>
c000f4e2:	83 c4 1c             	add    esp,0x1c
c000f4e5:	c3                   	ret    

c000f4e6 <standardiseFiles(char*, char const*, char const*)>:
c000f4e6:	55                   	push   ebp
c000f4e7:	57                   	push   edi
c000f4e8:	56                   	push   esi
c000f4e9:	53                   	push   ebx
c000f4ea:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4f0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4f7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4fe:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f505:	68 00 04 00 00       	push   0x400
c000f50a:	6a 00                	push   0x0
c000f50c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f510:	56                   	push   esi
c000f511:	e8 a4 11 ff ff       	call   c00006ba <memset>
c000f516:	83 c4 10             	add    esp,0x10
c000f519:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f51d:	75 0b                	jne    c000f52a <standardiseFiles(char*, char const*, char const*)+0x44>
c000f51f:	50                   	push   eax
c000f520:	50                   	push   eax
c000f521:	57                   	push   edi
c000f522:	56                   	push   esi
c000f523:	e8 31 12 ff ff       	call   c0000759 <strcpy>
c000f528:	eb 41                	jmp    c000f56b <standardiseFiles(char*, char const*, char const*)+0x85>
c000f52a:	8a 07                	mov    al,BYTE PTR [edi]
c000f52c:	3c 5c                	cmp    al,0x5c
c000f52e:	74 04                	je     c000f534 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f530:	3c 2f                	cmp    al,0x2f
c000f532:	75 18                	jne    c000f54c <standardiseFiles(char*, char const*, char const*)+0x66>
c000f534:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f537:	3c 60                	cmp    al,0x60
c000f539:	7e 03                	jle    c000f53e <standardiseFiles(char*, char const*, char const*)+0x58>
c000f53b:	83 e8 20             	sub    eax,0x20
c000f53e:	88 04 24             	mov    BYTE PTR [esp],al
c000f541:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f548:	50                   	push   eax
c000f549:	50                   	push   eax
c000f54a:	eb 18                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f54c:	50                   	push   eax
c000f54d:	50                   	push   eax
c000f54e:	55                   	push   ebp
c000f54f:	56                   	push   esi
c000f550:	e8 04 12 ff ff       	call   c0000759 <strcpy>
c000f555:	5a                   	pop    edx
c000f556:	59                   	pop    ecx
c000f557:	68 94 2c 02 c0       	push   0xc0022c94
c000f55c:	56                   	push   esi
c000f55d:	e8 ae 12 ff ff       	call   c0000810 <strcat>
c000f562:	5d                   	pop    ebp
c000f563:	58                   	pop    eax
c000f564:	57                   	push   edi
c000f565:	56                   	push   esi
c000f566:	e8 a5 12 ff ff       	call   c0000810 <strcat>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f571:	3c 60                	cmp    al,0x60
c000f573:	7e 03                	jle    c000f578 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f575:	83 e8 20             	sub    eax,0x20
c000f578:	88 04 24             	mov    BYTE PTR [esp],al
c000f57b:	88 03                	mov    BYTE PTR [ebx],al
c000f57d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f584:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f58a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f58e:	bf 03 00 00 00       	mov    edi,0x3
c000f593:	b8 03 00 00 00       	mov    eax,0x3
c000f598:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f59b:	84 d2                	test   dl,dl
c000f59d:	0f 84 91 00 00 00    	je     c000f634 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f5a3:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f5a6:	80 fa 2f             	cmp    dl,0x2f
c000f5a9:	74 05                	je     c000f5b0 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f5ab:	80 fa 5c             	cmp    dl,0x5c
c000f5ae:	75 12                	jne    c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b0:	89 c5                	mov    ebp,eax
c000f5b2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f5b7:	74 09                	je     c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b9:	40                   	inc    eax
c000f5ba:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5be:	89 cf                	mov    edi,ecx
c000f5c0:	eb d6                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5c2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5c7:	75 5b                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5c9:	80 fa 2e             	cmp    dl,0x2e
c000f5cc:	75 56                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5ce:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5d2:	74 19                	je     c000f5ed <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5d4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5d9:	74 53                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5db:	89 f9                	mov    ecx,edi
c000f5dd:	41                   	inc    ecx
c000f5de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5e1:	80 fa 5c             	cmp    dl,0x5c
c000f5e4:	74 f7                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5e6:	80 fa 2f             	cmp    dl,0x2f
c000f5e9:	74 f2                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5eb:	eb d1                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ed:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5f2:	74 3a                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5f4:	83 f8 03             	cmp    eax,0x3
c000f5f7:	74 c5                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5f9:	41                   	inc    ecx
c000f5fa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5fd:	80 fa 2f             	cmp    dl,0x2f
c000f600:	74 f7                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f602:	80 fa 5c             	cmp    dl,0x5c
c000f605:	74 f2                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f607:	48                   	dec    eax
c000f608:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f60c:	75 06                	jne    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f60e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f612:	eb f3                	jmp    c000f607 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f614:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f618:	74 07                	je     c000f621 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f61a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f61e:	48                   	dec    eax
c000f61f:	eb f3                	jmp    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f621:	40                   	inc    eax
c000f622:	eb 9a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f624:	80 fa 2f             	cmp    dl,0x2f
c000f627:	74 95                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f629:	80 fa 5c             	cmp    dl,0x5c
c000f62c:	74 90                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f62e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f631:	40                   	inc    eax
c000f632:	eb 8a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f634:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	53                   	push   ebx
c000f63c:	e8 96 10 ff ff       	call   c00006d7 <strlen>
c000f641:	83 c4 10             	add    esp,0x10
c000f644:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f649:	75 26                	jne    c000f671 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f64b:	83 ec 0c             	sub    esp,0xc
c000f64e:	53                   	push   ebx
c000f64f:	e8 83 10 ff ff       	call   c00006d7 <strlen>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f65c:	74 26                	je     c000f684 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	53                   	push   ebx
c000f662:	e8 70 10 ff ff       	call   c00006d7 <strlen>
c000f667:	83 c4 10             	add    esp,0x10
c000f66a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f66f:	eb c7                	jmp    c000f638 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	53                   	push   ebx
c000f675:	e8 5d 10 ff ff       	call   c00006d7 <strlen>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f682:	74 c7                	je     c000f64b <standardiseFiles(char*, char const*, char const*)+0x165>
c000f684:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f68a:	5b                   	pop    ebx
c000f68b:	5e                   	pop    esi
c000f68c:	5f                   	pop    edi
c000f68d:	5d                   	pop    ebp
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <File::File(char const*, Process*)>:
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	6a 00                	push   0x0
c000f69c:	50                   	push   eax
c000f69d:	e8 94 e6 ff ff       	call   c000dd36 <UnixFile::UnixFile(int)>
c000f6a2:	83 c4 10             	add    esp,0x10
c000f6a5:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c000f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ae:	89 10                	mov    DWORD PTR [eax],edx
c000f6b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6be:	83 c0 0d             	add    eax,0xd
c000f6c1:	83 ec 04             	sub    esp,0x4
c000f6c4:	52                   	push   edx
c000f6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c9:	50                   	push   eax
c000f6ca:	e8 17 fe ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6ee:	90                   	nop
c000f6ef:	83 c4 0c             	add    esp,0xc
c000f6f2:	c3                   	ret    
c000f6f3:	90                   	nop

c000f6f4 <File::open(FileOpenMode)>:
c000f6f4:	53                   	push   ebx
c000f6f5:	b8 0b 00 00 00       	mov    eax,0xb
c000f6fa:	83 ec 08             	sub    esp,0x8
c000f6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f701:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f708:	80 fa 19             	cmp    dl,0x19
c000f70b:	77 40                	ja     c000f74d <File::open(FileOpenMode)+0x59>
c000f70d:	8b 14 95 c0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb440]
c000f714:	85 d2                	test   edx,edx
c000f716:	74 35                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f718:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f71e:	85 d2                	test   edx,edx
c000f720:	74 2b                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f722:	b8 06 00 00 00       	mov    eax,0x6
c000f727:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f72b:	75 20                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f72d:	8b 02                	mov    eax,DWORD PTR [edx]
c000f72f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f739:	51                   	push   ecx
c000f73a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f73d:	51                   	push   ecx
c000f73e:	52                   	push   edx
c000f73f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	85 c0                	test   eax,eax
c000f747:	75 04                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f749:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f74d:	83 c4 08             	add    esp,0x8
c000f750:	5b                   	pop    ebx
c000f751:	c3                   	ret    

c000f752 <File::close()>:
c000f752:	53                   	push   ebx
c000f753:	b8 0b 00 00 00       	mov    eax,0xb
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f75f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f766:	80 fa 19             	cmp    dl,0x19
c000f769:	77 41                	ja     c000f7ac <File::close()+0x5a>
c000f76b:	8b 1c 95 c0 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb440]
c000f772:	85 db                	test   ebx,ebx
c000f774:	74 36                	je     c000f7ac <File::close()+0x5a>
c000f776:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f77d:	74 2d                	je     c000f7ac <File::close()+0x5a>
c000f77f:	b8 05 00 00 00       	mov    eax,0x5
c000f784:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f788:	74 22                	je     c000f7ac <File::close()+0x5a>
c000f78a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f78e:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c000f795:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f79b:	53                   	push   ebx
c000f79c:	53                   	push   ebx
c000f79d:	8b 10                	mov    edx,DWORD PTR [eax]
c000f79f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7a5:	50                   	push   eax
c000f7a6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	83 c4 08             	add    esp,0x8
c000f7af:	5b                   	pop    ebx
c000f7b0:	c3                   	ret    
c000f7b1:	90                   	nop

c000f7b2 <File::seek(unsigned long long)>:
c000f7b2:	56                   	push   esi
c000f7b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b8:	53                   	push   ebx
c000f7b9:	51                   	push   ecx
c000f7ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7c6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7cd:	80 fa 19             	cmp    dl,0x19
c000f7d0:	77 31                	ja     c000f803 <File::seek(unsigned long long)+0x51>
c000f7d2:	8b 14 95 c0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb440]
c000f7d9:	85 d2                	test   edx,edx
c000f7db:	74 26                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7e3:	85 d2                	test   edx,edx
c000f7e5:	74 1c                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7e7:	b8 05 00 00 00       	mov    eax,0x5
c000f7ec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7f0:	74 11                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f4:	53                   	push   ebx
c000f7f5:	51                   	push   ecx
c000f7f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7fc:	52                   	push   edx
c000f7fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f800:	83 c4 10             	add    esp,0x10
c000f803:	5a                   	pop    edx
c000f804:	5b                   	pop    ebx
c000f805:	5e                   	pop    esi
c000f806:	c3                   	ret    
c000f807:	90                   	nop

c000f808 <File::tell(unsigned long long*)>:
c000f808:	83 ec 0c             	sub    esp,0xc
c000f80b:	b8 0b 00 00 00       	mov    eax,0xb
c000f810:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f814:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f81b:	80 fa 19             	cmp    dl,0x19
c000f81e:	77 34                	ja     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f820:	8b 14 95 c0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb440]
c000f827:	85 d2                	test   edx,edx
c000f829:	74 29                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f82b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f831:	85 d2                	test   edx,edx
c000f833:	74 1f                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f835:	b8 05 00 00 00       	mov    eax,0x5
c000f83a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f83e:	74 14                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f840:	50                   	push   eax
c000f841:	8b 02                	mov    eax,DWORD PTR [edx]
c000f843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f847:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f84d:	52                   	push   edx
c000f84e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	83 c4 0c             	add    esp,0xc
c000f857:	c3                   	ret    

c000f858 <File::rewind()>:
c000f858:	83 ec 10             	sub    esp,0x10
c000f85b:	6a 00                	push   0x0
c000f85d:	6a 00                	push   0x0
c000f85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f863:	e8 4a ff ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c000f868:	83 c4 1c             	add    esp,0x1c
c000f86b:	c3                   	ret    

c000f86c <File::unlink()>:
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	b8 0b 00 00 00       	mov    eax,0xb
c000f874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f87f:	80 f9 19             	cmp    cl,0x19
c000f882:	77 2f                	ja     c000f8b3 <File::unlink()+0x47>
c000f884:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000f88b:	85 c9                	test   ecx,ecx
c000f88d:	74 24                	je     c000f8b3 <File::unlink()+0x47>
c000f88f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f895:	85 c9                	test   ecx,ecx
c000f897:	74 1a                	je     c000f8b3 <File::unlink()+0x47>
c000f899:	b8 06 00 00 00       	mov    eax,0x6
c000f89e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8a2:	75 0f                	jne    c000f8b3 <File::unlink()+0x47>
c000f8a4:	50                   	push   eax
c000f8a5:	83 c2 0d             	add    edx,0xd
c000f8a8:	50                   	push   eax
c000f8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ab:	52                   	push   edx
c000f8ac:	51                   	push   ecx
c000f8ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	83 c4 0c             	add    esp,0xc
c000f8b6:	c3                   	ret    
c000f8b7:	90                   	nop

c000f8b8 <File::rename(char const*)>:
c000f8b8:	83 ec 0c             	sub    esp,0xc
c000f8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8cb:	80 f9 19             	cmp    cl,0x19
c000f8ce:	77 32                	ja     c000f902 <File::rename(char const*)+0x4a>
c000f8d0:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000f8d7:	85 c9                	test   ecx,ecx
c000f8d9:	74 27                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8e1:	85 c9                	test   ecx,ecx
c000f8e3:	74 1d                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8e5:	b8 06 00 00 00       	mov    eax,0x6
c000f8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ee:	75 12                	jne    c000f902 <File::rename(char const*)+0x4a>
c000f8f0:	50                   	push   eax
c000f8f1:	83 c2 0d             	add    edx,0xd
c000f8f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8fa:	52                   	push   edx
c000f8fb:	51                   	push   ecx
c000f8fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <File::chfatattr(unsigned char, unsigned char)>:
c000f906:	57                   	push   edi
c000f907:	b8 0b 00 00 00       	mov    eax,0xb
c000f90c:	56                   	push   esi
c000f90d:	53                   	push   ebx
c000f90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f912:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f916:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f91a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f921:	80 f9 19             	cmp    cl,0x19
c000f924:	77 37                	ja     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f926:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000f92d:	85 c9                	test   ecx,ecx
c000f92f:	74 2c                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f931:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f937:	85 c9                	test   ecx,ecx
c000f939:	74 22                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f93b:	b8 06 00 00 00       	mov    eax,0x6
c000f940:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f944:	75 17                	jne    c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f946:	89 f0                	mov    eax,esi
c000f948:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f94a:	0f b6 f0             	movzx  esi,al
c000f94d:	56                   	push   esi
c000f94e:	83 c2 0d             	add    edx,0xd
c000f951:	0f b6 db             	movzx  ebx,bl
c000f954:	53                   	push   ebx
c000f955:	52                   	push   edx
c000f956:	51                   	push   ecx
c000f957:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	5b                   	pop    ebx
c000f95e:	5e                   	pop    esi
c000f95f:	5f                   	pop    edi
c000f960:	c3                   	ret    
c000f961:	90                   	nop

c000f962 <File::exists()>:
c000f962:	83 ec 0c             	sub    esp,0xc
c000f965:	31 c0                	xor    eax,eax
c000f967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f96b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f972:	80 f9 19             	cmp    cl,0x19
c000f975:	77 24                	ja     c000f99b <File::exists()+0x39>
c000f977:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000f97e:	85 c9                	test   ecx,ecx
c000f980:	74 19                	je     c000f99b <File::exists()+0x39>
c000f982:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f988:	85 c9                	test   ecx,ecx
c000f98a:	74 0f                	je     c000f99b <File::exists()+0x39>
c000f98c:	50                   	push   eax
c000f98d:	83 c2 0d             	add    edx,0xd
c000f990:	50                   	push   eax
c000f991:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f993:	52                   	push   edx
c000f994:	51                   	push   ecx
c000f995:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f998:	83 c4 10             	add    esp,0x10
c000f99b:	83 c4 0c             	add    esp,0xc
c000f99e:	c3                   	ret    
c000f99f:	90                   	nop

c000f9a0 <File::stat(unsigned long long*, bool*)>:
c000f9a0:	56                   	push   esi
c000f9a1:	53                   	push   ebx
c000f9a2:	50                   	push   eax
c000f9a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9bb:	80 f9 19             	cmp    cl,0x19
c000f9be:	77 3d                	ja     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9c0:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000f9c7:	85 c9                	test   ecx,ecx
c000f9c9:	74 32                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9d1:	85 c9                	test   ecx,ecx
c000f9d3:	74 28                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9db:	74 13                	je     c000f9f0 <File::stat(unsigned long long*, bool*)+0x50>
c000f9dd:	83 ec 04             	sub    esp,0x4
c000f9e0:	56                   	push   esi
c000f9e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9e7:	51                   	push   ecx
c000f9e8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9eb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9ee:	eb 0a                	jmp    c000f9fa <File::stat(unsigned long long*, bool*)+0x5a>
c000f9f0:	53                   	push   ebx
c000f9f1:	83 c2 0d             	add    edx,0xd
c000f9f4:	56                   	push   esi
c000f9f5:	52                   	push   edx
c000f9f6:	51                   	push   ecx
c000f9f7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	5a                   	pop    edx
c000f9fe:	5b                   	pop    ebx
c000f9ff:	5e                   	pop    esi
c000fa00:	c3                   	ret    

c000fa01 <getcwd(Process*, char*, int)>:
c000fa01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa05:	31 c0                	xor    eax,eax
c000fa07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fa0a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fa0e:	7d 15                	jge    c000fa25 <getcwd(Process*, char*, int)+0x24>
c000fa10:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa14:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa1b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa1e:	84 c9                	test   cl,cl
c000fa20:	74 06                	je     c000fa28 <getcwd(Process*, char*, int)+0x27>
c000fa22:	40                   	inc    eax
c000fa23:	eb e2                	jmp    c000fa07 <getcwd(Process*, char*, int)+0x6>
c000fa25:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa28:	31 c0                	xor    eax,eax
c000fa2a:	c3                   	ret    

c000fa2b <setcwd(Process*, char*)>:
c000fa2b:	55                   	push   ebp
c000fa2c:	57                   	push   edi
c000fa2d:	56                   	push   esi
c000fa2e:	53                   	push   ebx
c000fa2f:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa35:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa3c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa42:	57                   	push   edi
c000fa43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa4e:	56                   	push   esi
c000fa4f:	e8 92 fa ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fa54:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa57:	e8 7b 0c ff ff       	call   c00006d7 <strlen>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	83 f8 02             	cmp    eax,0x2
c000fa62:	77 17                	ja     c000fa7b <setcwd(Process*, char*)+0x50>
c000fa64:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa69:	83 e8 41             	sub    eax,0x41
c000fa6c:	83 f8 19             	cmp    eax,0x19
c000fa6f:	76 24                	jbe    c000fa95 <setcwd(Process*, char*)+0x6a>
c000fa71:	b8 03 00 00 00       	mov    eax,0x3
c000fa76:	e9 cb 00 00 00       	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fa7b:	83 ec 0c             	sub    esp,0xc
c000fa7e:	56                   	push   esi
c000fa7f:	e8 53 0c ff ff       	call   c00006d7 <strlen>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	83 f8 03             	cmp    eax,0x3
c000fa8a:	75 33                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa8c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa91:	75 2c                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa93:	eb cf                	jmp    c000fa64 <setcwd(Process*, char*)+0x39>
c000fa95:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c000fa9c:	b8 05 00 00 00       	mov    eax,0x5
c000faa1:	85 d2                	test   edx,edx
c000faa3:	0f 84 9d 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000faa9:	b8 06 00 00 00       	mov    eax,0x6
c000faae:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fab5:	0f 84 8b 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000fabb:	51                   	push   ecx
c000fabc:	51                   	push   ecx
c000fabd:	eb 7b                	jmp    c000fb3a <setcwd(Process*, char*)+0x10f>
c000fabf:	83 ec 0c             	sub    esp,0xc
c000fac2:	68 14 01 00 00       	push   0x114
c000fac7:	e8 58 f5 ff ff       	call   c000f024 <operator new(unsigned long)>
c000facc:	83 c4 0c             	add    esp,0xc
c000facf:	89 c3                	mov    ebx,eax
c000fad1:	55                   	push   ebp
c000fad2:	56                   	push   esi
c000fad3:	50                   	push   eax
c000fad4:	e8 b7 fb ff ff       	call   c000f690 <File::File(char const*, Process*)>
c000fad9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fade:	83 c4 0c             	add    esp,0xc
c000fae1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fae5:	50                   	push   eax
c000fae6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000faea:	50                   	push   eax
c000faeb:	53                   	push   ebx
c000faec:	e8 af fe ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000faf6:	83 f8 02             	cmp    eax,0x2
c000faf9:	75 09                	jne    c000fb04 <setcwd(Process*, char*)+0xd9>
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	53                   	push   ebx
c000faff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb02:	eb 0d                	jmp    c000fb11 <setcwd(Process*, char*)+0xe6>
c000fb04:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fb07:	85 c0                	test   eax,eax
c000fb09:	74 10                	je     c000fb1b <setcwd(Process*, char*)+0xf0>
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	53                   	push   ebx
c000fb0f:	ff d2                	call   edx
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	b8 01 00 00 00       	mov    eax,0x1
c000fb19:	eb 2b                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb1b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb20:	75 10                	jne    c000fb32 <setcwd(Process*, char*)+0x107>
c000fb22:	83 ec 0c             	sub    esp,0xc
c000fb25:	53                   	push   ebx
c000fb26:	ff d2                	call   edx
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	b8 02 00 00 00       	mov    eax,0x2
c000fb30:	eb 14                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	53                   	push   ebx
c000fb36:	ff d2                	call   edx
c000fb38:	58                   	pop    eax
c000fb39:	5a                   	pop    edx
c000fb3a:	56                   	push   esi
c000fb3b:	57                   	push   edi
c000fb3c:	e8 18 0c ff ff       	call   c0000759 <strcpy>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	31 c0                	xor    eax,eax
c000fb46:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb4c:	5b                   	pop    ebx
c000fb4d:	5e                   	pop    esi
c000fb4e:	5f                   	pop    edi
c000fb4f:	5d                   	pop    ebp
c000fb50:	c3                   	ret    
c000fb51:	90                   	nop

c000fb52 <Directory::Directory(char const*, Process*)>:
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb59:	83 ec 08             	sub    esp,0x8
c000fb5c:	6a 00                	push   0x0
c000fb5e:	50                   	push   eax
c000fb5f:	e8 d2 e1 ff ff       	call   c000dd36 <UnixFile::UnixFile(int)>
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	ba f0 19 02 c0       	mov    edx,0xc00219f0
c000fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb70:	89 10                	mov    DWORD PTR [eax],edx
c000fb72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	83 c0 0d             	add    eax,0xd
c000fb83:	83 ec 04             	sub    esp,0x4
c000fb86:	52                   	push   edx
c000fb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb8b:	50                   	push   eax
c000fb8c:	e8 55 f9 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb98:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb9b:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fbb0:	90                   	nop
c000fbb1:	83 c4 0c             	add    esp,0xc
c000fbb4:	c3                   	ret    
c000fbb5:	90                   	nop

c000fbb6 <Directory::open()>:
c000fbb6:	53                   	push   ebx
c000fbb7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbbc:	83 ec 08             	sub    esp,0x8
c000fbbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbca:	80 fa 19             	cmp    dl,0x19
c000fbcd:	77 3d                	ja     c000fc0c <Directory::open()+0x56>
c000fbcf:	8b 14 95 c0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb440]
c000fbd6:	85 d2                	test   edx,edx
c000fbd8:	74 32                	je     c000fc0c <Directory::open()+0x56>
c000fbda:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbe0:	85 d2                	test   edx,edx
c000fbe2:	74 28                	je     c000fc0c <Directory::open()+0x56>
c000fbe4:	b8 06 00 00 00       	mov    eax,0x6
c000fbe9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbed:	75 1d                	jne    c000fc0c <Directory::open()+0x56>
c000fbef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbf5:	50                   	push   eax
c000fbf6:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbf8:	51                   	push   ecx
c000fbf9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbfc:	51                   	push   ecx
c000fbfd:	52                   	push   edx
c000fbfe:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	85 c0                	test   eax,eax
c000fc06:	75 04                	jne    c000fc0c <Directory::open()+0x56>
c000fc08:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fc0c:	83 c4 08             	add    esp,0x8
c000fc0f:	5b                   	pop    ebx
c000fc10:	c3                   	ret    
c000fc11:	90                   	nop

c000fc12 <Directory::close()>:
c000fc12:	53                   	push   ebx
c000fc13:	b8 0b 00 00 00       	mov    eax,0xb
c000fc18:	83 ec 08             	sub    esp,0x8
c000fc1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc1f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc26:	80 fa 19             	cmp    dl,0x19
c000fc29:	77 41                	ja     c000fc6c <Directory::close()+0x5a>
c000fc2b:	8b 1c 95 c0 4b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb440]
c000fc32:	85 db                	test   ebx,ebx
c000fc34:	74 36                	je     c000fc6c <Directory::close()+0x5a>
c000fc36:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc3d:	74 2d                	je     c000fc6c <Directory::close()+0x5a>
c000fc3f:	b8 05 00 00 00       	mov    eax,0x5
c000fc44:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc48:	74 22                	je     c000fc6c <Directory::close()+0x5a>
c000fc4a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc4e:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c000fc55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc5b:	53                   	push   ebx
c000fc5c:	53                   	push   ebx
c000fc5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc5f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc65:	50                   	push   eax
c000fc66:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	83 c4 08             	add    esp,0x8
c000fc6f:	5b                   	pop    ebx
c000fc70:	c3                   	ret    
c000fc71:	90                   	nop

c000fc72 <Directory::unlink()>:
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	b8 0b 00 00 00       	mov    eax,0xb
c000fc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc85:	80 f9 19             	cmp    cl,0x19
c000fc88:	77 2f                	ja     c000fcb9 <Directory::unlink()+0x47>
c000fc8a:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000fc91:	85 c9                	test   ecx,ecx
c000fc93:	74 24                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc9b:	85 c9                	test   ecx,ecx
c000fc9d:	74 1a                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc9f:	b8 06 00 00 00       	mov    eax,0x6
c000fca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fca8:	75 0f                	jne    c000fcb9 <Directory::unlink()+0x47>
c000fcaa:	50                   	push   eax
c000fcab:	83 c2 0d             	add    edx,0xd
c000fcae:	50                   	push   eax
c000fcaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcb1:	52                   	push   edx
c000fcb2:	51                   	push   ecx
c000fcb3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	83 c4 0c             	add    esp,0xc
c000fcbc:	c3                   	ret    
c000fcbd:	90                   	nop

c000fcbe <Directory::rename(char const*)>:
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	b8 0b 00 00 00       	mov    eax,0xb
c000fcc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcd1:	80 f9 19             	cmp    cl,0x19
c000fcd4:	77 32                	ja     c000fd08 <Directory::rename(char const*)+0x4a>
c000fcd6:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000fcdd:	85 c9                	test   ecx,ecx
c000fcdf:	74 27                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fce1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fce7:	85 c9                	test   ecx,ecx
c000fce9:	74 1d                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fceb:	b8 06 00 00 00       	mov    eax,0x6
c000fcf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcf4:	75 12                	jne    c000fd08 <Directory::rename(char const*)+0x4a>
c000fcf6:	50                   	push   eax
c000fcf7:	83 c2 0d             	add    edx,0xd
c000fcfa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd00:	52                   	push   edx
c000fd01:	51                   	push   ecx
c000fd02:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	83 c4 0c             	add    esp,0xc
c000fd0b:	c3                   	ret    

c000fd0c <Directory::exists()>:
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	31 c0                	xor    eax,eax
c000fd11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd15:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd1c:	80 f9 19             	cmp    cl,0x19
c000fd1f:	77 24                	ja     c000fd45 <Directory::exists()+0x39>
c000fd21:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000fd28:	85 c9                	test   ecx,ecx
c000fd2a:	74 19                	je     c000fd45 <Directory::exists()+0x39>
c000fd2c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd32:	85 c9                	test   ecx,ecx
c000fd34:	74 0f                	je     c000fd45 <Directory::exists()+0x39>
c000fd36:	50                   	push   eax
c000fd37:	83 c2 0d             	add    edx,0xd
c000fd3a:	50                   	push   eax
c000fd3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd3d:	52                   	push   edx
c000fd3e:	51                   	push   ecx
c000fd3f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd42:	83 c4 10             	add    esp,0x10
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	c3                   	ret    
c000fd49:	90                   	nop

c000fd4a <Directory::read(dirent*)>:
c000fd4a:	83 ec 1c             	sub    esp,0x1c
c000fd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd52:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd56:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd5d:	80 fa 19             	cmp    dl,0x19
c000fd60:	77 30                	ja     c000fd92 <Directory::read(dirent*)+0x48>
c000fd62:	8b 14 95 c0 4b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb440]
c000fd69:	85 d2                	test   edx,edx
c000fd6b:	74 25                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd6d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd74:	74 1c                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd7f:	52                   	push   edx
c000fd80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd84:	6a 00                	push   0x0
c000fd86:	68 10 01 00 00       	push   0x110
c000fd8b:	51                   	push   ecx
c000fd8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd8f:	83 c4 20             	add    esp,0x20
c000fd92:	83 c4 1c             	add    esp,0x1c
c000fd95:	c3                   	ret    

c000fd96 <Directory::create()>:
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	b8 0b 00 00 00       	mov    eax,0xb
c000fd9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fda2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fda9:	80 f9 19             	cmp    cl,0x19
c000fdac:	77 2f                	ja     c000fddd <Directory::create()+0x47>
c000fdae:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c000fdb5:	85 c9                	test   ecx,ecx
c000fdb7:	74 24                	je     c000fddd <Directory::create()+0x47>
c000fdb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdbf:	85 c9                	test   ecx,ecx
c000fdc1:	74 1a                	je     c000fddd <Directory::create()+0x47>
c000fdc3:	b8 06 00 00 00       	mov    eax,0x6
c000fdc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdcc:	75 0f                	jne    c000fddd <Directory::create()+0x47>
c000fdce:	50                   	push   eax
c000fdcf:	83 c2 0d             	add    edx,0xd
c000fdd2:	50                   	push   eax
c000fdd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdd5:	52                   	push   edx
c000fdd6:	51                   	push   ecx
c000fdd7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	83 c4 0c             	add    esp,0xc
c000fde0:	c3                   	ret    
c000fde1:	90                   	nop

c000fde2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fde2:	b8 0a 00 00 00       	mov    eax,0xa
c000fde7:	c3                   	ret    

c000fde8 <Bus::Bus(char const*)>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdef:	83 ec 08             	sub    esp,0x8
c000fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf6:	50                   	push   eax
c000fdf7:	e8 62 09 00 00       	call   c001075e <Device::Device(char const*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe08:	89 10                	mov    DWORD PTR [eax],edx
c000fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe18:	90                   	nop
c000fe19:	83 c4 0c             	add    esp,0xc
c000fe1c:	c3                   	ret    
c000fe1d:	90                   	nop

c000fe1e <Bus::~Bus()>:
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2a:	89 10                	mov    DWORD PTR [eax],edx
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	50                   	push   eax
c000fe34:	e8 db 05 00 00       	call   c0010414 <Device::~Device()>
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	90                   	nop
c000fe3d:	83 c4 0c             	add    esp,0xc
c000fe40:	c3                   	ret    
c000fe41:	90                   	nop

c000fe42 <Bus::~Bus()>:
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	83 ec 0c             	sub    esp,0xc
c000fe48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4c:	e8 cd ff ff ff       	call   c000fe1e <Bus::~Bus()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	68 58 01 00 00       	push   0x158
c000fe5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe60:	e8 ce f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	83 c4 0c             	add    esp,0xc
c000fe6b:	c3                   	ret    

c000fe6c <Buzzer::Buzzer(char const*)>:
c000fe6c:	83 ec 0c             	sub    esp,0xc
c000fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe73:	83 ec 08             	sub    esp,0x8
c000fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7a:	50                   	push   eax
c000fe7b:	e8 de 08 00 00       	call   c001075e <Device::Device(char const*)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	ba 38 1a 02 c0       	mov    edx,0xc0021a38
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	89 10                	mov    DWORD PTR [eax],edx
c000fe8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000feaa:	90                   	nop
c000feab:	83 c4 0c             	add    esp,0xc
c000feae:	c3                   	ret    
c000feaf:	90                   	nop

c000feb0 <Buzzer::~Buzzer()>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	ba 38 1a 02 c0       	mov    edx,0xc0021a38
c000feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febc:	89 10                	mov    DWORD PTR [eax],edx
c000febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	50                   	push   eax
c000fec6:	e8 49 05 00 00       	call   c0010414 <Device::~Device()>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	90                   	nop
c000fecf:	83 c4 0c             	add    esp,0xc
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <Buzzer::~Buzzer()>:
c000fed4:	83 ec 0c             	sub    esp,0xc
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fede:	e8 cd ff ff ff       	call   c000feb0 <Buzzer::~Buzzer()>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	83 ec 08             	sub    esp,0x8
c000fee9:	68 5c 01 00 00       	push   0x15c
c000feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef2:	e8 3c f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	83 c4 0c             	add    esp,0xc
c000fefd:	c3                   	ret    

c000fefe <Buzzer::stop()>:
c000fefe:	83 ec 14             	sub    esp,0x14
c000ff01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff05:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff07:	6a 00                	push   0x0
c000ff09:	50                   	push   eax
c000ff0a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff0d:	83 c4 1c             	add    esp,0x1c
c000ff10:	c3                   	ret    

c000ff11 <beepThread(void*)>:
c000ff11:	53                   	push   ebx
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff19:	e8 59 8a 00 00       	call   c0018977 <unlockScheduler()>
c000ff1e:	52                   	push   edx
c000ff1f:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff24:	52                   	push   edx
c000ff25:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff2b:	52                   	push   edx
c000ff2c:	50                   	push   eax
c000ff2d:	e8 a1 8f 00 00       	call   c0018ed3 <nanoSleep(unsigned long long)>
c000ff32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff35:	e8 c4 ff ff ff       	call   c000fefe <Buzzer::stop()>
c000ff3a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff42:	83 c4 18             	add    esp,0x18
c000ff45:	5b                   	pop    ebx
c000ff46:	e9 cc 8e 00 00       	jmp    c0018e17 <blockTask(TaskState)>
c000ff4b:	90                   	nop

c000ff4c <Buzzer::beep(int, int, bool)>:
c000ff4c:	57                   	push   edi
c000ff4d:	56                   	push   esi
c000ff4e:	53                   	push   ebx
c000ff4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff5b:	52                   	push   edx
c000ff5c:	52                   	push   edx
c000ff5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff63:	56                   	push   esi
c000ff64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff67:	89 f8                	mov    eax,edi
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	84 c0                	test   al,al
c000ff6e:	74 1f                	je     c000ff8f <Buzzer::beep(int, int, bool)+0x43>
c000ff70:	50                   	push   eax
c000ff71:	50                   	push   eax
c000ff72:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff78:	99                   	cdq    
c000ff79:	52                   	push   edx
c000ff7a:	50                   	push   eax
c000ff7b:	e8 53 8f 00 00       	call   c0018ed3 <nanoSleep(unsigned long long)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff87:	5b                   	pop    ebx
c000ff88:	5e                   	pop    esi
c000ff89:	5f                   	pop    edi
c000ff8a:	e9 6f ff ff ff       	jmp    c000fefe <Buzzer::stop()>
c000ff8f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff95:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c000ff9a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ffa2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ffa6:	c7 44 24 14 11 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ff11
c000ffae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ffb2:	5b                   	pop    ebx
c000ffb3:	5e                   	pop    esi
c000ffb4:	5f                   	pop    edi
c000ffb5:	e9 f0 8a 00 00       	jmp    c0018aaa <Process::createThread(void (*)(void*), void*, int)>

c000ffba <loadClockSettings()>:
c000ffba:	c7 05 34 47 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024734,0xa
c000ffc4:	c6 05 31 47 02 c0 00 	mov    BYTE PTR ds:0xc0024731,0x0
c000ffcb:	c6 05 30 47 02 c0 01 	mov    BYTE PTR ds:0xc0024730,0x1
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <Clock::Clock(char const*)>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdb:	83 ec 08             	sub    esp,0x8
c000ffde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe2:	50                   	push   eax
c000ffe3:	e8 76 07 00 00       	call   c001075e <Device::Device(char const*)>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c000fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff4:	89 10                	mov    DWORD PTR [eax],edx
c000fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0010004:	90                   	nop
c0010005:	83 c4 0c             	add    esp,0xc
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <Clock::~Clock()>:
c001000a:	83 ec 0c             	sub    esp,0xc
c001000d:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c0010012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010016:	89 10                	mov    DWORD PTR [eax],edx
c0010018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	50                   	push   eax
c0010020:	e8 ef 03 00 00       	call   c0010414 <Device::~Device()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	90                   	nop
c0010029:	83 c4 0c             	add    esp,0xc
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <Clock::~Clock()>:
c001002e:	83 ec 0c             	sub    esp,0xc
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010038:	e8 cd ff ff ff       	call   c001000a <Clock::~Clock()>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	83 ec 08             	sub    esp,0x8
c0010043:	68 58 01 00 00       	push   0x158
c0010048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001004c:	e8 e2 ef ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	c3                   	ret    

c0010058 <Clock::timeInSecondsLocal()>:
c0010058:	53                   	push   ebx
c0010059:	83 ec 14             	sub    esp,0x14
c001005c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010060:	8b 10                	mov    edx,DWORD PTR [eax]
c0010062:	50                   	push   eax
c0010063:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010066:	0f b6 0d 30 47 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024730
c001006d:	03 0d 34 47 02 c0    	add    ecx,DWORD PTR ds:0xc0024734
c0010073:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010079:	89 cb                	mov    ebx,ecx
c001007b:	c1 fb 1f             	sar    ebx,0x1f
c001007e:	01 c8                	add    eax,ecx
c0010080:	11 da                	adc    edx,ebx
c0010082:	83 c4 10             	add    esp,0x10
c0010085:	31 c9                	xor    ecx,ecx
c0010087:	80 3d 31 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024731,0x0
c001008e:	74 05                	je     c0010095 <Clock::timeInSecondsLocal()+0x3d>
c0010090:	b9 08 07 00 00       	mov    ecx,0x708
c0010095:	31 db                	xor    ebx,ebx
c0010097:	01 c8                	add    eax,ecx
c0010099:	11 da                	adc    edx,ebx
c001009b:	83 c4 08             	add    esp,0x8
c001009e:	5b                   	pop    ebx
c001009f:	c3                   	ret    

c00100a0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00100a0:	57                   	push   edi
c00100a1:	56                   	push   esi
c00100a2:	53                   	push   ebx
c00100a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00100af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100b1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00100b4:	0f b6 05 30 47 02 c0 	movzx  eax,BYTE PTR ds:0xc0024730
c00100bb:	03 05 34 47 02 c0    	add    eax,DWORD PTR ds:0xc0024734
c00100c1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100c7:	99                   	cdq    
c00100c8:	29 c6                	sub    esi,eax
c00100ca:	19 d7                	sbb    edi,edx
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	89 fa                	mov    edx,edi
c00100d0:	31 f6                	xor    esi,esi
c00100d2:	80 3d 31 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024731,0x0
c00100d9:	74 05                	je     c00100e0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100db:	be 08 07 00 00       	mov    esi,0x708
c00100e0:	31 ff                	xor    edi,edi
c00100e2:	29 f0                	sub    eax,esi
c00100e4:	19 fa                	sbb    edx,edi
c00100e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100ee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100f2:	89 d8                	mov    eax,ebx
c00100f4:	5b                   	pop    ebx
c00100f5:	5e                   	pop    esi
c00100f6:	5f                   	pop    edi
c00100f7:	ff e0                	jmp    eax

c00100f9 <datetimeToSeconds(datetime_t)>:
c00100f9:	55                   	push   ebp
c00100fa:	57                   	push   edi
c00100fb:	56                   	push   esi
c00100fc:	53                   	push   ebx
c00100fd:	83 ec 14             	sub    esp,0x14
c0010100:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010108:	0f b6 f5             	movzx  esi,ch
c001010b:	6b f6 3c             	imul   esi,esi,0x3c
c001010e:	89 cf                	mov    edi,ecx
c0010110:	89 d3                	mov    ebx,edx
c0010112:	0f b6 c9             	movzx  ecx,cl
c0010115:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001011b:	0f b6 c6             	movzx  eax,dh
c001011e:	c1 ef 10             	shr    edi,0x10
c0010121:	48                   	dec    eax
c0010122:	c1 eb 10             	shr    ebx,0x10
c0010125:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010129:	89 f8                	mov    eax,edi
c001012b:	0f b6 f8             	movzx  edi,al
c001012e:	01 fe                	add    esi,edi
c0010130:	01 f1                	add    ecx,esi
c0010132:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010136:	c1 f9 1f             	sar    ecx,0x1f
c0010139:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001013d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010142:	0f b6 d2             	movzx  edx,dl
c0010145:	66 81 eb 6c 07       	sub    bx,0x76c
c001014a:	8b 0c 8d a0 1a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde560]
c0010151:	0f b7 f3             	movzx  esi,bx
c0010154:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010158:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001015d:	76 29                	jbe    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c001015f:	f6 c3 03             	test   bl,0x3
c0010162:	75 24                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010164:	31 d2                	xor    edx,edx
c0010166:	bf 64 00 00 00       	mov    edi,0x64
c001016b:	89 d8                	mov    eax,ebx
c001016d:	66 f7 f7             	div    di
c0010170:	66 85 d2             	test   dx,dx
c0010173:	75 12                	jne    c0010187 <datetimeToSeconds(datetime_t)+0x8e>
c0010175:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001017b:	bf 90 01 00 00       	mov    edi,0x190
c0010180:	99                   	cdq    
c0010181:	f7 ff                	idiv   edi
c0010183:	85 d2                	test   edx,edx
c0010185:	75 01                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010187:	41                   	inc    ecx
c0010188:	66 83 fb 46          	cmp    bx,0x46
c001018c:	76 45                	jbe    c00101d3 <datetimeToSeconds(datetime_t)+0xda>
c001018e:	bb 46 00 00 00       	mov    ebx,0x46
c0010193:	bf 64 00 00 00       	mov    edi,0x64
c0010198:	bd 90 01 00 00       	mov    ebp,0x190
c001019d:	b8 6d 01 00 00       	mov    eax,0x16d
c00101a2:	f6 c3 03             	test   bl,0x3
c00101a5:	75 23                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101a7:	89 d8                	mov    eax,ebx
c00101a9:	99                   	cdq    
c00101aa:	f7 ff                	idiv   edi
c00101ac:	85 d2                	test   edx,edx
c00101ae:	b8 6e 01 00 00       	mov    eax,0x16e
c00101b3:	75 15                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101b5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101bb:	99                   	cdq    
c00101bc:	f7 fd                	idiv   ebp
c00101be:	31 c0                	xor    eax,eax
c00101c0:	85 d2                	test   edx,edx
c00101c2:	0f 94 c0             	sete   al
c00101c5:	05 6d 01 00 00       	add    eax,0x16d
c00101ca:	43                   	inc    ebx
c00101cb:	01 c1                	add    ecx,eax
c00101cd:	39 f3                	cmp    ebx,esi
c00101cf:	7c cc                	jl     c001019d <datetimeToSeconds(datetime_t)+0xa4>
c00101d1:	eb 3b                	jmp    c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d3:	74 39                	je     c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d5:	b8 45 00 00 00       	mov    eax,0x45
c00101da:	89 c2                	mov    edx,eax
c00101dc:	83 e2 03             	and    edx,0x3
c00101df:	39 f0                	cmp    eax,esi
c00101e1:	7e 13                	jle    c00101f6 <datetimeToSeconds(datetime_t)+0xfd>
c00101e3:	85 d2                	test   edx,edx
c00101e5:	0f 94 c2             	sete   dl
c00101e8:	0f b6 d2             	movzx  edx,dl
c00101eb:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101f1:	48                   	dec    eax
c00101f2:	29 d1                	sub    ecx,edx
c00101f4:	eb e4                	jmp    c00101da <datetimeToSeconds(datetime_t)+0xe1>
c00101f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00101fb:	85 d2                	test   edx,edx
c00101fd:	75 0d                	jne    c001020c <datetimeToSeconds(datetime_t)+0x113>
c00101ff:	31 c0                	xor    eax,eax
c0010201:	66 85 db             	test   bx,bx
c0010204:	0f 95 c0             	setne  al
c0010207:	05 6d 01 00 00       	add    eax,0x16d
c001020c:	29 c1                	sub    ecx,eax
c001020e:	b8 80 51 01 00       	mov    eax,0x15180
c0010213:	f7 e9                	imul   ecx
c0010215:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010219:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001021d:	83 c4 14             	add    esp,0x14
c0010220:	5b                   	pop    ebx
c0010221:	5e                   	pop    esi
c0010222:	5f                   	pop    edi
c0010223:	5d                   	pop    ebp
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010226:	57                   	push   edi
c0010227:	56                   	push   esi
c0010228:	53                   	push   ebx
c0010229:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001022d:	8b 06                	mov    eax,DWORD PTR [esi]
c001022f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001023a:	e8 ba fe ff ff       	call   c00100f9 <datetimeToSeconds(datetime_t)>
c001023f:	59                   	pop    ecx
c0010240:	0f b6 0d 30 47 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024730
c0010247:	03 0d 34 47 02 c0    	add    ecx,DWORD PTR ds:0xc0024734
c001024d:	5b                   	pop    ebx
c001024e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010254:	89 cb                	mov    ebx,ecx
c0010256:	c1 fb 1f             	sar    ebx,0x1f
c0010259:	29 c8                	sub    eax,ecx
c001025b:	19 da                	sbb    edx,ebx
c001025d:	31 c9                	xor    ecx,ecx
c001025f:	80 3d 31 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024731,0x0
c0010266:	74 05                	je     c001026d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010268:	b9 08 07 00 00       	mov    ecx,0x708
c001026d:	31 db                	xor    ebx,ebx
c001026f:	29 c8                	sub    eax,ecx
c0010271:	19 da                	sbb    edx,ebx
c0010273:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010277:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001027b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001027f:	5b                   	pop    ebx
c0010280:	89 f8                	mov    eax,edi
c0010282:	5e                   	pop    esi
c0010283:	5f                   	pop    edi
c0010284:	ff e0                	jmp    eax

c0010286 <secondsToDatetime(unsigned long long)>:
c0010286:	55                   	push   ebp
c0010287:	57                   	push   edi
c0010288:	56                   	push   esi
c0010289:	53                   	push   ebx
c001028a:	83 ec 1c             	sub    esp,0x1c
c001028d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010291:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010295:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010299:	6a 00                	push   0x0
c001029b:	68 80 51 01 00       	push   0x15180
c00102a0:	55                   	push   ebp
c00102a1:	57                   	push   edi
c00102a2:	e8 65 f1 00 00       	call   c001f40c <__udivdi3>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102ae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00102b4:	6a 00                	push   0x0
c00102b6:	68 80 51 01 00       	push   0x15180
c00102bb:	55                   	push   ebp
c00102bc:	57                   	push   edi
c00102bd:	e8 4a f2 00 00       	call   c001f50c <__umoddi3>
c00102c2:	bf 10 0e 00 00       	mov    edi,0xe10
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	99                   	cdq    
c00102cb:	f7 ff                	idiv   edi
c00102cd:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102d0:	89 d0                	mov    eax,edx
c00102d2:	99                   	cdq    
c00102d3:	bf 3c 00 00 00       	mov    edi,0x3c
c00102d8:	f7 ff                	idiv   edi
c00102da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102e0:	85 db                	test   ebx,ebx
c00102e2:	79 11                	jns    c00102f5 <secondsToDatetime(unsigned long long)+0x6f>
c00102e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102f3:	eb 07                	jmp    c00102fc <secondsToDatetime(unsigned long long)+0x76>
c00102f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102fa:	89 d8                	mov    eax,ebx
c00102fc:	99                   	cdq    
c00102fd:	f7 f9                	idiv   ecx
c00102ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010303:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010308:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010310:	01 c3                	add    ebx,eax
c0010312:	31 d2                	xor    edx,edx
c0010314:	89 d8                	mov    eax,ebx
c0010316:	bf b4 05 00 00       	mov    edi,0x5b4
c001031b:	f7 f1                	div    ecx
c001031d:	31 d2                	xor    edx,edx
c001031f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010324:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010327:	89 d8                	mov    eax,ebx
c0010329:	f7 f7                	div    edi
c001032b:	29 c1                	sub    ecx,eax
c001032d:	31 d2                	xor    edx,edx
c001032f:	89 d8                	mov    eax,ebx
c0010331:	f7 f5                	div    ebp
c0010333:	29 c1                	sub    ecx,eax
c0010335:	bd 6d 01 00 00       	mov    ebp,0x16d
c001033a:	89 c8                	mov    eax,ecx
c001033c:	31 d2                	xor    edx,edx
c001033e:	f7 f5                	div    ebp
c0010340:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010344:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010349:	89 c8                	mov    eax,ecx
c001034b:	31 d2                	xor    edx,edx
c001034d:	f7 f5                	div    ebp
c001034f:	01 c3                	add    ebx,eax
c0010351:	31 d2                	xor    edx,edx
c0010353:	89 c8                	mov    eax,ecx
c0010355:	f7 f7                	div    edi
c0010357:	29 c3                	sub    ebx,eax
c0010359:	bf 99 00 00 00       	mov    edi,0x99
c001035e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010366:	29 c3                	sub    ebx,eax
c0010368:	31 d2                	xor    edx,edx
c001036a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001036d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010370:	83 c1 02             	add    ecx,0x2
c0010373:	bb 05 00 00 00       	mov    ebx,0x5
c0010378:	89 c8                	mov    eax,ecx
c001037a:	f7 f7                	div    edi
c001037c:	89 c7                	mov    edi,eax
c001037e:	31 d2                	xor    edx,edx
c0010380:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010386:	83 c0 02             	add    eax,0x2
c0010389:	f7 f3                	div    ebx
c001038b:	89 eb                	mov    ebx,ebp
c001038d:	29 c3                	sub    ebx,eax
c001038f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010395:	19 c0                	sbb    eax,eax
c0010397:	31 d2                	xor    edx,edx
c0010399:	83 e0 0c             	and    eax,0xc
c001039c:	88 1e                	mov    BYTE PTR [esi],bl
c001039e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00103a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00103aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00103ae:	83 f9 01             	cmp    ecx,0x1
c00103b1:	0f 96 c2             	setbe  dl
c00103b4:	01 d0                	add    eax,edx
c00103b6:	41                   	inc    ecx
c00103b7:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c2 04 00             	ret    0x4

c00103ca <Clock::timeInDatetimeLocal()>:
c00103ca:	53                   	push   ebx
c00103cb:	83 ec 14             	sub    esp,0x14
c00103ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103d6:	e8 7d fc ff ff       	call   c0010058 <Clock::timeInSecondsLocal()>
c00103db:	83 c4 0c             	add    esp,0xc
c00103de:	52                   	push   edx
c00103df:	50                   	push   eax
c00103e0:	53                   	push   ebx
c00103e1:	e8 a0 fe ff ff       	call   c0010286 <secondsToDatetime(unsigned long long)>
c00103e6:	83 c4 14             	add    esp,0x14
c00103e9:	89 d8                	mov    eax,ebx
c00103eb:	5b                   	pop    ebx
c00103ec:	c2 04 00             	ret    0x4
c00103ef:	90                   	nop

c00103f0 <Device::hibernate()>:
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <Device::wake()>:
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <Device::detect()>:
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <Device::disableLegacy()>:
c00103f6:	c3                   	ret    
c00103f7:	90                   	nop

c00103f8 <Device::powerSaving(PowerSavingLevel)>:
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <DriverlessDevice::close(int, int, void*)>:
c00103fa:	31 c0                	xor    eax,eax
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <DriverlessDevice::detect()>:
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <DriverlessDevice::open(int, int, void*)>:
c0010400:	83 ec 18             	sub    esp,0x18
c0010403:	68 d0 1a 02 c0       	push   0xc0021ad0
c0010408:	e8 7b 55 00 00       	call   c0015988 <Krnl::panic(char const*)>
c001040d:	83 c8 ff             	or     eax,0xffffffff
c0010410:	83 c4 1c             	add    esp,0x1c
c0010413:	c3                   	ret    

c0010414 <Device::~Device()>:
c0010414:	ba f8 1a 02 c0       	mov    edx,0xc0021af8
c0010419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041d:	89 10                	mov    DWORD PTR [eax],edx
c001041f:	90                   	nop
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <Device::~Device()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010429:	e8 e6 ff ff ff       	call   c0010414 <Device::~Device()>
c001042e:	83 c4 04             	add    esp,0x4
c0010431:	83 ec 08             	sub    esp,0x8
c0010434:	68 58 01 00 00       	push   0x158
c0010439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043d:	e8 f1 eb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010442:	83 c4 10             	add    esp,0x10
c0010445:	83 c4 0c             	add    esp,0xc
c0010448:	c3                   	ret    
c0010449:	90                   	nop

c001044a <Device::findAndLoadDriver()>:
c001044a:	c3                   	ret    
c001044b:	90                   	nop

c001044c <Device::preOpenPCI(PCIDeviceInfo)>:
c001044c:	57                   	push   edi
c001044d:	b9 09 00 00 00       	mov    ecx,0x9
c0010452:	56                   	push   esi
c0010453:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010457:	81 c7 18 01 00 00    	add    edi,0x118
c001045d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010461:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010468:	fc                   	cld    
c0010469:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001046b:	5e                   	pop    esi
c001046c:	5f                   	pop    edi
c001046d:	c3                   	ret    

c001046e <Device::preOpenACPI(void*, char*, char*)>:
c001046e:	56                   	push   esi
c001046f:	53                   	push   ebx
c0010470:	83 ec 08             	sub    esp,0x8
c0010473:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010477:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001047b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001047f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010485:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001048f:	6a 1e                	push   0x1e
c0010491:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001049b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00104a1:	50                   	push   eax
c00104a2:	e8 dd 01 ff ff       	call   c0000684 <memcpy>
c00104a7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104ab:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104af:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00104b7:	83 c4 14             	add    esp,0x14
c00104ba:	5b                   	pop    ebx
c00104bb:	5e                   	pop    esi
c00104bc:	e9 c3 01 ff ff       	jmp    c0000684 <memcpy>
c00104c1:	90                   	nop

c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104c2:	55                   	push   ebp
c00104c3:	57                   	push   edi
c00104c4:	56                   	push   esi
c00104c5:	53                   	push   ebx
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104d9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104de:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104e5:	75 0b                	jne    c00104f2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104ed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104f0:	eb 24                	jmp    c0010516 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104f2:	e8 25 43 00 00       	call   c001481c <thisCPU()>
c00104f7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010503:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010507:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001050b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001050f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010513:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010516:	83 c4 0c             	add    esp,0xc
c0010519:	5b                   	pop    ebx
c001051a:	5e                   	pop    esi
c001051b:	5f                   	pop    edi
c001051c:	5d                   	pop    ebp
c001051d:	ff e0                	jmp    eax
c001051f:	90                   	nop

c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010520:	57                   	push   edi
c0010521:	56                   	push   esi
c0010522:	53                   	push   ebx
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001052b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001052f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010534:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001053b:	75 0b                	jne    c0010548 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001053d:	8b 00                	mov    eax,DWORD PTR [eax]
c001053f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010543:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010546:	eb 20                	jmp    c0010568 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010548:	e8 cf 42 00 00       	call   c001481c <thisCPU()>
c001054d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010553:	8b 10                	mov    edx,DWORD PTR [eax]
c0010555:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010559:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001055d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010561:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010565:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010568:	5b                   	pop    ebx
c0010569:	5e                   	pop    esi
c001056a:	5f                   	pop    edi
c001056b:	ff e0                	jmp    eax
c001056d:	90                   	nop

c001056e <Device::addChild(Device*)>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001057a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010580:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010586:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010588:	85 d2                	test   edx,edx
c001058a:	74 04                	je     c0010590 <Device::addChild(Device*)+0x22>
c001058c:	89 d3                	mov    ebx,edx
c001058e:	eb f6                	jmp    c0010586 <Device::addChild(Device*)+0x18>
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010596:	6a 08                	push   0x8
c0010598:	e8 87 ea ff ff       	call   c000f024 <operator new(unsigned long)>
c001059d:	89 03                	mov    DWORD PTR [ebx],eax
c001059f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ac:	83 c4 18             	add    esp,0x18
c00105af:	5b                   	pop    ebx
c00105b0:	c3                   	ret    
c00105b1:	90                   	nop

c00105b2 <Device::removeAllChildren()>:
c00105b2:	56                   	push   esi
c00105b3:	53                   	push   ebx
c00105b4:	52                   	push   edx
c00105b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105c2:	74 17                	je     c00105db <Device::removeAllChildren()+0x29>
c00105c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105c7:	85 c0                	test   eax,eax
c00105c9:	74 0c                	je     c00105d7 <Device::removeAllChildren()+0x25>
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00105d0:	50                   	push   eax
c00105d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105d4:	83 c4 10             	add    esp,0x10
c00105d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105d9:	eb e4                	jmp    c00105bf <Device::removeAllChildren()+0xd>
c00105db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105f4:	58                   	pop    eax
c00105f5:	5b                   	pop    ebx
c00105f6:	5e                   	pop    esi
c00105f7:	c3                   	ret    

c00105f8 <Device::hibernateAll()>:
c00105f8:	53                   	push   ebx
c00105f9:	83 ec 14             	sub    esp,0x14
c00105fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010602:	53                   	push   ebx
c0010603:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010606:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010612:	74 0f                	je     c0010623 <Device::hibernateAll()+0x2b>
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001061a:	e8 d9 ff ff ff       	call   c00105f8 <Device::hibernateAll()>
c001061f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010621:	eb e9                	jmp    c001060c <Device::hibernateAll()+0x14>
c0010623:	83 c4 08             	add    esp,0x8
c0010626:	5b                   	pop    ebx
c0010627:	c3                   	ret    

c0010628 <Device::wakeAll()>:
c0010628:	53                   	push   ebx
c0010629:	83 ec 14             	sub    esp,0x14
c001062c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010632:	53                   	push   ebx
c0010633:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010636:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010642:	74 0f                	je     c0010653 <Device::wakeAll()+0x2b>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001064a:	e8 d9 ff ff ff       	call   c0010628 <Device::wakeAll()>
c001064f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010651:	eb e9                	jmp    c001063c <Device::wakeAll()+0x14>
c0010653:	83 c4 08             	add    esp,0x8
c0010656:	5b                   	pop    ebx
c0010657:	c3                   	ret    

c0010658 <Device::detectAll()>:
c0010658:	53                   	push   ebx
c0010659:	83 ec 14             	sub    esp,0x14
c001065c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010662:	53                   	push   ebx
c0010663:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010666:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010672:	74 0f                	je     c0010683 <Device::detectAll()+0x2b>
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001067a:	e8 d9 ff ff ff       	call   c0010658 <Device::detectAll()>
c001067f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010681:	eb e9                	jmp    c001066c <Device::detectAll()+0x14>
c0010683:	83 c4 08             	add    esp,0x8
c0010686:	5b                   	pop    ebx
c0010687:	c3                   	ret    

c0010688 <Device::disableLegacyAll()>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 14             	sub    esp,0x14
c001068c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010692:	53                   	push   ebx
c0010693:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010696:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001069c:	83 c4 10             	add    esp,0x10
c001069f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106a2:	74 0f                	je     c00106b3 <Device::disableLegacyAll()+0x2b>
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106aa:	e8 d9 ff ff ff       	call   c0010688 <Device::disableLegacyAll()>
c00106af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106b1:	eb e9                	jmp    c001069c <Device::disableLegacyAll()+0x14>
c00106b3:	83 c4 08             	add    esp,0x8
c00106b6:	5b                   	pop    ebx
c00106b7:	c3                   	ret    

c00106b8 <Device::loadDriversForAll()>:
c00106b8:	53                   	push   ebx
c00106b9:	83 ec 08             	sub    esp,0x8
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106c6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106c8:	85 db                	test   ebx,ebx
c00106ca:	74 12                	je     c00106de <Device::loadDriversForAll()+0x26>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106d2:	e8 e1 ff ff ff       	call   c00106b8 <Device::loadDriversForAll()>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	89 d8                	mov    eax,ebx
c00106dc:	eb e8                	jmp    c00106c6 <Device::loadDriversForAll()+0xe>
c00106de:	83 c4 08             	add    esp,0x8
c00106e1:	5b                   	pop    ebx
c00106e2:	c3                   	ret    
c00106e3:	90                   	nop

c00106e4 <Device::closeAll()>:
c00106e4:	53                   	push   ebx
c00106e5:	83 ec 08             	sub    esp,0x8
c00106e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ee:	6a 00                	push   0x0
c00106f0:	6a 00                	push   0x0
c00106f2:	6a 00                	push   0x0
c00106f4:	53                   	push   ebx
c00106f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106fe:	83 c4 10             	add    esp,0x10
c0010701:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010704:	74 0f                	je     c0010715 <Device::closeAll()+0x31>
c0010706:	83 ec 0c             	sub    esp,0xc
c0010709:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001070c:	e8 d3 ff ff ff       	call   c00106e4 <Device::closeAll()>
c0010711:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010713:	eb e9                	jmp    c00106fe <Device::closeAll()+0x1a>
c0010715:	83 c4 08             	add    esp,0x8
c0010718:	5b                   	pop    ebx
c0010719:	c3                   	ret    

c001071a <Device::powerSavingAll(PowerSavingLevel)>:
c001071a:	56                   	push   esi
c001071b:	53                   	push   ebx
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010723:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010729:	56                   	push   esi
c001072a:	53                   	push   ebx
c001072b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001072e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001073a:	74 0f                	je     c001074b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001073c:	52                   	push   edx
c001073d:	52                   	push   edx
c001073e:	56                   	push   esi
c001073f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010742:	e8 d3 ff ff ff       	call   c001071a <Device::powerSavingAll(PowerSavingLevel)>
c0010747:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010749:	eb e9                	jmp    c0010734 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001074b:	58                   	pop    eax
c001074c:	5b                   	pop    ebx
c001074d:	5e                   	pop    esi
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <Device::setName(char const*)>:
c0010750:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010758:	e9 fc ff fe ff       	jmp    c0000759 <strcpy>
c001075d:	90                   	nop

c001075e <Device::Device(char const*)>:
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	ba f8 1a 02 c0       	mov    edx,0xc0021af8
c0010766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076a:	89 10                	mov    DWORD PTR [eax],edx
c001076c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010770:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001077a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107a4:	83 ec 08             	sub    esp,0x8
c00107a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107af:	e8 9c ff ff ff       	call   c0010750 <Device::setName(char const*)>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	83 ec 0c             	sub    esp,0xc
c00107ba:	6a 08                	push   0x8
c00107bc:	e8 63 e8 ff ff       	call   c000f024 <operator new(unsigned long)>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107df:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010800:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010832:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001084a:	90                   	nop
c001084b:	83 c4 0c             	add    esp,0xc
c001084e:	c3                   	ret    
c001084f:	90                   	nop

c0010850 <Device::getName()>:
c0010850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010854:	05 d0 00 00 00       	add    eax,0xd0
c0010859:	c3                   	ret    

c001085a <DriverlessDevice::DriverlessDevice(char const*)>:
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010868:	50                   	push   eax
c0010869:	e8 f0 fe ff ff       	call   c001075e <Device::Device(char const*)>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c0010876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087a:	89 10                	mov    DWORD PTR [eax],edx
c001087c:	90                   	nop
c001087d:	83 c4 0c             	add    esp,0xc
c0010880:	c3                   	ret    
c0010881:	90                   	nop

c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010882:	57                   	push   edi
c0010883:	56                   	push   esi
c0010884:	53                   	push   ebx
c0010885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010889:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001088d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010891:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010897:	75 0c                	jne    c00108a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010899:	52                   	push   edx
c001089a:	52                   	push   edx
c001089b:	53                   	push   ebx
c001089c:	56                   	push   esi
c001089d:	e8 82 f0 00 00       	call   c001f924 <LinkedList<Device>::addElement(Device*)>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00108ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00108ae:	74 12                	je     c00108c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00108b0:	50                   	push   eax
c00108b1:	57                   	push   edi
c00108b2:	56                   	push   esi
c00108b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00108b6:	e8 c7 ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	eb e9                	jmp    c00108ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108c2:	5b                   	pop    ebx
c00108c3:	5e                   	pop    esi
c00108c4:	5f                   	pop    edi
c00108c5:	c3                   	ret    

c00108c6 <getDevicesOfType(DeviceType)>:
c00108c6:	53                   	push   ebx
c00108c7:	83 ec 14             	sub    esp,0x14
c00108ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108ce:	53                   	push   ebx
c00108cf:	e8 2c f1 00 00       	call   c001fa00 <LinkedList<Device>::LinkedList()>
c00108d4:	83 c4 0c             	add    esp,0xc
c00108d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108db:	53                   	push   ebx
c00108dc:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c00108e2:	e8 9b ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108e7:	83 c4 18             	add    esp,0x18
c00108ea:	89 d8                	mov    eax,ebx
c00108ec:	5b                   	pop    ebx
c00108ed:	c2 04 00             	ret    0x4

c00108f0 <HardDiskController::HardDiskController(char const*)>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	83 ec 08             	sub    esp,0x8
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	50                   	push   eax
c00108ff:	e8 5a fe ff ff       	call   c001075e <Device::Device(char const*)>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	ba 50 1b 02 c0       	mov    edx,0xc0021b50
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	89 10                	mov    DWORD PTR [eax],edx
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010920:	90                   	nop
c0010921:	83 c4 0c             	add    esp,0xc
c0010924:	c3                   	ret    
c0010925:	90                   	nop

c0010926 <HardDiskController::~HardDiskController()>:
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	ba 50 1b 02 c0       	mov    edx,0xc0021b50
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	89 10                	mov    DWORD PTR [eax],edx
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	50                   	push   eax
c001093c:	e8 d3 fa ff ff       	call   c0010414 <Device::~Device()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	90                   	nop
c0010945:	83 c4 0c             	add    esp,0xc
c0010948:	c3                   	ret    
c0010949:	90                   	nop

c001094a <HardDiskController::~HardDiskController()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	83 ec 0c             	sub    esp,0xc
c0010950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010954:	e8 cd ff ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	83 ec 08             	sub    esp,0x8
c001095f:	68 58 01 00 00       	push   0x158
c0010964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010968:	e8 c6 e6 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	83 c4 0c             	add    esp,0xc
c0010973:	c3                   	ret    

c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010982:	50                   	push   eax
c0010983:	e8 d6 fd ff ff       	call   c001075e <Device::Device(char const*)>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	89 10                	mov    DWORD PTR [eax],edx
c0010996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00109a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109d6:	90                   	nop
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <PhysicalDisk::startCache()>:
c00109dc:	56                   	push   esi
c00109dd:	53                   	push   ebx
c00109de:	83 ec 10             	sub    esp,0x10
c00109e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109e5:	6a 30                	push   0x30
c00109e7:	e8 38 e6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00109ec:	89 c6                	mov    esi,eax
c00109ee:	58                   	pop    eax
c00109ef:	5a                   	pop    edx
c00109f0:	53                   	push   ebx
c00109f1:	56                   	push   esi
c00109f2:	e8 3b 25 00 00       	call   c0012f32 <VCache::VCache(PhysicalDisk*)>
c00109f7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109fd:	83 c4 14             	add    esp,0x14
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	c3                   	ret    
c0010a03:	90                   	nop

c0010a04 <PhysicalDisk::~PhysicalDisk()>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	ba 7c 1b 02 c0       	mov    edx,0xc0021b7c
c0010a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a10:	89 10                	mov    DWORD PTR [eax],edx
c0010a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	50                   	push   eax
c0010a1a:	e8 f5 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	90                   	nop
c0010a23:	83 c4 0c             	add    esp,0xc
c0010a26:	c3                   	ret    
c0010a27:	90                   	nop

c0010a28 <PhysicalDisk::~PhysicalDisk()>:
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a32:	e8 cd ff ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	83 ec 08             	sub    esp,0x8
c0010a3d:	68 6c 01 00 00       	push   0x16c
c0010a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a46:	e8 e8 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	83 c4 0c             	add    esp,0xc
c0010a51:	c3                   	ret    

c0010a52 <FPU::FPU(char const*)>:
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a59:	83 ec 08             	sub    esp,0x8
c0010a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a60:	50                   	push   eax
c0010a61:	e8 f8 fc ff ff       	call   c001075e <Device::Device(char const*)>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c0010a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a72:	89 10                	mov    DWORD PTR [eax],edx
c0010a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a78:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a82:	90                   	nop
c0010a83:	83 c4 0c             	add    esp,0xc
c0010a86:	c3                   	ret    
c0010a87:	90                   	nop

c0010a88 <FPU::~FPU()>:
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c0010a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a94:	89 10                	mov    DWORD PTR [eax],edx
c0010a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	50                   	push   eax
c0010a9e:	e8 71 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	90                   	nop
c0010aa7:	83 c4 0c             	add    esp,0xc
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <FPU::~FPU()>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab6:	e8 cd ff ff ff       	call   c0010a88 <FPU::~FPU()>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	83 ec 08             	sub    esp,0x8
c0010ac1:	68 58 01 00 00       	push   0x158
c0010ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aca:	e8 64 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	83 c4 0c             	add    esp,0xc
c0010ad5:	c3                   	ret    

c0010ad6 <setupFPU()>:
c0010ad6:	53                   	push   ebx
c0010ad7:	83 ec 08             	sub    esp,0x8
c0010ada:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0010adf:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ae6:	74 19                	je     c0010b01 <setupFPU()+0x2b>
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	68 58 01 00 00       	push   0x158
c0010af0:	e8 2f e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010af5:	89 c3                	mov    ebx,eax
c0010af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afa:	e8 53 d5 00 00       	call   c001e052 <AVX::AVX()>
c0010aff:	eb 5b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010b07:	84 c0                	test   al,al
c0010b09:	79 19                	jns    c0010b24 <setupFPU()+0x4e>
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	68 58 01 00 00       	push   0x158
c0010b13:	e8 0c e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b18:	89 c3                	mov    ebx,eax
c0010b1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1d:	e8 56 d6 00 00       	call   c001e178 <SSE::SSE()>
c0010b22:	eb 38                	jmp    c0010b5c <setupFPU()+0x86>
c0010b24:	a8 20                	test   al,0x20
c0010b26:	74 19                	je     c0010b41 <setupFPU()+0x6b>
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	68 58 01 00 00       	push   0x158
c0010b30:	e8 ef e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b35:	89 c3                	mov    ebx,eax
c0010b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3a:	e8 a3 d5 00 00       	call   c001e0e2 <MMX::MMX()>
c0010b3f:	eb 1b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b41:	a8 10                	test   al,0x10
c0010b43:	74 1c                	je     c0010b61 <setupFPU()+0x8b>
c0010b45:	83 ec 0c             	sub    esp,0xc
c0010b48:	68 58 01 00 00       	push   0x158
c0010b4d:	e8 d2 e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b52:	89 c3                	mov    ebx,eax
c0010b54:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b57:	e8 aa d6 00 00       	call   c001e206 <x87::x87()>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	eb 2c                	jmp    c0010b8d <setupFPU()+0xb7>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	31 db                	xor    ebx,ebx
c0010b66:	68 a8 1b 02 c0       	push   0xc0021ba8
c0010b6b:	e8 e9 e5 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010b70:	e8 a7 3c 00 00       	call   c001481c <thisCPU()>
c0010b75:	e8 a2 3c 00 00       	call   c001481c <thisCPU()>
c0010b7a:	e8 d9 ee 00 00       	call   c001fa58 <CPU::readCR0()>
c0010b7f:	83 c8 04             	or     eax,0x4
c0010b82:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b85:	e8 e0 ee 00 00       	call   c001fa6a <CPU::writeCR0(unsigned long)>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	83 c4 08             	add    esp,0x8
c0010b90:	89 d8                	mov    eax,ebx
c0010b92:	5b                   	pop    ebx
c0010b93:	c3                   	ret    

c0010b94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b9c:	c1 e0 04             	shl    eax,0x4
c0010b9f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010ba3:	8d 50 10             	lea    edx,[eax+0x10]
c0010ba6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010bac:	74 08                	je     c0010bb6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010bae:	83 c0 04             	add    eax,0x4
c0010bb1:	39 d0                	cmp    eax,edx
c0010bb3:	75 f1                	jne    c0010ba6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010bb5:	c3                   	ret    
c0010bb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bc0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bca:	eb e2                	jmp    c0010bae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010bcc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bcc:	57                   	push   edi
c0010bcd:	31 c0                	xor    eax,eax
c0010bcf:	56                   	push   esi
c0010bd0:	53                   	push   ebx
c0010bd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bd9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010bdd:	89 da                	mov    edx,ebx
c0010bdf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010be3:	c1 e2 04             	shl    edx,0x4
c0010be6:	01 ca                	add    edx,ecx
c0010be8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bf0:	74 16                	je     c0010c08 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bf2:	40                   	inc    eax
c0010bf3:	83 f8 04             	cmp    eax,0x4
c0010bf6:	75 f0                	jne    c0010be8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bf8:	c7 44 24 10 ec 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bec
c0010c00:	5b                   	pop    ebx
c0010c01:	5e                   	pop    esi
c0010c02:	5f                   	pop    edi
c0010c03:	e9 80 4d 00 00       	jmp    c0015988 <Krnl::panic(char const*)>
c0010c08:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010c0b:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010c0e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010c14:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c1a:	5b                   	pop    ebx
c0010c1b:	5e                   	pop    esi
c0010c1c:	5f                   	pop    edi
c0010c1d:	c3                   	ret    

c0010c1e <doubleFault(regs*, void*)>:
c0010c1e:	55                   	push   ebp
c0010c1f:	89 e5                	mov    ebp,esp
c0010c21:	83 ec 08             	sub    esp,0x8
c0010c24:	83 ec 0c             	sub    esp,0xc
c0010c27:	68 27 1c 02 c0       	push   0xc0021c27
c0010c2c:	e8 57 4d 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0010c31:	83 c4 10             	add    esp,0x10
c0010c34:	90                   	nop
c0010c35:	c9                   	leave  
c0010c36:	c3                   	ret    
c0010c37:	90                   	nop

c0010c38 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c38:	56                   	push   esi
c0010c39:	53                   	push   ebx
c0010c3a:	50                   	push   eax
c0010c3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c3f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c43:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c48:	75 35                	jne    c0010c7f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010c4a:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c4d:	31 d2                	xor    edx,edx
c0010c4f:	89 c1                	mov    ecx,eax
c0010c51:	c1 e1 04             	shl    ecx,0x4
c0010c54:	01 f1                	add    ecx,esi
c0010c56:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c5e:	74 3e                	je     c0010c9e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010c60:	42                   	inc    edx
c0010c61:	83 fa 04             	cmp    edx,0x4
c0010c64:	75 f0                	jne    c0010c56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c66:	83 ec 0c             	sub    esp,0xc
c0010c69:	68 6c 1c 02 c0       	push   0xc0021c6c
c0010c6e:	e8 15 4d 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0010c73:	83 c4 10             	add    esp,0x10
c0010c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c7b:	5a                   	pop    edx
c0010c7c:	5b                   	pop    ebx
c0010c7d:	5e                   	pop    esi
c0010c7e:	c3                   	ret    
c0010c7f:	83 ec 0c             	sub    esp,0xc
c0010c82:	56                   	push   esi
c0010c83:	e8 c8 fb ff ff       	call   c0010850 <Device::getName()>
c0010c88:	83 c4 10             	add    esp,0x10
c0010c8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c8e:	75 ba                	jne    c0010c4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c90:	83 fb 0f             	cmp    ebx,0xf
c0010c93:	7f 29                	jg     c0010cbe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c95:	0f b6 9b 20 3d 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc2e0]
c0010c9c:	eb ac                	jmp    c0010c4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c9e:	8d 04 82             	lea    eax,[edx+eax*4]
c0010ca1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ca5:	8d 04 86             	lea    eax,[esi+eax*4]
c0010ca8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010cae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010cb2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010cb8:	89 d8                	mov    eax,ebx
c0010cba:	5a                   	pop    edx
c0010cbb:	5b                   	pop    ebx
c0010cbc:	5e                   	pop    esi
c0010cbd:	c3                   	ret    
c0010cbe:	83 ec 0c             	sub    esp,0xc
c0010cc1:	68 34 1c 02 c0       	push   0xc0021c34
c0010cc6:	e8 bd 4c 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0010ccb:	83 c4 10             	add    esp,0x10
c0010cce:	e9 77 ff ff ff       	jmp    c0010c4a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010cd3:	90                   	nop

c0010cd4 <InterruptController::clearAllHandlers(int, bool)>:
c0010cd4:	56                   	push   esi
c0010cd5:	53                   	push   ebx
c0010cd6:	52                   	push   edx
c0010cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cdb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cdf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010ce4:	75 61                	jne    c0010d47 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010ce6:	8d 46 20             	lea    eax,[esi+0x20]
c0010ce9:	c1 e6 04             	shl    esi,0x4
c0010cec:	c1 e0 04             	shl    eax,0x4
c0010cef:	01 de                	add    esi,ebx
c0010cf1:	01 d8                	add    eax,ebx
c0010cf3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cfd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010d07:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010d11:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d1b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d25:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d2f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d39:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d43:	58                   	pop    eax
c0010d44:	5b                   	pop    ebx
c0010d45:	5e                   	pop    esi
c0010d46:	c3                   	ret    
c0010d47:	83 ec 0c             	sub    esp,0xc
c0010d4a:	53                   	push   ebx
c0010d4b:	e8 00 fb ff ff       	call   c0010850 <Device::getName()>
c0010d50:	83 c4 10             	add    esp,0x10
c0010d53:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d56:	75 8e                	jne    c0010ce6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d58:	83 fe 0f             	cmp    esi,0xf
c0010d5b:	7f 09                	jg     c0010d66 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010d5d:	0f b6 b6 20 3d 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc2e0]
c0010d64:	eb 80                	jmp    c0010ce6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	68 a8 1c 02 c0       	push   0xc0021ca8
c0010d6e:	e8 15 4c 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	e9 6b ff ff ff       	jmp    c0010ce6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d7b:	90                   	nop

c0010d7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d7c:	56                   	push   esi
c0010d7d:	53                   	push   ebx
c0010d7e:	52                   	push   edx
c0010d7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d87:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d8c:	75 3a                	jne    c0010dc8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d92:	8d 50 20             	lea    edx,[eax+0x20]
c0010d95:	c1 e2 04             	shl    edx,0x4
c0010d98:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d9b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d9f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010da5:	74 0b                	je     c0010db2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010da7:	83 c0 04             	add    eax,0x4
c0010daa:	39 d0                	cmp    eax,edx
c0010dac:	75 f1                	jne    c0010d9f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010dae:	58                   	pop    eax
c0010daf:	5b                   	pop    ebx
c0010db0:	5e                   	pop    esi
c0010db1:	c3                   	ret    
c0010db2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010dbc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010dc6:	eb df                	jmp    c0010da7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010dc8:	83 ec 0c             	sub    esp,0xc
c0010dcb:	56                   	push   esi
c0010dcc:	e8 7f fa ff ff       	call   c0010850 <Device::getName()>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dd7:	75 b5                	jne    c0010d8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dd9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010dde:	7f 11                	jg     c0010df1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010de0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010de4:	0f b6 80 20 3d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc2e0]
c0010deb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010def:	eb 9d                	jmp    c0010d8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010df1:	83 ec 0c             	sub    esp,0xc
c0010df4:	68 a8 1c 02 c0       	push   0xc0021ca8
c0010df9:	e8 8a 4b 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0010dfe:	83 c4 10             	add    esp,0x10
c0010e01:	eb 8b                	jmp    c0010d8e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010e03 <nmiHandler(regs*, void*)>:
c0010e03:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0010e08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e0c:	e9 1f a9 ff ff       	jmp    c000b730 <Computer::handleNMI()>

c0010e11 <int_handler>:
c0010e11:	55                   	push   ebp
c0010e12:	57                   	push   edi
c0010e13:	56                   	push   esi
c0010e14:	53                   	push   ebx
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e1c:	80 3d 14 50 02 c0 00 	cmp    BYTE PTR ds:0xc0025014,0x0
c0010e23:	74 0b                	je     c0010e30 <int_handler+0x1f>
c0010e25:	fa                   	cli    
c0010e26:	f4                   	hlt    
c0010e27:	80 3d 14 50 02 c0 00 	cmp    BYTE PTR ds:0xc0025014,0x0
c0010e2e:	75 f5                	jne    c0010e25 <int_handler+0x14>
c0010e30:	e8 e7 39 00 00       	call   c001481c <thisCPU()>
c0010e35:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e38:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e3e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e41:	83 f8 17             	cmp    eax,0x17
c0010e44:	77 13                	ja     c0010e59 <int_handler+0x48>
c0010e46:	83 ec 08             	sub    esp,0x8
c0010e49:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e4b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e4e:	0f b6 c0             	movzx  eax,al
c0010e51:	50                   	push   eax
c0010e52:	57                   	push   edi
c0010e53:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	83 c3 15             	add    ebx,0x15
c0010e5c:	c1 e3 04             	shl    ebx,0x4
c0010e5f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e63:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e6a:	31 db                	xor    ebx,ebx
c0010e6c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e70:	85 c0                	test   eax,eax
c0010e72:	74 13                	je     c0010e87 <int_handler+0x76>
c0010e74:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e77:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e7b:	74 1c                	je     c0010e99 <int_handler+0x88>
c0010e7d:	83 ec 08             	sub    esp,0x8
c0010e80:	52                   	push   edx
c0010e81:	56                   	push   esi
c0010e82:	ff d0                	call   eax
c0010e84:	83 c4 10             	add    esp,0x10
c0010e87:	43                   	inc    ebx
c0010e88:	83 fb 04             	cmp    ebx,0x4
c0010e8b:	75 df                	jne    c0010e6c <int_handler+0x5b>
c0010e8d:	83 c4 0c             	add    esp,0xc
c0010e90:	31 c0                	xor    eax,eax
c0010e92:	5b                   	pop    ebx
c0010e93:	31 d2                	xor    edx,edx
c0010e95:	5e                   	pop    esi
c0010e96:	5f                   	pop    edi
c0010e97:	5d                   	pop    ebp
c0010e98:	c3                   	ret    
c0010e99:	83 ec 08             	sub    esp,0x8
c0010e9c:	52                   	push   edx
c0010e9d:	56                   	push   esi
c0010e9e:	ff d0                	call   eax
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	83 c4 0c             	add    esp,0xc
c0010ea6:	5b                   	pop    ebx
c0010ea7:	5e                   	pop    esi
c0010ea8:	5f                   	pop    edi
c0010ea9:	5d                   	pop    ebp
c0010eaa:	c3                   	ret    
c0010eab:	90                   	nop

c0010eac <InterruptController::InterruptController(char const*)>:
c0010eac:	83 ec 1c             	sub    esp,0x1c
c0010eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb3:	83 ec 08             	sub    esp,0x8
c0010eb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010eba:	50                   	push   eax
c0010ebb:	e8 9e f8 ff ff       	call   c001075e <Device::Device(char const*)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	ba e4 1e 02 c0       	mov    edx,0xc0021ee4
c0010ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ecc:	89 10                	mov    DWORD PTR [eax],edx
c0010ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010edc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ee4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010eec:	7f 5e                	jg     c0010f4c <InterruptController::InterruptController(char const*)+0xa0>
c0010eee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ef6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010efb:	7f 49                	jg     c0010f46 <InterruptController::InterruptController(char const*)+0x9a>
c0010efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f05:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f10:	01 ca                	add    edx,ecx
c0010f12:	83 c2 54             	add    edx,0x54
c0010f15:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f30:	01 ca                	add    edx,ecx
c0010f32:	81 c2 54 04 00 00    	add    edx,0x454
c0010f38:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f40:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f44:	eb b0                	jmp    c0010ef6 <InterruptController::InterruptController(char const*)+0x4a>
c0010f46:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f4a:	eb 98                	jmp    c0010ee4 <InterruptController::InterruptController(char const*)+0x38>
c0010f4c:	90                   	nop
c0010f4d:	83 c4 1c             	add    esp,0x1c
c0010f50:	c3                   	ret    
c0010f51:	90                   	nop

c0010f52 <InterruptController::~InterruptController()>:
c0010f52:	83 ec 0c             	sub    esp,0xc
c0010f55:	ba e4 1e 02 c0       	mov    edx,0xc0021ee4
c0010f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5e:	89 10                	mov    DWORD PTR [eax],edx
c0010f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f64:	83 ec 0c             	sub    esp,0xc
c0010f67:	50                   	push   eax
c0010f68:	e8 a7 f4 ff ff       	call   c0010414 <Device::~Device()>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	90                   	nop
c0010f71:	83 c4 0c             	add    esp,0xc
c0010f74:	c3                   	ret    
c0010f75:	90                   	nop

c0010f76 <InterruptController::~InterruptController()>:
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	83 ec 0c             	sub    esp,0xc
c0010f7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f80:	e8 cd ff ff ff       	call   c0010f52 <InterruptController::~InterruptController()>
c0010f85:	83 c4 10             	add    esp,0x10
c0010f88:	83 ec 08             	sub    esp,0x8
c0010f8b:	68 58 21 00 00       	push   0x2158
c0010f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f94:	e8 9a e0 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010f99:	83 c4 10             	add    esp,0x10
c0010f9c:	83 c4 0c             	add    esp,0xc
c0010f9f:	c3                   	ret    

c0010fa0 <displayDebugInfo(regs*)>:
c0010fa0:	55                   	push   ebp
c0010fa1:	57                   	push   edi
c0010fa2:	56                   	push   esi
c0010fa3:	53                   	push   ebx
c0010fa4:	83 ec 24             	sub    esp,0x24
c0010fa7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010fab:	0f 20 c2             	mov    edx,cr0
c0010fae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010fb2:	0f 20 d7             	mov    edi,cr2
c0010fb5:	0f 20 de             	mov    esi,cr3
c0010fb8:	0f 20 e5             	mov    ebp,cr4
c0010fbb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fbe:	68 e2 1c 02 c0       	push   0xc0021ce2
c0010fc3:	e8 91 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fc8:	58                   	pop    eax
c0010fc9:	5a                   	pop    edx
c0010fca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010fcd:	68 ed 1c 02 c0       	push   0xc0021ced
c0010fd2:	e8 82 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fd7:	59                   	pop    ecx
c0010fd8:	58                   	pop    eax
c0010fd9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010fdc:	68 f8 1c 02 c0       	push   0xc0021cf8
c0010fe1:	e8 73 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fe6:	58                   	pop    eax
c0010fe7:	5a                   	pop    edx
c0010fe8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010feb:	68 03 1d 02 c0       	push   0xc0021d03
c0010ff0:	e8 64 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010ff5:	59                   	pop    ecx
c0010ff6:	58                   	pop    eax
c0010ff7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ffa:	68 0e 1d 02 c0       	push   0xc0021d0e
c0010fff:	e8 55 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011004:	58                   	pop    eax
c0011005:	5a                   	pop    edx
c0011006:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0011009:	68 19 1d 02 c0       	push   0xc0021d19
c001100e:	e8 46 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011013:	59                   	pop    ecx
c0011014:	58                   	pop    eax
c0011015:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011018:	68 24 1d 02 c0       	push   0xc0021d24
c001101d:	e8 37 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011022:	58                   	pop    eax
c0011023:	5a                   	pop    edx
c0011024:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011027:	68 2f 1d 02 c0       	push   0xc0021d2f
c001102c:	e8 28 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011031:	59                   	pop    ecx
c0011032:	58                   	pop    eax
c0011033:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011036:	68 3a 1d 02 c0       	push   0xc0021d3a
c001103b:	e8 19 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011040:	58                   	pop    eax
c0011041:	5a                   	pop    edx
c0011042:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011045:	68 49 1d 02 c0       	push   0xc0021d49
c001104a:	e8 0a e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001104f:	59                   	pop    ecx
c0011050:	58                   	pop    eax
c0011051:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011054:	68 54 1d 02 c0       	push   0xc0021d54
c0011059:	e8 fb e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001105e:	58                   	pop    eax
c001105f:	5a                   	pop    edx
c0011060:	57                   	push   edi
c0011061:	68 5f 1d 02 c0       	push   0xc0021d5f
c0011066:	e8 ee e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001106b:	59                   	pop    ecx
c001106c:	58                   	pop    eax
c001106d:	56                   	push   esi
c001106e:	68 6a 1d 02 c0       	push   0xc0021d6a
c0011073:	e8 e1 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011078:	58                   	pop    eax
c0011079:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001107e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011084:	e8 c4 c2 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0011089:	58                   	pop    eax
c001108a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001108d:	5a                   	pop    edx
c001108e:	c1 e0 05             	shl    eax,0x5
c0011091:	05 80 3a 02 c0       	add    eax,0xc0023a80
c0011096:	50                   	push   eax
c0011097:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001109c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a2:	e8 c7 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110a7:	59                   	pop    ecx
c00110a8:	58                   	pop    eax
c00110a9:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00110ae:	68 75 1d 02 c0       	push   0xc0021d75
c00110b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110b9:	e8 b0 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110be:	58                   	pop    eax
c00110bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c4:	5a                   	pop    edx
c00110c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110c8:	83 c0 0c             	add    eax,0xc
c00110cb:	50                   	push   eax
c00110cc:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00110d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d7:	e8 92 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110dc:	59                   	pop    ecx
c00110dd:	58                   	pop    eax
c00110de:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00110e3:	68 7e 1d 02 c0       	push   0xc0021d7e
c00110e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110ee:	e8 7b c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00110f3:	58                   	pop    eax
c00110f4:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00110f9:	5a                   	pop    edx
c00110fa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011103:	e8 8c c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011108:	59                   	pop    ecx
c0011109:	58                   	pop    eax
c001110a:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001110f:	68 86 1d 02 c0       	push   0xc0021d86
c0011114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001111a:	e8 4f c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001111f:	58                   	pop    eax
c0011120:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011125:	5a                   	pop    edx
c0011126:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011129:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001112f:	e8 60 c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011134:	59                   	pop    ecx
c0011135:	58                   	pop    eax
c0011136:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001113b:	68 8e 1d 02 c0       	push   0xc0021d8e
c0011140:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011146:	e8 23 c6 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001114b:	58                   	pop    eax
c001114c:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011151:	5a                   	pop    edx
c0011152:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0011155:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115b:	e8 34 c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011160:	59                   	pop    ecx
c0011161:	58                   	pop    eax
c0011162:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011167:	68 96 1d 02 c0       	push   0xc0021d96
c001116c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011172:	e8 f7 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011177:	58                   	pop    eax
c0011178:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001117d:	5a                   	pop    edx
c001117e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011181:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011187:	e8 08 c6 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c001118c:	59                   	pop    ecx
c001118d:	58                   	pop    eax
c001118e:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011193:	68 9e 1d 02 c0       	push   0xc0021d9e
c0011198:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001119e:	e8 cb c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111a3:	58                   	pop    eax
c00111a4:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00111a9:	5a                   	pop    edx
c00111aa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00111ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111b3:	e8 dc c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00111b8:	59                   	pop    ecx
c00111b9:	58                   	pop    eax
c00111ba:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00111bf:	68 a6 1d 02 c0       	push   0xc0021da6
c00111c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111ca:	e8 9f c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111cf:	58                   	pop    eax
c00111d0:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00111d5:	5a                   	pop    edx
c00111d6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00111d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111df:	e8 b0 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00111e4:	59                   	pop    ecx
c00111e5:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00111ea:	5b                   	pop    ebx
c00111eb:	68 ae 1d 02 c0       	push   0xc0021dae
c00111f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111f6:	e8 73 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00111fb:	58                   	pop    eax
c00111fc:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011201:	5a                   	pop    edx
c0011202:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011206:	52                   	push   edx
c0011207:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001120d:	e8 82 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011212:	59                   	pop    ecx
c0011213:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011218:	5b                   	pop    ebx
c0011219:	68 b7 1d 02 c0       	push   0xc0021db7
c001121e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011224:	e8 45 c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011229:	58                   	pop    eax
c001122a:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001122f:	5a                   	pop    edx
c0011230:	57                   	push   edi
c0011231:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011237:	e8 58 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c001123c:	59                   	pop    ecx
c001123d:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011242:	5b                   	pop    ebx
c0011243:	68 bf 1d 02 c0       	push   0xc0021dbf
c0011248:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124e:	e8 1b c5 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011253:	5f                   	pop    edi
c0011254:	58                   	pop    eax
c0011255:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001125a:	56                   	push   esi
c001125b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011261:	e8 2e c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011266:	58                   	pop    eax
c0011267:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001126c:	5a                   	pop    edx
c001126d:	68 c7 1d 02 c0       	push   0xc0021dc7
c0011272:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011278:	e8 f1 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c001127d:	59                   	pop    ecx
c001127e:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011283:	5b                   	pop    ebx
c0011284:	55                   	push   ebp
c0011285:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001128b:	e8 04 c5 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011290:	5e                   	pop    esi
c0011291:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011296:	5f                   	pop    edi
c0011297:	68 cf 1d 02 c0       	push   0xc0021dcf
c001129c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112a2:	e8 c7 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00112a7:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00112ac:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112b2:	e8 bc e7 00 00       	call   c001fa73 <CPU::readDR0()>
c00112b7:	5d                   	pop    ebp
c00112b8:	5a                   	pop    edx
c00112b9:	50                   	push   eax
c00112ba:	53                   	push   ebx
c00112bb:	e8 d4 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00112c0:	59                   	pop    ecx
c00112c1:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00112c6:	5b                   	pop    ebx
c00112c7:	68 d8 1d 02 c0       	push   0xc0021dd8
c00112cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112d2:	e8 97 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c00112d7:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00112dc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112e2:	e8 9e e7 00 00       	call   c001fa85 <CPU::readDR1()>
c00112e7:	5e                   	pop    esi
c00112e8:	5f                   	pop    edi
c00112e9:	50                   	push   eax
c00112ea:	53                   	push   ebx
c00112eb:	e8 a4 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00112f0:	5d                   	pop    ebp
c00112f1:	58                   	pop    eax
c00112f2:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00112f7:	68 e0 1d 02 c0       	push   0xc0021de0
c00112fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011302:	e8 67 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011307:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001130c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011312:	e8 80 e7 00 00       	call   c001fa97 <CPU::readDR2()>
c0011317:	5a                   	pop    edx
c0011318:	59                   	pop    ecx
c0011319:	50                   	push   eax
c001131a:	53                   	push   ebx
c001131b:	e8 74 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011320:	5b                   	pop    ebx
c0011321:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011326:	5e                   	pop    esi
c0011327:	68 e8 1d 02 c0       	push   0xc0021de8
c001132c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011332:	e8 37 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011337:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001133c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011342:	e8 62 e7 00 00       	call   c001faa9 <CPU::readDR3()>
c0011347:	5f                   	pop    edi
c0011348:	5d                   	pop    ebp
c0011349:	50                   	push   eax
c001134a:	53                   	push   ebx
c001134b:	e8 44 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011350:	58                   	pop    eax
c0011351:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011356:	5a                   	pop    edx
c0011357:	68 f0 1d 02 c0       	push   0xc0021df0
c001135c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011362:	e8 07 c4 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011367:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001136c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0011372:	e8 44 e7 00 00       	call   c001fabb <CPU::readDR6()>
c0011377:	59                   	pop    ecx
c0011378:	5e                   	pop    esi
c0011379:	50                   	push   eax
c001137a:	53                   	push   ebx
c001137b:	e8 14 c4 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0011380:	5f                   	pop    edi
c0011381:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0011386:	5d                   	pop    ebp
c0011387:	68 f8 1d 02 c0       	push   0xc0021df8
c001138c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011392:	e8 d7 c3 ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0011397:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001139c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113a2:	e8 26 e7 00 00       	call   c001facd <CPU::readDR7()>
c00113a7:	5a                   	pop    edx
c00113a8:	59                   	pop    ecx
c00113a9:	50                   	push   eax
c00113aa:	53                   	push   ebx
c00113ab:	e8 e4 c3 ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c00113b0:	fa                   	cli    
c00113b1:	f4                   	hlt    
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	eb fe                	jmp    c00113b5 <displayDebugInfo(regs*)+0x415>

c00113b7 <x87EmulHandler(regs*, void*)>:
c00113b7:	53                   	push   ebx
c00113b8:	83 ec 08             	sub    esp,0x8
c00113bb:	a1 54 47 02 c0       	mov    eax,ds:0xc0024754
c00113c0:	85 c0                	test   eax,eax
c00113c2:	74 15                	je     c00113d9 <x87EmulHandler(regs*, void*)+0x22>
c00113c4:	83 ec 0c             	sub    esp,0xc
c00113c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113cb:	ff d0                	call   eax
c00113cd:	83 c4 10             	add    esp,0x10
c00113d0:	84 c0                	test   al,al
c00113d2:	74 2f                	je     c0011403 <x87EmulHandler(regs*, void*)+0x4c>
c00113d4:	83 c4 08             	add    esp,0x8
c00113d7:	5b                   	pop    ebx
c00113d8:	c3                   	ret    
c00113d9:	83 ec 08             	sub    esp,0x8
c00113dc:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c00113e2:	6a 01                	push   0x1
c00113e4:	68 00 1e 02 c0       	push   0xc0021e00
c00113e9:	e8 a2 6f 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c00113ee:	5a                   	pop    edx
c00113ef:	59                   	pop    ecx
c00113f0:	53                   	push   ebx
c00113f1:	50                   	push   eax
c00113f2:	e8 5f 71 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c00113f7:	a1 54 47 02 c0       	mov    eax,ds:0xc0024754
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	85 c0                	test   eax,eax
c0011401:	75 c1                	jne    c00113c4 <x87EmulHandler(regs*, void*)+0xd>
c0011403:	83 ec 0c             	sub    esp,0xc
c0011406:	68 1d 1e 02 c0       	push   0xc0021e1d
c001140b:	e8 49 dd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011410:	58                   	pop    eax
c0011411:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011415:	e8 86 fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c001141a <gpFault(regs*, void*)>:
c001141a:	53                   	push   ebx
c001141b:	83 ec 14             	sub    esp,0x14
c001141e:	c7 05 50 47 02 c0 07 98 01 c0 	mov    DWORD PTR ds:0xc0024750,0xc0019807
c0011428:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001142c:	53                   	push   ebx
c001142d:	e8 d5 83 00 00       	call   c0019807 <Vm::faultHandler(regs*)>
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	84 c0                	test   al,al
c0011437:	74 05                	je     c001143e <gpFault(regs*, void*)+0x24>
c0011439:	83 c4 08             	add    esp,0x8
c001143c:	5b                   	pop    ebx
c001143d:	c3                   	ret    
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	68 1d 1e 02 c0       	push   0xc0021e1d
c0011446:	e8 0e dd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001144b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001144e:	e8 4d fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c0011453 <pgFault(regs*, void*)>:
c0011453:	83 ec 18             	sub    esp,0x18
c0011456:	68 38 1e 02 c0       	push   0xc0021e38
c001145b:	e8 f9 dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011460:	58                   	pop    eax
c0011461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011465:	e8 36 fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c001146a <otherISRHandler(regs*, void*)>:
c001146a:	53                   	push   ebx
c001146b:	83 ec 0c             	sub    esp,0xc
c001146e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011472:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011475:	50                   	push   eax
c0011476:	50                   	push   eax
c0011477:	68 45 1e 02 c0       	push   0xc0021e45
c001147c:	e8 d8 dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011481:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011484:	e8 17 fb ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>

c0011489 <opcodeFault(regs*, void*)>:
c0011489:	55                   	push   ebp
c001148a:	89 e5                	mov    ebp,esp
c001148c:	56                   	push   esi
c001148d:	53                   	push   ebx
c001148e:	83 ec 40             	sub    esp,0x40
c0011491:	e8 86 33 00 00       	call   c001481c <thisCPU()>
c0011496:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001149c:	84 c0                	test   al,al
c001149e:	74 24                	je     c00114c4 <opcodeFault(regs*, void*)+0x3b>
c00114a0:	83 ec 0c             	sub    esp,0xc
c00114a3:	68 64 1e 02 c0       	push   0xc0021e64
c00114a8:	e8 ac dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114b6:	8d 50 19             	lea    edx,[eax+0x19]
c00114b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114bf:	e9 77 05 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c00114c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114ca:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00114cd:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00114d1:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00114d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114db:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00114de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00114e1:	8a 00                	mov    al,BYTE PTR [eax]
c00114e3:	3c f0                	cmp    al,0xf0
c00114e5:	75 17                	jne    c00114fe <opcodeFault(regs*, void*)+0x75>
c00114e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00114ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00114f0:	8d 50 01             	lea    edx,[eax+0x1]
c00114f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00114f9:	e9 da 00 00 00       	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c00114fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011501:	8a 00                	mov    al,BYTE PTR [eax]
c0011503:	3c f2                	cmp    al,0xf2
c0011505:	74 09                	je     c0011510 <opcodeFault(regs*, void*)+0x87>
c0011507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001150a:	8a 00                	mov    al,BYTE PTR [eax]
c001150c:	3c f3                	cmp    al,0xf3
c001150e:	75 1b                	jne    c001152b <opcodeFault(regs*, void*)+0xa2>
c0011510:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011514:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001151d:	8d 50 01             	lea    edx,[eax+0x1]
c0011520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011523:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011526:	e9 ad 00 00 00       	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c001152b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001152e:	8a 00                	mov    al,BYTE PTR [eax]
c0011530:	3c 66                	cmp    al,0x66
c0011532:	75 1f                	jne    c0011553 <opcodeFault(regs*, void*)+0xca>
c0011534:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011538:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001153c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001153f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011542:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011545:	8d 50 01             	lea    edx,[eax+0x1]
c0011548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001154e:	e9 85 00 00 00       	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c0011553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011556:	8a 00                	mov    al,BYTE PTR [eax]
c0011558:	3c 67                	cmp    al,0x67
c001155a:	75 18                	jne    c0011574 <opcodeFault(regs*, void*)+0xeb>
c001155c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011560:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011566:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011569:	8d 50 01             	lea    edx,[eax+0x1]
c001156c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011572:	eb 64                	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c0011574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011577:	8a 00                	mov    al,BYTE PTR [eax]
c0011579:	3c 2e                	cmp    al,0x2e
c001157b:	74 09                	je     c0011586 <opcodeFault(regs*, void*)+0xfd>
c001157d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011580:	8a 00                	mov    al,BYTE PTR [eax]
c0011582:	3c 3e                	cmp    al,0x3e
c0011584:	75 18                	jne    c001159e <opcodeFault(regs*, void*)+0x115>
c0011586:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001158a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011593:	8d 50 01             	lea    edx,[eax+0x1]
c0011596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011599:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001159c:	eb 3a                	jmp    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c001159e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115a1:	8a 00                	mov    al,BYTE PTR [eax]
c00115a3:	3c 36                	cmp    al,0x36
c00115a5:	74 1b                	je     c00115c2 <opcodeFault(regs*, void*)+0x139>
c00115a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115aa:	8a 00                	mov    al,BYTE PTR [eax]
c00115ac:	3c 26                	cmp    al,0x26
c00115ae:	74 12                	je     c00115c2 <opcodeFault(regs*, void*)+0x139>
c00115b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b3:	8a 00                	mov    al,BYTE PTR [eax]
c00115b5:	3c 64                	cmp    al,0x64
c00115b7:	74 09                	je     c00115c2 <opcodeFault(regs*, void*)+0x139>
c00115b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115bc:	8a 00                	mov    al,BYTE PTR [eax]
c00115be:	3c 65                	cmp    al,0x65
c00115c0:	75 16                	jne    c00115d8 <opcodeFault(regs*, void*)+0x14f>
c00115c2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115c6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115cf:	8d 50 01             	lea    edx,[eax+0x1]
c00115d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115db:	8a 00                	mov    al,BYTE PTR [eax]
c00115dd:	3c 0f                	cmp    al,0xf
c00115df:	0f 85 ad 00 00 00    	jne    c0011692 <opcodeFault(regs*, void*)+0x209>
c00115e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e8:	40                   	inc    eax
c00115e9:	8a 00                	mov    al,BYTE PTR [eax]
c00115eb:	3c c2                	cmp    al,0xc2
c00115ed:	74 0e                	je     c00115fd <opcodeFault(regs*, void*)+0x174>
c00115ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115f2:	40                   	inc    eax
c00115f3:	8a 00                	mov    al,BYTE PTR [eax]
c00115f5:	3c c3                	cmp    al,0xc3
c00115f7:	0f 85 95 00 00 00    	jne    c0011692 <opcodeFault(regs*, void*)+0x209>
c00115fd:	83 ec 0c             	sub    esp,0xc
c0011600:	68 87 1e 02 c0       	push   0xc0021e87
c0011605:	e8 4f db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011610:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011613:	8d 50 01             	lea    edx,[eax+0x1]
c0011616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011619:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001161c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001161f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011622:	8a 00                	mov    al,BYTE PTR [eax]
c0011624:	8d 50 fe             	lea    edx,[eax-0x2]
c0011627:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001162a:	88 10                	mov    BYTE PTR [eax],dl
c001162c:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001162f:	50                   	push   eax
c0011630:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0011633:	50                   	push   eax
c0011634:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0011637:	50                   	push   eax
c0011638:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001163b:	e8 48 41 00 00       	call   c0015788 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011640:	83 c4 10             	add    esp,0x10
c0011643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011646:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011649:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001164c:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001164f:	01 d0                	add    eax,edx
c0011651:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0011654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011657:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001165a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001165d:	48                   	dec    eax
c001165e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011664:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0011667:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001166a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166d:	83 ec 04             	sub    esp,0x4
c0011670:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0011673:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0011676:	50                   	push   eax
c0011677:	e8 d4 ea fe ff       	call   c0000150 <voodooXADD>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0011682:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0011685:	01 c2                	add    edx,eax
c0011687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001168d:	e9 a9 03 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c0011692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011695:	8a 00                	mov    al,BYTE PTR [eax]
c0011697:	3c 0f                	cmp    al,0xf
c0011699:	0f 85 8b 01 00 00    	jne    c001182a <opcodeFault(regs*, void*)+0x3a1>
c001169f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a2:	40                   	inc    eax
c00116a3:	8a 00                	mov    al,BYTE PTR [eax]
c00116a5:	3c c7                	cmp    al,0xc7
c00116a7:	0f 86 7d 01 00 00    	jbe    c001182a <opcodeFault(regs*, void*)+0x3a1>
c00116ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116b0:	40                   	inc    eax
c00116b1:	8a 00                	mov    al,BYTE PTR [eax]
c00116b3:	3c cf                	cmp    al,0xcf
c00116b5:	0f 87 6f 01 00 00    	ja     c001182a <opcodeFault(regs*, void*)+0x3a1>
c00116bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116be:	40                   	inc    eax
c00116bf:	8a 00                	mov    al,BYTE PTR [eax]
c00116c1:	83 c0 38             	add    eax,0x38
c00116c4:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00116c7:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00116cb:	75 0b                	jne    c00116d8 <opcodeFault(regs*, void*)+0x24f>
c00116cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00116d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116d6:	eb 75                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c00116d8:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00116dc:	75 0b                	jne    c00116e9 <opcodeFault(regs*, void*)+0x260>
c00116de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116e1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00116e4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116e7:	eb 64                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c00116e9:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00116ed:	75 0b                	jne    c00116fa <opcodeFault(regs*, void*)+0x271>
c00116ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116f2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00116f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00116f8:	eb 53                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c00116fa:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00116fe:	75 0b                	jne    c001170b <opcodeFault(regs*, void*)+0x282>
c0011700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011703:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011706:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011709:	eb 42                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001170b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001170f:	75 0b                	jne    c001171c <opcodeFault(regs*, void*)+0x293>
c0011711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011714:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0011717:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001171a:	eb 31                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001171c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0011720:	75 0b                	jne    c001172d <opcodeFault(regs*, void*)+0x2a4>
c0011722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011725:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011728:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001172b:	eb 20                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001172d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0011731:	75 0b                	jne    c001173e <opcodeFault(regs*, void*)+0x2b5>
c0011733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011739:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001173c:	eb 0f                	jmp    c001174d <opcodeFault(regs*, void*)+0x2c4>
c001173e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0011742:	75 09                	jne    c001174d <opcodeFault(regs*, void*)+0x2c4>
c0011744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011747:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001174a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001174d:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011751:	74 10                	je     c0011763 <opcodeFault(regs*, void*)+0x2da>
c0011753:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001175a:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011761:	eb 2d                	jmp    c0011790 <opcodeFault(regs*, void*)+0x307>
c0011763:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011766:	c1 e0 18             	shl    eax,0x18
c0011769:	89 c2                	mov    edx,eax
c001176b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001176e:	c1 e0 08             	shl    eax,0x8
c0011771:	25 00 00 ff 00       	and    eax,0xff0000
c0011776:	09 c2                	or     edx,eax
c0011778:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001177b:	c1 e8 08             	shr    eax,0x8
c001177e:	25 00 ff 00 00       	and    eax,0xff00
c0011783:	09 c2                	or     edx,eax
c0011785:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011788:	c1 e8 18             	shr    eax,0x18
c001178b:	09 d0                	or     eax,edx
c001178d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011790:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011794:	75 0b                	jne    c00117a1 <opcodeFault(regs*, void*)+0x318>
c0011796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011799:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001179c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001179f:	eb 75                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117a1:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00117a5:	75 0b                	jne    c00117b2 <opcodeFault(regs*, void*)+0x329>
c00117a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117ad:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00117b0:	eb 64                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117b2:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117b6:	75 0b                	jne    c00117c3 <opcodeFault(regs*, void*)+0x33a>
c00117b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117be:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00117c1:	eb 53                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117c3:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117c7:	75 0b                	jne    c00117d4 <opcodeFault(regs*, void*)+0x34b>
c00117c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117cf:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00117d2:	eb 42                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117d4:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117d8:	75 0b                	jne    c00117e5 <opcodeFault(regs*, void*)+0x35c>
c00117da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117dd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117e0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00117e3:	eb 31                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117e5:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117e9:	75 0b                	jne    c00117f6 <opcodeFault(regs*, void*)+0x36d>
c00117eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00117f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117f4:	eb 20                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c00117f6:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117fa:	75 0b                	jne    c0011807 <opcodeFault(regs*, void*)+0x37e>
c00117fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ff:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011802:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011805:	eb 0f                	jmp    c0011816 <opcodeFault(regs*, void*)+0x38d>
c0011807:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001180b:	75 09                	jne    c0011816 <opcodeFault(regs*, void*)+0x38d>
c001180d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011810:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011813:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011819:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001181c:	8d 50 02             	lea    edx,[eax+0x2]
c001181f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011822:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011825:	e9 11 02 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c001182a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001182d:	8a 00                	mov    al,BYTE PTR [eax]
c001182f:	3c 0f                	cmp    al,0xf
c0011831:	0f 85 76 01 00 00    	jne    c00119ad <opcodeFault(regs*, void*)+0x524>
c0011837:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001183a:	40                   	inc    eax
c001183b:	8a 00                	mov    al,BYTE PTR [eax]
c001183d:	3c c7                	cmp    al,0xc7
c001183f:	0f 85 68 01 00 00    	jne    c00119ad <opcodeFault(regs*, void*)+0x524>
c0011845:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001184b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001184e:	8d 50 01             	lea    edx,[eax+0x1]
c0011851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011854:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011857:	8d 45 ba             	lea    eax,[ebp-0x46]
c001185a:	50                   	push   eax
c001185b:	8d 45 bb             	lea    eax,[ebp-0x45]
c001185e:	50                   	push   eax
c001185f:	8d 45 bc             	lea    eax,[ebp-0x44]
c0011862:	50                   	push   eax
c0011863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011866:	e8 1d 3f 00 00       	call   c0015788 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011871:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0011874:	83 f0 01             	xor    eax,0x1
c0011877:	84 c0                	test   al,al
c0011879:	0f 84 2e 01 00 00    	je     c00119ad <opcodeFault(regs*, void*)+0x524>
c001187f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0011882:	3c 01                	cmp    al,0x1
c0011884:	0f 85 23 01 00 00    	jne    c00119ad <opcodeFault(regs*, void*)+0x524>
c001188a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001188d:	83 f0 01             	xor    eax,0x1
c0011890:	84 c0                	test   al,al
c0011892:	0f 84 15 01 00 00    	je     c00119ad <opcodeFault(regs*, void*)+0x524>
c0011898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001189e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118a1:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00118a8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00118ab:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00118ae:	89 c2                	mov    edx,eax
c00118b0:	b8 00 00 00 00       	mov    eax,0x0
c00118b5:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00118b8:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00118bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118be:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00118c1:	ba 00 00 00 00       	mov    edx,0x0
c00118c6:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00118c9:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00118d2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118d5:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00118dc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00118df:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00118e2:	89 c2                	mov    edx,eax
c00118e4:	b8 00 00 00 00       	mov    eax,0x0
c00118e9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00118ec:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00118ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118f5:	ba 00 00 00 00       	mov    edx,0x0
c00118fa:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00118fd:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0011900:	e8 70 70 00 00       	call   c0018975 <lockScheduler()>
c0011905:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011908:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001190b:	8b 00                	mov    eax,DWORD PTR [eax]
c001190d:	89 c1                	mov    ecx,eax
c001190f:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0011912:	89 cb                	mov    ebx,ecx
c0011914:	89 d0                	mov    eax,edx
c0011916:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0011919:	89 c6                	mov    esi,eax
c001191b:	89 f0                	mov    eax,esi
c001191d:	09 d8                	or     eax,ebx
c001191f:	85 c0                	test   eax,eax
c0011921:	75 21                	jne    c0011944 <opcodeFault(regs*, void*)+0x4bb>
c0011923:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0011926:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011929:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001192c:	89 01                	mov    DWORD PTR [ecx],eax
c001192e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011934:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011937:	83 c8 40             	or     eax,0x40
c001193a:	89 c2                	mov    edx,eax
c001193c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001193f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011942:	eb 3e                	jmp    c0011982 <opcodeFault(regs*, void*)+0x4f9>
c0011944:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0011947:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001194a:	8b 00                	mov    eax,DWORD PTR [eax]
c001194c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001194f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011952:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011958:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001195b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001195e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011961:	89 d0                	mov    eax,edx
c0011963:	31 d2                	xor    edx,edx
c0011965:	89 c3                	mov    ebx,eax
c0011967:	89 d6                	mov    esi,edx
c0011969:	89 da                	mov    edx,ebx
c001196b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001196e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011974:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011977:	83 e0 bf             	and    eax,0xffffffbf
c001197a:	89 c2                	mov    edx,eax
c001197c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197f:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011982:	e8 f0 6f 00 00       	call   c0018977 <unlockScheduler()>
c0011987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001198d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011990:	01 c2                	add    edx,eax
c0011992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011995:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011998:	83 ec 0c             	sub    esp,0xc
c001199b:	68 96 1e 02 c0       	push   0xc0021e96
c00119a0:	e8 b4 d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	e9 8e 00 00 00       	jmp    c0011a3b <opcodeFault(regs*, void*)+0x5b2>
c00119ad:	83 ec 0c             	sub    esp,0xc
c00119b0:	68 a9 1e 02 c0       	push   0xc0021ea9
c00119b5:	e8 9f d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00119ba:	83 c4 10             	add    esp,0x10
c00119bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c9:	c1 e0 04             	shl    eax,0x4
c00119cc:	01 d0                	add    eax,edx
c00119ce:	83 c0 03             	add    eax,0x3
c00119d1:	8a 00                	mov    al,BYTE PTR [eax]
c00119d3:	0f b6 d8             	movzx  ebx,al
c00119d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e2:	c1 e0 04             	shl    eax,0x4
c00119e5:	01 d0                	add    eax,edx
c00119e7:	83 c0 02             	add    eax,0x2
c00119ea:	8a 00                	mov    al,BYTE PTR [eax]
c00119ec:	0f b6 c8             	movzx  ecx,al
c00119ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00119f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119fb:	c1 e0 04             	shl    eax,0x4
c00119fe:	01 d0                	add    eax,edx
c0011a00:	40                   	inc    eax
c0011a01:	8a 00                	mov    al,BYTE PTR [eax]
c0011a03:	0f b6 d0             	movzx  edx,al
c0011a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a09:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a12:	c1 e0 04             	shl    eax,0x4
c0011a15:	01 f0                	add    eax,esi
c0011a17:	8a 00                	mov    al,BYTE PTR [eax]
c0011a19:	0f b6 c0             	movzx  eax,al
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	53                   	push   ebx
c0011a20:	51                   	push   ecx
c0011a21:	52                   	push   edx
c0011a22:	50                   	push   eax
c0011a23:	68 bc 1e 02 c0       	push   0xc0021ebc
c0011a28:	e8 2c d7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011a2d:	83 c4 20             	add    esp,0x20
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011a36:	e8 65 f5 ff ff       	call   c0010fa0 <displayDebugInfo(regs*)>
c0011a3b:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011a3e:	5b                   	pop    ebx
c0011a3f:	5e                   	pop    esi
c0011a40:	5d                   	pop    ebp
c0011a41:	c3                   	ret    

c0011a42 <displayProgramFault(char const*)>:
c0011a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a4a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011a50:	85 c0                	test   eax,eax
c0011a52:	74 15                	je     c0011a69 <displayProgramFault(char const*)+0x27>
c0011a54:	83 ec 0c             	sub    esp,0xc
c0011a57:	6a 04                	push   0x4
c0011a59:	6a 0f                	push   0xf
c0011a5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a5f:	50                   	push   eax
c0011a60:	e8 c9 b9 ff ff       	call   c000d42e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011a65:	83 c4 1c             	add    esp,0x1c
c0011a68:	c3                   	ret    
c0011a69:	c3                   	ret    

c0011a6a <setupInterruptController()>:
c0011a6a:	55                   	push   ebp
c0011a6b:	89 e5                	mov    ebp,esp
c0011a6d:	53                   	push   ebx
c0011a6e:	83 ec 14             	sub    esp,0x14
c0011a71:	e8 a3 2d 00 00       	call   c0014819 <getCPUNumber()>
c0011a76:	85 c0                	test   eax,eax
c0011a78:	0f 95 c0             	setne  al
c0011a7b:	84 c0                	test   al,al
c0011a7d:	74 56                	je     c0011ad5 <setupInterruptController()+0x6b>
c0011a7f:	83 ec 0c             	sub    esp,0xc
c0011a82:	68 58 21 00 00       	push   0x2158
c0011a87:	e8 98 d5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011a8c:	83 c4 10             	add    esp,0x10
c0011a8f:	89 c3                	mov    ebx,eax
c0011a91:	83 ec 0c             	sub    esp,0xc
c0011a94:	53                   	push   ebx
c0011a95:	e8 26 c9 00 00       	call   c001e3c0 <APIC::APIC()>
c0011a9a:	83 c4 10             	add    esp,0x10
c0011a9d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011aa0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011aa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011aa6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aa8:	83 c0 08             	add    eax,0x8
c0011aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0011aad:	6a 00                	push   0x0
c0011aaf:	6a 00                	push   0x0
c0011ab1:	6a 00                	push   0x0
c0011ab3:	52                   	push   edx
c0011ab4:	ff d0                	call   eax
c0011ab6:	83 c4 10             	add    esp,0x10
c0011ab9:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0011abe:	83 ec 08             	sub    esp,0x8
c0011ac1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ac4:	50                   	push   eax
c0011ac5:	e8 a4 ea ff ff       	call   c001056e <Device::addChild(Device*)>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011ad0:	e9 48 03 00 00       	jmp    c0011e1d <setupInterruptController()+0x3b3>
c0011ad5:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0011ada:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ae0:	83 e0 01             	and    eax,0x1
c0011ae3:	84 c0                	test   al,al
c0011ae5:	0f 95 c0             	setne  al
c0011ae8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	68 58 21 00 00       	push   0x2158
c0011af3:	e8 2c d5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011af8:	83 c4 10             	add    esp,0x10
c0011afb:	89 c3                	mov    ebx,eax
c0011afd:	83 ec 0c             	sub    esp,0xc
c0011b00:	53                   	push   ebx
c0011b01:	e8 b4 cd 00 00       	call   c001e8ba <PIC::PIC()>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b0c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b14:	83 c0 08             	add    eax,0x8
c0011b17:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b19:	6a 00                	push   0x0
c0011b1b:	6a 00                	push   0x0
c0011b1d:	6a 00                	push   0x0
c0011b1f:	52                   	push   edx
c0011b20:	ff d0                	call   eax
c0011b22:	83 c4 10             	add    esp,0x10
c0011b25:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011b29:	74 6e                	je     c0011b99 <setupInterruptController()+0x12f>
c0011b2b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b33:	83 c0 0c             	add    eax,0xc
c0011b36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b38:	6a 00                	push   0x0
c0011b3a:	6a 00                	push   0x0
c0011b3c:	6a 00                	push   0x0
c0011b3e:	52                   	push   edx
c0011b3f:	ff d0                	call   eax
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011b48:	74 15                	je     c0011b5f <setupInterruptController()+0xf5>
c0011b4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4f:	83 c0 04             	add    eax,0x4
c0011b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b54:	83 ec 0c             	sub    esp,0xc
c0011b57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011b5a:	ff d0                	call   eax
c0011b5c:	83 c4 10             	add    esp,0x10
c0011b5f:	83 ec 0c             	sub    esp,0xc
c0011b62:	68 58 21 00 00       	push   0x2158
c0011b67:	e8 b8 d4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0011b6c:	83 c4 10             	add    esp,0x10
c0011b6f:	89 c3                	mov    ebx,eax
c0011b71:	83 ec 0c             	sub    esp,0xc
c0011b74:	53                   	push   ebx
c0011b75:	e8 46 c8 00 00       	call   c001e3c0 <APIC::APIC()>
c0011b7a:	83 c4 10             	add    esp,0x10
c0011b7d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011b80:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b88:	83 c0 08             	add    eax,0x8
c0011b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b8d:	6a 00                	push   0x0
c0011b8f:	6a 00                	push   0x0
c0011b91:	6a 00                	push   0x0
c0011b93:	52                   	push   edx
c0011b94:	ff d0                	call   eax
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0011b9e:	83 ec 08             	sub    esp,0x8
c0011ba1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ba4:	50                   	push   eax
c0011ba5:	e8 c4 e9 ff ff       	call   c001056e <Device::addChild(Device*)>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb2:	83 c0 24             	add    eax,0x24
c0011bb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bb7:	6a 00                	push   0x0
c0011bb9:	68 6a 14 01 c0       	push   0xc001146a
c0011bbe:	6a 00                	push   0x0
c0011bc0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bc3:	ff d0                	call   eax
c0011bc5:	83 c4 10             	add    esp,0x10
c0011bc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcd:	83 c0 24             	add    eax,0x24
c0011bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd2:	6a 00                	push   0x0
c0011bd4:	68 6a 14 01 c0       	push   0xc001146a
c0011bd9:	6a 01                	push   0x1
c0011bdb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bde:	ff d0                	call   eax
c0011be0:	83 c4 10             	add    esp,0x10
c0011be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be8:	83 c0 24             	add    eax,0x24
c0011beb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bed:	6a 00                	push   0x0
c0011bef:	68 03 0e 01 c0       	push   0xc0010e03
c0011bf4:	6a 02                	push   0x2
c0011bf6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011bf9:	ff d0                	call   eax
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c03:	83 c0 24             	add    eax,0x24
c0011c06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c08:	6a 00                	push   0x0
c0011c0a:	68 6a 14 01 c0       	push   0xc001146a
c0011c0f:	6a 03                	push   0x3
c0011c11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c14:	ff d0                	call   eax
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1e:	83 c0 24             	add    eax,0x24
c0011c21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c23:	6a 00                	push   0x0
c0011c25:	68 6a 14 01 c0       	push   0xc001146a
c0011c2a:	6a 04                	push   0x4
c0011c2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c2f:	ff d0                	call   eax
c0011c31:	83 c4 10             	add    esp,0x10
c0011c34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c37:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c39:	83 c0 24             	add    eax,0x24
c0011c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3e:	6a 00                	push   0x0
c0011c40:	68 6a 14 01 c0       	push   0xc001146a
c0011c45:	6a 05                	push   0x5
c0011c47:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c4a:	ff d0                	call   eax
c0011c4c:	83 c4 10             	add    esp,0x10
c0011c4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c54:	83 c0 24             	add    eax,0x24
c0011c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c59:	6a 00                	push   0x0
c0011c5b:	68 89 14 01 c0       	push   0xc0011489
c0011c60:	6a 06                	push   0x6
c0011c62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c65:	ff d0                	call   eax
c0011c67:	83 c4 10             	add    esp,0x10
c0011c6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6f:	83 c0 24             	add    eax,0x24
c0011c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c74:	6a 00                	push   0x0
c0011c76:	68 b7 13 01 c0       	push   0xc00113b7
c0011c7b:	6a 07                	push   0x7
c0011c7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c80:	ff d0                	call   eax
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8a:	83 c0 24             	add    eax,0x24
c0011c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8f:	6a 00                	push   0x0
c0011c91:	68 1e 0c 01 c0       	push   0xc0010c1e
c0011c96:	6a 08                	push   0x8
c0011c98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c9b:	ff d0                	call   eax
c0011c9d:	83 c4 10             	add    esp,0x10
c0011ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca5:	83 c0 24             	add    eax,0x24
c0011ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011caa:	6a 00                	push   0x0
c0011cac:	68 6a 14 01 c0       	push   0xc001146a
c0011cb1:	6a 09                	push   0x9
c0011cb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb6:	ff d0                	call   eax
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc0:	83 c0 24             	add    eax,0x24
c0011cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc5:	6a 00                	push   0x0
c0011cc7:	68 6a 14 01 c0       	push   0xc001146a
c0011ccc:	6a 0a                	push   0xa
c0011cce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cd1:	ff d0                	call   eax
c0011cd3:	83 c4 10             	add    esp,0x10
c0011cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cdb:	83 c0 24             	add    eax,0x24
c0011cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce0:	6a 00                	push   0x0
c0011ce2:	68 6a 14 01 c0       	push   0xc001146a
c0011ce7:	6a 0b                	push   0xb
c0011ce9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cec:	ff d0                	call   eax
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf6:	83 c0 24             	add    eax,0x24
c0011cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfb:	6a 00                	push   0x0
c0011cfd:	68 6a 14 01 c0       	push   0xc001146a
c0011d02:	6a 0c                	push   0xc
c0011d04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d07:	ff d0                	call   eax
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d11:	83 c0 24             	add    eax,0x24
c0011d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d16:	6a 00                	push   0x0
c0011d18:	68 1a 14 01 c0       	push   0xc001141a
c0011d1d:	6a 0d                	push   0xd
c0011d1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d22:	ff d0                	call   eax
c0011d24:	83 c4 10             	add    esp,0x10
c0011d27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2c:	83 c0 24             	add    eax,0x24
c0011d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d31:	6a 00                	push   0x0
c0011d33:	68 53 14 01 c0       	push   0xc0011453
c0011d38:	6a 0e                	push   0xe
c0011d3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d3d:	ff d0                	call   eax
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d47:	83 c0 24             	add    eax,0x24
c0011d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4c:	6a 00                	push   0x0
c0011d4e:	68 6a 14 01 c0       	push   0xc001146a
c0011d53:	6a 0f                	push   0xf
c0011d55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d58:	ff d0                	call   eax
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d62:	83 c0 24             	add    eax,0x24
c0011d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d67:	6a 00                	push   0x0
c0011d69:	68 6a 14 01 c0       	push   0xc001146a
c0011d6e:	6a 10                	push   0x10
c0011d70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d73:	ff d0                	call   eax
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	83 c0 24             	add    eax,0x24
c0011d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d82:	6a 00                	push   0x0
c0011d84:	68 6a 14 01 c0       	push   0xc001146a
c0011d89:	6a 11                	push   0x11
c0011d8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d8e:	ff d0                	call   eax
c0011d90:	83 c4 10             	add    esp,0x10
c0011d93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d98:	83 c0 24             	add    eax,0x24
c0011d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9d:	6a 00                	push   0x0
c0011d9f:	68 6a 14 01 c0       	push   0xc001146a
c0011da4:	6a 12                	push   0x12
c0011da6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da9:	ff d0                	call   eax
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db3:	83 c0 24             	add    eax,0x24
c0011db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db8:	6a 00                	push   0x0
c0011dba:	68 6a 14 01 c0       	push   0xc001146a
c0011dbf:	6a 13                	push   0x13
c0011dc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dc4:	ff d0                	call   eax
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dce:	83 c0 24             	add    eax,0x24
c0011dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd3:	6a 00                	push   0x0
c0011dd5:	68 6a 14 01 c0       	push   0xc001146a
c0011dda:	6a 14                	push   0x14
c0011ddc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ddf:	ff d0                	call   eax
c0011de1:	83 c4 10             	add    esp,0x10
c0011de4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de9:	83 c0 24             	add    eax,0x24
c0011dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dee:	6a 00                	push   0x0
c0011df0:	68 6a 14 01 c0       	push   0xc001146a
c0011df5:	6a 1e                	push   0x1e
c0011df7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dfa:	ff d0                	call   eax
c0011dfc:	83 c4 10             	add    esp,0x10
c0011dff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e04:	83 c0 24             	add    eax,0x24
c0011e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e09:	6a 00                	push   0x0
c0011e0b:	68 7d 73 01 c0       	push   0xc001737d
c0011e10:	6a 60                	push   0x60
c0011e12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e15:	ff d0                	call   eax
c0011e17:	83 c4 10             	add    esp,0x10
c0011e1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e1d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011e20:	c9                   	leave  
c0011e21:	c3                   	ret    

c0011e22 <InterruptController::convertLegacyIRQNumber(int)>:
c0011e22:	55                   	push   ebp
c0011e23:	89 e5                	mov    ebp,esp
c0011e25:	83 ec 08             	sub    esp,0x8
c0011e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e2b:	83 ec 0c             	sub    esp,0xc
c0011e2e:	50                   	push   eax
c0011e2f:	e8 1c ea ff ff       	call   c0010850 <Device::getName()>
c0011e34:	83 c4 10             	add    esp,0x10
c0011e37:	8a 00                	mov    al,BYTE PTR [eax]
c0011e39:	3c 41                	cmp    al,0x41
c0011e3b:	0f 94 c0             	sete   al
c0011e3e:	84 c0                	test   al,al
c0011e40:	74 28                	je     c0011e6a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e42:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011e46:	7f 12                	jg     c0011e5a <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011e48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e4b:	05 20 3d 02 c0       	add    eax,0xc0023d20
c0011e50:	8a 00                	mov    al,BYTE PTR [eax]
c0011e52:	0f b6 c0             	movzx  eax,al
c0011e55:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011e58:	eb 10                	jmp    c0011e6a <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011e5a:	83 ec 0c             	sub    esp,0xc
c0011e5d:	68 34 1c 02 c0       	push   0xc0021c34
c0011e62:	e8 21 3b 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011e6d:	c9                   	leave  
c0011e6e:	c3                   	ret    
c0011e6f:	90                   	nop

c0011e70 <startGUI(void*)>:
c0011e70:	55                   	push   ebp
c0011e71:	89 e5                	mov    ebp,esp
c0011e73:	53                   	push   ebx
c0011e74:	83 ec 04             	sub    esp,0x4
c0011e77:	e8 fb 6a 00 00       	call   c0018977 <unlockScheduler()>
c0011e7c:	e8 df 6a 00 00       	call   c0018960 <getIRQNestingLevel()>
c0011e81:	83 ec 08             	sub    esp,0x8
c0011e84:	50                   	push   eax
c0011e85:	68 24 1f 02 c0       	push   0xc0021f24
c0011e8a:	e8 ca d2 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c0011e98:	83 ec 08             	sub    esp,0x8
c0011e9b:	6a 01                	push   0x1
c0011e9d:	68 3e 1f 02 c0       	push   0xc0021f3e
c0011ea2:	e8 e9 64 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	83 ec 08             	sub    esp,0x8
c0011ead:	53                   	push   ebx
c0011eae:	50                   	push   eax
c0011eaf:	e8 a2 66 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c0011ebd:	83 ec 08             	sub    esp,0x8
c0011ec0:	6a 01                	push   0x1
c0011ec2:	68 58 1f 02 c0       	push   0xc0021f58
c0011ec7:	e8 c4 64 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c0011ecc:	83 c4 10             	add    esp,0x10
c0011ecf:	83 ec 08             	sub    esp,0x8
c0011ed2:	53                   	push   ebx
c0011ed3:	50                   	push   eax
c0011ed4:	e8 7d 66 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	90                   	nop
c0011edd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ee0:	c9                   	leave  
c0011ee1:	c3                   	ret    

c0011ee2 <sendKeyToTerminal(unsigned char)>:
c0011ee2:	55                   	push   ebp
c0011ee3:	89 e5                	mov    ebp,esp
c0011ee5:	83 ec 28             	sub    esp,0x28
c0011ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011eeb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011eee:	8b 15 84 46 02 c0    	mov    edx,DWORD PTR ds:0xc0024684
c0011ef4:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011ef7:	25 ff 00 00 00       	and    eax,0xff
c0011efc:	83 ec 08             	sub    esp,0x8
c0011eff:	50                   	push   eax
c0011f00:	52                   	push   edx
c0011f01:	e8 66 ba ff ff       	call   c000d96c <VgaText::receiveKey(unsigned char)>
c0011f06:	83 c4 10             	add    esp,0x10
c0011f09:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011f0d:	75 41                	jne    c0011f50 <sendKeyToTerminal(unsigned char)+0x6e>
c0011f0f:	e8 88 6a 00 00       	call   c001899c <lockStuff()>
c0011f14:	a1 60 47 02 c0       	mov    eax,ds:0xc0024760
c0011f19:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f1c:	c7 05 60 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024760,0x0
c0011f26:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011f2a:	74 1f                	je     c0011f4b <sendKeyToTerminal(unsigned char)+0x69>
c0011f2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011f2f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011f32:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011f35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f38:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011f41:	e8 53 70 00 00       	call   c0018f99 <unblockTask(ThreadControlBlock*)>
c0011f46:	83 c4 10             	add    esp,0x10
c0011f49:	eb db                	jmp    c0011f26 <sendKeyToTerminal(unsigned char)+0x44>
c0011f4b:	e8 f3 6d 00 00       	call   c0018d43 <unlockStuff()>
c0011f50:	90                   	nop
c0011f51:	c9                   	leave  
c0011f52:	c3                   	ret    

c0011f53 <sendKeyboardToken(KeyboardToken)>:
c0011f53:	55                   	push   ebp
c0011f54:	89 e5                	mov    ebp,esp
c0011f56:	83 ec 18             	sub    esp,0x18
c0011f59:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0011f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f5f:	25 ff ff 00 00       	and    eax,0xffff
c0011f64:	83 f2 01             	xor    edx,0x1
c0011f67:	88 90 80 47 02 c0    	mov    BYTE PTR [eax-0x3ffdb880],dl
c0011f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011f70:	66 3d 03 02          	cmp    ax,0x203
c0011f74:	75 07                	jne    c0011f7d <sendKeyboardToken(KeyboardToken)+0x2a>
c0011f76:	a0 80 48 02 c0       	mov    al,ds:0xc0024880
c0011f7b:	84 c0                	test   al,al
c0011f7d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0011f81:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0011f84:	a0 88 4b 02 c0       	mov    al,ds:0xc0024b88
c0011f89:	38 c2                	cmp    dl,al
c0011f8b:	74 1e                	je     c0011fab <sendKeyboardToken(KeyboardToken)+0x58>
c0011f8d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0011f90:	a2 88 4b 02 c0       	mov    ds:0xc0024b88,al
c0011f95:	a0 88 4b 02 c0       	mov    al,ds:0xc0024b88
c0011f9a:	25 ff 00 00 00       	and    eax,0xff
c0011f9f:	83 ec 0c             	sub    esp,0xc
c0011fa2:	50                   	push   eax
c0011fa3:	e8 30 ac ff ff       	call   c000cbd8 <setTerminalScrollLock(bool)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011fae:	84 c0                	test   al,al
c0011fb0:	0f 84 ae 00 00 00    	je     c0012064 <sendKeyboardToken(KeyboardToken)+0x111>
c0011fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fb9:	66 3d 10 03          	cmp    ax,0x310
c0011fbd:	75 06                	jne    c0011fc5 <sendKeyboardToken(KeyboardToken)+0x72>
c0011fbf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fc8:	66 3d 11 03          	cmp    ax,0x311
c0011fcc:	75 06                	jne    c0011fd4 <sendKeyboardToken(KeyboardToken)+0x81>
c0011fce:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fd7:	66 3d 12 03          	cmp    ax,0x312
c0011fdb:	75 06                	jne    c0011fe3 <sendKeyboardToken(KeyboardToken)+0x90>
c0011fdd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fe6:	66 3d 13 03          	cmp    ax,0x313
c0011fea:	75 06                	jne    c0011ff2 <sendKeyboardToken(KeyboardToken)+0x9f>
c0011fec:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ff5:	66 3d 14 03          	cmp    ax,0x314
c0011ff9:	75 06                	jne    c0012001 <sendKeyboardToken(KeyboardToken)+0xae>
c0011ffb:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0012001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012004:	66 3d 15 03          	cmp    ax,0x315
c0012008:	75 06                	jne    c0012010 <sendKeyboardToken(KeyboardToken)+0xbd>
c001200a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0012010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012013:	66 3d 16 03          	cmp    ax,0x316
c0012017:	75 06                	jne    c001201f <sendKeyboardToken(KeyboardToken)+0xcc>
c0012019:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001201f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012022:	66 3d 17 03          	cmp    ax,0x317
c0012026:	75 06                	jne    c001202e <sendKeyboardToken(KeyboardToken)+0xdb>
c0012028:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001202e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012031:	66 3d 18 03          	cmp    ax,0x318
c0012035:	75 06                	jne    c001203d <sendKeyboardToken(KeyboardToken)+0xea>
c0012037:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001203d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012040:	66 3d 19 03          	cmp    ax,0x319
c0012044:	75 06                	jne    c001204c <sendKeyboardToken(KeyboardToken)+0xf9>
c0012046:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001204c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001204f:	66 3d 1a 03          	cmp    ax,0x31a
c0012053:	0f 85 c9 00 00 00    	jne    c0012122 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012059:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001205f:	e9 be 00 00 00       	jmp    c0012122 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012067:	66 3d 10 03          	cmp    ax,0x310
c001206b:	75 0a                	jne    c0012077 <sendKeyboardToken(KeyboardToken)+0x124>
c001206d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0012073:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001207a:	66 3d 11 03          	cmp    ax,0x311
c001207e:	75 0a                	jne    c001208a <sendKeyboardToken(KeyboardToken)+0x137>
c0012080:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0012086:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001208a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208d:	66 3d 12 03          	cmp    ax,0x312
c0012091:	75 0a                	jne    c001209d <sendKeyboardToken(KeyboardToken)+0x14a>
c0012093:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012099:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001209d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120a0:	66 3d 13 03          	cmp    ax,0x313
c00120a4:	75 0a                	jne    c00120b0 <sendKeyboardToken(KeyboardToken)+0x15d>
c00120a6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00120ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120b3:	66 3d 14 03          	cmp    ax,0x314
c00120b7:	75 0a                	jne    c00120c3 <sendKeyboardToken(KeyboardToken)+0x170>
c00120b9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00120bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120c6:	66 3d 15 03          	cmp    ax,0x315
c00120ca:	75 0a                	jne    c00120d6 <sendKeyboardToken(KeyboardToken)+0x183>
c00120cc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120d2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120d9:	66 3d 16 03          	cmp    ax,0x316
c00120dd:	75 0a                	jne    c00120e9 <sendKeyboardToken(KeyboardToken)+0x196>
c00120df:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00120e5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ec:	66 3d 17 03          	cmp    ax,0x317
c00120f0:	75 0a                	jne    c00120fc <sendKeyboardToken(KeyboardToken)+0x1a9>
c00120f2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00120f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00120fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ff:	66 3d 18 03          	cmp    ax,0x318
c0012103:	75 0a                	jne    c001210f <sendKeyboardToken(KeyboardToken)+0x1bc>
c0012105:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001210b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001210f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012112:	66 3d 19 03          	cmp    ax,0x319
c0012116:	75 0a                	jne    c0012122 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012118:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001211e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012125:	66 3d 00 02          	cmp    ax,0x200
c0012129:	75 2a                	jne    c0012155 <sendKeyboardToken(KeyboardToken)+0x202>
c001212b:	a0 80 4b 02 c0       	mov    al,ds:0xc0024b80
c0012130:	83 f0 01             	xor    eax,0x1
c0012133:	84 c0                	test   al,al
c0012135:	74 1e                	je     c0012155 <sendKeyboardToken(KeyboardToken)+0x202>
c0012137:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c001213c:	6a 01                	push   0x1
c001213e:	6a 00                	push   0x0
c0012140:	68 70 1e 01 c0       	push   0xc0011e70
c0012145:	50                   	push   eax
c0012146:	e8 5f 69 00 00       	call   c0018aaa <Process::createThread(void (*)(void*), void*, int)>
c001214b:	83 c4 10             	add    esp,0x10
c001214e:	c6 05 80 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b80,0x1
c0012155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012158:	66 3d 1d 03          	cmp    ax,0x31d
c001215c:	75 06                	jne    c0012164 <sendKeyboardToken(KeyboardToken)+0x211>
c001215e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0012164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012167:	66 3d 1c 03          	cmp    ax,0x31c
c001216b:	75 06                	jne    c0012173 <sendKeyboardToken(KeyboardToken)+0x220>
c001216d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0012173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012176:	66 3d 1b 03          	cmp    ax,0x31b
c001217a:	75 06                	jne    c0012182 <sendKeyboardToken(KeyboardToken)+0x22f>
c001217c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0012182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012185:	66 3d 1e 03          	cmp    ax,0x31e
c0012189:	75 06                	jne    c0012191 <sendKeyboardToken(KeyboardToken)+0x23e>
c001218b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012194:	66 3d 1f 03          	cmp    ax,0x31f
c0012198:	75 06                	jne    c00121a0 <sendKeyboardToken(KeyboardToken)+0x24d>
c001219a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00121a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a3:	66 3d 1a 03          	cmp    ax,0x31a
c00121a7:	75 06                	jne    c00121af <sendKeyboardToken(KeyboardToken)+0x25c>
c00121a9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00121af:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00121b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00121b6:	83 f0 01             	xor    eax,0x1
c00121b9:	84 c0                	test   al,al
c00121bb:	74 7b                	je     c0012238 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00121bd:	a0 81 48 02 c0       	mov    al,ds:0xc0024881
c00121c2:	84 c0                	test   al,al
c00121c4:	74 43                	je     c0012209 <sendKeyboardToken(KeyboardToken)+0x2b6>
c00121c6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00121ca:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00121ce:	74 2d                	je     c00121fd <sendKeyboardToken(KeyboardToken)+0x2aa>
c00121d0:	8b 15 84 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024b84
c00121d6:	89 d0                	mov    eax,edx
c00121d8:	c1 e0 02             	shl    eax,0x2
c00121db:	01 d0                	add    eax,edx
c00121dd:	01 c0                	add    eax,eax
c00121df:	a3 84 4b 02 c0       	mov    ds:0xc0024b84,eax
c00121e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121e7:	25 ff ff 00 00       	and    eax,0xffff
c00121ec:	8d 50 d0             	lea    edx,[eax-0x30]
c00121ef:	a1 84 4b 02 c0       	mov    eax,ds:0xc0024b84
c00121f4:	01 d0                	add    eax,edx
c00121f6:	a3 84 4b 02 c0       	mov    ds:0xc0024b84,eax
c00121fb:	eb 71                	jmp    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c00121fd:	c7 05 84 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b84,0x0
c0012207:	eb 65                	jmp    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c0012209:	a1 84 4b 02 c0       	mov    eax,ds:0xc0024b84
c001220e:	85 c0                	test   eax,eax
c0012210:	74 1a                	je     c001222c <sendKeyboardToken(KeyboardToken)+0x2d9>
c0012212:	a1 84 4b 02 c0       	mov    eax,ds:0xc0024b84
c0012217:	25 ff 00 00 00       	and    eax,0xff
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	50                   	push   eax
c0012220:	e8 bd fc ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c0012225:	83 c4 10             	add    esp,0x10
c0012228:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001222c:	c7 05 84 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b84,0x0
c0012236:	eb 36                	jmp    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c0012238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223b:	66 3d 01 01          	cmp    ax,0x101
c001223f:	75 2d                	jne    c001226e <sendKeyboardToken(KeyboardToken)+0x31b>
c0012241:	a1 84 4b 02 c0       	mov    eax,ds:0xc0024b84
c0012246:	85 c0                	test   eax,eax
c0012248:	74 1a                	je     c0012264 <sendKeyboardToken(KeyboardToken)+0x311>
c001224a:	a1 84 4b 02 c0       	mov    eax,ds:0xc0024b84
c001224f:	25 ff 00 00 00       	and    eax,0xff
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	50                   	push   eax
c0012258:	e8 85 fc ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012264:	c7 05 84 4b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024b84,0x0
c001226e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012271:	83 f0 01             	xor    eax,0x1
c0012274:	84 c0                	test   al,al
c0012276:	74 4e                	je     c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c0012278:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001227b:	83 f0 01             	xor    eax,0x1
c001227e:	84 c0                	test   al,al
c0012280:	74 44                	je     c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c0012282:	a0 80 48 02 c0       	mov    al,ds:0xc0024880
c0012287:	83 f0 01             	xor    eax,0x1
c001228a:	84 c0                	test   al,al
c001228c:	74 38                	je     c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c001228e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012291:	66 83 f8 1f          	cmp    ax,0x1f
c0012295:	76 09                	jbe    c00122a0 <sendKeyboardToken(KeyboardToken)+0x34d>
c0012297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001229a:	66 83 f8 7e          	cmp    ax,0x7e
c001229e:	76 12                	jbe    c00122b2 <sendKeyboardToken(KeyboardToken)+0x35f>
c00122a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122a3:	66 83 f8 0a          	cmp    ax,0xa
c00122a7:	74 09                	je     c00122b2 <sendKeyboardToken(KeyboardToken)+0x35f>
c00122a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ac:	66 83 f8 08          	cmp    ax,0x8
c00122b0:	75 14                	jne    c00122c6 <sendKeyboardToken(KeyboardToken)+0x373>
c00122b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122b5:	25 ff 00 00 00       	and    eax,0xff
c00122ba:	83 ec 0c             	sub    esp,0xc
c00122bd:	50                   	push   eax
c00122be:	e8 1f fc ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c00122c3:	83 c4 10             	add    esp,0x10
c00122c6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00122c9:	83 f0 01             	xor    eax,0x1
c00122cc:	84 c0                	test   al,al
c00122ce:	74 51                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122d0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00122d3:	83 f0 01             	xor    eax,0x1
c00122d6:	84 c0                	test   al,al
c00122d8:	74 47                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122da:	a0 80 48 02 c0       	mov    al,ds:0xc0024880
c00122df:	84 c0                	test   al,al
c00122e1:	74 3e                	je     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122e6:	66 83 f8 3f          	cmp    ax,0x3f
c00122ea:	76 35                	jbe    c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122ef:	66 83 f8 7f          	cmp    ax,0x7f
c00122f3:	77 2c                	ja     c0012321 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00122f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122f8:	88 c2                	mov    dl,al
c00122fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122fd:	66 83 f8 5f          	cmp    ax,0x5f
c0012301:	76 04                	jbe    c0012307 <sendKeyboardToken(KeyboardToken)+0x3b4>
c0012303:	b0 20                	mov    al,0x20
c0012305:	eb 02                	jmp    c0012309 <sendKeyboardToken(KeyboardToken)+0x3b6>
c0012307:	b0 00                	mov    al,0x0
c0012309:	29 c2                	sub    edx,eax
c001230b:	88 d0                	mov    al,dl
c001230d:	83 e8 40             	sub    eax,0x40
c0012310:	25 ff 00 00 00       	and    eax,0xff
c0012315:	83 ec 0c             	sub    esp,0xc
c0012318:	50                   	push   eax
c0012319:	e8 c4 fb ff ff       	call   c0011ee2 <sendKeyToTerminal(unsigned char)>
c001231e:	83 c4 10             	add    esp,0x10
c0012321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012324:	66 3d 00 03          	cmp    ax,0x300
c0012328:	75 0f                	jne    c0012339 <sendKeyboardToken(KeyboardToken)+0x3e6>
c001232a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001232d:	83 f0 01             	xor    eax,0x1
c0012330:	84 c0                	test   al,al
c0012332:	74 05                	je     c0012339 <sendKeyboardToken(KeyboardToken)+0x3e6>
c0012334:	e8 c6 b0 ff ff       	call   c000d3ff <doTerminalCycle()>
c0012339:	90                   	nop
c001233a:	c9                   	leave  
c001233b:	c3                   	ret    

c001233c <clearInternalKeybuffer(VgaText*)>:
c001233c:	55                   	push   ebp
c001233d:	89 e5                	mov    ebp,esp
c001233f:	83 ec 08             	sub    esp,0x8
c0012342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012345:	05 34 11 00 00       	add    eax,0x1134
c001234a:	83 ec 0c             	sub    esp,0xc
c001234d:	50                   	push   eax
c001234e:	e8 84 e3 fe ff       	call   c00006d7 <strlen>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012359:	81 c2 34 11 00 00    	add    edx,0x1134
c001235f:	83 ec 04             	sub    esp,0x4
c0012362:	50                   	push   eax
c0012363:	6a 00                	push   0x0
c0012365:	52                   	push   edx
c0012366:	e8 4f e3 fe ff       	call   c00006ba <memset>
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	90                   	nop
c001236f:	c9                   	leave  
c0012370:	c3                   	ret    

c0012371 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012371:	55                   	push   ebp
c0012372:	89 e5                	mov    ebp,esp
c0012374:	83 ec 18             	sub    esp,0x18
c0012377:	fb                   	sti    
c0012378:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001237f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0012383:	74 77                	je     c00123fc <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0012385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012388:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001238e:	84 c0                	test   al,al
c0012390:	75 02                	jne    c0012394 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0012392:	eb f1                	jmp    c0012385 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0012394:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0012397:	8d 50 01             	lea    edx,[eax+0x1]
c001239a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001239d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123a0:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00123a6:	88 10                	mov    BYTE PTR [eax],dl
c00123a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123ab:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00123b1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00123b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b7:	05 34 11 00 00       	add    eax,0x1134
c00123bc:	83 ec 0c             	sub    esp,0xc
c00123bf:	50                   	push   eax
c00123c0:	e8 12 e3 fe ff       	call   c00006d7 <strlen>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123cb:	81 c2 34 11 00 00    	add    edx,0x1134
c00123d1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00123d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00123d7:	81 c2 34 11 00 00    	add    edx,0x1134
c00123dd:	83 ec 04             	sub    esp,0x4
c00123e0:	50                   	push   eax
c00123e1:	51                   	push   ecx
c00123e2:	52                   	push   edx
c00123e3:	e8 64 e2 fe ff       	call   c000064c <memmove>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00123ee:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00123f1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00123f5:	75 88                	jne    c001237f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00123f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123fa:	eb 03                	jmp    c00123ff <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00123fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00123ff:	c9                   	leave  
c0012400:	c3                   	ret    
c0012401:	90                   	nop

c0012402 <Keyboard::Keyboard(char const*)>:
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012409:	83 ec 08             	sub    esp,0x8
c001240c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012410:	50                   	push   eax
c0012411:	e8 48 e3 ff ff       	call   c001075e <Device::Device(char const*)>
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	ba 7c 1f 02 c0       	mov    edx,0xc0021f7c
c001241e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012422:	89 10                	mov    DWORD PTR [eax],edx
c0012424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012428:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0012432:	c6 05 64 47 02 c0 01 	mov    BYTE PTR ds:0xc0024764,0x1
c0012439:	90                   	nop
c001243a:	83 c4 0c             	add    esp,0xc
c001243d:	c3                   	ret    

c001243e <Keyboard::~Keyboard()>:
c001243e:	83 ec 0c             	sub    esp,0xc
c0012441:	ba 7c 1f 02 c0       	mov    edx,0xc0021f7c
c0012446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001244a:	89 10                	mov    DWORD PTR [eax],edx
c001244c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	50                   	push   eax
c0012454:	e8 bb df ff ff       	call   c0010414 <Device::~Device()>
c0012459:	83 c4 10             	add    esp,0x10
c001245c:	90                   	nop
c001245d:	83 c4 0c             	add    esp,0xc
c0012460:	c3                   	ret    
c0012461:	90                   	nop

c0012462 <Keyboard::~Keyboard()>:
c0012462:	83 ec 0c             	sub    esp,0xc
c0012465:	83 ec 0c             	sub    esp,0xc
c0012468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001246c:	e8 cd ff ff ff       	call   c001243e <Keyboard::~Keyboard()>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	83 ec 08             	sub    esp,0x8
c0012477:	68 5c 01 00 00       	push   0x15c
c001247c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012480:	e8 ae cb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	83 c4 0c             	add    esp,0xc
c001248b:	c3                   	ret    

c001248c <LogicalDisk::close(int, int, void*)>:
c001248c:	83 c8 ff             	or     eax,0xffffffff
c001248f:	c3                   	ret    

c0012490 <LogicalDisk::~LogicalDisk()>:
c0012490:	83 ec 0c             	sub    esp,0xc
c0012493:	ba 2c 20 02 c0       	mov    edx,0xc002202c
c0012498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001249c:	89 10                	mov    DWORD PTR [eax],edx
c001249e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a2:	83 ec 0c             	sub    esp,0xc
c00124a5:	50                   	push   eax
c00124a6:	e8 69 df ff ff       	call   c0010414 <Device::~Device()>
c00124ab:	83 c4 10             	add    esp,0x10
c00124ae:	90                   	nop
c00124af:	83 c4 0c             	add    esp,0xc
c00124b2:	c3                   	ret    
c00124b3:	90                   	nop

c00124b4 <LogicalDisk::~LogicalDisk()>:
c00124b4:	83 ec 0c             	sub    esp,0xc
c00124b7:	83 ec 0c             	sub    esp,0xc
c00124ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124be:	e8 cd ff ff ff       	call   c0012490 <LogicalDisk::~LogicalDisk()>
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	83 ec 08             	sub    esp,0x8
c00124c9:	68 74 01 00 00       	push   0x174
c00124ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d2:	e8 5c cb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	83 c4 0c             	add    esp,0xc
c00124dd:	c3                   	ret    

c00124de <LogicalDisk::open(int, int, void*)>:
c00124de:	83 ec 18             	sub    esp,0x18
c00124e1:	68 a8 1f 02 c0       	push   0xc0021fa8
c00124e6:	e8 9d 34 00 00       	call   c0015988 <Krnl::panic(char const*)>
c00124eb:	83 c8 ff             	or     eax,0xffffffff
c00124ee:	83 c4 1c             	add    esp,0x1c
c00124f1:	c3                   	ret    

c00124f2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00124f2:	53                   	push   ebx
c00124f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124ff:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0012505:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001250b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0012511:	77 10                	ja     c0012523 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0012513:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0012519:	89 d3                	mov    ebx,edx
c001251b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0012521:	72 05                	jb     c0012528 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0012523:	83 c8 ff             	or     eax,0xffffffff
c0012526:	89 c2                	mov    edx,eax
c0012528:	5b                   	pop    ebx
c0012529:	c3                   	ret    

c001252a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001252a:	56                   	push   esi
c001252b:	83 c8 ff             	or     eax,0xffffffff
c001252e:	53                   	push   ebx
c001252f:	89 c2                	mov    edx,eax
c0012531:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012535:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0012539:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001253d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012543:	77 27                	ja     c001256c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012545:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001254b:	89 d8                	mov    eax,ebx
c001254d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0012553:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012558:	89 c2                	mov    edx,eax
c001255a:	73 10                	jae    c001256c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001255c:	89 c8                	mov    eax,ecx
c001255e:	89 da                	mov    edx,ebx
c0012560:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0012566:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001256c:	5b                   	pop    ebx
c001256d:	5e                   	pop    esi
c001256e:	c3                   	ret    
c001256f:	90                   	nop

c0012570 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012570:	83 ec 1c             	sub    esp,0x1c
c0012573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001257b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001257f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012583:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012587:	89 04 24             	mov    DWORD PTR [esp],eax
c001258a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001258e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012596:	83 ec 08             	sub    esp,0x8
c0012599:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001259d:	50                   	push   eax
c001259e:	e8 bb e1 ff ff       	call   c001075e <Device::Device(char const*)>
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	ba 2c 20 02 c0       	mov    edx,0xc002202c
c00125ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125af:	89 10                	mov    DWORD PTR [eax],edx
c00125b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125b5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125c0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00125c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125cb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00125d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00125e7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00125ed:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00125f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00125f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125f8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00125fe:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0012604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012608:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001260c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0012612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012616:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012620:	90                   	nop
c0012621:	83 c4 1c             	add    esp,0x1c
c0012624:	c3                   	ret    
c0012625:	90                   	nop

c0012626 <LogicalDisk::assignDriveLetter()>:
c0012626:	55                   	push   ebp
c0012627:	57                   	push   edi
c0012628:	56                   	push   esi
c0012629:	53                   	push   ebx
c001262a:	83 ec 14             	sub    esp,0x14
c001262d:	8b 3d a0 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024ba0
c0012633:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012637:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001263b:	8b 3d a4 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024ba4
c0012641:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0012647:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001264b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012651:	3c 01                	cmp    al,0x1
c0012653:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0012657:	19 c0                	sbb    eax,eax
c0012659:	83 e0 02             	and    eax,0x2
c001265c:	83 c0 41             	add    eax,0x41
c001265f:	0f be e8             	movsx  ebp,al
c0012662:	3c 43                	cmp    al,0x43
c0012664:	75 10                	jne    c0012676 <LogicalDisk::assignDriveLetter()+0x50>
c0012666:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001266d:	75 5d                	jne    c00126cc <LogicalDisk::assignDriveLetter()+0xa6>
c001266f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0012674:	75 56                	jne    c00126cc <LogicalDisk::assignDriveLetter()+0xa6>
c0012676:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012679:	ba 01 00 00 00       	mov    edx,0x1
c001267e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0012682:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0012686:	d3 e2                	shl    edx,cl
c0012688:	89 d7                	mov    edi,edx
c001268a:	89 d6                	mov    esi,edx
c001268c:	c1 ff 1f             	sar    edi,0x1f
c001268f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0012693:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012697:	21 f9                	and    ecx,edi
c0012699:	09 d1                	or     ecx,edx
c001269b:	75 2f                	jne    c00126cc <LogicalDisk::assignDriveLetter()+0xa6>
c001269d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126a1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00126a5:	09 f2                	or     edx,esi
c00126a7:	89 15 a0 4b 02 c0    	mov    DWORD PTR ds:0xc0024ba0,edx
c00126ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126b1:	09 fa                	or     edx,edi
c00126b3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00126b7:	89 15 a4 4b 02 c0    	mov    DWORD PTR ds:0xc0024ba4,edx
c00126bd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00126c3:	89 1c bd c0 4b 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb440],ebx
c00126ca:	eb 08                	jmp    c00126d4 <LogicalDisk::assignDriveLetter()+0xae>
c00126cc:	40                   	inc    eax
c00126cd:	45                   	inc    ebp
c00126ce:	3c 5b                	cmp    al,0x5b
c00126d0:	75 90                	jne    c0012662 <LogicalDisk::assignDriveLetter()+0x3c>
c00126d2:	31 c0                	xor    eax,eax
c00126d4:	83 c4 14             	add    esp,0x14
c00126d7:	5b                   	pop    ebx
c00126d8:	5e                   	pop    esi
c00126d9:	5f                   	pop    edi
c00126da:	5d                   	pop    ebp
c00126db:	c3                   	ret    

c00126dc <LogicalDisk::mount()>:
c00126dc:	56                   	push   esi
c00126dd:	53                   	push   ebx
c00126de:	51                   	push   ecx
c00126df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00126e3:	8b 1d 28 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024728
c00126e9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00126f3:	85 db                	test   ebx,ebx
c00126f5:	74 50                	je     c0012747 <LogicalDisk::mount()+0x6b>
c00126f7:	e8 64 62 00 00       	call   c0018960 <getIRQNestingLevel()>
c00126fc:	52                   	push   edx
c00126fd:	52                   	push   edx
c00126fe:	50                   	push   eax
c00126ff:	68 cc 1f 02 c0       	push   0xc0021fcc
c0012704:	e8 50 ca ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0012709:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0012710:	83 c4 0c             	add    esp,0xc
c0012713:	83 e8 41             	sub    eax,0x41
c0012716:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012718:	50                   	push   eax
c0012719:	56                   	push   esi
c001271a:	53                   	push   ebx
c001271b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001271e:	83 c4 10             	add    esp,0x10
c0012721:	84 c0                	test   al,al
c0012723:	74 08                	je     c001272d <LogicalDisk::mount()+0x51>
c0012725:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001272b:	eb 1c                	jmp    c0012749 <LogicalDisk::mount()+0x6d>
c001272d:	e8 2e 62 00 00       	call   c0018960 <getIRQNestingLevel()>
c0012732:	51                   	push   ecx
c0012733:	51                   	push   ecx
c0012734:	50                   	push   eax
c0012735:	68 e7 1f 02 c0       	push   0xc0021fe7
c001273a:	e8 1a ca ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001273f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	eb ac                	jmp    c00126f3 <LogicalDisk::mount()+0x17>
c0012747:	31 c0                	xor    eax,eax
c0012749:	5a                   	pop    edx
c001274a:	5b                   	pop    ebx
c001274b:	5e                   	pop    esi
c001274c:	c3                   	ret    
c001274d:	90                   	nop

c001274e <LogicalDisk::unmount()>:
c001274e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012752:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001275c:	c3                   	ret    
c001275d:	90                   	nop

c001275e <LogicalDisk::unassignDriveLetter()>:
c001275e:	57                   	push   edi
c001275f:	56                   	push   esi
c0012760:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012764:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001276b:	84 c9                	test   cl,cl
c001276d:	75 0f                	jne    c001277e <LogicalDisk::unassignDriveLetter()+0x20>
c001276f:	c7 44 24 0c 02 20 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022002
c0012777:	5e                   	pop    esi
c0012778:	5f                   	pop    edi
c0012779:	e9 0a 32 00 00       	jmp    c0015988 <Krnl::panic(char const*)>
c001277e:	83 e9 41             	sub    ecx,0x41
c0012781:	b8 01 00 00 00       	mov    eax,0x1
c0012786:	d3 e0                	shl    eax,cl
c0012788:	89 c7                	mov    edi,eax
c001278a:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012791:	c1 ff 1f             	sar    edi,0x1f
c0012794:	c7 04 8d c0 4b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb440],0x0
c001279f:	89 fe                	mov    esi,edi
c00127a1:	f7 d6                	not    esi
c00127a3:	f7 d0                	not    eax
c00127a5:	21 35 a4 4b 02 c0    	and    DWORD PTR ds:0xc0024ba4,esi
c00127ab:	5e                   	pop    esi
c00127ac:	21 05 a0 4b 02 c0    	and    DWORD PTR ds:0xc0024ba0,eax
c00127b2:	5f                   	pop    edi
c00127b3:	c3                   	ret    

c00127b4 <LogicalDisk::read(unsigned long long, int, void*)>:
c00127b4:	57                   	push   edi
c00127b5:	56                   	push   esi
c00127b6:	53                   	push   ebx
c00127b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00127bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00127bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00127c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00127c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00127cd:	77 41                	ja     c0012810 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00127cf:	99                   	cdq    
c00127d0:	01 c8                	add    eax,ecx
c00127d2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00127d8:	11 da                	adc    edx,ebx
c00127da:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00127e0:	19 d7                	sbb    edi,edx
c00127e2:	72 33                	jb     c0012817 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00127e4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00127ea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00127f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127f4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00127f8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00127fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012804:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012808:	5b                   	pop    ebx
c0012809:	5e                   	pop    esi
c001280a:	5f                   	pop    edi
c001280b:	e9 9a 09 00 00       	jmp    c00131aa <VCache::read(unsigned long long, int, void*)>
c0012810:	b8 05 00 00 00       	mov    eax,0x5
c0012815:	eb 05                	jmp    c001281c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0012817:	b8 07 00 00 00       	mov    eax,0x7
c001281c:	5b                   	pop    ebx
c001281d:	5e                   	pop    esi
c001281e:	5f                   	pop    edi
c001281f:	c3                   	ret    

c0012820 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012820:	57                   	push   edi
c0012821:	56                   	push   esi
c0012822:	53                   	push   ebx
c0012823:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001282b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001282f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012833:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012839:	77 41                	ja     c001287c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001283b:	99                   	cdq    
c001283c:	01 c8                	add    eax,ecx
c001283e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012844:	11 da                	adc    edx,ebx
c0012846:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001284c:	19 d7                	sbb    edi,edx
c001284e:	72 33                	jb     c0012883 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012850:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0012856:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001285c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012860:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012864:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001286a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012874:	5b                   	pop    ebx
c0012875:	5e                   	pop    esi
c0012876:	5f                   	pop    edi
c0012877:	e9 4a 08 00 00       	jmp    c00130c6 <VCache::write(unsigned long long, int, void*)>
c001287c:	b8 05 00 00 00       	mov    eax,0x5
c0012881:	eb 05                	jmp    c0012888 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0012883:	b8 07 00 00 00       	mov    eax,0x7
c0012888:	5b                   	pop    ebx
c0012889:	5e                   	pop    esi
c001288a:	5f                   	pop    edi
c001288b:	c3                   	ret    

c001288c <Mouse::Mouse(char const*)>:
c001288c:	83 ec 0c             	sub    esp,0xc
c001288f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012893:	83 ec 08             	sub    esp,0x8
c0012896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289a:	50                   	push   eax
c001289b:	e8 be de ff ff       	call   c001075e <Device::Device(char const*)>
c00128a0:	83 c4 10             	add    esp,0x10
c00128a3:	ba 58 20 02 c0       	mov    edx,0xc0022058
c00128a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ac:	89 10                	mov    DWORD PTR [eax],edx
c00128ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00128bc:	90                   	nop
c00128bd:	83 c4 0c             	add    esp,0xc
c00128c0:	c3                   	ret    
c00128c1:	90                   	nop

c00128c2 <Mouse::~Mouse()>:
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	ba 58 20 02 c0       	mov    edx,0xc0022058
c00128ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ce:	89 10                	mov    DWORD PTR [eax],edx
c00128d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128d4:	83 ec 0c             	sub    esp,0xc
c00128d7:	50                   	push   eax
c00128d8:	e8 37 db ff ff       	call   c0010414 <Device::~Device()>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	90                   	nop
c00128e1:	83 c4 0c             	add    esp,0xc
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop

c00128e6 <Mouse::~Mouse()>:
c00128e6:	83 ec 0c             	sub    esp,0xc
c00128e9:	83 ec 0c             	sub    esp,0xc
c00128ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128f0:	e8 cd ff ff ff       	call   c00128c2 <Mouse::~Mouse()>
c00128f5:	83 c4 10             	add    esp,0x10
c00128f8:	83 ec 08             	sub    esp,0x8
c00128fb:	68 58 01 00 00       	push   0x158
c0012900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012904:	e8 2a c7 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	83 c4 0c             	add    esp,0xc
c001290f:	c3                   	ret    

c0012910 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012910:	55                   	push   ebp
c0012911:	57                   	push   edi
c0012912:	56                   	push   esi
c0012913:	53                   	push   ebx
c0012914:	81 ec 28 01 00 00    	sub    esp,0x128
c001291a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012921:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0012928:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001292f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001293a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001293e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012945:	e8 06 df ff ff       	call   c0010850 <Device::getName()>
c001294a:	5a                   	pop    edx
c001294b:	59                   	pop    ecx
c001294c:	50                   	push   eax
c001294d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012951:	55                   	push   ebp
c0012952:	e8 02 de fe ff       	call   c0000759 <strcpy>
c0012957:	5b                   	pop    ebx
c0012958:	58                   	pop    eax
c0012959:	68 7c 20 02 c0       	push   0xc002207c
c001295e:	55                   	push   ebp
c001295f:	e8 ac de fe ff       	call   c0000810 <strcat>
c0012964:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001296b:	e8 b4 c6 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012970:	83 c4 0c             	add    esp,0xc
c0012973:	89 c3                	mov    ebx,eax
c0012975:	57                   	push   edi
c0012976:	56                   	push   esi
c0012977:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001297b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001297f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012986:	55                   	push   ebp
c0012987:	50                   	push   eax
c0012988:	e8 e3 fb ff ff       	call   c0012570 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001298d:	83 c4 14             	add    esp,0x14
c0012990:	53                   	push   ebx
c0012991:	e8 90 fc ff ff       	call   c0012626 <LogicalDisk::assignDriveLetter()>
c0012996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012999:	e8 3e fd ff ff       	call   c00126dc <LogicalDisk::mount()>
c001299e:	58                   	pop    eax
c001299f:	5a                   	pop    edx
c00129a0:	53                   	push   ebx
c00129a1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129a8:	e8 c1 db ff ff       	call   c001056e <Device::addChild(Device*)>
c00129ad:	81 c4 2c 01 00 00    	add    esp,0x12c
c00129b3:	5b                   	pop    ebx
c00129b4:	5e                   	pop    esi
c00129b5:	5f                   	pop    edi
c00129b6:	5d                   	pop    ebp
c00129b7:	c3                   	ret    

c00129b8 <createPartitionsForDisk(PhysicalDisk*)>:
c00129b8:	55                   	push   ebp
c00129b9:	57                   	push   edi
c00129ba:	56                   	push   esi
c00129bb:	53                   	push   ebx
c00129bc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00129c2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00129c9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00129cf:	3d 00 02 00 00       	cmp    eax,0x200
c00129d4:	74 27                	je     c00129fd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00129d6:	83 ec 10             	sub    esp,0x10
c00129d9:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00129df:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00129e5:	99                   	cdq    
c00129e6:	52                   	push   edx
c00129e7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00129eb:	50                   	push   eax
c00129ec:	89 fd                	mov    ebp,edi
c00129ee:	c1 e6 0a             	shl    esi,0xa
c00129f1:	55                   	push   ebp
c00129f2:	56                   	push   esi
c00129f3:	e8 14 ca 00 00       	call   c001f40c <__udivdi3>
c00129f8:	e9 b1 00 00 00       	jmp    c0012aae <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00129fd:	83 ec 0c             	sub    esp,0xc
c0012a00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a02:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012a06:	56                   	push   esi
c0012a07:	6a 01                	push   0x1
c0012a09:	6a 00                	push   0x0
c0012a0b:	6a 00                	push   0x0
c0012a0d:	53                   	push   ebx
c0012a0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a11:	83 c4 20             	add    esp,0x20
c0012a14:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012a1c:	75 0a                	jne    c0012a28 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012a1e:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012a26:	74 2c                	je     c0012a54 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012a28:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a2e:	83 ec 10             	sub    esp,0x10
c0012a31:	89 f7                	mov    edi,esi
c0012a33:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a39:	c1 ff 1f             	sar    edi,0x1f
c0012a3c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a42:	57                   	push   edi
c0012a43:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012a47:	c1 e0 0a             	shl    eax,0xa
c0012a4a:	56                   	push   esi
c0012a4b:	52                   	push   edx
c0012a4c:	50                   	push   eax
c0012a4d:	e8 ba c9 00 00       	call   c001f40c <__udivdi3>
c0012a52:	eb 5a                	jmp    c0012aae <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012a54:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012a5b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012a62:	83 e0 7f             	and    eax,0x7f
c0012a65:	83 e1 7f             	and    ecx,0x7f
c0012a68:	01 c1                	add    ecx,eax
c0012a6a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012a71:	83 e0 7f             	and    eax,0x7f
c0012a74:	01 c1                	add    ecx,eax
c0012a76:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012a7d:	83 e0 7f             	and    eax,0x7f
c0012a80:	00 c1                	add    cl,al
c0012a82:	74 41                	je     c0012ac5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012a84:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012a8a:	83 ec 10             	sub    esp,0x10
c0012a8d:	89 f7                	mov    edi,esi
c0012a8f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012a95:	c1 ff 1f             	sar    edi,0x1f
c0012a98:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012a9e:	57                   	push   edi
c0012a9f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012aa3:	c1 e0 0a             	shl    eax,0xa
c0012aa6:	56                   	push   esi
c0012aa7:	52                   	push   edx
c0012aa8:	50                   	push   eax
c0012aa9:	e8 5e c9 00 00       	call   c001f40c <__udivdi3>
c0012aae:	83 c4 14             	add    esp,0x14
c0012ab1:	52                   	push   edx
c0012ab2:	50                   	push   eax
c0012ab3:	6a 00                	push   0x0
c0012ab5:	6a 00                	push   0x0
c0012ab7:	53                   	push   ebx
c0012ab8:	e8 53 fe ff ff       	call   c0012910 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012abd:	83 c4 20             	add    esp,0x20
c0012ac0:	e9 79 01 00 00       	jmp    c0012c3e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012ac5:	89 f0                	mov    eax,esi
c0012ac7:	31 f6                	xor    esi,esi
c0012ac9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012ad0:	75 02                	jne    c0012ad4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012ad2:	89 f1                	mov    ecx,esi
c0012ad4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012adb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012ae2:	c1 e2 08             	shl    edx,0x8
c0012ae5:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012aed:	c1 e7 10             	shl    edi,0x10
c0012af0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012af8:	09 fa                	or     edx,edi
c0012afa:	83 c0 10             	add    eax,0x10
c0012afd:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012b04:	09 fa                	or     edx,edi
c0012b06:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012b0d:	c1 e7 18             	shl    edi,0x18
c0012b10:	09 fa                	or     edx,edi
c0012b12:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012b16:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012b1d:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012b24:	c1 e7 10             	shl    edi,0x10
c0012b27:	c1 e2 08             	shl    edx,0x8
c0012b2a:	09 fa                	or     edx,edi
c0012b2c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012b33:	09 fa                	or     edx,edi
c0012b35:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012b3c:	c1 e7 18             	shl    edi,0x18
c0012b3f:	09 fa                	or     edx,edi
c0012b41:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012b45:	46                   	inc    esi
c0012b46:	83 fe 04             	cmp    esi,0x4
c0012b49:	0f 85 7a ff ff ff    	jne    c0012ac9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b53:	83 f0 01             	xor    eax,0x1
c0012b56:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012b5a:	75 57                	jne    c0012bb3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b60:	83 f0 01             	xor    eax,0x1
c0012b63:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012b67:	75 4a                	jne    c0012bb3 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012b69:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b6f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012b73:	89 f7                	mov    edi,esi
c0012b75:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012b7d:	c1 ff 1f             	sar    edi,0x1f
c0012b80:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b88:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b8e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b94:	57                   	push   edi
c0012b95:	56                   	push   esi
c0012b96:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b9a:	c1 e0 0a             	shl    eax,0xa
c0012b9d:	52                   	push   edx
c0012b9e:	50                   	push   eax
c0012b9f:	e8 68 c8 00 00       	call   c001f40c <__udivdi3>
c0012ba4:	83 c4 10             	add    esp,0x10
c0012ba7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012bab:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012baf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012bb3:	84 c9                	test   cl,cl
c0012bb5:	74 53                	je     c0012c0a <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012bb7:	0f b6 c9             	movzx  ecx,cl
c0012bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bca:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012bce:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012bd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012be2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012be6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012bea:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012bee:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012bf2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012bf6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012bfa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012bfe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c02:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012c06:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012c0a:	31 ed                	xor    ebp,ebp
c0012c0c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012c10:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012c14:	89 f8                	mov    eax,edi
c0012c16:	09 f0                	or     eax,esi
c0012c18:	74 1e                	je     c0012c38 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c1a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012c1e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012c22:	89 d1                	mov    ecx,edx
c0012c24:	09 c1                	or     ecx,eax
c0012c26:	74 10                	je     c0012c38 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	57                   	push   edi
c0012c2c:	56                   	push   esi
c0012c2d:	52                   	push   edx
c0012c2e:	50                   	push   eax
c0012c2f:	53                   	push   ebx
c0012c30:	e8 db fc ff ff       	call   c0012910 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012c35:	83 c4 20             	add    esp,0x20
c0012c38:	45                   	inc    ebp
c0012c39:	83 fd 04             	cmp    ebp,0x4
c0012c3c:	75 ce                	jne    c0012c0c <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012c3e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012c44:	5b                   	pop    ebx
c0012c45:	5e                   	pop    esi
c0012c46:	5f                   	pop    edi
c0012c47:	5d                   	pop    ebp
c0012c48:	c3                   	ret    
c0012c49:	90                   	nop

c0012c4a <Timer::Timer(char const*)>:
c0012c4a:	83 ec 0c             	sub    esp,0xc
c0012c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c51:	83 ec 08             	sub    esp,0x8
c0012c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c58:	50                   	push   eax
c0012c59:	e8 00 db ff ff       	call   c001075e <Device::Device(char const*)>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	ba 90 20 02 c0       	mov    edx,0xc0022090
c0012c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6a:	89 10                	mov    DWORD PTR [eax],edx
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012c7a:	90                   	nop
c0012c7b:	83 c4 0c             	add    esp,0xc
c0012c7e:	c3                   	ret    
c0012c7f:	90                   	nop

c0012c80 <Timer::~Timer()>:
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	ba 90 20 02 c0       	mov    edx,0xc0022090
c0012c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8c:	89 10                	mov    DWORD PTR [eax],edx
c0012c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c92:	83 ec 0c             	sub    esp,0xc
c0012c95:	50                   	push   eax
c0012c96:	e8 79 d7 ff ff       	call   c0010414 <Device::~Device()>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	90                   	nop
c0012c9f:	83 c4 0c             	add    esp,0xc
c0012ca2:	c3                   	ret    
c0012ca3:	90                   	nop

c0012ca4 <Timer::~Timer()>:
c0012ca4:	83 ec 0c             	sub    esp,0xc
c0012ca7:	83 ec 0c             	sub    esp,0xc
c0012caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cae:	e8 cd ff ff ff       	call   c0012c80 <Timer::~Timer()>
c0012cb3:	83 c4 10             	add    esp,0x10
c0012cb6:	83 ec 08             	sub    esp,0x8
c0012cb9:	68 5c 01 00 00       	push   0x15c
c0012cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc2:	e8 6c c3 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	83 c4 0c             	add    esp,0xc
c0012ccd:	c3                   	ret    

c0012cce <Timer::read()>:
c0012cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cd2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012cd8:	c3                   	ret    

c0012cd9 <timerHandler(unsigned long long)>:
c0012cd9:	55                   	push   ebp
c0012cda:	57                   	push   edi
c0012cdb:	56                   	push   esi
c0012cdc:	53                   	push   ebx
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ce4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012ce8:	01 35 30 4c 02 c0    	add    DWORD PTR ds:0xc0024c30,esi
c0012cee:	11 3d 34 4c 02 c0    	adc    DWORD PTR ds:0xc0024c34,edi
c0012cf4:	80 3d cd 45 02 c0 00 	cmp    BYTE PTR ds:0xc00245cd,0x0
c0012cfb:	0f 84 07 01 00 00    	je     c0012e08 <timerHandler(unsigned long long)+0x12f>
c0012d01:	e8 96 5c 00 00       	call   c001899c <lockStuff()>
c0012d06:	83 ec 0c             	sub    esp,0xc
c0012d09:	68 fc 59 02 c0       	push   0xc00259fc
c0012d0e:	e8 cd cd 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d13:	c7 04 24 fc 59 02 c0 	mov    DWORD PTR [esp],0xc00259fc
c0012d1a:	89 c3                	mov    ebx,eax
c0012d1c:	e8 c7 cd 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	84 c0                	test   al,al
c0012d26:	74 60                	je     c0012d88 <timerHandler(unsigned long long)+0xaf>
c0012d28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012d2e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012d31:	85 c0                	test   eax,eax
c0012d33:	0f 85 91 00 00 00    	jne    c0012dca <timerHandler(unsigned long long)+0xf1>
c0012d39:	e9 be 00 00 00       	jmp    c0012dfc <timerHandler(unsigned long long)+0x123>
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	55                   	push   ebp
c0012d42:	e8 52 62 00 00       	call   c0018f99 <unblockTask(ThreadControlBlock*)>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	39 eb                	cmp    ebx,ebp
c0012d4c:	75 12                	jne    c0012d60 <timerHandler(unsigned long long)+0x87>
c0012d4e:	83 ec 0c             	sub    esp,0xc
c0012d51:	68 fc 59 02 c0       	push   0xc00259fc
c0012d56:	e8 85 cd 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d5b:	89 c3                	mov    ebx,eax
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	68 fc 59 02 c0       	push   0xc00259fc
c0012d68:	e8 7b cd 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	84 c0                	test   al,al
c0012d72:	75 b4                	jne    c0012d28 <timerHandler(unsigned long long)+0x4f>
c0012d74:	83 ec 0c             	sub    esp,0xc
c0012d77:	68 fc 59 02 c0       	push   0xc00259fc
c0012d7c:	e8 5f cd 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	39 d8                	cmp    eax,ebx
c0012d86:	74 a0                	je     c0012d28 <timerHandler(unsigned long long)+0x4f>
c0012d88:	83 ec 0c             	sub    esp,0xc
c0012d8b:	68 fc 59 02 c0       	push   0xc00259fc
c0012d90:	e8 4b cd 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012d95:	89 c5                	mov    ebp,eax
c0012d97:	c7 04 24 fc 59 02 c0 	mov    DWORD PTR [esp],0xc00259fc
c0012d9e:	e8 61 cd 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012da3:	83 c4 10             	add    esp,0x10
c0012da6:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012da9:	a1 34 4c 02 c0       	mov    eax,ds:0xc0024c34
c0012dae:	39 15 30 4c 02 c0    	cmp    DWORD PTR ds:0xc0024c30,edx
c0012db4:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012db7:	19 c8                	sbb    eax,ecx
c0012db9:	73 83                	jae    c0012d3e <timerHandler(unsigned long long)+0x65>
c0012dbb:	50                   	push   eax
c0012dbc:	50                   	push   eax
c0012dbd:	55                   	push   ebp
c0012dbe:	68 fc 59 02 c0       	push   0xc00259fc
c0012dc3:	e8 ea cd 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012dc8:	eb 93                	jmp    c0012d5d <timerHandler(unsigned long long)+0x84>
c0012dca:	80 3d cc 45 02 c0 00 	cmp    BYTE PTR ds:0xc00245cc,0x0
c0012dd1:	74 29                	je     c0012dfc <timerHandler(unsigned long long)+0x123>
c0012dd3:	39 c6                	cmp    esi,eax
c0012dd5:	bb 00 00 00 00       	mov    ebx,0x0
c0012dda:	19 df                	sbb    edi,ebx
c0012ddc:	72 19                	jb     c0012df7 <timerHandler(unsigned long long)+0x11e>
c0012dde:	e8 92 5b 00 00       	call   c0018975 <lockScheduler()>
c0012de3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012de8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012deb:	e8 ce 5e 00 00       	call   c0018cbe <schedule()>
c0012df0:	e8 82 5b 00 00       	call   c0018977 <unlockScheduler()>
c0012df5:	eb 05                	jmp    c0012dfc <timerHandler(unsigned long long)+0x123>
c0012df7:	29 f0                	sub    eax,esi
c0012df9:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012dfc:	83 c4 0c             	add    esp,0xc
c0012dff:	5b                   	pop    ebx
c0012e00:	5e                   	pop    esi
c0012e01:	5f                   	pop    edi
c0012e02:	5d                   	pop    ebp
c0012e03:	e9 3b 5f 00 00       	jmp    c0018d43 <unlockStuff()>
c0012e08:	83 c4 0c             	add    esp,0xc
c0012e0b:	5b                   	pop    ebx
c0012e0c:	5e                   	pop    esi
c0012e0d:	5f                   	pop    edi
c0012e0e:	5d                   	pop    ebp
c0012e0f:	c3                   	ret    

c0012e10 <setupTimer(int)>:
c0012e10:	57                   	push   edi
c0012e11:	56                   	push   esi
c0012e12:	53                   	push   ebx
c0012e13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e17:	e8 fd 19 00 00       	call   c0014819 <getCPUNumber()>
c0012e1c:	85 c0                	test   eax,eax
c0012e1e:	74 32                	je     c0012e52 <setupTimer(int)+0x42>
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	68 60 01 00 00       	push   0x160
c0012e28:	e8 f7 c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012e2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e30:	89 c3                	mov    ebx,eax
c0012e32:	e8 63 c0 00 00       	call   c001ee9a <APICTimer::APICTimer()>
c0012e37:	6a 00                	push   0x0
c0012e39:	6a 00                	push   0x0
c0012e3b:	56                   	push   esi
c0012e3c:	53                   	push   ebx
c0012e3d:	e8 52 bf 00 00       	call   c001ed94 <APICTimer::open(int, int, void*)>
c0012e42:	83 c4 20             	add    esp,0x20
c0012e45:	e8 d2 19 00 00       	call   c001481c <thisCPU()>
c0012e4a:	56                   	push   esi
c0012e4b:	56                   	push   esi
c0012e4c:	53                   	push   ebx
c0012e4d:	e9 96 00 00 00       	jmp    c0012ee8 <setupTimer(int)+0xd8>
c0012e52:	e8 c5 19 00 00       	call   c001481c <thisCPU()>
c0012e57:	83 ec 0c             	sub    esp,0xc
c0012e5a:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012e60:	e8 eb d9 ff ff       	call   c0010850 <Device::getName()>
c0012e65:	83 c4 10             	add    esp,0x10
c0012e68:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012e6b:	0f 85 87 00 00 00    	jne    c0012ef8 <setupTimer(int)+0xe8>
c0012e71:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0012e76:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012e7d:	74 79                	je     c0012ef8 <setupTimer(int)+0xe8>
c0012e7f:	83 ec 0c             	sub    esp,0xc
c0012e82:	68 5c 01 00 00       	push   0x15c
c0012e87:	e8 98 c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012e8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e8f:	89 c3                	mov    ebx,eax
c0012e91:	e8 60 c1 00 00       	call   c001eff6 <PIT::PIT()>
c0012e96:	59                   	pop    ecx
c0012e97:	5f                   	pop    edi
c0012e98:	53                   	push   ebx
c0012e99:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c0012e9f:	e8 ca d6 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012ea4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ea6:	6a 00                	push   0x0
c0012ea8:	6a 00                	push   0x0
c0012eaa:	56                   	push   esi
c0012eab:	53                   	push   ebx
c0012eac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012eaf:	83 c4 14             	add    esp,0x14
c0012eb2:	68 60 01 00 00       	push   0x160
c0012eb7:	e8 68 c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012ebc:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ebf:	89 c7                	mov    edi,eax
c0012ec1:	e8 d4 bf 00 00       	call   c001ee9a <APICTimer::APICTimer()>
c0012ec6:	6a 00                	push   0x0
c0012ec8:	6a 00                	push   0x0
c0012eca:	56                   	push   esi
c0012ecb:	57                   	push   edi
c0012ecc:	e8 c3 be 00 00       	call   c001ed94 <APICTimer::open(int, int, void*)>
c0012ed1:	83 c4 20             	add    esp,0x20
c0012ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ed6:	6a 00                	push   0x0
c0012ed8:	6a 00                	push   0x0
c0012eda:	6a 00                	push   0x0
c0012edc:	53                   	push   ebx
c0012edd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012ee0:	e8 37 19 00 00       	call   c001481c <thisCPU()>
c0012ee5:	5a                   	pop    edx
c0012ee6:	59                   	pop    ecx
c0012ee7:	57                   	push   edi
c0012ee8:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012eee:	e8 7b d6 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	eb 33                	jmp    c0012f2b <setupTimer(int)+0x11b>
c0012ef8:	83 ec 0c             	sub    esp,0xc
c0012efb:	68 5c 01 00 00       	push   0x15c
c0012f00:	e8 1f c1 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f08:	89 c3                	mov    ebx,eax
c0012f0a:	e8 e7 c0 00 00       	call   c001eff6 <PIT::PIT()>
c0012f0f:	58                   	pop    eax
c0012f10:	5a                   	pop    edx
c0012f11:	53                   	push   ebx
c0012f12:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c0012f18:	e8 51 d6 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012f1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f1f:	6a 00                	push   0x0
c0012f21:	6a 00                	push   0x0
c0012f23:	56                   	push   esi
c0012f24:	53                   	push   ebx
c0012f25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f28:	83 c4 20             	add    esp,0x20
c0012f2b:	89 d8                	mov    eax,ebx
c0012f2d:	5b                   	pop    ebx
c0012f2e:	5e                   	pop    esi
c0012f2f:	5f                   	pop    edi
c0012f30:	c3                   	ret    
c0012f31:	90                   	nop

c0012f32 <VCache::VCache(PhysicalDisk*)>:
c0012f32:	53                   	push   ebx
c0012f33:	83 ec 08             	sub    esp,0x8
c0012f36:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c0012f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f3f:	89 10                	mov    DWORD PTR [eax],edx
c0012f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f45:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f50:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0012f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012f62:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0012f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012f74:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0012f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0012f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012f8e:	83 ec 0c             	sub    esp,0xc
c0012f91:	6a 10                	push   0x10
c0012f93:	e8 8c c0 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012f98:	83 c4 10             	add    esp,0x10
c0012f9b:	89 c3                	mov    ebx,eax
c0012f9d:	83 ec 0c             	sub    esp,0xc
c0012fa0:	53                   	push   ebx
c0012fa1:	e8 f2 5a 00 00       	call   c0018a98 <Mutex::Mutex()>
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fb8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbf:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012fc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fdb:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012fe7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012feb:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012fee:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff5:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012ff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ffd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013003:	c1 e0 06             	shl    eax,0x6
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	50                   	push   eax
c001300a:	e8 dc 8f ff ff       	call   c000bfeb <malloc>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	89 c2                	mov    edx,eax
c0013014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013018:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001301b:	90                   	nop
c001301c:	83 c4 08             	add    esp,0x8
c001301f:	5b                   	pop    ebx
c0013020:	c3                   	ret    
c0013021:	90                   	nop

c0013022 <VCache::writeWriteBuffer()>:
c0013022:	53                   	push   ebx
c0013023:	83 ec 14             	sub    esp,0x14
c0013026:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001302a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001302d:	8b 10                	mov    edx,DWORD PTR [eax]
c001302f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013032:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013035:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013038:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001303b:	50                   	push   eax
c001303c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001303f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0013046:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001304d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013051:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013058:	83 c4 28             	add    esp,0x28
c001305b:	5b                   	pop    ebx
c001305c:	c3                   	ret    
c001305d:	90                   	nop

c001305e <VCache::~VCache()>:
c001305e:	83 ec 0c             	sub    esp,0xc
c0013061:	ba c0 20 02 c0       	mov    edx,0xc00220c0
c0013066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306a:	89 10                	mov    DWORD PTR [eax],edx
c001306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013070:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0013073:	84 c0                	test   al,al
c0013075:	74 0f                	je     c0013086 <VCache::~VCache()+0x28>
c0013077:	83 ec 0c             	sub    esp,0xc
c001307a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001307e:	e8 9f ff ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001308d:	83 ec 0c             	sub    esp,0xc
c0013090:	50                   	push   eax
c0013091:	e8 65 8f ff ff       	call   c000bffb <free>
c0013096:	83 c4 10             	add    esp,0x10
c0013099:	90                   	nop
c001309a:	83 c4 0c             	add    esp,0xc
c001309d:	c3                   	ret    

c001309e <VCache::~VCache()>:
c001309e:	83 ec 0c             	sub    esp,0xc
c00130a1:	83 ec 0c             	sub    esp,0xc
c00130a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a8:	e8 b1 ff ff ff       	call   c001305e <VCache::~VCache()>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	83 ec 08             	sub    esp,0x8
c00130b3:	6a 30                	push   0x30
c00130b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b9:	e8 75 bf ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00130be:	83 c4 10             	add    esp,0x10
c00130c1:	83 c4 0c             	add    esp,0xc
c00130c4:	c3                   	ret    
c00130c5:	90                   	nop

c00130c6 <VCache::write(unsigned long long, int, void*)>:
c00130c6:	55                   	push   ebp
c00130c7:	57                   	push   edi
c00130c8:	56                   	push   esi
c00130c9:	53                   	push   ebx
c00130ca:	83 ec 28             	sub    esp,0x28
c00130cd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00130d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00130d5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00130d9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00130dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00130e0:	e8 21 5e 00 00       	call   c0018f06 <Semaphore::acquire()>
c00130e5:	83 c4 10             	add    esp,0x10
c00130e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00130ec:	74 66                	je     c0013154 <VCache::write(unsigned long long, int, void*)+0x8e>
c00130ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00130f1:	99                   	cdq    
c00130f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00130f6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00130f9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00130fc:	89 c1                	mov    ecx,eax
c00130fe:	31 f1                	xor    ecx,esi
c0013100:	89 d0                	mov    eax,edx
c0013102:	31 f8                	xor    eax,edi
c0013104:	89 ca                	mov    edx,ecx
c0013106:	09 c2                	or     edx,eax
c0013108:	75 3e                	jne    c0013148 <VCache::write(unsigned long long, int, void*)+0x82>
c001310a:	83 fd 01             	cmp    ebp,0x1
c001310d:	75 39                	jne    c0013148 <VCache::write(unsigned long long, int, void*)+0x82>
c001310f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013112:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013118:	51                   	push   ecx
c0013119:	50                   	push   eax
c001311a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001311e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013122:	0f af c8             	imul   ecx,eax
c0013125:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0013128:	51                   	push   ecx
c0013129:	e8 56 d5 fe ff       	call   c0000684 <memcpy>
c001312e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0013131:	83 c4 10             	add    esp,0x10
c0013134:	40                   	inc    eax
c0013135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0013138:	83 f8 40             	cmp    eax,0x40
c001313b:	75 57                	jne    c0013194 <VCache::write(unsigned long long, int, void*)+0xce>
c001313d:	83 ec 0c             	sub    esp,0xc
c0013140:	53                   	push   ebx
c0013141:	e8 dc fe ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c0013146:	eb 34                	jmp    c001317c <VCache::write(unsigned long long, int, void*)+0xb6>
c0013148:	83 ec 0c             	sub    esp,0xc
c001314b:	53                   	push   ebx
c001314c:	e8 d1 fe ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c0013151:	83 c4 10             	add    esp,0x10
c0013154:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013157:	83 fd 3f             	cmp    ebp,0x3f
c001315a:	7f 25                	jg     c0013181 <VCache::write(unsigned long long, int, void*)+0xbb>
c001315c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001315f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0013162:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0013165:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013169:	52                   	push   edx
c001316a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013170:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013174:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013177:	e8 08 d5 fe ff       	call   c0000684 <memcpy>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	eb 13                	jmp    c0013194 <VCache::write(unsigned long long, int, void*)+0xce>
c0013181:	83 ec 0c             	sub    esp,0xc
c0013184:	8b 10                	mov    edx,DWORD PTR [eax]
c0013186:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001318a:	55                   	push   ebp
c001318b:	57                   	push   edi
c001318c:	56                   	push   esi
c001318d:	50                   	push   eax
c001318e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013191:	83 c4 20             	add    esp,0x20
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001319a:	e8 f3 62 00 00       	call   c0019492 <Semaphore::release()>
c001319f:	83 c4 2c             	add    esp,0x2c
c00131a2:	5b                   	pop    ebx
c00131a3:	31 c0                	xor    eax,eax
c00131a5:	5e                   	pop    esi
c00131a6:	5f                   	pop    edi
c00131a7:	5d                   	pop    ebp
c00131a8:	c3                   	ret    
c00131a9:	90                   	nop

c00131aa <VCache::read(unsigned long long, int, void*)>:
c00131aa:	57                   	push   edi
c00131ab:	56                   	push   esi
c00131ac:	53                   	push   ebx
c00131ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131b9:	83 ec 0c             	sub    esp,0xc
c00131bc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131bf:	e8 42 5d 00 00       	call   c0018f06 <Semaphore::acquire()>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131cb:	74 0c                	je     c00131d9 <VCache::read(unsigned long long, int, void*)+0x2f>
c00131cd:	83 ec 0c             	sub    esp,0xc
c00131d0:	53                   	push   ebx
c00131d1:	e8 4c fe ff ff       	call   c0013022 <VCache::writeWriteBuffer()>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131e9:	57                   	push   edi
c00131ea:	56                   	push   esi
c00131eb:	50                   	push   eax
c00131ec:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00131ef:	83 c4 14             	add    esp,0x14
c00131f2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00131f5:	e8 98 62 00 00       	call   c0019492 <Semaphore::release()>
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	5b                   	pop    ebx
c00131fe:	31 c0                	xor    eax,eax
c0013200:	5e                   	pop    esi
c0013201:	5f                   	pop    edi
c0013202:	c3                   	ret    
c0013203:	90                   	nop

c0013204 <Video::putrect(int, int, int, int, unsigned int)>:
c0013204:	55                   	push   ebp
c0013205:	57                   	push   edi
c0013206:	56                   	push   esi
c0013207:	53                   	push   ebx
c0013208:	83 ec 1c             	sub    esp,0x1c
c001320b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001320f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013213:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013217:	01 e8                	add    eax,ebp
c0013219:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001321d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013225:	01 df                	add    edi,ebx
c0013227:	39 fb                	cmp    ebx,edi
c0013229:	7d 1b                	jge    c0013246 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c001322b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001322f:	7d 12                	jge    c0013243 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0013231:	8b 16                	mov    edx,DWORD PTR [esi]
c0013233:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013237:	53                   	push   ebx
c0013238:	55                   	push   ebp
c0013239:	45                   	inc    ebp
c001323a:	56                   	push   esi
c001323b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001323e:	83 c4 10             	add    esp,0x10
c0013241:	eb e8                	jmp    c001322b <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0013243:	43                   	inc    ebx
c0013244:	eb e1                	jmp    c0013227 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0013246:	83 c4 1c             	add    esp,0x1c
c0013249:	5b                   	pop    ebx
c001324a:	5e                   	pop    esi
c001324b:	5f                   	pop    edi
c001324c:	5d                   	pop    ebp
c001324d:	c3                   	ret    

c001324e <Video::blit(unsigned int*, int, int, int, int)>:
c001324e:	55                   	push   ebp
c001324f:	57                   	push   edi
c0013250:	56                   	push   esi
c0013251:	53                   	push   ebx
c0013252:	83 ec 1c             	sub    esp,0x1c
c0013255:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013259:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001325d:	85 c0                	test   eax,eax
c001325f:	79 02                	jns    c0013263 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013261:	31 c0                	xor    eax,eax
c0013263:	c1 e0 02             	shl    eax,0x2
c0013266:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001326a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001326e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013272:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0013276:	39 d8                	cmp    eax,ebx
c0013278:	7e 49                	jle    c00132c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001327a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013280:	7c 41                	jl     c00132c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013282:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013286:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001328a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001328e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0013292:	39 f9                	cmp    ecx,edi
c0013294:	7e 22                	jle    c00132b8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0013296:	83 c5 04             	add    ebp,0x4
c0013299:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001329f:	7c 14                	jl     c00132b5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00132a1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00132a3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00132a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132ae:	56                   	push   esi
c00132af:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	47                   	inc    edi
c00132b6:	eb d2                	jmp    c001328a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00132b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132bc:	43                   	inc    ebx
c00132bd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00132c1:	eb ab                	jmp    c001326e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00132c3:	83 c4 1c             	add    esp,0x1c
c00132c6:	5b                   	pop    ebx
c00132c7:	5e                   	pop    esi
c00132c8:	5f                   	pop    edi
c00132c9:	5d                   	pop    ebp
c00132ca:	c3                   	ret    
c00132cb:	90                   	nop

c00132cc <Video::clearScreen(unsigned int)>:
c00132cc:	57                   	push   edi
c00132cd:	56                   	push   esi
c00132ce:	53                   	push   ebx
c00132cf:	31 db                	xor    ebx,ebx
c00132d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132d5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00132db:	7e 1f                	jle    c00132fc <Video::clearScreen(unsigned int)+0x30>
c00132dd:	31 ff                	xor    edi,edi
c00132df:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00132e5:	7e 12                	jle    c00132f9 <Video::clearScreen(unsigned int)+0x2d>
c00132e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00132e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132ed:	53                   	push   ebx
c00132ee:	57                   	push   edi
c00132ef:	47                   	inc    edi
c00132f0:	56                   	push   esi
c00132f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	eb e6                	jmp    c00132df <Video::clearScreen(unsigned int)+0x13>
c00132f9:	43                   	inc    ebx
c00132fa:	eb d9                	jmp    c00132d5 <Video::clearScreen(unsigned int)+0x9>
c00132fc:	5b                   	pop    ebx
c00132fd:	5e                   	pop    esi
c00132fe:	5f                   	pop    edi
c00132ff:	c3                   	ret    

c0013300 <Video::putpixel(int, int, unsigned int)>:
c0013300:	c7 44 24 04 c8 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220c8
c0013308:	e9 4c be ff ff       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c001330d:	90                   	nop

c001330e <Video::Video(char const*)>:
c001330e:	83 ec 0c             	sub    esp,0xc
c0013311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013315:	83 ec 08             	sub    esp,0x8
c0013318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001331c:	50                   	push   eax
c001331d:	e8 3c d4 ff ff       	call   c001075e <Device::Device(char const*)>
c0013322:	83 c4 10             	add    esp,0x10
c0013325:	ba e0 20 02 c0       	mov    edx,0xc00220e0
c001332a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332e:	89 10                	mov    DWORD PTR [eax],edx
c0013330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013334:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001333e:	90                   	nop
c001333f:	83 c4 0c             	add    esp,0xc
c0013342:	c3                   	ret    
c0013343:	90                   	nop

c0013344 <Video::~Video()>:
c0013344:	83 ec 0c             	sub    esp,0xc
c0013347:	ba e0 20 02 c0       	mov    edx,0xc00220e0
c001334c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013350:	89 10                	mov    DWORD PTR [eax],edx
c0013352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	50                   	push   eax
c001335a:	e8 b5 d0 ff ff       	call   c0010414 <Device::~Device()>
c001335f:	83 c4 10             	add    esp,0x10
c0013362:	90                   	nop
c0013363:	83 c4 0c             	add    esp,0xc
c0013366:	c3                   	ret    
c0013367:	90                   	nop

c0013368 <Video::~Video()>:
c0013368:	83 ec 0c             	sub    esp,0xc
c001336b:	83 ec 0c             	sub    esp,0xc
c001336e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013372:	e8 cd ff ff ff       	call   c0013344 <Video::~Video()>
c0013377:	83 c4 10             	add    esp,0x10
c001337a:	83 ec 08             	sub    esp,0x8
c001337d:	68 64 01 00 00       	push   0x164
c0013382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013386:	e8 a8 bc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001338b:	83 c4 10             	add    esp,0x10
c001338e:	83 c4 0c             	add    esp,0xc
c0013391:	c3                   	ret    

c0013392 <Video::isMonochrome()>:
c0013392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013396:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001339c:	c3                   	ret    
c001339d:	90                   	nop

c001339e <Video::getWidth()>:
c001339e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00133a8:	c3                   	ret    
c00133a9:	90                   	nop

c00133aa <Video::getHeight()>:
c00133aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00133ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00133b4:	c3                   	ret    
c00133b5:	90                   	nop

c00133b6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00133b6:	55                   	push   ebp
c00133b7:	57                   	push   edi
c00133b8:	56                   	push   esi
c00133b9:	53                   	push   ebx
c00133ba:	83 ec 2c             	sub    esp,0x2c
c00133bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00133c1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00133c5:	83 f8 01             	cmp    eax,0x1
c00133c8:	19 c9                	sbb    ecx,ecx
c00133ca:	31 db                	xor    ebx,ebx
c00133cc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00133d0:	89 cd                	mov    ebp,ecx
c00133d2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00133da:	f7 d5                	not    ebp
c00133dc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00133e2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00133e6:	01 d8                	add    eax,ebx
c00133e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133ec:	56                   	push   esi
c00133ed:	e8 b8 ff ff ff       	call   c00133aa <Video::getHeight()>
c00133f2:	59                   	pop    ecx
c00133f3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00133f7:	7e 70                	jle    c0013469 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00133f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00133fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013401:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0013404:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013408:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001340c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0013413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013417:	89 f8                	mov    eax,edi
c0013419:	83 c0 20             	add    eax,0x20
c001341c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013420:	56                   	push   esi
c0013421:	e8 78 ff ff ff       	call   c001339e <Video::getWidth()>
c0013426:	5a                   	pop    edx
c0013427:	39 c7                	cmp    edi,eax
c0013429:	7d 34                	jge    c001345f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001342b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0013430:	74 05                	je     c0013437 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0013432:	8b 06                	mov    eax,DWORD PTR [esi]
c0013434:	55                   	push   ebp
c0013435:	eb 0d                	jmp    c0013444 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0013437:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001343c:	74 12                	je     c0013450 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001343e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013440:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013444:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013448:	57                   	push   edi
c0013449:	56                   	push   esi
c001344a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	47                   	inc    edi
c0013451:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0013455:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013459:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001345d:	75 c1                	jne    c0013420 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001345f:	43                   	inc    ebx
c0013460:	83 fb 20             	cmp    ebx,0x20
c0013463:	0f 85 79 ff ff ff    	jne    c00133e2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013469:	83 c4 2c             	add    esp,0x2c
c001346c:	5b                   	pop    ebx
c001346d:	5e                   	pop    esi
c001346e:	5f                   	pop    edi
c001346f:	5d                   	pop    ebp
c0013470:	c3                   	ret    
c0013471:	90                   	nop

c0013472 <ACPI::close(int, int, void*)>:
c0013472:	83 ec 1c             	sub    esp,0x1c
c0013475:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001347d:	74 0a                	je     c0013489 <ACPI::close(int, int, void*)+0x17>
c001347f:	b8 00 00 00 00       	mov    eax,0x0
c0013484:	e9 9e 00 00 00       	jmp    c0013527 <ACPI::close(int, int, void*)+0xb5>
c0013489:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001348e:	75 37                	jne    c00134c7 <ACPI::close(int, int, void*)+0x55>
c0013490:	83 ec 0c             	sub    esp,0xc
c0013493:	68 18 21 02 c0       	push   0xc0022118
c0013498:	e8 bc bc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	a1 48 4c 02 c0       	mov    eax,ds:0xc0024c48
c00134a5:	85 c0                	test   eax,eax
c00134a7:	74 07                	je     c00134b0 <ACPI::close(int, int, void*)+0x3e>
c00134a9:	a1 48 4c 02 c0       	mov    eax,ds:0xc0024c48
c00134ae:	ff d0                	call   eax
c00134b0:	83 ec 0c             	sub    esp,0xc
c00134b3:	68 ec 21 02 c0       	push   0xc00221ec
c00134b8:	e8 cb 24 00 00       	call   c0015988 <Krnl::panic(char const*)>
c00134bd:	83 c4 10             	add    esp,0x10
c00134c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00134c5:	eb 60                	jmp    c0013527 <ACPI::close(int, int, void*)+0xb5>
c00134c7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00134cc:	75 54                	jne    c0013522 <ACPI::close(int, int, void*)+0xb0>
c00134ce:	a1 44 4c 02 c0       	mov    eax,ds:0xc0024c44
c00134d3:	85 c0                	test   eax,eax
c00134d5:	74 07                	je     c00134de <ACPI::close(int, int, void*)+0x6c>
c00134d7:	a1 44 4c 02 c0       	mov    eax,ds:0xc0024c44
c00134dc:	ff d0                	call   eax
c00134de:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00134e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134e7:	25 ff 00 00 00       	and    eax,0xff
c00134ec:	83 e0 02             	and    eax,0x2
c00134ef:	74 1c                	je     c001350d <ACPI::close(int, int, void*)+0x9b>
c00134f1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00134f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134fc:	89 c2                	mov    edx,eax
c00134fe:	ec                   	in     al,dx
c00134ff:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0013503:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013507:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001350b:	eb d6                	jmp    c00134e3 <ACPI::close(int, int, void*)+0x71>
c001350d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0013514:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0013519:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001351d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013521:	ee                   	out    dx,al
c0013522:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013527:	83 c4 1c             	add    esp,0x1c
c001352a:	c3                   	ret    

c001352b <findRSDP()>:
c001352b:	83 ec 1c             	sub    esp,0x1c
c001352e:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0013533:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013539:	83 e0 04             	and    eax,0x4
c001353c:	84 c0                	test   al,al
c001353e:	75 07                	jne    c0013547 <findRSDP()+0x1c>
c0013540:	b8 00 00 00 00       	mov    eax,0x0
c0013545:	eb 6a                	jmp    c00135b1 <findRSDP()+0x86>
c0013547:	a1 10 46 02 c0       	mov    eax,ds:0xc0024610
c001354c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013551:	7f 1b                	jg     c001356e <findRSDP()+0x43>
c0013553:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0013558:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001355e:	83 e2 fb             	and    edx,0xfffffffb
c0013561:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013567:	b8 00 00 00 00       	mov    eax,0x0
c001356c:	eb 43                	jmp    c00135b1 <findRSDP()+0x86>
c001356e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0013576:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001357e:	77 2c                	ja     c00135ac <findRSDP()+0x81>
c0013580:	83 ec 04             	sub    esp,0x4
c0013583:	6a 08                	push   0x8
c0013585:	68 25 21 02 c0       	push   0xc0022125
c001358a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001358e:	e8 8e d0 fe ff       	call   c0000621 <memcmp>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	85 c0                	test   eax,eax
c0013598:	0f 94 c0             	sete   al
c001359b:	84 c0                	test   al,al
c001359d:	74 06                	je     c00135a5 <findRSDP()+0x7a>
c001359f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135a3:	eb 0c                	jmp    c00135b1 <findRSDP()+0x86>
c00135a5:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00135aa:	eb ca                	jmp    c0013576 <findRSDP()+0x4b>
c00135ac:	b8 00 00 00 00       	mov    eax,0x0
c00135b1:	83 c4 1c             	add    esp,0x1c
c00135b4:	c3                   	ret    

c00135b5 <loadACPITables(unsigned char*)>:
c00135b5:	56                   	push   esi
c00135b6:	53                   	push   ebx
c00135b7:	83 ec 44             	sub    esp,0x44
c00135ba:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c00135bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135c5:	83 e0 04             	and    eax,0x4
c00135c8:	84 c0                	test   al,al
c00135ca:	0f 84 05 02 00 00    	je     c00137d5 <loadACPITables(unsigned char*)+0x220>
c00135d0:	a0 60 4e 02 c0       	mov    al,ds:0xc0024e60
c00135d5:	84 c0                	test   al,al
c00135d7:	74 75                	je     c001364e <loadACPITables(unsigned char*)+0x99>
c00135d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00135dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00135e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135e8:	83 e8 24             	sub    eax,0x24
c00135eb:	c1 e8 03             	shr    eax,0x3
c00135ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00135f2:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00135fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135fe:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0013602:	0f 8d b2 00 00 00    	jge    c00136ba <loadACPITables(unsigned char*)+0x105>
c0013608:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001360c:	83 c0 24             	add    eax,0x24
c001360f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013613:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013617:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001361b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001361f:	c1 e0 03             	shl    eax,0x3
c0013622:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0013626:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001362a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001362d:	8b 00                	mov    eax,DWORD PTR [eax]
c001362f:	89 c1                	mov    ecx,eax
c0013631:	a1 4c 4c 02 c0       	mov    eax,ds:0xc0024c4c
c0013636:	8d 50 01             	lea    edx,[eax+0x1]
c0013639:	89 15 4c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c4c,edx
c001363f:	89 ca                	mov    edx,ecx
c0013641:	89 14 c5 64 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb39c],edx
c0013648:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001364c:	eb ac                	jmp    c00135fa <loadACPITables(unsigned char*)+0x45>
c001364e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013652:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001365a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001365d:	83 e8 24             	sub    eax,0x24
c0013660:	c1 e8 02             	shr    eax,0x2
c0013663:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013667:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001366f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013673:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0013677:	7d 41                	jge    c00136ba <loadACPITables(unsigned char*)+0x105>
c0013679:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001367d:	83 c0 24             	add    eax,0x24
c0013680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013688:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001368c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013690:	c1 e0 02             	shl    eax,0x2
c0013693:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001369b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001369d:	a1 4c 4c 02 c0       	mov    eax,ds:0xc0024c4c
c00136a2:	8d 50 01             	lea    edx,[eax+0x1]
c00136a5:	89 15 4c 4c 02 c0    	mov    DWORD PTR ds:0xc0024c4c,edx
c00136ab:	89 ca                	mov    edx,ecx
c00136ad:	89 14 c5 64 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb39c],edx
c00136b4:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00136b8:	eb b5                	jmp    c001366f <loadACPITables(unsigned char*)+0xba>
c00136ba:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00136c2:	a1 4c 4c 02 c0       	mov    eax,ds:0xc0024c4c
c00136c7:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00136cb:	0f 8d 05 01 00 00    	jge    c00137d6 <loadACPITables(unsigned char*)+0x221>
c00136d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136d5:	8b 04 c5 64 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb39c]
c00136dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ec:	25 ff 0f 00 00       	and    eax,0xfff
c00136f1:	89 c6                	mov    esi,eax
c00136f3:	e8 d3 ab ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00136f8:	89 c3                	mov    ebx,eax
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	6a 01                	push   0x1
c00136ff:	e8 3a aa ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013704:	83 c4 10             	add    esp,0x10
c0013707:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001370b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013711:	83 ec 0c             	sub    esp,0xc
c0013714:	6a 01                	push   0x1
c0013716:	6a 01                	push   0x1
c0013718:	50                   	push   eax
c0013719:	52                   	push   edx
c001371a:	53                   	push   ebx
c001371b:	e8 dc b3 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013720:	83 c4 20             	add    esp,0x20
c0013723:	09 f0                	or     eax,esi
c0013725:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013729:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001372d:	c1 e0 03             	shl    eax,0x3
c0013730:	05 60 4c 02 c0       	add    eax,0xc0024c60
c0013735:	83 ec 04             	sub    esp,0x4
c0013738:	6a 04                	push   0x4
c001373a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001373e:	50                   	push   eax
c001373f:	e8 40 cf fe ff       	call   c0000684 <memcpy>
c0013744:	83 c4 10             	add    esp,0x10
c0013747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001374e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013752:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013756:	05 00 10 00 00       	add    eax,0x1000
c001375b:	c1 e8 0c             	shr    eax,0xc
c001375e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013766:	89 04 24             	mov    DWORD PTR [esp],eax
c0013769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001376d:	25 ff 0f 00 00       	and    eax,0xfff
c0013772:	89 c6                	mov    esi,eax
c0013774:	e8 52 ab ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0013779:	89 c3                	mov    ebx,eax
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013782:	e8 b7 a9 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001378e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	6a 01                	push   0x1
c0013799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001379d:	50                   	push   eax
c001379e:	52                   	push   edx
c001379f:	53                   	push   ebx
c00137a0:	e8 57 b3 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137a5:	83 c4 20             	add    esp,0x20
c00137a8:	09 f0                	or     eax,esi
c00137aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00137b1:	83 ec 0c             	sub    esp,0xc
c00137b4:	50                   	push   eax
c00137b5:	e8 d1 ac ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c5:	89 14 c5 64 4c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb39c],edx
c00137cc:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00137d0:	e9 ed fe ff ff       	jmp    c00136c2 <loadACPITables(unsigned char*)+0x10d>
c00137d5:	90                   	nop
c00137d6:	83 c4 44             	add    esp,0x44
c00137d9:	5b                   	pop    ebx
c00137da:	5e                   	pop    esi
c00137db:	c3                   	ret    

c00137dc <findRSDT(unsigned char*)>:
c00137dc:	56                   	push   esi
c00137dd:	53                   	push   ebx
c00137de:	83 ec 44             	sub    esp,0x44
c00137e1:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c00137e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00137ec:	83 e0 04             	and    eax,0x4
c00137ef:	84 c0                	test   al,al
c00137f1:	75 0a                	jne    c00137fd <findRSDT(unsigned char*)+0x21>
c00137f3:	b8 00 00 00 00       	mov    eax,0x0
c00137f8:	e9 f7 00 00 00       	jmp    c00138f4 <findRSDT(unsigned char*)+0x118>
c00137fd:	83 ec 04             	sub    esp,0x4
c0013800:	6a 24                	push   0x24
c0013802:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013806:	8d 44 24 18          	lea    eax,[esp+0x18]
c001380a:	50                   	push   eax
c001380b:	e8 74 ce fe ff       	call   c0000684 <memcpy>
c0013810:	83 c4 10             	add    esp,0x10
c0013813:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013817:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001381b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013823:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013827:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001382b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001382f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013833:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001383b:	25 ff 0f 00 00       	and    eax,0xfff
c0013840:	89 c6                	mov    esi,eax
c0013842:	e8 84 aa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0013847:	89 c3                	mov    ebx,eax
c0013849:	83 ec 0c             	sub    esp,0xc
c001384c:	6a 02                	push   0x2
c001384e:	e8 eb a8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013853:	83 c4 10             	add    esp,0x10
c0013856:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001385a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013860:	83 ec 0c             	sub    esp,0xc
c0013863:	6a 01                	push   0x1
c0013865:	6a 02                	push   0x2
c0013867:	50                   	push   eax
c0013868:	52                   	push   edx
c0013869:	53                   	push   ebx
c001386a:	e8 8d b2 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001386f:	83 c4 20             	add    esp,0x20
c0013872:	09 f0                	or     eax,esi
c0013874:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013878:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001387c:	25 ff 0f 00 00       	and    eax,0xfff
c0013881:	89 c6                	mov    esi,eax
c0013883:	e8 43 aa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0013888:	89 c3                	mov    ebx,eax
c001388a:	83 ec 0c             	sub    esp,0xc
c001388d:	6a 02                	push   0x2
c001388f:	e8 aa a8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013894:	83 c4 10             	add    esp,0x10
c0013897:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001389b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00138a1:	83 ec 0c             	sub    esp,0xc
c00138a4:	6a 01                	push   0x1
c00138a6:	6a 02                	push   0x2
c00138a8:	50                   	push   eax
c00138a9:	52                   	push   edx
c00138aa:	53                   	push   ebx
c00138ab:	e8 4c b2 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00138b0:	83 c4 20             	add    esp,0x20
c00138b3:	09 f0                	or     eax,esi
c00138b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138b9:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00138be:	75 11                	jne    c00138d1 <findRSDT(unsigned char*)+0xf5>
c00138c0:	c6 05 60 4e 02 c0 00 	mov    BYTE PTR ds:0xc0024e60,0x0
c00138c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138cb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138cf:	eb 1f                	jmp    c00138f0 <findRSDT(unsigned char*)+0x114>
c00138d1:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00138d6:	75 11                	jne    c00138e9 <findRSDT(unsigned char*)+0x10d>
c00138d8:	c6 05 60 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024e60,0x1
c00138df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138e7:	eb 07                	jmp    c00138f0 <findRSDT(unsigned char*)+0x114>
c00138e9:	b8 00 00 00 00       	mov    eax,0x0
c00138ee:	eb 04                	jmp    c00138f4 <findRSDT(unsigned char*)+0x118>
c00138f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00138f4:	83 c4 44             	add    esp,0x44
c00138f7:	5b                   	pop    ebx
c00138f8:	5e                   	pop    esi
c00138f9:	c3                   	ret    

c00138fa <findDataTable(unsigned char*, char*)>:
c00138fa:	83 ec 1c             	sub    esp,0x1c
c00138fd:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0013902:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013908:	83 e0 04             	and    eax,0x4
c001390b:	84 c0                	test   al,al
c001390d:	75 07                	jne    c0013916 <findDataTable(unsigned char*, char*)+0x1c>
c001390f:	b8 00 00 00 00       	mov    eax,0x0
c0013914:	eb 7c                	jmp    c0013992 <findDataTable(unsigned char*, char*)+0x98>
c0013916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001391e:	a1 4c 4c 02 c0       	mov    eax,ds:0xc0024c4c
c0013923:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013927:	7d 3a                	jge    c0013963 <findDataTable(unsigned char*, char*)+0x69>
c0013929:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001392d:	c1 e0 03             	shl    eax,0x3
c0013930:	05 60 4c 02 c0       	add    eax,0xc0024c60
c0013935:	83 ec 04             	sub    esp,0x4
c0013938:	6a 04                	push   0x4
c001393a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001393e:	50                   	push   eax
c001393f:	e8 dd cc fe ff       	call   c0000621 <memcmp>
c0013944:	83 c4 10             	add    esp,0x10
c0013947:	85 c0                	test   eax,eax
c0013949:	0f 94 c0             	sete   al
c001394c:	84 c0                	test   al,al
c001394e:	74 0d                	je     c001395d <findDataTable(unsigned char*, char*)+0x63>
c0013950:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013954:	8b 04 c5 64 4c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb39c]
c001395b:	eb 35                	jmp    c0013992 <findDataTable(unsigned char*, char*)+0x98>
c001395d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013961:	eb bb                	jmp    c001391e <findDataTable(unsigned char*, char*)+0x24>
c0013963:	a0 60 4e 02 c0       	mov    al,ds:0xc0024e60
c0013968:	84 c0                	test   al,al
c001396a:	74 07                	je     c0013973 <findDataTable(unsigned char*, char*)+0x79>
c001396c:	b8 58 00 00 00       	mov    eax,0x58
c0013971:	eb 05                	jmp    c0013978 <findDataTable(unsigned char*, char*)+0x7e>
c0013973:	b8 52 00 00 00       	mov    eax,0x52
c0013978:	83 ec 04             	sub    esp,0x4
c001397b:	50                   	push   eax
c001397c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013980:	68 10 22 02 c0       	push   0xc0022210
c0013985:	e8 cf b7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001398a:	83 c4 10             	add    esp,0x10
c001398d:	b8 00 00 00 00       	mov    eax,0x0
c0013992:	83 c4 1c             	add    esp,0x1c
c0013995:	c3                   	ret    

c0013996 <scanMADT()>:
c0013996:	83 ec 2c             	sub    esp,0x2c
c0013999:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001399e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139a4:	83 e0 04             	and    eax,0x4
c00139a7:	84 c0                	test   al,al
c00139a9:	0f 84 9a 03 00 00    	je     c0013d49 <scanMADT()+0x3b3>
c00139af:	e8 77 fb ff ff       	call   c001352b <findRSDP()>
c00139b4:	a3 6c 4e 02 c0       	mov    ds:0xc0024e6c,eax
c00139b9:	a1 6c 4e 02 c0       	mov    eax,ds:0xc0024e6c
c00139be:	85 c0                	test   eax,eax
c00139c0:	75 19                	jne    c00139db <scanMADT()+0x45>
c00139c2:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c00139c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00139cd:	83 e2 fb             	and    edx,0xfffffffb
c00139d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00139d6:	e9 72 03 00 00       	jmp    c0013d4d <scanMADT()+0x3b7>
c00139db:	a1 6c 4e 02 c0       	mov    eax,ds:0xc0024e6c
c00139e0:	83 ec 0c             	sub    esp,0xc
c00139e3:	50                   	push   eax
c00139e4:	e8 f3 fd ff ff       	call   c00137dc <findRSDT(unsigned char*)>
c00139e9:	83 c4 10             	add    esp,0x10
c00139ec:	a3 68 4e 02 c0       	mov    ds:0xc0024e68,eax
c00139f1:	a1 68 4e 02 c0       	mov    eax,ds:0xc0024e68
c00139f6:	85 c0                	test   eax,eax
c00139f8:	75 19                	jne    c0013a13 <scanMADT()+0x7d>
c00139fa:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c00139ff:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a05:	83 e2 fb             	and    edx,0xfffffffb
c0013a08:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a0e:	e9 3a 03 00 00       	jmp    c0013d4d <scanMADT()+0x3b7>
c0013a13:	a1 68 4e 02 c0       	mov    eax,ds:0xc0024e68
c0013a18:	83 ec 0c             	sub    esp,0xc
c0013a1b:	50                   	push   eax
c0013a1c:	e8 94 fb ff ff       	call   c00135b5 <loadACPITables(unsigned char*)>
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	a1 68 4e 02 c0       	mov    eax,ds:0xc0024e68
c0013a29:	83 ec 08             	sub    esp,0x8
c0013a2c:	68 2e 21 02 c0       	push   0xc002212e
c0013a31:	50                   	push   eax
c0013a32:	e8 c3 fe ff ff       	call   c00138fa <findDataTable(unsigned char*, char*)>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a3e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013a43:	75 19                	jne    c0013a5e <scanMADT()+0xc8>
c0013a45:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0013a4a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a50:	83 e2 fe             	and    edx,0xfffffffe
c0013a53:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a59:	e9 ef 02 00 00       	jmp    c0013d4d <scanMADT()+0x3b7>
c0013a5e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a6d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013a71:	0f 87 d6 02 00 00    	ja     c0013d4d <scanMADT()+0x3b7>
c0013a77:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013a7f:	0f 87 c8 02 00 00    	ja     c0013d4d <scanMADT()+0x3b7>
c0013a85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a91:	8d 50 01             	lea    edx,[eax+0x1]
c0013a94:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a9c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013aa0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013aa8:	8d 50 01             	lea    edx,[eax+0x1]
c0013aab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013aaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013ab7:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013abb:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013ac0:	0f 86 86 02 00 00    	jbe    c0013d4c <scanMADT()+0x3b6>
c0013ac6:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013acb:	75 5b                	jne    c0013b28 <scanMADT()+0x192>
c0013acd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ad1:	8d 50 01             	lea    edx,[eax+0x1]
c0013ad4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013ad8:	8a 15 a0 4f 02 c0    	mov    dl,BYTE PTR ds:0xc0024fa0
c0013ade:	81 e2 ff 00 00 00    	and    edx,0xff
c0013ae4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ae8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013aec:	88 82 e0 4f 02 c0    	mov    BYTE PTR [edx-0x3ffdb020],al
c0013af2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013af6:	8d 42 01             	lea    eax,[edx+0x1]
c0013af9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013afd:	a0 a0 4f 02 c0       	mov    al,ds:0xc0024fa0
c0013b02:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b05:	88 0d a0 4f 02 c0    	mov    BYTE PTR ds:0xc0024fa0,cl
c0013b0b:	25 ff 00 00 00       	and    eax,0xff
c0013b10:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b14:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013b18:	88 90 c0 4f 02 c0    	mov    BYTE PTR [eax-0x3ffdb040],dl
c0013b1e:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013b23:	e9 0a 02 00 00       	jmp    c0013d32 <scanMADT()+0x39c>
c0013b28:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013b2d:	0f 85 29 01 00 00    	jne    c0013c5c <scanMADT()+0x2c6>
c0013b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b37:	8d 50 01             	lea    edx,[eax+0x1]
c0013b3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b3e:	8a 15 70 4e 02 c0    	mov    dl,BYTE PTR ds:0xc0024e70
c0013b44:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b4a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b4e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013b52:	88 82 80 4e 02 c0    	mov    BYTE PTR [edx-0x3ffdb180],al
c0013b58:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013b5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b64:	01 d0                	add    eax,edx
c0013b66:	83 c0 2c             	add    eax,0x2c
c0013b69:	8a 00                	mov    al,BYTE PTR [eax]
c0013b6b:	31 d2                	xor    edx,edx
c0013b6d:	88 c2                	mov    dl,al
c0013b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b73:	8d 48 01             	lea    ecx,[eax+0x1]
c0013b76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b7a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013b7e:	25 ff 00 00 00       	and    eax,0xff
c0013b83:	c1 e0 08             	shl    eax,0x8
c0013b86:	89 d1                	mov    ecx,edx
c0013b88:	09 c1                	or     ecx,eax
c0013b8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b8e:	8d 50 02             	lea    edx,[eax+0x2]
c0013b91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b95:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013b99:	25 ff 00 00 00       	and    eax,0xff
c0013b9e:	c1 e0 10             	shl    eax,0x10
c0013ba1:	09 c1                	or     ecx,eax
c0013ba3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ba7:	8d 50 03             	lea    edx,[eax+0x3]
c0013baa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013bb2:	25 ff 00 00 00       	and    eax,0xff
c0013bb7:	c1 e0 18             	shl    eax,0x18
c0013bba:	09 c1                	or     ecx,eax
c0013bbc:	89 ca                	mov    edx,ecx
c0013bbe:	a0 70 4e 02 c0       	mov    al,ds:0xc0024e70
c0013bc3:	25 ff 00 00 00       	and    eax,0xff
c0013bc8:	89 14 85 a0 4e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb160],edx
c0013bcf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bdc:	01 d0                	add    eax,edx
c0013bde:	83 c0 2c             	add    eax,0x2c
c0013be1:	8a 00                	mov    al,BYTE PTR [eax]
c0013be3:	31 d2                	xor    edx,edx
c0013be5:	88 c2                	mov    dl,al
c0013be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013beb:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bf2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013bf6:	25 ff 00 00 00       	and    eax,0xff
c0013bfb:	c1 e0 08             	shl    eax,0x8
c0013bfe:	89 d1                	mov    ecx,edx
c0013c00:	09 c1                	or     ecx,eax
c0013c02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c06:	8d 50 02             	lea    edx,[eax+0x2]
c0013c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c0d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c11:	25 ff 00 00 00       	and    eax,0xff
c0013c16:	c1 e0 10             	shl    eax,0x10
c0013c19:	09 c1                	or     ecx,eax
c0013c1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c1f:	8d 50 03             	lea    edx,[eax+0x3]
c0013c22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c2a:	25 ff 00 00 00       	and    eax,0xff
c0013c2f:	c1 e0 18             	shl    eax,0x18
c0013c32:	09 c1                	or     ecx,eax
c0013c34:	89 ca                	mov    edx,ecx
c0013c36:	a0 70 4e 02 c0       	mov    al,ds:0xc0024e70
c0013c3b:	25 ff 00 00 00       	and    eax,0xff
c0013c40:	89 14 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],edx
c0013c47:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c4c:	a0 70 4e 02 c0       	mov    al,ds:0xc0024e70
c0013c51:	40                   	inc    eax
c0013c52:	a2 70 4e 02 c0       	mov    ds:0xc0024e70,al
c0013c57:	e9 d6 00 00 00       	jmp    c0013d32 <scanMADT()+0x39c>
c0013c5c:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013c61:	0f 85 b1 00 00 00    	jne    c0013d18 <scanMADT()+0x382>
c0013c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c6b:	8d 50 01             	lea    edx,[eax+0x1]
c0013c6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c76:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c7a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013c7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c82:	8d 50 01             	lea    edx,[eax+0x1]
c0013c85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013c89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c8d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013c91:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013c95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c9d:	01 d0                	add    eax,edx
c0013c9f:	83 c0 2c             	add    eax,0x2c
c0013ca2:	8a 00                	mov    al,BYTE PTR [eax]
c0013ca4:	31 d2                	xor    edx,edx
c0013ca6:	88 c2                	mov    dl,al
c0013ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cac:	8d 48 01             	lea    ecx,[eax+0x1]
c0013caf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cb7:	25 ff 00 00 00       	and    eax,0xff
c0013cbc:	c1 e0 08             	shl    eax,0x8
c0013cbf:	89 d1                	mov    ecx,edx
c0013cc1:	09 c1                	or     ecx,eax
c0013cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cc7:	8d 50 02             	lea    edx,[eax+0x2]
c0013cca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cd2:	25 ff 00 00 00       	and    eax,0xff
c0013cd7:	c1 e0 10             	shl    eax,0x10
c0013cda:	09 c1                	or     ecx,eax
c0013cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ce0:	8d 50 03             	lea    edx,[eax+0x3]
c0013ce3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ceb:	25 ff 00 00 00       	and    eax,0xff
c0013cf0:	c1 e0 18             	shl    eax,0x18
c0013cf3:	09 c8                	or     eax,ecx
c0013cf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cf9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013cfe:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013d03:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013d07:	25 ff 00 00 00       	and    eax,0xff
c0013d0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d10:	88 90 20 3d 02 c0    	mov    BYTE PTR [eax-0x3ffdc2e0],dl
c0013d16:	eb 1a                	jmp    c0013d32 <scanMADT()+0x39c>
c0013d18:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013d1d:	75 07                	jne    c0013d26 <scanMADT()+0x390>
c0013d1f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d24:	eb 0c                	jmp    c0013d32 <scanMADT()+0x39c>
c0013d26:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013d2b:	75 05                	jne    c0013d32 <scanMADT()+0x39c>
c0013d2d:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013d32:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013d36:	31 d2                	xor    edx,edx
c0013d38:	88 c2                	mov    dl,al
c0013d3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3e:	01 d0                	add    eax,edx
c0013d40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d44:	e9 1d fd ff ff       	jmp    c0013a66 <scanMADT()+0xd0>
c0013d49:	90                   	nop
c0013d4a:	eb 01                	jmp    c0013d4d <scanMADT()+0x3b7>
c0013d4c:	90                   	nop
c0013d4d:	83 c4 2c             	add    esp,0x2c
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <ACPI::ACPI()>:
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d59:	83 ec 08             	sub    esp,0x8
c0013d5c:	68 33 21 02 c0       	push   0xc0022133
c0013d61:	50                   	push   eax
c0013d62:	e8 f7 c9 ff ff       	call   c001075e <Device::Device(char const*)>
c0013d67:	83 c4 10             	add    esp,0x10
c0013d6a:	ba dc 22 02 c0       	mov    edx,0xc00222dc
c0013d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d73:	89 10                	mov    DWORD PTR [eax],edx
c0013d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d84:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013da0:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013da7:	e8 ea fb ff ff       	call   c0013996 <scanMADT()>
c0013dac:	90                   	nop
c0013dad:	83 c4 0c             	add    esp,0xc
c0013db0:	c3                   	ret    
c0013db1:	90                   	nop

c0013db2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013db2:	83 ec 2c             	sub    esp,0x2c
c0013db5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013db9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013dbd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013dc1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013dc5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013dca:	88 d0                	mov    al,dl
c0013dcc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013dd0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013dd5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013ddd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013de1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013de7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013deb:	0f 8d 97 00 00 00    	jge    c0013e88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013df1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013df5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013df9:	83 c2 2a             	add    edx,0x2a
c0013dfc:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013e00:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013e05:	75 78                	jne    c0013e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013e07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e0f:	83 c2 2a             	add    edx,0x2a
c0013e12:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013e16:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013e1a:	75 63                	jne    c0013e7f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013e1c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e21:	74 3a                	je     c0013e5d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013e23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e2b:	83 c2 2a             	add    edx,0x2a
c0013e2e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013e39:	39 c2                	cmp    edx,eax
c0013e3b:	74 10                	je     c0013e4d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013e3d:	83 ec 0c             	sub    esp,0xc
c0013e40:	68 40 22 02 c0       	push   0xc0022240
c0013e45:	e8 3e 1b 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	83 ec 0c             	sub    esp,0xc
c0013e50:	68 38 21 02 c0       	push   0xc0022138
c0013e55:	e8 2e 1b 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e69:	83 c2 2a             	add    edx,0x2a
c0013e6c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013e70:	8b 02                	mov    eax,DWORD PTR [edx]
c0013e72:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013e75:	89 01                	mov    DWORD PTR [ecx],eax
c0013e77:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013e7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013e7f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013e83:	e9 55 ff ff ff       	jmp    c0013ddd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013e88:	90                   	nop
c0013e89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e8d:	83 c4 2c             	add    esp,0x2c
c0013e90:	c2 04 00             	ret    0x4
c0013e93:	90                   	nop

c0013e94 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013e94:	56                   	push   esi
c0013e95:	53                   	push   ebx
c0013e96:	83 ec 14             	sub    esp,0x14
c0013e99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ea1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013ea5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013eaa:	88 c8                	mov    al,cl
c0013eac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013eb0:	88 d0                	mov    al,dl
c0013eb2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eba:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec4:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013eca:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013ece:	31 c9                	xor    ecx,ecx
c0013ed0:	88 c1                	mov    cl,al
c0013ed2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013ed6:	31 d2                	xor    edx,edx
c0013ed8:	88 c2                	mov    dl,al
c0013eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ede:	25 ff ff 00 00       	and    eax,0xffff
c0013ee3:	83 ec 04             	sub    esp,0x4
c0013ee6:	56                   	push   esi
c0013ee7:	53                   	push   ebx
c0013ee8:	51                   	push   ecx
c0013ee9:	52                   	push   edx
c0013eea:	50                   	push   eax
c0013eeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013eef:	68 70 22 02 c0       	push   0xc0022270
c0013ef4:	e8 60 b2 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013ef9:	83 c4 20             	add    esp,0x20
c0013efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f00:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013f11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f19:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f33:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f3d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f44:	83 c2 2a             	add    edx,0x2a
c0013f47:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f4f:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f59:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013f5c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f60:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f68:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f6e:	8d 50 01             	lea    edx,[eax+0x1]
c0013f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f75:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013f85:	3d 00 08 00 00       	cmp    eax,0x800
c0013f8a:	75 10                	jne    c0013f9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	68 47 21 02 c0       	push   0xc0022147
c0013f94:	e8 ef 19 00 00       	call   c0015988 <Krnl::panic(char const*)>
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	90                   	nop
c0013f9d:	83 c4 14             	add    esp,0x14
c0013fa0:	5b                   	pop    ebx
c0013fa1:	5e                   	pop    esi
c0013fa2:	c3                   	ret    
c0013fa3:	90                   	nop

c0013fa4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013fa4:	b8 00 00 00 00       	mov    eax,0x0
c0013fa9:	c3                   	ret    

c0013faa <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013faa:	83 ec 1c             	sub    esp,0x1c
c0013fad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013fb1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013fb4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013fb8:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c0013fbe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013fc2:	25 ff 00 00 00       	and    eax,0xff
c0013fc7:	83 ec 08             	sub    esp,0x8
c0013fca:	50                   	push   eax
c0013fcb:	52                   	push   edx
c0013fcc:	e8 2b 76 ff ff       	call   c000b5fc <Computer::readCMOS(unsigned char)>
c0013fd1:	83 c4 10             	add    esp,0x10
c0013fd4:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013fd8:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c0013fde:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013fe2:	25 ff 00 00 00       	and    eax,0xff
c0013fe7:	83 ec 04             	sub    esp,0x4
c0013fea:	6a 01                	push   0x1
c0013fec:	50                   	push   eax
c0013fed:	52                   	push   edx
c0013fee:	e8 1f 77 ff ff       	call   c000b712 <Computer::writeCMOS(unsigned char, unsigned char)>
c0013ff3:	83 c4 10             	add    esp,0x10
c0013ff6:	90                   	nop
c0013ff7:	83 c4 1c             	add    esp,0x1c
c0013ffa:	c3                   	ret    
c0013ffb:	90                   	nop

c0013ffc <ACPI::open(int, int, void*)>:
c0013ffc:	53                   	push   ebx
c0013ffd:	83 ec 18             	sub    esp,0x18
c0014000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014004:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c001400b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001400f:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0014015:	84 c0                	test   al,al
c0014017:	74 60                	je     c0014079 <ACPI::open(int, int, void*)+0x7d>
c0014019:	83 ec 0c             	sub    esp,0xc
c001401c:	68 58 01 00 00       	push   0x158
c0014021:	e8 fe af ff ff       	call   c000f024 <operator new(unsigned long)>
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	89 c3                	mov    ebx,eax
c001402b:	83 ec 0c             	sub    esp,0xc
c001402e:	53                   	push   ebx
c001402f:	e8 8c 80 00 00       	call   c001c0c0 <PCI::PCI()>
c0014034:	83 c4 10             	add    esp,0x10
c0014037:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001403b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001403f:	83 ec 08             	sub    esp,0x8
c0014042:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014046:	50                   	push   eax
c0014047:	e8 22 c5 ff ff       	call   c001056e <Device::addChild(Device*)>
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014053:	8b 00                	mov    eax,DWORD PTR [eax]
c0014055:	83 c0 08             	add    eax,0x8
c0014058:	8b 00                	mov    eax,DWORD PTR [eax]
c001405a:	6a 00                	push   0x0
c001405c:	6a 00                	push   0x0
c001405e:	6a 00                	push   0x0
c0014060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014064:	ff d0                	call   eax
c0014066:	83 c4 10             	add    esp,0x10
c0014069:	83 ec 0c             	sub    esp,0xc
c001406c:	68 64 21 02 c0       	push   0xc0022164
c0014071:	e8 e3 b0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014076:	83 c4 10             	add    esp,0x10
c0014079:	83 ec 0c             	sub    esp,0xc
c001407c:	68 6f 21 02 c0       	push   0xc002216f
c0014081:	e8 28 38 00 00       	call   c00178ae <Thr::loadKernelSymbolTable(char const*)>
c0014086:	83 c4 10             	add    esp,0x10
c0014089:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c001408f:	83 ec 08             	sub    esp,0x8
c0014092:	6a 01                	push   0x1
c0014094:	68 8d 21 02 c0       	push   0xc002218d
c0014099:	e8 f2 42 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	83 ec 08             	sub    esp,0x8
c00140a4:	53                   	push   ebx
c00140a5:	50                   	push   eax
c00140a6:	e8 ab 44 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c00140b4:	83 ec 08             	sub    esp,0x8
c00140b7:	6a 01                	push   0x1
c00140b9:	68 aa 21 02 c0       	push   0xc00221aa
c00140be:	e8 cd 42 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c00140c3:	83 c4 10             	add    esp,0x10
c00140c6:	83 ec 08             	sub    esp,0x8
c00140c9:	53                   	push   ebx
c00140ca:	50                   	push   eax
c00140cb:	e8 86 44 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c00140d0:	83 c4 10             	add    esp,0x10
c00140d3:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c00140d8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00140de:	83 e0 04             	and    eax,0x4
c00140e1:	84 c0                	test   al,al
c00140e3:	0f 84 cf 00 00 00    	je     c00141b8 <ACPI::open(int, int, void*)+0x1bc>
c00140e9:	83 ec 0c             	sub    esp,0xc
c00140ec:	68 14 01 00 00       	push   0x114
c00140f1:	e8 2e af ff ff       	call   c000f024 <operator new(unsigned long)>
c00140f6:	83 c4 10             	add    esp,0x10
c00140f9:	89 c3                	mov    ebx,eax
c00140fb:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0014100:	83 ec 04             	sub    esp,0x4
c0014103:	50                   	push   eax
c0014104:	68 c7 21 02 c0       	push   0xc00221c7
c0014109:	53                   	push   ebx
c001410a:	e8 81 b5 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014116:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001411b:	74 17                	je     c0014134 <ACPI::open(int, int, void*)+0x138>
c001411d:	83 ec 0c             	sub    esp,0xc
c0014120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014124:	e8 39 b8 ff ff       	call   c000f962 <File::exists()>
c0014129:	83 c4 10             	add    esp,0x10
c001412c:	84 c0                	test   al,al
c001412e:	74 04                	je     c0014134 <ACPI::open(int, int, void*)+0x138>
c0014130:	b0 01                	mov    al,0x1
c0014132:	eb 02                	jmp    c0014136 <ACPI::open(int, int, void*)+0x13a>
c0014134:	b0 00                	mov    al,0x0
c0014136:	84 c0                	test   al,al
c0014138:	74 25                	je     c001415f <ACPI::open(int, int, void*)+0x163>
c001413a:	8b 1d c8 45 02 c0    	mov    ebx,DWORD PTR ds:0xc00245c8
c0014140:	83 ec 08             	sub    esp,0x8
c0014143:	6a 01                	push   0x1
c0014145:	68 c7 21 02 c0       	push   0xc00221c7
c001414a:	e8 41 42 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	83 ec 08             	sub    esp,0x8
c0014155:	53                   	push   ebx
c0014156:	50                   	push   eax
c0014157:	e8 fa 43 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c001415c:	83 c4 10             	add    esp,0x10
c001415f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014164:	74 1e                	je     c0014184 <ACPI::open(int, int, void*)+0x188>
c0014166:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001416b:	74 17                	je     c0014184 <ACPI::open(int, int, void*)+0x188>
c001416d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014171:	8b 00                	mov    eax,DWORD PTR [eax]
c0014173:	83 c0 08             	add    eax,0x8
c0014176:	8b 00                	mov    eax,DWORD PTR [eax]
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001417f:	ff d0                	call   eax
c0014181:	83 c4 10             	add    esp,0x10
c0014184:	a1 68 4e 02 c0       	mov    eax,ds:0xc0024e68
c0014189:	83 ec 08             	sub    esp,0x8
c001418c:	68 e4 21 02 c0       	push   0xc00221e4
c0014191:	50                   	push   eax
c0014192:	e8 63 f7 ff ff       	call   c00138fa <findDataTable(unsigned char*, char*)>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001419e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00141a3:	74 13                	je     c00141b8 <ACPI::open(int, int, void*)+0x1bc>
c00141a5:	83 ec 08             	sub    esp,0x8
c00141a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00141ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141b0:	e8 f5 fd ff ff       	call   c0013faa <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00141b5:	83 c4 10             	add    esp,0x10
c00141b8:	b8 00 00 00 00       	mov    eax,0x0
c00141bd:	83 c4 18             	add    esp,0x18
c00141c0:	5b                   	pop    ebx
c00141c1:	c3                   	ret    

c00141c2 <ACPI::sleep()>:
c00141c2:	83 ec 0c             	sub    esp,0xc
c00141c5:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c00141ca:	85 c0                	test   eax,eax
c00141cc:	74 07                	je     c00141d5 <ACPI::sleep()+0x13>
c00141ce:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c00141d3:	ff d0                	call   eax
c00141d5:	90                   	nop
c00141d6:	83 c4 0c             	add    esp,0xc
c00141d9:	c3                   	ret    

c00141da <CPU::close(int, int, void*)>:
c00141da:	31 c0                	xor    eax,eax
c00141dc:	c3                   	ret    

c00141dd <lookupAMDCPUName(unsigned char, unsigned char)>:
c00141dd:	55                   	push   ebp
c00141de:	57                   	push   edi
c00141df:	56                   	push   esi
c00141e0:	53                   	push   ebx
c00141e1:	51                   	push   ecx
c00141e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141e6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141ea:	89 d6                	mov    esi,edx
c00141ec:	89 cd                	mov    ebp,ecx
c00141ee:	80 fa 04             	cmp    dl,0x4
c00141f1:	75 28                	jne    c001421b <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00141f3:	8d 41 f9             	lea    eax,[ecx-0x7]
c00141f6:	3c 03                	cmp    al,0x3
c00141f8:	0f 86 64 01 00 00    	jbe    c0014362 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00141fe:	80 f9 03             	cmp    cl,0x3
c0014201:	0f 84 5b 01 00 00    	je     c0014362 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0014207:	8d 79 f2             	lea    edi,[ecx-0xe]
c001420a:	b8 f0 3e 02 c0       	mov    eax,0xc0023ef0
c001420f:	89 fb                	mov    ebx,edi
c0014211:	80 fb 01             	cmp    bl,0x1
c0014214:	77 4e                	ja     c0014264 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c0014216:	e9 61 01 00 00       	jmp    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001421b:	80 fa 05             	cmp    dl,0x5
c001421e:	75 4d                	jne    c001426d <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c0014220:	b8 00 3f 02 c0       	mov    eax,0xc0023f00
c0014225:	80 f9 03             	cmp    cl,0x3
c0014228:	0f 86 4e 01 00 00    	jbe    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001422e:	8d 79 fa             	lea    edi,[ecx-0x6]
c0014231:	b8 10 3f 02 c0       	mov    eax,0xc0023f10
c0014236:	89 fb                	mov    ebx,edi
c0014238:	80 fb 01             	cmp    bl,0x1
c001423b:	0f 86 3b 01 00 00    	jbe    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014241:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c0014246:	80 f9 08             	cmp    cl,0x8
c0014249:	0f 84 2d 01 00 00    	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001424f:	89 cf                	mov    edi,ecx
c0014251:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c0014256:	83 e7 fb             	and    edi,0xfffffffb
c0014259:	89 fb                	mov    ebx,edi
c001425b:	80 fb 09             	cmp    bl,0x9
c001425e:	0f 84 18 01 00 00    	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014264:	31 c0                	xor    eax,eax
c0014266:	89 eb                	mov    ebx,ebp
c0014268:	0f b6 fb             	movzx  edi,bl
c001426b:	eb 30                	jmp    c001429d <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c001426d:	31 c0                	xor    eax,eax
c001426f:	80 fa 06             	cmp    dl,0x6
c0014272:	75 f2                	jne    c0014266 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014274:	80 f9 0a             	cmp    cl,0xa
c0014277:	77 ed                	ja     c0014266 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014279:	bf de 05 00 00       	mov    edi,0x5de
c001427e:	0f a3 cf             	bt     edi,ecx
c0014281:	73 e3                	jae    c0014266 <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014283:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014288:	e9 ef 00 00 00       	jmp    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001428d:	39 c7                	cmp    edi,eax
c001428f:	0f 84 d4 00 00 00    	je     c0014369 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0014295:	40                   	inc    eax
c0014296:	3d d0 00 00 00       	cmp    eax,0xd0
c001429b:	74 09                	je     c00142a6 <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c001429d:	89 f3                	mov    ebx,esi
c001429f:	80 fb 0f             	cmp    bl,0xf
c00142a2:	75 f1                	jne    c0014295 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c00142a4:	eb e7                	jmp    c001428d <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c00142a6:	80 fa 10             	cmp    dl,0x10
c00142a9:	75 19                	jne    c00142c4 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c00142ab:	8d 41 fc             	lea    eax,[ecx-0x4]
c00142ae:	83 e0 fb             	and    eax,0xfffffffb
c00142b1:	3c 02                	cmp    al,0x2
c00142b3:	0f 86 b7 00 00 00    	jbe    c0014370 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c00142b9:	80 f9 02             	cmp    cl,0x2
c00142bc:	0f 84 ae 00 00 00    	je     c0014370 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c00142c2:	eb 13                	jmp    c00142d7 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c00142c4:	80 fa 11             	cmp    dl,0x11
c00142c7:	75 0e                	jne    c00142d7 <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c00142c9:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c00142ce:	80 f9 03             	cmp    cl,0x3
c00142d1:	0f 84 a5 00 00 00    	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d7:	80 fa 12             	cmp    dl,0x12
c00142da:	75 0e                	jne    c00142ea <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c00142dc:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c00142e1:	80 f9 01             	cmp    cl,0x1
c00142e4:	0f 84 92 00 00 00    	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142ea:	80 fa 14             	cmp    dl,0x14
c00142ed:	be 01 00 00 00       	mov    esi,0x1
c00142f2:	0f 94 c3             	sete   bl
c00142f5:	80 f9 13             	cmp    cl,0x13
c00142f8:	77 0c                	ja     c0014306 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00142fa:	be 04 00 09 00       	mov    esi,0x90004
c00142ff:	d3 ee                	shr    esi,cl
c0014301:	f7 d6                	not    esi
c0014303:	83 e6 01             	and    esi,0x1
c0014306:	8d 41 ff             	lea    eax,[ecx-0x1]
c0014309:	3c 01                	cmp    al,0x1
c001430b:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c0014310:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c0014315:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c0014319:	75 61                	jne    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001431b:	80 fa 15             	cmp    dl,0x15
c001431e:	75 1f                	jne    c001433f <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c0014320:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c0014325:	80 f9 01             	cmp    cl,0x1
c0014328:	74 52                	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001432a:	89 f3                	mov    ebx,esi
c001432c:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c0014331:	84 db                	test   bl,bl
c0014333:	74 47                	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014335:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c001433a:	80 f9 30             	cmp    cl,0x30
c001433d:	74 3d                	je     c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001433f:	80 fa 16             	cmp    dl,0x16
c0014342:	0f 94 c2             	sete   dl
c0014345:	84 c9                	test   cl,cl
c0014347:	75 09                	jne    c0014352 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014349:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c001434e:	84 d2                	test   dl,dl
c0014350:	75 2a                	jne    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014352:	80 f9 30             	cmp    cl,0x30
c0014355:	75 20                	jne    c0014377 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014357:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c001435c:	84 d2                	test   dl,dl
c001435e:	75 1c                	jne    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014360:	eb 15                	jmp    c0014377 <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0014362:	b8 e0 3e 02 c0       	mov    eax,0xc0023ee0
c0014367:	eb 13                	jmp    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014369:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c001436e:	eb 0c                	jmp    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014370:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014375:	eb 05                	jmp    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014377:	b8 f2 25 02 c0       	mov    eax,0xc00225f2
c001437c:	5a                   	pop    edx
c001437d:	5b                   	pop    ebx
c001437e:	5e                   	pop    esi
c001437f:	5f                   	pop    edi
c0014380:	5d                   	pop    ebp
c0014381:	c3                   	ret    

c0014382 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0014382:	53                   	push   ebx
c0014383:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014387:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001438b:	80 f9 04             	cmp    cl,0x4
c001438e:	75 6a                	jne    c00143fa <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014390:	b8 40 3d 02 c0       	mov    eax,0xc0023d40
c0014395:	80 fa 01             	cmp    dl,0x1
c0014398:	0f 86 9b 02 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001439e:	b8 50 3d 02 c0       	mov    eax,0xc0023d50
c00143a3:	80 fa 02             	cmp    dl,0x2
c00143a6:	0f 84 8d 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143ac:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00143b1:	80 fa 03             	cmp    dl,0x3
c00143b4:	0f 84 7f 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143ba:	b8 70 3d 02 c0       	mov    eax,0xc0023d70
c00143bf:	80 fa 04             	cmp    dl,0x4
c00143c2:	0f 84 71 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143c8:	b8 80 3d 02 c0       	mov    eax,0xc0023d80
c00143cd:	80 fa 05             	cmp    dl,0x5
c00143d0:	0f 84 63 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143d6:	b8 60 3d 02 c0       	mov    eax,0xc0023d60
c00143db:	80 fa 07             	cmp    dl,0x7
c00143de:	0f 84 55 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143e4:	8d 5a f8             	lea    ebx,[edx-0x8]
c00143e7:	b8 90 3d 02 c0       	mov    eax,0xc0023d90
c00143ec:	80 fb 01             	cmp    bl,0x1
c00143ef:	0f 87 e0 01 00 00    	ja     c00145d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00143f5:	e9 3f 02 00 00       	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00143fa:	80 f9 05             	cmp    cl,0x5
c00143fd:	75 3e                	jne    c001443d <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00143ff:	8d 5a ff             	lea    ebx,[edx-0x1]
c0014402:	b8 a0 3d 02 c0       	mov    eax,0xc0023da0
c0014407:	80 fb 02             	cmp    bl,0x2
c001440a:	0f 86 29 02 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014410:	80 fa 04             	cmp    dl,0x4
c0014413:	0f 84 f1 01 00 00    	je     c001460a <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c0014419:	80 fa 07             	cmp    dl,0x7
c001441c:	0f 84 17 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014422:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c0014427:	80 fa 08             	cmp    dl,0x8
c001442a:	0f 84 09 02 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014430:	b8 c0 3d 02 c0       	mov    eax,0xc0023dc0
c0014435:	80 fa 09             	cmp    dl,0x9
c0014438:	e9 96 01 00 00       	jmp    c00145d3 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c001443d:	80 f9 06             	cmp    cl,0x6
c0014440:	0f 85 80 01 00 00    	jne    c00145c6 <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0014446:	b8 d0 3d 02 c0       	mov    eax,0xc0023dd0
c001444b:	80 fa 01             	cmp    dl,0x1
c001444e:	0f 84 e5 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014454:	8d 42 fb             	lea    eax,[edx-0x5]
c0014457:	3c 01                	cmp    al,0x1
c0014459:	0f 86 b2 01 00 00    	jbe    c0014611 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c001445f:	80 fa 03             	cmp    dl,0x3
c0014462:	0f 84 a9 01 00 00    	je     c0014611 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014468:	8d 5a f9             	lea    ebx,[edx-0x7]
c001446b:	b8 f0 3d 02 c0       	mov    eax,0xc0023df0
c0014470:	80 fb 01             	cmp    bl,0x1
c0014473:	0f 86 c0 01 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014479:	80 fa 09             	cmp    dl,0x9
c001447c:	0f 84 96 01 00 00    	je     c0014618 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0014482:	8d 5a f6             	lea    ebx,[edx-0xa]
c0014485:	80 fb 01             	cmp    bl,0x1
c0014488:	0f 86 ab 01 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001448e:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c0014493:	80 fa 0d             	cmp    dl,0xd
c0014496:	0f 84 9d 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001449c:	b8 10 3e 02 c0       	mov    eax,0xc0023e10
c00144a1:	80 fa 0e             	cmp    dl,0xe
c00144a4:	0f 84 8f 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144aa:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144af:	80 fa 0f             	cmp    dl,0xf
c00144b2:	0f 84 81 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b8:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c00144bd:	80 fa 15             	cmp    dl,0x15
c00144c0:	0f 84 73 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c6:	8d 5a ea             	lea    ebx,[edx-0x16]
c00144c9:	b8 20 3e 02 c0       	mov    eax,0xc0023e20
c00144ce:	80 fb 01             	cmp    bl,0x1
c00144d1:	0f 86 62 01 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144d7:	80 fa 1a             	cmp    dl,0x1a
c00144da:	0f 84 3f 01 00 00    	je     c001461f <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c00144e0:	80 fa 1c             	cmp    dl,0x1c
c00144e3:	0f 84 3d 01 00 00    	je     c0014626 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00144e9:	80 fa 1d             	cmp    dl,0x1d
c00144ec:	0f 84 47 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144f2:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c00144f7:	80 fa 25             	cmp    dl,0x25
c00144fa:	0f 84 39 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014500:	8d 5a da             	lea    ebx,[edx-0x26]
c0014503:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c0014508:	80 fb 01             	cmp    bl,0x1
c001450b:	0f 86 28 01 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014511:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c0014516:	80 fa 2a             	cmp    dl,0x2a
c0014519:	0f 84 1a 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001451f:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c0014524:	80 fa 2c             	cmp    dl,0x2c
c0014527:	0f 84 0c 01 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001452d:	b8 60 3e 02 c0       	mov    eax,0xc0023e60
c0014532:	80 fa 2d             	cmp    dl,0x2d
c0014535:	0f 84 fe 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001453b:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c0014540:	80 fa 2e             	cmp    dl,0x2e
c0014543:	0f 84 f0 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014549:	b8 50 3e 02 c0       	mov    eax,0xc0023e50
c001454e:	80 fa 2f             	cmp    dl,0x2f
c0014551:	0f 84 e2 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014557:	8d 5a cb             	lea    ebx,[edx-0x35]
c001455a:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c001455f:	80 fb 01             	cmp    bl,0x1
c0014562:	0f 86 d1 00 00 00    	jbe    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014568:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c001456d:	80 fa 37             	cmp    dl,0x37
c0014570:	0f 84 c3 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014576:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c001457b:	80 fa 3a             	cmp    dl,0x3a
c001457e:	0f 84 b5 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014584:	b8 90 3e 02 c0       	mov    eax,0xc0023e90
c0014589:	80 fa 3c             	cmp    dl,0x3c
c001458c:	0f 84 a7 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014592:	b8 a0 3e 02 c0       	mov    eax,0xc0023ea0
c0014597:	80 fa 3d             	cmp    dl,0x3d
c001459a:	0f 84 99 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145a0:	b8 80 3e 02 c0       	mov    eax,0xc0023e80
c00145a5:	80 fa 3e             	cmp    dl,0x3e
c00145a8:	0f 84 8b 00 00 00    	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ae:	8d 42 bb             	lea    eax,[edx-0x45]
c00145b1:	3c 01                	cmp    al,0x1
c00145b3:	76 78                	jbe    c001462d <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c00145b5:	80 fa 3f             	cmp    dl,0x3f
c00145b8:	74 73                	je     c001462d <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c00145ba:	80 fa 4a             	cmp    dl,0x4a
c00145bd:	74 75                	je     c0014634 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c00145bf:	80 fa 4d             	cmp    dl,0x4d
c00145c2:	75 11                	jne    c00145d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00145c4:	eb 6e                	jmp    c0014634 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c00145c6:	80 f9 0b             	cmp    cl,0xb
c00145c9:	75 0a                	jne    c00145d5 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00145cb:	b8 b0 3e 02 c0       	mov    eax,0xc0023eb0
c00145d0:	80 fa 01             	cmp    dl,0x1
c00145d3:	74 64                	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d5:	80 f9 0f             	cmp    cl,0xf
c00145d8:	b8 c0 3e 02 c0       	mov    eax,0xc0023ec0
c00145dd:	0f 94 c1             	sete   cl
c00145e0:	80 fa 02             	cmp    dl,0x2
c00145e3:	0f 96 c3             	setbe  bl
c00145e6:	84 cb                	test   bl,cl
c00145e8:	75 4f                	jne    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145ea:	8d 42 fd             	lea    eax,[edx-0x3]
c00145ed:	3c 01                	cmp    al,0x1
c00145ef:	0f 96 c0             	setbe  al
c00145f2:	80 fa 06             	cmp    dl,0x6
c00145f5:	0f 94 c2             	sete   dl
c00145f8:	09 c2                	or     edx,eax
c00145fa:	b8 f2 25 02 c0       	mov    eax,0xc00225f2
c00145ff:	84 ca                	test   dl,cl
c0014601:	74 36                	je     c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014603:	b8 d0 3e 02 c0       	mov    eax,0xc0023ed0
c0014608:	eb 2f                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001460a:	b8 b0 3d 02 c0       	mov    eax,0xc0023db0
c001460f:	eb 28                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014611:	b8 e0 3d 02 c0       	mov    eax,0xc0023de0
c0014616:	eb 21                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014618:	b8 00 3e 02 c0       	mov    eax,0xc0023e00
c001461d:	eb 1a                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001461f:	b8 30 3e 02 c0       	mov    eax,0xc0023e30
c0014624:	eb 13                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014626:	b8 40 3e 02 c0       	mov    eax,0xc0023e40
c001462b:	eb 0c                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001462d:	b8 90 3e 02 c0       	mov    eax,0xc0023e90
c0014632:	eb 05                	jmp    c0014639 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014634:	b8 70 3e 02 c0       	mov    eax,0xc0023e70
c0014639:	5b                   	pop    ebx
c001463a:	c3                   	ret    

c001463b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c001463b:	60                   	pusha  
c001463c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014644:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014648:	9c                   	pushf  
c0014649:	fa                   	cli    
c001464a:	0f 09                	wbinvd 
c001464c:	0f 30                	wrmsr  
c001464e:	9d                   	popf   
c001464f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014653:	89 02                	mov    DWORD PTR [edx],eax
c0014655:	61                   	popa   
c0014656:	c3                   	ret    

c0014657 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0014657:	60                   	pusha  
c0014658:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001465c:	9c                   	pushf  
c001465d:	fa                   	cli    
c001465e:	0f 09                	wbinvd 
c0014660:	31 c0                	xor    eax,eax
c0014662:	31 d2                	xor    edx,edx
c0014664:	0f 32                	rdmsr  
c0014666:	9d                   	popf   
c0014667:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001466b:	89 02                	mov    DWORD PTR [edx],eax
c001466d:	61                   	popa   
c001466e:	c3                   	ret    

c001466f <AMD_K6_writeback(int, int, int)>:
c001466f:	56                   	push   esi
c0014670:	53                   	push   ebx
c0014671:	83 ec 10             	sub    esp,0x10
c0014674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014678:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001467d:	75 5d                	jne    c00146dc <AMD_K6_writeback(int, int, int)+0x6d>
c001467f:	83 f8 08             	cmp    eax,0x8
c0014682:	75 09                	jne    c001468d <AMD_K6_writeback(int, int, int)+0x1e>
c0014684:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014689:	7e 13                	jle    c001469e <AMD_K6_writeback(int, int, int)+0x2f>
c001468b:	eb 30                	jmp    c00146bd <AMD_K6_writeback(int, int, int)+0x4e>
c001468d:	83 f8 06             	cmp    eax,0x6
c0014690:	7c 4a                	jl     c00146dc <AMD_K6_writeback(int, int, int)+0x6d>
c0014692:	83 f8 07             	cmp    eax,0x7
c0014695:	7e 07                	jle    c001469e <AMD_K6_writeback(int, int, int)+0x2f>
c0014697:	83 f8 09             	cmp    eax,0x9
c001469a:	74 21                	je     c00146bd <AMD_K6_writeback(int, int, int)+0x4e>
c001469c:	eb 3e                	jmp    c00146dc <AMD_K6_writeback(int, int, int)+0x6d>
c001469e:	89 e6                	mov    esi,esp
c00146a0:	8b 1d 04 46 02 c0    	mov    ebx,DWORD PTR ds:0xc0024604
c00146a6:	c1 eb 15             	shr    ebx,0x15
c00146a9:	56                   	push   esi
c00146aa:	68 82 00 00 c0       	push   0xc0000082
c00146af:	e8 a3 ff ff ff       	call   c0014657 <AMD_K6_read_msr(unsigned int, REGS*)>
c00146b4:	56                   	push   esi
c00146b5:	83 e3 7e             	and    ebx,0x7e
c00146b8:	6a 00                	push   0x0
c00146ba:	53                   	push   ebx
c00146bb:	eb 12                	jmp    c00146cf <AMD_K6_writeback(int, int, int)+0x60>
c00146bd:	89 e3                	mov    ebx,esp
c00146bf:	53                   	push   ebx
c00146c0:	68 82 00 00 c0       	push   0xc0000082
c00146c5:	e8 8d ff ff ff       	call   c0014657 <AMD_K6_read_msr(unsigned int, REGS*)>
c00146ca:	53                   	push   ebx
c00146cb:	6a 00                	push   0x0
c00146cd:	6a 00                	push   0x0
c00146cf:	68 82 00 00 c0       	push   0xc0000082
c00146d4:	e8 62 ff ff ff       	call   c001463b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00146d9:	83 c4 18             	add    esp,0x18
c00146dc:	83 c4 10             	add    esp,0x10
c00146df:	5b                   	pop    ebx
c00146e0:	5e                   	pop    esi
c00146e1:	c3                   	ret    

c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00146e2:	55                   	push   ebp
c00146e3:	57                   	push   edi
c00146e4:	56                   	push   esi
c00146e5:	53                   	push   ebx
c00146e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00146ee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00146f2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00146f6:	39 05 e0 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fe0,eax
c00146fc:	75 23                	jne    c0014721 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00146fe:	a1 0c 50 02 c0       	mov    eax,ds:0xc002500c
c0014703:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014707:	89 06                	mov    DWORD PTR [esi],eax
c0014709:	a1 08 50 02 c0       	mov    eax,ds:0xc0025008
c001470e:	89 07                	mov    DWORD PTR [edi],eax
c0014710:	a1 04 50 02 c0       	mov    eax,ds:0xc0025004
c0014715:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014718:	a1 00 50 02 c0       	mov    eax,ds:0xc0025000
c001471d:	89 02                	mov    DWORD PTR [edx],eax
c001471f:	eb 3f                	jmp    c0014760 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0014721:	31 c9                	xor    ecx,ecx
c0014723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014727:	0f a2                	cpuid  
c0014729:	89 06                	mov    DWORD PTR [esi],eax
c001472b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001472f:	89 1f                	mov    DWORD PTR [edi],ebx
c0014731:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014734:	89 10                	mov    DWORD PTR [eax],edx
c0014736:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001473a:	a3 e0 3f 02 c0       	mov    ds:0xc0023fe0,eax
c001473f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014741:	a3 0c 50 02 c0       	mov    ds:0xc002500c,eax
c0014746:	8b 07                	mov    eax,DWORD PTR [edi]
c0014748:	a3 08 50 02 c0       	mov    ds:0xc0025008,eax
c001474d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014750:	a3 04 50 02 c0       	mov    ds:0xc0025004,eax
c0014755:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014759:	8b 00                	mov    eax,DWORD PTR [eax]
c001475b:	a3 00 50 02 c0       	mov    ds:0xc0025000,eax
c0014760:	5b                   	pop    ebx
c0014761:	5e                   	pop    esi
c0014762:	5f                   	pop    edi
c0014763:	5d                   	pop    ebp
c0014764:	c3                   	ret    

c0014765 <cpuidCheckEDX(unsigned int)>:
c0014765:	83 ec 10             	sub    esp,0x10
c0014768:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001476c:	50                   	push   eax
c001476d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014771:	50                   	push   eax
c0014772:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014776:	50                   	push   eax
c0014777:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001477b:	50                   	push   eax
c001477c:	6a 01                	push   0x1
c001477e:	e8 5f ff ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014783:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014787:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001478b:	0f 95 c0             	setne  al
c001478e:	83 c4 24             	add    esp,0x24
c0014791:	c3                   	ret    

c0014792 <cpuidCheckECX(unsigned int)>:
c0014792:	83 ec 10             	sub    esp,0x10
c0014795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014799:	50                   	push   eax
c001479a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001479e:	50                   	push   eax
c001479f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147a3:	50                   	push   eax
c00147a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147a8:	50                   	push   eax
c00147a9:	6a 01                	push   0x1
c00147ab:	e8 32 ff ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00147b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00147b8:	0f 95 c0             	setne  al
c00147bb:	83 c4 24             	add    esp,0x24
c00147be:	c3                   	ret    

c00147bf <cpuidCheckExtendedEBX(unsigned int)>:
c00147bf:	83 ec 10             	sub    esp,0x10
c00147c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147c6:	50                   	push   eax
c00147c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147cb:	50                   	push   eax
c00147cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147d0:	50                   	push   eax
c00147d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147d5:	50                   	push   eax
c00147d6:	6a 07                	push   0x7
c00147d8:	e8 05 ff ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00147dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00147e1:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00147e5:	0f 95 c0             	setne  al
c00147e8:	83 c4 24             	add    esp,0x24
c00147eb:	c3                   	ret    

c00147ec <cpuidCheckExtendedECX(unsigned int)>:
c00147ec:	83 ec 10             	sub    esp,0x10
c00147ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147f3:	50                   	push   eax
c00147f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147f8:	50                   	push   eax
c00147f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00147fd:	50                   	push   eax
c00147fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014802:	50                   	push   eax
c0014803:	6a 07                	push   0x7
c0014805:	e8 d8 fe ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001480a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001480e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014812:	0f 95 c0             	setne  al
c0014815:	83 c4 24             	add    esp,0x24
c0014818:	c3                   	ret    

c0014819 <getCPUNumber()>:
c0014819:	31 c0                	xor    eax,eax
c001481b:	c3                   	ret    

c001481c <thisCPU()>:
c001481c:	e8 f8 ff ff ff       	call   c0014819 <getCPUNumber()>
c0014821:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c0014827:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001482e:	c3                   	ret    
c001482f:	90                   	nop

c0014830 <CPU::CPU()>:
c0014830:	83 ec 0c             	sub    esp,0xc
c0014833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014837:	83 ec 08             	sub    esp,0x8
c001483a:	68 f2 25 02 c0       	push   0xc00225f2
c001483f:	50                   	push   eax
c0014840:	e8 19 bf ff ff       	call   c001075e <Device::Device(char const*)>
c0014845:	83 c4 10             	add    esp,0x10
c0014848:	ba cc 26 02 c0       	mov    edx,0xc00226cc
c001484d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014851:	89 10                	mov    DWORD PTR [eax],edx
c0014853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014857:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014865:	05 78 01 00 00       	add    eax,0x178
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	50                   	push   eax
c001486e:	e8 89 6f ff ff       	call   c000b7fc <GDT::GDT()>
c0014873:	83 c4 10             	add    esp,0x10
c0014876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001487a:	05 7c 09 00 00       	add    eax,0x97c
c001487f:	83 ec 0c             	sub    esp,0xc
c0014882:	50                   	push   eax
c0014883:	e8 d4 71 ff ff       	call   c000ba5c <IDT::IDT()>
c0014888:	83 c4 10             	add    esp,0x10
c001488b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488f:	05 7c 11 00 00       	add    eax,0x117c
c0014894:	83 ec 0c             	sub    esp,0xc
c0014897:	50                   	push   eax
c0014898:	e8 31 92 ff ff       	call   c000dace <TSS::TSS()>
c001489d:	83 c4 10             	add    esp,0x10
c00148a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a4:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00148ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148af:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00148b9:	90                   	nop
c00148ba:	83 c4 0c             	add    esp,0xc
c00148bd:	c3                   	ret    

c00148be <CPU::displayFeatures()>:
c00148be:	53                   	push   ebx
c00148bf:	83 ec 10             	sub    esp,0x10
c00148c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00148c6:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00148cc:	68 00 23 02 c0       	push   0xc0022300
c00148d1:	e8 83 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00148d6:	59                   	pop    ecx
c00148d7:	58                   	pop    eax
c00148d8:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00148de:	50                   	push   eax
c00148df:	68 11 23 02 c0       	push   0xc0022311
c00148e4:	e8 70 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00148e9:	58                   	pop    eax
c00148ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00148f0:	c1 e8 0e             	shr    eax,0xe
c00148f3:	5a                   	pop    edx
c00148f4:	0f b6 c0             	movzx  eax,al
c00148f7:	50                   	push   eax
c00148f8:	68 22 23 02 c0       	push   0xc0022322
c00148fd:	e8 57 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014902:	59                   	pop    ecx
c0014903:	58                   	pop    eax
c0014904:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001490a:	66 c1 e8 06          	shr    ax,0x6
c001490e:	0f b6 c0             	movzx  eax,al
c0014911:	50                   	push   eax
c0014912:	68 33 23 02 c0       	push   0xc0022333
c0014917:	e8 3d a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001491c:	c7 04 24 46 27 02 c0 	mov    DWORD PTR [esp],0xc0022746
c0014923:	e8 31 a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014928:	83 c4 10             	add    esp,0x10
c001492b:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014930:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0014937:	74 05                	je     c001493e <CPU::displayFeatures()+0x80>
c0014939:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c001493e:	52                   	push   edx
c001493f:	52                   	push   edx
c0014940:	50                   	push   eax
c0014941:	68 44 23 02 c0       	push   0xc0022344
c0014946:	e8 0e a8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001494b:	83 c4 10             	add    esp,0x10
c001494e:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014953:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001495a:	78 05                	js     c0014961 <CPU::displayFeatures()+0xa3>
c001495c:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014961:	51                   	push   ecx
c0014962:	51                   	push   ecx
c0014963:	50                   	push   eax
c0014964:	68 5b 23 02 c0       	push   0xc002235b
c0014969:	e8 eb a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001496e:	83 c4 10             	add    esp,0x10
c0014971:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014976:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001497d:	75 05                	jne    c0014984 <CPU::displayFeatures()+0xc6>
c001497f:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014984:	52                   	push   edx
c0014985:	52                   	push   edx
c0014986:	50                   	push   eax
c0014987:	68 72 23 02 c0       	push   0xc0022372
c001498c:	e8 c8 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014991:	83 c4 10             	add    esp,0x10
c0014994:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014999:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00149a0:	75 05                	jne    c00149a7 <CPU::displayFeatures()+0xe9>
c00149a2:	b8 12 10 02 c0       	mov    eax,0xc0021012
c00149a7:	51                   	push   ecx
c00149a8:	51                   	push   ecx
c00149a9:	50                   	push   eax
c00149aa:	68 89 23 02 c0       	push   0xc0022389
c00149af:	e8 a5 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00149b4:	83 c4 10             	add    esp,0x10
c00149b7:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c00149bc:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00149c3:	75 05                	jne    c00149ca <CPU::displayFeatures()+0x10c>
c00149c5:	b8 12 10 02 c0       	mov    eax,0xc0021012
c00149ca:	52                   	push   edx
c00149cb:	52                   	push   edx
c00149cc:	50                   	push   eax
c00149cd:	68 a0 23 02 c0       	push   0xc00223a0
c00149d2:	e8 82 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c00149df:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00149e6:	75 05                	jne    c00149ed <CPU::displayFeatures()+0x12f>
c00149e8:	b8 12 10 02 c0       	mov    eax,0xc0021012
c00149ed:	51                   	push   ecx
c00149ee:	51                   	push   ecx
c00149ef:	50                   	push   eax
c00149f0:	68 b7 23 02 c0       	push   0xc00223b7
c00149f5:	e8 5f a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014a02:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014a09:	75 05                	jne    c0014a10 <CPU::displayFeatures()+0x152>
c0014a0b:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014a10:	52                   	push   edx
c0014a11:	52                   	push   edx
c0014a12:	50                   	push   eax
c0014a13:	68 ce 23 02 c0       	push   0xc00223ce
c0014a18:	e8 3c a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014a25:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014a2c:	75 05                	jne    c0014a33 <CPU::displayFeatures()+0x175>
c0014a2e:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014a33:	51                   	push   ecx
c0014a34:	51                   	push   ecx
c0014a35:	50                   	push   eax
c0014a36:	68 e5 23 02 c0       	push   0xc00223e5
c0014a3b:	e8 19 a7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a40:	83 c4 10             	add    esp,0x10
c0014a43:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014a48:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014a4f:	75 05                	jne    c0014a56 <CPU::displayFeatures()+0x198>
c0014a51:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014a56:	52                   	push   edx
c0014a57:	52                   	push   edx
c0014a58:	50                   	push   eax
c0014a59:	68 fc 23 02 c0       	push   0xc00223fc
c0014a5e:	e8 f6 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a63:	83 c4 10             	add    esp,0x10
c0014a66:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014a6b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014a72:	75 05                	jne    c0014a79 <CPU::displayFeatures()+0x1bb>
c0014a74:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014a79:	51                   	push   ecx
c0014a7a:	51                   	push   ecx
c0014a7b:	50                   	push   eax
c0014a7c:	68 13 24 02 c0       	push   0xc0022413
c0014a81:	e8 d3 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014a86:	83 c4 10             	add    esp,0x10
c0014a89:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014a8e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014a95:	75 05                	jne    c0014a9c <CPU::displayFeatures()+0x1de>
c0014a97:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014a9c:	52                   	push   edx
c0014a9d:	52                   	push   edx
c0014a9e:	50                   	push   eax
c0014a9f:	68 2a 24 02 c0       	push   0xc002242a
c0014aa4:	e8 b0 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014ab1:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014ab8:	75 05                	jne    c0014abf <CPU::displayFeatures()+0x201>
c0014aba:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014abf:	51                   	push   ecx
c0014ac0:	51                   	push   ecx
c0014ac1:	50                   	push   eax
c0014ac2:	68 41 24 02 c0       	push   0xc0022441
c0014ac7:	e8 8d a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014acc:	83 c4 10             	add    esp,0x10
c0014acf:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014ad4:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014adb:	75 05                	jne    c0014ae2 <CPU::displayFeatures()+0x224>
c0014add:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014ae2:	52                   	push   edx
c0014ae3:	52                   	push   edx
c0014ae4:	50                   	push   eax
c0014ae5:	68 58 24 02 c0       	push   0xc0022458
c0014aea:	e8 6a a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014aef:	83 c4 10             	add    esp,0x10
c0014af2:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014af7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014afe:	78 05                	js     c0014b05 <CPU::displayFeatures()+0x247>
c0014b00:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014b05:	51                   	push   ecx
c0014b06:	51                   	push   ecx
c0014b07:	50                   	push   eax
c0014b08:	68 6f 24 02 c0       	push   0xc002246f
c0014b0d:	e8 47 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	b8 0e 10 02 c0       	mov    eax,0xc002100e
c0014b1a:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014b21:	75 05                	jne    c0014b28 <CPU::displayFeatures()+0x26a>
c0014b23:	b8 12 10 02 c0       	mov    eax,0xc0021012
c0014b28:	52                   	push   edx
c0014b29:	52                   	push   edx
c0014b2a:	50                   	push   eax
c0014b2b:	68 86 24 02 c0       	push   0xc0022486
c0014b30:	e8 24 a6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014b35:	83 c4 18             	add    esp,0x18
c0014b38:	5b                   	pop    ebx
c0014b39:	c3                   	ret    

c0014b3a <CPU::detectFeatures()>:
c0014b3a:	55                   	push   ebp
c0014b3b:	57                   	push   edi
c0014b3c:	56                   	push   esi
c0014b3d:	53                   	push   ebx
c0014b3e:	83 ec 50             	sub    esp,0x50
c0014b41:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014b45:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014b4f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014b56:	6a 0d                	push   0xd
c0014b58:	6a 00                	push   0x0
c0014b5a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014b60:	57                   	push   edi
c0014b61:	e8 54 bb fe ff       	call   c00006ba <memset>
c0014b66:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0014b6b:	83 c4 10             	add    esp,0x10
c0014b6e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014b75:	0f 84 04 09 00 00    	je     c001547f <CPU::detectFeatures()+0x945>
c0014b7b:	83 ec 0c             	sub    esp,0xc
c0014b7e:	6a 10                	push   0x10
c0014b80:	e8 e0 fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014b85:	83 e0 01             	and    eax,0x1
c0014b88:	8d 14 00             	lea    edx,[eax+eax*1]
c0014b8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014b91:	83 e0 fd             	and    eax,0xfffffffd
c0014b94:	09 d0                	or     eax,edx
c0014b96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014b9c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014ba3:	e8 bd fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014ba8:	83 e0 01             	and    eax,0x1
c0014bab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014bb2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bb8:	83 e0 fb             	and    eax,0xfffffffb
c0014bbb:	09 d0                	or     eax,edx
c0014bbd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bc3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014bca:	e8 96 fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014bcf:	83 e0 01             	and    eax,0x1
c0014bd2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014bd9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014bdf:	83 e0 f7             	and    eax,0xfffffff7
c0014be2:	09 d0                	or     eax,edx
c0014be4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014bea:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014bf1:	e8 6f fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014bf6:	83 e0 01             	and    eax,0x1
c0014bf9:	c1 e0 04             	shl    eax,0x4
c0014bfc:	88 c2                	mov    dl,al
c0014bfe:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c04:	83 e0 ef             	and    eax,0xffffffef
c0014c07:	09 d0                	or     eax,edx
c0014c09:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c0f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014c16:	e8 4a fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014c1b:	83 e0 01             	and    eax,0x1
c0014c1e:	c1 e0 05             	shl    eax,0x5
c0014c21:	88 c2                	mov    dl,al
c0014c23:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c29:	83 e0 df             	and    eax,0xffffffdf
c0014c2c:	09 d0                	or     eax,edx
c0014c2e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c34:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014c3b:	e8 25 fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014c40:	83 e0 01             	and    eax,0x1
c0014c43:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014c4c:	83 e0 fd             	and    eax,0xfffffffd
c0014c4f:	09 d0                	or     eax,edx
c0014c51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014c57:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014c5e:	e8 02 fb ff ff       	call   c0014765 <cpuidCheckEDX(unsigned int)>
c0014c63:	83 e0 01             	and    eax,0x1
c0014c66:	c1 e0 06             	shl    eax,0x6
c0014c69:	88 c2                	mov    dl,al
c0014c6b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014c71:	83 e0 bf             	and    eax,0xffffffbf
c0014c74:	09 d0                	or     eax,edx
c0014c76:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014c7c:	58                   	pop    eax
c0014c7d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014c81:	56                   	push   esi
c0014c82:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014c86:	55                   	push   ebp
c0014c87:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014c8b:	50                   	push   eax
c0014c8c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014c90:	52                   	push   edx
c0014c91:	6a 00                	push   0x0
c0014c93:	e8 4a fa ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014c98:	83 c4 1c             	add    esp,0x1c
c0014c9b:	6a 04                	push   0x4
c0014c9d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014ca1:	50                   	push   eax
c0014ca2:	57                   	push   edi
c0014ca3:	e8 dc b9 fe ff       	call   c0000684 <memcpy>
c0014ca8:	83 c4 0c             	add    esp,0xc
c0014cab:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014cb1:	6a 04                	push   0x4
c0014cb3:	56                   	push   esi
c0014cb4:	50                   	push   eax
c0014cb5:	e8 ca b9 fe ff       	call   c0000684 <memcpy>
c0014cba:	83 c4 0c             	add    esp,0xc
c0014cbd:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014cc3:	6a 04                	push   0x4
c0014cc5:	55                   	push   ebp
c0014cc6:	50                   	push   eax
c0014cc7:	e8 b8 b9 fe ff       	call   c0000684 <memcpy>
c0014ccc:	58                   	pop    eax
c0014ccd:	5a                   	pop    edx
c0014cce:	68 9d 24 02 c0       	push   0xc002249d
c0014cd3:	57                   	push   edi
c0014cd4:	e8 d1 ba fe ff       	call   c00007aa <strcmp>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	85 c0                	test   eax,eax
c0014cde:	75 0f                	jne    c0014cef <CPU::detectFeatures()+0x1b5>
c0014ce0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014cea:	e9 22 02 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014cef:	50                   	push   eax
c0014cf0:	50                   	push   eax
c0014cf1:	68 aa 24 02 c0       	push   0xc00224aa
c0014cf6:	57                   	push   edi
c0014cf7:	e8 ae ba fe ff       	call   c00007aa <strcmp>
c0014cfc:	83 c4 10             	add    esp,0x10
c0014cff:	85 c0                	test   eax,eax
c0014d01:	74 dd                	je     c0014ce0 <CPU::detectFeatures()+0x1a6>
c0014d03:	51                   	push   ecx
c0014d04:	51                   	push   ecx
c0014d05:	68 b7 24 02 c0       	push   0xc00224b7
c0014d0a:	57                   	push   edi
c0014d0b:	e8 9a ba fe ff       	call   c00007aa <strcmp>
c0014d10:	83 c4 10             	add    esp,0x10
c0014d13:	85 c0                	test   eax,eax
c0014d15:	74 2a                	je     c0014d41 <CPU::detectFeatures()+0x207>
c0014d17:	52                   	push   edx
c0014d18:	52                   	push   edx
c0014d19:	68 c4 24 02 c0       	push   0xc00224c4
c0014d1e:	57                   	push   edi
c0014d1f:	e8 86 ba fe ff       	call   c00007aa <strcmp>
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	85 c0                	test   eax,eax
c0014d29:	74 16                	je     c0014d41 <CPU::detectFeatures()+0x207>
c0014d2b:	50                   	push   eax
c0014d2c:	50                   	push   eax
c0014d2d:	68 d1 24 02 c0       	push   0xc00224d1
c0014d32:	57                   	push   edi
c0014d33:	e8 72 ba fe ff       	call   c00007aa <strcmp>
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	85 c0                	test   eax,eax
c0014d3d:	74 48                	je     c0014d87 <CPU::detectFeatures()+0x24d>
c0014d3f:	eb 0f                	jmp    c0014d50 <CPU::detectFeatures()+0x216>
c0014d41:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014d4b:	e9 c1 01 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014d50:	50                   	push   eax
c0014d51:	50                   	push   eax
c0014d52:	68 de 24 02 c0       	push   0xc00224de
c0014d57:	57                   	push   edi
c0014d58:	e8 4d ba fe ff       	call   c00007aa <strcmp>
c0014d5d:	83 c4 10             	add    esp,0x10
c0014d60:	85 c0                	test   eax,eax
c0014d62:	74 23                	je     c0014d87 <CPU::detectFeatures()+0x24d>
c0014d64:	50                   	push   eax
c0014d65:	50                   	push   eax
c0014d66:	68 eb 24 02 c0       	push   0xc00224eb
c0014d6b:	57                   	push   edi
c0014d6c:	e8 39 ba fe ff       	call   c00007aa <strcmp>
c0014d71:	83 c4 10             	add    esp,0x10
c0014d74:	85 c0                	test   eax,eax
c0014d76:	75 1e                	jne    c0014d96 <CPU::detectFeatures()+0x25c>
c0014d78:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014d82:	e9 8a 01 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014d87:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014d91:	e9 7b 01 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014d96:	50                   	push   eax
c0014d97:	50                   	push   eax
c0014d98:	68 f8 24 02 c0       	push   0xc00224f8
c0014d9d:	57                   	push   edi
c0014d9e:	e8 07 ba fe ff       	call   c00007aa <strcmp>
c0014da3:	83 c4 10             	add    esp,0x10
c0014da6:	85 c0                	test   eax,eax
c0014da8:	75 0f                	jne    c0014db9 <CPU::detectFeatures()+0x27f>
c0014daa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014db4:	e9 58 01 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014db9:	50                   	push   eax
c0014dba:	50                   	push   eax
c0014dbb:	68 b7 24 02 c0       	push   0xc00224b7
c0014dc0:	57                   	push   edi
c0014dc1:	e8 e4 b9 fe ff       	call   c00007aa <strcmp>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	85 c0                	test   eax,eax
c0014dcb:	75 0f                	jne    c0014ddc <CPU::detectFeatures()+0x2a2>
c0014dcd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014dd7:	e9 35 01 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014ddc:	50                   	push   eax
c0014ddd:	50                   	push   eax
c0014dde:	68 05 25 02 c0       	push   0xc0022505
c0014de3:	57                   	push   edi
c0014de4:	e8 c1 b9 fe ff       	call   c00007aa <strcmp>
c0014de9:	83 c4 10             	add    esp,0x10
c0014dec:	85 c0                	test   eax,eax
c0014dee:	75 0f                	jne    c0014dff <CPU::detectFeatures()+0x2c5>
c0014df0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014dfa:	e9 12 01 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014dff:	51                   	push   ecx
c0014e00:	51                   	push   ecx
c0014e01:	68 12 25 02 c0       	push   0xc0022512
c0014e06:	57                   	push   edi
c0014e07:	e8 9e b9 fe ff       	call   c00007aa <strcmp>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	85 c0                	test   eax,eax
c0014e11:	75 0f                	jne    c0014e22 <CPU::detectFeatures()+0x2e8>
c0014e13:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014e1d:	e9 ef 00 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014e22:	52                   	push   edx
c0014e23:	52                   	push   edx
c0014e24:	68 1f 25 02 c0       	push   0xc002251f
c0014e29:	57                   	push   edi
c0014e2a:	e8 7b b9 fe ff       	call   c00007aa <strcmp>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	85 c0                	test   eax,eax
c0014e34:	75 0f                	jne    c0014e45 <CPU::detectFeatures()+0x30b>
c0014e36:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014e40:	e9 cc 00 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014e45:	50                   	push   eax
c0014e46:	50                   	push   eax
c0014e47:	68 2c 25 02 c0       	push   0xc002252c
c0014e4c:	57                   	push   edi
c0014e4d:	e8 58 b9 fe ff       	call   c00007aa <strcmp>
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	85 c0                	test   eax,eax
c0014e57:	75 0f                	jne    c0014e68 <CPU::detectFeatures()+0x32e>
c0014e59:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014e63:	e9 a9 00 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014e68:	50                   	push   eax
c0014e69:	50                   	push   eax
c0014e6a:	68 39 25 02 c0       	push   0xc0022539
c0014e6f:	57                   	push   edi
c0014e70:	e8 35 b9 fe ff       	call   c00007aa <strcmp>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	85 c0                	test   eax,eax
c0014e7a:	75 0f                	jne    c0014e8b <CPU::detectFeatures()+0x351>
c0014e7c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014e86:	e9 86 00 00 00       	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014e8b:	50                   	push   eax
c0014e8c:	50                   	push   eax
c0014e8d:	68 46 25 02 c0       	push   0xc0022546
c0014e92:	57                   	push   edi
c0014e93:	e8 12 b9 fe ff       	call   c00007aa <strcmp>
c0014e98:	83 c4 10             	add    esp,0x10
c0014e9b:	85 c0                	test   eax,eax
c0014e9d:	75 0c                	jne    c0014eab <CPU::detectFeatures()+0x371>
c0014e9f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014ea9:	eb 66                	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014eab:	50                   	push   eax
c0014eac:	50                   	push   eax
c0014ead:	68 53 25 02 c0       	push   0xc0022553
c0014eb2:	57                   	push   edi
c0014eb3:	e8 f2 b8 fe ff       	call   c00007aa <strcmp>
c0014eb8:	83 c4 10             	add    esp,0x10
c0014ebb:	85 c0                	test   eax,eax
c0014ebd:	75 0c                	jne    c0014ecb <CPU::detectFeatures()+0x391>
c0014ebf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014ec9:	eb 46                	jmp    c0014f11 <CPU::detectFeatures()+0x3d7>
c0014ecb:	50                   	push   eax
c0014ecc:	50                   	push   eax
c0014ecd:	68 60 25 02 c0       	push   0xc0022560
c0014ed2:	57                   	push   edi
c0014ed3:	e8 d2 b8 fe ff       	call   c00007aa <strcmp>
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	85 c0                	test   eax,eax
c0014edd:	74 e0                	je     c0014ebf <CPU::detectFeatures()+0x385>
c0014edf:	50                   	push   eax
c0014ee0:	50                   	push   eax
c0014ee1:	68 6d 25 02 c0       	push   0xc002256d
c0014ee6:	57                   	push   edi
c0014ee7:	e8 be b8 fe ff       	call   c00007aa <strcmp>
c0014eec:	83 c4 10             	add    esp,0x10
c0014eef:	85 c0                	test   eax,eax
c0014ef1:	74 cc                	je     c0014ebf <CPU::detectFeatures()+0x385>
c0014ef3:	51                   	push   ecx
c0014ef4:	51                   	push   ecx
c0014ef5:	68 7a 25 02 c0       	push   0xc002257a
c0014efa:	57                   	push   edi
c0014efb:	e8 aa b8 fe ff       	call   c00007aa <strcmp>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	85 c0                	test   eax,eax
c0014f05:	74 b8                	je     c0014ebf <CPU::detectFeatures()+0x385>
c0014f07:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014f11:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014f16:	0f 86 be 00 00 00    	jbe    c0014fda <CPU::detectFeatures()+0x4a0>
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	68 80 00 00 00       	push   0x80
c0014f24:	e8 96 f8 ff ff       	call   c00147bf <cpuidCheckExtendedEBX(unsigned int)>
c0014f29:	83 e0 01             	and    eax,0x1
c0014f2c:	c1 e0 06             	shl    eax,0x6
c0014f2f:	88 c2                	mov    dl,al
c0014f31:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f37:	83 e0 bf             	and    eax,0xffffffbf
c0014f3a:	09 d0                	or     eax,edx
c0014f3c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f42:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0014f49:	e8 71 f8 ff ff       	call   c00147bf <cpuidCheckExtendedEBX(unsigned int)>
c0014f4e:	83 e0 01             	and    eax,0x1
c0014f51:	c1 e0 04             	shl    eax,0x4
c0014f54:	88 c2                	mov    dl,al
c0014f56:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014f5c:	83 e0 ef             	and    eax,0xffffffef
c0014f5f:	09 d0                	or     eax,edx
c0014f61:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014f67:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014f6e:	e8 4c f8 ff ff       	call   c00147bf <cpuidCheckExtendedEBX(unsigned int)>
c0014f73:	c1 e0 07             	shl    eax,0x7
c0014f76:	88 c2                	mov    dl,al
c0014f78:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014f7e:	83 e0 7f             	and    eax,0x7f
c0014f81:	09 d0                	or     eax,edx
c0014f83:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014f89:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f90:	e8 57 f8 ff ff       	call   c00147ec <cpuidCheckExtendedECX(unsigned int)>
c0014f95:	83 e0 01             	and    eax,0x1
c0014f98:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014f9f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014fa5:	83 e0 f7             	and    eax,0xfffffff7
c0014fa8:	09 d0                	or     eax,edx
c0014faa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014fb0:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014fb7:	e8 30 f8 ff ff       	call   c00147ec <cpuidCheckExtendedECX(unsigned int)>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	83 e0 01             	and    eax,0x1
c0014fc2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014fc9:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014fcf:	83 e0 fb             	and    eax,0xfffffffb
c0014fd2:	09 d0                	or     eax,edx
c0014fd4:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014fda:	83 ec 0c             	sub    esp,0xc
c0014fdd:	56                   	push   esi
c0014fde:	55                   	push   ebp
c0014fdf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014fe3:	57                   	push   edi
c0014fe4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014fe8:	50                   	push   eax
c0014fe9:	6a 01                	push   0x1
c0014feb:	e8 f2 f6 ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014ff0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ff4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014ffa:	88 c1                	mov    cl,al
c0014ffc:	83 e2 f0             	and    edx,0xfffffff0
c0014fff:	83 e1 0f             	and    ecx,0xf
c0015002:	09 ca                	or     edx,ecx
c0015004:	88 c1                	mov    cl,al
c0015006:	c0 e9 04             	shr    cl,0x4
c0015009:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001500f:	0f b6 d1             	movzx  edx,cl
c0015012:	c1 e2 06             	shl    edx,0x6
c0015015:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0015019:	89 d5                	mov    ebp,edx
c001501b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015021:	66 81 e2 3f c0       	and    dx,0xc03f
c0015026:	83 c4 20             	add    esp,0x20
c0015029:	09 ea                	or     edx,ebp
c001502b:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0015032:	89 c2                	mov    edx,eax
c0015034:	c1 ea 08             	shr    edx,0x8
c0015037:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001503d:	83 e2 0f             	and    edx,0xf
c0015040:	83 e1 3f             	and    ecx,0x3f
c0015043:	89 d5                	mov    ebp,edx
c0015045:	c1 e5 06             	shl    ebp,0x6
c0015048:	09 cd                	or     ebp,ecx
c001504a:	89 e9                	mov    ecx,ebp
c001504c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0015052:	88 d1                	mov    cl,dl
c0015054:	c0 e9 02             	shr    cl,0x2
c0015057:	89 cd                	mov    ebp,ecx
c0015059:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001505f:	83 e1 c0             	and    ecx,0xffffffc0
c0015062:	09 cd                	or     ebp,ecx
c0015064:	89 e9                	mov    ecx,ebp
c0015066:	89 c5                	mov    ebp,eax
c0015068:	c1 ed 0c             	shr    ebp,0xc
c001506b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015071:	83 e5 03             	and    ebp,0x3
c0015074:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001507a:	c1 e5 04             	shl    ebp,0x4
c001507d:	83 e1 cf             	and    ecx,0xffffffcf
c0015080:	09 cd                	or     ebp,ecx
c0015082:	80 fa 06             	cmp    dl,0x6
c0015085:	89 e9                	mov    ecx,ebp
c0015087:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001508d:	74 05                	je     c0015094 <CPU::detectFeatures()+0x55a>
c001508f:	80 fa 0f             	cmp    dl,0xf
c0015092:	75 5d                	jne    c00150f1 <CPU::detectFeatures()+0x5b7>
c0015094:	89 c5                	mov    ebp,eax
c0015096:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001509a:	c1 ed 10             	shr    ebp,0x10
c001509d:	c1 e5 04             	shl    ebp,0x4
c00150a0:	09 e9                	or     ecx,ebp
c00150a2:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00150a8:	0f b6 c9             	movzx  ecx,cl
c00150ab:	c1 e1 06             	shl    ecx,0x6
c00150ae:	66 81 e5 3f c0       	and    bp,0xc03f
c00150b3:	09 e9                	or     ecx,ebp
c00150b5:	80 fa 0f             	cmp    dl,0xf
c00150b8:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00150bf:	75 30                	jne    c00150f1 <CPU::detectFeatures()+0x5b7>
c00150c1:	c1 e8 14             	shr    eax,0x14
c00150c4:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00150ca:	83 c0 0f             	add    eax,0xf
c00150cd:	83 e2 3f             	and    edx,0x3f
c00150d0:	88 c1                	mov    cl,al
c00150d2:	c1 e1 06             	shl    ecx,0x6
c00150d5:	c0 e8 02             	shr    al,0x2
c00150d8:	09 ca                	or     edx,ecx
c00150da:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00150e0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00150e6:	83 e2 c0             	and    edx,0xffffffc0
c00150e9:	09 d0                	or     eax,edx
c00150eb:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00150f1:	83 ec 0c             	sub    esp,0xc
c00150f4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00150fb:	56                   	push   esi
c00150fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015100:	50                   	push   eax
c0015101:	57                   	push   edi
c0015102:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0015106:	55                   	push   ebp
c0015107:	68 00 00 00 80       	push   0x80000000
c001510c:	e8 d1 f5 ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015111:	83 c4 20             	add    esp,0x20
c0015114:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001511c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015120:	76 1e                	jbe    c0015140 <CPU::detectFeatures()+0x606>
c0015122:	83 ec 0c             	sub    esp,0xc
c0015125:	56                   	push   esi
c0015126:	50                   	push   eax
c0015127:	57                   	push   edi
c0015128:	55                   	push   ebp
c0015129:	68 01 00 00 80       	push   0x80000001
c001512e:	e8 af f5 ff ff       	call   c00146e2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015133:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001513d:	83 c4 20             	add    esp,0x20
c0015140:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0015146:	83 f8 01             	cmp    eax,0x1
c0015149:	75 6f                	jne    c00151ba <CPU::detectFeatures()+0x680>
c001514b:	51                   	push   ecx
c001514c:	51                   	push   ecx
c001514d:	68 86 25 02 c0       	push   0xc0022586
c0015152:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015156:	56                   	push   esi
c0015157:	e8 fd b5 fe ff       	call   c0000759 <strcpy>
c001515c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015162:	5f                   	pop    edi
c0015163:	66 c1 e8 06          	shr    ax,0x6
c0015167:	5d                   	pop    ebp
c0015168:	0f b6 c0             	movzx  eax,al
c001516b:	50                   	push   eax
c001516c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015172:	c1 e8 0e             	shr    eax,0xe
c0015175:	0f b6 c0             	movzx  eax,al
c0015178:	50                   	push   eax
c0015179:	e8 04 f2 ff ff       	call   c0014382 <lookupIntelCPUName(unsigned char, unsigned char)>
c001517e:	5a                   	pop    edx
c001517f:	59                   	pop    ecx
c0015180:	50                   	push   eax
c0015181:	56                   	push   esi
c0015182:	e8 89 b6 fe ff       	call   c0000810 <strcat>
c0015187:	5f                   	pop    edi
c0015188:	5d                   	pop    ebp
c0015189:	56                   	push   esi
c001518a:	53                   	push   ebx
c001518b:	e8 c0 b5 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015190:	58                   	pop    eax
c0015191:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0015197:	5a                   	pop    edx
c0015198:	68 8d 25 02 c0       	push   0xc002258d
c001519d:	50                   	push   eax
c001519e:	e8 07 b6 fe ff       	call   c00007aa <strcmp>
c00151a3:	83 c4 10             	add    esp,0x10
c00151a6:	85 c0                	test   eax,eax
c00151a8:	0f 85 53 03 00 00    	jne    c0015501 <CPU::detectFeatures()+0x9c7>
c00151ae:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00151b5:	e9 47 03 00 00       	jmp    c0015501 <CPU::detectFeatures()+0x9c7>
c00151ba:	83 f8 02             	cmp    eax,0x2
c00151bd:	0f 85 b5 00 00 00    	jne    c0015278 <CPU::detectFeatures()+0x73e>
c00151c3:	57                   	push   edi
c00151c4:	57                   	push   edi
c00151c5:	68 9f 25 02 c0       	push   0xc002259f
c00151ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00151ce:	56                   	push   esi
c00151cf:	e8 85 b5 fe ff       	call   c0000759 <strcpy>
c00151d4:	5d                   	pop    ebp
c00151d5:	58                   	pop    eax
c00151d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151dc:	66 c1 e8 06          	shr    ax,0x6
c00151e0:	0f b6 c0             	movzx  eax,al
c00151e3:	50                   	push   eax
c00151e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00151ea:	c1 e8 0e             	shr    eax,0xe
c00151ed:	0f b6 c0             	movzx  eax,al
c00151f0:	50                   	push   eax
c00151f1:	e8 e7 ef ff ff       	call   c00141dd <lookupAMDCPUName(unsigned char, unsigned char)>
c00151f6:	5a                   	pop    edx
c00151f7:	59                   	pop    ecx
c00151f8:	50                   	push   eax
c00151f9:	56                   	push   esi
c00151fa:	e8 11 b6 fe ff       	call   c0000810 <strcat>
c00151ff:	5f                   	pop    edi
c0015200:	5d                   	pop    ebp
c0015201:	56                   	push   esi
c0015202:	53                   	push   ebx
c0015203:	e8 48 b5 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015208:	58                   	pop    eax
c0015209:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001520f:	5a                   	pop    edx
c0015210:	68 a4 25 02 c0       	push   0xc00225a4
c0015215:	50                   	push   eax
c0015216:	e8 8f b5 fe ff       	call   c00007aa <strcmp>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	85 c0                	test   eax,eax
c0015220:	75 20                	jne    c0015242 <CPU::detectFeatures()+0x708>
c0015222:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c0015228:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001522e:	a8 01                	test   al,0x1
c0015230:	74 10                	je     c0015242 <CPU::detectFeatures()+0x708>
c0015232:	83 e0 fe             	and    eax,0xfffffffe
c0015235:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001523b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0015242:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015248:	c1 e8 0e             	shr    eax,0xe
c001524b:	3c 05                	cmp    al,0x5
c001524d:	0f 85 ae 02 00 00    	jne    c0015501 <CPU::detectFeatures()+0x9c7>
c0015253:	56                   	push   esi
c0015254:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001525a:	83 e0 0f             	and    eax,0xf
c001525d:	50                   	push   eax
c001525e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015264:	66 c1 e8 06          	shr    ax,0x6
c0015268:	0f b6 c0             	movzx  eax,al
c001526b:	50                   	push   eax
c001526c:	6a 05                	push   0x5
c001526e:	e8 fc f3 ff ff       	call   c001466f <AMD_K6_writeback(int, int, int)>
c0015273:	e9 ff 01 00 00       	jmp    c0015477 <CPU::detectFeatures()+0x93d>
c0015278:	89 c1                	mov    ecx,eax
c001527a:	83 e1 fd             	and    ecx,0xfffffffd
c001527d:	83 f9 04             	cmp    ecx,0x4
c0015280:	74 09                	je     c001528b <CPU::detectFeatures()+0x751>
c0015282:	83 f8 03             	cmp    eax,0x3
c0015285:	0f 85 6f 01 00 00    	jne    c00153fa <CPU::detectFeatures()+0x8c0>
c001528b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015291:	c1 ea 0e             	shr    edx,0xe
c0015294:	80 fa 05             	cmp    dl,0x5
c0015297:	75 62                	jne    c00152fb <CPU::detectFeatures()+0x7c1>
c0015299:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001529f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00152a4:	66 81 fa 00 01       	cmp    dx,0x100
c00152a9:	75 0c                	jne    c00152b7 <CPU::detectFeatures()+0x77d>
c00152ab:	51                   	push   ecx
c00152ac:	51                   	push   ecx
c00152ad:	68 ab 25 02 c0       	push   0xc00225ab
c00152b2:	e9 ba 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00152b7:	66 81 fa 00 02       	cmp    dx,0x200
c00152bc:	75 0c                	jne    c00152ca <CPU::detectFeatures()+0x790>
c00152be:	52                   	push   edx
c00152bf:	52                   	push   edx
c00152c0:	68 be 25 02 c0       	push   0xc00225be
c00152c5:	e9 a7 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00152ca:	66 81 fa 40 02       	cmp    dx,0x240
c00152cf:	75 0c                	jne    c00152dd <CPU::detectFeatures()+0x7a3>
c00152d1:	50                   	push   eax
c00152d2:	50                   	push   eax
c00152d3:	68 d0 25 02 c0       	push   0xc00225d0
c00152d8:	e9 94 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00152dd:	83 f8 06             	cmp    eax,0x6
c00152e0:	0f 84 ee 00 00 00    	je     c00153d4 <CPU::detectFeatures()+0x89a>
c00152e6:	83 f9 04             	cmp    ecx,0x4
c00152e9:	0f 84 f6 00 00 00    	je     c00153e5 <CPU::detectFeatures()+0x8ab>
c00152ef:	50                   	push   eax
c00152f0:	50                   	push   eax
c00152f1:	68 f6 25 02 c0       	push   0xc00225f6
c00152f6:	e9 76 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00152fb:	80 fa 06             	cmp    dl,0x6
c00152fe:	0f 85 cb 00 00 00    	jne    c00153cf <CPU::detectFeatures()+0x895>
c0015304:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001530a:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001530f:	66 81 fa 80 01       	cmp    dx,0x180
c0015314:	75 0c                	jne    c0015322 <CPU::detectFeatures()+0x7e8>
c0015316:	50                   	push   eax
c0015317:	50                   	push   eax
c0015318:	68 01 26 02 c0       	push   0xc0022601
c001531d:	e9 4f 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015322:	66 81 fa c0 01       	cmp    dx,0x1c0
c0015327:	74 07                	je     c0015330 <CPU::detectFeatures()+0x7f6>
c0015329:	66 81 fa 00 02       	cmp    dx,0x200
c001532e:	75 0c                	jne    c001533c <CPU::detectFeatures()+0x802>
c0015330:	50                   	push   eax
c0015331:	50                   	push   eax
c0015332:	68 11 26 02 c0       	push   0xc0022611
c0015337:	e9 35 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c001533c:	66 81 fa 40 02       	cmp    dx,0x240
c0015341:	75 0c                	jne    c001534f <CPU::detectFeatures()+0x815>
c0015343:	50                   	push   eax
c0015344:	50                   	push   eax
c0015345:	68 18 26 02 c0       	push   0xc0022618
c001534a:	e9 22 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c001534f:	66 81 fa 80 02       	cmp    dx,0x280
c0015354:	74 07                	je     c001535d <CPU::detectFeatures()+0x823>
c0015356:	66 81 fa 40 03       	cmp    dx,0x340
c001535b:	75 0c                	jne    c0015369 <CPU::detectFeatures()+0x82f>
c001535d:	50                   	push   eax
c001535e:	50                   	push   eax
c001535f:	68 21 26 02 c0       	push   0xc0022621
c0015364:	e9 08 01 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015369:	66 81 fa c0 03       	cmp    dx,0x3c0
c001536e:	75 0c                	jne    c001537c <CPU::detectFeatures()+0x842>
c0015370:	55                   	push   ebp
c0015371:	55                   	push   ebp
c0015372:	68 28 26 02 c0       	push   0xc0022628
c0015377:	e9 f5 00 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c001537c:	83 f8 06             	cmp    eax,0x6
c001537f:	74 53                	je     c00153d4 <CPU::detectFeatures()+0x89a>
c0015381:	83 f9 04             	cmp    ecx,0x4
c0015384:	74 5f                	je     c00153e5 <CPU::detectFeatures()+0x8ab>
c0015386:	57                   	push   edi
c0015387:	57                   	push   edi
c0015388:	68 31 26 02 c0       	push   0xc0022631
c001538d:	53                   	push   ebx
c001538e:	e8 bd b3 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015393:	b1 c1                	mov    cl,0xc1
c0015395:	88 c8                	mov    al,cl
c0015397:	e6 22                	out    0x22,al
c0015399:	e4 23                	in     al,0x23
c001539b:	88 c2                	mov    dl,al
c001539d:	88 c8                	mov    al,cl
c001539f:	e6 22                	out    0x22,al
c00153a1:	88 d0                	mov    al,dl
c00153a3:	83 c8 10             	or     eax,0x10
c00153a6:	e6 23                	out    0x23,al
c00153a8:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00153af:	89 d0                	mov    eax,edx
c00153b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00153b4:	40                   	inc    eax
c00153b5:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00153bb:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00153bf:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00153c5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00153ca:	e9 a8 00 00 00       	jmp    c0015477 <CPU::detectFeatures()+0x93d>
c00153cf:	83 f8 06             	cmp    eax,0x6
c00153d2:	75 0c                	jne    c00153e0 <CPU::detectFeatures()+0x8a6>
c00153d4:	56                   	push   esi
c00153d5:	56                   	push   esi
c00153d6:	68 e2 25 02 c0       	push   0xc00225e2
c00153db:	e9 91 00 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00153e0:	83 f9 04             	cmp    ecx,0x4
c00153e3:	75 0c                	jne    c00153f1 <CPU::detectFeatures()+0x8b7>
c00153e5:	51                   	push   ecx
c00153e6:	51                   	push   ecx
c00153e7:	68 ee 25 02 c0       	push   0xc00225ee
c00153ec:	e9 80 00 00 00       	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00153f1:	52                   	push   edx
c00153f2:	52                   	push   edx
c00153f3:	68 3c 26 02 c0       	push   0xc002263c
c00153f8:	eb 77                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c00153fa:	83 f8 07             	cmp    eax,0x7
c00153fd:	75 09                	jne    c0015408 <CPU::detectFeatures()+0x8ce>
c00153ff:	50                   	push   eax
c0015400:	50                   	push   eax
c0015401:	68 46 26 02 c0       	push   0xc0022646
c0015406:	eb 69                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015408:	83 f8 0a             	cmp    eax,0xa
c001540b:	75 09                	jne    c0015416 <CPU::detectFeatures()+0x8dc>
c001540d:	50                   	push   eax
c001540e:	50                   	push   eax
c001540f:	68 51 26 02 c0       	push   0xc0022651
c0015414:	eb 5b                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015416:	83 f8 0b             	cmp    eax,0xb
c0015419:	75 09                	jne    c0015424 <CPU::detectFeatures()+0x8ea>
c001541b:	50                   	push   eax
c001541c:	50                   	push   eax
c001541d:	68 59 26 02 c0       	push   0xc0022659
c0015422:	eb 4d                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015424:	83 f8 08             	cmp    eax,0x8
c0015427:	75 09                	jne    c0015432 <CPU::detectFeatures()+0x8f8>
c0015429:	50                   	push   eax
c001542a:	50                   	push   eax
c001542b:	68 62 26 02 c0       	push   0xc0022662
c0015430:	eb 3f                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015432:	83 f8 09             	cmp    eax,0x9
c0015435:	75 09                	jne    c0015440 <CPU::detectFeatures()+0x906>
c0015437:	50                   	push   eax
c0015438:	50                   	push   eax
c0015439:	68 6a 26 02 c0       	push   0xc002266a
c001543e:	eb 31                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c0015440:	83 f8 05             	cmp    eax,0x5
c0015443:	75 09                	jne    c001544e <CPU::detectFeatures()+0x914>
c0015445:	50                   	push   eax
c0015446:	50                   	push   eax
c0015447:	68 72 26 02 c0       	push   0xc0022672
c001544c:	eb 23                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c001544e:	83 f8 0c             	cmp    eax,0xc
c0015451:	75 09                	jne    c001545c <CPU::detectFeatures()+0x922>
c0015453:	55                   	push   ebp
c0015454:	55                   	push   ebp
c0015455:	68 80 26 02 c0       	push   0xc0022680
c001545a:	eb 15                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c001545c:	83 f8 0d             	cmp    eax,0xd
c001545f:	75 09                	jne    c001546a <CPU::detectFeatures()+0x930>
c0015461:	57                   	push   edi
c0015462:	57                   	push   edi
c0015463:	68 8b 26 02 c0       	push   0xc002268b
c0015468:	eb 07                	jmp    c0015471 <CPU::detectFeatures()+0x937>
c001546a:	56                   	push   esi
c001546b:	56                   	push   esi
c001546c:	68 9f 26 02 c0       	push   0xc002269f
c0015471:	53                   	push   ebx
c0015472:	e8 d9 b2 ff ff       	call   c0010750 <Device::setName(char const*)>
c0015477:	83 c4 10             	add    esp,0x10
c001547a:	e9 82 00 00 00       	jmp    c0015501 <CPU::detectFeatures()+0x9c7>
c001547f:	51                   	push   ecx
c0015480:	51                   	push   ecx
c0015481:	68 eb 24 02 c0       	push   0xc00224eb
c0015486:	57                   	push   edi
c0015487:	e8 cd b2 fe ff       	call   c0000759 <strcpy>
c001548c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0015496:	e8 96 ad fe ff       	call   c0000231 <is486>
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	85 c0                	test   eax,eax
c00154a0:	74 2d                	je     c00154cf <CPU::detectFeatures()+0x995>
c00154a2:	52                   	push   edx
c00154a3:	52                   	push   edx
c00154a4:	68 ab 26 02 c0       	push   0xc00226ab
c00154a9:	53                   	push   ebx
c00154aa:	e8 a1 b2 ff ff       	call   c0010750 <Device::setName(char const*)>
c00154af:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00154b6:	e8 9d a5 00 00       	call   c001fa58 <CPU::readCR0()>
c00154bb:	83 c4 10             	add    esp,0x10
c00154be:	83 e0 14             	and    eax,0x14
c00154c1:	83 f8 04             	cmp    eax,0x4
c00154c4:	75 1f                	jne    c00154e5 <CPU::detectFeatures()+0x9ab>
c00154c6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00154cd:	eb 32                	jmp    c0015501 <CPU::detectFeatures()+0x9c7>
c00154cf:	50                   	push   eax
c00154d0:	50                   	push   eax
c00154d1:	68 b6 26 02 c0       	push   0xc00226b6
c00154d6:	53                   	push   ebx
c00154d7:	e8 74 b2 ff ff       	call   c0010750 <Device::setName(char const*)>
c00154dc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00154e3:	eb d1                	jmp    c00154b6 <CPU::detectFeatures()+0x97c>
c00154e5:	e8 22 ad fe ff       	call   c000020c <hasLegacyFPU>
c00154ea:	83 e0 01             	and    eax,0x1
c00154ed:	8d 14 00             	lea    edx,[eax+eax*1]
c00154f0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00154f6:	83 e0 fd             	and    eax,0xfffffffd
c00154f9:	09 d0                	or     eax,edx
c00154fb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015501:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0015508:	83 c4 4c             	add    esp,0x4c
c001550b:	5b                   	pop    ebx
c001550c:	5e                   	pop    esi
c001550d:	5f                   	pop    edi
c001550e:	5d                   	pop    ebp
c001550f:	c3                   	ret    

c0015510 <CPU::setupSMEP()>:
c0015510:	83 ec 0c             	sub    esp,0xc
c0015513:	e8 0a a8 00 00       	call   c001fd22 <CPU::readCR4()>
c0015518:	0d 00 00 10 00       	or     eax,0x100000
c001551d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015521:	83 c4 0c             	add    esp,0xc
c0015524:	e9 14 a8 00 00       	jmp    c001fd3d <CPU::writeCR4(unsigned long)>
c0015529:	90                   	nop

c001552a <CPU::setupUMIP()>:
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	e8 f0 a7 00 00       	call   c001fd22 <CPU::readCR4()>
c0015532:	80 cc 08             	or     ah,0x8
c0015535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015539:	83 c4 0c             	add    esp,0xc
c001553c:	e9 fc a7 00 00       	jmp    c001fd3d <CPU::writeCR4(unsigned long)>
c0015541:	90                   	nop

c0015542 <CPU::setupTSC()>:
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	e8 d8 a7 00 00       	call   c001fd22 <CPU::readCR4()>
c001554a:	83 c8 04             	or     eax,0x4
c001554d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015551:	83 c4 0c             	add    esp,0xc
c0015554:	e9 e4 a7 00 00       	jmp    c001fd3d <CPU::writeCR4(unsigned long)>
c0015559:	90                   	nop

c001555a <CPU::setupLargePages()>:
c001555a:	83 ec 0c             	sub    esp,0xc
c001555d:	e8 c0 a7 00 00       	call   c001fd22 <CPU::readCR4()>
c0015562:	83 c8 10             	or     eax,0x10
c0015565:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015569:	83 c4 0c             	add    esp,0xc
c001556c:	e9 cc a7 00 00       	jmp    c001fd3d <CPU::writeCR4(unsigned long)>
c0015571:	90                   	nop

c0015572 <CPU::setupPAT()>:
c0015572:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0015577:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001557e:	74 2c                	je     c00155ac <CPU::setupPAT()+0x3a>
c0015580:	53                   	push   ebx
c0015581:	83 ec 10             	sub    esp,0x10
c0015584:	68 77 02 00 00       	push   0x277
c0015589:	50                   	push   eax
c001558a:	e8 fd 5f ff ff       	call   c000b58c <Computer::rdmsr(unsigned int)>
c001558f:	83 e2 f8             	and    edx,0xfffffff8
c0015592:	83 ca 01             	or     edx,0x1
c0015595:	52                   	push   edx
c0015596:	50                   	push   eax
c0015597:	68 77 02 00 00       	push   0x277
c001559c:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c00155a2:	e8 11 60 ff ff       	call   c000b5b8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00155a7:	83 c4 28             	add    esp,0x28
c00155aa:	5b                   	pop    ebx
c00155ab:	c3                   	ret    
c00155ac:	c3                   	ret    
c00155ad:	90                   	nop

c00155ae <CPU::setupMTRR()>:
c00155ae:	c3                   	ret    
c00155af:	90                   	nop

c00155b0 <CPU::setupGlobalPages()>:
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	e8 6a a7 00 00       	call   c001fd22 <CPU::readCR4()>
c00155b8:	0c 80                	or     al,0x80
c00155ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155be:	83 c4 0c             	add    esp,0xc
c00155c1:	e9 77 a7 00 00       	jmp    c001fd3d <CPU::writeCR4(unsigned long)>

c00155c6 <CPU::allowUsermodeDataAccess()>:
c00155c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155ca:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00155d1:	74 03                	je     c00155d6 <CPU::allowUsermodeDataAccess()+0x10>
c00155d3:	0f 01 cb             	stac   
c00155d6:	c3                   	ret    
c00155d7:	90                   	nop

c00155d8 <CPU::prohibitUsermodeDataAccess()>:
c00155d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155dc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00155e3:	74 03                	je     c00155e8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00155e5:	0f 01 ca             	clac   
c00155e8:	c3                   	ret    
c00155e9:	90                   	nop

c00155ea <CPU::setupSMAP()>:
c00155ea:	53                   	push   ebx
c00155eb:	83 ec 08             	sub    esp,0x8
c00155ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155f2:	e8 2b a7 00 00       	call   c001fd22 <CPU::readCR4()>
c00155f7:	83 ec 0c             	sub    esp,0xc
c00155fa:	0d 00 00 20 00       	or     eax,0x200000
c00155ff:	50                   	push   eax
c0015600:	e8 38 a7 00 00       	call   c001fd3d <CPU::writeCR4(unsigned long)>
c0015605:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0015609:	83 c4 18             	add    esp,0x18
c001560c:	5b                   	pop    ebx
c001560d:	eb c9                	jmp    c00155d8 <CPU::prohibitUsermodeDataAccess()>
c001560f:	90                   	nop

c0015610 <CPU::setupFeatures()>:
c0015610:	53                   	push   ebx
c0015611:	83 ec 08             	sub    esp,0x8
c0015614:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015618:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c001561f:	74 0c                	je     c001562d <CPU::setupFeatures()+0x1d>
c0015621:	83 ec 0c             	sub    esp,0xc
c0015624:	53                   	push   ebx
c0015625:	e8 e6 fe ff ff       	call   c0015510 <CPU::setupSMEP()>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0015634:	74 0c                	je     c0015642 <CPU::setupFeatures()+0x32>
c0015636:	83 ec 0c             	sub    esp,0xc
c0015639:	53                   	push   ebx
c001563a:	e8 ab ff ff ff       	call   c00155ea <CPU::setupSMAP()>
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015649:	74 0c                	je     c0015657 <CPU::setupFeatures()+0x47>
c001564b:	83 ec 0c             	sub    esp,0xc
c001564e:	53                   	push   ebx
c001564f:	e8 d6 fe ff ff       	call   c001552a <CPU::setupUMIP()>
c0015654:	83 c4 10             	add    esp,0x10
c0015657:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001565e:	74 0c                	je     c001566c <CPU::setupFeatures()+0x5c>
c0015660:	83 ec 0c             	sub    esp,0xc
c0015663:	53                   	push   ebx
c0015664:	e8 d9 fe ff ff       	call   c0015542 <CPU::setupTSC()>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0015673:	74 0c                	je     c0015681 <CPU::setupFeatures()+0x71>
c0015675:	83 ec 0c             	sub    esp,0xc
c0015678:	53                   	push   ebx
c0015679:	e8 dc fe ff ff       	call   c001555a <CPU::setupLargePages()>
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015688:	74 0c                	je     c0015696 <CPU::setupFeatures()+0x86>
c001568a:	83 ec 0c             	sub    esp,0xc
c001568d:	53                   	push   ebx
c001568e:	e8 1d ff ff ff       	call   c00155b0 <CPU::setupGlobalPages()>
c0015693:	83 c4 10             	add    esp,0x10
c0015696:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001569d:	74 0d                	je     c00156ac <CPU::setupFeatures()+0x9c>
c001569f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00156a3:	83 c4 08             	add    esp,0x8
c00156a6:	5b                   	pop    ebx
c00156a7:	e9 c6 fe ff ff       	jmp    c0015572 <CPU::setupPAT()>
c00156ac:	83 c4 08             	add    esp,0x8
c00156af:	5b                   	pop    ebx
c00156b0:	c3                   	ret    
c00156b1:	90                   	nop

c00156b2 <CPU::open(int, int, void*)>:
c00156b2:	57                   	push   edi
c00156b3:	56                   	push   esi
c00156b4:	53                   	push   ebx
c00156b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00156bd:	83 ec 0c             	sub    esp,0xc
c00156c0:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00156c6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00156cc:	50                   	push   eax
c00156cd:	e8 a6 61 ff ff       	call   c000b878 <GDT::setup()>
c00156d2:	83 c4 0c             	add    esp,0xc
c00156d5:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00156db:	6a 00                	push   0x0
c00156dd:	68 ef be ad de       	push   0xdeadbeef
c00156e2:	57                   	push   edi
c00156e3:	e8 26 84 ff ff       	call   c000db0e <TSS::setup(unsigned long, unsigned long)>
c00156e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156eb:	e8 fe 83 ff ff       	call   c000daee <TSS::flush()>
c00156f0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00156f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00156f9:	e8 d4 63 ff ff       	call   c000bad2 <IDT::setup()>
c00156fe:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0015705:	e8 2a a6 00 00       	call   c001fd34 <CPU::writeDR7(unsigned long)>
c001570a:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0015714:	e8 a8 6e ff ff       	call   c000c5c1 <Phys::allocatePage()>
c0015719:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001571f:	89 30                	mov    DWORD PTR [eax],esi
c0015721:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015727:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001572a:	58                   	pop    eax
c001572b:	5a                   	pop    edx
c001572c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0015732:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015736:	e8 a3 93 ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c001573b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001573e:	e8 f7 f3 ff ff       	call   c0014b3a <CPU::detectFeatures()>
c0015743:	e8 22 c3 ff ff       	call   c0011a6a <setupInterruptController()>
c0015748:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001574e:	a1 e0 45 02 c0       	mov    eax,ds:0xc00245e0
c0015753:	83 e0 10             	and    eax,0x10
c0015756:	83 f8 01             	cmp    eax,0x1
c0015759:	19 c0                	sbb    eax,eax
c001575b:	83 e0 46             	and    eax,0x46
c001575e:	83 c0 1e             	add    eax,0x1e
c0015761:	89 04 24             	mov    DWORD PTR [esp],eax
c0015764:	e8 a7 d6 ff ff       	call   c0012e10 <setupTimer(int)>
c0015769:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001576f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015772:	e8 99 fe ff ff       	call   c0015610 <CPU::setupFeatures()>
c0015777:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001577a:	e8 3f f1 ff ff       	call   c00148be <CPU::displayFeatures()>
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	5b                   	pop    ebx
c0015783:	31 c0                	xor    eax,eax
c0015785:	5e                   	pop    esi
c0015786:	5f                   	pop    edi
c0015787:	c3                   	ret    

c0015788 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015788:	56                   	push   esi
c0015789:	53                   	push   ebx
c001578a:	51                   	push   ecx
c001578b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001578f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015793:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c0015796:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015799:	88 c1                	mov    cl,al
c001579b:	c0 e9 06             	shr    cl,0x6
c001579e:	88 0c 24             	mov    BYTE PTR [esp],cl
c00157a1:	88 c1                	mov    cl,al
c00157a3:	66 c1 e8 03          	shr    ax,0x3
c00157a7:	83 e1 07             	and    ecx,0x7
c00157aa:	83 e0 07             	and    eax,0x7
c00157ad:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c00157b1:	88 06                	mov    BYTE PTR [esi],al
c00157b3:	74 7f                	je     c0015834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c00157b5:	80 f9 04             	cmp    cl,0x4
c00157b8:	74 7a                	je     c0015834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c00157ba:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00157be:	75 05                	jne    c00157c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c00157c0:	80 f9 05             	cmp    cl,0x5
c00157c3:	74 6f                	je     c0015834 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c00157c5:	84 c9                	test   cl,cl
c00157c7:	75 05                	jne    c00157ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c00157c9:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00157cc:	eb 3c                	jmp    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157ce:	80 f9 01             	cmp    cl,0x1
c00157d1:	75 05                	jne    c00157d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c00157d3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00157d6:	eb 32                	jmp    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157d8:	80 f9 02             	cmp    cl,0x2
c00157db:	75 05                	jne    c00157e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c00157dd:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00157e0:	eb 28                	jmp    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157e2:	31 c0                	xor    eax,eax
c00157e4:	80 f9 03             	cmp    cl,0x3
c00157e7:	75 05                	jne    c00157ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00157e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00157ec:	eb 1c                	jmp    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157ee:	80 f9 05             	cmp    cl,0x5
c00157f1:	75 05                	jne    c00157f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00157f3:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00157f6:	eb 12                	jmp    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00157f8:	80 f9 06             	cmp    cl,0x6
c00157fb:	75 05                	jne    c0015802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00157fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0015800:	eb 08                	jmp    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015802:	80 f9 07             	cmp    cl,0x7
c0015805:	75 03                	jne    c001580a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015807:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c001580a:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c001580e:	75 10                	jne    c0015820 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c0015810:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0015814:	b9 03 00 00 00       	mov    ecx,0x3
c0015819:	01 d0                	add    eax,edx
c001581b:	e9 42 01 00 00       	jmp    c0015962 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015820:	b9 02 00 00 00       	mov    ecx,0x2
c0015825:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c0015829:	0f 85 33 01 00 00    	jne    c0015962 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001582f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0015832:	eb 18                	jmp    c001584c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c0015834:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015838:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c001583d:	80 f9 05             	cmp    cl,0x5
c0015840:	0f 94 c0             	sete   al
c0015843:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c0015847:	74 0d                	je     c0015856 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015849:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001584c:	b9 06 00 00 00       	mov    ecx,0x6
c0015851:	e9 0c 01 00 00       	jmp    c0015962 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015856:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c001585a:	0f 84 06 01 00 00    	je     c0015966 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015860:	80 f9 04             	cmp    cl,0x4
c0015863:	0f 85 06 01 00 00    	jne    c001596f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015869:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c001586c:	89 c6                	mov    esi,eax
c001586e:	88 c1                	mov    cl,al
c0015870:	66 c1 ee 03          	shr    si,0x3
c0015874:	c0 e9 06             	shr    cl,0x6
c0015877:	83 e6 07             	and    esi,0x7
c001587a:	24 07                	and    al,0x7
c001587c:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015880:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015884:	89 f1                	mov    ecx,esi
c0015886:	75 05                	jne    c001588d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015888:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c001588b:	eb 4b                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001588d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0015892:	75 05                	jne    c0015899 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c0015894:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c0015897:	eb 3f                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015899:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001589e:	75 05                	jne    c00158a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c00158a0:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c00158a3:	eb 33                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158a5:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00158aa:	75 05                	jne    c00158b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c00158ac:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00158af:	eb 27                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158b1:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c00158b6:	75 05                	jne    c00158bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c00158b8:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c00158bb:	eb 1b                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158bd:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00158c2:	75 05                	jne    c00158c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c00158c4:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c00158c7:	eb 0f                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158c9:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c00158ce:	75 05                	jne    c00158d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c00158d0:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c00158d3:	eb 03                	jmp    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00158d5:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00158d8:	84 c9                	test   cl,cl
c00158da:	75 05                	jne    c00158e1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00158dc:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c00158df:	eb 3c                	jmp    c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158e1:	80 f9 01             	cmp    cl,0x1
c00158e4:	75 05                	jne    c00158eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00158e6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00158e9:	eb 32                	jmp    c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158eb:	80 f9 02             	cmp    cl,0x2
c00158ee:	75 05                	jne    c00158f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00158f0:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00158f3:	eb 28                	jmp    c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158f5:	80 f9 03             	cmp    cl,0x3
c00158f8:	75 05                	jne    c00158ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00158fa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158fd:	eb 1e                	jmp    c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00158ff:	31 c0                	xor    eax,eax
c0015901:	80 f9 04             	cmp    cl,0x4
c0015904:	74 17                	je     c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015906:	80 f9 05             	cmp    cl,0x5
c0015909:	75 05                	jne    c0015910 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001590b:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c001590e:	eb 0d                	jmp    c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015910:	80 f9 06             	cmp    cl,0x6
c0015913:	75 05                	jne    c001591a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c0015915:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0015918:	eb 03                	jmp    c001591d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001591a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c001591d:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015922:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c0015926:	0f 94 c2             	sete   dl
c0015929:	d3 e0                	shl    eax,cl
c001592b:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c001592f:	74 07                	je     c0015938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c0015931:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015934:	31 d2                	xor    edx,edx
c0015936:	eb 23                	jmp    c001595b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0015938:	01 f0                	add    eax,esi
c001593a:	b9 03 00 00 00       	mov    ecx,0x3
c001593f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015943:	74 33                	je     c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015945:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015949:	75 0d                	jne    c0015958 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c001594b:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001594f:	01 c8                	add    eax,ecx
c0015951:	b9 04 00 00 00       	mov    ecx,0x4
c0015956:	eb 20                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015958:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001595b:	b9 07 00 00 00       	mov    ecx,0x7
c0015960:	eb 16                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015962:	31 d2                	xor    edx,edx
c0015964:	eb 12                	jmp    c0015978 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015966:	b9 02 00 00 00       	mov    ecx,0x2
c001596b:	b2 01                	mov    dl,0x1
c001596d:	eb 07                	jmp    c0015976 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c001596f:	31 d2                	xor    edx,edx
c0015971:	b9 02 00 00 00       	mov    ecx,0x2
c0015976:	31 c0                	xor    eax,eax
c0015978:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001597c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001597e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015982:	88 11                	mov    BYTE PTR [ecx],dl
c0015984:	5a                   	pop    edx
c0015985:	5b                   	pop    ebx
c0015986:	5e                   	pop    esi
c0015987:	c3                   	ret    

c0015988 <Krnl::panic(char const*)>:
c0015988:	55                   	push   ebp
c0015989:	89 e5                	mov    ebp,esp
c001598b:	53                   	push   ebx
c001598c:	51                   	push   ecx
c001598d:	a1 10 50 02 c0       	mov    eax,ds:0xc0025010
c0015992:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015995:	85 c0                	test   eax,eax
c0015997:	74 02                	je     c001599b <Krnl::panic(char const*)+0x13>
c0015999:	ff d0                	call   eax
c001599b:	fa                   	cli    
c001599c:	50                   	push   eax
c001599d:	c6 05 14 50 02 c0 01 	mov    BYTE PTR ds:0xc0025014,0x1
c00159a4:	50                   	push   eax
c00159a5:	c6 05 00 3a 02 c0 00 	mov    BYTE PTR ds:0xc0023a00,0x0
c00159ac:	53                   	push   ebx
c00159ad:	68 f0 26 02 c0       	push   0xc00226f0
c00159b2:	e8 a2 97 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00159b7:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00159bc:	5a                   	pop    edx
c00159bd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00159c3:	51                   	push   ecx
c00159c4:	e8 84 79 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c00159c9:	83 c4 0c             	add    esp,0xc
c00159cc:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00159d1:	6a 01                	push   0x1
c00159d3:	6a 0f                	push   0xf
c00159d5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159db:	50                   	push   eax
c00159dc:	e8 ab 73 ff ff       	call   c000cd8c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00159e1:	58                   	pop    eax
c00159e2:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00159e7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159ed:	50                   	push   eax
c00159ee:	e8 fd 7b ff ff       	call   c000d5f0 <VgaText::clearScreen()>
c00159f3:	58                   	pop    eax
c00159f4:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c00159f9:	5a                   	pop    edx
c00159fa:	68 09 27 02 c0       	push   0xc0022709
c00159ff:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a05:	51                   	push   ecx
c0015a06:	e8 63 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a0b:	58                   	pop    eax
c0015a0c:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015a11:	5a                   	pop    edx
c0015a12:	68 b0 27 02 c0       	push   0xc00227b0
c0015a17:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a1d:	51                   	push   ecx
c0015a1e:	e8 4b 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a23:	58                   	pop    eax
c0015a24:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015a29:	5a                   	pop    edx
c0015a2a:	68 25 27 02 c0       	push   0xc0022725
c0015a2f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a35:	51                   	push   ecx
c0015a36:	e8 33 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a3b:	58                   	pop    eax
c0015a3c:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015a41:	5a                   	pop    edx
c0015a42:	53                   	push   ebx
c0015a43:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a49:	51                   	push   ecx
c0015a4a:	e8 1f 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a4f:	5b                   	pop    ebx
c0015a50:	58                   	pop    eax
c0015a51:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015a56:	68 45 27 02 c0       	push   0xc0022745
c0015a5b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a61:	50                   	push   eax
c0015a62:	e8 07 7d ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a67:	58                   	pop    eax
c0015a68:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015a6d:	5a                   	pop    edx
c0015a6e:	68 ec 27 02 c0       	push   0xc00227ec
c0015a73:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a79:	51                   	push   ecx
c0015a7a:	e8 ef 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a7f:	5b                   	pop    ebx
c0015a80:	58                   	pop    eax
c0015a81:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015a86:	68 25 27 02 c0       	push   0xc0022725
c0015a8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a91:	50                   	push   eax
c0015a92:	e8 d7 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015a97:	58                   	pop    eax
c0015a98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a9d:	5a                   	pop    edx
c0015a9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015aa1:	83 c0 0c             	add    eax,0xc
c0015aa4:	50                   	push   eax
c0015aa5:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015aaa:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ab0:	51                   	push   ecx
c0015ab1:	e8 b8 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ab6:	5b                   	pop    ebx
c0015ab7:	58                   	pop    eax
c0015ab8:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015abd:	68 44 27 02 c0       	push   0xc0022744
c0015ac2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ac8:	50                   	push   eax
c0015ac9:	e8 a0 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ace:	58                   	pop    eax
c0015acf:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015ad4:	5a                   	pop    edx
c0015ad5:	68 18 28 02 c0       	push   0xc0022818
c0015ada:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ae0:	51                   	push   ecx
c0015ae1:	e8 88 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ae6:	5b                   	pop    ebx
c0015ae7:	58                   	pop    eax
c0015ae8:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015aed:	68 58 28 02 c0       	push   0xc0022858
c0015af2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015af8:	50                   	push   eax
c0015af9:	e8 70 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015afe:	58                   	pop    eax
c0015aff:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015b04:	5a                   	pop    edx
c0015b05:	68 30 27 02 c0       	push   0xc0022730
c0015b0a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b10:	51                   	push   ecx
c0015b11:	e8 58 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b16:	5b                   	pop    ebx
c0015b17:	58                   	pop    eax
c0015b18:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015b1b:	50                   	push   eax
c0015b1c:	68 48 27 02 c0       	push   0xc0022748
c0015b21:	e8 33 96 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015b26:	58                   	pop    eax
c0015b27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b2a:	5a                   	pop    edx
c0015b2b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015b2e:	51                   	push   ecx
c0015b2f:	68 51 27 02 c0       	push   0xc0022751
c0015b34:	e8 20 96 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015b39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b3c:	5b                   	pop    ebx
c0015b3d:	5a                   	pop    edx
c0015b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b40:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015b43:	51                   	push   ecx
c0015b44:	68 5a 27 02 c0       	push   0xc002275a
c0015b49:	e8 0b 96 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015b4e:	5b                   	pop    ebx
c0015b4f:	58                   	pop    eax
c0015b50:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015b55:	68 9c 28 02 c0       	push   0xc002289c
c0015b5a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b60:	50                   	push   eax
c0015b61:	e8 08 7c ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b66:	58                   	pop    eax
c0015b67:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015b6c:	5a                   	pop    edx
c0015b6d:	68 63 27 02 c0       	push   0xc0022763
c0015b72:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b78:	51                   	push   ecx
c0015b79:	e8 f0 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015b7e:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015b83:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b89:	e8 ca 9e 00 00       	call   c001fa58 <CPU::readCR0()>
c0015b8e:	5a                   	pop    edx
c0015b8f:	59                   	pop    ecx
c0015b90:	50                   	push   eax
c0015b91:	53                   	push   ebx
c0015b92:	e8 fd 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015b97:	5b                   	pop    ebx
c0015b98:	58                   	pop    eax
c0015b99:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015b9e:	68 6d 27 02 c0       	push   0xc002276d
c0015ba3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015ba9:	50                   	push   eax
c0015baa:	e8 bf 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015baf:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015bb4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015bba:	e8 87 a1 00 00       	call   c001fd46 <CPU::readCR2()>
c0015bbf:	5a                   	pop    edx
c0015bc0:	59                   	pop    ecx
c0015bc1:	50                   	push   eax
c0015bc2:	53                   	push   ebx
c0015bc3:	e8 cc 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015bc8:	5b                   	pop    ebx
c0015bc9:	58                   	pop    eax
c0015bca:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015bcf:	68 77 27 02 c0       	push   0xc0022777
c0015bd4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bda:	50                   	push   eax
c0015bdb:	e8 8e 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015be0:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015be5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015beb:	e8 f5 9a 00 00       	call   c001f6e5 <CPU::readCR3()>
c0015bf0:	5a                   	pop    edx
c0015bf1:	59                   	pop    ecx
c0015bf2:	50                   	push   eax
c0015bf3:	53                   	push   ebx
c0015bf4:	e8 9b 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015bf9:	5b                   	pop    ebx
c0015bfa:	58                   	pop    eax
c0015bfb:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c00:	68 8a 27 02 c0       	push   0xc002278a
c0015c05:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c0b:	50                   	push   eax
c0015c0c:	e8 5d 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c11:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c16:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c1c:	e8 01 a1 00 00       	call   c001fd22 <CPU::readCR4()>
c0015c21:	5a                   	pop    edx
c0015c22:	59                   	pop    ecx
c0015c23:	50                   	push   eax
c0015c24:	53                   	push   ebx
c0015c25:	e8 6a 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c2a:	5b                   	pop    ebx
c0015c2b:	58                   	pop    eax
c0015c2c:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c31:	68 94 27 02 c0       	push   0xc0022794
c0015c36:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c3c:	50                   	push   eax
c0015c3d:	e8 2c 7b ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c42:	5a                   	pop    edx
c0015c43:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c48:	59                   	pop    ecx
c0015c49:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015c4c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c52:	53                   	push   ebx
c0015c53:	50                   	push   eax
c0015c54:	e8 3b 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c59:	58                   	pop    eax
c0015c5a:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c5f:	5a                   	pop    edx
c0015c60:	68 ab 27 02 c0       	push   0xc00227ab
c0015c65:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c6b:	51                   	push   ecx
c0015c6c:	e8 fd 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015c71:	5b                   	pop    ebx
c0015c72:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c77:	5a                   	pop    edx
c0015c78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015c7b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c81:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015c84:	51                   	push   ecx
c0015c85:	50                   	push   eax
c0015c86:	e8 09 7b ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015c8b:	5b                   	pop    ebx
c0015c8c:	58                   	pop    eax
c0015c8d:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015c92:	68 ab 27 02 c0       	push   0xc00227ab
c0015c97:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c9d:	50                   	push   eax
c0015c9e:	e8 cb 7a ff ff       	call   c000d76e <VgaText::puts(char const*)>
c0015ca3:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015ca6:	59                   	pop    ecx
c0015ca7:	a1 14 5a 02 c0       	mov    eax,ds:0xc0025a14
c0015cac:	5b                   	pop    ebx
c0015cad:	8b 12                	mov    edx,DWORD PTR [edx]
c0015caf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cb5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015cb8:	52                   	push   edx
c0015cb9:	50                   	push   eax
c0015cba:	e8 d5 7a ff ff       	call   c000d794 <VgaText::putx(unsigned int)>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	b2 fe                	mov    dl,0xfe
c0015cc4:	e4 60                	in     al,0x60
c0015cc6:	3c 1c                	cmp    al,0x1c
c0015cc8:	74 04                	je     c0015cce <Krnl::panic(char const*)+0x346>
c0015cca:	3c 5a                	cmp    al,0x5a
c0015ccc:	75 f6                	jne    c0015cc4 <Krnl::panic(char const*)+0x33c>
c0015cce:	e4 64                	in     al,0x64
c0015cd0:	a8 02                	test   al,0x2
c0015cd2:	75 fa                	jne    c0015cce <Krnl::panic(char const*)+0x346>
c0015cd4:	88 d0                	mov    al,dl
c0015cd6:	e6 64                	out    0x64,al
c0015cd8:	fa                   	cli    
c0015cd9:	f4                   	hlt    
c0015cda:	eb e8                	jmp    c0015cc4 <Krnl::panic(char const*)+0x33c>

c0015cdc <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015cdc:	55                   	push   ebp
c0015cdd:	57                   	push   edi
c0015cde:	56                   	push   esi
c0015cdf:	53                   	push   ebx
c0015ce0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015ce6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015ced:	8d 46 01             	lea    eax,[esi+0x1]
c0015cf0:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cf6:	80 fb 40             	cmp    bl,0x40
c0015cf9:	75 19                	jne    c0015d14 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015cfb:	8a 06                	mov    al,BYTE PTR [esi]
c0015cfd:	84 c0                	test   al,al
c0015cff:	74 07                	je     c0015d08 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015d01:	3c 3a                	cmp    al,0x3a
c0015d03:	74 03                	je     c0015d08 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015d05:	46                   	inc    esi
c0015d06:	eb f3                	jmp    c0015cfb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015d08:	84 c0                	test   al,al
c0015d0a:	0f 84 1f 01 00 00    	je     c0015e2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d10:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015d13:	46                   	inc    esi
c0015d14:	50                   	push   eax
c0015d15:	6a 40                	push   0x40
c0015d17:	6a 00                	push   0x0
c0015d19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d1d:	50                   	push   eax
c0015d1e:	e8 97 a9 fe ff       	call   c00006ba <memset>
c0015d23:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015d2a:	31 d2                	xor    edx,edx
c0015d2c:	83 c4 10             	add    esp,0x10
c0015d2f:	8a 07                	mov    al,BYTE PTR [edi]
c0015d31:	84 c0                	test   al,al
c0015d33:	0f 84 f6 00 00 00    	je     c0015e2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d39:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015d3f:	0f 8f ea 00 00 00    	jg     c0015e2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d45:	3c 0a                	cmp    al,0xa
c0015d47:	0f 85 d3 00 00 00    	jne    c0015e20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015d4d:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015d52:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015d56:	f6 c1 df             	test   cl,0xdf
c0015d59:	0f 94 c2             	sete   dl
c0015d5c:	80 f9 23             	cmp    cl,0x23
c0015d5f:	0f 94 c0             	sete   al
c0015d62:	08 c2                	or     dl,al
c0015d64:	75 47                	jne    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d66:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015d69:	3c 01                	cmp    al,0x1
c0015d6b:	76 40                	jbe    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d6d:	80 f9 5b             	cmp    cl,0x5b
c0015d70:	75 3f                	jne    c0015db1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015d72:	80 fb 40             	cmp    bl,0x40
c0015d75:	75 36                	jne    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015d77:	83 ec 0c             	sub    esp,0xc
c0015d7a:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015d7e:	55                   	push   ebp
c0015d7f:	e8 53 a9 fe ff       	call   c00006d7 <strlen>
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	83 f8 3f             	cmp    eax,0x3f
c0015d8a:	0f 87 9f 00 00 00    	ja     c0015e2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015d90:	50                   	push   eax
c0015d91:	50                   	push   eax
c0015d92:	55                   	push   ebp
c0015d93:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015d97:	55                   	push   ebp
c0015d98:	e8 bc a9 fe ff       	call   c0000759 <strcpy>
c0015d9d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015da0:	e8 32 a9 fe ff       	call   c00006d7 <strlen>
c0015da5:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	31 c9                	xor    ecx,ecx
c0015daf:	eb 76                	jmp    c0015e27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015db1:	80 fb 40             	cmp    bl,0x40
c0015db4:	74 06                	je     c0015dbc <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015db6:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015dba:	eb 19                	jmp    c0015dd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015dbc:	51                   	push   ecx
c0015dbd:	51                   	push   ecx
c0015dbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dc6:	50                   	push   eax
c0015dc7:	e8 de a9 fe ff       	call   c00007aa <strcmp>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	85 c0                	test   eax,eax
c0015dd1:	75 da                	jne    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015dd3:	eb e1                	jmp    c0015db6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015dd5:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015dd8:	84 c0                	test   al,al
c0015dda:	0f 94 c1             	sete   cl
c0015ddd:	3c 3d                	cmp    al,0x3d
c0015ddf:	0f 94 c2             	sete   dl
c0015de2:	08 d1                	or     cl,dl
c0015de4:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015de8:	75 03                	jne    c0015ded <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015dea:	45                   	inc    ebp
c0015deb:	eb e8                	jmp    c0015dd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015ded:	84 c0                	test   al,al
c0015def:	74 3e                	je     c0015e2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015df1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015df5:	52                   	push   edx
c0015df6:	52                   	push   edx
c0015df7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015dfb:	50                   	push   eax
c0015dfc:	56                   	push   esi
c0015dfd:	e8 a8 a9 fe ff       	call   c00007aa <strcmp>
c0015e02:	83 c4 10             	add    esp,0x10
c0015e05:	85 c0                	test   eax,eax
c0015e07:	75 a4                	jne    c0015dad <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e09:	50                   	push   eax
c0015e0a:	8d 55 01             	lea    edx,[ebp+0x1]
c0015e0d:	50                   	push   eax
c0015e0e:	52                   	push   edx
c0015e0f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015e16:	e8 3e a9 fe ff       	call   c0000759 <strcpy>
c0015e1b:	83 c4 10             	add    esp,0x10
c0015e1e:	eb 14                	jmp    c0015e34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015e20:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e23:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015e27:	47                   	inc    edi
c0015e28:	89 ca                	mov    edx,ecx
c0015e2a:	e9 00 ff ff ff       	jmp    c0015d2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015e2f:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015e34:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015e38:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e3e:	5b                   	pop    ebx
c0015e3f:	5e                   	pop    esi
c0015e40:	5f                   	pop    edi
c0015e41:	5d                   	pop    ebp
c0015e42:	c3                   	ret    

c0015e43 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e43:	57                   	push   edi
c0015e44:	56                   	push   esi
c0015e45:	53                   	push   ebx
c0015e46:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015e4c:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015e53:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015e5a:	53                   	push   ebx
c0015e5b:	e8 77 a8 fe ff       	call   c00006d7 <strlen>
c0015e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e63:	89 c7                	mov    edi,eax
c0015e65:	e8 6d a8 fe ff       	call   c00006d7 <strlen>
c0015e6a:	83 c4 10             	add    esp,0x10
c0015e6d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e71:	31 ff                	xor    edi,edi
c0015e73:	3d ff 00 00 00       	cmp    eax,0xff
c0015e78:	0f 87 18 01 00 00    	ja     c0015f96 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015e7e:	51                   	push   ecx
c0015e7f:	51                   	push   ecx
c0015e80:	56                   	push   esi
c0015e81:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015e85:	56                   	push   esi
c0015e86:	e8 ce a8 fe ff       	call   c0000759 <strcpy>
c0015e8b:	58                   	pop    eax
c0015e8c:	5a                   	pop    edx
c0015e8d:	68 94 2c 02 c0       	push   0xc0022c94
c0015e92:	56                   	push   esi
c0015e93:	e8 78 a9 fe ff       	call   c0000810 <strcat>
c0015e98:	59                   	pop    ecx
c0015e99:	58                   	pop    eax
c0015e9a:	53                   	push   ebx
c0015e9b:	56                   	push   esi
c0015e9c:	e8 6f a9 fe ff       	call   c0000810 <strcat>
c0015ea1:	58                   	pop    eax
c0015ea2:	5a                   	pop    edx
c0015ea3:	68 c2 28 02 c0       	push   0xc00228c2
c0015ea8:	56                   	push   esi
c0015ea9:	e8 62 a9 fe ff       	call   c0000810 <strcat>
c0015eae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015eb5:	e8 6a 91 ff ff       	call   c000f024 <operator new(unsigned long)>
c0015eba:	83 c4 0c             	add    esp,0xc
c0015ebd:	89 c3                	mov    ebx,eax
c0015ebf:	ff 35 14 5a 02 c0    	push   DWORD PTR ds:0xc0025a14
c0015ec5:	56                   	push   esi
c0015ec6:	50                   	push   eax
c0015ec7:	e8 c4 97 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0015ecc:	59                   	pop    ecx
c0015ecd:	5e                   	pop    esi
c0015ece:	6a 01                	push   0x1
c0015ed0:	53                   	push   ebx
c0015ed1:	e8 1e 98 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0015ed6:	83 c4 10             	add    esp,0x10
c0015ed9:	85 c0                	test   eax,eax
c0015edb:	74 08                	je     c0015ee5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015edd:	83 ec 0c             	sub    esp,0xc
c0015ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ee2:	53                   	push   ebx
c0015ee3:	eb 2e                	jmp    c0015f13 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015ee5:	52                   	push   edx
c0015ee6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015eea:	50                   	push   eax
c0015eeb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015eef:	50                   	push   eax
c0015ef0:	53                   	push   ebx
c0015ef1:	e8 aa 9a ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0015ef6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015efa:	83 c4 10             	add    esp,0x10
c0015efd:	89 c1                	mov    ecx,eax
c0015eff:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015f03:	75 13                	jne    c0015f18 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015f05:	83 ec 0c             	sub    esp,0xc
c0015f08:	53                   	push   ebx
c0015f09:	e8 44 98 ff ff       	call   c000f752 <File::close()>
c0015f0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f16:	eb 7b                	jmp    c0015f93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015f18:	83 ec 0c             	sub    esp,0xc
c0015f1b:	50                   	push   eax
c0015f1c:	e8 ca 60 ff ff       	call   c000bfeb <malloc>
c0015f21:	89 c6                	mov    esi,eax
c0015f23:	58                   	pop    eax
c0015f24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f26:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015f2a:	52                   	push   edx
c0015f2b:	56                   	push   esi
c0015f2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f34:	53                   	push   ebx
c0015f35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f38:	83 c4 20             	add    esp,0x20
c0015f3b:	85 c0                	test   eax,eax
c0015f3d:	75 0a                	jne    c0015f49 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f43:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015f47:	74 18                	je     c0015f61 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0015f49:	83 ec 0c             	sub    esp,0xc
c0015f4c:	31 ff                	xor    edi,edi
c0015f4e:	53                   	push   ebx
c0015f4f:	e8 fe 97 ff ff       	call   c000f752 <File::close()>
c0015f54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f5c:	83 c4 10             	add    esp,0x10
c0015f5f:	eb 35                	jmp    c0015f96 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f61:	83 ec 0c             	sub    esp,0xc
c0015f64:	53                   	push   ebx
c0015f65:	e8 e8 97 ff ff       	call   c000f752 <File::close()>
c0015f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f72:	83 c4 0c             	add    esp,0xc
c0015f75:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f7c:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0015f83:	56                   	push   esi
c0015f84:	e8 53 fd ff ff       	call   c0015cdc <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f89:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f8c:	89 c7                	mov    edi,eax
c0015f8e:	e8 68 60 ff ff       	call   c000bffb <free>
c0015f93:	83 c4 10             	add    esp,0x10
c0015f96:	81 c4 10 01 00 00    	add    esp,0x110
c0015f9c:	89 f8                	mov    eax,edi
c0015f9e:	5b                   	pop    ebx
c0015f9f:	5e                   	pop    esi
c0015fa0:	5f                   	pop    edi
c0015fa1:	c3                   	ret    

c0015fa2 <Reg::getLine(char*, char*, char*)>:
c0015fa2:	57                   	push   edi
c0015fa3:	56                   	push   esi
c0015fa4:	53                   	push   ebx
c0015fa5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015fa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015fb1:	57                   	push   edi
c0015fb2:	56                   	push   esi
c0015fb3:	53                   	push   ebx
c0015fb4:	68 c7 28 02 c0       	push   0xc00228c7
c0015fb9:	e8 85 fe ff ff       	call   c0015e43 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fbe:	83 c4 10             	add    esp,0x10
c0015fc1:	84 c0                	test   al,al
c0015fc3:	75 10                	jne    c0015fd5 <Reg::getLine(char*, char*, char*)+0x33>
c0015fc5:	57                   	push   edi
c0015fc6:	56                   	push   esi
c0015fc7:	53                   	push   ebx
c0015fc8:	68 ec 28 02 c0       	push   0xc00228ec
c0015fcd:	e8 71 fe ff ff       	call   c0015e43 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fd2:	83 c4 10             	add    esp,0x10
c0015fd5:	5b                   	pop    ebx
c0015fd6:	5e                   	pop    esi
c0015fd7:	5f                   	pop    edi
c0015fd8:	c3                   	ret    

c0015fd9 <Reg::readInt(char*, char*, int*)>:
c0015fd9:	55                   	push   ebp
c0015fda:	57                   	push   edi
c0015fdb:	56                   	push   esi
c0015fdc:	53                   	push   ebx
c0015fdd:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015fe3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015fe7:	57                   	push   edi
c0015fe8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015fef:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015ff6:	e8 a7 ff ff ff       	call   c0015fa2 <Reg::getLine(char*, char*, char*)>
c0015ffb:	83 c4 10             	add    esp,0x10
c0015ffe:	84 c0                	test   al,al
c0016000:	0f 84 b2 00 00 00    	je     c00160b8 <Reg::readInt(char*, char*, int*)+0xdf>
c0016006:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001600a:	80 fa 2b             	cmp    dl,0x2b
c001600d:	74 0c                	je     c001601b <Reg::readInt(char*, char*, int*)+0x42>
c001600f:	80 fa 2d             	cmp    dl,0x2d
c0016012:	75 0e                	jne    c0016022 <Reg::readInt(char*, char*, int*)+0x49>
c0016014:	ba 01 00 00 00       	mov    edx,0x1
c0016019:	eb 0b                	jmp    c0016026 <Reg::readInt(char*, char*, int*)+0x4d>
c001601b:	ba 01 00 00 00       	mov    edx,0x1
c0016020:	eb 02                	jmp    c0016024 <Reg::readInt(char*, char*, int*)+0x4b>
c0016022:	31 d2                	xor    edx,edx
c0016024:	31 c0                	xor    eax,eax
c0016026:	be 0a 00 00 00       	mov    esi,0xa
c001602b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0016030:	75 20                	jne    c0016052 <Reg::readInt(char*, char*, int*)+0x79>
c0016032:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0016036:	80 f9 78             	cmp    cl,0x78
c0016039:	75 0a                	jne    c0016045 <Reg::readInt(char*, char*, int*)+0x6c>
c001603b:	83 c2 02             	add    edx,0x2
c001603e:	be 10 00 00 00       	mov    esi,0x10
c0016043:	eb 0d                	jmp    c0016052 <Reg::readInt(char*, char*, int*)+0x79>
c0016045:	80 f9 62             	cmp    cl,0x62
c0016048:	75 08                	jne    c0016052 <Reg::readInt(char*, char*, int*)+0x79>
c001604a:	83 c2 02             	add    edx,0x2
c001604d:	be 02 00 00 00       	mov    esi,0x2
c0016052:	01 d7                	add    edi,edx
c0016054:	31 d2                	xor    edx,edx
c0016056:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016058:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001605c:	84 db                	test   bl,bl
c001605e:	0f 94 c3             	sete   bl
c0016061:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0016066:	0f 94 c1             	sete   cl
c0016069:	08 cb                	or     bl,cl
c001606b:	75 3a                	jne    c00160a7 <Reg::readInt(char*, char*, int*)+0xce>
c001606d:	0f af d6             	imul   edx,esi
c0016070:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0016075:	83 fe 10             	cmp    esi,0x10
c0016078:	75 26                	jne    c00160a0 <Reg::readInt(char*, char*, int*)+0xc7>
c001607a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001607e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016081:	89 e9                	mov    ecx,ebp
c0016083:	80 f9 05             	cmp    cl,0x5
c0016086:	77 06                	ja     c001608e <Reg::readInt(char*, char*, int*)+0xb5>
c0016088:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001608c:	eb 16                	jmp    c00160a4 <Reg::readInt(char*, char*, int*)+0xcb>
c001608e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016092:	83 e9 61             	sub    ecx,0x61
c0016095:	80 f9 05             	cmp    cl,0x5
c0016098:	77 06                	ja     c00160a0 <Reg::readInt(char*, char*, int*)+0xc7>
c001609a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001609e:	eb 04                	jmp    c00160a4 <Reg::readInt(char*, char*, int*)+0xcb>
c00160a0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00160a4:	47                   	inc    edi
c00160a5:	eb af                	jmp    c0016056 <Reg::readInt(char*, char*, int*)+0x7d>
c00160a7:	84 c0                	test   al,al
c00160a9:	74 02                	je     c00160ad <Reg::readInt(char*, char*, int*)+0xd4>
c00160ab:	f7 da                	neg    edx
c00160ad:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00160b4:	89 10                	mov    DWORD PTR [eax],edx
c00160b6:	88 d8                	mov    al,bl
c00160b8:	81 c4 ec 00 00 00    	add    esp,0xec
c00160be:	5b                   	pop    ebx
c00160bf:	5e                   	pop    esi
c00160c0:	5f                   	pop    edi
c00160c1:	5d                   	pop    ebp
c00160c2:	c3                   	ret    

c00160c3 <Reg::readString(char*, char*, char*, int)>:
c00160c3:	57                   	push   edi
c00160c4:	56                   	push   esi
c00160c5:	53                   	push   ebx
c00160c6:	81 ec d4 00 00 00    	sub    esp,0xd4
c00160cc:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00160d0:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00160d7:	57                   	push   edi
c00160d8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160df:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160e6:	e8 b7 fe ff ff       	call   c0015fa2 <Reg::getLine(char*, char*, char*)>
c00160eb:	83 c4 10             	add    esp,0x10
c00160ee:	89 c6                	mov    esi,eax
c00160f0:	84 c0                	test   al,al
c00160f2:	74 44                	je     c0016138 <Reg::readString(char*, char*, char*, int)+0x75>
c00160f4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00160fb:	31 c0                	xor    eax,eax
c00160fd:	4a                   	dec    edx
c00160fe:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0016101:	84 c9                	test   cl,cl
c0016103:	74 0f                	je     c0016114 <Reg::readString(char*, char*, char*, int)+0x51>
c0016105:	39 c2                	cmp    edx,eax
c0016107:	7e 0b                	jle    c0016114 <Reg::readString(char*, char*, char*, int)+0x51>
c0016109:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001610c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0016111:	40                   	inc    eax
c0016112:	eb ea                	jmp    c00160fe <Reg::readString(char*, char*, char*, int)+0x3b>
c0016114:	83 ec 0c             	sub    esp,0xc
c0016117:	53                   	push   ebx
c0016118:	e8 ba a5 fe ff       	call   c00006d7 <strlen>
c001611d:	83 c4 10             	add    esp,0x10
c0016120:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0016125:	75 11                	jne    c0016138 <Reg::readString(char*, char*, char*, int)+0x75>
c0016127:	83 ec 0c             	sub    esp,0xc
c001612a:	53                   	push   ebx
c001612b:	e8 a7 a5 fe ff       	call   c00006d7 <strlen>
c0016130:	83 c4 10             	add    esp,0x10
c0016133:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016138:	81 c4 d0 00 00 00    	add    esp,0xd0
c001613e:	89 f0                	mov    eax,esi
c0016140:	5b                   	pop    ebx
c0016141:	5e                   	pop    esi
c0016142:	5f                   	pop    edi
c0016143:	c3                   	ret    

c0016144 <Reg::readBool(char*, char*, bool*)>:
c0016144:	83 ec 20             	sub    esp,0x20
c0016147:	8d 44 24 10          	lea    eax,[esp+0x10]
c001614b:	50                   	push   eax
c001614c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016150:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016154:	e8 80 fe ff ff       	call   c0015fd9 <Reg::readInt(char*, char*, int*)>
c0016159:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001615d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016162:	0f 95 02             	setne  BYTE PTR [edx]
c0016165:	83 c4 2c             	add    esp,0x2c
c0016168:	c3                   	ret    

c0016169 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016169:	53                   	push   ebx
c001616a:	83 ec 1c             	sub    esp,0x1c
c001616d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016171:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016175:	50                   	push   eax
c0016176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617e:	e8 c1 ff ff ff       	call   c0016144 <Reg::readBool(char*, char*, bool*)>
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	84 c0                	test   al,al
c0016188:	74 04                	je     c001618e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001618a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001618e:	83 c4 18             	add    esp,0x18
c0016191:	88 d8                	mov    al,bl
c0016193:	5b                   	pop    ebx
c0016194:	c3                   	ret    

c0016195 <Reg::readIntWithDefault(char*, char*, int)>:
c0016195:	53                   	push   ebx
c0016196:	83 ec 1c             	sub    esp,0x1c
c0016199:	8d 44 24 10          	lea    eax,[esp+0x10]
c001619d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00161a1:	50                   	push   eax
c00161a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161aa:	e8 2a fe ff ff       	call   c0015fd9 <Reg::readInt(char*, char*, int*)>
c00161af:	83 c4 10             	add    esp,0x10
c00161b2:	84 c0                	test   al,al
c00161b4:	74 04                	je     c00161ba <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00161b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00161ba:	83 c4 18             	add    esp,0x18
c00161bd:	89 d8                	mov    eax,ebx
c00161bf:	5b                   	pop    ebx
c00161c0:	c3                   	ret    

c00161c1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00161c1:	56                   	push   esi
c00161c2:	53                   	push   ebx
c00161c3:	51                   	push   ecx
c00161c4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00161c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00161cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161d0:	56                   	push   esi
c00161d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161d9:	e8 e5 fe ff ff       	call   c00160c3 <Reg::readString(char*, char*, char*, int)>
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	84 c0                	test   al,al
c00161e3:	74 02                	je     c00161e7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00161e5:	89 f3                	mov    ebx,esi
c00161e7:	5a                   	pop    edx
c00161e8:	89 d8                	mov    eax,ebx
c00161ea:	5b                   	pop    ebx
c00161eb:	5e                   	pop    esi
c00161ec:	c3                   	ret    

c00161ed <Sys::exit(regs*)>:
c00161ed:	83 ec 18             	sub    esp,0x18
c00161f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00161f4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00161f7:	e8 a6 31 00 00       	call   c00193a2 <terminateTask(int)>
c00161fc:	83 c8 ff             	or     eax,0xffffffff
c00161ff:	89 c2                	mov    edx,eax
c0016201:	83 c4 1c             	add    esp,0x1c
c0016204:	c3                   	ret    

c0016205 <Sys::loadDLL(regs*)>:
c0016205:	56                   	push   esi
c0016206:	31 d2                	xor    edx,edx
c0016208:	53                   	push   ebx
c0016209:	b8 01 00 00 00       	mov    eax,0x1
c001620e:	51                   	push   ecx
c001620f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016213:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016217:	74 7d                	je     c0016296 <Sys::loadDLL(regs*)+0x91>
c0016219:	83 ec 0c             	sub    esp,0xc
c001621c:	68 14 01 00 00       	push   0x114
c0016221:	e8 fe 8d ff ff       	call   c000f024 <operator new(unsigned long)>
c0016226:	89 c3                	mov    ebx,eax
c0016228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622d:	83 c4 0c             	add    esp,0xc
c0016230:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0016233:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016236:	53                   	push   ebx
c0016237:	e8 54 94 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001623c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001623f:	e8 1e 97 ff ff       	call   c000f962 <File::exists()>
c0016244:	83 c4 10             	add    esp,0x10
c0016247:	84 c0                	test   al,al
c0016249:	8b 03                	mov    eax,DWORD PTR [ebx]
c001624b:	75 11                	jne    c001625e <Sys::loadDLL(regs*)+0x59>
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	53                   	push   ebx
c0016251:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016254:	83 c4 10             	add    esp,0x10
c0016257:	b8 03 00 00 00       	mov    eax,0x3
c001625c:	eb 36                	jmp    c0016294 <Sys::loadDLL(regs*)+0x8f>
c001625e:	83 ec 0c             	sub    esp,0xc
c0016261:	53                   	push   ebx
c0016262:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016265:	58                   	pop    eax
c0016266:	5a                   	pop    edx
c0016267:	6a 00                	push   0x0
c0016269:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001626c:	e8 1f 21 00 00       	call   c0018390 <Thr::loadDLL(char const*, bool)>
c0016271:	83 c4 10             	add    esp,0x10
c0016274:	89 c1                	mov    ecx,eax
c0016276:	31 d2                	xor    edx,edx
c0016278:	b8 04 00 00 00       	mov    eax,0x4
c001627d:	85 c9                	test   ecx,ecx
c001627f:	74 15                	je     c0016296 <Sys::loadDLL(regs*)+0x91>
c0016281:	53                   	push   ebx
c0016282:	53                   	push   ebx
c0016283:	ff 35 c8 45 02 c0    	push   DWORD PTR ds:0xc00245c8
c0016289:	51                   	push   ecx
c001628a:	e8 c7 22 00 00       	call   c0018556 <Thr::executeDLL(unsigned long, void*)>
c001628f:	83 c4 10             	add    esp,0x10
c0016292:	31 c0                	xor    eax,eax
c0016294:	31 d2                	xor    edx,edx
c0016296:	59                   	pop    ecx
c0016297:	5b                   	pop    ebx
c0016298:	5e                   	pop    esi
c0016299:	c3                   	ret    

c001629a <Sys::read(regs*)>:
c001629a:	57                   	push   edi
c001629b:	56                   	push   esi
c001629c:	53                   	push   ebx
c001629d:	83 ec 10             	sub    esp,0x10
c00162a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00162a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00162a7:	83 f8 02             	cmp    eax,0x2
c00162aa:	77 10                	ja     c00162bc <Sys::read(regs*)+0x22>
c00162ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162b4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00162ba:	eb 0e                	jmp    c00162ca <Sys::read(regs*)+0x30>
c00162bc:	83 ec 0c             	sub    esp,0xc
c00162bf:	50                   	push   eax
c00162c0:	e8 1e 7d ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	89 c1                	mov    ecx,eax
c00162ca:	83 c8 ff             	or     eax,0xffffffff
c00162cd:	85 c9                	test   ecx,ecx
c00162cf:	89 c2                	mov    edx,eax
c00162d1:	74 28                	je     c00162fb <Sys::read(regs*)+0x61>
c00162d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00162db:	83 ec 0c             	sub    esp,0xc
c00162de:	8b 01                	mov    eax,DWORD PTR [ecx]
c00162e0:	31 ff                	xor    edi,edi
c00162e2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00162e6:	52                   	push   edx
c00162e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162ea:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00162ed:	57                   	push   edi
c00162ee:	56                   	push   esi
c00162ef:	51                   	push   ecx
c00162f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00162f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00162f7:	83 c4 20             	add    esp,0x20
c00162fa:	99                   	cdq    
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	5b                   	pop    ebx
c00162ff:	5e                   	pop    esi
c0016300:	5f                   	pop    edi
c0016301:	c3                   	ret    

c0016302 <Sys::sbrk(regs*)>:
c0016302:	56                   	push   esi
c0016303:	53                   	push   ebx
c0016304:	50                   	push   eax
c0016305:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001630e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016311:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016314:	85 db                	test   ebx,ebx
c0016316:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001631c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001631f:	74 02                	je     c0016323 <Sys::sbrk(regs*)+0x21>
c0016321:	79 06                	jns    c0016329 <Sys::sbrk(regs*)+0x27>
c0016323:	89 f0                	mov    eax,esi
c0016325:	31 d2                	xor    edx,edx
c0016327:	eb 2a                	jmp    c0016353 <Sys::sbrk(regs*)+0x51>
c0016329:	83 c8 ff             	or     eax,0xffffffff
c001632c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016332:	89 c2                	mov    edx,eax
c0016334:	77 1d                	ja     c0016353 <Sys::sbrk(regs*)+0x51>
c0016336:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001633c:	50                   	push   eax
c001633d:	c1 ea 0c             	shr    edx,0xc
c0016340:	68 07 04 00 00       	push   0x407
c0016345:	52                   	push   edx
c0016346:	51                   	push   ecx
c0016347:	e8 c0 85 ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c001634c:	89 f0                	mov    eax,esi
c001634e:	31 d2                	xor    edx,edx
c0016350:	83 c4 10             	add    esp,0x10
c0016353:	59                   	pop    ecx
c0016354:	5b                   	pop    ebx
c0016355:	5e                   	pop    esi
c0016356:	c3                   	ret    

c0016357 <Sys::write(regs*)>:
c0016357:	57                   	push   edi
c0016358:	56                   	push   esi
c0016359:	53                   	push   ebx
c001635a:	83 ec 10             	sub    esp,0x10
c001635d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016361:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016364:	83 f8 02             	cmp    eax,0x2
c0016367:	77 10                	ja     c0016379 <Sys::write(regs*)+0x22>
c0016369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016371:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016377:	eb 0e                	jmp    c0016387 <Sys::write(regs*)+0x30>
c0016379:	83 ec 0c             	sub    esp,0xc
c001637c:	50                   	push   eax
c001637d:	e8 61 7c ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016382:	83 c4 10             	add    esp,0x10
c0016385:	89 c1                	mov    ecx,eax
c0016387:	83 c8 ff             	or     eax,0xffffffff
c001638a:	85 c9                	test   ecx,ecx
c001638c:	89 c2                	mov    edx,eax
c001638e:	74 28                	je     c00163b8 <Sys::write(regs*)+0x61>
c0016390:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016398:	31 ff                	xor    edi,edi
c001639a:	83 ec 0c             	sub    esp,0xc
c001639d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001639f:	8d 54 24 18          	lea    edx,[esp+0x18]
c00163a3:	52                   	push   edx
c00163a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163a7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163aa:	57                   	push   edi
c00163ab:	56                   	push   esi
c00163ac:	51                   	push   ecx
c00163ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00163b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163b4:	83 c4 20             	add    esp,0x20
c00163b7:	99                   	cdq    
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	5b                   	pop    ebx
c00163bc:	5e                   	pop    esi
c00163bd:	5f                   	pop    edi
c00163be:	c3                   	ret    

c00163bf <Sys::yield(regs*)>:
c00163bf:	83 ec 0c             	sub    esp,0xc
c00163c2:	e8 ae 25 00 00       	call   c0018975 <lockScheduler()>
c00163c7:	e8 f2 28 00 00       	call   c0018cbe <schedule()>
c00163cc:	e8 a6 25 00 00       	call   c0018977 <unlockScheduler()>
c00163d1:	31 c0                	xor    eax,eax
c00163d3:	31 d2                	xor    edx,edx
c00163d5:	83 c4 0c             	add    esp,0xc
c00163d8:	c3                   	ret    

c00163d9 <sysCallGetPID(regs*)>:
c00163d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00163e3:	89 c2                	mov    edx,eax
c00163e5:	c1 fa 1f             	sar    edx,0x1f
c00163e8:	c3                   	ret    

c00163e9 <sysCallSeekDir(regs*)>:
c00163e9:	31 c0                	xor    eax,eax
c00163eb:	31 d2                	xor    edx,edx
c00163ed:	c3                   	ret    

c00163ee <sysCallTellDir(regs*)>:
c00163ee:	31 c0                	xor    eax,eax
c00163f0:	31 d2                	xor    edx,edx
c00163f2:	c3                   	ret    

c00163f3 <sysCallVerify(regs*)>:
c00163f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f7:	31 d2                	xor    edx,edx
c00163f9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00163fc:	c3                   	ret    

c00163fd <sysCallFork(regs*)>:
c00163fd:	83 c8 ff             	or     eax,0xffffffff
c0016400:	83 ca ff             	or     edx,0xffffffff
c0016403:	c3                   	ret    

c0016404 <sysCallExecve(regs*)>:
c0016404:	83 c8 ff             	or     eax,0xffffffff
c0016407:	83 ca ff             	or     edx,0xffffffff
c001640a:	c3                   	ret    

c001640b <sysCallGetArgc(regs*)>:
c001640b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016410:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016413:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0016419:	89 c2                	mov    edx,eax
c001641b:	c1 fa 1f             	sar    edx,0x1f
c001641e:	c3                   	ret    

c001641f <sysFormatDisk(regs*)>:
c001641f:	56                   	push   esi
c0016420:	53                   	push   ebx
c0016421:	50                   	push   eax
c0016422:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016426:	8b 1d 28 47 02 c0    	mov    ebx,DWORD PTR ds:0xc0024728
c001642c:	eb 2a                	jmp    c0016458 <sysFormatDisk(regs*)+0x39>
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016434:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016437:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016439:	51                   	push   ecx
c001643a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001643d:	51                   	push   ecx
c001643e:	50                   	push   eax
c001643f:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c0016446:	50                   	push   eax
c0016447:	53                   	push   ebx
c0016448:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001644b:	83 c4 20             	add    esp,0x20
c001644e:	89 c1                	mov    ecx,eax
c0016450:	83 f8 08             	cmp    eax,0x8
c0016453:	75 12                	jne    c0016467 <sysFormatDisk(regs*)+0x48>
c0016455:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016458:	85 db                	test   ebx,ebx
c001645a:	75 d2                	jne    c001642e <sysFormatDisk(regs*)+0xf>
c001645c:	b8 03 00 00 00       	mov    eax,0x3
c0016461:	31 d2                	xor    edx,edx
c0016463:	59                   	pop    ecx
c0016464:	5b                   	pop    ebx
c0016465:	5e                   	pop    esi
c0016466:	c3                   	ret    
c0016467:	85 c0                	test   eax,eax
c0016469:	74 13                	je     c001647e <sysFormatDisk(regs*)+0x5f>
c001646b:	31 d2                	xor    edx,edx
c001646d:	b8 01 00 00 00       	mov    eax,0x1
c0016472:	83 f9 09             	cmp    ecx,0x9
c0016475:	74 ec                	je     c0016463 <sysFormatDisk(regs*)+0x44>
c0016477:	b8 02 00 00 00       	mov    eax,0x2
c001647c:	eb e3                	jmp    c0016461 <sysFormatDisk(regs*)+0x42>
c001647e:	31 c0                	xor    eax,eax
c0016480:	eb df                	jmp    c0016461 <sysFormatDisk(regs*)+0x42>

c0016482 <sysSetDiskVolumeLabel(regs*)>:
c0016482:	56                   	push   esi
c0016483:	53                   	push   ebx
c0016484:	53                   	push   ebx
c0016485:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016489:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001648c:	83 f8 19             	cmp    eax,0x19
c001648f:	77 2d                	ja     c00164be <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016491:	8b 0c 85 c0 4b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb440]
c0016498:	85 c9                	test   ecx,ecx
c001649a:	74 22                	je     c00164be <sysSetDiskVolumeLabel(regs*)+0x3c>
c001649c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001649f:	85 d2                	test   edx,edx
c00164a1:	74 1b                	je     c00164be <sysSetDiskVolumeLabel(regs*)+0x3c>
c00164a3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00164a9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00164ab:	52                   	push   edx
c00164ac:	50                   	push   eax
c00164ad:	51                   	push   ecx
c00164ae:	53                   	push   ebx
c00164af:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00164b2:	83 c4 10             	add    esp,0x10
c00164b5:	89 c2                	mov    edx,eax
c00164b7:	c1 fa 1f             	sar    edx,0x1f
c00164ba:	59                   	pop    ecx
c00164bb:	5b                   	pop    ebx
c00164bc:	5e                   	pop    esi
c00164bd:	c3                   	ret    
c00164be:	59                   	pop    ecx
c00164bf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00164c4:	5b                   	pop    ebx
c00164c5:	83 ca ff             	or     edx,0xffffffff
c00164c8:	5e                   	pop    esi
c00164c9:	c3                   	ret    

c00164ca <sysGetDiskVolumeLabel(regs*)>:
c00164ca:	57                   	push   edi
c00164cb:	56                   	push   esi
c00164cc:	53                   	push   ebx
c00164cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00164d4:	83 fa 19             	cmp    edx,0x19
c00164d7:	77 38                	ja     c0016511 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164d9:	8b 0c 95 c0 4b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb440]
c00164e0:	85 c9                	test   ecx,ecx
c00164e2:	74 2d                	je     c0016511 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164e4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00164e7:	85 db                	test   ebx,ebx
c00164e9:	74 26                	je     c0016511 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00164ee:	85 c0                	test   eax,eax
c00164f0:	74 1f                	je     c0016511 <sysGetDiskVolumeLabel(regs*)+0x47>
c00164f2:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00164fd:	50                   	push   eax
c00164fe:	53                   	push   ebx
c00164ff:	52                   	push   edx
c0016500:	51                   	push   ecx
c0016501:	56                   	push   esi
c0016502:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0016505:	83 c4 20             	add    esp,0x20
c0016508:	89 c2                	mov    edx,eax
c001650a:	c1 fa 1f             	sar    edx,0x1f
c001650d:	5b                   	pop    ebx
c001650e:	5e                   	pop    esi
c001650f:	5f                   	pop    edi
c0016510:	c3                   	ret    
c0016511:	5b                   	pop    ebx
c0016512:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016517:	5e                   	pop    esi
c0016518:	83 ca ff             	or     edx,0xffffffff
c001651b:	5f                   	pop    edi
c001651c:	c3                   	ret    

c001651d <sysShutdown(regs*)>:
c001651d:	57                   	push   edi
c001651e:	56                   	push   esi
c001651f:	56                   	push   esi
c0016520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016524:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016527:	85 c0                	test   eax,eax
c0016529:	74 18                	je     c0016543 <sysShutdown(regs*)+0x26>
c001652b:	83 f8 01             	cmp    eax,0x1
c001652e:	74 51                	je     c0016581 <sysShutdown(regs*)+0x64>
c0016530:	83 ce ff             	or     esi,0xffffffff
c0016533:	83 cf ff             	or     edi,0xffffffff
c0016536:	83 f8 02             	cmp    eax,0x2
c0016539:	74 2a                	je     c0016565 <sysShutdown(regs*)+0x48>
c001653b:	59                   	pop    ecx
c001653c:	89 f0                	mov    eax,esi
c001653e:	5e                   	pop    esi
c001653f:	89 fa                	mov    edx,edi
c0016541:	5f                   	pop    edi
c0016542:	c3                   	ret    
c0016543:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0016548:	83 ce ff             	or     esi,0xffffffff
c001654b:	83 cf ff             	or     edi,0xffffffff
c001654e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016550:	6a 00                	push   0x0
c0016552:	6a 00                	push   0x0
c0016554:	6a 00                	push   0x0
c0016556:	50                   	push   eax
c0016557:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001655a:	83 c4 10             	add    esp,0x10
c001655d:	89 f0                	mov    eax,esi
c001655f:	89 fa                	mov    edx,edi
c0016561:	59                   	pop    ecx
c0016562:	5e                   	pop    esi
c0016563:	5f                   	pop    edi
c0016564:	c3                   	ret    
c0016565:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001656a:	8b 10                	mov    edx,DWORD PTR [eax]
c001656c:	6a 00                	push   0x0
c001656e:	6a 00                	push   0x0
c0016570:	6a 01                	push   0x1
c0016572:	50                   	push   eax
c0016573:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016576:	83 c4 10             	add    esp,0x10
c0016579:	89 f0                	mov    eax,esi
c001657b:	89 fa                	mov    edx,edi
c001657d:	59                   	pop    ecx
c001657e:	5e                   	pop    esi
c001657f:	5f                   	pop    edi
c0016580:	c3                   	ret    
c0016581:	a1 40 4c 02 c0       	mov    eax,ds:0xc0024c40
c0016586:	85 c0                	test   eax,eax
c0016588:	74 02                	je     c001658c <sysShutdown(regs*)+0x6f>
c001658a:	ff d0                	call   eax
c001658c:	31 f6                	xor    esi,esi
c001658e:	59                   	pop    ecx
c001658f:	31 ff                	xor    edi,edi
c0016591:	89 f0                	mov    eax,esi
c0016593:	5e                   	pop    esi
c0016594:	89 fa                	mov    edx,edi
c0016596:	5f                   	pop    edi
c0016597:	c3                   	ret    

c0016598 <sysCallGetCwd(regs*)>:
c0016598:	83 ec 10             	sub    esp,0x10
c001659b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001659f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00165a2:	52                   	push   edx
c00165a3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00165a6:	51                   	push   ecx
c00165a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165af:	50                   	push   eax
c00165b0:	e8 4c 94 ff ff       	call   c000fa01 <getcwd(Process*, char*, int)>
c00165b5:	89 c2                	mov    edx,eax
c00165b7:	83 c4 1c             	add    esp,0x1c
c00165ba:	c1 fa 1f             	sar    edx,0x1f
c00165bd:	c3                   	ret    

c00165be <sysCallSetCwd(regs*)>:
c00165be:	83 ec 14             	sub    esp,0x14
c00165c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165c8:	50                   	push   eax
c00165c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165ce:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00165d1:	52                   	push   edx
c00165d2:	e8 54 94 ff ff       	call   c000fa2b <setcwd(Process*, char*)>
c00165d7:	89 c2                	mov    edx,eax
c00165d9:	83 c4 1c             	add    esp,0x1c
c00165dc:	c1 fa 1f             	sar    edx,0x1f
c00165df:	c3                   	ret    

c00165e0 <sysCallRealpath(regs*)>:
c00165e0:	53                   	push   ebx
c00165e1:	83 ec 08             	sub    esp,0x8
c00165e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165e8:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00165eb:	85 c9                	test   ecx,ecx
c00165ed:	74 35                	je     c0016624 <sysCallRealpath(regs*)+0x44>
c00165ef:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165f2:	31 d2                	xor    edx,edx
c00165f4:	b8 01 00 00 00       	mov    eax,0x1
c00165f9:	85 db                	test   ebx,ebx
c00165fb:	75 05                	jne    c0016602 <sysCallRealpath(regs*)+0x22>
c00165fd:	83 c4 08             	add    esp,0x8
c0016600:	5b                   	pop    ebx
c0016601:	c3                   	ret    
c0016602:	50                   	push   eax
c0016603:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016608:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001660b:	05 0c 01 00 00       	add    eax,0x10c
c0016610:	50                   	push   eax
c0016611:	51                   	push   ecx
c0016612:	53                   	push   ebx
c0016613:	e8 ce 8e ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c0016618:	83 c4 10             	add    esp,0x10
c001661b:	31 c0                	xor    eax,eax
c001661d:	31 d2                	xor    edx,edx
c001661f:	83 c4 08             	add    esp,0x8
c0016622:	5b                   	pop    ebx
c0016623:	c3                   	ret    
c0016624:	b8 01 00 00 00       	mov    eax,0x1
c0016629:	31 d2                	xor    edx,edx
c001662b:	eb f2                	jmp    c001661f <sysCallRealpath(regs*)+0x3f>

c001662d <sysCallReadDir(regs*)>:
c001662d:	53                   	push   ebx
c001662e:	83 ec 18             	sub    esp,0x18
c0016631:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016635:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016638:	83 f8 02             	cmp    eax,0x2
c001663b:	76 56                	jbe    c0016693 <sysCallReadDir(regs*)+0x66>
c001663d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016640:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016646:	77 57                	ja     c001669f <sysCallReadDir(regs*)+0x72>
c0016648:	83 ec 0c             	sub    esp,0xc
c001664b:	50                   	push   eax
c001664c:	e8 92 79 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016651:	83 c4 10             	add    esp,0x10
c0016654:	85 c0                	test   eax,eax
c0016656:	74 57                	je     c00166af <sysCallReadDir(regs*)+0x82>
c0016658:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	8b 10                	mov    edx,DWORD PTR [eax]
c0016665:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016669:	51                   	push   ecx
c001666a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001666d:	51                   	push   ecx
c001666e:	6a 00                	push   0x0
c0016670:	68 10 01 00 00       	push   0x110
c0016675:	50                   	push   eax
c0016676:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016679:	83 c4 20             	add    esp,0x20
c001667c:	89 c1                	mov    ecx,eax
c001667e:	85 c0                	test   eax,eax
c0016680:	74 38                	je     c00166ba <sysCallReadDir(regs*)+0x8d>
c0016682:	31 d2                	xor    edx,edx
c0016684:	b8 02 00 00 00       	mov    eax,0x2
c0016689:	83 f9 07             	cmp    ecx,0x7
c001668c:	74 05                	je     c0016693 <sysCallReadDir(regs*)+0x66>
c001668e:	83 c4 18             	add    esp,0x18
c0016691:	5b                   	pop    ebx
c0016692:	c3                   	ret    
c0016693:	b8 01 00 00 00       	mov    eax,0x1
c0016698:	31 d2                	xor    edx,edx
c001669a:	83 c4 18             	add    esp,0x18
c001669d:	5b                   	pop    ebx
c001669e:	c3                   	ret    
c001669f:	53                   	push   ebx
c00166a0:	53                   	push   ebx
c00166a1:	52                   	push   edx
c00166a2:	68 08 29 02 c0       	push   0xc0022908
c00166a7:	e8 ad 8a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00166ac:	83 c4 10             	add    esp,0x10
c00166af:	83 c4 18             	add    esp,0x18
c00166b2:	83 c8 ff             	or     eax,0xffffffff
c00166b5:	83 ca ff             	or     edx,0xffffffff
c00166b8:	5b                   	pop    ebx
c00166b9:	c3                   	ret    
c00166ba:	31 c0                	xor    eax,eax
c00166bc:	31 d2                	xor    edx,edx
c00166be:	eb da                	jmp    c001669a <sysCallReadDir(regs*)+0x6d>

c00166c0 <sysCallIsATTY(regs*)>:
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166ca:	83 f8 02             	cmp    eax,0x2
c00166cd:	76 07                	jbe    c00166d6 <sysCallIsATTY(regs*)+0x16>
c00166cf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00166d4:	75 28                	jne    c00166fe <sysCallIsATTY(regs*)+0x3e>
c00166d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166de:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00166e4:	85 c0                	test   eax,eax
c00166e6:	74 26                	je     c001670e <sysCallIsATTY(regs*)+0x4e>
c00166e8:	83 ec 0c             	sub    esp,0xc
c00166eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00166ed:	50                   	push   eax
c00166ee:	ff 12                	call   DWORD PTR [edx]
c00166f0:	83 c4 10             	add    esp,0x10
c00166f3:	25 ff 00 00 00       	and    eax,0xff
c00166f8:	31 d2                	xor    edx,edx
c00166fa:	83 c4 0c             	add    esp,0xc
c00166fd:	c3                   	ret    
c00166fe:	83 ec 0c             	sub    esp,0xc
c0016701:	50                   	push   eax
c0016702:	e8 dc 78 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016707:	83 c4 10             	add    esp,0x10
c001670a:	85 c0                	test   eax,eax
c001670c:	75 da                	jne    c00166e8 <sysCallIsATTY(regs*)+0x28>
c001670e:	83 c8 ff             	or     eax,0xffffffff
c0016711:	83 ca ff             	or     edx,0xffffffff
c0016714:	83 c4 0c             	add    esp,0xc
c0016717:	c3                   	ret    

c0016718 <sysCallSeek(regs*)>:
c0016718:	53                   	push   ebx
c0016719:	83 ec 08             	sub    esp,0x8
c001671c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016720:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016723:	83 f8 02             	cmp    eax,0x2
c0016726:	76 4b                	jbe    c0016773 <sysCallSeek(regs*)+0x5b>
c0016728:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001672d:	77 34                	ja     c0016763 <sysCallSeek(regs*)+0x4b>
c001672f:	83 ec 0c             	sub    esp,0xc
c0016732:	50                   	push   eax
c0016733:	e8 ab 78 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016738:	83 c4 0c             	add    esp,0xc
c001673b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001673e:	31 db                	xor    ebx,ebx
c0016740:	53                   	push   ebx
c0016741:	51                   	push   ecx
c0016742:	50                   	push   eax
c0016743:	e8 6a 90 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0016748:	83 c4 10             	add    esp,0x10
c001674b:	85 c0                	test   eax,eax
c001674d:	0f 95 c0             	setne  al
c0016750:	25 ff 00 00 00       	and    eax,0xff
c0016755:	31 d2                	xor    edx,edx
c0016757:	f7 d8                	neg    eax
c0016759:	83 d2 00             	adc    edx,0x0
c001675c:	83 c4 08             	add    esp,0x8
c001675f:	f7 da                	neg    edx
c0016761:	5b                   	pop    ebx
c0016762:	c3                   	ret    
c0016763:	52                   	push   edx
c0016764:	52                   	push   edx
c0016765:	50                   	push   eax
c0016766:	68 c4 29 02 c0       	push   0xc00229c4
c001676b:	e8 e9 89 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	83 c4 08             	add    esp,0x8
c0016776:	83 c8 ff             	or     eax,0xffffffff
c0016779:	83 ca ff             	or     edx,0xffffffff
c001677c:	5b                   	pop    ebx
c001677d:	c3                   	ret    

c001677e <sysCallTell(regs*)>:
c001677e:	53                   	push   ebx
c001677f:	83 ec 08             	sub    esp,0x8
c0016782:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016786:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016789:	83 f8 02             	cmp    eax,0x2
c001678c:	76 60                	jbe    c00167ee <sysCallTell(regs*)+0x70>
c001678e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016793:	77 30                	ja     c00167c5 <sysCallTell(regs*)+0x47>
c0016795:	83 ec 0c             	sub    esp,0xc
c0016798:	50                   	push   eax
c0016799:	e8 45 78 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c001679e:	5a                   	pop    edx
c001679f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00167a2:	59                   	pop    ecx
c00167a3:	53                   	push   ebx
c00167a4:	50                   	push   eax
c00167a5:	e8 5e 90 ff ff       	call   c000f808 <File::tell(unsigned long long*)>
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	85 c0                	test   eax,eax
c00167af:	0f 95 c0             	setne  al
c00167b2:	25 ff 00 00 00       	and    eax,0xff
c00167b7:	31 d2                	xor    edx,edx
c00167b9:	f7 d8                	neg    eax
c00167bb:	83 d2 00             	adc    edx,0x0
c00167be:	83 c4 08             	add    esp,0x8
c00167c1:	f7 da                	neg    edx
c00167c3:	5b                   	pop    ebx
c00167c4:	c3                   	ret    
c00167c5:	52                   	push   edx
c00167c6:	52                   	push   edx
c00167c7:	50                   	push   eax
c00167c8:	68 de 29 02 c0       	push   0xc00229de
c00167cd:	e8 87 89 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00167d2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167d5:	83 c4 10             	add    esp,0x10
c00167d8:	31 d2                	xor    edx,edx
c00167da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00167e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00167e7:	83 c4 08             	add    esp,0x8
c00167ea:	31 c0                	xor    eax,eax
c00167ec:	5b                   	pop    ebx
c00167ed:	c3                   	ret    
c00167ee:	83 c4 08             	add    esp,0x8
c00167f1:	83 c8 ff             	or     eax,0xffffffff
c00167f4:	83 ca ff             	or     edx,0xffffffff
c00167f7:	5b                   	pop    ebx
c00167f8:	c3                   	ret    

c00167f9 <sysCallSizeFromFilename(regs*)>:
c00167f9:	57                   	push   edi
c00167fa:	56                   	push   esi
c00167fb:	53                   	push   ebx
c00167fc:	83 ec 10             	sub    esp,0x10
c00167ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016803:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016806:	83 fb 02             	cmp    ebx,0x2
c0016809:	0f 86 8b 00 00 00    	jbe    c001689a <sysCallSizeFromFilename(regs*)+0xa1>
c001680f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016815:	77 58                	ja     c001686f <sysCallSizeFromFilename(regs*)+0x76>
c0016817:	83 ec 0c             	sub    esp,0xc
c001681a:	68 14 01 00 00       	push   0x114
c001681f:	e8 00 88 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016824:	89 c7                	mov    edi,eax
c0016826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001682b:	83 c4 0c             	add    esp,0xc
c001682e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016831:	50                   	push   eax
c0016832:	53                   	push   ebx
c0016833:	57                   	push   edi
c0016834:	e8 57 8e ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016839:	83 c4 0c             	add    esp,0xc
c001683c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016840:	50                   	push   eax
c0016841:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016844:	52                   	push   edx
c0016845:	57                   	push   edi
c0016846:	e8 55 91 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c001684b:	89 c3                	mov    ebx,eax
c001684d:	8b 07                	mov    eax,DWORD PTR [edi]
c001684f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016852:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016855:	31 c0                	xor    eax,eax
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	85 db                	test   ebx,ebx
c001685c:	0f 95 c0             	setne  al
c001685f:	31 d2                	xor    edx,edx
c0016861:	f7 d8                	neg    eax
c0016863:	83 d2 00             	adc    edx,0x0
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	f7 da                	neg    edx
c001686b:	5b                   	pop    ebx
c001686c:	5e                   	pop    esi
c001686d:	5f                   	pop    edi
c001686e:	c3                   	ret    
c001686f:	51                   	push   ecx
c0016870:	51                   	push   ecx
c0016871:	53                   	push   ebx
c0016872:	68 f8 29 02 c0       	push   0xc00229f8
c0016877:	e8 dd 88 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001687c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	31 d2                	xor    edx,edx
c0016884:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001688a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	31 c0                	xor    eax,eax
c0016896:	5b                   	pop    ebx
c0016897:	5e                   	pop    esi
c0016898:	5f                   	pop    edi
c0016899:	c3                   	ret    
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	83 c8 ff             	or     eax,0xffffffff
c00168a0:	83 ca ff             	or     edx,0xffffffff
c00168a3:	5b                   	pop    ebx
c00168a4:	5e                   	pop    esi
c00168a5:	5f                   	pop    edi
c00168a6:	c3                   	ret    

c00168a7 <sysCallSize(regs*)>:
c00168a7:	53                   	push   ebx
c00168a8:	83 ec 18             	sub    esp,0x18
c00168ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00168af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168b2:	83 f8 02             	cmp    eax,0x2
c00168b5:	76 66                	jbe    c001691d <sysCallSize(regs*)+0x76>
c00168b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00168bc:	77 36                	ja     c00168f4 <sysCallSize(regs*)+0x4d>
c00168be:	83 ec 0c             	sub    esp,0xc
c00168c1:	50                   	push   eax
c00168c2:	e8 1c 77 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c00168c7:	83 c4 0c             	add    esp,0xc
c00168ca:	8d 54 24 13          	lea    edx,[esp+0x13]
c00168ce:	52                   	push   edx
c00168cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00168d2:	52                   	push   edx
c00168d3:	50                   	push   eax
c00168d4:	e8 c7 90 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c00168d9:	83 c4 10             	add    esp,0x10
c00168dc:	85 c0                	test   eax,eax
c00168de:	0f 95 c0             	setne  al
c00168e1:	25 ff 00 00 00       	and    eax,0xff
c00168e6:	31 d2                	xor    edx,edx
c00168e8:	f7 d8                	neg    eax
c00168ea:	83 d2 00             	adc    edx,0x0
c00168ed:	83 c4 18             	add    esp,0x18
c00168f0:	f7 da                	neg    edx
c00168f2:	5b                   	pop    ebx
c00168f3:	c3                   	ret    
c00168f4:	51                   	push   ecx
c00168f5:	51                   	push   ecx
c00168f6:	50                   	push   eax
c00168f7:	68 f8 29 02 c0       	push   0xc00229f8
c00168fc:	e8 58 88 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016901:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016904:	83 c4 10             	add    esp,0x10
c0016907:	31 d2                	xor    edx,edx
c0016909:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001690f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016916:	83 c4 18             	add    esp,0x18
c0016919:	31 c0                	xor    eax,eax
c001691b:	5b                   	pop    ebx
c001691c:	c3                   	ret    
c001691d:	83 c4 18             	add    esp,0x18
c0016920:	83 c8 ff             	or     eax,0xffffffff
c0016923:	83 ca ff             	or     edx,0xffffffff
c0016926:	5b                   	pop    ebx
c0016927:	c3                   	ret    

c0016928 <sysCallClose(regs*)>:
c0016928:	53                   	push   ebx
c0016929:	83 ec 08             	sub    esp,0x8
c001692c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016930:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016933:	83 f8 02             	cmp    eax,0x2
c0016936:	76 4f                	jbe    c0016987 <sysCallClose(regs*)+0x5f>
c0016938:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001693d:	74 53                	je     c0016992 <sysCallClose(regs*)+0x6a>
c001693f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016944:	74 5b                	je     c00169a1 <sysCallClose(regs*)+0x79>
c0016946:	77 2f                	ja     c0016977 <sysCallClose(regs*)+0x4f>
c0016948:	83 ec 0c             	sub    esp,0xc
c001694b:	50                   	push   eax
c001694c:	e8 92 76 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016951:	89 c3                	mov    ebx,eax
c0016953:	89 04 24             	mov    DWORD PTR [esp],eax
c0016956:	e8 f7 8d ff ff       	call   c000f752 <File::close()>
c001695b:	83 c4 10             	add    esp,0x10
c001695e:	85 db                	test   ebx,ebx
c0016960:	74 0c                	je     c001696e <sysCallClose(regs*)+0x46>
c0016962:	83 ec 0c             	sub    esp,0xc
c0016965:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016967:	53                   	push   ebx
c0016968:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001696b:	83 c4 10             	add    esp,0x10
c001696e:	83 c4 08             	add    esp,0x8
c0016971:	31 c0                	xor    eax,eax
c0016973:	31 d2                	xor    edx,edx
c0016975:	5b                   	pop    ebx
c0016976:	c3                   	ret    
c0016977:	52                   	push   edx
c0016978:	52                   	push   edx
c0016979:	50                   	push   eax
c001697a:	68 2c 29 02 c0       	push   0xc002292c
c001697f:	e8 d5 87 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016984:	83 c4 10             	add    esp,0x10
c0016987:	83 c4 08             	add    esp,0x8
c001698a:	83 c8 ff             	or     eax,0xffffffff
c001698d:	83 ca ff             	or     edx,0xffffffff
c0016990:	5b                   	pop    ebx
c0016991:	c3                   	ret    
c0016992:	83 ec 0c             	sub    esp,0xc
c0016995:	68 13 2a 02 c0       	push   0xc0022a13
c001699a:	e8 ba 87 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001699f:	eb ca                	jmp    c001696b <sysCallClose(regs*)+0x43>
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	68 21 2a 02 c0       	push   0xc0022a21
c00169a9:	eb ef                	jmp    c001699a <sysCallClose(regs*)+0x72>

c00169ab <sysCallOpenDir(regs*)>:
c00169ab:	56                   	push   esi
c00169ac:	53                   	push   ebx
c00169ad:	50                   	push   eax
c00169ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169b2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169b5:	85 c0                	test   eax,eax
c00169b7:	74 53                	je     c0016a0c <sysCallOpenDir(regs*)+0x61>
c00169b9:	83 ec 0c             	sub    esp,0xc
c00169bc:	68 14 01 00 00       	push   0x114
c00169c1:	e8 5e 86 ff ff       	call   c000f024 <operator new(unsigned long)>
c00169c6:	89 c6                	mov    esi,eax
c00169c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169cd:	83 c4 0c             	add    esp,0xc
c00169d0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00169d3:	50                   	push   eax
c00169d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169d7:	50                   	push   eax
c00169d8:	56                   	push   esi
c00169d9:	e8 74 91 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c00169de:	89 34 24             	mov    DWORD PTR [esp],esi
c00169e1:	e8 d0 91 ff ff       	call   c000fbb6 <Directory::open()>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	85 c0                	test   eax,eax
c00169eb:	75 1f                	jne    c0016a0c <sysCallOpenDir(regs*)+0x61>
c00169ed:	83 ec 0c             	sub    esp,0xc
c00169f0:	56                   	push   esi
c00169f1:	e8 38 73 ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c00169f6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00169f9:	83 c4 10             	add    esp,0x10
c00169fc:	89 02                	mov    DWORD PTR [edx],eax
c00169fe:	c1 f8 1f             	sar    eax,0x1f
c0016a01:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a04:	31 c0                	xor    eax,eax
c0016a06:	59                   	pop    ecx
c0016a07:	31 d2                	xor    edx,edx
c0016a09:	5b                   	pop    ebx
c0016a0a:	5e                   	pop    esi
c0016a0b:	c3                   	ret    
c0016a0c:	59                   	pop    ecx
c0016a0d:	83 c8 ff             	or     eax,0xffffffff
c0016a10:	5b                   	pop    ebx
c0016a11:	83 ca ff             	or     edx,0xffffffff
c0016a14:	5e                   	pop    esi
c0016a15:	c3                   	ret    

c0016a16 <sysCallMakeDir(regs*)>:
c0016a16:	56                   	push   esi
c0016a17:	53                   	push   ebx
c0016a18:	83 ec 10             	sub    esp,0x10
c0016a1b:	68 14 01 00 00       	push   0x114
c0016a20:	e8 ff 85 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016a25:	89 c3                	mov    ebx,eax
c0016a27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a2c:	83 c4 0c             	add    esp,0xc
c0016a2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016a32:	50                   	push   eax
c0016a33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a37:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016a3a:	52                   	push   edx
c0016a3b:	53                   	push   ebx
c0016a3c:	e8 11 91 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c0016a41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a44:	e8 4d 93 ff ff       	call   c000fd96 <Directory::create()>
c0016a49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a4c:	89 c6                	mov    esi,eax
c0016a4e:	e8 bf 91 ff ff       	call   c000fc12 <Directory::close()>
c0016a53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a5b:	31 c0                	xor    eax,eax
c0016a5d:	85 f6                	test   esi,esi
c0016a5f:	0f 95 c0             	setne  al
c0016a62:	31 d2                	xor    edx,edx
c0016a64:	f7 d8                	neg    eax
c0016a66:	83 d2 00             	adc    edx,0x0
c0016a69:	83 c4 14             	add    esp,0x14
c0016a6c:	f7 da                	neg    edx
c0016a6e:	5b                   	pop    ebx
c0016a6f:	5e                   	pop    esi
c0016a70:	c3                   	ret    

c0016a71 <sysCallCloseDir(regs*)>:
c0016a71:	53                   	push   ebx
c0016a72:	83 ec 08             	sub    esp,0x8
c0016a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a7c:	83 f8 02             	cmp    eax,0x2
c0016a7f:	76 46                	jbe    c0016ac7 <sysCallCloseDir(regs*)+0x56>
c0016a81:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a86:	77 2f                	ja     c0016ab7 <sysCallCloseDir(regs*)+0x46>
c0016a88:	83 ec 0c             	sub    esp,0xc
c0016a8b:	50                   	push   eax
c0016a8c:	e8 52 75 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016a91:	89 c3                	mov    ebx,eax
c0016a93:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a96:	e8 77 91 ff ff       	call   c000fc12 <Directory::close()>
c0016a9b:	83 c4 10             	add    esp,0x10
c0016a9e:	85 db                	test   ebx,ebx
c0016aa0:	74 0c                	je     c0016aae <sysCallCloseDir(regs*)+0x3d>
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aa7:	53                   	push   ebx
c0016aa8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	83 c4 08             	add    esp,0x8
c0016ab1:	31 c0                	xor    eax,eax
c0016ab3:	31 d2                	xor    edx,edx
c0016ab5:	5b                   	pop    ebx
c0016ab6:	c3                   	ret    
c0016ab7:	52                   	push   edx
c0016ab8:	52                   	push   edx
c0016ab9:	50                   	push   eax
c0016aba:	68 54 29 02 c0       	push   0xc0022954
c0016abf:	e8 95 86 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	83 c4 08             	add    esp,0x8
c0016aca:	83 c8 ff             	or     eax,0xffffffff
c0016acd:	83 ca ff             	or     edx,0xffffffff
c0016ad0:	5b                   	pop    ebx
c0016ad1:	c3                   	ret    

c0016ad2 <sysCallWait(regs*)>:
c0016ad2:	83 ec 10             	sub    esp,0x10
c0016ad5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ad9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016adc:	52                   	push   edx
c0016add:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016ae0:	51                   	push   ecx
c0016ae1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016ae4:	50                   	push   eax
c0016ae5:	e8 4e 23 00 00       	call   c0018e38 <waitTask(int, int*, int)>
c0016aea:	89 c2                	mov    edx,eax
c0016aec:	83 c4 1c             	add    esp,0x1c
c0016aef:	c1 fa 1f             	sar    edx,0x1f
c0016af2:	c3                   	ret    

c0016af3 <sysCallRmdir(regs*)>:
c0016af3:	56                   	push   esi
c0016af4:	53                   	push   ebx
c0016af5:	83 ec 10             	sub    esp,0x10
c0016af8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016afc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016aff:	68 14 01 00 00       	push   0x114
c0016b04:	e8 1b 85 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016b09:	83 c4 0c             	add    esp,0xc
c0016b0c:	89 c3                	mov    ebx,eax
c0016b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b16:	50                   	push   eax
c0016b17:	56                   	push   esi
c0016b18:	53                   	push   ebx
c0016b19:	e8 72 8b ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b21:	e8 46 8d ff ff       	call   c000f86c <File::unlink()>
c0016b26:	89 c6                	mov    esi,eax
c0016b28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b30:	31 c0                	xor    eax,eax
c0016b32:	85 f6                	test   esi,esi
c0016b34:	0f 95 c0             	setne  al
c0016b37:	31 d2                	xor    edx,edx
c0016b39:	f7 d8                	neg    eax
c0016b3b:	83 d2 00             	adc    edx,0x0
c0016b3e:	83 c4 14             	add    esp,0x14
c0016b41:	f7 da                	neg    edx
c0016b43:	5b                   	pop    ebx
c0016b44:	5e                   	pop    esi
c0016b45:	c3                   	ret    

c0016b46 <sysCallUnlink(regs*)>:
c0016b46:	56                   	push   esi
c0016b47:	53                   	push   ebx
c0016b48:	83 ec 10             	sub    esp,0x10
c0016b4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016b52:	68 14 01 00 00       	push   0x114
c0016b57:	e8 c8 84 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016b5c:	83 c4 0c             	add    esp,0xc
c0016b5f:	89 c3                	mov    ebx,eax
c0016b61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b69:	50                   	push   eax
c0016b6a:	56                   	push   esi
c0016b6b:	53                   	push   ebx
c0016b6c:	e8 1f 8b ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b74:	e8 f3 8c ff ff       	call   c000f86c <File::unlink()>
c0016b79:	89 c6                	mov    esi,eax
c0016b7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b83:	31 c0                	xor    eax,eax
c0016b85:	85 f6                	test   esi,esi
c0016b87:	0f 95 c0             	setne  al
c0016b8a:	31 d2                	xor    edx,edx
c0016b8c:	f7 d8                	neg    eax
c0016b8e:	83 d2 00             	adc    edx,0x0
c0016b91:	83 c4 14             	add    esp,0x14
c0016b94:	f7 da                	neg    edx
c0016b96:	5b                   	pop    ebx
c0016b97:	5e                   	pop    esi
c0016b98:	c3                   	ret    

c0016b99 <sysCallGetArgv(regs*)>:
c0016b99:	83 ec 0c             	sub    esp,0xc
c0016b9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ba0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016ba3:	85 c0                	test   eax,eax
c0016ba5:	78 2b                	js     c0016bd2 <sysCallGetArgv(regs*)+0x39>
c0016ba7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016bad:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016bb0:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016bb6:	7d 1a                	jge    c0016bd2 <sysCallGetArgv(regs*)+0x39>
c0016bb8:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016bbf:	85 c0                	test   eax,eax
c0016bc1:	74 17                	je     c0016bda <sysCallGetArgv(regs*)+0x41>
c0016bc3:	51                   	push   ecx
c0016bc4:	51                   	push   ecx
c0016bc5:	50                   	push   eax
c0016bc6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016bc9:	50                   	push   eax
c0016bca:	e8 8a 9b fe ff       	call   c0000759 <strcpy>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	31 c0                	xor    eax,eax
c0016bd4:	31 d2                	xor    edx,edx
c0016bd6:	83 c4 0c             	add    esp,0xc
c0016bd9:	c3                   	ret    
c0016bda:	b8 01 00 00 00       	mov    eax,0x1
c0016bdf:	31 d2                	xor    edx,edx
c0016be1:	83 c4 0c             	add    esp,0xc
c0016be4:	c3                   	ret    

c0016be5 <sysCallTTYName(regs*)>:
c0016be5:	56                   	push   esi
c0016be6:	53                   	push   ebx
c0016be7:	50                   	push   eax
c0016be8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bec:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016bef:	85 c0                	test   eax,eax
c0016bf1:	74 4d                	je     c0016c40 <sysCallTTYName(regs*)+0x5b>
c0016bf3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016bf6:	83 f8 02             	cmp    eax,0x2
c0016bf9:	76 07                	jbe    c0016c02 <sysCallTTYName(regs*)+0x1d>
c0016bfb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016c00:	75 54                	jne    c0016c56 <sysCallTTYName(regs*)+0x71>
c0016c02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c0a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016c10:	85 db                	test   ebx,ebx
c0016c12:	74 2c                	je     c0016c40 <sysCallTTYName(regs*)+0x5b>
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c19:	53                   	push   ebx
c0016c1a:	ff 10                	call   DWORD PTR [eax]
c0016c1c:	83 c4 10             	add    esp,0x10
c0016c1f:	84 c0                	test   al,al
c0016c21:	74 28                	je     c0016c4b <sysCallTTYName(regs*)+0x66>
c0016c23:	50                   	push   eax
c0016c24:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016c2a:	50                   	push   eax
c0016c2b:	53                   	push   ebx
c0016c2c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016c2f:	50                   	push   eax
c0016c30:	e8 24 9b fe ff       	call   c0000759 <strcpy>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	31 c0                	xor    eax,eax
c0016c3a:	31 d2                	xor    edx,edx
c0016c3c:	59                   	pop    ecx
c0016c3d:	5b                   	pop    ebx
c0016c3e:	5e                   	pop    esi
c0016c3f:	c3                   	ret    
c0016c40:	59                   	pop    ecx
c0016c41:	b8 01 00 00 00       	mov    eax,0x1
c0016c46:	5b                   	pop    ebx
c0016c47:	31 d2                	xor    edx,edx
c0016c49:	5e                   	pop    esi
c0016c4a:	c3                   	ret    
c0016c4b:	59                   	pop    ecx
c0016c4c:	b8 02 00 00 00       	mov    eax,0x2
c0016c51:	5b                   	pop    ebx
c0016c52:	31 d2                	xor    edx,edx
c0016c54:	5e                   	pop    esi
c0016c55:	c3                   	ret    
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	50                   	push   eax
c0016c5a:	e8 84 73 ff ff       	call   c000dfe3 <getFromFileDescriptor(int)>
c0016c5f:	83 c4 10             	add    esp,0x10
c0016c62:	89 c3                	mov    ebx,eax
c0016c64:	eb aa                	jmp    c0016c10 <sysCallTTYName(regs*)+0x2b>

c0016c66 <sysCallGetEnv(regs*)>:
c0016c66:	83 ec 0c             	sub    esp,0xc
c0016c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016c70:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016c73:	85 d2                	test   edx,edx
c0016c75:	75 22                	jne    c0016c99 <sysCallGetEnv(regs*)+0x33>
c0016c77:	31 c0                	xor    eax,eax
c0016c79:	31 d2                	xor    edx,edx
c0016c7b:	85 c9                	test   ecx,ecx
c0016c7d:	74 04                	je     c0016c83 <sysCallGetEnv(regs*)+0x1d>
c0016c7f:	83 c4 0c             	add    esp,0xc
c0016c82:	c3                   	ret    
c0016c83:	83 ec 0c             	sub    esp,0xc
c0016c86:	68 78 29 02 c0       	push   0xc0022978
c0016c8b:	e8 47 9a fe ff       	call   c00006d7 <strlen>
c0016c90:	83 c4 10             	add    esp,0x10
c0016c93:	31 d2                	xor    edx,edx
c0016c95:	83 c4 0c             	add    esp,0xc
c0016c98:	c3                   	ret    
c0016c99:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016c9c:	85 c9                	test   ecx,ecx
c0016c9e:	74 0b                	je     c0016cab <sysCallGetEnv(regs*)+0x45>
c0016ca0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016ca3:	31 c0                	xor    eax,eax
c0016ca5:	31 d2                	xor    edx,edx
c0016ca7:	83 c4 0c             	add    esp,0xc
c0016caa:	c3                   	ret    
c0016cab:	52                   	push   edx
c0016cac:	52                   	push   edx
c0016cad:	68 78 29 02 c0       	push   0xc0022978
c0016cb2:	50                   	push   eax
c0016cb3:	e8 a1 9a fe ff       	call   c0000759 <strcpy>
c0016cb8:	83 c4 10             	add    esp,0x10
c0016cbb:	eb e6                	jmp    c0016ca3 <sysCallGetEnv(regs*)+0x3d>

c0016cbd <sysCallUSleep(regs*)>:
c0016cbd:	57                   	push   edi
c0016cbe:	56                   	push   esi
c0016cbf:	53                   	push   ebx
c0016cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc4:	52                   	push   edx
c0016cc5:	52                   	push   edx
c0016cc6:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016cc9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016ccc:	89 c8                	mov    eax,ecx
c0016cce:	89 da                	mov    edx,ebx
c0016cd0:	0f a4 c2 05          	shld   edx,eax,0x5
c0016cd4:	c1 e0 05             	shl    eax,0x5
c0016cd7:	29 c8                	sub    eax,ecx
c0016cd9:	19 da                	sbb    edx,ebx
c0016cdb:	0f a4 c2 02          	shld   edx,eax,0x2
c0016cdf:	c1 e0 02             	shl    eax,0x2
c0016ce2:	01 c8                	add    eax,ecx
c0016ce4:	11 da                	adc    edx,ebx
c0016ce6:	0f a4 c2 03          	shld   edx,eax,0x3
c0016cea:	c1 e0 03             	shl    eax,0x3
c0016ced:	52                   	push   edx
c0016cee:	50                   	push   eax
c0016cef:	e8 df 21 00 00       	call   c0018ed3 <nanoSleep(unsigned long long)>
c0016cf4:	83 c4 10             	add    esp,0x10
c0016cf7:	31 c0                	xor    eax,eax
c0016cf9:	31 d2                	xor    edx,edx
c0016cfb:	5b                   	pop    ebx
c0016cfc:	5e                   	pop    esi
c0016cfd:	5f                   	pop    edi
c0016cfe:	c3                   	ret    

c0016cff <sysCallSpawn(regs*)>:
c0016cff:	56                   	push   esi
c0016d00:	53                   	push   ebx
c0016d01:	50                   	push   eax
c0016d02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d09:	85 c0                	test   eax,eax
c0016d0b:	75 08                	jne    c0016d15 <sysCallSpawn(regs*)+0x16>
c0016d0d:	59                   	pop    ecx
c0016d0e:	31 c0                	xor    eax,eax
c0016d10:	5b                   	pop    ebx
c0016d11:	31 d2                	xor    edx,edx
c0016d13:	5e                   	pop    esi
c0016d14:	c3                   	ret    
c0016d15:	83 ec 0c             	sub    esp,0xc
c0016d18:	68 3b 07 00 00       	push   0x73b
c0016d1d:	e8 02 83 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016d22:	89 c6                	mov    esi,eax
c0016d24:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016d27:	50                   	push   eax
c0016d28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016d30:	50                   	push   eax
c0016d31:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d34:	50                   	push   eax
c0016d35:	56                   	push   esi
c0016d36:	e8 d5 18 00 00       	call   c0018610 <Process::Process(char const*, Process*, char**)>
c0016d3b:	83 c4 20             	add    esp,0x20
c0016d3e:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016d45:	75 c6                	jne    c0016d0d <sysCallSpawn(regs*)+0xe>
c0016d47:	83 ec 0c             	sub    esp,0xc
c0016d4a:	56                   	push   esi
c0016d4b:	e8 3c 1e 00 00       	call   c0018b8c <Process::createUserThread()>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d55:	89 c2                	mov    edx,eax
c0016d57:	c1 fa 1f             	sar    edx,0x1f
c0016d5a:	59                   	pop    ecx
c0016d5b:	5b                   	pop    ebx
c0016d5c:	5e                   	pop    esi
c0016d5d:	c3                   	ret    

c0016d5e <sysAppSettings(regs*)>:
c0016d5e:	53                   	push   ebx
c0016d5f:	31 d2                	xor    edx,edx
c0016d61:	83 ec 08             	sub    esp,0x8
c0016d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d68:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016d6b:	b8 01 00 00 00       	mov    eax,0x1
c0016d70:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016d76:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016d7c:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016d81:	75 30                	jne    c0016db3 <sysAppSettings(regs*)+0x55>
c0016d83:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016d89:	83 e0 1f             	and    eax,0x1f
c0016d8c:	3c 01                	cmp    al,0x1
c0016d8e:	74 28                	je     c0016db8 <sysAppSettings(regs*)+0x5a>
c0016d90:	3c 07                	cmp    al,0x7
c0016d92:	0f 84 be 00 00 00    	je     c0016e56 <sysAppSettings(regs*)+0xf8>
c0016d98:	84 c0                	test   al,al
c0016d9a:	0f 84 da 00 00 00    	je     c0016e7a <sysAppSettings(regs*)+0x11c>
c0016da0:	3c 08                	cmp    al,0x8
c0016da2:	74 6d                	je     c0016e11 <sysAppSettings(regs*)+0xb3>
c0016da4:	25 ff 00 00 00       	and    eax,0xff
c0016da9:	05 e8 03 00 00       	add    eax,0x3e8
c0016dae:	89 c2                	mov    edx,eax
c0016db0:	c1 fa 1f             	sar    edx,0x1f
c0016db3:	83 c4 08             	add    esp,0x8
c0016db6:	5b                   	pop    ebx
c0016db7:	c3                   	ret    
c0016db8:	50                   	push   eax
c0016db9:	68 00 01 00 00       	push   0x100
c0016dbe:	6a 00                	push   0x0
c0016dc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dc5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016dc8:	83 c0 0c             	add    eax,0xc
c0016dcb:	50                   	push   eax
c0016dcc:	e8 e9 98 fe ff       	call   c00006ba <memset>
c0016dd1:	83 c4 0c             	add    esp,0xc
c0016dd4:	68 ff 00 00 00       	push   0xff
c0016dd9:	53                   	push   ebx
c0016dda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ddf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016de2:	83 c0 0c             	add    eax,0xc
c0016de5:	50                   	push   eax
c0016de6:	e8 99 98 fe ff       	call   c0000684 <memcpy>
c0016deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016df0:	5a                   	pop    edx
c0016df1:	59                   	pop    ecx
c0016df2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016df5:	8d 50 0c             	lea    edx,[eax+0xc]
c0016df8:	52                   	push   edx
c0016df9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016dff:	53                   	push   ebx
c0016e00:	e8 bb 63 ff ff       	call   c000d1c0 <VgaText::setTitle(char*)>
c0016e05:	83 c4 10             	add    esp,0x10
c0016e08:	31 c0                	xor    eax,eax
c0016e0a:	31 d2                	xor    edx,edx
c0016e0c:	83 c4 08             	add    esp,0x8
c0016e0f:	5b                   	pop    ebx
c0016e10:	c3                   	ret    
c0016e11:	50                   	push   eax
c0016e12:	50                   	push   eax
c0016e13:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016e19:	83 e0 0f             	and    eax,0xf
c0016e1c:	50                   	push   eax
c0016e1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e25:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016e2b:	50                   	push   eax
c0016e2c:	e8 7f 63 ff ff       	call   c000d1b0 <VgaText::setTitleColour(VgaColour)>
c0016e31:	58                   	pop    eax
c0016e32:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016e38:	c1 e8 04             	shr    eax,0x4
c0016e3b:	5a                   	pop    edx
c0016e3c:	83 e0 0f             	and    eax,0xf
c0016e3f:	50                   	push   eax
c0016e40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e45:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e48:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016e4e:	51                   	push   ecx
c0016e4f:	e8 4c 63 ff ff       	call   c000d1a0 <VgaText::setTitleTextColour(VgaColour)>
c0016e54:	eb af                	jmp    c0016e05 <sysAppSettings(regs*)+0xa7>
c0016e56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e5e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016e64:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016e6a:	c0 e8 06             	shr    al,0x6
c0016e6d:	83 e0 01             	and    eax,0x1
c0016e70:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016e76:	31 c0                	xor    eax,eax
c0016e78:	eb 90                	jmp    c0016e0a <sysAppSettings(regs*)+0xac>
c0016e7a:	b8 02 00 00 00       	mov    eax,0x2
c0016e7f:	31 d2                	xor    edx,edx
c0016e81:	eb 89                	jmp    c0016e0c <sysAppSettings(regs*)+0xae>

c0016e83 <sysSetFatAttrib(regs*)>:
c0016e83:	57                   	push   edi
c0016e84:	56                   	push   esi
c0016e85:	53                   	push   ebx
c0016e86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e8a:	83 ec 0c             	sub    esp,0xc
c0016e8d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016e90:	68 14 01 00 00       	push   0x114
c0016e95:	e8 8a 81 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016e9a:	83 c4 0c             	add    esp,0xc
c0016e9d:	89 c3                	mov    ebx,eax
c0016e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ea7:	50                   	push   eax
c0016ea8:	57                   	push   edi
c0016ea9:	53                   	push   ebx
c0016eaa:	e8 e1 87 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016eaf:	83 c4 0c             	add    esp,0xc
c0016eb2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016eb5:	0f b6 d4             	movzx  edx,ah
c0016eb8:	52                   	push   edx
c0016eb9:	25 ff 00 00 00       	and    eax,0xff
c0016ebe:	50                   	push   eax
c0016ebf:	53                   	push   ebx
c0016ec0:	e8 41 8a ff ff       	call   c000f906 <File::chfatattr(unsigned char, unsigned char)>
c0016ec5:	89 c6                	mov    esi,eax
c0016ec7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ecc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ecf:	83 c4 10             	add    esp,0x10
c0016ed2:	31 c0                	xor    eax,eax
c0016ed4:	85 f6                	test   esi,esi
c0016ed6:	0f 95 c0             	setne  al
c0016ed9:	5b                   	pop    ebx
c0016eda:	31 d2                	xor    edx,edx
c0016edc:	f7 d8                	neg    eax
c0016ede:	83 d2 00             	adc    edx,0x0
c0016ee1:	5e                   	pop    esi
c0016ee2:	f7 da                	neg    edx
c0016ee4:	5f                   	pop    edi
c0016ee5:	c3                   	ret    

c0016ee6 <sysPanic(regs*)>:
c0016ee6:	83 ec 18             	sub    esp,0x18
c0016ee9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016eed:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016ef0:	50                   	push   eax
c0016ef1:	e8 92 ea ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0016ef6:	c7 04 24 2f 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a2f
c0016efd:	e8 86 ea ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0016f02:	b8 01 00 00 00       	mov    eax,0x1
c0016f07:	31 d2                	xor    edx,edx
c0016f09:	83 c4 1c             	add    esp,0x1c
c0016f0c:	c3                   	ret    

c0016f0d <sysPipe(regs*)>:
c0016f0d:	57                   	push   edi
c0016f0e:	56                   	push   esi
c0016f0f:	53                   	push   ebx
c0016f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f14:	83 ec 0c             	sub    esp,0xc
c0016f17:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016f1a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016f1d:	6a 20                	push   0x20
c0016f1f:	e8 00 81 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016f24:	89 c3                	mov    ebx,eax
c0016f26:	58                   	pop    eax
c0016f27:	5a                   	pop    edx
c0016f28:	68 00 50 00 00       	push   0x5000
c0016f2d:	53                   	push   ebx
c0016f2e:	e8 cb 5b ff ff       	call   c000cafe <Pipe::Pipe(int)>
c0016f33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f36:	e8 f3 6d ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c0016f3b:	89 07                	mov    DWORD PTR [edi],eax
c0016f3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f40:	e8 e9 6d ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c0016f45:	83 c4 10             	add    esp,0x10
c0016f48:	89 06                	mov    DWORD PTR [esi],eax
c0016f4a:	31 d2                	xor    edx,edx
c0016f4c:	5b                   	pop    ebx
c0016f4d:	31 c0                	xor    eax,eax
c0016f4f:	5e                   	pop    esi
c0016f50:	5f                   	pop    edi
c0016f51:	c3                   	ret    

c0016f52 <sysGetUnixTime(regs*)>:
c0016f52:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c0016f57:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f61:	e9 f2 90 ff ff       	jmp    c0010058 <Clock::timeInSecondsLocal()>

c0016f66 <string_ends_with(char const*, char const*)>:
c0016f66:	57                   	push   edi
c0016f67:	56                   	push   esi
c0016f68:	53                   	push   ebx
c0016f69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f6d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	53                   	push   ebx
c0016f75:	e8 5d 97 fe ff       	call   c00006d7 <strlen>
c0016f7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f7d:	89 c6                	mov    esi,eax
c0016f7f:	e8 53 97 fe ff       	call   c00006d7 <strlen>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	31 d2                	xor    edx,edx
c0016f89:	39 c6                	cmp    esi,eax
c0016f8b:	7d 06                	jge    c0016f93 <string_ends_with(char const*, char const*)+0x2d>
c0016f8d:	5b                   	pop    ebx
c0016f8e:	89 d0                	mov    eax,edx
c0016f90:	5e                   	pop    esi
c0016f91:	5f                   	pop    edi
c0016f92:	c3                   	ret    
c0016f93:	52                   	push   edx
c0016f94:	29 c6                	sub    esi,eax
c0016f96:	52                   	push   edx
c0016f97:	01 f3                	add    ebx,esi
c0016f99:	57                   	push   edi
c0016f9a:	53                   	push   ebx
c0016f9b:	e8 0a 98 fe ff       	call   c00007aa <strcmp>
c0016fa0:	83 c4 10             	add    esp,0x10
c0016fa3:	31 d2                	xor    edx,edx
c0016fa5:	85 c0                	test   eax,eax
c0016fa7:	5b                   	pop    ebx
c0016fa8:	0f 94 c2             	sete   dl
c0016fab:	5e                   	pop    esi
c0016fac:	89 d0                	mov    eax,edx
c0016fae:	5f                   	pop    edi
c0016faf:	c3                   	ret    

c0016fb0 <sysCallOpen(regs*)>:
c0016fb0:	56                   	push   esi
c0016fb1:	53                   	push   ebx
c0016fb2:	81 ec 04 01 00 00    	sub    esp,0x104
c0016fb8:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016fbf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016fc2:	85 c9                	test   ecx,ecx
c0016fc4:	0f 84 bb 00 00 00    	je     c0017085 <sysCallOpen(regs*)+0xd5>
c0016fca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016fcd:	85 c0                	test   eax,eax
c0016fcf:	0f 84 b0 00 00 00    	je     c0017085 <sysCallOpen(regs*)+0xd5>
c0016fd5:	52                   	push   edx
c0016fd6:	68 3e 2a 02 c0       	push   0xc0022a3e
c0016fdb:	50                   	push   eax
c0016fdc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016fe0:	56                   	push   esi
c0016fe1:	e8 00 85 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c0016fe6:	89 34 24             	mov    DWORD PTR [esp],esi
c0016fe9:	e8 e9 96 fe ff       	call   c00006d7 <strlen>
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	48                   	dec    eax
c0016ff2:	74 25                	je     c0017019 <sysCallOpen(regs*)+0x69>
c0016ff4:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016ff7:	80 fa 2e             	cmp    dl,0x2e
c0016ffa:	74 19                	je     c0017015 <sysCallOpen(regs*)+0x65>
c0016ffc:	80 fa 3a             	cmp    dl,0x3a
c0016fff:	74 14                	je     c0017015 <sysCallOpen(regs*)+0x65>
c0017001:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0017005:	48                   	dec    eax
c0017006:	74 11                	je     c0017019 <sysCallOpen(regs*)+0x69>
c0017008:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001700b:	80 fa 3a             	cmp    dl,0x3a
c001700e:	74 05                	je     c0017015 <sysCallOpen(regs*)+0x65>
c0017010:	80 fa 2e             	cmp    dl,0x2e
c0017013:	75 ec                	jne    c0017001 <sysCallOpen(regs*)+0x51>
c0017015:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0017019:	51                   	push   ecx
c001701a:	51                   	push   ecx
c001701b:	68 42 2a 02 c0       	push   0xc0022a42
c0017020:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017023:	50                   	push   eax
c0017024:	e8 3d ff ff ff       	call   c0016f66 <string_ends_with(char const*, char const*)>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	85 c0                	test   eax,eax
c001702e:	75 17                	jne    c0017047 <sysCallOpen(regs*)+0x97>
c0017030:	50                   	push   eax
c0017031:	50                   	push   eax
c0017032:	68 63 2a 02 c0       	push   0xc0022a63
c0017037:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001703a:	50                   	push   eax
c001703b:	e8 26 ff ff ff       	call   c0016f66 <string_ends_with(char const*, char const*)>
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	85 c0                	test   eax,eax
c0017045:	74 4d                	je     c0017094 <sysCallOpen(regs*)+0xe4>
c0017047:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001704a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017050:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017057:	50                   	push   eax
c0017058:	50                   	push   eax
c0017059:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001705c:	8b 10                	mov    edx,DWORD PTR [eax]
c001705e:	52                   	push   edx
c001705f:	68 47 2a 02 c0       	push   0xc0022a47
c0017064:	e8 f0 80 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017069:	c7 04 24 56 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a56
c0017070:	e8 e4 80 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	81 c4 04 01 00 00    	add    esp,0x104
c001707e:	31 c0                	xor    eax,eax
c0017080:	31 d2                	xor    edx,edx
c0017082:	5b                   	pop    ebx
c0017083:	5e                   	pop    esi
c0017084:	c3                   	ret    
c0017085:	81 c4 04 01 00 00    	add    esp,0x104
c001708b:	83 c8 ff             	or     eax,0xffffffff
c001708e:	83 ca ff             	or     edx,0xffffffff
c0017091:	5b                   	pop    ebx
c0017092:	5e                   	pop    esi
c0017093:	c3                   	ret    
c0017094:	50                   	push   eax
c0017095:	50                   	push   eax
c0017096:	68 43 2a 02 c0       	push   0xc0022a43
c001709b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001709e:	50                   	push   eax
c001709f:	e8 06 97 fe ff       	call   c00007aa <strcmp>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	85 c0                	test   eax,eax
c00170a9:	74 9c                	je     c0017047 <sysCallOpen(regs*)+0x97>
c00170ab:	50                   	push   eax
c00170ac:	50                   	push   eax
c00170ad:	68 42 2a 02 c0       	push   0xc0022a42
c00170b2:	56                   	push   esi
c00170b3:	e8 ae fe ff ff       	call   c0016f66 <string_ends_with(char const*, char const*)>
c00170b8:	83 c4 10             	add    esp,0x10
c00170bb:	85 c0                	test   eax,eax
c00170bd:	75 88                	jne    c0017047 <sysCallOpen(regs*)+0x97>
c00170bf:	52                   	push   edx
c00170c0:	52                   	push   edx
c00170c1:	68 68 2a 02 c0       	push   0xc0022a68
c00170c6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00170c9:	51                   	push   ecx
c00170ca:	e8 97 fe ff ff       	call   c0016f66 <string_ends_with(char const*, char const*)>
c00170cf:	83 c4 10             	add    esp,0x10
c00170d2:	85 c0                	test   eax,eax
c00170d4:	0f 85 d5 00 00 00    	jne    c00171af <sysCallOpen(regs*)+0x1ff>
c00170da:	50                   	push   eax
c00170db:	50                   	push   eax
c00170dc:	68 6d 2a 02 c0       	push   0xc0022a6d
c00170e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170e4:	50                   	push   eax
c00170e5:	e8 7c fe ff ff       	call   c0016f66 <string_ends_with(char const*, char const*)>
c00170ea:	83 c4 10             	add    esp,0x10
c00170ed:	85 c0                	test   eax,eax
c00170ef:	0f 85 ba 00 00 00    	jne    c00171af <sysCallOpen(regs*)+0x1ff>
c00170f5:	50                   	push   eax
c00170f6:	50                   	push   eax
c00170f7:	68 69 2a 02 c0       	push   0xc0022a69
c00170fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170ff:	50                   	push   eax
c0017100:	e8 a5 96 fe ff       	call   c00007aa <strcmp>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	85 c0                	test   eax,eax
c001710a:	0f 84 9f 00 00 00    	je     c00171af <sysCallOpen(regs*)+0x1ff>
c0017110:	50                   	push   eax
c0017111:	50                   	push   eax
c0017112:	68 68 2a 02 c0       	push   0xc0022a68
c0017117:	56                   	push   esi
c0017118:	e8 49 fe ff ff       	call   c0016f66 <string_ends_with(char const*, char const*)>
c001711d:	83 c4 10             	add    esp,0x10
c0017120:	85 c0                	test   eax,eax
c0017122:	0f 85 87 00 00 00    	jne    c00171af <sysCallOpen(regs*)+0x1ff>
c0017128:	83 ec 0c             	sub    esp,0xc
c001712b:	68 14 01 00 00       	push   0x114
c0017130:	e8 ef 7e ff ff       	call   c000f024 <operator new(unsigned long)>
c0017135:	89 c6                	mov    esi,eax
c0017137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001713c:	83 c4 0c             	add    esp,0xc
c001713f:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017142:	51                   	push   ecx
c0017143:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017146:	50                   	push   eax
c0017147:	56                   	push   esi
c0017148:	e8 43 85 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001714d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017150:	83 c4 10             	add    esp,0x10
c0017153:	89 d0                	mov    eax,edx
c0017155:	25 ff 00 00 00       	and    eax,0xff
c001715a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001715d:	89 d0                	mov    eax,edx
c001715f:	83 e0 01             	and    eax,0x1
c0017162:	f6 c2 02             	test   dl,0x2
c0017165:	74 03                	je     c001716a <sysCallOpen(regs*)+0x1ba>
c0017167:	83 c8 02             	or     eax,0x2
c001716a:	f6 c2 04             	test   dl,0x4
c001716d:	74 03                	je     c0017172 <sysCallOpen(regs*)+0x1c2>
c001716f:	83 c8 04             	or     eax,0x4
c0017172:	f6 c2 08             	test   dl,0x8
c0017175:	74 03                	je     c001717a <sysCallOpen(regs*)+0x1ca>
c0017177:	83 c8 0a             	or     eax,0xa
c001717a:	83 e2 10             	and    edx,0x10
c001717d:	74 03                	je     c0017182 <sysCallOpen(regs*)+0x1d2>
c001717f:	83 c8 12             	or     eax,0x12
c0017182:	52                   	push   edx
c0017183:	52                   	push   edx
c0017184:	50                   	push   eax
c0017185:	56                   	push   esi
c0017186:	e8 69 85 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	85 c0                	test   eax,eax
c0017190:	0f 85 ef fe ff ff    	jne    c0017085 <sysCallOpen(regs*)+0xd5>
c0017196:	83 ec 0c             	sub    esp,0xc
c0017199:	56                   	push   esi
c001719a:	e8 8f 6b ff ff       	call   c000dd2e <UnixFile::getFileDescriptor()>
c001719f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00171a2:	89 02                	mov    DWORD PTR [edx],eax
c00171a4:	c1 f8 1f             	sar    eax,0x1f
c00171a7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00171aa:	e9 c6 fe ff ff       	jmp    c0017075 <sysCallOpen(regs*)+0xc5>
c00171af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00171b2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00171b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00171bf:	e9 b4 fe ff ff       	jmp    c0017078 <sysCallOpen(regs*)+0xc8>

c00171c4 <setupSystemCalls()>:
c00171c4:	c7 05 20 50 02 c0 bf 63 01 c0 	mov    DWORD PTR ds:0xc0025020,0xc00163bf
c00171ce:	c7 05 24 50 02 c0 ed 61 01 c0 	mov    DWORD PTR ds:0xc0025024,0xc00161ed
c00171d8:	c7 05 28 50 02 c0 02 63 01 c0 	mov    DWORD PTR ds:0xc0025028,0xc0016302
c00171e2:	c7 05 2c 50 02 c0 57 63 01 c0 	mov    DWORD PTR ds:0xc002502c,0xc0016357
c00171ec:	c7 05 30 50 02 c0 9a 62 01 c0 	mov    DWORD PTR ds:0xc0025030,0xc001629a
c00171f6:	c7 05 34 50 02 c0 d9 63 01 c0 	mov    DWORD PTR ds:0xc0025034,0xc00163d9
c0017200:	c7 05 38 50 02 c0 98 65 01 c0 	mov    DWORD PTR ds:0xc0025038,0xc0016598
c001720a:	c7 05 3c 50 02 c0 be 65 01 c0 	mov    DWORD PTR ds:0xc002503c,0xc00165be
c0017214:	c7 05 44 50 02 c0 28 69 01 c0 	mov    DWORD PTR ds:0xc0025044,0xc0016928
c001721e:	c7 05 40 50 02 c0 b0 6f 01 c0 	mov    DWORD PTR ds:0xc0025040,0xc0016fb0
c0017228:	c7 05 48 50 02 c0 ab 69 01 c0 	mov    DWORD PTR ds:0xc0025048,0xc00169ab
c0017232:	c7 05 4c 50 02 c0 2d 66 01 c0 	mov    DWORD PTR ds:0xc002504c,0xc001662d
c001723c:	c7 05 50 50 02 c0 e9 63 01 c0 	mov    DWORD PTR ds:0xc0025050,0xc00163e9
c0017246:	c7 05 54 50 02 c0 ee 63 01 c0 	mov    DWORD PTR ds:0xc0025054,0xc00163ee
c0017250:	c7 05 58 50 02 c0 16 6a 01 c0 	mov    DWORD PTR ds:0xc0025058,0xc0016a16
c001725a:	c7 05 5c 50 02 c0 71 6a 01 c0 	mov    DWORD PTR ds:0xc002505c,0xc0016a71
c0017264:	c7 05 60 50 02 c0 18 67 01 c0 	mov    DWORD PTR ds:0xc0025060,0xc0016718
c001726e:	c7 05 64 50 02 c0 7e 67 01 c0 	mov    DWORD PTR ds:0xc0025064,0xc001677e
c0017278:	c7 05 68 50 02 c0 a7 68 01 c0 	mov    DWORD PTR ds:0xc0025068,0xc00168a7
c0017282:	c7 05 6c 50 02 c0 f3 63 01 c0 	mov    DWORD PTR ds:0xc002506c,0xc00163f3
c001728c:	c7 05 70 50 02 c0 d2 6a 01 c0 	mov    DWORD PTR ds:0xc0025070,0xc0016ad2
c0017296:	c7 05 74 50 02 c0 fd 63 01 c0 	mov    DWORD PTR ds:0xc0025074,0xc00163fd
c00172a0:	c7 05 78 50 02 c0 04 64 01 c0 	mov    DWORD PTR ds:0xc0025078,0xc0016404
c00172aa:	c7 05 7c 50 02 c0 f3 6a 01 c0 	mov    DWORD PTR ds:0xc002507c,0xc0016af3
c00172b4:	c7 05 80 50 02 c0 46 6b 01 c0 	mov    DWORD PTR ds:0xc0025080,0xc0016b46
c00172be:	c7 05 84 50 02 c0 0b 64 01 c0 	mov    DWORD PTR ds:0xc0025084,0xc001640b
c00172c8:	c7 05 88 50 02 c0 99 6b 01 c0 	mov    DWORD PTR ds:0xc0025088,0xc0016b99
c00172d2:	c7 05 8c 50 02 c0 e0 65 01 c0 	mov    DWORD PTR ds:0xc002508c,0xc00165e0
c00172dc:	c7 05 90 50 02 c0 e5 6b 01 c0 	mov    DWORD PTR ds:0xc0025090,0xc0016be5
c00172e6:	c7 05 94 50 02 c0 c0 66 01 c0 	mov    DWORD PTR ds:0xc0025094,0xc00166c0
c00172f0:	c7 05 98 50 02 c0 bd 6c 01 c0 	mov    DWORD PTR ds:0xc0025098,0xc0016cbd
c00172fa:	c7 05 9c 50 02 c0 f9 67 01 c0 	mov    DWORD PTR ds:0xc002509c,0xc00167f9
c0017304:	c7 05 a0 50 02 c0 ff 6c 01 c0 	mov    DWORD PTR ds:0xc00250a0,0xc0016cff
c001730e:	c7 05 a4 50 02 c0 66 6c 01 c0 	mov    DWORD PTR ds:0xc00250a4,0xc0016c66
c0017318:	c7 05 a8 50 02 c0 5e 6d 01 c0 	mov    DWORD PTR ds:0xc00250a8,0xc0016d5e
c0017322:	c7 05 ac 50 02 c0 1f 64 01 c0 	mov    DWORD PTR ds:0xc00250ac,0xc001641f
c001732c:	c7 05 b0 50 02 c0 82 64 01 c0 	mov    DWORD PTR ds:0xc00250b0,0xc0016482
c0017336:	c7 05 b4 50 02 c0 ca 64 01 c0 	mov    DWORD PTR ds:0xc00250b4,0xc00164ca
c0017340:	c7 05 b8 50 02 c0 83 6e 01 c0 	mov    DWORD PTR ds:0xc00250b8,0xc0016e83
c001734a:	c7 05 bc 50 02 c0 e6 6e 01 c0 	mov    DWORD PTR ds:0xc00250bc,0xc0016ee6
c0017354:	c7 05 c0 50 02 c0 1d 65 01 c0 	mov    DWORD PTR ds:0xc00250c0,0xc001651d
c001735e:	c7 05 c4 50 02 c0 0d 6f 01 c0 	mov    DWORD PTR ds:0xc00250c4,0xc0016f0d
c0017368:	c7 05 c8 50 02 c0 52 6f 01 c0 	mov    DWORD PTR ds:0xc00250c8,0xc0016f52
c0017372:	c7 05 cc 50 02 c0 05 62 01 c0 	mov    DWORD PTR ds:0xc00250cc,0xc0016205
c001737c:	c3                   	ret    

c001737d <systemCall(regs*, void*)>:
c001737d:	53                   	push   ebx
c001737e:	83 ec 08             	sub    esp,0x8
c0017381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017385:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017388:	83 f8 7f             	cmp    eax,0x7f
c001738b:	77 16                	ja     c00173a3 <systemCall(regs*, void*)+0x26>
c001738d:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0017394:	85 d2                	test   edx,edx
c0017396:	74 0b                	je     c00173a3 <systemCall(regs*, void*)+0x26>
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	53                   	push   ebx
c001739c:	ff d2                	call   edx
c001739e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00173a1:	eb 0d                	jmp    c00173b0 <systemCall(regs*, void*)+0x33>
c00173a3:	52                   	push   edx
c00173a4:	52                   	push   edx
c00173a5:	50                   	push   eax
c00173a6:	68 72 2a 02 c0       	push   0xc0022a72
c00173ab:	e8 a9 7d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00173b0:	83 c4 10             	add    esp,0x10
c00173b3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00173b8:	83 c4 08             	add    esp,0x8
c00173bb:	31 d2                	xor    edx,edx
c00173bd:	5b                   	pop    ebx
c00173be:	c3                   	ret    

c00173bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00173bf:	55                   	push   ebp
c00173c0:	89 e5                	mov    ebp,esp
c00173c2:	57                   	push   edi
c00173c3:	56                   	push   esi
c00173c4:	53                   	push   ebx
c00173c5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00173cb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00173ce:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00173d1:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00173d8:	74 27                	je     c0017401 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173da:	85 c0                	test   eax,eax
c00173dc:	74 23                	je     c0017401 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173de:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00173e2:	75 1d                	jne    c0017401 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00173e4:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00173e7:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00173ed:	89 d1                	mov    ecx,edx
c00173ef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173f5:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00173fb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00173fe:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0017401:	83 ec 0c             	sub    esp,0xc
c0017404:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017407:	05 ff 0f 00 00       	add    eax,0xfff
c001740c:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0017412:	6a 01                	push   0x1
c0017414:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001741a:	e8 1f 6d ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	89 c6                	mov    esi,eax
c0017424:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001742a:	0f 86 21 01 00 00    	jbe    c0017551 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017430:	c1 eb 0c             	shr    ebx,0xc
c0017433:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001743d:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017443:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017446:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0017449:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001744f:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017452:	29 d8                	sub    eax,ebx
c0017454:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001745a:	0f 83 f4 00 00 00    	jae    c0017554 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017460:	83 ec 0c             	sub    esp,0xc
c0017463:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017466:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001746c:	3d 00 10 00 00       	cmp    eax,0x1000
c0017471:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017473:	52                   	push   edx
c0017474:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001747a:	52                   	push   edx
c001747b:	76 05                	jbe    c0017482 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001747d:	b8 00 10 00 00       	mov    eax,0x1000
c0017482:	31 d2                	xor    edx,edx
c0017484:	52                   	push   edx
c0017485:	50                   	push   eax
c0017486:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0017489:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001748c:	83 c4 20             	add    esp,0x20
c001748f:	85 c0                	test   eax,eax
c0017491:	74 1f                	je     c00174b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017493:	51                   	push   ecx
c0017494:	51                   	push   ecx
c0017495:	50                   	push   eax
c0017496:	68 86 2a 02 c0       	push   0xc0022a86
c001749b:	e8 b9 7c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00174a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00174a3:	e8 e3 6f ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c00174a8:	83 c4 10             	add    esp,0x10
c00174ab:	31 c0                	xor    eax,eax
c00174ad:	e9 7c 01 00 00       	jmp    c001762e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c00174b2:	e8 be 14 00 00       	call   c0018975 <lockScheduler()>
c00174b7:	e8 05 51 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c00174bc:	6a 07                	push   0x7
c00174be:	56                   	push   esi
c00174bf:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00174c5:	50                   	push   eax
c00174c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174cc:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00174cf:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00174d5:	e8 30 73 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c00174da:	83 c4 0c             	add    esp,0xc
c00174dd:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00174e3:	6a 00                	push   0x0
c00174e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174eb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00174ee:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00174f4:	e8 6f 71 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c00174f9:	58                   	pop    eax
c00174fa:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0017500:	5a                   	pop    edx
c0017501:	68 07 04 00 00       	push   0x407
c0017506:	53                   	push   ebx
c0017507:	81 c3 00 10 00 00    	add    ebx,0x1000
c001750d:	50                   	push   eax
c001750e:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017514:	6a 00                	push   0x0
c0017516:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001751b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001751e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017524:	e8 9d 76 ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017529:	83 c4 1c             	add    esp,0x1c
c001752c:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017532:	68 00 10 00 00       	push   0x1000
c0017537:	50                   	push   eax
c0017538:	56                   	push   esi
c0017539:	e8 46 91 fe ff       	call   c0000684 <memcpy>
c001753e:	e8 34 14 00 00       	call   c0018977 <unlockScheduler()>
c0017543:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0017549:	83 c4 10             	add    esp,0x10
c001754c:	e9 f5 fe ff ff       	jmp    c0017446 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017551:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017554:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001755e:	0f 86 bc 00 00 00    	jbe    c0017620 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017564:	e8 0c 14 00 00       	call   c0018975 <lockScheduler()>
c0017569:	51                   	push   ecx
c001756a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017570:	6a 00                	push   0x0
c0017572:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017577:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001757a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017580:	e8 e3 70 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c0017585:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001758b:	c1 e8 0c             	shr    eax,0xc
c001758e:	83 c4 10             	add    esp,0x10
c0017591:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017597:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00175a1:	e8 1b 50 ff ff       	call   c000c5c1 <Phys::allocatePage()>
c00175a6:	6a 07                	push   0x7
c00175a8:	56                   	push   esi
c00175a9:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00175af:	50                   	push   eax
c00175b0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00175b6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00175b9:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00175bf:	e8 46 72 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c00175c4:	58                   	pop    eax
c00175c5:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c00175cb:	5a                   	pop    edx
c00175cc:	68 07 04 00 00       	push   0x407
c00175d1:	53                   	push   ebx
c00175d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175d8:	50                   	push   eax
c00175d9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175df:	6a 00                	push   0x0
c00175e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175e9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175ef:	e8 d2 75 ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175f4:	83 c4 1c             	add    esp,0x1c
c00175f7:	68 00 10 00 00       	push   0x1000
c00175fc:	6a 00                	push   0x0
c00175fe:	56                   	push   esi
c00175ff:	e8 b6 90 fe ff       	call   c00006ba <memset>
c0017604:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001760a:	83 c4 10             	add    esp,0x10
c001760d:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0017613:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0017619:	77 86                	ja     c00175a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c001761b:	e8 57 13 00 00       	call   c0018977 <unlockScheduler()>
c0017620:	83 ec 0c             	sub    esp,0xc
c0017623:	56                   	push   esi
c0017624:	e8 62 6e ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c0017629:	83 c4 10             	add    esp,0x10
c001762c:	b0 01                	mov    al,0x1
c001762e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017631:	5b                   	pop    ebx
c0017632:	5e                   	pop    esi
c0017633:	5f                   	pop    edi
c0017634:	5d                   	pop    ebp
c0017635:	c3                   	ret    

c0017636 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017636:	55                   	push   ebp
c0017637:	57                   	push   edi
c0017638:	56                   	push   esi
c0017639:	53                   	push   ebx
c001763a:	83 ec 48             	sub    esp,0x48
c001763d:	68 14 01 00 00       	push   0x114
c0017642:	e8 dd 79 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017647:	83 c4 0c             	add    esp,0xc
c001764a:	89 c6                	mov    esi,eax
c001764c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017650:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017654:	50                   	push   eax
c0017655:	e8 36 80 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001765a:	58                   	pop    eax
c001765b:	5a                   	pop    edx
c001765c:	6a 01                	push   0x1
c001765e:	56                   	push   esi
c001765f:	e8 90 80 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017664:	83 c4 10             	add    esp,0x10
c0017667:	85 c0                	test   eax,eax
c0017669:	0f 85 47 01 00 00    	jne    c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001766f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017677:	83 ec 0c             	sub    esp,0xc
c001767a:	6a 34                	push   0x34
c001767c:	e8 6a 49 ff ff       	call   c000bfeb <malloc>
c0017681:	89 c3                	mov    ebx,eax
c0017683:	58                   	pop    eax
c0017684:	8b 06                	mov    eax,DWORD PTR [esi]
c0017686:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001768a:	57                   	push   edi
c001768b:	53                   	push   ebx
c001768c:	6a 00                	push   0x0
c001768e:	6a 34                	push   0x34
c0017690:	56                   	push   esi
c0017691:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017694:	83 c4 20             	add    esp,0x20
c0017697:	85 c0                	test   eax,eax
c0017699:	0f 85 17 01 00 00    	jne    c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001769f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00176a5:	0f 85 0b 01 00 00    	jne    c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00176ae:	85 c0                	test   eax,eax
c00176b0:	0f 84 00 01 00 00    	je     c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176b6:	31 d2                	xor    edx,edx
c00176b8:	55                   	push   ebp
c00176b9:	52                   	push   edx
c00176ba:	50                   	push   eax
c00176bb:	56                   	push   esi
c00176bc:	e8 f1 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	85 c0                	test   eax,eax
c00176c6:	0f 85 ea 00 00 00    	jne    c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00176cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00176cf:	83 ec 0c             	sub    esp,0xc
c00176d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176d6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176da:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176de:	0f af c2             	imul   eax,edx
c00176e1:	50                   	push   eax
c00176e2:	e8 04 49 ff ff       	call   c000bfeb <malloc>
c00176e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00176ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176f2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00176f6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00176fa:	0f af c2             	imul   eax,edx
c00176fd:	99                   	cdq    
c00176fe:	52                   	push   edx
c00176ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017701:	50                   	push   eax
c0017702:	56                   	push   esi
c0017703:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017706:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017709:	83 c4 20             	add    esp,0x20
c001770c:	85 c0                	test   eax,eax
c001770e:	0f 84 a2 00 00 00    	je     c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017714:	31 d2                	xor    edx,edx
c0017716:	51                   	push   ecx
c0017717:	52                   	push   edx
c0017718:	50                   	push   eax
c0017719:	56                   	push   esi
c001771a:	e8 93 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001771f:	83 c4 10             	add    esp,0x10
c0017722:	85 c0                	test   eax,eax
c0017724:	0f 85 8c 00 00 00    	jne    c00177b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001772a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001772e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017732:	0f af c2             	imul   eax,edx
c0017735:	83 ec 0c             	sub    esp,0xc
c0017738:	31 ed                	xor    ebp,ebp
c001773a:	50                   	push   eax
c001773b:	e8 ab 48 ff ff       	call   c000bfeb <malloc>
c0017740:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017744:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001774b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001774f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017753:	0f af c2             	imul   eax,edx
c0017756:	99                   	cdq    
c0017757:	52                   	push   edx
c0017758:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001775a:	50                   	push   eax
c001775b:	56                   	push   esi
c001775c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001775f:	83 c4 20             	add    esp,0x20
c0017762:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001776a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001776e:	0f 86 80 00 00 00    	jbe    c00177f4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017774:	0f b7 fd             	movzx  edi,bp
c0017777:	c1 e7 05             	shl    edi,0x5
c001777a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001777e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017781:	75 6b                	jne    c00177ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017783:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017786:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001778a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001778d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017791:	52                   	push   edx
c0017792:	31 d2                	xor    edx,edx
c0017794:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017797:	52                   	push   edx
c0017798:	50                   	push   eax
c0017799:	56                   	push   esi
c001779a:	e8 13 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	85 c0                	test   eax,eax
c00177a4:	74 17                	je     c00177bd <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00177a6:	83 ec 0c             	sub    esp,0xc
c00177a9:	68 b1 2a 02 c0       	push   0xc0022ab1
c00177ae:	e8 a6 79 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00177b3:	83 c4 10             	add    esp,0x10
c00177b6:	31 c0                	xor    eax,eax
c00177b8:	e9 87 00 00 00       	jmp    c0017844 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00177bd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00177c0:	83 ec 0c             	sub    esp,0xc
c00177c3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00177c6:	50                   	push   eax
c00177c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00177cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177cf:	56                   	push   esi
c00177d0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00177d4:	e8 e6 fb ff ff       	call   c00173bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00177d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177dd:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00177e1:	83 c4 20             	add    esp,0x20
c00177e4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00177e8:	73 04                	jae    c00177ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00177ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177ee:	45                   	inc    ebp
c00177ef:	e9 76 ff ff ff       	jmp    c001776a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00177f4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00177f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017800:	83 ec 0c             	sub    esp,0xc
c0017803:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0017809:	25 00 f0 ff ff       	and    eax,0xfffff000
c001780e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0017814:	05 00 10 00 00       	add    eax,0x1000
c0017819:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001781c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017820:	e8 d6 47 ff ff       	call   c000bffb <free>
c0017825:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017828:	e8 ce 47 ff ff       	call   c000bffb <free>
c001782d:	58                   	pop    eax
c001782e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017832:	e8 c4 47 ff ff       	call   c000bffb <free>
c0017837:	89 34 24             	mov    DWORD PTR [esp],esi
c001783a:	e8 13 7f ff ff       	call   c000f752 <File::close()>
c001783f:	83 c4 10             	add    esp,0x10
c0017842:	b0 01                	mov    al,0x1
c0017844:	83 c4 3c             	add    esp,0x3c
c0017847:	5b                   	pop    ebx
c0017848:	5e                   	pop    esi
c0017849:	5f                   	pop    edi
c001784a:	5d                   	pop    ebp
c001784b:	c3                   	ret    

c001784c <Thr::runtimeReferenceHelper()>:
c001784c:	83 ec 18             	sub    esp,0x18
c001784f:	68 b9 2a 02 c0       	push   0xc0022ab9
c0017854:	e8 00 79 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017859:	fa                   	cli    
c001785a:	83 c4 10             	add    esp,0x10
c001785d:	eb fe                	jmp    c001785d <Thr::runtimeReferenceHelper()+0x11>

c001785f <Thr::getAddressOfKernelSymbol(char const*)>:
c001785f:	57                   	push   edi
c0017860:	56                   	push   esi
c0017861:	53                   	push   ebx
c0017862:	31 db                	xor    ebx,ebx
c0017864:	39 1d c0 59 02 c0    	cmp    DWORD PTR ds:0xc00259c0,ebx
c001786a:	7e 3c                	jle    c00178a8 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001786c:	8b 34 9d 40 59 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda6c0]
c0017873:	31 ff                	xor    edi,edi
c0017875:	39 3c 9d 40 58 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda7c0],edi
c001787c:	7e 27                	jle    c00178a5 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001787e:	50                   	push   eax
c001787f:	50                   	push   eax
c0017880:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017884:	8b 06                	mov    eax,DWORD PTR [esi]
c0017886:	03 04 9d c0 58 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda740]
c001788d:	50                   	push   eax
c001788e:	e8 17 8f fe ff       	call   c00007aa <strcmp>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	85 c0                	test   eax,eax
c0017898:	75 05                	jne    c001789f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001789a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001789d:	eb 0b                	jmp    c00178aa <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001789f:	83 c6 10             	add    esi,0x10
c00178a2:	47                   	inc    edi
c00178a3:	eb d0                	jmp    c0017875 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00178a5:	43                   	inc    ebx
c00178a6:	eb bc                	jmp    c0017864 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00178a8:	31 c0                	xor    eax,eax
c00178aa:	5b                   	pop    ebx
c00178ab:	5e                   	pop    esi
c00178ac:	5f                   	pop    edi
c00178ad:	c3                   	ret    

c00178ae <Thr::loadKernelSymbolTable(char const*)>:
c00178ae:	55                   	push   ebp
c00178af:	57                   	push   edi
c00178b0:	56                   	push   esi
c00178b1:	53                   	push   ebx
c00178b2:	83 ec 68             	sub    esp,0x68
c00178b5:	8b 35 14 5a 02 c0    	mov    esi,DWORD PTR ds:0xc0025a14
c00178bb:	68 14 01 00 00       	push   0x114
c00178c0:	e8 5f 77 ff ff       	call   c000f024 <operator new(unsigned long)>
c00178c5:	83 c4 0c             	add    esp,0xc
c00178c8:	89 c3                	mov    ebx,eax
c00178ca:	56                   	push   esi
c00178cb:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00178cf:	50                   	push   eax
c00178d0:	e8 bb 7d ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00178d5:	5e                   	pop    esi
c00178d6:	5f                   	pop    edi
c00178d7:	6a 01                	push   0x1
c00178d9:	53                   	push   ebx
c00178da:	e8 15 7e ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c00178df:	83 c4 10             	add    esp,0x10
c00178e2:	31 d2                	xor    edx,edx
c00178e4:	85 c0                	test   eax,eax
c00178e6:	0f 85 79 02 00 00    	jne    c0017b65 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00178ec:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	6a 34                	push   0x34
c00178f9:	e8 ed 46 ff ff       	call   c000bfeb <malloc>
c00178fe:	59                   	pop    ecx
c00178ff:	89 c7                	mov    edi,eax
c0017901:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017903:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017907:	56                   	push   esi
c0017908:	57                   	push   edi
c0017909:	6a 00                	push   0x0
c001790b:	6a 34                	push   0x34
c001790d:	53                   	push   ebx
c001790e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017911:	83 c4 20             	add    esp,0x20
c0017914:	85 c0                	test   eax,eax
c0017916:	74 17                	je     c001792f <Thr::loadKernelSymbolTable(char const*)+0x81>
c0017918:	83 ec 0c             	sub    esp,0xc
c001791b:	68 db 2a 02 c0       	push   0xc0022adb
c0017920:	e8 63 e0 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	31 d2                	xor    edx,edx
c001792a:	e9 36 02 00 00       	jmp    c0017b65 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001792f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017935:	75 e1                	jne    c0017918 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017937:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001793a:	85 c0                	test   eax,eax
c001793c:	74 da                	je     c0017918 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001793e:	52                   	push   edx
c001793f:	31 d2                	xor    edx,edx
c0017941:	52                   	push   edx
c0017942:	50                   	push   eax
c0017943:	53                   	push   ebx
c0017944:	e8 69 7e ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	85 c0                	test   eax,eax
c001794e:	75 c8                	jne    c0017918 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017950:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017954:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017958:	0f af c2             	imul   eax,edx
c001795b:	83 ec 0c             	sub    esp,0xc
c001795e:	31 ed                	xor    ebp,ebp
c0017960:	50                   	push   eax
c0017961:	e8 85 46 ff ff       	call   c000bfeb <malloc>
c0017966:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001796a:	89 34 24             	mov    DWORD PTR [esp],esi
c001796d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017971:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017975:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017979:	0f af c2             	imul   eax,edx
c001797c:	99                   	cdq    
c001797d:	52                   	push   edx
c001797e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017980:	50                   	push   eax
c0017981:	53                   	push   ebx
c0017982:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017985:	83 c4 20             	add    esp,0x20
c0017988:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017990:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017998:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00179a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00179a8:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00179ac:	0f 86 aa 00 00 00    	jbe    c0017a5c <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c00179b2:	0f b7 f5             	movzx  esi,bp
c00179b5:	6b f6 28             	imul   esi,esi,0x28
c00179b8:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00179bc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00179bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179c3:	50                   	push   eax
c00179c4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00179c8:	6b c0 28             	imul   eax,eax,0x28
c00179cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00179cf:	8b 16                	mov    edx,DWORD PTR [esi]
c00179d1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00179d5:	89 d0                	mov    eax,edx
c00179d7:	31 d2                	xor    edx,edx
c00179d9:	52                   	push   edx
c00179da:	50                   	push   eax
c00179db:	53                   	push   ebx
c00179dc:	e8 d1 7d ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00179e1:	83 c4 0c             	add    esp,0xc
c00179e4:	6a 20                	push   0x20
c00179e6:	6a 00                	push   0x0
c00179e8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00179ec:	52                   	push   edx
c00179ed:	e8 c8 8c fe ff       	call   c00006ba <memset>
c00179f2:	58                   	pop    eax
c00179f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179f5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00179f9:	51                   	push   ecx
c00179fa:	8d 54 24 40          	lea    edx,[esp+0x40]
c00179fe:	52                   	push   edx
c00179ff:	6a 00                	push   0x0
c0017a01:	6a 1f                	push   0x1f
c0017a03:	53                   	push   ebx
c0017a04:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017a07:	83 c4 18             	add    esp,0x18
c0017a0a:	68 f2 2a 02 c0       	push   0xc0022af2
c0017a0f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017a13:	52                   	push   edx
c0017a14:	e8 91 8d fe ff       	call   c00007aa <strcmp>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	85 c0                	test   eax,eax
c0017a1e:	75 0f                	jne    c0017a2f <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017a20:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a2f:	50                   	push   eax
c0017a30:	50                   	push   eax
c0017a31:	68 fa 2a 02 c0       	push   0xc0022afa
c0017a36:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017a3a:	50                   	push   eax
c0017a3b:	e8 6a 8d fe ff       	call   c00007aa <strcmp>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	85 c0                	test   eax,eax
c0017a45:	75 0f                	jne    c0017a56 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017a47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017a4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a56:	45                   	inc    ebp
c0017a57:	e9 4c ff ff ff       	jmp    c00179a8 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017a5c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017a61:	75 10                	jne    c0017a73 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017a63:	83 ec 0c             	sub    esp,0xc
c0017a66:	68 02 2b 02 c0       	push   0xc0022b02
c0017a6b:	e8 18 df ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0017a70:	83 c4 10             	add    esp,0x10
c0017a73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a78:	75 10                	jne    c0017a8a <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017a7a:	83 ec 0c             	sub    esp,0xc
c0017a7d:	68 02 2b 02 c0       	push   0xc0022b02
c0017a82:	e8 01 df ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	31 d2                	xor    edx,edx
c0017a8c:	50                   	push   eax
c0017a8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a91:	52                   	push   edx
c0017a92:	50                   	push   eax
c0017a93:	53                   	push   ebx
c0017a94:	e8 19 7d ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017a99:	5a                   	pop    edx
c0017a9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a9e:	e8 48 45 ff ff       	call   c000bfeb <malloc>
c0017aa3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017aab:	89 c1                	mov    ecx,eax
c0017aad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ab1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ab5:	5e                   	pop    esi
c0017ab6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ab8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017abc:	55                   	push   ebp
c0017abd:	51                   	push   ecx
c0017abe:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017ac2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ac6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aca:	53                   	push   ebx
c0017acb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ace:	83 c4 14             	add    esp,0x14
c0017ad1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ad5:	e8 11 45 ff ff       	call   c000bfeb <malloc>
c0017ada:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017add:	89 c6                	mov    esi,eax
c0017adf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ae1:	56                   	push   esi
c0017ae2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ae6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aea:	53                   	push   ebx
c0017aeb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017aee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017af2:	8b 15 c0 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259c0
c0017af8:	c1 e8 04             	shr    eax,0x4
c0017afb:	83 c4 1c             	add    esp,0x1c
c0017afe:	89 04 95 40 58 02 c0 	mov    DWORD PTR [edx*4-0x3ffda7c0],eax
c0017b05:	31 d2                	xor    edx,edx
c0017b07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b0b:	52                   	push   edx
c0017b0c:	50                   	push   eax
c0017b0d:	53                   	push   ebx
c0017b0e:	e8 9f 7c ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017b13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b16:	31 d2                	xor    edx,edx
c0017b18:	56                   	push   esi
c0017b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1d:	52                   	push   edx
c0017b1e:	50                   	push   eax
c0017b1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b21:	53                   	push   ebx
c0017b22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017b25:	83 c4 14             	add    esp,0x14
c0017b28:	53                   	push   ebx
c0017b29:	e8 24 7c ff ff       	call   c000f752 <File::close()>
c0017b2e:	5d                   	pop    ebp
c0017b2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b33:	e8 c3 44 ff ff       	call   c000bffb <free>
c0017b38:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b3b:	e8 bb 44 ff ff       	call   c000bffb <free>
c0017b40:	a1 c0 59 02 c0       	mov    eax,ds:0xc00259c0
c0017b45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b49:	8d 50 01             	lea    edx,[eax+0x1]
c0017b4c:	89 15 c0 59 02 c0    	mov    DWORD PTR ds:0xc00259c0,edx
c0017b52:	89 0c 85 40 59 02 c0 	mov    DWORD PTR [eax*4-0x3ffda6c0],ecx
c0017b59:	89 34 85 c0 58 02 c0 	mov    DWORD PTR [eax*4-0x3ffda740],esi
c0017b60:	83 c4 10             	add    esp,0x10
c0017b63:	b2 01                	mov    dl,0x1
c0017b65:	83 c4 5c             	add    esp,0x5c
c0017b68:	88 d0                	mov    al,dl
c0017b6a:	5b                   	pop    ebx
c0017b6b:	5e                   	pop    esi
c0017b6c:	5f                   	pop    edi
c0017b6d:	5d                   	pop    ebp
c0017b6e:	c3                   	ret    

c0017b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017b6f:	55                   	push   ebp
c0017b70:	57                   	push   edi
c0017b71:	56                   	push   esi
c0017b72:	53                   	push   ebx
c0017b73:	81 ec 68 03 00 00    	sub    esp,0x368
c0017b79:	8b 1d 14 5a 02 c0    	mov    ebx,DWORD PTR ds:0xc0025a14
c0017b7f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017b86:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b8a:	68 14 01 00 00       	push   0x114
c0017b8f:	e8 90 74 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017b94:	83 c4 0c             	add    esp,0xc
c0017b97:	53                   	push   ebx
c0017b98:	89 c7                	mov    edi,eax
c0017b9a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017ba1:	50                   	push   eax
c0017ba2:	e8 e9 7a ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017ba7:	5e                   	pop    esi
c0017ba8:	5d                   	pop    ebp
c0017ba9:	6a 01                	push   0x1
c0017bab:	57                   	push   edi
c0017bac:	e8 43 7b ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	85 c0                	test   eax,eax
c0017bb6:	0f 85 10 07 00 00    	jne    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bbc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017bc4:	83 ec 0c             	sub    esp,0xc
c0017bc7:	6a 34                	push   0x34
c0017bc9:	e8 1d 44 ff ff       	call   c000bfeb <malloc>
c0017bce:	5b                   	pop    ebx
c0017bcf:	89 c5                	mov    ebp,eax
c0017bd1:	8b 07                	mov    eax,DWORD PTR [edi]
c0017bd3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017bd7:	53                   	push   ebx
c0017bd8:	55                   	push   ebp
c0017bd9:	6a 00                	push   0x0
c0017bdb:	6a 34                	push   0x34
c0017bdd:	57                   	push   edi
c0017bde:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017be1:	83 c4 20             	add    esp,0x20
c0017be4:	85 c0                	test   eax,eax
c0017be6:	0f 85 e0 06 00 00    	jne    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bec:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017bf3:	0f 85 d3 06 00 00    	jne    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017bf9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017bfc:	85 c0                	test   eax,eax
c0017bfe:	0f 84 c8 06 00 00    	je     c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c04:	31 d2                	xor    edx,edx
c0017c06:	51                   	push   ecx
c0017c07:	52                   	push   edx
c0017c08:	50                   	push   eax
c0017c09:	57                   	push   edi
c0017c0a:	e8 a3 7b ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017c0f:	83 c4 10             	add    esp,0x10
c0017c12:	85 c0                	test   eax,eax
c0017c14:	0f 85 b2 06 00 00    	jne    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c1a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017c1d:	83 ec 0c             	sub    esp,0xc
c0017c20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c24:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017c28:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c2c:	0f af c2             	imul   eax,edx
c0017c2f:	50                   	push   eax
c0017c30:	e8 b6 43 ff ff       	call   c000bfeb <malloc>
c0017c35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c40:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017c44:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c48:	0f af c2             	imul   eax,edx
c0017c4b:	99                   	cdq    
c0017c4c:	52                   	push   edx
c0017c4d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c4f:	50                   	push   eax
c0017c50:	57                   	push   edi
c0017c51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c54:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017c57:	83 c4 20             	add    esp,0x20
c0017c5a:	85 c0                	test   eax,eax
c0017c5c:	0f 84 6a 06 00 00    	je     c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c62:	52                   	push   edx
c0017c63:	31 d2                	xor    edx,edx
c0017c65:	52                   	push   edx
c0017c66:	50                   	push   eax
c0017c67:	57                   	push   edi
c0017c68:	e8 45 7b ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017c6d:	83 c4 10             	add    esp,0x10
c0017c70:	85 c0                	test   eax,eax
c0017c72:	0f 85 54 06 00 00    	jne    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c78:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c7c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017c80:	0f af c2             	imul   eax,edx
c0017c83:	83 ec 0c             	sub    esp,0xc
c0017c86:	31 f6                	xor    esi,esi
c0017c88:	50                   	push   eax
c0017c89:	e8 5d 43 ff ff       	call   c000bfeb <malloc>
c0017c8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017c95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c99:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017c9d:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017ca1:	0f af c2             	imul   eax,edx
c0017ca4:	99                   	cdq    
c0017ca5:	52                   	push   edx
c0017ca6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017ca8:	50                   	push   eax
c0017ca9:	57                   	push   edi
c0017caa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017cad:	83 c4 20             	add    esp,0x20
c0017cb0:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017cb4:	0f 86 af 00 00 00    	jbe    c0017d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017cba:	0f b7 de             	movzx  ebx,si
c0017cbd:	c1 e3 05             	shl    ebx,0x5
c0017cc0:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017cc4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017cc7:	0f 85 96 00 00 00    	jne    c0017d63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017ccd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017cd0:	31 d2                	xor    edx,edx
c0017cd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cdd:	50                   	push   eax
c0017cde:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017ce1:	52                   	push   edx
c0017ce2:	50                   	push   eax
c0017ce3:	57                   	push   edi
c0017ce4:	e8 c9 7a ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017ce9:	83 c4 10             	add    esp,0x10
c0017cec:	85 c0                	test   eax,eax
c0017cee:	0f 85 d8 05 00 00    	jne    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cf4:	52                   	push   edx
c0017cf5:	52                   	push   edx
c0017cf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cfa:	68 1c 2b 02 c0       	push   0xc0022b1c
c0017cff:	e8 55 74 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017d04:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017d0b:	31 d2                	xor    edx,edx
c0017d0d:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017d11:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017d15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d19:	59                   	pop    ecx
c0017d1a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d1c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017d23:	50                   	push   eax
c0017d24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d2c:	52                   	push   edx
c0017d2d:	50                   	push   eax
c0017d2e:	57                   	push   edi
c0017d2f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d32:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d35:	83 c4 18             	add    esp,0x18
c0017d38:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d3b:	50                   	push   eax
c0017d3c:	68 40 2b 02 c0       	push   0xc0022b40
c0017d41:	e8 13 74 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017d46:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017d49:	83 c4 0c             	add    esp,0xc
c0017d4c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017d4f:	50                   	push   eax
c0017d50:	6a 00                	push   0x0
c0017d52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d56:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017d5a:	50                   	push   eax
c0017d5b:	e8 5a 89 fe ff       	call   c00006ba <memset>
c0017d60:	83 c4 10             	add    esp,0x10
c0017d63:	46                   	inc    esi
c0017d64:	e9 47 ff ff ff       	jmp    c0017cb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017d69:	50                   	push   eax
c0017d6a:	31 db                	xor    ebx,ebx
c0017d6c:	68 00 01 00 00       	push   0x100
c0017d71:	6a 00                	push   0x0
c0017d73:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017d77:	50                   	push   eax
c0017d78:	e8 3d 89 fe ff       	call   c00006ba <memset>
c0017d7d:	83 c4 0c             	add    esp,0xc
c0017d80:	68 00 01 00 00       	push   0x100
c0017d85:	6a 00                	push   0x0
c0017d87:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017d8e:	50                   	push   eax
c0017d8f:	e8 26 89 fe ff       	call   c00006ba <memset>
c0017d94:	83 c4 10             	add    esp,0x10
c0017d97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017d9f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017da7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017daf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017db7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dbf:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017dc3:	0f 86 2f 01 00 00    	jbe    c0017ef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017dc9:	0f b7 f3             	movzx  esi,bx
c0017dcc:	6b f6 28             	imul   esi,esi,0x28
c0017dcf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017dd3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017dd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017dda:	50                   	push   eax
c0017ddb:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017ddf:	6b d2 28             	imul   edx,edx,0x28
c0017de2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017de6:	8b 06                	mov    eax,DWORD PTR [esi]
c0017de8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017dec:	31 d2                	xor    edx,edx
c0017dee:	52                   	push   edx
c0017def:	50                   	push   eax
c0017df0:	57                   	push   edi
c0017df1:	e8 bc 79 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017df6:	83 c4 0c             	add    esp,0xc
c0017df9:	6a 20                	push   0x20
c0017dfb:	6a 00                	push   0x0
c0017dfd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017e04:	51                   	push   ecx
c0017e05:	e8 b0 88 fe ff       	call   c00006ba <memset>
c0017e0a:	58                   	pop    eax
c0017e0b:	8b 07                	mov    eax,DWORD PTR [edi]
c0017e0d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017e11:	52                   	push   edx
c0017e12:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017e19:	51                   	push   ecx
c0017e1a:	6a 00                	push   0x0
c0017e1c:	6a 1f                	push   0x1f
c0017e1e:	57                   	push   edi
c0017e1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e22:	83 c4 1c             	add    esp,0x1c
c0017e25:	6a 09                	push   0x9
c0017e27:	68 5d 2b 02 c0       	push   0xc0022b5d
c0017e2c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017e33:	51                   	push   ecx
c0017e34:	e8 e8 87 fe ff       	call   c0000621 <memcmp>
c0017e39:	83 c4 10             	add    esp,0x10
c0017e3c:	85 c0                	test   eax,eax
c0017e3e:	75 21                	jne    c0017e61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017e40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e4c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e50:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e53:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e5a:	89 c8                	mov    eax,ecx
c0017e5c:	40                   	inc    eax
c0017e5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e61:	50                   	push   eax
c0017e62:	6a 09                	push   0x9
c0017e64:	68 67 2b 02 c0       	push   0xc0022b67
c0017e69:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017e70:	50                   	push   eax
c0017e71:	e8 ab 87 fe ff       	call   c0000621 <memcmp>
c0017e76:	83 c4 10             	add    esp,0x10
c0017e79:	85 c0                	test   eax,eax
c0017e7b:	75 21                	jne    c0017e9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017e7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017e85:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e89:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017e8d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017e90:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017e97:	89 c8                	mov    eax,ecx
c0017e99:	40                   	inc    eax
c0017e9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e9e:	50                   	push   eax
c0017e9f:	50                   	push   eax
c0017ea0:	68 f2 2a 02 c0       	push   0xc0022af2
c0017ea5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017eac:	50                   	push   eax
c0017ead:	e8 f8 88 fe ff       	call   c00007aa <strcmp>
c0017eb2:	83 c4 10             	add    esp,0x10
c0017eb5:	85 c0                	test   eax,eax
c0017eb7:	75 0f                	jne    c0017ec8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017eb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ec4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ec8:	50                   	push   eax
c0017ec9:	50                   	push   eax
c0017eca:	68 fa 2a 02 c0       	push   0xc0022afa
c0017ecf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ed6:	50                   	push   eax
c0017ed7:	e8 ce 88 fe ff       	call   c00007aa <strcmp>
c0017edc:	83 c4 10             	add    esp,0x10
c0017edf:	85 c0                	test   eax,eax
c0017ee1:	75 0f                	jne    c0017ef2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017ee3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ee6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017eea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ef2:	43                   	inc    ebx
c0017ef3:	e9 c7 fe ff ff       	jmp    c0017dbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017ef8:	31 d2                	xor    edx,edx
c0017efa:	50                   	push   eax
c0017efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017eff:	52                   	push   edx
c0017f00:	50                   	push   eax
c0017f01:	57                   	push   edi
c0017f02:	e8 ab 78 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017f07:	5a                   	pop    edx
c0017f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f0c:	e8 da 40 ff ff       	call   c000bfeb <malloc>
c0017f11:	31 d2                	xor    edx,edx
c0017f13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017f17:	59                   	pop    ecx
c0017f18:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f1a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017f1e:	53                   	push   ebx
c0017f1f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017f23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f27:	52                   	push   edx
c0017f28:	50                   	push   eax
c0017f29:	57                   	push   edi
c0017f2a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f2d:	83 c4 14             	add    esp,0x14
c0017f30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f34:	e8 b2 40 ff ff       	call   c000bfeb <malloc>
c0017f39:	31 d2                	xor    edx,edx
c0017f3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017f3f:	83 c4 0c             	add    esp,0xc
c0017f42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f46:	52                   	push   edx
c0017f47:	50                   	push   eax
c0017f48:	57                   	push   edi
c0017f49:	e8 64 78 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017f4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f51:	31 d2                	xor    edx,edx
c0017f53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f5b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017f5d:	52                   	push   edx
c0017f5e:	50                   	push   eax
c0017f5f:	57                   	push   edi
c0017f60:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f63:	83 c4 20             	add    esp,0x20
c0017f66:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f72:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0017f76:	0f 84 54 03 00 00    	je     c00182d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c0017f7c:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017f83:	31 d2                	xor    edx,edx
c0017f85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f89:	c1 e8 03             	shr    eax,0x3
c0017f8c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017f90:	50                   	push   eax
c0017f91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f95:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017f99:	52                   	push   edx
c0017f9a:	50                   	push   eax
c0017f9b:	57                   	push   edi
c0017f9c:	e8 11 78 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017fa1:	58                   	pop    eax
c0017fa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017fad:	e8 39 40 ff ff       	call   c000bfeb <malloc>
c0017fb2:	31 d2                	xor    edx,edx
c0017fb4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fb8:	58                   	pop    eax
c0017fb9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fbb:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017fbf:	50                   	push   eax
c0017fc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017fc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fc8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017fcf:	52                   	push   edx
c0017fd0:	50                   	push   eax
c0017fd1:	57                   	push   edi
c0017fd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017fd5:	83 c4 20             	add    esp,0x20
c0017fd8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017fe0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017fe4:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017fe8:	0f 8d c6 02 00 00    	jge    c00182b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017fee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ff2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ff6:	31 db                	xor    ebx,ebx
c0017ff8:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017ffb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017fff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018003:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0018007:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001800b:	c1 e8 08             	shr    eax,0x8
c001800e:	89 c6                	mov    esi,eax
c0018010:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018014:	c1 e6 04             	shl    esi,0x4
c0018017:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001801b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018022:	85 c0                	test   eax,eax
c0018024:	0f 85 17 01 00 00    	jne    c0018141 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001802a:	83 ec 0c             	sub    esp,0xc
c001802d:	b3 01                	mov    bl,0x1
c001802f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018033:	03 06                	add    eax,DWORD PTR [esi]
c0018035:	50                   	push   eax
c0018036:	e8 24 f8 ff ff       	call   c001785f <Thr::getAddressOfKernelSymbol(char const*)>
c001803b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001803f:	83 c4 10             	add    esp,0x10
c0018042:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018047:	0f 85 f4 00 00 00    	jne    c0018141 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001804d:	50                   	push   eax
c001804e:	50                   	push   eax
c001804f:	68 71 2b 02 c0       	push   0xc0022b71
c0018054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018058:	03 06                	add    eax,DWORD PTR [esi]
c001805a:	50                   	push   eax
c001805b:	e8 4a 87 fe ff       	call   c00007aa <strcmp>
c0018060:	83 c4 10             	add    esp,0x10
c0018063:	85 c0                	test   eax,eax
c0018065:	75 0a                	jne    c0018071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0018067:	b8 0c f4 01 c0       	mov    eax,0xc001f40c
c001806c:	e9 ca 00 00 00       	jmp    c001813b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018071:	50                   	push   eax
c0018072:	50                   	push   eax
c0018073:	68 7b 2b 02 c0       	push   0xc0022b7b
c0018078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001807c:	03 06                	add    eax,DWORD PTR [esi]
c001807e:	50                   	push   eax
c001807f:	e8 26 87 fe ff       	call   c00007aa <strcmp>
c0018084:	83 c4 10             	add    esp,0x10
c0018087:	85 c0                	test   eax,eax
c0018089:	75 0a                	jne    c0018095 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001808b:	b8 40 f1 01 c0       	mov    eax,0xc001f140
c0018090:	e9 a6 00 00 00       	jmp    c001813b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018095:	53                   	push   ebx
c0018096:	53                   	push   ebx
c0018097:	68 84 2b 02 c0       	push   0xc0022b84
c001809c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180a0:	03 06                	add    eax,DWORD PTR [esi]
c00180a2:	50                   	push   eax
c00180a3:	e8 02 87 fe ff       	call   c00007aa <strcmp>
c00180a8:	83 c4 10             	add    esp,0x10
c00180ab:	85 c0                	test   eax,eax
c00180ad:	75 0a                	jne    c00180b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c00180af:	b8 0c f5 01 c0       	mov    eax,0xc001f50c
c00180b4:	e9 82 00 00 00       	jmp    c001813b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c00180b9:	51                   	push   ecx
c00180ba:	51                   	push   ecx
c00180bb:	68 8e 2b 02 c0       	push   0xc0022b8e
c00180c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00180c4:	03 06                	add    eax,DWORD PTR [esi]
c00180c6:	50                   	push   eax
c00180c7:	e8 de 86 fe ff       	call   c00007aa <strcmp>
c00180cc:	83 c4 10             	add    esp,0x10
c00180cf:	85 c0                	test   eax,eax
c00180d1:	74 63                	je     c0018136 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00180d3:	50                   	push   eax
c00180d4:	50                   	push   eax
c00180d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180d9:	03 06                	add    eax,DWORD PTR [esi]
c00180db:	50                   	push   eax
c00180dc:	68 97 2b 02 c0       	push   0xc0022b97
c00180e1:	e8 73 70 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00180e6:	58                   	pop    eax
c00180e7:	5a                   	pop    edx
c00180e8:	68 b1 2b 02 c0       	push   0xc0022bb1
c00180ed:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00180f4:	53                   	push   ebx
c00180f5:	e8 5f 86 fe ff       	call   c0000759 <strcpy>
c00180fa:	59                   	pop    ecx
c00180fb:	58                   	pop    eax
c00180fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018100:	03 06                	add    eax,DWORD PTR [esi]
c0018102:	50                   	push   eax
c0018103:	53                   	push   ebx
c0018104:	e8 07 87 fe ff       	call   c0000810 <strcat>
c0018109:	58                   	pop    eax
c001810a:	5a                   	pop    edx
c001810b:	68 47 2c 02 c0       	push   0xc0022c47
c0018110:	53                   	push   ebx
c0018111:	e8 fa 86 fe ff       	call   c0000810 <strcat>
c0018116:	83 c4 10             	add    esp,0x10
c0018119:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001811e:	0f 84 4b 01 00 00    	je     c001826f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	53                   	push   ebx
c0018128:	e8 5b d8 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018134:	eb 0b                	jmp    c0018141 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018136:	b8 8c f2 01 c0       	mov    eax,0xc001f28c
c001813b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001813f:	b3 01                	mov    bl,0x1
c0018141:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018146:	0f 85 80 00 00 00    	jne    c00181cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001814c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018153:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018157:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001815b:	01 ce                	add    esi,ecx
c001815d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018165:	0f 94 c2             	sete   dl
c0018168:	8b 06                	mov    eax,DWORD PTR [esi]
c001816a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018172:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0018177:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001817b:	84 db                	test   bl,bl
c001817d:	74 31                	je     c00181b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001817f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018183:	01 c3                	add    ebx,eax
c0018185:	84 d2                	test   dl,dl
c0018187:	75 0a                	jne    c0018193 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0018189:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001818d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018191:	76 32                	jbe    c00181c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018193:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018198:	0f 84 d1 00 00 00    	je     c001826f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001819e:	83 ec 0c             	sub    esp,0xc
c00181a1:	68 c8 2b 02 c0       	push   0xc0022bc8
c00181a6:	e8 dd d7 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	eb 15                	jmp    c00181c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00181b0:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c00181b3:	84 d2                	test   dl,dl
c00181b5:	75 0e                	jne    c00181c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00181b7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00181bb:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00181bf:	77 04                	ja     c00181c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c00181c1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00181c5:	89 1e                	mov    DWORD PTR [esi],ebx
c00181c7:	e9 df 00 00 00       	jmp    c00182ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00181cc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00181d1:	75 6e                	jne    c0018241 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00181d3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00181da:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00181de:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00181e2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00181ea:	74 17                	je     c0018203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181ec:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00181f4:	74 0d                	je     c0018203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00181f6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00181fa:	83 e8 04             	sub    eax,0x4
c00181fd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018201:	76 17                	jbe    c001821a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0018203:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0018208:	74 65                	je     c001826f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001820a:	83 ec 0c             	sub    esp,0xc
c001820d:	68 e4 2b 02 c0       	push   0xc0022be4
c0018212:	e8 71 d7 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	8b 16                	mov    edx,DWORD PTR [esi]
c001821c:	84 db                	test   bl,bl
c001821e:	74 13                	je     c0018233 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0018220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018224:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001822b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001822f:	01 d0                	add    eax,edx
c0018231:	eb 06                	jmp    c0018239 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018233:	89 d0                	mov    eax,edx
c0018235:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018239:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001823d:	89 06                	mov    DWORD PTR [esi],eax
c001823f:	eb 6a                	jmp    c00182ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018241:	50                   	push   eax
c0018242:	50                   	push   eax
c0018243:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018248:	50                   	push   eax
c0018249:	68 00 2c 02 c0       	push   0xc0022c00
c001824e:	e8 06 6f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018253:	83 c4 10             	add    esp,0x10
c0018256:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001825b:	74 12                	je     c001826f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001825d:	83 ec 0c             	sub    esp,0xc
c0018260:	68 0b 2c 02 c0       	push   0xc0022c0b
c0018265:	e8 1e d7 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001826a:	83 c4 10             	add    esp,0x10
c001826d:	eb 3c                	jmp    c00182ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001826f:	83 ec 0c             	sub    esp,0xc
c0018272:	57                   	push   edi
c0018273:	e8 da 74 ff ff       	call   c000f752 <File::close()>
c0018278:	8b 07                	mov    eax,DWORD PTR [edi]
c001827a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001827d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018280:	59                   	pop    ecx
c0018281:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018285:	e8 71 3d ff ff       	call   c000bffb <free>
c001828a:	5b                   	pop    ebx
c001828b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001828f:	e8 67 3d ff ff       	call   c000bffb <free>
c0018294:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018297:	e8 5f 3d ff ff       	call   c000bffb <free>
c001829c:	5e                   	pop    esi
c001829d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182a1:	e8 55 3d ff ff       	call   c000bffb <free>
c00182a6:	83 c4 10             	add    esp,0x10
c00182a9:	eb 21                	jmp    c00182cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00182ab:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00182af:	e9 2c fd ff ff       	jmp    c0017fe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00182bb:	e8 3b 3d ff ff       	call   c000bffb <free>
c00182c0:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c00182c4:	83 c4 10             	add    esp,0x10
c00182c7:	e9 a2 fc ff ff       	jmp    c0017f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c00182cc:	31 c0                	xor    eax,eax
c00182ce:	eb 32                	jmp    c0018302 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00182d0:	83 ec 0c             	sub    esp,0xc
c00182d3:	57                   	push   edi
c00182d4:	e8 79 74 ff ff       	call   c000f752 <File::close()>
c00182d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00182db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00182de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00182e1:	58                   	pop    eax
c00182e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182e6:	e8 10 3d ff ff       	call   c000bffb <free>
c00182eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00182ee:	e8 08 3d ff ff       	call   c000bffb <free>
c00182f3:	5a                   	pop    edx
c00182f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00182f8:	e8 fe 3c ff ff       	call   c000bffb <free>
c00182fd:	83 c4 10             	add    esp,0x10
c0018300:	b0 01                	mov    al,0x1
c0018302:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018308:	5b                   	pop    ebx
c0018309:	5e                   	pop    esi
c001830a:	5f                   	pop    edi
c001830b:	5d                   	pop    ebp
c001830c:	c3                   	ret    

c001830d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001830d:	56                   	push   esi
c001830e:	31 d2                	xor    edx,edx
c0018310:	53                   	push   ebx
c0018311:	8b 1d 20 52 02 c0    	mov    ebx,DWORD PTR ds:0xc0025220
c0018317:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001831b:	39 d3                	cmp    ebx,edx
c001831d:	7e 1b                	jle    c001833a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001831f:	8b 04 95 40 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdabc0]
c0018326:	39 c8                	cmp    eax,ecx
c0018328:	77 0d                	ja     c0018337 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001832a:	8b 34 95 40 52 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdadc0]
c0018331:	01 c6                	add    esi,eax
c0018333:	39 ce                	cmp    esi,ecx
c0018335:	77 05                	ja     c001833c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018337:	42                   	inc    edx
c0018338:	eb e1                	jmp    c001831b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001833a:	31 c0                	xor    eax,eax
c001833c:	5b                   	pop    ebx
c001833d:	5e                   	pop    esi
c001833e:	c3                   	ret    

c001833f <Thr::getDriverNameFromAddress(unsigned long)>:
c001833f:	53                   	push   ebx
c0018340:	31 c0                	xor    eax,eax
c0018342:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018346:	8b 1d 20 52 02 c0    	mov    ebx,DWORD PTR ds:0xc0025220
c001834c:	39 c3                	cmp    ebx,eax
c001834e:	7e 22                	jle    c0018372 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018350:	8b 14 85 40 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdabc0]
c0018357:	39 ca                	cmp    edx,ecx
c0018359:	77 14                	ja     c001836f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001835b:	03 14 85 40 52 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdadc0]
c0018362:	39 ca                	cmp    edx,ecx
c0018364:	76 09                	jbe    c001836f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018366:	8b 04 85 40 56 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda9c0]
c001836d:	eb 05                	jmp    c0018374 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001836f:	40                   	inc    eax
c0018370:	eb da                	jmp    c001834c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018372:	31 c0                	xor    eax,eax
c0018374:	5b                   	pop    ebx
c0018375:	c3                   	ret    

c0018376 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018376:	53                   	push   ebx
c0018377:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001837b:	53                   	push   ebx
c001837c:	e8 8c ff ff ff       	call   c001830d <Thr::getDriverBaseFromAddress(unsigned long)>
c0018381:	5a                   	pop    edx
c0018382:	31 d2                	xor    edx,edx
c0018384:	85 c0                	test   eax,eax
c0018386:	74 04                	je     c001838c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0018388:	89 da                	mov    edx,ebx
c001838a:	29 c2                	sub    edx,eax
c001838c:	89 d0                	mov    eax,edx
c001838e:	5b                   	pop    ebx
c001838f:	c3                   	ret    

c0018390 <Thr::loadDLL(char const*, bool)>:
c0018390:	55                   	push   ebp
c0018391:	57                   	push   edi
c0018392:	56                   	push   esi
c0018393:	53                   	push   ebx
c0018394:	81 ec 34 01 00 00    	sub    esp,0x134
c001839a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00183a1:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00183a8:	56                   	push   esi
c00183a9:	68 23 2c 02 c0       	push   0xc0022c23
c00183ae:	e8 a6 6d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00183b3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00183ba:	e8 65 6c ff ff       	call   c000f024 <operator new(unsigned long)>
c00183bf:	83 c4 0c             	add    esp,0xc
c00183c2:	89 c3                	mov    ebx,eax
c00183c4:	ff 35 14 5a 02 c0    	push   DWORD PTR ds:0xc0025a14
c00183ca:	56                   	push   esi
c00183cb:	50                   	push   eax
c00183cc:	e8 bf 72 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00183d1:	83 c4 0c             	add    esp,0xc
c00183d4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00183d8:	50                   	push   eax
c00183d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00183dd:	50                   	push   eax
c00183de:	53                   	push   ebx
c00183df:	e8 bc 75 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c00183e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183ec:	83 c4 10             	add    esp,0x10
c00183ef:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00183f4:	75 0a                	jne    c0018400 <Thr::loadDLL(char const*, bool)+0x70>
c00183f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183fa:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00183fe:	75 3c                	jne    c001843c <Thr::loadDLL(char const*, bool)+0xac>
c0018400:	89 e8                	mov    eax,ebp
c0018402:	84 c0                	test   al,al
c0018404:	0f 84 3d 01 00 00    	je     c0018547 <Thr::loadDLL(char const*, bool)+0x1b7>
c001840a:	50                   	push   eax
c001840b:	50                   	push   eax
c001840c:	68 34 2c 02 c0       	push   0xc0022c34
c0018411:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018415:	53                   	push   ebx
c0018416:	e8 3e 83 fe ff       	call   c0000759 <strcpy>
c001841b:	58                   	pop    eax
c001841c:	5a                   	pop    edx
c001841d:	56                   	push   esi
c001841e:	53                   	push   ebx
c001841f:	e8 ec 83 fe ff       	call   c0000810 <strcat>
c0018424:	59                   	pop    ecx
c0018425:	5f                   	pop    edi
c0018426:	68 47 2c 02 c0       	push   0xc0022c47
c001842b:	53                   	push   ebx
c001842c:	e8 df 83 fe ff       	call   c0000810 <strcat>
c0018431:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018434:	e8 4f d5 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	e8 8a 5e ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0018441:	51                   	push   ecx
c0018442:	6a 03                	push   0x3
c0018444:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018448:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001844c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018452:	83 d3 00             	adc    ebx,0x0
c0018455:	89 ca                	mov    edx,ecx
c0018457:	89 d1                	mov    ecx,edx
c0018459:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001845d:	51                   	push   ecx
c001845e:	50                   	push   eax
c001845f:	e8 a8 64 ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c0018464:	89 34 24             	mov    DWORD PTR [esp],esi
c0018467:	89 c3                	mov    ebx,eax
c0018469:	e8 69 82 fe ff       	call   c00006d7 <strlen>
c001846e:	8b 3d 20 52 02 c0    	mov    edi,DWORD PTR ds:0xc0025220
c0018474:	40                   	inc    eax
c0018475:	89 04 24             	mov    DWORD PTR [esp],eax
c0018478:	e8 6e 3b ff ff       	call   c000bfeb <malloc>
c001847d:	89 04 bd 40 56 02 c0 	mov    DWORD PTR [edi*4-0x3ffda9c0],eax
c0018484:	5f                   	pop    edi
c0018485:	58                   	pop    eax
c0018486:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001848b:	56                   	push   esi
c001848c:	ff 34 85 40 56 02 c0 	push   DWORD PTR [eax*4-0x3ffda9c0]
c0018493:	e8 c1 82 fe ff       	call   c0000759 <strcpy>
c0018498:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001849d:	8d 50 01             	lea    edx,[eax+0x1]
c00184a0:	89 1c 85 40 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabc0],ebx
c00184a7:	89 15 20 52 02 c0    	mov    DWORD PTR ds:0xc0025220,edx
c00184ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184b1:	83 c4 0c             	add    esp,0xc
c00184b4:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00184bb:	6a 01                	push   0x1
c00184bd:	53                   	push   ebx
c00184be:	56                   	push   esi
c00184bf:	e8 ab f6 ff ff       	call   c0017b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00184c4:	83 c4 10             	add    esp,0x10
c00184c7:	89 c7                	mov    edi,eax
c00184c9:	fe c8                	dec    al
c00184cb:	74 16                	je     c00184e3 <Thr::loadDLL(char const*, bool)+0x153>
c00184cd:	89 e8                	mov    eax,ebp
c00184cf:	84 c0                	test   al,al
c00184d1:	74 10                	je     c00184e3 <Thr::loadDLL(char const*, bool)+0x153>
c00184d3:	83 ec 0c             	sub    esp,0xc
c00184d6:	68 49 2c 02 c0       	push   0xc0022c49
c00184db:	e8 a8 d4 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c00184e0:	83 c4 10             	add    esp,0x10
c00184e3:	31 f6                	xor    esi,esi
c00184e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184ed:	05 ff 0f 00 00       	add    eax,0xfff
c00184f2:	83 d2 00             	adc    edx,0x0
c00184f5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00184f9:	c1 ea 0c             	shr    edx,0xc
c00184fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018500:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018504:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0018508:	ba 00 00 00 00       	mov    edx,0x0
c001850d:	89 d0                	mov    eax,edx
c001850f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0018513:	73 2c                	jae    c0018541 <Thr::loadDLL(char const*, bool)+0x1b1>
c0018515:	e8 b1 5d ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001851a:	89 f5                	mov    ebp,esi
c001851c:	c1 e5 0c             	shl    ebp,0xc
c001851f:	52                   	push   edx
c0018520:	52                   	push   edx
c0018521:	01 dd                	add    ebp,ebx
c0018523:	55                   	push   ebp
c0018524:	50                   	push   eax
c0018525:	e8 42 5f ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c001852a:	83 c4 10             	add    esp,0x10
c001852d:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018530:	75 0c                	jne    c001853e <Thr::loadDLL(char const*, bool)+0x1ae>
c0018532:	83 ec 0c             	sub    esp,0xc
c0018535:	55                   	push   ebp
c0018536:	e8 f9 3f ff ff       	call   c000c534 <Phys::freePage(unsigned long)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	46                   	inc    esi
c001853f:	eb a4                	jmp    c00184e5 <Thr::loadDLL(char const*, bool)+0x155>
c0018541:	89 f8                	mov    eax,edi
c0018543:	84 c0                	test   al,al
c0018545:	75 02                	jne    c0018549 <Thr::loadDLL(char const*, bool)+0x1b9>
c0018547:	31 db                	xor    ebx,ebx
c0018549:	81 c4 2c 01 00 00    	add    esp,0x12c
c001854f:	89 d8                	mov    eax,ebx
c0018551:	5b                   	pop    ebx
c0018552:	5e                   	pop    esi
c0018553:	5f                   	pop    edi
c0018554:	5d                   	pop    ebp
c0018555:	c3                   	ret    

c0018556 <Thr::executeDLL(unsigned long, void*)>:
c0018556:	56                   	push   esi
c0018557:	53                   	push   ebx
c0018558:	51                   	push   ecx
c0018559:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001855d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018561:	85 db                	test   ebx,ebx
c0018563:	75 10                	jne    c0018575 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018565:	83 ec 0c             	sub    esp,0xc
c0018568:	68 68 2c 02 c0       	push   0xc0022c68
c001856d:	e8 16 d4 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0018572:	83 c4 10             	add    esp,0x10
c0018575:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0018579:	5a                   	pop    edx
c001857a:	89 d8                	mov    eax,ebx
c001857c:	5b                   	pop    ebx
c001857d:	5e                   	pop    esi
c001857e:	ff e0                	jmp    eax

c0018580 <changeTSS>:
c0018580:	83 ec 0c             	sub    esp,0xc
c0018583:	e8 94 c2 ff ff       	call   c001481c <thisCPU()>
c0018588:	52                   	push   edx
c0018589:	05 7c 11 00 00       	add    eax,0x117c
c001858e:	52                   	push   edx
c001858f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018595:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018598:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001859d:	c1 e1 15             	shl    ecx,0x15
c00185a0:	29 ca                	sub    edx,ecx
c00185a2:	52                   	push   edx
c00185a3:	50                   	push   eax
c00185a4:	e8 33 55 ff ff       	call   c000dadc <TSS::setESP(unsigned long)>
c00185a9:	83 c4 1c             	add    esp,0x1c
c00185ac:	c3                   	ret    
c00185ad:	90                   	nop

c00185ae <Process::addArgs(char**)>:
c00185ae:	57                   	push   edi
c00185af:	56                   	push   esi
c00185b0:	53                   	push   ebx
c00185b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00185b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00185b9:	85 ff                	test   edi,edi
c00185bb:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c00185c5:	74 45                	je     c001860c <Process::addArgs(char**)+0x5e>
c00185c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00185c9:	85 c0                	test   eax,eax
c00185cb:	74 3f                	je     c001860c <Process::addArgs(char**)+0x5e>
c00185cd:	31 db                	xor    ebx,ebx
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	50                   	push   eax
c00185d3:	e8 ff 80 fe ff       	call   c00006d7 <strlen>
c00185d8:	40                   	inc    eax
c00185d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00185dc:	e8 0a 3a ff ff       	call   c000bfeb <malloc>
c00185e1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00185e8:	5a                   	pop    edx
c00185e9:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00185ec:	59                   	pop    ecx
c00185ed:	43                   	inc    ebx
c00185ee:	52                   	push   edx
c00185ef:	50                   	push   eax
c00185f0:	e8 64 81 fe ff       	call   c0000759 <strcpy>
c00185f5:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	41                   	inc    ecx
c00185ff:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c0018605:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018608:	85 c0                	test   eax,eax
c001860a:	75 c3                	jne    c00185cf <Process::addArgs(char**)+0x21>
c001860c:	5b                   	pop    ebx
c001860d:	5e                   	pop    esi
c001860e:	5f                   	pop    edi
c001860f:	c3                   	ret    

c0018610 <Process::Process(char const*, Process*, char**)>:
c0018610:	56                   	push   esi
c0018611:	53                   	push   ebx
c0018612:	83 ec 14             	sub    esp,0x14
c0018615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018619:	05 0c 02 00 00       	add    eax,0x20c
c001861e:	bb 07 00 00 00       	mov    ebx,0x7
c0018623:	89 c6                	mov    esi,eax
c0018625:	85 db                	test   ebx,ebx
c0018627:	78 12                	js     c001863b <Process::Process(char const*, Process*, char**)+0x2b>
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	56                   	push   esi
c001862d:	e8 28 77 00 00       	call   c001fd5a <ThreadControlBlock::ThreadControlBlock()>
c0018632:	83 c4 10             	add    esp,0x10
c0018635:	83 c6 63             	add    esi,0x63
c0018638:	4b                   	dec    ebx
c0018639:	eb ea                	jmp    c0018625 <Process::Process(char const*, Process*, char**)+0x15>
c001863b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001863f:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c0018646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001864a:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018653:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c0018658:	8d 50 01             	lea    edx,[eax+0x1]
c001865b:	89 15 e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,edx
c0018661:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018665:	89 02                	mov    DWORD PTR [edx],eax
c0018667:	83 ec 0c             	sub    esp,0xc
c001866a:	6a 10                	push   0x10
c001866c:	e8 b3 69 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018671:	83 c4 10             	add    esp,0x10
c0018674:	89 c3                	mov    ebx,eax
c0018676:	83 ec 08             	sub    esp,0x8
c0018679:	6a 00                	push   0x0
c001867b:	53                   	push   ebx
c001867c:	e8 37 66 ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c0018681:	83 c4 10             	add    esp,0x10
c0018684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018688:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001868e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018692:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001869c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00186a4:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00186aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186b4:	85 c0                	test   eax,eax
c00186b6:	74 42                	je     c00186fa <Process::Process(char const*, Process*, char**)+0xea>
c00186b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186bc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186c2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00186c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186cc:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00186d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186d6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00186dc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00186e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e6:	05 0c 01 00 00       	add    eax,0x10c
c00186eb:	83 ec 08             	sub    esp,0x8
c00186ee:	52                   	push   edx
c00186ef:	50                   	push   eax
c00186f0:	e8 64 80 fe ff       	call   c0000759 <strcpy>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	eb 5c                	jmp    c0018756 <Process::Process(char const*, Process*, char**)+0x146>
c00186fa:	83 ec 0c             	sub    esp,0xc
c00186fd:	68 60 12 00 00       	push   0x1260
c0018702:	e8 1d 69 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	89 c3                	mov    ebx,eax
c001870c:	83 ec 08             	sub    esp,0x8
c001870f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018713:	53                   	push   ebx
c0018714:	e8 c1 50 ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c0018719:	83 c4 10             	add    esp,0x10
c001871c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018720:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018726:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001872a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018730:	83 ec 0c             	sub    esp,0xc
c0018733:	50                   	push   eax
c0018734:	e8 a0 44 ff ff       	call   c000cbd9 <addToTerminalCycle(VgaText*)>
c0018739:	83 c4 10             	add    esp,0x10
c001873c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018740:	05 0c 01 00 00       	add    eax,0x10c
c0018745:	83 ec 08             	sub    esp,0x8
c0018748:	68 92 2c 02 c0       	push   0xc0022c92
c001874d:	50                   	push   eax
c001874e:	e8 06 80 fe ff       	call   c0000759 <strcpy>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875a:	83 c0 0c             	add    eax,0xc
c001875d:	83 ec 08             	sub    esp,0x8
c0018760:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018764:	50                   	push   eax
c0018765:	e8 ef 7f fe ff       	call   c0000759 <strcpy>
c001876a:	83 c4 10             	add    esp,0x10
c001876d:	83 ec 08             	sub    esp,0x8
c0018770:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018774:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018778:	e8 31 fe ff ff       	call   c00185ae <Process::addArgs(char**)>
c001877d:	83 c4 10             	add    esp,0x10
c0018780:	83 ec 08             	sub    esp,0x8
c0018783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001878b:	e8 a6 ee ff ff       	call   c0017636 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018790:	83 c4 10             	add    esp,0x10
c0018793:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018797:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001879b:	83 f0 01             	xor    eax,0x1
c001879e:	88 c2                	mov    dl,al
c00187a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a4:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c00187aa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00187ae:	25 ff 00 00 00       	and    eax,0xff
c00187b3:	83 ec 08             	sub    esp,0x8
c00187b6:	50                   	push   eax
c00187b7:	68 90 2d 02 c0       	push   0xc0022d90
c00187bc:	e8 98 69 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	90                   	nop
c00187c5:	83 c4 14             	add    esp,0x14
c00187c8:	5b                   	pop    ebx
c00187c9:	5e                   	pop    esi
c00187ca:	c3                   	ret    
c00187cb:	90                   	nop

c00187cc <Process::Process(bool, char const*, Process*, char**)>:
c00187cc:	56                   	push   esi
c00187cd:	53                   	push   ebx
c00187ce:	83 ec 14             	sub    esp,0x14
c00187d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187d5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00187d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187dd:	05 0c 02 00 00       	add    eax,0x20c
c00187e2:	bb 07 00 00 00       	mov    ebx,0x7
c00187e7:	89 c6                	mov    esi,eax
c00187e9:	85 db                	test   ebx,ebx
c00187eb:	78 12                	js     c00187ff <Process::Process(bool, char const*, Process*, char**)+0x33>
c00187ed:	83 ec 0c             	sub    esp,0xc
c00187f0:	56                   	push   esi
c00187f1:	e8 64 75 00 00       	call   c001fd5a <ThreadControlBlock::ThreadControlBlock()>
c00187f6:	83 c4 10             	add    esp,0x10
c00187f9:	83 c6 63             	add    esi,0x63
c00187fc:	4b                   	dec    ebx
c00187fd:	eb ea                	jmp    c00187e9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00187ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018803:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001880a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001880e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018817:	a1 e4 3f 02 c0       	mov    eax,ds:0xc0023fe4
c001881c:	8d 50 01             	lea    edx,[eax+0x1]
c001881f:	89 15 e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,edx
c0018825:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018829:	89 02                	mov    DWORD PTR [edx],eax
c001882b:	83 ec 0c             	sub    esp,0xc
c001882e:	6a 10                	push   0x10
c0018830:	e8 ef 67 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	89 c3                	mov    ebx,eax
c001883a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001883e:	25 ff 00 00 00       	and    eax,0xff
c0018843:	83 ec 08             	sub    esp,0x8
c0018846:	50                   	push   eax
c0018847:	53                   	push   ebx
c0018848:	e8 6b 64 ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c001884d:	83 c4 10             	add    esp,0x10
c0018850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018854:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001885a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001885e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001886c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018870:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c0018876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001887a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018880:	85 c0                	test   eax,eax
c0018882:	74 42                	je     c00188c6 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018888:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001888e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018898:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001889e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188a2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00188a8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00188ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b2:	05 0c 01 00 00       	add    eax,0x10c
c00188b7:	83 ec 08             	sub    esp,0x8
c00188ba:	52                   	push   edx
c00188bb:	50                   	push   eax
c00188bc:	e8 98 7e fe ff       	call   c0000759 <strcpy>
c00188c1:	83 c4 10             	add    esp,0x10
c00188c4:	eb 5c                	jmp    c0018922 <Process::Process(bool, char const*, Process*, char**)+0x156>
c00188c6:	83 ec 0c             	sub    esp,0xc
c00188c9:	68 60 12 00 00       	push   0x1260
c00188ce:	e8 51 67 ff ff       	call   c000f024 <operator new(unsigned long)>
c00188d3:	83 c4 10             	add    esp,0x10
c00188d6:	89 c3                	mov    ebx,eax
c00188d8:	83 ec 08             	sub    esp,0x8
c00188db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188df:	53                   	push   ebx
c00188e0:	e8 f5 4e ff ff       	call   c000d7da <VgaText::VgaText(char const*)>
c00188e5:	83 c4 10             	add    esp,0x10
c00188e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188ec:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00188f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	50                   	push   eax
c0018900:	e8 d4 42 ff ff       	call   c000cbd9 <addToTerminalCycle(VgaText*)>
c0018905:	83 c4 10             	add    esp,0x10
c0018908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001890c:	05 0c 01 00 00       	add    eax,0x10c
c0018911:	83 ec 08             	sub    esp,0x8
c0018914:	68 92 2c 02 c0       	push   0xc0022c92
c0018919:	50                   	push   eax
c001891a:	e8 3a 7e fe ff       	call   c0000759 <strcpy>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018926:	83 c0 0c             	add    eax,0xc
c0018929:	83 ec 08             	sub    esp,0x8
c001892c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018930:	50                   	push   eax
c0018931:	e8 23 7e fe ff       	call   c0000759 <strcpy>
c0018936:	83 c4 10             	add    esp,0x10
c0018939:	83 ec 08             	sub    esp,0x8
c001893c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018940:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018944:	e8 65 fc ff ff       	call   c00185ae <Process::addArgs(char**)>
c0018949:	83 c4 10             	add    esp,0x10
c001894c:	90                   	nop
c001894d:	83 c4 14             	add    esp,0x14
c0018950:	5b                   	pop    ebx
c0018951:	5e                   	pop    esi
c0018952:	c3                   	ret    

c0018953 <disableIRQs()>:
c0018953:	fa                   	cli    
c0018954:	a1 ec 59 02 c0       	mov    eax,ds:0xc00259ec
c0018959:	40                   	inc    eax
c001895a:	a3 ec 59 02 c0       	mov    ds:0xc00259ec,eax
c001895f:	c3                   	ret    

c0018960 <getIRQNestingLevel()>:
c0018960:	a1 ec 59 02 c0       	mov    eax,ds:0xc00259ec
c0018965:	c3                   	ret    

c0018966 <enableIRQs()>:
c0018966:	a1 ec 59 02 c0       	mov    eax,ds:0xc00259ec
c001896b:	48                   	dec    eax
c001896c:	a3 ec 59 02 c0       	mov    ds:0xc00259ec,eax
c0018971:	75 01                	jne    c0018974 <enableIRQs()+0xe>
c0018973:	fb                   	sti    
c0018974:	c3                   	ret    

c0018975 <lockScheduler()>:
c0018975:	eb dc                	jmp    c0018953 <disableIRQs()>

c0018977 <unlockScheduler()>:
c0018977:	eb ed                	jmp    c0018966 <enableIRQs()>

c0018979 <userModeEntryPoint(void*)>:
c0018979:	83 ec 0c             	sub    esp,0xc
c001897c:	e8 f6 ff ff ff       	call   c0018977 <unlockScheduler()>
c0018981:	fb                   	sti    
c0018982:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018987:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001898a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018990:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018994:	83 c4 0c             	add    esp,0xc
c0018997:	e9 fc 78 fe ff       	jmp    c0000298 <goToUsermode>

c001899c <lockStuff()>:
c001899c:	e8 b2 ff ff ff       	call   c0018953 <disableIRQs()>
c00189a1:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c00189a6:	40                   	inc    eax
c00189a7:	a3 e8 59 02 c0       	mov    ds:0xc00259e8,eax
c00189ac:	c3                   	ret    

c00189ad <taskStartupFunction>:
c00189ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189b2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00189b5:	c3                   	ret    

c00189b6 <updateTimeUsed()>:
c00189b6:	57                   	push   edi
c00189b7:	56                   	push   esi
c00189b8:	53                   	push   ebx
c00189b9:	e8 5e be ff ff       	call   c001481c <thisCPU()>
c00189be:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00189c5:	74 49                	je     c0018a10 <updateTimeUsed()+0x5a>
c00189c7:	0f 31                	rdtsc  
c00189c9:	89 c1                	mov    ecx,eax
c00189cb:	a3 28 5a 02 c0       	mov    ds:0xc0025a28,eax
c00189d0:	2b 0d 18 5a 02 c0    	sub    ecx,DWORD PTR ds:0xc0025a18
c00189d6:	a3 18 5a 02 c0       	mov    ds:0xc0025a18,eax
c00189db:	89 0d 20 5a 02 c0    	mov    DWORD PTR ds:0xc0025a20,ecx
c00189e1:	89 d3                	mov    ebx,edx
c00189e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189e8:	89 15 2c 5a 02 c0    	mov    DWORD PTR ds:0xc0025a2c,edx
c00189ee:	1b 1d 1c 5a 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025a1c
c00189f4:	89 15 1c 5a 02 c0    	mov    DWORD PTR ds:0xc0025a1c,edx
c00189fa:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00189fd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018a00:	01 f1                	add    ecx,esi
c0018a02:	89 1d 24 5a 02 c0    	mov    DWORD PTR ds:0xc0025a24,ebx
c0018a08:	11 fb                	adc    ebx,edi
c0018a0a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018a0d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018a10:	5b                   	pop    ebx
c0018a11:	5e                   	pop    esi
c0018a12:	5f                   	pop    edi
c0018a13:	c3                   	ret    

c0018a14 <switchToThread(ThreadControlBlock*)>:
c0018a14:	53                   	push   ebx
c0018a15:	83 ec 08             	sub    esp,0x8
c0018a18:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c0018a1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a21:	85 c0                	test   eax,eax
c0018a23:	75 36                	jne    c0018a5b <switchToThread(ThreadControlBlock*)+0x47>
c0018a25:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018a28:	80 fa ff             	cmp    dl,0xff
c0018a2b:	74 2a                	je     c0018a57 <switchToThread(ThreadControlBlock*)+0x43>
c0018a2d:	81 e2 ff 00 00 00    	and    edx,0xff
c0018a33:	b8 84 03 00 00       	mov    eax,0x384
c0018a38:	29 d0                	sub    eax,edx
c0018a3a:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018a3d:	c1 e0 10             	shl    eax,0x10
c0018a40:	01 c8                	add    eax,ecx
c0018a42:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018a45:	e8 6c ff ff ff       	call   c00189b6 <updateTimeUsed()>
c0018a4a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018a4e:	83 c4 08             	add    esp,0x8
c0018a51:	5b                   	pop    ebx
c0018a52:	e9 7a 78 fe ff       	jmp    c00002d1 <switchToThreadASM>
c0018a57:	31 c0                	xor    eax,eax
c0018a59:	eb e7                	jmp    c0018a42 <switchToThread(ThreadControlBlock*)+0x2e>
c0018a5b:	c7 05 e4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259e4,0x1
c0018a65:	83 c4 08             	add    esp,0x8
c0018a68:	5b                   	pop    ebx
c0018a69:	c3                   	ret    

c0018a6a <Semaphore::Semaphore(int)>:
c0018a6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a72:	89 10                	mov    DWORD PTR [eax],edx
c0018a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a78:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a8e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a95:	90                   	nop
c0018a96:	c3                   	ret    
c0018a97:	90                   	nop

c0018a98 <Mutex::Mutex()>:
c0018a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a9c:	6a 01                	push   0x1
c0018a9e:	50                   	push   eax
c0018a9f:	e8 c6 ff ff ff       	call   c0018a6a <Semaphore::Semaphore(int)>
c0018aa4:	83 c4 08             	add    esp,0x8
c0018aa7:	90                   	nop
c0018aa8:	c3                   	ret    
c0018aa9:	90                   	nop

c0018aaa <Process::createThread(void (*)(void*), void*, int)>:
c0018aaa:	55                   	push   ebp
c0018aab:	31 c9                	xor    ecx,ecx
c0018aad:	57                   	push   edi
c0018aae:	56                   	push   esi
c0018aaf:	53                   	push   ebx
c0018ab0:	83 ec 1c             	sub    esp,0x1c
c0018ab3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ab7:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018abe:	89 f2                	mov    edx,esi
c0018ac0:	31 c0                	xor    eax,eax
c0018ac2:	66 89 d0             	mov    ax,dx
c0018ac5:	83 e2 01             	and    edx,0x1
c0018ac8:	74 14                	je     c0018ade <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018aca:	d1 f8                	sar    eax,1
c0018acc:	41                   	inc    ecx
c0018acd:	89 c2                	mov    edx,eax
c0018acf:	83 f9 10             	cmp    ecx,0x10
c0018ad2:	75 ec                	jne    c0018ac0 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018ad4:	83 c4 1c             	add    esp,0x1c
c0018ad7:	31 c0                	xor    eax,eax
c0018ad9:	5b                   	pop    ebx
c0018ada:	5e                   	pop    esi
c0018adb:	5f                   	pop    edi
c0018adc:	5d                   	pop    ebp
c0018add:	c3                   	ret    
c0018ade:	b8 01 00 00 00       	mov    eax,0x1
c0018ae3:	d3 e0                	shl    eax,cl
c0018ae5:	09 c6                	or     esi,eax
c0018ae7:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018aed:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018af4:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018af7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018afa:	89 f0                	mov    eax,esi
c0018afc:	c1 e0 05             	shl    eax,0x5
c0018aff:	01 c6                	add    esi,eax
c0018b01:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018b04:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018b0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018b0e:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018b14:	89 ca                	mov    edx,ecx
c0018b16:	f7 da                	neg    edx
c0018b18:	c1 e2 15             	shl    edx,0x15
c0018b1b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018b21:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018b27:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018b2d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018b33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018b37:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018b3d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b41:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018b4b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018b51:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018b5b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018b65:	52                   	push   edx
c0018b66:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018b6d:	52                   	push   edx
c0018b6e:	50                   	push   eax
c0018b6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b73:	68 08 5a 02 c0       	push   0xc0025a08
c0018b78:	e8 35 70 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b7d:	83 c4 10             	add    esp,0x10
c0018b80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b84:	83 c4 1c             	add    esp,0x1c
c0018b87:	5b                   	pop    ebx
c0018b88:	5e                   	pop    esi
c0018b89:	5f                   	pop    edi
c0018b8a:	5d                   	pop    ebp
c0018b8b:	c3                   	ret    

c0018b8c <Process::createUserThread()>:
c0018b8c:	83 ec 0c             	sub    esp,0xc
c0018b8f:	68 80 00 00 00       	push   0x80
c0018b94:	6a 00                	push   0x0
c0018b96:	68 79 89 01 c0       	push   0xc0018979
c0018b9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b9f:	50                   	push   eax
c0018ba0:	e8 05 ff ff ff       	call   c0018aaa <Process::createThread(void (*)(void*), void*, int)>
c0018ba5:	83 c4 1c             	add    esp,0x1c
c0018ba8:	c3                   	ret    

c0018ba9 <setupMultitasking(void (*)())>:
c0018ba9:	56                   	push   esi
c0018baa:	53                   	push   ebx
c0018bab:	51                   	push   ecx
c0018bac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018bb0:	eb 10                	jmp    c0018bc2 <setupMultitasking(void (*)())+0x19>
c0018bb2:	83 ec 0c             	sub    esp,0xc
c0018bb5:	68 08 5a 02 c0       	push   0xc0025a08
c0018bba:	e8 45 6f 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	83 ec 0c             	sub    esp,0xc
c0018bc5:	68 08 5a 02 c0       	push   0xc0025a08
c0018bca:	e8 19 6f 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018bcf:	83 c4 10             	add    esp,0x10
c0018bd2:	84 c0                	test   al,al
c0018bd4:	74 dc                	je     c0018bb2 <setupMultitasking(void (*)())+0x9>
c0018bd6:	83 ec 0c             	sub    esp,0xc
c0018bd9:	68 3b 07 00 00       	push   0x73b
c0018bde:	e8 41 64 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018be3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018bea:	6a 00                	push   0x0
c0018bec:	68 96 2c 02 c0       	push   0xc0022c96
c0018bf1:	89 c3                	mov    ebx,eax
c0018bf3:	6a 01                	push   0x1
c0018bf5:	50                   	push   eax
c0018bf6:	e8 d1 fb ff ff       	call   c00187cc <Process::Process(bool, char const*, Process*, char**)>
c0018bfb:	83 c4 18             	add    esp,0x18
c0018bfe:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018c04:	89 1d 14 5a 02 c0    	mov    DWORD PTR ds:0xc0025a14,ebx
c0018c0a:	50                   	push   eax
c0018c0b:	68 b8 2d 02 c0       	push   0xc0022db8
c0018c10:	e8 44 65 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018c15:	5a                   	pop    edx
c0018c16:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018c1c:	51                   	push   ecx
c0018c1d:	e8 2b 47 ff ff       	call   c000d34d <setActiveTerminal(VgaText*)>
c0018c22:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018c29:	83 c8 01             	or     eax,0x1
c0018c2c:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018c33:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018c39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c3c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018c46:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018c4c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018c56:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018c60:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018c66:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018c6c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018c76:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018c7c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018c86:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018c90:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018c96:	58                   	pop    eax
c0018c97:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018c9d:	5a                   	pop    edx
c0018c9e:	68 92 2c 02 c0       	push   0xc0022c92
c0018ca3:	50                   	push   eax
c0018ca4:	e8 b0 7a fe ff       	call   c0000759 <strcpy>
c0018ca9:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018cb0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018cb4:	83 c4 14             	add    esp,0x14
c0018cb7:	5b                   	pop    ebx
c0018cb8:	5e                   	pop    esi
c0018cb9:	e9 05 76 fe ff       	jmp    c00002c3 <switchToThreadASMFirstTime>

c0018cbe <schedule()>:
c0018cbe:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c0018cc3:	85 c0                	test   eax,eax
c0018cc5:	74 0b                	je     c0018cd2 <schedule()+0x14>
c0018cc7:	c7 05 e4 59 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00259e4,0x1
c0018cd1:	c3                   	ret    
c0018cd2:	53                   	push   ebx
c0018cd3:	83 ec 14             	sub    esp,0x14
c0018cd6:	68 08 5a 02 c0       	push   0xc0025a08
c0018cdb:	e8 08 6e 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ce0:	83 c4 10             	add    esp,0x10
c0018ce3:	84 c0                	test   al,al
c0018ce5:	75 38                	jne    c0018d1f <schedule()+0x61>
c0018ce7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018cec:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018cef:	4a                   	dec    edx
c0018cf0:	74 32                	je     c0018d24 <schedule()+0x66>
c0018cf2:	83 ec 0c             	sub    esp,0xc
c0018cf5:	68 08 5a 02 c0       	push   0xc0025a08
c0018cfa:	e8 e1 6d 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018cff:	89 c3                	mov    ebx,eax
c0018d01:	c7 04 24 08 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a08
c0018d08:	e8 f7 6d 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d0d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018d14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018d17:	e8 f8 fc ff ff       	call   c0018a14 <switchToThread(ThreadControlBlock*)>
c0018d1c:	83 c4 10             	add    esp,0x10
c0018d1f:	83 c4 08             	add    esp,0x8
c0018d22:	5b                   	pop    ebx
c0018d23:	c3                   	ret    
c0018d24:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018d2b:	51                   	push   ecx
c0018d2c:	51                   	push   ecx
c0018d2d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018d33:	53                   	push   ebx
c0018d34:	68 08 5a 02 c0       	push   0xc0025a08
c0018d39:	e8 74 6e 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d3e:	83 c4 10             	add    esp,0x10
c0018d41:	eb af                	jmp    c0018cf2 <schedule()+0x34>

c0018d43 <unlockStuff()>:
c0018d43:	a1 e8 59 02 c0       	mov    eax,ds:0xc00259e8
c0018d48:	48                   	dec    eax
c0018d49:	a3 e8 59 02 c0       	mov    ds:0xc00259e8,eax
c0018d4e:	75 09                	jne    c0018d59 <unlockStuff()+0x16>
c0018d50:	a1 e4 59 02 c0       	mov    eax,ds:0xc00259e4
c0018d55:	85 c0                	test   eax,eax
c0018d57:	75 05                	jne    c0018d5e <unlockStuff()+0x1b>
c0018d59:	e9 08 fc ff ff       	jmp    c0018966 <enableIRQs()>
c0018d5e:	83 ec 0c             	sub    esp,0xc
c0018d61:	c7 05 e4 59 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00259e4,0x0
c0018d6b:	e8 4e ff ff ff       	call   c0018cbe <schedule()>
c0018d70:	83 c4 0c             	add    esp,0xc
c0018d73:	e9 ee fb ff ff       	jmp    c0018966 <enableIRQs()>

c0018d78 <Semaphore::tryAcquire()>:
c0018d78:	83 ec 0c             	sub    esp,0xc
c0018d7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018d7f:	e8 18 fc ff ff       	call   c001899c <lockStuff()>
c0018d84:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018d87:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018d89:	7c 0b                	jl     c0018d96 <Semaphore::tryAcquire()+0x1e>
c0018d8b:	e8 b3 ff ff ff       	call   c0018d43 <unlockStuff()>
c0018d90:	31 c0                	xor    eax,eax
c0018d92:	83 c4 0c             	add    esp,0xc
c0018d95:	c3                   	ret    
c0018d96:	40                   	inc    eax
c0018d97:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018d9a:	e8 a4 ff ff ff       	call   c0018d43 <unlockStuff()>
c0018d9f:	b0 01                	mov    al,0x1
c0018da1:	83 c4 0c             	add    esp,0xc
c0018da4:	c3                   	ret    
c0018da5:	90                   	nop

c0018da6 <Semaphore::assertLocked(char const*)>:
c0018da6:	83 ec 0c             	sub    esp,0xc
c0018da9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018dad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018db1:	e8 e6 fb ff ff       	call   c001899c <lockStuff()>
c0018db6:	8b 02                	mov    eax,DWORD PTR [edx]
c0018db8:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018dbb:	7c 05                	jl     c0018dc2 <Semaphore::assertLocked(char const*)+0x1c>
c0018dbd:	83 c4 0c             	add    esp,0xc
c0018dc0:	eb 81                	jmp    c0018d43 <unlockStuff()>
c0018dc2:	83 ec 0c             	sub    esp,0xc
c0018dc5:	51                   	push   ecx
c0018dc6:	e8 bd cb ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0018dcb:	83 c4 10             	add    esp,0x10
c0018dce:	83 c4 0c             	add    esp,0xc
c0018dd1:	e9 6d ff ff ff       	jmp    c0018d43 <unlockStuff()>

c0018dd6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018dd6:	83 ec 0c             	sub    esp,0xc
c0018dd9:	e8 82 fb ff ff       	call   c0018960 <getIRQNestingLevel()>
c0018dde:	52                   	push   edx
c0018ddf:	52                   	push   edx
c0018de0:	50                   	push   eax
c0018de1:	68 ec 2d 02 c0       	push   0xc0022dec
c0018de6:	e8 6e 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018df0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018df4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018df7:	e8 c2 fe ff ff       	call   c0018cbe <schedule()>
c0018dfc:	e8 76 fb ff ff       	call   c0018977 <unlockScheduler()>
c0018e01:	e8 5a fb ff ff       	call   c0018960 <getIRQNestingLevel()>
c0018e06:	59                   	pop    ecx
c0018e07:	5a                   	pop    edx
c0018e08:	50                   	push   eax
c0018e09:	68 20 2e 02 c0       	push   0xc0022e20
c0018e0e:	e8 46 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018e13:	83 c4 1c             	add    esp,0x1c
c0018e16:	c3                   	ret    

c0018e17 <blockTask(TaskState)>:
c0018e17:	83 ec 0c             	sub    esp,0xc
c0018e1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e1e:	e8 52 fb ff ff       	call   c0018975 <lockScheduler()>
c0018e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e28:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018e2b:	e8 8e fe ff ff       	call   c0018cbe <schedule()>
c0018e30:	83 c4 0c             	add    esp,0xc
c0018e33:	e9 3f fb ff ff       	jmp    c0018977 <unlockScheduler()>

c0018e38 <waitTask(int, int*, int)>:
c0018e38:	83 ec 18             	sub    esp,0x18
c0018e3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e44:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018e47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e50:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018e53:	6a 07                	push   0x7
c0018e55:	e8 bd ff ff ff       	call   c0018e17 <blockTask(TaskState)>
c0018e5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e5f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018e62:	83 c4 10             	add    esp,0x10
c0018e65:	85 d2                	test   edx,edx
c0018e67:	74 0a                	je     c0018e73 <waitTask(int, int*, int)+0x3b>
c0018e69:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018e6c:	89 02                	mov    DWORD PTR [edx],eax
c0018e6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e73:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018e76:	83 c4 0c             	add    esp,0xc
c0018e79:	c3                   	ret    

c0018e7a <nanoSleepUntil(unsigned long long)>:
c0018e7a:	53                   	push   ebx
c0018e7b:	83 ec 08             	sub    esp,0x8
c0018e7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018e82:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e86:	3b 0d 30 4c 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024c30
c0018e8c:	89 d8                	mov    eax,ebx
c0018e8e:	1b 05 34 4c 02 c0    	sbb    eax,DWORD PTR ds:0xc0024c34
c0018e94:	73 05                	jae    c0018e9b <nanoSleepUntil(unsigned long long)+0x21>
c0018e96:	83 c4 08             	add    esp,0x8
c0018e99:	5b                   	pop    ebx
c0018e9a:	c3                   	ret    
c0018e9b:	e8 fc fa ff ff       	call   c001899c <lockStuff()>
c0018ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ea5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018ea8:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018eab:	51                   	push   ecx
c0018eac:	51                   	push   ecx
c0018ead:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018eb3:	53                   	push   ebx
c0018eb4:	68 fc 59 02 c0       	push   0xc00259fc
c0018eb9:	e8 f4 6c 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ebe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018ec5:	e8 4d ff ff ff       	call   c0018e17 <blockTask(TaskState)>
c0018eca:	83 c4 18             	add    esp,0x18
c0018ecd:	5b                   	pop    ebx
c0018ece:	e9 70 fe ff ff       	jmp    c0018d43 <unlockStuff()>

c0018ed3 <nanoSleep(unsigned long long)>:
c0018ed3:	a1 30 4c 02 c0       	mov    eax,ds:0xc0024c30
c0018ed8:	8b 15 34 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c34
c0018ede:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018ee2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018ee6:	eb 92                	jmp    c0018e7a <nanoSleepUntil(unsigned long long)>

c0018ee8 <sleep(unsigned long long)>:
c0018ee8:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018eed:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018ef5:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018ef9:	01 ca                	add    edx,ecx
c0018efb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018f03:	eb ce                	jmp    c0018ed3 <nanoSleep(unsigned long long)>
c0018f05:	90                   	nop

c0018f06 <Semaphore::acquire()>:
c0018f06:	83 ec 0c             	sub    esp,0xc
c0018f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f0d:	e8 8a fa ff ff       	call   c001899c <lockStuff()>
c0018f12:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018f15:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018f17:	7d 0c                	jge    c0018f25 <Semaphore::acquire()+0x1f>
c0018f19:	40                   	inc    eax
c0018f1a:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018f1d:	83 c4 0c             	add    esp,0xc
c0018f20:	e9 1e fe ff ff       	jmp    c0018d43 <unlockStuff()>
c0018f25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f2a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018f31:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018f34:	85 c0                	test   eax,eax
c0018f36:	74 29                	je     c0018f61 <Semaphore::acquire()+0x5b>
c0018f38:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018f3b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018f41:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018f44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f49:	83 ec 0c             	sub    esp,0xc
c0018f4c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018f4f:	6a 05                	push   0x5
c0018f51:	e8 c1 fe ff ff       	call   c0018e17 <blockTask(TaskState)>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	83 c4 0c             	add    esp,0xc
c0018f5c:	e9 e2 fd ff ff       	jmp    c0018d43 <unlockStuff()>
c0018f61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f66:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018f69:	eb d9                	jmp    c0018f44 <Semaphore::acquire()+0x3e>

c0018f6b <taskReturned>:
c0018f6b:	83 ec 18             	sub    esp,0x18
c0018f6e:	68 54 2e 02 c0       	push   0xc0022e54
c0018f73:	e8 10 ca ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0018f78:	83 c4 10             	add    esp,0x10
c0018f7b:	83 ec 0c             	sub    esp,0xc
c0018f7e:	6a 02                	push   0x2
c0018f80:	e8 92 fe ff ff       	call   c0018e17 <blockTask(TaskState)>
c0018f85:	e8 eb f9 ff ff       	call   c0018975 <lockScheduler()>
c0018f8a:	e8 2f fd ff ff       	call   c0018cbe <schedule()>
c0018f8f:	e8 e3 f9 ff ff       	call   c0018977 <unlockScheduler()>
c0018f94:	83 c4 10             	add    esp,0x10
c0018f97:	eb e2                	jmp    c0018f7b <taskReturned+0x10>

c0018f99 <unblockTask(ThreadControlBlock*)>:
c0018f99:	53                   	push   ebx
c0018f9a:	83 ec 08             	sub    esp,0x8
c0018f9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fa1:	e8 cf f9 ff ff       	call   c0018975 <lockScheduler()>
c0018fa6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018fa9:	85 c0                	test   eax,eax
c0018fab:	74 5b                	je     c0019008 <unblockTask(ThreadControlBlock*)+0x6f>
c0018fad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018fb0:	48                   	dec    eax
c0018fb1:	74 30                	je     c0018fe3 <unblockTask(ThreadControlBlock*)+0x4a>
c0018fb3:	83 ec 0c             	sub    esp,0xc
c0018fb6:	68 08 5a 02 c0       	push   0xc0025a08
c0018fbb:	e8 20 6b 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fc0:	83 c4 10             	add    esp,0x10
c0018fc3:	85 c0                	test   eax,eax
c0018fc5:	75 16                	jne    c0018fdd <unblockTask(ThreadControlBlock*)+0x44>
c0018fc7:	eb 64                	jmp    c001902d <unblockTask(ThreadControlBlock*)+0x94>
c0018fc9:	52                   	push   edx
c0018fca:	52                   	push   edx
c0018fcb:	50                   	push   eax
c0018fcc:	68 08 5a 02 c0       	push   0xc0025a08
c0018fd1:	e8 1a 6e 00 00       	call   c001fdf0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018fd6:	83 c4 10             	add    esp,0x10
c0018fd9:	85 c0                	test   eax,eax
c0018fdb:	74 50                	je     c001902d <unblockTask(ThreadControlBlock*)+0x94>
c0018fdd:	39 c3                	cmp    ebx,eax
c0018fdf:	75 e8                	jne    c0018fc9 <unblockTask(ThreadControlBlock*)+0x30>
c0018fe1:	eb 1c                	jmp    c0018fff <unblockTask(ThreadControlBlock*)+0x66>
c0018fe3:	83 ec 0c             	sub    esp,0xc
c0018fe6:	68 44 2f 02 c0       	push   0xc0022f44
c0018feb:	e8 69 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018ff0:	c7 04 24 d0 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ed0
c0018ff7:	e8 5d 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018ffc:	83 c4 10             	add    esp,0x10
c0018fff:	83 c4 08             	add    esp,0x8
c0019002:	5b                   	pop    ebx
c0019003:	e9 6f f9 ff ff       	jmp    c0018977 <unlockScheduler()>
c0019008:	83 ec 0c             	sub    esp,0xc
c001900b:	68 88 2e 02 c0       	push   0xc0022e88
c0019010:	e8 44 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019015:	c7 04 24 d0 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ed0
c001901c:	e8 38 61 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019021:	83 c4 10             	add    esp,0x10
c0019024:	83 c4 08             	add    esp,0x8
c0019027:	5b                   	pop    ebx
c0019028:	e9 4a f9 ff ff       	jmp    c0018977 <unlockScheduler()>
c001902d:	50                   	push   eax
c001902e:	50                   	push   eax
c001902f:	53                   	push   ebx
c0019030:	68 08 5a 02 c0       	push   0xc0025a08
c0019035:	e8 78 6b 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001903a:	83 c4 10             	add    esp,0x10
c001903d:	83 c4 08             	add    esp,0x8
c0019040:	5b                   	pop    ebx
c0019041:	e9 31 f9 ff ff       	jmp    c0018977 <unlockScheduler()>

c0019046 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019046:	55                   	push   ebp
c0019047:	57                   	push   edi
c0019048:	56                   	push   esi
c0019049:	53                   	push   ebx
c001904a:	83 ec 1c             	sub    esp,0x1c
c001904d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019051:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019054:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c001905a:	85 ed                	test   ebp,ebp
c001905c:	7e 21                	jle    c001907f <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c001905e:	31 f6                	xor    esi,esi
c0019060:	83 ec 0c             	sub    esp,0xc
c0019063:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c001906a:	46                   	inc    esi
c001906b:	57                   	push   edi
c001906c:	e8 8a 2f ff ff       	call   c000bffb <free>
c0019071:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019074:	83 c4 10             	add    esp,0x10
c0019077:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001907d:	7f e1                	jg     c0019060 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001907f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0019089:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001908e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019091:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019094:	d3 c0                	rol    eax,cl
c0019096:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c001909d:	21 c1                	and    ecx,eax
c001909f:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c00190a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00190a9:	89 f7                	mov    edi,esi
c00190ab:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c00190b3:	0f 85 4f 01 00 00    	jne    c0019208 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c00190b9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190bf:	85 c0                	test   eax,eax
c00190c1:	0f 84 aa 00 00 00    	je     c0019171 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00190c7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00190ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00190ce:	31 c9                	xor    ecx,ecx
c00190d0:	eb 10                	jmp    c00190e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00190d2:	41                   	inc    ecx
c00190d3:	83 f9 10             	cmp    ecx,0x10
c00190d6:	0f 84 95 00 00 00    	je     c0019171 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00190dc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00190e2:	31 d2                	xor    edx,edx
c00190e4:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00190eb:	d3 fa                	sar    edx,cl
c00190ed:	83 e2 01             	and    edx,0x1
c00190f0:	74 e0                	je     c00190d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00190f2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00190f5:	89 d5                	mov    ebp,edx
c00190f7:	c1 e5 05             	shl    ebp,0x5
c00190fa:	01 ea                	add    edx,ebp
c00190fc:	01 d0                	add    eax,edx
c00190fe:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0019104:	83 fd 07             	cmp    ebp,0x7
c0019107:	75 c9                	jne    c00190d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019109:	05 40 02 00 00       	add    eax,0x240
c001910e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0019111:	83 fd ff             	cmp    ebp,0xffffffff
c0019114:	0f 8c 07 01 00 00    	jl     c0019221 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c001911a:	0f 84 b4 01 00 00    	je     c00192d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0019120:	85 ed                	test   ebp,ebp
c0019122:	0f 84 9b 01 00 00    	je     c00192c3 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0019128:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001912a:	75 a6                	jne    c00190d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001912c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019132:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019136:	01 d0                	add    eax,edx
c0019138:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001913c:	83 ec 0c             	sub    esp,0xc
c001913f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019145:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019148:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001914e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019155:	50                   	push   eax
c0019156:	e8 3e fe ff ff       	call   c0018f99 <unblockTask(ThreadControlBlock*)>
c001915b:	83 c4 10             	add    esp,0x10
c001915e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019162:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019165:	41                   	inc    ecx
c0019166:	89 f7                	mov    edi,esi
c0019168:	83 f9 10             	cmp    ecx,0x10
c001916b:	0f 85 6b ff ff ff    	jne    c00190dc <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019171:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0019177:	85 c0                	test   eax,eax
c0019179:	74 5d                	je     c00191d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001917b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019181:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0019187:	74 4f                	je     c00191d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0019189:	83 ec 0c             	sub    esp,0xc
c001918c:	68 08 5a 02 c0       	push   0xc0025a08
c0019191:	e8 4a 69 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019196:	c7 04 24 08 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a08
c001919d:	89 c7                	mov    edi,eax
c001919f:	e8 44 69 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	84 c0                	test   al,al
c00191a9:	0f 84 e2 00 00 00    	je     c0019291 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c00191af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00191b2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00191b8:	85 d2                	test   edx,edx
c00191ba:	74 0f                	je     c00191cb <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c00191bc:	83 ec 0c             	sub    esp,0xc
c00191bf:	8b 02                	mov    eax,DWORD PTR [edx]
c00191c1:	52                   	push   edx
c00191c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00191c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00191c8:	83 c4 10             	add    esp,0x10
c00191cb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00191d5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00191d8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00191de:	85 db                	test   ebx,ebx
c00191e0:	74 16                	je     c00191f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00191e2:	83 ec 0c             	sub    esp,0xc
c00191e5:	53                   	push   ebx
c00191e6:	e8 b3 54 ff ff       	call   c000e69e <VAS::~VAS()>
c00191eb:	5a                   	pop    edx
c00191ec:	59                   	pop    ecx
c00191ed:	6a 10                	push   0x10
c00191ef:	53                   	push   ebx
c00191f0:	e8 3e 5e ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	83 ec 0c             	sub    esp,0xc
c00191fb:	68 9d 2c 02 c0       	push   0xc0022c9d
c0019200:	e8 54 5f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019205:	83 c4 10             	add    esp,0x10
c0019208:	50                   	push   eax
c0019209:	50                   	push   eax
c001920a:	68 3b 07 00 00       	push   0x73b
c001920f:	68 ab 2c 02 c0       	push   0xc0022cab
c0019214:	e8 40 5f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019219:	83 c4 2c             	add    esp,0x2c
c001921c:	5b                   	pop    ebx
c001921d:	5e                   	pop    esi
c001921e:	5f                   	pop    edi
c001921f:	5d                   	pop    ebp
c0019220:	c3                   	ret    
c0019221:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019225:	83 ec 0c             	sub    esp,0xc
c0019228:	68 88 2f 02 c0       	push   0xc0022f88
c001922d:	e8 56 c7 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019238:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001923c:	89 f7                	mov    edi,esi
c001923e:	e9 8f fe ff ff       	jmp    c00190d2 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019243:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019249:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001924f:	75 1c                	jne    c001926d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019251:	83 ec 0c             	sub    esp,0xc
c0019254:	68 f0 2f 02 c0       	push   0xc0022ff0
c0019259:	e8 fb 5e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001925e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019265:	e8 ad fb ff ff       	call   c0018e17 <blockTask(TaskState)>
c001926a:	83 c4 10             	add    esp,0x10
c001926d:	55                   	push   ebp
c001926e:	55                   	push   ebp
c001926f:	56                   	push   esi
c0019270:	68 08 5a 02 c0       	push   0xc0025a08
c0019275:	e8 38 69 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001927a:	c7 04 24 08 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a08
c0019281:	e8 5a 68 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019286:	83 c4 10             	add    esp,0x10
c0019289:	39 f8                	cmp    eax,edi
c001928b:	0f 84 1e ff ff ff    	je     c00191af <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019291:	83 ec 0c             	sub    esp,0xc
c0019294:	68 08 5a 02 c0       	push   0xc0025a08
c0019299:	e8 42 68 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001929e:	89 c6                	mov    esi,eax
c00192a0:	c7 04 24 08 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a08
c00192a7:	e8 58 68 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	39 f3                	cmp    ebx,esi
c00192b1:	74 ba                	je     c001926d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00192b3:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00192b6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192b9:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c00192bf:	75 ac                	jne    c001926d <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c00192c1:	eb 80                	jmp    c0019243 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c00192c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192c7:	83 ec 0c             	sub    esp,0xc
c00192ca:	68 bc 2f 02 c0       	push   0xc0022fbc
c00192cf:	e9 59 ff ff ff       	jmp    c001922d <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00192d4:	8b 36                	mov    esi,DWORD PTR [esi]
c00192d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192da:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00192dd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00192e0:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00192e6:	01 d7                	add    edi,edx
c00192e8:	89 f8                	mov    eax,edi
c00192ea:	e9 49 fe ff ff       	jmp    c0019138 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00192ef <cleanerTaskFunction(void*)>:
c00192ef:	53                   	push   ebx
c00192f0:	83 ec 08             	sub    esp,0x8
c00192f3:	e8 7f f6 ff ff       	call   c0018977 <unlockScheduler()>
c00192f8:	e8 78 f6 ff ff       	call   c0018975 <lockScheduler()>
c00192fd:	80 3d cc 59 02 c0 00 	cmp    BYTE PTR ds:0xc00259cc,0x0
c0019304:	0f 85 8e 00 00 00    	jne    c0019398 <cleanerTaskFunction(void*)+0xa9>
c001930a:	83 ec 0c             	sub    esp,0xc
c001930d:	6a 02                	push   0x2
c001930f:	e8 c2 fa ff ff       	call   c0018dd6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019314:	83 c4 10             	add    esp,0x10
c0019317:	c6 05 cc 59 02 c0 00 	mov    BYTE PTR ds:0xc00259cc,0x0
c001931e:	e8 79 f6 ff ff       	call   c001899c <lockStuff()>
c0019323:	e8 4d f6 ff ff       	call   c0018975 <lockScheduler()>
c0019328:	83 ec 0c             	sub    esp,0xc
c001932b:	68 f0 59 02 c0       	push   0xc00259f0
c0019330:	e8 b3 67 00 00       	call   c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019335:	83 c4 10             	add    esp,0x10
c0019338:	84 c0                	test   al,al
c001933a:	75 40                	jne    c001937c <cleanerTaskFunction(void*)+0x8d>
c001933c:	83 ec 0c             	sub    esp,0xc
c001933f:	68 f0 59 02 c0       	push   0xc00259f0
c0019344:	e8 97 67 00 00       	call   c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019349:	89 c3                	mov    ebx,eax
c001934b:	c7 04 24 f0 59 02 c0 	mov    DWORD PTR [esp],0xc00259f0
c0019352:	e8 ad 67 00 00       	call   c001fb04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019357:	c7 04 24 c1 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cc1
c001935e:	e8 f6 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019363:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019366:	e8 db fc ff ff       	call   c0019046 <cleanupTerminatedTask(ThreadControlBlock*)>
c001936b:	c7 04 24 da 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cda
c0019372:	e8 e2 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019377:	83 c4 10             	add    esp,0x10
c001937a:	eb ac                	jmp    c0019328 <cleanerTaskFunction(void*)+0x39>
c001937c:	e8 f6 f5 ff ff       	call   c0018977 <unlockScheduler()>
c0019381:	e8 bd f9 ff ff       	call   c0018d43 <unlockStuff()>
c0019386:	e8 ea f5 ff ff       	call   c0018975 <lockScheduler()>
c001938b:	80 3d cc 59 02 c0 00 	cmp    BYTE PTR ds:0xc00259cc,0x0
c0019392:	0f 84 72 ff ff ff    	je     c001930a <cleanerTaskFunction(void*)+0x1b>
c0019398:	e8 da f5 ff ff       	call   c0018977 <unlockScheduler()>
c001939d:	e9 75 ff ff ff       	jmp    c0019317 <cleanerTaskFunction(void*)+0x28>

c00193a2 <terminateTask(int)>:
c00193a2:	83 ec 14             	sub    esp,0x14
c00193a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193ad:	83 c0 0c             	add    eax,0xc
c00193b0:	50                   	push   eax
c00193b1:	68 18 30 02 c0       	push   0xc0023018
c00193b6:	e8 9e 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00193bb:	e8 dc f5 ff ff       	call   c001899c <lockStuff()>
c00193c0:	e8 b0 f5 ff ff       	call   c0018975 <lockScheduler()>
c00193c5:	c7 04 24 ed 2c 02 c0 	mov    DWORD PTR [esp],0xc0022ced
c00193cc:	e8 88 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00193d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00193da:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00193dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193e2:	59                   	pop    ecx
c00193e3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00193e6:	5a                   	pop    edx
c00193e7:	50                   	push   eax
c00193e8:	68 f0 59 02 c0       	push   0xc00259f0
c00193ed:	e8 c0 67 00 00       	call   c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00193f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193f7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00193fe:	c7 04 24 07 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d07
c0019405:	e8 4f 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001940a:	8b 0d c8 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259c8
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	85 c9                	test   ecx,ecx
c0019415:	74 5b                	je     c0019472 <terminateTask(int)+0xd0>
c0019417:	83 ec 0c             	sub    esp,0xc
c001941a:	68 21 2d 02 c0       	push   0xc0022d21
c001941f:	e8 35 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019424:	58                   	pop    eax
c0019425:	8b 15 c8 59 02 c0    	mov    edx,DWORD PTR ds:0xc00259c8
c001942b:	52                   	push   edx
c001942c:	c6 05 cc 59 02 c0 01 	mov    BYTE PTR ds:0xc00259cc,0x1
c0019433:	e8 61 fb ff ff       	call   c0018f99 <unblockTask(ThreadControlBlock*)>
c0019438:	c7 04 24 3b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d3b
c001943f:	e8 15 5d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019444:	83 c4 10             	add    esp,0x10
c0019447:	e8 2b f5 ff ff       	call   c0018977 <unlockScheduler()>
c001944c:	e8 f2 f8 ff ff       	call   c0018d43 <unlockStuff()>
c0019451:	83 ec 0c             	sub    esp,0xc
c0019454:	68 73 2d 02 c0       	push   0xc0022d73
c0019459:	e8 fb 5c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001945e:	83 c4 10             	add    esp,0x10
c0019461:	e8 0f f5 ff ff       	call   c0018975 <lockScheduler()>
c0019466:	e8 53 f8 ff ff       	call   c0018cbe <schedule()>
c001946b:	e8 07 f5 ff ff       	call   c0018977 <unlockScheduler()>
c0019470:	eb ef                	jmp    c0019461 <terminateTask(int)+0xbf>
c0019472:	83 ec 0c             	sub    esp,0xc
c0019475:	68 55 2d 02 c0       	push   0xc0022d55
c001947a:	e8 da 5c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001947f:	83 c4 10             	add    esp,0x10
c0019482:	eb c3                	jmp    c0019447 <terminateTask(int)+0xa5>

c0019484 <Thr::terminateFromIRQ(int)>:
c0019484:	83 ec 18             	sub    esp,0x18
c0019487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001948b:	50                   	push   eax
c001948c:	e8 11 ff ff ff       	call   c00193a2 <terminateTask(int)>
c0019491:	90                   	nop

c0019492 <Semaphore::release()>:
c0019492:	83 ec 0c             	sub    esp,0xc
c0019495:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019499:	e8 fe f4 ff ff       	call   c001899c <lockStuff()>
c001949e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00194a1:	85 c0                	test   eax,eax
c00194a3:	74 1a                	je     c00194bf <Semaphore::release()+0x2d>
c00194a5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00194a8:	83 ec 0c             	sub    esp,0xc
c00194ab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00194ae:	50                   	push   eax
c00194af:	e8 e5 fa ff ff       	call   c0018f99 <unblockTask(ThreadControlBlock*)>
c00194b4:	83 c4 10             	add    esp,0x10
c00194b7:	83 c4 0c             	add    esp,0xc
c00194ba:	e9 84 f8 ff ff       	jmp    c0018d43 <unlockStuff()>
c00194bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00194c2:	48                   	dec    eax
c00194c3:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c00194c6:	83 c4 0c             	add    esp,0xc
c00194c9:	e9 75 f8 ff ff       	jmp    c0018d43 <unlockStuff()>

c00194ce <__static_initialization_and_destruction_0(int, int)>:
c00194ce:	83 ec 0c             	sub    esp,0xc
c00194d1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00194d6:	0f 85 88 00 00 00    	jne    c0019564 <__static_initialization_and_destruction_0(int, int)+0x96>
c00194dc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00194e4:	75 7e                	jne    c0019564 <__static_initialization_and_destruction_0(int, int)+0x96>
c00194e6:	83 ec 0c             	sub    esp,0xc
c00194e9:	68 08 5a 02 c0       	push   0xc0025a08
c00194ee:	e8 a5 68 00 00       	call   c001fd98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	83 ec 04             	sub    esp,0x4
c00194f9:	68 dc 39 02 c0       	push   0xc00239dc
c00194fe:	68 08 5a 02 c0       	push   0xc0025a08
c0019503:	68 58 fd 01 c0       	push   0xc001fd58
c0019508:	e8 a2 5a ff ff       	call   c000efaf <__cxa_atexit>
c001950d:	83 c4 10             	add    esp,0x10
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	68 fc 59 02 c0       	push   0xc00259fc
c0019518:	e8 7b 68 00 00       	call   c001fd98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001951d:	83 c4 10             	add    esp,0x10
c0019520:	83 ec 04             	sub    esp,0x4
c0019523:	68 dc 39 02 c0       	push   0xc00239dc
c0019528:	68 fc 59 02 c0       	push   0xc00259fc
c001952d:	68 58 fd 01 c0       	push   0xc001fd58
c0019532:	e8 78 5a ff ff       	call   c000efaf <__cxa_atexit>
c0019537:	83 c4 10             	add    esp,0x10
c001953a:	83 ec 0c             	sub    esp,0xc
c001953d:	68 f0 59 02 c0       	push   0xc00259f0
c0019542:	e8 51 68 00 00       	call   c001fd98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019547:	83 c4 10             	add    esp,0x10
c001954a:	83 ec 04             	sub    esp,0x4
c001954d:	68 dc 39 02 c0       	push   0xc00239dc
c0019552:	68 f0 59 02 c0       	push   0xc00259f0
c0019557:	68 58 fd 01 c0       	push   0xc001fd58
c001955c:	e8 4e 5a ff ff       	call   c000efaf <__cxa_atexit>
c0019561:	83 c4 10             	add    esp,0x10
c0019564:	90                   	nop
c0019565:	83 c4 0c             	add    esp,0xc
c0019568:	c3                   	ret    

c0019569 <_GLOBAL__sub_I_kernelProcess>:
c0019569:	83 ec 0c             	sub    esp,0xc
c001956c:	83 ec 08             	sub    esp,0x8
c001956f:	68 ff ff 00 00       	push   0xffff
c0019574:	6a 01                	push   0x1
c0019576:	e8 53 ff ff ff       	call   c00194ce <__static_initialization_and_destruction_0(int, int)>
c001957b:	83 c4 10             	add    esp,0x10
c001957e:	83 c4 0c             	add    esp,0xc
c0019581:	c3                   	ret    

c0019582 <Vm::vm8086EntryPoint(void*)>:
c0019582:	83 ec 0c             	sub    esp,0xc
c0019585:	e8 ed f3 ff ff       	call   c0018977 <unlockScheduler()>
c001958a:	fb                   	sti    
c001958b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019590:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019594:	52                   	push   edx
c0019595:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019599:	52                   	push   edx
c001959a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001959e:	52                   	push   edx
c001959f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00195a3:	50                   	push   eax
c00195a4:	e8 be 6c fe ff       	call   c0000267 <goToVM86>
c00195a9:	83 c4 1c             	add    esp,0x1c
c00195ac:	c3                   	ret    

c00195ad <Vm::inbv(unsigned short)>:
c00195ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195b1:	ec                   	in     al,dx
c00195b2:	c3                   	ret    

c00195b3 <Vm::outbv(unsigned short, unsigned char)>:
c00195b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195bb:	ee                   	out    dx,al
c00195bc:	c3                   	ret    

c00195bd <Vm::realToLinear(unsigned short, unsigned short)>:
c00195bd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195c2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195c7:	c1 e0 04             	shl    eax,0x4
c00195ca:	01 d0                	add    eax,edx
c00195cc:	c3                   	ret    

c00195cd <Vm::getSegment(unsigned int)>:
c00195cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195d1:	c1 e8 10             	shr    eax,0x10
c00195d4:	c3                   	ret    

c00195d5 <Vm::getOffset(unsigned int)>:
c00195d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195d9:	c3                   	ret    

c00195da <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00195da:	55                   	push   ebp
c00195db:	57                   	push   edi
c00195dc:	56                   	push   esi
c00195dd:	53                   	push   ebx
c00195de:	83 ec 2c             	sub    esp,0x2c
c00195e1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00195e5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00195e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195ed:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00195f1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00195f5:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00195f9:	e8 77 f3 ff ff       	call   c0018975 <lockScheduler()>
c00195fe:	68 80 00 00 00       	push   0x80
c0019603:	6a 00                	push   0x0
c0019605:	68 82 95 01 c0       	push   0xc0019582
c001960a:	55                   	push   ebp
c001960b:	e8 9a f4 ff ff       	call   c0018aaa <Process::createThread(void (*)(void*), void*, int)>
c0019610:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019614:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0019618:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001961c:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0019620:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0019624:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0019628:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001962f:	e8 f0 59 ff ff       	call   c000f024 <operator new(unsigned long)>
c0019634:	83 c4 0c             	add    esp,0xc
c0019637:	55                   	push   ebp
c0019638:	89 c3                	mov    ebx,eax
c001963a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001963e:	50                   	push   eax
c001963f:	e8 4c 60 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0019644:	83 c4 0c             	add    esp,0xc
c0019647:	8d 44 24 17          	lea    eax,[esp+0x17]
c001964b:	50                   	push   eax
c001964c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019650:	50                   	push   eax
c0019651:	53                   	push   ebx
c0019652:	e8 49 63 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0019657:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	84 d2                	test   dl,dl
c0019660:	74 1c                	je     c001967e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019662:	83 ec 0c             	sub    esp,0xc
c0019665:	68 37 30 02 c0       	push   0xc0023037
c001966a:	e8 19 c3 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001966f:	e8 03 f3 ff ff       	call   c0018977 <unlockScheduler()>
c0019674:	83 c4 10             	add    esp,0x10
c0019677:	31 d2                	xor    edx,edx
c0019679:	e9 81 00 00 00       	jmp    c00196ff <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001967e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019682:	51                   	push   ecx
c0019683:	51                   	push   ecx
c0019684:	6a 01                	push   0x1
c0019686:	53                   	push   ebx
c0019687:	e8 68 60 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	85 c0                	test   eax,eax
c0019691:	74 1b                	je     c00196ae <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	68 50 30 02 c0       	push   0xc0023050
c001969b:	e8 e8 c2 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c00196a0:	e8 d2 f2 ff ff       	call   c0018977 <unlockScheduler()>
c00196a5:	83 c4 10             	add    esp,0x10
c00196a8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00196ac:	eb 51                	jmp    c00196ff <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	0f b7 ff             	movzx  edi,di
c00196b4:	6a 07                	push   0x7
c00196b6:	68 00 01 00 00       	push   0x100
c00196bb:	6a 00                	push   0x0
c00196bd:	6a 00                	push   0x0
c00196bf:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00196c5:	e8 32 54 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00196ca:	83 c4 18             	add    esp,0x18
c00196cd:	0f b7 f6             	movzx  esi,si
c00196d0:	57                   	push   edi
c00196d1:	56                   	push   esi
c00196d2:	e8 e6 fe ff ff       	call   c00195bd <Vm::realToLinear(unsigned short, unsigned short)>
c00196d7:	5a                   	pop    edx
c00196d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00196da:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00196de:	51                   	push   ecx
c00196df:	50                   	push   eax
c00196e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196e8:	53                   	push   ebx
c00196e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00196ec:	83 c4 14             	add    esp,0x14
c00196ef:	53                   	push   ebx
c00196f0:	e8 5d 60 ff ff       	call   c000f752 <File::close()>
c00196f5:	e8 7d f2 ff ff       	call   c0018977 <unlockScheduler()>
c00196fa:	83 c4 10             	add    esp,0x10
c00196fd:	b2 01                	mov    dl,0x1
c00196ff:	83 c4 2c             	add    esp,0x2c
c0019702:	88 d0                	mov    al,dl
c0019704:	5b                   	pop    ebx
c0019705:	5e                   	pop    esi
c0019706:	5f                   	pop    edi
c0019707:	5d                   	pop    ebp
c0019708:	c3                   	ret    

c0019709 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019709:	57                   	push   edi
c001970a:	56                   	push   esi
c001970b:	53                   	push   ebx
c001970c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019710:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019714:	83 e8 06             	sub    eax,0x6
c0019717:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001971b:	0f b7 c0             	movzx  eax,ax
c001971e:	50                   	push   eax
c001971f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019724:	50                   	push   eax
c0019725:	e8 93 fe ff ff       	call   c00195bd <Vm::realToLinear(unsigned short, unsigned short)>
c001972a:	5a                   	pop    edx
c001972b:	5e                   	pop    esi
c001972c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001972f:	8d 56 fa             	lea    edx,[esi-0x6]
c0019732:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019738:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001973b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001973e:	83 c2 02             	add    edx,0x2
c0019741:	66 89 10             	mov    WORD PTR [eax],dx
c0019744:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019747:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001974b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001974e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019752:	89 d6                	mov    esi,edx
c0019754:	66 81 e6 ff fd       	and    si,0xfdff
c0019759:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001975f:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019763:	74 07                	je     c001976c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019765:	89 d6                	mov    esi,edx
c0019767:	66 81 ce 00 02       	or     si,0x200
c001976c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019775:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019779:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019781:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019784:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001978c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001978f:	5b                   	pop    ebx
c0019790:	5e                   	pop    esi
c0019791:	5f                   	pop    edi
c0019792:	c3                   	ret    

c0019793 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019793:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019798:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001979d:	c1 e0 04             	shl    eax,0x4
c00197a0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00197a3:	c3                   	ret    

c00197a4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00197a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197ae:	c1 e0 04             	shl    eax,0x4
c00197b1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00197b5:	c3                   	ret    

c00197b6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00197b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197c0:	c1 e0 04             	shl    eax,0x4
c00197c3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00197c6:	c3                   	ret    

c00197c7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00197c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197d1:	c1 e0 04             	shl    eax,0x4
c00197d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197d8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00197db:	c3                   	ret    

c00197dc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00197dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197e6:	c1 e0 04             	shl    eax,0x4
c00197e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197ed:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00197f1:	c3                   	ret    

c00197f2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00197f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00197f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00197fc:	c1 e0 04             	shl    eax,0x4
c00197ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019803:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019806:	c3                   	ret    

c0019807 <Vm::faultHandler(regs*)>:
c0019807:	55                   	push   ebp
c0019808:	57                   	push   edi
c0019809:	56                   	push   esi
c001980a:	53                   	push   ebx
c001980b:	83 ec 1c             	sub    esp,0x1c
c001980e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019812:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019816:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019819:	52                   	push   edx
c001981a:	0f b7 f0             	movzx  esi,ax
c001981d:	0f b7 c0             	movzx  eax,ax
c0019820:	50                   	push   eax
c0019821:	e8 97 fd ff ff       	call   c00195bd <Vm::realToLinear(unsigned short, unsigned short)>
c0019826:	5a                   	pop    edx
c0019827:	89 c7                	mov    edi,eax
c0019829:	59                   	pop    ecx
c001982a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001982d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019831:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019834:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001983d:	0f b7 c5             	movzx  eax,bp
c0019840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019844:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019848:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001984c:	e8 6c fd ff ff       	call   c00195bd <Vm::realToLinear(unsigned short, unsigned short)>
c0019851:	5a                   	pop    edx
c0019852:	59                   	pop    ecx
c0019853:	b1 06                	mov    cl,0x6
c0019855:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001985a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001985f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019862:	80 fa 9d             	cmp    dl,0x9d
c0019865:	0f 84 1d 02 00 00    	je     c0019a88 <Vm::faultHandler(regs*)+0x281>
c001986b:	0f 87 8e 00 00 00    	ja     c00198ff <Vm::faultHandler(regs*)+0xf8>
c0019871:	80 fa 66             	cmp    dl,0x66
c0019874:	0f 84 89 01 00 00    	je     c0019a03 <Vm::faultHandler(regs*)+0x1fc>
c001987a:	77 44                	ja     c00198c0 <Vm::faultHandler(regs*)+0xb9>
c001987c:	80 fa 36             	cmp    dl,0x36
c001987f:	0f 84 74 01 00 00    	je     c00199f9 <Vm::faultHandler(regs*)+0x1f2>
c0019885:	77 1a                	ja     c00198a1 <Vm::faultHandler(regs*)+0x9a>
c0019887:	80 fa 26             	cmp    dl,0x26
c001988a:	0f 84 4b 01 00 00    	je     c00199db <Vm::faultHandler(regs*)+0x1d4>
c0019890:	80 fa 2e             	cmp    dl,0x2e
c0019893:	0f 85 4a 05 00 00    	jne    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c0019899:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001989c:	31 c9                	xor    ecx,ecx
c001989e:	47                   	inc    edi
c001989f:	eb be                	jmp    c001985f <Vm::faultHandler(regs*)+0x58>
c00198a1:	80 fa 64             	cmp    dl,0x64
c00198a4:	0f 84 3b 01 00 00    	je     c00199e5 <Vm::faultHandler(regs*)+0x1de>
c00198aa:	0f 87 3f 01 00 00    	ja     c00199ef <Vm::faultHandler(regs*)+0x1e8>
c00198b0:	80 fa 3e             	cmp    dl,0x3e
c00198b3:	0f 85 2a 05 00 00    	jne    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c00198b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00198bc:	b1 01                	mov    cl,0x1
c00198be:	eb de                	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c00198c0:	80 fa 6d             	cmp    dl,0x6d
c00198c3:	0f 84 bf 02 00 00    	je     c0019b88 <Vm::faultHandler(regs*)+0x381>
c00198c9:	77 17                	ja     c00198e2 <Vm::faultHandler(regs*)+0xdb>
c00198cb:	80 fa 67             	cmp    dl,0x67
c00198ce:	0f 84 3c 01 00 00    	je     c0019a10 <Vm::faultHandler(regs*)+0x209>
c00198d4:	80 fa 6c             	cmp    dl,0x6c
c00198d7:	0f 84 5d 02 00 00    	je     c0019b3a <Vm::faultHandler(regs*)+0x333>
c00198dd:	e9 01 05 00 00       	jmp    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c00198e2:	80 fa 6f             	cmp    dl,0x6f
c00198e5:	0f 84 8b 03 00 00    	je     c0019c76 <Vm::faultHandler(regs*)+0x46f>
c00198eb:	0f 82 0f 03 00 00    	jb     c0019c00 <Vm::faultHandler(regs*)+0x3f9>
c00198f1:	80 fa 9c             	cmp    dl,0x9c
c00198f4:	0f 84 23 01 00 00    	je     c0019a1d <Vm::faultHandler(regs*)+0x216>
c00198fa:	e9 e4 04 00 00       	jmp    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c00198ff:	80 fa ec             	cmp    dl,0xec
c0019902:	0f 84 7f 04 00 00    	je     c0019d87 <Vm::faultHandler(regs*)+0x580>
c0019908:	77 7b                	ja     c0019985 <Vm::faultHandler(regs*)+0x17e>
c001990a:	80 fa e4             	cmp    dl,0xe4
c001990d:	0f 84 fe 03 00 00    	je     c0019d11 <Vm::faultHandler(regs*)+0x50a>
c0019913:	77 53                	ja     c0019968 <Vm::faultHandler(regs*)+0x161>
c0019915:	80 fa cd             	cmp    dl,0xcd
c0019918:	0f 84 cd 01 00 00    	je     c0019aeb <Vm::faultHandler(regs*)+0x2e4>
c001991e:	80 fa cf             	cmp    dl,0xcf
c0019921:	0f 85 bc 04 00 00    	jne    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c0019927:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001992a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001992d:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019931:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019934:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019938:	81 ca 00 02 02 00    	or     edx,0x20200
c001993e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019941:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019945:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001994b:	66 c1 e8 09          	shr    ax,0x9
c001994f:	83 e0 01             	and    eax,0x1
c0019952:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019955:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019958:	83 c0 06             	add    eax,0x6
c001995b:	25 ff ff 00 00       	and    eax,0xffff
c0019960:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019963:	e9 77 04 00 00       	jmp    c0019ddf <Vm::faultHandler(regs*)+0x5d8>
c0019968:	80 fa e6             	cmp    dl,0xe6
c001996b:	0f 84 ea 03 00 00    	je     c0019d5b <Vm::faultHandler(regs*)+0x554>
c0019971:	0f 82 b6 03 00 00    	jb     c0019d2d <Vm::faultHandler(regs*)+0x526>
c0019977:	80 fa e7             	cmp    dl,0xe7
c001997a:	0f 84 f2 03 00 00    	je     c0019d72 <Vm::faultHandler(regs*)+0x56b>
c0019980:	e9 5e 04 00 00       	jmp    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c0019985:	80 fa ef             	cmp    dl,0xef
c0019988:	0f 84 3c 04 00 00    	je     c0019dca <Vm::faultHandler(regs*)+0x5c3>
c001998e:	77 28                	ja     c00199b8 <Vm::faultHandler(regs*)+0x1b1>
c0019990:	80 fa ed             	cmp    dl,0xed
c0019993:	0f 84 0a 04 00 00    	je     c0019da3 <Vm::faultHandler(regs*)+0x59c>
c0019999:	80 fa ee             	cmp    dl,0xee
c001999c:	0f 85 41 04 00 00    	jne    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c00199a2:	50                   	push   eax
c00199a3:	50                   	push   eax
c00199a4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00199a8:	50                   	push   eax
c00199a9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199ad:	50                   	push   eax
c00199ae:	e8 00 fc ff ff       	call   c00195b3 <Vm::outbv(unsigned short, unsigned char)>
c00199b3:	e9 0a 04 00 00       	jmp    c0019dc2 <Vm::faultHandler(regs*)+0x5bb>
c00199b8:	80 fa fa             	cmp    dl,0xfa
c00199bb:	0f 84 5d 01 00 00    	je     c0019b1e <Vm::faultHandler(regs*)+0x317>
c00199c1:	80 fa fb             	cmp    dl,0xfb
c00199c4:	0f 84 62 01 00 00    	je     c0019b2c <Vm::faultHandler(regs*)+0x325>
c00199ca:	80 fa f3             	cmp    dl,0xf3
c00199cd:	0f 85 10 04 00 00    	jne    c0019de3 <Vm::faultHandler(regs*)+0x5dc>
c00199d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199d6:	e9 c3 fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c00199db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199de:	b1 02                	mov    cl,0x2
c00199e0:	e9 b9 fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c00199e5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199e8:	b1 03                	mov    cl,0x3
c00199ea:	e9 af fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c00199ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199f2:	b1 04                	mov    cl,0x4
c00199f4:	e9 a5 fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c00199f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00199fc:	b1 05                	mov    cl,0x5
c00199fe:	e9 9b fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c0019a03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a06:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019a0b:	e9 8e fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c0019a10:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019a13:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019a18:	e9 81 fe ff ff       	jmp    c001989e <Vm::faultHandler(regs*)+0x97>
c0019a1d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019a20:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019a24:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a29:	74 30                	je     c0019a5b <Vm::faultHandler(regs*)+0x254>
c0019a2b:	83 e9 04             	sub    ecx,0x4
c0019a2e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a34:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019a3a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019a3d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a40:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a46:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a4a:	0f 84 8c 03 00 00    	je     c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019a50:	80 ce 02             	or     dh,0x2
c0019a53:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019a56:	e9 81 03 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019a5b:	83 e9 02             	sub    ecx,0x2
c0019a5e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019a64:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019a67:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a6b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019a71:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019a75:	74 05                	je     c0019a7c <Vm::faultHandler(regs*)+0x275>
c0019a77:	80 ce 02             	or     dh,0x2
c0019a7a:	eb 03                	jmp    c0019a7f <Vm::faultHandler(regs*)+0x278>
c0019a7c:	80 e6 fd             	and    dh,0xfd
c0019a7f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019a83:	e9 54 03 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019a88:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a8d:	74 2a                	je     c0019ab9 <Vm::faultHandler(regs*)+0x2b2>
c0019a8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a91:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019a97:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a9d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019aa2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019aa8:	c1 e8 09             	shr    eax,0x9
c0019aab:	83 e0 01             	and    eax,0x1
c0019aae:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019ab1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019ab4:	83 c0 04             	add    eax,0x4
c0019ab7:	eb 25                	jmp    c0019ade <Vm::faultHandler(regs*)+0x2d7>
c0019ab9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019abc:	81 ca 00 02 02 00    	or     edx,0x20200
c0019ac2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019ac5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019ac8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019ace:	66 c1 e8 09          	shr    ax,0x9
c0019ad2:	83 e0 01             	and    eax,0x1
c0019ad5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019ad8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019adb:	83 c0 02             	add    eax,0x2
c0019ade:	25 ff ff 00 00       	and    eax,0xffff
c0019ae3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019ae6:	e9 f1 02 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019aeb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019aef:	3c ff                	cmp    al,0xff
c0019af1:	75 10                	jne    c0019b03 <Vm::faultHandler(regs*)+0x2fc>
c0019af3:	83 ec 0c             	sub    esp,0xc
c0019af6:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019af9:	e8 86 f9 ff ff       	call   c0019484 <Thr::terminateFromIRQ(int)>
c0019afe:	e9 c2 02 00 00       	jmp    c0019dc5 <Vm::faultHandler(regs*)+0x5be>
c0019b03:	83 ec 0c             	sub    esp,0xc
c0019b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b0e:	57                   	push   edi
c0019b0f:	50                   	push   eax
c0019b10:	53                   	push   ebx
c0019b11:	e8 f3 fb ff ff       	call   c0019709 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019b16:	83 c4 20             	add    esp,0x20
c0019b19:	e9 c1 02 00 00       	jmp    c0019ddf <Vm::faultHandler(regs*)+0x5d8>
c0019b1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b23:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019b27:	e9 b0 02 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019b2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b31:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019b35:	e9 a2 02 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019b3a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b3f:	74 0d                	je     c0019b4e <Vm::faultHandler(regs*)+0x347>
c0019b41:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019b48:	0f 87 e9 02 00 00    	ja     c0019e37 <Vm::faultHandler(regs*)+0x630>
c0019b4e:	83 ec 0c             	sub    esp,0xc
c0019b51:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019b54:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b58:	50                   	push   eax
c0019b59:	e8 4f fa ff ff       	call   c00195ad <Vm::inbv(unsigned short)>
c0019b5e:	83 c4 0c             	add    esp,0xc
c0019b61:	0f b6 c0             	movzx  eax,al
c0019b64:	50                   	push   eax
c0019b65:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019b69:	0f b7 c9             	movzx  ecx,cx
c0019b6c:	50                   	push   eax
c0019b6d:	51                   	push   ecx
c0019b6e:	e8 54 fc ff ff       	call   c00197c7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019b73:	83 c4 10             	add    esp,0x10
c0019b76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019b79:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b7d:	74 03                	je     c0019b82 <Vm::faultHandler(regs*)+0x37b>
c0019b7f:	48                   	dec    eax
c0019b80:	eb 01                	jmp    c0019b83 <Vm::faultHandler(regs*)+0x37c>
c0019b82:	40                   	inc    eax
c0019b83:	0f b7 c0             	movzx  eax,ax
c0019b86:	eb 70                	jmp    c0019bf8 <Vm::faultHandler(regs*)+0x3f1>
c0019b88:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019b8b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019b8e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b93:	74 0c                	je     c0019ba1 <Vm::faultHandler(regs*)+0x39a>
c0019b95:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019b9b:	0f 87 96 02 00 00    	ja     c0019e37 <Vm::faultHandler(regs*)+0x630>
c0019ba1:	0f b7 c9             	movzx  ecx,cx
c0019ba4:	0f b7 f6             	movzx  esi,si
c0019ba7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019baa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019baf:	74 20                	je     c0019bd1 <Vm::faultHandler(regs*)+0x3ca>
c0019bb1:	ed                   	in     eax,dx
c0019bb2:	55                   	push   ebp
c0019bb3:	50                   	push   eax
c0019bb4:	51                   	push   ecx
c0019bb5:	56                   	push   esi
c0019bb6:	e8 37 fc ff ff       	call   c00197f2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019bc1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019bc5:	74 05                	je     c0019bcc <Vm::faultHandler(regs*)+0x3c5>
c0019bc7:	83 e8 04             	sub    eax,0x4
c0019bca:	eb 27                	jmp    c0019bf3 <Vm::faultHandler(regs*)+0x3ec>
c0019bcc:	83 c0 04             	add    eax,0x4
c0019bcf:	eb 22                	jmp    c0019bf3 <Vm::faultHandler(regs*)+0x3ec>
c0019bd1:	66 ed                	in     ax,dx
c0019bd3:	0f b7 c0             	movzx  eax,ax
c0019bd6:	57                   	push   edi
c0019bd7:	50                   	push   eax
c0019bd8:	51                   	push   ecx
c0019bd9:	56                   	push   esi
c0019bda:	e8 fd fb ff ff       	call   c00197dc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019bdf:	83 c4 10             	add    esp,0x10
c0019be2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019be5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019be9:	74 05                	je     c0019bf0 <Vm::faultHandler(regs*)+0x3e9>
c0019beb:	83 e8 02             	sub    eax,0x2
c0019bee:	eb 03                	jmp    c0019bf3 <Vm::faultHandler(regs*)+0x3ec>
c0019bf0:	83 c0 02             	add    eax,0x2
c0019bf3:	25 ff ff 00 00       	and    eax,0xffff
c0019bf8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019bfb:	e9 dc 01 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019c00:	49                   	dec    ecx
c0019c01:	80 f9 05             	cmp    cl,0x5
c0019c04:	77 24                	ja     c0019c2a <Vm::faultHandler(regs*)+0x423>
c0019c06:	0f b6 c9             	movzx  ecx,cl
c0019c09:	ff 24 8d 98 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcf68]
c0019c10:	0f b7 f5             	movzx  esi,bp
c0019c13:	eb 15                	jmp    c0019c2a <Vm::faultHandler(regs*)+0x423>
c0019c15:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019c19:	eb 0f                	jmp    c0019c2a <Vm::faultHandler(regs*)+0x423>
c0019c1b:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019c1f:	eb 09                	jmp    c0019c2a <Vm::faultHandler(regs*)+0x423>
c0019c21:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019c25:	eb 03                	jmp    c0019c2a <Vm::faultHandler(regs*)+0x423>
c0019c27:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019c2a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019c2d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c32:	74 0b                	je     c0019c3f <Vm::faultHandler(regs*)+0x438>
c0019c34:	3d ff ff 00 00       	cmp    eax,0xffff
c0019c39:	0f 87 f8 01 00 00    	ja     c0019e37 <Vm::faultHandler(regs*)+0x630>
c0019c3f:	52                   	push   edx
c0019c40:	52                   	push   edx
c0019c41:	0f b7 c0             	movzx  eax,ax
c0019c44:	50                   	push   eax
c0019c45:	56                   	push   esi
c0019c46:	e8 48 fb ff ff       	call   c0019793 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019c4b:	59                   	pop    ecx
c0019c4c:	5e                   	pop    esi
c0019c4d:	0f b6 c0             	movzx  eax,al
c0019c50:	50                   	push   eax
c0019c51:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c55:	50                   	push   eax
c0019c56:	e8 58 f9 ff ff       	call   c00195b3 <Vm::outbv(unsigned short, unsigned char)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019c61:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c65:	74 03                	je     c0019c6a <Vm::faultHandler(regs*)+0x463>
c0019c67:	48                   	dec    eax
c0019c68:	eb 01                	jmp    c0019c6b <Vm::faultHandler(regs*)+0x464>
c0019c6a:	40                   	inc    eax
c0019c6b:	0f b7 c0             	movzx  eax,ax
c0019c6e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019c71:	e9 66 01 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019c76:	49                   	dec    ecx
c0019c77:	80 f9 05             	cmp    cl,0x5
c0019c7a:	77 1f                	ja     c0019c9b <Vm::faultHandler(regs*)+0x494>
c0019c7c:	0f b6 c9             	movzx  ecx,cl
c0019c7f:	ff 24 8d b0 30 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcf50]
c0019c86:	89 ee                	mov    esi,ebp
c0019c88:	eb 11                	jmp    c0019c9b <Vm::faultHandler(regs*)+0x494>
c0019c8a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019c8d:	eb 0c                	jmp    c0019c9b <Vm::faultHandler(regs*)+0x494>
c0019c8f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c92:	eb 07                	jmp    c0019c9b <Vm::faultHandler(regs*)+0x494>
c0019c94:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019c97:	eb 02                	jmp    c0019c9b <Vm::faultHandler(regs*)+0x494>
c0019c99:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019c9b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019c9e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019ca3:	74 0c                	je     c0019cb1 <Vm::faultHandler(regs*)+0x4aa>
c0019ca5:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019cab:	0f 87 86 01 00 00    	ja     c0019e37 <Vm::faultHandler(regs*)+0x630>
c0019cb1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019cb4:	0f b7 d6             	movzx  edx,si
c0019cb7:	81 e7 00 04 00 00    	and    edi,0x400
c0019cbd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cc0:	0f b7 c1             	movzx  eax,cx
c0019cc3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cc8:	74 1d                	je     c0019ce7 <Vm::faultHandler(regs*)+0x4e0>
c0019cca:	55                   	push   ebp
c0019ccb:	55                   	push   ebp
c0019ccc:	50                   	push   eax
c0019ccd:	52                   	push   edx
c0019cce:	e8 e3 fa ff ff       	call   c00197b6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019cd3:	83 c4 10             	add    esp,0x10
c0019cd6:	89 f2                	mov    edx,esi
c0019cd8:	ef                   	out    dx,eax
c0019cd9:	85 ff                	test   edi,edi
c0019cdb:	74 05                	je     c0019ce2 <Vm::faultHandler(regs*)+0x4db>
c0019cdd:	83 e9 04             	sub    ecx,0x4
c0019ce0:	eb 21                	jmp    c0019d03 <Vm::faultHandler(regs*)+0x4fc>
c0019ce2:	83 c1 04             	add    ecx,0x4
c0019ce5:	eb 1c                	jmp    c0019d03 <Vm::faultHandler(regs*)+0x4fc>
c0019ce7:	55                   	push   ebp
c0019ce8:	55                   	push   ebp
c0019ce9:	50                   	push   eax
c0019cea:	52                   	push   edx
c0019ceb:	e8 b4 fa ff ff       	call   c00197a4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019cf0:	83 c4 10             	add    esp,0x10
c0019cf3:	89 f2                	mov    edx,esi
c0019cf5:	66 ef                	out    dx,ax
c0019cf7:	85 ff                	test   edi,edi
c0019cf9:	74 05                	je     c0019d00 <Vm::faultHandler(regs*)+0x4f9>
c0019cfb:	83 e9 02             	sub    ecx,0x2
c0019cfe:	eb 03                	jmp    c0019d03 <Vm::faultHandler(regs*)+0x4fc>
c0019d00:	83 c1 02             	add    ecx,0x2
c0019d03:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019d09:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019d0c:	e9 cb 00 00 00       	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019d11:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d1f:	50                   	push   eax
c0019d20:	e8 88 f8 ff ff       	call   c00195ad <Vm::inbv(unsigned short)>
c0019d25:	0f b6 c0             	movzx  eax,al
c0019d28:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019d2b:	eb 3f                	jmp    c0019d6c <Vm::faultHandler(regs*)+0x565>
c0019d2d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d32:	74 07                	je     c0019d3b <Vm::faultHandler(regs*)+0x534>
c0019d34:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d38:	ed                   	in     eax,dx
c0019d39:	eb 14                	jmp    c0019d4f <Vm::faultHandler(regs*)+0x548>
c0019d3b:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019d3e:	66 31 c9             	xor    cx,cx
c0019d41:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019d44:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d48:	66 ed                	in     ax,dx
c0019d4a:	0f b7 c0             	movzx  eax,ax
c0019d4d:	09 c8                	or     eax,ecx
c0019d4f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019d52:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d56:	e9 84 00 00 00       	jmp    c0019ddf <Vm::faultHandler(regs*)+0x5d8>
c0019d5b:	52                   	push   edx
c0019d5c:	52                   	push   edx
c0019d5d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019d61:	50                   	push   eax
c0019d62:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019d66:	50                   	push   eax
c0019d67:	e8 47 f8 ff ff       	call   c00195b3 <Vm::outbv(unsigned short, unsigned char)>
c0019d6c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019d70:	eb 53                	jmp    c0019dc5 <Vm::faultHandler(regs*)+0x5be>
c0019d72:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019d75:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019d79:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d7e:	74 03                	je     c0019d83 <Vm::faultHandler(regs*)+0x57c>
c0019d80:	ef                   	out    dx,eax
c0019d81:	eb cf                	jmp    c0019d52 <Vm::faultHandler(regs*)+0x54b>
c0019d83:	66 ef                	out    dx,ax
c0019d85:	eb cb                	jmp    c0019d52 <Vm::faultHandler(regs*)+0x54b>
c0019d87:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019d8e:	83 ec 0c             	sub    esp,0xc
c0019d91:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d95:	50                   	push   eax
c0019d96:	e8 12 f8 ff ff       	call   c00195ad <Vm::inbv(unsigned short)>
c0019d9b:	0f b6 c0             	movzx  eax,al
c0019d9e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019da1:	eb 1f                	jmp    c0019dc2 <Vm::faultHandler(regs*)+0x5bb>
c0019da3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019da6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dab:	74 03                	je     c0019db0 <Vm::faultHandler(regs*)+0x5a9>
c0019dad:	ed                   	in     eax,dx
c0019dae:	eb 0d                	jmp    c0019dbd <Vm::faultHandler(regs*)+0x5b6>
c0019db0:	66 ed                	in     ax,dx
c0019db2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019db5:	66 31 d2             	xor    dx,dx
c0019db8:	0f b7 c0             	movzx  eax,ax
c0019dbb:	09 d0                	or     eax,edx
c0019dbd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019dc0:	eb 1a                	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019dc2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019dc5:	83 c4 10             	add    esp,0x10
c0019dc8:	eb 15                	jmp    c0019ddf <Vm::faultHandler(regs*)+0x5d8>
c0019dca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019dcd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019dd0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019dd5:	74 03                	je     c0019dda <Vm::faultHandler(regs*)+0x5d3>
c0019dd7:	ef                   	out    dx,eax
c0019dd8:	eb 02                	jmp    c0019ddc <Vm::faultHandler(regs*)+0x5d5>
c0019dda:	66 ef                	out    dx,ax
c0019ddc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ddf:	b0 01                	mov    al,0x1
c0019de1:	eb 56                	jmp    c0019e39 <Vm::faultHandler(regs*)+0x632>
c0019de3:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019de7:	50                   	push   eax
c0019de8:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019dec:	50                   	push   eax
c0019ded:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019df1:	50                   	push   eax
c0019df2:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019df6:	50                   	push   eax
c0019df7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019dfb:	50                   	push   eax
c0019dfc:	52                   	push   edx
c0019dfd:	52                   	push   edx
c0019dfe:	68 69 30 02 c0       	push   0xc0023069
c0019e03:	e8 51 53 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019e08:	83 c4 20             	add    esp,0x20
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	6a 60                	push   0x60
c0019e10:	e8 98 f7 ff ff       	call   c00195ad <Vm::inbv(unsigned short)>
c0019e15:	83 c4 10             	add    esp,0x10
c0019e18:	3c 1c                	cmp    al,0x1c
c0019e1a:	74 04                	je     c0019e20 <Vm::faultHandler(regs*)+0x619>
c0019e1c:	3c 5a                	cmp    al,0x5a
c0019e1e:	75 eb                	jne    c0019e0b <Vm::faultHandler(regs*)+0x604>
c0019e20:	3c 1c                	cmp    al,0x1c
c0019e22:	74 04                	je     c0019e28 <Vm::faultHandler(regs*)+0x621>
c0019e24:	3c 5a                	cmp    al,0x5a
c0019e26:	75 0f                	jne    c0019e37 <Vm::faultHandler(regs*)+0x630>
c0019e28:	83 ec 0c             	sub    esp,0xc
c0019e2b:	6a 60                	push   0x60
c0019e2d:	e8 7b f7 ff ff       	call   c00195ad <Vm::inbv(unsigned short)>
c0019e32:	83 c4 10             	add    esp,0x10
c0019e35:	eb e9                	jmp    c0019e20 <Vm::faultHandler(regs*)+0x619>
c0019e37:	31 c0                	xor    eax,eax
c0019e39:	83 c4 1c             	add    esp,0x1c
c0019e3c:	5b                   	pop    ebx
c0019e3d:	5e                   	pop    esi
c0019e3e:	5f                   	pop    edi
c0019e3f:	5d                   	pop    ebp
c0019e40:	c3                   	ret    
c0019e41:	90                   	nop

c0019e42 <FAT::getName()>:
c0019e42:	b8 c8 30 02 c0       	mov    eax,0xc00230c8
c0019e47:	c3                   	ret    

c0019e48 <FAT::tell(void*, unsigned long long*)>:
c0019e48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e4d:	75 06                	jne    c0019e55 <FAT::tell(void*, unsigned long long*)+0xd>
c0019e4f:	b8 04 00 00 00       	mov    eax,0x4
c0019e54:	c3                   	ret    
c0019e55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e5a:	75 06                	jne    c0019e62 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019e5c:	b8 04 00 00 00       	mov    eax,0x4
c0019e61:	c3                   	ret    
c0019e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e66:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019e69:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019e6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e70:	89 01                	mov    DWORD PTR [ecx],eax
c0019e72:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019e75:	b8 00 00 00 00       	mov    eax,0x0
c0019e7a:	c3                   	ret    
c0019e7b:	90                   	nop

c0019e7c <FAT::stat(void*, unsigned long long*)>:
c0019e7c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019e81:	75 06                	jne    c0019e89 <FAT::stat(void*, unsigned long long*)+0xd>
c0019e83:	b8 04 00 00 00       	mov    eax,0x4
c0019e88:	c3                   	ret    
c0019e89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019e8e:	75 06                	jne    c0019e96 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019e90:	b8 04 00 00 00       	mov    eax,0x4
c0019e95:	c3                   	ret    
c0019e96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e9a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019e9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019ea0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ea4:	89 01                	mov    DWORD PTR [ecx],eax
c0019ea6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019ea9:	b8 00 00 00 00       	mov    eax,0x0
c0019eae:	c3                   	ret    
c0019eaf:	90                   	nop

c0019eb0 <FAT::~FAT()>:
c0019eb0:	83 ec 0c             	sub    esp,0xc
c0019eb3:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c0019eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ebc:	89 10                	mov    DWORD PTR [eax],edx
c0019ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec2:	83 ec 0c             	sub    esp,0xc
c0019ec5:	50                   	push   eax
c0019ec6:	e8 bf 55 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	90                   	nop
c0019ecf:	83 c4 0c             	add    esp,0xc
c0019ed2:	c3                   	ret    
c0019ed3:	90                   	nop

c0019ed4 <FAT::~FAT()>:
c0019ed4:	83 ec 0c             	sub    esp,0xc
c0019ed7:	83 ec 0c             	sub    esp,0xc
c0019eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ede:	e8 cd ff ff ff       	call   c0019eb0 <FAT::~FAT()>
c0019ee3:	83 c4 10             	add    esp,0x10
c0019ee6:	83 ec 08             	sub    esp,0x8
c0019ee9:	6a 08                	push   0x8
c0019eeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eef:	e8 3f 51 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0019ef4:	83 c4 10             	add    esp,0x10
c0019ef7:	83 c4 0c             	add    esp,0xc
c0019efa:	c3                   	ret    
c0019efb:	90                   	nop

c0019efc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019efc:	83 ec 1c             	sub    esp,0x1c
c0019eff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019f06:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019f0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f0f:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c0019f16:	83 f8 ff             	cmp    eax,0xffffffff
c0019f19:	75 34                	jne    c0019f4f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019f1b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019f1f:	88 c2                	mov    dl,al
c0019f21:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c0019f26:	01 d0                	add    eax,edx
c0019f28:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019f2c:	8b 15 40 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a40
c0019f32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f36:	89 14 85 60 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5a0],edx
c0019f3d:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c0019f42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019f46:	89 14 85 e0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda520],edx
c0019f4d:	eb 17                	jmp    c0019f66 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0019f4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019f53:	88 c2                	mov    dl,al
c0019f55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019f59:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c0019f60:	01 d0                	add    eax,edx
c0019f62:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019f66:	83 ec 04             	sub    esp,0x4
c0019f69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019f71:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019f75:	50                   	push   eax
c0019f76:	e8 52 cb fe ff       	call   c0006acd <f_getlabel>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f82:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f87:	75 07                	jne    c0019f90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019f89:	b8 00 00 00 00       	mov    eax,0x0
c0019f8e:	eb 05                	jmp    c0019f95 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019f90:	b8 01 00 00 00       	mov    eax,0x1
c0019f95:	83 c4 1c             	add    esp,0x1c
c0019f98:	c3                   	ret    
c0019f99:	90                   	nop

c0019f9a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019f9a:	57                   	push   edi
c0019f9b:	83 ec 58             	sub    esp,0x58
c0019f9e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019fa6:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019faa:	b8 00 00 00 00       	mov    eax,0x0
c0019faf:	b9 0f 00 00 00       	mov    ecx,0xf
c0019fb4:	fc                   	cld    
c0019fb5:	89 d7                	mov    edi,edx
c0019fb7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019fb9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fbd:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c0019fc4:	83 f8 ff             	cmp    eax,0xffffffff
c0019fc7:	75 34                	jne    c0019ffd <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019fc9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fcd:	88 c2                	mov    dl,al
c0019fcf:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c0019fd4:	01 d0                	add    eax,edx
c0019fd6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fda:	8b 15 40 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a40
c0019fe0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019fe4:	89 14 85 60 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5a0],edx
c0019feb:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c0019ff0:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019ff4:	89 14 85 e0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda520],edx
c0019ffb:	eb 17                	jmp    c001a014 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019ffd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a001:	88 c2                	mov    dl,al
c001a003:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a007:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c001a00e:	01 d0                	add    eax,edx
c001a010:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a014:	83 ec 08             	sub    esp,0x8
c001a017:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a01b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a01f:	50                   	push   eax
c001a020:	e8 eb 67 fe ff       	call   c0000810 <strcat>
c001a025:	83 c4 10             	add    esp,0x10
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a02f:	50                   	push   eax
c001a030:	e8 8c cc fe ff       	call   c0006cc1 <f_setlabel>
c001a035:	83 c4 10             	add    esp,0x10
c001a038:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a03c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a041:	75 07                	jne    c001a04a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a043:	b8 00 00 00 00       	mov    eax,0x0
c001a048:	eb 05                	jmp    c001a04f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a04a:	b8 01 00 00 00       	mov    eax,0x1
c001a04f:	83 c4 58             	add    esp,0x58
c001a052:	5f                   	pop    edi
c001a053:	c3                   	ret    

c001a054 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a054:	83 ec 2c             	sub    esp,0x2c
c001a057:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a05f:	83 ec 08             	sub    esp,0x8
c001a062:	68 ec 30 02 c0       	push   0xc00230ec
c001a067:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a06b:	e8 3a 67 fe ff       	call   c00007aa <strcmp>
c001a070:	83 c4 10             	add    esp,0x10
c001a073:	85 c0                	test   eax,eax
c001a075:	0f 94 c0             	sete   al
c001a078:	84 c0                	test   al,al
c001a07a:	74 0d                	je     c001a089 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a07c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a084:	e9 a6 00 00 00       	jmp    c001a12f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a089:	83 ec 08             	sub    esp,0x8
c001a08c:	68 de 30 02 c0       	push   0xc00230de
c001a091:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a095:	e8 10 67 fe ff       	call   c00007aa <strcmp>
c001a09a:	83 c4 10             	add    esp,0x10
c001a09d:	85 c0                	test   eax,eax
c001a09f:	0f 94 c0             	sete   al
c001a0a2:	84 c0                	test   al,al
c001a0a4:	74 0a                	je     c001a0b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a0a6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a0ae:	eb 7f                	jmp    c001a12f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0b0:	83 ec 08             	sub    esp,0x8
c001a0b3:	68 e4 30 02 c0       	push   0xc00230e4
c001a0b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0bc:	e8 e9 66 fe ff       	call   c00007aa <strcmp>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	85 c0                	test   eax,eax
c001a0c6:	0f 94 c0             	sete   al
c001a0c9:	84 c0                	test   al,al
c001a0cb:	74 0a                	je     c001a0d7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a0cd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a0d5:	eb 58                	jmp    c001a12f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0d7:	83 ec 08             	sub    esp,0x8
c001a0da:	68 6c 04 02 c0       	push   0xc002046c
c001a0df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0e3:	e8 c2 66 fe ff       	call   c00007aa <strcmp>
c001a0e8:	83 c4 10             	add    esp,0x10
c001a0eb:	85 c0                	test   eax,eax
c001a0ed:	0f 94 c0             	sete   al
c001a0f0:	84 c0                	test   al,al
c001a0f2:	74 0a                	je     c001a0fe <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a0f4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a0fc:	eb 31                	jmp    c001a12f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a0fe:	83 ec 08             	sub    esp,0x8
c001a101:	68 ea 30 02 c0       	push   0xc00230ea
c001a106:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a10a:	e8 9b 66 fe ff       	call   c00007aa <strcmp>
c001a10f:	83 c4 10             	add    esp,0x10
c001a112:	85 c0                	test   eax,eax
c001a114:	0f 94 c0             	sete   al
c001a117:	84 c0                	test   al,al
c001a119:	74 0a                	je     c001a125 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a11b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a123:	eb 0a                	jmp    c001a12f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a125:	b8 08 00 00 00       	mov    eax,0x8
c001a12a:	e9 04 01 00 00       	jmp    c001a233 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a12f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a136:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a13b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a13f:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c001a146:	83 f8 ff             	cmp    eax,0xffffffff
c001a149:	75 34                	jne    c001a17f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a14b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a14f:	88 c2                	mov    dl,al
c001a151:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c001a156:	01 d0                	add    eax,edx
c001a158:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a15c:	8b 15 40 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a40
c001a162:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a166:	89 14 85 60 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5a0],edx
c001a16d:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c001a172:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a176:	89 14 85 e0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda520],edx
c001a17d:	eb 17                	jmp    c001a196 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a17f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a183:	88 c2                	mov    dl,al
c001a185:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a189:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c001a190:	01 d0                	add    eax,edx
c001a192:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a196:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a19a:	88 04 24             	mov    BYTE PTR [esp],al
c001a19d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a1a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a1ad:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a1b2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a1ba:	83 ec 0c             	sub    esp,0xc
c001a1bd:	68 00 20 00 00       	push   0x2000
c001a1c2:	e8 24 1e ff ff       	call   c000bfeb <malloc>
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1ce:	68 00 20 00 00       	push   0x2000
c001a1d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a1db:	50                   	push   eax
c001a1dc:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a1e0:	50                   	push   eax
c001a1e1:	e8 26 cf fe ff       	call   c000710c <f_mkfs>
c001a1e6:	83 c4 10             	add    esp,0x10
c001a1e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1f2:	75 07                	jne    c001a1fb <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a1f4:	b8 00 00 00 00       	mov    eax,0x0
c001a1f9:	eb 38                	jmp    c001a233 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a1fb:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a200:	75 17                	jne    c001a219 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	68 1c 31 02 c0       	push   0xc002311c
c001a20a:	e8 4a 4f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001a20f:	83 c4 10             	add    esp,0x10
c001a212:	b8 09 00 00 00       	mov    eax,0x9
c001a217:	eb 1a                	jmp    c001a233 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a21d:	83 ec 08             	sub    esp,0x8
c001a220:	50                   	push   eax
c001a221:	68 f0 30 02 c0       	push   0xc00230f0
c001a226:	e8 2e 4f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	b8 01 00 00 00       	mov    eax,0x1
c001a233:	83 c4 2c             	add    esp,0x2c
c001a236:	c3                   	ret    
c001a237:	90                   	nop

c001a238 <FAT::tryMount(LogicalDisk*, int)>:
c001a238:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a23e:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c001a243:	83 f8 14             	cmp    eax,0x14
c001a246:	75 17                	jne    c001a25f <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a248:	83 ec 0c             	sub    esp,0xc
c001a24b:	68 02 31 02 c0       	push   0xc0023102
c001a250:	e8 33 b7 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001a255:	83 c4 10             	add    esp,0x10
c001a258:	b0 00                	mov    al,0x0
c001a25a:	e9 d7 01 00 00       	jmp    c001a436 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a25f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a266:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a26c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a272:	3d 00 02 00 00       	cmp    eax,0x200
c001a277:	74 07                	je     c001a280 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a279:	b0 00                	mov    al,0x0
c001a27b:	e9 b6 01 00 00       	jmp    c001a436 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a280:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a288:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a28f:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c001a296:	83 f8 ff             	cmp    eax,0xffffffff
c001a299:	74 07                	je     c001a2a2 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a29b:	b0 01                	mov    al,0x1
c001a29d:	e9 94 01 00 00       	jmp    c001a436 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a2a2:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a2ac:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a2b4:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a2bb:	88 c2                	mov    dl,al
c001a2bd:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c001a2c2:	01 d0                	add    eax,edx
c001a2c4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a2cb:	8b 15 40 5a 02 c0    	mov    edx,DWORD PTR ds:0xc0025a40
c001a2d1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a2d8:	89 14 85 60 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda5a0],edx
c001a2df:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c001a2e4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a2eb:	89 14 85 e0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda520],edx
c001a2f2:	83 ec 0c             	sub    esp,0xc
c001a2f5:	68 54 02 00 00       	push   0x254
c001a2fa:	e8 ec 1c ff ff       	call   c000bfeb <malloc>
c001a2ff:	83 c4 10             	add    esp,0x10
c001a302:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a309:	83 ec 04             	sub    esp,0x4
c001a30c:	6a 00                	push   0x0
c001a30e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a315:	50                   	push   eax
c001a316:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a31d:	e8 d9 a9 fe ff       	call   c0004cfb <f_mount>
c001a322:	83 c4 10             	add    esp,0x10
c001a325:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a32c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a334:	74 19                	je     c001a34f <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a336:	83 ec 0c             	sub    esp,0xc
c001a339:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a340:	e8 c6 1c ff ff       	call   c000c00b <rfree>
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	b0 00                	mov    al,0x0
c001a34a:	e9 e7 00 00 00       	jmp    c001a436 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a34f:	83 ec 04             	sub    esp,0x4
c001a352:	68 00 01 00 00       	push   0x100
c001a357:	6a 00                	push   0x0
c001a359:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a360:	50                   	push   eax
c001a361:	e8 54 63 fe ff       	call   c00006ba <memset>
c001a366:	83 c4 10             	add    esp,0x10
c001a369:	83 ec 08             	sub    esp,0x8
c001a36c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a373:	50                   	push   eax
c001a374:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a37b:	50                   	push   eax
c001a37c:	e8 8f 64 fe ff       	call   c0000810 <strcat>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	83 ec 08             	sub    esp,0x8
c001a387:	68 10 31 02 c0       	push   0xc0023110
c001a38c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a393:	50                   	push   eax
c001a394:	e8 77 64 fe ff       	call   c0000810 <strcat>
c001a399:	83 c4 10             	add    esp,0x10
c001a39c:	83 ec 04             	sub    esp,0x4
c001a39f:	6a 01                	push   0x1
c001a3a1:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a3a8:	50                   	push   eax
c001a3a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3ad:	50                   	push   eax
c001a3ae:	e8 aa a9 fe ff       	call   c0004d5d <f_open>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a3bd:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a3c4:	85 c0                	test   eax,eax
c001a3c6:	74 0a                	je     c001a3d2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a3c8:	78 2d                	js     c001a3f7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a3ca:	83 e8 04             	sub    eax,0x4
c001a3cd:	83 f8 01             	cmp    eax,0x1
c001a3d0:	77 25                	ja     c001a3f7 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a3d2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a3da:	83 ec 0c             	sub    esp,0xc
c001a3dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a3e1:	50                   	push   eax
c001a3e2:	e8 c8 b4 fe ff       	call   c00058af <f_close>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	90                   	nop
c001a3eb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a3f3:	74 3a                	je     c001a42f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a3f5:	eb 2d                	jmp    c001a424 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a3f7:	83 ec 0c             	sub    esp,0xc
c001a3fa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a401:	e8 05 1c ff ff       	call   c000c00b <rfree>
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	83 ec 04             	sub    esp,0x4
c001a40c:	6a 00                	push   0x0
c001a40e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a415:	50                   	push   eax
c001a416:	6a 00                	push   0x0
c001a418:	e8 de a8 fe ff       	call   c0004cfb <f_mount>
c001a41d:	83 c4 10             	add    esp,0x10
c001a420:	b0 00                	mov    al,0x0
c001a422:	eb 12                	jmp    c001a436 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a424:	a1 40 5a 02 c0       	mov    eax,ds:0xc0025a40
c001a429:	40                   	inc    eax
c001a42a:	a3 40 5a 02 c0       	mov    ds:0xc0025a40,eax
c001a42f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a436:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a43c:	c3                   	ret    
c001a43d:	90                   	nop

c001a43e <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a43e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a444:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a44c:	74 0a                	je     c001a458 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a44e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a456:	75 0a                	jne    c001a462 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a458:	b8 04 00 00 00       	mov    eax,0x4
c001a45d:	e9 dd 00 00 00       	jmp    c001a53f <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a462:	83 ec 08             	sub    esp,0x8
c001a465:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a46c:	50                   	push   eax
c001a46d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a474:	e8 ee b9 fe ff       	call   c0005e67 <f_readdir>
c001a479:	83 c4 10             	add    esp,0x10
c001a47c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a483:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a489:	83 ec 0c             	sub    esp,0xc
c001a48c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a493:	83 c0 1a             	add    eax,0x1a
c001a496:	50                   	push   eax
c001a497:	e8 3b 62 fe ff       	call   c00006d7 <strlen>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	ba 00 00 00 00       	mov    edx,0x0
c001a4a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4a8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a4ac:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a4b3:	25 ff 00 00 00       	and    eax,0xff
c001a4b8:	83 e0 10             	and    eax,0x10
c001a4bb:	74 07                	je     c001a4c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a4bd:	b8 02 00 00 00       	mov    eax,0x2
c001a4c2:	eb 05                	jmp    c001a4c9 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a4c4:	b8 01 00 00 00       	mov    eax,0x1
c001a4c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4cd:	83 ec 08             	sub    esp,0x8
c001a4d0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a4d7:	83 c0 1a             	add    eax,0x1a
c001a4da:	50                   	push   eax
c001a4db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4df:	83 c0 10             	add    eax,0x10
c001a4e2:	50                   	push   eax
c001a4e3:	e8 71 62 fe ff       	call   c0000759 <strcpy>
c001a4e8:	83 c4 10             	add    esp,0x10
c001a4eb:	83 ec 04             	sub    esp,0x4
c001a4ee:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a4f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4f9:	50                   	push   eax
c001a4fa:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a501:	e8 7e 61 fe ff       	call   c0000684 <memcpy>
c001a506:	83 c4 10             	add    esp,0x10
c001a509:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a510:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a516:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a51d:	84 c0                	test   al,al
c001a51f:	75 07                	jne    c001a528 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a521:	b8 07 00 00 00       	mov    eax,0x7
c001a526:	eb 17                	jmp    c001a53f <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a528:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a52f:	85 c0                	test   eax,eax
c001a531:	75 07                	jne    c001a53a <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a533:	b8 00 00 00 00       	mov    eax,0x0
c001a538:	eb 05                	jmp    c001a53f <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a53a:	b8 01 00 00 00       	mov    eax,0x1
c001a53f:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a545:	c3                   	ret    

c001a546 <FAT::read(void*, unsigned long, void*, int*)>:
c001a546:	83 ec 1c             	sub    esp,0x1c
c001a549:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a54e:	74 07                	je     c001a557 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a550:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a555:	75 07                	jne    c001a55e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a557:	b8 04 00 00 00       	mov    eax,0x4
c001a55c:	eb 3d                	jmp    c001a59b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a55e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a562:	50                   	push   eax
c001a563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a567:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a56b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a56f:	e8 25 ac fe ff       	call   c0005199 <f_read>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a57b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a57f:	89 c2                	mov    edx,eax
c001a581:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a585:	89 10                	mov    DWORD PTR [eax],edx
c001a587:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a58b:	85 c0                	test   eax,eax
c001a58d:	75 07                	jne    c001a596 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a58f:	b8 00 00 00 00       	mov    eax,0x0
c001a594:	eb 05                	jmp    c001a59b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a596:	b8 01 00 00 00       	mov    eax,0x1
c001a59b:	83 c4 1c             	add    esp,0x1c
c001a59e:	c3                   	ret    
c001a59f:	90                   	nop

c001a5a0 <FAT::write(void*, unsigned long, void*, int*)>:
c001a5a0:	83 ec 1c             	sub    esp,0x1c
c001a5a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a5a8:	74 07                	je     c001a5b1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a5aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a5af:	75 07                	jne    c001a5b8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a5b1:	b8 04 00 00 00       	mov    eax,0x4
c001a5b6:	eb 3d                	jmp    c001a5f5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a5b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5bc:	50                   	push   eax
c001a5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5c9:	e8 4b ae fe ff       	call   c0005419 <f_write>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a5d9:	89 c2                	mov    edx,eax
c001a5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5df:	89 10                	mov    DWORD PTR [eax],edx
c001a5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a5e5:	85 c0                	test   eax,eax
c001a5e7:	75 07                	jne    c001a5f0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a5e9:	b8 00 00 00 00       	mov    eax,0x0
c001a5ee:	eb 05                	jmp    c001a5f5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a5f0:	b8 01 00 00 00       	mov    eax,0x1
c001a5f5:	83 c4 1c             	add    esp,0x1c
c001a5f8:	c3                   	ret    
c001a5f9:	90                   	nop

c001a5fa <FAT::close(void*)>:
c001a5fa:	83 ec 1c             	sub    esp,0x1c
c001a5fd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a602:	75 07                	jne    c001a60b <FAT::close(void*)+0x11>
c001a604:	b8 04 00 00 00       	mov    eax,0x4
c001a609:	eb 36                	jmp    c001a641 <FAT::close(void*)+0x47>
c001a60b:	83 ec 0c             	sub    esp,0xc
c001a60e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a612:	e8 98 b2 fe ff       	call   c00058af <f_close>
c001a617:	83 c4 10             	add    esp,0x10
c001a61a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a61e:	83 ec 0c             	sub    esp,0xc
c001a621:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a625:	e8 d1 19 ff ff       	call   c000bffb <free>
c001a62a:	83 c4 10             	add    esp,0x10
c001a62d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a631:	85 c0                	test   eax,eax
c001a633:	75 07                	jne    c001a63c <FAT::close(void*)+0x42>
c001a635:	b8 00 00 00 00       	mov    eax,0x0
c001a63a:	eb 05                	jmp    c001a641 <FAT::close(void*)+0x47>
c001a63c:	b8 01 00 00 00       	mov    eax,0x1
c001a641:	83 c4 1c             	add    esp,0x1c
c001a644:	c3                   	ret    
c001a645:	90                   	nop

c001a646 <FAT::closeDir(void*)>:
c001a646:	83 ec 1c             	sub    esp,0x1c
c001a649:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a64e:	75 07                	jne    c001a657 <FAT::closeDir(void*)+0x11>
c001a650:	b8 04 00 00 00       	mov    eax,0x4
c001a655:	eb 36                	jmp    c001a68d <FAT::closeDir(void*)+0x47>
c001a657:	83 ec 0c             	sub    esp,0xc
c001a65a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a65e:	e8 e2 b7 fe ff       	call   c0005e45 <f_closedir>
c001a663:	83 c4 10             	add    esp,0x10
c001a666:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a671:	e8 85 19 ff ff       	call   c000bffb <free>
c001a676:	83 c4 10             	add    esp,0x10
c001a679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a67d:	85 c0                	test   eax,eax
c001a67f:	75 07                	jne    c001a688 <FAT::closeDir(void*)+0x42>
c001a681:	b8 00 00 00 00       	mov    eax,0x0
c001a686:	eb 05                	jmp    c001a68d <FAT::closeDir(void*)+0x47>
c001a688:	b8 01 00 00 00       	mov    eax,0x1
c001a68d:	83 c4 1c             	add    esp,0x1c
c001a690:	c3                   	ret    
c001a691:	90                   	nop

c001a692 <FAT::seek(void*, unsigned long long)>:
c001a692:	83 ec 2c             	sub    esp,0x2c
c001a695:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a699:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a69d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a6a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6a5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a6aa:	75 07                	jne    c001a6b3 <FAT::seek(void*, unsigned long long)+0x21>
c001a6ac:	b8 04 00 00 00       	mov    eax,0x4
c001a6b1:	eb 2f                	jmp    c001a6e2 <FAT::seek(void*, unsigned long long)+0x50>
c001a6b3:	83 ec 04             	sub    esp,0x4
c001a6b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a6ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a6be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a6c2:	e8 17 b2 fe ff       	call   c00058de <f_lseek>
c001a6c7:	83 c4 10             	add    esp,0x10
c001a6ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a6ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a6d2:	85 c0                	test   eax,eax
c001a6d4:	75 07                	jne    c001a6dd <FAT::seek(void*, unsigned long long)+0x4b>
c001a6d6:	b8 00 00 00 00       	mov    eax,0x0
c001a6db:	eb 05                	jmp    c001a6e2 <FAT::seek(void*, unsigned long long)+0x50>
c001a6dd:	b8 01 00 00 00       	mov    eax,0x1
c001a6e2:	83 c4 2c             	add    esp,0x2c
c001a6e5:	c3                   	ret    

c001a6e6 <fatWrapperReadDisk>:
c001a6e6:	83 ec 1c             	sub    esp,0x1c
c001a6e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a6f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a700:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a704:	25 ff 00 00 00       	and    eax,0xff
c001a709:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001a710:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a714:	83 ec 0c             	sub    esp,0xc
c001a717:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a71b:	52                   	push   edx
c001a71c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a720:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a724:	50                   	push   eax
c001a725:	e8 8a 80 ff ff       	call   c00127b4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a72a:	83 c4 20             	add    esp,0x20
c001a72d:	83 c4 1c             	add    esp,0x1c
c001a730:	c3                   	ret    

c001a731 <fatWrapperWriteDisk>:
c001a731:	83 ec 1c             	sub    esp,0x1c
c001a734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a738:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a73c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a740:	89 04 24             	mov    DWORD PTR [esp],eax
c001a743:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a747:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a74b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a74f:	25 ff 00 00 00       	and    eax,0xff
c001a754:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001a75b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a75f:	83 ec 0c             	sub    esp,0xc
c001a762:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a766:	52                   	push   edx
c001a767:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a76b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a76f:	50                   	push   eax
c001a770:	e8 ab 80 ff ff       	call   c0012820 <LogicalDisk::write(unsigned long long, int, void*)>
c001a775:	83 c4 20             	add    esp,0x20
c001a778:	83 c4 1c             	add    esp,0x1c
c001a77b:	c3                   	ret    

c001a77c <fatWrapperIoctl>:
c001a77c:	53                   	push   ebx
c001a77d:	83 ec 28             	sub    esp,0x28
c001a780:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a788:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a78c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a790:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a795:	75 35                	jne    c001a7cc <fatWrapperIoctl+0x50>
c001a797:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a79b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a79f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7a3:	25 ff 00 00 00       	and    eax,0xff
c001a7a8:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001a7af:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a7bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7bf:	66 89 02             	mov    WORD PTR [edx],ax
c001a7c2:	b8 00 00 00 00       	mov    eax,0x0
c001a7c7:	e9 bb 00 00 00       	jmp    c001a887 <fatWrapperIoctl+0x10b>
c001a7cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a7d1:	75 73                	jne    c001a846 <fatWrapperIoctl+0xca>
c001a7d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7db:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7df:	25 ff 00 00 00       	and    eax,0xff
c001a7e4:	8b 04 85 c0 4b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb440]
c001a7eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7f1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a7f7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a7fd:	89 c8                	mov    eax,ecx
c001a7ff:	89 da                	mov    edx,ebx
c001a801:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a805:	c1 e0 0a             	shl    eax,0xa
c001a808:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a80c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a812:	8b 0c 8d c0 4b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb440]
c001a819:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a81f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a825:	89 cb                	mov    ebx,ecx
c001a827:	c1 fb 1f             	sar    ebx,0x1f
c001a82a:	53                   	push   ebx
c001a82b:	51                   	push   ecx
c001a82c:	52                   	push   edx
c001a82d:	50                   	push   eax
c001a82e:	e8 d9 4b 00 00       	call   c001f40c <__udivdi3>
c001a833:	83 c4 10             	add    esp,0x10
c001a836:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a83a:	89 01                	mov    DWORD PTR [ecx],eax
c001a83c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a83f:	b8 00 00 00 00       	mov    eax,0x0
c001a844:	eb 41                	jmp    c001a887 <fatWrapperIoctl+0x10b>
c001a846:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a84b:	75 07                	jne    c001a854 <fatWrapperIoctl+0xd8>
c001a84d:	b8 00 00 00 00       	mov    eax,0x0
c001a852:	eb 33                	jmp    c001a887 <fatWrapperIoctl+0x10b>
c001a854:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a859:	75 19                	jne    c001a874 <fatWrapperIoctl+0xf8>
c001a85b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a85f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a867:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a86d:	b8 00 00 00 00       	mov    eax,0x0
c001a872:	eb 13                	jmp    c001a887 <fatWrapperIoctl+0x10b>
c001a874:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a879:	75 07                	jne    c001a882 <fatWrapperIoctl+0x106>
c001a87b:	b8 00 00 00 00       	mov    eax,0x0
c001a880:	eb 05                	jmp    c001a887 <fatWrapperIoctl+0x10b>
c001a882:	b8 04 00 00 00       	mov    eax,0x4
c001a887:	83 c4 28             	add    esp,0x28
c001a88a:	5b                   	pop    ebx
c001a88b:	c3                   	ret    

c001a88c <FAT::FAT()>:
c001a88c:	83 ec 1c             	sub    esp,0x1c
c001a88f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a893:	83 ec 0c             	sub    esp,0xc
c001a896:	50                   	push   eax
c001a897:	e8 ca 4b ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001a89c:	83 c4 10             	add    esp,0x10
c001a89f:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c001a8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8a8:	89 10                	mov    DWORD PTR [eax],edx
c001a8aa:	c7 05 40 5a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025a40,0x0
c001a8b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8bc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a8c1:	7f 15                	jg     c001a8d8 <FAT::FAT()+0x4c>
c001a8c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8c7:	c7 04 85 60 5a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda5a0],0xffffffff
c001a8d2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8d6:	eb e4                	jmp    c001a8bc <FAT::FAT()+0x30>
c001a8d8:	90                   	nop
c001a8d9:	83 c4 1c             	add    esp,0x1c
c001a8dc:	c3                   	ret    
c001a8dd:	90                   	nop

c001a8de <FAT::fixFilepath(char*)>:
c001a8de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8e2:	8a 00                	mov    al,BYTE PTR [eax]
c001a8e4:	3c 40                	cmp    al,0x40
c001a8e6:	7e 2c                	jle    c001a914 <FAT::fixFilepath(char*)+0x36>
c001a8e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8ec:	8a 00                	mov    al,BYTE PTR [eax]
c001a8ee:	83 e8 41             	sub    eax,0x41
c001a8f1:	88 c2                	mov    dl,al
c001a8f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8f7:	88 10                	mov    BYTE PTR [eax],dl
c001a8f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8fd:	8a 00                	mov    al,BYTE PTR [eax]
c001a8ff:	0f be c0             	movsx  eax,al
c001a902:	8b 04 85 60 5a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda5a0]
c001a909:	83 c0 30             	add    eax,0x30
c001a90c:	88 c2                	mov    dl,al
c001a90e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a912:	88 10                	mov    BYTE PTR [eax],dl
c001a914:	90                   	nop
c001a915:	c3                   	ret    

c001a916 <FAT::open(char const*, void**, FileOpenMode)>:
c001a916:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a91c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a924:	74 0a                	je     c001a930 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a926:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a92e:	75 0a                	jne    c001a93a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a930:	b8 04 00 00 00       	mov    eax,0x4
c001a935:	e9 00 01 00 00       	jmp    c001aa3a <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a93a:	83 ec 08             	sub    esp,0x8
c001a93d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a944:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a948:	50                   	push   eax
c001a949:	e8 0b 5e fe ff       	call   c0000759 <strcpy>
c001a94e:	83 c4 10             	add    esp,0x10
c001a951:	83 ec 08             	sub    esp,0x8
c001a954:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a958:	50                   	push   eax
c001a959:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a960:	e8 79 ff ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a970:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a977:	83 e0 01             	and    eax,0x1
c001a97a:	74 08                	je     c001a984 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a97c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a984:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a98b:	83 e0 04             	and    eax,0x4
c001a98e:	74 10                	je     c001a9a0 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a990:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a998:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a9a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a9a7:	83 e0 02             	and    eax,0x2
c001a9aa:	74 08                	je     c001a9b4 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a9ac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a9b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a9bb:	83 e0 08             	and    eax,0x8
c001a9be:	74 08                	je     c001a9c8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a9c0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a9c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a9cf:	83 e0 10             	and    eax,0x10
c001a9d2:	74 08                	je     c001a9dc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a9d4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a9dc:	83 ec 0c             	sub    esp,0xc
c001a9df:	68 50 02 00 00       	push   0x250
c001a9e4:	e8 02 16 ff ff       	call   c000bfeb <malloc>
c001a9e9:	83 c4 10             	add    esp,0x10
c001a9ec:	89 c2                	mov    edx,eax
c001a9ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a9f5:	89 10                	mov    DWORD PTR [eax],edx
c001a9f7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a9fe:	31 d2                	xor    edx,edx
c001aa00:	88 c2                	mov    dl,al
c001aa02:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aa09:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa0b:	83 ec 04             	sub    esp,0x4
c001aa0e:	52                   	push   edx
c001aa0f:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aa13:	52                   	push   edx
c001aa14:	50                   	push   eax
c001aa15:	e8 43 a3 fe ff       	call   c0004d5d <f_open>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aa24:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001aa2c:	74 07                	je     c001aa35 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001aa2e:	b8 01 00 00 00       	mov    eax,0x1
c001aa33:	eb 05                	jmp    c001aa3a <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa35:	b8 00 00 00 00       	mov    eax,0x0
c001aa3a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa40:	c3                   	ret    
c001aa41:	90                   	nop

c001aa42 <FAT::openDir(char const*, void**)>:
c001aa42:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa48:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa50:	74 0a                	je     c001aa5c <FAT::openDir(char const*, void**)+0x1a>
c001aa52:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa5a:	75 07                	jne    c001aa63 <FAT::openDir(char const*, void**)+0x21>
c001aa5c:	b8 04 00 00 00       	mov    eax,0x4
c001aa61:	eb 7d                	jmp    c001aae0 <FAT::openDir(char const*, void**)+0x9e>
c001aa63:	83 ec 08             	sub    esp,0x8
c001aa66:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa71:	50                   	push   eax
c001aa72:	e8 e2 5c fe ff       	call   c0000759 <strcpy>
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	83 ec 08             	sub    esp,0x8
c001aa7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa81:	50                   	push   eax
c001aa82:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa89:	e8 50 fe ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001aa8e:	83 c4 10             	add    esp,0x10
c001aa91:	83 ec 0c             	sub    esp,0xc
c001aa94:	6a 4c                	push   0x4c
c001aa96:	e8 50 15 ff ff       	call   c000bfeb <malloc>
c001aa9b:	83 c4 10             	add    esp,0x10
c001aa9e:	89 c2                	mov    edx,eax
c001aaa0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aaa7:	89 10                	mov    DWORD PTR [eax],edx
c001aaa9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aab0:	8b 00                	mov    eax,DWORD PTR [eax]
c001aab2:	83 ec 08             	sub    esp,0x8
c001aab5:	8d 54 24 14          	lea    edx,[esp+0x14]
c001aab9:	52                   	push   edx
c001aaba:	50                   	push   eax
c001aabb:	e8 83 b2 fe ff       	call   c0005d43 <f_opendir>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aaca:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aad2:	74 07                	je     c001aadb <FAT::openDir(char const*, void**)+0x99>
c001aad4:	b8 01 00 00 00       	mov    eax,0x1
c001aad9:	eb 05                	jmp    c001aae0 <FAT::openDir(char const*, void**)+0x9e>
c001aadb:	b8 00 00 00 00       	mov    eax,0x0
c001aae0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aae6:	c3                   	ret    
c001aae7:	90                   	nop

c001aae8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001aae8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aaee:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001aaf6:	75 0a                	jne    c001ab02 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001aaf8:	b8 04 00 00 00       	mov    eax,0x4
c001aafd:	e9 cb 00 00 00       	jmp    c001abcd <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab02:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ab0a:	75 0a                	jne    c001ab16 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001ab0c:	b8 04 00 00 00       	mov    eax,0x4
c001ab11:	e9 b7 00 00 00       	jmp    c001abcd <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab16:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ab1e:	75 0a                	jne    c001ab2a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ab20:	b8 04 00 00 00       	mov    eax,0x4
c001ab25:	e9 a3 00 00 00       	jmp    c001abcd <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ab2a:	83 ec 08             	sub    esp,0x8
c001ab2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab34:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab3b:	50                   	push   eax
c001ab3c:	e8 18 5c fe ff       	call   c0000759 <strcpy>
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	83 ec 08             	sub    esp,0x8
c001ab47:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ab4e:	50                   	push   eax
c001ab4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab56:	e8 83 fd ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001ab5b:	83 c4 10             	add    esp,0x10
c001ab5e:	83 ec 08             	sub    esp,0x8
c001ab61:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ab65:	50                   	push   eax
c001ab66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ab6d:	50                   	push   eax
c001ab6e:	e8 8f b3 fe ff       	call   c0005f02 <f_stat>
c001ab73:	83 c4 10             	add    esp,0x10
c001ab76:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab7d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab84:	85 c0                	test   eax,eax
c001ab86:	74 07                	je     c001ab8f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ab88:	83 f8 04             	cmp    eax,0x4
c001ab8b:	74 34                	je     c001abc1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ab8d:	eb 39                	jmp    c001abc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ab8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab93:	25 ff 00 00 00       	and    eax,0xff
c001ab98:	83 e0 10             	and    eax,0x10
c001ab9b:	0f 95 c2             	setne  dl
c001ab9e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001aba5:	88 10                	mov    BYTE PTR [eax],dl
c001aba7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001abaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abae:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001abb5:	89 01                	mov    DWORD PTR [ecx],eax
c001abb7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001abba:	b8 00 00 00 00       	mov    eax,0x0
c001abbf:	eb 0c                	jmp    c001abcd <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abc1:	b8 02 00 00 00       	mov    eax,0x2
c001abc6:	eb 05                	jmp    c001abcd <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abc8:	b8 01 00 00 00       	mov    eax,0x1
c001abcd:	81 c4 2c 02 00 00    	add    esp,0x22c
c001abd3:	c3                   	ret    

c001abd4 <FAT::unlink(char const*)>:
c001abd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001abda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001abe2:	75 07                	jne    c001abeb <FAT::unlink(char const*)+0x17>
c001abe4:	b8 04 00 00 00       	mov    eax,0x4
c001abe9:	eb 5c                	jmp    c001ac47 <FAT::unlink(char const*)+0x73>
c001abeb:	83 ec 08             	sub    esp,0x8
c001abee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001abf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abf9:	50                   	push   eax
c001abfa:	e8 5a 5b fe ff       	call   c0000759 <strcpy>
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	83 ec 08             	sub    esp,0x8
c001ac05:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac09:	50                   	push   eax
c001ac0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ac11:	e8 c8 fc ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	83 ec 0c             	sub    esp,0xc
c001ac1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ac20:	50                   	push   eax
c001ac21:	e8 4b b6 fe ff       	call   c0006271 <f_unlink>
c001ac26:	83 c4 10             	add    esp,0x10
c001ac29:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ac30:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ac37:	85 c0                	test   eax,eax
c001ac39:	75 07                	jne    c001ac42 <FAT::unlink(char const*)+0x6e>
c001ac3b:	b8 00 00 00 00       	mov    eax,0x0
c001ac40:	eb 05                	jmp    c001ac47 <FAT::unlink(char const*)+0x73>
c001ac42:	b8 01 00 00 00       	mov    eax,0x1
c001ac47:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ac4d:	c3                   	ret    

c001ac4e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac4e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac54:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ac5b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ac62:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ac66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ac6a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ac72:	75 0a                	jne    c001ac7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ac74:	b8 04 00 00 00       	mov    eax,0x4
c001ac79:	e9 43 01 00 00       	jmp    c001adc1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ac7e:	83 ec 08             	sub    esp,0x8
c001ac81:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ac88:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac8c:	50                   	push   eax
c001ac8d:	e8 c7 5a fe ff       	call   c0000759 <strcpy>
c001ac92:	83 c4 10             	add    esp,0x10
c001ac95:	83 ec 08             	sub    esp,0x8
c001ac98:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ac9c:	50                   	push   eax
c001ac9d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001aca4:	e8 35 fc ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001acb4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001acbc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acc0:	25 ff 00 00 00       	and    eax,0xff
c001acc5:	83 e0 01             	and    eax,0x1
c001acc8:	74 08                	je     c001acd2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001acca:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001acd2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acd6:	25 ff 00 00 00       	and    eax,0xff
c001acdb:	83 e0 02             	and    eax,0x2
c001acde:	74 08                	je     c001ace8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001ace0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ace8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001acec:	25 ff 00 00 00       	and    eax,0xff
c001acf1:	83 e0 04             	and    eax,0x4
c001acf4:	74 08                	je     c001acfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001acf6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001acfe:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad02:	25 ff 00 00 00       	and    eax,0xff
c001ad07:	83 e0 08             	and    eax,0x8
c001ad0a:	74 08                	je     c001ad14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001ad0c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ad14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad18:	25 ff 00 00 00       	and    eax,0xff
c001ad1d:	83 e0 01             	and    eax,0x1
c001ad20:	74 08                	je     c001ad2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001ad22:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ad2a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad2e:	25 ff 00 00 00       	and    eax,0xff
c001ad33:	83 e0 02             	and    eax,0x2
c001ad36:	74 08                	je     c001ad40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ad38:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ad40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad44:	25 ff 00 00 00       	and    eax,0xff
c001ad49:	83 e0 04             	and    eax,0x4
c001ad4c:	74 08                	je     c001ad56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ad4e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ad56:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad5a:	25 ff 00 00 00       	and    eax,0xff
c001ad5f:	83 e0 08             	and    eax,0x8
c001ad62:	74 08                	je     c001ad6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ad64:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ad6c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad73:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ad7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ad81:	31 d2                	xor    edx,edx
c001ad83:	88 c2                	mov    dl,al
c001ad85:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ad8c:	25 ff 00 00 00       	and    eax,0xff
c001ad91:	83 ec 04             	sub    esp,0x4
c001ad94:	52                   	push   edx
c001ad95:	50                   	push   eax
c001ad96:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad9a:	50                   	push   eax
c001ad9b:	e8 71 bb fe ff       	call   c0006911 <f_chmod>
c001ada0:	83 c4 10             	add    esp,0x10
c001ada3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001adaa:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001adb1:	85 c0                	test   eax,eax
c001adb3:	75 07                	jne    c001adbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001adb5:	b8 00 00 00 00       	mov    eax,0x0
c001adba:	eb 05                	jmp    c001adc1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001adbc:	b8 01 00 00 00       	mov    eax,0x1
c001adc1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001adc7:	c3                   	ret    

c001adc8 <FAT::rename(char const*, char const*)>:
c001adc8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001adce:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001add6:	74 0a                	je     c001ade2 <FAT::rename(char const*, char const*)+0x1a>
c001add8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ade0:	75 0a                	jne    c001adec <FAT::rename(char const*, char const*)+0x24>
c001ade2:	b8 04 00 00 00       	mov    eax,0x4
c001ade7:	e9 98 00 00 00       	jmp    c001ae84 <FAT::rename(char const*, char const*)+0xbc>
c001adec:	83 ec 08             	sub    esp,0x8
c001adef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001adf6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001adfd:	50                   	push   eax
c001adfe:	e8 56 59 fe ff       	call   c0000759 <strcpy>
c001ae03:	83 c4 10             	add    esp,0x10
c001ae06:	83 ec 08             	sub    esp,0x8
c001ae09:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ae10:	50                   	push   eax
c001ae11:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae18:	e8 c1 fa ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001ae1d:	83 c4 10             	add    esp,0x10
c001ae20:	83 ec 08             	sub    esp,0x8
c001ae23:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ae2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae2e:	50                   	push   eax
c001ae2f:	e8 25 59 fe ff       	call   c0000759 <strcpy>
c001ae34:	83 c4 10             	add    esp,0x10
c001ae37:	83 ec 08             	sub    esp,0x8
c001ae3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae3e:	50                   	push   eax
c001ae3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ae46:	e8 93 fa ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	83 ec 08             	sub    esp,0x8
c001ae51:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ae55:	50                   	push   eax
c001ae56:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ae5d:	50                   	push   eax
c001ae5e:	e8 bb b7 fe ff       	call   c000661e <f_rename>
c001ae63:	83 c4 10             	add    esp,0x10
c001ae66:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ae6d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ae74:	85 c0                	test   eax,eax
c001ae76:	75 07                	jne    c001ae7f <FAT::rename(char const*, char const*)+0xb7>
c001ae78:	b8 00 00 00 00       	mov    eax,0x0
c001ae7d:	eb 05                	jmp    c001ae84 <FAT::rename(char const*, char const*)+0xbc>
c001ae7f:	b8 01 00 00 00       	mov    eax,0x1
c001ae84:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ae8a:	c3                   	ret    
c001ae8b:	90                   	nop

c001ae8c <FAT::mkdir(char const*)>:
c001ae8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ae92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ae9a:	75 07                	jne    c001aea3 <FAT::mkdir(char const*)+0x17>
c001ae9c:	b8 04 00 00 00       	mov    eax,0x4
c001aea1:	eb 5c                	jmp    c001aeff <FAT::mkdir(char const*)+0x73>
c001aea3:	83 ec 08             	sub    esp,0x8
c001aea6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aead:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aeb1:	50                   	push   eax
c001aeb2:	e8 a2 58 fe ff       	call   c0000759 <strcpy>
c001aeb7:	83 c4 10             	add    esp,0x10
c001aeba:	83 ec 08             	sub    esp,0x8
c001aebd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aec1:	50                   	push   eax
c001aec2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aec9:	e8 10 fa ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001aece:	83 c4 10             	add    esp,0x10
c001aed1:	83 ec 0c             	sub    esp,0xc
c001aed4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aed8:	50                   	push   eax
c001aed9:	e8 14 b5 fe ff       	call   c00063f2 <f_mkdir>
c001aede:	83 c4 10             	add    esp,0x10
c001aee1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aee8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aeef:	85 c0                	test   eax,eax
c001aef1:	75 07                	jne    c001aefa <FAT::mkdir(char const*)+0x6e>
c001aef3:	b8 00 00 00 00       	mov    eax,0x0
c001aef8:	eb 05                	jmp    c001aeff <FAT::mkdir(char const*)+0x73>
c001aefa:	b8 01 00 00 00       	mov    eax,0x1
c001aeff:	81 c4 1c 01 00 00    	add    esp,0x11c
c001af05:	c3                   	ret    

c001af06 <FAT::exists(char const*)>:
c001af06:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001af0c:	83 ec 08             	sub    esp,0x8
c001af0f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001af16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af1a:	50                   	push   eax
c001af1b:	e8 39 58 fe ff       	call   c0000759 <strcpy>
c001af20:	83 c4 10             	add    esp,0x10
c001af23:	83 ec 08             	sub    esp,0x8
c001af26:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af2a:	50                   	push   eax
c001af2b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001af32:	e8 a7 f9 ff ff       	call   c001a8de <FAT::fixFilepath(char*)>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	83 ec 08             	sub    esp,0x8
c001af3d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001af44:	50                   	push   eax
c001af45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af49:	50                   	push   eax
c001af4a:	e8 b3 af fe ff       	call   c0005f02 <f_stat>
c001af4f:	83 c4 10             	add    esp,0x10
c001af52:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001af59:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001af60:	85 c0                	test   eax,eax
c001af62:	75 04                	jne    c001af68 <FAT::exists(char const*)+0x62>
c001af64:	b0 01                	mov    al,0x1
c001af66:	eb 02                	jmp    c001af6a <FAT::exists(char const*)+0x64>
c001af68:	b0 00                	mov    al,0x0
c001af6a:	81 c4 2c 02 00 00    	add    esp,0x22c
c001af70:	c3                   	ret    
c001af71:	90                   	nop

c001af72 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001af72:	b8 08 00 00 00       	mov    eax,0x8
c001af77:	c3                   	ret    

c001af78 <ISO9660::seek(void*, unsigned long long)>:
c001af78:	53                   	push   ebx
c001af79:	b8 04 00 00 00       	mov    eax,0x4
c001af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af8a:	85 d2                	test   edx,edx
c001af8c:	74 17                	je     c001afa5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af8e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001af91:	89 c8                	mov    eax,ecx
c001af93:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001af96:	b8 01 00 00 00       	mov    eax,0x1
c001af9b:	73 08                	jae    c001afa5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001af9d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001afa0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001afa3:	31 c0                	xor    eax,eax
c001afa5:	5b                   	pop    ebx
c001afa6:	c3                   	ret    
c001afa7:	90                   	nop

c001afa8 <ISO9660::tell(void*, unsigned long long*)>:
c001afa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001afac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afb0:	85 d2                	test   edx,edx
c001afb2:	74 12                	je     c001afc6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001afb4:	85 c0                	test   eax,eax
c001afb6:	74 0e                	je     c001afc6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001afb8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afbb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001afbe:	89 10                	mov    DWORD PTR [eax],edx
c001afc0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001afc3:	31 c0                	xor    eax,eax
c001afc5:	c3                   	ret    
c001afc6:	b8 04 00 00 00       	mov    eax,0x4
c001afcb:	c3                   	ret    

c001afcc <ISO9660::getName()>:
c001afcc:	b8 a8 31 02 c0       	mov    eax,0xc00231a8
c001afd1:	c3                   	ret    

c001afd2 <ISO9660::stat(void*, unsigned long long*)>:
c001afd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001afd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afda:	85 d2                	test   edx,edx
c001afdc:	74 12                	je     c001aff0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001afde:	85 c0                	test   eax,eax
c001afe0:	74 0e                	je     c001aff0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001afe2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001afe5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001afe8:	89 10                	mov    DWORD PTR [eax],edx
c001afea:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001afed:	31 c0                	xor    eax,eax
c001afef:	c3                   	ret    
c001aff0:	b8 04 00 00 00       	mov    eax,0x4
c001aff5:	c3                   	ret    

c001aff6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001aff6:	b8 01 00 00 00       	mov    eax,0x1
c001affb:	c3                   	ret    

c001affc <ISO9660::unlink(char const*)>:
c001affc:	b8 01 00 00 00       	mov    eax,0x1
c001b001:	c3                   	ret    

c001b002 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b002:	b8 01 00 00 00       	mov    eax,0x1
c001b007:	c3                   	ret    

c001b008 <ISO9660::rename(char const*, char const*)>:
c001b008:	b8 01 00 00 00       	mov    eax,0x1
c001b00d:	c3                   	ret    

c001b00e <ISO9660::mkdir(char const*)>:
c001b00e:	b8 01 00 00 00       	mov    eax,0x1
c001b013:	c3                   	ret    

c001b014 <ISO9660::close(void*)>:
c001b014:	83 ec 0c             	sub    esp,0xc
c001b017:	b8 04 00 00 00       	mov    eax,0x4
c001b01c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b020:	85 d2                	test   edx,edx
c001b022:	74 0e                	je     c001b032 <ISO9660::close(void*)+0x1e>
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	52                   	push   edx
c001b028:	e8 ce 0f ff ff       	call   c000bffb <free>
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	31 c0                	xor    eax,eax
c001b032:	83 c4 0c             	add    esp,0xc
c001b035:	c3                   	ret    

c001b036 <ISO9660::closeDir(void*)>:
c001b036:	83 ec 0c             	sub    esp,0xc
c001b039:	b8 04 00 00 00       	mov    eax,0x4
c001b03e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b042:	85 d2                	test   edx,edx
c001b044:	74 0e                	je     c001b054 <ISO9660::closeDir(void*)+0x1e>
c001b046:	83 ec 0c             	sub    esp,0xc
c001b049:	52                   	push   edx
c001b04a:	e8 ac 0f ff ff       	call   c000bffb <free>
c001b04f:	83 c4 10             	add    esp,0x10
c001b052:	31 c0                	xor    eax,eax
c001b054:	83 c4 0c             	add    esp,0xc
c001b057:	c3                   	ret    

c001b058 <ISO9660::~ISO9660()>:
c001b058:	83 ec 0c             	sub    esp,0xc
c001b05b:	ba fc 31 02 c0       	mov    edx,0xc00231fc
c001b060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b064:	89 10                	mov    DWORD PTR [eax],edx
c001b066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06a:	83 ec 0c             	sub    esp,0xc
c001b06d:	50                   	push   eax
c001b06e:	e8 17 44 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c001b073:	83 c4 10             	add    esp,0x10
c001b076:	90                   	nop
c001b077:	83 c4 0c             	add    esp,0xc
c001b07a:	c3                   	ret    
c001b07b:	90                   	nop

c001b07c <ISO9660::~ISO9660()>:
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	83 ec 0c             	sub    esp,0xc
c001b082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b086:	e8 cd ff ff ff       	call   c001b058 <ISO9660::~ISO9660()>
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	83 ec 08             	sub    esp,0x8
c001b091:	6a 08                	push   0x8
c001b093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b097:	e8 97 3f ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001b09c:	83 c4 10             	add    esp,0x10
c001b09f:	83 c4 0c             	add    esp,0xc
c001b0a2:	c3                   	ret    

c001b0a3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b0a3:	55                   	push   ebp
c001b0a4:	31 c9                	xor    ecx,ecx
c001b0a6:	57                   	push   edi
c001b0a7:	56                   	push   esi
c001b0a8:	53                   	push   ebx
c001b0a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b0ad:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b0b1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b0b5:	89 eb                	mov    ebx,ebp
c001b0b7:	39 ce                	cmp    esi,ecx
c001b0b9:	7e 17                	jle    c001b0d2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b0bb:	31 d2                	xor    edx,edx
c001b0bd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b0c1:	7d 13                	jge    c001b0d6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b0c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b0c7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b0ca:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b0cd:	75 0d                	jne    c001b0dc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b0cf:	42                   	inc    edx
c001b0d0:	eb eb                	jmp    c001b0bd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b0d2:	31 c0                	xor    eax,eax
c001b0d4:	eb 0a                	jmp    c001b0e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b0d6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b0da:	eb 04                	jmp    c001b0e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b0dc:	41                   	inc    ecx
c001b0dd:	43                   	inc    ebx
c001b0de:	eb d7                	jmp    c001b0b7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b0e0:	5b                   	pop    ebx
c001b0e1:	5e                   	pop    esi
c001b0e2:	5f                   	pop    edi
c001b0e3:	5d                   	pop    ebp
c001b0e4:	c3                   	ret    

c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b0e5:	56                   	push   esi
c001b0e6:	53                   	push   ebx
c001b0e7:	52                   	push   edx
c001b0e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b0ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0f4:	39 0d 40 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b40,ecx
c001b0fa:	75 08                	jne    c001b104 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b0fc:	38 05 e8 3f 02 c0    	cmp    BYTE PTR ds:0xc0023fe8,al
c001b102:	74 2b                	je     c001b12f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	31 db                	xor    ebx,ebx
c001b109:	a2 e8 3f 02 c0       	mov    ds:0xc0023fe8,al
c001b10e:	89 0d 40 5b 02 c0    	mov    DWORD PTR ds:0xc0025b40,ecx
c001b114:	68 60 5b 02 c0       	push   0xc0025b60
c001b119:	6a 01                	push   0x1
c001b11b:	53                   	push   ebx
c001b11c:	0f be c0             	movsx  eax,al
c001b11f:	51                   	push   ecx
c001b120:	ff 34 85 bc 4a 02 c0 	push   DWORD PTR [eax*4-0x3ffdb544]
c001b127:	e8 88 76 ff ff       	call   c00127b4 <LogicalDisk::read(unsigned long long, int, void*)>
c001b12c:	83 c4 20             	add    esp,0x20
c001b12f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b137:	c7 44 24 14 60 5b 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025b60
c001b13f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b143:	58                   	pop    eax
c001b144:	5b                   	pop    ebx
c001b145:	5e                   	pop    esi
c001b146:	e9 39 55 fe ff       	jmp    c0000684 <memcpy>
c001b14b:	90                   	nop

c001b14c <ISO9660::tryMount(LogicalDisk*, int)>:
c001b14c:	81 ec 10 08 00 00    	sub    esp,0x810
c001b152:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b159:	83 c0 41             	add    eax,0x41
c001b15c:	0f be c0             	movsx  eax,al
c001b15f:	50                   	push   eax
c001b160:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b164:	50                   	push   eax
c001b165:	6a 10                	push   0x10
c001b167:	e8 79 ff ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b16c:	83 c4 10             	add    esp,0x10
c001b16f:	31 c0                	xor    eax,eax
c001b171:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b176:	75 1d                	jne    c001b195 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b178:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b17d:	75 16                	jne    c001b195 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b17f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b184:	75 0f                	jne    c001b195 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b186:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b18b:	75 08                	jne    c001b195 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b18d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b192:	0f 94 c0             	sete   al
c001b195:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b19b:	c3                   	ret    

c001b19c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b19c:	55                   	push   ebp
c001b19d:	57                   	push   edi
c001b19e:	56                   	push   esi
c001b19f:	53                   	push   ebx
c001b1a0:	81 ec 34 08 00 00    	sub    esp,0x834
c001b1a6:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b1ad:	55                   	push   ebp
c001b1ae:	68 c3 31 02 c0       	push   0xc00231c3
c001b1b3:	e8 a1 3f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001b1b8:	83 c4 10             	add    esp,0x10
c001b1bb:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b1c3:	0f 84 06 02 00 00    	je     c001b3cf <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b1c9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b1d1:	0f 84 f8 01 00 00    	je     c001b3cf <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b1d7:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b1de:	b8 01 00 00 00       	mov    eax,0x1
c001b1e3:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b1e7:	0f 85 e7 01 00 00    	jne    c001b3d4 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b1ed:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b1f0:	31 d2                	xor    edx,edx
c001b1f2:	89 e9                	mov    ecx,ebp
c001b1f4:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b1f7:	01 f1                	add    ecx,esi
c001b1f9:	89 d3                	mov    ebx,edx
c001b1fb:	11 fb                	adc    ebx,edi
c001b1fd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b201:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b205:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b20c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b20f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b212:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b216:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b21a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b21e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b222:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b226:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b22a:	72 19                	jb     c001b245 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b22c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b234:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b238:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b23b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b23f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b243:	eb 13                	jmp    c001b258 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b245:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b249:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b24d:	29 f0                	sub    eax,esi
c001b24f:	19 fa                	sbb    edx,edi
c001b251:	89 04 24             	mov    DWORD PTR [esp],eax
c001b254:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b258:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b25f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b262:	8b 00                	mov    eax,DWORD PTR [eax]
c001b264:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b268:	c1 e0 0b             	shl    eax,0xb
c001b26b:	53                   	push   ebx
c001b26c:	01 c6                	add    esi,eax
c001b26e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b275:	11 d7                	adc    edi,edx
c001b277:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b27b:	50                   	push   eax
c001b27c:	89 fa                	mov    edx,edi
c001b27e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b282:	50                   	push   eax
c001b283:	89 f0                	mov    eax,esi
c001b285:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b289:	50                   	push   eax
c001b28a:	e8 56 fe ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b28f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b296:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b29a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b2a4:	b8 00 08 00 00       	mov    eax,0x800
c001b2a9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b2af:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b2b3:	29 d0                	sub    eax,edx
c001b2b5:	39 c1                	cmp    ecx,eax
c001b2b7:	83 db 00             	sbb    ebx,0x0
c001b2ba:	7d 19                	jge    c001b2d5 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b2bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b2c1:	75 16                	jne    c001b2d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b2c3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b2ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2d0:	e9 f6 00 00 00       	jmp    c001b3cb <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b2d5:	89 c5                	mov    ebp,eax
c001b2d7:	eb 03                	jmp    c001b2dc <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b2d9:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b2dc:	51                   	push   ecx
c001b2dd:	55                   	push   ebp
c001b2de:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b2e2:	50                   	push   eax
c001b2e3:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b2ea:	e8 95 53 fe ff       	call   c0000684 <memcpy>
c001b2ef:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b2f6:	01 e8                	add    eax,ebp
c001b2f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b300:	89 e8                	mov    eax,ebp
c001b302:	99                   	cdq    
c001b303:	01 ee                	add    esi,ebp
c001b305:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b309:	11 d7                	adc    edi,edx
c001b30b:	29 e9                	sub    ecx,ebp
c001b30d:	19 d3                	sbb    ebx,edx
c001b30f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b313:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b317:	83 c4 10             	add    esp,0x10
c001b31a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b31f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b322:	b8 00 00 00 00       	mov    eax,0x0
c001b327:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b32b:	7d 3f                	jge    c001b36c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b32d:	52                   	push   edx
c001b32e:	89 fa                	mov    edx,edi
c001b330:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b337:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b33b:	50                   	push   eax
c001b33c:	89 f0                	mov    eax,esi
c001b33e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b342:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b346:	50                   	push   eax
c001b347:	e8 99 fd ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b34c:	81 c6 00 08 00 00    	add    esi,0x800
c001b352:	83 d7 00             	adc    edi,0x0
c001b355:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b35d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b365:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b36a:	eb ab                	jmp    c001b317 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b36c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b370:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b373:	74 34                	je     c001b3a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b375:	50                   	push   eax
c001b376:	89 fa                	mov    edx,edi
c001b378:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b37f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b383:	50                   	push   eax
c001b384:	89 f0                	mov    eax,esi
c001b386:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b38a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b38e:	55                   	push   ebp
c001b38f:	50                   	push   eax
c001b390:	e8 50 fd ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b395:	83 c4 0c             	add    esp,0xc
c001b398:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b39c:	55                   	push   ebp
c001b39d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3a1:	e8 de 52 fe ff       	call   c0000684 <memcpy>
c001b3a6:	83 c4 10             	add    esp,0x10
c001b3a9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b3b0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b3b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b3b8:	89 38                	mov    DWORD PTR [eax],edi
c001b3ba:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b3c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3c5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b3c8:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b3cb:	31 c0                	xor    eax,eax
c001b3cd:	eb 05                	jmp    c001b3d4 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b3cf:	b8 04 00 00 00       	mov    eax,0x4
c001b3d4:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b3da:	5b                   	pop    ebx
c001b3db:	5e                   	pop    esi
c001b3dc:	5f                   	pop    edi
c001b3dd:	5d                   	pop    ebp
c001b3de:	c3                   	ret    
c001b3df:	90                   	nop

c001b3e0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b3e0:	55                   	push   ebp
c001b3e1:	57                   	push   edi
c001b3e2:	56                   	push   esi
c001b3e3:	53                   	push   ebx
c001b3e4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b3ea:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b3f1:	85 f6                	test   esi,esi
c001b3f3:	0f 84 62 02 00 00    	je     c001b65b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b3f9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b401:	0f 84 54 02 00 00    	je     c001b65b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b407:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b40a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b40d:	75 0a                	jne    c001b419 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b40f:	b8 07 00 00 00       	mov    eax,0x7
c001b414:	e9 47 02 00 00       	jmp    c001b660 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b419:	50                   	push   eax
c001b41a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b41e:	50                   	push   eax
c001b41f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b426:	53                   	push   ebx
c001b427:	8b 06                	mov    eax,DWORD PTR [esi]
c001b429:	c1 e0 0b             	shl    eax,0xb
c001b42c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b42f:	c1 e8 0b             	shr    eax,0xb
c001b432:	50                   	push   eax
c001b433:	e8 ad fc ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b438:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	89 c1                	mov    ecx,eax
c001b440:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b443:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b449:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b44c:	84 db                	test   bl,bl
c001b44e:	0f 85 90 00 00 00    	jne    c001b4e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b454:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b45a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b460:	29 c7                	sub    edi,eax
c001b462:	89 fb                	mov    ebx,edi
c001b464:	c1 fb 1f             	sar    ebx,0x1f
c001b467:	01 f8                	add    eax,edi
c001b469:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b46d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b470:	11 da                	adc    edx,ebx
c001b472:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b475:	89 04 24             	mov    DWORD PTR [esp],eax
c001b478:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b47c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b47f:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b482:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b485:	89 d8                	mov    eax,ebx
c001b487:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b48b:	ba 00 00 00 00       	mov    edx,0x0
c001b490:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b494:	b8 00 00 00 00       	mov    eax,0x0
c001b499:	73 0b                	jae    c001b4a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b49b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b49e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b4a2:	29 f8                	sub    eax,edi
c001b4a4:	19 da                	sbb    edx,ebx
c001b4a6:	89 d3                	mov    ebx,edx
c001b4a8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b4ab:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b4ae:	09 c3                	or     ebx,eax
c001b4b0:	0f 84 59 ff ff ff    	je     c001b40f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b4b6:	55                   	push   ebp
c001b4b7:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4bb:	50                   	push   eax
c001b4bc:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4c3:	53                   	push   ebx
c001b4c4:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4c6:	c1 e0 0b             	shl    eax,0xb
c001b4c9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b4cd:	c1 e8 0b             	shr    eax,0xb
c001b4d0:	50                   	push   eax
c001b4d1:	e8 0f fc ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b4d6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b4d9:	83 c4 10             	add    esp,0x10
c001b4dc:	25 ff 07 00 00       	and    eax,0x7ff
c001b4e1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b4e4:	57                   	push   edi
c001b4e5:	6a 28                	push   0x28
c001b4e7:	6a 00                	push   0x0
c001b4e9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b4ed:	50                   	push   eax
c001b4ee:	e8 c7 51 fe ff       	call   c00006ba <memset>
c001b4f3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b4f6:	31 d2                	xor    edx,edx
c001b4f8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b4fe:	89 f8                	mov    eax,edi
c001b500:	83 c0 21             	add    eax,0x21
c001b503:	83 d2 00             	adc    edx,0x0
c001b506:	89 c7                	mov    edi,eax
c001b508:	89 d5                	mov    ebp,edx
c001b50a:	83 c4 10             	add    esp,0x10
c001b50d:	31 c9                	xor    ecx,ecx
c001b50f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b516:	83 f9 28             	cmp    ecx,0x28
c001b519:	0f 94 c2             	sete   dl
c001b51c:	88 04 24             	mov    BYTE PTR [esp],al
c001b51f:	88 d0                	mov    al,dl
c001b521:	ba ff 07 00 00       	mov    edx,0x7ff
c001b526:	39 fa                	cmp    edx,edi
c001b528:	ba 00 00 00 00       	mov    edx,0x0
c001b52d:	19 ea                	sbb    edx,ebp
c001b52f:	0f 92 c2             	setb   dl
c001b532:	09 c2                	or     edx,eax
c001b534:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b538:	0f 94 c0             	sete   al
c001b53b:	08 d0                	or     al,dl
c001b53d:	75 16                	jne    c001b555 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b53f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b543:	74 10                	je     c001b555 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b545:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b548:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b54c:	41                   	inc    ecx
c001b54d:	83 c7 01             	add    edi,0x1
c001b550:	83 d5 00             	adc    ebp,0x0
c001b553:	eb ba                	jmp    c001b50f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b555:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b55c:	83 ec 0c             	sub    esp,0xc
c001b55f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b563:	57                   	push   edi
c001b564:	e8 6e 51 fe ff       	call   c00006d7 <strlen>
c001b569:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b56d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b570:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b577:	25 ff 07 00 00       	and    eax,0x7ff
c001b57c:	01 c8                	add    eax,ecx
c001b57e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b586:	5a                   	pop    edx
c001b587:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b58e:	59                   	pop    ecx
c001b58f:	0f 95 c0             	setne  al
c001b592:	0f b6 c0             	movzx  eax,al
c001b595:	40                   	inc    eax
c001b596:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b59a:	57                   	push   edi
c001b59b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b59f:	50                   	push   eax
c001b5a0:	e8 b4 51 fe ff       	call   c0000759 <strcpy>
c001b5a5:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b5a9:	83 c4 10             	add    esp,0x10
c001b5ac:	84 c0                	test   al,al
c001b5ae:	75 21                	jne    c001b5d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b5b0:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b5b8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b5c0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b5c8:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b5cf:	eb 28                	jmp    c001b5f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b5d1:	fe c8                	dec    al
c001b5d3:	75 24                	jne    c001b5f9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b5d5:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b5dd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b5e5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b5ed:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b5f4:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b5f9:	50                   	push   eax
c001b5fa:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b601:	0f b6 fb             	movzx  edi,bl
c001b604:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b608:	31 db                	xor    ebx,ebx
c001b60a:	50                   	push   eax
c001b60b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b612:	e8 6d 50 fe ff       	call   c0000684 <memcpy>
c001b617:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b61e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b624:	89 f9                	mov    ecx,edi
c001b626:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b629:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b62c:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b62f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b632:	83 c4 10             	add    esp,0x10
c001b635:	39 c7                	cmp    edi,eax
c001b637:	89 df                	mov    edi,ebx
c001b639:	19 d7                	sbb    edi,edx
c001b63b:	72 10                	jb     c001b64d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b63d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b644:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b64b:	eb 0a                	jmp    c001b657 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b64d:	29 c8                	sub    eax,ecx
c001b64f:	19 da                	sbb    edx,ebx
c001b651:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b654:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b657:	31 c0                	xor    eax,eax
c001b659:	eb 05                	jmp    c001b660 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b65b:	b8 04 00 00 00       	mov    eax,0x4
c001b660:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b666:	5b                   	pop    ebx
c001b667:	5e                   	pop    esi
c001b668:	5f                   	pop    edi
c001b669:	5d                   	pop    ebp
c001b66a:	c3                   	ret    

c001b66b <readRoot(unsigned int*, unsigned int*, char)>:
c001b66b:	81 ec 40 08 00 00    	sub    esp,0x840
c001b671:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b679:	50                   	push   eax
c001b67a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b67e:	50                   	push   eax
c001b67f:	6a 10                	push   0x10
c001b681:	e8 5f fa ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b686:	83 c4 0c             	add    esp,0xc
c001b689:	6a 22                	push   0x22
c001b68b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b692:	50                   	push   eax
c001b693:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b697:	50                   	push   eax
c001b698:	e8 e7 4f fe ff       	call   c0000684 <memcpy>
c001b69d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b6a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b6a8:	89 10                	mov    DWORD PTR [eax],edx
c001b6aa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b6b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b6b5:	89 10                	mov    DWORD PTR [eax],edx
c001b6b7:	b0 01                	mov    al,0x1
c001b6b9:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b6bf:	c3                   	ret    

c001b6c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b6c0:	55                   	push   ebp
c001b6c1:	57                   	push   edi
c001b6c2:	56                   	push   esi
c001b6c3:	53                   	push   ebx
c001b6c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b6ca:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b6d1:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b6d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6dc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b6e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b6e4:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b6e8:	75 03                	jne    c001b6ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6ea:	83 c3 02             	add    ebx,0x2
c001b6ed:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b6f0:	75 03                	jne    c001b6f5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b6f2:	43                   	inc    ebx
c001b6f3:	eb f8                	jmp    c001b6ed <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b6f5:	51                   	push   ecx
c001b6f6:	68 00 01 00 00       	push   0x100
c001b6fb:	6a 00                	push   0x0
c001b6fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b701:	50                   	push   eax
c001b702:	e8 b3 4f fe ff       	call   c00006ba <memset>
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	31 d2                	xor    edx,edx
c001b70c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b70f:	84 c0                	test   al,al
c001b711:	74 21                	je     c001b734 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b713:	3c 2f                	cmp    al,0x2f
c001b715:	75 0b                	jne    c001b722 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b717:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b71b:	bd 01 00 00 00       	mov    ebp,0x1
c001b720:	eb 14                	jmp    c001b736 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b722:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b725:	80 f9 19             	cmp    cl,0x19
c001b728:	77 03                	ja     c001b72d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b72a:	83 e8 20             	sub    eax,0x20
c001b72d:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b731:	42                   	inc    edx
c001b732:	eb d8                	jmp    c001b70c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b734:	31 ed                	xor    ebp,ebp
c001b736:	83 ec 0c             	sub    esp,0xc
c001b739:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b740:	e8 a6 08 ff ff       	call   c000bfeb <malloc>
c001b745:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b74c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b752:	89 c6                	mov    esi,eax
c001b754:	c1 ef 0b             	shr    edi,0xb
c001b757:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b75e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b762:	83 c4 10             	add    esp,0x10
c001b765:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b76a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b76e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b775:	74 28                	je     c001b79f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b777:	52                   	push   edx
c001b778:	57                   	push   edi
c001b779:	50                   	push   eax
c001b77a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b77e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b785:	e8 5b f9 ff ff       	call   c001b0e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b78a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b78e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b795:	05 00 08 00 00       	add    eax,0x800
c001b79a:	83 c4 10             	add    esp,0x10
c001b79d:	eb cb                	jmp    c001b76a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b79f:	83 ec 0c             	sub    esp,0xc
c001b7a2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b7a6:	57                   	push   edi
c001b7a7:	e8 2b 4f fe ff       	call   c00006d7 <strlen>
c001b7ac:	50                   	push   eax
c001b7ad:	57                   	push   edi
c001b7ae:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b7b5:	56                   	push   esi
c001b7b6:	e8 e8 f8 ff ff       	call   c001b0a3 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b7bb:	83 c4 20             	add    esp,0x20
c001b7be:	85 c0                	test   eax,eax
c001b7c0:	75 13                	jne    c001b7d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b7c2:	83 ec 0c             	sub    esp,0xc
c001b7c5:	56                   	push   esi
c001b7c6:	e8 30 08 ff ff       	call   c000bffb <free>
c001b7cb:	83 c4 10             	add    esp,0x10
c001b7ce:	31 c0                	xor    eax,eax
c001b7d0:	e9 b3 00 00 00       	jmp    c001b888 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b7d5:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b7d9:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b7dd:	c1 e7 08             	shl    edi,0x8
c001b7e0:	c1 e2 10             	shl    edx,0x10
c001b7e3:	09 d7                	or     edi,edx
c001b7e5:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b7e9:	09 d7                	or     edi,edx
c001b7eb:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b7ef:	c1 e2 18             	shl    edx,0x18
c001b7f2:	09 d7                	or     edi,edx
c001b7f4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b7f8:	89 d1                	mov    ecx,edx
c001b7fa:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b7fe:	c1 e1 08             	shl    ecx,0x8
c001b801:	c1 e2 10             	shl    edx,0x10
c001b804:	09 ca                	or     edx,ecx
c001b806:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b80a:	09 ca                	or     edx,ecx
c001b80c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b810:	c1 e1 18             	shl    ecx,0x18
c001b813:	09 ca                	or     edx,ecx
c001b815:	89 e9                	mov    ecx,ebp
c001b817:	84 c9                	test   cl,cl
c001b819:	74 3c                	je     c001b857 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b81b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b81f:	83 ec 0c             	sub    esp,0xc
c001b822:	56                   	push   esi
c001b823:	e8 d3 07 ff ff       	call   c000bffb <free>
c001b828:	83 c4 0c             	add    esp,0xc
c001b82b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b832:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b837:	50                   	push   eax
c001b838:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b83f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b846:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b84a:	52                   	push   edx
c001b84b:	57                   	push   edi
c001b84c:	53                   	push   ebx
c001b84d:	e8 6e fe ff ff       	call   c001b6c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b852:	83 c4 20             	add    esp,0x20
c001b855:	eb 31                	jmp    c001b888 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b857:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b85e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b861:	d0 e8                	shr    al,1
c001b863:	83 ec 0c             	sub    esp,0xc
c001b866:	89 3b                	mov    DWORD PTR [ebx],edi
c001b868:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b86f:	83 e0 01             	and    eax,0x1
c001b872:	89 13                	mov    DWORD PTR [ebx],edx
c001b874:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b87b:	89 03                	mov    DWORD PTR [ebx],eax
c001b87d:	56                   	push   esi
c001b87e:	e8 78 07 ff ff       	call   c000bffb <free>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	b0 01                	mov    al,0x1
c001b888:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b88e:	5b                   	pop    ebx
c001b88f:	5e                   	pop    esi
c001b890:	5f                   	pop    edi
c001b891:	5d                   	pop    ebp
c001b892:	c3                   	ret    

c001b893 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b893:	55                   	push   ebp
c001b894:	57                   	push   edi
c001b895:	56                   	push   esi
c001b896:	53                   	push   ebx
c001b897:	83 ec 20             	sub    esp,0x20
c001b89a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b89e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b8a2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b8a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b8ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b8b3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b8bb:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b8c1:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b8c7:	57                   	push   edi
c001b8c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8cc:	50                   	push   eax
c001b8cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8d1:	50                   	push   eax
c001b8d2:	e8 94 fd ff ff       	call   c001b66b <readRoot(unsigned int*, unsigned int*, char)>
c001b8d7:	5a                   	pop    edx
c001b8d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b8dc:	e8 f6 4d fe ff       	call   c00006d7 <strlen>
c001b8e1:	83 c4 10             	add    esp,0x10
c001b8e4:	83 f8 03             	cmp    eax,0x3
c001b8e7:	77 17                	ja     c001b900 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b8e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8ed:	89 03                	mov    DWORD PTR [ebx],eax
c001b8ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8f3:	89 06                	mov    DWORD PTR [esi],eax
c001b8f5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b8fc:	b0 01                	mov    al,0x1
c001b8fe:	eb 19                	jmp    c001b919 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b900:	50                   	push   eax
c001b901:	55                   	push   ebp
c001b902:	57                   	push   edi
c001b903:	56                   	push   esi
c001b904:	53                   	push   ebx
c001b905:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b909:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b90d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b911:	e8 aa fd ff ff       	call   c001b6c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b916:	83 c4 20             	add    esp,0x20
c001b919:	83 c4 1c             	add    esp,0x1c
c001b91c:	5b                   	pop    ebx
c001b91d:	5e                   	pop    esi
c001b91e:	5f                   	pop    edi
c001b91f:	5d                   	pop    ebp
c001b920:	c3                   	ret    
c001b921:	90                   	nop

c001b922 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b922:	57                   	push   edi
c001b923:	56                   	push   esi
c001b924:	53                   	push   ebx
c001b925:	83 ec 10             	sub    esp,0x10
c001b928:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b92c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b930:	85 f6                	test   esi,esi
c001b932:	74 7b                	je     c001b9af <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b934:	85 ff                	test   edi,edi
c001b936:	74 77                	je     c001b9af <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b938:	83 ec 0c             	sub    esp,0xc
c001b93b:	6a 1c                	push   0x1c
c001b93d:	e8 a9 06 ff ff       	call   c000bfeb <malloc>
c001b942:	89 07                	mov    DWORD PTR [edi],eax
c001b944:	89 c3                	mov    ebx,eax
c001b946:	58                   	pop    eax
c001b947:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b94b:	50                   	push   eax
c001b94c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b94f:	50                   	push   eax
c001b950:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b954:	50                   	push   eax
c001b955:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b959:	50                   	push   eax
c001b95a:	56                   	push   esi
c001b95b:	e8 33 ff ff ff       	call   c001b893 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b960:	83 c4 20             	add    esp,0x20
c001b963:	84 c0                	test   al,al
c001b965:	74 07                	je     c001b96e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b967:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b96c:	74 0b                	je     c001b979 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b96e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b972:	b8 01 00 00 00       	mov    eax,0x1
c001b977:	eb 3b                	jmp    c001b9b4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b97d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b981:	89 03                	mov    DWORD PTR [ebx],eax
c001b983:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b98e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b995:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b99c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b99f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b9a6:	8a 06                	mov    al,BYTE PTR [esi]
c001b9a8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b9ab:	31 c0                	xor    eax,eax
c001b9ad:	eb 05                	jmp    c001b9b4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b9af:	b8 04 00 00 00       	mov    eax,0x4
c001b9b4:	83 c4 10             	add    esp,0x10
c001b9b7:	5b                   	pop    ebx
c001b9b8:	5e                   	pop    esi
c001b9b9:	5f                   	pop    edi
c001b9ba:	c3                   	ret    
c001b9bb:	90                   	nop

c001b9bc <ISO9660::exists(char const*)>:
c001b9bc:	83 ec 28             	sub    esp,0x28
c001b9bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b9c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b9c7:	52                   	push   edx
c001b9c8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b9cb:	52                   	push   edx
c001b9cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b9d0:	52                   	push   edx
c001b9d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b9d5:	52                   	push   edx
c001b9d6:	50                   	push   eax
c001b9d7:	e8 b7 fe ff ff       	call   c001b893 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b9dc:	83 c4 3c             	add    esp,0x3c
c001b9df:	c3                   	ret    

c001b9e0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b9e0:	56                   	push   esi
c001b9e1:	53                   	push   ebx
c001b9e2:	83 ec 14             	sub    esp,0x14
c001b9e5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b9e9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b9ed:	85 db                	test   ebx,ebx
c001b9ef:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9f3:	0f 94 c2             	sete   dl
c001b9f6:	85 f6                	test   esi,esi
c001b9f8:	0f 94 c0             	sete   al
c001b9fb:	08 c2                	or     dl,al
c001b9fd:	75 68                	jne    c001ba67 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b9ff:	85 c9                	test   ecx,ecx
c001ba01:	74 64                	je     c001ba67 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ba03:	83 ec 0c             	sub    esp,0xc
c001ba06:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba09:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ba0f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba16:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba1a:	50                   	push   eax
c001ba1b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ba1e:	50                   	push   eax
c001ba1f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba23:	50                   	push   eax
c001ba24:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba28:	50                   	push   eax
c001ba29:	51                   	push   ecx
c001ba2a:	e8 64 fe ff ff       	call   c001b893 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba2f:	83 c4 20             	add    esp,0x20
c001ba32:	ba 01 00 00 00       	mov    edx,0x1
c001ba37:	84 c0                	test   al,al
c001ba39:	74 31                	je     c001ba6c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba3f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba46:	89 03                	mov    DWORD PTR [ebx],eax
c001ba48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba4c:	85 c0                	test   eax,eax
c001ba4e:	ba 00 00 00 00       	mov    edx,0x0
c001ba53:	0f 95 06             	setne  BYTE PTR [esi]
c001ba56:	74 14                	je     c001ba6c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba58:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ba5e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba65:	eb 05                	jmp    c001ba6c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ba67:	ba 04 00 00 00       	mov    edx,0x4
c001ba6c:	83 c4 14             	add    esp,0x14
c001ba6f:	89 d0                	mov    eax,edx
c001ba71:	5b                   	pop    ebx
c001ba72:	5e                   	pop    esi
c001ba73:	c3                   	ret    

c001ba74 <ISO9660::openDir(char const*, void**)>:
c001ba74:	57                   	push   edi
c001ba75:	56                   	push   esi
c001ba76:	53                   	push   ebx
c001ba77:	83 ec 10             	sub    esp,0x10
c001ba7a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba7e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba82:	85 f6                	test   esi,esi
c001ba84:	0f 84 95 00 00 00    	je     c001bb1f <ISO9660::openDir(char const*, void**)+0xab>
c001ba8a:	85 ff                	test   edi,edi
c001ba8c:	0f 84 8d 00 00 00    	je     c001bb1f <ISO9660::openDir(char const*, void**)+0xab>
c001ba92:	83 ec 0c             	sub    esp,0xc
c001ba95:	6a 1c                	push   0x1c
c001ba97:	e8 4f 05 ff ff       	call   c000bfeb <malloc>
c001ba9c:	89 07                	mov    DWORD PTR [edi],eax
c001ba9e:	89 c3                	mov    ebx,eax
c001baa0:	59                   	pop    ecx
c001baa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baa5:	50                   	push   eax
c001baa6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001baa9:	50                   	push   eax
c001baaa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baae:	50                   	push   eax
c001baaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bab3:	50                   	push   eax
c001bab4:	56                   	push   esi
c001bab5:	e8 d9 fd ff ff       	call   c001b893 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001baba:	83 c4 20             	add    esp,0x20
c001babd:	84 c0                	test   al,al
c001babf:	74 07                	je     c001bac8 <ISO9660::openDir(char const*, void**)+0x54>
c001bac1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bac6:	75 21                	jne    c001bae9 <ISO9660::openDir(char const*, void**)+0x75>
c001bac8:	52                   	push   edx
c001bac9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bacd:	0f b6 c0             	movzx  eax,al
c001bad0:	50                   	push   eax
c001bad1:	68 d6 31 02 c0       	push   0xc00231d6
c001bad6:	e8 7e 36 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001badb:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001badf:	83 c4 10             	add    esp,0x10
c001bae2:	b8 01 00 00 00       	mov    eax,0x1
c001bae7:	eb 3b                	jmp    c001bb24 <ISO9660::openDir(char const*, void**)+0xb0>
c001bae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baed:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001baf1:	89 03                	mov    DWORD PTR [ebx],eax
c001baf3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bafa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bafe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bb05:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bb0f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bb16:	8a 06                	mov    al,BYTE PTR [esi]
c001bb18:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bb1b:	31 c0                	xor    eax,eax
c001bb1d:	eb 05                	jmp    c001bb24 <ISO9660::openDir(char const*, void**)+0xb0>
c001bb1f:	b8 04 00 00 00       	mov    eax,0x4
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	5b                   	pop    ebx
c001bb28:	5e                   	pop    esi
c001bb29:	5f                   	pop    edi
c001bb2a:	c3                   	ret    
c001bb2b:	90                   	nop

c001bb2c <ISO9660::ISO9660()>:
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb33:	83 ec 0c             	sub    esp,0xc
c001bb36:	50                   	push   eax
c001bb37:	e8 2a 39 ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001bb3c:	83 c4 10             	add    esp,0x10
c001bb3f:	ba fc 31 02 c0       	mov    edx,0xc00231fc
c001bb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb48:	89 10                	mov    DWORD PTR [eax],edx
c001bb4a:	90                   	nop
c001bb4b:	83 c4 0c             	add    esp,0xc
c001bb4e:	c3                   	ret    
c001bb4f:	90                   	nop

c001bb50 <SoundChannel::~SoundChannel()>:
c001bb50:	83 ec 0c             	sub    esp,0xc
c001bb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb57:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bb5a:	83 ec 0c             	sub    esp,0xc
c001bb5d:	50                   	push   eax
c001bb5e:	e8 98 04 ff ff       	call   c000bffb <free>
c001bb63:	83 c4 10             	add    esp,0x10
c001bb66:	90                   	nop
c001bb67:	83 c4 0c             	add    esp,0xc
c001bb6a:	c3                   	ret    
c001bb6b:	90                   	nop

c001bb6c <SoundChannel::setSpeed(float)>:
c001bb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb70:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bb74:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bb77:	c3                   	ret    

c001bb78 <SoundChannel::getSpeed()>:
c001bb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb7c:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bb7f:	c3                   	ret    

c001bb80 <SoundChannel::setVolume(int)>:
c001bb80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb84:	83 f8 64             	cmp    eax,0x64
c001bb87:	7e 05                	jle    c001bb8e <SoundChannel::setVolume(int)+0xe>
c001bb89:	b8 64 00 00 00       	mov    eax,0x64
c001bb8e:	85 c0                	test   eax,eax
c001bb90:	79 02                	jns    c001bb94 <SoundChannel::setVolume(int)+0x14>
c001bb92:	31 c0                	xor    eax,eax
c001bb94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb98:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bb9b:	c3                   	ret    

c001bb9c <SoundChannel::getVolume()>:
c001bb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bba0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bba3:	c3                   	ret    

c001bba4 <SoundChannel::pause()>:
c001bba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bba8:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bbac:	c3                   	ret    
c001bbad:	90                   	nop

c001bbae <SoundChannel::SoundChannel(int, int, int, int)>:
c001bbae:	83 ec 1c             	sub    esp,0x1c
c001bbb1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bbb5:	e8 ea ff ff ff       	call   c001bba4 <SoundChannel::pause()>
c001bbba:	83 c4 04             	add    esp,0x4
c001bbbd:	6a 50                	push   0x50
c001bbbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bbc3:	e8 b8 ff ff ff       	call   c001bb80 <SoundChannel::setVolume(int)>
c001bbc8:	83 c4 08             	add    esp,0x8
c001bbcb:	d9 e8                	fld1   
c001bbcd:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bbd1:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bbd8:	e8 8f ff ff ff       	call   c001bb6c <SoundChannel::setSpeed(float)>
c001bbdd:	83 c4 08             	add    esp,0x8
c001bbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbe4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bbe8:	89 10                	mov    DWORD PTR [eax],edx
c001bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bbf2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bbf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbf9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bbfd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bc00:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bc05:	75 26                	jne    c001bc2d <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc0b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bc14:	0f af c2             	imul   eax,edx
c001bc17:	89 c2                	mov    edx,eax
c001bc19:	c1 fa 1f             	sar    edx,0x1f
c001bc1c:	83 e2 03             	and    edx,0x3
c001bc1f:	01 d0                	add    eax,edx
c001bc21:	c1 f8 02             	sar    eax,0x2
c001bc24:	05 a0 0f 00 00       	add    eax,0xfa0
c001bc29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bc35:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bc38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc3c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc47:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc52:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bc55:	c1 e0 02             	shl    eax,0x2
c001bc58:	83 ec 0c             	sub    esp,0xc
c001bc5b:	50                   	push   eax
c001bc5c:	e8 8a 03 ff ff       	call   c000bfeb <malloc>
c001bc61:	83 c4 10             	add    esp,0x10
c001bc64:	89 c2                	mov    edx,eax
c001bc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc6a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bc6d:	83 ec 04             	sub    esp,0x4
c001bc70:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc74:	50                   	push   eax
c001bc75:	6a 01                	push   0x1
c001bc77:	6a 04                	push   0x4
c001bc79:	e8 64 cc fe ff       	call   c00088e2 <src_new>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	89 c2                	mov    edx,eax
c001bc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bc87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bc8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc8e:	85 c0                	test   eax,eax
c001bc90:	74 10                	je     c001bca2 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bc92:	83 ec 0c             	sub    esp,0xc
c001bc95:	68 58 32 02 c0       	push   0xc0023258
c001bc9a:	e8 e9 9c ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001bc9f:	83 c4 10             	add    esp,0x10
c001bca2:	90                   	nop
c001bca3:	83 c4 1c             	add    esp,0x1c
c001bca6:	c3                   	ret    
c001bca7:	90                   	nop

c001bca8 <SoundChannel::play()>:
c001bca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcac:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bcb0:	c3                   	ret    
c001bcb1:	90                   	nop

c001bcb2 <SoundChannel::paused()>:
c001bcb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcb6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bcb9:	c3                   	ret    

c001bcba <SoundChannel::getSampleRate()>:
c001bcba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcbe:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcc0:	c3                   	ret    
c001bcc1:	90                   	nop

c001bcc2 <SoundChannel::getBits()>:
c001bcc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bcc9:	c3                   	ret    

c001bcca <SoundChannel::getBufferUsed()>:
c001bcca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcce:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bcd1:	c3                   	ret    

c001bcd2 <SoundChannel::getBufferSize()>:
c001bcd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcd6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bcd9:	c3                   	ret    

c001bcda <SoundChannel::unbuffer(float*, int, int)>:
c001bcda:	53                   	push   ebx
c001bcdb:	83 ec 40             	sub    esp,0x40
c001bcde:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bce2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bcea:	db 03                	fild   DWORD PTR [ebx]
c001bcec:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bcf0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bcf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bcf7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bcfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bcfe:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bd02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bd06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bd0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd12:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bd15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bd19:	50                   	push   eax
c001bd1a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bd1d:	e8 7a c8 fe ff       	call   c000859c <src_process>
c001bd22:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bd26:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bd29:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001bd2c:	83 c4 0c             	add    esp,0xc
c001bd2f:	29 d0                	sub    eax,edx
c001bd31:	c1 e0 02             	shl    eax,0x2
c001bd34:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001bd37:	50                   	push   eax
c001bd38:	8d 04 91             	lea    eax,[ecx+edx*4]
c001bd3b:	50                   	push   eax
c001bd3c:	51                   	push   ecx
c001bd3d:	e8 0a 49 fe ff       	call   c000064c <memmove>
c001bd42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bd46:	83 c4 48             	add    esp,0x48
c001bd49:	5b                   	pop    ebx
c001bd4a:	c3                   	ret    
c001bd4b:	90                   	nop

c001bd4c <SoundChannel::buffer8(unsigned char*, int)>:
c001bd4c:	53                   	push   ebx
c001bd4d:	31 c0                	xor    eax,eax
c001bd4f:	83 ec 08             	sub    esp,0x8
c001bd52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd56:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001bd59:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001bd5c:	74 35                	je     c001bd93 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd5e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001bd62:	7d 2f                	jge    c001bd93 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001bd64:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bd68:	d9 05 74 32 02 c0    	fld    DWORD PTR ds:0xc0023274
c001bd6e:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001bd72:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001bd77:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001bd7a:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001bd7e:	40                   	inc    eax
c001bd7f:	8d 59 01             	lea    ebx,[ecx+0x1]
c001bd82:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001bd85:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001bd88:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001bd8b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bd8e:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001bd91:	eb c9                	jmp    c001bd5c <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001bd93:	83 c4 08             	add    esp,0x8
c001bd96:	5b                   	pop    ebx
c001bd97:	c3                   	ret    

c001bd98 <SoundDevice::SoundDevice(char const*)>:
c001bd98:	83 ec 1c             	sub    esp,0x1c
c001bd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd9f:	83 ec 08             	sub    esp,0x8
c001bda2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bda6:	50                   	push   eax
c001bda7:	e8 b2 49 ff ff       	call   c001075e <Device::Device(char const*)>
c001bdac:	83 c4 10             	add    esp,0x10
c001bdaf:	ba 80 32 02 c0       	mov    edx,0xc0023280
c001bdb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdb8:	89 10                	mov    DWORD PTR [eax],edx
c001bdba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdbe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001bdc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bdcc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001bdd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bdde:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bde3:	7f 19                	jg     c001bdfe <SoundDevice::SoundDevice(char const*)+0x66>
c001bde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bde9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bded:	83 c2 54             	add    edx,0x54
c001bdf0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001bdf8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bdfc:	eb e0                	jmp    c001bdde <SoundDevice::SoundDevice(char const*)+0x46>
c001bdfe:	90                   	nop
c001bdff:	83 c4 1c             	add    esp,0x1c
c001be02:	c3                   	ret    
c001be03:	90                   	nop

c001be04 <SoundDevice::~SoundDevice()>:
c001be04:	53                   	push   ebx
c001be05:	83 ec 18             	sub    esp,0x18
c001be08:	ba 80 32 02 c0       	mov    edx,0xc0023280
c001be0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be11:	89 10                	mov    DWORD PTR [eax],edx
c001be13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be1b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001be20:	7f 46                	jg     c001be68 <SoundDevice::~SoundDevice()+0x64>
c001be22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be2a:	83 c2 54             	add    edx,0x54
c001be2d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001be31:	85 c0                	test   eax,eax
c001be33:	74 2d                	je     c001be62 <SoundDevice::~SoundDevice()+0x5e>
c001be35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001be3d:	83 c2 54             	add    edx,0x54
c001be40:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001be44:	85 db                	test   ebx,ebx
c001be46:	74 1a                	je     c001be62 <SoundDevice::~SoundDevice()+0x5e>
c001be48:	83 ec 0c             	sub    esp,0xc
c001be4b:	53                   	push   ebx
c001be4c:	e8 ff fc ff ff       	call   c001bb50 <SoundChannel::~SoundChannel()>
c001be51:	83 c4 10             	add    esp,0x10
c001be54:	83 ec 08             	sub    esp,0x8
c001be57:	6a 2c                	push   0x2c
c001be59:	53                   	push   ebx
c001be5a:	e8 d4 31 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001be66:	eb b3                	jmp    c001be1b <SoundDevice::~SoundDevice()+0x17>
c001be68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be6c:	83 ec 0c             	sub    esp,0xc
c001be6f:	50                   	push   eax
c001be70:	e8 9f 45 ff ff       	call   c0010414 <Device::~Device()>
c001be75:	83 c4 10             	add    esp,0x10
c001be78:	90                   	nop
c001be79:	83 c4 18             	add    esp,0x18
c001be7c:	5b                   	pop    ebx
c001be7d:	c3                   	ret    

c001be7e <SoundDevice::~SoundDevice()>:
c001be7e:	83 ec 0c             	sub    esp,0xc
c001be81:	83 ec 0c             	sub    esp,0xc
c001be84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be88:	e8 77 ff ff ff       	call   c001be04 <SoundDevice::~SoundDevice()>
c001be8d:	83 c4 10             	add    esp,0x10
c001be90:	83 ec 08             	sub    esp,0x8
c001be93:	68 e4 01 00 00       	push   0x1e4
c001be98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be9c:	e8 92 31 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001bea1:	83 c4 10             	add    esp,0x10
c001bea4:	83 c4 0c             	add    esp,0xc
c001bea7:	c3                   	ret    

c001bea8 <SoundDevice::getFreeChannelNum()>:
c001bea8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001beac:	31 c0                	xor    eax,eax
c001beae:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001beb6:	74 09                	je     c001bec1 <SoundDevice::getFreeChannelNum()+0x19>
c001beb8:	40                   	inc    eax
c001beb9:	83 f8 20             	cmp    eax,0x20
c001bebc:	75 f0                	jne    c001beae <SoundDevice::getFreeChannelNum()+0x6>
c001bebe:	83 c8 ff             	or     eax,0xffffffff
c001bec1:	c3                   	ret    

c001bec2 <SoundDevice::addChannel(SoundChannel*)>:
c001bec2:	56                   	push   esi
c001bec3:	53                   	push   ebx
c001bec4:	51                   	push   ecx
c001bec5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bec9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001becd:	53                   	push   ebx
c001bece:	e8 d5 ff ff ff       	call   c001bea8 <SoundDevice::getFreeChannelNum()>
c001bed3:	5a                   	pop    edx
c001bed4:	83 f8 ff             	cmp    eax,0xffffffff
c001bed7:	74 51                	je     c001bf2a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bed9:	85 f6                	test   esi,esi
c001bedb:	74 4d                	je     c001bf2a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bedd:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bee4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001beeb:	75 30                	jne    c001bf1d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001beed:	83 ec 0c             	sub    esp,0xc
c001bef0:	56                   	push   esi
c001bef1:	e8 c4 fd ff ff       	call   c001bcba <SoundChannel::getSampleRate()>
c001bef6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001befc:	89 34 24             	mov    DWORD PTR [esp],esi
c001beff:	e8 be fd ff ff       	call   c001bcc2 <SoundChannel::getBits()>
c001bf04:	83 c4 0c             	add    esp,0xc
c001bf07:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bf0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf0f:	50                   	push   eax
c001bf10:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bf16:	53                   	push   ebx
c001bf17:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bf1a:	83 c4 10             	add    esp,0x10
c001bf1d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bf23:	b8 01 00 00 00       	mov    eax,0x1
c001bf28:	eb 03                	jmp    c001bf2d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bf2a:	83 c8 ff             	or     eax,0xffffffff
c001bf2d:	5a                   	pop    edx
c001bf2e:	5b                   	pop    ebx
c001bf2f:	5e                   	pop    esi
c001bf30:	c3                   	ret    
c001bf31:	90                   	nop

c001bf32 <SoundDevice::removeChannel(int)>:
c001bf32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bf36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf3a:	83 fa 1f             	cmp    edx,0x1f
c001bf3d:	77 23                	ja     c001bf62 <SoundDevice::removeChannel(int)+0x30>
c001bf3f:	8d 14 90             	lea    edx,[eax+edx*4]
c001bf42:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001bf49:	74 17                	je     c001bf62 <SoundDevice::removeChannel(int)+0x30>
c001bf4b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001bf55:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001bf5b:	75 05                	jne    c001bf62 <SoundDevice::removeChannel(int)+0x30>
c001bf5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf5f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001bf62:	c3                   	ret    
c001bf63:	90                   	nop

c001bf64 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001bf64:	56                   	push   esi
c001bf65:	53                   	push   ebx
c001bf66:	31 db                	xor    ebx,ebx
c001bf68:	83 ec 14             	sub    esp,0x14
c001bf6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001bf6f:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001bf73:	7d 55                	jge    c001bfca <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001bf75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf79:	d9 e8                	fld1   
c001bf7b:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001bf7e:	d8 0d b0 32 02 c0    	fmul   DWORD PTR ds:0xc00232b0
c001bf84:	d8 0d b4 32 02 c0    	fmul   DWORD PTR ds:0xc00232b4
c001bf8a:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001bf8e:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001bf92:	d8 15 b8 32 02 c0    	fcom   DWORD PTR ds:0xc00232b8
c001bf98:	df e0                	fnstsw ax
c001bf9a:	9e                   	sahf   
c001bf9b:	72 08                	jb     c001bfa5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001bf9d:	dd d8                	fstp   st(0)
c001bf9f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001bfa3:	eb 22                	jmp    c001bfc7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bfa5:	d9 ee                	fldz   
c001bfa7:	d8 d9                	fcomp  st(1)
c001bfa9:	df e0                	fnstsw ax
c001bfab:	9e                   	sahf   
c001bfac:	72 08                	jb     c001bfb6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001bfae:	dd d8                	fstp   st(0)
c001bfb0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001bfb4:	eb 11                	jmp    c001bfc7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001bfb6:	83 ec 10             	sub    esp,0x10
c001bfb9:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bfbc:	e8 9b 36 00 00       	call   c001f65c <lrintf>
c001bfc1:	83 c4 10             	add    esp,0x10
c001bfc4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001bfc7:	43                   	inc    ebx
c001bfc8:	eb a5                	jmp    c001bf6f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001bfca:	83 c4 14             	add    esp,0x14
c001bfcd:	5b                   	pop    ebx
c001bfce:	5e                   	pop    esi
c001bfcf:	c3                   	ret    

c001bfd0 <SoundDevice::getAudio(int, float*, float*)>:
c001bfd0:	55                   	push   ebp
c001bfd1:	57                   	push   edi
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	31 db                	xor    ebx,ebx
c001bfd6:	83 ec 20             	sub    esp,0x20
c001bfd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bfdd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bfe1:	c1 e0 02             	shl    eax,0x2
c001bfe4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bfe8:	50                   	push   eax
c001bfe9:	6a 00                	push   0x0
c001bfeb:	55                   	push   ebp
c001bfec:	e8 c9 46 fe ff       	call   c00006ba <memset>
c001bff1:	83 c4 10             	add    esp,0x10
c001bff4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bff8:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001bfff:	85 c0                	test   eax,eax
c001c001:	0f 84 8c 00 00 00    	je     c001c093 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c007:	83 ec 0c             	sub    esp,0xc
c001c00a:	50                   	push   eax
c001c00b:	e8 a2 fc ff ff       	call   c001bcb2 <SoundChannel::paused()>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	84 c0                	test   al,al
c001c015:	75 7c                	jne    c001c093 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c017:	83 ec 0c             	sub    esp,0xc
c001c01a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c021:	e8 76 fb ff ff       	call   c001bb9c <SoundChannel::getVolume()>
c001c026:	83 c4 10             	add    esp,0x10
c001c029:	85 c0                	test   eax,eax
c001c02b:	74 66                	je     c001c093 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c02d:	83 ec 0c             	sub    esp,0xc
c001c030:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c037:	e8 60 fb ff ff       	call   c001bb9c <SoundChannel::getVolume()>
c001c03c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c040:	d9 05 bc 32 02 c0    	fld    DWORD PTR ds:0xc00232bc
c001c046:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c04a:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c04e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c052:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c058:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c05c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c063:	e8 72 fc ff ff       	call   c001bcda <SoundChannel::unbuffer(float*, int, int)>
c001c068:	83 c4 20             	add    esp,0x20
c001c06b:	31 d2                	xor    edx,edx
c001c06d:	39 c2                	cmp    edx,eax
c001c06f:	7d 1c                	jge    c001c08d <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c071:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c075:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c079:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c07c:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c082:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c086:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c08a:	42                   	inc    edx
c001c08b:	eb e0                	jmp    c001c06d <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c08d:	39 c7                	cmp    edi,eax
c001c08f:	7e 02                	jle    c001c093 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c091:	89 c7                	mov    edi,eax
c001c093:	43                   	inc    ebx
c001c094:	83 fb 20             	cmp    ebx,0x20
c001c097:	0f 85 5b ff ff ff    	jne    c001bff8 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c09d:	83 c4 1c             	add    esp,0x1c
c001c0a0:	89 f8                	mov    eax,edi
c001c0a2:	5b                   	pop    ebx
c001c0a3:	5e                   	pop    esi
c001c0a4:	5f                   	pop    edi
c001c0a5:	5d                   	pop    ebp
c001c0a6:	c3                   	ret    
c001c0a7:	90                   	nop

c001c0a8 <PCI::open(int, int, void*)>:
c001c0a8:	83 ec 18             	sub    esp,0x18
c001c0ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0af:	8b 10                	mov    edx,DWORD PTR [eax]
c001c0b1:	50                   	push   eax
c001c0b2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c0b5:	31 c0                	xor    eax,eax
c001c0b7:	83 c4 1c             	add    esp,0x1c
c001c0ba:	c3                   	ret    
c001c0bb:	90                   	nop

c001c0bc <PCI::close(int, int, void*)>:
c001c0bc:	31 c0                	xor    eax,eax
c001c0be:	c3                   	ret    
c001c0bf:	90                   	nop

c001c0c0 <PCI::PCI()>:
c001c0c0:	83 ec 0c             	sub    esp,0xc
c001c0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c7:	83 ec 08             	sub    esp,0x8
c001c0ca:	68 c0 32 02 c0       	push   0xc00232c0
c001c0cf:	50                   	push   eax
c001c0d0:	e8 13 3d ff ff       	call   c000fde8 <Bus::Bus(char const*)>
c001c0d5:	83 c4 10             	add    esp,0x10
c001c0d8:	ba 4c 33 02 c0       	mov    edx,0xc002334c
c001c0dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e1:	89 10                	mov    DWORD PTR [eax],edx
c001c0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c0ed:	0f b6 d0             	movzx  edx,al
c001c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f4:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c105:	0f b6 d0             	movzx  edx,al
c001c108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c115:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c11b:	8d 50 01             	lea    edx,[eax+0x1]
c001c11e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c122:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c128:	0f b6 d0             	movzx  edx,al
c001c12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c133:	83 c9 c0             	or     ecx,0xffffffc0
c001c136:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c13a:	90                   	nop
c001c13b:	83 c4 0c             	add    esp,0xc
c001c13e:	c3                   	ret    
c001c13f:	90                   	nop

c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c140:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c144:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c149:	89 ca                	mov    edx,ecx
c001c14b:	c1 e0 10             	shl    eax,0x10
c001c14e:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c154:	09 d0                	or     eax,edx
c001c156:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c15b:	c1 e2 08             	shl    edx,0x8
c001c15e:	09 d0                	or     eax,edx
c001c160:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c165:	c1 e2 0b             	shl    edx,0xb
c001c168:	09 d0                	or     eax,edx
c001c16a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c16f:	0d 00 00 00 80       	or     eax,0x80000000
c001c174:	ef                   	out    dx,eax
c001c175:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c17a:	ed                   	in     eax,dx
c001c17b:	83 e1 02             	and    ecx,0x2
c001c17e:	0f b6 c9             	movzx  ecx,cl
c001c181:	c1 e1 03             	shl    ecx,0x3
c001c184:	d3 e8                	shr    eax,cl
c001c186:	c3                   	ret    
c001c187:	90                   	nop

c001c188 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c188:	6a 00                	push   0x0
c001c18a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c18f:	50                   	push   eax
c001c190:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c195:	50                   	push   eax
c001c196:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c19b:	50                   	push   eax
c001c19c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1a0:	e8 9b ff ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1a5:	83 c4 14             	add    esp,0x14
c001c1a8:	c3                   	ret    
c001c1a9:	90                   	nop

c001c1aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c1aa:	6a 0e                	push   0xe
c001c1ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1b1:	50                   	push   eax
c001c1b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1b7:	50                   	push   eax
c001c1b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c1bd:	50                   	push   eax
c001c1be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c1c2:	e8 79 ff ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1c7:	83 c4 14             	add    esp,0x14
c001c1ca:	0f b6 c0             	movzx  eax,al
c001c1cd:	c3                   	ret    

c001c1ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c1ce:	55                   	push   ebp
c001c1cf:	57                   	push   edi
c001c1d0:	56                   	push   esi
c001c1d1:	53                   	push   ebx
c001c1d2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c1d7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c1dc:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c1e1:	6a 0a                	push   0xa
c001c1e3:	56                   	push   esi
c001c1e4:	55                   	push   ebp
c001c1e5:	57                   	push   edi
c001c1e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c1ea:	e8 51 ff ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1ef:	6a 0a                	push   0xa
c001c1f1:	89 c3                	mov    ebx,eax
c001c1f3:	56                   	push   esi
c001c1f4:	0f b6 db             	movzx  ebx,bl
c001c1f7:	55                   	push   ebp
c001c1f8:	57                   	push   edi
c001c1f9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c1fd:	e8 3e ff ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c202:	83 c4 28             	add    esp,0x28
c001c205:	25 00 ff 00 00       	and    eax,0xff00
c001c20a:	09 d8                	or     eax,ebx
c001c20c:	5b                   	pop    ebx
c001c20d:	5e                   	pop    esi
c001c20e:	5f                   	pop    edi
c001c20f:	5d                   	pop    ebp
c001c210:	c3                   	ret    
c001c211:	90                   	nop

c001c212 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c212:	6a 08                	push   0x8
c001c214:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c219:	50                   	push   eax
c001c21a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c21f:	50                   	push   eax
c001c220:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c225:	50                   	push   eax
c001c226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c22a:	e8 11 ff ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c22f:	83 c4 14             	add    esp,0x14
c001c232:	0f b6 c4             	movzx  eax,ah
c001c235:	c3                   	ret    

c001c236 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c236:	6a 08                	push   0x8
c001c238:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c23d:	50                   	push   eax
c001c23e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c243:	50                   	push   eax
c001c244:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c249:	50                   	push   eax
c001c24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c24e:	e8 ed fe ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c253:	83 c4 14             	add    esp,0x14
c001c256:	c3                   	ret    
c001c257:	90                   	nop

c001c258 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c258:	6a 3c                	push   0x3c
c001c25a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c25f:	50                   	push   eax
c001c260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c265:	50                   	push   eax
c001c266:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26b:	50                   	push   eax
c001c26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c270:	e8 cb fe ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c275:	83 c4 14             	add    esp,0x14
c001c278:	c3                   	ret    
c001c279:	90                   	nop

c001c27a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c27a:	6a 18                	push   0x18
c001c27c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c281:	50                   	push   eax
c001c282:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c287:	50                   	push   eax
c001c288:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c28d:	50                   	push   eax
c001c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c292:	e8 a9 fe ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c297:	83 c4 14             	add    esp,0x14
c001c29a:	0f b6 c4             	movzx  eax,ah
c001c29d:	c3                   	ret    

c001c29e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c29e:	55                   	push   ebp
c001c29f:	57                   	push   edi
c001c2a0:	56                   	push   esi
c001c2a1:	53                   	push   ebx
c001c2a2:	50                   	push   eax
c001c2a3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c2a7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c2ac:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c2b1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c2b6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c2bd:	8d 43 12             	lea    eax,[ebx+0x12]
c001c2c0:	83 c3 10             	add    ebx,0x10
c001c2c3:	0f b6 c0             	movzx  eax,al
c001c2c6:	0f b6 db             	movzx  ebx,bl
c001c2c9:	50                   	push   eax
c001c2ca:	51                   	push   ecx
c001c2cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2cf:	57                   	push   edi
c001c2d0:	55                   	push   ebp
c001c2d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c2d5:	e8 66 fe ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2da:	53                   	push   ebx
c001c2db:	89 c6                	mov    esi,eax
c001c2dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c2e1:	c1 e6 10             	shl    esi,0x10
c001c2e4:	51                   	push   ecx
c001c2e5:	57                   	push   edi
c001c2e6:	55                   	push   ebp
c001c2e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c2eb:	e8 50 fe ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2f0:	83 c4 2c             	add    esp,0x2c
c001c2f3:	0f b7 c0             	movzx  eax,ax
c001c2f6:	5b                   	pop    ebx
c001c2f7:	09 f0                	or     eax,esi
c001c2f9:	5e                   	pop    esi
c001c2fa:	5f                   	pop    edi
c001c2fb:	5d                   	pop    ebp
c001c2fc:	c3                   	ret    
c001c2fd:	90                   	nop

c001c2fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c2fe:	53                   	push   ebx
c001c2ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c304:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c309:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c30d:	c1 e1 10             	shl    ecx,0x10
c001c310:	25 fc 00 00 00       	and    eax,0xfc
c001c315:	09 c1                	or     ecx,eax
c001c317:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c31c:	c1 e0 08             	shl    eax,0x8
c001c31f:	09 c1                	or     ecx,eax
c001c321:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c326:	c1 e0 0b             	shl    eax,0xb
c001c329:	09 c1                	or     ecx,eax
c001c32b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c331:	89 c8                	mov    eax,ecx
c001c333:	ef                   	out    dx,eax
c001c334:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c339:	ed                   	in     eax,dx
c001c33a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c33f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c344:	74 0a                	je     c001c350 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c346:	0f b7 d8             	movzx  ebx,ax
c001c349:	89 d0                	mov    eax,edx
c001c34b:	c1 e0 10             	shl    eax,0x10
c001c34e:	eb 05                	jmp    c001c355 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c350:	66 31 c0             	xor    ax,ax
c001c353:	89 d3                	mov    ebx,edx
c001c355:	09 c3                	or     ebx,eax
c001c357:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c35c:	89 c8                	mov    eax,ecx
c001c35e:	ef                   	out    dx,eax
c001c35f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c364:	89 d8                	mov    eax,ebx
c001c366:	ef                   	out    dx,eax
c001c367:	5b                   	pop    ebx
c001c368:	c3                   	ret    
c001c369:	90                   	nop

c001c36a <PCI::checkBus(unsigned char)>:
c001c36a:	56                   	push   esi
c001c36b:	53                   	push   ebx
c001c36c:	31 db                	xor    ebx,ebx
c001c36e:	51                   	push   ecx
c001c36f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c374:	52                   	push   edx
c001c375:	53                   	push   ebx
c001c376:	43                   	inc    ebx
c001c377:	56                   	push   esi
c001c378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c37c:	e8 29 03 00 00       	call   c001c6aa <PCI::checkDevice(unsigned char, unsigned char)>
c001c381:	83 c4 10             	add    esp,0x10
c001c384:	83 fb 20             	cmp    ebx,0x20
c001c387:	75 eb                	jne    c001c374 <PCI::checkBus(unsigned char)+0xa>
c001c389:	58                   	pop    eax
c001c38a:	5b                   	pop    ebx
c001c38b:	5e                   	pop    esi
c001c38c:	c3                   	ret    
c001c38d:	90                   	nop

c001c38e <PCI::foundDevice(PCIDeviceInfo)>:
c001c38e:	55                   	push   ebp
c001c38f:	57                   	push   edi
c001c390:	56                   	push   esi
c001c391:	53                   	push   ebx
c001c392:	83 ec 1c             	sub    esp,0x1c
c001c395:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c399:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c39f:	0f 84 51 01 00 00    	je     c001c4f6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c3a5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c3a9:	66 81 f9 06 04       	cmp    cx,0x406
c001c3ae:	75 2c                	jne    c001c3dc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c3b0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c3b5:	50                   	push   eax
c001c3b6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c3bb:	50                   	push   eax
c001c3bc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c3c1:	50                   	push   eax
c001c3c2:	56                   	push   esi
c001c3c3:	e8 b2 fe ff ff       	call   c001c27a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c3c8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c3cc:	0f b6 c0             	movzx  eax,al
c001c3cf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c3d3:	83 c4 2c             	add    esp,0x2c
c001c3d6:	5b                   	pop    ebx
c001c3d7:	5e                   	pop    esi
c001c3d8:	5f                   	pop    edi
c001c3d9:	5d                   	pop    ebp
c001c3da:	eb 8e                	jmp    c001c36a <PCI::checkBus(unsigned char)>
c001c3dc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c3e0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c3e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3ea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c3ee:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c3f2:	88 d3                	mov    bl,dl
c001c3f4:	85 c0                	test   eax,eax
c001c3f6:	74 33                	je     c001c42b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c3f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c3fb:	85 d2                	test   edx,edx
c001c3fd:	74 28                	je     c001c427 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c3ff:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c405:	31 ef                	xor    edi,ebp
c001c407:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c40d:	75 18                	jne    c001c427 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c40f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c413:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c419:	75 0c                	jne    c001c427 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c41b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c421:	0f 84 cf 00 00 00    	je     c001c4f6 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c427:	8b 00                	mov    eax,DWORD PTR [eax]
c001c429:	eb c9                	jmp    c001c3f4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c42b:	66 81 f9 01 06       	cmp    cx,0x601
c001c430:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c434:	75 18                	jne    c001c44e <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	68 58 01 00 00       	push   0x158
c001c43e:	e8 e1 2b ff ff       	call   c000f024 <operator new(unsigned long)>
c001c443:	59                   	pop    ecx
c001c444:	89 c5                	mov    ebp,eax
c001c446:	5f                   	pop    edi
c001c447:	68 c8 32 02 c0       	push   0xc00232c8
c001c44c:	eb 7d                	jmp    c001c4cb <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c44e:	66 81 f9 01 01       	cmp    cx,0x101
c001c453:	75 60                	jne    c001c4b5 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c455:	83 ec 0c             	sub    esp,0xc
c001c458:	68 70 02 00 00       	push   0x270
c001c45d:	e8 c2 2b ff ff       	call   c000f024 <operator new(unsigned long)>
c001c462:	89 04 24             	mov    DWORD PTR [esp],eax
c001c465:	89 c5                	mov    ebp,eax
c001c467:	e8 02 03 00 00       	call   c001c76e <IDE::IDE()>
c001c46c:	58                   	pop    eax
c001c46d:	5a                   	pop    edx
c001c46e:	55                   	push   ebp
c001c46f:	56                   	push   esi
c001c470:	e8 f9 40 ff ff       	call   c001056e <Device::addChild(Device*)>
c001c475:	83 ec 1c             	sub    esp,0x1c
c001c478:	b9 09 00 00 00       	mov    ecx,0x9
c001c47d:	fc                   	cld    
c001c47e:	89 e7                	mov    edi,esp
c001c480:	89 de                	mov    esi,ebx
c001c482:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c484:	55                   	push   ebp
c001c485:	e8 c2 3f ff ff       	call   c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001c48a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c48d:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c491:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c499:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c4a1:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c4a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ac:	83 c4 4c             	add    esp,0x4c
c001c4af:	5b                   	pop    ebx
c001c4b0:	5e                   	pop    esi
c001c4b1:	5f                   	pop    edi
c001c4b2:	5d                   	pop    ebp
c001c4b3:	ff e0                	jmp    eax
c001c4b5:	83 ec 0c             	sub    esp,0xc
c001c4b8:	68 58 01 00 00       	push   0x158
c001c4bd:	e8 62 2b ff ff       	call   c000f024 <operator new(unsigned long)>
c001c4c2:	59                   	pop    ecx
c001c4c3:	89 c5                	mov    ebp,eax
c001c4c5:	5f                   	pop    edi
c001c4c6:	68 e7 32 02 c0       	push   0xc00232e7
c001c4cb:	55                   	push   ebp
c001c4cc:	e8 89 43 ff ff       	call   c001085a <DriverlessDevice::DriverlessDevice(char const*)>
c001c4d1:	58                   	pop    eax
c001c4d2:	5a                   	pop    edx
c001c4d3:	55                   	push   ebp
c001c4d4:	56                   	push   esi
c001c4d5:	e8 94 40 ff ff       	call   c001056e <Device::addChild(Device*)>
c001c4da:	b9 09 00 00 00       	mov    ecx,0x9
c001c4df:	fc                   	cld    
c001c4e0:	89 df                	mov    edi,ebx
c001c4e2:	89 de                	mov    esi,ebx
c001c4e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4e6:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c4ea:	83 c4 2c             	add    esp,0x2c
c001c4ed:	5b                   	pop    ebx
c001c4ee:	5e                   	pop    esi
c001c4ef:	5f                   	pop    edi
c001c4f0:	5d                   	pop    ebp
c001c4f1:	e9 56 3f ff ff       	jmp    c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001c4f6:	83 c4 1c             	add    esp,0x1c
c001c4f9:	5b                   	pop    ebx
c001c4fa:	5e                   	pop    esi
c001c4fb:	5f                   	pop    edi
c001c4fc:	5d                   	pop    ebp
c001c4fd:	c3                   	ret    

c001c4fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c4fe:	55                   	push   ebp
c001c4ff:	57                   	push   edi
c001c500:	56                   	push   esi
c001c501:	53                   	push   ebx
c001c502:	83 ec 5c             	sub    esp,0x5c
c001c505:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c509:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c50d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c511:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c516:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c51a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c51e:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c523:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c527:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c52c:	6a 0c                	push   0xc
c001c52e:	55                   	push   ebp
c001c52f:	53                   	push   ebx
c001c530:	57                   	push   edi
c001c531:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c538:	e8 03 fc ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c53d:	55                   	push   ebp
c001c53e:	53                   	push   ebx
c001c53f:	57                   	push   edi
c001c540:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c547:	e8 82 fc ff ff       	call   c001c1ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c54c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c001c551:	83 c4 24             	add    esp,0x24
c001c554:	55                   	push   ebp
c001c555:	53                   	push   ebx
c001c556:	57                   	push   edi
c001c557:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c55b:	e8 f8 fc ff ff       	call   c001c258 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c560:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c564:	6a 3c                	push   0x3c
c001c566:	55                   	push   ebp
c001c567:	53                   	push   ebx
c001c568:	57                   	push   edi
c001c569:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001c570:	e8 cb fb ff ff       	call   c001c140 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c575:	0f b6 c4             	movzx  eax,ah
c001c578:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c57c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c580:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001c584:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001c589:	83 c4 24             	add    esp,0x24
c001c58c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c592:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c599:	74 6c                	je     c001c607 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c59b:	31 f6                	xor    esi,esi
c001c59d:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c001c5a3:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c5a9:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c5af:	7e 56                	jle    c001c607 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c001c5b1:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c5b4:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c5bb:	39 cb                	cmp    ebx,ecx
c001c5bd:	75 45                	jne    c001c604 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c5bf:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c5c6:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c5ca:	75 38                	jne    c001c604 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c001c5cc:	83 ec 0c             	sub    esp,0xc
c001c5cf:	68 01 33 02 c0       	push   0xc0023301
c001c5d4:	e8 80 2b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c5d9:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c001c5df:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c5e5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c5ed:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c5f1:	52                   	push   edx
c001c5f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5f6:	53                   	push   ebx
c001c5f7:	68 26 33 02 c0       	push   0xc0023326
c001c5fc:	e8 58 2b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c601:	83 c4 20             	add    esp,0x20
c001c604:	46                   	inc    esi
c001c605:	eb 96                	jmp    c001c59d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c001c607:	31 d2                	xor    edx,edx
c001c609:	83 ec 0c             	sub    esp,0xc
c001c60c:	55                   	push   ebp
c001c60d:	53                   	push   ebx
c001c60e:	57                   	push   edi
c001c60f:	52                   	push   edx
c001c610:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c614:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c61b:	e8 7e fc ff ff       	call   c001c29e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c620:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c624:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c628:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c62c:	42                   	inc    edx
c001c62d:	83 c4 20             	add    esp,0x20
c001c630:	83 fa 06             	cmp    edx,0x6
c001c633:	75 d4                	jne    c001c609 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c001c635:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c639:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c63d:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c641:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c645:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c649:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c64d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c652:	86 e0                	xchg   al,ah
c001c654:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c659:	55                   	push   ebp
c001c65a:	53                   	push   ebx
c001c65b:	57                   	push   edi
c001c65c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c660:	e8 ad fb ff ff       	call   c001c212 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c665:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c669:	55                   	push   ebp
c001c66a:	53                   	push   ebx
c001c66b:	57                   	push   edi
c001c66c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c673:	e8 10 fb ff ff       	call   c001c188 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c678:	83 ec 0c             	sub    esp,0xc
c001c67b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c680:	b9 09 00 00 00       	mov    ecx,0x9
c001c685:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c689:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c68d:	fc                   	cld    
c001c68e:	89 e7                	mov    edi,esp
c001c690:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c692:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c699:	e8 f0 fc ff ff       	call   c001c38e <PCI::foundDevice(PCIDeviceInfo)>
c001c69e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c6a4:	5b                   	pop    ebx
c001c6a5:	5e                   	pop    esi
c001c6a6:	5f                   	pop    edi
c001c6a7:	5d                   	pop    ebp
c001c6a8:	c3                   	ret    
c001c6a9:	90                   	nop

c001c6aa <PCI::checkDevice(unsigned char, unsigned char)>:
c001c6aa:	55                   	push   ebp
c001c6ab:	57                   	push   edi
c001c6ac:	56                   	push   esi
c001c6ad:	53                   	push   ebx
c001c6ae:	83 ec 0c             	sub    esp,0xc
c001c6b1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c6b5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c6ba:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c6bf:	6a 00                	push   0x0
c001c6c1:	56                   	push   esi
c001c6c2:	57                   	push   edi
c001c6c3:	55                   	push   ebp
c001c6c4:	e8 bf fa ff ff       	call   c001c188 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6c9:	6a 00                	push   0x0
c001c6cb:	56                   	push   esi
c001c6cc:	57                   	push   edi
c001c6cd:	55                   	push   ebp
c001c6ce:	e8 2b fe ff ff       	call   c001c4fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c6d3:	83 c4 20             	add    esp,0x20
c001c6d6:	6a 00                	push   0x0
c001c6d8:	56                   	push   esi
c001c6d9:	57                   	push   edi
c001c6da:	55                   	push   ebp
c001c6db:	e8 ca fa ff ff       	call   c001c1aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c6e0:	83 c4 10             	add    esp,0x10
c001c6e3:	84 c0                	test   al,al
c001c6e5:	79 27                	jns    c001c70e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c6e7:	bb 01 00 00 00       	mov    ebx,0x1
c001c6ec:	53                   	push   ebx
c001c6ed:	56                   	push   esi
c001c6ee:	57                   	push   edi
c001c6ef:	55                   	push   ebp
c001c6f0:	e8 93 fa ff ff       	call   c001c188 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c6f5:	83 c4 10             	add    esp,0x10
c001c6f8:	66 40                	inc    ax
c001c6fa:	74 0c                	je     c001c708 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c6fc:	53                   	push   ebx
c001c6fd:	56                   	push   esi
c001c6fe:	57                   	push   edi
c001c6ff:	55                   	push   ebp
c001c700:	e8 f9 fd ff ff       	call   c001c4fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	43                   	inc    ebx
c001c709:	83 fb 08             	cmp    ebx,0x8
c001c70c:	75 de                	jne    c001c6ec <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c70e:	83 c4 0c             	add    esp,0xc
c001c711:	5b                   	pop    ebx
c001c712:	5e                   	pop    esi
c001c713:	5f                   	pop    edi
c001c714:	5d                   	pop    ebp
c001c715:	c3                   	ret    

c001c716 <PCI::detect()>:
c001c716:	56                   	push   esi
c001c717:	53                   	push   ebx
c001c718:	53                   	push   ebx
c001c719:	31 db                	xor    ebx,ebx
c001c71b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c71f:	6a 00                	push   0x0
c001c721:	6a 00                	push   0x0
c001c723:	6a 00                	push   0x0
c001c725:	56                   	push   esi
c001c726:	e8 7f fa ff ff       	call   c001c1aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	a8 80                	test   al,0x80
c001c730:	75 21                	jne    c001c753 <PCI::detect()+0x3d>
c001c732:	51                   	push   ecx
c001c733:	51                   	push   ecx
c001c734:	6a 00                	push   0x0
c001c736:	56                   	push   esi
c001c737:	e8 2e fc ff ff       	call   c001c36a <PCI::checkBus(unsigned char)>
c001c73c:	83 c4 10             	add    esp,0x10
c001c73f:	eb 24                	jmp    c001c765 <PCI::detect()+0x4f>
c001c741:	52                   	push   edx
c001c742:	52                   	push   edx
c001c743:	53                   	push   ebx
c001c744:	43                   	inc    ebx
c001c745:	56                   	push   esi
c001c746:	e8 1f fc ff ff       	call   c001c36a <PCI::checkBus(unsigned char)>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	83 fb 08             	cmp    ebx,0x8
c001c751:	74 12                	je     c001c765 <PCI::detect()+0x4f>
c001c753:	53                   	push   ebx
c001c754:	6a 00                	push   0x0
c001c756:	6a 00                	push   0x0
c001c758:	56                   	push   esi
c001c759:	e8 2a fa ff ff       	call   c001c188 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c75e:	83 c4 10             	add    esp,0x10
c001c761:	66 40                	inc    ax
c001c763:	74 dc                	je     c001c741 <PCI::detect()+0x2b>
c001c765:	58                   	pop    eax
c001c766:	5b                   	pop    ebx
c001c767:	5e                   	pop    esi
c001c768:	c3                   	ret    
c001c769:	90                   	nop

c001c76a <IDE::close(int, int, void*)>:
c001c76a:	83 c8 ff             	or     eax,0xffffffff
c001c76d:	c3                   	ret    

c001c76e <IDE::IDE()>:
c001c76e:	83 ec 0c             	sub    esp,0xc
c001c771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c775:	83 ec 08             	sub    esp,0x8
c001c778:	68 70 33 02 c0       	push   0xc0023370
c001c77d:	50                   	push   eax
c001c77e:	e8 6d 41 ff ff       	call   c00108f0 <HardDiskController::HardDiskController(char const*)>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c001c78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78f:	89 10                	mov    DWORD PTR [eax],edx
c001c791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c795:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c79c:	90                   	nop
c001c79d:	83 c4 0c             	add    esp,0xc
c001c7a0:	c3                   	ret    
c001c7a1:	90                   	nop

c001c7a2 <IDE::prepareInterrupt(unsigned char)>:
c001c7a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c7a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c7ab:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c7b3:	c3                   	ret    

c001c7b4 <selectDrive(unsigned char, unsigned char)>:
c001c7b4:	c3                   	ret    
c001c7b5:	90                   	nop

c001c7b6 <IDE::getBase(unsigned char)>:
c001c7b6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c7bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c7c7:	c3                   	ret    

c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c7c8:	55                   	push   ebp
c001c7c9:	57                   	push   edi
c001c7ca:	56                   	push   esi
c001c7cb:	53                   	push   ebx
c001c7cc:	83 ec 1c             	sub    esp,0x1c
c001c7cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c7d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c7d7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c7db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7df:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c7e2:	80 f9 03             	cmp    cl,0x3
c001c7e5:	77 51                	ja     c001c838 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c7e7:	0f b6 f2             	movzx  esi,dl
c001c7ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7ee:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c7f1:	0f b6 db             	movzx  ebx,bl
c001c7f4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c7f8:	83 ca 80             	or     edx,0xffffff80
c001c7fb:	0f b6 d2             	movzx  edx,dl
c001c7fe:	52                   	push   edx
c001c7ff:	6a 0c                	push   0xc
c001c801:	56                   	push   esi
c001c802:	57                   	push   edi
c001c803:	e8 c0 ff ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c808:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c80d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c811:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c815:	ee                   	out    dx,al
c001c816:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c81b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c81f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c823:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c827:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c82f:	83 c4 2c             	add    esp,0x2c
c001c832:	5b                   	pop    ebx
c001c833:	5e                   	pop    esi
c001c834:	5f                   	pop    edi
c001c835:	5d                   	pop    ebp
c001c836:	eb 90                	jmp    c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c838:	80 fb 07             	cmp    bl,0x7
c001c83b:	77 12                	ja     c001c84f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c83d:	0f b6 d2             	movzx  edx,dl
c001c840:	0f b6 db             	movzx  ebx,bl
c001c843:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c84b:	89 da                	mov    edx,ebx
c001c84d:	eb 2f                	jmp    c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c84f:	80 fb 0d             	cmp    bl,0xd
c001c852:	77 13                	ja     c001c867 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c854:	0f b6 d2             	movzx  edx,dl
c001c857:	0f b6 db             	movzx  ebx,bl
c001c85a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c861:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c865:	eb 17                	jmp    c001c87e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c867:	80 fb 15             	cmp    bl,0x15
c001c86a:	77 13                	ja     c001c87f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c86c:	0f b6 d2             	movzx  edx,dl
c001c86f:	0f b6 db             	movzx  ebx,bl
c001c872:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c87a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c87e:	ee                   	out    dx,al
c001c87f:	83 c4 1c             	add    esp,0x1c
c001c882:	5b                   	pop    ebx
c001c883:	5e                   	pop    esi
c001c884:	5f                   	pop    edi
c001c885:	5d                   	pop    ebp
c001c886:	c3                   	ret    
c001c887:	90                   	nop

c001c888 <IDE::read(unsigned char, unsigned char)>:
c001c888:	55                   	push   ebp
c001c889:	57                   	push   edi
c001c88a:	56                   	push   esi
c001c88b:	53                   	push   ebx
c001c88c:	83 ec 1c             	sub    esp,0x1c
c001c88f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c893:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c897:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c89b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c89e:	3c 03                	cmp    al,0x3
c001c8a0:	77 43                	ja     c001c8e5 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c8a2:	0f b6 f2             	movzx  esi,dl
c001c8a5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8a8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c8ac:	83 c8 80             	or     eax,0xffffff80
c001c8af:	0f b6 c0             	movzx  eax,al
c001c8b2:	50                   	push   eax
c001c8b3:	6a 0c                	push   0xc
c001c8b5:	56                   	push   esi
c001c8b6:	57                   	push   edi
c001c8b7:	e8 0c ff ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c8c1:	0f b6 c3             	movzx  eax,bl
c001c8c4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c8c8:	ec                   	in     al,dx
c001c8c9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c8ce:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c8d2:	52                   	push   edx
c001c8d3:	6a 0c                	push   0xc
c001c8d5:	56                   	push   esi
c001c8d6:	57                   	push   edi
c001c8d7:	e8 ec fe ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8dc:	83 c4 20             	add    esp,0x20
c001c8df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c8e3:	eb 49                	jmp    c001c92e <IDE::read(unsigned char, unsigned char)+0xa6>
c001c8e5:	80 fb 07             	cmp    bl,0x7
c001c8e8:	77 12                	ja     c001c8fc <IDE::read(unsigned char, unsigned char)+0x74>
c001c8ea:	0f b6 d2             	movzx  edx,dl
c001c8ed:	0f b6 c3             	movzx  eax,bl
c001c8f0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c8f8:	89 c2                	mov    edx,eax
c001c8fa:	eb 31                	jmp    c001c92d <IDE::read(unsigned char, unsigned char)+0xa5>
c001c8fc:	80 fb 0d             	cmp    bl,0xd
c001c8ff:	77 13                	ja     c001c914 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c901:	0f b6 d2             	movzx  edx,dl
c001c904:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c90b:	0f b6 d3             	movzx  edx,bl
c001c90e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c912:	eb 19                	jmp    c001c92d <IDE::read(unsigned char, unsigned char)+0xa5>
c001c914:	31 c0                	xor    eax,eax
c001c916:	80 fb 15             	cmp    bl,0x15
c001c919:	77 13                	ja     c001c92e <IDE::read(unsigned char, unsigned char)+0xa6>
c001c91b:	0f b6 d2             	movzx  edx,dl
c001c91e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c926:	0f b6 d3             	movzx  edx,bl
c001c929:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c92d:	ec                   	in     al,dx
c001c92e:	83 c4 1c             	add    esp,0x1c
c001c931:	5b                   	pop    ebx
c001c932:	5e                   	pop    esi
c001c933:	5f                   	pop    edi
c001c934:	5d                   	pop    ebp
c001c935:	c3                   	ret    

c001c936 <IDE::waitInterrupt(unsigned char)>:
c001c936:	57                   	push   edi
c001c937:	56                   	push   esi
c001c938:	31 f6                	xor    esi,esi
c001c93a:	53                   	push   ebx
c001c93b:	83 ec 10             	sub    esp,0x10
c001c93e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c942:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c946:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c94a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c94f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c956:	84 db                	test   bl,bl
c001c958:	75 37                	jne    c001c991 <IDE::waitInterrupt(unsigned char)+0x5b>
c001c95a:	52                   	push   edx
c001c95b:	6a 0c                	push   0xc
c001c95d:	50                   	push   eax
c001c95e:	57                   	push   edi
c001c95f:	e8 24 ff ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001c964:	83 c4 10             	add    esp,0x10
c001c967:	a8 01                	test   al,0x1
c001c969:	75 2e                	jne    c001c999 <IDE::waitInterrupt(unsigned char)+0x63>
c001c96b:	f7 c6 04 00 00 00    	test   esi,0x4
c001c971:	75 16                	jne    c001c989 <IDE::waitInterrupt(unsigned char)+0x53>
c001c973:	83 fe 32             	cmp    esi,0x32
c001c976:	7e 11                	jle    c001c989 <IDE::waitInterrupt(unsigned char)+0x53>
c001c978:	50                   	push   eax
c001c979:	50                   	push   eax
c001c97a:	6a 00                	push   0x0
c001c97c:	68 80 96 98 00       	push   0x989680
c001c981:	e8 4d c5 ff ff       	call   c0018ed3 <nanoSleep(unsigned long long)>
c001c986:	83 c4 10             	add    esp,0x10
c001c989:	83 fe 3c             	cmp    esi,0x3c
c001c98c:	74 0b                	je     c001c999 <IDE::waitInterrupt(unsigned char)+0x63>
c001c98e:	46                   	inc    esi
c001c98f:	eb b9                	jmp    c001c94a <IDE::waitInterrupt(unsigned char)+0x14>
c001c991:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c999:	83 c4 10             	add    esp,0x10
c001c99c:	88 d8                	mov    al,bl
c001c99e:	5b                   	pop    ebx
c001c99f:	5e                   	pop    esi
c001c9a0:	5f                   	pop    edi
c001c9a1:	c3                   	ret    

c001c9a2 <ideChannel0IRQHandler(regs*, void*)>:
c001c9a2:	83 ec 10             	sub    esp,0x10
c001c9a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c9b0:	6a 07                	push   0x7
c001c9b2:	6a 00                	push   0x0
c001c9b4:	50                   	push   eax
c001c9b5:	e8 ce fe ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001c9ba:	83 c4 1c             	add    esp,0x1c
c001c9bd:	c3                   	ret    

c001c9be <ideChannel1IRQHandler(regs*, void*)>:
c001c9be:	83 ec 10             	sub    esp,0x10
c001c9c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c9cc:	6a 07                	push   0x7
c001c9ce:	6a 01                	push   0x1
c001c9d0:	50                   	push   eax
c001c9d1:	e8 b2 fe ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001c9d6:	83 c4 1c             	add    esp,0x1c
c001c9d9:	c3                   	ret    

c001c9da <IDE::enableIRQs(unsigned char, bool)>:
c001c9da:	57                   	push   edi
c001c9db:	56                   	push   esi
c001c9dc:	be 04 00 00 00       	mov    esi,0x4
c001c9e1:	53                   	push   ebx
c001c9e2:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c9e7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c9ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9f0:	0f 94 c0             	sete   al
c001c9f3:	01 c0                	add    eax,eax
c001c9f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c9fc:	0f b6 c0             	movzx  eax,al
c001c9ff:	50                   	push   eax
c001ca00:	6a 0c                	push   0xc
c001ca02:	57                   	push   edi
c001ca03:	53                   	push   ebx
c001ca04:	e8 bf fd ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca09:	83 c4 10             	add    esp,0x10
c001ca0c:	50                   	push   eax
c001ca0d:	6a 0c                	push   0xc
c001ca0f:	57                   	push   edi
c001ca10:	53                   	push   ebx
c001ca11:	e8 72 fe ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001ca16:	83 c4 10             	add    esp,0x10
c001ca19:	4e                   	dec    esi
c001ca1a:	75 f0                	jne    c001ca0c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ca1c:	5b                   	pop    ebx
c001ca1d:	5e                   	pop    esi
c001ca1e:	5f                   	pop    edi
c001ca1f:	c3                   	ret    

c001ca20 <IDE::open(int, int, void*)>:
c001ca20:	55                   	push   ebp
c001ca21:	57                   	push   edi
c001ca22:	56                   	push   esi
c001ca23:	53                   	push   ebx
c001ca24:	83 ec 1c             	sub    esp,0x1c
c001ca27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca2b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ca34:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ca3d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ca44:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ca4b:	0f 85 b2 02 00 00    	jne    c001cd03 <IDE::open(int, int, void*)+0x2e3>
c001ca51:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ca57:	88 04 24             	mov    BYTE PTR [esp],al
c001ca5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ca5d:	83 e0 7f             	and    eax,0x7f
c001ca60:	83 f8 05             	cmp    eax,0x5
c001ca63:	74 05                	je     c001ca6a <IDE::open(int, int, void*)+0x4a>
c001ca65:	83 f8 0f             	cmp    eax,0xf
c001ca68:	75 32                	jne    c001ca9c <IDE::open(int, int, void*)+0x7c>
c001ca6a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ca70:	83 e0 fc             	and    eax,0xfffffffc
c001ca73:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca7a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ca80:	83 e0 fc             	and    eax,0xfffffffc
c001ca83:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca8a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ca90:	83 e0 fc             	and    eax,0xfffffffc
c001ca93:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca9a:	eb 14                	jmp    c001cab0 <IDE::open(int, int, void*)+0x90>
c001ca9c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001caa6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cab0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cab7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cabe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cac2:	89 c6                	mov    esi,eax
c001cac4:	89 e8                	mov    eax,ebp
c001cac6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cacb:	c1 e6 10             	shl    esi,0x10
c001cace:	89 fa                	mov    edx,edi
c001cad0:	c1 e0 0b             	shl    eax,0xb
c001cad3:	09 f0                	or     eax,esi
c001cad5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cadc:	c1 e6 08             	shl    esi,0x8
c001cadf:	09 c6                	or     esi,eax
c001cae1:	89 f0                	mov    eax,esi
c001cae3:	0d 08 00 00 80       	or     eax,0x80000008
c001cae8:	ef                   	out    dx,eax
c001cae9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001caee:	89 ca                	mov    edx,ecx
c001caf0:	ed                   	in     eax,dx
c001caf1:	c1 e8 10             	shr    eax,0x10
c001caf4:	3d ff ff 00 00       	cmp    eax,0xffff
c001caf9:	0f 84 f3 00 00 00    	je     c001cbf2 <IDE::open(int, int, void*)+0x1d2>
c001caff:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cb05:	89 fa                	mov    edx,edi
c001cb07:	89 f0                	mov    eax,esi
c001cb09:	ef                   	out    dx,eax
c001cb0a:	b0 fe                	mov    al,0xfe
c001cb0c:	89 ca                	mov    edx,ecx
c001cb0e:	ee                   	out    dx,al
c001cb0f:	89 f0                	mov    eax,esi
c001cb11:	89 fa                	mov    edx,edi
c001cb13:	ef                   	out    dx,eax
c001cb14:	89 ca                	mov    edx,ecx
c001cb16:	ed                   	in     eax,dx
c001cb17:	3c fe                	cmp    al,0xfe
c001cb19:	0f 85 a9 00 00 00    	jne    c001cbc8 <IDE::open(int, int, void*)+0x1a8>
c001cb1f:	8b 15 c8 45 02 c0    	mov    edx,DWORD PTR ds:0xc00245c8
c001cb25:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cb2c:	74 33                	je     c001cb61 <IDE::open(int, int, void*)+0x141>
c001cb2e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cb34:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cb38:	40                   	inc    eax
c001cb39:	83 ec 0c             	sub    esp,0xc
c001cb3c:	0f b6 c0             	movzx  eax,al
c001cb3f:	50                   	push   eax
c001cb40:	55                   	push   ebp
c001cb41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb45:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cb4b:	51                   	push   ecx
c001cb4c:	e8 61 72 ff ff       	call   c0013db2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cb51:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cb56:	83 c4 1c             	add    esp,0x1c
c001cb59:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb5f:	eb 0a                	jmp    c001cb6b <IDE::open(int, int, void*)+0x14b>
c001cb61:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cb6b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cb72:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cb79:	c1 e1 10             	shl    ecx,0x10
c001cb7c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cb81:	c1 e0 08             	shl    eax,0x8
c001cb84:	89 fa                	mov    edx,edi
c001cb86:	09 c1                	or     ecx,eax
c001cb88:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cb8f:	c1 e0 0b             	shl    eax,0xb
c001cb92:	09 c1                	or     ecx,eax
c001cb94:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cb9a:	89 c8                	mov    eax,ecx
c001cb9c:	ef                   	out    dx,eax
c001cb9d:	be fc 0c 00 00       	mov    esi,0xcfc
c001cba2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cba8:	89 f2                	mov    edx,esi
c001cbaa:	ee                   	out    dx,al
c001cbab:	89 c8                	mov    eax,ecx
c001cbad:	89 fa                	mov    edx,edi
c001cbaf:	ef                   	out    dx,eax
c001cbb0:	89 f2                	mov    edx,esi
c001cbb2:	ed                   	in     eax,dx
c001cbb3:	0f b6 c0             	movzx  eax,al
c001cbb6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cbbc:	74 44                	je     c001cc02 <IDE::open(int, int, void*)+0x1e2>
c001cbbe:	83 ec 0c             	sub    esp,0xc
c001cbc1:	68 88 33 02 c0       	push   0xc0023388
c001cbc6:	eb 32                	jmp    c001cbfa <IDE::open(int, int, void*)+0x1da>
c001cbc8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cbd1:	75 15                	jne    c001cbe8 <IDE::open(int, int, void*)+0x1c8>
c001cbd3:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001cbd7:	74 06                	je     c001cbdf <IDE::open(int, int, void*)+0x1bf>
c001cbd9:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001cbdd:	75 09                	jne    c001cbe8 <IDE::open(int, int, void*)+0x1c8>
c001cbdf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cbe6:	eb 1a                	jmp    c001cc02 <IDE::open(int, int, void*)+0x1e2>
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	68 90 33 02 c0       	push   0xc0023390
c001cbf0:	eb 08                	jmp    c001cbfa <IDE::open(int, int, void*)+0x1da>
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	68 c1 33 02 c0       	push   0xc00233c1
c001cbfa:	e8 89 8d ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001cbff:	83 c4 10             	add    esp,0x10
c001cc02:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cc09:	79 1a                	jns    c001cc25 <IDE::open(int, int, void*)+0x205>
c001cc0b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cc11:	83 e0 fc             	and    eax,0xfffffffc
c001cc14:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cc1b:	83 c0 08             	add    eax,0x8
c001cc1e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cc25:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cc2b:	89 c2                	mov    edx,eax
c001cc2d:	83 e2 0f             	and    edx,0xf
c001cc30:	66 83 fa 08          	cmp    dx,0x8
c001cc34:	75 0a                	jne    c001cc40 <IDE::open(int, int, void*)+0x220>
c001cc36:	83 e8 02             	sub    eax,0x2
c001cc39:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cc40:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cc46:	89 c2                	mov    edx,eax
c001cc48:	83 e2 0f             	and    edx,0xf
c001cc4b:	66 83 fa 08          	cmp    dx,0x8
c001cc4f:	75 0a                	jne    c001cc5b <IDE::open(int, int, void*)+0x23b>
c001cc51:	83 e8 02             	sub    eax,0x2
c001cc54:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cc5b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cc62:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cc69:	89 d0                	mov    eax,edx
c001cc6b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cc6e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cc72:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cc76:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cc79:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cc7e:	0f b6 c9             	movzx  ecx,cl
c001cc81:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cc88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cc8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cc8f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cc93:	8d 50 02             	lea    edx,[eax+0x2]
c001cc96:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cc9b:	0f b6 d2             	movzx  edx,dl
c001cc9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cca4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cca7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ccab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ccaf:	8d 48 03             	lea    ecx,[eax+0x3]
c001ccb2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ccb7:	0f b6 c9             	movzx  ecx,cl
c001ccba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ccc0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ccc3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ccc7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cccb:	8d 50 04             	lea    edx,[eax+0x4]
c001ccce:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ccd4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ccd9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cce0:	66 85 f6             	test   si,si
c001cce3:	74 3e                	je     c001cd23 <IDE::open(int, int, void*)+0x303>
c001cce5:	0f b6 d2             	movzx  edx,dl
c001cce8:	83 c0 05             	add    eax,0x5
c001cceb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ccee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ccf2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ccf6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ccfc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd01:	eb 20                	jmp    c001cd23 <IDE::open(int, int, void*)+0x303>
c001cd03:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cd0d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cd17:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cd1e:	e9 02 ff ff ff       	jmp    c001cc25 <IDE::open(int, int, void*)+0x205>
c001cd23:	52                   	push   edx
c001cd24:	52                   	push   edx
c001cd25:	6a 00                	push   0x0
c001cd27:	53                   	push   ebx
c001cd28:	e8 75 fa ff ff       	call   c001c7a2 <IDE::prepareInterrupt(unsigned char)>
c001cd2d:	59                   	pop    ecx
c001cd2e:	5e                   	pop    esi
c001cd2f:	6a 01                	push   0x1
c001cd31:	53                   	push   ebx
c001cd32:	e8 6b fa ff ff       	call   c001c7a2 <IDE::prepareInterrupt(unsigned char)>
c001cd37:	83 c4 0c             	add    esp,0xc
c001cd3a:	6a 00                	push   0x0
c001cd3c:	6a 00                	push   0x0
c001cd3e:	53                   	push   ebx
c001cd3f:	e8 96 fc ff ff       	call   c001c9da <IDE::enableIRQs(unsigned char, bool)>
c001cd44:	83 c4 0c             	add    esp,0xc
c001cd47:	6a 00                	push   0x0
c001cd49:	6a 01                	push   0x1
c001cd4b:	53                   	push   ebx
c001cd4c:	e8 89 fc ff ff       	call   c001c9da <IDE::enableIRQs(unsigned char, bool)>
c001cd51:	83 c4 10             	add    esp,0x10
c001cd54:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cd5b:	74 40                	je     c001cd9d <IDE::open(int, int, void*)+0x37d>
c001cd5d:	83 ec 0c             	sub    esp,0xc
c001cd60:	68 eb 33 02 c0       	push   0xc00233eb
c001cd65:	e8 ef 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd6d:	6a 01                	push   0x1
c001cd6f:	68 a2 c9 01 c0       	push   0xc001c9a2
c001cd74:	6a 0e                	push   0xe
c001cd76:	53                   	push   ebx
c001cd77:	e8 46 37 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd7c:	83 c4 14             	add    esp,0x14
c001cd7f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cd85:	53                   	push   ebx
c001cd86:	6a 01                	push   0x1
c001cd88:	68 be c9 01 c0       	push   0xc001c9be
c001cd8d:	6a 0f                	push   0xf
c001cd8f:	53                   	push   ebx
c001cd90:	e8 2d 37 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cd95:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cd9b:	eb 4a                	jmp    c001cde7 <IDE::open(int, int, void*)+0x3c7>
c001cd9d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cda7:	50                   	push   eax
c001cda8:	6a 0f                	push   0xf
c001cdaa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cdb0:	68 07 34 02 c0       	push   0xc0023407
c001cdb5:	e8 9f 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cdba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdbd:	6a 00                	push   0x0
c001cdbf:	68 a2 c9 01 c0       	push   0xc001c9a2
c001cdc4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cdca:	53                   	push   ebx
c001cdcb:	e8 f2 36 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cdd0:	83 c4 14             	add    esp,0x14
c001cdd3:	53                   	push   ebx
c001cdd4:	6a 00                	push   0x0
c001cdd6:	68 be c9 01 c0       	push   0xc001c9be
c001cddb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cde1:	53                   	push   ebx
c001cde2:	e8 db 36 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cde7:	83 c4 20             	add    esp,0x20
c001cdea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdec:	83 ec 0c             	sub    esp,0xc
c001cdef:	53                   	push   ebx
c001cdf0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cdf3:	83 c4 0c             	add    esp,0xc
c001cdf6:	6a 07                	push   0x7
c001cdf8:	6a 00                	push   0x0
c001cdfa:	53                   	push   ebx
c001cdfb:	e8 88 fa ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001ce00:	83 c4 0c             	add    esp,0xc
c001ce03:	6a 07                	push   0x7
c001ce05:	6a 01                	push   0x1
c001ce07:	53                   	push   ebx
c001ce08:	e8 7b fa ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001ce0d:	83 c4 0c             	add    esp,0xc
c001ce10:	6a 01                	push   0x1
c001ce12:	6a 00                	push   0x0
c001ce14:	53                   	push   ebx
c001ce15:	e8 c0 fb ff ff       	call   c001c9da <IDE::enableIRQs(unsigned char, bool)>
c001ce1a:	83 c4 0c             	add    esp,0xc
c001ce1d:	6a 01                	push   0x1
c001ce1f:	6a 01                	push   0x1
c001ce21:	53                   	push   ebx
c001ce22:	e8 b3 fb ff ff       	call   c001c9da <IDE::enableIRQs(unsigned char, bool)>
c001ce27:	83 c4 2c             	add    esp,0x2c
c001ce2a:	31 c0                	xor    eax,eax
c001ce2c:	5b                   	pop    ebx
c001ce2d:	5e                   	pop    esi
c001ce2e:	5f                   	pop    edi
c001ce2f:	5d                   	pop    ebp
c001ce30:	c3                   	ret    
c001ce31:	90                   	nop

c001ce32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ce32:	55                   	push   ebp
c001ce33:	57                   	push   edi
c001ce34:	56                   	push   esi
c001ce35:	53                   	push   ebx
c001ce36:	83 ec 1c             	sub    esp,0x1c
c001ce39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ce3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ce41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ce45:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ce49:	8d 50 f8             	lea    edx,[eax-0x8]
c001ce4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ce50:	80 fa 03             	cmp    dl,0x3
c001ce53:	77 5d                	ja     c001ceb2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ce55:	0f b6 db             	movzx  ebx,bl
c001ce58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ce5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ce60:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ce63:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ce67:	83 ca 80             	or     edx,0xffffff80
c001ce6a:	0f b6 d2             	movzx  edx,dl
c001ce6d:	52                   	push   edx
c001ce6e:	6a 0c                	push   0xc
c001ce70:	53                   	push   ebx
c001ce71:	56                   	push   esi
c001ce72:	e8 51 f9 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce7b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ce80:	0f b6 c0             	movzx  eax,al
c001ce83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce87:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ce8b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ce8d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ce92:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ce96:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ce9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ce9e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cea6:	83 c4 2c             	add    esp,0x2c
c001cea9:	5b                   	pop    ebx
c001ceaa:	5e                   	pop    esi
c001ceab:	5f                   	pop    edi
c001ceac:	5d                   	pop    ebp
c001cead:	e9 16 f9 ff ff       	jmp    c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceb2:	3c 07                	cmp    al,0x7
c001ceb4:	77 10                	ja     c001cec6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ceb6:	0f b6 db             	movzx  ebx,bl
c001ceb9:	0f b6 d0             	movzx  edx,al
c001cebc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cec4:	eb 2d                	jmp    c001cef3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cec6:	3c 0d                	cmp    al,0xd
c001cec8:	77 13                	ja     c001cedd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ceca:	0f b6 db             	movzx  ebx,bl
c001cecd:	0f b6 c0             	movzx  eax,al
c001ced0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ced7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cedb:	eb 16                	jmp    c001cef3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cedd:	3c 15                	cmp    al,0x15
c001cedf:	77 14                	ja     c001cef5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cee1:	0f b6 db             	movzx  ebx,bl
c001cee4:	0f b6 c0             	movzx  eax,al
c001cee7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ceef:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cef3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cef5:	83 c4 1c             	add    esp,0x1c
c001cef8:	5b                   	pop    ebx
c001cef9:	5e                   	pop    esi
c001cefa:	5f                   	pop    edi
c001cefb:	5d                   	pop    ebp
c001cefc:	c3                   	ret    
c001cefd:	90                   	nop

c001cefe <IDE::detect()>:
c001cefe:	55                   	push   ebp
c001ceff:	57                   	push   edi
c001cf00:	56                   	push   esi
c001cf01:	53                   	push   ebx
c001cf02:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cf08:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001cf0f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cf16:	0f 85 c0 02 00 00    	jne    c001d1dc <IDE::detect()+0x2de>
c001cf1c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cf23:	31 f6                	xor    esi,esi
c001cf25:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cf2d:	31 ed                	xor    ebp,ebp
c001cf2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf33:	c1 e0 06             	shl    eax,0x6
c001cf36:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cf3e:	89 e8                	mov    eax,ebp
c001cf40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cf44:	c1 e0 04             	shl    eax,0x4
c001cf47:	83 c8 a0             	or     eax,0xffffffa0
c001cf4a:	0f b6 c0             	movzx  eax,al
c001cf4d:	50                   	push   eax
c001cf4e:	6a 06                	push   0x6
c001cf50:	56                   	push   esi
c001cf51:	53                   	push   ebx
c001cf52:	e8 71 f8 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf57:	83 c4 0c             	add    esp,0xc
c001cf5a:	6a 0c                	push   0xc
c001cf5c:	56                   	push   esi
c001cf5d:	53                   	push   ebx
c001cf5e:	e8 25 f9 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cf63:	83 c4 0c             	add    esp,0xc
c001cf66:	6a 0c                	push   0xc
c001cf68:	56                   	push   esi
c001cf69:	53                   	push   ebx
c001cf6a:	e8 19 f9 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cf6f:	83 c4 0c             	add    esp,0xc
c001cf72:	6a 0c                	push   0xc
c001cf74:	56                   	push   esi
c001cf75:	53                   	push   ebx
c001cf76:	e8 0d f9 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cf7b:	83 c4 0c             	add    esp,0xc
c001cf7e:	6a 0c                	push   0xc
c001cf80:	56                   	push   esi
c001cf81:	53                   	push   ebx
c001cf82:	e8 01 f9 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cf87:	68 ec 00 00 00       	push   0xec
c001cf8c:	6a 07                	push   0x7
c001cf8e:	56                   	push   esi
c001cf8f:	53                   	push   ebx
c001cf90:	e8 33 f8 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf95:	83 c4 1c             	add    esp,0x1c
c001cf98:	6a 0c                	push   0xc
c001cf9a:	56                   	push   esi
c001cf9b:	53                   	push   ebx
c001cf9c:	e8 e7 f8 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cfa1:	83 c4 0c             	add    esp,0xc
c001cfa4:	6a 0c                	push   0xc
c001cfa6:	56                   	push   esi
c001cfa7:	53                   	push   ebx
c001cfa8:	e8 db f8 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cfad:	83 c4 0c             	add    esp,0xc
c001cfb0:	6a 0c                	push   0xc
c001cfb2:	56                   	push   esi
c001cfb3:	53                   	push   ebx
c001cfb4:	e8 cf f8 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cfb9:	83 c4 0c             	add    esp,0xc
c001cfbc:	6a 0c                	push   0xc
c001cfbe:	56                   	push   esi
c001cfbf:	53                   	push   ebx
c001cfc0:	e8 c3 f8 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cfc5:	83 c4 0c             	add    esp,0xc
c001cfc8:	6a 0c                	push   0xc
c001cfca:	56                   	push   esi
c001cfcb:	53                   	push   ebx
c001cfcc:	e8 b7 f8 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cfd1:	83 c4 10             	add    esp,0x10
c001cfd4:	84 c0                	test   al,al
c001cfd6:	0f 84 8b 01 00 00    	je     c001d167 <IDE::detect()+0x269>
c001cfdc:	31 ff                	xor    edi,edi
c001cfde:	50                   	push   eax
c001cfdf:	6a 0c                	push   0xc
c001cfe1:	56                   	push   esi
c001cfe2:	53                   	push   ebx
c001cfe3:	e8 a0 f8 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001cfe8:	83 c4 10             	add    esp,0x10
c001cfeb:	a8 01                	test   al,0x1
c001cfed:	0f 85 8e 01 00 00    	jne    c001d181 <IDE::detect()+0x283>
c001cff3:	84 c0                	test   al,al
c001cff5:	78 04                	js     c001cffb <IDE::detect()+0xfd>
c001cff7:	a8 08                	test   al,0x8
c001cff9:	75 27                	jne    c001d022 <IDE::detect()+0x124>
c001cffb:	47                   	inc    edi
c001cffc:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d002:	7e da                	jle    c001cfde <IDE::detect()+0xe0>
c001d004:	50                   	push   eax
c001d005:	50                   	push   eax
c001d006:	6a 00                	push   0x0
c001d008:	68 40 4b 4c 00       	push   0x4c4b40
c001d00d:	e8 c1 be ff ff       	call   c0018ed3 <nanoSleep(unsigned long long)>
c001d012:	83 c4 10             	add    esp,0x10
c001d015:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d01b:	75 c1                	jne    c001cfde <IDE::detect()+0xe0>
c001d01d:	e9 5f 01 00 00       	jmp    c001d181 <IDE::detect()+0x283>
c001d022:	31 c9                	xor    ecx,ecx
c001d024:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d028:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d02c:	83 ec 0c             	sub    esp,0xc
c001d02f:	68 80 00 00 00       	push   0x80
c001d034:	57                   	push   edi
c001d035:	6a 00                	push   0x0
c001d037:	56                   	push   esi
c001d038:	53                   	push   ebx
c001d039:	e8 f4 fd ff ff       	call   c001ce32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d03e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d042:	c1 e0 06             	shl    eax,0x6
c001d045:	01 d8                	add    eax,ebx
c001d047:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d04c:	89 d1                	mov    ecx,edx
c001d04e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d055:	89 f2                	mov    edx,esi
c001d057:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d05e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d064:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d068:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d06e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d072:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d079:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d081:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d088:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d090:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d096:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d09d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d0a3:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d0a7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d0ab:	83 c4 20             	add    esp,0x20
c001d0ae:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d0b1:	83 c7 02             	add    edi,0x2
c001d0b4:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d0ba:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d0bd:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d0c3:	83 c0 02             	add    eax,0x2
c001d0c6:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d0ca:	75 e2                	jne    c001d0ae <IDE::detect()+0x1b0>
c001d0cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0d0:	c1 e0 06             	shl    eax,0x6
c001d0d3:	01 d8                	add    eax,ebx
c001d0d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d0db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d0e2:	66 c1 ea 09          	shr    dx,0x9
c001d0e6:	83 e2 01             	and    edx,0x1
c001d0e9:	84 c9                	test   cl,cl
c001d0eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d0f1:	75 2f                	jne    c001d122 <IDE::detect()+0x224>
c001d0f3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d0f9:	85 c0                	test   eax,eax
c001d0fb:	74 66                	je     c001d163 <IDE::detect()+0x265>
c001d0fd:	50                   	push   eax
c001d0fe:	55                   	push   ebp
c001d0ff:	56                   	push   esi
c001d100:	68 23 34 02 c0       	push   0xc0023423
c001d105:	e8 4f 20 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d10a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d111:	e8 0e 1f ff ff       	call   c000f024 <operator new(unsigned long)>
c001d116:	89 c7                	mov    edi,eax
c001d118:	89 04 24             	mov    DWORD PTR [esp],eax
c001d11b:	e8 f4 02 00 00       	call   c001d414 <ATA::ATA()>
c001d120:	eb 28                	jmp    c001d14a <IDE::detect()+0x24c>
c001d122:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d128:	55                   	push   ebp
c001d129:	56                   	push   esi
c001d12a:	68 52 34 02 c0       	push   0xc0023452
c001d12f:	e8 25 20 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d134:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d13b:	e8 e4 1e ff ff       	call   c000f024 <operator new(unsigned long)>
c001d140:	89 c7                	mov    edi,eax
c001d142:	89 04 24             	mov    DWORD PTR [esp],eax
c001d145:	e8 1e 09 00 00       	call   c001da68 <ATAPI::ATAPI()>
c001d14a:	5a                   	pop    edx
c001d14b:	59                   	pop    ecx
c001d14c:	57                   	push   edi
c001d14d:	53                   	push   ebx
c001d14e:	e8 1b 34 ff ff       	call   c001056e <Device::addChild(Device*)>
c001d153:	8b 07                	mov    eax,DWORD PTR [edi]
c001d155:	53                   	push   ebx
c001d156:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d15a:	6a 00                	push   0x0
c001d15c:	57                   	push   edi
c001d15d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d160:	83 c4 20             	add    esp,0x20
c001d163:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d167:	4d                   	dec    ebp
c001d168:	74 0a                	je     c001d174 <IDE::detect()+0x276>
c001d16a:	bd 01 00 00 00       	mov    ebp,0x1
c001d16f:	e9 bb fd ff ff       	jmp    c001cf2f <IDE::detect()+0x31>
c001d174:	4e                   	dec    esi
c001d175:	74 65                	je     c001d1dc <IDE::detect()+0x2de>
c001d177:	be 01 00 00 00       	mov    esi,0x1
c001d17c:	e9 ac fd ff ff       	jmp    c001cf2d <IDE::detect()+0x2f>
c001d181:	50                   	push   eax
c001d182:	6a 04                	push   0x4
c001d184:	56                   	push   esi
c001d185:	53                   	push   ebx
c001d186:	e8 fd f6 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001d18b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d18f:	83 c4 0c             	add    esp,0xc
c001d192:	6a 05                	push   0x5
c001d194:	56                   	push   esi
c001d195:	53                   	push   ebx
c001d196:	e8 ed f6 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001d19b:	83 c4 10             	add    esp,0x10
c001d19e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d1a2:	80 fa 14             	cmp    dl,0x14
c001d1a5:	74 2f                	je     c001d1d6 <IDE::detect()+0x2d8>
c001d1a7:	80 fa 69             	cmp    dl,0x69
c001d1aa:	75 bb                	jne    c001d167 <IDE::detect()+0x269>
c001d1ac:	3c 96                	cmp    al,0x96
c001d1ae:	75 b7                	jne    c001d167 <IDE::detect()+0x269>
c001d1b0:	68 a1 00 00 00       	push   0xa1
c001d1b5:	6a 07                	push   0x7
c001d1b7:	56                   	push   esi
c001d1b8:	53                   	push   ebx
c001d1b9:	e8 0a f6 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1be:	5f                   	pop    edi
c001d1bf:	58                   	pop    eax
c001d1c0:	6a 00                	push   0x0
c001d1c2:	68 40 42 0f 00       	push   0xf4240
c001d1c7:	e8 07 bd ff ff       	call   c0018ed3 <nanoSleep(unsigned long long)>
c001d1cc:	83 c4 10             	add    esp,0x10
c001d1cf:	b1 01                	mov    cl,0x1
c001d1d1:	e9 4e fe ff ff       	jmp    c001d024 <IDE::detect()+0x126>
c001d1d6:	3c eb                	cmp    al,0xeb
c001d1d8:	75 cd                	jne    c001d1a7 <IDE::detect()+0x2a9>
c001d1da:	eb d4                	jmp    c001d1b0 <IDE::detect()+0x2b2>
c001d1dc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d1e2:	5b                   	pop    ebx
c001d1e3:	5e                   	pop    esi
c001d1e4:	5f                   	pop    edi
c001d1e5:	5d                   	pop    ebp
c001d1e6:	c3                   	ret    
c001d1e7:	90                   	nop

c001d1e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d1e8:	55                   	push   ebp
c001d1e9:	57                   	push   edi
c001d1ea:	56                   	push   esi
c001d1eb:	53                   	push   ebx
c001d1ec:	83 ec 1c             	sub    esp,0x1c
c001d1ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d1f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d1f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1fb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d1ff:	88 c3                	mov    bl,al
c001d201:	84 c0                	test   al,al
c001d203:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d207:	0f 84 67 01 00 00    	je     c001d374 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d20d:	83 ec 0c             	sub    esp,0xc
c001d210:	68 83 34 02 c0       	push   0xc0023483
c001d215:	e8 3f 1f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d21a:	83 c4 10             	add    esp,0x10
c001d21d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d221:	3c 01                	cmp    al,0x1
c001d223:	75 17                	jne    c001d23c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d225:	83 ec 0c             	sub    esp,0xc
c001d228:	b3 13                	mov    bl,0x13
c001d22a:	68 8f 34 02 c0       	push   0xc002348f
c001d22f:	e8 25 1f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d234:	83 c4 10             	add    esp,0x10
c001d237:	e9 25 01 00 00       	jmp    c001d361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d23c:	3c 02                	cmp    al,0x2
c001d23e:	0f 85 ef 00 00 00    	jne    c001d333 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d244:	01 f6                	add    esi,esi
c001d246:	52                   	push   edx
c001d247:	09 ee                	or     esi,ebp
c001d249:	6a 01                	push   0x1
c001d24b:	89 f0                	mov    eax,esi
c001d24d:	0f b6 f0             	movzx  esi,al
c001d250:	c1 e6 06             	shl    esi,0x6
c001d253:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d25b:	50                   	push   eax
c001d25c:	57                   	push   edi
c001d25d:	e8 26 f6 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001d262:	83 c4 10             	add    esp,0x10
c001d265:	89 c6                	mov    esi,eax
c001d267:	a8 01                	test   al,0x1
c001d269:	74 12                	je     c001d27d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d26b:	83 ec 0c             	sub    esp,0xc
c001d26e:	b3 07                	mov    bl,0x7
c001d270:	68 a4 34 02 c0       	push   0xc00234a4
c001d275:	e8 df 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d27a:	83 c4 10             	add    esp,0x10
c001d27d:	f7 c6 02 00 00 00    	test   esi,0x2
c001d283:	74 12                	je     c001d297 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d285:	83 ec 0c             	sub    esp,0xc
c001d288:	b3 03                	mov    bl,0x3
c001d28a:	68 c2 34 02 c0       	push   0xc00234c2
c001d28f:	e8 c5 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d294:	83 c4 10             	add    esp,0x10
c001d297:	f7 c6 04 00 00 00    	test   esi,0x4
c001d29d:	74 12                	je     c001d2b1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d29f:	83 ec 0c             	sub    esp,0xc
c001d2a2:	b3 14                	mov    bl,0x14
c001d2a4:	68 e2 34 02 c0       	push   0xc00234e2
c001d2a9:	e8 ab 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2ae:	83 c4 10             	add    esp,0x10
c001d2b1:	f7 c6 08 00 00 00    	test   esi,0x8
c001d2b7:	74 12                	je     c001d2cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d2b9:	83 ec 0c             	sub    esp,0xc
c001d2bc:	b3 03                	mov    bl,0x3
c001d2be:	68 c2 34 02 c0       	push   0xc00234c2
c001d2c3:	e8 91 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2c8:	83 c4 10             	add    esp,0x10
c001d2cb:	f7 c6 10 00 00 00    	test   esi,0x10
c001d2d1:	74 12                	je     c001d2e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d2d3:	83 ec 0c             	sub    esp,0xc
c001d2d6:	b3 15                	mov    bl,0x15
c001d2d8:	68 fa 34 02 c0       	push   0xc00234fa
c001d2dd:	e8 77 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2e2:	83 c4 10             	add    esp,0x10
c001d2e5:	f7 c6 20 00 00 00    	test   esi,0x20
c001d2eb:	74 12                	je     c001d2ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d2ed:	83 ec 0c             	sub    esp,0xc
c001d2f0:	b3 03                	mov    bl,0x3
c001d2f2:	68 c2 34 02 c0       	push   0xc00234c2
c001d2f7:	e8 5d 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d2fc:	83 c4 10             	add    esp,0x10
c001d2ff:	f7 c6 40 00 00 00    	test   esi,0x40
c001d305:	74 12                	je     c001d319 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d307:	83 ec 0c             	sub    esp,0xc
c001d30a:	b3 16                	mov    bl,0x16
c001d30c:	68 14 35 02 c0       	push   0xc0023514
c001d311:	e8 43 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d316:	83 c4 10             	add    esp,0x10
c001d319:	89 f0                	mov    eax,esi
c001d31b:	84 c0                	test   al,al
c001d31d:	79 42                	jns    c001d361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d31f:	83 ec 0c             	sub    esp,0xc
c001d322:	b3 0d                	mov    bl,0xd
c001d324:	68 35 35 02 c0       	push   0xc0023535
c001d329:	e8 2b 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d32e:	83 c4 10             	add    esp,0x10
c001d331:	eb 2e                	jmp    c001d361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d333:	3c 03                	cmp    al,0x3
c001d335:	75 14                	jne    c001d34b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d337:	83 ec 0c             	sub    esp,0xc
c001d33a:	b3 17                	mov    bl,0x17
c001d33c:	68 49 35 02 c0       	push   0xc0023549
c001d341:	e8 13 1e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d346:	83 c4 10             	add    esp,0x10
c001d349:	eb 16                	jmp    c001d361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d34b:	3c 04                	cmp    al,0x4
c001d34d:	75 12                	jne    c001d361 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d34f:	83 ec 0c             	sub    esp,0xc
c001d352:	b3 08                	mov    bl,0x8
c001d354:	68 5f 35 02 c0       	push   0xc002355f
c001d359:	e8 fb 1d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	50                   	push   eax
c001d362:	50                   	push   eax
c001d363:	0f b6 c3             	movzx  eax,bl
c001d366:	50                   	push   eax
c001d367:	68 77 35 02 c0       	push   0xc0023577
c001d36c:	e8 e8 1d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d371:	83 c4 10             	add    esp,0x10
c001d374:	83 c4 1c             	add    esp,0x1c
c001d377:	88 d8                	mov    al,bl
c001d379:	5b                   	pop    ebx
c001d37a:	5e                   	pop    esi
c001d37b:	5f                   	pop    edi
c001d37c:	5d                   	pop    ebp
c001d37d:	c3                   	ret    

c001d37e <IDE::polling(unsigned char, unsigned int)>:
c001d37e:	55                   	push   ebp
c001d37f:	bd 04 00 00 00       	mov    ebp,0x4
c001d384:	57                   	push   edi
c001d385:	56                   	push   esi
c001d386:	53                   	push   ebx
c001d387:	83 ec 0c             	sub    esp,0xc
c001d38a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d38e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d392:	52                   	push   edx
c001d393:	6a 0c                	push   0xc
c001d395:	0f b6 f3             	movzx  esi,bl
c001d398:	56                   	push   esi
c001d399:	57                   	push   edi
c001d39a:	e8 e9 f4 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001d39f:	83 c4 10             	add    esp,0x10
c001d3a2:	4d                   	dec    ebp
c001d3a3:	75 ed                	jne    c001d392 <IDE::polling(unsigned char, unsigned int)+0x14>
c001d3a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d3aa:	50                   	push   eax
c001d3ab:	6a 0c                	push   0xc
c001d3ad:	56                   	push   esi
c001d3ae:	57                   	push   edi
c001d3af:	e8 d4 f4 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001d3b4:	83 c4 10             	add    esp,0x10
c001d3b7:	a8 01                	test   al,0x1
c001d3b9:	74 12                	je     c001d3cd <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d3bb:	83 ec 0c             	sub    esp,0xc
c001d3be:	68 91 35 02 c0       	push   0xc0023591
c001d3c3:	e8 91 1d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d3c8:	83 c4 10             	add    esp,0x10
c001d3cb:	eb 17                	jmp    c001d3e4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d3cd:	a8 20                	test   al,0x20
c001d3cf:	75 0f                	jne    c001d3e0 <IDE::polling(unsigned char, unsigned int)+0x62>
c001d3d1:	4b                   	dec    ebx
c001d3d2:	74 10                	je     c001d3e4 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d3d4:	84 c0                	test   al,al
c001d3d6:	78 d2                	js     c001d3aa <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d3d8:	a8 08                	test   al,0x8
c001d3da:	74 ce                	je     c001d3aa <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d3dc:	31 c0                	xor    eax,eax
c001d3de:	eb 06                	jmp    c001d3e6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d3e0:	b0 01                	mov    al,0x1
c001d3e2:	eb 02                	jmp    c001d3e6 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d3e4:	b0 02                	mov    al,0x2
c001d3e6:	83 c4 0c             	add    esp,0xc
c001d3e9:	5b                   	pop    ebx
c001d3ea:	5e                   	pop    esi
c001d3eb:	5f                   	pop    edi
c001d3ec:	5d                   	pop    ebp
c001d3ed:	c3                   	ret    

c001d3ee <ATA::close(int, int, void*)>:
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d3fb:	85 c0                	test   eax,eax
c001d3fd:	74 0c                	je     c001d40b <ATA::close(int, int, void*)+0x1d>
c001d3ff:	83 ec 0c             	sub    esp,0xc
c001d402:	8b 10                	mov    edx,DWORD PTR [eax]
c001d404:	50                   	push   eax
c001d405:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d408:	83 c4 10             	add    esp,0x10
c001d40b:	31 c0                	xor    eax,eax
c001d40d:	83 c4 0c             	add    esp,0xc
c001d410:	c3                   	ret    
c001d411:	90                   	nop

c001d412 <ATA::powerSaving(PowerSavingLevel)>:
c001d412:	c3                   	ret    
c001d413:	90                   	nop

c001d414 <ATA::ATA()>:
c001d414:	83 ec 0c             	sub    esp,0xc
c001d417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d41b:	83 ec 04             	sub    esp,0x4
c001d41e:	68 00 02 00 00       	push   0x200
c001d423:	68 d4 35 02 c0       	push   0xc00235d4
c001d428:	50                   	push   eax
c001d429:	e8 46 35 ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	ba 00 36 02 c0       	mov    edx,0xc0023600
c001d436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43a:	89 10                	mov    DWORD PTR [eax],edx
c001d43c:	90                   	nop
c001d43d:	83 c4 0c             	add    esp,0xc
c001d440:	c3                   	ret    
c001d441:	90                   	nop

c001d442 <ATA::flush(bool)>:
c001d442:	53                   	push   ebx
c001d443:	83 ec 08             	sub    esp,0x8
c001d446:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d44b:	19 c0                	sbb    eax,eax
c001d44d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d451:	83 e0 fd             	and    eax,0xfffffffd
c001d454:	05 ea 00 00 00       	add    eax,0xea
c001d459:	50                   	push   eax
c001d45a:	6a 07                	push   0x7
c001d45c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d463:	50                   	push   eax
c001d464:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d46a:	e8 59 f3 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d46f:	83 c4 0c             	add    esp,0xc
c001d472:	6a 00                	push   0x0
c001d474:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d47b:	50                   	push   eax
c001d47c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d482:	e8 f7 fe ff ff       	call   c001d37e <IDE::polling(unsigned char, unsigned int)>
c001d487:	83 c4 18             	add    esp,0x18
c001d48a:	5b                   	pop    ebx
c001d48b:	c3                   	ret    

c001d48c <ATA::readyForCommand()>:
c001d48c:	56                   	push   esi
c001d48d:	53                   	push   ebx
c001d48e:	31 db                	xor    ebx,ebx
c001d490:	50                   	push   eax
c001d491:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d495:	50                   	push   eax
c001d496:	6a 0c                	push   0xc
c001d498:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d49f:	50                   	push   eax
c001d4a0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d4a6:	e8 dd f3 ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001d4ab:	83 c4 10             	add    esp,0x10
c001d4ae:	a8 88                	test   al,0x88
c001d4b0:	74 23                	je     c001d4d5 <ATA::readyForCommand()+0x49>
c001d4b2:	43                   	inc    ebx
c001d4b3:	83 fb 63             	cmp    ebx,0x63
c001d4b6:	7e dd                	jle    c001d495 <ATA::readyForCommand()+0x9>
c001d4b8:	51                   	push   ecx
c001d4b9:	51                   	push   ecx
c001d4ba:	6a 00                	push   0x0
c001d4bc:	68 40 42 0f 00       	push   0xf4240
c001d4c1:	e8 0d ba ff ff       	call   c0018ed3 <nanoSleep(unsigned long long)>
c001d4c6:	83 c4 10             	add    esp,0x10
c001d4c9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d4cf:	75 c4                	jne    c001d495 <ATA::readyForCommand()+0x9>
c001d4d1:	31 c0                	xor    eax,eax
c001d4d3:	eb 02                	jmp    c001d4d7 <ATA::readyForCommand()+0x4b>
c001d4d5:	b0 01                	mov    al,0x1
c001d4d7:	5a                   	pop    edx
c001d4d8:	5b                   	pop    ebx
c001d4d9:	5e                   	pop    esi
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <ATA::access(unsigned long long, int, void*, bool)>:
c001d4dc:	55                   	push   ebp
c001d4dd:	57                   	push   edi
c001d4de:	56                   	push   esi
c001d4df:	53                   	push   ebx
c001d4e0:	83 ec 2c             	sub    esp,0x2c
c001d4e3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d4e7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d4eb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d4f2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d4f5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d4f9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d4fd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d503:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d507:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d50d:	c1 e0 06             	shl    eax,0x6
c001d510:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d514:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d51c:	74 5d                	je     c001d57b <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d51e:	89 fa                	mov    edx,edi
c001d520:	89 f0                	mov    eax,esi
c001d522:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d526:	c1 ea 1c             	shr    edx,0x1c
c001d529:	89 d1                	mov    ecx,edx
c001d52b:	09 c1                	or     ecx,eax
c001d52d:	74 25                	je     c001d554 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d52f:	31 ed                	xor    ebp,ebp
c001d531:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d538:	89 fa                	mov    edx,edi
c001d53a:	89 f0                	mov    eax,esi
c001d53c:	0f ad d0             	shrd   eax,edx,cl
c001d53f:	d3 ea                	shr    edx,cl
c001d541:	f6 c1 20             	test   cl,0x20
c001d544:	74 02                	je     c001d548 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d546:	89 d0                	mov    eax,edx
c001d548:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d54c:	45                   	inc    ebp
c001d54d:	83 fd 06             	cmp    ebp,0x6
c001d550:	75 df                	jne    c001d531 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d552:	eb 73                	jmp    c001d5c7 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d554:	89 f0                	mov    eax,esi
c001d556:	89 fa                	mov    edx,edi
c001d558:	0f ac d0 10          	shrd   eax,edx,0x10
c001d55c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d561:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d565:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d56c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d571:	c1 ee 18             	shr    esi,0x18
c001d574:	bf 01 00 00 00       	mov    edi,0x1
c001d579:	eb 53                	jmp    c001d5ce <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d57b:	6a 00                	push   0x0
c001d57d:	6a 3f                	push   0x3f
c001d57f:	57                   	push   edi
c001d580:	56                   	push   esi
c001d581:	e8 86 1f 00 00       	call   c001f50c <__umoddi3>
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	40                   	inc    eax
c001d58a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d58e:	6a 00                	push   0x0
c001d590:	68 f0 03 00 00       	push   0x3f0
c001d595:	57                   	push   edi
c001d596:	56                   	push   esi
c001d597:	e8 70 1e 00 00       	call   c001f40c <__udivdi3>
c001d59c:	83 c4 10             	add    esp,0x10
c001d59f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d5a4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d5ab:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d5b0:	6a 00                	push   0x0
c001d5b2:	6a 3f                	push   0x3f
c001d5b4:	57                   	push   edi
c001d5b5:	31 ff                	xor    edi,edi
c001d5b7:	56                   	push   esi
c001d5b8:	e8 4f 1e 00 00       	call   c001f40c <__udivdi3>
c001d5bd:	89 c6                	mov    esi,eax
c001d5bf:	83 c4 10             	add    esp,0x10
c001d5c2:	83 e6 0f             	and    esi,0xf
c001d5c5:	eb 07                	jmp    c001d5ce <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d5c7:	31 f6                	xor    esi,esi
c001d5c9:	bf 02 00 00 00       	mov    edi,0x2
c001d5ce:	50                   	push   eax
c001d5cf:	6a 00                	push   0x0
c001d5d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d5d8:	50                   	push   eax
c001d5d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5dd:	e8 f8 f3 ff ff       	call   c001c9da <IDE::enableIRQs(unsigned char, bool)>
c001d5e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5e5:	e8 a2 fe ff ff       	call   c001d48c <ATA::readyForCommand()>
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	84 c0                	test   al,al
c001d5ef:	75 0a                	jne    c001d5fb <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d5f1:	be 01 00 00 00       	mov    esi,0x1
c001d5f6:	e9 79 02 00 00       	jmp    c001d874 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d5fb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d601:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d607:	c1 e0 04             	shl    eax,0x4
c001d60a:	09 c6                	or     esi,eax
c001d60c:	89 f8                	mov    eax,edi
c001d60e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d615:	84 c0                	test   al,al
c001d617:	75 05                	jne    c001d61e <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d619:	83 ce a0             	or     esi,0xffffffa0
c001d61c:	eb 03                	jmp    c001d621 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d61e:	83 ce e0             	or     esi,0xffffffe0
c001d621:	89 f0                	mov    eax,esi
c001d623:	0f b6 f0             	movzx  esi,al
c001d626:	56                   	push   esi
c001d627:	6a 06                	push   0x6
c001d629:	51                   	push   ecx
c001d62a:	52                   	push   edx
c001d62b:	e8 98 f1 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d630:	83 c4 10             	add    esp,0x10
c001d633:	6a 00                	push   0x0
c001d635:	6a 01                	push   0x1
c001d637:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d63e:	50                   	push   eax
c001d63f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d645:	e8 7e f1 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d64a:	89 f8                	mov    eax,edi
c001d64c:	83 c4 10             	add    esp,0x10
c001d64f:	3c 02                	cmp    al,0x2
c001d651:	75 6e                	jne    c001d6c1 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d653:	6a 00                	push   0x0
c001d655:	6a 08                	push   0x8
c001d657:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d65e:	50                   	push   eax
c001d65f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d665:	e8 5e f1 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d66a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d66f:	50                   	push   eax
c001d670:	6a 09                	push   0x9
c001d672:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d679:	50                   	push   eax
c001d67a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d680:	e8 43 f1 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d685:	83 c4 20             	add    esp,0x20
c001d688:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d68d:	50                   	push   eax
c001d68e:	6a 0a                	push   0xa
c001d690:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d697:	50                   	push   eax
c001d698:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d69e:	e8 25 f1 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6a3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d6a8:	50                   	push   eax
c001d6a9:	6a 0b                	push   0xb
c001d6ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6b2:	50                   	push   eax
c001d6b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6b9:	e8 0a f1 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6be:	83 c4 20             	add    esp,0x20
c001d6c1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d6c6:	50                   	push   eax
c001d6c7:	6a 02                	push   0x2
c001d6c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6d0:	50                   	push   eax
c001d6d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6d7:	e8 ec f0 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6dc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d6e1:	50                   	push   eax
c001d6e2:	6a 03                	push   0x3
c001d6e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6eb:	50                   	push   eax
c001d6ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6f2:	e8 d1 f0 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6f7:	83 c4 20             	add    esp,0x20
c001d6fa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d6ff:	50                   	push   eax
c001d700:	6a 04                	push   0x4
c001d702:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d709:	50                   	push   eax
c001d70a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d710:	e8 b3 f0 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d715:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d71a:	50                   	push   eax
c001d71b:	6a 05                	push   0x5
c001d71d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d724:	50                   	push   eax
c001d725:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d72b:	e8 98 f0 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d730:	83 c4 20             	add    esp,0x20
c001d733:	89 f8                	mov    eax,edi
c001d735:	3c 02                	cmp    al,0x2
c001d737:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d73c:	75 06                	jne    c001d744 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d73e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d742:	75 40                	jne    c001d784 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d744:	89 f8                	mov    eax,edi
c001d746:	3c 02                	cmp    al,0x2
c001d748:	0f 95 c1             	setne  cl
c001d74b:	74 0b                	je     c001d758 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d74d:	b8 30 00 00 00       	mov    eax,0x30
c001d752:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d756:	75 31                	jne    c001d789 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d758:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d75b:	83 f2 01             	xor    edx,0x1
c001d75e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d763:	74 09                	je     c001d76e <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d765:	b8 24 00 00 00       	mov    eax,0x24
c001d76a:	84 d2                	test   dl,dl
c001d76c:	75 1b                	jne    c001d789 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d76e:	84 c9                	test   cl,cl
c001d770:	0f 84 7b fe ff ff    	je     c001d5f1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d776:	b8 20 00 00 00       	mov    eax,0x20
c001d77b:	84 d2                	test   dl,dl
c001d77d:	75 0a                	jne    c001d789 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d77f:	e9 6d fe ff ff       	jmp    c001d5f1 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d784:	b8 34 00 00 00       	mov    eax,0x34
c001d789:	50                   	push   eax
c001d78a:	6a 07                	push   0x7
c001d78c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d793:	50                   	push   eax
c001d794:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d79a:	e8 29 f0 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d79f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d7a3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d7a7:	83 c4 10             	add    esp,0x10
c001d7aa:	85 f6                	test   esi,esi
c001d7ac:	0f 84 a9 00 00 00    	je     c001d85b <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d7b2:	50                   	push   eax
c001d7b3:	6a 01                	push   0x1
c001d7b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7bc:	50                   	push   eax
c001d7bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7c3:	e8 b6 fb ff ff       	call   c001d37e <IDE::polling(unsigned char, unsigned int)>
c001d7c8:	83 c4 10             	add    esp,0x10
c001d7cb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d7d1:	84 c0                	test   al,al
c001d7d3:	74 1d                	je     c001d7f2 <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d7d5:	0f b6 f0             	movzx  esi,al
c001d7d8:	56                   	push   esi
c001d7d9:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d7e0:	0f b6 d2             	movzx  edx,dl
c001d7e3:	50                   	push   eax
c001d7e4:	52                   	push   edx
c001d7e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7eb:	e8 f8 f9 ff ff       	call   c001d1e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d7f0:	eb 7f                	jmp    c001d871 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d7f2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d7f7:	74 41                	je     c001d83a <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d7f9:	31 c9                	xor    ecx,ecx
c001d7fb:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d7ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d803:	50                   	push   eax
c001d804:	50                   	push   eax
c001d805:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d80c:	50                   	push   eax
c001d80d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d813:	e8 9e ef ff ff       	call   c001c7b6 <IDE::getBase(unsigned char)>
c001d818:	89 c2                	mov    edx,eax
c001d81a:	89 e8                	mov    eax,ebp
c001d81c:	66 ef                	out    dx,ax
c001d81e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d822:	83 c4 10             	add    esp,0x10
c001d825:	41                   	inc    ecx
c001d826:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d82c:	75 cd                	jne    c001d7fb <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d82e:	4e                   	dec    esi
c001d82f:	81 c7 00 02 00 00    	add    edi,0x200
c001d835:	e9 70 ff ff ff       	jmp    c001d7aa <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d83a:	51                   	push   ecx
c001d83b:	51                   	push   ecx
c001d83c:	0f b6 d2             	movzx  edx,dl
c001d83f:	52                   	push   edx
c001d840:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d846:	e8 6b ef ff ff       	call   c001c7b6 <IDE::getBase(unsigned char)>
c001d84b:	b9 00 01 00 00       	mov    ecx,0x100
c001d850:	89 c2                	mov    edx,eax
c001d852:	fc                   	cld    
c001d853:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d856:	83 c4 10             	add    esp,0x10
c001d859:	eb d3                	jmp    c001d82e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d85b:	31 f6                	xor    esi,esi
c001d85d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d861:	74 11                	je     c001d874 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d863:	50                   	push   eax
c001d864:	50                   	push   eax
c001d865:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d86a:	50                   	push   eax
c001d86b:	53                   	push   ebx
c001d86c:	e8 d1 fb ff ff       	call   c001d442 <ATA::flush(bool)>
c001d871:	83 c4 10             	add    esp,0x10
c001d874:	83 c4 2c             	add    esp,0x2c
c001d877:	89 f0                	mov    eax,esi
c001d879:	5b                   	pop    ebx
c001d87a:	5e                   	pop    esi
c001d87b:	5f                   	pop    edi
c001d87c:	5d                   	pop    ebp
c001d87d:	c3                   	ret    

c001d87e <ATA::read(unsigned long long, int, void*)>:
c001d87e:	57                   	push   edi
c001d87f:	b8 04 00 00 00       	mov    eax,0x4
c001d884:	56                   	push   esi
c001d885:	53                   	push   ebx
c001d886:	83 ec 10             	sub    esp,0x10
c001d889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d88d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d891:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d895:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d899:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d89c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d8a2:	77 3b                	ja     c001d8df <ATA::read(unsigned long long, int, void*)+0x61>
c001d8a4:	b8 06 00 00 00       	mov    eax,0x6
c001d8a9:	85 d2                	test   edx,edx
c001d8ab:	74 32                	je     c001d8df <ATA::read(unsigned long long, int, void*)+0x61>
c001d8ad:	50                   	push   eax
c001d8ae:	50                   	push   eax
c001d8af:	6a 00                	push   0x0
c001d8b1:	52                   	push   edx
c001d8b2:	53                   	push   ebx
c001d8b3:	57                   	push   edi
c001d8b4:	56                   	push   esi
c001d8b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8b9:	e8 1e fc ff ff       	call   c001d4dc <ATA::access(unsigned long long, int, void*, bool)>
c001d8be:	83 c4 20             	add    esp,0x20
c001d8c1:	85 c0                	test   eax,eax
c001d8c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8c7:	75 11                	jne    c001d8da <ATA::read(unsigned long long, int, void*)+0x5c>
c001d8c9:	01 1d 64 63 02 c0    	add    DWORD PTR ds:0xc0026364,ebx
c001d8cf:	e8 20 f7 fe ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c001d8d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8d8:	eb 05                	jmp    c001d8df <ATA::read(unsigned long long, int, void*)+0x61>
c001d8da:	b8 01 00 00 00       	mov    eax,0x1
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	5b                   	pop    ebx
c001d8e3:	5e                   	pop    esi
c001d8e4:	5f                   	pop    edi
c001d8e5:	c3                   	ret    

c001d8e6 <ATA::write(unsigned long long, int, void*)>:
c001d8e6:	57                   	push   edi
c001d8e7:	b8 04 00 00 00       	mov    eax,0x4
c001d8ec:	56                   	push   esi
c001d8ed:	53                   	push   ebx
c001d8ee:	83 ec 10             	sub    esp,0x10
c001d8f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d8f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d8f9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d8fd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d901:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d904:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d90a:	77 3b                	ja     c001d947 <ATA::write(unsigned long long, int, void*)+0x61>
c001d90c:	b8 06 00 00 00       	mov    eax,0x6
c001d911:	85 d2                	test   edx,edx
c001d913:	74 32                	je     c001d947 <ATA::write(unsigned long long, int, void*)+0x61>
c001d915:	50                   	push   eax
c001d916:	50                   	push   eax
c001d917:	6a 01                	push   0x1
c001d919:	52                   	push   edx
c001d91a:	53                   	push   ebx
c001d91b:	57                   	push   edi
c001d91c:	56                   	push   esi
c001d91d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d921:	e8 b6 fb ff ff       	call   c001d4dc <ATA::access(unsigned long long, int, void*, bool)>
c001d926:	83 c4 20             	add    esp,0x20
c001d929:	85 c0                	test   eax,eax
c001d92b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d92f:	75 11                	jne    c001d942 <ATA::write(unsigned long long, int, void*)+0x5c>
c001d931:	01 1d 60 63 02 c0    	add    DWORD PTR ds:0xc0026360,ebx
c001d937:	e8 b8 f6 fe ff       	call   c000cff4 <VgaText::updateDiskUsage()>
c001d93c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d940:	eb 05                	jmp    c001d947 <ATA::write(unsigned long long, int, void*)+0x61>
c001d942:	b8 01 00 00 00       	mov    eax,0x1
c001d947:	83 c4 10             	add    esp,0x10
c001d94a:	5b                   	pop    ebx
c001d94b:	5e                   	pop    esi
c001d94c:	5f                   	pop    edi
c001d94d:	c3                   	ret    

c001d94e <ATA::detectCHS()>:
c001d94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d952:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d958:	c1 e0 06             	shl    eax,0x6
c001d95b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d961:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d96b:	c7 44 24 04 e3 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc00235e3
c001d973:	e9 10 80 ff ff       	jmp    c0015988 <Krnl::panic(char const*)>

c001d978 <ATA::open(int, int, void*)>:
c001d978:	53                   	push   ebx
c001d979:	83 ec 08             	sub    esp,0x8
c001d97c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d980:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d984:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d988:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d98e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d994:	c1 e0 06             	shl    eax,0x6
c001d997:	01 d0                	add    eax,edx
c001d999:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d9a0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d9a6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d9ad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d9b7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d9bd:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d9c4:	75 0c                	jne    c001d9d2 <ATA::open(int, int, void*)+0x5a>
c001d9c6:	83 ec 0c             	sub    esp,0xc
c001d9c9:	53                   	push   ebx
c001d9ca:	e8 7f ff ff ff       	call   c001d94e <ATA::detectCHS()>
c001d9cf:	83 c4 10             	add    esp,0x10
c001d9d2:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d9d8:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d9de:	c1 e0 06             	shl    eax,0x6
c001d9e1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d9e8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9f2:	d1 e8                	shr    eax,1
c001d9f4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d9fa:	6a 04                	push   0x4
c001d9fc:	6a 0c                	push   0xc
c001d9fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da05:	50                   	push   eax
c001da06:	52                   	push   edx
c001da07:	e8 bc ed ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da0c:	90                   	nop
c001da0d:	90                   	nop
c001da0e:	6a 00                	push   0x0
c001da10:	6a 0c                	push   0xc
c001da12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da19:	50                   	push   eax
c001da1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da20:	e8 a3 ed ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da25:	83 c4 14             	add    esp,0x14
c001da28:	53                   	push   ebx
c001da29:	e8 ae 2f ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001da2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da31:	e8 82 4f ff ff       	call   c00129b8 <createPartitionsForDisk(PhysicalDisk*)>
c001da36:	83 c4 18             	add    esp,0x18
c001da39:	31 c0                	xor    eax,eax
c001da3b:	5b                   	pop    ebx
c001da3c:	c3                   	ret    
c001da3d:	90                   	nop

c001da3e <ATAPI::write(unsigned long long, int, void*)>:
c001da3e:	b8 03 00 00 00       	mov    eax,0x3
c001da43:	c3                   	ret    

c001da44 <ATAPI::close(int, int, void*)>:
c001da44:	83 ec 0c             	sub    esp,0xc
c001da47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da51:	85 c0                	test   eax,eax
c001da53:	74 0c                	je     c001da61 <ATAPI::close(int, int, void*)+0x1d>
c001da55:	83 ec 0c             	sub    esp,0xc
c001da58:	8b 10                	mov    edx,DWORD PTR [eax]
c001da5a:	50                   	push   eax
c001da5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001da5e:	83 c4 10             	add    esp,0x10
c001da61:	31 c0                	xor    eax,eax
c001da63:	83 c4 0c             	add    esp,0xc
c001da66:	c3                   	ret    
c001da67:	90                   	nop

c001da68 <ATAPI::ATAPI()>:
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da6f:	83 ec 04             	sub    esp,0x4
c001da72:	68 00 08 00 00       	push   0x800
c001da77:	68 2c 36 02 c0       	push   0xc002362c
c001da7c:	50                   	push   eax
c001da7d:	e8 f2 2e ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001da82:	83 c4 10             	add    esp,0x10
c001da85:	ba 6c 36 02 c0       	mov    edx,0xc002366c
c001da8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da8e:	89 10                	mov    DWORD PTR [eax],edx
c001da90:	90                   	nop
c001da91:	83 c4 0c             	add    esp,0xc
c001da94:	c3                   	ret    
c001da95:	90                   	nop

c001da96 <ATAPI::readyForCommand()>:
c001da96:	56                   	push   esi
c001da97:	53                   	push   ebx
c001da98:	31 db                	xor    ebx,ebx
c001da9a:	50                   	push   eax
c001da9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da9f:	50                   	push   eax
c001daa0:	6a 0c                	push   0xc
c001daa2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001daa9:	50                   	push   eax
c001daaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dab0:	e8 d3 ed ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001dab5:	83 c4 10             	add    esp,0x10
c001dab8:	a8 88                	test   al,0x88
c001daba:	74 23                	je     c001dadf <ATAPI::readyForCommand()+0x49>
c001dabc:	43                   	inc    ebx
c001dabd:	83 fb 63             	cmp    ebx,0x63
c001dac0:	7e dd                	jle    c001da9f <ATAPI::readyForCommand()+0x9>
c001dac2:	51                   	push   ecx
c001dac3:	51                   	push   ecx
c001dac4:	6a 00                	push   0x0
c001dac6:	68 40 42 0f 00       	push   0xf4240
c001dacb:	e8 03 b4 ff ff       	call   c0018ed3 <nanoSleep(unsigned long long)>
c001dad0:	83 c4 10             	add    esp,0x10
c001dad3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dad9:	75 c4                	jne    c001da9f <ATAPI::readyForCommand()+0x9>
c001dadb:	31 c0                	xor    eax,eax
c001dadd:	eb 02                	jmp    c001dae1 <ATAPI::readyForCommand()+0x4b>
c001dadf:	b0 01                	mov    al,0x1
c001dae1:	5a                   	pop    edx
c001dae2:	5b                   	pop    ebx
c001dae3:	5e                   	pop    esi
c001dae4:	c3                   	ret    
c001dae5:	90                   	nop

c001dae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dae6:	55                   	push   ebp
c001dae7:	57                   	push   edi
c001dae8:	56                   	push   esi
c001dae9:	53                   	push   ebx
c001daea:	83 ec 20             	sub    esp,0x20
c001daed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001daf1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001daf5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daf9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dafd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001db01:	6a 01                	push   0x1
c001db03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db0a:	50                   	push   eax
c001db0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db11:	e8 c4 ee ff ff       	call   c001c9da <IDE::enableIRQs(unsigned char, bool)>
c001db16:	5e                   	pop    esi
c001db17:	58                   	pop    eax
c001db18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db1f:	50                   	push   eax
c001db20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db26:	e8 77 ec ff ff       	call   c001c7a2 <IDE::prepareInterrupt(unsigned char)>
c001db2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001db2e:	e8 63 ff ff ff       	call   c001da96 <ATAPI::readyForCommand()>
c001db33:	83 c4 10             	add    esp,0x10
c001db36:	84 c0                	test   al,al
c001db38:	75 0a                	jne    c001db44 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001db3a:	bb 01 00 00 00       	mov    ebx,0x1
c001db3f:	e9 57 02 00 00       	jmp    c001dd9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001db44:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001db4a:	c1 e0 04             	shl    eax,0x4
c001db4d:	0f b6 c0             	movzx  eax,al
c001db50:	50                   	push   eax
c001db51:	6a 06                	push   0x6
c001db53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db5a:	50                   	push   eax
c001db5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db61:	e8 62 ec ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db66:	6a 00                	push   0x0
c001db68:	6a 01                	push   0x1
c001db6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db71:	50                   	push   eax
c001db72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db78:	e8 4b ec ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db7d:	83 c4 20             	add    esp,0x20
c001db80:	0f b6 c3             	movzx  eax,bl
c001db83:	50                   	push   eax
c001db84:	6a 04                	push   0x4
c001db86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001db8d:	50                   	push   eax
c001db8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001db94:	0f b6 df             	movzx  ebx,bh
c001db97:	e8 2c ec ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db9c:	53                   	push   ebx
c001db9d:	6a 05                	push   0x5
c001db9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dba6:	50                   	push   eax
c001dba7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbad:	e8 16 ec ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbb2:	83 c4 20             	add    esp,0x20
c001dbb5:	68 a0 00 00 00       	push   0xa0
c001dbba:	6a 07                	push   0x7
c001dbbc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbc3:	50                   	push   eax
c001dbc4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbca:	e8 f9 eb ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbcf:	83 c4 0c             	add    esp,0xc
c001dbd2:	6a 01                	push   0x1
c001dbd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dbdb:	50                   	push   eax
c001dbdc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dbe2:	e8 97 f7 ff ff       	call   c001d37e <IDE::polling(unsigned char, unsigned int)>
c001dbe7:	83 c4 10             	add    esp,0x10
c001dbea:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dbf0:	84 c0                	test   al,al
c001dbf2:	74 23                	je     c001dc17 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dbf4:	0f b6 d8             	movzx  ebx,al
c001dbf7:	53                   	push   ebx
c001dbf8:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dbff:	0f b6 d2             	movzx  edx,dl
c001dc02:	50                   	push   eax
c001dc03:	52                   	push   edx
c001dc04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc0a:	e8 d9 f5 ff ff       	call   c001d1e8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dc0f:	83 c4 10             	add    esp,0x10
c001dc12:	e9 84 01 00 00       	jmp    c001dd9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc17:	53                   	push   ebx
c001dc18:	53                   	push   ebx
c001dc19:	0f b6 d2             	movzx  edx,dl
c001dc1c:	52                   	push   edx
c001dc1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc23:	e8 8e eb ff ff       	call   c001c7b6 <IDE::getBase(unsigned char)>
c001dc28:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dc2c:	b9 06 00 00 00       	mov    ecx,0x6
c001dc31:	89 c2                	mov    edx,eax
c001dc33:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dc36:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dc43:	85 db                	test   ebx,ebx
c001dc45:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dc4c:	0f 84 ec 00 00 00    	je     c001dd3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dc52:	51                   	push   ecx
c001dc53:	51                   	push   ecx
c001dc54:	52                   	push   edx
c001dc55:	50                   	push   eax
c001dc56:	e8 db ec ff ff       	call   c001c936 <IDE::waitInterrupt(unsigned char)>
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	84 c0                	test   al,al
c001dc60:	0f 84 d4 fe ff ff    	je     c001db3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dc66:	56                   	push   esi
c001dc67:	56                   	push   esi
c001dc68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc6f:	50                   	push   eax
c001dc70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc76:	e8 27 eb ff ff       	call   c001c7a2 <IDE::prepareInterrupt(unsigned char)>
c001dc7b:	83 c4 0c             	add    esp,0xc
c001dc7e:	6a 04                	push   0x4
c001dc80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc87:	50                   	push   eax
c001dc88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc8e:	e8 f5 eb ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001dc93:	83 c4 0c             	add    esp,0xc
c001dc96:	6a 05                	push   0x5
c001dc98:	89 c6                	mov    esi,eax
c001dc9a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dca1:	50                   	push   eax
c001dca2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dca8:	e8 db eb ff ff       	call   c001c888 <IDE::read(unsigned char, unsigned char)>
c001dcad:	89 f1                	mov    ecx,esi
c001dcaf:	0f b6 c0             	movzx  eax,al
c001dcb2:	c1 e0 08             	shl    eax,0x8
c001dcb5:	0f b6 f1             	movzx  esi,cl
c001dcb8:	09 c6                	or     esi,eax
c001dcba:	d1 fe                	sar    esi,1
c001dcbc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001dcc0:	83 c4 10             	add    esp,0x10
c001dcc3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001dcc8:	74 41                	je     c001dd0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001dcca:	31 c9                	xor    ecx,ecx
c001dccc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dcd2:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dcd6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dcdd:	75 0a                	jne    c001dce9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dcdf:	01 c9                	add    ecx,ecx
c001dce1:	01 cd                	add    ebp,ecx
c001dce3:	4b                   	dec    ebx
c001dce4:	e9 54 ff ff ff       	jmp    c001dc3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dce9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dcee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dcf2:	51                   	push   ecx
c001dcf3:	51                   	push   ecx
c001dcf4:	52                   	push   edx
c001dcf5:	50                   	push   eax
c001dcf6:	e8 bb ea ff ff       	call   c001c7b6 <IDE::getBase(unsigned char)>
c001dcfb:	89 c2                	mov    edx,eax
c001dcfd:	89 f0                	mov    eax,esi
c001dcff:	66 ef                	out    dx,ax
c001dd01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd05:	83 c4 10             	add    esp,0x10
c001dd08:	41                   	inc    ecx
c001dd09:	eb c1                	jmp    c001dccc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001dd0b:	31 f6                	xor    esi,esi
c001dd0d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd13:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001dd17:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd1e:	75 06                	jne    c001dd26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001dd20:	01 f6                	add    esi,esi
c001dd22:	01 f5                	add    ebp,esi
c001dd24:	eb bd                	jmp    c001dce3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001dd26:	51                   	push   ecx
c001dd27:	51                   	push   ecx
c001dd28:	52                   	push   edx
c001dd29:	50                   	push   eax
c001dd2a:	e8 87 ea ff ff       	call   c001c7b6 <IDE::getBase(unsigned char)>
c001dd2f:	89 c2                	mov    edx,eax
c001dd31:	66 ed                	in     ax,dx
c001dd33:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	46                   	inc    esi
c001dd3c:	eb cf                	jmp    c001dd0d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001dd3e:	51                   	push   ecx
c001dd3f:	51                   	push   ecx
c001dd40:	52                   	push   edx
c001dd41:	50                   	push   eax
c001dd42:	e8 ef eb ff ff       	call   c001c936 <IDE::waitInterrupt(unsigned char)>
c001dd47:	83 c4 10             	add    esp,0x10
c001dd4a:	84 c0                	test   al,al
c001dd4c:	0f 84 e8 fd ff ff    	je     c001db3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd52:	52                   	push   edx
c001dd53:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dd58:	52                   	push   edx
c001dd59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd60:	50                   	push   eax
c001dd61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd67:	e8 36 ea ff ff       	call   c001c7a2 <IDE::prepareInterrupt(unsigned char)>
c001dd6c:	83 c4 10             	add    esp,0x10
c001dd6f:	50                   	push   eax
c001dd70:	50                   	push   eax
c001dd71:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd78:	50                   	push   eax
c001dd79:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd7f:	e8 32 ea ff ff       	call   c001c7b6 <IDE::getBase(unsigned char)>
c001dd84:	8d 50 07             	lea    edx,[eax+0x7]
c001dd87:	ec                   	in     al,dx
c001dd88:	83 c4 10             	add    esp,0x10
c001dd8b:	a8 88                	test   al,0x88
c001dd8d:	74 0a                	je     c001dd99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dd8f:	4b                   	dec    ebx
c001dd90:	75 dd                	jne    c001dd6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dd92:	bb 02 00 00 00       	mov    ebx,0x2
c001dd97:	eb 02                	jmp    c001dd9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd99:	31 db                	xor    ebx,ebx
c001dd9b:	83 c4 1c             	add    esp,0x1c
c001dd9e:	89 d8                	mov    eax,ebx
c001dda0:	5b                   	pop    ebx
c001dda1:	5e                   	pop    esi
c001dda2:	5f                   	pop    edi
c001dda3:	5d                   	pop    ebp
c001dda4:	c3                   	ret    
c001dda5:	90                   	nop

c001dda6 <ATAPI::diskRemoved()>:
c001dda6:	83 ec 18             	sub    esp,0x18
c001dda9:	68 37 36 02 c0       	push   0xc0023637
c001ddae:	e8 a6 13 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ddb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddb7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ddbe:	83 c4 1c             	add    esp,0x1c
c001ddc1:	c3                   	ret    

c001ddc2 <ATAPI::eject()>:
c001ddc2:	57                   	push   edi
c001ddc3:	b9 03 00 00 00       	mov    ecx,0x3
c001ddc8:	53                   	push   ebx
c001ddc9:	83 ec 14             	sub    esp,0x14
c001ddcc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ddd0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ddd4:	fc                   	cld    
c001ddd5:	31 c0                	xor    eax,eax
c001ddd7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ddd9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ddde:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dde3:	50                   	push   eax
c001dde4:	50                   	push   eax
c001dde5:	6a 00                	push   0x0
c001dde7:	6a 00                	push   0x0
c001dde9:	6a 00                	push   0x0
c001ddeb:	6a 02                	push   0x2
c001dded:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ddf1:	50                   	push   eax
c001ddf2:	53                   	push   ebx
c001ddf3:	e8 ee fc ff ff       	call   c001dae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ddf8:	83 c4 14             	add    esp,0x14
c001ddfb:	53                   	push   ebx
c001ddfc:	e8 a5 ff ff ff       	call   c001dda6 <ATAPI::diskRemoved()>
c001de01:	83 c4 24             	add    esp,0x24
c001de04:	5b                   	pop    ebx
c001de05:	5f                   	pop    edi
c001de06:	c3                   	ret    
c001de07:	90                   	nop

c001de08 <ATAPI::diskInserted()>:
c001de08:	53                   	push   ebx
c001de09:	83 ec 14             	sub    esp,0x14
c001de0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001de10:	68 4d 36 02 c0       	push   0xc002364d
c001de15:	e8 3f 13 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001de1a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001de21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001de24:	e8 b3 2b ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001de29:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001de2d:	83 c4 18             	add    esp,0x18
c001de30:	5b                   	pop    ebx
c001de31:	e9 82 4b ff ff       	jmp    c00129b8 <createPartitionsForDisk(PhysicalDisk*)>

c001de36 <ATAPI::detectMedia()>:
c001de36:	56                   	push   esi
c001de37:	53                   	push   ebx
c001de38:	83 ec 28             	sub    esp,0x28
c001de3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de3f:	6a 0c                	push   0xc
c001de41:	6a 00                	push   0x0
c001de43:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001de47:	56                   	push   esi
c001de48:	e8 6d 28 fe ff       	call   c00006ba <memset>
c001de4d:	58                   	pop    eax
c001de4e:	5a                   	pop    edx
c001de4f:	6a 00                	push   0x0
c001de51:	6a 00                	push   0x0
c001de53:	6a 00                	push   0x0
c001de55:	6a 00                	push   0x0
c001de57:	56                   	push   esi
c001de58:	53                   	push   ebx
c001de59:	e8 88 fc ff ff       	call   c001dae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de5e:	83 c4 1c             	add    esp,0x1c
c001de61:	6a 0c                	push   0xc
c001de63:	6a 00                	push   0x0
c001de65:	56                   	push   esi
c001de66:	e8 4f 28 fe ff       	call   c00006ba <memset>
c001de6b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001de70:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001de75:	59                   	pop    ecx
c001de76:	58                   	pop    eax
c001de77:	6a 01                	push   0x1
c001de79:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001de7d:	50                   	push   eax
c001de7e:	6a 00                	push   0x0
c001de80:	6a 12                	push   0x12
c001de82:	56                   	push   esi
c001de83:	53                   	push   ebx
c001de84:	e8 5d fc ff ff       	call   c001dae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001de89:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001de8d:	83 c4 20             	add    esp,0x20
c001de90:	83 e0 7f             	and    eax,0x7f
c001de93:	3c 70                	cmp    al,0x70
c001de95:	74 15                	je     c001deac <ATAPI::detectMedia()+0x76>
c001de97:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001de9e:	75 0c                	jne    c001deac <ATAPI::detectMedia()+0x76>
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	53                   	push   ebx
c001dea4:	e8 5f ff ff ff       	call   c001de08 <ATAPI::diskInserted()>
c001dea9:	83 c4 10             	add    esp,0x10
c001deac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001deb0:	83 e0 0f             	and    eax,0xf
c001deb3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001deb8:	75 18                	jne    c001ded2 <ATAPI::detectMedia()+0x9c>
c001deba:	3c 02                	cmp    al,0x2
c001debc:	75 14                	jne    c001ded2 <ATAPI::detectMedia()+0x9c>
c001debe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dec5:	74 24                	je     c001deeb <ATAPI::detectMedia()+0xb5>
c001dec7:	83 ec 0c             	sub    esp,0xc
c001deca:	53                   	push   ebx
c001decb:	e8 d6 fe ff ff       	call   c001dda6 <ATAPI::diskRemoved()>
c001ded0:	eb 16                	jmp    c001dee8 <ATAPI::detectMedia()+0xb2>
c001ded2:	84 c0                	test   al,al
c001ded4:	75 15                	jne    c001deeb <ATAPI::detectMedia()+0xb5>
c001ded6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dedd:	75 0c                	jne    c001deeb <ATAPI::detectMedia()+0xb5>
c001dedf:	83 ec 0c             	sub    esp,0xc
c001dee2:	53                   	push   ebx
c001dee3:	e8 20 ff ff ff       	call   c001de08 <ATAPI::diskInserted()>
c001dee8:	83 c4 10             	add    esp,0x10
c001deeb:	83 c4 24             	add    esp,0x24
c001deee:	5b                   	pop    ebx
c001deef:	5e                   	pop    esi
c001def0:	c3                   	ret    
c001def1:	90                   	nop

c001def2 <ATAPI::open(int, int, void*)>:
c001def2:	53                   	push   ebx
c001def3:	83 ec 08             	sub    esp,0x8
c001def6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001defa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001defe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df02:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001df08:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001df0e:	c1 e0 06             	shl    eax,0x6
c001df11:	01 d0                	add    eax,edx
c001df13:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001df1a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001df20:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001df27:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001df31:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001df37:	6a 04                	push   0x4
c001df39:	6a 0c                	push   0xc
c001df3b:	51                   	push   ecx
c001df3c:	52                   	push   edx
c001df3d:	e8 86 e8 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df42:	90                   	nop
c001df43:	90                   	nop
c001df44:	6a 00                	push   0x0
c001df46:	6a 0c                	push   0xc
c001df48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df4f:	50                   	push   eax
c001df50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df56:	e8 6d e8 ff ff       	call   c001c7c8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df5b:	83 c4 14             	add    esp,0x14
c001df5e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001df65:	53                   	push   ebx
c001df66:	e8 cb fe ff ff       	call   c001de36 <ATAPI::detectMedia()>
c001df6b:	83 c4 18             	add    esp,0x18
c001df6e:	31 c0                	xor    eax,eax
c001df70:	5b                   	pop    ebx
c001df71:	c3                   	ret    

c001df72 <ATAPI::read(unsigned long long, int, void*)>:
c001df72:	55                   	push   ebp
c001df73:	57                   	push   edi
c001df74:	56                   	push   esi
c001df75:	53                   	push   ebx
c001df76:	83 ec 1c             	sub    esp,0x1c
c001df79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df7d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001df81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001df85:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df8c:	74 3c                	je     c001dfca <ATAPI::read(unsigned long long, int, void*)+0x58>
c001df8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001df92:	b9 03 00 00 00       	mov    ecx,0x3
c001df97:	fc                   	cld    
c001df98:	31 c0                	xor    eax,eax
c001df9a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df9c:	0f ce                	bswap  esi
c001df9e:	89 e8                	mov    eax,ebp
c001dfa0:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dfa5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dfa9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dfad:	50                   	push   eax
c001dfae:	50                   	push   eax
c001dfaf:	55                   	push   ebp
c001dfb0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dfb4:	c1 e5 0b             	shl    ebp,0xb
c001dfb7:	6a 00                	push   0x0
c001dfb9:	55                   	push   ebp
c001dfba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dfbe:	50                   	push   eax
c001dfbf:	53                   	push   ebx
c001dfc0:	e8 21 fb ff ff       	call   c001dae6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dfc5:	83 c4 20             	add    esp,0x20
c001dfc8:	eb 1a                	jmp    c001dfe4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dfca:	83 ec 0c             	sub    esp,0xc
c001dfcd:	53                   	push   ebx
c001dfce:	e8 63 fe ff ff       	call   c001de36 <ATAPI::detectMedia()>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfdd:	75 af                	jne    c001df8e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dfdf:	b8 02 00 00 00       	mov    eax,0x2
c001dfe4:	83 c4 1c             	add    esp,0x1c
c001dfe7:	5b                   	pop    ebx
c001dfe8:	5e                   	pop    esi
c001dfe9:	5f                   	pop    edi
c001dfea:	5d                   	pop    ebp
c001dfeb:	c3                   	ret    

c001dfec <AVX::open(int, int, void*)>:
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	e8 94 10 00 00       	call   c001f088 <avxInit>
c001dff4:	b8 00 00 00 00       	mov    eax,0x0
c001dff9:	83 c4 0c             	add    esp,0xc
c001dffc:	c3                   	ret    
c001dffd:	90                   	nop

c001dffe <AVX::close(int, int, void*)>:
c001dffe:	83 ec 0c             	sub    esp,0xc
c001e001:	e8 83 10 00 00       	call   c001f089 <avxClose>
c001e006:	b8 00 00 00 00       	mov    eax,0x0
c001e00b:	83 c4 0c             	add    esp,0xc
c001e00e:	c3                   	ret    
c001e00f:	90                   	nop

c001e010 <AVX::available()>:
c001e010:	83 ec 0c             	sub    esp,0xc
c001e013:	e8 68 10 00 00       	call   c001f080 <avxDetect>
c001e018:	85 c0                	test   eax,eax
c001e01a:	0f 95 c0             	setne  al
c001e01d:	83 c4 0c             	add    esp,0xc
c001e020:	c3                   	ret    
c001e021:	90                   	nop

c001e022 <AVX::save(void*)>:
c001e022:	83 ec 0c             	sub    esp,0xc
c001e025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e029:	83 ec 0c             	sub    esp,0xc
c001e02c:	50                   	push   eax
c001e02d:	e8 54 10 00 00       	call   c001f086 <avxSave>
c001e032:	83 c4 10             	add    esp,0x10
c001e035:	90                   	nop
c001e036:	83 c4 0c             	add    esp,0xc
c001e039:	c3                   	ret    

c001e03a <AVX::load(void*)>:
c001e03a:	83 ec 0c             	sub    esp,0xc
c001e03d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e041:	83 ec 0c             	sub    esp,0xc
c001e044:	50                   	push   eax
c001e045:	e8 3d 10 00 00       	call   c001f087 <avxLoad>
c001e04a:	83 c4 10             	add    esp,0x10
c001e04d:	90                   	nop
c001e04e:	83 c4 0c             	add    esp,0xc
c001e051:	c3                   	ret    

c001e052 <AVX::AVX()>:
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e059:	83 ec 08             	sub    esp,0x8
c001e05c:	68 98 36 02 c0       	push   0xc0023698
c001e061:	50                   	push   eax
c001e062:	e8 eb 29 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001e06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e073:	89 10                	mov    DWORD PTR [eax],edx
c001e075:	90                   	nop
c001e076:	83 c4 0c             	add    esp,0xc
c001e079:	c3                   	ret    

c001e07a <MMX::available()>:
c001e07a:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001e07f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e085:	83 e0 20             	and    eax,0x20
c001e088:	84 c0                	test   al,al
c001e08a:	0f 95 c0             	setne  al
c001e08d:	c3                   	ret    

c001e08e <MMX::open(int, int, void*)>:
c001e08e:	83 ec 0c             	sub    esp,0xc
c001e091:	e8 66 10 00 00       	call   c001f0fc <x87Init>
c001e096:	b8 00 00 00 00       	mov    eax,0x0
c001e09b:	83 c4 0c             	add    esp,0xc
c001e09e:	c3                   	ret    
c001e09f:	90                   	nop

c001e0a0 <MMX::close(int, int, void*)>:
c001e0a0:	83 ec 0c             	sub    esp,0xc
c001e0a3:	e8 6e 10 00 00       	call   c001f116 <x87Close>
c001e0a8:	b8 00 00 00 00       	mov    eax,0x0
c001e0ad:	83 c4 0c             	add    esp,0xc
c001e0b0:	c3                   	ret    
c001e0b1:	90                   	nop

c001e0b2 <MMX::save(void*)>:
c001e0b2:	83 ec 0c             	sub    esp,0xc
c001e0b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0b9:	83 ec 0c             	sub    esp,0xc
c001e0bc:	50                   	push   eax
c001e0bd:	e8 2f 10 00 00       	call   c001f0f1 <x87Save>
c001e0c2:	83 c4 10             	add    esp,0x10
c001e0c5:	90                   	nop
c001e0c6:	83 c4 0c             	add    esp,0xc
c001e0c9:	c3                   	ret    

c001e0ca <MMX::load(void*)>:
c001e0ca:	83 ec 0c             	sub    esp,0xc
c001e0cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0d1:	83 ec 0c             	sub    esp,0xc
c001e0d4:	50                   	push   eax
c001e0d5:	e8 1d 10 00 00       	call   c001f0f7 <x87Load>
c001e0da:	83 c4 10             	add    esp,0x10
c001e0dd:	90                   	nop
c001e0de:	83 c4 0c             	add    esp,0xc
c001e0e1:	c3                   	ret    

c001e0e2 <MMX::MMX()>:
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e9:	83 ec 08             	sub    esp,0x8
c001e0ec:	68 d8 36 02 c0       	push   0xc00236d8
c001e0f1:	50                   	push   eax
c001e0f2:	e8 5b 29 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e0f7:	83 c4 10             	add    esp,0x10
c001e0fa:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c001e0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e103:	89 10                	mov    DWORD PTR [eax],edx
c001e105:	90                   	nop
c001e106:	83 c4 0c             	add    esp,0xc
c001e109:	c3                   	ret    

c001e10a <SSE::open(int, int, void*)>:
c001e10a:	83 ec 0c             	sub    esp,0xc
c001e10d:	e8 a5 0f 00 00       	call   c001f0b7 <sseInit>
c001e112:	b8 00 00 00 00       	mov    eax,0x0
c001e117:	83 c4 0c             	add    esp,0xc
c001e11a:	c3                   	ret    
c001e11b:	90                   	nop

c001e11c <SSE::close(int, int, void*)>:
c001e11c:	83 ec 0c             	sub    esp,0xc
c001e11f:	e8 a3 0f 00 00       	call   c001f0c7 <sseClose>
c001e124:	b8 00 00 00 00       	mov    eax,0x0
c001e129:	83 c4 0c             	add    esp,0xc
c001e12c:	c3                   	ret    
c001e12d:	90                   	nop

c001e12e <SSE::available()>:
c001e12e:	83 ec 1c             	sub    esp,0x1c
c001e131:	e8 5a 0f 00 00       	call   c001f090 <sseDetect>
c001e136:	85 c0                	test   eax,eax
c001e138:	0f 95 c0             	setne  al
c001e13b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e13f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e143:	83 c4 1c             	add    esp,0x1c
c001e146:	c3                   	ret    
c001e147:	90                   	nop

c001e148 <SSE::save(void*)>:
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e14f:	83 ec 0c             	sub    esp,0xc
c001e152:	50                   	push   eax
c001e153:	e8 53 0f 00 00       	call   c001f0ab <sseSave>
c001e158:	83 c4 10             	add    esp,0x10
c001e15b:	90                   	nop
c001e15c:	83 c4 0c             	add    esp,0xc
c001e15f:	c3                   	ret    

c001e160 <SSE::load(void*)>:
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e167:	83 ec 0c             	sub    esp,0xc
c001e16a:	50                   	push   eax
c001e16b:	e8 41 0f 00 00       	call   c001f0b1 <sseLoad>
c001e170:	83 c4 10             	add    esp,0x10
c001e173:	90                   	nop
c001e174:	83 c4 0c             	add    esp,0xc
c001e177:	c3                   	ret    

c001e178 <SSE::SSE()>:
c001e178:	83 ec 0c             	sub    esp,0xc
c001e17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17f:	83 ec 08             	sub    esp,0x8
c001e182:	68 18 37 02 c0       	push   0xc0023718
c001e187:	50                   	push   eax
c001e188:	e8 c5 28 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	ba 28 37 02 c0       	mov    edx,0xc0023728
c001e195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e199:	89 10                	mov    DWORD PTR [eax],edx
c001e19b:	90                   	nop
c001e19c:	83 c4 0c             	add    esp,0xc
c001e19f:	c3                   	ret    

c001e1a0 <x87::open(int, int, void*)>:
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	e8 54 0f 00 00       	call   c001f0fc <x87Init>
c001e1a8:	b8 00 00 00 00       	mov    eax,0x0
c001e1ad:	83 c4 0c             	add    esp,0xc
c001e1b0:	c3                   	ret    
c001e1b1:	90                   	nop

c001e1b2 <x87::close(int, int, void*)>:
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	e8 5c 0f 00 00       	call   c001f116 <x87Close>
c001e1ba:	b8 00 00 00 00       	mov    eax,0x0
c001e1bf:	83 c4 0c             	add    esp,0xc
c001e1c2:	c3                   	ret    
c001e1c3:	90                   	nop

c001e1c4 <x87::available()>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	e8 0a 0f 00 00       	call   c001f0d6 <x87Detect>
c001e1cc:	85 c0                	test   eax,eax
c001e1ce:	0f 95 c0             	setne  al
c001e1d1:	83 c4 0c             	add    esp,0xc
c001e1d4:	c3                   	ret    
c001e1d5:	90                   	nop

c001e1d6 <x87::save(void*)>:
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1dd:	83 ec 0c             	sub    esp,0xc
c001e1e0:	50                   	push   eax
c001e1e1:	e8 0b 0f 00 00       	call   c001f0f1 <x87Save>
c001e1e6:	83 c4 10             	add    esp,0x10
c001e1e9:	90                   	nop
c001e1ea:	83 c4 0c             	add    esp,0xc
c001e1ed:	c3                   	ret    

c001e1ee <x87::load(void*)>:
c001e1ee:	83 ec 0c             	sub    esp,0xc
c001e1f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1f5:	83 ec 0c             	sub    esp,0xc
c001e1f8:	50                   	push   eax
c001e1f9:	e8 f9 0e 00 00       	call   c001f0f7 <x87Load>
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	90                   	nop
c001e202:	83 c4 0c             	add    esp,0xc
c001e205:	c3                   	ret    

c001e206 <x87::x87()>:
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20d:	83 ec 08             	sub    esp,0x8
c001e210:	68 58 37 02 c0       	push   0xc0023758
c001e215:	50                   	push   eax
c001e216:	e8 37 28 ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001e21b:	83 c4 10             	add    esp,0x10
c001e21e:	ba 68 37 02 c0       	mov    edx,0xc0023768
c001e223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e227:	89 10                	mov    DWORD PTR [eax],edx
c001e229:	90                   	nop
c001e22a:	83 c4 0c             	add    esp,0xc
c001e22d:	c3                   	ret    

c001e22e <APIC::disable()>:
c001e22e:	90                   	nop
c001e22f:	c3                   	ret    

c001e230 <APIC::close(int, int, void*)>:
c001e230:	55                   	push   ebp
c001e231:	89 e5                	mov    ebp,esp
c001e233:	83 ec 08             	sub    esp,0x8
c001e236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e239:	8b 00                	mov    eax,DWORD PTR [eax]
c001e23b:	83 c0 3c             	add    eax,0x3c
c001e23e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e240:	83 ec 0c             	sub    esp,0xc
c001e243:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e246:	ff d0                	call   eax
c001e248:	83 c4 10             	add    esp,0x10
c001e24b:	b8 00 00 00 00       	mov    eax,0x0
c001e250:	c9                   	leave  
c001e251:	c3                   	ret    

c001e252 <IOAPIC::close(int, int, void*)>:
c001e252:	b8 00 00 00 00       	mov    eax,0x0
c001e257:	c3                   	ret    

c001e258 <APIC::io_wait()>:
c001e258:	eb 00                	jmp    c001e25a <APIC::io_wait()+0x2>
c001e25a:	eb 00                	jmp    c001e25c <APIC::io_wait()+0x4>
c001e25c:	90                   	nop
c001e25d:	c3                   	ret    

c001e25e <APIC::getBase()>:
c001e25e:	55                   	push   ebp
c001e25f:	89 e5                	mov    ebp,esp
c001e261:	83 ec 18             	sub    esp,0x18
c001e264:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001e269:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e26f:	83 e0 08             	and    eax,0x8
c001e272:	84 c0                	test   al,al
c001e274:	75 07                	jne    c001e27d <APIC::getBase()+0x1f>
c001e276:	b8 00 00 00 00       	mov    eax,0x0
c001e27b:	eb 21                	jmp    c001e29e <APIC::getBase()+0x40>
c001e27d:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001e282:	83 ec 08             	sub    esp,0x8
c001e285:	6a 1b                	push   0x1b
c001e287:	50                   	push   eax
c001e288:	e8 ff d2 fe ff       	call   c000b58c <Computer::rdmsr(unsigned int)>
c001e28d:	83 c4 10             	add    esp,0x10
c001e290:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e293:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e296:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e299:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e29e:	c9                   	leave  
c001e29f:	c3                   	ret    

c001e2a0 <APIC::eoi(unsigned char)>:
c001e2a0:	55                   	push   ebp
c001e2a1:	89 e5                	mov    ebp,esp
c001e2a3:	83 ec 28             	sub    esp,0x28
c001e2a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e2a9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e2ac:	83 ec 0c             	sub    esp,0xc
c001e2af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2b2:	e8 a7 ff ff ff       	call   c001e25e <APIC::getBase()>
c001e2b7:	83 c4 10             	add    esp,0x10
c001e2ba:	05 b0 00 00 00       	add    eax,0xb0
c001e2bf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e2c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e2c5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e2cb:	90                   	nop
c001e2cc:	c9                   	leave  
c001e2cd:	c3                   	ret    

c001e2ce <APIC::open(int, int, void*)>:
c001e2ce:	55                   	push   ebp
c001e2cf:	89 e5                	mov    ebp,esp
c001e2d1:	57                   	push   edi
c001e2d2:	56                   	push   esi
c001e2d3:	53                   	push   ebx
c001e2d4:	83 ec 1c             	sub    esp,0x1c
c001e2d7:	83 ec 0c             	sub    esp,0xc
c001e2da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2dd:	e8 7c ff ff ff       	call   c001e25e <APIC::getBase()>
c001e2e2:	83 c4 10             	add    esp,0x10
c001e2e5:	05 f0 00 00 00       	add    eax,0xf0
c001e2ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e2ed:	83 ec 0c             	sub    esp,0xc
c001e2f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e2f3:	e8 66 ff ff ff       	call   c001e25e <APIC::getBase()>
c001e2f8:	83 c4 10             	add    esp,0x10
c001e2fb:	89 c2                	mov    edx,eax
c001e2fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e300:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e306:	89 c7                	mov    edi,eax
c001e308:	81 e7 ff 00 00 00    	and    edi,0xff
c001e30e:	89 d0                	mov    eax,edx
c001e310:	ba 00 00 00 00       	mov    edx,0x0
c001e315:	89 c1                	mov    ecx,eax
c001e317:	80 e5 ff             	and    ch,0xff
c001e31a:	89 cb                	mov    ebx,ecx
c001e31c:	89 d0                	mov    eax,edx
c001e31e:	25 ff 00 00 00       	and    eax,0xff
c001e323:	89 c6                	mov    esi,eax
c001e325:	89 d8                	mov    eax,ebx
c001e327:	89 f2                	mov    edx,esi
c001e329:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e32c:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e32f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e333:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e337:	83 e0 00             	and    eax,0x0
c001e33a:	09 d0                	or     eax,edx
c001e33c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e343:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e349:	8d 50 01             	lea    edx,[eax+0x1]
c001e34c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e34f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e355:	31 d2                	xor    edx,edx
c001e357:	88 c2                	mov    dl,al
c001e359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e35c:	83 c2 08             	add    edx,0x8
c001e35f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e363:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e369:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e36f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e373:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e376:	8b 00                	mov    eax,DWORD PTR [eax]
c001e378:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e37b:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e382:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e385:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e388:	89 10                	mov    DWORD PTR [eax],edx
c001e38a:	b8 00 00 00 00       	mov    eax,0x0
c001e38f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e392:	5b                   	pop    ebx
c001e393:	5e                   	pop    esi
c001e394:	5f                   	pop    edi
c001e395:	5d                   	pop    ebp
c001e396:	c3                   	ret    
c001e397:	90                   	nop

c001e398 <IOAPIC::IOAPIC()>:
c001e398:	83 ec 0c             	sub    esp,0xc
c001e39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39f:	83 ec 08             	sub    esp,0x8
c001e3a2:	68 98 37 02 c0       	push   0xc0023798
c001e3a7:	50                   	push   eax
c001e3a8:	e8 b1 23 ff ff       	call   c001075e <Device::Device(char const*)>
c001e3ad:	83 c4 10             	add    esp,0x10
c001e3b0:	ba c0 38 02 c0       	mov    edx,0xc00238c0
c001e3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b9:	89 10                	mov    DWORD PTR [eax],edx
c001e3bb:	90                   	nop
c001e3bc:	83 c4 0c             	add    esp,0xc
c001e3bf:	c3                   	ret    

c001e3c0 <APIC::APIC()>:
c001e3c0:	53                   	push   ebx
c001e3c1:	83 ec 18             	sub    esp,0x18
c001e3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3c8:	83 ec 08             	sub    esp,0x8
c001e3cb:	68 a0 37 02 c0       	push   0xc00237a0
c001e3d0:	50                   	push   eax
c001e3d1:	e8 d6 2a ff ff       	call   c0010eac <InterruptController::InterruptController(char const*)>
c001e3d6:	83 c4 10             	add    esp,0x10
c001e3d9:	ba 78 38 02 c0       	mov    edx,0xc0023878
c001e3de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e3e2:	89 10                	mov    DWORD PTR [eax],edx
c001e3e4:	a0 c0 63 02 c0       	mov    al,ds:0xc00263c0
c001e3e9:	83 f0 01             	xor    eax,0x1
c001e3ec:	84 c0                	test   al,al
c001e3ee:	0f 84 a2 00 00 00    	je     c001e496 <APIC::APIC()+0xd6>
c001e3f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e3f9:	a0 70 4e 02 c0       	mov    al,ds:0xc0024e70
c001e3fe:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e402:	0f 83 87 00 00 00    	jae    c001e48f <APIC::APIC()+0xcf>
c001e408:	83 ec 0c             	sub    esp,0xc
c001e40b:	68 68 01 00 00       	push   0x168
c001e410:	e8 0f 0c ff ff       	call   c000f024 <operator new(unsigned long)>
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	89 c3                	mov    ebx,eax
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	53                   	push   ebx
c001e41e:	e8 75 ff ff ff       	call   c001e398 <IOAPIC::IOAPIC()>
c001e423:	83 c4 10             	add    esp,0x10
c001e426:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e42a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e42e:	25 ff 00 00 00       	and    eax,0xff
c001e433:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e437:	89 14 85 a0 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c60],edx
c001e43e:	a1 80 63 02 c0       	mov    eax,ds:0xc0026380
c001e443:	40                   	inc    eax
c001e444:	a3 80 63 02 c0       	mov    ds:0xc0026380,eax
c001e449:	a1 c8 45 02 c0       	mov    eax,ds:0xc00245c8
c001e44e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e454:	83 ec 08             	sub    esp,0x8
c001e457:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e45b:	50                   	push   eax
c001e45c:	e8 0d 21 ff ff       	call   c001056e <Device::addChild(Device*)>
c001e461:	83 c4 10             	add    esp,0x10
c001e464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e468:	8b 00                	mov    eax,DWORD PTR [eax]
c001e46a:	83 c0 08             	add    eax,0x8
c001e46d:	8b 10                	mov    edx,DWORD PTR [eax]
c001e46f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e473:	25 ff 00 00 00       	and    eax,0xff
c001e478:	6a 00                	push   0x0
c001e47a:	6a 00                	push   0x0
c001e47c:	50                   	push   eax
c001e47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e481:	ff d2                	call   edx
c001e483:	83 c4 10             	add    esp,0x10
c001e486:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e48a:	e9 6a ff ff ff       	jmp    c001e3f9 <APIC::APIC()+0x39>
c001e48f:	c6 05 c0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263c0,0x1
c001e496:	90                   	nop
c001e497:	83 c4 18             	add    esp,0x18
c001e49a:	5b                   	pop    ebx
c001e49b:	c3                   	ret    

c001e49c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e49c:	55                   	push   ebp
c001e49d:	89 e5                	mov    ebp,esp
c001e49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4a8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e4ab:	72 1d                	jb     c001e4ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4b0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4b9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e4bf:	01 d0                	add    eax,edx
c001e4c1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e4c4:	73 04                	jae    c001e4ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e4c6:	b0 01                	mov    al,0x1
c001e4c8:	eb 02                	jmp    c001e4cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e4ca:	b0 00                	mov    al,0x0
c001e4cc:	5d                   	pop    ebp
c001e4cd:	c3                   	ret    

c001e4ce <IOAPIC::read(int)>:
c001e4ce:	55                   	push   ebp
c001e4cf:	89 e5                	mov    ebp,esp
c001e4d1:	83 ec 10             	sub    esp,0x10
c001e4d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e4d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e4dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e4e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e4e3:	31 d2                	xor    edx,edx
c001e4e5:	88 c2                	mov    dl,al
c001e4e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4ea:	89 10                	mov    DWORD PTR [eax],edx
c001e4ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e4ef:	83 c0 10             	add    eax,0x10
c001e4f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4f4:	c9                   	leave  
c001e4f5:	c3                   	ret    

c001e4f6 <IOAPIC::open(int, int, void*)>:
c001e4f6:	55                   	push   ebp
c001e4f7:	89 e5                	mov    ebp,esp
c001e4f9:	57                   	push   edi
c001e4fa:	56                   	push   esi
c001e4fb:	53                   	push   ebx
c001e4fc:	83 ec 0c             	sub    esp,0xc
c001e4ff:	83 ec 0c             	sub    esp,0xc
c001e502:	68 cb 37 02 c0       	push   0xc00237cb
c001e507:	e8 4d 0c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e50c:	83 c4 10             	add    esp,0x10
c001e50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e512:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e515:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e51b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e51e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e524:	8b 14 85 a0 4e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb160]
c001e52b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e52e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e537:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e53d:	8b 14 85 20 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb0e0]
c001e544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e547:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e54d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e550:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e559:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e55f:	89 c7                	mov    edi,eax
c001e561:	81 e7 ff 00 00 00    	and    edi,0xff
c001e567:	89 d0                	mov    eax,edx
c001e569:	ba 00 00 00 00       	mov    edx,0x0
c001e56e:	89 c1                	mov    ecx,eax
c001e570:	80 e5 ff             	and    ch,0xff
c001e573:	89 cb                	mov    ebx,ecx
c001e575:	89 d0                	mov    eax,edx
c001e577:	25 ff 00 00 00       	and    eax,0xff
c001e57c:	89 c6                	mov    esi,eax
c001e57e:	89 d8                	mov    eax,ebx
c001e580:	89 f2                	mov    edx,esi
c001e582:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e585:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e588:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e58c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e590:	83 e0 00             	and    eax,0x0
c001e593:	09 d0                	or     eax,edx
c001e595:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5a2:	8d 50 01             	lea    edx,[eax+0x1]
c001e5a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5a8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e5ae:	31 d2                	xor    edx,edx
c001e5b0:	88 c2                	mov    dl,al
c001e5b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b5:	83 c2 08             	add    edx,0x8
c001e5b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e5bc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e5c2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e5c8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e5cc:	83 ec 08             	sub    esp,0x8
c001e5cf:	6a 01                	push   0x1
c001e5d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5d4:	e8 f5 fe ff ff       	call   c001e4ce <IOAPIC::read(int)>
c001e5d9:	83 c4 10             	add    esp,0x10
c001e5dc:	c1 f8 10             	sar    eax,0x10
c001e5df:	25 ff 00 00 00       	and    eax,0xff
c001e5e4:	8d 50 01             	lea    edx,[eax+0x1]
c001e5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ea:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e5f0:	b8 00 00 00 00       	mov    eax,0x0
c001e5f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e5f8:	5b                   	pop    ebx
c001e5f9:	5e                   	pop    esi
c001e5fa:	5f                   	pop    edi
c001e5fb:	5d                   	pop    ebp
c001e5fc:	c3                   	ret    
c001e5fd:	90                   	nop

c001e5fe <IOAPIC::write(int, int)>:
c001e5fe:	55                   	push   ebp
c001e5ff:	89 e5                	mov    ebp,esp
c001e601:	83 ec 10             	sub    esp,0x10
c001e604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e607:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e60d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e610:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e613:	31 d2                	xor    edx,edx
c001e615:	88 c2                	mov    dl,al
c001e617:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e61a:	89 10                	mov    DWORD PTR [eax],edx
c001e61c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e61f:	8d 50 10             	lea    edx,[eax+0x10]
c001e622:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e625:	89 02                	mov    DWORD PTR [edx],eax
c001e627:	90                   	nop
c001e628:	c9                   	leave  
c001e629:	c3                   	ret    

c001e62a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e62a:	55                   	push   ebp
c001e62b:	89 e5                	mov    ebp,esp
c001e62d:	83 ec 20             	sub    esp,0x20
c001e630:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e633:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e636:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e639:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e63c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e63f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e642:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e645:	88 d0                	mov    al,dl
c001e647:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e64a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e64d:	25 ff 00 00 00       	and    eax,0xff
c001e652:	83 c0 08             	add    eax,0x8
c001e655:	01 c0                	add    eax,eax
c001e657:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e65a:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e65d:	25 ff 00 00 00       	and    eax,0xff
c001e662:	83 c0 08             	add    eax,0x8
c001e665:	01 c0                	add    eax,eax
c001e667:	40                   	inc    eax
c001e668:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e66b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e66e:	50                   	push   eax
c001e66f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e672:	e8 57 fe ff ff       	call   c001e4ce <IOAPIC::read(int)>
c001e677:	83 c4 08             	add    esp,0x8
c001e67a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e67d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e684:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e687:	c1 e0 18             	shl    eax,0x18
c001e68a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e68d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e690:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e693:	52                   	push   edx
c001e694:	50                   	push   eax
c001e695:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e698:	e8 61 ff ff ff       	call   c001e5fe <IOAPIC::write(int, int)>
c001e69d:	83 c4 0c             	add    esp,0xc
c001e6a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6a3:	50                   	push   eax
c001e6a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6a7:	e8 22 fe ff ff       	call   c001e4ce <IOAPIC::read(int)>
c001e6ac:	83 c4 08             	add    esp,0x8
c001e6af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6b2:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e6b9:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e6c0:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e6c7:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e6ce:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e6d1:	25 ff 00 00 00       	and    eax,0xff
c001e6d6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e6d9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e6dc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6df:	52                   	push   edx
c001e6e0:	50                   	push   eax
c001e6e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6e4:	e8 15 ff ff ff       	call   c001e5fe <IOAPIC::write(int, int)>
c001e6e9:	83 c4 0c             	add    esp,0xc
c001e6ec:	90                   	nop
c001e6ed:	c9                   	leave  
c001e6ee:	c3                   	ret    
c001e6ef:	90                   	nop

c001e6f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e6f0:	55                   	push   ebp
c001e6f1:	89 e5                	mov    ebp,esp
c001e6f3:	56                   	push   esi
c001e6f4:	53                   	push   ebx
c001e6f5:	83 ec 20             	sub    esp,0x20
c001e6f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e6fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e6fe:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e702:	74 2a                	je     c001e72e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e704:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e708:	7f 14                	jg     c001e71e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e70a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e70d:	05 20 3d 02 c0       	add    eax,0xc0023d20
c001e712:	8a 00                	mov    al,BYTE PTR [eax]
c001e714:	25 ff 00 00 00       	and    eax,0xff
c001e719:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e71c:	eb 10                	jmp    c001e72e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e71e:	83 ec 0c             	sub    esp,0xc
c001e721:	68 dc 37 02 c0       	push   0xc00237dc
c001e726:	e8 5d 72 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001e72b:	83 c4 10             	add    esp,0x10
c001e72e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e732:	a1 80 63 02 c0       	mov    eax,ds:0xc0026380
c001e737:	83 ec 08             	sub    esp,0x8
c001e73a:	50                   	push   eax
c001e73b:	68 14 38 02 c0       	push   0xc0023814
c001e740:	e8 14 0a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e745:	83 c4 10             	add    esp,0x10
c001e748:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e74f:	a1 80 63 02 c0       	mov    eax,ds:0xc0026380
c001e754:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e757:	7d 64                	jge    c001e7bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e759:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e75c:	8b 04 85 a0 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9c60]
c001e763:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e766:	83 ec 08             	sub    esp,0x8
c001e769:	52                   	push   edx
c001e76a:	50                   	push   eax
c001e76b:	e8 2c fd ff ff       	call   c001e49c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e770:	83 c4 10             	add    esp,0x10
c001e773:	84 c0                	test   al,al
c001e775:	74 41                	je     c001e7b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e777:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e77a:	8b 1c 85 a0 63 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9c60]
c001e781:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e784:	83 c0 20             	add    eax,0x20
c001e787:	89 c6                	mov    esi,eax
c001e789:	81 e6 ff 00 00 00    	and    esi,0xff
c001e78f:	e8 85 60 ff ff       	call   c0014819 <getCPUNumber()>
c001e794:	89 c2                	mov    edx,eax
c001e796:	c1 fa 1f             	sar    edx,0x1f
c001e799:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e79c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e7a2:	83 ec 0c             	sub    esp,0xc
c001e7a5:	56                   	push   esi
c001e7a6:	52                   	push   edx
c001e7a7:	50                   	push   eax
c001e7a8:	51                   	push   ecx
c001e7a9:	53                   	push   ebx
c001e7aa:	e8 7b fe ff ff       	call   c001e62a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e7af:	83 c4 20             	add    esp,0x20
c001e7b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e7b6:	eb 05                	jmp    c001e7bd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e7b8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e7bb:	eb 92                	jmp    c001e74f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e7bd:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e7c0:	83 f0 01             	xor    eax,0x1
c001e7c3:	84 c0                	test   al,al
c001e7c5:	74 10                	je     c001e7d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e7c7:	83 ec 0c             	sub    esp,0xc
c001e7ca:	68 2b 38 02 c0       	push   0xc002382b
c001e7cf:	e8 b4 71 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001e7d4:	83 c4 10             	add    esp,0x10
c001e7d7:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e7db:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e7e2:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e7e6:	7f 65                	jg     c001e84d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e7e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e7eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e7ee:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e7f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e7f8:	01 ca                	add    edx,ecx
c001e7fa:	83 c2 54             	add    edx,0x54
c001e7fd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e801:	85 c0                	test   eax,eax
c001e803:	75 43                	jne    c001e848 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e808:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e80b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e812:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e815:	01 ca                	add    edx,ecx
c001e817:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e81a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e81d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e824:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e827:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e82e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e831:	01 ca                	add    edx,ecx
c001e833:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e839:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e83c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e840:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e843:	83 e8 20             	sub    eax,0x20
c001e846:	eb 1a                	jmp    c001e862 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e848:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e84b:	eb 95                	jmp    c001e7e2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e84d:	83 ec 0c             	sub    esp,0xc
c001e850:	68 38 38 02 c0       	push   0xc0023838
c001e855:	e8 2e 71 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001e85a:	83 c4 10             	add    esp,0x10
c001e85d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e862:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e865:	5b                   	pop    ebx
c001e866:	5e                   	pop    esi
c001e867:	5d                   	pop    ebp
c001e868:	c3                   	ret    
c001e869:	90                   	nop

c001e86a <PIC::disable()>:
c001e86a:	55                   	push   ebp
c001e86b:	89 e5                	mov    ebp,esp
c001e86d:	83 ec 10             	sub    esp,0x10
c001e870:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e876:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e87a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e87d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e881:	ee                   	out    dx,al
c001e882:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e888:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e88c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e88f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e893:	ee                   	out    dx,al
c001e894:	90                   	nop
c001e895:	c9                   	leave  
c001e896:	c3                   	ret    
c001e897:	90                   	nop

c001e898 <PIC::close(int, int, void*)>:
c001e898:	55                   	push   ebp
c001e899:	89 e5                	mov    ebp,esp
c001e89b:	83 ec 08             	sub    esp,0x8
c001e89e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8a3:	83 c0 3c             	add    eax,0x3c
c001e8a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8a8:	83 ec 0c             	sub    esp,0xc
c001e8ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e8ae:	ff d0                	call   eax
c001e8b0:	83 c4 10             	add    esp,0x10
c001e8b3:	b8 00 00 00 00       	mov    eax,0x0
c001e8b8:	c9                   	leave  
c001e8b9:	c3                   	ret    

c001e8ba <PIC::PIC()>:
c001e8ba:	83 ec 0c             	sub    esp,0xc
c001e8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c1:	83 ec 08             	sub    esp,0x8
c001e8c4:	68 e4 38 02 c0       	push   0xc00238e4
c001e8c9:	50                   	push   eax
c001e8ca:	e8 dd 25 ff ff       	call   c0010eac <InterruptController::InterruptController(char const*)>
c001e8cf:	83 c4 10             	add    esp,0x10
c001e8d2:	ba 10 39 02 c0       	mov    edx,0xc0023910
c001e8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8db:	89 10                	mov    DWORD PTR [eax],edx
c001e8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e8e7:	31 d2                	xor    edx,edx
c001e8e9:	88 c2                	mov    dl,al
c001e8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ef:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e900:	31 d2                	xor    edx,edx
c001e902:	88 c2                	mov    dl,al
c001e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e908:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e911:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e917:	8d 50 01             	lea    edx,[eax+0x1]
c001e91a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e91e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e924:	31 d2                	xor    edx,edx
c001e926:	88 c2                	mov    dl,al
c001e928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e930:	83 e1 3f             	and    ecx,0x3f
c001e933:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e941:	31 d2                	xor    edx,edx
c001e943:	88 c2                	mov    dl,al
c001e945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e949:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e954:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e95a:	31 d2                	xor    edx,edx
c001e95c:	88 c2                	mov    dl,al
c001e95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e962:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e971:	8d 50 01             	lea    edx,[eax+0x1]
c001e974:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e978:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e97e:	31 d2                	xor    edx,edx
c001e980:	88 c2                	mov    dl,al
c001e982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e986:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e98a:	83 e1 3f             	and    ecx,0x3f
c001e98d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e991:	90                   	nop
c001e992:	83 c4 0c             	add    esp,0xc
c001e995:	c3                   	ret    

c001e996 <PIC::ioWait()>:
c001e996:	eb 00                	jmp    c001e998 <PIC::ioWait()+0x2>
c001e998:	eb 00                	jmp    c001e99a <PIC::ioWait()+0x4>
c001e99a:	90                   	nop
c001e99b:	c3                   	ret    

c001e99c <PIC::getIRQReg(int)>:
c001e99c:	55                   	push   ebp
c001e99d:	89 e5                	mov    ebp,esp
c001e99f:	83 ec 10             	sub    esp,0x10
c001e9a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e9a5:	25 ff 00 00 00       	and    eax,0xff
c001e9aa:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e9b0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e9b3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e9b6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e9ba:	ee                   	out    dx,al
c001e9bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e9be:	25 ff 00 00 00       	and    eax,0xff
c001e9c3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e9c9:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e9cc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e9cf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e9d3:	ee                   	out    dx,al
c001e9d4:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e9da:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e9de:	89 c2                	mov    edx,eax
c001e9e0:	ec                   	in     al,dx
c001e9e1:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e9e4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e9e7:	25 ff 00 00 00       	and    eax,0xff
c001e9ec:	c1 e0 08             	shl    eax,0x8
c001e9ef:	89 c1                	mov    ecx,eax
c001e9f1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e9f7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e9fb:	89 c2                	mov    edx,eax
c001e9fd:	ec                   	in     al,dx
c001e9fe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001ea01:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001ea04:	25 ff 00 00 00       	and    eax,0xff
c001ea09:	09 c8                	or     eax,ecx
c001ea0b:	c9                   	leave  
c001ea0c:	c3                   	ret    
c001ea0d:	90                   	nop

c001ea0e <PIC::eoi(unsigned char)>:
c001ea0e:	55                   	push   ebp
c001ea0f:	89 e5                	mov    ebp,esp
c001ea11:	83 ec 14             	sub    esp,0x14
c001ea14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ea17:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001ea1a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ea1e:	75 23                	jne    c001ea43 <PIC::eoi(unsigned char)+0x35>
c001ea20:	6a 0b                	push   0xb
c001ea22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea25:	e8 72 ff ff ff       	call   c001e99c <PIC::getIRQReg(int)>
c001ea2a:	83 c4 08             	add    esp,0x8
c001ea2d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001ea31:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001ea35:	25 ff ff 00 00       	and    eax,0xffff
c001ea3a:	25 80 00 00 00       	and    eax,0x80
c001ea3f:	85 c0                	test   eax,eax
c001ea41:	74 5f                	je     c001eaa2 <PIC::eoi(unsigned char)+0x94>
c001ea43:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001ea47:	75 2d                	jne    c001ea76 <PIC::eoi(unsigned char)+0x68>
c001ea49:	6a 0b                	push   0xb
c001ea4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea4e:	e8 49 ff ff ff       	call   c001e99c <PIC::getIRQReg(int)>
c001ea53:	83 c4 08             	add    esp,0x8
c001ea56:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001ea5a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ea5d:	66 85 c0             	test   ax,ax
c001ea60:	78 14                	js     c001ea76 <PIC::eoi(unsigned char)+0x68>
c001ea62:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ea68:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ea6c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ea6f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ea73:	ee                   	out    dx,al
c001ea74:	eb 2d                	jmp    c001eaa3 <PIC::eoi(unsigned char)+0x95>
c001ea76:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ea7a:	76 12                	jbe    c001ea8e <PIC::eoi(unsigned char)+0x80>
c001ea7c:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ea82:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ea86:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ea89:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ea8d:	ee                   	out    dx,al
c001ea8e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ea94:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001ea98:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ea9b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ea9f:	ee                   	out    dx,al
c001eaa0:	eb 01                	jmp    c001eaa3 <PIC::eoi(unsigned char)+0x95>
c001eaa2:	90                   	nop
c001eaa3:	c9                   	leave  
c001eaa4:	c3                   	ret    
c001eaa5:	90                   	nop

c001eaa6 <PIC::remap()>:
c001eaa6:	55                   	push   ebp
c001eaa7:	89 e5                	mov    ebp,esp
c001eaa9:	83 ec 48             	sub    esp,0x48
c001eaac:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001eab3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001eaba:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001eac0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001eac3:	89 c2                	mov    edx,eax
c001eac5:	ec                   	in     al,dx
c001eac6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001eac9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001eacc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001eacf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ead5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ead8:	89 c2                	mov    edx,eax
c001eada:	ec                   	in     al,dx
c001eadb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001eade:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001eae1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001eae4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001eaea:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001eaee:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001eaf1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001eaf4:	ee                   	out    dx,al
c001eaf5:	83 ec 0c             	sub    esp,0xc
c001eaf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eafb:	e8 96 fe ff ff       	call   c001e996 <PIC::ioWait()>
c001eb00:	83 c4 10             	add    esp,0x10
c001eb03:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001eb09:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001eb0d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001eb10:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001eb13:	ee                   	out    dx,al
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb1a:	e8 77 fe ff ff       	call   c001e996 <PIC::ioWait()>
c001eb1f:	83 c4 10             	add    esp,0x10
c001eb22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001eb25:	25 ff 00 00 00       	and    eax,0xff
c001eb2a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001eb30:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001eb33:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001eb36:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001eb39:	ee                   	out    dx,al
c001eb3a:	83 ec 0c             	sub    esp,0xc
c001eb3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb40:	e8 51 fe ff ff       	call   c001e996 <PIC::ioWait()>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb4b:	25 ff 00 00 00       	and    eax,0xff
c001eb50:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001eb56:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001eb59:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001eb5c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eb5f:	ee                   	out    dx,al
c001eb60:	83 ec 0c             	sub    esp,0xc
c001eb63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb66:	e8 2b fe ff ff       	call   c001e996 <PIC::ioWait()>
c001eb6b:	83 c4 10             	add    esp,0x10
c001eb6e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001eb74:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001eb78:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001eb7b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001eb7e:	ee                   	out    dx,al
c001eb7f:	83 ec 0c             	sub    esp,0xc
c001eb82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb85:	e8 0c fe ff ff       	call   c001e996 <PIC::ioWait()>
c001eb8a:	83 c4 10             	add    esp,0x10
c001eb8d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001eb93:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001eb97:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001eb9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001eb9d:	ee                   	out    dx,al
c001eb9e:	83 ec 0c             	sub    esp,0xc
c001eba1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eba4:	e8 ed fd ff ff       	call   c001e996 <PIC::ioWait()>
c001eba9:	83 c4 10             	add    esp,0x10
c001ebac:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ebb2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ebb6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ebb9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ebbc:	ee                   	out    dx,al
c001ebbd:	83 ec 0c             	sub    esp,0xc
c001ebc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebc3:	e8 ce fd ff ff       	call   c001e996 <PIC::ioWait()>
c001ebc8:	83 c4 10             	add    esp,0x10
c001ebcb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001ebd1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ebd5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ebd8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ebdb:	ee                   	out    dx,al
c001ebdc:	83 ec 0c             	sub    esp,0xc
c001ebdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebe2:	e8 af fd ff ff       	call   c001e996 <PIC::ioWait()>
c001ebe7:	83 c4 10             	add    esp,0x10
c001ebea:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ebed:	25 ff 00 00 00       	and    eax,0xff
c001ebf2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ebf8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ebfb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ebfe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ec01:	ee                   	out    dx,al
c001ec02:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ec05:	25 ff 00 00 00       	and    eax,0xff
c001ec0a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ec10:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ec13:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ec16:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ec19:	ee                   	out    dx,al
c001ec1a:	90                   	nop
c001ec1b:	c9                   	leave  
c001ec1c:	c3                   	ret    
c001ec1d:	90                   	nop

c001ec1e <PIC::open(int, int, void*)>:
c001ec1e:	55                   	push   ebp
c001ec1f:	89 e5                	mov    ebp,esp
c001ec21:	83 ec 18             	sub    esp,0x18
c001ec24:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ec2a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ec2e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ec31:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ec35:	ee                   	out    dx,al
c001ec36:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ec3c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ec40:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ec43:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ec47:	ee                   	out    dx,al
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec4e:	e8 53 fe ff ff       	call   c001eaa6 <PIC::remap()>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	b8 00 00 00 00       	mov    eax,0x0
c001ec5b:	c9                   	leave  
c001ec5c:	c3                   	ret    
c001ec5d:	90                   	nop

c001ec5e <APICTimer::close(int, int, void*)>:
c001ec5e:	b8 00 00 00 00       	mov    eax,0x0
c001ec63:	c3                   	ret    

c001ec64 <apicTimerHandler(regs*, void*)>:
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ec6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec6d:	89 c2                	mov    edx,eax
c001ec6f:	c1 fa 1f             	sar    edx,0x1f
c001ec72:	52                   	push   edx
c001ec73:	50                   	push   eax
c001ec74:	6a 00                	push   0x0
c001ec76:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ec7b:	e8 8c 07 00 00       	call   c001f40c <__udivdi3>
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	83 ec 08             	sub    esp,0x8
c001ec86:	52                   	push   edx
c001ec87:	50                   	push   eax
c001ec88:	e8 4c 40 ff ff       	call   c0012cd9 <timerHandler(unsigned long long)>
c001ec8d:	83 c4 10             	add    esp,0x10
c001ec90:	90                   	nop
c001ec91:	83 c4 0c             	add    esp,0xc
c001ec94:	c3                   	ret    
c001ec95:	90                   	nop

c001ec96 <APICTimer::write(int)>:
c001ec96:	53                   	push   ebx
c001ec97:	83 ec 28             	sub    esp,0x28
c001ec9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eca2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eca8:	e8 6f 5b ff ff       	call   c001481c <thisCPU()>
c001ecad:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001ecb3:	83 ec 0c             	sub    esp,0xc
c001ecb6:	50                   	push   eax
c001ecb7:	e8 a2 f5 ff ff       	call   c001e25e <APIC::getBase()>
c001ecbc:	83 c4 10             	add    esp,0x10
c001ecbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ecc3:	a1 30 4c 02 c0       	mov    eax,ds:0xc0024c30
c001ecc8:	8b 15 34 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c34
c001ecce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ecd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ecd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecda:	05 e0 03 00 00       	add    eax,0x3e0
c001ecdf:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ece5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ece9:	05 80 03 00 00       	add    eax,0x380
c001ecee:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001ecf4:	fb                   	sti    
c001ecf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecfd:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001ed02:	83 d2 00             	adc    edx,0x0
c001ed05:	89 c1                	mov    ecx,eax
c001ed07:	89 d3                	mov    ebx,edx
c001ed09:	a1 30 4c 02 c0       	mov    eax,ds:0xc0024c30
c001ed0e:	8b 15 34 4c 02 c0    	mov    edx,DWORD PTR ds:0xc0024c34
c001ed14:	39 c8                	cmp    eax,ecx
c001ed16:	89 d0                	mov    eax,edx
c001ed18:	19 d8                	sbb    eax,ebx
c001ed1a:	73 02                	jae    c001ed1e <APICTimer::write(int)+0x88>
c001ed1c:	eb d7                	jmp    c001ecf5 <APICTimer::write(int)+0x5f>
c001ed1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed22:	05 20 03 00 00       	add    eax,0x320
c001ed27:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ed2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed31:	05 90 03 00 00       	add    eax,0x390
c001ed36:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed38:	f7 d0                	not    eax
c001ed3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed3e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ed42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed46:	ba 00 00 00 00       	mov    edx,0x0
c001ed4b:	f7 f3                	div    ebx
c001ed4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed55:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed5b:	0d 00 00 02 00       	or     eax,0x20000
c001ed60:	89 c2                	mov    edx,eax
c001ed62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed66:	05 20 03 00 00       	add    eax,0x320
c001ed6b:	89 10                	mov    DWORD PTR [eax],edx
c001ed6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed71:	05 e0 03 00 00       	add    eax,0x3e0
c001ed76:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ed7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed80:	05 80 03 00 00       	add    eax,0x380
c001ed85:	89 c2                	mov    edx,eax
c001ed87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed8b:	89 02                	mov    DWORD PTR [edx],eax
c001ed8d:	90                   	nop
c001ed8e:	83 c4 28             	add    esp,0x28
c001ed91:	5b                   	pop    ebx
c001ed92:	c3                   	ret    
c001ed93:	90                   	nop

c001ed94 <APICTimer::open(int, int, void*)>:
c001ed94:	57                   	push   edi
c001ed95:	56                   	push   esi
c001ed96:	53                   	push   ebx
c001ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed9d:	83 c0 24             	add    eax,0x24
c001eda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda2:	83 ec 08             	sub    esp,0x8
c001eda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eda9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edad:	ff d0                	call   eax
c001edaf:	83 c4 10             	add    esp,0x10
c001edb2:	e8 65 5a ff ff       	call   c001481c <thisCPU()>
c001edb7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edbd:	83 ec 0c             	sub    esp,0xc
c001edc0:	50                   	push   eax
c001edc1:	e8 98 f4 ff ff       	call   c001e25e <APIC::getBase()>
c001edc6:	83 c4 10             	add    esp,0x10
c001edc9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001edcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001edd9:	89 c7                	mov    edi,eax
c001eddb:	81 e7 ff 00 00 00    	and    edi,0xff
c001ede1:	89 d0                	mov    eax,edx
c001ede3:	ba 00 00 00 00       	mov    edx,0x0
c001ede8:	89 c1                	mov    ecx,eax
c001edea:	80 e5 ff             	and    ch,0xff
c001eded:	89 cb                	mov    ebx,ecx
c001edef:	89 d0                	mov    eax,edx
c001edf1:	25 ff 00 00 00       	and    eax,0xff
c001edf6:	89 c6                	mov    esi,eax
c001edf8:	89 d8                	mov    eax,ebx
c001edfa:	89 f2                	mov    edx,esi
c001edfc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee00:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ee03:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ee07:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ee0b:	83 e0 00             	and    eax,0x0
c001ee0e:	09 d0                	or     eax,edx
c001ee10:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ee14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee18:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ee1e:	8d 50 01             	lea    edx,[eax+0x1]
c001ee21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ee25:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ee2b:	31 d2                	xor    edx,edx
c001ee2d:	88 c2                	mov    dl,al
c001ee2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee33:	83 c2 08             	add    edx,0x8
c001ee36:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ee3a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ee40:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ee46:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ee4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee52:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee60:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ee66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee6a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	51                   	push   ecx
c001ee74:	6a 01                	push   0x1
c001ee76:	68 64 ec 01 c0       	push   0xc001ec64
c001ee7b:	52                   	push   edx
c001ee7c:	50                   	push   eax
c001ee7d:	e8 40 16 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee82:	83 c4 20             	add    esp,0x20
c001ee85:	89 c2                	mov    edx,eax
c001ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ee91:	b8 00 00 00 00       	mov    eax,0x0
c001ee96:	5b                   	pop    ebx
c001ee97:	5e                   	pop    esi
c001ee98:	5f                   	pop    edi
c001ee99:	c3                   	ret    

c001ee9a <APICTimer::APICTimer()>:
c001ee9a:	83 ec 0c             	sub    esp,0xc
c001ee9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea1:	83 ec 08             	sub    esp,0x8
c001eea4:	68 50 39 02 c0       	push   0xc0023950
c001eea9:	50                   	push   eax
c001eeaa:	e8 9b 3d ff ff       	call   c0012c4a <Timer::Timer(char const*)>
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	ba 64 39 02 c0       	mov    edx,0xc0023964
c001eeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebb:	89 10                	mov    DWORD PTR [eax],edx
c001eebd:	90                   	nop
c001eebe:	83 c4 0c             	add    esp,0xc
c001eec1:	c3                   	ret    

c001eec2 <PIT::write(int)>:
c001eec2:	83 ec 10             	sub    esp,0x10
c001eec5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eec9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eecd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eed3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eed7:	a3 c4 63 02 c0       	mov    ds:0xc00263c4,eax
c001eedc:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001eee1:	89 c2                	mov    edx,eax
c001eee3:	c1 fa 1f             	sar    edx,0x1f
c001eee6:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001eeea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eeee:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eef5:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eefa:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001eefe:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ef03:	ee                   	out    dx,al
c001ef04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef08:	25 ff 00 00 00       	and    eax,0xff
c001ef0d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ef14:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ef18:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ef1c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ef21:	ee                   	out    dx,al
c001ef22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef26:	c1 f8 08             	sar    eax,0x8
c001ef29:	25 ff 00 00 00       	and    eax,0xff
c001ef2e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ef35:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ef39:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ef3d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ef42:	ee                   	out    dx,al
c001ef43:	90                   	nop
c001ef44:	83 c4 10             	add    esp,0x10
c001ef47:	c3                   	ret    

c001ef48 <pitHandler(regs*, void*)>:
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	a1 c4 63 02 c0       	mov    eax,ds:0xc00263c4
c001ef50:	89 c2                	mov    edx,eax
c001ef52:	c1 fa 1f             	sar    edx,0x1f
c001ef55:	52                   	push   edx
c001ef56:	50                   	push   eax
c001ef57:	6a 00                	push   0x0
c001ef59:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ef5e:	e8 a9 04 00 00       	call   c001f40c <__udivdi3>
c001ef63:	83 c4 10             	add    esp,0x10
c001ef66:	83 ec 08             	sub    esp,0x8
c001ef69:	52                   	push   edx
c001ef6a:	50                   	push   eax
c001ef6b:	e8 69 3d ff ff       	call   c0012cd9 <timerHandler(unsigned long long)>
c001ef70:	83 c4 10             	add    esp,0x10
c001ef73:	90                   	nop
c001ef74:	83 c4 0c             	add    esp,0xc
c001ef77:	c3                   	ret    

c001ef78 <PIT::open(int, int, void*)>:
c001ef78:	83 ec 0c             	sub    esp,0xc
c001ef7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef81:	83 c0 24             	add    eax,0x24
c001ef84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef86:	83 ec 08             	sub    esp,0x8
c001ef89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef91:	ff d0                	call   eax
c001ef93:	83 c4 10             	add    esp,0x10
c001ef96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9a:	83 ec 0c             	sub    esp,0xc
c001ef9d:	6a 00                	push   0x0
c001ef9f:	6a 01                	push   0x1
c001efa1:	68 48 ef 01 c0       	push   0xc001ef48
c001efa6:	6a 00                	push   0x0
c001efa8:	50                   	push   eax
c001efa9:	e8 14 15 ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efae:	83 c4 20             	add    esp,0x20
c001efb1:	89 c2                	mov    edx,eax
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001efbd:	b8 00 00 00 00       	mov    eax,0x0
c001efc2:	83 c4 0c             	add    esp,0xc
c001efc5:	c3                   	ret    

c001efc6 <PIT::close(int, int, void*)>:
c001efc6:	83 ec 0c             	sub    esp,0xc
c001efc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcd:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001efd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdb:	6a 01                	push   0x1
c001efdd:	68 48 ef 01 c0       	push   0xc001ef48
c001efe2:	6a 00                	push   0x0
c001efe4:	50                   	push   eax
c001efe5:	e8 36 15 ff ff       	call   c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001efea:	83 c4 10             	add    esp,0x10
c001efed:	b8 00 00 00 00       	mov    eax,0x0
c001eff2:	83 c4 0c             	add    esp,0xc
c001eff5:	c3                   	ret    

c001eff6 <PIT::PIT()>:
c001eff6:	83 ec 0c             	sub    esp,0xc
c001eff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effd:	83 ec 08             	sub    esp,0x8
c001f000:	68 8c 39 02 c0       	push   0xc002398c
c001f005:	50                   	push   eax
c001f006:	e8 3f 3c ff ff       	call   c0012c4a <Timer::Timer(char const*)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	ba b4 39 02 c0       	mov    edx,0xc00239b4
c001f013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f017:	89 10                	mov    DWORD PTR [eax],edx
c001f019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f023:	31 d2                	xor    edx,edx
c001f025:	88 c2                	mov    dl,al
c001f027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02b:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f036:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f03c:	31 d2                	xor    edx,edx
c001f03e:	88 c2                	mov    dl,al
c001f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f044:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f053:	8d 50 01             	lea    edx,[eax+0x1]
c001f056:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f05a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f060:	31 d2                	xor    edx,edx
c001f062:	88 c2                	mov    dl,al
c001f064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f068:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f06c:	83 e1 3f             	and    ecx,0x3f
c001f06f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f073:	90                   	nop
c001f074:	83 c4 0c             	add    esp,0xc
c001f077:	c3                   	ret    
c001f078:	66 90                	xchg   ax,ax
c001f07a:	66 90                	xchg   ax,ax
c001f07c:	66 90                	xchg   ax,ax
c001f07e:	66 90                	xchg   ax,ax

c001f080 <avxDetect>:
c001f080:	b8 00 00 00 00       	mov    eax,0x0
c001f085:	c3                   	ret    

c001f086 <avxSave>:
c001f086:	c3                   	ret    

c001f087 <avxLoad>:
c001f087:	c3                   	ret    

c001f088 <avxInit>:
c001f088:	c3                   	ret    

c001f089 <avxClose>:
c001f089:	c3                   	ret    
c001f08a:	66 90                	xchg   ax,ax
c001f08c:	66 90                	xchg   ax,ax
c001f08e:	66 90                	xchg   ax,ax

c001f090 <sseDetect>:
c001f090:	b8 01 00 00 00       	mov    eax,0x1
c001f095:	0f a2                	cpuid  
c001f097:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f09d:	74 06                	je     c001f0a5 <sseDetect.noSSE>
c001f09f:	b8 01 00 00 00       	mov    eax,0x1
c001f0a4:	c3                   	ret    

c001f0a5 <sseDetect.noSSE>:
c001f0a5:	b8 00 00 00 00       	mov    eax,0x0
c001f0aa:	c3                   	ret    

c001f0ab <sseSave>:
c001f0ab:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f0b0:	c3                   	ret    

c001f0b1 <sseLoad>:
c001f0b1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f0b6:	c3                   	ret    

c001f0b7 <sseInit>:
c001f0b7:	e8 40 00 00 00       	call   c001f0fc <x87Init>
c001f0bc:	0f 20 e0             	mov    eax,cr4
c001f0bf:	66 0d 00 06          	or     ax,0x600
c001f0c3:	0f 22 e0             	mov    cr4,eax
c001f0c6:	c3                   	ret    

c001f0c7 <sseClose>:
c001f0c7:	c3                   	ret    
c001f0c8:	66 90                	xchg   ax,ax
c001f0ca:	66 90                	xchg   ax,ax
c001f0cc:	66 90                	xchg   ax,ax
c001f0ce:	66 90                	xchg   ax,ax

c001f0d0 <value_37F>:
c001f0d0:	7f 03                	jg     c001f0d5 <value_37A+0x1>

c001f0d2 <value_37E>:
c001f0d2:	7e 03                	jle    c001f0d7 <x87Detect+0x1>

c001f0d4 <value_37A>:
c001f0d4:	7a 03                	jp     c001f0d9 <x87Detect+0x3>

c001f0d6 <x87Detect>:
c001f0d6:	b8 01 00 00 00       	mov    eax,0x1
c001f0db:	0f a2                	cpuid  
c001f0dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f0e3:	74 06                	je     c001f0eb <x87Detect.nox87>
c001f0e5:	b8 01 00 00 00       	mov    eax,0x1
c001f0ea:	c3                   	ret    

c001f0eb <x87Detect.nox87>:
c001f0eb:	b8 00 00 00 00       	mov    eax,0x0
c001f0f0:	c3                   	ret    

c001f0f1 <x87Save>:
c001f0f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f0f6:	c3                   	ret    

c001f0f7 <x87Load>:
c001f0f7:	dd 64 24 08          	frstor [esp+0x8]
c001f0fb:	c3                   	ret    

c001f0fc <x87Init>:
c001f0fc:	9b db e3             	finit  
c001f0ff:	0f 20 c0             	mov    eax,cr0
c001f102:	66 25 fb ff          	and    ax,0xfffb
c001f106:	66 0d 22 00          	or     ax,0x22
c001f10a:	0f 22 c0             	mov    cr0,eax
c001f10d:	0f 06                	clts   
c001f10f:	d9 2d d4 f0 01 c0    	fldcw  WORD PTR ds:0xc001f0d4
c001f115:	c3                   	ret    

c001f116 <x87Close>:
c001f116:	c3                   	ret    
c001f117:	90                   	nop

c001f118 <__do_global_ctors_aux>:
c001f118:	a1 f8 01 02 c0       	mov    eax,ds:0xc00201f8
c001f11d:	83 f8 ff             	cmp    eax,0xffffffff
c001f120:	74 1a                	je     c001f13c <__do_global_ctors_aux+0x24>
c001f122:	55                   	push   ebp
c001f123:	89 e5                	mov    ebp,esp
c001f125:	53                   	push   ebx
c001f126:	52                   	push   edx
c001f127:	bb f8 01 02 c0       	mov    ebx,0xc00201f8
c001f12c:	ff d0                	call   eax
c001f12e:	83 eb 04             	sub    ebx,0x4
c001f131:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f133:	83 f8 ff             	cmp    eax,0xffffffff
c001f136:	75 f4                	jne    c001f12c <__do_global_ctors_aux+0x14>
c001f138:	58                   	pop    eax
c001f139:	5b                   	pop    ebx
c001f13a:	5d                   	pop    ebp
c001f13b:	c3                   	ret    
c001f13c:	c3                   	ret    
c001f13d:	66 90                	xchg   ax,ax
c001f13f:	90                   	nop

c001f140 <__divdi3>:
c001f140:	55                   	push   ebp
c001f141:	57                   	push   edi
c001f142:	56                   	push   esi
c001f143:	53                   	push   ebx
c001f144:	83 ec 1c             	sub    esp,0x1c
c001f147:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f14b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f14f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f152:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f156:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f15a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f15e:	85 db                	test   ebx,ebx
c001f160:	0f 88 8e 00 00 00    	js     c001f1f4 <__divdi3+0xb4>
c001f166:	89 dd                	mov    ebp,ebx
c001f168:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f170:	89 d3                	mov    ebx,edx
c001f172:	85 d2                	test   edx,edx
c001f174:	79 0d                	jns    c001f183 <__divdi3+0x43>
c001f176:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f17a:	f7 d8                	neg    eax
c001f17c:	83 d2 00             	adc    edx,0x0
c001f17f:	f7 da                	neg    edx
c001f181:	89 d3                	mov    ebx,edx
c001f183:	89 c7                	mov    edi,eax
c001f185:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f188:	85 db                	test   ebx,ebx
c001f18a:	75 48                	jne    c001f1d4 <__divdi3+0x94>
c001f18c:	39 ef                	cmp    edi,ebp
c001f18e:	76 24                	jbe    c001f1b4 <__divdi3+0x74>
c001f190:	89 ea                	mov    edx,ebp
c001f192:	f7 f7                	div    edi
c001f194:	89 c1                	mov    ecx,eax
c001f196:	31 f6                	xor    esi,esi
c001f198:	89 c8                	mov    eax,ecx
c001f19a:	89 f2                	mov    edx,esi
c001f19c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1a0:	85 c9                	test   ecx,ecx
c001f1a2:	74 07                	je     c001f1ab <__divdi3+0x6b>
c001f1a4:	f7 d8                	neg    eax
c001f1a6:	83 d2 00             	adc    edx,0x0
c001f1a9:	f7 da                	neg    edx
c001f1ab:	83 c4 1c             	add    esp,0x1c
c001f1ae:	5b                   	pop    ebx
c001f1af:	5e                   	pop    esi
c001f1b0:	5f                   	pop    edi
c001f1b1:	5d                   	pop    ebp
c001f1b2:	c3                   	ret    
c001f1b3:	90                   	nop
c001f1b4:	85 ff                	test   edi,edi
c001f1b6:	75 0b                	jne    c001f1c3 <__divdi3+0x83>
c001f1b8:	b8 01 00 00 00       	mov    eax,0x1
c001f1bd:	31 d2                	xor    edx,edx
c001f1bf:	f7 f3                	div    ebx
c001f1c1:	89 c7                	mov    edi,eax
c001f1c3:	31 d2                	xor    edx,edx
c001f1c5:	89 e8                	mov    eax,ebp
c001f1c7:	f7 f7                	div    edi
c001f1c9:	89 c6                	mov    esi,eax
c001f1cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f1ce:	f7 f7                	div    edi
c001f1d0:	89 c1                	mov    ecx,eax
c001f1d2:	eb c4                	jmp    c001f198 <__divdi3+0x58>
c001f1d4:	39 eb                	cmp    ebx,ebp
c001f1d6:	77 3c                	ja     c001f214 <__divdi3+0xd4>
c001f1d8:	0f bd f3             	bsr    esi,ebx
c001f1db:	83 f6 1f             	xor    esi,0x1f
c001f1de:	75 40                	jne    c001f220 <__divdi3+0xe0>
c001f1e0:	39 eb                	cmp    ebx,ebp
c001f1e2:	72 09                	jb     c001f1ed <__divdi3+0xad>
c001f1e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f1e7:	0f 87 97 00 00 00    	ja     c001f284 <__divdi3+0x144>
c001f1ed:	b9 01 00 00 00       	mov    ecx,0x1
c001f1f2:	eb a4                	jmp    c001f198 <__divdi3+0x58>
c001f1f4:	f7 d9                	neg    ecx
c001f1f6:	83 d3 00             	adc    ebx,0x0
c001f1f9:	f7 db                	neg    ebx
c001f1fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f1fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f202:	89 dd                	mov    ebp,ebx
c001f204:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f20c:	e9 5f ff ff ff       	jmp    c001f170 <__divdi3+0x30>
c001f211:	8d 76 00             	lea    esi,[esi+0x0]
c001f214:	31 f6                	xor    esi,esi
c001f216:	31 c9                	xor    ecx,ecx
c001f218:	e9 7b ff ff ff       	jmp    c001f198 <__divdi3+0x58>
c001f21d:	8d 76 00             	lea    esi,[esi+0x0]
c001f220:	b8 20 00 00 00       	mov    eax,0x20
c001f225:	29 f0                	sub    eax,esi
c001f227:	89 f1                	mov    ecx,esi
c001f229:	d3 e3                	shl    ebx,cl
c001f22b:	89 fa                	mov    edx,edi
c001f22d:	88 c1                	mov    cl,al
c001f22f:	d3 ea                	shr    edx,cl
c001f231:	09 da                	or     edx,ebx
c001f233:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f237:	89 f1                	mov    ecx,esi
c001f239:	d3 e7                	shl    edi,cl
c001f23b:	89 eb                	mov    ebx,ebp
c001f23d:	88 c1                	mov    cl,al
c001f23f:	d3 eb                	shr    ebx,cl
c001f241:	89 f1                	mov    ecx,esi
c001f243:	d3 e5                	shl    ebp,cl
c001f245:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f248:	88 c1                	mov    cl,al
c001f24a:	d3 ea                	shr    edx,cl
c001f24c:	09 d5                	or     ebp,edx
c001f24e:	89 e8                	mov    eax,ebp
c001f250:	89 da                	mov    edx,ebx
c001f252:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f256:	89 d3                	mov    ebx,edx
c001f258:	89 c5                	mov    ebp,eax
c001f25a:	f7 e7                	mul    edi
c001f25c:	39 d3                	cmp    ebx,edx
c001f25e:	72 18                	jb     c001f278 <__divdi3+0x138>
c001f260:	74 0a                	je     c001f26c <__divdi3+0x12c>
c001f262:	89 e9                	mov    ecx,ebp
c001f264:	31 f6                	xor    esi,esi
c001f266:	e9 2d ff ff ff       	jmp    c001f198 <__divdi3+0x58>
c001f26b:	90                   	nop
c001f26c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f26f:	89 f1                	mov    ecx,esi
c001f271:	d3 e7                	shl    edi,cl
c001f273:	39 c7                	cmp    edi,eax
c001f275:	73 eb                	jae    c001f262 <__divdi3+0x122>
c001f277:	90                   	nop
c001f278:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f27b:	31 f6                	xor    esi,esi
c001f27d:	e9 16 ff ff ff       	jmp    c001f198 <__divdi3+0x58>
c001f282:	66 90                	xchg   ax,ax
c001f284:	31 c9                	xor    ecx,ecx
c001f286:	e9 0d ff ff ff       	jmp    c001f198 <__divdi3+0x58>
c001f28b:	90                   	nop

c001f28c <__moddi3>:
c001f28c:	55                   	push   ebp
c001f28d:	57                   	push   edi
c001f28e:	56                   	push   esi
c001f28f:	53                   	push   ebx
c001f290:	83 ec 2c             	sub    esp,0x2c
c001f293:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f297:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f29b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f29f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f2a3:	85 db                	test   ebx,ebx
c001f2a5:	0f 88 85 00 00 00    	js     c001f330 <__moddi3+0xa4>
c001f2ab:	89 de                	mov    esi,ebx
c001f2ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f2b5:	89 d7                	mov    edi,edx
c001f2b7:	85 d2                	test   edx,edx
c001f2b9:	79 09                	jns    c001f2c4 <__moddi3+0x38>
c001f2bb:	f7 d8                	neg    eax
c001f2bd:	83 d2 00             	adc    edx,0x0
c001f2c0:	f7 da                	neg    edx
c001f2c2:	89 d7                	mov    edi,edx
c001f2c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2c8:	89 cd                	mov    ebp,ecx
c001f2ca:	85 ff                	test   edi,edi
c001f2cc:	75 52                	jne    c001f320 <__moddi3+0x94>
c001f2ce:	89 c3                	mov    ebx,eax
c001f2d0:	39 f0                	cmp    eax,esi
c001f2d2:	76 24                	jbe    c001f2f8 <__moddi3+0x6c>
c001f2d4:	89 c8                	mov    eax,ecx
c001f2d6:	89 f2                	mov    edx,esi
c001f2d8:	f7 f3                	div    ebx
c001f2da:	89 d6                	mov    esi,edx
c001f2dc:	89 f0                	mov    eax,esi
c001f2de:	31 d2                	xor    edx,edx
c001f2e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2e4:	85 c9                	test   ecx,ecx
c001f2e6:	74 07                	je     c001f2ef <__moddi3+0x63>
c001f2e8:	f7 d8                	neg    eax
c001f2ea:	83 d2 00             	adc    edx,0x0
c001f2ed:	f7 da                	neg    edx
c001f2ef:	83 c4 2c             	add    esp,0x2c
c001f2f2:	5b                   	pop    ebx
c001f2f3:	5e                   	pop    esi
c001f2f4:	5f                   	pop    edi
c001f2f5:	5d                   	pop    ebp
c001f2f6:	c3                   	ret    
c001f2f7:	90                   	nop
c001f2f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f2fc:	85 db                	test   ebx,ebx
c001f2fe:	75 0d                	jne    c001f30d <__moddi3+0x81>
c001f300:	b8 01 00 00 00       	mov    eax,0x1
c001f305:	31 d2                	xor    edx,edx
c001f307:	f7 f7                	div    edi
c001f309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f30d:	89 f0                	mov    eax,esi
c001f30f:	31 d2                	xor    edx,edx
c001f311:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f315:	f7 f7                	div    edi
c001f317:	89 e8                	mov    eax,ebp
c001f319:	f7 f7                	div    edi
c001f31b:	89 d6                	mov    esi,edx
c001f31d:	eb bd                	jmp    c001f2dc <__moddi3+0x50>
c001f31f:	90                   	nop
c001f320:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f324:	39 f7                	cmp    edi,esi
c001f326:	76 20                	jbe    c001f348 <__moddi3+0xbc>
c001f328:	89 c8                	mov    eax,ecx
c001f32a:	89 f2                	mov    edx,esi
c001f32c:	eb b2                	jmp    c001f2e0 <__moddi3+0x54>
c001f32e:	66 90                	xchg   ax,ax
c001f330:	f7 d9                	neg    ecx
c001f332:	83 d3 00             	adc    ebx,0x0
c001f335:	f7 db                	neg    ebx
c001f337:	89 de                	mov    esi,ebx
c001f339:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f341:	e9 6f ff ff ff       	jmp    c001f2b5 <__moddi3+0x29>
c001f346:	66 90                	xchg   ax,ax
c001f348:	0f bd c7             	bsr    eax,edi
c001f34b:	83 f0 1f             	xor    eax,0x1f
c001f34e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f352:	75 24                	jne    c001f378 <__moddi3+0xec>
c001f354:	39 f7                	cmp    edi,esi
c001f356:	72 06                	jb     c001f35e <__moddi3+0xd2>
c001f358:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f35c:	77 0c                	ja     c001f36a <__moddi3+0xde>
c001f35e:	89 e9                	mov    ecx,ebp
c001f360:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f364:	19 fe                	sbb    esi,edi
c001f366:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f36a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f36e:	89 f2                	mov    edx,esi
c001f370:	e9 6b ff ff ff       	jmp    c001f2e0 <__moddi3+0x54>
c001f375:	8d 76 00             	lea    esi,[esi+0x0]
c001f378:	b8 20 00 00 00       	mov    eax,0x20
c001f37d:	89 c2                	mov    edx,eax
c001f37f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f383:	29 da                	sub    edx,ebx
c001f385:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f389:	88 d9                	mov    cl,bl
c001f38b:	d3 e7                	shl    edi,cl
c001f38d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f391:	88 d1                	mov    cl,dl
c001f393:	d3 e8                	shr    eax,cl
c001f395:	09 c7                	or     edi,eax
c001f397:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f39b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f39f:	89 d8                	mov    eax,ebx
c001f3a1:	88 d9                	mov    cl,bl
c001f3a3:	d3 e7                	shl    edi,cl
c001f3a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3a9:	89 f3                	mov    ebx,esi
c001f3ab:	88 d1                	mov    cl,dl
c001f3ad:	d3 eb                	shr    ebx,cl
c001f3af:	89 c7                	mov    edi,eax
c001f3b1:	88 c1                	mov    cl,al
c001f3b3:	d3 e6                	shl    esi,cl
c001f3b5:	89 e8                	mov    eax,ebp
c001f3b7:	88 d1                	mov    cl,dl
c001f3b9:	d3 e8                	shr    eax,cl
c001f3bb:	09 f0                	or     eax,esi
c001f3bd:	89 f9                	mov    ecx,edi
c001f3bf:	d3 e5                	shl    ebp,cl
c001f3c1:	89 da                	mov    edx,ebx
c001f3c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f3c7:	89 d3                	mov    ebx,edx
c001f3c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3cd:	89 c6                	mov    esi,eax
c001f3cf:	89 d1                	mov    ecx,edx
c001f3d1:	39 d3                	cmp    ebx,edx
c001f3d3:	72 27                	jb     c001f3fc <__moddi3+0x170>
c001f3d5:	74 21                	je     c001f3f8 <__moddi3+0x16c>
c001f3d7:	29 f5                	sub    ebp,esi
c001f3d9:	19 cb                	sbb    ebx,ecx
c001f3db:	89 de                	mov    esi,ebx
c001f3dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f3e1:	d3 e6                	shl    esi,cl
c001f3e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f3e7:	89 f9                	mov    ecx,edi
c001f3e9:	d3 ed                	shr    ebp,cl
c001f3eb:	09 ee                	or     esi,ebp
c001f3ed:	89 f0                	mov    eax,esi
c001f3ef:	d3 eb                	shr    ebx,cl
c001f3f1:	89 da                	mov    edx,ebx
c001f3f3:	e9 e8 fe ff ff       	jmp    c001f2e0 <__moddi3+0x54>
c001f3f8:	39 c5                	cmp    ebp,eax
c001f3fa:	73 db                	jae    c001f3d7 <__moddi3+0x14b>
c001f3fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f400:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f404:	89 d1                	mov    ecx,edx
c001f406:	89 c6                	mov    esi,eax
c001f408:	eb cd                	jmp    c001f3d7 <__moddi3+0x14b>
c001f40a:	66 90                	xchg   ax,ax

c001f40c <__udivdi3>:
c001f40c:	55                   	push   ebp
c001f40d:	57                   	push   edi
c001f40e:	56                   	push   esi
c001f40f:	53                   	push   ebx
c001f410:	83 ec 1c             	sub    esp,0x1c
c001f413:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f417:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f41b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f41f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f423:	85 d2                	test   edx,edx
c001f425:	75 41                	jne    c001f468 <__udivdi3+0x5c>
c001f427:	39 f7                	cmp    edi,esi
c001f429:	76 15                	jbe    c001f440 <__udivdi3+0x34>
c001f42b:	89 e8                	mov    eax,ebp
c001f42d:	89 f2                	mov    edx,esi
c001f42f:	f7 f7                	div    edi
c001f431:	31 db                	xor    ebx,ebx
c001f433:	89 da                	mov    edx,ebx
c001f435:	83 c4 1c             	add    esp,0x1c
c001f438:	5b                   	pop    ebx
c001f439:	5e                   	pop    esi
c001f43a:	5f                   	pop    edi
c001f43b:	5d                   	pop    ebp
c001f43c:	c3                   	ret    
c001f43d:	8d 76 00             	lea    esi,[esi+0x0]
c001f440:	89 f9                	mov    ecx,edi
c001f442:	85 ff                	test   edi,edi
c001f444:	75 0b                	jne    c001f451 <__udivdi3+0x45>
c001f446:	b8 01 00 00 00       	mov    eax,0x1
c001f44b:	31 d2                	xor    edx,edx
c001f44d:	f7 f7                	div    edi
c001f44f:	89 c1                	mov    ecx,eax
c001f451:	31 d2                	xor    edx,edx
c001f453:	89 f0                	mov    eax,esi
c001f455:	f7 f1                	div    ecx
c001f457:	89 c3                	mov    ebx,eax
c001f459:	89 e8                	mov    eax,ebp
c001f45b:	f7 f1                	div    ecx
c001f45d:	89 da                	mov    edx,ebx
c001f45f:	83 c4 1c             	add    esp,0x1c
c001f462:	5b                   	pop    ebx
c001f463:	5e                   	pop    esi
c001f464:	5f                   	pop    edi
c001f465:	5d                   	pop    ebp
c001f466:	c3                   	ret    
c001f467:	90                   	nop
c001f468:	39 f2                	cmp    edx,esi
c001f46a:	77 1c                	ja     c001f488 <__udivdi3+0x7c>
c001f46c:	0f bd da             	bsr    ebx,edx
c001f46f:	83 f3 1f             	xor    ebx,0x1f
c001f472:	75 24                	jne    c001f498 <__udivdi3+0x8c>
c001f474:	39 f2                	cmp    edx,esi
c001f476:	72 08                	jb     c001f480 <__udivdi3+0x74>
c001f478:	39 ef                	cmp    edi,ebp
c001f47a:	0f 87 84 00 00 00    	ja     c001f504 <__udivdi3+0xf8>
c001f480:	b8 01 00 00 00       	mov    eax,0x1
c001f485:	eb ac                	jmp    c001f433 <__udivdi3+0x27>
c001f487:	90                   	nop
c001f488:	31 db                	xor    ebx,ebx
c001f48a:	31 c0                	xor    eax,eax
c001f48c:	89 da                	mov    edx,ebx
c001f48e:	83 c4 1c             	add    esp,0x1c
c001f491:	5b                   	pop    ebx
c001f492:	5e                   	pop    esi
c001f493:	5f                   	pop    edi
c001f494:	5d                   	pop    ebp
c001f495:	c3                   	ret    
c001f496:	66 90                	xchg   ax,ax
c001f498:	b8 20 00 00 00       	mov    eax,0x20
c001f49d:	29 d8                	sub    eax,ebx
c001f49f:	88 d9                	mov    cl,bl
c001f4a1:	d3 e2                	shl    edx,cl
c001f4a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f4a7:	89 fa                	mov    edx,edi
c001f4a9:	88 c1                	mov    cl,al
c001f4ab:	d3 ea                	shr    edx,cl
c001f4ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4b1:	09 d1                	or     ecx,edx
c001f4b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f4b7:	88 d9                	mov    cl,bl
c001f4b9:	d3 e7                	shl    edi,cl
c001f4bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4bf:	89 f7                	mov    edi,esi
c001f4c1:	88 c1                	mov    cl,al
c001f4c3:	d3 ef                	shr    edi,cl
c001f4c5:	88 d9                	mov    cl,bl
c001f4c7:	d3 e6                	shl    esi,cl
c001f4c9:	89 ea                	mov    edx,ebp
c001f4cb:	88 c1                	mov    cl,al
c001f4cd:	d3 ea                	shr    edx,cl
c001f4cf:	09 d6                	or     esi,edx
c001f4d1:	89 f0                	mov    eax,esi
c001f4d3:	89 fa                	mov    edx,edi
c001f4d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f4d9:	89 d7                	mov    edi,edx
c001f4db:	89 c6                	mov    esi,eax
c001f4dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4e1:	39 d7                	cmp    edi,edx
c001f4e3:	72 13                	jb     c001f4f8 <__udivdi3+0xec>
c001f4e5:	74 09                	je     c001f4f0 <__udivdi3+0xe4>
c001f4e7:	89 f0                	mov    eax,esi
c001f4e9:	31 db                	xor    ebx,ebx
c001f4eb:	e9 43 ff ff ff       	jmp    c001f433 <__udivdi3+0x27>
c001f4f0:	88 d9                	mov    cl,bl
c001f4f2:	d3 e5                	shl    ebp,cl
c001f4f4:	39 c5                	cmp    ebp,eax
c001f4f6:	73 ef                	jae    c001f4e7 <__udivdi3+0xdb>
c001f4f8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4fb:	31 db                	xor    ebx,ebx
c001f4fd:	e9 31 ff ff ff       	jmp    c001f433 <__udivdi3+0x27>
c001f502:	66 90                	xchg   ax,ax
c001f504:	31 c0                	xor    eax,eax
c001f506:	e9 28 ff ff ff       	jmp    c001f433 <__udivdi3+0x27>
c001f50b:	90                   	nop

c001f50c <__umoddi3>:
c001f50c:	55                   	push   ebp
c001f50d:	57                   	push   edi
c001f50e:	56                   	push   esi
c001f50f:	53                   	push   ebx
c001f510:	83 ec 1c             	sub    esp,0x1c
c001f513:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f517:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f51b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f51f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f523:	89 da                	mov    edx,ebx
c001f525:	85 c0                	test   eax,eax
c001f527:	75 37                	jne    c001f560 <__umoddi3+0x54>
c001f529:	39 df                	cmp    edi,ebx
c001f52b:	76 13                	jbe    c001f540 <__umoddi3+0x34>
c001f52d:	89 f0                	mov    eax,esi
c001f52f:	f7 f7                	div    edi
c001f531:	89 d0                	mov    eax,edx
c001f533:	31 d2                	xor    edx,edx
c001f535:	83 c4 1c             	add    esp,0x1c
c001f538:	5b                   	pop    ebx
c001f539:	5e                   	pop    esi
c001f53a:	5f                   	pop    edi
c001f53b:	5d                   	pop    ebp
c001f53c:	c3                   	ret    
c001f53d:	8d 76 00             	lea    esi,[esi+0x0]
c001f540:	89 fd                	mov    ebp,edi
c001f542:	85 ff                	test   edi,edi
c001f544:	75 0b                	jne    c001f551 <__umoddi3+0x45>
c001f546:	b8 01 00 00 00       	mov    eax,0x1
c001f54b:	31 d2                	xor    edx,edx
c001f54d:	f7 f7                	div    edi
c001f54f:	89 c5                	mov    ebp,eax
c001f551:	89 d8                	mov    eax,ebx
c001f553:	31 d2                	xor    edx,edx
c001f555:	f7 f5                	div    ebp
c001f557:	89 f0                	mov    eax,esi
c001f559:	f7 f5                	div    ebp
c001f55b:	89 d0                	mov    eax,edx
c001f55d:	eb d4                	jmp    c001f533 <__umoddi3+0x27>
c001f55f:	90                   	nop
c001f560:	89 f1                	mov    ecx,esi
c001f562:	39 d8                	cmp    eax,ebx
c001f564:	76 0a                	jbe    c001f570 <__umoddi3+0x64>
c001f566:	89 f0                	mov    eax,esi
c001f568:	83 c4 1c             	add    esp,0x1c
c001f56b:	5b                   	pop    ebx
c001f56c:	5e                   	pop    esi
c001f56d:	5f                   	pop    edi
c001f56e:	5d                   	pop    ebp
c001f56f:	c3                   	ret    
c001f570:	0f bd e8             	bsr    ebp,eax
c001f573:	83 f5 1f             	xor    ebp,0x1f
c001f576:	75 1c                	jne    c001f594 <__umoddi3+0x88>
c001f578:	39 d8                	cmp    eax,ebx
c001f57a:	72 04                	jb     c001f580 <__umoddi3+0x74>
c001f57c:	39 f7                	cmp    edi,esi
c001f57e:	77 08                	ja     c001f588 <__umoddi3+0x7c>
c001f580:	89 da                	mov    edx,ebx
c001f582:	29 fe                	sub    esi,edi
c001f584:	19 c2                	sbb    edx,eax
c001f586:	89 f1                	mov    ecx,esi
c001f588:	89 c8                	mov    eax,ecx
c001f58a:	83 c4 1c             	add    esp,0x1c
c001f58d:	5b                   	pop    ebx
c001f58e:	5e                   	pop    esi
c001f58f:	5f                   	pop    edi
c001f590:	5d                   	pop    ebp
c001f591:	c3                   	ret    
c001f592:	66 90                	xchg   ax,ax
c001f594:	ba 20 00 00 00       	mov    edx,0x20
c001f599:	29 ea                	sub    edx,ebp
c001f59b:	89 e9                	mov    ecx,ebp
c001f59d:	d3 e0                	shl    eax,cl
c001f59f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f5a3:	89 f8                	mov    eax,edi
c001f5a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f5a9:	88 d1                	mov    cl,dl
c001f5ab:	d3 e8                	shr    eax,cl
c001f5ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b1:	09 c1                	or     ecx,eax
c001f5b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5b7:	89 e9                	mov    ecx,ebp
c001f5b9:	d3 e7                	shl    edi,cl
c001f5bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5bf:	89 d8                	mov    eax,ebx
c001f5c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f5c5:	88 d1                	mov    cl,dl
c001f5c7:	d3 e8                	shr    eax,cl
c001f5c9:	89 c7                	mov    edi,eax
c001f5cb:	89 e9                	mov    ecx,ebp
c001f5cd:	d3 e3                	shl    ebx,cl
c001f5cf:	89 f0                	mov    eax,esi
c001f5d1:	88 d1                	mov    cl,dl
c001f5d3:	d3 e8                	shr    eax,cl
c001f5d5:	09 d8                	or     eax,ebx
c001f5d7:	89 e9                	mov    ecx,ebp
c001f5d9:	d3 e6                	shl    esi,cl
c001f5db:	89 f3                	mov    ebx,esi
c001f5dd:	89 fa                	mov    edx,edi
c001f5df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5e3:	89 d1                	mov    ecx,edx
c001f5e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5e9:	89 c6                	mov    esi,eax
c001f5eb:	89 d7                	mov    edi,edx
c001f5ed:	39 d1                	cmp    ecx,edx
c001f5ef:	72 27                	jb     c001f618 <__umoddi3+0x10c>
c001f5f1:	74 21                	je     c001f614 <__umoddi3+0x108>
c001f5f3:	89 ca                	mov    edx,ecx
c001f5f5:	29 f3                	sub    ebx,esi
c001f5f7:	19 fa                	sbb    edx,edi
c001f5f9:	89 d0                	mov    eax,edx
c001f5fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f5ff:	d3 e0                	shl    eax,cl
c001f601:	89 e9                	mov    ecx,ebp
c001f603:	d3 eb                	shr    ebx,cl
c001f605:	09 d8                	or     eax,ebx
c001f607:	d3 ea                	shr    edx,cl
c001f609:	83 c4 1c             	add    esp,0x1c
c001f60c:	5b                   	pop    ebx
c001f60d:	5e                   	pop    esi
c001f60e:	5f                   	pop    edi
c001f60f:	5d                   	pop    ebp
c001f610:	c3                   	ret    
c001f611:	8d 76 00             	lea    esi,[esi+0x0]
c001f614:	39 c3                	cmp    ebx,eax
c001f616:	73 db                	jae    c001f5f3 <__umoddi3+0xe7>
c001f618:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f61c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f620:	89 d7                	mov    edi,edx
c001f622:	89 c6                	mov    esi,eax
c001f624:	eb cd                	jmp    c001f5f3 <__umoddi3+0xe7>
c001f626:	66 90                	xchg   ax,ax
c001f628:	66 90                	xchg   ax,ax
c001f62a:	66 90                	xchg   ax,ax
c001f62c:	66 90                	xchg   ax,ax
c001f62e:	66 90                	xchg   ax,ax

c001f630 <fabs>:
c001f630:	83 ec 0c             	sub    esp,0xc
c001f633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f637:	89 04 24             	mov    DWORD PTR [esp],eax
c001f63a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f63e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f643:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f647:	dd 04 24             	fld    QWORD PTR [esp]
c001f64a:	83 c4 0c             	add    esp,0xc
c001f64d:	c3                   	ret    
c001f64e:	66 90                	xchg   ax,ax

c001f650 <lrint>:
c001f650:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f654:	83 ec 04             	sub    esp,0x4
c001f657:	db 1c 24             	fistp  DWORD PTR [esp]
c001f65a:	58                   	pop    eax
c001f65b:	c3                   	ret    

c001f65c <lrintf>:
c001f65c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f660:	83 ec 04             	sub    esp,0x4
c001f663:	db 1c 24             	fistp  DWORD PTR [esp]
c001f666:	58                   	pop    eax
c001f667:	c3                   	ret    

Disassembly of section .init:

c001f668 <_init>:
c001f668:	55                   	push   ebp
c001f669:	89 e5                	mov    ebp,esp
c001f66b:	e8 a8 0a fe ff       	call   c0000118 <frame_dummy>
c001f670:	e8 a3 fa ff ff       	call   c001f118 <__do_global_ctors_aux>
c001f675:	5d                   	pop    ebp
c001f676:	c3                   	ret    

Disassembly of section .fini:

c001f677 <_fini>:
c001f677:	55                   	push   ebp
c001f678:	89 e5                	mov    ebp,esp
c001f67a:	e8 29 0a fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f67f:	5d                   	pop    ebp
c001f680:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f682 <Computer::~Computer()>:
c001f682:	83 ec 0c             	sub    esp,0xc
c001f685:	ba a4 11 02 c0       	mov    edx,0xc00211a4
c001f68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68e:	89 10                	mov    DWORD PTR [eax],edx
c001f690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f694:	83 ec 0c             	sub    esp,0xc
c001f697:	50                   	push   eax
c001f698:	e8 77 0d ff ff       	call   c0010414 <Device::~Device()>
c001f69d:	83 c4 10             	add    esp,0x10
c001f6a0:	90                   	nop
c001f6a1:	83 c4 0c             	add    esp,0xc
c001f6a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f6a6 <Computer::~Computer()>:
c001f6a6:	83 ec 0c             	sub    esp,0xc
c001f6a9:	83 ec 0c             	sub    esp,0xc
c001f6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b0:	e8 cd ff ff ff       	call   c001f682 <Computer::~Computer()>
c001f6b5:	83 c4 10             	add    esp,0x10
c001f6b8:	83 ec 08             	sub    esp,0x8
c001f6bb:	68 ec 01 00 00       	push   0x1ec
c001f6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6c4:	e8 6a f9 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f6c9:	83 c4 10             	add    esp,0x10
c001f6cc:	83 c4 0c             	add    esp,0xc
c001f6cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f6d0 <idleCommon()>:
c001f6d0:	83 ec 0c             	sub    esp,0xc
c001f6d3:	e8 9d 92 ff ff       	call   c0018975 <lockScheduler()>
c001f6d8:	e8 e1 95 ff ff       	call   c0018cbe <schedule()>
c001f6dd:	83 c4 0c             	add    esp,0xc
c001f6e0:	e9 92 92 ff ff       	jmp    c0018977 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f6e5 <CPU::readCR3()>:
c001f6e5:	83 ec 10             	sub    esp,0x10
c001f6e8:	0f 20 d8             	mov    eax,cr3
c001f6eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6f3:	83 c4 10             	add    esp,0x10
c001f6f6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f6f7 <CPU::writeCR3(unsigned long)>:
c001f6f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fb:	0f 22 d8             	mov    cr3,eax
c001f6fe:	90                   	nop
c001f6ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f700 <LinkedList<UnixFile>::~LinkedList()>:
c001f700:	90                   	nop
c001f701:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f702 <LinkedList<UnixFile>::LinkedList()>:
c001f702:	83 ec 0c             	sub    esp,0xc
c001f705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f709:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f713:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f729:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f733:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f745:	83 ec 0c             	sub    esp,0xc
c001f748:	68 1a 14 02 c0       	push   0xc002141a
c001f74d:	e8 07 fa fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f752:	83 c4 10             	add    esp,0x10
c001f755:	90                   	nop
c001f756:	83 c4 0c             	add    esp,0xc
c001f759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f75a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f75a:	83 ec 0c             	sub    esp,0xc
c001f75d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f762:	75 10                	jne    c001f774 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f764:	83 ec 0c             	sub    esp,0xc
c001f767:	68 34 14 02 c0       	push   0xc0021434
c001f76c:	e8 17 62 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f771:	83 c4 10             	add    esp,0x10
c001f774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f778:	8b 00                	mov    eax,DWORD PTR [eax]
c001f77a:	85 c0                	test   eax,eax
c001f77c:	74 34                	je     c001f7b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f782:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f785:	85 c0                	test   eax,eax
c001f787:	74 29                	je     c001f7b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f790:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f794:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f79f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7b0:	eb 65                	jmp    c001f817 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7b8:	85 c0                	test   eax,eax
c001f7ba:	75 4b                	jne    c001f807 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7c3:	85 c0                	test   eax,eax
c001f7c5:	75 40                	jne    c001f807 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7cf:	89 10                	mov    DWORD PTR [eax],edx
c001f7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7f1:	85 c0                	test   eax,eax
c001f7f3:	74 22                	je     c001f817 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7f5:	83 ec 0c             	sub    esp,0xc
c001f7f8:	68 56 14 02 c0       	push   0xc0021456
c001f7fd:	e8 86 61 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f802:	83 c4 10             	add    esp,0x10
c001f805:	eb 10                	jmp    c001f817 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f807:	83 ec 0c             	sub    esp,0xc
c001f80a:	68 60 14 02 c0       	push   0xc0021460
c001f80f:	e8 74 61 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f814:	83 c4 10             	add    esp,0x10
c001f817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f81e:	8d 50 01             	lea    edx,[eax+0x1]
c001f821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f825:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f828:	90                   	nop
c001f829:	83 c4 0c             	add    esp,0xc
c001f82c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f82e <LinkedList<UnixFile>::getFirstElement()>:
c001f82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f832:	8b 00                	mov    eax,DWORD PTR [eax]
c001f834:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f836 <LinkedList<UnixFile>::removeFirst()>:
c001f836:	83 ec 0c             	sub    esp,0xc
c001f839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f83f:	85 c0                	test   eax,eax
c001f841:	75 12                	jne    c001f855 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f843:	83 ec 0c             	sub    esp,0xc
c001f846:	68 6c 14 02 c0       	push   0xc002146c
c001f84b:	e8 38 61 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f850:	83 c4 10             	add    esp,0x10
c001f853:	eb 7e                	jmp    c001f8d3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f859:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85f:	85 c0                	test   eax,eax
c001f861:	74 10                	je     c001f873 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f863:	83 ec 0c             	sub    esp,0xc
c001f866:	68 b7 14 02 c0       	push   0xc00214b7
c001f86b:	e8 18 61 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f870:	83 c4 10             	add    esp,0x10
c001f873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f877:	8b 00                	mov    eax,DWORD PTR [eax]
c001f879:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f87c:	85 c0                	test   eax,eax
c001f87e:	75 33                	jne    c001f8b3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f884:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f899:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f89c:	83 f8 01             	cmp    eax,0x1
c001f89f:	74 21                	je     c001f8c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f8a1:	83 ec 0c             	sub    esp,0xc
c001f8a4:	68 90 14 02 c0       	push   0xc0021490
c001f8a9:	e8 da 60 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	eb 0f                	jmp    c001f8c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	89 10                	mov    DWORD PTR [eax],edx
c001f8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8c9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8d3:	83 c4 0c             	add    esp,0xc
c001f8d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f8d8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f8d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f8e0 <DriverlessDevice::~DriverlessDevice()>:
c001f8e0:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c001f8e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8e9:	89 10                	mov    DWORD PTR [eax],edx
c001f8eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8ef:	50                   	push   eax
c001f8f0:	e8 1f 0b ff ff       	call   c0010414 <Device::~Device()>
c001f8f5:	83 c4 04             	add    esp,0x4
c001f8f8:	90                   	nop
c001f8f9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f8fa <DriverlessDevice::~DriverlessDevice()>:
c001f8fa:	83 ec 0c             	sub    esp,0xc
c001f8fd:	83 ec 0c             	sub    esp,0xc
c001f900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f904:	e8 d7 ff ff ff       	call   c001f8e0 <DriverlessDevice::~DriverlessDevice()>
c001f909:	83 c4 10             	add    esp,0x10
c001f90c:	83 ec 08             	sub    esp,0x8
c001f90f:	68 58 01 00 00       	push   0x158
c001f914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f918:	e8 16 f7 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f91d:	83 c4 10             	add    esp,0x10
c001f920:	83 c4 0c             	add    esp,0xc
c001f923:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f924 <LinkedList<Device>::addElement(Device*)>:
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f92c:	75 10                	jne    c001f93e <LinkedList<Device>::addElement(Device*)+0x1a>
c001f92e:	83 ec 0c             	sub    esp,0xc
c001f931:	68 34 14 02 c0       	push   0xc0021434
c001f936:	e8 4d 60 ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f93b:	83 c4 10             	add    esp,0x10
c001f93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f942:	8b 00                	mov    eax,DWORD PTR [eax]
c001f944:	85 c0                	test   eax,eax
c001f946:	74 3a                	je     c001f982 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94f:	85 c0                	test   eax,eax
c001f951:	74 2f                	je     c001f982 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f957:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f95e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f968:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f96c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f973:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f976:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f980:	eb 68                	jmp    c001f9ea <LinkedList<Device>::addElement(Device*)+0xc6>
c001f982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f986:	8b 00                	mov    eax,DWORD PTR [eax]
c001f988:	85 c0                	test   eax,eax
c001f98a:	75 4e                	jne    c001f9da <LinkedList<Device>::addElement(Device*)+0xb6>
c001f98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f993:	85 c0                	test   eax,eax
c001f995:	75 43                	jne    c001f9da <LinkedList<Device>::addElement(Device*)+0xb6>
c001f997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f99f:	89 10                	mov    DWORD PTR [eax],edx
c001f9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9b3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c4:	85 c0                	test   eax,eax
c001f9c6:	74 22                	je     c001f9ea <LinkedList<Device>::addElement(Device*)+0xc6>
c001f9c8:	83 ec 0c             	sub    esp,0xc
c001f9cb:	68 56 14 02 c0       	push   0xc0021456
c001f9d0:	e8 b3 5f ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f9d5:	83 c4 10             	add    esp,0x10
c001f9d8:	eb 10                	jmp    c001f9ea <LinkedList<Device>::addElement(Device*)+0xc6>
c001f9da:	83 ec 0c             	sub    esp,0xc
c001f9dd:	68 60 14 02 c0       	push   0xc0021460
c001f9e2:	e8 a1 5f ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9f1:	8d 50 01             	lea    edx,[eax+0x1]
c001f9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9fb:	90                   	nop
c001f9fc:	83 c4 0c             	add    esp,0xc
c001f9ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fa00 <LinkedList<Device>::LinkedList()>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa43:	83 ec 0c             	sub    esp,0xc
c001fa46:	68 1a 14 02 c0       	push   0xc002141a
c001fa4b:	e8 09 f7 fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001fa50:	83 c4 10             	add    esp,0x10
c001fa53:	90                   	nop
c001fa54:	83 c4 0c             	add    esp,0xc
c001fa57:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fa58 <CPU::readCR0()>:
c001fa58:	83 ec 10             	sub    esp,0x10
c001fa5b:	0f 20 c0             	mov    eax,cr0
c001fa5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa66:	83 c4 10             	add    esp,0x10
c001fa69:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fa6a <CPU::writeCR0(unsigned long)>:
c001fa6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa6e:	0f 22 c0             	mov    cr0,eax
c001fa71:	90                   	nop
c001fa72:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fa73 <CPU::readDR0()>:
c001fa73:	83 ec 10             	sub    esp,0x10
c001fa76:	0f 21 c0             	mov    eax,db0
c001fa79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa81:	83 c4 10             	add    esp,0x10
c001fa84:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fa85 <CPU::readDR1()>:
c001fa85:	83 ec 10             	sub    esp,0x10
c001fa88:	0f 21 c8             	mov    eax,db1
c001fa8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa93:	83 c4 10             	add    esp,0x10
c001fa96:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fa97 <CPU::readDR2()>:
c001fa97:	83 ec 10             	sub    esp,0x10
c001fa9a:	0f 21 d0             	mov    eax,db2
c001fa9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faa5:	83 c4 10             	add    esp,0x10
c001faa8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001faa9 <CPU::readDR3()>:
c001faa9:	83 ec 10             	sub    esp,0x10
c001faac:	0f 21 d8             	mov    eax,db3
c001faaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fab7:	83 c4 10             	add    esp,0x10
c001faba:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fabb <CPU::readDR6()>:
c001fabb:	83 ec 10             	sub    esp,0x10
c001fabe:	0f 21 f0             	mov    eax,db6
c001fac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fac9:	83 c4 10             	add    esp,0x10
c001facc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001facd <CPU::readDR7()>:
c001facd:	83 ec 10             	sub    esp,0x10
c001fad0:	0f 21 f8             	mov    eax,db7
c001fad3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fadb:	83 c4 10             	add    esp,0x10
c001fade:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fae0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fae6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fae8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faec:	8b 00                	mov    eax,DWORD PTR [eax]
c001faee:	85 c0                	test   eax,eax
c001faf0:	75 0e                	jne    c001fb00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001faf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faf9:	85 c0                	test   eax,eax
c001fafb:	75 03                	jne    c001fb00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fafd:	b0 01                	mov    al,0x1
c001faff:	c3                   	ret    
c001fb00:	b0 00                	mov    al,0x0
c001fb02:	90                   	nop
c001fb03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fb04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb0d:	85 c0                	test   eax,eax
c001fb0f:	75 15                	jne    c001fb26 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fb11:	83 ec 0c             	sub    esp,0xc
c001fb14:	68 6c 14 02 c0       	push   0xc002146c
c001fb19:	e8 6a 5e ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001fb1e:	83 c4 10             	add    esp,0x10
c001fb21:	e9 88 00 00 00       	jmp    c001fbae <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb30:	85 c0                	test   eax,eax
c001fb32:	0f 95 c0             	setne  al
c001fb35:	84 c0                	test   al,al
c001fb37:	74 10                	je     c001fb49 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fb39:	83 ec 0c             	sub    esp,0xc
c001fb3c:	68 b7 14 02 c0       	push   0xc00214b7
c001fb41:	e8 42 5e ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001fb46:	83 c4 10             	add    esp,0x10
c001fb49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb52:	85 c0                	test   eax,eax
c001fb54:	0f 94 c0             	sete   al
c001fb57:	84 c0                	test   al,al
c001fb59:	74 33                	je     c001fb8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb77:	83 f8 01             	cmp    eax,0x1
c001fb7a:	74 21                	je     c001fb9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb7c:	83 ec 0c             	sub    esp,0xc
c001fb7f:	68 90 14 02 c0       	push   0xc0021490
c001fb84:	e8 ff 5d ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	eb 0f                	jmp    c001fb9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fb8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb92:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fb97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb9b:	89 10                	mov    DWORD PTR [eax],edx
c001fb9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fba4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbae:	83 c4 0c             	add    esp,0xc
c001fbb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fbb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbba:	75 10                	jne    c001fbcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	68 34 14 02 c0       	push   0xc0021434
c001fbc4:	e8 bf 5d ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd2:	85 c0                	test   eax,eax
c001fbd4:	74 34                	je     c001fc0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbdd:	85 c0                	test   eax,eax
c001fbdf:	74 29                	je     c001fc0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc08:	eb 65                	jmp    c001fc6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc10:	85 c0                	test   eax,eax
c001fc12:	75 4b                	jne    c001fc5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc1b:	85 c0                	test   eax,eax
c001fc1d:	75 40                	jne    c001fc5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc27:	89 10                	mov    DWORD PTR [eax],edx
c001fc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc3b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc49:	85 c0                	test   eax,eax
c001fc4b:	74 22                	je     c001fc6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc4d:	83 ec 0c             	sub    esp,0xc
c001fc50:	68 56 14 02 c0       	push   0xc0021456
c001fc55:	e8 2e 5d ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001fc5a:	83 c4 10             	add    esp,0x10
c001fc5d:	eb 10                	jmp    c001fc6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fc5f:	83 ec 0c             	sub    esp,0xc
c001fc62:	68 60 14 02 c0       	push   0xc0021460
c001fc67:	e8 1c 5d ff ff       	call   c0015988 <Krnl::panic(char const*)>
c001fc6c:	83 c4 10             	add    esp,0x10
c001fc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc76:	8d 50 01             	lea    edx,[eax+0x1]
c001fc79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc80:	90                   	nop
c001fc81:	83 c4 0c             	add    esp,0xc
c001fc84:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fc86 <ACPI::~ACPI()>:
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	ba dc 22 02 c0       	mov    edx,0xc00222dc
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	89 10                	mov    DWORD PTR [eax],edx
c001fc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc98:	83 ec 0c             	sub    esp,0xc
c001fc9b:	50                   	push   eax
c001fc9c:	e8 73 07 ff ff       	call   c0010414 <Device::~Device()>
c001fca1:	83 c4 10             	add    esp,0x10
c001fca4:	90                   	nop
c001fca5:	83 c4 0c             	add    esp,0xc
c001fca8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fcaa <ACPI::~ACPI()>:
c001fcaa:	83 ec 0c             	sub    esp,0xc
c001fcad:	83 ec 0c             	sub    esp,0xc
c001fcb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcb4:	e8 cd ff ff ff       	call   c001fc86 <ACPI::~ACPI()>
c001fcb9:	83 c4 10             	add    esp,0x10
c001fcbc:	83 ec 08             	sub    esp,0x8
c001fcbf:	68 68 22 00 00       	push   0x2268
c001fcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc8:	e8 66 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fccd:	83 c4 10             	add    esp,0x10
c001fcd0:	83 c4 0c             	add    esp,0xc
c001fcd3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fcd4 <CPU::~CPU()>:
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	ba cc 26 02 c0       	mov    edx,0xc00226cc
c001fcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce0:	89 10                	mov    DWORD PTR [eax],edx
c001fce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	50                   	push   eax
c001fcea:	e8 25 07 ff ff       	call   c0010414 <Device::~Device()>
c001fcef:	83 c4 10             	add    esp,0x10
c001fcf2:	90                   	nop
c001fcf3:	83 c4 0c             	add    esp,0xc
c001fcf6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fcf8 <CPU::~CPU()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	83 ec 0c             	sub    esp,0xc
c001fcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd02:	e8 cd ff ff ff       	call   c001fcd4 <CPU::~CPU()>
c001fd07:	83 c4 10             	add    esp,0x10
c001fd0a:	83 ec 08             	sub    esp,0x8
c001fd0d:	68 98 11 00 00       	push   0x1198
c001fd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd16:	e8 18 f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	83 c4 0c             	add    esp,0xc
c001fd21:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fd22 <CPU::readCR4()>:
c001fd22:	83 ec 10             	sub    esp,0x10
c001fd25:	0f 20 e0             	mov    eax,cr4
c001fd28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd30:	83 c4 10             	add    esp,0x10
c001fd33:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fd34 <CPU::writeDR7(unsigned long)>:
c001fd34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd38:	0f 23 f8             	mov    db7,eax
c001fd3b:	90                   	nop
c001fd3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fd3d <CPU::writeCR4(unsigned long)>:
c001fd3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd41:	0f 22 e0             	mov    cr4,eax
c001fd44:	90                   	nop
c001fd45:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fd46 <CPU::readCR2()>:
c001fd46:	83 ec 10             	sub    esp,0x10
c001fd49:	0f 20 d0             	mov    eax,cr2
c001fd4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd54:	83 c4 10             	add    esp,0x10
c001fd57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fd58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fd58:	90                   	nop
c001fd59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fd5a <ThreadControlBlock::ThreadControlBlock()>:
c001fd5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd5e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd69:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fd70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd74:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fd7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd7f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fd86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd92:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fd96:	90                   	nop
c001fd97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fd98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fddb:	83 ec 0c             	sub    esp,0xc
c001fdde:	68 1a 14 02 c0       	push   0xc002141a
c001fde3:	e8 71 f3 fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001fde8:	83 c4 10             	add    esp,0x10
c001fdeb:	90                   	nop
c001fdec:	83 c4 0c             	add    esp,0xc
c001fdef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fdf0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fdf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdf4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fdf7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fdf8 <PCI::~PCI()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	ba 4c 33 02 c0       	mov    edx,0xc002334c
c001fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe04:	89 10                	mov    DWORD PTR [eax],edx
c001fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe0a:	83 ec 0c             	sub    esp,0xc
c001fe0d:	50                   	push   eax
c001fe0e:	e8 0b 00 ff ff       	call   c000fe1e <Bus::~Bus()>
c001fe13:	83 c4 10             	add    esp,0x10
c001fe16:	90                   	nop
c001fe17:	83 c4 0c             	add    esp,0xc
c001fe1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fe1c <PCI::~PCI()>:
c001fe1c:	83 ec 0c             	sub    esp,0xc
c001fe1f:	83 ec 0c             	sub    esp,0xc
c001fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe26:	e8 cd ff ff ff       	call   c001fdf8 <PCI::~PCI()>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	83 ec 08             	sub    esp,0x8
c001fe31:	68 58 01 00 00       	push   0x158
c001fe36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe3a:	e8 f4 f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fe3f:	83 c4 10             	add    esp,0x10
c001fe42:	83 c4 0c             	add    esp,0xc
c001fe45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fe46 <IDE::~IDE()>:
c001fe46:	83 ec 0c             	sub    esp,0xc
c001fe49:	ba b0 35 02 c0       	mov    edx,0xc00235b0
c001fe4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe52:	89 10                	mov    DWORD PTR [eax],edx
c001fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe58:	83 ec 0c             	sub    esp,0xc
c001fe5b:	50                   	push   eax
c001fe5c:	e8 c5 0a ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c001fe61:	83 c4 10             	add    esp,0x10
c001fe64:	90                   	nop
c001fe65:	83 c4 0c             	add    esp,0xc
c001fe68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fe6a <IDE::~IDE()>:
c001fe6a:	83 ec 0c             	sub    esp,0xc
c001fe6d:	83 ec 0c             	sub    esp,0xc
c001fe70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe74:	e8 cd ff ff ff       	call   c001fe46 <IDE::~IDE()>
c001fe79:	83 c4 10             	add    esp,0x10
c001fe7c:	83 ec 08             	sub    esp,0x8
c001fe7f:	68 70 02 00 00       	push   0x270
c001fe84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe88:	e8 a6 f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fe8d:	83 c4 10             	add    esp,0x10
c001fe90:	83 c4 0c             	add    esp,0xc
c001fe93:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fe94 <ATA::~ATA()>:
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	ba 00 36 02 c0       	mov    edx,0xc0023600
c001fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea0:	89 10                	mov    DWORD PTR [eax],edx
c001fea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	50                   	push   eax
c001feaa:	e8 55 0b ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001feaf:	83 c4 10             	add    esp,0x10
c001feb2:	90                   	nop
c001feb3:	83 c4 0c             	add    esp,0xc
c001feb6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001feb8 <ATA::~ATA()>:
c001feb8:	83 ec 0c             	sub    esp,0xc
c001febb:	83 ec 0c             	sub    esp,0xc
c001febe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec2:	e8 cd ff ff ff       	call   c001fe94 <ATA::~ATA()>
c001fec7:	83 c4 10             	add    esp,0x10
c001feca:	83 ec 08             	sub    esp,0x8
c001fecd:	68 7c 01 00 00       	push   0x17c
c001fed2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed6:	e8 58 f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fedb:	83 c4 10             	add    esp,0x10
c001fede:	83 c4 0c             	add    esp,0xc
c001fee1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fee2 <ATAPI::~ATAPI()>:
c001fee2:	83 ec 0c             	sub    esp,0xc
c001fee5:	ba 6c 36 02 c0       	mov    edx,0xc002366c
c001feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feee:	89 10                	mov    DWORD PTR [eax],edx
c001fef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef4:	83 ec 0c             	sub    esp,0xc
c001fef7:	50                   	push   eax
c001fef8:	e8 07 0b ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001fefd:	83 c4 10             	add    esp,0x10
c001ff00:	90                   	nop
c001ff01:	83 c4 0c             	add    esp,0xc
c001ff04:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ff06 <ATAPI::~ATAPI()>:
c001ff06:	83 ec 0c             	sub    esp,0xc
c001ff09:	83 ec 0c             	sub    esp,0xc
c001ff0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff10:	e8 cd ff ff ff       	call   c001fee2 <ATAPI::~ATAPI()>
c001ff15:	83 c4 10             	add    esp,0x10
c001ff18:	83 ec 08             	sub    esp,0x8
c001ff1b:	68 80 01 00 00       	push   0x180
c001ff20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff24:	e8 0a f1 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ff29:	83 c4 10             	add    esp,0x10
c001ff2c:	83 c4 0c             	add    esp,0xc
c001ff2f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ff30 <AVX::~AVX()>:
c001ff30:	83 ec 0c             	sub    esp,0xc
c001ff33:	ba a8 36 02 c0       	mov    edx,0xc00236a8
c001ff38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3c:	89 10                	mov    DWORD PTR [eax],edx
c001ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff42:	83 ec 0c             	sub    esp,0xc
c001ff45:	50                   	push   eax
c001ff46:	e8 3d 0b ff ff       	call   c0010a88 <FPU::~FPU()>
c001ff4b:	83 c4 10             	add    esp,0x10
c001ff4e:	90                   	nop
c001ff4f:	83 c4 0c             	add    esp,0xc
c001ff52:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ff54 <AVX::~AVX()>:
c001ff54:	83 ec 0c             	sub    esp,0xc
c001ff57:	83 ec 0c             	sub    esp,0xc
c001ff5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5e:	e8 cd ff ff ff       	call   c001ff30 <AVX::~AVX()>
c001ff63:	83 c4 10             	add    esp,0x10
c001ff66:	83 ec 08             	sub    esp,0x8
c001ff69:	68 58 01 00 00       	push   0x158
c001ff6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff72:	e8 bc f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ff77:	83 c4 10             	add    esp,0x10
c001ff7a:	83 c4 0c             	add    esp,0xc
c001ff7d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ff7e <MMX::~MMX()>:
c001ff7e:	83 ec 0c             	sub    esp,0xc
c001ff81:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c001ff86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8a:	89 10                	mov    DWORD PTR [eax],edx
c001ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff90:	83 ec 0c             	sub    esp,0xc
c001ff93:	50                   	push   eax
c001ff94:	e8 ef 0a ff ff       	call   c0010a88 <FPU::~FPU()>
c001ff99:	83 c4 10             	add    esp,0x10
c001ff9c:	90                   	nop
c001ff9d:	83 c4 0c             	add    esp,0xc
c001ffa0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ffa2 <MMX::~MMX()>:
c001ffa2:	83 ec 0c             	sub    esp,0xc
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffac:	e8 cd ff ff ff       	call   c001ff7e <MMX::~MMX()>
c001ffb1:	83 c4 10             	add    esp,0x10
c001ffb4:	83 ec 08             	sub    esp,0x8
c001ffb7:	68 58 01 00 00       	push   0x158
c001ffbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc0:	e8 6e f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ffc5:	83 c4 10             	add    esp,0x10
c001ffc8:	83 c4 0c             	add    esp,0xc
c001ffcb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ffcc <SSE::~SSE()>:
c001ffcc:	83 ec 0c             	sub    esp,0xc
c001ffcf:	ba 28 37 02 c0       	mov    edx,0xc0023728
c001ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd8:	89 10                	mov    DWORD PTR [eax],edx
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	50                   	push   eax
c001ffe2:	e8 a1 0a ff ff       	call   c0010a88 <FPU::~FPU()>
c001ffe7:	83 c4 10             	add    esp,0x10
c001ffea:	90                   	nop
c001ffeb:	83 c4 0c             	add    esp,0xc
c001ffee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fff0 <SSE::~SSE()>:
c001fff0:	83 ec 0c             	sub    esp,0xc
c001fff3:	83 ec 0c             	sub    esp,0xc
c001fff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffa:	e8 cd ff ff ff       	call   c001ffcc <SSE::~SSE()>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	83 ec 08             	sub    esp,0x8
c0020005:	68 58 01 00 00       	push   0x158
c002000a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000e:	e8 20 f0 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	83 c4 0c             	add    esp,0xc
c0020019:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002001a <x87::~x87()>:
c002001a:	83 ec 0c             	sub    esp,0xc
c002001d:	ba 68 37 02 c0       	mov    edx,0xc0023768
c0020022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020026:	89 10                	mov    DWORD PTR [eax],edx
c0020028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002c:	83 ec 0c             	sub    esp,0xc
c002002f:	50                   	push   eax
c0020030:	e8 53 0a ff ff       	call   c0010a88 <FPU::~FPU()>
c0020035:	83 c4 10             	add    esp,0x10
c0020038:	90                   	nop
c0020039:	83 c4 0c             	add    esp,0xc
c002003c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002003e <x87::~x87()>:
c002003e:	83 ec 0c             	sub    esp,0xc
c0020041:	83 ec 0c             	sub    esp,0xc
c0020044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020048:	e8 cd ff ff ff       	call   c002001a <x87::~x87()>
c002004d:	83 c4 10             	add    esp,0x10
c0020050:	83 ec 08             	sub    esp,0x8
c0020053:	68 58 01 00 00       	push   0x158
c0020058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005c:	e8 d2 ef fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0020061:	83 c4 10             	add    esp,0x10
c0020064:	83 c4 0c             	add    esp,0xc
c0020067:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020068 <IOAPIC::~IOAPIC()>:
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	ba c0 38 02 c0       	mov    edx,0xc00238c0
c0020070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020074:	89 10                	mov    DWORD PTR [eax],edx
c0020076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007a:	83 ec 0c             	sub    esp,0xc
c002007d:	50                   	push   eax
c002007e:	e8 91 03 ff ff       	call   c0010414 <Device::~Device()>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	90                   	nop
c0020087:	83 c4 0c             	add    esp,0xc
c002008a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002008c <IOAPIC::~IOAPIC()>:
c002008c:	83 ec 0c             	sub    esp,0xc
c002008f:	83 ec 0c             	sub    esp,0xc
c0020092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020096:	e8 cd ff ff ff       	call   c0020068 <IOAPIC::~IOAPIC()>
c002009b:	83 c4 10             	add    esp,0x10
c002009e:	83 ec 08             	sub    esp,0x8
c00200a1:	68 68 01 00 00       	push   0x168
c00200a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200aa:	e8 84 ef fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00200af:	83 c4 10             	add    esp,0x10
c00200b2:	83 c4 0c             	add    esp,0xc
c00200b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00200b6 <APIC::~APIC()>:
c00200b6:	83 ec 0c             	sub    esp,0xc
c00200b9:	ba 78 38 02 c0       	mov    edx,0xc0023878
c00200be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c2:	89 10                	mov    DWORD PTR [eax],edx
c00200c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c8:	83 ec 0c             	sub    esp,0xc
c00200cb:	50                   	push   eax
c00200cc:	e8 81 0e ff ff       	call   c0010f52 <InterruptController::~InterruptController()>
c00200d1:	83 c4 10             	add    esp,0x10
c00200d4:	90                   	nop
c00200d5:	83 c4 0c             	add    esp,0xc
c00200d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00200da <APIC::~APIC()>:
c00200da:	83 ec 0c             	sub    esp,0xc
c00200dd:	83 ec 0c             	sub    esp,0xc
c00200e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e4:	e8 cd ff ff ff       	call   c00200b6 <APIC::~APIC()>
c00200e9:	83 c4 10             	add    esp,0x10
c00200ec:	83 ec 08             	sub    esp,0x8
c00200ef:	68 58 21 00 00       	push   0x2158
c00200f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f8:	e8 36 ef fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00200fd:	83 c4 10             	add    esp,0x10
c0020100:	83 c4 0c             	add    esp,0xc
c0020103:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020104 <PIC::~PIC()>:
c0020104:	83 ec 0c             	sub    esp,0xc
c0020107:	ba 10 39 02 c0       	mov    edx,0xc0023910
c002010c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020110:	89 10                	mov    DWORD PTR [eax],edx
c0020112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	50                   	push   eax
c002011a:	e8 33 0e ff ff       	call   c0010f52 <InterruptController::~InterruptController()>
c002011f:	83 c4 10             	add    esp,0x10
c0020122:	90                   	nop
c0020123:	83 c4 0c             	add    esp,0xc
c0020126:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020128 <PIC::~PIC()>:
c0020128:	83 ec 0c             	sub    esp,0xc
c002012b:	83 ec 0c             	sub    esp,0xc
c002012e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020132:	e8 cd ff ff ff       	call   c0020104 <PIC::~PIC()>
c0020137:	83 c4 10             	add    esp,0x10
c002013a:	83 ec 08             	sub    esp,0x8
c002013d:	68 58 21 00 00       	push   0x2158
c0020142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020146:	e8 e8 ee fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c002014b:	83 c4 10             	add    esp,0x10
c002014e:	83 c4 0c             	add    esp,0xc
c0020151:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020152 <APICTimer::~APICTimer()>:
c0020152:	83 ec 0c             	sub    esp,0xc
c0020155:	ba 64 39 02 c0       	mov    edx,0xc0023964
c002015a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002015e:	89 10                	mov    DWORD PTR [eax],edx
c0020160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020164:	83 ec 0c             	sub    esp,0xc
c0020167:	50                   	push   eax
c0020168:	e8 13 2b ff ff       	call   c0012c80 <Timer::~Timer()>
c002016d:	83 c4 10             	add    esp,0x10
c0020170:	90                   	nop
c0020171:	83 c4 0c             	add    esp,0xc
c0020174:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020176 <APICTimer::~APICTimer()>:
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	83 ec 0c             	sub    esp,0xc
c002017c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020180:	e8 cd ff ff ff       	call   c0020152 <APICTimer::~APICTimer()>
c0020185:	83 c4 10             	add    esp,0x10
c0020188:	83 ec 08             	sub    esp,0x8
c002018b:	68 60 01 00 00       	push   0x160
c0020190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020194:	e8 9a ee fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	83 c4 0c             	add    esp,0xc
c002019f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00201a0 <PIT::~PIT()>:
c00201a0:	83 ec 0c             	sub    esp,0xc
c00201a3:	ba b4 39 02 c0       	mov    edx,0xc00239b4
c00201a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ac:	89 10                	mov    DWORD PTR [eax],edx
c00201ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201b2:	83 ec 0c             	sub    esp,0xc
c00201b5:	50                   	push   eax
c00201b6:	e8 c5 2a ff ff       	call   c0012c80 <Timer::~Timer()>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	90                   	nop
c00201bf:	83 c4 0c             	add    esp,0xc
c00201c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00201c4 <PIT::~PIT()>:
c00201c4:	83 ec 0c             	sub    esp,0xc
c00201c7:	83 ec 0c             	sub    esp,0xc
c00201ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ce:	e8 cd ff ff ff       	call   c00201a0 <PIT::~PIT()>
c00201d3:	83 c4 10             	add    esp,0x10
c00201d6:	83 ec 08             	sub    esp,0x8
c00201d9:	68 5c 01 00 00       	push   0x15c
c00201de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e2:	e8 4c ee fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c00201e7:	83 c4 10             	add    esp,0x10
c00201ea:	83 c4 0c             	add    esp,0xc
c00201ed:	c3                   	ret    
