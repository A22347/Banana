
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 2a d7 00 00       	call   c000d74a <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 e8 01 00       	call   c001e8d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b4 f4 01 c0       	mov    ebx,0xc001f4b4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc f4 01 c0    	cmp    ebx,0xc001f4bc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 28 b3 03 c0       	mov    eax,0xc003b328
c0000049:	3d 28 b3 03 c0       	cmp    eax,0xc003b328
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 28 b3 03 c0       	push   0xc003b328
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 28 b3 03 c0       	mov    eax,0xc003b328
c0000075:	2d 28 b3 03 c0       	sub    eax,0xc003b328
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 28 b3 03 c0       	push   0xc003b328
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 b4 03 c0 00 	cmp    BYTE PTR ds:0xc003b4c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 f4 01 c0       	mov    ebx,0xc001f4c4
c00000bb:	81 eb c0 f4 01 c0    	sub    ebx,0xc001f4c0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 f4 01 c0       	mov    esi,0xc001f4c0
c00000ca:	a1 cc b4 03 c0       	mov    eax,ds:0xc003b4cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc b4 03 c0       	mov    ds:0xc003b4cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc b4 03 c0       	mov    eax,ds:0xc003b4cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 28 b3 03 c0       	push   0xc003b328
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 b4 03 c0 01 	mov    BYTE PTR ds:0xc003b4c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 b4 03 c0       	push   0xc003b4d0
c000012c:	68 28 b3 03 c0       	push   0xc003b328
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	90                   	nop
c00001b3:	90                   	nop
c00001b4:	90                   	nop
c00001b5:	90                   	nop
c00001b6:	90                   	nop
c00001b7:	90                   	nop
c00001b8:	90                   	nop
c00001b9:	90                   	nop
c00001ba:	90                   	nop
c00001bb:	90                   	nop
c00001bc:	90                   	nop
c00001bd:	90                   	nop
c00001be:	90                   	nop
c00001bf:	90                   	nop
c00001c0:	90                   	nop
c00001c1:	90                   	nop
c00001c2:	90                   	nop
c00001c3:	90                   	nop
c00001c4:	90                   	nop
c00001c5:	90                   	nop
c00001c6:	90                   	nop
c00001c7:	90                   	nop
c00001c8:	90                   	nop
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	31 c0                	xor    eax,eax
c00001e1:	c3                   	ret    

c00001e2 <goToVM86>:
c00001e2:	fa                   	cli    
c00001e3:	55                   	push   ebp
c00001e4:	89 e5                	mov    ebp,esp
c00001e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001e9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001f2:	25 ff ff 00 00       	and    eax,0xffff
c00001f7:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000203:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000209:	52                   	push   edx
c000020a:	51                   	push   ecx
c000020b:	68 02 02 02 00       	push   0x20202
c0000210:	53                   	push   ebx
c0000211:	50                   	push   eax
c0000212:	cf                   	iret   

c0000213 <goToUsermode>:
c0000213:	fa                   	cli    
c0000214:	55                   	push   ebp
c0000215:	89 e5                	mov    ebp,esp
c0000217:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000021a:	66 b8 23 00          	mov    ax,0x23
c000021e:	66 8e d8             	mov    ds,ax
c0000221:	66 8e c0             	mov    es,ax
c0000224:	66 8e e0             	mov    fs,ax
c0000227:	66 8e e8             	mov    gs,ax
c000022a:	89 e0                	mov    eax,esp
c000022c:	68 23 00 00 00       	push   0x23
c0000231:	50                   	push   eax
c0000232:	68 02 02 00 00       	push   0x202
c0000237:	68 1b 00 00 00       	push   0x1b
c000023c:	53                   	push   ebx
c000023d:	cf                   	iret   

c000023e <switchToThreadASMFirstTime>:
c000023e:	9c                   	pushf  
c000023f:	fa                   	cli    
c0000240:	50                   	push   eax
c0000241:	53                   	push   ebx
c0000242:	51                   	push   ecx
c0000243:	52                   	push   edx
c0000244:	56                   	push   esi
c0000245:	57                   	push   edi
c0000246:	55                   	push   ebp
c0000247:	e9 11 00 00 00       	jmp    c000025d <commonThreadSwitch>

c000024c <switchToThreadASM>:
c000024c:	9c                   	pushf  
c000024d:	50                   	push   eax
c000024e:	53                   	push   ebx
c000024f:	51                   	push   ecx
c0000250:	52                   	push   edx
c0000251:	56                   	push   esi
c0000252:	57                   	push   edi
c0000253:	55                   	push   ebp
c0000254:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000025a:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000025d <commonThreadSwitch>:
c000025d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000261:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000267:	8b 06                	mov    eax,DWORD PTR [esi]
c0000269:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000026c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000026f:	0f 20 d9             	mov    ecx,cr3
c0000272:	39 c8                	cmp    eax,ecx
c0000274:	74 03                	je     c0000279 <commonThreadSwitch.doneVAS>
c0000276:	0f 22 d8             	mov    cr3,eax

c0000279 <commonThreadSwitch.doneVAS>:
c0000279:	85 d2                	test   edx,edx
c000027b:	74 4e                	je     c00002cb <commonThreadSwitch.notFirstTime>
c000027d:	fa                   	cli    
c000027e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000281:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000286:	60                   	pusha  
c0000287:	e8 48 20 01 00       	call   c00122d4 <mapVASFirstTime>
c000028c:	61                   	popa   
c000028d:	89 c4                	mov    esp,eax
c000028f:	56                   	push   esi
c0000290:	52                   	push   edx
c0000291:	e8 8c dc 00 00       	call   c000df22 <changeTSS>
c0000296:	5a                   	pop    edx
c0000297:	5e                   	pop    esi
c0000298:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000029f:	81 fa 01 00 00 00    	cmp    edx,0x1
c00002a5:	74 39                	je     c00002e0 <commonThreadSwitch.cameOffAFork>
c00002a7:	5d                   	pop    ebp
c00002a8:	5f                   	pop    edi
c00002a9:	5e                   	pop    esi
c00002aa:	59                   	pop    ecx
c00002ab:	59                   	pop    ecx
c00002ac:	5b                   	pop    ebx
c00002ad:	58                   	pop    eax
c00002ae:	81 c4 04 00 00 00    	add    esp,0x4
c00002b4:	6a 02                	push   0x2
c00002b6:	9d                   	popf   
c00002b7:	52                   	push   edx
c00002b8:	e8 78 e0 00 00       	call   c000e335 <taskStartupFunction>
c00002bd:	5a                   	pop    edx
c00002be:	50                   	push   eax
c00002bf:	ff d2                	call   edx
c00002c1:	e8 1e e8 00 00       	call   c000eae4 <taskReturned>
c00002c6:	e9 fb ff ff ff       	jmp    c00002c6 <commonThreadSwitch.doneVAS+0x4d>

c00002cb <commonThreadSwitch.notFirstTime>:
c00002cb:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ce:	56                   	push   esi
c00002cf:	52                   	push   edx
c00002d0:	e8 4d dc 00 00       	call   c000df22 <changeTSS>
c00002d5:	5a                   	pop    edx
c00002d6:	5e                   	pop    esi
c00002d7:	5d                   	pop    ebp
c00002d8:	5f                   	pop    edi
c00002d9:	5e                   	pop    esi
c00002da:	5a                   	pop    edx
c00002db:	59                   	pop    ecx
c00002dc:	5b                   	pop    ebx
c00002dd:	58                   	pop    eax
c00002de:	9d                   	popf   
c00002df:	c3                   	ret    

c00002e0 <commonThreadSwitch.cameOffAFork>:
c00002e0:	31 c0                	xor    eax,eax
c00002e2:	31 d2                	xor    edx,edx
c00002e4:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002e7:	e9 a2 02 00 00       	jmp    c000058e <offAForkJumpThingy>

c00002ec <detectCPUID>:
c00002ec:	9c                   	pushf  
c00002ed:	9c                   	pushf  
c00002ee:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002f5:	9d                   	popf   
c00002f6:	9c                   	pushf  
c00002f7:	58                   	pop    eax
c00002f8:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002fb:	9d                   	popf   
c00002fc:	25 00 00 20 00       	and    eax,0x200000
c0000301:	c3                   	ret    

c0000302 <asmQuickAcquireLock>:
c0000302:	55                   	push   ebp
c0000303:	89 e5                	mov    ebp,esp
c0000305:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000308 <asmQuickAcquireLock.retry>:
c0000308:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030d:	72 02                	jb     c0000311 <asmQuickAcquireLock.spin_with_pause>
c000030f:	fa                   	cli    
c0000310:	c3                   	ret    

c0000311 <asmQuickAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmQuickAcquireLock.spin_with_pause>
c000031b:	e9 e8 ff ff ff       	jmp    c0000308 <asmQuickAcquireLock.retry>

c0000320 <asmQuickReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000032a:	5d                   	pop    ebp
c000032b:	c3                   	ret    

c000032c <asmAcquireLock>:
c000032c:	55                   	push   ebp
c000032d:	89 e5                	mov    ebp,esp
c000032f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000332 <asmAcquireLock.retry>:
c0000332:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000337:	72 05                	jb     c000033e <asmAcquireLock.spin_with_pause>
c0000339:	9c                   	pushf  
c000033a:	58                   	pop    eax
c000033b:	fa                   	cli    
c000033c:	5d                   	pop    ebp
c000033d:	c3                   	ret    

c000033e <asmAcquireLock.spin_with_pause>:
c000033e:	f3 90                	pause  
c0000340:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000346:	75 f6                	jne    c000033e <asmAcquireLock.spin_with_pause>
c0000348:	e9 e5 ff ff ff       	jmp    c0000332 <asmAcquireLock.retry>

c000034d <asmReleaseLock>:
c000034d:	55                   	push   ebp
c000034e:	89 e5                	mov    ebp,esp
c0000350:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000356:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000035c:	52                   	push   edx
c000035d:	9d                   	popf   
c000035e:	5d                   	pop    ebp
c000035f:	c3                   	ret    

c0000360 <loadGDT>:
c0000360:	0f 01 15 a4 ba 03 c0 	lgdtd  ds:0xc003baa4
c0000367:	66 b8 10 00          	mov    ax,0x10
c000036b:	66 8e d8             	mov    ds,ax
c000036e:	66 8e c0             	mov    es,ax
c0000371:	66 8e e0             	mov    fs,ax
c0000374:	66 8e e8             	mov    gs,ax
c0000377:	66 8e d0             	mov    ss,ax
c000037a:	e9 00 00 00 00       	jmp    c000037f <flush2>

c000037f <flush2>:
c000037f:	c3                   	ret    

c0000380 <isr0>:
c0000380:	fa                   	cli    
c0000381:	68 00 00 00 00       	push   0x0
c0000386:	68 00 00 00 00       	push   0x0
c000038b:	e9 a2 01 00 00       	jmp    c0000532 <int_common_stub>

c0000390 <isr1>:
c0000390:	fa                   	cli    
c0000391:	6a 00                	push   0x0
c0000393:	6a 01                	push   0x1
c0000395:	e9 98 01 00 00       	jmp    c0000532 <int_common_stub>

c000039a <isr2>:
c000039a:	fa                   	cli    
c000039b:	6a 00                	push   0x0
c000039d:	6a 02                	push   0x2
c000039f:	e9 8e 01 00 00       	jmp    c0000532 <int_common_stub>

c00003a4 <isr3>:
c00003a4:	fa                   	cli    
c00003a5:	6a 00                	push   0x0
c00003a7:	6a 03                	push   0x3
c00003a9:	e9 84 01 00 00       	jmp    c0000532 <int_common_stub>

c00003ae <isr4>:
c00003ae:	fa                   	cli    
c00003af:	6a 00                	push   0x0
c00003b1:	6a 04                	push   0x4
c00003b3:	e9 7a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003b8 <isr5>:
c00003b8:	fa                   	cli    
c00003b9:	6a 00                	push   0x0
c00003bb:	6a 05                	push   0x5
c00003bd:	e9 70 01 00 00       	jmp    c0000532 <int_common_stub>

c00003c2 <isr6>:
c00003c2:	fa                   	cli    
c00003c3:	6a 00                	push   0x0
c00003c5:	6a 06                	push   0x6
c00003c7:	e9 66 01 00 00       	jmp    c0000532 <int_common_stub>

c00003cc <isr7>:
c00003cc:	fa                   	cli    
c00003cd:	6a 00                	push   0x0
c00003cf:	6a 07                	push   0x7
c00003d1:	e9 5c 01 00 00       	jmp    c0000532 <int_common_stub>

c00003d6 <isr8>:
c00003d6:	fa                   	cli    
c00003d7:	6a 08                	push   0x8
c00003d9:	e9 54 01 00 00       	jmp    c0000532 <int_common_stub>

c00003de <isr9>:
c00003de:	fa                   	cli    
c00003df:	6a 00                	push   0x0
c00003e1:	6a 09                	push   0x9
c00003e3:	e9 4a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003e8 <isr10>:
c00003e8:	fa                   	cli    
c00003e9:	6a 0a                	push   0xa
c00003eb:	e9 42 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f0 <isr11>:
c00003f0:	fa                   	cli    
c00003f1:	6a 0b                	push   0xb
c00003f3:	e9 3a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f8 <isr12>:
c00003f8:	fa                   	cli    
c00003f9:	6a 0c                	push   0xc
c00003fb:	e9 32 01 00 00       	jmp    c0000532 <int_common_stub>

c0000400 <isr13>:
c0000400:	fa                   	cli    
c0000401:	6a 0d                	push   0xd
c0000403:	e9 2a 01 00 00       	jmp    c0000532 <int_common_stub>

c0000408 <isr14>:
c0000408:	fa                   	cli    
c0000409:	6a 0e                	push   0xe
c000040b:	e9 22 01 00 00       	jmp    c0000532 <int_common_stub>

c0000410 <isr15>:
c0000410:	fa                   	cli    
c0000411:	6a 00                	push   0x0
c0000413:	6a 0f                	push   0xf
c0000415:	e9 18 01 00 00       	jmp    c0000532 <int_common_stub>

c000041a <isr16>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 10                	push   0x10
c000041f:	e9 0e 01 00 00       	jmp    c0000532 <int_common_stub>

c0000424 <isr17>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 11                	push   0x11
c0000429:	e9 04 01 00 00       	jmp    c0000532 <int_common_stub>

c000042e <isr18>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 12                	push   0x12
c0000433:	e9 fa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000438 <isr96>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 60                	push   0x60
c000043d:	e9 20 01 00 00       	jmp    c0000562 <syscall_common_stub>

c0000442 <irq0>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 20                	push   0x20
c0000447:	e9 e6 00 00 00       	jmp    c0000532 <int_common_stub>

c000044c <irq1>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 21                	push   0x21
c0000451:	e9 dc 00 00 00       	jmp    c0000532 <int_common_stub>

c0000456 <irq2>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 22                	push   0x22
c000045b:	e9 d2 00 00 00       	jmp    c0000532 <int_common_stub>

c0000460 <irq3>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 23                	push   0x23
c0000465:	e9 c8 00 00 00       	jmp    c0000532 <int_common_stub>

c000046a <irq4>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 24                	push   0x24
c000046f:	e9 be 00 00 00       	jmp    c0000532 <int_common_stub>

c0000474 <irq5>:
c0000474:	fa                   	cli    
c0000475:	6a 00                	push   0x0
c0000477:	6a 25                	push   0x25
c0000479:	e9 b4 00 00 00       	jmp    c0000532 <int_common_stub>

c000047e <irq6>:
c000047e:	fa                   	cli    
c000047f:	6a 00                	push   0x0
c0000481:	6a 26                	push   0x26
c0000483:	e9 aa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000488 <irq7>:
c0000488:	fa                   	cli    
c0000489:	6a 00                	push   0x0
c000048b:	6a 27                	push   0x27
c000048d:	e9 a0 00 00 00       	jmp    c0000532 <int_common_stub>

c0000492 <irq8>:
c0000492:	fa                   	cli    
c0000493:	6a 00                	push   0x0
c0000495:	6a 28                	push   0x28
c0000497:	e9 96 00 00 00       	jmp    c0000532 <int_common_stub>

c000049c <irq9>:
c000049c:	fa                   	cli    
c000049d:	6a 00                	push   0x0
c000049f:	6a 29                	push   0x29
c00004a1:	e9 8c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004a6 <irq10>:
c00004a6:	fa                   	cli    
c00004a7:	6a 00                	push   0x0
c00004a9:	6a 2a                	push   0x2a
c00004ab:	e9 82 00 00 00       	jmp    c0000532 <int_common_stub>

c00004b0 <irq11>:
c00004b0:	fa                   	cli    
c00004b1:	6a 00                	push   0x0
c00004b3:	6a 2b                	push   0x2b
c00004b5:	e9 78 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ba <irq12>:
c00004ba:	fa                   	cli    
c00004bb:	6a 00                	push   0x0
c00004bd:	6a 2c                	push   0x2c
c00004bf:	e9 6e 00 00 00       	jmp    c0000532 <int_common_stub>

c00004c4 <irq13>:
c00004c4:	fa                   	cli    
c00004c5:	6a 00                	push   0x0
c00004c7:	6a 2d                	push   0x2d
c00004c9:	e9 64 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ce <irq14>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 2e                	push   0x2e
c00004d3:	e9 5a 00 00 00       	jmp    c0000532 <int_common_stub>

c00004d8 <irq15>:
c00004d8:	fa                   	cli    
c00004d9:	6a 00                	push   0x0
c00004db:	6a 2f                	push   0x2f
c00004dd:	e9 50 00 00 00       	jmp    c0000532 <int_common_stub>

c00004e2 <irq16>:
c00004e2:	fa                   	cli    
c00004e3:	6a 00                	push   0x0
c00004e5:	6a 30                	push   0x30
c00004e7:	e9 46 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ec <irq17>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 31                	push   0x31
c00004f1:	e9 3c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004f6 <irq18>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 32                	push   0x32
c00004fb:	e9 32 00 00 00       	jmp    c0000532 <int_common_stub>

c0000500 <irq19>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 33                	push   0x33
c0000505:	e9 28 00 00 00       	jmp    c0000532 <int_common_stub>

c000050a <irq20>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 34                	push   0x34
c000050f:	e9 1e 00 00 00       	jmp    c0000532 <int_common_stub>

c0000514 <irq21>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 35                	push   0x35
c0000519:	e9 14 00 00 00       	jmp    c0000532 <int_common_stub>

c000051e <irq22>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 36                	push   0x36
c0000523:	e9 0a 00 00 00       	jmp    c0000532 <int_common_stub>

c0000528 <irq23>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 37                	push   0x37
c000052d:	e9 00 00 00 00       	jmp    c0000532 <int_common_stub>

c0000532 <int_common_stub>:
c0000532:	60                   	pusha  
c0000533:	1e                   	push   ds
c0000534:	06                   	push   es
c0000535:	0f a0                	push   fs
c0000537:	0f a8                	push   gs
c0000539:	66 b8 10 00          	mov    ax,0x10
c000053d:	66 8e d8             	mov    ds,ax
c0000540:	66 8e c0             	mov    es,ax
c0000543:	66 8e e0             	mov    fs,ax
c0000546:	66 8e e8             	mov    gs,ax
c0000549:	89 e1                	mov    ecx,esp
c000054b:	51                   	push   ecx
c000054c:	b9 97 3f 01 c0       	mov    ecx,0xc0013f97
c0000551:	ff d1                	call   ecx
c0000553:	59                   	pop    ecx
c0000554:	0f a9                	pop    gs
c0000556:	0f a1                	pop    fs
c0000558:	07                   	pop    es
c0000559:	1f                   	pop    ds
c000055a:	61                   	popa   
c000055b:	81 c4 08 00 00 00    	add    esp,0x8
c0000561:	cf                   	iret   

c0000562 <syscall_common_stub>:
c0000562:	60                   	pusha  
c0000563:	1e                   	push   ds
c0000564:	06                   	push   es
c0000565:	0f a0                	push   fs
c0000567:	0f a8                	push   gs
c0000569:	66 b8 10 00          	mov    ax,0x10
c000056d:	66 8e d8             	mov    ds,ax
c0000570:	66 8e c0             	mov    es,ax
c0000573:	66 8e e0             	mov    fs,ax
c0000576:	66 8e e8             	mov    gs,ax
c0000579:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000057f:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000582:	89 e1                	mov    ecx,esp
c0000584:	51                   	push   ecx
c0000585:	fb                   	sti    
c0000586:	b9 97 3f 01 c0       	mov    ecx,0xc0013f97
c000058b:	ff d1                	call   ecx
c000058d:	59                   	pop    ecx

c000058e <offAForkJumpThingy>:
c000058e:	0f a9                	pop    gs
c0000590:	0f a1                	pop    fs
c0000592:	07                   	pop    es
c0000593:	1f                   	pop    ds
c0000594:	61                   	popa   
c0000595:	81 c4 08 00 00 00    	add    esp,0x8
c000059b:	cf                   	iret   

c000059c <memcmp>:
c000059c:	55                   	push   ebp
c000059d:	89 e5                	mov    ebp,esp
c000059f:	83 ec 10             	sub    esp,0x10
c00005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00005a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00005ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00005ae:	eb 06                	jmp    c00005b6 <memcmp+0x1a>
c00005b0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00005b3:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c00005b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00005b9:	8d 50 ff             	lea    edx,[eax-0x1]
c00005bc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c00005bf:	85 c0                	test   eax,eax
c00005c1:	74 0e                	je     c00005d1 <memcmp+0x35>
c00005c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00005c8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005cb:	8a 00                	mov    al,BYTE PTR [eax]
c00005cd:	38 c2                	cmp    dl,al
c00005cf:	74 df                	je     c00005b0 <memcmp+0x14>
c00005d1:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00005d5:	74 16                	je     c00005ed <memcmp+0x51>
c00005d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005da:	8a 00                	mov    al,BYTE PTR [eax]
c00005dc:	0f b6 d0             	movzx  edx,al
c00005df:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005e2:	8a 00                	mov    al,BYTE PTR [eax]
c00005e4:	0f b6 c0             	movzx  eax,al
c00005e7:	29 c2                	sub    edx,eax
c00005e9:	89 d0                	mov    eax,edx
c00005eb:	eb 05                	jmp    c00005f2 <memcmp+0x56>
c00005ed:	b8 00 00 00 00       	mov    eax,0x0
c00005f2:	c9                   	leave  
c00005f3:	c3                   	ret    

c00005f4 <memmove>:
c00005f4:	55                   	push   ebp
c00005f5:	89 e5                	mov    ebp,esp
c00005f7:	83 ec 10             	sub    esp,0x10
c00005fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000603:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0000606:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000609:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c000060c:	76 1d                	jbe    c000062b <memmove+0x37>
c000060e:	eb 13                	jmp    c0000623 <memmove+0x2f>
c0000610:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000613:	8a 10                	mov    dl,BYTE PTR [eax]
c0000615:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000618:	88 10                	mov    BYTE PTR [eax],dl
c000061a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000061d:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c0000620:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000623:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000627:	75 e7                	jne    c0000610 <memmove+0x1c>
c0000629:	eb 31                	jmp    c000065c <memmove+0x68>
c000062b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c000062e:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c0000631:	73 29                	jae    c000065c <memmove+0x68>
c0000633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000636:	48                   	dec    eax
c0000637:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
c000063a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000063d:	48                   	dec    eax
c000063e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
c0000641:	eb 13                	jmp    c0000656 <memmove+0x62>
c0000643:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000646:	8a 10                	mov    dl,BYTE PTR [eax]
c0000648:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000064b:	88 10                	mov    BYTE PTR [eax],dl
c000064d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000650:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
c0000653:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000656:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000065a:	75 e7                	jne    c0000643 <memmove+0x4f>
c000065c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000065f:	c9                   	leave  
c0000660:	c3                   	ret    

c0000661 <memcpy>:
c0000661:	55                   	push   ebp
c0000662:	89 e5                	mov    ebp,esp
c0000664:	57                   	push   edi
c0000665:	56                   	push   esi
c0000666:	83 ec 20             	sub    esp,0x20
c0000669:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000066c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000066f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0000675:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000678:	83 e0 03             	and    eax,0x3
c000067b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000067e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000681:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0000684:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0000687:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000068a:	c1 e8 02             	shr    eax,0x2
c000068d:	89 c1                	mov    ecx,eax
c000068f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000692:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000695:	89 c6                	mov    esi,eax
c0000697:	89 d7                	mov    edi,edx
c0000699:	fc                   	cld    
c000069a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000069c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00006a3:	eb 21                	jmp    c00006c6 <memcpy+0x65>
c00006a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00006a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006ab:	01 c2                	add    edx,eax
c00006ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00006b0:	01 d0                	add    eax,edx
c00006b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00006b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00006b8:	01 d1                	add    ecx,edx
c00006ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00006bd:	01 ca                	add    edx,ecx
c00006bf:	8a 00                	mov    al,BYTE PTR [eax]
c00006c1:	88 02                	mov    BYTE PTR [edx],al
c00006c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00006c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006c9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
c00006cc:	72 d7                	jb     c00006a5 <memcpy+0x44>
c00006ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00006d1:	83 c4 20             	add    esp,0x20
c00006d4:	5e                   	pop    esi
c00006d5:	5f                   	pop    edi
c00006d6:	5d                   	pop    ebp
c00006d7:	c3                   	ret    

c00006d8 <memset>:
c00006d8:	55                   	push   ebp
c00006d9:	89 e5                	mov    ebp,esp
c00006db:	83 ec 10             	sub    esp,0x10
c00006de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00006e4:	eb 10                	jmp    c00006f6 <memset+0x1e>
c00006e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00006e9:	88 c2                	mov    dl,al
c00006eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006ee:	88 10                	mov    BYTE PTR [eax],dl
c00006f0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00006f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00006fa:	75 ea                	jne    c00006e6 <memset+0xe>
c00006fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006ff:	c9                   	leave  
c0000700:	c3                   	ret    

c0000701 <strlen>:
c0000701:	55                   	push   ebp
c0000702:	89 e5                	mov    ebp,esp
c0000704:	83 ec 10             	sub    esp,0x10
c0000707:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c000070e:	eb 06                	jmp    c0000716 <strlen+0x15>
c0000710:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000713:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000719:	8a 00                	mov    al,BYTE PTR [eax]
c000071b:	84 c0                	test   al,al
c000071d:	75 f1                	jne    c0000710 <strlen+0xf>
c000071f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000722:	c9                   	leave  
c0000723:	c3                   	ret    

c0000724 <strpbrk>:
c0000724:	55                   	push   ebp
c0000725:	89 e5                	mov    ebp,esp
c0000727:	83 ec 10             	sub    esp,0x10
c000072a:	eb 2a                	jmp    c0000756 <strpbrk+0x32>
c000072c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000072f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000732:	eb 16                	jmp    c000074a <strpbrk+0x26>
c0000734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000737:	8a 10                	mov    dl,BYTE PTR [eax]
c0000739:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000073c:	8a 00                	mov    al,BYTE PTR [eax]
c000073e:	38 c2                	cmp    dl,al
c0000740:	75 05                	jne    c0000747 <strpbrk+0x23>
c0000742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000745:	eb 1d                	jmp    c0000764 <strpbrk+0x40>
c0000747:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000074a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000074d:	8a 00                	mov    al,BYTE PTR [eax]
c000074f:	84 c0                	test   al,al
c0000751:	75 e1                	jne    c0000734 <strpbrk+0x10>
c0000753:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000759:	8a 00                	mov    al,BYTE PTR [eax]
c000075b:	84 c0                	test   al,al
c000075d:	75 cd                	jne    c000072c <strpbrk+0x8>
c000075f:	b8 00 00 00 00       	mov    eax,0x0
c0000764:	c9                   	leave  
c0000765:	c3                   	ret    

c0000766 <strtok>:
c0000766:	55                   	push   ebp
c0000767:	89 e5                	mov    ebp,esp
c0000769:	83 ec 10             	sub    esp,0x10
c000076c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000076f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000772:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c0000776:	75 18                	jne    c0000790 <strtok+0x2a>
c0000778:	a1 e8 b4 03 c0       	mov    eax,ds:0xc003b4e8
c000077d:	85 c0                	test   eax,eax
c000077f:	75 07                	jne    c0000788 <strtok+0x22>
c0000781:	b8 00 00 00 00       	mov    eax,0x0
c0000786:	eb 6a                	jmp    c00007f2 <strtok+0x8c>
c0000788:	a1 e8 b4 03 c0       	mov    eax,ds:0xc003b4e8
c000078d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000790:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000793:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000796:	e8 89 ff ff ff       	call   c0000724 <strpbrk>
c000079b:	83 c4 08             	add    esp,0x8
c000079e:	a3 e8 b4 03 c0       	mov    ds:0xc003b4e8,eax
c00007a3:	eb 1f                	jmp    c00007c4 <strtok+0x5e>
c00007a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007a8:	8d 50 01             	lea    edx,[eax+0x1]
c00007ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00007ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00007b4:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00007b7:	e8 68 ff ff ff       	call   c0000724 <strpbrk>
c00007bc:	83 c4 08             	add    esp,0x8
c00007bf:	a3 e8 b4 03 c0       	mov    ds:0xc003b4e8,eax
c00007c4:	a1 e8 b4 03 c0       	mov    eax,ds:0xc003b4e8
c00007c9:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c00007cc:	74 d7                	je     c00007a5 <strtok+0x3f>
c00007ce:	a1 e8 b4 03 c0       	mov    eax,ds:0xc003b4e8
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 16                	je     c00007ed <strtok+0x87>
c00007d7:	a1 e8 b4 03 c0       	mov    eax,ds:0xc003b4e8
c00007dc:	8d 50 01             	lea    edx,[eax+0x1]
c00007df:	89 15 e8 b4 03 c0    	mov    DWORD PTR ds:0xc003b4e8,edx
c00007e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007eb:	eb 05                	jmp    c00007f2 <strtok+0x8c>
c00007ed:	b8 00 00 00 00       	mov    eax,0x0
c00007f2:	c9                   	leave  
c00007f3:	c3                   	ret    

c00007f4 <strcpy>:
c00007f4:	55                   	push   ebp
c00007f5:	89 e5                	mov    ebp,esp
c00007f7:	83 ec 10             	sub    esp,0x10
c00007fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000800:	eb 10                	jmp    c0000812 <strcpy+0x1e>
c0000802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000805:	8a 10                	mov    dl,BYTE PTR [eax]
c0000807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000080a:	88 10                	mov    BYTE PTR [eax],dl
c000080c:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000080f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000815:	8a 00                	mov    al,BYTE PTR [eax]
c0000817:	84 c0                	test   al,al
c0000819:	75 e7                	jne    c0000802 <strcpy+0xe>
c000081b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000081e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000824:	c9                   	leave  
c0000825:	c3                   	ret    

c0000826 <strncpy>:
c0000826:	55                   	push   ebp
c0000827:	89 e5                	mov    ebp,esp
c0000829:	83 ec 10             	sub    esp,0x10
c000082c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000082f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000838:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000083c:	74 2a                	je     c0000868 <strncpy+0x42>
c000083e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000844:	8d 42 01             	lea    eax,[edx+0x1]
c0000847:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000084a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000084d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000850:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000853:	8a 12                	mov    dl,BYTE PTR [edx]
c0000855:	88 10                	mov    BYTE PTR [eax],dl
c0000857:	8a 00                	mov    al,BYTE PTR [eax]
c0000859:	84 c0                	test   al,al
c000085b:	75 db                	jne    c0000838 <strncpy+0x12>
c000085d:	eb 09                	jmp    c0000868 <strncpy+0x42>
c000085f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000862:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000865:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000868:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000086b:	8d 50 ff             	lea    edx,[eax-0x1]
c000086e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000871:	85 c0                	test   eax,eax
c0000873:	75 ea                	jne    c000085f <strncpy+0x39>
c0000875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000878:	c9                   	leave  
c0000879:	c3                   	ret    

c000087a <strcmp>:
c000087a:	55                   	push   ebp
c000087b:	89 e5                	mov    ebp,esp
c000087d:	eb 19                	jmp    c0000898 <strcmp+0x1e>
c000087f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000882:	8d 50 01             	lea    edx,[eax+0x1]
c0000885:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c0000888:	8a 00                	mov    al,BYTE PTR [eax]
c000088a:	84 c0                	test   al,al
c000088c:	75 07                	jne    c0000895 <strcmp+0x1b>
c000088e:	b8 00 00 00 00       	mov    eax,0x0
c0000893:	eb 25                	jmp    c00008ba <strcmp+0x40>
c0000895:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000089b:	8a 10                	mov    dl,BYTE PTR [eax]
c000089d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008a0:	8a 00                	mov    al,BYTE PTR [eax]
c00008a2:	38 c2                	cmp    dl,al
c00008a4:	74 d9                	je     c000087f <strcmp+0x5>
c00008a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008a9:	8a 00                	mov    al,BYTE PTR [eax]
c00008ab:	0f b6 d0             	movzx  edx,al
c00008ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008b1:	8a 00                	mov    al,BYTE PTR [eax]
c00008b3:	0f b6 c0             	movzx  eax,al
c00008b6:	29 c2                	sub    edx,eax
c00008b8:	89 d0                	mov    eax,edx
c00008ba:	5d                   	pop    ebp
c00008bb:	c3                   	ret    

c00008bc <strchr>:
c00008bc:	55                   	push   ebp
c00008bd:	89 e5                	mov    ebp,esp
c00008bf:	eb 14                	jmp    c00008d5 <strchr+0x19>
c00008c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008c4:	8a 00                	mov    al,BYTE PTR [eax]
c00008c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00008c9:	38 d0                	cmp    al,dl
c00008cb:	75 05                	jne    c00008d2 <strchr+0x16>
c00008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d0:	eb 11                	jmp    c00008e3 <strchr+0x27>
c00008d2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00008d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d8:	8a 00                	mov    al,BYTE PTR [eax]
c00008da:	84 c0                	test   al,al
c00008dc:	75 e3                	jne    c00008c1 <strchr+0x5>
c00008de:	b8 00 00 00 00       	mov    eax,0x0
c00008e3:	5d                   	pop    ebp
c00008e4:	c3                   	ret    

c00008e5 <strncmp>:
c00008e5:	55                   	push   ebp
c00008e6:	89 e5                	mov    ebp,esp
c00008e8:	eb 19                	jmp    c0000903 <strncmp+0x1e>
c00008ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008ed:	8d 50 01             	lea    edx,[eax+0x1]
c00008f0:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c00008f3:	8a 00                	mov    al,BYTE PTR [eax]
c00008f5:	84 c0                	test   al,al
c00008f7:	75 07                	jne    c0000900 <strncmp+0x1b>
c00008f9:	b8 00 00 00 00       	mov    eax,0x0
c00008fe:	eb 3f                	jmp    c000093f <strncmp+0x5a>
c0000900:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000903:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000906:	8d 50 ff             	lea    edx,[eax-0x1]
c0000909:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c000090c:	85 c0                	test   eax,eax
c000090e:	74 0e                	je     c000091e <strncmp+0x39>
c0000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000913:	8a 10                	mov    dl,BYTE PTR [eax]
c0000915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000918:	8a 00                	mov    al,BYTE PTR [eax]
c000091a:	38 c2                	cmp    dl,al
c000091c:	74 cc                	je     c00008ea <strncmp+0x5>
c000091e:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c0000922:	74 16                	je     c000093a <strncmp+0x55>
c0000924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000927:	8a 00                	mov    al,BYTE PTR [eax]
c0000929:	0f b6 d0             	movzx  edx,al
c000092c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000092f:	8a 00                	mov    al,BYTE PTR [eax]
c0000931:	0f b6 c0             	movzx  eax,al
c0000934:	29 c2                	sub    edx,eax
c0000936:	89 d0                	mov    eax,edx
c0000938:	eb 05                	jmp    c000093f <strncmp+0x5a>
c000093a:	b8 00 00 00 00       	mov    eax,0x0
c000093f:	5d                   	pop    ebp
c0000940:	c3                   	ret    

c0000941 <strcat>:
c0000941:	55                   	push   ebp
c0000942:	89 e5                	mov    ebp,esp
c0000944:	83 ec 10             	sub    esp,0x10
c0000947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000094a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000094d:	90                   	nop
c000094e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000951:	8d 50 01             	lea    edx,[eax+0x1]
c0000954:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000957:	8a 00                	mov    al,BYTE PTR [eax]
c0000959:	84 c0                	test   al,al
c000095b:	75 f1                	jne    c000094e <strcat+0xd>
c000095d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000960:	90                   	nop
c0000961:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000964:	8d 42 01             	lea    eax,[edx+0x1]
c0000967:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000096a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000096d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000970:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000973:	8a 12                	mov    dl,BYTE PTR [edx]
c0000975:	88 10                	mov    BYTE PTR [eax],dl
c0000977:	8a 00                	mov    al,BYTE PTR [eax]
c0000979:	84 c0                	test   al,al
c000097b:	75 e4                	jne    c0000961 <strcat+0x20>
c000097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000980:	c9                   	leave  
c0000981:	c3                   	ret    

c0000982 <strncat>:
c0000982:	55                   	push   ebp
c0000983:	89 e5                	mov    ebp,esp
c0000985:	83 ec 10             	sub    esp,0x10
c0000988:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000098c:	74 4b                	je     c00009d9 <strncat+0x57>
c000098e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000991:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000994:	90                   	nop
c0000995:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000998:	8d 50 01             	lea    edx,[eax+0x1]
c000099b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000099e:	8a 00                	mov    al,BYTE PTR [eax]
c00009a0:	84 c0                	test   al,al
c00009a2:	75 f1                	jne    c0000995 <strncat+0x13>
c00009a4:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c00009a7:	90                   	nop
c00009a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00009ab:	8d 42 01             	lea    eax,[edx+0x1]
c00009ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00009b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00009b7:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c00009ba:	8a 12                	mov    dl,BYTE PTR [edx]
c00009bc:	88 10                	mov    BYTE PTR [eax],dl
c00009be:	8a 00                	mov    al,BYTE PTR [eax]
c00009c0:	84 c0                	test   al,al
c00009c2:	74 09                	je     c00009cd <strncat+0x4b>
c00009c4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00009c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009cb:	75 db                	jne    c00009a8 <strncat+0x26>
c00009cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009d1:	75 06                	jne    c00009d9 <strncat+0x57>
c00009d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009dc:	c9                   	leave  
c00009dd:	c3                   	ret    

c00009de <strstr>:
c00009de:	55                   	push   ebp
c00009df:	89 e5                	mov    ebp,esp
c00009e1:	83 ec 10             	sub    esp,0x10
c00009e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009e7:	e8 15 fd ff ff       	call   c0000701 <strlen>
c00009ec:	83 c4 04             	add    esp,0x4
c00009ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00009f2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c00009f6:	75 22                	jne    c0000a1a <strstr+0x3c>
c00009f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009fb:	eb 32                	jmp    c0000a2f <strstr+0x51>
c00009fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000a00:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a06:	e8 91 fb ff ff       	call   c000059c <memcmp>
c0000a0b:	83 c4 0c             	add    esp,0xc
c0000a0e:	85 c0                	test   eax,eax
c0000a10:	75 05                	jne    c0000a17 <strstr+0x39>
c0000a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a15:	eb 18                	jmp    c0000a2f <strstr+0x51>
c0000a17:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a1d:	e8 df fc ff ff       	call   c0000701 <strlen>
c0000a22:	83 c4 04             	add    esp,0x4
c0000a25:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c0000a28:	76 d3                	jbe    c00009fd <strstr+0x1f>
c0000a2a:	b8 00 00 00 00       	mov    eax,0x0
c0000a2f:	c9                   	leave  
c0000a30:	c3                   	ret    

c0000a31 <toupper>:
c0000a31:	55                   	push   ebp
c0000a32:	89 e5                	mov    ebp,esp
c0000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a37:	0f b6 c0             	movzx  eax,al
c0000a3a:	8a 80 e0 f4 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0b20]
c0000a40:	0f b6 c0             	movzx  eax,al
c0000a43:	83 e0 02             	and    eax,0x2
c0000a46:	85 c0                	test   eax,eax
c0000a48:	74 08                	je     c0000a52 <toupper+0x21>
c0000a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a4d:	83 e8 20             	sub    eax,0x20
c0000a50:	eb 03                	jmp    c0000a55 <toupper+0x24>
c0000a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a55:	5d                   	pop    ebp
c0000a56:	c3                   	ret    

c0000a57 <tolower>:
c0000a57:	55                   	push   ebp
c0000a58:	89 e5                	mov    ebp,esp
c0000a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a5d:	0f b6 c0             	movzx  eax,al
c0000a60:	8a 80 e0 f4 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0b20]
c0000a66:	0f b6 c0             	movzx  eax,al
c0000a69:	83 e0 01             	and    eax,0x1
c0000a6c:	85 c0                	test   eax,eax
c0000a6e:	74 08                	je     c0000a78 <tolower+0x21>
c0000a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a73:	83 c0 20             	add    eax,0x20
c0000a76:	eb 03                	jmp    c0000a7b <tolower+0x24>
c0000a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a7b:	5d                   	pop    ebp
c0000a7c:	c3                   	ret    

c0000a7d <simple_strtoul>:
c0000a7d:	55                   	push   ebp
c0000a7e:	89 e5                	mov    ebp,esp
c0000a80:	83 ec 28             	sub    esp,0x28
c0000a83:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000a8a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000a91:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0000a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0000a9e:	eb 03                	jmp    c0000aa3 <simple_strtoul+0x26>
c0000aa0:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0000aa8:	0f b6 c0             	movzx  eax,al
c0000aab:	8a 80 e0 f4 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0b20]
c0000ab1:	0f b6 c0             	movzx  eax,al
c0000ab4:	83 e0 08             	and    eax,0x8
c0000ab7:	85 c0                	test   eax,eax
c0000ab9:	75 e5                	jne    c0000aa0 <simple_strtoul+0x23>
c0000abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000abe:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac0:	3c 09                	cmp    al,0x9
c0000ac2:	74 dc                	je     c0000aa0 <simple_strtoul+0x23>
c0000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac9:	3c 2d                	cmp    al,0x2d
c0000acb:	75 0c                	jne    c0000ad9 <simple_strtoul+0x5c>
c0000acd:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
c0000ad4:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ad7:	eb 1c                	jmp    c0000af5 <simple_strtoul+0x78>
c0000ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000adc:	8a 00                	mov    al,BYTE PTR [eax]
c0000ade:	3c 2b                	cmp    al,0x2b
c0000ae0:	75 0c                	jne    c0000aee <simple_strtoul+0x71>
c0000ae2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000aec:	eb 07                	jmp    c0000af5 <simple_strtoul+0x78>
c0000aee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000af5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000af9:	75 43                	jne    c0000b3e <simple_strtoul+0xc1>
c0000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000afe:	8a 00                	mov    al,BYTE PTR [eax]
c0000b00:	3c 30                	cmp    al,0x30
c0000b02:	75 31                	jne    c0000b35 <simple_strtoul+0xb8>
c0000b04:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0000b0c:	0f be c0             	movsx  eax,al
c0000b0f:	83 ec 0c             	sub    esp,0xc
c0000b12:	50                   	push   eax
c0000b13:	e8 3f ff ff ff       	call   c0000a57 <tolower>
c0000b18:	83 c4 10             	add    esp,0x10
c0000b1b:	83 f8 78             	cmp    eax,0x78
c0000b1e:	75 0c                	jne    c0000b2c <simple_strtoul+0xaf>
c0000b20:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
c0000b27:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b2a:	eb 26                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b2c:	c7 45 10 08 00 00 00 	mov    DWORD PTR [ebp+0x10],0x8
c0000b33:	eb 1d                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b35:	c7 45 10 0a 00 00 00 	mov    DWORD PTR [ebp+0x10],0xa
c0000b3c:	eb 14                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b3e:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
c0000b42:	0f 86 07 01 00 00    	jbe    c0000c4f <simple_strtoul+0x1d2>
c0000b48:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
c0000b4c:	0f 87 fd 00 00 00    	ja     c0000c4f <simple_strtoul+0x1d2>
c0000b52:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
c0000b56:	75 0c                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b5b:	8a 00                	mov    al,BYTE PTR [eax]
c0000b5d:	3c 30                	cmp    al,0x30
c0000b5f:	75 03                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b61:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b64:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
c0000b68:	0f 85 d2 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b71:	8a 00                	mov    al,BYTE PTR [eax]
c0000b73:	3c 30                	cmp    al,0x30
c0000b75:	0f 85 c5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b7b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b81:	8a 00                	mov    al,BYTE PTR [eax]
c0000b83:	0f be c0             	movsx  eax,al
c0000b86:	83 ec 0c             	sub    esp,0xc
c0000b89:	50                   	push   eax
c0000b8a:	e8 c8 fe ff ff       	call   c0000a57 <tolower>
c0000b8f:	83 c4 10             	add    esp,0x10
c0000b92:	83 f8 78             	cmp    eax,0x78
c0000b95:	0f 85 a5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b9b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b9e:	e9 9d 00 00 00       	jmp    c0000c40 <simple_strtoul+0x1c3>
c0000ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0000ba8:	0f b6 c0             	movzx  eax,al
c0000bab:	8a 80 e0 f4 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0b20]
c0000bb1:	0f b6 c0             	movzx  eax,al
c0000bb4:	83 e0 04             	and    eax,0x4
c0000bb7:	85 c0                	test   eax,eax
c0000bb9:	74 10                	je     c0000bcb <simple_strtoul+0x14e>
c0000bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0000bc0:	0f b6 c0             	movzx  eax,al
c0000bc3:	83 e8 30             	sub    eax,0x30
c0000bc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000bc9:	eb 31                	jmp    c0000bfc <simple_strtoul+0x17f>
c0000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bce:	8a 00                	mov    al,BYTE PTR [eax]
c0000bd0:	0f be c0             	movsx  eax,al
c0000bd3:	83 ec 0c             	sub    esp,0xc
c0000bd6:	50                   	push   eax
c0000bd7:	e8 55 fe ff ff       	call   c0000a31 <toupper>
c0000bdc:	83 c4 10             	add    esp,0x10
c0000bdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000be5:	0f b6 c0             	movzx  eax,al
c0000be8:	8a 80 e0 f4 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0b20]
c0000bee:	0f b6 c0             	movzx  eax,al
c0000bf1:	83 e0 01             	and    eax,0x1
c0000bf4:	85 c0                	test   eax,eax
c0000bf6:	74 5a                	je     c0000c52 <simple_strtoul+0x1d5>
c0000bf8:	83 6d f0 37          	sub    DWORD PTR [ebp-0x10],0x37
c0000bfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bff:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
c0000c02:	73 51                	jae    c0000c55 <simple_strtoul+0x1d8>
c0000c04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c07:	f7 d0                	not    eax
c0000c09:	ba 00 00 00 00       	mov    edx,0x0
c0000c0e:	f7 75 10             	div    DWORD PTR [ebp+0x10]
c0000c11:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0000c14:	76 10                	jbe    c0000c26 <simple_strtoul+0x1a9>
c0000c16:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
c0000c1d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000c24:	eb 17                	jmp    c0000c3d <simple_strtoul+0x1c0>
c0000c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c29:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
c0000c2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000c30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c33:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0000c36:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
c0000c3d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000c43:	8a 00                	mov    al,BYTE PTR [eax]
c0000c45:	84 c0                	test   al,al
c0000c47:	0f 85 56 ff ff ff    	jne    c0000ba3 <simple_strtoul+0x126>
c0000c4d:	eb 07                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c4f:	90                   	nop
c0000c50:	eb 04                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c52:	90                   	nop
c0000c53:	eb 01                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c55:	90                   	nop
c0000c56:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
c0000c5a:	74 24                	je     c0000c80 <simple_strtoul+0x203>
c0000c5c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0000c60:	75 16                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c62:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0000c66:	75 10                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c68:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0000c6c:	74 0a                	je     c0000c78 <simple_strtoul+0x1fb>
c0000c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0000c74:	89 10                	mov    DWORD PTR [eax],edx
c0000c76:	eb 08                	jmp    c0000c80 <simple_strtoul+0x203>
c0000c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000c7e:	89 10                	mov    DWORD PTR [eax],edx
c0000c80:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
c0000c84:	75 07                	jne    c0000c8d <simple_strtoul+0x210>
c0000c86:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
c0000c8d:	83 7d ec 01          	cmp    DWORD PTR [ebp-0x14],0x1
c0000c91:	75 03                	jne    c0000c96 <simple_strtoul+0x219>
c0000c93:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
c0000c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c99:	c9                   	leave  
c0000c9a:	c3                   	ret    

c0000c9b <largebin_index>:
c0000c9b:	89 c2                	mov    edx,eax
c0000c9d:	c1 ea 08             	shr    edx,0x8
c0000ca0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ca6:	77 10                	ja     c0000cb8 <largebin_index+0x1d>
c0000ca8:	0f bd d2             	bsr    edx,edx
c0000cab:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cae:	d3 e8                	shr    eax,cl
c0000cb0:	83 e0 03             	and    eax,0x3
c0000cb3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cb7:	c3                   	ret    
c0000cb8:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cbd:	c3                   	ret    

c0000cbe <malloc_init_state>:
c0000cbe:	53                   	push   ebx
c0000cbf:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cc8:	89 d1                	mov    ecx,edx
c0000cca:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ccd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd0:	83 c2 08             	add    edx,0x8
c0000cd3:	39 da                	cmp    edx,ebx
c0000cd5:	75 f3                	jne    c0000cca <malloc_init_state+0xc>
c0000cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce3:	83 e2 03             	and    edx,0x3
c0000ce6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf0:	83 ca 48             	or     edx,0x48
c0000cf3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cfd:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d07:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d0e:	89 10                	mov    DWORD PTR [eax],edx
c0000d10:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d13:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d1d:	5b                   	pop    ebx
c0000d1e:	c3                   	ret    

c0000d1f <malloc_consolidate>:
c0000d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d21:	85 d2                	test   edx,edx
c0000d23:	0f 84 d8 00 00 00    	je     c0000e01 <malloc_consolidate+0xe2>
c0000d29:	55                   	push   ebp
c0000d2a:	83 e2 fd             	and    edx,0xfffffffd
c0000d2d:	57                   	push   edi
c0000d2e:	89 c5                	mov    ebp,eax
c0000d30:	56                   	push   esi
c0000d31:	8d 78 34             	lea    edi,[eax+0x34]
c0000d34:	53                   	push   ebx
c0000d35:	83 ec 10             	sub    esp,0x10
c0000d38:	89 10                	mov    DWORD PTR [eax],edx
c0000d3a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d3e:	c1 ea 03             	shr    edx,0x3
c0000d41:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d45:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d49:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d4c:	85 d2                	test   edx,edx
c0000d4e:	0f 84 98 00 00 00    	je     c0000dec <malloc_consolidate+0xcd>
c0000d54:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d5b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d5e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d65:	89 f9                	mov    ecx,edi
c0000d67:	83 e1 fe             	and    ecx,0xfffffffe
c0000d6a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d6d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d70:	83 e3 fc             	and    ebx,0xfffffffc
c0000d73:	83 e7 01             	and    edi,0x1
c0000d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d79:	75 14                	jne    c0000d8f <malloc_consolidate+0x70>
c0000d7b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d7d:	29 fa                	sub    edx,edi
c0000d7f:	01 f9                	add    ecx,edi
c0000d81:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d84:	89 fb                	mov    ebx,edi
c0000d86:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d89:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d8c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d8f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d92:	74 40                	je     c0000dd4 <malloc_consolidate+0xb5>
c0000d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d97:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d9a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d9e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da1:	83 e7 01             	and    edi,0x1
c0000da4:	75 0e                	jne    c0000db4 <malloc_consolidate+0x95>
c0000da6:	01 d9                	add    ecx,ebx
c0000da8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dab:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000dae:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000db4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000db7:	89 ce                	mov    esi,ecx
c0000db9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dbc:	83 ce 01             	or     esi,0x1
c0000dbf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dc2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dc5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dc8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dcc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dcf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dd2:	eb 0c                	jmp    c0000de0 <malloc_consolidate+0xc1>
c0000dd4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000dd7:	83 c9 01             	or     ecx,0x1
c0000dda:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ddd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000de4:	85 d2                	test   edx,edx
c0000de6:	0f 85 6f ff ff ff    	jne    c0000d5b <malloc_consolidate+0x3c>
c0000dec:	83 c5 04             	add    ebp,0x4
c0000def:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000df3:	0f 85 50 ff ff ff    	jne    c0000d49 <malloc_consolidate+0x2a>
c0000df9:	83 c4 10             	add    esp,0x10
c0000dfc:	5b                   	pop    ebx
c0000dfd:	5e                   	pop    esi
c0000dfe:	5f                   	pop    edi
c0000dff:	5d                   	pop    ebp
c0000e00:	c3                   	ret    
c0000e01:	e9 b8 fe ff ff       	jmp    c0000cbe <malloc_init_state>

c0000e06 <dlfree>:
c0000e06:	57                   	push   edi
c0000e07:	56                   	push   esi
c0000e08:	53                   	push   ebx
c0000e09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e0d:	85 db                	test   ebx,ebx
c0000e0f:	0f 84 e2 00 00 00    	je     c0000ef7 <dlfree+0xf1>
c0000e15:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e18:	8b 0d 00 b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b500
c0000e1e:	89 f0                	mov    eax,esi
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	83 e0 fc             	and    eax,0xfffffffc
c0000e26:	39 c1                	cmp    ecx,eax
c0000e28:	72 24                	jb     c0000e4e <dlfree+0x48>
c0000e2a:	83 c9 03             	or     ecx,0x3
c0000e2d:	c1 e8 03             	shr    eax,0x3
c0000e30:	89 0d 00 b5 03 c0    	mov    DWORD PTR ds:0xc003b500,ecx
c0000e36:	83 e8 02             	sub    eax,0x2
c0000e39:	8b 0c 85 04 b5 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4afc]
c0000e40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e42:	89 14 85 04 b5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4afc],edx
c0000e49:	e9 a9 00 00 00       	jmp    c0000ef7 <dlfree+0xf1>
c0000e4e:	83 e6 02             	and    esi,0x2
c0000e51:	0f 85 a0 00 00 00    	jne    c0000ef7 <dlfree+0xf1>
c0000e57:	83 c9 01             	or     ecx,0x1
c0000e5a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e5d:	89 0d 00 b5 03 c0    	mov    DWORD PTR ds:0xc003b500,ecx
c0000e63:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e66:	83 e1 fc             	and    ecx,0xfffffffc
c0000e69:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e6d:	75 13                	jne    c0000e82 <dlfree+0x7c>
c0000e6f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e72:	29 da                	sub    edx,ebx
c0000e74:	01 d8                	add    eax,ebx
c0000e76:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e79:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e7c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e82:	39 35 2c b5 03 c0    	cmp    DWORD PTR ds:0xc003b52c,esi
c0000e88:	74 40                	je     c0000eca <dlfree+0xc4>
c0000e8a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e8e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e91:	80 e3 01             	and    bl,0x1
c0000e94:	75 0e                	jne    c0000ea4 <dlfree+0x9e>
c0000e96:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e99:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e9c:	01 c8                	add    eax,ecx
c0000e9e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea1:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ea4:	8b 0d 3c b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b53c
c0000eaa:	c7 42 0c 34 b5 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b534
c0000eb1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000eb4:	89 15 3c b5 03 c0    	mov    DWORD PTR ds:0xc003b53c,edx
c0000eba:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ebd:	89 c1                	mov    ecx,eax
c0000ebf:	83 c9 01             	or     ecx,0x1
c0000ec2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ec5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ec8:	eb 10                	jmp    c0000eda <dlfree+0xd4>
c0000eca:	01 c8                	add    eax,ecx
c0000ecc:	89 c1                	mov    ecx,eax
c0000ece:	83 c9 01             	or     ecx,0x1
c0000ed1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ed4:	89 15 2c b5 03 c0    	mov    DWORD PTR ds:0xc003b52c,edx
c0000eda:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000edf:	76 16                	jbe    c0000ef7 <dlfree+0xf1>
c0000ee1:	f6 05 00 b5 03 c0 02 	test   BYTE PTR ds:0xc003b500,0x2
c0000ee8:	74 0d                	je     c0000ef7 <dlfree+0xf1>
c0000eea:	5b                   	pop    ebx
c0000eeb:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0000ef0:	5e                   	pop    esi
c0000ef1:	5f                   	pop    edi
c0000ef2:	e9 28 fe ff ff       	jmp    c0000d1f <malloc_consolidate>
c0000ef7:	5b                   	pop    ebx
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	c3                   	ret    

c0000efb <sYSMALLOc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	89 d3                	mov    ebx,edx
c0000f01:	83 ec 2c             	sub    esp,0x2c
c0000f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f08:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f0e:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f11:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f18:	74 1f                	je     c0000f39 <sYSMALLOc+0x3e>
c0000f1a:	89 d8                	mov    eax,ebx
c0000f1c:	e8 fe fd ff ff       	call   c0000d1f <malloc_consolidate>
c0000f21:	83 ec 0c             	sub    esp,0xc
c0000f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f28:	83 e8 07             	sub    eax,0x7
c0000f2b:	50                   	push   eax
c0000f2c:	e8 30 02 00 00       	call   c0001161 <dlmalloc>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	e9 20 02 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f39:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f3c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f45:	83 e0 fc             	and    eax,0xfffffffc
c0000f48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f50:	83 c0 10             	add    eax,0x10
c0000f53:	01 c1                	add    ecx,eax
c0000f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f59:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f60:	74 04                	je     c0000f66 <sYSMALLOc+0x6b>
c0000f62:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f66:	f7 da                	neg    edx
c0000f68:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f70:	21 d1                	and    ecx,edx
c0000f72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f76:	7f 07                	jg     c0000f7f <sYSMALLOc+0x84>
c0000f78:	31 c0                	xor    eax,eax
c0000f7a:	e9 da 01 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f7f:	83 ec 0c             	sub    esp,0xc
c0000f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f86:	e8 1d c3 00 00       	call   c000d2a8 <sbrk>
c0000f8b:	83 c4 10             	add    esp,0x10
c0000f8e:	89 c6                	mov    esi,eax
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	74 e3                	je     c0000f78 <sYSMALLOc+0x7d>
c0000f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f99:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f9d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fa0:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000fa6:	39 f1                	cmp    ecx,esi
c0000fa8:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000fae:	75 13                	jne    c0000fc3 <sYSMALLOc+0xc8>
c0000fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb8:	83 c8 01             	or     eax,0x1
c0000fbb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fbe:	e9 3e 01 00 00       	jmp    c0001101 <sYSMALLOc+0x206>
c0000fc3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fc9:	88 d0                	mov    al,dl
c0000fcb:	83 e0 01             	and    eax,0x1
c0000fce:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fd3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fd7:	0f 95 c0             	setne  al
c0000fda:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fde:	39 f1                	cmp    ecx,esi
c0000fe0:	76 12                	jbe    c0000ff4 <sYSMALLOc+0xf9>
c0000fe2:	84 c0                	test   al,al
c0000fe4:	74 0e                	je     c0000ff4 <sYSMALLOc+0xf9>
c0000fe6:	83 e2 fe             	and    edx,0xfffffffe
c0000fe9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fef:	e9 83 00 00 00       	jmp    c0001077 <sYSMALLOc+0x17c>
c0000ff4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ff9:	74 7c                	je     c0001077 <sYSMALLOc+0x17c>
c0000ffb:	84 c0                	test   al,al
c0000ffd:	74 0c                	je     c000100b <sYSMALLOc+0x110>
c0000fff:	89 f0                	mov    eax,esi
c0001001:	29 c8                	sub    eax,ecx
c0001003:	01 e8                	add    eax,ebp
c0001005:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000100b:	89 f2                	mov    edx,esi
c000100d:	83 e2 07             	and    edx,0x7
c0001010:	74 0c                	je     c000101e <sYSMALLOc+0x123>
c0001012:	b8 08 00 00 00       	mov    eax,0x8
c0001017:	29 d0                	sub    eax,edx
c0001019:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000101c:	eb 04                	jmp    c0001022 <sYSMALLOc+0x127>
c000101e:	89 f5                	mov    ebp,esi
c0001020:	31 c0                	xor    eax,eax
c0001022:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001026:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000102a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102e:	01 c1                	add    ecx,eax
c0001030:	83 ec 0c             	sub    esp,0xc
c0001033:	01 f1                	add    ecx,esi
c0001035:	01 ca                	add    edx,ecx
c0001037:	29 c8                	sub    eax,ecx
c0001039:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c000103d:	01 c2                	add    edx,eax
c000103f:	52                   	push   edx
c0001040:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001044:	e8 5f c2 00 00       	call   c000d2a8 <sbrk>
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001053:	75 0f                	jne    c0001064 <sYSMALLOc+0x169>
c0001055:	83 ec 0c             	sub    esp,0xc
c0001058:	6a 00                	push   0x0
c000105a:	e8 49 c2 00 00       	call   c000d2a8 <sbrk>
c000105f:	83 c4 10             	add    esp,0x10
c0001062:	eb 30                	jmp    c0001094 <sYSMALLOc+0x199>
c0001064:	39 c6                	cmp    esi,eax
c0001066:	76 33                	jbe    c000109b <sYSMALLOc+0x1a0>
c0001068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000106c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001073:	01 f0                	add    eax,esi
c0001075:	eb 1d                	jmp    c0001094 <sYSMALLOc+0x199>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	89 f5                	mov    ebp,esi
c000107c:	6a 00                	push   0x0
c000107e:	e8 25 c2 00 00       	call   c000d2a8 <sbrk>
c0001083:	89 c2                	mov    edx,eax
c0001085:	29 f2                	sub    edx,esi
c0001087:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000108b:	83 c4 10             	add    esp,0x10
c000108e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001094:	31 d2                	xor    edx,edx
c0001096:	83 f8 ff             	cmp    eax,0xffffffff
c0001099:	74 66                	je     c0001101 <sYSMALLOc+0x206>
c000109b:	29 e8                	sub    eax,ebp
c000109d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010a0:	01 d0                	add    eax,edx
c00010a2:	83 c8 01             	or     eax,0x1
c00010a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010b3:	74 4c                	je     c0001101 <sYSMALLOc+0x206>
c00010b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010b9:	83 e8 0c             	sub    eax,0xc
c00010bc:	83 e0 f8             	and    eax,0xfffffff8
c00010bf:	89 c2                	mov    edx,eax
c00010c1:	83 ca 01             	or     edx,0x1
c00010c4:	83 f8 0f             	cmp    eax,0xf
c00010c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010da:	76 25                	jbe    c0001101 <sYSMALLOc+0x206>
c00010dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010e2:	83 ec 0c             	sub    esp,0xc
c00010e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ef:	83 c7 08             	add    edi,0x8
c00010f2:	57                   	push   edi
c00010f3:	e8 0e fd ff ff       	call   c0000e06 <dlfree>
c00010f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010fe:	83 c4 10             	add    esp,0x10
c0001101:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001107:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000110d:	73 06                	jae    c0001115 <sYSMALLOc+0x21a>
c000110f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001115:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000111b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001121:	73 06                	jae    c0001129 <sYSMALLOc+0x22e>
c0001123:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001129:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000112c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112f:	83 e2 fc             	and    edx,0xfffffffc
c0001132:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001136:	0f 82 3c fe ff ff    	jb     c0000f78 <sYSMALLOc+0x7d>
c000113c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001140:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001143:	29 fa                	sub    edx,edi
c0001145:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001148:	83 ca 01             	or     edx,0x1
c000114b:	89 fb                	mov    ebx,edi
c000114d:	83 c0 08             	add    eax,0x8
c0001150:	83 cb 01             	or     ebx,0x1
c0001153:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001156:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001159:	83 c4 2c             	add    esp,0x2c
c000115c:	5b                   	pop    ebx
c000115d:	5e                   	pop    esi
c000115e:	5f                   	pop    edi
c000115f:	5d                   	pop    ebp
c0001160:	c3                   	ret    

c0001161 <dlmalloc>:
c0001161:	55                   	push   ebp
c0001162:	57                   	push   edi
c0001163:	56                   	push   esi
c0001164:	53                   	push   ebx
c0001165:	83 ec 1c             	sub    esp,0x1c
c0001168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000116c:	83 f8 df             	cmp    eax,0xffffffdf
c000116f:	0f 87 70 03 00 00    	ja     c00014e5 <dlmalloc+0x384>
c0001175:	83 c0 0b             	add    eax,0xb
c0001178:	be 10 00 00 00       	mov    esi,0x10
c000117d:	83 f8 0f             	cmp    eax,0xf
c0001180:	76 05                	jbe    c0001187 <dlmalloc+0x26>
c0001182:	83 e0 f8             	and    eax,0xfffffff8
c0001185:	89 c6                	mov    esi,eax
c0001187:	8b 3d 00 b5 03 c0    	mov    edi,DWORD PTR ds:0xc003b500
c000118d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001193:	75 17                	jne    c00011ac <dlmalloc+0x4b>
c0001195:	85 ff                	test   edi,edi
c0001197:	0f 85 05 03 00 00    	jne    c00014a2 <dlmalloc+0x341>
c000119d:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c00011a2:	e8 78 fb ff ff       	call   c0000d1f <malloc_consolidate>
c00011a7:	e9 f6 02 00 00       	jmp    c00014a2 <dlmalloc+0x341>
c00011ac:	39 f7                	cmp    edi,esi
c00011ae:	72 1f                	jb     c00011cf <dlmalloc+0x6e>
c00011b0:	89 f2                	mov    edx,esi
c00011b2:	c1 ea 03             	shr    edx,0x3
c00011b5:	83 ea 02             	sub    edx,0x2
c00011b8:	8b 04 95 04 b5 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4afc]
c00011bf:	85 c0                	test   eax,eax
c00011c1:	74 0c                	je     c00011cf <dlmalloc+0x6e>
c00011c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011c6:	89 0c 95 04 b5 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4afc],ecx
c00011cd:	eb 30                	jmp    c00011ff <dlmalloc+0x9e>
c00011cf:	89 f0                	mov    eax,esi
c00011d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d7:	77 2e                	ja     c0001207 <dlmalloc+0xa6>
c00011d9:	c1 e8 03             	shr    eax,0x3
c00011dc:	8d 14 c5 34 b5 03 c0 	lea    edx,[eax*8-0x3ffc4acc]
c00011e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ed:	39 c3                	cmp    ebx,eax
c00011ef:	74 2e                	je     c000121f <dlmalloc+0xbe>
c00011f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011ff:	83 c0 08             	add    eax,0x8
c0001202:	e9 e0 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001207:	e8 8f fa ff ff       	call   c0000c9b <largebin_index>
c000120c:	83 e7 02             	and    edi,0x2
c000120f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001213:	74 0a                	je     c000121f <dlmalloc+0xbe>
c0001215:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c000121a:	e8 00 fb ff ff       	call   c0000d1f <malloc_consolidate>
c000121f:	8d 46 10             	lea    eax,[esi+0x10]
c0001222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001226:	8b 1d 40 b5 03 c0    	mov    ebx,DWORD PTR ds:0xc003b540
c000122c:	81 fb 34 b5 03 c0    	cmp    ebx,0xc003b534
c0001232:	0f 84 13 01 00 00    	je     c000134b <dlmalloc+0x1ea>
c0001238:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000123b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000123e:	83 e7 fc             	and    edi,0xfffffffc
c0001241:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001247:	77 4c                	ja     c0001295 <dlmalloc+0x134>
c0001249:	3d 34 b5 03 c0       	cmp    eax,0xc003b534
c000124e:	75 45                	jne    c0001295 <dlmalloc+0x134>
c0001250:	39 1d 30 b5 03 c0    	cmp    DWORD PTR ds:0xc003b530,ebx
c0001256:	75 3d                	jne    c0001295 <dlmalloc+0x134>
c0001258:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000125c:	73 37                	jae    c0001295 <dlmalloc+0x134>
c000125e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001261:	89 fa                	mov    edx,edi
c0001263:	a3 3c b5 03 c0       	mov    ds:0xc003b53c,eax
c0001268:	a3 40 b5 03 c0       	mov    ds:0xc003b540,eax
c000126d:	a3 30 b5 03 c0       	mov    ds:0xc003b530,eax
c0001272:	29 f2                	sub    edx,esi
c0001274:	c7 40 08 34 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b534
c000127b:	c7 40 0c 34 b5 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b534
c0001282:	83 ce 01             	or     esi,0x1
c0001285:	89 d1                	mov    ecx,edx
c0001287:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000128a:	83 c9 01             	or     ecx,0x1
c000128d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001290:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001293:	eb 15                	jmp    c00012aa <dlmalloc+0x149>
c0001295:	a3 40 b5 03 c0       	mov    ds:0xc003b540,eax
c000129a:	39 fe                	cmp    esi,edi
c000129c:	c7 40 08 34 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b534
c00012a3:	75 0d                	jne    c00012b2 <dlmalloc+0x151>
c00012a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00012ad:	e9 35 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00012b2:	89 f8                	mov    eax,edi
c00012b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012ba:	77 19                	ja     c00012d5 <dlmalloc+0x174>
c00012bc:	c1 e8 03             	shr    eax,0x3
c00012bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00012c2:	83 c2 0d             	add    edx,0xd
c00012c5:	8d 2c 95 f8 b4 03 c0 	lea    ebp,[edx*4-0x3ffc4b08]
c00012cc:	8b 14 95 00 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4b00]
c00012d3:	eb 46                	jmp    c000131b <dlmalloc+0x1ba>
c00012d5:	e8 c1 f9 ff ff       	call   c0000c9b <largebin_index>
c00012da:	8d 14 00             	lea    edx,[eax+eax*1]
c00012dd:	83 c2 0d             	add    edx,0xd
c00012e0:	8d 0c 95 00 b5 03 c0 	lea    ecx,[edx*4-0x3ffc4b00]
c00012e7:	8b 14 95 00 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4b00]
c00012ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012f5:	89 d5                	mov    ebp,edx
c00012f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012fb:	74 1e                	je     c000131b <dlmalloc+0x1ba>
c00012fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001300:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001303:	77 12                	ja     c0001317 <dlmalloc+0x1b6>
c0001305:	83 cf 01             	or     edi,0x1
c0001308:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000130b:	76 05                	jbe    c0001312 <dlmalloc+0x1b1>
c000130d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001310:	eb f6                	jmp    c0001308 <dlmalloc+0x1a7>
c0001312:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001315:	eb 04                	jmp    c000131b <dlmalloc+0x1ba>
c0001317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000131b:	89 c7                	mov    edi,eax
c000131d:	88 c1                	mov    cl,al
c000131f:	c1 ff 05             	sar    edi,0x5
c0001322:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001326:	bf 01 00 00 00       	mov    edi,0x1
c000132b:	d3 e7                	shl    edi,cl
c000132d:	89 f8                	mov    eax,edi
c000132f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001333:	09 04 bd 34 b8 03 c0 	or     DWORD PTR [edi*4-0x3ffc47cc],eax
c000133a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000133d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001340:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001343:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001346:	e9 db fe ff ff       	jmp    c0001226 <dlmalloc+0xc5>
c000134b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001351:	76 78                	jbe    c00013cb <dlmalloc+0x26a>
c0001353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001357:	8d 04 c5 34 b5 03 c0 	lea    eax,[eax*8-0x3ffc4acc]
c000135e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001361:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001364:	39 ca                	cmp    edx,ecx
c0001366:	74 63                	je     c00013cb <dlmalloc+0x26a>
c0001368:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000136b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000136e:	83 e3 fc             	and    ebx,0xfffffffc
c0001371:	39 de                	cmp    esi,ebx
c0001373:	77 52                	ja     c00013c7 <dlmalloc+0x266>
c0001375:	89 df                	mov    edi,ebx
c0001377:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000137a:	29 f7                	sub    edi,esi
c000137c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000137f:	01 d3                	add    ebx,edx
c0001381:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001384:	83 ff 0f             	cmp    edi,0xf
c0001387:	8d 42 08             	lea    eax,[edx+0x8]
c000138a:	77 09                	ja     c0001395 <dlmalloc+0x234>
c000138c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001390:	e9 52 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001395:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001398:	83 ce 01             	or     esi,0x1
c000139b:	89 0d 3c b5 03 c0    	mov    DWORD PTR ds:0xc003b53c,ecx
c00013a1:	89 0d 40 b5 03 c0    	mov    DWORD PTR ds:0xc003b540,ecx
c00013a7:	c7 41 08 34 b5 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b534
c00013ae:	c7 41 0c 34 b5 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b534
c00013b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013b8:	89 fa                	mov    edx,edi
c00013ba:	83 ca 01             	or     edx,0x1
c00013bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00013c2:	e9 20 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00013c7:	89 c2                	mov    edx,eax
c00013c9:	eb 99                	jmp    c0001364 <dlmalloc+0x203>
c00013cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013cf:	b8 01 00 00 00       	mov    eax,0x1
c00013d4:	41                   	inc    ecx
c00013d5:	89 cb                	mov    ebx,ecx
c00013d7:	8d 14 cd 2c b5 03 c0 	lea    edx,[ecx*8-0x3ffc4ad4]
c00013de:	c1 eb 05             	shr    ebx,0x5
c00013e1:	d3 e0                	shl    eax,cl
c00013e3:	8b 3c 9d 34 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc47cc]
c00013ea:	39 f8                	cmp    eax,edi
c00013ec:	77 04                	ja     c00013f2 <dlmalloc+0x291>
c00013ee:	85 c0                	test   eax,eax
c00013f0:	75 26                	jne    c0001418 <dlmalloc+0x2b7>
c00013f2:	43                   	inc    ebx
c00013f3:	83 fb 02             	cmp    ebx,0x2
c00013f6:	0f 87 a6 00 00 00    	ja     c00014a2 <dlmalloc+0x341>
c00013fc:	8b 3c 9d 34 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc47cc]
c0001403:	85 ff                	test   edi,edi
c0001405:	74 eb                	je     c00013f2 <dlmalloc+0x291>
c0001407:	89 d8                	mov    eax,ebx
c0001409:	c1 e0 06             	shl    eax,0x6
c000140c:	8d 14 85 2c b5 03 c0 	lea    edx,[eax*4-0x3ffc4ad4]
c0001413:	b8 01 00 00 00       	mov    eax,0x1
c0001418:	85 f8                	test   eax,edi
c000141a:	75 07                	jne    c0001423 <dlmalloc+0x2c2>
c000141c:	83 c2 08             	add    edx,0x8
c000141f:	01 c0                	add    eax,eax
c0001421:	eb f5                	jmp    c0001418 <dlmalloc+0x2b7>
c0001423:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001426:	39 ca                	cmp    edx,ecx
c0001428:	75 14                	jne    c000143e <dlmalloc+0x2dd>
c000142a:	89 c1                	mov    ecx,eax
c000142c:	83 c2 08             	add    edx,0x8
c000142f:	f7 d1                	not    ecx
c0001431:	01 c0                	add    eax,eax
c0001433:	21 cf                	and    edi,ecx
c0001435:	89 3c 9d 34 b8 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc47cc],edi
c000143c:	eb ac                	jmp    c00013ea <dlmalloc+0x289>
c000143e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001441:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001444:	83 e0 fc             	and    eax,0xfffffffc
c0001447:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000144a:	89 c3                	mov    ebx,eax
c000144c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000144f:	29 f3                	sub    ebx,esi
c0001451:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001454:	83 fb 0f             	cmp    ebx,0xf
c0001457:	8d 41 08             	lea    eax,[ecx+0x8]
c000145a:	77 09                	ja     c0001465 <dlmalloc+0x304>
c000145c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001460:	e9 82 00 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001465:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001468:	81 fe ff 00 00 00    	cmp    esi,0xff
c000146e:	89 3d 3c b5 03 c0    	mov    DWORD PTR ds:0xc003b53c,edi
c0001474:	89 3d 40 b5 03 c0    	mov    DWORD PTR ds:0xc003b540,edi
c000147a:	c7 47 08 34 b5 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b534
c0001481:	c7 47 0c 34 b5 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b534
c0001488:	77 06                	ja     c0001490 <dlmalloc+0x32f>
c000148a:	89 3d 30 b5 03 c0    	mov    DWORD PTR ds:0xc003b530,edi
c0001490:	83 ce 01             	or     esi,0x1
c0001493:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001496:	89 d9                	mov    ecx,ebx
c0001498:	83 c9 01             	or     ecx,0x1
c000149b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000149e:	89 1a                	mov    DWORD PTR [edx],ebx
c00014a0:	eb 45                	jmp    c00014e7 <dlmalloc+0x386>
c00014a2:	a1 2c b5 03 c0       	mov    eax,ds:0xc003b52c
c00014a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014ad:	83 e2 fc             	and    edx,0xfffffffc
c00014b0:	39 d1                	cmp    ecx,edx
c00014b2:	77 1e                	ja     c00014d2 <dlmalloc+0x371>
c00014b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014b7:	89 f3                	mov    ebx,esi
c00014b9:	89 0d 2c b5 03 c0    	mov    DWORD PTR ds:0xc003b52c,ecx
c00014bf:	83 cb 01             	or     ebx,0x1
c00014c2:	29 f2                	sub    edx,esi
c00014c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c7:	83 ca 01             	or     edx,0x1
c00014ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014cd:	e9 2d fd ff ff       	jmp    c00011ff <dlmalloc+0x9e>
c00014d2:	83 c4 1c             	add    esp,0x1c
c00014d5:	89 f0                	mov    eax,esi
c00014d7:	5b                   	pop    ebx
c00014d8:	ba 00 b5 03 c0       	mov    edx,0xc003b500
c00014dd:	5e                   	pop    esi
c00014de:	5f                   	pop    edi
c00014df:	5d                   	pop    ebp
c00014e0:	e9 16 fa ff ff       	jmp    c0000efb <sYSMALLOc>
c00014e5:	31 c0                	xor    eax,eax
c00014e7:	83 c4 1c             	add    esp,0x1c
c00014ea:	5b                   	pop    ebx
c00014eb:	5e                   	pop    esi
c00014ec:	5f                   	pop    edi
c00014ed:	5d                   	pop    ebp
c00014ee:	c3                   	ret    

c00014ef <iALLOc>:
c00014ef:	55                   	push   ebp
c00014f0:	89 c5                	mov    ebp,eax
c00014f2:	57                   	push   edi
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	83 ec 2c             	sub    esp,0x2c
c00014f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001504:	83 3d 00 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b500,0x0
c000150b:	75 12                	jne    c000151f <iALLOc+0x30>
c000150d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001511:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0001516:	e8 04 f8 ff ff       	call   c0000d1f <malloc_consolidate>
c000151b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000151f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001524:	74 12                	je     c0001538 <iALLOc+0x49>
c0001526:	85 ed                	test   ebp,ebp
c0001528:	0f 84 64 01 00 00    	je     c0001692 <iALLOc+0x1a3>
c000152e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001536:	eb 33                	jmp    c000156b <iALLOc+0x7c>
c0001538:	85 ed                	test   ebp,ebp
c000153a:	75 14                	jne    c0001550 <iALLOc+0x61>
c000153c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001544:	83 c4 2c             	add    esp,0x2c
c0001547:	5b                   	pop    ebx
c0001548:	5e                   	pop    esi
c0001549:	5f                   	pop    edi
c000154a:	5d                   	pop    ebp
c000154b:	e9 11 fc ff ff       	jmp    c0001161 <dlmalloc>
c0001550:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001557:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000155f:	83 f8 0f             	cmp    eax,0xf
c0001562:	76 07                	jbe    c000156b <iALLOc+0x7c>
c0001564:	83 e0 f8             	and    eax,0xfffffff8
c0001567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000156b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001570:	75 09                	jne    c000157b <iALLOc+0x8c>
c0001572:	89 d0                	mov    eax,edx
c0001574:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001577:	31 f6                	xor    esi,esi
c0001579:	eb 3b                	jmp    c00015b6 <iALLOc+0xc7>
c000157b:	8b 02                	mov    eax,DWORD PTR [edx]
c000157d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001585:	83 c0 0b             	add    eax,0xb
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 07                	jbe    c0001594 <iALLOc+0xa5>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001598:	0f af f5             	imul   esi,ebp
c000159b:	eb 25                	jmp    c00015c2 <iALLOc+0xd3>
c000159d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000159f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015a2:	bb 10 00 00 00       	mov    ebx,0x10
c00015a7:	83 f9 0f             	cmp    ecx,0xf
c00015aa:	76 05                	jbe    c00015b1 <iALLOc+0xc2>
c00015ac:	83 e1 f8             	and    ecx,0xfffffff8
c00015af:	89 cb                	mov    ebx,ecx
c00015b1:	01 de                	add    esi,ebx
c00015b3:	83 c0 04             	add    eax,0x4
c00015b6:	39 c7                	cmp    edi,eax
c00015b8:	75 e3                	jne    c000159d <iALLOc+0xae>
c00015ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015c6:	8b 1d 54 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b854
c00015cc:	83 ec 0c             	sub    esp,0xc
c00015cf:	c7 05 54 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b854,0x0
c00015d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015e1:	50                   	push   eax
c00015e2:	e8 7a fb ff ff       	call   c0001161 <dlmalloc>
c00015e7:	83 c4 10             	add    esp,0x10
c00015ea:	89 1d 54 b8 03 c0    	mov    DWORD PTR ds:0xc003b854,ebx
c00015f0:	85 c0                	test   eax,eax
c00015f2:	0f 84 92 00 00 00    	je     c000168a <iALLOc+0x19b>
c00015f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00015fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001601:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001605:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000160a:	74 1e                	je     c000162a <iALLOc+0x13b>
c000160c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001610:	89 d9                	mov    ecx,ebx
c0001612:	52                   	push   edx
c0001613:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001617:	83 e9 04             	sub    ecx,0x4
c000161a:	51                   	push   ecx
c000161b:	6a 00                	push   0x0
c000161d:	50                   	push   eax
c000161e:	e8 b5 f0 ff ff       	call   c00006d8 <memset>
c0001623:	83 c4 10             	add    esp,0x10
c0001626:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000162a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000162f:	75 14                	jne    c0001645 <iALLOc+0x156>
c0001631:	8d 04 37             	lea    eax,[edi+esi*1]
c0001634:	29 f3                	sub    ebx,esi
c0001636:	8d 48 08             	lea    ecx,[eax+0x8]
c0001639:	83 cb 01             	or     ebx,0x1
c000163c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001640:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001643:	89 f3                	mov    ebx,esi
c0001645:	31 c0                	xor    eax,eax
c0001647:	4d                   	dec    ebp
c0001648:	8d 4f 08             	lea    ecx,[edi+0x8]
c000164b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000164f:	39 c5                	cmp    ebp,eax
c0001651:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001654:	74 2c                	je     c0001682 <iALLOc+0x193>
c0001656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000165a:	85 c9                	test   ecx,ecx
c000165c:	75 15                	jne    c0001673 <iALLOc+0x184>
c000165e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001661:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001664:	b9 10 00 00 00       	mov    ecx,0x10
c0001669:	83 fe 0f             	cmp    esi,0xf
c000166c:	76 05                	jbe    c0001673 <iALLOc+0x184>
c000166e:	83 e6 f8             	and    esi,0xfffffff8
c0001671:	89 f1                	mov    ecx,esi
c0001673:	89 ce                	mov    esi,ecx
c0001675:	29 cb                	sub    ebx,ecx
c0001677:	83 ce 01             	or     esi,0x1
c000167a:	40                   	inc    eax
c000167b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000167e:	01 cf                	add    edi,ecx
c0001680:	eb c6                	jmp    c0001648 <iALLOc+0x159>
c0001682:	83 cb 01             	or     ebx,0x1
c0001685:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001688:	eb 08                	jmp    c0001692 <iALLOc+0x1a3>
c000168a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 c4 2c             	add    esp,0x2c
c0001699:	5b                   	pop    ebx
c000169a:	5e                   	pop    esi
c000169b:	5f                   	pop    edi
c000169c:	5d                   	pop    ebp
c000169d:	c3                   	ret    

c000169e <dlrealloc>:
c000169e:	55                   	push   ebp
c000169f:	57                   	push   edi
c00016a0:	56                   	push   esi
c00016a1:	53                   	push   ebx
c00016a2:	83 ec 1c             	sub    esp,0x1c
c00016a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016ad:	85 db                	test   ebx,ebx
c00016af:	75 10                	jne    c00016c1 <dlrealloc+0x23>
c00016b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016b5:	83 c4 1c             	add    esp,0x1c
c00016b8:	5b                   	pop    ebx
c00016b9:	5e                   	pop    esi
c00016ba:	5f                   	pop    edi
c00016bb:	5d                   	pop    ebp
c00016bc:	e9 a0 fa ff ff       	jmp    c0001161 <dlmalloc>
c00016c1:	83 f8 df             	cmp    eax,0xffffffdf
c00016c4:	76 07                	jbe    c00016cd <dlrealloc+0x2f>
c00016c6:	31 db                	xor    ebx,ebx
c00016c8:	e9 7c 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c00016cd:	83 c0 0b             	add    eax,0xb
c00016d0:	bf 10 00 00 00       	mov    edi,0x10
c00016d5:	83 f8 0f             	cmp    eax,0xf
c00016d8:	76 05                	jbe    c00016df <dlrealloc+0x41>
c00016da:	83 e0 f8             	and    eax,0xfffffff8
c00016dd:	89 c7                	mov    edi,eax
c00016df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016e2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016e5:	89 c6                	mov    esi,eax
c00016e7:	83 e6 fc             	and    esi,0xfffffffc
c00016ea:	a8 02                	test   al,0x2
c00016ec:	75 d8                	jne    c00016c6 <dlrealloc+0x28>
c00016ee:	39 f7                	cmp    edi,esi
c00016f0:	0f 86 15 01 00 00    	jbe    c000180b <dlrealloc+0x16d>
c00016f6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016fa:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016fd:	39 15 2c b5 03 c0    	cmp    DWORD PTR ds:0xc003b52c,edx
c0001703:	75 33                	jne    c0001738 <dlrealloc+0x9a>
c0001705:	83 e1 fc             	and    ecx,0xfffffffc
c0001708:	01 f1                	add    ecx,esi
c000170a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170e:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001711:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001715:	77 49                	ja     c0001760 <dlrealloc+0xc2>
c0001717:	01 fd                	add    ebp,edi
c0001719:	83 e0 01             	and    eax,0x1
c000171c:	09 f8                	or     eax,edi
c000171e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001721:	89 2d 2c b5 03 c0    	mov    DWORD PTR ds:0xc003b52c,ebp
c0001727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000172b:	29 f8                	sub    eax,edi
c000172d:	83 c8 01             	or     eax,0x1
c0001730:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001733:	e9 11 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c0001738:	89 c8                	mov    eax,ecx
c000173a:	83 e0 fe             	and    eax,0xfffffffe
c000173d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001742:	75 1c                	jne    c0001760 <dlrealloc+0xc2>
c0001744:	83 e1 fc             	and    ecx,0xfffffffc
c0001747:	01 f1                	add    ecx,esi
c0001749:	39 cf                	cmp    edi,ecx
c000174b:	77 13                	ja     c0001760 <dlrealloc+0xc2>
c000174d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001750:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001753:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001756:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001759:	89 ce                	mov    esi,ecx
c000175b:	e9 ab 00 00 00       	jmp    c000180b <dlrealloc+0x16d>
c0001760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001764:	8d 47 f9             	lea    eax,[edi-0x7]
c0001767:	83 ec 0c             	sub    esp,0xc
c000176a:	50                   	push   eax
c000176b:	e8 f1 f9 ff ff       	call   c0001161 <dlmalloc>
c0001770:	83 c4 10             	add    esp,0x10
c0001773:	89 c1                	mov    ecx,eax
c0001775:	85 c0                	test   eax,eax
c0001777:	0f 84 49 ff ff ff    	je     c00016c6 <dlrealloc+0x28>
c000177d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001784:	39 c2                	cmp    edx,eax
c0001786:	75 0a                	jne    c0001792 <dlrealloc+0xf4>
c0001788:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000178b:	83 e0 fc             	and    eax,0xfffffffc
c000178e:	01 c6                	add    esi,eax
c0001790:	eb 79                	jmp    c000180b <dlrealloc+0x16d>
c0001792:	83 ee 04             	sub    esi,0x4
c0001795:	83 fe 27             	cmp    esi,0x27
c0001798:	76 16                	jbe    c00017b0 <dlrealloc+0x112>
c000179a:	50                   	push   eax
c000179b:	56                   	push   esi
c000179c:	53                   	push   ebx
c000179d:	51                   	push   ecx
c000179e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00017a2:	e8 ba ee ff ff       	call   c0000661 <memcpy>
c00017a7:	83 c4 10             	add    esp,0x10
c00017aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017ae:	eb 43                	jmp    c00017f3 <dlrealloc+0x155>
c00017b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00017b2:	83 fe 13             	cmp    esi,0x13
c00017b5:	89 01                	mov    DWORD PTR [ecx],eax
c00017b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00017ba:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00017bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00017c0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00017c3:	76 2e                	jbe    c00017f3 <dlrealloc+0x155>
c00017c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017c8:	83 fe 1b             	cmp    esi,0x1b
c00017cb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017d1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017d4:	76 1d                	jbe    c00017f3 <dlrealloc+0x155>
c00017d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017d9:	83 fe 23             	cmp    esi,0x23
c00017dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017e2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017e5:	76 0c                	jbe    c00017f3 <dlrealloc+0x155>
c00017e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017ea:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017f0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017f7:	83 ec 0c             	sub    esp,0xc
c00017fa:	53                   	push   ebx
c00017fb:	e8 06 f6 ff ff       	call   c0000e06 <dlfree>
c0001800:	83 c4 10             	add    esp,0x10
c0001803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001807:	89 cb                	mov    ebx,ecx
c0001809:	eb 3e                	jmp    c0001849 <dlrealloc+0x1ab>
c000180b:	89 f2                	mov    edx,esi
c000180d:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001810:	29 fa                	sub    edx,edi
c0001812:	83 e1 01             	and    ecx,0x1
c0001815:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001819:	83 fa 0f             	cmp    edx,0xf
c000181c:	77 0b                	ja     c0001829 <dlrealloc+0x18b>
c000181e:	09 ce                	or     esi,ecx
c0001820:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001823:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001827:	eb 20                	jmp    c0001849 <dlrealloc+0x1ab>
c0001829:	01 fd                	add    ebp,edi
c000182b:	83 ec 0c             	sub    esp,0xc
c000182e:	09 cf                	or     edi,ecx
c0001830:	83 ca 01             	or     edx,0x1
c0001833:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001836:	83 c5 08             	add    ebp,0x8
c0001839:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000183c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001840:	55                   	push   ebp
c0001841:	e8 c0 f5 ff ff       	call   c0000e06 <dlfree>
c0001846:	83 c4 10             	add    esp,0x10
c0001849:	83 c4 1c             	add    esp,0x1c
c000184c:	89 d8                	mov    eax,ebx
c000184e:	5b                   	pop    ebx
c000184f:	5e                   	pop    esi
c0001850:	5f                   	pop    edi
c0001851:	5d                   	pop    ebp
c0001852:	c3                   	ret    

c0001853 <dlmemalign>:
c0001853:	55                   	push   ebp
c0001854:	57                   	push   edi
c0001855:	56                   	push   esi
c0001856:	53                   	push   ebx
c0001857:	83 ec 0c             	sub    esp,0xc
c000185a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000185e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001862:	83 fa 08             	cmp    edx,0x8
c0001865:	77 10                	ja     c0001877 <dlmemalign+0x24>
c0001867:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000186b:	83 c4 0c             	add    esp,0xc
c000186e:	5b                   	pop    ebx
c000186f:	5e                   	pop    esi
c0001870:	5f                   	pop    edi
c0001871:	5d                   	pop    ebp
c0001872:	e9 ea f8 ff ff       	jmp    c0001161 <dlmalloc>
c0001877:	bf 10 00 00 00       	mov    edi,0x10
c000187c:	83 fa 0f             	cmp    edx,0xf
c000187f:	76 13                	jbe    c0001894 <dlmemalign+0x41>
c0001881:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001884:	85 d1                	test   ecx,edx
c0001886:	75 04                	jne    c000188c <dlmemalign+0x39>
c0001888:	89 d7                	mov    edi,edx
c000188a:	eb 08                	jmp    c0001894 <dlmemalign+0x41>
c000188c:	39 d7                	cmp    edi,edx
c000188e:	73 04                	jae    c0001894 <dlmemalign+0x41>
c0001890:	01 ff                	add    edi,edi
c0001892:	eb f8                	jmp    c000188c <dlmemalign+0x39>
c0001894:	83 f8 df             	cmp    eax,0xffffffdf
c0001897:	76 07                	jbe    c00018a0 <dlmemalign+0x4d>
c0001899:	31 c0                	xor    eax,eax
c000189b:	e9 ce 00 00 00       	jmp    c000196e <dlmemalign+0x11b>
c00018a0:	83 c0 0b             	add    eax,0xb
c00018a3:	bd 10 00 00 00       	mov    ebp,0x10
c00018a8:	83 f8 0f             	cmp    eax,0xf
c00018ab:	76 05                	jbe    c00018b2 <dlmemalign+0x5f>
c00018ad:	83 e0 f8             	and    eax,0xfffffff8
c00018b0:	89 c5                	mov    ebp,eax
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b9:	50                   	push   eax
c00018ba:	e8 a2 f8 ff ff       	call   c0001161 <dlmalloc>
c00018bf:	83 c4 10             	add    esp,0x10
c00018c2:	89 c1                	mov    ecx,eax
c00018c4:	85 c0                	test   eax,eax
c00018c6:	74 d1                	je     c0001899 <dlmemalign+0x46>
c00018c8:	31 d2                	xor    edx,edx
c00018ca:	8d 70 f8             	lea    esi,[eax-0x8]
c00018cd:	f7 f7                	div    edi
c00018cf:	85 d2                	test   edx,edx
c00018d1:	74 62                	je     c0001935 <dlmemalign+0xe2>
c00018d3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d7:	89 f8                	mov    eax,edi
c00018d9:	f7 d8                	neg    eax
c00018db:	21 c3                	and    ebx,eax
c00018dd:	83 eb 08             	sub    ebx,0x8
c00018e0:	89 d8                	mov    eax,ebx
c00018e2:	29 f0                	sub    eax,esi
c00018e4:	83 f8 0f             	cmp    eax,0xf
c00018e7:	77 02                	ja     c00018eb <dlmemalign+0x98>
c00018e9:	01 fb                	add    ebx,edi
c00018eb:	89 d8                	mov    eax,ebx
c00018ed:	29 f0                	sub    eax,esi
c00018ef:	89 c6                	mov    esi,eax
c00018f1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018f4:	89 c2                	mov    edx,eax
c00018f6:	83 e2 fc             	and    edx,0xfffffffc
c00018f9:	29 f2                	sub    edx,esi
c00018fb:	a8 02                	test   al,0x2
c00018fd:	74 10                	je     c000190f <dlmemalign+0xbc>
c00018ff:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001902:	83 ca 02             	or     edx,0x2
c0001905:	8d 43 08             	lea    eax,[ebx+0x8]
c0001908:	89 33                	mov    DWORD PTR [ebx],esi
c000190a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000190d:	eb 5f                	jmp    c000196e <dlmemalign+0x11b>
c000190f:	83 ec 0c             	sub    esp,0xc
c0001912:	89 d0                	mov    eax,edx
c0001914:	83 c8 01             	or     eax,0x1
c0001917:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000191a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000191f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001922:	83 e0 01             	and    eax,0x1
c0001925:	09 f0                	or     eax,esi
c0001927:	89 de                	mov    esi,ebx
c0001929:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000192c:	51                   	push   ecx
c000192d:	e8 d4 f4 ff ff       	call   c0000e06 <dlfree>
c0001932:	83 c4 10             	add    esp,0x10
c0001935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001938:	a8 02                	test   al,0x2
c000193a:	75 2f                	jne    c000196b <dlmemalign+0x118>
c000193c:	83 e0 fc             	and    eax,0xfffffffc
c000193f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001942:	39 c2                	cmp    edx,eax
c0001944:	73 25                	jae    c000196b <dlmemalign+0x118>
c0001946:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001949:	83 ec 0c             	sub    esp,0xc
c000194c:	29 e8                	sub    eax,ebp
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	83 c8 01             	or     eax,0x1
c0001954:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001957:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000195a:	83 e0 01             	and    eax,0x1
c000195d:	09 c5                	or     ebp,eax
c000195f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001962:	52                   	push   edx
c0001963:	e8 9e f4 ff ff       	call   c0000e06 <dlfree>
c0001968:	83 c4 10             	add    esp,0x10
c000196b:	8d 46 08             	lea    eax,[esi+0x8]
c000196e:	83 c4 0c             	add    esp,0xc
c0001971:	5b                   	pop    ebx
c0001972:	5e                   	pop    esi
c0001973:	5f                   	pop    edi
c0001974:	5d                   	pop    ebp
c0001975:	c3                   	ret    

c0001976 <dlcalloc>:
c0001976:	53                   	push   ebx
c0001977:	83 ec 14             	sub    esp,0x14
c000197a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000197e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001983:	50                   	push   eax
c0001984:	e8 d8 f7 ff ff       	call   c0001161 <dlmalloc>
c0001989:	83 c4 10             	add    esp,0x10
c000198c:	89 c3                	mov    ebx,eax
c000198e:	85 c0                	test   eax,eax
c0001990:	74 77                	je     c0001a09 <dlcalloc+0x93>
c0001992:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001995:	89 d0                	mov    eax,edx
c0001997:	83 e0 fc             	and    eax,0xfffffffc
c000199a:	80 e2 02             	and    dl,0x2
c000199d:	75 5a                	jne    c00019f9 <dlcalloc+0x83>
c000199f:	83 e8 04             	sub    eax,0x4
c00019a2:	83 f8 27             	cmp    eax,0x27
c00019a5:	76 03                	jbe    c00019aa <dlcalloc+0x34>
c00019a7:	51                   	push   ecx
c00019a8:	eb 53                	jmp    c00019fd <dlcalloc+0x87>
c00019aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019be:	83 f8 13             	cmp    eax,0x13
c00019c1:	76 46                	jbe    c0001a09 <dlcalloc+0x93>
c00019c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019ca:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019d1:	83 f8 1b             	cmp    eax,0x1b
c00019d4:	76 33                	jbe    c0001a09 <dlcalloc+0x93>
c00019d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019dd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e4:	83 f8 23             	cmp    eax,0x23
c00019e7:	76 20                	jbe    c0001a09 <dlcalloc+0x93>
c00019e9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019f0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f7:	eb 10                	jmp    c0001a09 <dlcalloc+0x93>
c00019f9:	83 e8 08             	sub    eax,0x8
c00019fc:	52                   	push   edx
c00019fd:	50                   	push   eax
c00019fe:	6a 00                	push   0x0
c0001a00:	53                   	push   ebx
c0001a01:	e8 d2 ec ff ff       	call   c00006d8 <memset>
c0001a06:	83 c4 10             	add    esp,0x10
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	83 c4 08             	add    esp,0x8
c0001a0e:	5b                   	pop    ebx
c0001a0f:	c3                   	ret    

c0001a10 <dlcfree>:
c0001a10:	e9 f1 f3 ff ff       	jmp    c0000e06 <dlfree>

c0001a15 <dlindependent_calloc>:
c0001a15:	83 ec 28             	sub    esp,0x28
c0001a18:	b9 03 00 00 00       	mov    ecx,0x3
c0001a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a31:	e8 b9 fa ff ff       	call   c00014ef <iALLOc>
c0001a36:	83 c4 2c             	add    esp,0x2c
c0001a39:	c3                   	ret    

c0001a3a <dlindependent_comalloc>:
c0001a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a42:	31 c9                	xor    ecx,ecx
c0001a44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a4c:	e9 9e fa ff ff       	jmp    c00014ef <iALLOc>

c0001a51 <dlvalloc>:
c0001a51:	83 ec 0c             	sub    esp,0xc
c0001a54:	83 3d 00 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b500,0x0
c0001a5b:	75 0a                	jne    c0001a67 <dlvalloc+0x16>
c0001a5d:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0001a62:	e8 b8 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a67:	50                   	push   eax
c0001a68:	50                   	push   eax
c0001a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a6d:	ff 35 5c b8 03 c0    	push   DWORD PTR ds:0xc003b85c
c0001a73:	e8 db fd ff ff       	call   c0001853 <dlmemalign>
c0001a78:	83 c4 1c             	add    esp,0x1c
c0001a7b:	c3                   	ret    

c0001a7c <dlpvalloc>:
c0001a7c:	83 ec 0c             	sub    esp,0xc
c0001a7f:	83 3d 00 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b500,0x0
c0001a86:	75 0a                	jne    c0001a92 <dlpvalloc+0x16>
c0001a88:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0001a8d:	e8 8d f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a92:	a1 5c b8 03 c0       	mov    eax,ds:0xc003b85c
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	52                   	push   edx
c0001a9a:	f7 d9                	neg    ecx
c0001a9c:	52                   	push   edx
c0001a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001aa1:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001aa5:	21 ca                	and    edx,ecx
c0001aa7:	52                   	push   edx
c0001aa8:	50                   	push   eax
c0001aa9:	e8 a5 fd ff ff       	call   c0001853 <dlmemalign>
c0001aae:	83 c4 1c             	add    esp,0x1c
c0001ab1:	c3                   	ret    

c0001ab2 <dlmalloc_trim>:
c0001ab2:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0001ab7:	e8 63 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001abc:	31 c0                	xor    eax,eax
c0001abe:	c3                   	ret    

c0001abf <dlmalloc_usable_size>:
c0001abf:	53                   	push   ebx
c0001ac0:	31 c0                	xor    eax,eax
c0001ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac6:	85 c9                	test   ecx,ecx
c0001ac8:	74 24                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001aca:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001acd:	f6 c2 02             	test   dl,0x2
c0001ad0:	74 08                	je     c0001ada <dlmalloc_usable_size+0x1b>
c0001ad2:	83 e2 fc             	and    edx,0xfffffffc
c0001ad5:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad8:	eb 14                	jmp    c0001aee <dlmalloc_usable_size+0x2f>
c0001ada:	89 d3                	mov    ebx,edx
c0001adc:	31 c0                	xor    eax,eax
c0001ade:	83 e3 fe             	and    ebx,0xfffffffe
c0001ae1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae6:	74 06                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001ae8:	83 e2 fc             	and    edx,0xfffffffc
c0001aeb:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aee:	5b                   	pop    ebx
c0001aef:	c3                   	ret    

c0001af0 <dlmallinfo>:
c0001af0:	55                   	push   ebp
c0001af1:	57                   	push   edi
c0001af2:	56                   	push   esi
c0001af3:	53                   	push   ebx
c0001af4:	83 ec 08             	sub    esp,0x8
c0001af7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afb:	83 3d 2c b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b52c,0x0
c0001b02:	75 0a                	jne    c0001b0e <dlmallinfo+0x1e>
c0001b04:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0001b09:	e8 11 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001b0e:	a1 2c b5 03 c0       	mov    eax,ds:0xc003b52c
c0001b13:	31 ed                	xor    ebp,ebp
c0001b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b18:	31 c9                	xor    ecx,ecx
c0001b1a:	83 e0 fc             	and    eax,0xfffffffc
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	8b 14 85 04 b5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4afc]
c0001b2a:	85 d2                	test   edx,edx
c0001b2c:	74 0e                	je     c0001b3c <dlmallinfo+0x4c>
c0001b2e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b31:	45                   	inc    ebp
c0001b32:	83 e6 fc             	and    esi,0xfffffffc
c0001b35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b38:	01 f1                	add    ecx,esi
c0001b3a:	eb ee                	jmp    c0001b2a <dlmallinfo+0x3a>
c0001b3c:	40                   	inc    eax
c0001b3d:	83 f8 0a             	cmp    eax,0xa
c0001b40:	75 e1                	jne    c0001b23 <dlmallinfo+0x33>
c0001b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b50:	b8 34 b5 03 c0       	mov    eax,0xc003b534
c0001b55:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b58:	39 f0                	cmp    eax,esi
c0001b5a:	74 10                	je     c0001b6c <dlmallinfo+0x7c>
c0001b5c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b5f:	ff 04 24             	inc    DWORD PTR [esp]
c0001b62:	83 e7 fc             	and    edi,0xfffffffc
c0001b65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b68:	01 fa                	add    edx,edi
c0001b6a:	eb ec                	jmp    c0001b58 <dlmallinfo+0x68>
c0001b6c:	83 c0 08             	add    eax,0x8
c0001b6f:	3d 2c b8 03 c0       	cmp    eax,0xc003b82c
c0001b74:	75 df                	jne    c0001b55 <dlmallinfo+0x65>
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b7c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b7f:	a1 68 b8 03 c0       	mov    eax,ds:0xc003b868
c0001b84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b87:	89 03                	mov    DWORD PTR [ebx],eax
c0001b89:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b8c:	8b 35 50 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b850
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b9a:	8b 35 64 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b864
c0001ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ba4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	8b 35 74 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b874
c0001bb0:	89 d8                	mov    eax,ebx
c0001bb2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bb5:	83 c4 08             	add    esp,0x8
c0001bb8:	5b                   	pop    ebx
c0001bb9:	5e                   	pop    esi
c0001bba:	5f                   	pop    edi
c0001bbb:	5d                   	pop    ebp
c0001bbc:	c2 04 00             	ret    0x4

c0001bbf <dlmalloc_stats>:
c0001bbf:	83 ec 30             	sub    esp,0x30
c0001bc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc6:	50                   	push   eax
c0001bc7:	e8 24 ff ff ff       	call   c0001af0 <dlmallinfo>
c0001bcc:	83 c4 30             	add    esp,0x30
c0001bcf:	c3                   	ret    

c0001bd0 <dlmallopt>:
c0001bd0:	56                   	push   esi
c0001bd1:	b8 00 b5 03 c0       	mov    eax,0xc003b500
c0001bd6:	53                   	push   ebx
c0001bd7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bdf:	e8 3b f1 ff ff       	call   c0000d1f <malloc_consolidate>
c0001be4:	8d 46 04             	lea    eax,[esi+0x4]
c0001be7:	83 f8 05             	cmp    eax,0x5
c0001bea:	77 67                	ja     c0001c53 <dlmallopt+0x83>
c0001bec:	ff 24 85 e4 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a1c]
c0001bf3:	83 fb 50             	cmp    ebx,0x50
c0001bf6:	77 5b                	ja     c0001c53 <dlmallopt+0x83>
c0001bf8:	ba 08 00 00 00       	mov    edx,0x8
c0001bfd:	85 db                	test   ebx,ebx
c0001bff:	74 12                	je     c0001c13 <dlmallopt+0x43>
c0001c01:	83 c3 0b             	add    ebx,0xb
c0001c04:	ba 10 00 00 00       	mov    edx,0x10
c0001c09:	83 fb 0f             	cmp    ebx,0xf
c0001c0c:	76 05                	jbe    c0001c13 <dlmallopt+0x43>
c0001c0e:	89 da                	mov    edx,ebx
c0001c10:	83 e2 f8             	and    edx,0xfffffff8
c0001c13:	a1 00 b5 03 c0       	mov    eax,ds:0xc003b500
c0001c18:	83 e0 03             	and    eax,0x3
c0001c1b:	09 d0                	or     eax,edx
c0001c1d:	a3 00 b5 03 c0       	mov    ds:0xc003b500,eax
c0001c22:	eb 31                	jmp    c0001c55 <dlmallopt+0x85>
c0001c24:	89 1d 44 b8 03 c0    	mov    DWORD PTR ds:0xc003b844,ebx
c0001c2a:	eb 06                	jmp    c0001c32 <dlmallopt+0x62>
c0001c2c:	89 1d 48 b8 03 c0    	mov    DWORD PTR ds:0xc003b848,ebx
c0001c32:	be 01 00 00 00       	mov    esi,0x1
c0001c37:	eb 1c                	jmp    c0001c55 <dlmallopt+0x85>
c0001c39:	89 1d 4c b8 03 c0    	mov    DWORD PTR ds:0xc003b84c,ebx
c0001c3f:	eb f1                	jmp    c0001c32 <dlmallopt+0x62>
c0001c41:	31 f6                	xor    esi,esi
c0001c43:	85 db                	test   ebx,ebx
c0001c45:	75 0e                	jne    c0001c55 <dlmallopt+0x85>
c0001c47:	c7 05 54 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b854,0x0
c0001c51:	eb df                	jmp    c0001c32 <dlmallopt+0x62>
c0001c53:	31 f6                	xor    esi,esi
c0001c55:	89 f0                	mov    eax,esi
c0001c57:	5b                   	pop    ebx
c0001c58:	5e                   	pop    esi
c0001c59:	c3                   	ret    

c0001c5a <disk_status>:
c0001c5a:	31 c0                	xor    eax,eax
c0001c5c:	c3                   	ret    

c0001c5d <disk_initialize>:
c0001c5d:	31 c0                	xor    eax,eax
c0001c5f:	c3                   	ret    

c0001c60 <disk_read>:
c0001c60:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c65:	0f b6 04 85 60 c7 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc38a0]
c0001c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c71:	e9 68 79 01 00       	jmp    c00195de <fatWrapperReadDisk>

c0001c76 <disk_write>:
c0001c76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c7b:	0f b6 04 85 60 c7 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc38a0]
c0001c83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c87:	e9 99 79 01 00       	jmp    c0019625 <fatWrapperWriteDisk>

c0001c8c <disk_ioctl>:
c0001c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c95:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c9a:	0f b6 04 85 60 c7 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc38a0]
c0001ca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ca6:	e9 c1 79 01 00       	jmp    c001966c <fatWrapperIoctl>

c0001cab <ld_word>:
c0001cab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001caf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cb2:	c1 e2 08             	shl    edx,0x8
c0001cb5:	09 d0                	or     eax,edx
c0001cb7:	c3                   	ret    

c0001cb8 <ld_dword>:
c0001cb8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001cbc:	89 d1                	mov    ecx,edx
c0001cbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cc2:	c1 e1 08             	shl    ecx,0x8
c0001cc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc8:	09 ca                	or     edx,ecx
c0001cca:	c1 e2 08             	shl    edx,0x8
c0001ccd:	09 d0                	or     eax,edx
c0001ccf:	c3                   	ret    

c0001cd0 <ld_qword>:
c0001cd0:	57                   	push   edi
c0001cd1:	56                   	push   esi
c0001cd2:	53                   	push   ebx
c0001cd3:	31 db                	xor    ebx,ebx
c0001cd5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cd8:	89 df                	mov    edi,ebx
c0001cda:	89 ce                	mov    esi,ecx
c0001cdc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ce0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ce4:	c1 e6 08             	shl    esi,0x8
c0001ce7:	09 f2                	or     edx,esi
c0001ce9:	89 d6                	mov    esi,edx
c0001ceb:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cef:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cf3:	c1 e6 08             	shl    esi,0x8
c0001cf6:	09 f2                	or     edx,esi
c0001cf8:	89 d6                	mov    esi,edx
c0001cfa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cfe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001d02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d05:	c1 e6 08             	shl    esi,0x8
c0001d08:	89 fb                	mov    ebx,edi
c0001d0a:	09 f2                	or     edx,esi
c0001d0c:	89 d1                	mov    ecx,edx
c0001d0e:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001d12:	c1 e1 08             	shl    ecx,0x8
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	09 c8                	or     eax,ecx
c0001d19:	5b                   	pop    ebx
c0001d1a:	5e                   	pop    esi
c0001d1b:	5f                   	pop    edi
c0001d1c:	c3                   	ret    

c0001d1d <st_word>:
c0001d1d:	66 89 10             	mov    WORD PTR [eax],dx
c0001d20:	c3                   	ret    

c0001d21 <st_dword>:
c0001d21:	89 10                	mov    DWORD PTR [eax],edx
c0001d23:	c3                   	ret    

c0001d24 <st_qword>:
c0001d24:	89 10                	mov    DWORD PTR [eax],edx
c0001d26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d29:	c3                   	ret    

c0001d2a <mem_cpy>:
c0001d2a:	85 c9                	test   ecx,ecx
c0001d2c:	74 10                	je     c0001d3e <mem_cpy+0x14>
c0001d2e:	57                   	push   edi
c0001d2f:	01 c1                	add    ecx,eax
c0001d31:	56                   	push   esi
c0001d32:	89 c7                	mov    edi,eax
c0001d34:	89 d6                	mov    esi,edx
c0001d36:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d37:	39 f9                	cmp    ecx,edi
c0001d39:	75 fb                	jne    c0001d36 <mem_cpy+0xc>
c0001d3b:	5e                   	pop    esi
c0001d3c:	5f                   	pop    edi
c0001d3d:	c3                   	ret    
c0001d3e:	c3                   	ret    

c0001d3f <mem_set>:
c0001d3f:	01 c1                	add    ecx,eax
c0001d41:	40                   	inc    eax
c0001d42:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d45:	39 c8                	cmp    eax,ecx
c0001d47:	75 f8                	jne    c0001d41 <mem_set+0x2>
c0001d49:	c3                   	ret    

c0001d4a <mem_cmp>:
c0001d4a:	57                   	push   edi
c0001d4b:	56                   	push   esi
c0001d4c:	89 c6                	mov    esi,eax
c0001d4e:	53                   	push   ebx
c0001d4f:	46                   	inc    esi
c0001d50:	42                   	inc    edx
c0001d51:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d55:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d59:	29 fb                	sub    ebx,edi
c0001d5b:	89 cf                	mov    edi,ecx
c0001d5d:	29 f7                	sub    edi,esi
c0001d5f:	01 c7                	add    edi,eax
c0001d61:	74 04                	je     c0001d67 <mem_cmp+0x1d>
c0001d63:	85 db                	test   ebx,ebx
c0001d65:	74 e8                	je     c0001d4f <mem_cmp+0x5>
c0001d67:	89 d8                	mov    eax,ebx
c0001d69:	5b                   	pop    ebx
c0001d6a:	5e                   	pop    esi
c0001d6b:	5f                   	pop    edi
c0001d6c:	c3                   	ret    

c0001d6d <chk_chr>:
c0001d6d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d70:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d73:	74 07                	je     c0001d7c <chk_chr+0xf>
c0001d75:	39 d1                	cmp    ecx,edx
c0001d77:	74 03                	je     c0001d7c <chk_chr+0xf>
c0001d79:	40                   	inc    eax
c0001d7a:	eb f1                	jmp    c0001d6d <chk_chr>
c0001d7c:	89 c8                	mov    eax,ecx
c0001d7e:	c3                   	ret    

c0001d7f <dbc_1st>:
c0001d7f:	31 c0                	xor    eax,eax
c0001d81:	c3                   	ret    

c0001d82 <dbc_2nd>:
c0001d82:	31 c0                	xor    eax,eax
c0001d84:	c3                   	ret    

c0001d85 <tchar2uni>:
c0001d85:	57                   	push   edi
c0001d86:	89 c7                	mov    edi,eax
c0001d88:	56                   	push   esi
c0001d89:	53                   	push   ebx
c0001d8a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d8c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d8e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d91:	84 c9                	test   cl,cl
c0001d93:	78 0a                	js     c0001d9f <tchar2uni+0x1a>
c0001d95:	0f b6 d1             	movzx  edx,cl
c0001d98:	89 f3                	mov    ebx,esi
c0001d9a:	e9 9f 00 00 00       	jmp    c0001e3e <tchar2uni+0xb9>
c0001d9f:	88 ca                	mov    dl,cl
c0001da1:	83 e2 e0             	and    edx,0xffffffe0
c0001da4:	80 fa c0             	cmp    dl,0xc0
c0001da7:	75 0c                	jne    c0001db5 <tchar2uni+0x30>
c0001da9:	89 ca                	mov    edx,ecx
c0001dab:	b9 01 00 00 00       	mov    ecx,0x1
c0001db0:	83 e2 1f             	and    edx,0x1f
c0001db3:	eb 2e                	jmp    c0001de3 <tchar2uni+0x5e>
c0001db5:	88 ca                	mov    dl,cl
c0001db7:	83 e2 f0             	and    edx,0xfffffff0
c0001dba:	80 fa e0             	cmp    dl,0xe0
c0001dbd:	75 0c                	jne    c0001dcb <tchar2uni+0x46>
c0001dbf:	89 ca                	mov    edx,ecx
c0001dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0001dc6:	83 e2 0f             	and    edx,0xf
c0001dc9:	eb 18                	jmp    c0001de3 <tchar2uni+0x5e>
c0001dcb:	88 ca                	mov    dl,cl
c0001dcd:	83 e2 f8             	and    edx,0xfffffff8
c0001dd0:	88 d0                	mov    al,dl
c0001dd2:	83 ca ff             	or     edx,0xffffffff
c0001dd5:	3c f0                	cmp    al,0xf0
c0001dd7:	75 6c                	jne    c0001e45 <tchar2uni+0xc0>
c0001dd9:	89 ca                	mov    edx,ecx
c0001ddb:	b9 03 00 00 00       	mov    ecx,0x3
c0001de0:	83 e2 07             	and    edx,0x7
c0001de3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001de7:	46                   	inc    esi
c0001de8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001deb:	88 c8                	mov    al,cl
c0001ded:	83 e0 c0             	and    eax,0xffffffc0
c0001df0:	3c 80                	cmp    al,0x80
c0001df2:	75 4e                	jne    c0001e42 <tchar2uni+0xbd>
c0001df4:	c1 e2 06             	shl    edx,0x6
c0001df7:	83 e1 3f             	and    ecx,0x3f
c0001dfa:	09 ca                	or     edx,ecx
c0001dfc:	39 de                	cmp    esi,ebx
c0001dfe:	75 e7                	jne    c0001de7 <tchar2uni+0x62>
c0001e00:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e03:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e09:	77 37                	ja     c0001e42 <tchar2uni+0xbd>
c0001e0b:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e11:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e17:	76 29                	jbe    c0001e42 <tchar2uni+0xbd>
c0001e19:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e1f:	76 1d                	jbe    c0001e3e <tchar2uni+0xb9>
c0001e21:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e27:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e2d:	c1 e1 06             	shl    ecx,0x6
c0001e30:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e36:	09 ca                	or     edx,ecx
c0001e38:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e3e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e40:	eb 03                	jmp    c0001e45 <tchar2uni+0xc0>
c0001e42:	83 ca ff             	or     edx,0xffffffff
c0001e45:	5b                   	pop    ebx
c0001e46:	89 d0                	mov    eax,edx
c0001e48:	5e                   	pop    esi
c0001e49:	5f                   	pop    edi
c0001e4a:	c3                   	ret    

c0001e4b <put_utf>:
c0001e4b:	53                   	push   ebx
c0001e4c:	83 f8 7f             	cmp    eax,0x7f
c0001e4f:	89 c3                	mov    ebx,eax
c0001e51:	b0 00                	mov    al,0x0
c0001e53:	77 11                	ja     c0001e66 <put_utf+0x1b>
c0001e55:	85 c9                	test   ecx,ecx
c0001e57:	0f 84 e5 00 00 00    	je     c0001f42 <put_utf+0xf7>
c0001e5d:	88 1a                	mov    BYTE PTR [edx],bl
c0001e5f:	b0 01                	mov    al,0x1
c0001e61:	e9 dc 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e6c:	77 23                	ja     c0001e91 <put_utf+0x46>
c0001e6e:	83 f9 01             	cmp    ecx,0x1
c0001e71:	0f 86 cb 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	83 e3 3f             	and    ebx,0x3f
c0001e7c:	c1 e8 06             	shr    eax,0x6
c0001e7f:	83 cb 80             	or     ebx,0xffffff80
c0001e82:	83 c8 c0             	or     eax,0xffffffc0
c0001e85:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e88:	88 02                	mov    BYTE PTR [edx],al
c0001e8a:	b0 02                	mov    al,0x2
c0001e8c:	e9 b1 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e91:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e97:	77 40                	ja     c0001ed9 <put_utf+0x8e>
c0001e99:	83 f9 02             	cmp    ecx,0x2
c0001e9c:	0f 86 a0 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001ea2:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ea8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eae:	0f 86 8e 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001eb4:	89 d8                	mov    eax,ebx
c0001eb6:	c1 e8 0c             	shr    eax,0xc
c0001eb9:	83 c8 e0             	or     eax,0xffffffe0
c0001ebc:	88 02                	mov    BYTE PTR [edx],al
c0001ebe:	89 d8                	mov    eax,ebx
c0001ec0:	83 e3 3f             	and    ebx,0x3f
c0001ec3:	c1 e8 06             	shr    eax,0x6
c0001ec6:	83 cb 80             	or     ebx,0xffffff80
c0001ec9:	83 e0 3f             	and    eax,0x3f
c0001ecc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ecf:	83 c8 80             	or     eax,0xffffff80
c0001ed2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ed5:	b0 03                	mov    al,0x3
c0001ed7:	eb 69                	jmp    c0001f42 <put_utf+0xf7>
c0001ed9:	83 f9 03             	cmp    ecx,0x3
c0001edc:	76 64                	jbe    c0001f42 <put_utf+0xf7>
c0001ede:	89 d9                	mov    ecx,ebx
c0001ee0:	0f b7 c3             	movzx  eax,bx
c0001ee3:	66 31 c9             	xor    cx,cx
c0001ee6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eec:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ef2:	c1 e9 06             	shr    ecx,0x6
c0001ef5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001efb:	77 43                	ja     c0001f40 <put_utf+0xf5>
c0001efd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f03:	77 3b                	ja     c0001f40 <put_utf+0xf5>
c0001f05:	09 cb                	or     ebx,ecx
c0001f07:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f0d:	89 d8                	mov    eax,ebx
c0001f0f:	c1 e8 12             	shr    eax,0x12
c0001f12:	83 c8 f0             	or     eax,0xfffffff0
c0001f15:	88 02                	mov    BYTE PTR [edx],al
c0001f17:	89 d8                	mov    eax,ebx
c0001f19:	c1 e8 0c             	shr    eax,0xc
c0001f1c:	83 e0 3f             	and    eax,0x3f
c0001f1f:	83 c8 80             	or     eax,0xffffff80
c0001f22:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f25:	89 d8                	mov    eax,ebx
c0001f27:	83 e3 3f             	and    ebx,0x3f
c0001f2a:	c1 e8 06             	shr    eax,0x6
c0001f2d:	83 cb 80             	or     ebx,0xffffff80
c0001f30:	83 e0 3f             	and    eax,0x3f
c0001f33:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f36:	83 c8 80             	or     eax,0xffffff80
c0001f39:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f3c:	b0 04                	mov    al,0x4
c0001f3e:	eb 02                	jmp    c0001f42 <put_utf+0xf7>
c0001f40:	31 c0                	xor    eax,eax
c0001f42:	5b                   	pop    ebx
c0001f43:	c3                   	ret    

c0001f44 <clst2sect>:
c0001f44:	89 c1                	mov    ecx,eax
c0001f46:	83 ea 02             	sub    edx,0x2
c0001f49:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f4c:	83 e8 02             	sub    eax,0x2
c0001f4f:	39 d0                	cmp    eax,edx
c0001f51:	76 0d                	jbe    c0001f60 <clst2sect+0x1c>
c0001f53:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f57:	f7 e2                	mul    edx
c0001f59:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f5c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f5f:	c3                   	ret    
c0001f60:	31 c0                	xor    eax,eax
c0001f62:	31 d2                	xor    edx,edx
c0001f64:	c3                   	ret    

c0001f65 <clmt_clust>:
c0001f65:	57                   	push   edi
c0001f66:	89 cf                	mov    edi,ecx
c0001f68:	56                   	push   esi
c0001f69:	89 d6                	mov    esi,edx
c0001f6b:	53                   	push   ebx
c0001f6c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f70:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f73:	89 f2                	mov    edx,esi
c0001f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f77:	c1 ef 09             	shr    edi,0x9
c0001f7a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f7e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f81:	89 f9                	mov    ecx,edi
c0001f83:	31 ff                	xor    edi,edi
c0001f85:	57                   	push   edi
c0001f86:	56                   	push   esi
c0001f87:	51                   	push   ecx
c0001f88:	52                   	push   edx
c0001f89:	e8 ee c6 01 00       	call   c001e67c <__udivdi3>
c0001f8e:	83 c4 10             	add    esp,0x10
c0001f91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f93:	85 d2                	test   edx,edx
c0001f95:	74 10                	je     c0001fa7 <clmt_clust+0x42>
c0001f97:	39 d0                	cmp    eax,edx
c0001f99:	72 07                	jb     c0001fa2 <clmt_clust+0x3d>
c0001f9b:	29 d0                	sub    eax,edx
c0001f9d:	83 c3 08             	add    ebx,0x8
c0001fa0:	eb ef                	jmp    c0001f91 <clmt_clust+0x2c>
c0001fa2:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001fa5:	89 c2                	mov    edx,eax
c0001fa7:	5b                   	pop    ebx
c0001fa8:	89 d0                	mov    eax,edx
c0001faa:	5e                   	pop    esi
c0001fab:	5f                   	pop    edi
c0001fac:	c3                   	ret    

c0001fad <pick_lfn>:
c0001fad:	55                   	push   ebp
c0001fae:	57                   	push   edi
c0001faf:	56                   	push   esi
c0001fb0:	89 d6                	mov    esi,edx
c0001fb2:	53                   	push   ebx
c0001fb3:	89 c3                	mov    ebx,eax
c0001fb5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fb8:	e8 ee fc ff ff       	call   c0001cab <ld_word>
c0001fbd:	66 85 c0             	test   ax,ax
c0001fc0:	74 04                	je     c0001fc6 <pick_lfn+0x19>
c0001fc2:	31 c0                	xor    eax,eax
c0001fc4:	eb 5c                	jmp    c0002022 <pick_lfn+0x75>
c0001fc6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0001fce:	83 e1 bf             	and    ecx,0xffffffbf
c0001fd1:	31 ff                	xor    edi,edi
c0001fd3:	49                   	dec    ecx
c0001fd4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fd7:	0f b6 87 00 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0900]
c0001fde:	01 f0                	add    eax,esi
c0001fe0:	e8 c6 fc ff ff       	call   c0001cab <ld_word>
c0001fe5:	66 85 ed             	test   bp,bp
c0001fe8:	74 11                	je     c0001ffb <pick_lfn+0x4e>
c0001fea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff0:	77 d0                	ja     c0001fc2 <pick_lfn+0x15>
c0001ff2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ff6:	89 c5                	mov    ebp,eax
c0001ff8:	41                   	inc    ecx
c0001ff9:	eb 04                	jmp    c0001fff <pick_lfn+0x52>
c0001ffb:	66 40                	inc    ax
c0001ffd:	75 c3                	jne    c0001fc2 <pick_lfn+0x15>
c0001fff:	47                   	inc    edi
c0002000:	83 ff 0d             	cmp    edi,0xd
c0002003:	75 d2                	jne    c0001fd7 <pick_lfn+0x2a>
c0002005:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002008:	74 13                	je     c000201d <pick_lfn+0x70>
c000200a:	66 85 ed             	test   bp,bp
c000200d:	74 0e                	je     c000201d <pick_lfn+0x70>
c000200f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002015:	77 ab                	ja     c0001fc2 <pick_lfn+0x15>
c0002017:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000201d:	b8 01 00 00 00       	mov    eax,0x1
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <put_lfn>:
c0002027:	55                   	push   ebp
c0002028:	31 ed                	xor    ebp,ebp
c000202a:	57                   	push   edi
c000202b:	89 d7                	mov    edi,edx
c000202d:	56                   	push   esi
c000202e:	31 f6                	xor    esi,esi
c0002030:	53                   	push   ebx
c0002031:	83 ec 08             	sub    esp,0x8
c0002034:	89 04 24             	mov    DWORD PTR [esp],eax
c0002037:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000203b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000203f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002045:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002048:	8d 42 1a             	lea    eax,[edx+0x1a]
c000204b:	31 d2                	xor    edx,edx
c000204d:	e8 cb fc ff ff       	call   c0001d1d <st_word>
c0002052:	0f b6 d9             	movzx  ebx,cl
c0002055:	4b                   	dec    ebx
c0002056:	6b db 0d             	imul   ebx,ebx,0xd
c0002059:	66 83 fe ff          	cmp    si,0xffff
c000205d:	74 08                	je     c0002067 <put_lfn+0x40>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002066:	43                   	inc    ebx
c0002067:	0f b6 85 00 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0900]
c000206e:	0f b7 d6             	movzx  edx,si
c0002071:	01 f8                	add    eax,edi
c0002073:	e8 a5 fc ff ff       	call   c0001d1d <st_word>
c0002078:	66 85 f6             	test   si,si
c000207b:	75 03                	jne    c0002080 <put_lfn+0x59>
c000207d:	83 ce ff             	or     esi,0xffffffff
c0002080:	45                   	inc    ebp
c0002081:	83 fd 0d             	cmp    ebp,0xd
c0002084:	75 d3                	jne    c0002059 <put_lfn+0x32>
c0002086:	66 46                	inc    si
c0002088:	74 0a                	je     c0002094 <put_lfn+0x6d>
c000208a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000208d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002092:	75 09                	jne    c000209d <put_lfn+0x76>
c0002094:	88 c8                	mov    al,cl
c0002096:	83 c8 40             	or     eax,0x40
c0002099:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000209d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00020a1:	88 07                	mov    BYTE PTR [edi],al
c00020a3:	83 c4 08             	add    esp,0x8
c00020a6:	5b                   	pop    ebx
c00020a7:	5e                   	pop    esi
c00020a8:	5f                   	pop    edi
c00020a9:	5d                   	pop    ebp
c00020aa:	c3                   	ret    

c00020ab <gen_numname>:
c00020ab:	57                   	push   edi
c00020ac:	89 cf                	mov    edi,ecx
c00020ae:	56                   	push   esi
c00020af:	b9 0b 00 00 00       	mov    ecx,0xb
c00020b4:	53                   	push   ebx
c00020b5:	89 c6                	mov    esi,eax
c00020b7:	83 ec 10             	sub    esp,0x10
c00020ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020be:	e8 67 fc ff ff       	call   c0001d2a <mem_cpy>
c00020c3:	83 fb 05             	cmp    ebx,0x5
c00020c6:	76 2d                	jbe    c00020f5 <gen_numname+0x4a>
c00020c8:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020cb:	66 85 c0             	test   ax,ax
c00020ce:	74 25                	je     c00020f5 <gen_numname+0x4a>
c00020d0:	83 c7 02             	add    edi,0x2
c00020d3:	ba 10 00 00 00       	mov    edx,0x10
c00020d8:	01 db                	add    ebx,ebx
c00020da:	89 c1                	mov    ecx,eax
c00020dc:	66 d1 e8             	shr    ax,1
c00020df:	83 e1 01             	and    ecx,0x1
c00020e2:	01 cb                	add    ebx,ecx
c00020e4:	0f ba e3 10          	bt     ebx,0x10
c00020e8:	73 06                	jae    c00020f0 <gen_numname+0x45>
c00020ea:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020f0:	4a                   	dec    edx
c00020f1:	75 e5                	jne    c00020d8 <gen_numname+0x2d>
c00020f3:	eb d3                	jmp    c00020c8 <gen_numname+0x1d>
c00020f5:	b8 07 00 00 00       	mov    eax,0x7
c00020fa:	88 d9                	mov    cl,bl
c00020fc:	83 e1 0f             	and    ecx,0xf
c00020ff:	8d 51 30             	lea    edx,[ecx+0x30]
c0002102:	80 fa 39             	cmp    dl,0x39
c0002105:	76 03                	jbe    c000210a <gen_numname+0x5f>
c0002107:	8d 51 37             	lea    edx,[ecx+0x37]
c000210a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000210d:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002111:	89 da                	mov    edx,ebx
c0002113:	c1 ea 04             	shr    edx,0x4
c0002116:	83 fb 0f             	cmp    ebx,0xf
c0002119:	76 06                	jbe    c0002121 <gen_numname+0x76>
c000211b:	89 c8                	mov    eax,ecx
c000211d:	89 d3                	mov    ebx,edx
c000211f:	eb d9                	jmp    c00020fa <gen_numname+0x4f>
c0002121:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002126:	31 d2                	xor    edx,edx
c0002128:	8d 58 fe             	lea    ebx,[eax-0x2]
c000212b:	8d 04 16             	lea    eax,[esi+edx*1]
c000212e:	39 ca                	cmp    edx,ecx
c0002130:	73 18                	jae    c000214a <gen_numname+0x9f>
c0002132:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002135:	3c 20                	cmp    al,0x20
c0002137:	74 11                	je     c000214a <gen_numname+0x9f>
c0002139:	e8 41 fc ff ff       	call   c0001d7f <dbc_1st>
c000213e:	85 c0                	test   eax,eax
c0002140:	74 05                	je     c0002147 <gen_numname+0x9c>
c0002142:	39 d3                	cmp    ebx,edx
c0002144:	74 04                	je     c000214a <gen_numname+0x9f>
c0002146:	42                   	inc    edx
c0002147:	42                   	inc    edx
c0002148:	eb e1                	jmp    c000212b <gen_numname+0x80>
c000214a:	b0 20                	mov    al,0x20
c000214c:	83 f9 07             	cmp    ecx,0x7
c000214f:	77 05                	ja     c0002156 <gen_numname+0xab>
c0002151:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002155:	41                   	inc    ecx
c0002156:	42                   	inc    edx
c0002157:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000215b:	83 fa 07             	cmp    edx,0x7
c000215e:	76 ea                	jbe    c000214a <gen_numname+0x9f>
c0002160:	83 c4 10             	add    esp,0x10
c0002163:	5b                   	pop    ebx
c0002164:	5e                   	pop    esi
c0002165:	5f                   	pop    edi
c0002166:	c3                   	ret    

c0002167 <sum_sfn>:
c0002167:	31 c9                	xor    ecx,ecx
c0002169:	31 d2                	xor    edx,edx
c000216b:	d0 ca                	ror    dl,1
c000216d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002170:	41                   	inc    ecx
c0002171:	83 f9 0b             	cmp    ecx,0xb
c0002174:	75 f5                	jne    c000216b <sum_sfn+0x4>
c0002176:	88 d0                	mov    al,dl
c0002178:	c3                   	ret    

c0002179 <xdir_sum>:
c0002179:	56                   	push   esi
c000217a:	31 c9                	xor    ecx,ecx
c000217c:	53                   	push   ebx
c000217d:	31 d2                	xor    edx,edx
c000217f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002183:	43                   	inc    ebx
c0002184:	c1 e3 05             	shl    ebx,0x5
c0002187:	83 fa 02             	cmp    edx,0x2
c000218a:	74 0b                	je     c0002197 <xdir_sum+0x1e>
c000218c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002190:	66 d1 c9             	ror    cx,1
c0002193:	01 f1                	add    ecx,esi
c0002195:	eb 05                	jmp    c000219c <xdir_sum+0x23>
c0002197:	ba 03 00 00 00       	mov    edx,0x3
c000219c:	42                   	inc    edx
c000219d:	39 d3                	cmp    ebx,edx
c000219f:	77 e6                	ja     c0002187 <xdir_sum+0xe>
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <xsum32>:
c00021a6:	d1 ca                	ror    edx,1
c00021a8:	0f b6 c0             	movzx  eax,al
c00021ab:	01 d0                	add    eax,edx
c00021ad:	c3                   	ret    

c00021ae <get_xfileinfo>:
c00021ae:	55                   	push   ebp
c00021af:	31 c9                	xor    ecx,ecx
c00021b1:	57                   	push   edi
c00021b2:	bd 40 00 00 00       	mov    ebp,0x40
c00021b7:	56                   	push   esi
c00021b8:	31 ff                	xor    edi,edi
c00021ba:	53                   	push   ebx
c00021bb:	89 c6                	mov    esi,eax
c00021bd:	83 ec 0c             	sub    esp,0xc
c00021c0:	89 d3                	mov    ebx,edx
c00021c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021c9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021cd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021d0:	76 6d                	jbe    c000223f <get_xfileinfo+0x91>
c00021d2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021d8:	76 0b                	jbe    c00021e5 <get_xfileinfo+0x37>
c00021da:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021de:	bf 01 00 00 00       	mov    edi,0x1
c00021e3:	eb 63                	jmp    c0002248 <get_xfileinfo+0x9a>
c00021e5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021eb:	75 03                	jne    c00021f0 <get_xfileinfo+0x42>
c00021ed:	83 c5 02             	add    ebp,0x2
c00021f0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021f3:	83 c5 02             	add    ebp,0x2
c00021f6:	e8 b0 fa ff ff       	call   c0001cab <ld_word>
c00021fb:	ff 04 24             	inc    DWORD PTR [esp]
c00021fe:	66 85 c9             	test   cx,cx
c0002201:	75 0d                	jne    c0002210 <get_xfileinfo+0x62>
c0002203:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002209:	66 81 fa ff 07       	cmp    dx,0x7ff
c000220e:	76 2b                	jbe    c000223b <get_xfileinfo+0x8d>
c0002210:	c1 e1 10             	shl    ecx,0x10
c0002213:	ba ff 00 00 00       	mov    edx,0xff
c0002218:	0f b7 c0             	movzx  eax,ax
c000221b:	29 fa                	sub    edx,edi
c000221d:	09 c8                	or     eax,ecx
c000221f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0002223:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002227:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000222b:	e8 1b fc ff ff       	call   c0001e4b <put_utf>
c0002230:	84 c0                	test   al,al
c0002232:	74 a6                	je     c00021da <get_xfileinfo+0x2c>
c0002234:	0f b6 c0             	movzx  eax,al
c0002237:	01 c7                	add    edi,eax
c0002239:	31 c0                	xor    eax,eax
c000223b:	89 c1                	mov    ecx,eax
c000223d:	eb 8a                	jmp    c00021c9 <get_xfileinfo+0x1b>
c000223f:	85 ff                	test   edi,edi
c0002241:	74 97                	je     c00021da <get_xfileinfo+0x2c>
c0002243:	66 85 c9             	test   cx,cx
c0002246:	75 92                	jne    c00021da <get_xfileinfo+0x2c>
c0002248:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000224d:	31 c0                	xor    eax,eax
c000224f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002253:	31 d2                	xor    edx,edx
c0002255:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002258:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000225b:	80 e1 10             	and    cl,0x10
c000225e:	75 08                	jne    c0002268 <get_xfileinfo+0xba>
c0002260:	8d 46 38             	lea    eax,[esi+0x38]
c0002263:	e8 68 fa ff ff       	call   c0001cd0 <ld_qword>
c0002268:	89 03                	mov    DWORD PTR [ebx],eax
c000226a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000226d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002270:	e8 36 fa ff ff       	call   c0001cab <ld_word>
c0002275:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002279:	8d 46 0e             	lea    eax,[esi+0xe]
c000227c:	e8 2a fa ff ff       	call   c0001cab <ld_word>
c0002281:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002285:	83 c4 0c             	add    esp,0xc
c0002288:	5b                   	pop    ebx
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	5d                   	pop    ebp
c000228c:	c3                   	ret    

c000228d <get_ldnumber>:
c000228d:	8b 10                	mov    edx,DWORD PTR [eax]
c000228f:	85 d2                	test   edx,edx
c0002291:	74 14                	je     c00022a7 <get_ldnumber+0x1a>
c0002293:	56                   	push   esi
c0002294:	53                   	push   ebx
c0002295:	89 d3                	mov    ebx,edx
c0002297:	43                   	inc    ebx
c0002298:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000229b:	80 f9 1f             	cmp    cl,0x1f
c000229e:	76 0d                	jbe    c00022ad <get_ldnumber+0x20>
c00022a0:	80 f9 3a             	cmp    cl,0x3a
c00022a3:	75 f2                	jne    c0002297 <get_ldnumber+0xa>
c00022a5:	eb 0a                	jmp    c00022b1 <get_ldnumber+0x24>
c00022a7:	83 c9 ff             	or     ecx,0xffffffff
c00022aa:	89 c8                	mov    eax,ecx
c00022ac:	c3                   	ret    
c00022ad:	31 c9                	xor    ecx,ecx
c00022af:	eb 24                	jmp    c00022d5 <get_ldnumber+0x48>
c00022b1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00022b4:	8d 4e d0             	lea    ecx,[esi-0x30]
c00022b7:	80 f9 09             	cmp    cl,0x9
c00022ba:	77 16                	ja     c00022d2 <get_ldnumber+0x45>
c00022bc:	83 c2 02             	add    edx,0x2
c00022bf:	83 c9 ff             	or     ecx,0xffffffff
c00022c2:	39 d3                	cmp    ebx,edx
c00022c4:	75 0f                	jne    c00022d5 <get_ldnumber+0x48>
c00022c6:	89 f2                	mov    edx,esi
c00022c8:	89 18                	mov    DWORD PTR [eax],ebx
c00022ca:	0f be ca             	movsx  ecx,dl
c00022cd:	83 e9 30             	sub    ecx,0x30
c00022d0:	eb 03                	jmp    c00022d5 <get_ldnumber+0x48>
c00022d2:	83 c9 ff             	or     ecx,0xffffffff
c00022d5:	89 c8                	mov    eax,ecx
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	c3                   	ret    

c00022da <crc32>:
c00022da:	56                   	push   esi
c00022db:	89 d6                	mov    esi,edx
c00022dd:	53                   	push   ebx
c00022de:	b2 01                	mov    dl,0x1
c00022e0:	bb 08 00 00 00       	mov    ebx,0x8
c00022e5:	89 f1                	mov    ecx,esi
c00022e7:	84 d1                	test   cl,dl
c00022e9:	0f 95 c1             	setne  cl
c00022ec:	0f b6 c9             	movzx  ecx,cl
c00022ef:	31 c1                	xor    ecx,eax
c00022f1:	89 c8                	mov    eax,ecx
c00022f3:	d1 e8                	shr    eax,1
c00022f5:	80 e1 01             	and    cl,0x1
c00022f8:	74 05                	je     c00022ff <crc32+0x25>
c00022fa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022ff:	d1 e2                	shl    edx,1
c0002301:	4b                   	dec    ebx
c0002302:	75 e1                	jne    c00022e5 <crc32+0xb>
c0002304:	5b                   	pop    ebx
c0002305:	5e                   	pop    esi
c0002306:	c3                   	ret    

c0002307 <test_gpt_header>:
c0002307:	55                   	push   ebp
c0002308:	b9 10 00 00 00       	mov    ecx,0x10
c000230d:	57                   	push   edi
c000230e:	ba 00 f6 01 c0       	mov    edx,0xc001f600
c0002313:	56                   	push   esi
c0002314:	31 ff                	xor    edi,edi
c0002316:	53                   	push   ebx
c0002317:	89 c3                	mov    ebx,eax
c0002319:	e8 2c fa ff ff       	call   c0001d4a <mem_cmp>
c000231e:	85 c0                	test   eax,eax
c0002320:	75 55                	jne    c0002377 <test_gpt_header+0x70>
c0002322:	89 c7                	mov    edi,eax
c0002324:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002329:	83 ce ff             	or     esi,0xffffffff
c000232c:	31 d2                	xor    edx,edx
c000232e:	83 fd 03             	cmp    ebp,0x3
c0002331:	76 05                	jbe    c0002338 <test_gpt_header+0x31>
c0002333:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002338:	89 f0                	mov    eax,esi
c000233a:	45                   	inc    ebp
c000233b:	e8 9a ff ff ff       	call   c00022da <crc32>
c0002340:	83 fd 4c             	cmp    ebp,0x4c
c0002343:	89 c6                	mov    esi,eax
c0002345:	75 e5                	jne    c000232c <test_gpt_header+0x25>
c0002347:	8d 43 10             	lea    eax,[ebx+0x10]
c000234a:	f7 d6                	not    esi
c000234c:	e8 67 f9 ff ff       	call   c0001cb8 <ld_dword>
c0002351:	39 c6                	cmp    esi,eax
c0002353:	75 22                	jne    c0002377 <test_gpt_header+0x70>
c0002355:	8d 43 54             	lea    eax,[ebx+0x54]
c0002358:	e8 5b f9 ff ff       	call   c0001cb8 <ld_dword>
c000235d:	83 c0 80             	add    eax,0xffffff80
c0002360:	75 15                	jne    c0002377 <test_gpt_header+0x70>
c0002362:	8d 43 50             	lea    eax,[ebx+0x50]
c0002365:	e8 4e f9 ff ff       	call   c0001cb8 <ld_dword>
c000236a:	3d 80 00 00 00       	cmp    eax,0x80
c000236f:	0f 96 c0             	setbe  al
c0002372:	0f b6 c0             	movzx  eax,al
c0002375:	89 c7                	mov    edi,eax
c0002377:	5b                   	pop    ebx
c0002378:	89 f8                	mov    eax,edi
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <make_rand>:
c000237e:	56                   	push   esi
c000237f:	85 c0                	test   eax,eax
c0002381:	53                   	push   ebx
c0002382:	75 05                	jne    c0002389 <make_rand+0xb>
c0002384:	b8 01 00 00 00       	mov    eax,0x1
c0002389:	01 d1                	add    ecx,edx
c000238b:	bb 08 00 00 00       	mov    ebx,0x8
c0002390:	89 c6                	mov    esi,eax
c0002392:	d1 e8                	shr    eax,1
c0002394:	83 e6 01             	and    esi,0x1
c0002397:	85 f6                	test   esi,esi
c0002399:	74 05                	je     c00023a0 <make_rand+0x22>
c000239b:	35 00 00 00 a3       	xor    eax,0xa3000000
c00023a0:	4b                   	dec    ebx
c00023a1:	75 ed                	jne    c0002390 <make_rand+0x12>
c00023a3:	42                   	inc    edx
c00023a4:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00023a7:	39 ca                	cmp    edx,ecx
c00023a9:	75 e0                	jne    c000238b <make_rand+0xd>
c00023ab:	5b                   	pop    ebx
c00023ac:	5e                   	pop    esi
c00023ad:	c3                   	ret    

c00023ae <validate>:
c00023ae:	56                   	push   esi
c00023af:	53                   	push   ebx
c00023b0:	89 d6                	mov    esi,edx
c00023b2:	51                   	push   ecx
c00023b3:	85 c0                	test   eax,eax
c00023b5:	75 09                	jne    c00023c0 <validate+0x12>
c00023b7:	b8 09 00 00 00       	mov    eax,0x9
c00023bc:	31 c9                	xor    ecx,ecx
c00023be:	eb 2f                	jmp    c00023ef <validate+0x41>
c00023c0:	89 c3                	mov    ebx,eax
c00023c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00023c4:	85 c0                	test   eax,eax
c00023c6:	74 ef                	je     c00023b7 <validate+0x9>
c00023c8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023cb:	74 ea                	je     c00023b7 <validate+0x9>
c00023cd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023d1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023d5:	75 e0                	jne    c00023b7 <validate+0x9>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023de:	50                   	push   eax
c00023df:	e8 76 f8 ff ff       	call   c0001c5a <disk_status>
c00023e4:	83 c4 10             	add    esp,0x10
c00023e7:	a8 01                	test   al,0x1
c00023e9:	75 cc                	jne    c00023b7 <validate+0x9>
c00023eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ed:	31 c0                	xor    eax,eax
c00023ef:	89 0e                	mov    DWORD PTR [esi],ecx
c00023f1:	5a                   	pop    edx
c00023f2:	5b                   	pop    ebx
c00023f3:	5e                   	pop    esi
c00023f4:	c3                   	ret    

c00023f5 <sync_window>:
c00023f5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023f9:	0f 84 85 00 00 00    	je     c0002484 <sync_window+0x8f>
c00023ff:	55                   	push   ebp
c0002400:	8d 68 54             	lea    ebp,[eax+0x54]
c0002403:	57                   	push   edi
c0002404:	56                   	push   esi
c0002405:	53                   	push   ebx
c0002406:	89 c3                	mov    ebx,eax
c0002408:	83 ec 28             	sub    esp,0x28
c000240b:	6a 01                	push   0x1
c000240d:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002410:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002413:	55                   	push   ebp
c0002414:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002418:	50                   	push   eax
c0002419:	e8 58 f8 ff ff       	call   c0001c76 <disk_write>
c000241e:	83 c4 20             	add    esp,0x20
c0002421:	ba 01 00 00 00       	mov    edx,0x1
c0002426:	85 c0                	test   eax,eax
c0002428:	75 50                	jne    c000247a <sync_window+0x85>
c000242a:	31 ff                	xor    edi,edi
c000242c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000242f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002433:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002437:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000243a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000243d:	89 c6                	mov    esi,eax
c000243f:	89 d7                	mov    edi,edx
c0002441:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002444:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002448:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000244b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000244f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002453:	73 23                	jae    c0002478 <sync_window+0x83>
c0002455:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002459:	75 1d                	jne    c0002478 <sync_window+0x83>
c000245b:	83 ec 0c             	sub    esp,0xc
c000245e:	6a 01                	push   0x1
c0002460:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002464:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002468:	52                   	push   edx
c0002469:	50                   	push   eax
c000246a:	55                   	push   ebp
c000246b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 01 f8 ff ff       	call   c0001c76 <disk_write>
c0002475:	83 c4 20             	add    esp,0x20
c0002478:	31 d2                	xor    edx,edx
c000247a:	83 c4 1c             	add    esp,0x1c
c000247d:	89 d0                	mov    eax,edx
c000247f:	5b                   	pop    ebx
c0002480:	5e                   	pop    esi
c0002481:	5f                   	pop    edi
c0002482:	5d                   	pop    ebp
c0002483:	c3                   	ret    
c0002484:	31 d2                	xor    edx,edx
c0002486:	89 d0                	mov    eax,edx
c0002488:	c3                   	ret    

c0002489 <move_window>:
c0002489:	56                   	push   esi
c000248a:	53                   	push   ebx
c000248b:	89 c3                	mov    ebx,eax
c000248d:	83 ec 14             	sub    esp,0x14
c0002490:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002493:	75 07                	jne    c000249c <move_window+0x13>
c0002495:	31 f6                	xor    esi,esi
c0002497:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000249a:	74 59                	je     c00024f5 <move_window+0x6c>
c000249c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024a4:	89 d8                	mov    eax,ebx
c00024a6:	e8 4a ff ff ff       	call   c00023f5 <sync_window>
c00024ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024af:	89 c6                	mov    esi,eax
c00024b1:	85 c0                	test   eax,eax
c00024b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024b7:	75 3c                	jne    c00024f5 <move_window+0x6c>
c00024b9:	83 ec 0c             	sub    esp,0xc
c00024bc:	8d 43 54             	lea    eax,[ebx+0x54]
c00024bf:	6a 01                	push   0x1
c00024c1:	51                   	push   ecx
c00024c2:	52                   	push   edx
c00024c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024c7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024cb:	50                   	push   eax
c00024cc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024d0:	50                   	push   eax
c00024d1:	e8 8a f7 ff ff       	call   c0001c60 <disk_read>
c00024d6:	83 c4 20             	add    esp,0x20
c00024d9:	85 c0                	test   eax,eax
c00024db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024e3:	74 0a                	je     c00024ef <move_window+0x66>
c00024e5:	83 ca ff             	or     edx,0xffffffff
c00024e8:	be 01 00 00 00       	mov    esi,0x1
c00024ed:	89 d1                	mov    ecx,edx
c00024ef:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024f2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024f5:	89 f0                	mov    eax,esi
c00024f7:	83 c4 14             	add    esp,0x14
c00024fa:	5b                   	pop    ebx
c00024fb:	5e                   	pop    esi
c00024fc:	c3                   	ret    

c00024fd <check_fs>:
c00024fd:	53                   	push   ebx
c00024fe:	89 c3                	mov    ebx,eax
c0002500:	83 ec 08             	sub    esp,0x8
c0002503:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002507:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000250e:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002515:	e8 6f ff ff ff       	call   c0002489 <move_window>
c000251a:	ba 04 00 00 00       	mov    edx,0x4
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 85 89 00 00 00    	jne    c00025b0 <check_fs+0xb3>
c0002527:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000252d:	e8 79 f7 ff ff       	call   c0001cab <ld_word>
c0002532:	ba 03 00 00 00       	mov    edx,0x3
c0002537:	66 3d 55 aa          	cmp    ax,0xaa55
c000253b:	75 73                	jne    c00025b0 <check_fs+0xb3>
c000253d:	ba 20 f7 01 c0       	mov    edx,0xc001f720
c0002542:	8d 43 54             	lea    eax,[ebx+0x54]
c0002545:	b9 0b 00 00 00       	mov    ecx,0xb
c000254a:	e8 fb f7 ff ff       	call   c0001d4a <mem_cmp>
c000254f:	ba 01 00 00 00       	mov    edx,0x1
c0002554:	85 c0                	test   eax,eax
c0002556:	74 58                	je     c00025b0 <check_fs+0xb3>
c0002558:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000255b:	8d 50 18             	lea    edx,[eax+0x18]
c000255e:	80 fa 01             	cmp    dl,0x1
c0002561:	76 09                	jbe    c000256c <check_fs+0x6f>
c0002563:	ba 02 00 00 00       	mov    edx,0x2
c0002568:	3c eb                	cmp    al,0xeb
c000256a:	75 44                	jne    c00025b0 <check_fs+0xb3>
c000256c:	ba b0 a3 03 c0       	mov    edx,0xc003a3b0
c0002571:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002577:	b9 03 00 00 00       	mov    ecx,0x3
c000257c:	e8 c9 f7 ff ff       	call   c0001d4a <mem_cmp>
c0002581:	31 d2                	xor    edx,edx
c0002583:	85 c0                	test   eax,eax
c0002585:	74 29                	je     c00025b0 <check_fs+0xb3>
c0002587:	ba 2c f7 01 c0       	mov    edx,0xc001f72c
c000258c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002592:	b9 05 00 00 00       	mov    ecx,0x5
c0002597:	e8 ae f7 ff ff       	call   c0001d4a <mem_cmp>
c000259c:	31 d2                	xor    edx,edx
c000259e:	85 c0                	test   eax,eax
c00025a0:	74 0e                	je     c00025b0 <check_fs+0xb3>
c00025a2:	31 d2                	xor    edx,edx
c00025a4:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00025ab:	0f 95 c2             	setne  dl
c00025ae:	01 d2                	add    edx,edx
c00025b0:	89 d0                	mov    eax,edx
c00025b2:	83 c4 08             	add    esp,0x8
c00025b5:	5b                   	pop    ebx
c00025b6:	c3                   	ret    

c00025b7 <find_volume>:
c00025b7:	55                   	push   ebp
c00025b8:	31 c9                	xor    ecx,ecx
c00025ba:	57                   	push   edi
c00025bb:	56                   	push   esi
c00025bc:	89 d6                	mov    esi,edx
c00025be:	53                   	push   ebx
c00025bf:	31 d2                	xor    edx,edx
c00025c1:	83 ec 3c             	sub    esp,0x3c
c00025c4:	89 c3                	mov    ebx,eax
c00025c6:	e8 32 ff ff ff       	call   c00024fd <check_fs>
c00025cb:	83 f8 02             	cmp    eax,0x2
c00025ce:	74 0e                	je     c00025de <find_volume+0x27>
c00025d0:	0f 87 5d 01 00 00    	ja     c0002733 <find_volume+0x17c>
c00025d6:	85 f6                	test   esi,esi
c00025d8:	0f 84 55 01 00 00    	je     c0002733 <find_volume+0x17c>
c00025de:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025e5:	0f 85 dd 00 00 00    	jne    c00026c8 <find_volume+0x111>
c00025eb:	31 c9                	xor    ecx,ecx
c00025ed:	ba 01 00 00 00       	mov    edx,0x1
c00025f2:	89 d8                	mov    eax,ebx
c00025f4:	e8 90 fe ff ff       	call   c0002489 <move_window>
c00025f9:	85 c0                	test   eax,eax
c00025fb:	74 0a                	je     c0002607 <find_volume+0x50>
c00025fd:	b8 04 00 00 00       	mov    eax,0x4
c0002602:	e9 2c 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c0002607:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000260a:	89 e8                	mov    eax,ebp
c000260c:	e8 f6 fc ff ff       	call   c0002307 <test_gpt_header>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 0a                	jne    c000261f <find_volume+0x68>
c0002615:	b8 03 00 00 00       	mov    eax,0x3
c000261a:	e9 14 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c000261f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002625:	e8 8e f6 ff ff       	call   c0001cb8 <ld_dword>
c000262a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000262e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002634:	e8 97 f6 ff ff       	call   c0001cd0 <ld_qword>
c0002639:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002641:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002645:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002651:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002655:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002659:	74 ba                	je     c0002615 <find_volume+0x5e>
c000265b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000265f:	31 c9                	xor    ecx,ecx
c0002661:	c1 e7 07             	shl    edi,0x7
c0002664:	89 d8                	mov    eax,ebx
c0002666:	89 fa                	mov    edx,edi
c0002668:	c1 ea 09             	shr    edx,0x9
c000266b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000266f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002673:	e8 11 fe ff ff       	call   c0002489 <move_window>
c0002678:	85 c0                	test   eax,eax
c000267a:	75 81                	jne    c00025fd <find_volume+0x46>
c000267c:	81 e7 80 01 00 00    	and    edi,0x180
c0002682:	b9 10 00 00 00       	mov    ecx,0x10
c0002687:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000268b:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c0002690:	e8 b5 f6 ff ff       	call   c0001d4a <mem_cmp>
c0002695:	85 c0                	test   eax,eax
c0002697:	75 29                	jne    c00026c2 <find_volume+0x10b>
c0002699:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000269d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00026a1:	e8 2a f6 ff ff       	call   c0001cd0 <ld_qword>
c00026a6:	89 d1                	mov    ecx,edx
c00026a8:	89 c2                	mov    edx,eax
c00026aa:	89 d8                	mov    eax,ebx
c00026ac:	e8 4c fe ff ff       	call   c00024fd <check_fs>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	75 07                	jne    c00026bc <find_volume+0x105>
c00026b5:	83 f8 01             	cmp    eax,0x1
c00026b8:	77 08                	ja     c00026c2 <find_volume+0x10b>
c00026ba:	eb 77                	jmp    c0002733 <find_volume+0x17c>
c00026bc:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026c0:	74 71                	je     c0002733 <find_volume+0x17c>
c00026c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026c6:	eb 89                	jmp    c0002651 <find_volume+0x9a>
c00026c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026cc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026d2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026dc:	89 cd                	mov    ebp,ecx
c00026de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026e2:	89 f8                	mov    eax,edi
c00026e4:	83 c7 10             	add    edi,0x10
c00026e7:	e8 cc f5 ff ff       	call   c0001cb8 <ld_dword>
c00026ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026f0:	89 01                	mov    DWORD PTR [ecx],eax
c00026f2:	83 c1 04             	add    ecx,0x4
c00026f5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026f9:	75 e3                	jne    c00026de <find_volume+0x127>
c00026fb:	31 ff                	xor    edi,edi
c00026fd:	85 f6                	test   esi,esi
c00026ff:	74 03                	je     c0002704 <find_volume+0x14d>
c0002701:	8d 7e ff             	lea    edi,[esi-0x1]
c0002704:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002708:	85 d2                	test   edx,edx
c000270a:	74 14                	je     c0002720 <find_volume+0x169>
c000270c:	31 c9                	xor    ecx,ecx
c000270e:	89 d8                	mov    eax,ebx
c0002710:	e8 e8 fd ff ff       	call   c00024fd <check_fs>
c0002715:	83 f8 01             	cmp    eax,0x1
c0002718:	76 19                	jbe    c0002733 <find_volume+0x17c>
c000271a:	85 f6                	test   esi,esi
c000271c:	74 0f                	je     c000272d <find_volume+0x176>
c000271e:	eb 13                	jmp    c0002733 <find_volume+0x17c>
c0002720:	85 f6                	test   esi,esi
c0002722:	0f 85 ed fe ff ff    	jne    c0002615 <find_volume+0x5e>
c0002728:	b8 03 00 00 00       	mov    eax,0x3
c000272d:	47                   	inc    edi
c000272e:	83 ff 03             	cmp    edi,0x3
c0002731:	76 d1                	jbe    c0002704 <find_volume+0x14d>
c0002733:	83 c4 3c             	add    esp,0x3c
c0002736:	5b                   	pop    ebx
c0002737:	5e                   	pop    esi
c0002738:	5f                   	pop    edi
c0002739:	5d                   	pop    ebp
c000273a:	c3                   	ret    

c000273b <mount_volume>:
c000273b:	55                   	push   ebp
c000273c:	57                   	push   edi
c000273d:	89 cf                	mov    edi,ecx
c000273f:	56                   	push   esi
c0002740:	53                   	push   ebx
c0002741:	bb 0b 00 00 00       	mov    ebx,0xb
c0002746:	83 ec 3c             	sub    esp,0x3c
c0002749:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000274f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002753:	e8 35 fb ff ff       	call   c000228d <get_ldnumber>
c0002758:	85 c0                	test   eax,eax
c000275a:	0f 88 3a 05 00 00    	js     c0002c9a <mount_volume+0x55f>
c0002760:	8b 2c 85 a0 b8 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc4760]
c0002767:	89 c6                	mov    esi,eax
c0002769:	bb 0c 00 00 00       	mov    ebx,0xc
c000276e:	85 ed                	test   ebp,ebp
c0002770:	0f 84 24 05 00 00    	je     c0002c9a <mount_volume+0x55f>
c0002776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000277a:	83 e7 fe             	and    edi,0xfffffffe
c000277d:	89 2a                	mov    DWORD PTR [edx],ebp
c000277f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002783:	74 32                	je     c00027b7 <mount_volume+0x7c>
c0002785:	83 ec 0c             	sub    esp,0xc
c0002788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000278c:	50                   	push   eax
c000278d:	e8 c8 f4 ff ff       	call   c0001c5a <disk_status>
c0002792:	83 c4 10             	add    esp,0x10
c0002795:	a8 01                	test   al,0x1
c0002797:	75 1e                	jne    c00027b7 <mount_volume+0x7c>
c0002799:	31 db                	xor    ebx,ebx
c000279b:	89 f9                	mov    ecx,edi
c000279d:	84 c9                	test   cl,cl
c000279f:	0f 84 f5 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027a5:	a8 04                	test   al,0x4
c00027a7:	0f 84 ed 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027ad:	bb 0a 00 00 00       	mov    ebx,0xa
c00027b2:	e9 e3 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027b7:	83 ec 0c             	sub    esp,0xc
c00027ba:	89 f0                	mov    eax,esi
c00027bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00027c0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00027c3:	0f b6 f0             	movzx  esi,al
c00027c6:	bb 03 00 00 00       	mov    ebx,0x3
c00027cb:	56                   	push   esi
c00027cc:	e8 8c f4 ff ff       	call   c0001c5d <disk_initialize>
c00027d1:	83 c4 10             	add    esp,0x10
c00027d4:	a8 01                	test   al,0x1
c00027d6:	0f 85 be 04 00 00    	jne    c0002c9a <mount_volume+0x55f>
c00027dc:	89 f9                	mov    ecx,edi
c00027de:	84 c9                	test   cl,cl
c00027e0:	74 04                	je     c00027e6 <mount_volume+0xab>
c00027e2:	a8 04                	test   al,0x4
c00027e4:	75 c7                	jne    c00027ad <mount_volume+0x72>
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 e8                	mov    eax,ebp
c00027ea:	e8 c8 fd ff ff       	call   c00025b7 <find_volume>
c00027ef:	83 f8 04             	cmp    eax,0x4
c00027f2:	75 0a                	jne    c00027fe <mount_volume+0xc3>
c00027f4:	bb 01 00 00 00       	mov    ebx,0x1
c00027f9:	e9 9c 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <mount_volume+0xd2>
c0002803:	bb 0d 00 00 00       	mov    ebx,0xd
c0002808:	e9 8d 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c000280d:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002810:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000281b:	75 17                	jne    c0002834 <mount_volume+0xf9>
c000281d:	b8 0b 00 00 00       	mov    eax,0xb
c0002822:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002827:	75 da                	jne    c0002803 <mount_volume+0xc8>
c0002829:	40                   	inc    eax
c000282a:	83 f8 40             	cmp    eax,0x40
c000282d:	75 f3                	jne    c0002822 <mount_volume+0xe7>
c000282f:	e9 5a 02 00 00       	jmp    c0002a8e <mount_volume+0x353>
c0002834:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002837:	e8 6f f4 ff ff       	call   c0001cab <ld_word>
c000283c:	66 3d 00 02          	cmp    ax,0x200
c0002840:	75 c1                	jne    c0002803 <mount_volume+0xc8>
c0002842:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002845:	e8 61 f4 ff ff       	call   c0001cab <ld_word>
c000284a:	0f b7 c0             	movzx  eax,ax
c000284d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002851:	85 c0                	test   eax,eax
c0002853:	75 0c                	jne    c0002861 <mount_volume+0x126>
c0002855:	8d 45 78             	lea    eax,[ebp+0x78]
c0002858:	e8 5b f4 ff ff       	call   c0001cb8 <ld_dword>
c000285d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002865:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002868:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000286b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000286f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002872:	48                   	dec    eax
c0002873:	3c 01                	cmp    al,0x1
c0002875:	77 8c                	ja     c0002803 <mount_volume+0xc8>
c0002877:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000287b:	89 c3                	mov    ebx,eax
c000287d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002881:	66 85 c0             	test   ax,ax
c0002884:	0f 84 79 ff ff ff    	je     c0002803 <mount_volume+0xc8>
c000288a:	8d 40 ff             	lea    eax,[eax-0x1]
c000288d:	85 d8                	test   eax,ebx
c000288f:	0f 85 6e ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002895:	8d 45 65             	lea    eax,[ebp+0x65]
c0002898:	e8 0e f4 ff ff       	call   c0001cab <ld_word>
c000289d:	89 c7                	mov    edi,eax
c000289f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00028a3:	a8 0f                	test   al,0xf
c00028a5:	0f 85 58 ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c00028ab:	8d 45 67             	lea    eax,[ebp+0x67]
c00028ae:	e8 f8 f3 ff ff       	call   c0001cab <ld_word>
c00028b3:	0f b7 f0             	movzx  esi,ax
c00028b6:	85 f6                	test   esi,esi
c00028b8:	75 0a                	jne    c00028c4 <mount_volume+0x189>
c00028ba:	8d 45 74             	lea    eax,[ebp+0x74]
c00028bd:	e8 f6 f3 ff ff       	call   c0001cb8 <ld_dword>
c00028c2:	89 c6                	mov    esi,eax
c00028c4:	8d 45 62             	lea    eax,[ebp+0x62]
c00028c7:	e8 df f3 ff ff       	call   c0001cab <ld_word>
c00028cc:	66 85 c0             	test   ax,ax
c00028cf:	0f 84 2e ff ff ff    	je     c0002803 <mount_volume+0xc8>
c00028d5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028da:	0f b7 c8             	movzx  ecx,ax
c00028dd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028e6:	89 fa                	mov    edx,edi
c00028e8:	66 c1 ea 04          	shr    dx,0x4
c00028ec:	0f b7 d2             	movzx  edx,dx
c00028ef:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028f3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028fa:	39 c6                	cmp    esi,eax
c00028fc:	0f 82 01 ff ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002902:	29 c6                	sub    esi,eax
c0002904:	31 d2                	xor    edx,edx
c0002906:	89 f0                	mov    eax,esi
c0002908:	f7 f3                	div    ebx
c000290a:	39 de                	cmp    esi,ebx
c000290c:	0f 82 f1 fe ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002912:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002917:	0f 87 e6 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c000291d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002922:	0f 86 63 03 00 00    	jbe    c0002c8b <mount_volume+0x550>
c0002928:	bb 03 00 00 00       	mov    ebx,0x3
c000292d:	8d 70 02             	lea    esi,[eax+0x2]
c0002930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002938:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000293b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000293e:	31 d2                	xor    edx,edx
c0002940:	89 c8                	mov    eax,ecx
c0002942:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002945:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002949:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000294d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002951:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002955:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002958:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000295b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000295f:	31 d2                	xor    edx,edx
c0002961:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002965:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002969:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000296c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000296f:	83 fb 03             	cmp    ebx,0x3
c0002972:	75 2b                	jne    c000299f <mount_volume+0x264>
c0002974:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002977:	e8 2f f3 ff ff       	call   c0001cab <ld_word>
c000297c:	66 09 c7             	or     di,ax
c000297f:	0f 85 7e fe ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002985:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000298b:	c1 e6 02             	shl    esi,0x2
c000298e:	e8 25 f3 ff ff       	call   c0001cb8 <ld_dword>
c0002993:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000299a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000299d:	eb 30                	jmp    c00029cf <mount_volume+0x294>
c000299f:	66 85 ff             	test   di,di
c00029a2:	0f 84 5b fe ff ff    	je     c0002803 <mount_volume+0xc8>
c00029a8:	31 d2                	xor    edx,edx
c00029aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029ae:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00029b2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00029b6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00029b9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00029bc:	83 fb 02             	cmp    ebx,0x2
c00029bf:	75 04                	jne    c00029c5 <mount_volume+0x28a>
c00029c1:	01 f6                	add    esi,esi
c00029c3:	eb 0a                	jmp    c00029cf <mount_volume+0x294>
c00029c5:	8d 04 76             	lea    eax,[esi+esi*2]
c00029c8:	83 e6 01             	and    esi,0x1
c00029cb:	d1 e8                	shr    eax,1
c00029cd:	01 c6                	add    esi,eax
c00029cf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029d5:	c1 ee 09             	shr    esi,0x9
c00029d8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029dc:	0f 87 21 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c00029e2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029f0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029f4:	83 fb 03             	cmp    ebx,0x3
c00029f7:	75 7a                	jne    c0002a73 <mount_volume+0x338>
c00029f9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029ff:	e8 a7 f2 ff ff       	call   c0001cab <ld_word>
c0002a04:	66 48                	dec    ax
c0002a06:	75 6b                	jne    c0002a73 <mount_volume+0x338>
c0002a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002a0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a10:	83 c2 01             	add    edx,0x1
c0002a13:	89 e8                	mov    eax,ebp
c0002a15:	83 d1 00             	adc    ecx,0x0
c0002a18:	e8 6c fa ff ff       	call   c0002489 <move_window>
c0002a1d:	85 c0                	test   eax,eax
c0002a1f:	75 52                	jne    c0002a73 <mount_volume+0x338>
c0002a21:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002a25:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a2b:	e8 7b f2 ff ff       	call   c0001cab <ld_word>
c0002a30:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a34:	75 3d                	jne    c0002a73 <mount_volume+0x338>
c0002a36:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a39:	e8 7a f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a3e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a43:	75 2e                	jne    c0002a73 <mount_volume+0x338>
c0002a45:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a4b:	e8 68 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a50:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a55:	75 1c                	jne    c0002a73 <mount_volume+0x338>
c0002a57:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a5d:	e8 56 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a62:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a65:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a6b:	e8 48 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a70:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a73:	66 a1 80 b8 03 c0    	mov    ax,ds:0xc003b880
c0002a79:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a7c:	40                   	inc    eax
c0002a7d:	31 db                	xor    ebx,ebx
c0002a7f:	66 a3 80 b8 03 c0    	mov    ds:0xc003b880,ax
c0002a85:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a89:	e9 0c 02 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c0002a8e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a94:	e8 12 f2 ff ff       	call   c0001cab <ld_word>
c0002a99:	66 3d 00 01          	cmp    ax,0x100
c0002a9d:	0f 85 60 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002aa3:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002aaa:	0f 85 53 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ab0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002ab6:	e8 15 f2 ff ff       	call   c0001cd0 <ld_qword>
c0002abb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002abf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002ac3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002ac9:	e8 ea f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ace:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002ad1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ad7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ada:	fe c8                	dec    al
c0002adc:	0f 85 21 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ae2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ae9:	bb 01 00 00 00       	mov    ebx,0x1
c0002aee:	d3 e3                	shl    ebx,cl
c0002af0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002af4:	66 85 db             	test   bx,bx
c0002af7:	0f 84 06 fd ff ff    	je     c0002803 <mount_volume+0xc8>
c0002afd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002b03:	e8 b0 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b08:	89 c6                	mov    esi,eax
c0002b0a:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002b0f:	0f 87 ee fc ff ff    	ja     c0002803 <mount_volume+0xc8>
c0002b15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b19:	8d 40 02             	lea    eax,[eax+0x2]
c0002b1c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002b1f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b26:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b29:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b2f:	e8 84 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b34:	31 d2                	xor    edx,edx
c0002b36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b46:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b49:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b4c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b52:	e8 61 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b57:	31 d2                	xor    edx,edx
c0002b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b61:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b65:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b68:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b6b:	0f b7 c3             	movzx  eax,bx
c0002b6e:	31 d2                	xor    edx,edx
c0002b70:	0f af f0             	imul   esi,eax
c0002b73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b77:	89 f0                	mov    eax,esi
c0002b79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b7d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b81:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b85:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b89:	39 c1                	cmp    ecx,eax
c0002b8b:	89 df                	mov    edi,ebx
c0002b8d:	19 d7                	sbb    edi,edx
c0002b8f:	0f 82 6e fc ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002b95:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b9b:	31 db                	xor    ebx,ebx
c0002b9d:	e8 16 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ba2:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002ba9:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002bac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002bb4:	85 db                	test   ebx,ebx
c0002bb6:	75 39                	jne    c0002bf1 <mount_volume+0x4b6>
c0002bb8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bbc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002bc0:	0f 86 3d fc ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002bc6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002bc9:	31 ff                	xor    edi,edi
c0002bcb:	89 e8                	mov    eax,ebp
c0002bcd:	e8 72 f3 ff ff       	call   c0001f44 <clst2sect>
c0002bd2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bd6:	01 c6                	add    esi,eax
c0002bd8:	89 e8                	mov    eax,ebp
c0002bda:	11 d7                	adc    edi,edx
c0002bdc:	89 f2                	mov    edx,esi
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	e8 a4 f8 ff ff       	call   c0002489 <move_window>
c0002be5:	85 c0                	test   eax,eax
c0002be7:	0f 85 07 fc ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002bed:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bf1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bf6:	74 0b                	je     c0002c03 <mount_volume+0x4c8>
c0002bf8:	83 c3 20             	add    ebx,0x20
c0002bfb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002c01:	eb b1                	jmp    c0002bb4 <mount_volume+0x479>
c0002c03:	8d 75 54             	lea    esi,[ebp+0x54]
c0002c06:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002c0a:	e8 a9 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c0f:	89 c3                	mov    ebx,eax
c0002c11:	83 f8 01             	cmp    eax,0x1
c0002c14:	0f 86 e9 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c1a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002c1d:	0f 86 e0 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c23:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c26:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c2a:	0f af c2             	imul   eax,edx
c0002c2d:	31 d2                	xor    edx,edx
c0002c2f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c32:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c35:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c38:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c3b:	31 c9                	xor    ecx,ecx
c0002c3d:	89 da                	mov    edx,ebx
c0002c3f:	89 e8                	mov    eax,ebp
c0002c41:	c1 ea 07             	shr    edx,0x7
c0002c44:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c47:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c4a:	e8 3a f8 ff ff       	call   c0002489 <move_window>
c0002c4f:	85 c0                	test   eax,eax
c0002c51:	0f 85 9d fb ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	83 e0 7f             	and    eax,0x7f
c0002c5c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c5f:	e8 54 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c64:	83 f8 ff             	cmp    eax,0xffffffff
c0002c67:	74 0a                	je     c0002c73 <mount_volume+0x538>
c0002c69:	43                   	inc    ebx
c0002c6a:	39 d8                	cmp    eax,ebx
c0002c6c:	74 cd                	je     c0002c3b <mount_volume+0x500>
c0002c6e:	e9 90 fb ff ff       	jmp    c0002803 <mount_volume+0xc8>
c0002c73:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c7a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c81:	bb 04 00 00 00       	mov    ebx,0x4
c0002c86:	e9 e8 fd ff ff       	jmp    c0002a73 <mount_volume+0x338>
c0002c8b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c90:	19 db                	sbb    ebx,ebx
c0002c92:	83 c3 02             	add    ebx,0x2
c0002c95:	e9 93 fc ff ff       	jmp    c000292d <mount_volume+0x1f2>
c0002c9a:	83 c4 3c             	add    esp,0x3c
c0002c9d:	89 d8                	mov    eax,ebx
c0002c9f:	5b                   	pop    ebx
c0002ca0:	5e                   	pop    esi
c0002ca1:	5f                   	pop    edi
c0002ca2:	5d                   	pop    ebp
c0002ca3:	c3                   	ret    

c0002ca4 <find_bitmap>:
c0002ca4:	55                   	push   ebp
c0002ca5:	57                   	push   edi
c0002ca6:	89 c7                	mov    edi,eax
c0002ca8:	56                   	push   esi
c0002ca9:	8d 72 fe             	lea    esi,[edx-0x2]
c0002cac:	53                   	push   ebx
c0002cad:	83 ec 1c             	sub    esp,0x1c
c0002cb0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002cb3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002cb7:	83 e8 02             	sub    eax,0x2
c0002cba:	39 f0                	cmp    eax,esi
c0002cbc:	77 02                	ja     c0002cc0 <find_bitmap+0x1c>
c0002cbe:	31 f6                	xor    esi,esi
c0002cc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002cc4:	89 f3                	mov    ebx,esi
c0002cc6:	31 ed                	xor    ebp,ebp
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	89 da                	mov    edx,ebx
c0002ccc:	89 f8                	mov    eax,edi
c0002cce:	c1 ea 0c             	shr    edx,0xc
c0002cd1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cd4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cd7:	e8 ad f7 ff ff       	call   c0002489 <move_window>
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 68                	jne    c0002d48 <find_bitmap+0xa4>
c0002ce0:	89 da                	mov    edx,ebx
c0002ce2:	89 d9                	mov    ecx,ebx
c0002ce4:	c1 ea 03             	shr    edx,0x3
c0002ce7:	83 e1 07             	and    ecx,0x7
c0002cea:	b8 01 00 00 00       	mov    eax,0x1
c0002cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cf5:	d3 e0                	shl    eax,cl
c0002cf7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cfa:	83 e9 02             	sub    ecx,0x2
c0002cfd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d01:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002d05:	43                   	inc    ebx
c0002d06:	21 c1                	and    ecx,eax
c0002d08:	d1 e0                	shl    eax,1
c0002d0a:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002d0e:	77 09                	ja     c0002d19 <find_bitmap+0x75>
c0002d10:	31 db                	xor    ebx,ebx
c0002d12:	ba 00 02 00 00       	mov    edx,0x200
c0002d17:	31 c0                	xor    eax,eax
c0002d19:	84 c9                	test   cl,cl
c0002d1b:	75 10                	jne    c0002d2d <find_bitmap+0x89>
c0002d1d:	45                   	inc    ebp
c0002d1e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002d22:	75 0f                	jne    c0002d33 <find_bitmap+0x8f>
c0002d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d28:	83 c0 02             	add    eax,0x2
c0002d2b:	eb 22                	jmp    c0002d4f <find_bitmap+0xab>
c0002d2d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d31:	31 ed                	xor    ebp,ebp
c0002d33:	39 de                	cmp    esi,ebx
c0002d35:	74 16                	je     c0002d4d <find_bitmap+0xa9>
c0002d37:	84 c0                	test   al,al
c0002d39:	75 c6                	jne    c0002d01 <find_bitmap+0x5d>
c0002d3b:	42                   	inc    edx
c0002d3c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d42:	77 84                	ja     c0002cc8 <find_bitmap+0x24>
c0002d44:	b0 01                	mov    al,0x1
c0002d46:	eb b9                	jmp    c0002d01 <find_bitmap+0x5d>
c0002d48:	83 c8 ff             	or     eax,0xffffffff
c0002d4b:	eb 02                	jmp    c0002d4f <find_bitmap+0xab>
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 1c             	add    esp,0x1c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <change_bitmap>:
c0002d57:	55                   	push   ebp
c0002d58:	89 cd                	mov    ebp,ecx
c0002d5a:	57                   	push   edi
c0002d5b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d5e:	56                   	push   esi
c0002d5f:	89 c7                	mov    edi,eax
c0002d61:	53                   	push   ebx
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	83 ec 1c             	sub    esp,0x1c
c0002d67:	31 d2                	xor    edx,edx
c0002d69:	89 ce                	mov    esi,ecx
c0002d6b:	c1 e8 0c             	shr    eax,0xc
c0002d6e:	bb 01 00 00 00       	mov    ebx,0x1
c0002d73:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d76:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d79:	c1 ee 03             	shr    esi,0x3
c0002d7c:	83 e1 07             	and    ecx,0x7
c0002d7f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d85:	d3 e3                	shl    ebx,cl
c0002d87:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d8b:	89 c1                	mov    ecx,eax
c0002d8d:	89 d3                	mov    ebx,edx
c0002d8f:	83 c1 01             	add    ecx,0x1
c0002d92:	83 d3 00             	adc    ebx,0x0
c0002d95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d9d:	89 d1                	mov    ecx,edx
c0002d9f:	89 c2                	mov    edx,eax
c0002da1:	89 f8                	mov    eax,edi
c0002da3:	e8 e1 f6 ff ff       	call   c0002489 <move_window>
c0002da8:	89 c1                	mov    ecx,eax
c0002daa:	85 c0                	test   eax,eax
c0002dac:	75 48                	jne    c0002df6 <change_bitmap+0x9f>
c0002dae:	31 d2                	xor    edx,edx
c0002db0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002db4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002db8:	0f 95 c2             	setne  dl
c0002dbb:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002dbf:	74 3c                	je     c0002dfd <change_bitmap+0xa6>
c0002dc1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002dc5:	4d                   	dec    ebp
c0002dc6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002dca:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002dce:	74 32                	je     c0002e02 <change_bitmap+0xab>
c0002dd0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dd4:	75 d8                	jne    c0002dae <change_bitmap+0x57>
c0002dd6:	8d 46 01             	lea    eax,[esi+0x1]
c0002dd9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002dde:	89 c3                	mov    ebx,eax
c0002de0:	31 f6                	xor    esi,esi
c0002de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dea:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002df0:	74 99                	je     c0002d8b <change_bitmap+0x34>
c0002df2:	89 de                	mov    esi,ebx
c0002df4:	eb b8                	jmp    c0002dae <change_bitmap+0x57>
c0002df6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dfb:	eb 05                	jmp    c0002e02 <change_bitmap+0xab>
c0002dfd:	b9 02 00 00 00       	mov    ecx,0x2
c0002e02:	83 c4 1c             	add    esp,0x1c
c0002e05:	89 c8                	mov    eax,ecx
c0002e07:	5b                   	pop    ebx
c0002e08:	5e                   	pop    esi
c0002e09:	5f                   	pop    edi
c0002e0a:	5d                   	pop    ebp
c0002e0b:	c3                   	ret    

c0002e0c <put_fat>:
c0002e0c:	83 fa 01             	cmp    edx,0x1
c0002e0f:	0f 86 7b 01 00 00    	jbe    c0002f90 <put_fat+0x184>
c0002e15:	55                   	push   ebp
c0002e16:	57                   	push   edi
c0002e17:	89 cf                	mov    edi,ecx
c0002e19:	56                   	push   esi
c0002e1a:	b9 02 00 00 00       	mov    ecx,0x2
c0002e1f:	53                   	push   ebx
c0002e20:	89 c6                	mov    esi,eax
c0002e22:	83 ec 1c             	sub    esp,0x1c
c0002e25:	89 d3                	mov    ebx,edx
c0002e27:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e2a:	0f 86 68 01 00 00    	jbe    c0002f98 <put_fat+0x18c>
c0002e30:	8a 00                	mov    al,BYTE PTR [eax]
c0002e32:	3c 02                	cmp    al,0x2
c0002e34:	0f 84 c7 00 00 00    	je     c0002f01 <put_fat+0xf5>
c0002e3a:	77 09                	ja     c0002e45 <put_fat+0x39>
c0002e3c:	fe c8                	dec    al
c0002e3e:	74 17                	je     c0002e57 <put_fat+0x4b>
c0002e40:	e9 53 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e45:	b9 02 00 00 00       	mov    ecx,0x2
c0002e4a:	3c 04                	cmp    al,0x4
c0002e4c:	0f 86 e1 00 00 00    	jbe    c0002f33 <put_fat+0x127>
c0002e52:	e9 41 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e57:	89 d5                	mov    ebp,edx
c0002e59:	31 c9                	xor    ecx,ecx
c0002e5b:	d1 ed                	shr    ebp,1
c0002e5d:	89 f0                	mov    eax,esi
c0002e5f:	01 d5                	add    ebp,edx
c0002e61:	89 ea                	mov    edx,ebp
c0002e63:	c1 ea 09             	shr    edx,0x9
c0002e66:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e69:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e6c:	e8 18 f6 ff ff       	call   c0002489 <move_window>
c0002e71:	89 c1                	mov    ecx,eax
c0002e73:	85 c0                	test   eax,eax
c0002e75:	0f 85 1d 01 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002e7b:	8d 46 54             	lea    eax,[esi+0x54]
c0002e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e82:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e8f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e93:	89 f8                	mov    eax,edi
c0002e95:	83 e3 01             	and    ebx,0x1
c0002e98:	74 0d                	je     c0002ea7 <put_fat+0x9b>
c0002e9a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e9d:	89 fa                	mov    edx,edi
c0002e9f:	83 e0 0f             	and    eax,0xf
c0002ea2:	c1 e2 04             	shl    edx,0x4
c0002ea5:	09 d0                	or     eax,edx
c0002ea7:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002eaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb4:	c1 ea 09             	shr    edx,0x9
c0002eb7:	89 f0                	mov    eax,esi
c0002eb9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ebc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebf:	e8 c5 f5 ff ff       	call   c0002489 <move_window>
c0002ec4:	89 c1                	mov    ecx,eax
c0002ec6:	85 c0                	test   eax,eax
c0002ec8:	0f 85 ca 00 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002ece:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ed2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002ed8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002edc:	85 db                	test   ebx,ebx
c0002ede:	74 07                	je     c0002ee7 <put_fat+0xdb>
c0002ee0:	c1 ef 04             	shr    edi,0x4
c0002ee3:	89 fa                	mov    edx,edi
c0002ee5:	eb 0e                	jmp    c0002ef5 <put_fat+0xe9>
c0002ee7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eea:	c1 ef 08             	shr    edi,0x8
c0002eed:	83 e2 f0             	and    edx,0xfffffff0
c0002ef0:	83 e7 0f             	and    edi,0xf
c0002ef3:	09 fa                	or     edx,edi
c0002ef5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ef8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002efc:	e9 97 00 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002f01:	31 c9                	xor    ecx,ecx
c0002f03:	c1 ea 08             	shr    edx,0x8
c0002f06:	89 f0                	mov    eax,esi
c0002f08:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f0b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f0e:	e8 76 f5 ff ff       	call   c0002489 <move_window>
c0002f13:	89 c1                	mov    ecx,eax
c0002f15:	85 c0                	test   eax,eax
c0002f17:	75 7f                	jne    c0002f98 <put_fat+0x18c>
c0002f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1d:	01 db                	add    ebx,ebx
c0002f1f:	0f b7 d7             	movzx  edx,di
c0002f22:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f28:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f2c:	e8 ec ed ff ff       	call   c0001d1d <st_word>
c0002f31:	eb 53                	jmp    c0002f86 <put_fat+0x17a>
c0002f33:	31 c9                	xor    ecx,ecx
c0002f35:	c1 ea 07             	shr    edx,0x7
c0002f38:	89 f0                	mov    eax,esi
c0002f3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f40:	e8 44 f5 ff ff       	call   c0002489 <move_window>
c0002f45:	89 c1                	mov    ecx,eax
c0002f47:	85 c0                	test   eax,eax
c0002f49:	75 4d                	jne    c0002f98 <put_fat+0x18c>
c0002f4b:	c1 e3 02             	shl    ebx,0x2
c0002f4e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f57:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f5b:	74 1c                	je     c0002f79 <put_fat+0x16d>
c0002f5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f61:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f67:	89 d8                	mov    eax,ebx
c0002f69:	e8 4a ed ff ff       	call   c0001cb8 <ld_dword>
c0002f6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f72:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f77:	09 c7                	or     edi,eax
c0002f79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7d:	89 fa                	mov    edx,edi
c0002f7f:	89 d8                	mov    eax,ebx
c0002f81:	e8 9b ed ff ff       	call   c0001d21 <st_dword>
c0002f86:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8e:	eb 08                	jmp    c0002f98 <put_fat+0x18c>
c0002f90:	b9 02 00 00 00       	mov    ecx,0x2
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	c3                   	ret    
c0002f98:	83 c4 1c             	add    esp,0x1c
c0002f9b:	89 c8                	mov    eax,ecx
c0002f9d:	5b                   	pop    ebx
c0002f9e:	5e                   	pop    esi
c0002f9f:	5f                   	pop    edi
c0002fa0:	5d                   	pop    ebp
c0002fa1:	c3                   	ret    

c0002fa2 <fill_last_frag>:
c0002fa2:	57                   	push   edi
c0002fa3:	89 cf                	mov    edi,ecx
c0002fa5:	56                   	push   esi
c0002fa6:	89 d6                	mov    esi,edx
c0002fa8:	53                   	push   ebx
c0002fa9:	89 c3                	mov    ebx,eax
c0002fab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002fae:	85 c0                	test   eax,eax
c0002fb0:	74 21                	je     c0002fd3 <fill_last_frag+0x31>
c0002fb2:	89 f9                	mov    ecx,edi
c0002fb4:	83 f8 01             	cmp    eax,0x1
c0002fb7:	76 05                	jbe    c0002fbe <fill_last_frag+0x1c>
c0002fb9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002fbc:	29 c1                	sub    ecx,eax
c0002fbe:	8d 56 01             	lea    edx,[esi+0x1]
c0002fc1:	29 c2                	sub    edx,eax
c0002fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fc5:	e8 42 fe ff ff       	call   c0002e0c <put_fat>
c0002fca:	85 c0                	test   eax,eax
c0002fcc:	75 05                	jne    c0002fd3 <fill_last_frag+0x31>
c0002fce:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fd1:	eb d8                	jmp    c0002fab <fill_last_frag+0x9>
c0002fd3:	5b                   	pop    ebx
c0002fd4:	5e                   	pop    esi
c0002fd5:	5f                   	pop    edi
c0002fd6:	c3                   	ret    

c0002fd7 <fill_first_frag>:
c0002fd7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fdb:	75 2d                	jne    c000300a <fill_first_frag+0x33>
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	89 c3                	mov    ebx,eax
c0002fe2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fe5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fe8:	01 d7                	add    edi,edx
c0002fea:	39 fa                	cmp    edx,edi
c0002fec:	74 14                	je     c0003002 <fill_first_frag+0x2b>
c0002fee:	8d 72 01             	lea    esi,[edx+0x1]
c0002ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ff3:	89 f1                	mov    ecx,esi
c0002ff5:	e8 12 fe ff ff       	call   c0002e0c <put_fat>
c0002ffa:	89 f2                	mov    edx,esi
c0002ffc:	85 c0                	test   eax,eax
c0002ffe:	74 ea                	je     c0002fea <fill_first_frag+0x13>
c0003000:	eb 0b                	jmp    c000300d <fill_first_frag+0x36>
c0003002:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003006:	31 c0                	xor    eax,eax
c0003008:	eb 03                	jmp    c000300d <fill_first_frag+0x36>
c000300a:	31 c0                	xor    eax,eax
c000300c:	c3                   	ret    
c000300d:	5b                   	pop    ebx
c000300e:	5e                   	pop    esi
c000300f:	5f                   	pop    edi
c0003010:	c3                   	ret    

c0003011 <get_fat>:
c0003011:	83 fa 01             	cmp    edx,0x1
c0003014:	0f 86 db 01 00 00    	jbe    c00031f5 <get_fat+0x1e4>
c000301a:	55                   	push   ebp
c000301b:	b9 01 00 00 00       	mov    ecx,0x1
c0003020:	57                   	push   edi
c0003021:	56                   	push   esi
c0003022:	53                   	push   ebx
c0003023:	83 ec 1c             	sub    esp,0x1c
c0003026:	8b 38                	mov    edi,DWORD PTR [eax]
c0003028:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c000302b:	0f 86 cc 01 00 00    	jbe    c00031fd <get_fat+0x1ec>
c0003031:	89 c3                	mov    ebx,eax
c0003033:	89 d6                	mov    esi,edx
c0003035:	8a 07                	mov    al,BYTE PTR [edi]
c0003037:	3c 02                	cmp    al,0x2
c0003039:	0f 84 99 00 00 00    	je     c00030d8 <get_fat+0xc7>
c000303f:	77 09                	ja     c000304a <get_fat+0x39>
c0003041:	fe c8                	dec    al
c0003043:	74 1a                	je     c000305f <get_fat+0x4e>
c0003045:	e9 b3 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000304a:	3c 03                	cmp    al,0x3
c000304c:	0f 84 b5 00 00 00    	je     c0003107 <get_fat+0xf6>
c0003052:	3c 04                	cmp    al,0x4
c0003054:	0f 84 e3 00 00 00    	je     c000313d <get_fat+0x12c>
c000305a:	e9 9e 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000305f:	89 d3                	mov    ebx,edx
c0003061:	31 c9                	xor    ecx,ecx
c0003063:	d1 eb                	shr    ebx,1
c0003065:	89 f8                	mov    eax,edi
c0003067:	01 d3                	add    ebx,edx
c0003069:	89 da                	mov    edx,ebx
c000306b:	c1 ea 09             	shr    edx,0x9
c000306e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003071:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003074:	e8 10 f4 ff ff       	call   c0002489 <move_window>
c0003079:	85 c0                	test   eax,eax
c000307b:	74 08                	je     c0003085 <get_fat+0x74>
c000307d:	83 c9 ff             	or     ecx,0xffffffff
c0003080:	e9 78 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003085:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003088:	31 c9                	xor    ecx,ecx
c000308a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003090:	89 ea                	mov    edx,ebp
c0003092:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003096:	c1 ea 09             	shr    edx,0x9
c0003099:	89 f8                	mov    eax,edi
c000309b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000309e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a1:	e8 e3 f3 ff ff       	call   c0002489 <move_window>
c00030a6:	85 c0                	test   eax,eax
c00030a8:	75 d3                	jne    c000307d <get_fat+0x6c>
c00030aa:	0f b6 c3             	movzx  eax,bl
c00030ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00030b3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c00030b8:	c1 e3 08             	shl    ebx,0x8
c00030bb:	09 c3                	or     ebx,eax
c00030bd:	89 d9                	mov    ecx,ebx
c00030bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00030c5:	83 e6 01             	and    esi,0x1
c00030c8:	0f 84 2f 01 00 00    	je     c00031fd <get_fat+0x1ec>
c00030ce:	89 d9                	mov    ecx,ebx
c00030d0:	c1 e9 04             	shr    ecx,0x4
c00030d3:	e9 25 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c00030d8:	31 c9                	xor    ecx,ecx
c00030da:	c1 ea 08             	shr    edx,0x8
c00030dd:	89 f8                	mov    eax,edi
c00030df:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030e2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030e5:	e8 9f f3 ff ff       	call   c0002489 <move_window>
c00030ea:	85 c0                	test   eax,eax
c00030ec:	75 8f                	jne    c000307d <get_fat+0x6c>
c00030ee:	01 f6                	add    esi,esi
c00030f0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030f6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030fa:	e8 ac eb ff ff       	call   c0001cab <ld_word>
c00030ff:	0f b7 c8             	movzx  ecx,ax
c0003102:	e9 f6 00 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	c1 ea 07             	shr    edx,0x7
c000310c:	89 f8                	mov    eax,edi
c000310e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003111:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003114:	e8 70 f3 ff ff       	call   c0002489 <move_window>
c0003119:	85 c0                	test   eax,eax
c000311b:	0f 85 5c ff ff ff    	jne    c000307d <get_fat+0x6c>
c0003121:	c1 e6 02             	shl    esi,0x2
c0003124:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000312a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000312e:	e8 85 eb ff ff       	call   c0001cb8 <ld_dword>
c0003133:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003138:	e9 b4 00 00 00       	jmp    c00031f1 <get_fat+0x1e0>
c000313d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003140:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003143:	89 d1                	mov    ecx,edx
c0003145:	09 c1                	or     ecx,eax
c0003147:	74 06                	je     c000314f <get_fat+0x13e>
c0003149:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000314d:	75 0f                	jne    c000315e <get_fat+0x14d>
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003158:	0f 85 9f 00 00 00    	jne    c00031fd <get_fat+0x1ec>
c000315e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003162:	89 f5                	mov    ebp,esi
c0003164:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003169:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000316c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000316f:	80 f9 02             	cmp    cl,0x2
c0003172:	75 35                	jne    c00031a9 <get_fat+0x198>
c0003174:	83 c0 ff             	add    eax,0xffffffff
c0003177:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000317c:	83 d2 ff             	adc    edx,0xffffffff
c000317f:	31 db                	xor    ebx,ebx
c0003181:	0f ac d0 09          	shrd   eax,edx,0x9
c0003185:	53                   	push   ebx
c0003186:	c1 ea 09             	shr    edx,0x9
c0003189:	51                   	push   ecx
c000318a:	52                   	push   edx
c000318b:	50                   	push   eax
c000318c:	e8 eb b4 01 00       	call   c001e67c <__udivdi3>
c0003191:	83 c4 10             	add    esp,0x10
c0003194:	b9 01 00 00 00       	mov    ecx,0x1
c0003199:	39 c5                	cmp    ebp,eax
c000319b:	77 60                	ja     c00031fd <get_fat+0x1ec>
c000319d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031a2:	74 59                	je     c00031fd <get_fat+0x1ec>
c00031a4:	8d 4e 01             	lea    ecx,[esi+0x1]
c00031a7:	eb 54                	jmp    c00031fd <get_fat+0x1ec>
c00031a9:	80 f9 03             	cmp    cl,0x3
c00031ac:	75 05                	jne    c00031b3 <get_fat+0x1a2>
c00031ae:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c00031b1:	77 f1                	ja     c00031a4 <get_fat+0x193>
c00031b3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031b8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c00031bc:	75 3f                	jne    c00031fd <get_fat+0x1ec>
c00031be:	31 c9                	xor    ecx,ecx
c00031c0:	89 f2                	mov    edx,esi
c00031c2:	89 f8                	mov    eax,edi
c00031c4:	c1 ea 07             	shr    edx,0x7
c00031c7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031ca:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031cd:	e8 b7 f2 ff ff       	call   c0002489 <move_window>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	0f 85 a3 fe ff ff    	jne    c000307d <get_fat+0x6c>
c00031da:	c1 e6 02             	shl    esi,0x2
c00031dd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031e7:	e8 cc ea ff ff       	call   c0001cb8 <ld_dword>
c00031ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031f1:	89 c1                	mov    ecx,eax
c00031f3:	eb 08                	jmp    c00031fd <get_fat+0x1ec>
c00031f5:	b9 01 00 00 00       	mov    ecx,0x1
c00031fa:	89 c8                	mov    eax,ecx
c00031fc:	c3                   	ret    
c00031fd:	83 c4 1c             	add    esp,0x1c
c0003200:	89 c8                	mov    eax,ecx
c0003202:	5b                   	pop    ebx
c0003203:	5e                   	pop    esi
c0003204:	5f                   	pop    edi
c0003205:	5d                   	pop    ebp
c0003206:	c3                   	ret    

c0003207 <dir_sdi>:
c0003207:	55                   	push   ebp
c0003208:	57                   	push   edi
c0003209:	56                   	push   esi
c000320a:	53                   	push   ebx
c000320b:	89 c3                	mov    ebx,eax
c000320d:	83 ec 1c             	sub    esp,0x1c
c0003210:	8b 38                	mov    edi,DWORD PTR [eax]
c0003212:	31 c0                	xor    eax,eax
c0003214:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003217:	0f 94 c0             	sete   al
c000321a:	48                   	dec    eax
c000321b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003220:	05 00 00 00 10       	add    eax,0x10000000
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 0a                	ja     c0003233 <dir_sdi+0x2c>
c0003229:	b8 02 00 00 00       	mov    eax,0x2
c000322e:	e9 c4 00 00 00       	jmp    c00032f7 <dir_sdi+0xf0>
c0003233:	89 d6                	mov    esi,edx
c0003235:	f6 c2 1f             	test   dl,0x1f
c0003238:	75 ef                	jne    c0003229 <dir_sdi+0x22>
c000323a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000323d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003240:	85 c9                	test   ecx,ecx
c0003242:	75 2d                	jne    c0003271 <dir_sdi+0x6a>
c0003244:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003247:	77 1b                	ja     c0003264 <dir_sdi+0x5d>
c0003249:	89 f2                	mov    edx,esi
c000324b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324f:	c1 ea 05             	shr    edx,0x5
c0003252:	39 c2                	cmp    edx,eax
c0003254:	73 d3                	jae    c0003229 <dir_sdi+0x22>
c0003256:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003259:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000325c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003262:	eb 4b                	jmp    c00032af <dir_sdi+0xa8>
c0003264:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003267:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000326b:	85 c0                	test   eax,eax
c000326d:	74 da                	je     c0003249 <dir_sdi+0x42>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003275:	c1 e5 09             	shl    ebp,0x9
c0003278:	89 ca                	mov    edx,ecx
c000327a:	39 ee                	cmp    esi,ebp
c000327c:	72 1c                	jb     c000329a <dir_sdi+0x93>
c000327e:	89 d8                	mov    eax,ebx
c0003280:	e8 8c fd ff ff       	call   c0003011 <get_fat>
c0003285:	89 c1                	mov    ecx,eax
c0003287:	83 f8 ff             	cmp    eax,0xffffffff
c000328a:	74 66                	je     c00032f2 <dir_sdi+0xeb>
c000328c:	83 f8 01             	cmp    eax,0x1
c000328f:	76 98                	jbe    c0003229 <dir_sdi+0x22>
c0003291:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003294:	76 93                	jbe    c0003229 <dir_sdi+0x22>
c0003296:	29 ee                	sub    esi,ebp
c0003298:	eb de                	jmp    c0003278 <dir_sdi+0x71>
c000329a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329e:	89 f8                	mov    eax,edi
c00032a0:	e8 9f ec ff ff       	call   c0001f44 <clst2sect>
c00032a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00032a9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032ac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032af:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00032b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00032b5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00032b8:	89 d1                	mov    ecx,edx
c00032ba:	09 c1                	or     ecx,eax
c00032bc:	0f 84 67 ff ff ff    	je     c0003229 <dir_sdi+0x22>
c00032c2:	89 f1                	mov    ecx,esi
c00032c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032cc:	c1 e9 09             	shr    ecx,0x9
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032db:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032de:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032e4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032e7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032eb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ee:	31 c0                	xor    eax,eax
c00032f0:	eb 05                	jmp    c00032f7 <dir_sdi+0xf0>
c00032f2:	b8 01 00 00 00       	mov    eax,0x1
c00032f7:	83 c4 1c             	add    esp,0x1c
c00032fa:	5b                   	pop    ebx
c00032fb:	5e                   	pop    esi
c00032fc:	5f                   	pop    edi
c00032fd:	5d                   	pop    ebp
c00032fe:	c3                   	ret    

c00032ff <create_chain>:
c00032ff:	55                   	push   ebp
c0003300:	89 c5                	mov    ebp,eax
c0003302:	57                   	push   edi
c0003303:	56                   	push   esi
c0003304:	53                   	push   ebx
c0003305:	83 ec 1c             	sub    esp,0x1c
c0003308:	85 d2                	test   edx,edx
c000330a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000330e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003310:	75 0e                	jne    c0003320 <create_chain+0x21>
c0003312:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003315:	85 ff                	test   edi,edi
c0003317:	74 39                	je     c0003352 <create_chain+0x53>
c0003319:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000331c:	77 39                	ja     c0003357 <create_chain+0x58>
c000331e:	eb 32                	jmp    c0003352 <create_chain+0x53>
c0003320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003324:	e8 e8 fc ff ff       	call   c0003011 <get_fat>
c0003329:	89 c3                	mov    ebx,eax
c000332b:	83 f8 01             	cmp    eax,0x1
c000332e:	77 0a                	ja     c000333a <create_chain+0x3b>
c0003330:	bb 01 00 00 00       	mov    ebx,0x1
c0003335:	e9 ba 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c000333a:	83 f8 ff             	cmp    eax,0xffffffff
c000333d:	0f 84 62 01 00 00    	je     c00034a5 <create_chain+0x1a6>
c0003343:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003346:	0f 87 a8 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c000334c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003350:	eb 05                	jmp    c0003357 <create_chain+0x58>
c0003352:	bf 01 00 00 00       	mov    edi,0x1
c0003357:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000335b:	75 07                	jne    c0003364 <create_chain+0x65>
c000335d:	31 db                	xor    ebx,ebx
c000335f:	e9 90 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c0003364:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003367:	75 74                	jne    c00033dd <create_chain+0xde>
c0003369:	b9 01 00 00 00       	mov    ecx,0x1
c000336e:	89 fa                	mov    edx,edi
c0003370:	89 f0                	mov    eax,esi
c0003372:	e8 2d f9 ff ff       	call   c0002ca4 <find_bitmap>
c0003377:	89 c3                	mov    ebx,eax
c0003379:	8d 40 ff             	lea    eax,[eax-0x1]
c000337c:	83 f8 fd             	cmp    eax,0xfffffffd
c000337f:	0f 87 6f 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c0003385:	83 ec 0c             	sub    esp,0xc
c0003388:	b9 01 00 00 00       	mov    ecx,0x1
c000338d:	6a 01                	push   0x1
c000338f:	89 da                	mov    edx,ebx
c0003391:	89 f0                	mov    eax,esi
c0003393:	e8 bf f9 ff ff       	call   c0002d57 <change_bitmap>
c0003398:	83 c4 10             	add    esp,0x10
c000339b:	83 f8 02             	cmp    eax,0x2
c000339e:	74 90                	je     c0003330 <create_chain+0x31>
c00033a0:	83 f8 01             	cmp    eax,0x1
c00033a3:	0f 84 fc 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c00033a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ae:	75 09                	jne    c00033b9 <create_chain+0xba>
c00033b0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00033b4:	e9 0c 01 00 00       	jmp    c00034c5 <create_chain+0x1c6>
c00033b9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00033bd:	0f 85 e7 00 00 00    	jne    c00034aa <create_chain+0x1ab>
c00033c3:	8d 57 01             	lea    edx,[edi+0x1]
c00033c6:	39 da                	cmp    edx,ebx
c00033c8:	0f 84 f7 00 00 00    	je     c00034c5 <create_chain+0x1c6>
c00033ce:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033d1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033d5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033d8:	e9 cd 00 00 00       	jmp    c00034aa <create_chain+0x1ab>
c00033dd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033e1:	75 41                	jne    c0003424 <create_chain+0x125>
c00033e3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033e6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e9:	77 05                	ja     c00033f0 <create_chain+0xf1>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 18 fc ff ff       	call   c0003011 <get_fat>
c00033f9:	83 f8 01             	cmp    eax,0x1
c00033fc:	0f 84 2e ff ff ff    	je     c0003330 <create_chain+0x31>
c0003402:	83 f8 ff             	cmp    eax,0xffffffff
c0003405:	0f 84 9a 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c000340b:	85 c0                	test   eax,eax
c000340d:	74 11                	je     c0003420 <create_chain+0x121>
c000340f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	76 0d                	jbe    c0003424 <create_chain+0x125>
c0003417:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000341a:	76 08                	jbe    c0003424 <create_chain+0x125>
c000341c:	89 c7                	mov    edi,eax
c000341e:	eb 04                	jmp    c0003424 <create_chain+0x125>
c0003420:	85 db                	test   ebx,ebx
c0003422:	75 38                	jne    c000345c <create_chain+0x15d>
c0003424:	89 fb                	mov    ebx,edi
c0003426:	43                   	inc    ebx
c0003427:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000342a:	77 0e                	ja     c000343a <create_chain+0x13b>
c000342c:	83 ff 01             	cmp    edi,0x1
c000342f:	0f 86 28 ff ff ff    	jbe    c000335d <create_chain+0x5e>
c0003435:	bb 02 00 00 00       	mov    ebx,0x2
c000343a:	89 da                	mov    edx,ebx
c000343c:	89 e8                	mov    eax,ebp
c000343e:	e8 ce fb ff ff       	call   c0003011 <get_fat>
c0003443:	85 c0                	test   eax,eax
c0003445:	74 15                	je     c000345c <create_chain+0x15d>
c0003447:	83 f8 01             	cmp    eax,0x1
c000344a:	0f 84 e0 fe ff ff    	je     c0003330 <create_chain+0x31>
c0003450:	40                   	inc    eax
c0003451:	74 52                	je     c00034a5 <create_chain+0x1a6>
c0003453:	39 fb                	cmp    ebx,edi
c0003455:	75 cf                	jne    c0003426 <create_chain+0x127>
c0003457:	e9 01 ff ff ff       	jmp    c000335d <create_chain+0x5e>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	89 da                	mov    edx,ebx
c0003461:	89 f0                	mov    eax,esi
c0003463:	e8 a4 f9 ff ff       	call   c0002e0c <put_fat>
c0003468:	85 c0                	test   eax,eax
c000346a:	75 32                	jne    c000349e <create_chain+0x19f>
c000346c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003471:	74 11                	je     c0003484 <create_chain+0x185>
c0003473:	89 d9                	mov    ecx,ebx
c0003475:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003479:	89 f0                	mov    eax,esi
c000347b:	e8 8c f9 ff ff       	call   c0002e0c <put_fat>
c0003480:	85 c0                	test   eax,eax
c0003482:	75 1a                	jne    c000349e <create_chain+0x19f>
c0003484:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003487:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000348a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000348d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003490:	39 d0                	cmp    eax,edx
c0003492:	77 04                	ja     c0003498 <create_chain+0x199>
c0003494:	48                   	dec    eax
c0003495:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003498:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000349c:	eb 56                	jmp    c00034f4 <create_chain+0x1f5>
c000349e:	48                   	dec    eax
c000349f:	0f 85 8b fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034a5:	83 cb ff             	or     ebx,0xffffffff
c00034a8:	eb 4a                	jmp    c00034f4 <create_chain+0x1f5>
c00034aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00034b1:	41                   	inc    ecx
c00034b2:	39 d9                	cmp    ecx,ebx
c00034b4:	75 19                	jne    c00034cf <create_chain+0x1d0>
c00034b6:	b9 02 00 00 00       	mov    ecx,0x2
c00034bb:	85 d2                	test   edx,edx
c00034bd:	74 03                	je     c00034c2 <create_chain+0x1c3>
c00034bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00034c2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00034c5:	85 c0                	test   eax,eax
c00034c7:	0f 85 63 fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034cd:	eb b5                	jmp    c0003484 <create_chain+0x185>
c00034cf:	85 d2                	test   edx,edx
c00034d1:	75 07                	jne    c00034da <create_chain+0x1db>
c00034d3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034e0:	89 e8                	mov    eax,ebp
c00034e2:	e8 bb fa ff ff       	call   c0002fa2 <fill_last_frag>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	75 b3                	jne    c000349e <create_chain+0x19f>
c00034eb:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034f2:	eb 90                	jmp    c0003484 <create_chain+0x185>
c00034f4:	83 c4 1c             	add    esp,0x1c
c00034f7:	89 d8                	mov    eax,ebx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <remove_chain>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	83 ec 1c             	sub    esp,0x1c
c0003505:	83 fa 01             	cmp    edx,0x1
c0003508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000350c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000350e:	77 0a                	ja     c000351a <remove_chain+0x1c>
c0003510:	b8 02 00 00 00       	mov    eax,0x2
c0003515:	e9 24 01 00 00       	jmp    c000363e <remove_chain+0x140>
c000351a:	89 d6                	mov    esi,edx
c000351c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000351f:	76 ef                	jbe    c0003510 <remove_chain+0x12>
c0003521:	89 c7                	mov    edi,eax
c0003523:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003528:	75 06                	jne    c0003530 <remove_chain+0x32>
c000352a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000352e:	eb 54                	jmp    c0003584 <remove_chain+0x86>
c0003530:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003533:	75 06                	jne    c000353b <remove_chain+0x3d>
c0003535:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003539:	74 ef                	je     c000352a <remove_chain+0x2c>
c000353b:	83 c9 ff             	or     ecx,0xffffffff
c000353e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003542:	89 d8                	mov    eax,ebx
c0003544:	e8 c3 f8 ff ff       	call   c0002e0c <put_fat>
c0003549:	85 c0                	test   eax,eax
c000354b:	74 dd                	je     c000352a <remove_chain+0x2c>
c000354d:	e9 ec 00 00 00       	jmp    c000363e <remove_chain+0x140>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 b9                	je     c0003510 <remove_chain+0x12>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 6d                	je     c00035c9 <remove_chain+0xcb>
c000355c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000355f:	75 6f                	jne    c00035d0 <remove_chain+0xd2>
c0003561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003564:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003567:	8d 51 fe             	lea    edx,[ecx-0x2]
c000356a:	39 d0                	cmp    eax,edx
c000356c:	73 08                	jae    c0003576 <remove_chain+0x78>
c000356e:	40                   	inc    eax
c000356f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003576:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003579:	39 e9                	cmp    ecx,ebp
c000357b:	75 64                	jne    c00035e1 <remove_chain+0xe3>
c000357d:	89 ee                	mov    esi,ebp
c000357f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003582:	76 0f                	jbe    c0003593 <remove_chain+0x95>
c0003584:	89 f2                	mov    edx,esi
c0003586:	89 f8                	mov    eax,edi
c0003588:	e8 84 fa ff ff       	call   c0003011 <get_fat>
c000358d:	89 c5                	mov    ebp,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	75 bf                	jne    c0003552 <remove_chain+0x54>
c0003593:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003596:	0f 85 a0 00 00 00    	jne    c000363c <remove_chain+0x13e>
c000359c:	eb 6c                	jmp    c000360a <remove_chain+0x10c>
c000359e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00035a1:	84 c0                	test   al,al
c00035a3:	75 7d                	jne    c0003622 <remove_chain+0x124>
c00035a5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00035a8:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00035ac:	0f 84 86 00 00 00    	je     c0003638 <remove_chain+0x13a>
c00035b2:	89 da                	mov    edx,ebx
c00035b4:	89 f8                	mov    eax,edi
c00035b6:	e8 56 fa ff ff       	call   c0003011 <get_fat>
c00035bb:	83 f8 01             	cmp    eax,0x1
c00035be:	0f 86 4c ff ff ff    	jbe    c0003510 <remove_chain+0x12>
c00035c4:	83 f8 ff             	cmp    eax,0xffffffff
c00035c7:	75 4e                	jne    c0003617 <remove_chain+0x119>
c00035c9:	b8 01 00 00 00       	mov    eax,0x1
c00035ce:	eb 6e                	jmp    c000363e <remove_chain+0x140>
c00035d0:	31 c9                	xor    ecx,ecx
c00035d2:	89 f2                	mov    edx,esi
c00035d4:	89 d8                	mov    eax,ebx
c00035d6:	e8 31 f8 ff ff       	call   c0002e0c <put_fat>
c00035db:	85 c0                	test   eax,eax
c00035dd:	74 82                	je     c0003561 <remove_chain+0x63>
c00035df:	eb 5d                	jmp    c000363e <remove_chain+0x140>
c00035e1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035e4:	75 1b                	jne    c0003601 <remove_chain+0x103>
c00035e6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035ea:	89 d8                	mov    eax,ebx
c00035ec:	83 ec 0c             	sub    esp,0xc
c00035ef:	6a 00                	push   0x0
c00035f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035f5:	e8 5d f7 ff ff       	call   c0002d57 <change_bitmap>
c00035fa:	83 c4 10             	add    esp,0x10
c00035fd:	85 c0                	test   eax,eax
c00035ff:	75 3d                	jne    c000363e <remove_chain+0x140>
c0003601:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003605:	e9 73 ff ff ff       	jmp    c000357d <remove_chain+0x7f>
c000360a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000360f:	75 8d                	jne    c000359e <remove_chain+0xa0>
c0003611:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003615:	eb 25                	jmp    c000363c <remove_chain+0x13e>
c0003617:	8d 53 01             	lea    edx,[ebx+0x1]
c000361a:	89 c3                	mov    ebx,eax
c000361c:	39 c2                	cmp    edx,eax
c000361e:	74 88                	je     c00035a8 <remove_chain+0xaa>
c0003620:	eb 1a                	jmp    c000363c <remove_chain+0x13e>
c0003622:	3c 03                	cmp    al,0x3
c0003624:	75 16                	jne    c000363c <remove_chain+0x13e>
c0003626:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003629:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000362d:	77 0d                	ja     c000363c <remove_chain+0x13e>
c000362f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003632:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003636:	72 04                	jb     c000363c <remove_chain+0x13e>
c0003638:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000363c:	31 c0                	xor    eax,eax
c000363e:	83 c4 1c             	add    esp,0x1c
c0003641:	5b                   	pop    ebx
c0003642:	5e                   	pop    esi
c0003643:	5f                   	pop    edi
c0003644:	5d                   	pop    ebp
c0003645:	c3                   	ret    

c0003646 <dir_clear>:
c0003646:	55                   	push   ebp
c0003647:	57                   	push   edi
c0003648:	56                   	push   esi
c0003649:	89 c6                	mov    esi,eax
c000364b:	53                   	push   ebx
c000364c:	83 ec 1c             	sub    esp,0x1c
c000364f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003653:	e8 9d ed ff ff       	call   c00023f5 <sync_window>
c0003658:	85 c0                	test   eax,eax
c000365a:	0f 85 de 00 00 00    	jne    c000373e <dir_clear+0xf8>
c0003660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003664:	89 f0                	mov    eax,esi
c0003666:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003669:	e8 d6 e8 ff ff       	call   c0001f44 <clst2sect>
c000366e:	b9 00 02 00 00       	mov    ecx,0x200
c0003673:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000367b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000367e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003681:	89 e8                	mov    eax,ebp
c0003683:	31 d2                	xor    edx,edx
c0003685:	e8 b5 e6 ff ff       	call   c0001d3f <mem_set>
c000368a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000368e:	c1 e3 09             	shl    ebx,0x9
c0003691:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003697:	76 1f                	jbe    c00036b8 <dir_clear+0x72>
c0003699:	bb 00 80 00 00       	mov    ebx,0x8000
c000369e:	eb 18                	jmp    c00036b8 <dir_clear+0x72>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	53                   	push   ebx
c00036a4:	e8 35 4e 00 00       	call   c00084de <ff_memalloc>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	89 c7                	mov    edi,eax
c00036ae:	85 c0                	test   eax,eax
c00036b0:	0f 85 8f 00 00 00    	jne    c0003745 <dir_clear+0xff>
c00036b6:	d1 eb                	shr    ebx,1
c00036b8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00036be:	77 e0                	ja     c00036a0 <dir_clear+0x5a>
c00036c0:	31 db                	xor    ebx,ebx
c00036c2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c6:	39 d8                	cmp    eax,ebx
c00036c8:	76 66                	jbe    c0003730 <dir_clear+0xea>
c00036ca:	83 ec 0c             	sub    esp,0xc
c00036cd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036d1:	6a 01                	push   0x1
c00036d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036db:	55                   	push   ebp
c00036dc:	50                   	push   eax
c00036dd:	e8 94 e5 ff ff       	call   c0001c76 <disk_write>
c00036e2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036e7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036ec:	83 c4 20             	add    esp,0x20
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 3d                	jne    c0003730 <dir_clear+0xea>
c00036f3:	43                   	inc    ebx
c00036f4:	eb cc                	jmp    c00036c2 <dir_clear+0x7c>
c00036f6:	83 ec 0c             	sub    esp,0xc
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	55                   	push   ebp
c00036fc:	89 d8                	mov    eax,ebx
c00036fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003702:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003706:	52                   	push   edx
c0003707:	50                   	push   eax
c0003708:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000370c:	57                   	push   edi
c000370d:	50                   	push   eax
c000370e:	e8 63 e5 ff ff       	call   c0001c76 <disk_write>
c0003713:	83 c4 20             	add    esp,0x20
c0003716:	85 c0                	test   eax,eax
c0003718:	75 0a                	jne    c0003724 <dir_clear+0xde>
c000371a:	01 eb                	add    ebx,ebp
c000371c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003720:	39 d8                	cmp    eax,ebx
c0003722:	77 d2                	ja     c00036f6 <dir_clear+0xb0>
c0003724:	83 ec 0c             	sub    esp,0xc
c0003727:	57                   	push   edi
c0003728:	e8 c7 4d 00 00       	call   c00084f4 <ff_memfree>
c000372d:	83 c4 10             	add    esp,0x10
c0003730:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003734:	39 d8                	cmp    eax,ebx
c0003736:	0f 95 c0             	setne  al
c0003739:	0f b6 c0             	movzx  eax,al
c000373c:	eb 19                	jmp    c0003757 <dir_clear+0x111>
c000373e:	b8 01 00 00 00       	mov    eax,0x1
c0003743:	eb 12                	jmp    c0003757 <dir_clear+0x111>
c0003745:	89 d9                	mov    ecx,ebx
c0003747:	31 d2                	xor    edx,edx
c0003749:	c1 eb 09             	shr    ebx,0x9
c000374c:	e8 ee e5 ff ff       	call   c0001d3f <mem_set>
c0003751:	89 dd                	mov    ebp,ebx
c0003753:	31 db                	xor    ebx,ebx
c0003755:	eb c5                	jmp    c000371c <dir_clear+0xd6>
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <dir_next>:
c000375f:	55                   	push   ebp
c0003760:	57                   	push   edi
c0003761:	56                   	push   esi
c0003762:	53                   	push   ebx
c0003763:	89 c3                	mov    ebx,eax
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000376e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003771:	8d 78 20             	lea    edi,[eax+0x20]
c0003774:	31 c0                	xor    eax,eax
c0003776:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000377a:	0f 94 c0             	sete   al
c000377d:	48                   	dec    eax
c000377e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003783:	05 00 00 00 10       	add    eax,0x10000000
c0003788:	39 f8                	cmp    eax,edi
c000378a:	77 0e                	ja     c000379a <dir_next+0x3b>
c000378c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003793:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000379a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a0:	b8 04 00 00 00       	mov    eax,0x4
c00037a5:	89 ce                	mov    esi,ecx
c00037a7:	09 d6                	or     esi,edx
c00037a9:	0f 84 da 00 00 00    	je     c0003889 <dir_next+0x12a>
c00037af:	89 f8                	mov    eax,edi
c00037b1:	25 ff 01 00 00       	and    eax,0x1ff
c00037b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037ba:	0f 85 b9 00 00 00    	jne    c0003879 <dir_next+0x11a>
c00037c0:	83 c2 01             	add    edx,0x1
c00037c3:	83 d1 00             	adc    ecx,0x0
c00037c6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037c9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037cf:	85 d2                	test   edx,edx
c00037d1:	75 29                	jne    c00037fc <dir_next+0x9d>
c00037d3:	89 fa                	mov    edx,edi
c00037d5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037d9:	c1 ea 05             	shr    edx,0x5
c00037dc:	39 c2                	cmp    edx,eax
c00037de:	0f 82 95 00 00 00    	jb     c0003879 <dir_next+0x11a>
c00037e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037f2:	b8 04 00 00 00       	mov    eax,0x4
c00037f7:	e9 8d 00 00 00       	jmp    c0003889 <dir_next+0x12a>
c00037fc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003800:	89 f9                	mov    ecx,edi
c0003802:	48                   	dec    eax
c0003803:	c1 e9 09             	shr    ecx,0x9
c0003806:	85 c8                	test   eax,ecx
c0003808:	75 6f                	jne    c0003879 <dir_next+0x11a>
c000380a:	89 d8                	mov    eax,ebx
c000380c:	e8 00 f8 ff ff       	call   c0003011 <get_fat>
c0003811:	89 c6                	mov    esi,eax
c0003813:	83 f8 01             	cmp    eax,0x1
c0003816:	77 07                	ja     c000381f <dir_next+0xc0>
c0003818:	b8 02 00 00 00       	mov    eax,0x2
c000381d:	eb 6a                	jmp    c0003889 <dir_next+0x12a>
c000381f:	83 f8 ff             	cmp    eax,0xffffffff
c0003822:	75 07                	jne    c000382b <dir_next+0xcc>
c0003824:	b8 01 00 00 00       	mov    eax,0x1
c0003829:	eb 5e                	jmp    c0003889 <dir_next+0x12a>
c000382b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000382e:	77 37                	ja     c0003867 <dir_next+0x108>
c0003830:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003835:	74 ad                	je     c00037e4 <dir_next+0x85>
c0003837:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 be fa ff ff       	call   c00032ff <create_chain>
c0003841:	89 c6                	mov    esi,eax
c0003843:	b8 07 00 00 00       	mov    eax,0x7
c0003848:	85 f6                	test   esi,esi
c000384a:	74 3d                	je     c0003889 <dir_next+0x12a>
c000384c:	83 fe 01             	cmp    esi,0x1
c000384f:	74 c7                	je     c0003818 <dir_next+0xb9>
c0003851:	83 fe ff             	cmp    esi,0xffffffff
c0003854:	74 ce                	je     c0003824 <dir_next+0xc5>
c0003856:	89 f2                	mov    edx,esi
c0003858:	89 e8                	mov    eax,ebp
c000385a:	e8 e7 fd ff ff       	call   c0003646 <dir_clear>
c000385f:	85 c0                	test   eax,eax
c0003861:	75 c1                	jne    c0003824 <dir_next+0xc5>
c0003863:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003867:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000386a:	89 f2                	mov    edx,esi
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 d1 e6 ff ff       	call   c0001f44 <clst2sect>
c0003873:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003876:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003880:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003884:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003887:	31 c0                	xor    eax,eax
c0003889:	83 c4 1c             	add    esp,0x1c
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <load_xdir>:
c0003891:	55                   	push   ebp
c0003892:	57                   	push   edi
c0003893:	56                   	push   esi
c0003894:	89 c6                	mov    esi,eax
c0003896:	53                   	push   ebx
c0003897:	83 ec 1c             	sub    esp,0x1c
c000389a:	8b 00                	mov    eax,DWORD PTR [eax]
c000389c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038a2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a5:	e8 df eb ff ff       	call   c0002489 <move_window>
c00038aa:	89 c3                	mov    ebx,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 0c 01 00 00    	jne    c00039c0 <load_xdir+0x12f>
c00038b4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00038ba:	0f 85 fb 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c00038c0:	89 f8                	mov    eax,edi
c00038c2:	b9 20 00 00 00       	mov    ecx,0x20
c00038c7:	e8 5e e4 ff ff       	call   c0001d2a <mem_cpy>
c00038cc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038d0:	40                   	inc    eax
c00038d1:	c1 e0 05             	shl    eax,0x5
c00038d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038d8:	83 e8 60             	sub    eax,0x60
c00038db:	3d 00 02 00 00       	cmp    eax,0x200
c00038e0:	0f 87 d5 00 00 00    	ja     c00039bb <load_xdir+0x12a>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	e8 70 fe ff ff       	call   c000375f <dir_next>
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 f8 04             	cmp    eax,0x4
c00038f4:	0f 84 c1 00 00 00    	je     c00039bb <load_xdir+0x12a>
c00038fa:	85 c0                	test   eax,eax
c00038fc:	0f 85 be 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003902:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003905:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003908:	8b 06                	mov    eax,DWORD PTR [esi]
c000390a:	e8 7a eb ff ff       	call   c0002489 <move_window>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 85 a7 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003919:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000391f:	0f 85 96 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c0003925:	8d 47 20             	lea    eax,[edi+0x20]
c0003928:	b9 20 00 00 00       	mov    ecx,0x20
c000392d:	e8 f8 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003932:	31 d2                	xor    edx,edx
c0003934:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003938:	b9 0f 00 00 00       	mov    ecx,0xf
c000393d:	83 c0 2c             	add    eax,0x2c
c0003940:	f7 f1                	div    ecx
c0003942:	c1 e0 05             	shl    eax,0x5
c0003945:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003949:	77 70                	ja     c00039bb <load_xdir+0x12a>
c000394b:	bd 40 00 00 00       	mov    ebp,0x40
c0003950:	31 d2                	xor    edx,edx
c0003952:	89 f0                	mov    eax,esi
c0003954:	e8 06 fe ff ff       	call   c000375f <dir_next>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	83 f8 04             	cmp    eax,0x4
c000395e:	74 5b                	je     c00039bb <load_xdir+0x12a>
c0003960:	85 c0                	test   eax,eax
c0003962:	75 5c                	jne    c00039c0 <load_xdir+0x12f>
c0003964:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003967:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000396a:	8b 06                	mov    eax,DWORD PTR [esi]
c000396c:	e8 18 eb ff ff       	call   c0002489 <move_window>
c0003971:	89 c3                	mov    ebx,eax
c0003973:	85 c0                	test   eax,eax
c0003975:	75 49                	jne    c00039c0 <load_xdir+0x12f>
c0003977:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000397a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000397d:	75 3c                	jne    c00039bb <load_xdir+0x12a>
c000397f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003985:	77 0d                	ja     c0003994 <load_xdir+0x103>
c0003987:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000398a:	b9 20 00 00 00       	mov    ecx,0x20
c000398f:	e8 96 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003994:	83 c5 20             	add    ebp,0x20
c0003997:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000399b:	77 b3                	ja     c0003950 <load_xdir+0xbf>
c000399d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00039a3:	77 1b                	ja     c00039c0 <load_xdir+0x12f>
c00039a5:	89 f8                	mov    eax,edi
c00039a7:	e8 cd e7 ff ff       	call   c0002179 <xdir_sum>
c00039ac:	89 c1                	mov    ecx,eax
c00039ae:	8d 47 02             	lea    eax,[edi+0x2]
c00039b1:	e8 f5 e2 ff ff       	call   c0001cab <ld_word>
c00039b6:	66 39 c1             	cmp    cx,ax
c00039b9:	74 05                	je     c00039c0 <load_xdir+0x12f>
c00039bb:	bb 02 00 00 00       	mov    ebx,0x2
c00039c0:	83 c4 1c             	add    esp,0x1c
c00039c3:	89 d8                	mov    eax,ebx
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <load_obj_xdir>:
c00039ca:	53                   	push   ebx
c00039cb:	89 c3                	mov    ebx,eax
c00039cd:	83 ec 08             	sub    esp,0x8
c00039d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d2:	89 03                	mov    DWORD PTR [ebx],eax
c00039d4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039dd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039ea:	30 c0                	xor    al,al
c00039ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039f3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039f6:	89 d8                	mov    eax,ebx
c00039f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039fb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039fe:	e8 04 f8 ff ff       	call   c0003207 <dir_sdi>
c0003a03:	85 c0                	test   eax,eax
c0003a05:	75 0b                	jne    c0003a12 <load_obj_xdir+0x48>
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	83 c4 08             	add    esp,0x8
c0003a0c:	5b                   	pop    ebx
c0003a0d:	e9 7f fe ff ff       	jmp    c0003891 <load_xdir>
c0003a12:	83 c4 08             	add    esp,0x8
c0003a15:	5b                   	pop    ebx
c0003a16:	c3                   	ret    

c0003a17 <dir_read>:
c0003a17:	55                   	push   ebp
c0003a18:	bd 04 00 00 00       	mov    ebp,0x4
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a24:	53                   	push   ebx
c0003a25:	89 c3                	mov    ebx,eax
c0003a27:	83 ec 1c             	sub    esp,0x1c
c0003a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a2e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a30:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a35:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a38:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3b:	89 c8                	mov    eax,ecx
c0003a3d:	09 d0                	or     eax,edx
c0003a3f:	0f 84 25 01 00 00    	je     c0003b6a <dir_read+0x153>
c0003a45:	89 f8                	mov    eax,edi
c0003a47:	e8 3d ea ff ff       	call   c0002489 <move_window>
c0003a4c:	89 c5                	mov    ebp,eax
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	0f 85 23 01 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a56:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a59:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a5b:	84 c9                	test   cl,cl
c0003a5d:	0f 84 11 01 00 00    	je     c0003b74 <dir_read+0x15d>
c0003a63:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a66:	75 48                	jne    c0003ab0 <dir_read+0x99>
c0003a68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a6d:	74 10                	je     c0003a7f <dir_read+0x68>
c0003a6f:	80 f9 83             	cmp    cl,0x83
c0003a72:	0f 85 dd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a78:	31 ed                	xor    ebp,ebp
c0003a7a:	e9 08 01 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003a7f:	80 f9 85             	cmp    cl,0x85
c0003a82:	0f 85 cd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a8b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a8e:	89 d8                	mov    eax,ebx
c0003a90:	e8 fc fd ff ff       	call   c0003891 <load_xdir>
c0003a95:	89 c5                	mov    ebp,eax
c0003a97:	85 c0                	test   eax,eax
c0003a99:	0f 85 da 00 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a9f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003aa2:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003aa5:	83 e0 3f             	and    eax,0x3f
c0003aa8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003aab:	e9 d7 00 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003ab0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003ab3:	83 e0 3f             	and    eax,0x3f
c0003ab6:	80 f9 2e             	cmp    cl,0x2e
c0003ab9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003abd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ac0:	0f 84 8a 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003ac6:	80 f9 e5             	cmp    cl,0xe5
c0003ac9:	0f 84 81 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ad3:	83 e0 1f             	and    eax,0x1f
c0003ad6:	83 f8 08             	cmp    eax,0x8
c0003ad9:	0f 94 c0             	sete   al
c0003adc:	0f b6 c0             	movzx  eax,al
c0003adf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003ae3:	75 6b                	jne    c0003b50 <dir_read+0x139>
c0003ae5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aea:	75 44                	jne    c0003b30 <dir_read+0x119>
c0003aec:	f6 c1 40             	test   cl,0x40
c0003aef:	74 12                	je     c0003b03 <dir_read+0xec>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	83 e1 bf             	and    ecx,0xffffffbf
c0003af7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003afb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003afe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003b01:	eb 06                	jmp    c0003b09 <dir_read+0xf2>
c0003b03:	89 f0                	mov    eax,esi
c0003b05:	38 c8                	cmp    al,cl
c0003b07:	75 47                	jne    c0003b50 <dir_read+0x139>
c0003b09:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b0d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b12:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003b15:	75 3e                	jne    c0003b55 <dir_read+0x13e>
c0003b17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b1b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b1e:	e8 8a e4 ff ff       	call   c0001fad <pick_lfn>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	74 2e                	je     c0003b55 <dir_read+0x13e>
c0003b27:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b2b:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b2e:	eb 25                	jmp    c0003b55 <dir_read+0x13e>
c0003b30:	89 f0                	mov    eax,esi
c0003b32:	84 c0                	test   al,al
c0003b34:	75 11                	jne    c0003b47 <dir_read+0x130>
c0003b36:	89 d0                	mov    eax,edx
c0003b38:	e8 2a e6 ff ff       	call   c0002167 <sum_sfn>
c0003b3d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b41:	0f 84 31 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b47:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b4e:	eb 37                	jmp    c0003b87 <dir_read+0x170>
c0003b50:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b55:	31 d2                	xor    edx,edx
c0003b57:	89 d8                	mov    eax,ebx
c0003b59:	e8 01 fc ff ff       	call   c000375f <dir_next>
c0003b5e:	89 c5                	mov    ebp,eax
c0003b60:	85 c0                	test   eax,eax
c0003b62:	0f 84 cd fe ff ff    	je     c0003a35 <dir_read+0x1e>
c0003b68:	eb 0f                	jmp    c0003b79 <dir_read+0x162>
c0003b6a:	85 ed                	test   ebp,ebp
c0003b6c:	0f 84 06 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b72:	eb 05                	jmp    c0003b79 <dir_read+0x162>
c0003b74:	bd 04 00 00 00       	mov    ebp,0x4
c0003b79:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b80:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b87:	83 c4 1c             	add    esp,0x1c
c0003b8a:	89 e8                	mov    eax,ebp
c0003b8c:	5b                   	pop    ebx
c0003b8d:	5e                   	pop    esi
c0003b8e:	5f                   	pop    edi
c0003b8f:	5d                   	pop    ebp
c0003b90:	c3                   	ret    

c0003b91 <dir_alloc>:
c0003b91:	55                   	push   ebp
c0003b92:	89 d5                	mov    ebp,edx
c0003b94:	57                   	push   edi
c0003b95:	31 d2                	xor    edx,edx
c0003b97:	56                   	push   esi
c0003b98:	53                   	push   ebx
c0003b99:	89 c3                	mov    ebx,eax
c0003b9b:	83 ec 0c             	sub    esp,0xc
c0003b9e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ba0:	e8 62 f6 ff ff       	call   c0003207 <dir_sdi>
c0003ba5:	85 c0                	test   eax,eax
c0003ba7:	75 4e                	jne    c0003bf7 <dir_alloc+0x66>
c0003ba9:	31 f6                	xor    esi,esi
c0003bab:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003bae:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 d1 e8 ff ff       	call   c0002489 <move_window>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	75 3b                	jne    c0003bf7 <dir_alloc+0x66>
c0003bbc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bbf:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003bc2:	8a 12                	mov    dl,BYTE PTR [edx]
c0003bc4:	75 07                	jne    c0003bcd <dir_alloc+0x3c>
c0003bc6:	f7 d2                	not    edx
c0003bc8:	c0 ea 07             	shr    dl,0x7
c0003bcb:	eb 0d                	jmp    c0003bda <dir_alloc+0x49>
c0003bcd:	84 d2                	test   dl,dl
c0003bcf:	0f 94 c1             	sete   cl
c0003bd2:	80 fa e5             	cmp    dl,0xe5
c0003bd5:	0f 94 c2             	sete   dl
c0003bd8:	09 ca                	or     edx,ecx
c0003bda:	84 d2                	test   dl,dl
c0003bdc:	74 07                	je     c0003be5 <dir_alloc+0x54>
c0003bde:	46                   	inc    esi
c0003bdf:	39 ee                	cmp    esi,ebp
c0003be1:	75 04                	jne    c0003be7 <dir_alloc+0x56>
c0003be3:	eb 1c                	jmp    c0003c01 <dir_alloc+0x70>
c0003be5:	31 f6                	xor    esi,esi
c0003be7:	ba 01 00 00 00       	mov    edx,0x1
c0003bec:	89 d8                	mov    eax,ebx
c0003bee:	e8 6c fb ff ff       	call   c000375f <dir_next>
c0003bf3:	85 c0                	test   eax,eax
c0003bf5:	74 b4                	je     c0003bab <dir_alloc+0x1a>
c0003bf7:	83 f8 04             	cmp    eax,0x4
c0003bfa:	75 05                	jne    c0003c01 <dir_alloc+0x70>
c0003bfc:	b8 07 00 00 00       	mov    eax,0x7
c0003c01:	83 c4 0c             	add    esp,0xc
c0003c04:	5b                   	pop    ebx
c0003c05:	5e                   	pop    esi
c0003c06:	5f                   	pop    edi
c0003c07:	5d                   	pop    ebp
c0003c08:	c3                   	ret    

c0003c09 <store_xdir>:
c0003c09:	55                   	push   ebp
c0003c0a:	57                   	push   edi
c0003c0b:	89 c7                	mov    edi,eax
c0003c0d:	56                   	push   esi
c0003c0e:	53                   	push   ebx
c0003c0f:	83 ec 0c             	sub    esp,0xc
c0003c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c14:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003c17:	89 e8                	mov    eax,ebp
c0003c19:	e8 5b e5 ff ff       	call   c0002179 <xdir_sum>
c0003c1e:	0f b7 d0             	movzx  edx,ax
c0003c21:	8d 45 02             	lea    eax,[ebp+0x2]
c0003c24:	e8 f4 e0 ff ff       	call   c0001d1d <st_word>
c0003c29:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c2d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c30:	89 f8                	mov    eax,edi
c0003c32:	e8 d0 f5 ff ff       	call   c0003207 <dir_sdi>
c0003c37:	89 c6                	mov    esi,eax
c0003c39:	85 f6                	test   esi,esi
c0003c3b:	75 3d                	jne    c0003c7a <store_xdir+0x71>
c0003c3d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c40:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c43:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c45:	e8 3f e8 ff ff       	call   c0002489 <move_window>
c0003c4a:	89 c6                	mov    esi,eax
c0003c4c:	85 c0                	test   eax,eax
c0003c4e:	75 2a                	jne    c0003c7a <store_xdir+0x71>
c0003c50:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c53:	b9 20 00 00 00       	mov    ecx,0x20
c0003c58:	89 ea                	mov    edx,ebp
c0003c5a:	e8 cb e0 ff ff       	call   c0001d2a <mem_cpy>
c0003c5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c61:	85 db                	test   ebx,ebx
c0003c63:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c67:	74 11                	je     c0003c7a <store_xdir+0x71>
c0003c69:	31 d2                	xor    edx,edx
c0003c6b:	89 f8                	mov    eax,edi
c0003c6d:	83 c5 20             	add    ebp,0x20
c0003c70:	e8 ea fa ff ff       	call   c000375f <dir_next>
c0003c75:	4b                   	dec    ebx
c0003c76:	89 c6                	mov    esi,eax
c0003c78:	eb bf                	jmp    c0003c39 <store_xdir+0x30>
c0003c7a:	89 f0                	mov    eax,esi
c0003c7c:	83 fe 02             	cmp    esi,0x2
c0003c7f:	76 05                	jbe    c0003c86 <store_xdir+0x7d>
c0003c81:	b8 02 00 00 00       	mov    eax,0x2
c0003c86:	83 c4 0c             	add    esp,0xc
c0003c89:	5b                   	pop    ebx
c0003c8a:	5e                   	pop    esi
c0003c8b:	5f                   	pop    edi
c0003c8c:	5d                   	pop    ebp
c0003c8d:	c3                   	ret    

c0003c8e <dir_remove>:
c0003c8e:	57                   	push   edi
c0003c8f:	56                   	push   esi
c0003c90:	53                   	push   ebx
c0003c91:	89 c3                	mov    ebx,eax
c0003c93:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c96:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c98:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c9b:	83 fa ff             	cmp    edx,0xffffffff
c0003c9e:	74 09                	je     c0003ca9 <dir_remove+0x1b>
c0003ca0:	e8 62 f5 ff ff       	call   c0003207 <dir_sdi>
c0003ca5:	85 c0                	test   eax,eax
c0003ca7:	75 41                	jne    c0003cea <dir_remove+0x5c>
c0003ca9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003cac:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003caf:	89 f0                	mov    eax,esi
c0003cb1:	e8 d3 e7 ff ff       	call   c0002489 <move_window>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	75 26                	jne    c0003ce0 <dir_remove+0x52>
c0003cba:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003cbd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003cc0:	75 05                	jne    c0003cc7 <dir_remove+0x39>
c0003cc2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003cc5:	eb 03                	jmp    c0003cca <dir_remove+0x3c>
c0003cc7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003cca:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003cce:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cd1:	73 17                	jae    c0003cea <dir_remove+0x5c>
c0003cd3:	31 d2                	xor    edx,edx
c0003cd5:	89 d8                	mov    eax,ebx
c0003cd7:	e8 83 fa ff ff       	call   c000375f <dir_next>
c0003cdc:	85 c0                	test   eax,eax
c0003cde:	74 c9                	je     c0003ca9 <dir_remove+0x1b>
c0003ce0:	83 f8 04             	cmp    eax,0x4
c0003ce3:	75 05                	jne    c0003cea <dir_remove+0x5c>
c0003ce5:	b8 02 00 00 00       	mov    eax,0x2
c0003cea:	5b                   	pop    ebx
c0003ceb:	5e                   	pop    esi
c0003cec:	5f                   	pop    edi
c0003ced:	c3                   	ret    

c0003cee <create_name>:
c0003cee:	55                   	push   ebp
c0003cef:	89 d5                	mov    ebp,edx
c0003cf1:	57                   	push   edi
c0003cf2:	89 c7                	mov    edi,eax
c0003cf4:	56                   	push   esi
c0003cf5:	31 f6                	xor    esi,esi
c0003cf7:	53                   	push   ebx
c0003cf8:	83 ec 3c             	sub    esp,0x3c
c0003cfb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003d03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003d06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003d0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003d0e:	e8 72 e0 ff ff       	call   c0001d85 <tchar2uni>
c0003d13:	89 c3                	mov    ebx,eax
c0003d15:	83 f8 ff             	cmp    eax,0xffffffff
c0003d18:	75 0a                	jne    c0003d24 <create_name+0x36>
c0003d1a:	b8 06 00 00 00       	mov    eax,0x6
c0003d1f:	e9 9e 02 00 00       	jmp    c0003fc2 <create_name+0x2d4>
c0003d24:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d29:	76 0c                	jbe    c0003d37 <create_name+0x49>
c0003d2b:	c1 e8 10             	shr    eax,0x10
c0003d2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d32:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d36:	46                   	inc    esi
c0003d37:	66 83 fb 1f          	cmp    bx,0x1f
c0003d3b:	76 4f                	jbe    c0003d8c <create_name+0x9e>
c0003d3d:	66 83 fb 5c          	cmp    bx,0x5c
c0003d41:	74 35                	je     c0003d78 <create_name+0x8a>
c0003d43:	66 83 fb 2f          	cmp    bx,0x2f
c0003d47:	74 2f                	je     c0003d78 <create_name+0x8a>
c0003d49:	66 83 fb 7f          	cmp    bx,0x7f
c0003d4d:	77 11                	ja     c0003d60 <create_name+0x72>
c0003d4f:	0f b7 d3             	movzx  edx,bx
c0003d52:	b8 32 f7 01 c0       	mov    eax,0xc001f732
c0003d57:	e8 11 e0 ff ff       	call   c0001d6d <chk_chr>
c0003d5c:	85 c0                	test   eax,eax
c0003d5e:	75 ba                	jne    c0003d1a <create_name+0x2c>
c0003d60:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d66:	77 b2                	ja     c0003d1a <create_name+0x2c>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d70:	46                   	inc    esi
c0003d71:	eb 97                	jmp    c0003d0a <create_name+0x1c>
c0003d73:	40                   	inc    eax
c0003d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d7c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d7e:	80 fa 2f             	cmp    dl,0x2f
c0003d81:	74 f0                	je     c0003d73 <create_name+0x85>
c0003d83:	80 fa 5c             	cmp    dl,0x5c
c0003d86:	74 eb                	je     c0003d73 <create_name+0x85>
c0003d88:	31 db                	xor    ebx,ebx
c0003d8a:	eb 02                	jmp    c0003d8e <create_name+0xa0>
c0003d8c:	b3 04                	mov    bl,0x4
c0003d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d92:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d95:	85 f6                	test   esi,esi
c0003d97:	74 18                	je     c0003db1 <create_name+0xc3>
c0003d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d9d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003da2:	66 83 f8 20          	cmp    ax,0x20
c0003da6:	74 06                	je     c0003dae <create_name+0xc0>
c0003da8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dac:	75 03                	jne    c0003db1 <create_name+0xc3>
c0003dae:	4e                   	dec    esi
c0003daf:	eb e4                	jmp    c0003d95 <create_name+0xa7>
c0003db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db5:	31 ed                	xor    ebp,ebp
c0003db7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003dbd:	85 f6                	test   esi,esi
c0003dbf:	0f 84 55 ff ff ff    	je     c0003d1a <create_name+0x2c>
c0003dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003dcc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003dd0:	66 83 f8 20          	cmp    ax,0x20
c0003dd4:	75 04                	jne    c0003dda <create_name+0xec>
c0003dd6:	89 d5                	mov    ebp,edx
c0003dd8:	eb eb                	jmp    c0003dc5 <create_name+0xd7>
c0003dda:	85 ed                	test   ebp,ebp
c0003ddc:	75 06                	jne    c0003de4 <create_name+0xf6>
c0003dde:	66 83 f8 2e          	cmp    ax,0x2e
c0003de2:	75 08                	jne    c0003dec <create_name+0xfe>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	eb 03                	jmp    c0003dec <create_name+0xfe>
c0003de9:	4e                   	dec    esi
c0003dea:	74 0c                	je     c0003df8 <create_name+0x10a>
c0003dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003df0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003df6:	75 f1                	jne    c0003de9 <create_name+0xfb>
c0003df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003e00:	ba 20 00 00 00       	mov    edx,0x20
c0003e05:	e8 35 df ff ff       	call   c0001d3f <mem_set>
c0003e0a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003e12:	31 c9                	xor    ecx,ecx
c0003e14:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0003e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003e24:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e28:	66 85 ed             	test   bp,bp
c0003e2b:	0f 84 30 01 00 00    	je     c0003f61 <create_name+0x273>
c0003e31:	66 83 fd 20          	cmp    bp,0x20
c0003e35:	74 10                	je     c0003e47 <create_name+0x159>
c0003e37:	66 83 fd 2e          	cmp    bp,0x2e
c0003e3b:	75 13                	jne    c0003e50 <create_name+0x162>
c0003e3d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e41:	0f 84 6b 01 00 00    	je     c0003fb2 <create_name+0x2c4>
c0003e47:	83 cb 03             	or     ebx,0x3
c0003e4a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e4e:	eb c9                	jmp    c0003e19 <create_name+0x12b>
c0003e50:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e54:	73 0b                	jae    c0003e61 <create_name+0x173>
c0003e56:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5a:	75 47                	jne    c0003ea3 <create_name+0x1b5>
c0003e5c:	e9 51 01 00 00       	jmp    c0003fb2 <create_name+0x2c4>
c0003e61:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e66:	75 10                	jne    c0003e78 <create_name+0x18a>
c0003e68:	83 cb 03             	or     ebx,0x3
c0003e6b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e73:	e9 e9 00 00 00       	jmp    c0003f61 <create_name+0x273>
c0003e78:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e7c:	74 0d                	je     c0003e8b <create_name+0x19d>
c0003e7e:	83 cb 03             	or     ebx,0x3
c0003e81:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e85:	0f 87 d6 00 00 00    	ja     c0003f61 <create_name+0x273>
c0003e8b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e90:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e94:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e9c:	b9 08 00 00 00       	mov    ecx,0x8
c0003ea1:	eb a7                	jmp    c0003e4a <create_name+0x15c>
c0003ea3:	66 83 fd 7f          	cmp    bp,0x7f
c0003ea7:	76 68                	jbe    c0003f11 <create_name+0x223>
c0003ea9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003ead:	88 da                	mov    dl,bl
c0003eaf:	83 ca 02             	or     edx,0x2
c0003eb2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003eb6:	50                   	push   eax
c0003eb7:	50                   	push   eax
c0003eb8:	68 b5 01 00 00       	push   0x1b5
c0003ebd:	55                   	push   ebp
c0003ebe:	e8 48 46 00 00       	call   c000850b <ff_uni2oem>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	89 c5                	mov    ebp,eax
c0003ec8:	a8 80                	test   al,0x80
c0003eca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ece:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ed2:	74 0c                	je     c0003ee0 <create_name+0x1f2>
c0003ed4:	83 e5 7f             	and    ebp,0x7f
c0003ed7:	0f b6 ad 80 f6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0980]
c0003ede:	eb 2a                	jmp    c0003f0a <create_name+0x21c>
c0003ee0:	66 3d ff 00          	cmp    ax,0xff
c0003ee4:	76 24                	jbe    c0003f0a <create_name+0x21c>
c0003ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eea:	48                   	dec    eax
c0003eeb:	39 c8                	cmp    eax,ecx
c0003eed:	77 0c                	ja     c0003efb <create_name+0x20d>
c0003eef:	83 cb 03             	or     ebx,0x3
c0003ef2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef6:	e9 4f ff ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003efb:	89 e8                	mov    eax,ebp
c0003efd:	88 d3                	mov    bl,dl
c0003eff:	66 c1 e8 08          	shr    ax,0x8
c0003f03:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f07:	41                   	inc    ecx
c0003f08:	eb 4b                	jmp    c0003f55 <create_name+0x267>
c0003f0a:	88 d3                	mov    bl,dl
c0003f0c:	66 85 ed             	test   bp,bp
c0003f0f:	74 19                	je     c0003f2a <create_name+0x23c>
c0003f11:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003f15:	0f b7 d5             	movzx  edx,bp
c0003f18:	b8 3b f7 01 c0       	mov    eax,0xc001f73b
c0003f1d:	e8 4b de ff ff       	call   c0001d6d <chk_chr>
c0003f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f26:	85 c0                	test   eax,eax
c0003f28:	74 0a                	je     c0003f34 <create_name+0x246>
c0003f2a:	83 cb 03             	or     ebx,0x3
c0003f2d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f32:	eb 21                	jmp    c0003f55 <create_name+0x267>
c0003f34:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f37:	66 83 f8 19          	cmp    ax,0x19
c0003f3b:	77 07                	ja     c0003f44 <create_name+0x256>
c0003f3d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f42:	eb 11                	jmp    c0003f55 <create_name+0x267>
c0003f44:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f47:	66 83 f8 19          	cmp    ax,0x19
c0003f4b:	77 08                	ja     c0003f55 <create_name+0x267>
c0003f4d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f52:	83 ed 20             	sub    ebp,0x20
c0003f55:	89 e8                	mov    eax,ebp
c0003f57:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f5b:	41                   	inc    ecx
c0003f5c:	e9 e9 fe ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003f61:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f65:	75 04                	jne    c0003f6b <create_name+0x27d>
c0003f67:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f6b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f70:	75 05                	jne    c0003f77 <create_name+0x289>
c0003f72:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f77:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f7b:	83 e0 0c             	and    eax,0xc
c0003f7e:	3c 0c                	cmp    al,0xc
c0003f80:	74 0b                	je     c0003f8d <create_name+0x29f>
c0003f82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f86:	83 e0 03             	and    eax,0x3
c0003f89:	3c 03                	cmp    al,0x3
c0003f8b:	75 05                	jne    c0003f92 <create_name+0x2a4>
c0003f8d:	83 cb 02             	or     ebx,0x2
c0003f90:	eb 19                	jmp    c0003fab <create_name+0x2bd>
c0003f92:	f6 c3 02             	test   bl,0x2
c0003f95:	75 14                	jne    c0003fab <create_name+0x2bd>
c0003f97:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f9c:	74 03                	je     c0003fa1 <create_name+0x2b3>
c0003f9e:	83 cb 10             	or     ebx,0x10
c0003fa1:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003fa6:	74 03                	je     c0003fab <create_name+0x2bd>
c0003fa8:	83 cb 08             	or     ebx,0x8
c0003fab:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003fae:	31 c0                	xor    eax,eax
c0003fb0:	eb 10                	jmp    c0003fc2 <create_name+0x2d4>
c0003fb2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003fb7:	0f 85 ce fe ff ff    	jne    c0003e8b <create_name+0x19d>
c0003fbd:	e9 a6 fe ff ff       	jmp    c0003e68 <create_name+0x17a>
c0003fc2:	83 c4 3c             	add    esp,0x3c
c0003fc5:	5b                   	pop    ebx
c0003fc6:	5e                   	pop    esi
c0003fc7:	5f                   	pop    edi
c0003fc8:	5d                   	pop    ebp
c0003fc9:	c3                   	ret    

c0003fca <xname_sum>:
c0003fca:	56                   	push   esi
c0003fcb:	53                   	push   ebx
c0003fcc:	89 c6                	mov    esi,eax
c0003fce:	51                   	push   ecx
c0003fcf:	31 db                	xor    ebx,ebx
c0003fd1:	83 c6 02             	add    esi,0x2
c0003fd4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fd8:	66 85 c0             	test   ax,ax
c0003fdb:	74 1f                	je     c0003ffc <xname_sum+0x32>
c0003fdd:	83 ec 0c             	sub    esp,0xc
c0003fe0:	66 d1 cb             	ror    bx,1
c0003fe3:	50                   	push   eax
c0003fe4:	e8 1e 46 00 00       	call   c0008607 <ff_wtoupper>
c0003fe9:	83 c4 10             	add    esp,0x10
c0003fec:	0f b6 d0             	movzx  edx,al
c0003fef:	66 c1 e8 08          	shr    ax,0x8
c0003ff3:	01 d3                	add    ebx,edx
c0003ff5:	66 d1 cb             	ror    bx,1
c0003ff8:	01 c3                	add    ebx,eax
c0003ffa:	eb d5                	jmp    c0003fd1 <xname_sum+0x7>
c0003ffc:	89 d8                	mov    eax,ebx
c0003ffe:	5a                   	pop    edx
c0003fff:	5b                   	pop    ebx
c0004000:	5e                   	pop    esi
c0004001:	c3                   	ret    

c0004002 <create_xdir>:
c0004002:	55                   	push   ebp
c0004003:	b9 40 00 00 00       	mov    ecx,0x40
c0004008:	57                   	push   edi
c0004009:	bd 01 00 00 00       	mov    ebp,0x1
c000400e:	56                   	push   esi
c000400f:	31 ff                	xor    edi,edi
c0004011:	53                   	push   ebx
c0004012:	be 40 00 00 00       	mov    esi,0x40
c0004017:	89 c3                	mov    ebx,eax
c0004019:	83 ec 1c             	sub    esp,0x1c
c000401c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0004020:	31 d2                	xor    edx,edx
c0004022:	e8 18 dd ff ff       	call   c0001d3f <mem_set>
c0004027:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c000402a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c000402e:	31 c9                	xor    ecx,ecx
c0004030:	8d 46 01             	lea    eax,[esi+0x1]
c0004033:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004037:	83 c6 02             	add    esi,0x2
c000403a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000403e:	66 85 ed             	test   bp,bp
c0004041:	74 12                	je     c0004055 <create_xdir+0x53>
c0004043:	0f b6 c1             	movzx  eax,cl
c0004046:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000404e:	66 83 fd 01          	cmp    bp,0x1
c0004052:	80 d9 ff             	sbb    cl,0xff
c0004055:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004058:	0f b7 d5             	movzx  edx,bp
c000405b:	83 c6 02             	add    esi,0x2
c000405e:	e8 ba dc ff ff       	call   c0001d1d <st_word>
c0004063:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004069:	75 d3                	jne    c000403e <create_xdir+0x3c>
c000406b:	8d 47 01             	lea    eax,[edi+0x1]
c000406e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004072:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004076:	0f b6 c1             	movzx  eax,cl
c0004079:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000407e:	74 07                	je     c0004087 <create_xdir+0x85>
c0004080:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004085:	eb a9                	jmp    c0004030 <create_xdir+0x2e>
c0004087:	8d 47 02             	lea    eax,[edi+0x2]
c000408a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000408d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004090:	89 d0                	mov    eax,edx
c0004092:	e8 33 ff ff ff       	call   c0003fca <xname_sum>
c0004097:	83 c4 1c             	add    esp,0x1c
c000409a:	0f b7 d0             	movzx  edx,ax
c000409d:	8d 43 24             	lea    eax,[ebx+0x24]
c00040a0:	5b                   	pop    ebx
c00040a1:	5e                   	pop    esi
c00040a2:	5f                   	pop    edi
c00040a3:	5d                   	pop    ebp
c00040a4:	e9 74 dc ff ff       	jmp    c0001d1d <st_word>

c00040a9 <cmp_lfn>:
c00040a9:	55                   	push   ebp
c00040aa:	57                   	push   edi
c00040ab:	89 d7                	mov    edi,edx
c00040ad:	56                   	push   esi
c00040ae:	53                   	push   ebx
c00040af:	83 ec 1c             	sub    esp,0x1c
c00040b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00040b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00040b9:	e8 ed db ff ff       	call   c0001cab <ld_word>
c00040be:	66 85 c0             	test   ax,ax
c00040c1:	74 07                	je     c00040ca <cmp_lfn+0x21>
c00040c3:	31 c0                	xor    eax,eax
c00040c5:	e9 9a 00 00 00       	jmp    c0004164 <cmp_lfn+0xbb>
c00040ca:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040cc:	bd 01 00 00 00       	mov    ebp,0x1
c00040d1:	83 e3 3f             	and    ebx,0x3f
c00040d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040dc:	4b                   	dec    ebx
c00040dd:	6b db 0d             	imul   ebx,ebx,0xd
c00040e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040e4:	0f b6 80 00 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0900]
c00040eb:	01 f8                	add    eax,edi
c00040ed:	e8 b9 db ff ff       	call   c0001cab <ld_word>
c00040f2:	66 85 ed             	test   bp,bp
c00040f5:	89 c6                	mov    esi,eax
c00040f7:	74 3c                	je     c0004135 <cmp_lfn+0x8c>
c00040f9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040ff:	77 c2                	ja     c00040c3 <cmp_lfn+0x1a>
c0004101:	83 ec 0c             	sub    esp,0xc
c0004104:	0f b7 c0             	movzx  eax,ax
c0004107:	50                   	push   eax
c0004108:	e8 fa 44 00 00       	call   c0008607 <ff_wtoupper>
c000410d:	89 c5                	mov    ebp,eax
c000410f:	8d 43 01             	lea    eax,[ebx+0x1]
c0004112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000411a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000411e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004121:	e8 e1 44 00 00       	call   c0008607 <ff_wtoupper>
c0004126:	83 c4 10             	add    esp,0x10
c0004129:	39 c5                	cmp    ebp,eax
c000412b:	75 96                	jne    c00040c3 <cmp_lfn+0x1a>
c000412d:	89 f5                	mov    ebp,esi
c000412f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004133:	eb 04                	jmp    c0004139 <cmp_lfn+0x90>
c0004135:	66 46                	inc    si
c0004137:	75 8a                	jne    c00040c3 <cmp_lfn+0x1a>
c0004139:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c000413d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004142:	75 9c                	jne    c00040e0 <cmp_lfn+0x37>
c0004144:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004147:	74 16                	je     c000415f <cmp_lfn+0xb6>
c0004149:	66 85 ed             	test   bp,bp
c000414c:	74 11                	je     c000415f <cmp_lfn+0xb6>
c000414e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004152:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004157:	0f 94 c0             	sete   al
c000415a:	0f b6 c0             	movzx  eax,al
c000415d:	eb 05                	jmp    c0004164 <cmp_lfn+0xbb>
c000415f:	b8 01 00 00 00       	mov    eax,0x1
c0004164:	83 c4 1c             	add    esp,0x1c
c0004167:	5b                   	pop    ebx
c0004168:	5e                   	pop    esi
c0004169:	5f                   	pop    edi
c000416a:	5d                   	pop    ebp
c000416b:	c3                   	ret    

c000416c <dir_find>:
c000416c:	55                   	push   ebp
c000416d:	31 d2                	xor    edx,edx
c000416f:	57                   	push   edi
c0004170:	56                   	push   esi
c0004171:	53                   	push   ebx
c0004172:	89 c3                	mov    ebx,eax
c0004174:	83 ec 1c             	sub    esp,0x1c
c0004177:	8b 30                	mov    esi,DWORD PTR [eax]
c0004179:	e8 89 f0 ff ff       	call   c0003207 <dir_sdi>
c000417e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004181:	85 c0                	test   eax,eax
c0004183:	0f 85 9e 01 00 00    	jne    c0004327 <dir_find+0x1bb>
c0004189:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000418c:	0f 85 8d 00 00 00    	jne    c000421f <dir_find+0xb3>
c0004192:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004195:	e8 30 fe ff ff       	call   c0003fca <xname_sum>
c000419a:	89 c7                	mov    edi,eax
c000419c:	31 d2                	xor    edx,edx
c000419e:	89 d8                	mov    eax,ebx
c00041a0:	e8 72 f8 ff ff       	call   c0003a17 <dir_read>
c00041a5:	85 c0                	test   eax,eax
c00041a7:	0f 85 5e 01 00 00    	jne    c000430b <dir_find+0x19f>
c00041ad:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00041b0:	8d 41 24             	lea    eax,[ecx+0x24]
c00041b3:	e8 f3 da ff ff       	call   c0001cab <ld_word>
c00041b8:	66 39 f8             	cmp    ax,di
c00041bb:	75 df                	jne    c000419c <dir_find+0x30>
c00041bd:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c00041c0:	31 ed                	xor    ebp,ebp
c00041c2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041c6:	ba 40 00 00 00       	mov    edx,0x40
c00041cb:	89 e9                	mov    ecx,ebp
c00041cd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041d1:	0f 84 42 01 00 00    	je     c0004319 <dir_find+0x1ad>
c00041d7:	f6 c2 1f             	test   dl,0x1f
c00041da:	75 03                	jne    c00041df <dir_find+0x73>
c00041dc:	83 c2 02             	add    edx,0x2
c00041df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041e3:	89 d0                	mov    eax,edx
c00041e5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041e8:	e8 be da ff ff       	call   c0001cab <ld_word>
c00041ed:	83 ec 0c             	sub    esp,0xc
c00041f0:	0f b7 c0             	movzx  eax,ax
c00041f3:	50                   	push   eax
c00041f4:	e8 0e 44 00 00       	call   c0008607 <ff_wtoupper>
c00041f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041fd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004200:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004204:	89 04 24             	mov    DWORD PTR [esp],eax
c0004207:	e8 fb 43 00 00       	call   c0008607 <ff_wtoupper>
c000420c:	83 c4 10             	add    esp,0x10
c000420f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0004213:	75 87                	jne    c000419c <dir_find+0x30>
c0004215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004219:	45                   	inc    ebp
c000421a:	83 c2 02             	add    edx,0x2
c000421d:	eb ac                	jmp    c00041cb <dir_find+0x5f>
c000421f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004226:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c000422b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004230:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004233:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004236:	89 f0                	mov    eax,esi
c0004238:	e8 4c e2 ff ff       	call   c0002489 <move_window>
c000423d:	85 c0                	test   eax,eax
c000423f:	0f 85 c6 00 00 00    	jne    c000430b <dir_find+0x19f>
c0004245:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004248:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000424b:	84 c9                	test   cl,cl
c000424d:	0f 84 bd 00 00 00    	je     c0004310 <dir_find+0x1a4>
c0004253:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004256:	88 d0                	mov    al,dl
c0004258:	83 e0 3f             	and    eax,0x3f
c000425b:	80 f9 e5             	cmp    cl,0xe5
c000425e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004261:	0f 84 87 00 00 00    	je     c00042ee <dir_find+0x182>
c0004267:	80 e2 08             	and    dl,0x8
c000426a:	74 06                	je     c0004272 <dir_find+0x106>
c000426c:	3c 0f                	cmp    al,0xf
c000426e:	75 7e                	jne    c00042ee <dir_find+0x182>
c0004270:	eb 04                	jmp    c0004276 <dir_find+0x10a>
c0004272:	3c 0f                	cmp    al,0xf
c0004274:	75 4c                	jne    c00042c2 <dir_find+0x156>
c0004276:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000427a:	75 7e                	jne    c00042fa <dir_find+0x18e>
c000427c:	f6 c1 40             	test   cl,0x40
c000427f:	74 12                	je     c0004293 <dir_find+0x127>
c0004281:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004284:	83 e1 bf             	and    ecx,0xffffffbf
c0004287:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000428b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000428e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004291:	eb 06                	jmp    c0004299 <dir_find+0x12d>
c0004293:	89 f8                	mov    eax,edi
c0004295:	38 c8                	cmp    al,cl
c0004297:	75 5c                	jne    c00042f5 <dir_find+0x189>
c0004299:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000429d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042a2:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00042a5:	75 53                	jne    c00042fa <dir_find+0x18e>
c00042a7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00042ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042ae:	89 ea                	mov    edx,ebp
c00042b0:	e8 f4 fd ff ff       	call   c00040a9 <cmp_lfn>
c00042b5:	85 c0                	test   eax,eax
c00042b7:	74 41                	je     c00042fa <dir_find+0x18e>
c00042b9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c00042bd:	8d 79 ff             	lea    edi,[ecx-0x1]
c00042c0:	eb 38                	jmp    c00042fa <dir_find+0x18e>
c00042c2:	89 f8                	mov    eax,edi
c00042c4:	84 c0                	test   al,al
c00042c6:	75 0d                	jne    c00042d5 <dir_find+0x169>
c00042c8:	89 e8                	mov    eax,ebp
c00042ca:	e8 98 de ff ff       	call   c0002167 <sum_sfn>
c00042cf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042d3:	74 52                	je     c0004327 <dir_find+0x1bb>
c00042d5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042d9:	75 13                	jne    c00042ee <dir_find+0x182>
c00042db:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042de:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e3:	89 e8                	mov    eax,ebp
c00042e5:	e8 60 da ff ff       	call   c0001d4a <mem_cmp>
c00042ea:	85 c0                	test   eax,eax
c00042ec:	74 39                	je     c0004327 <dir_find+0x1bb>
c00042ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042fa:	31 d2                	xor    edx,edx
c00042fc:	89 d8                	mov    eax,ebx
c00042fe:	e8 5c f4 ff ff       	call   c000375f <dir_next>
c0004303:	85 c0                	test   eax,eax
c0004305:	0f 84 25 ff ff ff    	je     c0004230 <dir_find+0xc4>
c000430b:	89 04 24             	mov    DWORD PTR [esp],eax
c000430e:	eb 17                	jmp    c0004327 <dir_find+0x1bb>
c0004310:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004317:	eb 0e                	jmp    c0004327 <dir_find+0x1bb>
c0004319:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000431c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004321:	0f 85 75 fe ff ff    	jne    c000419c <dir_find+0x30>
c0004327:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000432a:	83 c4 1c             	add    esp,0x1c
c000432d:	5b                   	pop    ebx
c000432e:	5e                   	pop    esi
c000432f:	5f                   	pop    edi
c0004330:	5d                   	pop    ebp
c0004331:	c3                   	ret    

c0004332 <dir_register>:
c0004332:	55                   	push   ebp
c0004333:	57                   	push   edi
c0004334:	56                   	push   esi
c0004335:	be 06 00 00 00       	mov    esi,0x6
c000433a:	53                   	push   ebx
c000433b:	83 ec 6c             	sub    esp,0x6c
c000433e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004342:	0f 85 62 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004348:	8b 28                	mov    ebp,DWORD PTR [eax]
c000434a:	31 ff                	xor    edi,edi
c000434c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000434f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004354:	74 03                	je     c0004359 <dir_register+0x27>
c0004356:	47                   	inc    edi
c0004357:	eb f6                	jmp    c000434f <dir_register+0x1d>
c0004359:	89 c3                	mov    ebx,eax
c000435b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000435f:	0f 85 e1 00 00 00    	jne    c0004446 <dir_register+0x114>
c0004365:	83 c7 0e             	add    edi,0xe
c0004368:	b9 0f 00 00 00       	mov    ecx,0xf
c000436d:	89 f8                	mov    eax,edi
c000436f:	31 d2                	xor    edx,edx
c0004371:	f7 f1                	div    ecx
c0004373:	8d 50 02             	lea    edx,[eax+0x2]
c0004376:	89 c7                	mov    edi,eax
c0004378:	89 d8                	mov    eax,ebx
c000437a:	e8 12 f8 ff ff       	call   c0003b91 <dir_alloc>
c000437f:	89 c6                	mov    esi,eax
c0004381:	85 c0                	test   eax,eax
c0004383:	0f 85 21 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004389:	81 c7 01 00 00 08    	add    edi,0x8000001
c000438f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004392:	c1 e7 05             	shl    edi,0x5
c0004395:	29 f8                	sub    eax,edi
c0004397:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000439a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000439d:	a8 04                	test   al,0x4
c000439f:	0f 84 91 00 00 00    	je     c0004436 <dir_register+0x104>
c00043a5:	83 e0 fb             	and    eax,0xfffffffb
c00043a8:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 25 ec ff ff       	call   c0002fd7 <fill_first_frag>
c00043b2:	85 c0                	test   eax,eax
c00043b4:	0f 85 ee 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043ba:	83 c9 ff             	or     ecx,0xffffffff
c00043bd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00043c0:	89 d8                	mov    eax,ebx
c00043c2:	e8 db eb ff ff       	call   c0002fa2 <fill_last_frag>
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 85 d9 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043cf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043d3:	74 61                	je     c0004436 <dir_register+0x104>
c00043d5:	89 da                	mov    edx,ebx
c00043d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043db:	e8 ea f5 ff ff       	call   c00039ca <load_obj_xdir>
c00043e0:	85 c0                	test   eax,eax
c00043e2:	0f 85 c0 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043e8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043ec:	31 c9                	xor    ecx,ecx
c00043ee:	c1 e2 09             	shl    edx,0x9
c00043f1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043f4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043f7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043fa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004400:	83 c0 38             	add    eax,0x38
c0004403:	e8 1c d9 ff ff       	call   c0001d24 <st_qword>
c0004408:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000440b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000440e:	83 c0 28             	add    eax,0x28
c0004411:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004414:	e8 0b d9 ff ff       	call   c0001d24 <st_qword>
c0004419:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000441c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000441f:	83 c8 01             	or     eax,0x1
c0004422:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004425:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004429:	e8 db f7 ff ff       	call   c0003c09 <store_xdir>
c000442e:	85 c0                	test   eax,eax
c0004430:	0f 85 72 01 00 00    	jne    c00045a8 <dir_register+0x276>
c0004436:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000443c:	e8 c1 fb ff ff       	call   c0004002 <create_xdir>
c0004441:	e9 64 01 00 00       	jmp    c00045aa <dir_register+0x278>
c0004446:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004449:	b9 0c 00 00 00       	mov    ecx,0xc
c000444e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004452:	89 c2                	mov    edx,eax
c0004454:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004458:	e8 cd d8 ff ff       	call   c0001d2a <mem_cpy>
c000445d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004462:	74 58                	je     c00044bc <dir_register+0x18a>
c0004464:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004468:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004470:	83 ec 0c             	sub    esp,0xc
c0004473:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000447a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000447e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004482:	e8 24 dc ff ff       	call   c00020ab <gen_numname>
c0004487:	89 d8                	mov    eax,ebx
c0004489:	e8 de fc ff ff       	call   c000416c <dir_find>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	89 c6                	mov    esi,eax
c0004493:	85 c0                	test   eax,eax
c0004495:	75 15                	jne    c00044ac <dir_register+0x17a>
c0004497:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000449b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00044a0:	75 ce                	jne    c0004470 <dir_register+0x13e>
c00044a2:	be 07 00 00 00       	mov    esi,0x7
c00044a7:	e9 fe 00 00 00       	jmp    c00045aa <dir_register+0x278>
c00044ac:	83 f8 04             	cmp    eax,0x4
c00044af:	0f 85 f5 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00044b9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00044bc:	b9 01 00 00 00       	mov    ecx,0x1
c00044c1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044c6:	74 0f                	je     c00044d7 <dir_register+0x1a5>
c00044c8:	b9 0d 00 00 00       	mov    ecx,0xd
c00044cd:	8d 47 0c             	lea    eax,[edi+0xc]
c00044d0:	31 d2                	xor    edx,edx
c00044d2:	f7 f1                	div    ecx
c00044d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00044d7:	89 ca                	mov    edx,ecx
c00044d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 ad f6 ff ff       	call   c0003b91 <dir_alloc>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 bc 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044f2:	49                   	dec    ecx
c00044f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044f7:	74 6a                	je     c0004563 <dir_register+0x231>
c00044f9:	89 c8                	mov    eax,ecx
c00044fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044fe:	c1 e0 05             	shl    eax,0x5
c0004501:	29 c2                	sub    edx,eax
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 fd ec ff ff       	call   c0003207 <dir_sdi>
c000450a:	89 c6                	mov    esi,eax
c000450c:	85 c0                	test   eax,eax
c000450e:	0f 85 96 00 00 00    	jne    c00045aa <dir_register+0x278>
c0004514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004518:	e8 4a dc ff ff       	call   c0002167 <sum_sfn>
c000451d:	0f b6 f8             	movzx  edi,al
c0004520:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004523:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004526:	89 e8                	mov    eax,ebp
c0004528:	e8 5c df ff ff       	call   c0002489 <move_window>
c000452d:	89 c6                	mov    esi,eax
c000452f:	85 c0                	test   eax,eax
c0004531:	75 77                	jne    c00045aa <dir_register+0x278>
c0004533:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004538:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000453b:	83 ec 0c             	sub    esp,0xc
c000453e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004541:	57                   	push   edi
c0004542:	e8 e0 da ff ff       	call   c0002027 <put_lfn>
c0004547:	31 d2                	xor    edx,edx
c0004549:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000454d:	89 d8                	mov    eax,ebx
c000454f:	e8 0b f2 ff ff       	call   c000375f <dir_next>
c0004554:	83 c4 10             	add    esp,0x10
c0004557:	89 c6                	mov    esi,eax
c0004559:	85 c0                	test   eax,eax
c000455b:	75 4d                	jne    c00045aa <dir_register+0x278>
c000455d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004561:	75 bd                	jne    c0004520 <dir_register+0x1ee>
c0004563:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004566:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004569:	89 e8                	mov    eax,ebp
c000456b:	e8 19 df ff ff       	call   c0002489 <move_window>
c0004570:	89 c6                	mov    esi,eax
c0004572:	85 c0                	test   eax,eax
c0004574:	75 34                	jne    c00045aa <dir_register+0x278>
c0004576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004579:	b9 20 00 00 00       	mov    ecx,0x20
c000457e:	31 d2                	xor    edx,edx
c0004580:	e8 ba d7 ff ff       	call   c0001d3f <mem_set>
c0004585:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000458c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004591:	e8 94 d7 ff ff       	call   c0001d2a <mem_cpy>
c0004596:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004599:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000459c:	83 e0 18             	and    eax,0x18
c000459f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00045a2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00045a6:	eb 02                	jmp    c00045aa <dir_register+0x278>
c00045a8:	89 c6                	mov    esi,eax
c00045aa:	83 c4 6c             	add    esp,0x6c
c00045ad:	89 f0                	mov    eax,esi
c00045af:	5b                   	pop    ebx
c00045b0:	5e                   	pop    esi
c00045b1:	5f                   	pop    edi
c00045b2:	5d                   	pop    ebp
c00045b3:	c3                   	ret    

c00045b4 <sync_fs>:
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	53                   	push   ebx
c00045b7:	89 c3                	mov    ebx,eax
c00045b9:	e8 37 de ff ff       	call   c00023f5 <sync_window>
c00045be:	85 c0                	test   eax,eax
c00045c0:	0f 85 b1 00 00 00    	jne    c0004677 <sync_fs+0xc3>
c00045c6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045c9:	0f 85 8e 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045cf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045d3:	0f 85 84 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045d9:	b9 00 02 00 00       	mov    ecx,0x200
c00045de:	8d 73 54             	lea    esi,[ebx+0x54]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	89 f0                	mov    eax,esi
c00045e5:	e8 55 d7 ff ff       	call   c0001d3f <mem_set>
c00045ea:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045f0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045f5:	e8 23 d7 ff ff       	call   c0001d1d <st_word>
c00045fa:	ba 52 52 61 41       	mov    edx,0x41615252
c00045ff:	89 f0                	mov    eax,esi
c0004601:	e8 1b d7 ff ff       	call   c0001d21 <st_dword>
c0004606:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000460c:	ba 72 72 41 61       	mov    edx,0x61417272
c0004611:	e8 0b d7 ff ff       	call   c0001d21 <st_dword>
c0004616:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004619:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000461f:	e8 fd d6 ff ff       	call   c0001d21 <st_dword>
c0004624:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004627:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000462d:	e8 ef d6 ff ff       	call   c0001d21 <st_dword>
c0004632:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004635:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004638:	83 c0 01             	add    eax,0x1
c000463b:	83 d2 00             	adc    edx,0x0
c000463e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004641:	83 ec 0c             	sub    esp,0xc
c0004644:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004647:	6a 01                	push   0x1
c0004649:	52                   	push   edx
c000464a:	50                   	push   eax
c000464b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000464f:	56                   	push   esi
c0004650:	50                   	push   eax
c0004651:	e8 20 d6 ff ff       	call   c0001c76 <disk_write>
c0004656:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000465a:	83 c4 20             	add    esp,0x20
c000465d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004661:	51                   	push   ecx
c0004662:	6a 00                	push   0x0
c0004664:	6a 00                	push   0x0
c0004666:	50                   	push   eax
c0004667:	e8 20 d6 ff ff       	call   c0001c8c <disk_ioctl>
c000466c:	83 c4 10             	add    esp,0x10
c000466f:	85 c0                	test   eax,eax
c0004671:	0f 95 c0             	setne  al
c0004674:	0f b6 c0             	movzx  eax,al
c0004677:	5a                   	pop    edx
c0004678:	5b                   	pop    ebx
c0004679:	5e                   	pop    esi
c000467a:	c3                   	ret    

c000467b <create_partition>:
c000467b:	55                   	push   ebp
c000467c:	0f b6 c0             	movzx  eax,al
c000467f:	57                   	push   edi
c0004680:	56                   	push   esi
c0004681:	53                   	push   ebx
c0004682:	83 ec 60             	sub    esp,0x60
c0004685:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004689:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000468d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004691:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004695:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004699:	50                   	push   eax
c000469a:	6a 01                	push   0x1
c000469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00046a0:	e8 e7 d5 ff ff       	call   c0001c8c <disk_ioctl>
c00046a5:	83 c4 10             	add    esp,0x10
c00046a8:	85 c0                	test   eax,eax
c00046aa:	74 0a                	je     c00046b6 <create_partition+0x3b>
c00046ac:	b8 01 00 00 00       	mov    eax,0x1
c00046b1:	e9 67 05 00 00       	jmp    c0004c1d <create_partition+0x5a2>
c00046b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ba:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00046be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00046c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046cb:	0f 86 ed 03 00 00    	jbe    c0004abe <create_partition+0x443>
c00046d1:	83 c0 df             	add    eax,0xffffffdf
c00046d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046dc:	83 d2 ff             	adc    edx,0xffffffff
c00046df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ef:	83 c0 bd             	add    eax,0xffffffbd
c00046f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046f9:	83 d2 ff             	adc    edx,0xffffffff
c00046fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004700:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004704:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000470c:	be 22 00 00 00       	mov    esi,0x22
c0004711:	31 ff                	xor    edi,edi
c0004713:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000471b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004723:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000472b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000472f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004735:	75 0e                	jne    c0004745 <create_partition+0xca>
c0004737:	b9 00 02 00 00       	mov    ecx,0x200
c000473c:	31 d2                	xor    edx,edx
c000473e:	89 d8                	mov    eax,ebx
c0004740:	e8 fa d5 ff ff       	call   c0001d3f <mem_set>
c0004745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004749:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000474d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004751:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004754:	0f 84 23 01 00 00    	je     c000487d <create_partition+0x202>
c000475a:	89 f0                	mov    eax,esi
c000475c:	89 fa                	mov    edx,edi
c000475e:	05 ff 07 00 00       	add    eax,0x7ff
c0004763:	83 d2 00             	adc    edx,0x0
c0004766:	89 c1                	mov    ecx,eax
c0004768:	89 d7                	mov    edi,edx
c000476a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004770:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004774:	89 ce                	mov    esi,ecx
c0004776:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000477a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000477e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004782:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004789:	89 04 24             	mov    DWORD PTR [esp],eax
c000478c:	b8 64 00 00 00       	mov    eax,0x64
c0004791:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004794:	b8 00 00 00 00       	mov    eax,0x0
c0004799:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000479d:	72 41                	jb     c00047e0 <create_partition+0x165>
c000479f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00047a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a7:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c00047ab:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00047b0:	01 c1                	add    ecx,eax
c00047b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00047b6:	f7 24 24             	mul    DWORD PTR [esp]
c00047b9:	6a 00                	push   0x0
c00047bb:	01 ca                	add    edx,ecx
c00047bd:	6a 64                	push   0x64
c00047bf:	52                   	push   edx
c00047c0:	50                   	push   eax
c00047c1:	e8 b6 9e 01 00       	call   c001e67c <__udivdi3>
c00047c6:	83 c4 10             	add    esp,0x10
c00047c9:	05 ff 07 00 00       	add    eax,0x7ff
c00047ce:	83 d2 00             	adc    edx,0x0
c00047d1:	89 c1                	mov    ecx,eax
c00047d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047d7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047dd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047e7:	01 f0                	add    eax,esi
c00047e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ed:	11 fa                	adc    edx,edi
c00047ef:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047f3:	19 d1                	sbb    ecx,edx
c00047f5:	73 2e                	jae    c0004825 <create_partition+0x1aa>
c00047f7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004804:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004808:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004810:	73 6b                	jae    c000487d <create_partition+0x202>
c0004812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000481a:	29 f0                	sub    eax,esi
c000481c:	19 fa                	sbb    edx,edi
c000481e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004821:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004829:	0b 04 24             	or     eax,DWORD PTR [esp]
c000482c:	74 4f                	je     c000487d <create_partition+0x202>
c000482e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004831:	b9 10 00 00 00       	mov    ecx,0x10
c0004836:	ba 10 f7 01 c0       	mov    edx,0xc001f710
c000483b:	e8 ea d4 ff ff       	call   c0001d2a <mem_cpy>
c0004840:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004844:	b9 10 00 00 00       	mov    ecx,0x10
c0004849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000484d:	e8 2c db ff ff       	call   c000237e <make_rand>
c0004852:	89 f2                	mov    edx,esi
c0004854:	89 f9                	mov    ecx,edi
c0004856:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000485a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000485e:	e8 c1 d4 ff ff       	call   c0001d24 <st_qword>
c0004863:	03 34 24             	add    esi,DWORD PTR [esp]
c0004866:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000486a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000486e:	89 f2                	mov    edx,esi
c0004870:	89 f9                	mov    ecx,edi
c0004872:	83 c2 ff             	add    edx,0xffffffff
c0004875:	83 d1 ff             	adc    ecx,0xffffffff
c0004878:	e8 a7 d4 ff ff       	call   c0001d24 <st_qword>
c000487d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004881:	83 e8 80             	sub    eax,0xffffff80
c0004884:	89 c5                	mov    ebp,eax
c0004886:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000488a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004890:	75 6b                	jne    c00048fd <create_partition+0x282>
c0004892:	45                   	inc    ebp
c0004893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004897:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000489c:	e8 39 da ff ff       	call   c00022da <crc32>
c00048a1:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00048a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00048ab:	75 e5                	jne    c0004892 <create_partition+0x217>
c00048ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	83 ec 0c             	sub    esp,0xc
c00048b6:	c1 ed 09             	shr    ebp,0x9
c00048b9:	6a 01                	push   0x1
c00048bb:	8d 45 02             	lea    eax,[ebp+0x2]
c00048be:	52                   	push   edx
c00048bf:	50                   	push   eax
c00048c0:	53                   	push   ebx
c00048c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c5:	e8 ac d3 ff ff       	call   c0001c76 <disk_write>
c00048ca:	83 c4 20             	add    esp,0x20
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 85 d7 fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	31 d2                	xor    edx,edx
c00048da:	6a 01                	push   0x1
c00048dc:	89 e8                	mov    eax,ebp
c00048de:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048e2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048e6:	52                   	push   edx
c00048e7:	50                   	push   eax
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 84 d3 ff ff       	call   c0001c76 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 85 af fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004901:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004905:	3d 00 40 00 00       	cmp    eax,0x4000
c000490a:	74 0d                	je     c0004919 <create_partition+0x29e>
c000490c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004910:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004914:	e9 12 fe ff ff       	jmp    c000472b <create_partition+0xb0>
c0004919:	31 d2                	xor    edx,edx
c000491b:	b9 00 02 00 00       	mov    ecx,0x200
c0004920:	89 d8                	mov    eax,ebx
c0004922:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004925:	e8 15 d4 ff ff       	call   c0001d3f <mem_set>
c000492a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000492d:	b9 10 00 00 00       	mov    ecx,0x10
c0004932:	ba 00 f6 01 c0       	mov    edx,0xc001f600
c0004937:	89 d8                	mov    eax,ebx
c0004939:	e8 ec d3 ff ff       	call   c0001d2a <mem_cpy>
c000493e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004942:	8d 43 58             	lea    eax,[ebx+0x58]
c0004945:	f7 d2                	not    edx
c0004947:	e8 d5 d3 ff ff       	call   c0001d21 <st_dword>
c000494c:	8d 43 18             	lea    eax,[ebx+0x18]
c000494f:	31 c9                	xor    ecx,ecx
c0004951:	89 04 24             	mov    DWORD PTR [esp],eax
c0004954:	ba 01 00 00 00       	mov    edx,0x1
c0004959:	e8 c6 d3 ff ff       	call   c0001d24 <st_qword>
c000495e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004962:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004966:	83 c2 ff             	add    edx,0xffffffff
c0004969:	89 e8                	mov    eax,ebp
c000496b:	83 d1 ff             	adc    ecx,0xffffffff
c000496e:	e8 b1 d3 ff ff       	call   c0001d24 <st_qword>
c0004973:	31 c9                	xor    ecx,ecx
c0004975:	8d 43 28             	lea    eax,[ebx+0x28]
c0004978:	ba 22 00 00 00       	mov    edx,0x22
c000497d:	e8 a2 d3 ff ff       	call   c0001d24 <st_qword>
c0004982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000498a:	83 c2 de             	add    edx,0xffffffde
c000498d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004990:	83 d1 ff             	adc    ecx,0xffffffff
c0004993:	31 f6                	xor    esi,esi
c0004995:	e8 8a d3 ff ff       	call   c0001d24 <st_qword>
c000499a:	8d 43 54             	lea    eax,[ebx+0x54]
c000499d:	ba 80 00 00 00       	mov    edx,0x80
c00049a2:	e8 7a d3 ff ff       	call   c0001d21 <st_dword>
c00049a7:	8d 43 50             	lea    eax,[ebx+0x50]
c00049aa:	ba 80 00 00 00       	mov    edx,0x80
c00049af:	e8 6d d3 ff ff       	call   c0001d21 <st_dword>
c00049b4:	ba 02 00 00 00       	mov    edx,0x2
c00049b9:	89 f8                	mov    eax,edi
c00049bb:	e8 61 d3 ff ff       	call   c0001d21 <st_dword>
c00049c0:	8d 53 38             	lea    edx,[ebx+0x38]
c00049c3:	b9 10 00 00 00       	mov    ecx,0x10
c00049c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049cc:	e8 ad d9 ff ff       	call   c000237e <make_rand>
c00049d1:	83 c8 ff             	or     eax,0xffffffff
c00049d4:	46                   	inc    esi
c00049d5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049da:	e8 fb d8 ff ff       	call   c00022da <crc32>
c00049df:	83 fe 5c             	cmp    esi,0x5c
c00049e2:	75 f0                	jne    c00049d4 <create_partition+0x359>
c00049e4:	f7 d0                	not    eax
c00049e6:	8d 73 10             	lea    esi,[ebx+0x10]
c00049e9:	89 c2                	mov    edx,eax
c00049eb:	89 f0                	mov    eax,esi
c00049ed:	e8 2f d3 ff ff       	call   c0001d21 <st_dword>
c00049f2:	83 ec 0c             	sub    esp,0xc
c00049f5:	6a 01                	push   0x1
c00049f7:	6a 00                	push   0x0
c00049f9:	6a 01                	push   0x1
c00049fb:	53                   	push   ebx
c00049fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a00:	e8 71 d2 ff ff       	call   c0001c76 <disk_write>
c0004a05:	83 c4 20             	add    esp,0x20
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 9c fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a10:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004a14:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004a18:	83 c2 ff             	add    edx,0xffffffff
c0004a1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a1e:	83 d1 ff             	adc    ecx,0xffffffff
c0004a21:	e8 fe d2 ff ff       	call   c0001d24 <st_qword>
c0004a26:	ba 01 00 00 00       	mov    edx,0x1
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 e8                	mov    eax,ebp
c0004a2f:	e8 f0 d2 ff ff       	call   c0001d24 <st_qword>
c0004a34:	89 f8                	mov    eax,edi
c0004a36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	e8 df d2 ff ff       	call   c0001d24 <st_qword>
c0004a45:	89 f0                	mov    eax,esi
c0004a47:	31 d2                	xor    edx,edx
c0004a49:	e8 d3 d2 ff ff       	call   c0001d21 <st_dword>
c0004a4e:	83 c8 ff             	or     eax,0xffffffff
c0004a51:	47                   	inc    edi
c0004a52:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a57:	e8 7e d8 ff ff       	call   c00022da <crc32>
c0004a5c:	83 ff 5c             	cmp    edi,0x5c
c0004a5f:	75 f0                	jne    c0004a51 <create_partition+0x3d6>
c0004a61:	f7 d0                	not    eax
c0004a63:	89 c2                	mov    edx,eax
c0004a65:	89 f0                	mov    eax,esi
c0004a67:	e8 b5 d2 ff ff       	call   c0001d21 <st_dword>
c0004a6c:	83 ec 0c             	sub    esp,0xc
c0004a6f:	6a 01                	push   0x1
c0004a71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a75:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a79:	83 c0 ff             	add    eax,0xffffffff
c0004a7c:	83 d2 ff             	adc    edx,0xffffffff
c0004a7f:	52                   	push   edx
c0004a80:	50                   	push   eax
c0004a81:	53                   	push   ebx
c0004a82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a86:	e8 eb d1 ff ff       	call   c0001c76 <disk_write>
c0004a8b:	83 c4 20             	add    esp,0x20
c0004a8e:	85 c0                	test   eax,eax
c0004a90:	0f 85 16 fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a96:	31 d2                	xor    edx,edx
c0004a98:	89 d8                	mov    eax,ebx
c0004a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0004a9f:	e8 9b d2 ff ff       	call   c0001d3f <mem_set>
c0004aa4:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004aaa:	b9 10 00 00 00       	mov    ecx,0x10
c0004aaf:	ba 10 f6 01 c0       	mov    edx,0xc001f610
c0004ab4:	e8 71 d2 ff ff       	call   c0001d2a <mem_cpy>
c0004ab9:	e9 21 01 00 00       	jmp    c0004bdf <create_partition+0x564>
c0004abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ac2:	b9 05 00 00 00       	mov    ecx,0x5
c0004ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aca:	bf 08 00 00 00       	mov    edi,0x8
c0004acf:	89 f8                	mov    eax,edi
c0004ad1:	31 d2                	xor    edx,edx
c0004ad3:	0f b6 f0             	movzx  esi,al
c0004ad6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ad9:	f7 f6                	div    esi
c0004adb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004ae0:	76 0a                	jbe    c0004aec <create_partition+0x471>
c0004ae2:	d1 e7                	shl    edi,1
c0004ae4:	49                   	dec    ecx
c0004ae5:	75 e8                	jne    c0004acf <create_partition+0x454>
c0004ae7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aec:	b9 00 02 00 00       	mov    ecx,0x200
c0004af1:	31 d2                	xor    edx,edx
c0004af3:	89 d8                	mov    eax,ebx
c0004af5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004afb:	e8 3f d2 ff ff       	call   c0001d3f <mem_set>
c0004b00:	b9 64 00 00 00       	mov    ecx,0x64
c0004b05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b08:	31 d2                	xor    edx,edx
c0004b0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004b12:	f7 f1                	div    ecx
c0004b14:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004b19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004b1d:	89 f8                	mov    eax,edi
c0004b1f:	0f b6 c0             	movzx  eax,al
c0004b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b26:	e9 80 00 00 00       	jmp    c0004bab <create_partition+0x530>
c0004b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b2e:	29 cf                	sub    edi,ecx
c0004b30:	89 ca                	mov    edx,ecx
c0004b32:	89 f0                	mov    eax,esi
c0004b34:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b39:	e8 e3 d1 ff ff       	call   c0001d21 <st_dword>
c0004b3e:	8d 46 04             	lea    eax,[esi+0x4]
c0004b41:	89 fa                	mov    edx,edi
c0004b43:	83 c6 10             	add    esi,0x10
c0004b46:	e8 d6 d1 ff ff       	call   c0001d21 <st_dword>
c0004b4b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b4f:	31 d2                	xor    edx,edx
c0004b51:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b54:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b58:	89 c8                	mov    eax,ecx
c0004b5a:	01 f9                	add    ecx,edi
c0004b5c:	f7 f5                	div    ebp
c0004b5e:	89 d5                	mov    ebp,edx
c0004b60:	31 d2                	xor    edx,edx
c0004b62:	45                   	inc    ebp
c0004b63:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b67:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b6d:	89 c2                	mov    edx,eax
c0004b6f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b72:	c1 ea 02             	shr    edx,0x2
c0004b75:	83 e2 c0             	and    edx,0xffffffc0
c0004b78:	09 ea                	or     edx,ebp
c0004b7a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b7f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	f7 f5                	div    ebp
c0004b86:	89 d7                	mov    edi,edx
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	47                   	inc    edi
c0004b8b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b8f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b92:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b95:	89 c5                	mov    ebp,eax
c0004b97:	c1 ed 02             	shr    ebp,0x2
c0004b9a:	83 e5 c0             	and    ebp,0xffffffc0
c0004b9d:	09 ef                	or     edi,ebp
c0004b9f:	89 fa                	mov    edx,edi
c0004ba1:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004ba4:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004ba9:	74 34                	je     c0004bdf <create_partition+0x564>
c0004bab:	85 c9                	test   ecx,ecx
c0004bad:	74 30                	je     c0004bdf <create_partition+0x564>
c0004baf:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004bb2:	76 2b                	jbe    c0004bdf <create_partition+0x564>
c0004bb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bb8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004bbc:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004bbf:	83 ff 64             	cmp    edi,0x64
c0004bc2:	76 4b                	jbe    c0004c0f <create_partition+0x594>
c0004bc4:	89 f8                	mov    eax,edi
c0004bc6:	01 c8                	add    eax,ecx
c0004bc8:	0f 82 5d ff ff ff    	jb     c0004b2b <create_partition+0x4b0>
c0004bce:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bd1:	0f 87 54 ff ff ff    	ja     c0004b2b <create_partition+0x4b0>
c0004bd7:	85 ff                	test   edi,edi
c0004bd9:	0f 85 51 ff ff ff    	jne    c0004b30 <create_partition+0x4b5>
c0004bdf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004be5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bea:	e8 2e d1 ff ff       	call   c0001d1d <st_word>
c0004bef:	83 ec 0c             	sub    esp,0xc
c0004bf2:	6a 01                	push   0x1
c0004bf4:	6a 00                	push   0x0
c0004bf6:	6a 00                	push   0x0
c0004bf8:	53                   	push   ebx
c0004bf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bfd:	e8 74 d0 ff ff       	call   c0001c76 <disk_write>
c0004c02:	83 c4 20             	add    esp,0x20
c0004c05:	85 c0                	test   eax,eax
c0004c07:	0f 95 c0             	setne  al
c0004c0a:	0f b6 c0             	movzx  eax,al
c0004c0d:	eb 0e                	jmp    c0004c1d <create_partition+0x5a2>
c0004c0f:	74 07                	je     c0004c18 <create_partition+0x59d>
c0004c11:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004c16:	eb ac                	jmp    c0004bc4 <create_partition+0x549>
c0004c18:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004c1b:	eb a7                	jmp    c0004bc4 <create_partition+0x549>
c0004c1d:	83 c4 5c             	add    esp,0x5c
c0004c20:	5b                   	pop    ebx
c0004c21:	5e                   	pop    esi
c0004c22:	5f                   	pop    edi
c0004c23:	5d                   	pop    ebp
c0004c24:	c3                   	ret    

c0004c25 <get_fileinfo>:
c0004c25:	55                   	push   ebp
c0004c26:	57                   	push   edi
c0004c27:	56                   	push   esi
c0004c28:	53                   	push   ebx
c0004c29:	83 ec 1c             	sub    esp,0x1c
c0004c2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c2e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c32:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c36:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c39:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c3c:	0f 84 dc 01 00 00    	je     c0004e1e <get_fileinfo+0x1f9>
c0004c42:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c45:	75 0f                	jne    c0004c56 <get_fileinfo+0x31>
c0004c47:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c4a:	83 c4 1c             	add    esp,0x1c
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	5f                   	pop    edi
c0004c50:	5d                   	pop    ebp
c0004c51:	e9 58 d5 ff ff       	jmp    c00021ae <get_xfileinfo>
c0004c56:	89 d3                	mov    ebx,edx
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c5e:	74 6a                	je     c0004cca <get_fileinfo+0xa5>
c0004c60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c68:	31 ed                	xor    ebp,ebp
c0004c6a:	31 ff                	xor    edi,edi
c0004c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c77:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c7b:	66 85 d2             	test   dx,dx
c0004c7e:	74 3e                	je     c0004cbe <get_fileinfo+0x99>
c0004c80:	66 85 ed             	test   bp,bp
c0004c83:	75 0c                	jne    c0004c91 <get_fileinfo+0x6c>
c0004c85:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c8b:	66 3d ff 07          	cmp    ax,0x7ff
c0004c8f:	76 22                	jbe    c0004cb3 <get_fileinfo+0x8e>
c0004c91:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c96:	89 e8                	mov    eax,ebp
c0004c98:	29 f9                	sub    ecx,edi
c0004c9a:	c1 e0 10             	shl    eax,0x10
c0004c9d:	09 d0                	or     eax,edx
c0004c9f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004ca3:	e8 a3 d1 ff ff       	call   c0001e4b <put_utf>
c0004ca8:	84 c0                	test   al,al
c0004caa:	74 10                	je     c0004cbc <get_fileinfo+0x97>
c0004cac:	0f b6 c0             	movzx  eax,al
c0004caf:	31 d2                	xor    edx,edx
c0004cb1:	01 c7                	add    edi,eax
c0004cb3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004cb8:	89 d5                	mov    ebp,edx
c0004cba:	eb b0                	jmp    c0004c6c <get_fileinfo+0x47>
c0004cbc:	31 ff                	xor    edi,edi
c0004cbe:	66 85 ed             	test   bp,bp
c0004cc1:	74 02                	je     c0004cc5 <get_fileinfo+0xa0>
c0004cc3:	31 ff                	xor    edi,edi
c0004cc5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004cca:	31 ff                	xor    edi,edi
c0004ccc:	31 c9                	xor    ecx,ecx
c0004cce:	83 f9 0a             	cmp    ecx,0xa
c0004cd1:	0f 87 ad 00 00 00    	ja     c0004d84 <get_fileinfo+0x15f>
c0004cd7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cda:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cdd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ce1:	66 83 fa 20          	cmp    dx,0x20
c0004ce5:	0f 84 92 00 00 00    	je     c0004d7d <get_fileinfo+0x158>
c0004ceb:	66 83 fa 05          	cmp    dx,0x5
c0004cef:	75 05                	jne    c0004cf6 <get_fileinfo+0xd1>
c0004cf1:	ba e5 00 00 00       	mov    edx,0xe5
c0004cf6:	83 ff 0b             	cmp    edi,0xb
c0004cf9:	77 0b                	ja     c0004d06 <get_fileinfo+0xe1>
c0004cfb:	83 fd 09             	cmp    ebp,0x9
c0004cfe:	75 06                	jne    c0004d06 <get_fileinfo+0xe1>
c0004d00:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004d05:	47                   	inc    edi
c0004d06:	0f b7 c2             	movzx  eax,dx
c0004d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0d:	e8 6d d0 ff ff       	call   c0001d7f <dbc_1st>
c0004d12:	85 c0                	test   eax,eax
c0004d14:	74 2f                	je     c0004d45 <get_fileinfo+0x120>
c0004d16:	83 fd 08             	cmp    ebp,0x8
c0004d19:	74 2a                	je     c0004d45 <get_fileinfo+0x120>
c0004d1b:	83 fd 0b             	cmp    ebp,0xb
c0004d1e:	74 25                	je     c0004d45 <get_fileinfo+0x120>
c0004d20:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d23:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d27:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d2b:	e8 52 d0 ff ff       	call   c0001d82 <dbc_2nd>
c0004d30:	85 c0                	test   eax,eax
c0004d32:	74 11                	je     c0004d45 <get_fileinfo+0x120>
c0004d34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d3d:	c1 e2 08             	shl    edx,0x8
c0004d40:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d43:	09 c2                	or     edx,eax
c0004d45:	0f b7 d2             	movzx  edx,dx
c0004d48:	50                   	push   eax
c0004d49:	50                   	push   eax
c0004d4a:	68 b5 01 00 00       	push   0x1b5
c0004d4f:	52                   	push   edx
c0004d50:	e8 46 38 00 00       	call   c000859b <ff_oem2uni>
c0004d55:	83 c4 10             	add    esp,0x10
c0004d58:	66 85 c0             	test   ax,ax
c0004d5b:	75 04                	jne    c0004d61 <get_fileinfo+0x13c>
c0004d5d:	31 ff                	xor    edi,edi
c0004d5f:	eb 23                	jmp    c0004d84 <get_fileinfo+0x15f>
c0004d61:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d66:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d6a:	29 f9                	sub    ecx,edi
c0004d6c:	0f b7 c0             	movzx  eax,ax
c0004d6f:	e8 d7 d0 ff ff       	call   c0001e4b <put_utf>
c0004d74:	84 c0                	test   al,al
c0004d76:	74 e5                	je     c0004d5d <get_fileinfo+0x138>
c0004d78:	0f b6 c0             	movzx  eax,al
c0004d7b:	01 c7                	add    edi,eax
c0004d7d:	89 e9                	mov    ecx,ebp
c0004d7f:	e9 4a ff ff ff       	jmp    c0004cce <get_fileinfo+0xa9>
c0004d84:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d89:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d8d:	75 54                	jne    c0004de3 <get_fileinfo+0x1be>
c0004d8f:	85 ff                	test   edi,edi
c0004d91:	75 0b                	jne    c0004d9e <get_fileinfo+0x179>
c0004d93:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d97:	ba 01 00 00 00       	mov    edx,0x1
c0004d9c:	eb 33                	jmp    c0004dd1 <get_fileinfo+0x1ac>
c0004d9e:	b1 08                	mov    cl,0x8
c0004da0:	31 d2                	xor    edx,edx
c0004da2:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004da8:	84 c0                	test   al,al
c0004daa:	74 25                	je     c0004dd1 <get_fileinfo+0x1ac>
c0004dac:	66 83 f8 2e          	cmp    ax,0x2e
c0004db0:	74 16                	je     c0004dc8 <get_fileinfo+0x1a3>
c0004db2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004db5:	66 83 ff 19          	cmp    di,0x19
c0004db9:	77 0f                	ja     c0004dca <get_fileinfo+0x1a5>
c0004dbb:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004dbe:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004dc1:	74 07                	je     c0004dca <get_fileinfo+0x1a5>
c0004dc3:	83 c0 20             	add    eax,0x20
c0004dc6:	eb 02                	jmp    c0004dca <get_fileinfo+0x1a5>
c0004dc8:	b1 10                	mov    cl,0x10
c0004dca:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004dce:	42                   	inc    edx
c0004dcf:	eb d1                	jmp    c0004da2 <get_fileinfo+0x17d>
c0004dd1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004dd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ddd:	75 04                	jne    c0004de3 <get_fileinfo+0x1be>
c0004ddf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004de3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004de6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004de9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dec:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004def:	83 c0 1c             	add    eax,0x1c
c0004df2:	e8 c1 ce ff ff       	call   c0001cb8 <ld_dword>
c0004df7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dfe:	89 03                	mov    DWORD PTR [ebx],eax
c0004e00:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e03:	83 c0 16             	add    eax,0x16
c0004e06:	e8 a0 ce ff ff       	call   c0001cab <ld_word>
c0004e0b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004e0f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e12:	83 c0 18             	add    eax,0x18
c0004e15:	e8 91 ce ff ff       	call   c0001cab <ld_word>
c0004e1a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004e1e:	83 c4 1c             	add    esp,0x1c
c0004e21:	5b                   	pop    ebx
c0004e22:	5e                   	pop    esi
c0004e23:	5f                   	pop    edi
c0004e24:	5d                   	pop    ebp
c0004e25:	c3                   	ret    

c0004e26 <ld_clust.isra.0>:
c0004e26:	56                   	push   esi
c0004e27:	89 c6                	mov    esi,eax
c0004e29:	53                   	push   ebx
c0004e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	e8 77 ce ff ff       	call   c0001cab <ld_word>
c0004e34:	0f b7 c8             	movzx  ecx,ax
c0004e37:	89 f0                	mov    eax,esi
c0004e39:	3c 03                	cmp    al,0x3
c0004e3b:	75 0d                	jne    c0004e4a <ld_clust.isra.0+0x24>
c0004e3d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e40:	e8 66 ce ff ff       	call   c0001cab <ld_word>
c0004e45:	c1 e0 10             	shl    eax,0x10
c0004e48:	09 c1                	or     ecx,eax
c0004e4a:	89 c8                	mov    eax,ecx
c0004e4c:	5b                   	pop    ebx
c0004e4d:	5e                   	pop    esi
c0004e4e:	c3                   	ret    

c0004e4f <st_clust.isra.1>:
c0004e4f:	56                   	push   esi
c0004e50:	89 c6                	mov    esi,eax
c0004e52:	53                   	push   ebx
c0004e53:	89 d3                	mov    ebx,edx
c0004e55:	0f b7 d1             	movzx  edx,cx
c0004e58:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e5b:	e8 bd ce ff ff       	call   c0001d1d <st_word>
c0004e60:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e63:	75 0f                	jne    c0004e74 <st_clust.isra.1+0x25>
c0004e65:	c1 e9 10             	shr    ecx,0x10
c0004e68:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e6b:	89 ca                	mov    edx,ecx
c0004e6d:	5b                   	pop    ebx
c0004e6e:	5e                   	pop    esi
c0004e6f:	e9 a9 ce ff ff       	jmp    c0001d1d <st_word>
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <init_alloc_info.isra.2>:
c0004e77:	56                   	push   esi
c0004e78:	53                   	push   ebx
c0004e79:	89 c6                	mov    esi,eax
c0004e7b:	89 d3                	mov    ebx,edx
c0004e7d:	51                   	push   ecx
c0004e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e80:	83 c0 34             	add    eax,0x34
c0004e83:	e8 30 ce ff ff       	call   c0001cb8 <ld_dword>
c0004e88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e8d:	83 c0 38             	add    eax,0x38
c0004e90:	e8 3b ce ff ff       	call   c0001cd0 <ld_qword>
c0004e95:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e98:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e9d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004ea0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea7:	83 e0 02             	and    eax,0x2
c0004eaa:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004ead:	5b                   	pop    ebx
c0004eae:	5b                   	pop    ebx
c0004eaf:	5e                   	pop    esi
c0004eb0:	c3                   	ret    

c0004eb1 <follow_path>:
c0004eb1:	56                   	push   esi
c0004eb2:	53                   	push   ebx
c0004eb3:	89 c3                	mov    ebx,eax
c0004eb5:	83 ec 14             	sub    esp,0x14
c0004eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ebc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ec2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ec4:	80 fa 5c             	cmp    dl,0x5c
c0004ec7:	75 07                	jne    c0004ed0 <follow_path+0x1f>
c0004ec9:	40                   	inc    eax
c0004eca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ece:	eb ee                	jmp    c0004ebe <follow_path+0xd>
c0004ed0:	80 fa 2f             	cmp    dl,0x2f
c0004ed3:	74 f4                	je     c0004ec9 <follow_path+0x18>
c0004ed5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004edc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ee3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ee6:	77 52                	ja     c0004f3a <follow_path+0x89>
c0004ee8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eec:	31 d2                	xor    edx,edx
c0004eee:	89 d8                	mov    eax,ebx
c0004ef0:	e8 12 e3 ff ff       	call   c0003207 <dir_sdi>
c0004ef5:	eb 7c                	jmp    c0004f73 <follow_path+0xc2>
c0004ef7:	89 d8                	mov    eax,ebx
c0004ef9:	e8 6e f2 ff ff       	call   c000416c <dir_find>
c0004efe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004f01:	85 c0                	test   eax,eax
c0004f03:	75 46                	jne    c0004f4b <follow_path+0x9a>
c0004f05:	80 e2 04             	and    dl,0x4
c0004f08:	75 69                	jne    c0004f73 <follow_path+0xc2>
c0004f0a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004f0e:	74 5e                	je     c0004f6e <follow_path+0xbd>
c0004f10:	8a 06                	mov    al,BYTE PTR [esi]
c0004f12:	3c 04                	cmp    al,0x4
c0004f14:	75 41                	jne    c0004f57 <follow_path+0xa6>
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004f1d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004f23:	30 c0                	xor    al,al
c0004f25:	09 d0                	or     eax,edx
c0004f27:	89 da                	mov    edx,ebx
c0004f29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f2c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f2f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f32:	8d 46 10             	lea    eax,[esi+0x10]
c0004f35:	e8 3d ff ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0004f3a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f3e:	89 d8                	mov    eax,ebx
c0004f40:	e8 a9 ed ff ff       	call   c0003cee <create_name>
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 ae                	je     c0004ef7 <follow_path+0x46>
c0004f49:	eb 28                	jmp    c0004f73 <follow_path+0xc2>
c0004f4b:	83 f8 04             	cmp    eax,0x4
c0004f4e:	75 23                	jne    c0004f73 <follow_path+0xc2>
c0004f50:	80 e2 04             	and    dl,0x4
c0004f53:	74 19                	je     c0004f6e <follow_path+0xbd>
c0004f55:	eb 1c                	jmp    c0004f73 <follow_path+0xc2>
c0004f57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f5a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f60:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f64:	e8 bd fe ff ff       	call   c0004e26 <ld_clust.isra.0>
c0004f69:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6c:	eb cc                	jmp    c0004f3a <follow_path+0x89>
c0004f6e:	b8 05 00 00 00       	mov    eax,0x5
c0004f73:	83 c4 14             	add    esp,0x14
c0004f76:	5b                   	pop    ebx
c0004f77:	5e                   	pop    esi
c0004f78:	c3                   	ret    

c0004f79 <f_mount>:
c0004f79:	53                   	push   ebx
c0004f7a:	83 ec 18             	sub    esp,0x18
c0004f7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f8d:	e8 fb d2 ff ff       	call   c000228d <get_ldnumber>
c0004f92:	89 c2                	mov    edx,eax
c0004f94:	b8 0b 00 00 00       	mov    eax,0xb
c0004f99:	85 d2                	test   edx,edx
c0004f9b:	78 39                	js     c0004fd6 <f_mount+0x5d>
c0004f9d:	8b 04 95 a0 b8 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4760]
c0004fa4:	85 c0                	test   eax,eax
c0004fa6:	74 03                	je     c0004fab <f_mount+0x32>
c0004fa8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	74 03                	je     c0004fb6 <f_mount+0x3d>
c0004fb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fba:	89 04 95 a0 b8 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4760],eax
c0004fc1:	31 c0                	xor    eax,eax
c0004fc3:	84 db                	test   bl,bl
c0004fc5:	74 0f                	je     c0004fd6 <f_mount+0x5d>
c0004fc7:	31 c9                	xor    ecx,ecx
c0004fc9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fcd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fd1:	e8 65 d7 ff ff       	call   c000273b <mount_volume>
c0004fd6:	83 c4 18             	add    esp,0x18
c0004fd9:	5b                   	pop    ebx
c0004fda:	c3                   	ret    

c0004fdb <f_open>:
c0004fdb:	55                   	push   ebp
c0004fdc:	bd 09 00 00 00       	mov    ebp,0x9
c0004fe1:	57                   	push   edi
c0004fe2:	56                   	push   esi
c0004fe3:	53                   	push   ebx
c0004fe4:	83 ec 7c             	sub    esp,0x7c
c0004fe7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fee:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ff5:	85 db                	test   ebx,ebx
c0004ff7:	0f 84 10 04 00 00    	je     c000540d <f_open+0x432>
c0004ffd:	89 fe                	mov    esi,edi
c0004fff:	8d 54 24 20          	lea    edx,[esp+0x20]
c0005003:	83 e6 3f             	and    esi,0x3f
c0005006:	89 f0                	mov    eax,esi
c0005008:	0f b6 c8             	movzx  ecx,al
c000500b:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0005012:	e8 24 d7 ff ff       	call   c000273b <mount_volume>
c0005017:	89 c5                	mov    ebp,eax
c0005019:	85 c0                	test   eax,eax
c000501b:	0f 85 e6 03 00 00    	jne    c0005407 <f_open+0x42c>
c0005021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005025:	bd 11 00 00 00       	mov    ebp,0x11
c000502a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000502e:	83 ec 0c             	sub    esp,0xc
c0005031:	68 60 04 00 00       	push   0x460
c0005036:	e8 a3 34 00 00       	call   c00084de <ff_memalloc>
c000503b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000503f:	83 c4 10             	add    esp,0x10
c0005042:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005047:	0f 84 c0 03 00 00    	je     c000540d <f_open+0x432>
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005055:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000505b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000505e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005061:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005068:	8d 44 24 24          	lea    eax,[esp+0x24]
c000506c:	e8 40 fe ff ff       	call   c0004eb1 <follow_path>
c0005071:	89 c5                	mov    ebp,eax
c0005073:	85 c0                	test   eax,eax
c0005075:	75 0c                	jne    c0005083 <f_open+0xa8>
c0005077:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000507c:	79 05                	jns    c0005083 <f_open+0xa8>
c000507e:	bd 06 00 00 00       	mov    ebp,0x6
c0005083:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005089:	0f 84 84 01 00 00    	je     c0005213 <f_open+0x238>
c000508f:	85 ed                	test   ebp,ebp
c0005091:	74 20                	je     c00050b3 <f_open+0xd8>
c0005093:	83 fd 04             	cmp    ebp,0x4
c0005096:	0f 85 58 03 00 00    	jne    c00053f4 <f_open+0x419>
c000509c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a0:	83 ce 08             	or     esi,0x8
c00050a3:	e8 8a f2 ff ff       	call   c0004332 <dir_register>
c00050a8:	89 c5                	mov    ebp,eax
c00050aa:	85 c0                	test   eax,eax
c00050ac:	74 2f                	je     c00050dd <f_open+0x102>
c00050ae:	e9 41 03 00 00       	jmp    c00053f4 <f_open+0x419>
c00050b3:	bd 07 00 00 00       	mov    ebp,0x7
c00050b8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c00050bd:	0f 85 31 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050c3:	bd 08 00 00 00       	mov    ebp,0x8
c00050c8:	f7 c7 04 00 00 00    	test   edi,0x4
c00050ce:	0f 85 20 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050d4:	83 e7 08             	and    edi,0x8
c00050d7:	0f 84 65 01 00 00    	je     c0005242 <f_open+0x267>
c00050dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050e1:	8a 02                	mov    al,BYTE PTR [edx]
c00050e3:	3c 04                	cmp    al,0x4
c00050e5:	0f 85 97 00 00 00    	jne    c0005182 <f_open+0x1a7>
c00050eb:	8d 42 10             	lea    eax,[edx+0x10]
c00050ee:	89 13                	mov    DWORD PTR [ebx],edx
c00050f0:	89 da                	mov    edx,ebx
c00050f2:	e8 80 fd ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00050f7:	31 d2                	xor    edx,edx
c00050f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005105:	83 c0 02             	add    eax,0x2
c0005108:	e8 32 cc ff ff       	call   c0001d3f <mem_set>
c000510d:	b9 1a 00 00 00       	mov    ecx,0x1a
c0005112:	31 d2                	xor    edx,edx
c0005114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005118:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511b:	83 c0 26             	add    eax,0x26
c000511e:	e8 1c cc ff ff       	call   c0001d3f <mem_set>
c0005123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005127:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000512a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c000512e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005136:	83 c0 08             	add    eax,0x8
c0005139:	e8 e3 cb ff ff       	call   c0001d21 <st_dword>
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005145:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000514d:	e8 b7 ea ff ff       	call   c0003c09 <store_xdir>
c0005152:	89 c5                	mov    ebp,eax
c0005154:	85 c0                	test   eax,eax
c0005156:	0f 85 98 02 00 00    	jne    c00053f4 <f_open+0x419>
c000515c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000515f:	85 d2                	test   edx,edx
c0005161:	0f 84 db 00 00 00    	je     c0005242 <f_open+0x267>
c0005167:	31 c9                	xor    ecx,ecx
c0005169:	89 d8                	mov    eax,ebx
c000516b:	e8 8e e3 ff ff       	call   c00034fe <remove_chain>
c0005170:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005174:	89 c5                	mov    ebp,eax
c0005176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005179:	48                   	dec    eax
c000517a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000517d:	e9 b8 00 00 00       	jmp    c000523a <f_open+0x25f>
c0005182:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005186:	89 ea                	mov    edx,ebp
c0005188:	e8 99 fc ff ff       	call   c0004e26 <ld_clust.isra.0>
c000518d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005192:	89 c7                	mov    edi,eax
c0005194:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005197:	e8 85 cb ff ff       	call   c0001d21 <st_dword>
c000519c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051a0:	31 c9                	xor    ecx,ecx
c00051a2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00051a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051aa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00051ae:	e8 9c fc ff ff       	call   c0004e4f <st_clust.isra.1>
c00051b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051b7:	31 d2                	xor    edx,edx
c00051b9:	83 c0 1c             	add    eax,0x1c
c00051bc:	e8 60 cb ff ff       	call   c0001d21 <st_dword>
c00051c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c5:	85 ff                	test   edi,edi
c00051c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051cb:	74 75                	je     c0005242 <f_open+0x267>
c00051cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d1:	31 c9                	xor    ecx,ecx
c00051d3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051d6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051e1:	89 fa                	mov    edx,edi
c00051e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051e7:	e8 12 e3 ff ff       	call   c00034fe <remove_chain>
c00051ec:	89 c5                	mov    ebp,eax
c00051ee:	85 c0                	test   eax,eax
c00051f0:	0f 85 fe 01 00 00    	jne    c00053f4 <f_open+0x419>
c00051f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005202:	4f                   	dec    edi
c0005203:	e8 81 d2 ff ff       	call   c0002489 <move_window>
c0005208:	89 c5                	mov    ebp,eax
c000520a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000520e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0005211:	eb 27                	jmp    c000523a <f_open+0x25f>
c0005213:	85 ed                	test   ebp,ebp
c0005215:	0f 85 d9 01 00 00    	jne    c00053f4 <f_open+0x419>
c000521b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000521f:	bd 04 00 00 00       	mov    ebp,0x4
c0005224:	a8 10                	test   al,0x10
c0005226:	0f 85 c8 01 00 00    	jne    c00053f4 <f_open+0x419>
c000522c:	83 e7 02             	and    edi,0x2
c000522f:	74 11                	je     c0005242 <f_open+0x267>
c0005231:	bd 07 00 00 00       	mov    ebp,0x7
c0005236:	a8 01                	test   al,0x1
c0005238:	eb 02                	jmp    c000523c <f_open+0x261>
c000523a:	85 ed                	test   ebp,ebp
c000523c:	0f 85 b2 01 00 00    	jne    c00053f4 <f_open+0x419>
c0005242:	f7 c6 08 00 00 00    	test   esi,0x8
c0005248:	74 03                	je     c000524d <f_open+0x272>
c000524a:	83 ce 40             	or     esi,0x40
c000524d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005251:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005254:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005257:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000525a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000525d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005261:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005264:	8a 02                	mov    al,BYTE PTR [edx]
c0005266:	3c 04                	cmp    al,0x4
c0005268:	75 2a                	jne    c0005294 <f_open+0x2b9>
c000526a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000526e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005273:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000527a:	30 c0                	xor    al,al
c000527c:	09 c8                	or     eax,ecx
c000527e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005281:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005285:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005288:	8d 42 10             	lea    eax,[edx+0x10]
c000528b:	89 da                	mov    edx,ebx
c000528d:	e8 e5 fb ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0005292:	eb 1c                	jmp    c00052b0 <f_open+0x2d5>
c0005294:	89 fa                	mov    edx,edi
c0005296:	e8 8b fb ff ff       	call   c0004e26 <ld_clust.isra.0>
c000529b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000529e:	8d 47 1c             	lea    eax,[edi+0x1c]
c00052a1:	e8 12 ca ff ff       	call   c0001cb8 <ld_dword>
c00052a6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00052ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00052b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052b4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c00052bb:	89 03                	mov    DWORD PTR [ebx],eax
c00052bd:	31 d2                	xor    edx,edx
c00052bf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00052c3:	b9 00 02 00 00       	mov    ecx,0x200
c00052c8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052cc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052d0:	89 f0                	mov    eax,esi
c00052d2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052d9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052dc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052e3:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ed:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052f8:	e8 42 ca ff ff       	call   c0001d3f <mem_set>
c00052fd:	83 e6 20             	and    esi,0x20
c0005300:	75 07                	jne    c0005309 <f_open+0x32e>
c0005302:	31 ed                	xor    ebp,ebp
c0005304:	e9 eb 00 00 00       	jmp    c00053f4 <f_open+0x419>
c0005309:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000531b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000531f:	74 e1                	je     c0005302 <f_open+0x327>
c0005321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005329:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000532c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000532f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005333:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005336:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000533a:	31 ff                	xor    edi,edi
c000533c:	c1 e5 09             	shl    ebp,0x9
c000533f:	89 ee                	mov    esi,ebp
c0005341:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005345:	89 f8                	mov    eax,edi
c0005347:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000534b:	73 22                	jae    c000536f <f_open+0x394>
c000534d:	89 d8                	mov    eax,ebx
c000534f:	e8 bd dc ff ff       	call   c0003011 <get_fat>
c0005354:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005358:	89 c2                	mov    edx,eax
c000535a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000535e:	83 f8 01             	cmp    eax,0x1
c0005361:	76 10                	jbe    c0005373 <f_open+0x398>
c0005363:	83 f8 ff             	cmp    eax,0xffffffff
c0005366:	75 d9                	jne    c0005341 <f_open+0x366>
c0005368:	bd 01 00 00 00       	mov    ebp,0x1
c000536d:	eb 09                	jmp    c0005378 <f_open+0x39d>
c000536f:	31 ed                	xor    ebp,ebp
c0005371:	eb 05                	jmp    c0005378 <f_open+0x39d>
c0005373:	bd 02 00 00 00       	mov    ebp,0x2
c0005378:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000537b:	85 ed                	test   ebp,ebp
c000537d:	75 75                	jne    c00053f4 <f_open+0x419>
c000537f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005383:	25 ff 01 00 00       	and    eax,0x1ff
c0005388:	0f 84 74 ff ff ff    	je     c0005302 <f_open+0x327>
c000538e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005392:	bd 02 00 00 00       	mov    ebp,0x2
c0005397:	89 c8                	mov    eax,ecx
c0005399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000539d:	e8 a2 cb ff ff       	call   c0001f44 <clst2sect>
c00053a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053a6:	89 d7                	mov    edi,edx
c00053a8:	09 c7                	or     edi,eax
c00053aa:	74 48                	je     c00053f4 <f_open+0x419>
c00053ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00053b0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00053b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00053bc:	0f ac fe 09          	shrd   esi,edi,0x9
c00053c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00053c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053cf:	83 ec 0c             	sub    esp,0xc
c00053d2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053d5:	6a 01                	push   0x1
c00053d7:	52                   	push   edx
c00053d8:	50                   	push   eax
c00053d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e1:	50                   	push   eax
c00053e2:	e8 79 c8 ff ff       	call   c0001c60 <disk_read>
c00053e7:	83 c4 20             	add    esp,0x20
c00053ea:	85 c0                	test   eax,eax
c00053ec:	0f 95 c0             	setne  al
c00053ef:	0f b6 c0             	movzx  eax,al
c00053f2:	89 c5                	mov    ebp,eax
c00053f4:	83 ec 0c             	sub    esp,0xc
c00053f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053fb:	e8 f4 30 00 00       	call   c00084f4 <ff_memfree>
c0005400:	83 c4 10             	add    esp,0x10
c0005403:	85 ed                	test   ebp,ebp
c0005405:	74 06                	je     c000540d <f_open+0x432>
c0005407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000540d:	83 c4 7c             	add    esp,0x7c
c0005410:	89 e8                	mov    eax,ebp
c0005412:	5b                   	pop    ebx
c0005413:	5e                   	pop    esi
c0005414:	5f                   	pop    edi
c0005415:	5d                   	pop    ebp
c0005416:	c3                   	ret    

c0005417 <f_read>:
c0005417:	55                   	push   ebp
c0005418:	57                   	push   edi
c0005419:	56                   	push   esi
c000541a:	53                   	push   ebx
c000541b:	83 ec 2c             	sub    esp,0x2c
c000541e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005422:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005426:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000542c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005430:	89 d8                	mov    eax,ebx
c0005432:	e8 77 cf ff ff       	call   c00023ae <validate>
c0005437:	89 c5                	mov    ebp,eax
c0005439:	85 c0                	test   eax,eax
c000543b:	0f 85 4c 02 00 00    	jne    c000568d <f_read+0x276>
c0005441:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005445:	85 ed                	test   ebp,ebp
c0005447:	0f 85 40 02 00 00    	jne    c000568d <f_read+0x276>
c000544d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005451:	0f 84 31 02 00 00    	je     c0005688 <f_read+0x271>
c0005457:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000545a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000545d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005460:	bf 00 00 00 00       	mov    edi,0x0
c0005465:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005468:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000546c:	89 d1                	mov    ecx,edx
c000546e:	19 f9                	sbb    ecx,edi
c0005470:	0f 83 cf 00 00 00    	jae    c0005545 <f_read+0x12e>
c0005476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547a:	e9 c6 00 00 00       	jmp    c0005545 <f_read+0x12e>
c000547f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005482:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005485:	89 d0                	mov    eax,edx
c0005487:	25 ff 01 00 00       	and    eax,0x1ff
c000548c:	0f 85 c9 01 00 00    	jne    c000565b <f_read+0x244>
c0005492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005496:	89 d6                	mov    esi,edx
c0005498:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549c:	89 cf                	mov    edi,ecx
c000549e:	48                   	dec    eax
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	21 f0                	and    eax,esi
c00054a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054a9:	0f 84 a6 00 00 00    	je     c0005555 <f_read+0x13e>
c00054af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054b6:	89 c8                	mov    eax,ecx
c00054b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00054bb:	e8 84 ca ff ff       	call   c0001f44 <clst2sect>
c00054c0:	89 d7                	mov    edi,edx
c00054c2:	09 c7                	or     edi,eax
c00054c4:	0f 84 b4 00 00 00    	je     c000557e <f_read+0x167>
c00054ca:	31 ff                	xor    edi,edi
c00054cc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054d0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054d3:	01 c6                	add    esi,eax
c00054d5:	11 d7                	adc    edi,edx
c00054d7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054df:	0f 86 fd 00 00 00    	jbe    c00055e2 <f_read+0x1cb>
c00054e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ed:	c1 e8 09             	shr    eax,0x9
c00054f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054f3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054f7:	03 14 24             	add    edx,DWORD PTR [esp]
c00054fa:	39 c2                	cmp    edx,eax
c00054fc:	76 07                	jbe    c0005505 <f_read+0xee>
c00054fe:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005502:	89 04 24             	mov    DWORD PTR [esp],eax
c0005505:	83 ec 0c             	sub    esp,0xc
c0005508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000550c:	57                   	push   edi
c000550d:	56                   	push   esi
c000550e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005512:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005516:	50                   	push   eax
c0005517:	e8 44 c7 ff ff       	call   c0001c60 <disk_read>
c000551c:	83 c4 20             	add    esp,0x20
c000551f:	85 c0                	test   eax,eax
c0005521:	75 6e                	jne    c0005591 <f_read+0x17a>
c0005523:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005527:	78 7e                	js     c00055a7 <f_read+0x190>
c0005529:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000552c:	c1 e6 09             	shl    esi,0x9
c000552f:	31 ff                	xor    edi,edi
c0005531:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005535:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005539:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000553d:	01 30                	add    DWORD PTR [eax],esi
c000553f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005542:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005545:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000554a:	0f 85 2f ff ff ff    	jne    c000547f <f_read+0x68>
c0005550:	e9 38 01 00 00       	jmp    c000568d <f_read+0x276>
c0005555:	89 c8                	mov    eax,ecx
c0005557:	09 d0                	or     eax,edx
c0005559:	75 05                	jne    c0005560 <f_read+0x149>
c000555b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000555e:	eb 19                	jmp    c0005579 <f_read+0x162>
c0005560:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005564:	74 09                	je     c000556f <f_read+0x158>
c0005566:	89 d8                	mov    eax,ebx
c0005568:	e8 f8 c9 ff ff       	call   c0001f65 <clmt_clust>
c000556d:	eb 0a                	jmp    c0005579 <f_read+0x162>
c000556f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005572:	89 d8                	mov    eax,ebx
c0005574:	e8 98 da ff ff       	call   c0003011 <get_fat>
c0005579:	83 f8 01             	cmp    eax,0x1
c000557c:	77 0e                	ja     c000558c <f_read+0x175>
c000557e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005582:	bd 02 00 00 00       	mov    ebp,0x2
c0005587:	e9 01 01 00 00       	jmp    c000568d <f_read+0x276>
c000558c:	83 f8 ff             	cmp    eax,0xffffffff
c000558f:	75 0e                	jne    c000559f <f_read+0x188>
c0005591:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005595:	bd 01 00 00 00       	mov    ebp,0x1
c000559a:	e9 ee 00 00 00       	jmp    c000568d <f_read+0x276>
c000559f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055a2:	e9 08 ff ff ff       	jmp    c00054af <f_read+0x98>
c00055a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055ad:	29 f0                	sub    eax,esi
c00055af:	19 fa                	sbb    edx,edi
c00055b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00055b4:	89 d7                	mov    edi,edx
c00055b6:	ba 00 00 00 00       	mov    edx,0x0
c00055bb:	89 f9                	mov    ecx,edi
c00055bd:	19 d1                	sbb    ecx,edx
c00055bf:	0f 83 64 ff ff ff    	jae    c0005529 <f_read+0x112>
c00055c5:	89 c7                	mov    edi,eax
c00055c7:	8d 53 50             	lea    edx,[ebx+0x50]
c00055ca:	c1 e7 09             	shl    edi,0x9
c00055cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055d1:	b9 00 02 00 00       	mov    ecx,0x200
c00055d6:	01 f8                	add    eax,edi
c00055d8:	e8 4d c7 ff ff       	call   c0001d2a <mem_cpy>
c00055dd:	e9 47 ff ff ff       	jmp    c0005529 <f_read+0x112>
c00055e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055e5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00055eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ef:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055f3:	75 05                	jne    c00055fa <f_read+0x1e3>
c00055f5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055f8:	74 5b                	je     c0005655 <f_read+0x23e>
c00055fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00055fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005605:	79 2a                	jns    c0005631 <f_read+0x21a>
c0005607:	83 ec 0c             	sub    esp,0xc
c000560a:	6a 01                	push   0x1
c000560c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005614:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005618:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000561c:	50                   	push   eax
c000561d:	e8 54 c6 ff ff       	call   c0001c76 <disk_write>
c0005622:	83 c4 20             	add    esp,0x20
c0005625:	85 c0                	test   eax,eax
c0005627:	0f 85 64 ff ff ff    	jne    c0005591 <f_read+0x17a>
c000562d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005631:	83 ec 0c             	sub    esp,0xc
c0005634:	6a 01                	push   0x1
c0005636:	57                   	push   edi
c0005637:	56                   	push   esi
c0005638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000563c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005640:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005644:	50                   	push   eax
c0005645:	e8 16 c6 ff ff       	call   c0001c60 <disk_read>
c000564a:	83 c4 20             	add    esp,0x20
c000564d:	85 c0                	test   eax,eax
c000564f:	0f 85 3c ff ff ff    	jne    c0005591 <f_read+0x17a>
c0005655:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005658:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000565b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000565e:	ba 00 02 00 00       	mov    edx,0x200
c0005663:	25 ff 01 00 00       	and    eax,0x1ff
c0005668:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000566c:	29 c2                	sub    edx,eax
c000566e:	39 d6                	cmp    esi,edx
c0005670:	76 02                	jbe    c0005674 <f_read+0x25d>
c0005672:	89 d6                	mov    esi,edx
c0005674:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005678:	89 f1                	mov    ecx,esi
c000567a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000567e:	e8 a7 c6 ff ff       	call   c0001d2a <mem_cpy>
c0005683:	e9 a7 fe ff ff       	jmp    c000552f <f_read+0x118>
c0005688:	bd 07 00 00 00       	mov    ebp,0x7
c000568d:	83 c4 2c             	add    esp,0x2c
c0005690:	89 e8                	mov    eax,ebp
c0005692:	5b                   	pop    ebx
c0005693:	5e                   	pop    esi
c0005694:	5f                   	pop    edi
c0005695:	5d                   	pop    ebp
c0005696:	c3                   	ret    

c0005697 <f_write>:
c0005697:	55                   	push   ebp
c0005698:	57                   	push   edi
c0005699:	56                   	push   esi
c000569a:	53                   	push   ebx
c000569b:	83 ec 2c             	sub    esp,0x2c
c000569e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00056a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00056ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00056b0:	89 d8                	mov    eax,ebx
c00056b2:	e8 f7 cc ff ff       	call   c00023ae <validate>
c00056b7:	89 c5                	mov    ebp,eax
c00056b9:	85 c0                	test   eax,eax
c00056bb:	0f 85 86 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056c1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00056c5:	85 ed                	test   ebp,ebp
c00056c7:	0f 85 7a 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056cd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056d1:	0f 84 6b 02 00 00    	je     c0005942 <f_write+0x2ab>
c00056d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056db:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056de:	0f 84 43 01 00 00    	je     c0005827 <f_write+0x190>
c00056e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056e7:	89 c1                	mov    ecx,eax
c00056e9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ed:	0f 83 34 01 00 00    	jae    c0005827 <f_write+0x190>
c00056f3:	f7 d0                	not    eax
c00056f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056f9:	e9 29 01 00 00       	jmp    c0005827 <f_write+0x190>
c00056fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005701:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005704:	89 d0                	mov    eax,edx
c0005706:	25 ff 01 00 00       	and    eax,0x1ff
c000570b:	0f 85 00 02 00 00    	jne    c0005911 <f_write+0x27a>
c0005711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005715:	89 d6                	mov    esi,edx
c0005717:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000571b:	89 cf                	mov    edi,ecx
c000571d:	48                   	dec    eax
c000571e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005722:	21 f0                	and    eax,esi
c0005724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005728:	0f 84 06 01 00 00    	je     c0005834 <f_write+0x19d>
c000572e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005732:	0f 88 6e 01 00 00    	js     c00058a6 <f_write+0x20f>
c0005738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000573c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000573f:	89 c8                	mov    eax,ecx
c0005741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005745:	e8 fa c7 ff ff       	call   c0001f44 <clst2sect>
c000574a:	89 d1                	mov    ecx,edx
c000574c:	09 c1                	or     ecx,eax
c000574e:	0f 84 1c 01 00 00    	je     c0005870 <f_write+0x1d9>
c0005754:	31 ff                	xor    edi,edi
c0005756:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000575a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000575e:	01 c6                	add    esi,eax
c0005760:	11 d7                	adc    edi,edx
c0005762:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000576a:	0f 86 63 01 00 00    	jbe    c00058d3 <f_write+0x23c>
c0005770:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005778:	c1 e8 09             	shr    eax,0x9
c000577b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000577f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005783:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005787:	39 c2                	cmp    edx,eax
c0005789:	76 08                	jbe    c0005793 <f_write+0xfc>
c000578b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000578f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000579a:	57                   	push   edi
c000579b:	56                   	push   esi
c000579c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00057a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a4:	50                   	push   eax
c00057a5:	e8 cc c4 ff ff       	call   c0001c76 <disk_write>
c00057aa:	83 c4 20             	add    esp,0x20
c00057ad:	85 c0                	test   eax,eax
c00057af:	0f 85 ce 00 00 00    	jne    c0005883 <f_write+0x1ec>
c00057b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00057b8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00057bb:	29 f0                	sub    eax,esi
c00057bd:	19 fa                	sbb    edx,edi
c00057bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00057c3:	89 d7                	mov    edi,edx
c00057c5:	ba 00 00 00 00       	mov    edx,0x0
c00057ca:	89 f9                	mov    ecx,edi
c00057cc:	19 d1                	sbb    ecx,edx
c00057ce:	73 1c                	jae    c00057ec <f_write+0x155>
c00057d0:	89 c7                	mov    edi,eax
c00057d2:	b9 00 02 00 00       	mov    ecx,0x200
c00057d7:	c1 e7 09             	shl    edi,0x9
c00057da:	8d 43 50             	lea    eax,[ebx+0x50]
c00057dd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057e1:	89 fa                	mov    edx,edi
c00057e3:	e8 42 c5 ff ff       	call   c0001d2a <mem_cpy>
c00057e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057f0:	c1 e6 09             	shl    esi,0x9
c00057f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057f7:	31 ff                	xor    edi,edi
c00057f9:	01 30                	add    DWORD PTR [eax],esi
c00057fb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057ff:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005809:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000580c:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000580f:	89 c1                	mov    ecx,eax
c0005811:	39 f2                	cmp    edx,esi
c0005813:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005816:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005819:	19 f9                	sbb    ecx,edi
c000581b:	73 04                	jae    c0005821 <f_write+0x18a>
c000581d:	89 f2                	mov    edx,esi
c000581f:	89 f8                	mov    eax,edi
c0005821:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005824:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005827:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000582c:	0f 85 cc fe ff ff    	jne    c00056fe <f_write+0x67>
c0005832:	eb 2e                	jmp    c0005862 <f_write+0x1cb>
c0005834:	89 c8                	mov    eax,ecx
c0005836:	09 d0                	or     eax,edx
c0005838:	75 0b                	jne    c0005845 <f_write+0x1ae>
c000583a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000583d:	31 d2                	xor    edx,edx
c000583f:	85 c0                	test   eax,eax
c0005841:	75 28                	jne    c000586b <f_write+0x1d4>
c0005843:	eb 12                	jmp    c0005857 <f_write+0x1c0>
c0005845:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005849:	74 09                	je     c0005854 <f_write+0x1bd>
c000584b:	89 d8                	mov    eax,ebx
c000584d:	e8 13 c7 ff ff       	call   c0001f65 <clmt_clust>
c0005852:	eb 0a                	jmp    c000585e <f_write+0x1c7>
c0005854:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005857:	89 d8                	mov    eax,ebx
c0005859:	e8 a1 da ff ff       	call   c00032ff <create_chain>
c000585e:	85 c0                	test   eax,eax
c0005860:	75 09                	jne    c000586b <f_write+0x1d4>
c0005862:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005866:	e9 dc 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000586b:	83 f8 01             	cmp    eax,0x1
c000586e:	75 0e                	jne    c000587e <f_write+0x1e7>
c0005870:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005874:	bd 02 00 00 00       	mov    ebp,0x2
c0005879:	e9 c9 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000587e:	83 f8 ff             	cmp    eax,0xffffffff
c0005881:	75 0e                	jne    c0005891 <f_write+0x1fa>
c0005883:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005887:	bd 01 00 00 00       	mov    ebp,0x1
c000588c:	e9 b6 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c0005891:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005894:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005898:	0f 85 90 fe ff ff    	jne    c000572e <f_write+0x97>
c000589e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00058a1:	e9 88 fe ff ff       	jmp    c000572e <f_write+0x97>
c00058a6:	83 ec 0c             	sub    esp,0xc
c00058a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ac:	6a 01                	push   0x1
c00058ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00058b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00058b4:	50                   	push   eax
c00058b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00058b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00058bd:	50                   	push   eax
c00058be:	e8 b3 c3 ff ff       	call   c0001c76 <disk_write>
c00058c3:	83 c4 20             	add    esp,0x20
c00058c6:	85 c0                	test   eax,eax
c00058c8:	75 b9                	jne    c0005883 <f_write+0x1ec>
c00058ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058ce:	e9 65 fe ff ff       	jmp    c0005738 <f_write+0xa1>
c00058d3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058d6:	75 05                	jne    c00058dd <f_write+0x246>
c00058d8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058db:	74 2e                	je     c000590b <f_write+0x274>
c00058dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058e3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058e6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058e9:	73 20                	jae    c000590b <f_write+0x274>
c00058eb:	83 ec 0c             	sub    esp,0xc
c00058ee:	8d 43 50             	lea    eax,[ebx+0x50]
c00058f1:	6a 01                	push   0x1
c00058f3:	57                   	push   edi
c00058f4:	56                   	push   esi
c00058f5:	50                   	push   eax
c00058f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058fa:	50                   	push   eax
c00058fb:	e8 60 c3 ff ff       	call   c0001c60 <disk_read>
c0005900:	83 c4 20             	add    esp,0x20
c0005903:	85 c0                	test   eax,eax
c0005905:	0f 85 78 ff ff ff    	jne    c0005883 <f_write+0x1ec>
c000590b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000590e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005911:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005914:	ba 00 02 00 00       	mov    edx,0x200
c0005919:	25 ff 01 00 00       	and    eax,0x1ff
c000591e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005922:	29 c2                	sub    edx,eax
c0005924:	39 d6                	cmp    esi,edx
c0005926:	76 02                	jbe    c000592a <f_write+0x293>
c0005928:	89 d6                	mov    esi,edx
c000592a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000592e:	89 f1                	mov    ecx,esi
c0005930:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005934:	e8 f1 c3 ff ff       	call   c0001d2a <mem_cpy>
c0005939:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000593d:	e9 b1 fe ff ff       	jmp    c00057f3 <f_write+0x15c>
c0005942:	bd 07 00 00 00       	mov    ebp,0x7
c0005947:	83 c4 2c             	add    esp,0x2c
c000594a:	89 e8                	mov    eax,ebp
c000594c:	5b                   	pop    ebx
c000594d:	5e                   	pop    esi
c000594e:	5f                   	pop    edi
c000594f:	5d                   	pop    ebp
c0005950:	c3                   	ret    

c0005951 <f_sync>:
c0005951:	56                   	push   esi
c0005952:	53                   	push   ebx
c0005953:	83 ec 64             	sub    esp,0x64
c0005956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000595a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 49 ca ff ff       	call   c00023ae <validate>
c0005965:	85 c0                	test   eax,eax
c0005967:	0f 85 ba 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c000596d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005970:	f6 c2 40             	test   dl,0x40
c0005973:	0f 84 ae 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005979:	84 d2                	test   dl,dl
c000597b:	79 33                	jns    c00059b0 <f_sync+0x5f>
c000597d:	83 ec 0c             	sub    esp,0xc
c0005980:	8d 43 50             	lea    eax,[ebx+0x50]
c0005983:	6a 01                	push   0x1
c0005985:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005988:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000598b:	50                   	push   eax
c000598c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005990:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005994:	50                   	push   eax
c0005995:	e8 dc c2 ff ff       	call   c0001c76 <disk_write>
c000599a:	83 c4 20             	add    esp,0x20
c000599d:	89 c2                	mov    edx,eax
c000599f:	b8 01 00 00 00       	mov    eax,0x1
c00059a4:	85 d2                	test   edx,edx
c00059a6:	0f 85 7b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059ac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00059b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00059b7:	0f 85 11 01 00 00    	jne    c0005ace <f_sync+0x17d>
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 13 d6 ff ff       	call   c0002fd7 <fill_first_frag>
c00059c4:	85 c0                	test   eax,eax
c00059c6:	0f 85 5b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059cc:	83 c9 ff             	or     ecx,0xffffffff
c00059cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059d2:	89 d8                	mov    eax,ebx
c00059d4:	e8 c9 d5 ff ff       	call   c0002fa2 <fill_last_frag>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 46 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059e1:	83 ec 0c             	sub    esp,0xc
c00059e4:	68 60 04 00 00       	push   0x460
c00059e9:	e8 f0 2a 00 00       	call   c00084de <ff_memalloc>
c00059ee:	83 c4 10             	add    esp,0x10
c00059f1:	89 c6                	mov    esi,eax
c00059f3:	b8 11 00 00 00       	mov    eax,0x11
c00059f8:	85 f6                	test   esi,esi
c00059fa:	0f 84 27 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a04:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005a0a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005a0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005a10:	89 da                	mov    edx,ebx
c0005a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a16:	e8 af df ff ff       	call   c00039ca <load_obj_xdir>
c0005a1b:	85 c0                	test   eax,eax
c0005a1d:	0f 85 95 00 00 00    	jne    c0005ab8 <f_sync+0x167>
c0005a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a2a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a2e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a31:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a34:	83 ca 01             	or     edx,0x1
c0005a37:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a3a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a40:	83 c0 34             	add    eax,0x34
c0005a43:	e8 d9 c2 ff ff       	call   c0001d21 <st_dword>
c0005a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a52:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a55:	83 c0 38             	add    eax,0x38
c0005a58:	e8 c7 c2 ff ff       	call   c0001d24 <st_qword>
c0005a5d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a6a:	83 c0 28             	add    eax,0x28
c0005a6d:	e8 b2 c2 ff ff       	call   c0001d24 <st_qword>
c0005a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a76:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a7e:	83 c0 0c             	add    eax,0xc
c0005a81:	e8 9b c2 ff ff       	call   c0001d21 <st_dword>
c0005a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a8d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a91:	31 d2                	xor    edx,edx
c0005a93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a96:	83 c0 10             	add    eax,0x10
c0005a99:	e8 83 c2 ff ff       	call   c0001d21 <st_dword>
c0005a9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005aa2:	e8 62 e1 ff ff       	call   c0003c09 <store_xdir>
c0005aa7:	85 c0                	test   eax,eax
c0005aa9:	75 0d                	jne    c0005ab8 <f_sync+0x167>
c0005aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aaf:	e8 00 eb ff ff       	call   c00045b4 <sync_fs>
c0005ab4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	56                   	push   esi
c0005ac0:	e8 2f 2a 00 00       	call   c00084f4 <ff_memfree>
c0005ac5:	83 c4 10             	add    esp,0x10
c0005ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005acc:	eb 59                	jmp    c0005b27 <f_sync+0x1d6>
c0005ace:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005ad1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005ad4:	e8 b0 c9 ff ff       	call   c0002489 <move_window>
c0005ad9:	85 c0                	test   eax,eax
c0005adb:	75 4a                	jne    c0005b27 <f_sync+0x1d6>
c0005add:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005ae0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005ae4:	89 f2                	mov    edx,esi
c0005ae6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aeb:	e8 5f f3 ff ff       	call   c0004e4f <st_clust.isra.1>
c0005af0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af3:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005af6:	e8 26 c2 ff ff       	call   c0001d21 <st_dword>
c0005afb:	8d 46 16             	lea    eax,[esi+0x16]
c0005afe:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b03:	e8 19 c2 ff ff       	call   c0001d21 <st_dword>
c0005b08:	8d 46 12             	lea    eax,[esi+0x12]
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	e8 0b c2 ff ff       	call   c0001d1d <st_word>
c0005b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b16:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b1e:	e8 91 ea ff ff       	call   c00045b4 <sync_fs>
c0005b23:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b27:	83 c4 64             	add    esp,0x64
c0005b2a:	5b                   	pop    ebx
c0005b2b:	5e                   	pop    esi
c0005b2c:	c3                   	ret    

c0005b2d <f_close>:
c0005b2d:	53                   	push   ebx
c0005b2e:	83 ec 24             	sub    esp,0x24
c0005b31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b35:	53                   	push   ebx
c0005b36:	e8 16 fe ff ff       	call   c0005951 <f_sync>
c0005b3b:	83 c4 10             	add    esp,0x10
c0005b3e:	85 c0                	test   eax,eax
c0005b40:	75 15                	jne    c0005b57 <f_close+0x2a>
c0005b42:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b46:	89 d8                	mov    eax,ebx
c0005b48:	e8 61 c8 ff ff       	call   c00023ae <validate>
c0005b4d:	85 c0                	test   eax,eax
c0005b4f:	75 06                	jne    c0005b57 <f_close+0x2a>
c0005b51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b57:	83 c4 18             	add    esp,0x18
c0005b5a:	5b                   	pop    ebx
c0005b5b:	c3                   	ret    

c0005b5c <f_lseek>:
c0005b5c:	55                   	push   ebp
c0005b5d:	57                   	push   edi
c0005b5e:	56                   	push   esi
c0005b5f:	53                   	push   ebx
c0005b60:	83 ec 3c             	sub    esp,0x3c
c0005b63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b6b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b7c:	e8 2d c8 ff ff       	call   c00023ae <validate>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	85 c0                	test   eax,eax
c0005b87:	0f 85 7a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b8d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b95:	85 c0                	test   eax,eax
c0005b97:	0f 85 6a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ba1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005ba4:	74 0c                	je     c0005bb2 <f_lseek+0x56>
c0005ba6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005ba9:	85 c0                	test   eax,eax
c0005bab:	75 1f                	jne    c0005bcc <f_lseek+0x70>
c0005bad:	e9 b5 01 00 00       	jmp    c0005d67 <f_lseek+0x20b>
c0005bb2:	83 c9 ff             	or     ecx,0xffffffff
c0005bb5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005bb8:	89 d8                	mov    eax,ebx
c0005bba:	e8 e3 d3 ff ff       	call   c0002fa2 <fill_last_frag>
c0005bbf:	85 c0                	test   eax,eax
c0005bc1:	74 e3                	je     c0005ba6 <f_lseek+0x4a>
c0005bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005bc7:	e9 3b 04 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005bcc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bd1:	0f 85 ac 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005bd7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bdb:	0f 85 a2 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005be1:	8d 78 04             	lea    edi,[eax+0x4]
c0005be4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005be9:	be 02 00 00 00       	mov    esi,0x2
c0005bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	74 73                	je     c0005c69 <f_lseek+0x10d>
c0005bf6:	89 e9                	mov    ecx,ebp
c0005bf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bff:	ff 04 24             	inc    DWORD PTR [esp]
c0005c02:	89 ca                	mov    edx,ecx
c0005c04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c08:	89 d8                	mov    eax,ebx
c0005c0a:	e8 02 d4 ff ff       	call   c0003011 <get_fat>
c0005c0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c13:	83 f8 01             	cmp    eax,0x1
c0005c16:	77 11                	ja     c0005c29 <f_lseek+0xcd>
c0005c18:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005c1c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005c24:	e9 de 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c29:	83 f8 ff             	cmp    eax,0xffffffff
c0005c2c:	75 11                	jne    c0005c3f <f_lseek+0xe3>
c0005c2e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c32:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c3a:	e9 c8 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c3f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c42:	89 c1                	mov    ecx,eax
c0005c44:	39 c2                	cmp    edx,eax
c0005c46:	74 b7                	je     c0005bff <f_lseek+0xa3>
c0005c48:	83 c6 02             	add    esi,0x2
c0005c4b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c4f:	72 0b                	jb     c0005c5c <f_lseek+0x100>
c0005c51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c54:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c57:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c59:	83 c7 08             	add    edi,0x8
c0005c5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c60:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c63:	76 04                	jbe    c0005c69 <f_lseek+0x10d>
c0005c65:	89 c5                	mov    ebp,eax
c0005c67:	eb 8d                	jmp    c0005bf6 <f_lseek+0x9a>
c0005c69:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c6c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c70:	89 30                	mov    DWORD PTR [eax],esi
c0005c72:	0f 87 87 03 00 00    	ja     c0005fff <f_lseek+0x4a3>
c0005c78:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c7e:	e9 84 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c95:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c9c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005ca0:	73 0f                	jae    c0005cb1 <f_lseek+0x155>
c0005ca2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005cad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005cbc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005cc7:	0f 84 3a 03 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005ccd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005cd5:	83 c6 ff             	add    esi,0xffffffff
c0005cd8:	89 d8                	mov    eax,ebx
c0005cda:	83 d7 ff             	adc    edi,0xffffffff
c0005cdd:	89 f2                	mov    edx,esi
c0005cdf:	89 f9                	mov    ecx,edi
c0005ce1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ce8:	e8 78 c2 ff ff       	call   c0001f65 <clmt_clust>
c0005ced:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cf1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cf4:	89 c2                	mov    edx,eax
c0005cf6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cfa:	89 c8                	mov    eax,ecx
c0005cfc:	e8 43 c2 ff ff       	call   c0001f44 <clst2sect>
c0005d01:	89 d7                	mov    edi,edx
c0005d03:	09 c7                	or     edi,eax
c0005d05:	0f 84 0d ff ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005d0b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005d0f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005d15:	0f 84 ec 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005d23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d26:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d2e:	4d                   	dec    ebp
c0005d2f:	31 ff                	xor    edi,edi
c0005d31:	21 ee                	and    esi,ebp
c0005d33:	01 c6                	add    esi,eax
c0005d35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	39 fa                	cmp    edx,edi
c0005d3f:	75 08                	jne    c0005d49 <f_lseek+0x1ed>
c0005d41:	39 f0                	cmp    eax,esi
c0005d43:	0f 84 be 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d49:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d50:	0f 89 80 02 00 00    	jns    c0005fd6 <f_lseek+0x47a>
c0005d56:	83 ec 0c             	sub    esp,0xc
c0005d59:	6a 01                	push   0x1
c0005d5b:	52                   	push   edx
c0005d5c:	50                   	push   eax
c0005d5d:	55                   	push   ebp
c0005d5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d62:	e9 5a 02 00 00       	jmp    c0005fc1 <f_lseek+0x465>
c0005d67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d6b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d6e:	74 16                	je     c0005d86 <f_lseek+0x22a>
c0005d70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d75:	76 0f                	jbe    c0005d86 <f_lseek+0x22a>
c0005d77:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d7e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d8c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d8f:	89 c7                	mov    edi,eax
c0005d91:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d95:	73 0d                	jae    c0005da4 <f_lseek+0x248>
c0005d97:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d9b:	75 07                	jne    c0005da4 <f_lseek+0x248>
c0005d9d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005da0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005da4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005da7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005daa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005dae:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005db5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005dbc:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005dbf:	75 09                	jne    c0005dca <f_lseek+0x26e>
c0005dc1:	31 f6                	xor    esi,esi
c0005dc3:	31 ff                	xor    edi,edi
c0005dc5:	e9 af 01 00 00       	jmp    c0005f79 <f_lseek+0x41d>
c0005dca:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005dce:	89 d7                	mov    edi,edx
c0005dd0:	c1 e1 09             	shl    ecx,0x9
c0005dd3:	09 c7                	or     edi,eax
c0005dd5:	89 cd                	mov    ebp,ecx
c0005dd7:	74 6d                	je     c0005e46 <f_lseek+0x2ea>
c0005dd9:	83 c0 ff             	add    eax,0xffffffff
c0005ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005de0:	83 d2 ff             	adc    edx,0xffffffff
c0005de3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005de6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dea:	83 c0 ff             	add    eax,0xffffffff
c0005ded:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005df1:	83 d2 ff             	adc    edx,0xffffffff
c0005df4:	31 ff                	xor    edi,edi
c0005df6:	57                   	push   edi
c0005df7:	51                   	push   ecx
c0005df8:	52                   	push   edx
c0005df9:	50                   	push   eax
c0005dfa:	e8 7d 88 01 00       	call   c001e67c <__udivdi3>
c0005dff:	83 c4 10             	add    esp,0x10
c0005e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005e06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005e0a:	57                   	push   edi
c0005e0b:	55                   	push   ebp
c0005e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e14:	e8 63 88 01 00       	call   c001e67c <__udivdi3>
c0005e19:	83 c4 10             	add    esp,0x10
c0005e1c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005e20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e24:	19 d1                	sbb    ecx,edx
c0005e26:	72 1e                	jb     c0005e46 <f_lseek+0x2ea>
c0005e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e2c:	89 e9                	mov    ecx,ebp
c0005e2e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e31:	f7 d9                	neg    ecx
c0005e33:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e36:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e3a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e3d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e40:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e44:	eb 28                	jmp    c0005e6e <f_lseek+0x312>
c0005e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e49:	85 c0                	test   eax,eax
c0005e4b:	75 1e                	jne    c0005e6b <f_lseek+0x30f>
c0005e4d:	31 d2                	xor    edx,edx
c0005e4f:	89 d8                	mov    eax,ebx
c0005e51:	e8 a9 d4 ff ff       	call   c00032ff <create_chain>
c0005e56:	83 f8 01             	cmp    eax,0x1
c0005e59:	0f 84 b9 fd ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005e5f:	83 f8 ff             	cmp    eax,0xffffffff
c0005e62:	0f 84 c6 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005e68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e6e:	85 c0                	test   eax,eax
c0005e70:	0f 84 4b ff ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005e76:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e82:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e89:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e8c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e8f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e93:	0f 83 9d 00 00 00    	jae    c0005f36 <f_lseek+0x3da>
c0005e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005ea1:	29 34 24             	sub    DWORD PTR [esp],esi
c0005ea4:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005ea8:	01 f2                	add    edx,esi
c0005eaa:	11 f9                	adc    ecx,edi
c0005eac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005eb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005eb4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005eb7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005eba:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ebd:	f6 c1 02             	test   cl,0x2
c0005ec0:	74 35                	je     c0005ef7 <f_lseek+0x39b>
c0005ec2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ec6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ec9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ecc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ed0:	73 16                	jae    c0005ee8 <f_lseek+0x38c>
c0005ed2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ed6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eda:	88 ca                	mov    dl,cl
c0005edc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005edf:	83 ca 40             	or     edx,0x40
c0005ee2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ee5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ee8:	89 c2                	mov    edx,eax
c0005eea:	89 d8                	mov    eax,ebx
c0005eec:	e8 0e d4 ff ff       	call   c00032ff <create_chain>
c0005ef1:	85 c0                	test   eax,eax
c0005ef3:	75 0b                	jne    c0005f00 <f_lseek+0x3a4>
c0005ef5:	eb 30                	jmp    c0005f27 <f_lseek+0x3cb>
c0005ef7:	89 c2                	mov    edx,eax
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 11 d1 ff ff       	call   c0003011 <get_fat>
c0005f00:	83 f8 ff             	cmp    eax,0xffffffff
c0005f03:	0f 84 25 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005f09:	83 f8 01             	cmp    eax,0x1
c0005f0c:	0f 86 06 fd ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005f16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005f19:	0f 86 f9 fc ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f1f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005f22:	e9 5b ff ff ff       	jmp    c0005e82 <f_lseek+0x326>
c0005f27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f39:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f3d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f43:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f46:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f4c:	0f 84 6f fe ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005f52:	89 c2                	mov    edx,eax
c0005f54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f58:	e8 e7 bf ff ff       	call   c0001f44 <clst2sect>
c0005f5d:	89 d7                	mov    edi,edx
c0005f5f:	09 c7                	or     edi,eax
c0005f61:	0f 84 b1 fc ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005f67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f6e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f72:	c1 ef 09             	shr    edi,0x9
c0005f75:	01 c6                	add    esi,eax
c0005f77:	11 d7                	adc    edi,edx
c0005f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f7c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f82:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f85:	19 d1                	sbb    ecx,edx
c0005f87:	73 0a                	jae    c0005f93 <f_lseek+0x437>
c0005f89:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f8c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f8f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f93:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f98:	74 6d                	je     c0006007 <f_lseek+0x4ab>
c0005f9a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005fa0:	39 fa                	cmp    edx,edi
c0005fa2:	75 04                	jne    c0005fa8 <f_lseek+0x44c>
c0005fa4:	39 f0                	cmp    eax,esi
c0005fa6:	74 5f                	je     c0006007 <f_lseek+0x4ab>
c0005fa8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005fab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005faf:	79 25                	jns    c0005fd6 <f_lseek+0x47a>
c0005fb1:	83 ec 0c             	sub    esp,0xc
c0005fb4:	6a 01                	push   0x1
c0005fb6:	52                   	push   edx
c0005fb7:	50                   	push   eax
c0005fb8:	55                   	push   ebp
c0005fb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc1:	50                   	push   eax
c0005fc2:	e8 af bc ff ff       	call   c0001c76 <disk_write>
c0005fc7:	83 c4 20             	add    esp,0x20
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	0f 85 5c fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005fd2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fd6:	83 ec 0c             	sub    esp,0xc
c0005fd9:	6a 01                	push   0x1
c0005fdb:	57                   	push   edi
c0005fdc:	56                   	push   esi
c0005fdd:	55                   	push   ebp
c0005fde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fe2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fe6:	50                   	push   eax
c0005fe7:	e8 74 bc ff ff       	call   c0001c60 <disk_read>
c0005fec:	83 c4 20             	add    esp,0x20
c0005fef:	85 c0                	test   eax,eax
c0005ff1:	0f 85 37 fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005ff7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ffa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ffd:	eb 08                	jmp    c0006007 <f_lseek+0x4ab>
c0005fff:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0006007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000600b:	83 c4 3c             	add    esp,0x3c
c000600e:	5b                   	pop    ebx
c000600f:	5e                   	pop    esi
c0006010:	5f                   	pop    edi
c0006011:	5d                   	pop    ebp
c0006012:	c3                   	ret    

c0006013 <f_opendir>:
c0006013:	56                   	push   esi
c0006014:	b8 09 00 00 00       	mov    eax,0x9
c0006019:	53                   	push   ebx
c000601a:	83 ec 24             	sub    esp,0x24
c000601d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006021:	85 db                	test   ebx,ebx
c0006023:	0f 84 e6 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000602f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006033:	e8 03 c7 ff ff       	call   c000273b <mount_volume>
c0006038:	85 c0                	test   eax,eax
c000603a:	0f 85 c9 00 00 00    	jne    c0006109 <f_opendir+0xf6>
c0006040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006044:	83 ec 0c             	sub    esp,0xc
c0006047:	89 03                	mov    DWORD PTR [ebx],eax
c0006049:	68 60 04 00 00       	push   0x460
c000604e:	e8 8b 24 00 00       	call   c00084de <ff_memalloc>
c0006053:	83 c4 10             	add    esp,0x10
c0006056:	89 c6                	mov    esi,eax
c0006058:	b8 11 00 00 00       	mov    eax,0x11
c000605d:	85 f6                	test   esi,esi
c000605f:	0f 84 aa 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006069:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000606f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006072:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006075:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006079:	89 d8                	mov    eax,ebx
c000607b:	e8 31 ee ff ff       	call   c0004eb1 <follow_path>
c0006080:	85 c0                	test   eax,eax
c0006082:	75 61                	jne    c00060e5 <f_opendir+0xd2>
c0006084:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006088:	78 46                	js     c00060d0 <f_opendir+0xbd>
c000608a:	b8 05 00 00 00       	mov    eax,0x5
c000608f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006093:	74 50                	je     c00060e5 <f_opendir+0xd2>
c0006095:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006099:	8a 01                	mov    al,BYTE PTR [ecx]
c000609b:	3c 04                	cmp    al,0x4
c000609d:	75 26                	jne    c00060c5 <f_opendir+0xb2>
c000609f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00060a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00060a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00060a8:	30 d2                	xor    dl,dl
c00060aa:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c00060ae:	09 c2                	or     edx,eax
c00060b0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00060b3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00060b6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00060b9:	89 da                	mov    edx,ebx
c00060bb:	8d 41 10             	lea    eax,[ecx+0x10]
c00060be:	e8 b4 ed ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00060c3:	eb 0b                	jmp    c00060d0 <f_opendir+0xbd>
c00060c5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060c8:	e8 59 ed ff ff       	call   c0004e26 <ld_clust.isra.0>
c00060cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060de:	89 d8                	mov    eax,ebx
c00060e0:	e8 22 d1 ff ff       	call   c0003207 <dir_sdi>
c00060e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e9:	83 ec 0c             	sub    esp,0xc
c00060ec:	56                   	push   esi
c00060ed:	e8 02 24 00 00       	call   c00084f4 <ff_memfree>
c00060f2:	83 c4 10             	add    esp,0x10
c00060f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f9:	83 f8 04             	cmp    eax,0x4
c00060fc:	74 06                	je     c0006104 <f_opendir+0xf1>
c00060fe:	85 c0                	test   eax,eax
c0006100:	74 0d                	je     c000610f <f_opendir+0xfc>
c0006102:	eb 05                	jmp    c0006109 <f_opendir+0xf6>
c0006104:	b8 05 00 00 00       	mov    eax,0x5
c0006109:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610f:	83 c4 24             	add    esp,0x24
c0006112:	5b                   	pop    ebx
c0006113:	5e                   	pop    esi
c0006114:	c3                   	ret    

c0006115 <f_closedir>:
c0006115:	53                   	push   ebx
c0006116:	83 ec 18             	sub    esp,0x18
c0006119:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000611d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006121:	89 d8                	mov    eax,ebx
c0006123:	e8 86 c2 ff ff       	call   c00023ae <validate>
c0006128:	85 c0                	test   eax,eax
c000612a:	75 06                	jne    c0006132 <f_closedir+0x1d>
c000612c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006132:	83 c4 18             	add    esp,0x18
c0006135:	5b                   	pop    ebx
c0006136:	c3                   	ret    

c0006137 <f_readdir>:
c0006137:	57                   	push   edi
c0006138:	56                   	push   esi
c0006139:	53                   	push   ebx
c000613a:	83 ec 20             	sub    esp,0x20
c000613d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006141:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006145:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006149:	89 d8                	mov    eax,ebx
c000614b:	e8 5e c2 ff ff       	call   c00023ae <validate>
c0006150:	85 c0                	test   eax,eax
c0006152:	75 77                	jne    c00061cb <f_readdir+0x94>
c0006154:	85 ff                	test   edi,edi
c0006156:	75 0b                	jne    c0006163 <f_readdir+0x2c>
c0006158:	31 d2                	xor    edx,edx
c000615a:	89 d8                	mov    eax,ebx
c000615c:	e8 a6 d0 ff ff       	call   c0003207 <dir_sdi>
c0006161:	eb 68                	jmp    c00061cb <f_readdir+0x94>
c0006163:	83 ec 0c             	sub    esp,0xc
c0006166:	68 60 04 00 00       	push   0x460
c000616b:	e8 6e 23 00 00       	call   c00084de <ff_memalloc>
c0006170:	83 c4 10             	add    esp,0x10
c0006173:	89 c6                	mov    esi,eax
c0006175:	b8 11 00 00 00       	mov    eax,0x11
c000617a:	85 f6                	test   esi,esi
c000617c:	74 4d                	je     c00061cb <f_readdir+0x94>
c000617e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006182:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006188:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000618b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000618e:	31 d2                	xor    edx,edx
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 80 d8 ff ff       	call   c0003a17 <dir_read>
c0006197:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000619c:	75 19                	jne    c00061b7 <f_readdir+0x80>
c000619e:	89 fa                	mov    edx,edi
c00061a0:	89 d8                	mov    eax,ebx
c00061a2:	e8 7e ea ff ff       	call   c0004c25 <get_fileinfo>
c00061a7:	31 d2                	xor    edx,edx
c00061a9:	89 d8                	mov    eax,ebx
c00061ab:	e8 af d5 ff ff       	call   c000375f <dir_next>
c00061b0:	83 f8 04             	cmp    eax,0x4
c00061b3:	75 02                	jne    c00061b7 <f_readdir+0x80>
c00061b5:	31 c0                	xor    eax,eax
c00061b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061bb:	83 ec 0c             	sub    esp,0xc
c00061be:	56                   	push   esi
c00061bf:	e8 30 23 00 00       	call   c00084f4 <ff_memfree>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cb:	83 c4 20             	add    esp,0x20
c00061ce:	5b                   	pop    ebx
c00061cf:	5e                   	pop    esi
c00061d0:	5f                   	pop    edi
c00061d1:	c3                   	ret    

c00061d2 <f_stat>:
c00061d2:	57                   	push   edi
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	56                   	push   esi
c00061d6:	53                   	push   ebx
c00061d7:	83 ec 50             	sub    esp,0x50
c00061da:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061de:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061e2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061e6:	e8 50 c5 ff ff       	call   c000273b <mount_volume>
c00061eb:	89 c3                	mov    ebx,eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	75 67                	jne    c0006258 <f_stat+0x86>
c00061f1:	83 ec 0c             	sub    esp,0xc
c00061f4:	bb 11 00 00 00       	mov    ebx,0x11
c00061f9:	68 60 04 00 00       	push   0x460
c00061fe:	e8 db 22 00 00       	call   c00084de <ff_memalloc>
c0006203:	83 c4 10             	add    esp,0x10
c0006206:	89 c6                	mov    esi,eax
c0006208:	85 c0                	test   eax,eax
c000620a:	74 4c                	je     c0006258 <f_stat+0x86>
c000620c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006210:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006216:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006219:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000621c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0006220:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006224:	e8 88 ec ff ff       	call   c0004eb1 <follow_path>
c0006229:	89 c3                	mov    ebx,eax
c000622b:	85 c0                	test   eax,eax
c000622d:	75 1d                	jne    c000624c <f_stat+0x7a>
c000622f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006234:	78 11                	js     c0006247 <f_stat+0x75>
c0006236:	85 ff                	test   edi,edi
c0006238:	74 12                	je     c000624c <f_stat+0x7a>
c000623a:	89 fa                	mov    edx,edi
c000623c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006240:	e8 e0 e9 ff ff       	call   c0004c25 <get_fileinfo>
c0006245:	eb 05                	jmp    c000624c <f_stat+0x7a>
c0006247:	bb 06 00 00 00       	mov    ebx,0x6
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	56                   	push   esi
c0006250:	e8 9f 22 00 00       	call   c00084f4 <ff_memfree>
c0006255:	83 c4 10             	add    esp,0x10
c0006258:	83 c4 50             	add    esp,0x50
c000625b:	89 d8                	mov    eax,ebx
c000625d:	5b                   	pop    ebx
c000625e:	5e                   	pop    esi
c000625f:	5f                   	pop    edi
c0006260:	c3                   	ret    

c0006261 <f_getfree>:
c0006261:	55                   	push   ebp
c0006262:	31 c9                	xor    ecx,ecx
c0006264:	57                   	push   edi
c0006265:	56                   	push   esi
c0006266:	53                   	push   ebx
c0006267:	83 ec 5c             	sub    esp,0x5c
c000626a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000626e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006272:	e8 c4 c4 ff ff       	call   c000273b <mount_volume>
c0006277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000627b:	85 c0                	test   eax,eax
c000627d:	0f 85 9d 01 00 00    	jne    c0006420 <f_getfree+0x1bf>
c0006283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006287:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000628b:	89 02                	mov    DWORD PTR [edx],eax
c000628d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006293:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006296:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000629a:	39 f2                	cmp    edx,esi
c000629c:	77 0b                	ja     c00062a9 <f_getfree+0x48>
c000629e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062a2:	89 10                	mov    DWORD PTR [eax],edx
c00062a4:	e9 77 01 00 00       	jmp    c0006420 <f_getfree+0x1bf>
c00062a9:	8a 10                	mov    dl,BYTE PTR [eax]
c00062ab:	80 fa 01             	cmp    dl,0x1
c00062ae:	75 3a                	jne    c00062ea <f_getfree+0x89>
c00062b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00062b4:	be 02 00 00 00       	mov    esi,0x2
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	89 f2                	mov    edx,esi
c00062bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00062c1:	e8 4b cd ff ff       	call   c0003011 <get_fat>
c00062c6:	83 f8 ff             	cmp    eax,0xffffffff
c00062c9:	0f 84 28 01 00 00    	je     c00063f7 <f_getfree+0x196>
c00062cf:	83 f8 01             	cmp    eax,0x1
c00062d2:	0f 84 29 01 00 00    	je     c0006401 <f_getfree+0x1a0>
c00062d8:	83 d3 00             	adc    ebx,0x0
c00062db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062df:	46                   	inc    esi
c00062e0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062e3:	77 d6                	ja     c00062bb <f_getfree+0x5a>
c00062e5:	e9 25 01 00 00       	jmp    c000640f <f_getfree+0x1ae>
c00062ea:	80 fa 04             	cmp    dl,0x4
c00062ed:	0f 85 88 00 00 00    	jne    c000637b <f_getfree+0x11a>
c00062f3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062f6:	31 ed                	xor    ebp,ebp
c00062f8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006303:	31 db                	xor    ebx,ebx
c0006305:	85 ed                	test   ebp,ebp
c0006307:	75 3f                	jne    c0006348 <f_getfree+0xe7>
c0006309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000630d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006311:	83 c0 01             	add    eax,0x1
c0006314:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006318:	83 d2 00             	adc    edx,0x0
c000631b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000631f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006323:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006327:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000632b:	e8 59 c1 ff ff       	call   c0002489 <move_window>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 d3 00 00 00    	jne    c000640b <f_getfree+0x1aa>
c0006338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000633c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006340:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006344:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000634f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006353:	89 cf                	mov    edi,ecx
c0006355:	85 f6                	test   esi,esi
c0006357:	74 12                	je     c000636b <f_getfree+0x10a>
c0006359:	88 c1                	mov    cl,al
c000635b:	83 e1 01             	and    ecx,0x1
c000635e:	80 f9 01             	cmp    cl,0x1
c0006361:	83 d3 00             	adc    ebx,0x0
c0006364:	d0 e8                	shr    al,1
c0006366:	4e                   	dec    esi
c0006367:	39 fe                	cmp    esi,edi
c0006369:	75 ea                	jne    c0006355 <f_getfree+0xf4>
c000636b:	45                   	inc    ebp
c000636c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006372:	85 f6                	test   esi,esi
c0006374:	75 8f                	jne    c0006305 <f_getfree+0xa4>
c0006376:	e9 94 00 00 00       	jmp    c000640f <f_getfree+0x1ae>
c000637b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000637e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006381:	31 f6                	xor    esi,esi
c0006383:	31 db                	xor    ebx,ebx
c0006385:	85 f6                	test   esi,esi
c0006387:	75 1b                	jne    c00063a4 <f_getfree+0x143>
c0006389:	89 d7                	mov    edi,edx
c000638b:	89 cd                	mov    ebp,ecx
c000638d:	83 c7 01             	add    edi,0x1
c0006390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006394:	83 d5 00             	adc    ebp,0x0
c0006397:	e8 ed c0 ff ff       	call   c0002489 <move_window>
c000639c:	85 c0                	test   eax,eax
c000639e:	75 6b                	jne    c000640b <f_getfree+0x1aa>
c00063a0:	89 fa                	mov    edx,edi
c00063a2:	89 e9                	mov    ecx,ebp
c00063a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063a8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00063ac:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00063b0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00063b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00063b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00063bb:	75 11                	jne    c00063ce <f_getfree+0x16d>
c00063bd:	e8 e9 b8 ff ff       	call   c0001cab <ld_word>
c00063c2:	66 83 f8 01          	cmp    ax,0x1
c00063c6:	83 d3 00             	adc    ebx,0x0
c00063c9:	83 c6 02             	add    esi,0x2
c00063cc:	eb 13                	jmp    c00063e1 <f_getfree+0x180>
c00063ce:	e8 e5 b8 ff ff       	call   c0001cb8 <ld_dword>
c00063d3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063d8:	83 f8 01             	cmp    eax,0x1
c00063db:	83 d3 00             	adc    ebx,0x0
c00063de:	83 c6 04             	add    esi,0x4
c00063e1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ef:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063f3:	75 90                	jne    c0006385 <f_getfree+0x124>
c00063f5:	eb 18                	jmp    c000640f <f_getfree+0x1ae>
c00063f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063ff:	eb 0e                	jmp    c000640f <f_getfree+0x1ae>
c0006401:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006409:	eb 04                	jmp    c000640f <f_getfree+0x1ae>
c000640b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006413:	89 18                	mov    DWORD PTR [eax],ebx
c0006415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006419:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000641c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006424:	83 c4 5c             	add    esp,0x5c
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <f_truncate>:
c000642c:	56                   	push   esi
c000642d:	53                   	push   ebx
c000642e:	83 ec 14             	sub    esp,0x14
c0006431:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006435:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006439:	89 d8                	mov    eax,ebx
c000643b:	e8 6e bf ff ff       	call   c00023ae <validate>
c0006440:	89 c6                	mov    esi,eax
c0006442:	85 c0                	test   eax,eax
c0006444:	0f 85 d2 00 00 00    	jne    c000651c <f_truncate+0xf0>
c000644a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000644e:	85 f6                	test   esi,esi
c0006450:	0f 85 c6 00 00 00    	jne    c000651c <f_truncate+0xf0>
c0006456:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000645a:	0f 84 b7 00 00 00    	je     c0006517 <f_truncate+0xeb>
c0006460:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006463:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006466:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006469:	89 d1                	mov    ecx,edx
c000646b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000646e:	0f 83 a8 00 00 00    	jae    c000651c <f_truncate+0xf0>
c0006474:	09 c2                	or     edx,eax
c0006476:	75 15                	jne    c000648d <f_truncate+0x61>
c0006478:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000647b:	31 c9                	xor    ecx,ecx
c000647d:	89 d8                	mov    eax,ebx
c000647f:	e8 7a d0 ff ff       	call   c00034fe <remove_chain>
c0006484:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000648b:	eb 35                	jmp    c00064c2 <f_truncate+0x96>
c000648d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006490:	89 d8                	mov    eax,ebx
c0006492:	e8 7a cb ff ff       	call   c0003011 <get_fat>
c0006497:	89 c2                	mov    edx,eax
c0006499:	b8 01 00 00 00       	mov    eax,0x1
c000649e:	83 fa ff             	cmp    edx,0xffffffff
c00064a1:	74 1f                	je     c00064c2 <f_truncate+0x96>
c00064a3:	b8 02 00 00 00       	mov    eax,0x2
c00064a8:	83 fa 01             	cmp    edx,0x1
c00064ab:	74 15                	je     c00064c2 <f_truncate+0x96>
c00064ad:	31 c0                	xor    eax,eax
c00064af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064b3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00064b6:	76 0a                	jbe    c00064c2 <f_truncate+0x96>
c00064b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00064bb:	89 d8                	mov    eax,ebx
c00064bd:	e8 3c d0 ff ff       	call   c00034fe <remove_chain>
c00064c2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00064c5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064c8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064cb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064ce:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064d1:	83 ca 40             	or     edx,0x40
c00064d4:	85 c0                	test   eax,eax
c00064d6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064d9:	75 35                	jne    c0006510 <f_truncate+0xe4>
c00064db:	84 d2                	test   dl,dl
c00064dd:	79 3d                	jns    c000651c <f_truncate+0xf0>
c00064df:	83 ec 0c             	sub    esp,0xc
c00064e2:	8d 43 50             	lea    eax,[ebx+0x50]
c00064e5:	6a 01                	push   0x1
c00064e7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ed:	50                   	push   eax
c00064ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064f6:	50                   	push   eax
c00064f7:	e8 7a b7 ff ff       	call   c0001c76 <disk_write>
c00064fc:	83 c4 20             	add    esp,0x20
c00064ff:	85 c0                	test   eax,eax
c0006501:	75 08                	jne    c000650b <f_truncate+0xdf>
c0006503:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006507:	31 f6                	xor    esi,esi
c0006509:	eb 11                	jmp    c000651c <f_truncate+0xf0>
c000650b:	b8 01 00 00 00       	mov    eax,0x1
c0006510:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006513:	89 c6                	mov    esi,eax
c0006515:	eb 05                	jmp    c000651c <f_truncate+0xf0>
c0006517:	be 07 00 00 00       	mov    esi,0x7
c000651c:	89 f0                	mov    eax,esi
c000651e:	83 c4 14             	add    esp,0x14
c0006521:	5b                   	pop    ebx
c0006522:	5e                   	pop    esi
c0006523:	c3                   	ret    

c0006524 <f_unlink>:
c0006524:	56                   	push   esi
c0006525:	b9 02 00 00 00       	mov    ecx,0x2
c000652a:	53                   	push   ebx
c000652b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006531:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006535:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000653c:	e8 fa c1 ff ff       	call   c000273b <mount_volume>
c0006541:	85 c0                	test   eax,eax
c0006543:	0f 85 55 01 00 00    	jne    c000669e <f_unlink+0x17a>
c0006549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654d:	83 ec 0c             	sub    esp,0xc
c0006550:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006554:	68 60 04 00 00       	push   0x460
c0006559:	e8 80 1f 00 00       	call   c00084de <ff_memalloc>
c000655e:	83 c4 10             	add    esp,0x10
c0006561:	89 c3                	mov    ebx,eax
c0006563:	b8 11 00 00 00       	mov    eax,0x11
c0006568:	85 db                	test   ebx,ebx
c000656a:	0f 84 2e 01 00 00    	je     c000669e <f_unlink+0x17a>
c0006570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006574:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000657a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000657d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006580:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006587:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658b:	e8 21 e9 ff ff       	call   c0004eb1 <follow_path>
c0006590:	85 c0                	test   eax,eax
c0006592:	0f 85 f2 00 00 00    	jne    c000668a <f_unlink+0x166>
c0006598:	b8 06 00 00 00       	mov    eax,0x6
c000659d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00065a5:	0f 88 df 00 00 00    	js     c000668a <f_unlink+0x166>
c00065ab:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00065b0:	74 0a                	je     c00065bc <f_unlink+0x98>
c00065b2:	b8 07 00 00 00       	mov    eax,0x7
c00065b7:	e9 ce 00 00 00       	jmp    c000668a <f_unlink+0x166>
c00065bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00065c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00065c4:	8a 02                	mov    al,BYTE PTR [edx]
c00065c6:	3c 04                	cmp    al,0x4
c00065c8:	75 12                	jne    c00065dc <f_unlink+0xb8>
c00065ca:	8d 42 10             	lea    eax,[edx+0x10]
c00065cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065d1:	e8 a1 e8 ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00065d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065da:	eb 0e                	jmp    c00065ea <f_unlink+0xc6>
c00065dc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065e3:	e8 3e e8 ff ff       	call   c0004e26 <ld_clust.isra.0>
c00065e8:	89 c6                	mov    esi,eax
c00065ea:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ef:	75 12                	jne    c0006603 <f_unlink+0xdf>
c00065f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065f5:	e8 94 d6 ff ff       	call   c0003c8e <dir_remove>
c00065fa:	85 c0                	test   eax,eax
c00065fc:	74 6c                	je     c000666a <f_unlink+0x146>
c00065fe:	e9 87 00 00 00       	jmp    c000668a <f_unlink+0x166>
c0006603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006607:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000660e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006615:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006618:	75 21                	jne    c000663b <f_unlink+0x117>
c000661a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000661e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006622:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006629:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006630:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006634:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000663b:	31 d2                	xor    edx,edx
c000663d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006644:	e8 be cb ff ff       	call   c0003207 <dir_sdi>
c0006649:	85 c0                	test   eax,eax
c000664b:	75 3d                	jne    c000668a <f_unlink+0x166>
c000664d:	31 d2                	xor    edx,edx
c000664f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006656:	e8 bc d3 ff ff       	call   c0003a17 <dir_read>
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 84 4f ff ff ff    	je     c00065b2 <f_unlink+0x8e>
c0006663:	83 f8 04             	cmp    eax,0x4
c0006666:	75 22                	jne    c000668a <f_unlink+0x166>
c0006668:	eb 87                	jmp    c00065f1 <f_unlink+0xcd>
c000666a:	85 f6                	test   esi,esi
c000666c:	75 0b                	jne    c0006679 <f_unlink+0x155>
c000666e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006672:	e8 3d df ff ff       	call   c00045b4 <sync_fs>
c0006677:	eb 11                	jmp    c000668a <f_unlink+0x166>
c0006679:	31 c9                	xor    ecx,ecx
c000667b:	89 f2                	mov    edx,esi
c000667d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006681:	e8 78 ce ff ff       	call   c00034fe <remove_chain>
c0006686:	85 c0                	test   eax,eax
c0006688:	74 e4                	je     c000666e <f_unlink+0x14a>
c000668a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000668e:	83 ec 0c             	sub    esp,0xc
c0006691:	53                   	push   ebx
c0006692:	e8 5d 1e 00 00       	call   c00084f4 <ff_memfree>
c0006697:	83 c4 10             	add    esp,0x10
c000669a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000669e:	81 c4 e4 00 00 00    	add    esp,0xe4
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	c3                   	ret    

c00066a7 <f_mkdir>:
c00066a7:	57                   	push   edi
c00066a8:	b9 02 00 00 00       	mov    ecx,0x2
c00066ad:	56                   	push   esi
c00066ae:	53                   	push   ebx
c00066af:	83 c4 80             	add    esp,0xffffff80
c00066b2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00066b6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00066bd:	e8 79 c0 ff ff       	call   c000273b <mount_volume>
c00066c2:	89 c3                	mov    ebx,eax
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 fe 01 00 00    	jne    c00068ca <f_mkdir+0x223>
c00066cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d0:	bb 11 00 00 00       	mov    ebx,0x11
c00066d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066d9:	83 ec 0c             	sub    esp,0xc
c00066dc:	68 60 04 00 00       	push   0x460
c00066e1:	e8 f8 1d 00 00       	call   c00084de <ff_memalloc>
c00066e6:	83 c4 10             	add    esp,0x10
c00066e9:	89 c7                	mov    edi,eax
c00066eb:	85 c0                	test   eax,eax
c00066ed:	0f 84 d7 01 00 00    	je     c00068ca <f_mkdir+0x223>
c00066f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006700:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006703:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000670a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000670e:	e8 9e e7 ff ff       	call   c0004eb1 <follow_path>
c0006713:	89 c3                	mov    ebx,eax
c0006715:	85 c0                	test   eax,eax
c0006717:	74 3e                	je     c0006757 <f_mkdir+0xb0>
c0006719:	83 f8 04             	cmp    eax,0x4
c000671c:	75 3e                	jne    c000675c <f_mkdir+0xb5>
c000671e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006722:	31 d2                	xor    edx,edx
c0006724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672c:	e8 ce cb ff ff       	call   c00032ff <create_chain>
c0006731:	89 c6                	mov    esi,eax
c0006733:	85 c0                	test   eax,eax
c0006735:	74 0c                	je     c0006743 <f_mkdir+0x9c>
c0006737:	bb 02 00 00 00       	mov    ebx,0x2
c000673c:	83 f8 01             	cmp    eax,0x1
c000673f:	74 07                	je     c0006748 <f_mkdir+0xa1>
c0006741:	eb 2a                	jmp    c000676d <f_mkdir+0xc6>
c0006743:	bb 07 00 00 00       	mov    ebx,0x7
c0006748:	31 c9                	xor    ecx,ecx
c000674a:	89 f2                	mov    edx,esi
c000674c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006750:	e8 a9 cd ff ff       	call   c00034fe <remove_chain>
c0006755:	eb 05                	jmp    c000675c <f_mkdir+0xb5>
c0006757:	bb 08 00 00 00       	mov    ebx,0x8
c000675c:	83 ec 0c             	sub    esp,0xc
c000675f:	57                   	push   edi
c0006760:	e8 8f 1d 00 00       	call   c00084f4 <ff_memfree>
c0006765:	83 c4 10             	add    esp,0x10
c0006768:	e9 5d 01 00 00       	jmp    c00068ca <f_mkdir+0x223>
c000676d:	bb 01 00 00 00       	mov    ebx,0x1
c0006772:	83 f8 ff             	cmp    eax,0xffffffff
c0006775:	74 d1                	je     c0006748 <f_mkdir+0xa1>
c0006777:	89 f2                	mov    edx,esi
c0006779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677d:	e8 c4 ce ff ff       	call   c0003646 <dir_clear>
c0006782:	89 c3                	mov    ebx,eax
c0006784:	85 c0                	test   eax,eax
c0006786:	75 c0                	jne    c0006748 <f_mkdir+0xa1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000678f:	74 69                	je     c00067fa <f_mkdir+0x153>
c0006791:	b9 0b 00 00 00       	mov    ecx,0xb
c0006796:	83 c0 54             	add    eax,0x54
c0006799:	ba 20 00 00 00       	mov    edx,0x20
c000679e:	e8 9c b5 ff ff       	call   c0001d3f <mem_set>
c00067a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067ac:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00067b0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00067b4:	83 c0 6a             	add    eax,0x6a
c00067b7:	e8 65 b5 ff ff       	call   c0001d21 <st_dword>
c00067bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c0:	89 f1                	mov    ecx,esi
c00067c2:	8d 50 54             	lea    edx,[eax+0x54]
c00067c5:	e8 85 e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	b9 20 00 00 00       	mov    ecx,0x20
c00067d3:	8d 50 54             	lea    edx,[eax+0x54]
c00067d6:	83 c0 74             	add    eax,0x74
c00067d9:	e8 4c b5 ff ff       	call   c0001d2a <mem_cpy>
c00067de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067e6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067ea:	8d 50 74             	lea    edx,[eax+0x74]
c00067ed:	e8 5d e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067fe:	e8 2f db ff ff       	call   c0004332 <dir_register>
c0006803:	89 c3                	mov    ebx,eax
c0006805:	85 c0                	test   eax,eax
c0006807:	0f 85 3b ff ff ff    	jne    c0006748 <f_mkdir+0xa1>
c000680d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006811:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006814:	75 74                	jne    c000688a <f_mkdir+0x1e3>
c0006816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006819:	ba 00 00 21 50       	mov    edx,0x50210000
c000681e:	83 c0 0c             	add    eax,0xc
c0006821:	e8 fb b4 ff ff       	call   c0001d21 <st_dword>
c0006826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682a:	89 f2                	mov    edx,esi
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	83 c0 34             	add    eax,0x34
c0006832:	e8 ea b4 ff ff       	call   c0001d21 <st_dword>
c0006837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000683f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006842:	c1 e2 09             	shl    edx,0x9
c0006845:	83 c0 38             	add    eax,0x38
c0006848:	e8 d4 b4 ff ff       	call   c0001d21 <st_dword>
c000684d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006851:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006855:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006858:	c1 e2 09             	shl    edx,0x9
c000685b:	83 c0 28             	add    eax,0x28
c000685e:	e8 be b4 ff ff       	call   c0001d21 <st_dword>
c0006863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006867:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000686a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000686e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006871:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006875:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006879:	e8 8b d3 ff ff       	call   c0003c09 <store_xdir>
c000687e:	89 c3                	mov    ebx,eax
c0006880:	85 c0                	test   eax,eax
c0006882:	0f 85 d4 fe ff ff    	jne    c000675c <f_mkdir+0xb5>
c0006888:	eb 30                	jmp    c00068ba <f_mkdir+0x213>
c000688a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000688e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006893:	83 c0 16             	add    eax,0x16
c0006896:	e8 86 b4 ff ff       	call   c0001d21 <st_dword>
c000689b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000689f:	89 f1                	mov    ecx,esi
c00068a1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00068a5:	e8 a5 e5 ff ff       	call   c0004e4f <st_clust.isra.1>
c00068aa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00068ae:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00068b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068be:	e8 f1 dc ff ff       	call   c00045b4 <sync_fs>
c00068c3:	89 c3                	mov    ebx,eax
c00068c5:	e9 92 fe ff ff       	jmp    c000675c <f_mkdir+0xb5>
c00068ca:	83 ec 80             	sub    esp,0xffffff80
c00068cd:	89 d8                	mov    eax,ebx
c00068cf:	5b                   	pop    ebx
c00068d0:	5e                   	pop    esi
c00068d1:	5f                   	pop    edi
c00068d2:	c3                   	ret    

c00068d3 <f_rename>:
c00068d3:	55                   	push   ebp
c00068d4:	57                   	push   edi
c00068d5:	56                   	push   esi
c00068d6:	53                   	push   ebx
c00068d7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068e4:	e8 a4 b9 ff ff       	call   c000228d <get_ldnumber>
c00068e9:	b9 02 00 00 00       	mov    ecx,0x2
c00068ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068f2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068f9:	e8 3d be ff ff       	call   c000273b <mount_volume>
c00068fe:	85 c0                	test   eax,eax
c0006900:	0f 85 b5 02 00 00    	jne    c0006bbb <f_rename+0x2e8>
c0006906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006911:	68 60 04 00 00       	push   0x460
c0006916:	e8 c3 1b 00 00       	call   c00084de <ff_memalloc>
c000691b:	83 c4 10             	add    esp,0x10
c000691e:	89 c3                	mov    ebx,eax
c0006920:	b8 11 00 00 00       	mov    eax,0x11
c0006925:	85 db                	test   ebx,ebx
c0006927:	0f 84 8e 02 00 00    	je     c0006bbb <f_rename+0x2e8>
c000692d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006931:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006937:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000693a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000693d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006944:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006948:	e8 64 e5 ff ff       	call   c0004eb1 <follow_path>
c000694d:	85 c0                	test   eax,eax
c000694f:	0f 85 52 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006955:	b8 06 00 00 00       	mov    eax,0x6
c000695a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006962:	0f 85 3f 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000696c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000696f:	0f 85 05 01 00 00    	jne    c0006a7a <f_rename+0x1a7>
c0006975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006978:	b9 40 00 00 00       	mov    ecx,0x40
c000697d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006981:	e8 a4 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006986:	b9 4c 00 00 00       	mov    ecx,0x4c
c000698b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000698f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006996:	e8 8f b3 ff ff       	call   c0001d2a <mem_cpy>
c000699b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 03 e5 ff ff       	call   c0004eb1 <follow_path>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	75 29                	jne    c00069db <f_rename+0x108>
c00069b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00069b6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069bd:	74 0a                	je     c00069c9 <f_rename+0xf6>
c00069bf:	b8 08 00 00 00       	mov    eax,0x8
c00069c4:	e9 de 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c00069c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069d0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069d7:	75 e6                	jne    c00069bf <f_rename+0xec>
c00069d9:	eb 09                	jmp    c00069e4 <f_rename+0x111>
c00069db:	83 f8 04             	cmp    eax,0x4
c00069de:	0f 85 c3 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069e4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069eb:	e8 42 d9 ff ff       	call   c0004332 <dir_register>
c00069f0:	85 c0                	test   eax,eax
c00069f2:	0f 85 af 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069fc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069ff:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006a02:	89 c5                	mov    ebp,eax
c0006a04:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006a0b:	8d 46 24             	lea    eax,[esi+0x24]
c0006a0e:	e8 98 b2 ff ff       	call   c0001cab <ld_word>
c0006a13:	b9 40 00 00 00       	mov    ecx,0x40
c0006a18:	89 c7                	mov    edi,eax
c0006a1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006a1e:	89 f0                	mov    eax,esi
c0006a20:	e8 05 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a29:	89 e9                	mov    ecx,ebp
c0006a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a2e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a31:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a39:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a3c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a3f:	0f b7 d7             	movzx  edx,di
c0006a42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a45:	83 c0 24             	add    eax,0x24
c0006a48:	e8 d0 b2 ff ff       	call   c0001d1d <st_word>
c0006a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a51:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a54:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a57:	a8 10                	test   al,0x10
c0006a59:	75 06                	jne    c0006a61 <f_rename+0x18e>
c0006a5b:	83 c8 20             	or     eax,0x20
c0006a5e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 9c d1 ff ff       	call   c0003c09 <store_xdir>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	0f 84 1c 01 00 00    	je     c0006b91 <f_rename+0x2be>
c0006a75:	e9 2d 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c0006a7a:	b9 20 00 00 00       	mov    ecx,0x20
c0006a7f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a8a:	e8 9b b2 ff ff       	call   c0001d2a <mem_cpy>
c0006a8f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a98:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a9f:	e8 86 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006aa4:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006aab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab2:	e8 fa e3 ff ff       	call   c0004eb1 <follow_path>
c0006ab7:	85 c0                	test   eax,eax
c0006ab9:	75 27                	jne    c0006ae2 <f_rename+0x20f>
c0006abb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006abf:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006ac6:	0f 85 f3 fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006acc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ad3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ada:	0f 85 df fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006ae0:	eb 09                	jmp    c0006aeb <f_rename+0x218>
c0006ae2:	83 f8 04             	cmp    eax,0x4
c0006ae5:	0f 85 bc 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aeb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006af2:	e8 3b d8 ff ff       	call   c0004332 <dir_register>
c0006af7:	85 c0                	test   eax,eax
c0006af9:	0f 85 a8 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aff:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006b06:	b9 13 00 00 00       	mov    ecx,0x13
c0006b0b:	8d 46 0d             	lea    eax,[esi+0xd]
c0006b0e:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006b12:	e8 13 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006b17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006b1b:	a8 10                	test   al,0x10
c0006b1d:	75 03                	jne    c0006b22 <f_rename+0x24f>
c0006b1f:	83 c8 20             	or     eax,0x20
c0006b22:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006b25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b29:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b2d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b31:	74 5e                	je     c0006b91 <f_rename+0x2be>
c0006b33:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b3a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b3e:	74 51                	je     c0006b91 <f_rename+0x2be>
c0006b40:	89 f2                	mov    edx,esi
c0006b42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b46:	8a 07                	mov    al,BYTE PTR [edi]
c0006b48:	e8 d9 e2 ff ff       	call   c0004e26 <ld_clust.isra.0>
c0006b4d:	89 c2                	mov    edx,eax
c0006b4f:	89 f8                	mov    eax,edi
c0006b51:	e8 ee b3 ff ff       	call   c0001f44 <clst2sect>
c0006b56:	89 c6                	mov    esi,eax
c0006b58:	89 d1                	mov    ecx,edx
c0006b5a:	b8 02 00 00 00       	mov    eax,0x2
c0006b5f:	09 f2                	or     edx,esi
c0006b61:	74 44                	je     c0006ba7 <f_rename+0x2d4>
c0006b63:	89 f2                	mov    edx,esi
c0006b65:	89 f8                	mov    eax,edi
c0006b67:	e8 1d b9 ff ff       	call   c0002489 <move_window>
c0006b6c:	85 c0                	test   eax,eax
c0006b6e:	75 37                	jne    c0006ba7 <f_rename+0x2d4>
c0006b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b74:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b78:	75 17                	jne    c0006b91 <f_rename+0x2be>
c0006b7a:	8d 50 74             	lea    edx,[eax+0x74]
c0006b7d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b84:	e8 c6 e2 ff ff       	call   c0004e4f <st_clust.isra.1>
c0006b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b8d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b91:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b95:	e8 f4 d0 ff ff       	call   c0003c8e <dir_remove>
c0006b9a:	85 c0                	test   eax,eax
c0006b9c:	75 09                	jne    c0006ba7 <f_rename+0x2d4>
c0006b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ba2:	e8 0d da ff ff       	call   c00045b4 <sync_fs>
c0006ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	53                   	push   ebx
c0006baf:	e8 40 19 00 00       	call   c00084f4 <ff_memfree>
c0006bb4:	83 c4 10             	add    esp,0x10
c0006bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bbb:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006bc1:	5b                   	pop    ebx
c0006bc2:	5e                   	pop    esi
c0006bc3:	5f                   	pop    edi
c0006bc4:	5d                   	pop    ebp
c0006bc5:	c3                   	ret    

c0006bc6 <f_chmod>:
c0006bc6:	57                   	push   edi
c0006bc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006bcc:	56                   	push   esi
c0006bcd:	53                   	push   ebx
c0006bce:	83 ec 60             	sub    esp,0x60
c0006bd1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006bd5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bd9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bdd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006be1:	e8 55 bb ff ff       	call   c000273b <mount_volume>
c0006be6:	85 c0                	test   eax,eax
c0006be8:	0f 85 af 00 00 00    	jne    c0006c9d <f_chmod+0xd7>
c0006bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf2:	83 ec 0c             	sub    esp,0xc
c0006bf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bf9:	68 60 04 00 00       	push   0x460
c0006bfe:	e8 db 18 00 00       	call   c00084de <ff_memalloc>
c0006c03:	83 c4 10             	add    esp,0x10
c0006c06:	89 c6                	mov    esi,eax
c0006c08:	b8 11 00 00 00       	mov    eax,0x11
c0006c0d:	85 f6                	test   esi,esi
c0006c0f:	0f 84 88 00 00 00    	je     c0006c9d <f_chmod+0xd7>
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006c1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006c22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c25:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c2d:	e8 7f e2 ff ff       	call   c0004eb1 <follow_path>
c0006c32:	85 c0                	test   eax,eax
c0006c34:	75 53                	jne    c0006c89 <f_chmod+0xc3>
c0006c36:	b8 06 00 00 00       	mov    eax,0x6
c0006c3b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c40:	75 47                	jne    c0006c89 <f_chmod+0xc3>
c0006c42:	89 f9                	mov    ecx,edi
c0006c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c48:	83 e1 27             	and    ecx,0x27
c0006c4b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c4e:	75 1d                	jne    c0006c6d <f_chmod+0xa7>
c0006c50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c53:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c56:	21 cb                	and    ebx,ecx
c0006c58:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c5b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c62:	e8 a2 cf ff ff       	call   c0003c09 <store_xdir>
c0006c67:	85 c0                	test   eax,eax
c0006c69:	75 1e                	jne    c0006c89 <f_chmod+0xc3>
c0006c6b:	eb 13                	jmp    c0006c80 <f_chmod+0xba>
c0006c6d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c71:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c74:	21 cb                	and    ebx,ecx
c0006c76:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c79:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c84:	e8 2b d9 ff ff       	call   c00045b4 <sync_fs>
c0006c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c8d:	83 ec 0c             	sub    esp,0xc
c0006c90:	56                   	push   esi
c0006c91:	e8 5e 18 00 00       	call   c00084f4 <ff_memfree>
c0006c96:	83 c4 10             	add    esp,0x10
c0006c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c9d:	83 c4 60             	add    esp,0x60
c0006ca0:	5b                   	pop    ebx
c0006ca1:	5e                   	pop    esi
c0006ca2:	5f                   	pop    edi
c0006ca3:	c3                   	ret    

c0006ca4 <f_utime>:
c0006ca4:	56                   	push   esi
c0006ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0006caa:	53                   	push   ebx
c0006cab:	83 ec 64             	sub    esp,0x64
c0006cae:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006cb2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006cb6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006cba:	e8 7c ba ff ff       	call   c000273b <mount_volume>
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	0f 85 b5 00 00 00    	jne    c0006d7c <f_utime+0xd8>
c0006cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccb:	83 ec 0c             	sub    esp,0xc
c0006cce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cd2:	68 60 04 00 00       	push   0x460
c0006cd7:	e8 02 18 00 00       	call   c00084de <ff_memalloc>
c0006cdc:	83 c4 10             	add    esp,0x10
c0006cdf:	89 c3                	mov    ebx,eax
c0006ce1:	b8 11 00 00 00       	mov    eax,0x11
c0006ce6:	85 db                	test   ebx,ebx
c0006ce8:	0f 84 8e 00 00 00    	je     c0006d7c <f_utime+0xd8>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cf8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cfe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d06:	e8 a6 e1 ff ff       	call   c0004eb1 <follow_path>
c0006d0b:	85 c0                	test   eax,eax
c0006d0d:	75 59                	jne    c0006d68 <f_utime+0xc4>
c0006d0f:	b8 06 00 00 00       	mov    eax,0x6
c0006d14:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006d19:	75 4d                	jne    c0006d68 <f_utime+0xc4>
c0006d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006d23:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d27:	c1 e2 10             	shl    edx,0x10
c0006d2a:	09 ca                	or     edx,ecx
c0006d2c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d2f:	75 1a                	jne    c0006d4b <f_utime+0xa7>
c0006d31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d34:	83 c0 0c             	add    eax,0xc
c0006d37:	e8 e5 af ff ff       	call   c0001d21 <st_dword>
c0006d3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d40:	e8 c4 ce ff ff       	call   c0003c09 <store_xdir>
c0006d45:	85 c0                	test   eax,eax
c0006d47:	75 1f                	jne    c0006d68 <f_utime+0xc4>
c0006d49:	eb 14                	jmp    c0006d5f <f_utime+0xbb>
c0006d4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d4f:	83 c0 16             	add    eax,0x16
c0006d52:	e8 ca af ff ff       	call   c0001d21 <st_dword>
c0006d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d63:	e8 4c d8 ff ff       	call   c00045b4 <sync_fs>
c0006d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d6c:	83 ec 0c             	sub    esp,0xc
c0006d6f:	53                   	push   ebx
c0006d70:	e8 7f 17 00 00       	call   c00084f4 <ff_memfree>
c0006d75:	83 c4 10             	add    esp,0x10
c0006d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d7c:	83 c4 64             	add    esp,0x64
c0006d7f:	5b                   	pop    ebx
c0006d80:	5e                   	pop    esi
c0006d81:	c3                   	ret    

c0006d82 <f_getlabel>:
c0006d82:	55                   	push   ebp
c0006d83:	31 c9                	xor    ecx,ecx
c0006d85:	57                   	push   edi
c0006d86:	56                   	push   esi
c0006d87:	53                   	push   ebx
c0006d88:	83 ec 6c             	sub    esp,0x6c
c0006d8b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d8f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d96:	e8 a0 b9 ff ff       	call   c000273b <mount_volume>
c0006d9b:	89 c6                	mov    esi,eax
c0006d9d:	85 c0                	test   eax,eax
c0006d9f:	0f 85 c1 01 00 00    	jne    c0006f66 <f_getlabel+0x1e4>
c0006da5:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006dad:	0f 84 5f 01 00 00    	je     c0006f12 <f_getlabel+0x190>
c0006db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db7:	31 d2                	xor    edx,edx
c0006db9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006dbd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006dc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006dc9:	e8 39 c4 ff ff       	call   c0003207 <dir_sdi>
c0006dce:	85 c0                	test   eax,eax
c0006dd0:	0f 85 2d 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dd6:	ba 01 00 00 00       	mov    edx,0x1
c0006ddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ddf:	e8 33 cc ff ff       	call   c0003a17 <dir_read>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	0f 85 17 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006df3:	74 09                	je     c0006dfe <f_getlabel+0x7c>
c0006df5:	31 db                	xor    ebx,ebx
c0006df7:	31 c9                	xor    ecx,ecx
c0006df9:	e9 c8 00 00 00       	jmp    c0006ec6 <f_getlabel+0x144>
c0006dfe:	31 ed                	xor    ebp,ebp
c0006e00:	31 db                	xor    ebx,ebx
c0006e02:	31 ff                	xor    edi,edi
c0006e04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e08:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006e0c:	39 fa                	cmp    edx,edi
c0006e0e:	76 4b                	jbe    c0006e5b <f_getlabel+0xd9>
c0006e10:	47                   	inc    edi
c0006e11:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006e14:	01 d0                	add    eax,edx
c0006e16:	e8 90 ae ff ff       	call   c0001cab <ld_word>
c0006e1b:	66 85 ed             	test   bp,bp
c0006e1e:	75 0d                	jne    c0006e2d <f_getlabel+0xab>
c0006e20:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e26:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e2b:	76 28                	jbe    c0006e55 <f_getlabel+0xd3>
c0006e2d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e34:	89 e9                	mov    ecx,ebp
c0006e36:	01 da                	add    edx,ebx
c0006e38:	c1 e1 10             	shl    ecx,0x10
c0006e3b:	0f b7 c0             	movzx  eax,ax
c0006e3e:	09 c8                	or     eax,ecx
c0006e40:	b9 04 00 00 00       	mov    ecx,0x4
c0006e45:	e8 01 b0 ff ff       	call   c0001e4b <put_utf>
c0006e4a:	84 c0                	test   al,al
c0006e4c:	74 0b                	je     c0006e59 <f_getlabel+0xd7>
c0006e4e:	0f b6 c0             	movzx  eax,al
c0006e51:	01 c3                	add    ebx,eax
c0006e53:	31 c0                	xor    eax,eax
c0006e55:	89 c5                	mov    ebp,eax
c0006e57:	eb ab                	jmp    c0006e04 <f_getlabel+0x82>
c0006e59:	31 db                	xor    ebx,ebx
c0006e5b:	66 85 ed             	test   bp,bp
c0006e5e:	74 02                	je     c0006e62 <f_getlabel+0xe0>
c0006e60:	31 db                	xor    ebx,ebx
c0006e62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e69:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e6d:	e9 a0 00 00 00       	jmp    c0006f12 <f_getlabel+0x190>
c0006e72:	83 ff 0b             	cmp    edi,0xb
c0006e75:	74 11                	je     c0006e88 <f_getlabel+0x106>
c0006e77:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e80:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e83:	c1 e0 08             	shl    eax,0x8
c0006e86:	09 c2                	or     edx,eax
c0006e88:	0f b7 d2             	movzx  edx,dx
c0006e8b:	50                   	push   eax
c0006e8c:	50                   	push   eax
c0006e8d:	68 b5 01 00 00       	push   0x1b5
c0006e92:	52                   	push   edx
c0006e93:	e8 03 17 00 00       	call   c000859b <ff_oem2uni>
c0006e98:	83 c4 10             	add    esp,0x10
c0006e9b:	66 85 c0             	test   ax,ax
c0006e9e:	74 46                	je     c0006ee6 <f_getlabel+0x164>
c0006ea0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ea7:	0f b7 c0             	movzx  eax,ax
c0006eaa:	01 da                	add    edx,ebx
c0006eac:	b9 04 00 00 00       	mov    ecx,0x4
c0006eb1:	e8 95 af ff ff       	call   c0001e4b <put_utf>
c0006eb6:	84 c0                	test   al,al
c0006eb8:	74 2c                	je     c0006ee6 <f_getlabel+0x164>
c0006eba:	0f b6 c0             	movzx  eax,al
c0006ebd:	01 c3                	add    ebx,eax
c0006ebf:	83 ff 0b             	cmp    edi,0xb
c0006ec2:	74 24                	je     c0006ee8 <f_getlabel+0x166>
c0006ec4:	89 f9                	mov    ecx,edi
c0006ec6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006eca:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ecd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ed2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006edb:	e8 9f ae ff ff       	call   c0001d7f <dbc_1st>
c0006ee0:	85 c0                	test   eax,eax
c0006ee2:	74 a4                	je     c0006e88 <f_getlabel+0x106>
c0006ee4:	eb 8c                	jmp    c0006e72 <f_getlabel+0xf0>
c0006ee6:	31 db                	xor    ebx,ebx
c0006ee8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ef2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ef9:	74 17                	je     c0006f12 <f_getlabel+0x190>
c0006efb:	4b                   	dec    ebx
c0006efc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eff:	74 ee                	je     c0006eef <f_getlabel+0x16d>
c0006f01:	eb 0f                	jmp    c0006f12 <f_getlabel+0x190>
c0006f03:	83 f8 04             	cmp    eax,0x4
c0006f06:	75 5c                	jne    c0006f64 <f_getlabel+0x1e2>
c0006f08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006f0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f12:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006f1a:	74 4a                	je     c0006f66 <f_getlabel+0x1e4>
c0006f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f20:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006f23:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f26:	e8 5e b5 ff ff       	call   c0002489 <move_window>
c0006f2b:	89 c6                	mov    esi,eax
c0006f2d:	85 c0                	test   eax,eax
c0006f2f:	75 35                	jne    c0006f66 <f_getlabel+0x1e4>
c0006f31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f35:	b8 43 00 00 00       	mov    eax,0x43
c0006f3a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f3c:	80 f9 03             	cmp    cl,0x3
c0006f3f:	74 0f                	je     c0006f50 <f_getlabel+0x1ce>
c0006f41:	31 c0                	xor    eax,eax
c0006f43:	80 f9 04             	cmp    cl,0x4
c0006f46:	0f 94 c0             	sete   al
c0006f49:	48                   	dec    eax
c0006f4a:	83 e0 c3             	and    eax,0xffffffc3
c0006f4d:	83 c0 64             	add    eax,0x64
c0006f50:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f54:	e8 5f ad ff ff       	call   c0001cb8 <ld_dword>
c0006f59:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f60:	89 07                	mov    DWORD PTR [edi],eax
c0006f62:	eb 02                	jmp    c0006f66 <f_getlabel+0x1e4>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	83 c4 6c             	add    esp,0x6c
c0006f69:	89 f0                	mov    eax,esi
c0006f6b:	5b                   	pop    ebx
c0006f6c:	5e                   	pop    esi
c0006f6d:	5f                   	pop    edi
c0006f6e:	5d                   	pop    ebp
c0006f6f:	c3                   	ret    

c0006f70 <f_setlabel>:
c0006f70:	56                   	push   esi
c0006f71:	b9 02 00 00 00       	mov    ecx,0x2
c0006f76:	53                   	push   ebx
c0006f77:	83 ec 74             	sub    esp,0x74
c0006f7a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f7e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f85:	e8 b1 b7 ff ff       	call   c000273b <mount_volume>
c0006f8a:	89 c6                	mov    esi,eax
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	0f 85 41 02 00 00    	jne    c00071d5 <f_setlabel+0x265>
c0006f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f9b:	0f 85 8e 00 00 00    	jne    c000702f <f_setlabel+0xbf>
c0006fa1:	b9 16 00 00 00       	mov    ecx,0x16
c0006fa6:	31 d2                	xor    edx,edx
c0006fa8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fac:	31 db                	xor    ebx,ebx
c0006fae:	e8 8c ad ff ff       	call   c0001d3f <mem_set>
c0006fb3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fba:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fbd:	0f 86 0a 01 00 00    	jbe    c00070cd <f_setlabel+0x15d>
c0006fc3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fca:	e8 b6 ad ff ff       	call   c0001d85 <tchar2uni>
c0006fcf:	89 c6                	mov    esi,eax
c0006fd1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fd6:	76 2a                	jbe    c0007002 <f_setlabel+0x92>
c0006fd8:	83 f8 ff             	cmp    eax,0xffffffff
c0006fdb:	74 05                	je     c0006fe2 <f_setlabel+0x72>
c0006fdd:	83 fb 09             	cmp    ebx,0x9
c0006fe0:	76 0a                	jbe    c0006fec <f_setlabel+0x7c>
c0006fe2:	be 06 00 00 00       	mov    esi,0x6
c0006fe7:	e9 e9 01 00 00       	jmp    c00071d5 <f_setlabel+0x265>
c0006fec:	89 c2                	mov    edx,eax
c0006fee:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ff2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff5:	c1 ea 10             	shr    edx,0x10
c0006ff8:	01 c8                	add    eax,ecx
c0006ffa:	43                   	inc    ebx
c0006ffb:	e8 1d ad ff ff       	call   c0001d1d <st_word>
c0007000:	eb 04                	jmp    c0007006 <f_setlabel+0x96>
c0007002:	85 c0                	test   eax,eax
c0007004:	74 dc                	je     c0006fe2 <f_setlabel+0x72>
c0007006:	89 f2                	mov    edx,esi
c0007008:	b8 57 f6 01 c0       	mov    eax,0xc001f657
c000700d:	e8 5b ad ff ff       	call   c0001d6d <chk_chr>
c0007012:	85 c0                	test   eax,eax
c0007014:	75 cc                	jne    c0006fe2 <f_setlabel+0x72>
c0007016:	83 fb 0a             	cmp    ebx,0xa
c0007019:	77 c7                	ja     c0006fe2 <f_setlabel+0x72>
c000701b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000701e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0007022:	0f b7 d6             	movzx  edx,si
c0007025:	01 c8                	add    eax,ecx
c0007027:	43                   	inc    ebx
c0007028:	e8 f0 ac ff ff       	call   c0001d1d <st_word>
c000702d:	eb 84                	jmp    c0006fb3 <f_setlabel+0x43>
c000702f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007034:	ba 20 00 00 00       	mov    edx,0x20
c0007039:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000703d:	31 db                	xor    ebx,ebx
c000703f:	e8 fb ac ff ff       	call   c0001d3f <mem_set>
c0007044:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000704b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000704e:	76 60                	jbe    c00070b0 <f_setlabel+0x140>
c0007050:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007057:	e8 29 ad ff ff       	call   c0001d85 <tchar2uni>
c000705c:	3d ff ff 00 00       	cmp    eax,0xffff
c0007061:	0f 87 7b ff ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c0007067:	83 ec 0c             	sub    esp,0xc
c000706a:	50                   	push   eax
c000706b:	e8 97 15 00 00       	call   c0008607 <ff_wtoupper>
c0007070:	5a                   	pop    edx
c0007071:	59                   	pop    ecx
c0007072:	68 b5 01 00 00       	push   0x1b5
c0007077:	50                   	push   eax
c0007078:	e8 8e 14 00 00       	call   c000850b <ff_uni2oem>
c000707d:	83 c4 10             	add    esp,0x10
c0007080:	89 c6                	mov    esi,eax
c0007082:	66 85 c0             	test   ax,ax
c0007085:	0f 84 57 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c000708b:	0f b7 d0             	movzx  edx,ax
c000708e:	b8 50 f6 01 c0       	mov    eax,0xc001f650
c0007093:	e8 d5 ac ff ff       	call   c0001d6d <chk_chr>
c0007098:	85 c0                	test   eax,eax
c000709a:	0f 85 42 ff ff ff    	jne    c0006fe2 <f_setlabel+0x72>
c00070a0:	66 81 fe ff 00       	cmp    si,0xff
c00070a5:	0f 87 14 01 00 00    	ja     c00071bf <f_setlabel+0x24f>
c00070ab:	e9 fa 00 00 00       	jmp    c00071aa <f_setlabel+0x23a>
c00070b0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c00070b5:	0f 84 27 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c00070bb:	85 db                	test   ebx,ebx
c00070bd:	74 0e                	je     c00070cd <f_setlabel+0x15d>
c00070bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00070c2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070c7:	75 04                	jne    c00070cd <f_setlabel+0x15d>
c00070c9:	89 c3                	mov    ebx,eax
c00070cb:	eb ee                	jmp    c00070bb <f_setlabel+0x14b>
c00070cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070d1:	31 d2                	xor    edx,edx
c00070d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070e3:	e8 1f c1 ff ff       	call   c0003207 <dir_sdi>
c00070e8:	89 c6                	mov    esi,eax
c00070ea:	85 c0                	test   eax,eax
c00070ec:	0f 85 e3 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c00070f2:	ba 01 00 00 00       	mov    edx,0x1
c00070f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070fb:	e8 17 c9 ff ff       	call   c0003a17 <dir_read>
c0007100:	85 c0                	test   eax,eax
c0007102:	75 21                	jne    c0007125 <f_setlabel+0x1b5>
c0007104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000710f:	74 5d                	je     c000716e <f_setlabel+0x1fe>
c0007111:	85 db                	test   ebx,ebx
c0007113:	74 0b                	je     c0007120 <f_setlabel+0x1b0>
c0007115:	b9 0b 00 00 00       	mov    ecx,0xb
c000711a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000711e:	eb 70                	jmp    c0007190 <f_setlabel+0x220>
c0007120:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0007123:	eb 70                	jmp    c0007195 <f_setlabel+0x225>
c0007125:	83 f8 04             	cmp    eax,0x4
c0007128:	75 7c                	jne    c00071a6 <f_setlabel+0x236>
c000712a:	85 db                	test   ebx,ebx
c000712c:	0f 84 a3 00 00 00    	je     c00071d5 <f_setlabel+0x265>
c0007132:	ba 01 00 00 00       	mov    edx,0x1
c0007137:	8d 44 24 24          	lea    eax,[esp+0x24]
c000713b:	e8 51 ca ff ff       	call   c0003b91 <dir_alloc>
c0007140:	89 c6                	mov    esi,eax
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 85 8b 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c000714a:	31 d2                	xor    edx,edx
c000714c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007150:	b9 20 00 00 00       	mov    ecx,0x20
c0007155:	e8 e5 ab ff ff       	call   c0001d3f <mem_set>
c000715a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007161:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007165:	75 18                	jne    c000717f <f_setlabel+0x20f>
c0007167:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000716a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007171:	b9 16 00 00 00       	mov    ecx,0x16
c0007176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000717a:	83 c0 02             	add    eax,0x2
c000717d:	eb 9b                	jmp    c000711a <f_setlabel+0x1aa>
c000717f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007183:	b9 0b 00 00 00       	mov    ecx,0xb
c0007188:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000718c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007190:	e8 95 ab ff ff       	call   c0001d2a <mem_cpy>
c0007195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007199:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000719d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a1:	e8 0e d4 ff ff       	call   c00045b4 <sync_fs>
c00071a6:	89 c6                	mov    esi,eax
c00071a8:	eb 2b                	jmp    c00071d5 <f_setlabel+0x265>
c00071aa:	83 fb 0a             	cmp    ebx,0xa
c00071ad:	0f 87 2f fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071b3:	89 f0                	mov    eax,esi
c00071b5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071b9:	43                   	inc    ebx
c00071ba:	e9 85 fe ff ff       	jmp    c0007044 <f_setlabel+0xd4>
c00071bf:	83 fb 09             	cmp    ebx,0x9
c00071c2:	0f 87 1a fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071c8:	89 f0                	mov    eax,esi
c00071ca:	66 c1 e8 08          	shr    ax,0x8
c00071ce:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071d2:	43                   	inc    ebx
c00071d3:	eb de                	jmp    c00071b3 <f_setlabel+0x243>
c00071d5:	89 f0                	mov    eax,esi
c00071d7:	83 c4 74             	add    esp,0x74
c00071da:	5b                   	pop    ebx
c00071db:	5e                   	pop    esi
c00071dc:	c3                   	ret    

c00071dd <f_forward>:
c00071dd:	55                   	push   ebp
c00071de:	57                   	push   edi
c00071df:	56                   	push   esi
c00071e0:	53                   	push   ebx
c00071e1:	83 ec 2c             	sub    esp,0x2c
c00071e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071f6:	89 d8                	mov    eax,ebx
c00071f8:	e8 b1 b1 ff ff       	call   c00023ae <validate>
c00071fd:	89 c5                	mov    ebp,eax
c00071ff:	85 c0                	test   eax,eax
c0007201:	0f 85 aa 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007207:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000720b:	85 ed                	test   ebp,ebp
c000720d:	0f 85 9e 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007213:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007217:	0f 84 8f 01 00 00    	je     c00073ac <f_forward+0x1cf>
c000721d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007220:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007223:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007226:	bf 00 00 00 00       	mov    edi,0x0
c000722b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000722e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007232:	89 d1                	mov    ecx,edx
c0007234:	19 f9                	sbb    ecx,edi
c0007236:	0f 83 cf 00 00 00    	jae    c000730b <f_forward+0x12e>
c000723c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007240:	e9 c6 00 00 00       	jmp    c000730b <f_forward+0x12e>
c0007245:	50                   	push   eax
c0007246:	50                   	push   eax
c0007247:	6a 00                	push   0x0
c0007249:	6a 00                	push   0x0
c000724b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000724f:	83 c4 10             	add    esp,0x10
c0007252:	85 c0                	test   eax,eax
c0007254:	0f 84 57 01 00 00    	je     c00073b1 <f_forward+0x1d4>
c000725a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007264:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007268:	89 d7                	mov    edi,edx
c000726a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000726d:	89 c6                	mov    esi,eax
c000726f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007273:	21 ce                	and    esi,ecx
c0007275:	89 c1                	mov    ecx,eax
c0007277:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000727d:	0f 84 98 00 00 00    	je     c000731b <f_forward+0x13e>
c0007283:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007287:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000728a:	89 c8                	mov    eax,ecx
c000728c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007290:	e8 af ac ff ff       	call   c0001f44 <clst2sect>
c0007295:	89 d7                	mov    edi,edx
c0007297:	09 c7                	or     edi,eax
c0007299:	0f 84 9e 00 00 00    	je     c000733d <f_forward+0x160>
c000729f:	31 ff                	xor    edi,edi
c00072a1:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00072a4:	01 c6                	add    esi,eax
c00072a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00072aa:	11 d7                	adc    edi,edx
c00072ac:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00072af:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00072b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072b6:	39 fa                	cmp    edx,edi
c00072b8:	0f 85 a2 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072be:	39 f0                	cmp    eax,esi
c00072c0:	0f 85 9a 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072c9:	ba 00 02 00 00       	mov    edx,0x200
c00072ce:	25 ff 01 00 00       	and    eax,0x1ff
c00072d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072d7:	29 c2                	sub    edx,eax
c00072d9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072dc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072df:	39 d1                	cmp    ecx,edx
c00072e1:	76 02                	jbe    c00072e5 <f_forward+0x108>
c00072e3:	89 d1                	mov    ecx,edx
c00072e5:	8d 73 50             	lea    esi,[ebx+0x50]
c00072e8:	52                   	push   edx
c00072e9:	01 c6                	add    esi,eax
c00072eb:	52                   	push   edx
c00072ec:	51                   	push   ecx
c00072ed:	56                   	push   esi
c00072ee:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	85 c0                	test   eax,eax
c00072f7:	74 44                	je     c000733d <f_forward+0x160>
c00072f9:	31 ff                	xor    edi,edi
c00072fb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072fe:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007301:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007305:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007309:	01 07                	add    DWORD PTR [edi],eax
c000730b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007310:	0f 85 2f ff ff ff    	jne    c0007245 <f_forward+0x68>
c0007316:	e9 96 00 00 00       	jmp    c00073b1 <f_forward+0x1d4>
c000731b:	85 f6                	test   esi,esi
c000731d:	0f 85 60 ff ff ff    	jne    c0007283 <f_forward+0xa6>
c0007323:	89 d7                	mov    edi,edx
c0007325:	09 c7                	or     edi,eax
c0007327:	75 05                	jne    c000732e <f_forward+0x151>
c0007329:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000732c:	eb 0a                	jmp    c0007338 <f_forward+0x15b>
c000732e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007331:	89 d8                	mov    eax,ebx
c0007333:	e8 d9 bc ff ff       	call   c0003011 <get_fat>
c0007338:	83 f8 01             	cmp    eax,0x1
c000733b:	77 0b                	ja     c0007348 <f_forward+0x16b>
c000733d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007341:	bd 02 00 00 00       	mov    ebp,0x2
c0007346:	eb 69                	jmp    c00073b1 <f_forward+0x1d4>
c0007348:	83 f8 ff             	cmp    eax,0xffffffff
c000734b:	75 0b                	jne    c0007358 <f_forward+0x17b>
c000734d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007351:	bd 01 00 00 00       	mov    ebp,0x1
c0007356:	eb 59                	jmp    c00073b1 <f_forward+0x1d4>
c0007358:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000735b:	e9 23 ff ff ff       	jmp    c0007283 <f_forward+0xa6>
c0007360:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007364:	79 20                	jns    c0007386 <f_forward+0x1a9>
c0007366:	83 ec 0c             	sub    esp,0xc
c0007369:	6a 01                	push   0x1
c000736b:	52                   	push   edx
c000736c:	50                   	push   eax
c000736d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007371:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007375:	50                   	push   eax
c0007376:	e8 fb a8 ff ff       	call   c0001c76 <disk_write>
c000737b:	83 c4 20             	add    esp,0x20
c000737e:	85 c0                	test   eax,eax
c0007380:	75 cb                	jne    c000734d <f_forward+0x170>
c0007382:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007386:	83 ec 0c             	sub    esp,0xc
c0007389:	6a 01                	push   0x1
c000738b:	57                   	push   edi
c000738c:	56                   	push   esi
c000738d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007391:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007395:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007399:	50                   	push   eax
c000739a:	e8 c1 a8 ff ff       	call   c0001c60 <disk_read>
c000739f:	83 c4 20             	add    esp,0x20
c00073a2:	85 c0                	test   eax,eax
c00073a4:	0f 84 1c ff ff ff    	je     c00072c6 <f_forward+0xe9>
c00073aa:	eb a1                	jmp    c000734d <f_forward+0x170>
c00073ac:	bd 07 00 00 00       	mov    ebp,0x7
c00073b1:	83 c4 2c             	add    esp,0x2c
c00073b4:	89 e8                	mov    eax,ebp
c00073b6:	5b                   	pop    ebx
c00073b7:	5e                   	pop    esi
c00073b8:	5f                   	pop    edi
c00073b9:	5d                   	pop    ebp
c00073ba:	c3                   	ret    

c00073bb <f_mkfs>:
c00073bb:	55                   	push   ebp
c00073bc:	57                   	push   edi
c00073bd:	56                   	push   esi
c00073be:	53                   	push   ebx
c00073bf:	bb 0b 00 00 00       	mov    ebx,0xb
c00073c4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073ca:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073d1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073d8:	e8 b0 ae ff ff       	call   c000228d <get_ldnumber>
c00073dd:	85 c0                	test   eax,eax
c00073df:	0f 88 ec 10 00 00    	js     c00084d1 <f_mkfs+0x1116>
c00073e5:	8b 14 85 a0 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4760]
c00073ec:	85 d2                	test   edx,edx
c00073ee:	74 03                	je     c00073f3 <f_mkfs+0x38>
c00073f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073f3:	85 f6                	test   esi,esi
c00073f5:	75 05                	jne    c00073fc <f_mkfs+0x41>
c00073f7:	be 40 f6 01 c0       	mov    esi,0xc001f640
c00073fc:	83 ec 0c             	sub    esp,0xc
c00073ff:	0f b6 c0             	movzx  eax,al
c0007402:	bb 03 00 00 00       	mov    ebx,0x3
c0007407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000740b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000740f:	e8 49 a8 ff ff       	call   c0001c5d <disk_initialize>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	a8 01                	test   al,0x1
c0007419:	0f 85 b2 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000741f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007424:	a8 04                	test   al,0x4
c0007426:	0f 85 a5 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000742c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000742f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007433:	85 c0                	test   eax,eax
c0007435:	75 20                	jne    c0007457 <f_mkfs+0x9c>
c0007437:	51                   	push   ecx
c0007438:	8d 44 24 78          	lea    eax,[esp+0x78]
c000743c:	50                   	push   eax
c000743d:	6a 03                	push   0x3
c000743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007443:	e8 44 a8 ff ff       	call   c0001c8c <disk_ioctl>
c0007448:	83 c4 10             	add    esp,0x10
c000744b:	85 c0                	test   eax,eax
c000744d:	74 08                	je     c0007457 <f_mkfs+0x9c>
c000744f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007457:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000745b:	8d 42 ff             	lea    eax,[edx-0x1]
c000745e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007463:	77 04                	ja     c0007469 <f_mkfs+0xae>
c0007465:	85 c2                	test   edx,eax
c0007467:	74 08                	je     c0007471 <f_mkfs+0xb6>
c0007469:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007471:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007474:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007478:	48                   	dec    eax
c0007479:	3c 01                	cmp    al,0x1
c000747b:	76 05                	jbe    c0007482 <f_mkfs+0xc7>
c000747d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007482:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007489:	48                   	dec    eax
c000748a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000748f:	77 07                	ja     c0007498 <f_mkfs+0xdd>
c0007491:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007496:	74 08                	je     c00074a0 <f_mkfs+0xe5>
c0007498:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00074a0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00074a3:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00074a9:	77 07                	ja     c00074b2 <f_mkfs+0xf7>
c00074ab:	8d 43 ff             	lea    eax,[ebx-0x1]
c00074ae:	85 d8                	test   eax,ebx
c00074b0:	74 02                	je     c00074b4 <f_mkfs+0xf9>
c00074b2:	31 db                	xor    ebx,ebx
c00074b4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00074bf:	77 0a                	ja     c00074cb <f_mkfs+0x110>
c00074c1:	bb 11 00 00 00       	mov    ebx,0x11
c00074c6:	e9 06 10 00 00       	jmp    c00084d1 <f_mkfs+0x1116>
c00074cb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074d2:	8b 36                	mov    esi,DWORD PTR [esi]
c00074d4:	85 ed                	test   ebp,ebp
c00074d6:	75 1e                	jne    c00074f6 <f_mkfs+0x13b>
c00074d8:	83 ec 0c             	sub    esp,0xc
c00074db:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074e7:	50                   	push   eax
c00074e8:	e8 f1 0f 00 00       	call   c00084de <ff_memalloc>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	89 c5                	mov    ebp,eax
c00074f2:	85 c0                	test   eax,eax
c00074f4:	74 cb                	je     c00074c1 <f_mkfs+0x106>
c00074f6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074fe:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007506:	52                   	push   edx
c0007507:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000750b:	50                   	push   eax
c000750c:	6a 01                	push   0x1
c000750e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007512:	e8 75 a7 ff ff       	call   c0001c8c <disk_ioctl>
c0007517:	83 c4 10             	add    esp,0x10
c000751a:	85 c0                	test   eax,eax
c000751c:	0f 85 4a 0f 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007522:	89 f1                	mov    ecx,esi
c0007524:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000752c:	83 e1 0f             	and    ecx,0xf
c000752f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007537:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000753b:	83 e6 08             	and    esi,0x8
c000753e:	75 56                	jne    c0007596 <f_mkfs+0x1db>
c0007540:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007544:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007548:	83 ff 00             	cmp    edi,0x0
c000754b:	76 20                	jbe    c000756d <f_mkfs+0x1b2>
c000754d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007552:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000755a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007560:	83 d7 ff             	adc    edi,0xffffffff
c0007563:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007567:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000756b:	eb 21                	jmp    c000758e <f_mkfs+0x1d3>
c000756d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007572:	39 f2                	cmp    edx,esi
c0007574:	19 f8                	sbb    eax,edi
c0007576:	73 1e                	jae    c0007596 <f_mkfs+0x1db>
c0007578:	83 c6 c1             	add    esi,0xffffffc1
c000757b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007583:	83 d7 ff             	adc    edi,0xffffffff
c0007586:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000758a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000758e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007596:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000759a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000759e:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075a5:	31 c0                	xor    eax,eax
c00075a7:	ba 7f 00 00 00       	mov    edx,0x7f
c00075ac:	89 c7                	mov    edi,eax
c00075ae:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075b1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075b5:	0f 83 c5 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c00075bb:	89 df                	mov    edi,ebx
c00075bd:	c1 ef 09             	shr    edi,0x9
c00075c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00075c4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075cb:	c1 ef 09             	shr    edi,0x9
c00075ce:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075d3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075d7:	74 29                	je     c0007602 <f_mkfs+0x247>
c00075d9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075df:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075e4:	0f 97 c2             	seta   dl
c00075e7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ee:	0f 92 c0             	setb   al
c00075f1:	08 c2                	or     dl,al
c00075f3:	75 5b                	jne    c0007650 <f_mkfs+0x295>
c00075f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075f9:	83 e0 07             	and    eax,0x7
c00075fc:	3c 04                	cmp    al,0x4
c00075fe:	74 50                	je     c0007650 <f_mkfs+0x295>
c0007600:	eb 1b                	jmp    c000761d <f_mkfs+0x262>
c0007602:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007607:	0f 87 73 0a 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000760d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007613:	76 08                	jbe    c000761d <f_mkfs+0x262>
c0007615:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000761d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007621:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007625:	83 e0 01             	and    eax,0x1
c0007628:	80 e1 02             	and    cl,0x2
c000762b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000762f:	74 0d                	je     c000763e <f_mkfs+0x283>
c0007631:	84 c0                	test   al,al
c0007633:	0f 84 53 09 00 00    	je     c0007f8c <f_mkfs+0xbd1>
c0007639:	e9 12 08 00 00       	jmp    c0007e50 <f_mkfs+0xa95>
c000763e:	bb 13 00 00 00       	mov    ebx,0x13
c0007643:	84 c0                	test   al,al
c0007645:	0f 85 05 08 00 00    	jne    c0007e50 <f_mkfs+0xa95>
c000764b:	e9 39 0e 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c0007650:	31 c0                	xor    eax,eax
c0007652:	ba ff 0f 00 00       	mov    edx,0xfff
c0007657:	89 c7                	mov    edi,eax
c0007659:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000765c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007660:	0f 83 1a 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007666:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000766c:	77 39                	ja     c00076a7 <f_mkfs+0x2ec>
c000766e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007673:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000767b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000767e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007682:	73 08                	jae    c000768c <f_mkfs+0x2d1>
c0007684:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000768c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007691:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007694:	b8 00 00 00 00       	mov    eax,0x0
c0007699:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000769d:	73 08                	jae    c00076a7 <f_mkfs+0x2ec>
c000769f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00076a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00076af:	83 c0 20             	add    eax,0x20
c00076b2:	83 d2 00             	adc    edx,0x0
c00076b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00076b9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00076bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c1:	31 d2                	xor    edx,edx
c00076c3:	31 ff                	xor    edi,edi
c00076c5:	52                   	push   edx
c00076c6:	89 fb                	mov    ebx,edi
c00076c8:	50                   	push   eax
c00076c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076d1:	e8 a6 6f 01 00       	call   c001e67c <__udivdi3>
c00076d6:	83 c4 10             	add    esp,0x10
c00076d9:	c1 e0 02             	shl    eax,0x2
c00076dc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076e0:	05 07 02 00 00       	add    eax,0x207
c00076e5:	89 f1                	mov    ecx,esi
c00076e7:	c1 e8 09             	shr    eax,0x9
c00076ea:	83 c1 ff             	add    ecx,0xffffffff
c00076ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076f1:	83 d3 ff             	adc    ebx,0xffffffff
c00076f4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076f8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	01 c8                	add    eax,ecx
c0007700:	11 da                	adc    edx,ebx
c0007702:	89 c1                	mov    ecx,eax
c0007704:	f7 de                	neg    esi
c0007706:	89 d0                	mov    eax,edx
c0007708:	83 d7 00             	adc    edi,0x0
c000770b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000770f:	f7 df                	neg    edi
c0007711:	21 f1                	and    ecx,esi
c0007713:	21 f8                	and    eax,edi
c0007715:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000771d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007721:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007725:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007729:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000772c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007730:	0f ac d0 01          	shrd   eax,edx,0x1
c0007734:	89 df                	mov    edi,ebx
c0007736:	d1 ea                	shr    edx,1
c0007738:	39 c1                	cmp    ecx,eax
c000773a:	19 d7                	sbb    edi,edx
c000773c:	0f 83 3e 09 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007746:	31 d2                	xor    edx,edx
c0007748:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000774c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007750:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007754:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007757:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000775b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000775f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007763:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007767:	83 f8 0f             	cmp    eax,0xf
c000776a:	0f 86 10 09 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007770:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007778:	0f 87 02 09 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000777e:	31 d2                	xor    edx,edx
c0007780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007784:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000778c:	83 c0 07             	add    eax,0x7
c000778f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007797:	c1 e8 03             	shr    eax,0x3
c000779a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00077a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00077a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a9:	c1 e0 09             	shl    eax,0x9
c00077ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00077b0:	48                   	dec    eax
c00077b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00077b5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00077b9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00077bd:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00077c1:	31 d2                	xor    edx,edx
c00077c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077db:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077e3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077e7:	31 ff                	xor    edi,edi
c00077e9:	31 f6                	xor    esi,esi
c00077eb:	31 db                	xor    ebx,ebx
c00077ed:	85 ff                	test   edi,edi
c00077ef:	74 05                	je     c00077f6 <f_mkfs+0x43b>
c00077f1:	4f                   	dec    edi
c00077f2:	74 44                	je     c0007838 <f_mkfs+0x47d>
c00077f4:	eb 4f                	jmp    c0007845 <f_mkfs+0x48a>
c00077f6:	83 ec 0c             	sub    esp,0xc
c00077f9:	0f b7 c3             	movzx  eax,bx
c00077fc:	50                   	push   eax
c00077fd:	e8 05 0e 00 00       	call   c0008607 <ff_wtoupper>
c0007802:	83 c4 10             	add    esp,0x10
c0007805:	89 c1                	mov    ecx,eax
c0007807:	8d 53 01             	lea    edx,[ebx+0x1]
c000780a:	66 39 c3             	cmp    bx,ax
c000780d:	75 3e                	jne    c000784d <f_mkfs+0x492>
c000780f:	be 01 00 00 00       	mov    esi,0x1
c0007814:	89 df                	mov    edi,ebx
c0007816:	66 01 f7             	add    di,si
c0007819:	75 07                	jne    c0007822 <f_mkfs+0x467>
c000781b:	83 fe 7f             	cmp    esi,0x7f
c000781e:	77 31                	ja     c0007851 <f_mkfs+0x496>
c0007820:	eb 16                	jmp    c0007838 <f_mkfs+0x47d>
c0007822:	83 ec 0c             	sub    esp,0xc
c0007825:	0f b7 ff             	movzx  edi,di
c0007828:	57                   	push   edi
c0007829:	e8 d9 0d 00 00       	call   c0008607 <ff_wtoupper>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	39 c7                	cmp    edi,eax
c0007833:	75 e6                	jne    c000781b <f_mkfs+0x460>
c0007835:	46                   	inc    esi
c0007836:	eb dc                	jmp    c0007814 <f_mkfs+0x459>
c0007838:	31 c0                	xor    eax,eax
c000783a:	89 d9                	mov    ecx,ebx
c000783c:	4e                   	dec    esi
c000783d:	0f 95 c0             	setne  al
c0007840:	43                   	inc    ebx
c0007841:	89 c7                	mov    edi,eax
c0007843:	eb 14                	jmp    c0007859 <f_mkfs+0x49e>
c0007845:	89 f1                	mov    ecx,esi
c0007847:	01 f3                	add    ebx,esi
c0007849:	31 ff                	xor    edi,edi
c000784b:	eb 0c                	jmp    c0007859 <f_mkfs+0x49e>
c000784d:	89 d3                	mov    ebx,edx
c000784f:	eb 08                	jmp    c0007859 <f_mkfs+0x49e>
c0007851:	bf 02 00 00 00       	mov    edi,0x2
c0007856:	83 c9 ff             	or     ecx,0xffffffff
c0007859:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000785d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007860:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007864:	0f b6 c1             	movzx  eax,cl
c0007867:	e8 3a a9 ff ff       	call   c00021a6 <xsum32>
c000786c:	66 c1 e9 08          	shr    cx,0x8
c0007870:	89 c2                	mov    edx,eax
c0007872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007875:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007879:	0f b7 c1             	movzx  eax,cx
c000787c:	e8 25 a9 ff ff       	call   c00021a6 <xsum32>
c0007881:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007886:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000788a:	66 85 db             	test   bx,bx
c000788d:	74 1f                	je     c00078ae <f_mkfs+0x4f3>
c000788f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007892:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007899:	83 c0 02             	add    eax,0x2
c000789c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00078a2:	39 c2                	cmp    edx,eax
c00078a4:	74 08                	je     c00078ae <f_mkfs+0x4f3>
c00078a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a9:	e9 3f ff ff ff       	jmp    c00077ed <f_mkfs+0x432>
c00078ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078b1:	83 ec 0c             	sub    esp,0xc
c00078b4:	05 01 02 00 00       	add    eax,0x201
c00078b9:	c1 e8 09             	shr    eax,0x9
c00078bc:	50                   	push   eax
c00078bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00078c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c9:	55                   	push   ebp
c00078ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ce:	e8 a3 a3 ff ff       	call   c0001c76 <disk_write>
c00078d3:	83 c4 20             	add    esp,0x20
c00078d6:	85 c0                	test   eax,eax
c00078d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078db:	0f 85 8b 0b 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00078e1:	89 d0                	mov    eax,edx
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078e9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ed:	66 85 db             	test   bx,bx
c00078f0:	74 04                	je     c00078f6 <f_mkfs+0x53b>
c00078f2:	31 c0                	xor    eax,eax
c00078f4:	eb b0                	jmp    c00078a6 <f_mkfs+0x4eb>
c00078f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fa:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078fe:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007902:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007908:	31 d2                	xor    edx,edx
c000790a:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007915:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007919:	c1 eb 09             	shr    ebx,0x9
c000791c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007927:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000792b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000792f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007933:	8d 70 01             	lea    esi,[eax+0x1]
c0007936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000793a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000793e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007945:	31 d2                	xor    edx,edx
c0007947:	25 00 fe ff ff       	and    eax,0xfffffe00
c000794c:	89 04 24             	mov    DWORD PTR [esp],eax
c000794f:	89 c1                	mov    ecx,eax
c0007951:	89 e8                	mov    eax,ebp
c0007953:	e8 e7 a3 ff ff       	call   c0001d3f <mem_set>
c0007958:	31 c0                	xor    eax,eax
c000795a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000795d:	76 10                	jbe    c000796f <f_mkfs+0x5b4>
c000795f:	83 fe 07             	cmp    esi,0x7
c0007962:	76 0b                	jbe    c000796f <f_mkfs+0x5b4>
c0007964:	40                   	inc    eax
c0007965:	83 ee 08             	sub    esi,0x8
c0007968:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000796d:	eb eb                	jmp    c000795a <f_mkfs+0x59f>
c000796f:	b2 01                	mov    dl,0x1
c0007971:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007975:	85 f6                	test   esi,esi
c0007977:	74 0c                	je     c0007985 <f_mkfs+0x5ca>
c0007979:	39 04 24             	cmp    DWORD PTR [esp],eax
c000797c:	76 07                	jbe    c0007985 <f_mkfs+0x5ca>
c000797e:	08 11                	or     BYTE PTR [ecx],dl
c0007980:	4e                   	dec    esi
c0007981:	d1 e2                	shl    edx,1
c0007983:	eb f0                	jmp    c0007975 <f_mkfs+0x5ba>
c0007985:	89 df                	mov    edi,ebx
c0007987:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000798b:	76 04                	jbe    c0007991 <f_mkfs+0x5d6>
c000798d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007991:	83 ec 0c             	sub    esp,0xc
c0007994:	57                   	push   edi
c0007995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	55                   	push   ebp
c000799e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a2:	e8 cf a2 ff ff       	call   c0001c76 <disk_write>
c00079a7:	83 c4 20             	add    esp,0x20
c00079aa:	85 c0                	test   eax,eax
c00079ac:	0f 85 ba 0a 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00079b2:	31 d2                	xor    edx,edx
c00079b4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00079b8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00079bc:	29 fb                	sub    ebx,edi
c00079be:	0f 85 7a ff ff ff    	jne    c000793e <f_mkfs+0x583>
c00079c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079d0:	31 f6                	xor    esi,esi
c00079d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079d9:	31 d2                	xor    edx,edx
c00079db:	89 e8                	mov    eax,ebp
c00079dd:	e8 5d a3 ff ff       	call   c0001d3f <mem_set>
c00079e2:	31 c9                	xor    ecx,ecx
c00079e4:	85 db                	test   ebx,ebx
c00079e6:	75 40                	jne    c0007a28 <f_mkfs+0x66d>
c00079e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ed:	89 e8                	mov    eax,ebp
c00079ef:	bb 02 00 00 00       	mov    ebx,0x2
c00079f4:	e8 28 a3 ff ff       	call   c0001d21 <st_dword>
c00079f9:	8d 45 04             	lea    eax,[ebp+0x4]
c00079fc:	83 ca ff             	or     edx,0xffffffff
c00079ff:	e8 1d a3 ff ff       	call   c0001d21 <st_dword>
c0007a04:	b9 08 00 00 00       	mov    ecx,0x8
c0007a09:	eb 1d                	jmp    c0007a28 <f_mkfs+0x66d>
c0007a0b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a0e:	76 3b                	jbe    c0007a4b <f_mkfs+0x690>
c0007a10:	43                   	inc    ebx
c0007a11:	83 fe 01             	cmp    esi,0x1
c0007a14:	89 da                	mov    edx,ebx
c0007a16:	77 03                	ja     c0007a1b <f_mkfs+0x660>
c0007a18:	83 ca ff             	or     edx,0xffffffff
c0007a1b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007a1f:	4e                   	dec    esi
c0007a20:	e8 fc a2 ff ff       	call   c0001d21 <st_dword>
c0007a25:	83 c1 04             	add    ecx,0x4
c0007a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a2c:	85 f6                	test   esi,esi
c0007a2e:	75 db                	jne    c0007a0b <f_mkfs+0x650>
c0007a30:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a35:	77 14                	ja     c0007a4b <f_mkfs+0x690>
c0007a37:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a3b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a42:	85 f6                	test   esi,esi
c0007a44:	74 05                	je     c0007a4b <f_mkfs+0x690>
c0007a46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a49:	77 dd                	ja     c0007a28 <f_mkfs+0x66d>
c0007a4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a53:	39 cf                	cmp    edi,ecx
c0007a55:	76 02                	jbe    c0007a59 <f_mkfs+0x69e>
c0007a57:	89 cf                	mov    edi,ecx
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	57                   	push   edi
c0007a5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a61:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a65:	55                   	push   ebp
c0007a66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a6a:	e8 07 a2 ff ff       	call   c0001c76 <disk_write>
c0007a6f:	83 c4 20             	add    esp,0x20
c0007a72:	85 c0                	test   eax,eax
c0007a74:	0f 85 f2 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007a7a:	31 d2                	xor    edx,edx
c0007a7c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a80:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a84:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a88:	0f 85 48 ff ff ff    	jne    c00079d6 <f_mkfs+0x61b>
c0007a8e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a91:	31 d2                	xor    edx,edx
c0007a93:	89 e8                	mov    eax,ebp
c0007a95:	31 ff                	xor    edi,edi
c0007a97:	e8 a3 a2 ff ff       	call   c0001d3f <mem_set>
c0007a9c:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a9f:	ba 02 00 00 00       	mov    edx,0x2
c0007aa4:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007aa8:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007aac:	e8 70 a2 ff ff       	call   c0001d21 <st_dword>
c0007ab1:	8d 45 38             	lea    eax,[ebp+0x38]
c0007ab4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007ab8:	e8 64 a2 ff ff       	call   c0001d21 <st_dword>
c0007abd:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ac0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ac4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ac8:	e8 54 a2 ff ff       	call   c0001d21 <st_dword>
c0007acd:	8d 45 54             	lea    eax,[ebp+0x54]
c0007ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007ad4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ad8:	83 c2 02             	add    edx,0x2
c0007adb:	e8 41 a2 ff ff       	call   c0001d21 <st_dword>
c0007ae0:	8d 45 58             	lea    eax,[ebp+0x58]
c0007ae3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ae7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aeb:	e8 31 a2 ff ff       	call   c0001d21 <st_dword>
c0007af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007af4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007af9:	89 c6                	mov    esi,eax
c0007afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007b0a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007b0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b11:	39 cb                	cmp    ebx,ecx
c0007b13:	76 02                	jbe    c0007b17 <f_mkfs+0x75c>
c0007b15:	89 cb                	mov    ebx,ecx
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	53                   	push   ebx
c0007b1b:	57                   	push   edi
c0007b1c:	56                   	push   esi
c0007b1d:	55                   	push   ebp
c0007b1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b22:	e8 4f a1 ff ff       	call   c0001c76 <disk_write>
c0007b27:	83 c4 20             	add    esp,0x20
c0007b2a:	85 c0                	test   eax,eax
c0007b2c:	0f 85 3a 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007b32:	31 d2                	xor    edx,edx
c0007b34:	b9 00 02 00 00       	mov    ecx,0x200
c0007b39:	89 e8                	mov    eax,ebp
c0007b3b:	e8 ff a1 ff ff       	call   c0001d3f <mem_set>
c0007b40:	31 d2                	xor    edx,edx
c0007b42:	01 de                	add    esi,ebx
c0007b44:	11 d7                	adc    edi,edx
c0007b46:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b49:	75 bf                	jne    c0007b0a <f_mkfs+0x74f>
c0007b4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b53:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b5b:	b9 00 02 00 00       	mov    ecx,0x200
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	89 e8                	mov    eax,ebp
c0007b64:	e8 d6 a1 ff ff       	call   c0001d3f <mem_set>
c0007b69:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b6e:	ba 20 f7 01 c0       	mov    edx,0xc001f720
c0007b73:	89 e8                	mov    eax,ebp
c0007b75:	e8 b0 a1 ff ff       	call   c0001d2a <mem_cpy>
c0007b7a:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b85:	e8 9a a1 ff ff       	call   c0001d24 <st_qword>
c0007b8a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b8e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b95:	e8 8a a1 ff ff       	call   c0001d24 <st_qword>
c0007b9a:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b9d:	ba 20 00 00 00       	mov    edx,0x20
c0007ba2:	e8 7a a1 ff ff       	call   c0001d21 <st_dword>
c0007ba7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007bab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007baf:	e8 6d a1 ff ff       	call   c0001d21 <st_dword>
c0007bb4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007bb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007bbc:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007bc0:	e8 5c a1 ff ff       	call   c0001d21 <st_dword>
c0007bc5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007bc8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bcc:	e8 50 a1 ff ff       	call   c0001d21 <st_dword>
c0007bd1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007bd5:	8d 50 02             	lea    edx,[eax+0x2]
c0007bd8:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bdb:	e8 41 a1 ff ff       	call   c0001d21 <st_dword>
c0007be0:	8d 45 64             	lea    eax,[ebp+0x64]
c0007be3:	ba 00 00 21 50       	mov    edx,0x50210000
c0007be8:	e8 34 a1 ff ff       	call   c0001d21 <st_dword>
c0007bed:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bf0:	ba 00 01 00 00       	mov    edx,0x100
c0007bf5:	e8 23 a1 ff ff       	call   c0001d1d <st_word>
c0007bfa:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bfe:	b8 0a 00 00 00       	mov    eax,0xa
c0007c03:	48                   	dec    eax
c0007c04:	74 05                	je     c0007c0b <f_mkfs+0x850>
c0007c06:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007c09:	eb f8                	jmp    c0007c03 <f_mkfs+0x848>
c0007c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c0f:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c17:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007c1b:	74 05                	je     c0007c22 <f_mkfs+0x867>
c0007c1d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007c20:	eb f5                	jmp    c0007c17 <f_mkfs+0x85c>
c0007c22:	8d 45 78             	lea    eax,[ebp+0x78]
c0007c25:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c2a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	e8 e6 a0 ff ff       	call   c0001d1d <st_word>
c0007c37:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c45:	e8 d3 a0 ff ff       	call   c0001d1d <st_word>
c0007c4a:	31 c9                	xor    ecx,ecx
c0007c4c:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c4f:	83 f8 01             	cmp    eax,0x1
c0007c52:	76 13                	jbe    c0007c67 <f_mkfs+0x8ac>
c0007c54:	83 f9 70             	cmp    ecx,0x70
c0007c57:	74 0e                	je     c0007c67 <f_mkfs+0x8ac>
c0007c59:	89 da                	mov    edx,ebx
c0007c5b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c60:	e8 41 a5 ff ff       	call   c00021a6 <xsum32>
c0007c65:	89 c3                	mov    ebx,eax
c0007c67:	41                   	inc    ecx
c0007c68:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c6e:	75 dc                	jne    c0007c4c <f_mkfs+0x891>
c0007c70:	89 f0                	mov    eax,esi
c0007c72:	89 fa                	mov    edx,edi
c0007c74:	83 c0 01             	add    eax,0x1
c0007c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c7b:	83 d2 00             	adc    edx,0x0
c0007c7e:	83 ec 0c             	sub    esp,0xc
c0007c81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c85:	6a 01                	push   0x1
c0007c87:	57                   	push   edi
c0007c88:	56                   	push   esi
c0007c89:	55                   	push   ebp
c0007c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c8e:	e8 e3 9f ff ff       	call   c0001c76 <disk_write>
c0007c93:	83 c4 20             	add    esp,0x20
c0007c96:	85 c0                	test   eax,eax
c0007c98:	0f 85 ce 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007c9e:	31 d2                	xor    edx,edx
c0007ca0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ca5:	89 e8                	mov    eax,ebp
c0007ca7:	e8 93 a0 ff ff       	call   c0001d3f <mem_set>
c0007cac:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007cb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cb4:	e8 64 a0 ff ff       	call   c0001d1d <st_word>
c0007cb9:	89 f0                	mov    eax,esi
c0007cbb:	89 fa                	mov    edx,edi
c0007cbd:	83 c0 09             	add    eax,0x9
c0007cc0:	83 d2 00             	adc    edx,0x0
c0007cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007cca:	31 c9                	xor    ecx,ecx
c0007ccc:	41                   	inc    ecx
c0007ccd:	89 da                	mov    edx,ebx
c0007ccf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cd4:	e8 cd a4 ff ff       	call   c00021a6 <xsum32>
c0007cd9:	89 c3                	mov    ebx,eax
c0007cdb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ce1:	75 e9                	jne    c0007ccc <f_mkfs+0x911>
c0007ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ce7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ceb:	83 c0 01             	add    eax,0x1
c0007cee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cf2:	83 d2 00             	adc    edx,0x0
c0007cf5:	83 ec 0c             	sub    esp,0xc
c0007cf8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cfc:	6a 01                	push   0x1
c0007cfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d06:	55                   	push   ebp
c0007d07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d0b:	e8 66 9f ff ff       	call   c0001c76 <disk_write>
c0007d10:	83 c4 20             	add    esp,0x20
c0007d13:	85 c0                	test   eax,eax
c0007d15:	0f 85 51 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d1f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007d23:	75 09                	jne    c0007d2e <f_mkfs+0x973>
c0007d25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d2c:	74 12                	je     c0007d40 <f_mkfs+0x985>
c0007d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d3e:	eb 8a                	jmp    c0007cca <f_mkfs+0x90f>
c0007d40:	31 d2                	xor    edx,edx
c0007d42:	b9 00 02 00 00       	mov    ecx,0x200
c0007d47:	89 e8                	mov    eax,ebp
c0007d49:	e8 f1 9f ff ff       	call   c0001d3f <mem_set>
c0007d4e:	83 c6 0b             	add    esi,0xb
c0007d51:	83 d7 00             	adc    edi,0x0
c0007d54:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d58:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d5c:	31 c9                	xor    ecx,ecx
c0007d5e:	41                   	inc    ecx
c0007d5f:	89 da                	mov    edx,ebx
c0007d61:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d66:	e8 3b a4 ff ff       	call   c00021a6 <xsum32>
c0007d6b:	89 c3                	mov    ebx,eax
c0007d6d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d73:	75 e9                	jne    c0007d5e <f_mkfs+0x9a3>
c0007d75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d7c:	83 c6 01             	add    esi,0x1
c0007d7f:	83 d7 00             	adc    edi,0x0
c0007d82:	83 ec 0c             	sub    esp,0xc
c0007d85:	6a 01                	push   0x1
c0007d87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8f:	55                   	push   ebp
c0007d90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d94:	e8 dd 9e ff ff       	call   c0001c76 <disk_write>
c0007d99:	83 c4 20             	add    esp,0x20
c0007d9c:	85 c0                	test   eax,eax
c0007d9e:	0f 85 c8 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007da4:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007da8:	75 06                	jne    c0007db0 <f_mkfs+0x9f5>
c0007daa:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007dae:	74 09                	je     c0007db9 <f_mkfs+0x9fe>
c0007db0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007db3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007db7:	eb a3                	jmp    c0007d5c <f_mkfs+0x9a1>
c0007db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007dbd:	89 da                	mov    edx,ebx
c0007dbf:	01 e8                	add    eax,ebp
c0007dc1:	e8 5b 9f ff ff       	call   c0001d21 <st_dword>
c0007dc6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007dcb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dd3:	75 e4                	jne    c0007db9 <f_mkfs+0x9fe>
c0007dd5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007dd8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ddc:	83 c6 02             	add    esi,0x2
c0007ddf:	83 d7 00             	adc    edi,0x0
c0007de2:	83 ec 0c             	sub    esp,0xc
c0007de5:	6a 01                	push   0x1
c0007de7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007deb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007def:	55                   	push   ebp
c0007df0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df4:	e8 7d 9e ff ff       	call   c0001c76 <disk_write>
c0007df9:	83 c4 20             	add    esp,0x20
c0007dfc:	85 c0                	test   eax,eax
c0007dfe:	0f 85 68 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007e04:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007e09:	74 0d                	je     c0007e18 <f_mkfs+0xa5d>
c0007e0b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007e13:	e9 43 fd ff ff       	jmp    c0007b5b <f_mkfs+0x7a0>
c0007e18:	b1 07                	mov    cl,0x7
c0007e1a:	e9 e3 05 00 00       	jmp    c0008402 <f_mkfs+0x1047>
c0007e1f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007e24:	0f 85 4f 02 00 00    	jne    c0008079 <f_mkfs+0xcbe>
c0007e2a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e2f:	0f 86 22 02 00 00    	jbe    c0008057 <f_mkfs+0xc9c>
c0007e35:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e3a:	0f 85 81 06 00 00    	jne    c00084c1 <f_mkfs+0x1106>
c0007e40:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e47:	83 f8 40             	cmp    eax,0x40
c0007e4a:	0f 87 51 06 00 00    	ja     c00084a1 <f_mkfs+0x10e6>
c0007e50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e54:	85 ff                	test   edi,edi
c0007e56:	75 1c                	jne    c0007e74 <f_mkfs+0xab9>
c0007e58:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e5b:	ba 20 f6 01 c0       	mov    edx,0xc001f620
c0007e60:	c1 e9 0c             	shr    ecx,0xc
c0007e63:	bf 01 00 00 00       	mov    edi,0x1
c0007e68:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e6b:	66 85 c0             	test   ax,ax
c0007e6e:	0f 85 95 01 00 00    	jne    c0008009 <f_mkfs+0xc4e>
c0007e74:	31 d2                	xor    edx,edx
c0007e76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e79:	f7 f7                	div    edi
c0007e7b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e80:	0f 86 95 01 00 00    	jbe    c000801b <f_mkfs+0xc60>
c0007e86:	83 c0 02             	add    eax,0x2
c0007e89:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e8e:	01 c0                	add    eax,eax
c0007e90:	05 ff 01 00 00       	add    eax,0x1ff
c0007e95:	be 01 00 00 00       	mov    esi,0x1
c0007e9a:	c1 e8 09             	shr    eax,0x9
c0007e9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ea5:	c1 e0 05             	shl    eax,0x5
c0007ea8:	c1 e8 09             	shr    eax,0x9
c0007eab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007eaf:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007eb4:	31 d2                	xor    edx,edx
c0007eb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007eba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ebe:	89 f0                	mov    eax,esi
c0007ec0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ec4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007ed4:	31 d2                	xor    edx,edx
c0007ed6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007edb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007edf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ee3:	31 db                	xor    ebx,ebx
c0007ee5:	01 c8                	add    eax,ecx
c0007ee7:	11 da                	adc    edx,ebx
c0007ee9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eed:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ef1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ef5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ef9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007efd:	f7 da                	neg    edx
c0007eff:	21 d1                	and    ecx,edx
c0007f01:	29 d9                	sub    ecx,ebx
c0007f03:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f08:	0f 85 20 01 00 00    	jne    c000802e <f_mkfs+0xc73>
c0007f0e:	31 db                	xor    ebx,ebx
c0007f10:	01 ce                	add    esi,ecx
c0007f12:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007f16:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007f22:	c1 e0 04             	shl    eax,0x4
c0007f25:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f29:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f2d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f31:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f38:	19 d3                	sbb    ebx,edx
c0007f3a:	0f 82 40 01 00 00    	jb     c0008080 <f_mkfs+0xcc5>
c0007f40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f47:	89 c8                	mov    eax,ecx
c0007f49:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f4e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f52:	29 f0                	sub    eax,esi
c0007f54:	29 d0                	sub    eax,edx
c0007f56:	31 d2                	xor    edx,edx
c0007f58:	f7 f7                	div    edi
c0007f5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5f:	89 c3                	mov    ebx,eax
c0007f61:	0f 85 b8 fe ff ff    	jne    c0007e1f <f_mkfs+0xa64>
c0007f67:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f6c:	0f 87 1d 01 00 00    	ja     c000808f <f_mkfs+0xcd4>
c0007f72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f77:	0f 85 03 01 00 00    	jne    c0008080 <f_mkfs+0xcc5>
c0007f7d:	83 ff 01             	cmp    edi,0x1
c0007f80:	0f 86 fa 00 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007f86:	d1 ef                	shr    edi,1
c0007f88:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f93:	85 db                	test   ebx,ebx
c0007f95:	75 2d                	jne    c0007fc4 <f_mkfs+0xc09>
c0007f97:	89 cb                	mov    ebx,ecx
c0007f99:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c0007f9e:	c1 eb 11             	shr    ebx,0x11
c0007fa1:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007fa9:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007fac:	66 85 c0             	test   ax,ax
c0007faf:	74 11                	je     c0007fc2 <f_mkfs+0xc07>
c0007fb1:	83 c2 02             	add    edx,0x2
c0007fb4:	39 d8                	cmp    eax,ebx
c0007fb6:	77 0a                	ja     c0007fc2 <f_mkfs+0xc07>
c0007fb8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fbc:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007fc0:	eb e7                	jmp    c0007fa9 <f_mkfs+0xbee>
c0007fc2:	31 db                	xor    ebx,ebx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	89 c8                	mov    eax,ecx
c0007fc8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fcc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fd3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fd8:	c1 ea 09             	shr    edx,0x9
c0007fdb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fe0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fe4:	0f 87 96 00 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c0007fea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fee:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ff6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ffa:	be 20 00 00 00       	mov    esi,0x20
c0007fff:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0008004:	e9 a6 fe ff ff       	jmp    c0007eaf <f_mkfs+0xaf4>
c0008009:	83 c2 02             	add    edx,0x2
c000800c:	39 c8                	cmp    eax,ecx
c000800e:	0f 87 60 fe ff ff    	ja     c0007e74 <f_mkfs+0xab9>
c0008014:	01 ff                	add    edi,edi
c0008016:	e9 4d fe ff ff       	jmp    c0007e68 <f_mkfs+0xaad>
c000801b:	8d 04 40             	lea    eax,[eax+eax*2]
c000801e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008023:	40                   	inc    eax
c0008024:	d1 e8                	shr    eax,1
c0008026:	83 c0 03             	add    eax,0x3
c0008029:	e9 62 fe ff ff       	jmp    c0007e90 <f_mkfs+0xad5>
c000802e:	31 d2                	xor    edx,edx
c0008030:	89 c8                	mov    eax,ecx
c0008032:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008036:	85 d2                	test   edx,edx
c0008038:	74 0c                	je     c0008046 <f_mkfs+0xc8b>
c000803a:	49                   	dec    ecx
c000803b:	46                   	inc    esi
c000803c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008041:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008046:	89 c8                	mov    eax,ecx
c0008048:	31 d2                	xor    edx,edx
c000804a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000804e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008052:	e9 c3 fe ff ff       	jmp    c0007f1a <f_mkfs+0xb5f>
c0008057:	3d f5 0f 00 00       	cmp    eax,0xff5
c000805c:	77 31                	ja     c000808f <f_mkfs+0xcd4>
c000805e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008063:	75 1b                	jne    c0008080 <f_mkfs+0xcc5>
c0008065:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806c:	3d 80 00 00 00       	cmp    eax,0x80
c0008071:	0f 86 d9 fd ff ff    	jbe    c0007e50 <f_mkfs+0xa95>
c0008077:	eb 07                	jmp    c0008080 <f_mkfs+0xcc5>
c0008079:	3d f5 0f 00 00       	cmp    eax,0xff5
c000807e:	76 0a                	jbe    c000808a <f_mkfs+0xccf>
c0008080:	bb 0e 00 00 00       	mov    ebx,0xe
c0008085:	e9 ff 03 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c000808a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000808f:	31 d2                	xor    edx,edx
c0008091:	b9 00 02 00 00       	mov    ecx,0x200
c0008096:	89 e8                	mov    eax,ebp
c0008098:	e8 a2 9c ff ff       	call   c0001d3f <mem_set>
c000809d:	b9 0b 00 00 00       	mov    ecx,0xb
c00080a2:	ba 42 f7 01 c0       	mov    edx,0xc001f742
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 7c 9c ff ff       	call   c0001d2a <mem_cpy>
c00080ae:	8d 45 0b             	lea    eax,[ebp+0xb]
c00080b1:	ba 00 02 00 00       	mov    edx,0x200
c00080b6:	e8 62 9c ff ff       	call   c0001d1d <st_word>
c00080bb:	89 f8                	mov    eax,edi
c00080bd:	0f b7 d6             	movzx  edx,si
c00080c0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00080c3:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080c6:	e8 52 9c ff ff       	call   c0001d1d <st_word>
c00080cb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080cf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080d7:	75 08                	jne    c00080e1 <f_mkfs+0xd26>
c00080d9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080e1:	8d 45 11             	lea    eax,[ebp+0x11]
c00080e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080e8:	e8 30 9c ff ff       	call   c0001d1d <st_word>
c00080ed:	b8 ff ff 00 00       	mov    eax,0xffff
c00080f2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080f6:	39 d0                	cmp    eax,edx
c00080f8:	b8 00 00 00 00       	mov    eax,0x0
c00080fd:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008101:	72 0a                	jb     c000810d <f_mkfs+0xd52>
c0008103:	8d 45 13             	lea    eax,[ebp+0x13]
c0008106:	e8 12 9c ff ff       	call   c0001d1d <st_word>
c000810b:	eb 08                	jmp    c0008115 <f_mkfs+0xd5a>
c000810d:	8d 45 20             	lea    eax,[ebp+0x20]
c0008110:	e8 0c 9c ff ff       	call   c0001d21 <st_dword>
c0008115:	8d 45 18             	lea    eax,[ebp+0x18]
c0008118:	ba 3f 00 00 00       	mov    edx,0x3f
c000811d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008121:	e8 f7 9b ff ff       	call   c0001d1d <st_word>
c0008126:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008129:	ba ff 00 00 00       	mov    edx,0xff
c000812e:	e8 ea 9b ff ff       	call   c0001d1d <st_word>
c0008133:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000813a:	e8 e2 9b ff ff       	call   c0001d21 <st_dword>
c000813f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008144:	75 57                	jne    c000819d <f_mkfs+0xde2>
c0008146:	8d 45 43             	lea    eax,[ebp+0x43]
c0008149:	ba 00 00 21 50       	mov    edx,0x50210000
c000814e:	e8 ce 9b ff ff       	call   c0001d21 <st_dword>
c0008153:	8d 45 24             	lea    eax,[ebp+0x24]
c0008156:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000815a:	e8 c2 9b ff ff       	call   c0001d21 <st_dword>
c000815f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008162:	ba 02 00 00 00       	mov    edx,0x2
c0008167:	e8 b5 9b ff ff       	call   c0001d21 <st_dword>
c000816c:	8d 45 30             	lea    eax,[ebp+0x30]
c000816f:	ba 01 00 00 00       	mov    edx,0x1
c0008174:	e8 a4 9b ff ff       	call   c0001d1d <st_word>
c0008179:	8d 45 32             	lea    eax,[ebp+0x32]
c000817c:	ba 06 00 00 00       	mov    edx,0x6
c0008181:	e8 97 9b ff ff       	call   c0001d1d <st_word>
c0008186:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000818a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000818e:	8d 45 47             	lea    eax,[ebp+0x47]
c0008191:	b9 13 00 00 00       	mov    ecx,0x13
c0008196:	ba 4e f7 01 c0       	mov    edx,0xc001f74e
c000819b:	eb 2f                	jmp    c00081cc <f_mkfs+0xe11>
c000819d:	8d 45 27             	lea    eax,[ebp+0x27]
c00081a0:	ba 00 00 21 50       	mov    edx,0x50210000
c00081a5:	e8 77 9b ff ff       	call   c0001d21 <st_dword>
c00081aa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00081af:	8d 45 16             	lea    eax,[ebp+0x16]
c00081b2:	e8 66 9b ff ff       	call   c0001d1d <st_word>
c00081b7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00081bb:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00081bf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00081c2:	b9 13 00 00 00       	mov    ecx,0x13
c00081c7:	ba 62 f7 01 c0       	mov    edx,0xc001f762
c00081cc:	e8 59 9b ff ff       	call   c0001d2a <mem_cpy>
c00081d1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081d7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081dc:	89 f0                	mov    eax,esi
c00081de:	e8 3a 9b ff ff       	call   c0001d1d <st_word>
c00081e3:	83 ec 0c             	sub    esp,0xc
c00081e6:	6a 01                	push   0x1
c00081e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081f0:	55                   	push   ebp
c00081f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081f5:	e8 7c 9a ff ff       	call   c0001c76 <disk_write>
c00081fa:	83 c4 20             	add    esp,0x20
c00081fd:	85 c0                	test   eax,eax
c00081ff:	0f 85 67 02 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	0f 85 b7 00 00 00    	jne    c00082c7 <f_mkfs+0xf0c>
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	6a 01                	push   0x1
c0008215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000821d:	83 c0 06             	add    eax,0x6
c0008220:	83 d2 00             	adc    edx,0x0
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	55                   	push   ebp
c0008226:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000822a:	e8 47 9a ff ff       	call   c0001c76 <disk_write>
c000822f:	83 c4 20             	add    esp,0x20
c0008232:	b9 00 02 00 00       	mov    ecx,0x200
c0008237:	31 d2                	xor    edx,edx
c0008239:	89 e8                	mov    eax,ebp
c000823b:	e8 ff 9a ff ff       	call   c0001d3f <mem_set>
c0008240:	ba 52 52 61 41       	mov    edx,0x41615252
c0008245:	89 e8                	mov    eax,ebp
c0008247:	e8 d5 9a ff ff       	call   c0001d21 <st_dword>
c000824c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008252:	ba 72 72 41 61       	mov    edx,0x61417272
c0008257:	e8 c5 9a ff ff       	call   c0001d21 <st_dword>
c000825c:	8d 53 ff             	lea    edx,[ebx-0x1]
c000825f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008265:	e8 b7 9a ff ff       	call   c0001d21 <st_dword>
c000826a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008270:	ba 02 00 00 00       	mov    edx,0x2
c0008275:	e8 a7 9a ff ff       	call   c0001d21 <st_dword>
c000827a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000827f:	89 f0                	mov    eax,esi
c0008281:	e8 97 9a ff ff       	call   c0001d1d <st_word>
c0008286:	83 ec 0c             	sub    esp,0xc
c0008289:	6a 01                	push   0x1
c000828b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000828f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008293:	83 c0 07             	add    eax,0x7
c0008296:	83 d2 00             	adc    edx,0x0
c0008299:	52                   	push   edx
c000829a:	50                   	push   eax
c000829b:	55                   	push   ebp
c000829c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082a0:	e8 d1 99 ff ff       	call   c0001c76 <disk_write>
c00082a5:	83 c4 14             	add    esp,0x14
c00082a8:	6a 01                	push   0x1
c00082aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082b2:	83 c0 01             	add    eax,0x1
c00082b5:	83 d2 00             	adc    edx,0x0
c00082b8:	52                   	push   edx
c00082b9:	50                   	push   eax
c00082ba:	55                   	push   ebp
c00082bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082bf:	e8 b2 99 ff ff       	call   c0001c76 <disk_write>
c00082c4:	83 c4 20             	add    esp,0x20
c00082c7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082ce:	31 d2                	xor    edx,edx
c00082d0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082d6:	31 db                	xor    ebx,ebx
c00082d8:	89 e8                	mov    eax,ebp
c00082da:	e8 60 9a ff ff       	call   c0001d3f <mem_set>
c00082df:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082eb:	0f 94 c3             	sete   bl
c00082ee:	4b                   	dec    ebx
c00082ef:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082f5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	75 21                	jne    c0008323 <f_mkfs+0xf68>
c0008302:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008307:	89 e8                	mov    eax,ebp
c0008309:	e8 13 9a ff ff       	call   c0001d21 <st_dword>
c000830e:	8d 45 04             	lea    eax,[ebp+0x4]
c0008311:	83 ca ff             	or     edx,0xffffffff
c0008314:	e8 08 9a ff ff       	call   c0001d21 <st_dword>
c0008319:	8d 45 08             	lea    eax,[ebp+0x8]
c000831c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008321:	eb 04                	jmp    c0008327 <f_mkfs+0xf6c>
c0008323:	89 da                	mov    edx,ebx
c0008325:	89 e8                	mov    eax,ebp
c0008327:	e8 f5 99 ff ff       	call   c0001d21 <st_dword>
c000832c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008334:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008338:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000833c:	39 ce                	cmp    esi,ecx
c000833e:	76 02                	jbe    c0008342 <f_mkfs+0xf87>
c0008340:	89 ce                	mov    esi,ecx
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	56                   	push   esi
c0008346:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834e:	55                   	push   ebp
c000834f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008353:	e8 1e 99 ff ff       	call   c0001c76 <disk_write>
c0008358:	83 c4 20             	add    esp,0x20
c000835b:	85 c0                	test   eax,eax
c000835d:	0f 85 09 01 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008363:	31 d2                	xor    edx,edx
c0008365:	b9 00 02 00 00       	mov    ecx,0x200
c000836a:	89 e8                	mov    eax,ebp
c000836c:	e8 ce 99 ff ff       	call   c0001d3f <mem_set>
c0008371:	31 d2                	xor    edx,edx
c0008373:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008377:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000837b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000837f:	75 b3                	jne    c0008334 <f_mkfs+0xf79>
c0008381:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008384:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000838b:	40                   	inc    eax
c000838c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008390:	0f 87 65 ff ff ff    	ja     c00082fb <f_mkfs+0xf40>
c0008396:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000839b:	74 04                	je     c00083a1 <f_mkfs+0xfe6>
c000839d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00083a1:	89 fb                	mov    ebx,edi
c00083a3:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00083a7:	76 04                	jbe    c00083ad <f_mkfs+0xff2>
c00083a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00083ad:	83 ec 0c             	sub    esp,0xc
c00083b0:	53                   	push   ebx
c00083b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b9:	55                   	push   ebp
c00083ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083be:	e8 b3 98 ff ff       	call   c0001c76 <disk_write>
c00083c3:	83 c4 20             	add    esp,0x20
c00083c6:	85 c0                	test   eax,eax
c00083c8:	0f 85 9e 00 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00083ce:	31 d2                	xor    edx,edx
c00083d0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083d4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083d8:	29 df                	sub    edi,ebx
c00083da:	75 c5                	jne    c00083a1 <f_mkfs+0xfe6>
c00083dc:	b1 0c                	mov    cl,0xc
c00083de:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e3:	74 1d                	je     c0008402 <f_mkfs+0x1047>
c00083e5:	b8 ff ff 00 00       	mov    eax,0xffff
c00083ea:	b1 06                	mov    cl,0x6
c00083ec:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083f0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083f4:	72 0c                	jb     c0008402 <f_mkfs+0x1047>
c00083f6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083fb:	0f 94 c1             	sete   cl
c00083fe:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008402:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008407:	75 4c                	jne    c0008455 <f_mkfs+0x109a>
c0008409:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000840d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008411:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008418:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000841f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000842a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008435:	0f b6 c9             	movzx  ecx,cl
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	55                   	push   ebp
c000843c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008447:	e8 2f c2 ff ff       	call   c000467b <create_partition>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c3                	mov    ebx,eax
c0008451:	85 c0                	test   eax,eax
c0008453:	75 34                	jne    c0008489 <f_mkfs+0x10ce>
c0008455:	31 db                	xor    ebx,ebx
c0008457:	50                   	push   eax
c0008458:	6a 00                	push   0x0
c000845a:	6a 00                	push   0x0
c000845c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008460:	e8 27 98 ff ff       	call   c0001c8c <disk_ioctl>
c0008465:	83 c4 10             	add    esp,0x10
c0008468:	85 c0                	test   eax,eax
c000846a:	74 1d                	je     c0008489 <f_mkfs+0x10ce>
c000846c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008474:	75 0c                	jne    c0008482 <f_mkfs+0x10c7>
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	55                   	push   ebp
c000847a:	e8 75 00 00 00       	call   c00084f4 <ff_memfree>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	bb 01 00 00 00       	mov    ebx,0x1
c0008487:	eb 48                	jmp    c00084d1 <f_mkfs+0x1116>
c0008489:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008491:	75 3e                	jne    c00084d1 <f_mkfs+0x1116>
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	55                   	push   ebp
c0008497:	e8 58 00 00 00       	call   c00084f4 <ff_memfree>
c000849c:	83 c4 10             	add    esp,0x10
c000849f:	eb 30                	jmp    c00084d1 <f_mkfs+0x1116>
c00084a1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a6:	0f 85 eb fa ff ff    	jne    c0007f97 <f_mkfs+0xbdc>
c00084ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084b0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00084b6:	0f 86 b8 f9 ff ff    	jbe    c0007e74 <f_mkfs+0xab9>
c00084bc:	e9 bf fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084c1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084c6:	0f 85 c0 fa ff ff    	jne    c0007f8c <f_mkfs+0xbd1>
c00084cc:	e9 af fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084d1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084d7:	89 d8                	mov    eax,ebx
c00084d9:	5b                   	pop    ebx
c00084da:	5e                   	pop    esi
c00084db:	5f                   	pop    edi
c00084dc:	5d                   	pop    ebp
c00084dd:	c3                   	ret    

c00084de <ff_memalloc>:
c00084de:	83 ec 0c             	sub    esp,0xc
c00084e1:	83 ec 0c             	sub    esp,0xc
c00084e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e8:	e8 6e 4f 00 00       	call   c000d45b <malloc>
c00084ed:	83 c4 10             	add    esp,0x10
c00084f0:	83 c4 0c             	add    esp,0xc
c00084f3:	c3                   	ret    

c00084f4 <ff_memfree>:
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084fe:	e8 68 4f 00 00       	call   c000d46b <free>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	90                   	nop
c0008507:	83 c4 0c             	add    esp,0xc
c000850a:	c3                   	ret    

c000850b <ff_uni2oem>:
c000850b:	83 ec 14             	sub    esp,0x14
c000850e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008512:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008516:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000851d:	c7 44 24 0c 80 fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fa80
c0008525:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000852a:	77 0b                	ja     c0008537 <ff_uni2oem+0x2c>
c000852c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008530:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008535:	eb 5b                	jmp    c0008592 <ff_uni2oem+0x87>
c0008537:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000853f:	77 51                	ja     c0008592 <ff_uni2oem+0x87>
c0008541:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008547:	75 49                	jne    c0008592 <ff_uni2oem+0x87>
c0008549:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008550:	eb 0b                	jmp    c000855d <ff_uni2oem+0x52>
c0008552:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008557:	40                   	inc    eax
c0008558:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000855d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008563:	77 1b                	ja     c0008580 <ff_uni2oem+0x75>
c0008565:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000856a:	01 c0                	add    eax,eax
c000856c:	89 c2                	mov    edx,eax
c000856e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008572:	01 d0                	add    eax,edx
c0008574:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008577:	0f b7 c0             	movzx  eax,ax
c000857a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000857e:	75 d2                	jne    c0008552 <ff_uni2oem+0x47>
c0008580:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008585:	83 e8 80             	sub    eax,0xffffff80
c0008588:	25 ff 00 00 00       	and    eax,0xff
c000858d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008592:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008597:	83 c4 14             	add    esp,0x14
c000859a:	c3                   	ret    

c000859b <ff_oem2uni>:
c000859b:	83 ec 18             	sub    esp,0x18
c000859e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00085a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a6:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00085ab:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085af:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00085b6:	c7 44 24 10 80 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa80
c00085be:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00085c4:	77 0b                	ja     c00085d1 <ff_oem2uni+0x36>
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085cf:	eb 2d                	jmp    c00085fe <ff_oem2uni+0x63>
c00085d1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085d7:	75 25                	jne    c00085fe <ff_oem2uni+0x63>
c00085d9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085e0:	77 1c                	ja     c00085fe <ff_oem2uni+0x63>
c00085e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085e7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085ec:	01 c0                	add    eax,eax
c00085ee:	89 c2                	mov    edx,eax
c00085f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f4:	01 d0                	add    eax,edx
c00085f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085fe:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008603:	83 c4 18             	add    esp,0x18
c0008606:	c3                   	ret    

c0008607 <ff_wtoupper>:
c0008607:	83 ec 10             	sub    esp,0x10
c000860a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008612:	0f 87 3e 01 00 00    	ja     c0008756 <ff_wtoupper+0x14f>
c0008618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000861c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008621:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008628:	77 07                	ja     c0008631 <ff_wtoupper+0x2a>
c000862a:	b8 80 f8 01 c0       	mov    eax,0xc001f880
c000862f:	eb 05                	jmp    c0008636 <ff_wtoupper+0x2f>
c0008631:	b8 c0 f7 01 c0       	mov    eax,0xc001f7c0
c0008636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000863a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863e:	8d 50 02             	lea    edx,[eax+0x2]
c0008641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008645:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008648:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000864d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008653:	0f 84 f4 00 00 00    	je     c000874d <ff_wtoupper+0x146>
c0008659:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000865e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008663:	0f 82 e4 00 00 00    	jb     c000874d <ff_wtoupper+0x146>
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	8d 50 02             	lea    edx,[eax+0x2]
c0008670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008674:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008677:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000867c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008681:	66 c1 e8 08          	shr    ax,0x8
c0008685:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000868a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008691:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008696:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000869b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00086a0:	01 ca                	add    edx,ecx
c00086a2:	39 d0                	cmp    eax,edx
c00086a4:	0f 8d 86 00 00 00    	jge    c0008730 <ff_wtoupper+0x129>
c00086aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086af:	83 f8 08             	cmp    eax,0x8
c00086b2:	0f 87 94 00 00 00    	ja     c000874c <ff_wtoupper+0x145>
c00086b8:	8b 04 85 80 f7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0880]
c00086bf:	ff e0                	jmp    eax
c00086c1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086c6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086cb:	29 c2                	sub    edx,eax
c00086cd:	89 d0                	mov    eax,edx
c00086cf:	01 c0                	add    eax,eax
c00086d1:	89 c2                	mov    edx,eax
c00086d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d7:	01 d0                	add    eax,edx
c00086d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086dc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086e1:	eb 4b                	jmp    c000872e <ff_wtoupper+0x127>
c00086e3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086e8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086ec:	83 e0 01             	and    eax,0x1
c00086ef:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086f4:	eb 38                	jmp    c000872e <ff_wtoupper+0x127>
c00086f6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086fc:	eb 30                	jmp    c000872e <ff_wtoupper+0x127>
c00086fe:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008704:	eb 28                	jmp    c000872e <ff_wtoupper+0x127>
c0008706:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000870c:	eb 20                	jmp    c000872e <ff_wtoupper+0x127>
c000870e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008714:	eb 18                	jmp    c000872e <ff_wtoupper+0x127>
c0008716:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000871c:	eb 10                	jmp    c000872e <ff_wtoupper+0x127>
c000871e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008724:	eb 08                	jmp    c000872e <ff_wtoupper+0x127>
c0008726:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000872d:	90                   	nop
c000872e:	eb 1c                	jmp    c000874c <ff_wtoupper+0x145>
c0008730:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008736:	0f 85 fe fe ff ff    	jne    c000863a <ff_wtoupper+0x33>
c000873c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008741:	01 c0                	add    eax,eax
c0008743:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008747:	e9 ee fe ff ff       	jmp    c000863a <ff_wtoupper+0x33>
c000874c:	90                   	nop
c000874d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	c3                   	ret    

c000875e <is_bad_src_ratio>:
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008765:	89 04 24             	mov    DWORD PTR [esp],eax
c0008768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000876c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008770:	dd 04 24             	fld    QWORD PTR [esp]
c0008773:	dd 05 40 00 02 c0    	fld    QWORD PTR ds:0xc0020040
c0008779:	de d9                	fcompp 
c000877b:	df e0                	fnstsw ax
c000877d:	f6 c4 45             	test   ah,0x45
c0008780:	74 10                	je     c0008792 <is_bad_src_ratio+0x34>
c0008782:	dd 04 24             	fld    QWORD PTR [esp]
c0008785:	dc 1d 48 00 02 c0    	fcomp  QWORD PTR ds:0xc0020048
c000878b:	df e0                	fnstsw ax
c000878d:	f6 c4 45             	test   ah,0x45
c0008790:	75 07                	jne    c0008799 <is_bad_src_ratio+0x3b>
c0008792:	b8 01 00 00 00       	mov    eax,0x1
c0008797:	eb 05                	jmp    c000879e <is_bad_src_ratio+0x40>
c0008799:	b8 00 00 00 00       	mov    eax,0x0
c000879e:	83 c4 0c             	add    esp,0xc
c00087a1:	c3                   	ret    

c00087a2 <psrc_set_converter>:
c00087a2:	56                   	push   esi
c00087a3:	89 d6                	mov    esi,edx
c00087a5:	53                   	push   ebx
c00087a6:	89 c3                	mov    ebx,eax
c00087a8:	83 ec 0c             	sub    esp,0xc
c00087ab:	52                   	push   edx
c00087ac:	50                   	push   eax
c00087ad:	e8 33 24 00 00       	call   c000abe5 <sinc_set_converter>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	85 c0                	test   eax,eax
c00087b7:	74 25                	je     c00087de <psrc_set_converter+0x3c>
c00087b9:	50                   	push   eax
c00087ba:	50                   	push   eax
c00087bb:	56                   	push   esi
c00087bc:	53                   	push   ebx
c00087bd:	e8 39 29 00 00       	call   c000b0fb <zoh_set_converter>
c00087c2:	83 c4 10             	add    esp,0x10
c00087c5:	85 c0                	test   eax,eax
c00087c7:	74 15                	je     c00087de <psrc_set_converter+0x3c>
c00087c9:	51                   	push   ecx
c00087ca:	51                   	push   ecx
c00087cb:	56                   	push   esi
c00087cc:	53                   	push   ebx
c00087cd:	e8 10 0a 00 00       	call   c00091e2 <linear_set_converter>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	ba 0a 00 00 00       	mov    edx,0xa
c00087da:	85 c0                	test   eax,eax
c00087dc:	75 02                	jne    c00087e0 <psrc_set_converter+0x3e>
c00087de:	31 d2                	xor    edx,edx
c00087e0:	89 d0                	mov    eax,edx
c00087e2:	5a                   	pop    edx
c00087e3:	5b                   	pop    ebx
c00087e4:	5e                   	pop    esi
c00087e5:	c3                   	ret    

c00087e6 <src_delete>:
c00087e6:	53                   	push   ebx
c00087e7:	83 ec 08             	sub    esp,0x8
c00087ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ee:	85 db                	test   ebx,ebx
c00087f0:	74 29                	je     c000881b <src_delete+0x35>
c00087f2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f5:	85 c0                	test   eax,eax
c00087f7:	74 0c                	je     c0008805 <src_delete+0x1f>
c00087f9:	83 ec 0c             	sub    esp,0xc
c00087fc:	50                   	push   eax
c00087fd:	e8 69 4c 00 00       	call   c000d46b <free>
c0008802:	83 c4 10             	add    esp,0x10
c0008805:	50                   	push   eax
c0008806:	6a 3c                	push   0x3c
c0008808:	6a 00                	push   0x0
c000880a:	53                   	push   ebx
c000880b:	e8 c8 7e ff ff       	call   c00006d8 <memset>
c0008810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008813:	e8 53 4c 00 00       	call   c000d46b <free>
c0008818:	83 c4 10             	add    esp,0x10
c000881b:	31 c0                	xor    eax,eax
c000881d:	83 c4 08             	add    esp,0x8
c0008820:	5b                   	pop    ebx
c0008821:	c3                   	ret    

c0008822 <src_process>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	53                   	push   ebx
c0008825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000882d:	85 f6                	test   esi,esi
c000882f:	0f 84 e2 00 00 00    	je     c0008917 <src_process+0xf5>
c0008835:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008839:	0f 84 df 00 00 00    	je     c000891e <src_process+0xfc>
c000883f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008843:	0f 84 d5 00 00 00    	je     c000891e <src_process+0xfc>
c0008849:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008850:	0f 85 cf 00 00 00    	jne    c0008925 <src_process+0x103>
c0008856:	85 db                	test   ebx,ebx
c0008858:	0f 84 ce 00 00 00    	je     c000892c <src_process+0x10a>
c000885e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008861:	0f 84 cc 00 00 00    	je     c0008933 <src_process+0x111>
c0008867:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000886b:	0f 84 c2 00 00 00    	je     c0008933 <src_process+0x111>
c0008871:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008874:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008877:	e8 e2 fe ff ff       	call   c000875e <is_bad_src_ratio>
c000887c:	5a                   	pop    edx
c000887d:	85 c0                	test   eax,eax
c000887f:	59                   	pop    ecx
c0008880:	0f 85 b4 00 00 00    	jne    c000893a <src_process+0x118>
c0008886:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000888a:	79 07                	jns    c0008893 <src_process+0x71>
c000888c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008893:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008897:	79 07                	jns    c00088a0 <src_process+0x7e>
c0008899:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00088a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00088a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00088a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00088a8:	39 ca                	cmp    edx,ecx
c00088aa:	73 0b                	jae    c00088b7 <src_process+0x95>
c00088ac:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00088b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00088b3:	39 c1                	cmp    ecx,eax
c00088b5:	eb 09                	jmp    c00088c0 <src_process+0x9e>
c00088b7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00088bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00088be:	39 c2                	cmp    edx,eax
c00088c0:	72 7f                	jb     c0008941 <src_process+0x11f>
c00088c2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d0:	d9 05 60 00 02 c0    	fld    DWORD PTR ds:0xc0020060
c00088d6:	dc 1e                	fcomp  QWORD PTR [esi]
c00088d8:	df e0                	fnstsw ax
c00088da:	9e                   	sahf   
c00088db:	76 05                	jbe    c00088e2 <src_process+0xc0>
c00088dd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00088e0:	dd 1e                	fstp   QWORD PTR [esi]
c00088e2:	83 ec 10             	sub    esp,0x10
c00088e5:	dd 06                	fld    QWORD PTR [esi]
c00088e7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00088ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c00088ed:	e8 ae 5f 01 00       	call   c001e8a0 <fabs>
c00088f2:	83 c4 10             	add    esp,0x10
c00088f5:	dd 05 50 00 02 c0    	fld    QWORD PTR ds:0xc0020050
c00088fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00088ff:	de d9                	fcompp 
c0008901:	df e0                	fnstsw ax
c0008903:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008907:	9e                   	sahf   
c0008908:	76 05                	jbe    c000890f <src_process+0xed>
c000890a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000890d:	eb 03                	jmp    c0008912 <src_process+0xf0>
c000890f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008912:	59                   	pop    ecx
c0008913:	5b                   	pop    ebx
c0008914:	5e                   	pop    esi
c0008915:	ff e0                	jmp    eax
c0008917:	b8 02 00 00 00       	mov    eax,0x2
c000891c:	eb 28                	jmp    c0008946 <src_process+0x124>
c000891e:	b8 07 00 00 00       	mov    eax,0x7
c0008923:	eb 21                	jmp    c0008946 <src_process+0x124>
c0008925:	b8 12 00 00 00       	mov    eax,0x12
c000892a:	eb 1a                	jmp    c0008946 <src_process+0x124>
c000892c:	b8 03 00 00 00       	mov    eax,0x3
c0008931:	eb 13                	jmp    c0008946 <src_process+0x124>
c0008933:	b8 04 00 00 00       	mov    eax,0x4
c0008938:	eb 0c                	jmp    c0008946 <src_process+0x124>
c000893a:	b8 06 00 00 00       	mov    eax,0x6
c000893f:	eb 05                	jmp    c0008946 <src_process+0x124>
c0008941:	b8 10 00 00 00       	mov    eax,0x10
c0008946:	5a                   	pop    edx
c0008947:	5b                   	pop    ebx
c0008948:	5e                   	pop    esi
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 4c             	sub    esp,0x4c
c0008951:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008955:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008959:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000895d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008961:	85 ff                	test   edi,edi
c0008963:	0f 8e 36 01 00 00    	jle    c0008a9f <src_callback_read+0x155>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 2e 01 00 00    	je     c0008a9f <src_callback_read+0x155>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 19 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 07 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00089a1:	50                   	push   eax
c00089a2:	e8 31 7d ff ff       	call   c00006d8 <memset>
c00089a7:	5e                   	pop    esi
c00089a8:	5d                   	pop    ebp
c00089a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089b1:	e8 a8 fd ff ff       	call   c000875e <is_bad_src_ratio>
c00089b6:	83 c4 10             	add    esp,0x10
c00089b9:	85 c0                	test   eax,eax
c00089bb:	74 0c                	je     c00089c9 <src_callback_read+0x7f>
c00089bd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089c4:	e9 d6 00 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c00089c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00089cd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00089d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00089d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00089d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089dc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00089e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e4:	31 f6                	xor    esi,esi
c00089e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00089f2:	75 30                	jne    c0008a24 <src_callback_read+0xda>
c00089f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00089fc:	52                   	push   edx
c00089fd:	52                   	push   edx
c00089fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008a02:	50                   	push   eax
c0008a03:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a06:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008a0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008a15:	83 c4 10             	add    esp,0x10
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	75 08                	jne    c0008a24 <src_callback_read+0xda>
c0008a1c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008a24:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2b:	50                   	push   eax
c0008a2c:	50                   	push   eax
c0008a2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008a31:	50                   	push   eax
c0008a32:	53                   	push   ebx
c0008a33:	e8 ea fd ff ff       	call   c0008822 <src_process>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 42                	jne    c0008a88 <src_callback_read+0x13e>
c0008a46:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008a4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a4d:	89 e9                	mov    ecx,ebp
c0008a4f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008a53:	0f af ca             	imul   ecx,edx
c0008a56:	c1 e1 02             	shl    ecx,0x2
c0008a59:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008a5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008a61:	0f af d1             	imul   edx,ecx
c0008a64:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008a68:	c1 e2 02             	shl    edx,0x2
c0008a6b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008a6f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a72:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008a77:	75 04                	jne    c0008a7d <src_callback_read+0x133>
c0008a79:	85 c9                	test   ecx,ecx
c0008a7b:	74 0b                	je     c0008a88 <src_callback_read+0x13e>
c0008a7d:	39 d7                	cmp    edi,edx
c0008a7f:	7e 09                	jle    c0008a8a <src_callback_read+0x140>
c0008a81:	89 d6                	mov    esi,edx
c0008a83:	e9 65 ff ff ff       	jmp    c00089ed <src_callback_read+0xa3>
c0008a88:	89 f2                	mov    edx,esi
c0008a8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a8e:	85 c0                	test   eax,eax
c0008a90:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008a97:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a9a:	74 05                	je     c0008aa1 <src_callback_read+0x157>
c0008a9c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9f:	31 d2                	xor    edx,edx
c0008aa1:	83 c4 4c             	add    esp,0x4c
c0008aa4:	89 d0                	mov    eax,edx
c0008aa6:	5b                   	pop    ebx
c0008aa7:	5e                   	pop    esi
c0008aa8:	5f                   	pop    edi
c0008aa9:	5d                   	pop    ebp
c0008aaa:	c3                   	ret    

c0008aab <src_set_ratio>:
c0008aab:	53                   	push   ebx
c0008aac:	b8 02 00 00 00       	mov    eax,0x2
c0008ab1:	83 ec 08             	sub    esp,0x8
c0008ab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 33                	je     c0008af3 <src_set_ratio+0x48>
c0008ac0:	b8 07 00 00 00       	mov    eax,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 2c                	je     c0008af7 <src_set_ratio+0x4c>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 2a                	je     c0008afb <src_set_ratio+0x50>
c0008ad1:	50                   	push   eax
c0008ad2:	50                   	push   eax
c0008ad3:	dd 14 24             	fst    QWORD PTR [esp]
c0008ad6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008ada:	e8 7f fc ff ff       	call   c000875e <is_bad_src_ratio>
c0008adf:	5a                   	pop    edx
c0008ae0:	85 c0                	test   eax,eax
c0008ae2:	59                   	pop    ecx
c0008ae3:	75 07                	jne    c0008aec <src_set_ratio+0x41>
c0008ae5:	dd 04 24             	fld    QWORD PTR [esp]
c0008ae8:	dd 1b                	fstp   QWORD PTR [ebx]
c0008aea:	eb 11                	jmp    c0008afd <src_set_ratio+0x52>
c0008aec:	b8 06 00 00 00       	mov    eax,0x6
c0008af1:	eb 0a                	jmp    c0008afd <src_set_ratio+0x52>
c0008af3:	dd d8                	fstp   st(0)
c0008af5:	eb 06                	jmp    c0008afd <src_set_ratio+0x52>
c0008af7:	dd d8                	fstp   st(0)
c0008af9:	eb 02                	jmp    c0008afd <src_set_ratio+0x52>
c0008afb:	dd d8                	fstp   st(0)
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <src_get_channels>:
c0008b02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b06:	b8 02 00 00 00       	mov    eax,0x2
c0008b0b:	85 d2                	test   edx,edx
c0008b0d:	74 14                	je     c0008b23 <src_get_channels+0x21>
c0008b0f:	b8 07 00 00 00       	mov    eax,0x7
c0008b14:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b18:	74 09                	je     c0008b23 <src_get_channels+0x21>
c0008b1a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b1e:	74 03                	je     c0008b23 <src_get_channels+0x21>
c0008b20:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b23:	c3                   	ret    

c0008b24 <src_reset>:
c0008b24:	53                   	push   ebx
c0008b25:	b8 02 00 00 00       	mov    eax,0x2
c0008b2a:	83 ec 08             	sub    esp,0x8
c0008b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b31:	85 db                	test   ebx,ebx
c0008b33:	74 2e                	je     c0008b63 <src_reset+0x3f>
c0008b35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 09                	je     c0008b45 <src_reset+0x21>
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	53                   	push   ebx
c0008b40:	ff d0                	call   eax
c0008b42:	83 c4 10             	add    esp,0x10
c0008b45:	d9 ee                	fldz   
c0008b47:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b4e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008b51:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b58:	dd 1b                	fstp   QWORD PTR [ebx]
c0008b5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b61:	31 c0                	xor    eax,eax
c0008b63:	83 c4 08             	add    esp,0x8
c0008b66:	5b                   	pop    ebx
c0008b67:	c3                   	ret    

c0008b68 <src_new>:
c0008b68:	57                   	push   edi
c0008b69:	56                   	push   esi
c0008b6a:	53                   	push   ebx
c0008b6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b73:	85 f6                	test   esi,esi
c0008b75:	74 73                	je     c0008bea <src_new+0x82>
c0008b77:	85 ff                	test   edi,edi
c0008b79:	7f 08                	jg     c0008b83 <src_new+0x1b>
c0008b7b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b81:	eb 1e                	jmp    c0008ba1 <src_new+0x39>
c0008b83:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b89:	50                   	push   eax
c0008b8a:	50                   	push   eax
c0008b8b:	6a 3c                	push   0x3c
c0008b8d:	6a 01                	push   0x1
c0008b8f:	e8 f7 48 00 00       	call   c000d48b <calloc>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	89 c3                	mov    ebx,eax
c0008b99:	85 c0                	test   eax,eax
c0008b9b:	75 10                	jne    c0008bad <src_new+0x45>
c0008b9d:	85 f6                	test   esi,esi
c0008b9f:	75 04                	jne    c0008ba5 <src_new+0x3d>
c0008ba1:	31 db                	xor    ebx,ebx
c0008ba3:	eb 4b                	jmp    c0008bf0 <src_new+0x88>
c0008ba5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bab:	eb 43                	jmp    c0008bf0 <src_new+0x88>
c0008bad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bb0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bbb:	e8 e2 fb ff ff       	call   c00087a2 <psrc_set_converter>
c0008bc0:	85 c0                	test   eax,eax
c0008bc2:	74 18                	je     c0008bdc <src_new+0x74>
c0008bc4:	85 f6                	test   esi,esi
c0008bc6:	74 06                	je     c0008bce <src_new+0x66>
c0008bc8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	53                   	push   ebx
c0008bd2:	31 db                	xor    ebx,ebx
c0008bd4:	e8 92 48 00 00       	call   c000d46b <free>
c0008bd9:	83 c4 10             	add    esp,0x10
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	53                   	push   ebx
c0008be0:	e8 3f ff ff ff       	call   c0008b24 <src_reset>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	eb 06                	jmp    c0008bf0 <src_new+0x88>
c0008bea:	85 ff                	test   edi,edi
c0008bec:	7f 9b                	jg     c0008b89 <src_new+0x21>
c0008bee:	eb b1                	jmp    c0008ba1 <src_new+0x39>
c0008bf0:	89 d8                	mov    eax,ebx
c0008bf2:	5b                   	pop    ebx
c0008bf3:	5e                   	pop    esi
c0008bf4:	5f                   	pop    edi
c0008bf5:	c3                   	ret    

c0008bf6 <src_callback_new>:
c0008bf6:	56                   	push   esi
c0008bf7:	53                   	push   ebx
c0008bf8:	53                   	push   ebx
c0008bf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c01:	85 f6                	test   esi,esi
c0008c03:	75 0e                	jne    c0008c13 <src_callback_new+0x1d>
c0008c05:	31 db                	xor    ebx,ebx
c0008c07:	85 c0                	test   eax,eax
c0008c09:	74 47                	je     c0008c52 <src_callback_new+0x5c>
c0008c0b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c11:	eb 3f                	jmp    c0008c52 <src_callback_new+0x5c>
c0008c13:	85 c0                	test   eax,eax
c0008c15:	74 06                	je     c0008c1d <src_callback_new+0x27>
c0008c17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1d:	51                   	push   ecx
c0008c1e:	50                   	push   eax
c0008c1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c27:	e8 3c ff ff ff       	call   c0008b68 <src_new>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c3                	mov    ebx,eax
c0008c31:	85 c0                	test   eax,eax
c0008c33:	74 1d                	je     c0008c52 <src_callback_new+0x5c>
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	50                   	push   eax
c0008c39:	e8 e6 fe ff ff       	call   c0008b24 <src_reset>
c0008c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c42:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c49:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4f:	83 c4 10             	add    esp,0x10
c0008c52:	89 d8                	mov    eax,ebx
c0008c54:	5a                   	pop    edx
c0008c55:	5b                   	pop    ebx
c0008c56:	5e                   	pop    esi
c0008c57:	c3                   	ret    

c0008c58 <src_get_name>:
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 14             	sub    esp,0x14
c0008c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c60:	53                   	push   ebx
c0008c61:	e8 59 1f 00 00       	call   c000abbf <sinc_get_name>
c0008c66:	83 c4 10             	add    esp,0x10
c0008c69:	85 c0                	test   eax,eax
c0008c6b:	75 1d                	jne    c0008c8a <src_get_name+0x32>
c0008c6d:	83 ec 0c             	sub    esp,0xc
c0008c70:	53                   	push   ebx
c0008c71:	e8 67 24 00 00       	call   c000b0dd <zoh_get_name>
c0008c76:	83 c4 10             	add    esp,0x10
c0008c79:	85 c0                	test   eax,eax
c0008c7b:	75 0d                	jne    c0008c8a <src_get_name+0x32>
c0008c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c81:	83 c4 08             	add    esp,0x8
c0008c84:	5b                   	pop    ebx
c0008c85:	e9 3a 05 00 00       	jmp    c00091c4 <linear_get_name>
c0008c8a:	83 c4 08             	add    esp,0x8
c0008c8d:	5b                   	pop    ebx
c0008c8e:	c3                   	ret    

c0008c8f <src_get_description>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 35 1f 00 00       	call   c000abd2 <sinc_get_description>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_description+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 3f 24 00 00       	call   c000b0ec <zoh_get_description>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_description+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 12 05 00 00       	jmp    c00091d3 <linear_get_description>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_version>:
c0008cc6:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0008ccb:	c3                   	ret    

c0008ccc <src_is_valid_ratio>:
c0008ccc:	50                   	push   eax
c0008ccd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd5:	e8 84 fa ff ff       	call   c000875e <is_bad_src_ratio>
c0008cda:	85 c0                	test   eax,eax
c0008cdc:	0f 94 c0             	sete   al
c0008cdf:	83 c4 0c             	add    esp,0xc
c0008ce2:	0f b6 c0             	movzx  eax,al
c0008ce5:	c3                   	ret    

c0008ce6 <src_error>:
c0008ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cea:	31 c0                	xor    eax,eax
c0008cec:	85 d2                	test   edx,edx
c0008cee:	74 03                	je     c0008cf3 <src_error+0xd>
c0008cf0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008cf3:	c3                   	ret    

c0008cf4 <src_strerror>:
c0008cf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cf8:	31 c0                	xor    eax,eax
c0008cfa:	83 fa 17             	cmp    edx,0x17
c0008cfd:	77 07                	ja     c0008d06 <src_strerror+0x12>
c0008cff:	8b 04 95 e0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0020]
c0008d06:	c3                   	ret    

c0008d07 <src_simple>:
c0008d07:	56                   	push   esi
c0008d08:	53                   	push   ebx
c0008d09:	83 ec 18             	sub    esp,0x18
c0008d0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d14:	50                   	push   eax
c0008d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d1d:	e8 46 fe ff ff       	call   c0008b68 <src_new>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	85 c0                	test   eax,eax
c0008d27:	75 06                	jne    c0008d2f <src_simple+0x28>
c0008d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d2d:	eb 25                	jmp    c0008d54 <src_simple+0x4d>
c0008d2f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d36:	89 c3                	mov    ebx,eax
c0008d38:	50                   	push   eax
c0008d39:	50                   	push   eax
c0008d3a:	56                   	push   esi
c0008d3b:	53                   	push   ebx
c0008d3c:	e8 e1 fa ff ff       	call   c0008822 <src_process>
c0008d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d48:	e8 99 fa ff ff       	call   c00087e6 <src_delete>
c0008d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	83 c4 14             	add    esp,0x14
c0008d57:	5b                   	pop    ebx
c0008d58:	5e                   	pop    esi
c0008d59:	c3                   	ret    

c0008d5a <src_short_to_float_array>:
c0008d5a:	83 ec 0c             	sub    esp,0xc
c0008d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d69:	85 c0                	test   eax,eax
c0008d6b:	74 0f                	je     c0008d7c <src_short_to_float_array+0x22>
c0008d6d:	48                   	dec    eax
c0008d6e:	d9 05 64 00 02 c0    	fld    DWORD PTR ds:0xc0020064
c0008d74:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008d77:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d7a:	eb ed                	jmp    c0008d69 <src_short_to_float_array+0xf>
c0008d7c:	83 c4 0c             	add    esp,0xc
c0008d7f:	c3                   	ret    

c0008d80 <src_float_to_short_array>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	52                   	push   edx
c0008d83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d8b:	85 db                	test   ebx,ebx
c0008d8d:	74 51                	je     c0008de0 <src_float_to_short_array+0x60>
c0008d8f:	4b                   	dec    ebx
c0008d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d94:	d9 05 68 00 02 c0    	fld    DWORD PTR ds:0xc0020068
c0008d9a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d9d:	dc 15 58 00 02 c0    	fcom   QWORD PTR ds:0xc0020058
c0008da3:	df e0                	fnstsw ax
c0008da5:	9e                   	sahf   
c0008da6:	72 0a                	jb     c0008db2 <src_float_to_short_array+0x32>
c0008da8:	dd d8                	fstp   st(0)
c0008daa:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008db0:	eb d9                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008db2:	d9 05 6c 00 02 c0    	fld    DWORD PTR ds:0xc002006c
c0008db8:	d8 d9                	fcomp  st(1)
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	72 0a                	jb     c0008dc9 <src_float_to_short_array+0x49>
c0008dbf:	dd d8                	fstp   st(0)
c0008dc1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008dc7:	eb c2                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008dc9:	83 ec 10             	sub    esp,0x10
c0008dcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dcf:	e8 ec 5a 01 00       	call   c001e8c0 <lrint>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	c1 f8 10             	sar    eax,0x10
c0008dda:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008dde:	eb ab                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008de0:	58                   	pop    eax
c0008de1:	5b                   	pop    ebx
c0008de2:	5e                   	pop    esi
c0008de3:	c3                   	ret    

c0008de4 <src_int_to_float_array>:
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008deb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 0f                	je     c0008e06 <src_int_to_float_array+0x22>
c0008df7:	48                   	dec    eax
c0008df8:	d9 05 70 00 02 c0    	fld    DWORD PTR ds:0xc0020070
c0008dfe:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008e01:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008e04:	eb ed                	jmp    c0008df3 <src_int_to_float_array+0xf>
c0008e06:	83 c4 0c             	add    esp,0xc
c0008e09:	c3                   	ret    

c0008e0a <src_float_to_int_array>:
c0008e0a:	56                   	push   esi
c0008e0b:	53                   	push   ebx
c0008e0c:	52                   	push   edx
c0008e0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008e15:	85 db                	test   ebx,ebx
c0008e17:	74 4f                	je     c0008e68 <src_float_to_int_array+0x5e>
c0008e19:	4b                   	dec    ebx
c0008e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e1e:	d9 05 68 00 02 c0    	fld    DWORD PTR ds:0xc0020068
c0008e24:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008e27:	dc 15 58 00 02 c0    	fcom   QWORD PTR ds:0xc0020058
c0008e2d:	df e0                	fnstsw ax
c0008e2f:	9e                   	sahf   
c0008e30:	72 0b                	jb     c0008e3d <src_float_to_int_array+0x33>
c0008e32:	dd d8                	fstp   st(0)
c0008e34:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008e3b:	eb d8                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e3d:	d9 05 6c 00 02 c0    	fld    DWORD PTR ds:0xc002006c
c0008e43:	d8 d9                	fcomp  st(1)
c0008e45:	df e0                	fnstsw ax
c0008e47:	9e                   	sahf   
c0008e48:	72 0b                	jb     c0008e55 <src_float_to_int_array+0x4b>
c0008e4a:	dd d8                	fstp   st(0)
c0008e4c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008e53:	eb c0                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e55:	83 ec 10             	sub    esp,0x10
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	e8 60 5a 01 00       	call   c001e8c0 <lrint>
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008e66:	eb ad                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e68:	58                   	pop    eax
c0008e69:	5b                   	pop    ebx
c0008e6a:	5e                   	pop    esi
c0008e6b:	c3                   	ret    

c0008e6c <is_bad_src_ratio>:
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e7e:	dd 04 24             	fld    QWORD PTR [esp]
c0008e81:	dd 05 40 00 02 c0    	fld    QWORD PTR ds:0xc0020040
c0008e87:	de d9                	fcompp 
c0008e89:	df e0                	fnstsw ax
c0008e8b:	f6 c4 45             	test   ah,0x45
c0008e8e:	74 10                	je     c0008ea0 <is_bad_src_ratio+0x34>
c0008e90:	dd 04 24             	fld    QWORD PTR [esp]
c0008e93:	dc 1d 48 00 02 c0    	fcomp  QWORD PTR ds:0xc0020048
c0008e99:	df e0                	fnstsw ax
c0008e9b:	f6 c4 45             	test   ah,0x45
c0008e9e:	75 07                	jne    c0008ea7 <is_bad_src_ratio+0x3b>
c0008ea0:	b8 01 00 00 00       	mov    eax,0x1
c0008ea5:	eb 05                	jmp    c0008eac <is_bad_src_ratio+0x40>
c0008ea7:	b8 00 00 00 00       	mov    eax,0x0
c0008eac:	83 c4 0c             	add    esp,0xc
c0008eaf:	c3                   	ret    

c0008eb0 <fmod_one>:
c0008eb0:	83 ec 2c             	sub    esp,0x2c
c0008eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec3:	83 ec 08             	sub    esp,0x8
c0008ec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ece:	e8 ed 59 01 00       	call   c001e8c0 <lrint>
c0008ed3:	83 c4 10             	add    esp,0x10
c0008ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008eda:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ede:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ee2:	de e1                	fsubrp st(1),st
c0008ee4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ee8:	d9 ee                	fldz   
c0008eea:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008eee:	df e0                	fnstsw ax
c0008ef0:	f6 c4 45             	test   ah,0x45
c0008ef3:	75 0a                	jne    c0008eff <fmod_one+0x4f>
c0008ef5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ef9:	d9 e8                	fld1   
c0008efb:	de c1                	faddp  st(1),st
c0008efd:	eb 04                	jmp    c0008f03 <fmod_one+0x53>
c0008eff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008f03:	83 c4 2c             	add    esp,0x2c
c0008f06:	c3                   	ret    

c0008f07 <linear_vari_process>:
c0008f07:	55                   	push   ebp
c0008f08:	57                   	push   edi
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 2c             	sub    esp,0x2c
c0008f0e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008f12:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008f16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008f1e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008f22:	0f 8e 5e 02 00 00    	jle    c0009186 <linear_vari_process+0x27f>
c0008f28:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008f2b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008f33:	85 db                	test   ebx,ebx
c0008f35:	0f 84 4b 02 00 00    	je     c0009186 <linear_vari_process+0x27f>
c0008f3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008f3e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008f42:	74 19                	je     c0008f5d <linear_vari_process+0x56>
c0008f44:	31 d2                	xor    edx,edx
c0008f46:	39 c2                	cmp    edx,eax
c0008f48:	7d 0c                	jge    c0008f56 <linear_vari_process+0x4f>
c0008f4a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f4c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008f4f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f53:	42                   	inc    edx
c0008f54:	eb f0                	jmp    c0008f46 <linear_vari_process+0x3f>
c0008f56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f60:	0f af d0             	imul   edx,eax
c0008f63:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f66:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f6a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f74:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f7b:	dd 07                	fld    QWORD PTR [edi]
c0008f7d:	dd 14 24             	fst    QWORD PTR [esp]
c0008f80:	50                   	push   eax
c0008f81:	50                   	push   eax
c0008f82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f85:	e8 e2 fe ff ff       	call   c0008e6c <is_bad_src_ratio>
c0008f8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f8e:	5a                   	pop    edx
c0008f8f:	59                   	pop    ecx
c0008f90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008f95:	0f 85 e3 01 00 00    	jne    c000917e <linear_vari_process+0x277>
c0008f9b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008f9e:	d9 e8                	fld1   
c0008fa0:	d8 d1                	fcom   st(1)
c0008fa2:	df e0                	fnstsw ax
c0008fa4:	9e                   	sahf   
c0008fa5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008fa9:	0f 86 99 00 00 00    	jbe    c0009048 <linear_vari_process+0x141>
c0008faf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008fb2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008fb5:	0f 8d 8d 00 00 00    	jge    c0009048 <linear_vari_process+0x141>
c0008fbb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008fbf:	d8 c1                	fadd   st,st(1)
c0008fc1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008fc4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008fc7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008fca:	df e0                	fnstsw ax
c0008fcc:	9e                   	sahf   
c0008fcd:	73 79                	jae    c0009048 <linear_vari_process+0x141>
c0008fcf:	85 d2                	test   edx,edx
c0008fd1:	7e 38                	jle    c000900b <linear_vari_process+0x104>
c0008fd3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008fd7:	83 ec 10             	sub    esp,0x10
c0008fda:	dd 07                	fld    QWORD PTR [edi]
c0008fdc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fe2:	e8 b9 58 01 00       	call   c001e8a0 <fabs>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	dc 1d b8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200b8
c0008ff0:	df e0                	fnstsw ax
c0008ff2:	9e                   	sahf   
c0008ff3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ff7:	76 12                	jbe    c000900b <linear_vari_process+0x104>
c0008ff9:	dd 07                	fld    QWORD PTR [edi]
c0008ffb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ffe:	d8 e1                	fsub   st,st(1)
c0009000:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0009003:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0009006:	de c1                	faddp  st(1),st
c0009008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900b:	31 c0                	xor    eax,eax
c000900d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0009010:	7e 1f                	jle    c0009031 <linear_vari_process+0x12a>
c0009012:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0009016:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009018:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000901b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009022:	d8 e1                	fsub   st,st(1)
c0009024:	40                   	inc    eax
c0009025:	d8 ca                	fmul   st,st(2)
c0009027:	de c1                	faddp  st(1),st
c0009029:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000902c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000902f:	eb dc                	jmp    c000900d <linear_vari_process+0x106>
c0009031:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009035:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009038:	de c1                	faddp  st(1),st
c000903a:	e9 5f ff ff ff       	jmp    c0008f9e <linear_vari_process+0x97>
c000903f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009043:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009046:	de c1                	faddp  st(1),st
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	dd 14 24             	fst    QWORD PTR [esp]
c000904e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009052:	e8 59 fe ff ff       	call   c0008eb0 <fmod_one>
c0009057:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000905a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000905e:	d8 e1                	fsub   st,st(1)
c0009060:	d9 c9                	fxch   st(1)
c0009062:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009066:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009069:	e8 52 58 01 00       	call   c001e8c0 <lrint>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	0f af e8             	imul   ebp,eax
c0009074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009078:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000907b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000907e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0009081:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0009084:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0009087:	0f 8d 97 00 00 00    	jge    c0009124 <linear_vari_process+0x21d>
c000908d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009091:	d9 c0                	fld    st(0)
c0009093:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0009096:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000909a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000909e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00090a2:	de d9                	fcompp 
c00090a4:	df e0                	fnstsw ax
c00090a6:	9e                   	sahf   
c00090a7:	76 7b                	jbe    c0009124 <linear_vari_process+0x21d>
c00090a9:	85 ed                	test   ebp,ebp
c00090ab:	7e 38                	jle    c00090e5 <linear_vari_process+0x1de>
c00090ad:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090b1:	83 ec 10             	sub    esp,0x10
c00090b4:	dd 07                	fld    QWORD PTR [edi]
c00090b6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c00090b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090bc:	e8 df 57 01 00       	call   c001e8a0 <fabs>
c00090c1:	83 c4 10             	add    esp,0x10
c00090c4:	dc 1d b8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200b8
c00090ca:	df e0                	fnstsw ax
c00090cc:	9e                   	sahf   
c00090cd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00090d1:	76 12                	jbe    c00090e5 <linear_vari_process+0x1de>
c00090d3:	dd 07                	fld    QWORD PTR [edi]
c00090d5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c00090d8:	d8 e1                	fsub   st,st(1)
c00090da:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c00090dd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c00090e0:	de c1                	faddp  st(1),st
c00090e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e5:	31 c0                	xor    eax,eax
c00090e7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00090ea:	39 c2                	cmp    edx,eax
c00090ec:	0f 8e 4d ff ff ff    	jle    c000903f <linear_vari_process+0x138>
c00090f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00090f4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00090f7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00090fb:	89 e9                	mov    ecx,ebp
c00090fd:	01 c5                	add    ebp,eax
c00090ff:	29 d1                	sub    ecx,edx
c0009101:	89 ca                	mov    edx,ecx
c0009103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009107:	01 c2                	add    edx,eax
c0009109:	40                   	inc    eax
c000910a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000910d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0009110:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0009113:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009116:	d8 e1                	fsub   st,st(1)
c0009118:	d8 ca                	fmul   st,st(2)
c000911a:	de c1                	faddp  st(1),st
c000911c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c000911f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009122:	eb c3                	jmp    c00090e7 <linear_vari_process+0x1e0>
c0009124:	39 d1                	cmp    ecx,edx
c0009126:	7d 13                	jge    c000913b <linear_vari_process+0x234>
c0009128:	89 d0                	mov    eax,edx
c000912a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000912d:	29 c8                	sub    eax,ecx
c000912f:	99                   	cdq    
c0009130:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009137:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c000913b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000913e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009141:	85 c0                	test   eax,eax
c0009143:	7f 1b                	jg     c0009160 <linear_vari_process+0x259>
c0009145:	dd 04 24             	fld    QWORD PTR [esp]
c0009148:	dd 1f                	fstp   QWORD PTR [edi]
c000914a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000914d:	99                   	cdq    
c000914e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009151:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	99                   	cdq    
c0009158:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000915b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000915e:	eb 26                	jmp    c0009186 <linear_vari_process+0x27f>
c0009160:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009163:	31 d2                	xor    edx,edx
c0009165:	29 c8                	sub    eax,ecx
c0009167:	c1 e0 02             	shl    eax,0x2
c000916a:	39 d1                	cmp    ecx,edx
c000916c:	7e d7                	jle    c0009145 <linear_vari_process+0x23e>
c000916e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009170:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009174:	83 c0 04             	add    eax,0x4
c0009177:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000917b:	42                   	inc    edx
c000917c:	eb ec                	jmp    c000916a <linear_vari_process+0x263>
c000917e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000918a:	83 c4 2c             	add    esp,0x2c
c000918d:	5b                   	pop    ebx
c000918e:	5e                   	pop    esi
c000918f:	5f                   	pop    edi
c0009190:	5d                   	pop    ebp
c0009191:	c3                   	ret    

c0009192 <linear_reset>:
c0009192:	83 ec 0c             	sub    esp,0xc
c0009195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009199:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000919c:	85 c0                	test   eax,eax
c000919e:	74 20                	je     c00091c0 <linear_reset+0x2e>
c00091a0:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00091a3:	83 c0 1c             	add    eax,0x1c
c00091a6:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00091a9:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00091b0:	c1 e2 02             	shl    edx,0x2
c00091b3:	51                   	push   ecx
c00091b4:	52                   	push   edx
c00091b5:	6a 00                	push   0x0
c00091b7:	50                   	push   eax
c00091b8:	e8 1b 75 ff ff       	call   c00006d8 <memset>
c00091bd:	83 c4 10             	add    esp,0x10
c00091c0:	83 c4 0c             	add    esp,0xc
c00091c3:	c3                   	ret    

c00091c4 <linear_get_name>:
c00091c4:	31 c0                	xor    eax,eax
c00091c6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091cb:	75 05                	jne    c00091d2 <linear_get_name+0xe>
c00091cd:	b8 74 00 02 c0       	mov    eax,0xc0020074
c00091d2:	c3                   	ret    

c00091d3 <linear_get_description>:
c00091d3:	31 c0                	xor    eax,eax
c00091d5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091da:	75 05                	jne    c00091e1 <linear_get_description+0xe>
c00091dc:	b8 88 00 02 c0       	mov    eax,0xc0020088
c00091e1:	c3                   	ret    

c00091e2 <linear_set_converter>:
c00091e2:	53                   	push   ebx
c00091e3:	b8 0a 00 00 00       	mov    eax,0xa
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00091f4:	75 6e                	jne    c0009264 <linear_set_converter+0x82>
c00091f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00091f9:	85 c0                	test   eax,eax
c00091fb:	74 13                	je     c0009210 <linear_set_converter+0x2e>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	50                   	push   eax
c0009201:	e8 65 42 00 00       	call   c000d46b <free>
c0009206:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	50                   	push   eax
c0009211:	50                   	push   eax
c0009212:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009215:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000921c:	50                   	push   eax
c000921d:	6a 01                	push   0x1
c000921f:	e8 67 42 00 00       	call   c000d48b <calloc>
c0009224:	83 c4 10             	add    esp,0x10
c0009227:	89 c2                	mov    edx,eax
c0009229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000922c:	85 d2                	test   edx,edx
c000922e:	b8 01 00 00 00       	mov    eax,0x1
c0009233:	74 2f                	je     c0009264 <linear_set_converter+0x82>
c0009235:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000923b:	83 ec 0c             	sub    esp,0xc
c000923e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009241:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009244:	c7 43 24 07 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008f07
c000924b:	c7 43 20 07 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008f07
c0009252:	c7 43 28 92 91 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009192
c0009259:	53                   	push   ebx
c000925a:	e8 33 ff ff ff       	call   c0009192 <linear_reset>
c000925f:	83 c4 10             	add    esp,0x10
c0009262:	31 c0                	xor    eax,eax
c0009264:	83 c4 08             	add    esp,0x8
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <is_bad_src_ratio>:
c0009269:	83 ec 0c             	sub    esp,0xc
c000926c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009270:	89 04 24             	mov    DWORD PTR [esp],eax
c0009273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000927b:	dd 04 24             	fld    QWORD PTR [esp]
c000927e:	dd 05 40 00 02 c0    	fld    QWORD PTR ds:0xc0020040
c0009284:	de d9                	fcompp 
c0009286:	df e0                	fnstsw ax
c0009288:	f6 c4 45             	test   ah,0x45
c000928b:	74 10                	je     c000929d <is_bad_src_ratio+0x34>
c000928d:	dd 04 24             	fld    QWORD PTR [esp]
c0009290:	dc 1d 48 00 02 c0    	fcomp  QWORD PTR ds:0xc0020048
c0009296:	df e0                	fnstsw ax
c0009298:	f6 c4 45             	test   ah,0x45
c000929b:	75 07                	jne    c00092a4 <is_bad_src_ratio+0x3b>
c000929d:	b8 01 00 00 00       	mov    eax,0x1
c00092a2:	eb 05                	jmp    c00092a9 <is_bad_src_ratio+0x40>
c00092a4:	b8 00 00 00 00       	mov    eax,0x0
c00092a9:	83 c4 0c             	add    esp,0xc
c00092ac:	c3                   	ret    

c00092ad <int_to_fp>:
c00092ad:	c1 e0 0c             	shl    eax,0xc
c00092b0:	c3                   	ret    

c00092b1 <fp_to_int>:
c00092b1:	c1 f8 0c             	sar    eax,0xc
c00092b4:	c3                   	ret    

c00092b5 <fp_fraction_part>:
c00092b5:	25 ff 0f 00 00       	and    eax,0xfff
c00092ba:	c3                   	ret    

c00092bb <fp_to_double>:
c00092bb:	83 ec 0c             	sub    esp,0xc
c00092be:	e8 f2 ff ff ff       	call   c00092b5 <fp_fraction_part>
c00092c3:	d9 05 80 87 03 c0    	fld    DWORD PTR ds:0xc0038780
c00092c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092cd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00092d1:	83 c4 0c             	add    esp,0xc
c00092d4:	c3                   	ret    

c00092d5 <calc_output_single>:
c00092d5:	55                   	push   ebp
c00092d6:	57                   	push   edi
c00092d7:	89 c7                	mov    edi,eax
c00092d9:	56                   	push   esi
c00092da:	53                   	push   ebx
c00092db:	89 d3                	mov    ebx,edx
c00092dd:	83 ec 24             	sub    esp,0x24
c00092e0:	89 de                	mov    esi,ebx
c00092e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092e5:	e8 c3 ff ff ff       	call   c00092ad <int_to_fp>
c00092ea:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00092f8:	29 c8                	sub    eax,ecx
c00092fa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009302:	99                   	cdq    
c0009303:	f7 fb                	idiv   ebx
c0009305:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009308:	0f af f0             	imul   esi,eax
c000930b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000930f:	01 ce                	add    esi,ecx
c0009311:	29 c2                	sub    edx,eax
c0009313:	8d 14 97             	lea    edx,[edi+edx*4]
c0009316:	89 f0                	mov    eax,esi
c0009318:	e8 9e ff ff ff       	call   c00092bb <fp_to_double>
c000931d:	89 f0                	mov    eax,esi
c000931f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009323:	e8 89 ff ff ff       	call   c00092b1 <fp_to_int>
c0009328:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000932c:	83 c2 04             	add    edx,0x4
c000932f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009333:	d8 e1                	fsub   st,st(1)
c0009335:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009339:	de c9                	fmulp  st(1),st
c000933b:	de c1                	faddp  st(1),st
c000933d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009343:	29 de                	sub    esi,ebx
c0009345:	dc 04 24             	fadd   QWORD PTR [esp]
c0009348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000934b:	79 c9                	jns    c0009316 <calc_output_single+0x41>
c000934d:	89 d8                	mov    eax,ebx
c000934f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009353:	29 c8                	sub    eax,ecx
c0009355:	d9 ee                	fldz   
c0009357:	89 c1                	mov    ecx,eax
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	29 c8                	sub    eax,ecx
c000935f:	99                   	cdq    
c0009360:	f7 fb                	idiv   ebx
c0009362:	89 da                	mov    edx,ebx
c0009364:	0f af d0             	imul   edx,eax
c0009367:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000936b:	01 d1                	add    ecx,edx
c000936d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009370:	89 c8                	mov    eax,ecx
c0009372:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009376:	e8 40 ff ff ff       	call   c00092bb <fp_to_double>
c000937b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000937f:	89 c8                	mov    eax,ecx
c0009381:	e8 2b ff ff ff       	call   c00092b1 <fp_to_int>
c0009386:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000938a:	29 d9                	sub    ecx,ebx
c000938c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009390:	83 ea 04             	sub    edx,0x4
c0009393:	d8 e1                	fsub   st,st(1)
c0009395:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009399:	de c9                	fmulp  st(1),st
c000939b:	de c1                	faddp  st(1),st
c000939d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c00093a3:	85 c9                	test   ecx,ecx
c00093a5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00093a9:	de c1                	faddp  st(1),st
c00093ab:	7f c3                	jg     c0009370 <calc_output_single+0x9b>
c00093ad:	dd 04 24             	fld    QWORD PTR [esp]
c00093b0:	83 c4 24             	add    esp,0x24
c00093b3:	de c1                	faddp  st(1),st
c00093b5:	5b                   	pop    ebx
c00093b6:	5e                   	pop    esi
c00093b7:	5f                   	pop    edi
c00093b8:	5d                   	pop    ebp
c00093b9:	c3                   	ret    

c00093ba <calc_output_stereo>:
c00093ba:	55                   	push   ebp
c00093bb:	57                   	push   edi
c00093bc:	89 c7                	mov    edi,eax
c00093be:	56                   	push   esi
c00093bf:	53                   	push   ebx
c00093c0:	89 d3                	mov    ebx,edx
c00093c2:	83 ec 44             	sub    esp,0x44
c00093c5:	89 de                	mov    esi,ebx
c00093c7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00093cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093ce:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093d2:	e8 d6 fe ff ff       	call   c00092ad <int_to_fp>
c00093d7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093de:	d9 ee                	fldz   
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 14 24             	fst    QWORD PTR [esp]
c00093e5:	99                   	cdq    
c00093e6:	f7 fb                	idiv   ebx
c00093e8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093eb:	0f af f0             	imul   esi,eax
c00093ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00093f2:	01 ce                	add    esi,ecx
c00093f4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093f7:	0f af c2             	imul   eax,edx
c00093fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00093fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009402:	29 c2                	sub    edx,eax
c0009404:	8d 14 97             	lea    edx,[edi+edx*4]
c0009407:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000940b:	89 f0                	mov    eax,esi
c000940d:	e8 a9 fe ff ff       	call   c00092bb <fp_to_double>
c0009412:	89 f0                	mov    eax,esi
c0009414:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009418:	e8 94 fe ff ff       	call   c00092b1 <fp_to_int>
c000941d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009421:	83 c2 08             	add    edx,0x8
c0009424:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009428:	d8 e1                	fsub   st,st(1)
c000942a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000942e:	de c9                	fmulp  st(1),st
c0009430:	de c1                	faddp  st(1),st
c0009432:	d9 c0                	fld    st(0)
c0009434:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000943a:	dc 04 24             	fadd   QWORD PTR [esp]
c000943d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009440:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009446:	29 de                	sub    esi,ebx
c0009448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000944c:	de c1                	faddp  st(1),st
c000944e:	79 b7                	jns    c0009407 <calc_output_stereo+0x4d>
c0009450:	89 d8                	mov    eax,ebx
c0009452:	d9 ee                	fldz   
c0009454:	d9 ee                	fldz   
c0009456:	29 c8                	sub    eax,ecx
c0009458:	89 c1                	mov    ecx,eax
c000945a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000945e:	29 c8                	sub    eax,ecx
c0009460:	99                   	cdq    
c0009461:	f7 fb                	idiv   ebx
c0009463:	89 da                	mov    edx,ebx
c0009465:	0f af d0             	imul   edx,eax
c0009468:	40                   	inc    eax
c0009469:	01 d1                	add    ecx,edx
c000946b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009470:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009474:	8d 14 87             	lea    edx,[edi+eax*4]
c0009477:	eb 04                	jmp    c000947d <calc_output_stereo+0xc3>
c0009479:	d9 ca                	fxch   st(2)
c000947b:	d9 c9                	fxch   st(1)
c000947d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009481:	d9 c9                	fxch   st(1)
c0009483:	89 c8                	mov    eax,ecx
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948d:	e8 29 fe ff ff       	call   c00092bb <fp_to_double>
c0009492:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009496:	89 c8                	mov    eax,ecx
c0009498:	e8 14 fe ff ff       	call   c00092b1 <fp_to_int>
c000949d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094a1:	29 d9                	sub    ecx,ebx
c00094a3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094a7:	83 ea 08             	sub    edx,0x8
c00094aa:	d8 e1                	fsub   st,st(1)
c00094ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00094b0:	de c9                	fmulp  st(1),st
c00094b2:	de c1                	faddp  st(1),st
c00094b4:	d9 c0                	fld    st(0)
c00094b6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00094bc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00094c0:	de c1                	faddp  st(1),st
c00094c2:	d9 c9                	fxch   st(1)
c00094c4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00094ca:	85 c9                	test   ecx,ecx
c00094cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00094d0:	de c1                	faddp  st(1),st
c00094d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00094d6:	7f a1                	jg     c0009479 <calc_output_stereo+0xbf>
c00094d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00094dc:	dd 04 24             	fld    QWORD PTR [esp]
c00094df:	de c3                	faddp  st(3),st
c00094e1:	d9 ca                	fxch   st(2)
c00094e3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094e7:	d9 18                	fstp   DWORD PTR [eax]
c00094e9:	de c1                	faddp  st(1),st
c00094eb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094ef:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00094f2:	83 c4 44             	add    esp,0x44
c00094f5:	5b                   	pop    ebx
c00094f6:	5e                   	pop    esi
c00094f7:	5f                   	pop    edi
c00094f8:	5d                   	pop    ebp
c00094f9:	c3                   	ret    

c00094fa <calc_output_quad>:
c00094fa:	55                   	push   ebp
c00094fb:	57                   	push   edi
c00094fc:	56                   	push   esi
c00094fd:	89 c6                	mov    esi,eax
c00094ff:	53                   	push   ebx
c0009500:	89 d3                	mov    ebx,edx
c0009502:	83 ec 5c             	sub    esp,0x5c
c0009505:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009509:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000950c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000950f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009513:	e8 95 fd ff ff       	call   c00092ad <int_to_fp>
c0009518:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000951b:	d9 ee                	fldz   
c000951d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009521:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009525:	29 c8                	sub    eax,ecx
c0009527:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000952b:	99                   	cdq    
c000952c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009530:	f7 fb                	idiv   ebx
c0009532:	89 da                	mov    edx,ebx
c0009534:	0f af d0             	imul   edx,eax
c0009537:	01 ca                	add    edx,ecx
c0009539:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000953d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009540:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009544:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009547:	0f af c2             	imul   eax,edx
c000954a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000954e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009552:	29 c2                	sub    edx,eax
c0009554:	8d 14 96             	lea    edx,[esi+edx*4]
c0009557:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000955b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000955f:	e8 57 fd ff ff       	call   c00092bb <fp_to_double>
c0009564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009568:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000956c:	e8 40 fd ff ff       	call   c00092b1 <fp_to_int>
c0009571:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009575:	83 c2 10             	add    edx,0x10
c0009578:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000957c:	d8 e1                	fsub   st,st(1)
c000957e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009582:	de c9                	fmulp  st(1),st
c0009584:	de c1                	faddp  st(1),st
c0009586:	d9 c0                	fld    st(0)
c0009588:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000958e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009592:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009596:	d9 c0                	fld    st(0)
c0009598:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000959e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00095a2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00095a6:	d9 c0                	fld    st(0)
c00095a8:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00095ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095b2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00095b6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00095bc:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00095c0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095c4:	de c1                	faddp  st(1),st
c00095c6:	79 8f                	jns    c0009557 <calc_output_quad+0x5d>
c00095c8:	89 d8                	mov    eax,ebx
c00095ca:	d9 ee                	fldz   
c00095cc:	29 c8                	sub    eax,ecx
c00095ce:	d9 ee                	fldz   
c00095d0:	89 c1                	mov    ecx,eax
c00095d2:	d9 ee                	fldz   
c00095d4:	d9 ee                	fldz   
c00095d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00095da:	29 c8                	sub    eax,ecx
c00095dc:	99                   	cdq    
c00095dd:	f7 fb                	idiv   ebx
c00095df:	89 da                	mov    edx,ebx
c00095e1:	0f af d0             	imul   edx,eax
c00095e4:	40                   	inc    eax
c00095e5:	01 d1                	add    ecx,edx
c00095e7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00095ec:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00095f0:	8d 14 86             	lea    edx,[esi+eax*4]
c00095f3:	eb 0a                	jmp    c00095ff <calc_output_quad+0x105>
c00095f5:	d9 cc                	fxch   st(4)
c00095f7:	d9 ca                	fxch   st(2)
c00095f9:	d9 c9                	fxch   st(1)
c00095fb:	d9 cb                	fxch   st(3)
c00095fd:	d9 c9                	fxch   st(1)
c00095ff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009603:	d9 c9                	fxch   st(1)
c0009605:	89 c8                	mov    eax,ecx
c0009607:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000960b:	d9 c9                	fxch   st(1)
c000960d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009611:	d9 c9                	fxch   st(1)
c0009613:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009617:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000961b:	e8 9b fc ff ff       	call   c00092bb <fp_to_double>
c0009620:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009624:	89 c8                	mov    eax,ecx
c0009626:	e8 86 fc ff ff       	call   c00092b1 <fp_to_int>
c000962b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000962f:	29 d9                	sub    ecx,ebx
c0009631:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009635:	83 ea 10             	sub    edx,0x10
c0009638:	d8 e1                	fsub   st,st(1)
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	de c9                	fmulp  st(1),st
c0009640:	de c1                	faddp  st(1),st
c0009642:	d9 c0                	fld    st(0)
c0009644:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000964a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000964e:	de c1                	faddp  st(1),st
c0009650:	d9 c1                	fld    st(1)
c0009652:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009658:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000965c:	de c1                	faddp  st(1),st
c000965e:	d9 c2                	fld    st(2)
c0009660:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009666:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000966a:	de c1                	faddp  st(1),st
c000966c:	d9 cb                	fxch   st(3)
c000966e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009674:	85 c9                	test   ecx,ecx
c0009676:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000967a:	de c1                	faddp  st(1),st
c000967c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009680:	0f 8f 6f ff ff ff    	jg     c00095f5 <calc_output_quad+0xfb>
c0009686:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000968a:	de c4                	faddp  st(4),st
c000968c:	d9 cb                	fxch   st(3)
c000968e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009691:	d9 1f                	fstp   DWORD PTR [edi]
c0009693:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009697:	de c2                	faddp  st(2),st
c0009699:	d9 c9                	fxch   st(1)
c000969b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000969e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c00096a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00096a5:	de c3                	faddp  st(3),st
c00096a7:	d9 ca                	fxch   st(2)
c00096a9:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096ac:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c00096af:	de c1                	faddp  st(1),st
c00096b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096b4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00096b7:	83 c4 5c             	add    esp,0x5c
c00096ba:	5b                   	pop    ebx
c00096bb:	5e                   	pop    esi
c00096bc:	5f                   	pop    edi
c00096bd:	5d                   	pop    ebp
c00096be:	c3                   	ret    

c00096bf <calc_output_hex>:
c00096bf:	55                   	push   ebp
c00096c0:	57                   	push   edi
c00096c1:	89 c7                	mov    edi,eax
c00096c3:	56                   	push   esi
c00096c4:	53                   	push   ebx
c00096c5:	89 d3                	mov    ebx,edx
c00096c7:	83 ec 7c             	sub    esp,0x7c
c00096ca:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00096d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00096d7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00096de:	e8 ca fb ff ff       	call   c00092ad <int_to_fp>
c00096e3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00096e6:	d9 ee                	fldz   
c00096e8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00096ec:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00096f0:	29 c8                	sub    eax,ecx
c00096f2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00096f6:	99                   	cdq    
c00096f7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00096fb:	f7 fb                	idiv   ebx
c00096fd:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009701:	89 da                	mov    edx,ebx
c0009703:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009707:	0f af d0             	imul   edx,eax
c000970a:	01 ca                	add    edx,ecx
c000970c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009710:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009713:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009717:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000971a:	0f af c2             	imul   eax,edx
c000971d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009721:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009725:	29 c2                	sub    edx,eax
c0009727:	8d 14 97             	lea    edx,[edi+edx*4]
c000972a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000972e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009732:	e8 84 fb ff ff       	call   c00092bb <fp_to_double>
c0009737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000973b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000973f:	e8 6d fb ff ff       	call   c00092b1 <fp_to_int>
c0009744:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009748:	83 c2 18             	add    edx,0x18
c000974b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000974f:	d8 e1                	fsub   st,st(1)
c0009751:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009755:	de c9                	fmulp  st(1),st
c0009757:	de c1                	faddp  st(1),st
c0009759:	d9 c0                	fld    st(0)
c000975b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009761:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009765:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009769:	d9 c0                	fld    st(0)
c000976b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009771:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009775:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009779:	d9 c0                	fld    st(0)
c000977b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009781:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009785:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009789:	d9 c0                	fld    st(0)
c000978b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009791:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009795:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009799:	d9 c0                	fld    st(0)
c000979b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00097a1:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00097a5:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00097a9:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00097af:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00097b3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00097b7:	de c1                	faddp  st(1),st
c00097b9:	0f 89 6b ff ff ff    	jns    c000972a <calc_output_hex+0x6b>
c00097bf:	d9 ee                	fldz   
c00097c1:	d9 ee                	fldz   
c00097c3:	89 d8                	mov    eax,ebx
c00097c5:	29 c8                	sub    eax,ecx
c00097c7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00097cb:	89 c1                	mov    ecx,eax
c00097cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00097d1:	29 c8                	sub    eax,ecx
c00097d3:	99                   	cdq    
c00097d4:	f7 fb                	idiv   ebx
c00097d6:	89 da                	mov    edx,ebx
c00097d8:	0f af d0             	imul   edx,eax
c00097db:	40                   	inc    eax
c00097dc:	01 d1                	add    ecx,edx
c00097de:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00097e3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00097e7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00097eb:	8d 14 87             	lea    edx,[edi+eax*4]
c00097ee:	d9 ee                	fldz   
c00097f0:	d9 ee                	fldz   
c00097f2:	d9 ca                	fxch   st(2)
c00097f4:	eb 08                	jmp    c00097fe <calc_output_hex+0x13f>
c00097f6:	d9 cc                	fxch   st(4)
c00097f8:	d9 cb                	fxch   st(3)
c00097fa:	d9 ca                	fxch   st(2)
c00097fc:	d9 c9                	fxch   st(1)
c00097fe:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009802:	89 c8                	mov    eax,ecx
c0009804:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009808:	d9 ca                	fxch   st(2)
c000980a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000980e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009812:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009816:	e8 a0 fa ff ff       	call   c00092bb <fp_to_double>
c000981b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000981f:	89 c8                	mov    eax,ecx
c0009821:	e8 8b fa ff ff       	call   c00092b1 <fp_to_int>
c0009826:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000982a:	29 d9                	sub    ecx,ebx
c000982c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009830:	83 ea 18             	sub    edx,0x18
c0009833:	d8 e1                	fsub   st,st(1)
c0009835:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009839:	de c9                	fmulp  st(1),st
c000983b:	de c1                	faddp  st(1),st
c000983d:	d9 c0                	fld    st(0)
c000983f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009845:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009849:	de c1                	faddp  st(1),st
c000984b:	d9 c1                	fld    st(1)
c000984d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009853:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009857:	de c1                	faddp  st(1),st
c0009859:	d9 c2                	fld    st(2)
c000985b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009861:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009865:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009869:	d9 c2                	fld    st(2)
c000986b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009871:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009875:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009879:	d9 c2                	fld    st(2)
c000987b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009881:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009885:	de c1                	faddp  st(1),st
c0009887:	d9 cb                	fxch   st(3)
c0009889:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000988f:	85 c9                	test   ecx,ecx
c0009891:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009895:	de c1                	faddp  st(1),st
c0009897:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000989b:	0f 8f 55 ff ff ff    	jg     c00097f6 <calc_output_hex+0x137>
c00098a1:	d9 cb                	fxch   st(3)
c00098a3:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00098a7:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098aa:	d9 1e                	fstp   DWORD PTR [esi]
c00098ac:	d9 c9                	fxch   st(1)
c00098ae:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00098b2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00098b8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098bc:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00098c0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098c3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00098c6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00098ca:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00098ce:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098d1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00098d4:	d9 ca                	fxch   st(2)
c00098d6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00098da:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098dd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00098e0:	de c1                	faddp  st(1),st
c00098e2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098e5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00098e8:	83 c4 7c             	add    esp,0x7c
c00098eb:	5b                   	pop    ebx
c00098ec:	5e                   	pop    esi
c00098ed:	5f                   	pop    edi
c00098ee:	5d                   	pop    ebp
c00098ef:	c3                   	ret    

c00098f0 <calc_output_multi>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	8d 78 44             	lea    edi,[eax+0x44]
c00098f5:	56                   	push   esi
c00098f6:	89 c6                	mov    esi,eax
c00098f8:	53                   	push   ebx
c00098f9:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00098ff:	83 ec 4c             	sub    esp,0x4c
c0009902:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009906:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000990a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000990e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009912:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000991a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000991d:	e8 8b f9 ff ff       	call   c00092ad <int_to_fp>
c0009922:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009929:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000992d:	99                   	cdq    
c000992e:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009936:	0f af d0             	imul   edx,eax
c0009939:	0f af c3             	imul   eax,ebx
c000993c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009940:	29 c5                	sub    ebp,eax
c0009942:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009946:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000994a:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009951:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009955:	52                   	push   edx
c0009956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995a:	6a 00                	push   0x0
c000995c:	57                   	push   edi
c000995d:	e8 76 6d ff ff       	call   c00006d8 <memset>
c0009962:	83 c4 10             	add    esp,0x10
c0009965:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009969:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000996d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009971:	e8 45 f9 ff ff       	call   c00092bb <fp_to_double>
c0009976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000997a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000997e:	e8 2e f9 ff ff       	call   c00092b1 <fp_to_int>
c0009983:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009986:	89 d9                	mov    ecx,ebx
c0009988:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000998b:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000998f:	d8 e1                	fsub   st,st(1)
c0009991:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009995:	de c9                	fmulp  st(1),st
c0009997:	de c1                	faddp  st(1),st
c0009999:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000999d:	89 c8                	mov    eax,ecx
c000999f:	bd 08 00 00 00       	mov    ebp,0x8
c00099a4:	99                   	cdq    
c00099a5:	f7 fd                	idiv   ebp
c00099a7:	4a                   	dec    edx
c00099a8:	83 fa 06             	cmp    edx,0x6
c00099ab:	77 07                	ja     c00099b4 <calc_output_multi+0xc4>
c00099ad:	ff 24 95 c0 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff40]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099d5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099dc:	d9 c1                	fld    st(1)
c00099de:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e2:	dc 00                	fadd   QWORD PTR [eax]
c00099e4:	dd 18                	fstp   QWORD PTR [eax]
c00099e6:	49                   	dec    ecx
c00099e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099eb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099ee:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099f5:	d9 c1                	fld    st(1)
c00099f7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099fb:	dc 00                	fadd   QWORD PTR [eax]
c00099fd:	dd 18                	fstp   QWORD PTR [eax]
c00099ff:	49                   	dec    ecx
c0009a00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a04:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a07:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a0e:	d9 c1                	fld    st(1)
c0009a10:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a14:	dc 00                	fadd   QWORD PTR [eax]
c0009a16:	dd 18                	fstp   QWORD PTR [eax]
c0009a18:	49                   	dec    ecx
c0009a19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a20:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a27:	d9 c1                	fld    st(1)
c0009a29:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a2d:	dc 00                	fadd   QWORD PTR [eax]
c0009a2f:	dd 18                	fstp   QWORD PTR [eax]
c0009a31:	49                   	dec    ecx
c0009a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a36:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a39:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a40:	d9 c1                	fld    st(1)
c0009a42:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a46:	dc 00                	fadd   QWORD PTR [eax]
c0009a48:	dd 18                	fstp   QWORD PTR [eax]
c0009a4a:	49                   	dec    ecx
c0009a4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a4f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a52:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a59:	d9 c1                	fld    st(1)
c0009a5b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a5f:	dc 00                	fadd   QWORD PTR [eax]
c0009a61:	dd 18                	fstp   QWORD PTR [eax]
c0009a63:	49                   	dec    ecx
c0009a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a68:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a6b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a72:	d9 c1                	fld    st(1)
c0009a74:	85 c9                	test   ecx,ecx
c0009a76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a7a:	dc 00                	fadd   QWORD PTR [eax]
c0009a7c:	dd 18                	fstp   QWORD PTR [eax]
c0009a7e:	0f 8f 19 ff ff ff    	jg     c000999d <calc_output_multi+0xad>
c0009a84:	dd d9                	fstp   st(1)
c0009a86:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a8e:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a92:	0f 89 d1 fe ff ff    	jns    c0009969 <calc_output_multi+0x79>
c0009a98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a9c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009aa0:	89 d1                	mov    ecx,edx
c0009aa2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009aa6:	29 c8                	sub    eax,ecx
c0009aa8:	99                   	cdq    
c0009aa9:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009aad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ab1:	0f af d0             	imul   edx,eax
c0009ab4:	40                   	inc    eax
c0009ab5:	01 d1                	add    ecx,edx
c0009ab7:	0f af c3             	imul   eax,ebx
c0009aba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abe:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ac5:	50                   	push   eax
c0009ac6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aca:	6a 00                	push   0x0
c0009acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ad0:	e8 03 6c ff ff       	call   c00006d8 <memset>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009adc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ae4:	e8 d2 f7 ff ff       	call   c00092bb <fp_to_double>
c0009ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009aed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009af1:	e8 bb f7 ff ff       	call   c00092b1 <fp_to_int>
c0009af6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009af9:	89 d9                	mov    ecx,ebx
c0009afb:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009afe:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009b02:	d8 e1                	fsub   st,st(1)
c0009b04:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b08:	de c9                	fmulp  st(1),st
c0009b0a:	de c1                	faddp  st(1),st
c0009b0c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009b10:	89 c8                	mov    eax,ecx
c0009b12:	bd 08 00 00 00       	mov    ebp,0x8
c0009b17:	99                   	cdq    
c0009b18:	f7 fd                	idiv   ebp
c0009b1a:	4a                   	dec    edx
c0009b1b:	83 fa 06             	cmp    edx,0x6
c0009b1e:	77 07                	ja     c0009b27 <calc_output_multi+0x237>
c0009b20:	ff 24 95 dc 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff24]
c0009b27:	49                   	dec    ecx
c0009b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b30:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b33:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b3a:	d9 c1                	fld    st(1)
c0009b3c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b40:	dc 00                	fadd   QWORD PTR [eax]
c0009b42:	dd 18                	fstp   QWORD PTR [eax]
c0009b44:	49                   	dec    ecx
c0009b45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b4d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b50:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b57:	d9 c1                	fld    st(1)
c0009b59:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b5d:	dc 00                	fadd   QWORD PTR [eax]
c0009b5f:	dd 18                	fstp   QWORD PTR [eax]
c0009b61:	49                   	dec    ecx
c0009b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b6d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b74:	d9 c1                	fld    st(1)
c0009b76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b7a:	dc 00                	fadd   QWORD PTR [eax]
c0009b7c:	dd 18                	fstp   QWORD PTR [eax]
c0009b7e:	49                   	dec    ecx
c0009b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b87:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b8a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b91:	d9 c1                	fld    st(1)
c0009b93:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b97:	dc 00                	fadd   QWORD PTR [eax]
c0009b99:	dd 18                	fstp   QWORD PTR [eax]
c0009b9b:	49                   	dec    ecx
c0009b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009ba7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bae:	d9 c1                	fld    st(1)
c0009bb0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bb4:	dc 00                	fadd   QWORD PTR [eax]
c0009bb6:	dd 18                	fstp   QWORD PTR [eax]
c0009bb8:	49                   	dec    ecx
c0009bb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bc4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bcb:	d9 c1                	fld    st(1)
c0009bcd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bd1:	dc 00                	fadd   QWORD PTR [eax]
c0009bd3:	dd 18                	fstp   QWORD PTR [eax]
c0009bd5:	49                   	dec    ecx
c0009bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bde:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009be1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009be8:	d9 c1                	fld    st(1)
c0009bea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bee:	dc 00                	fadd   QWORD PTR [eax]
c0009bf0:	dd 18                	fstp   QWORD PTR [eax]
c0009bf2:	49                   	dec    ecx
c0009bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bfb:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bfe:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009c05:	d9 c1                	fld    st(1)
c0009c07:	85 c9                	test   ecx,ecx
c0009c09:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009c0d:	dc 00                	fadd   QWORD PTR [eax]
c0009c0f:	dd 18                	fstp   QWORD PTR [eax]
c0009c11:	0f 8f f9 fe ff ff    	jg     c0009b10 <calc_output_multi+0x220>
c0009c17:	dd d9                	fstp   st(1)
c0009c19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009c1d:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009c21:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009c25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009c2a:	0f 8f ac fe ff ff    	jg     c0009adc <calc_output_multi+0x1ec>
c0009c30:	b9 08 00 00 00       	mov    ecx,0x8
c0009c35:	89 d8                	mov    eax,ebx
c0009c37:	99                   	cdq    
c0009c38:	f7 f9                	idiv   ecx
c0009c3a:	4a                   	dec    edx
c0009c3b:	83 fa 06             	cmp    edx,0x6
c0009c3e:	77 07                	ja     c0009c47 <calc_output_multi+0x357>
c0009c40:	ff 24 95 f8 00 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdff08]
c0009c47:	4b                   	dec    ebx
c0009c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c4c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c4f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c52:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c56:	d8 c9                	fmul   st,st(1)
c0009c58:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c5b:	4b                   	dec    ebx
c0009c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c60:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c63:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c66:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c6a:	d8 c9                	fmul   st,st(1)
c0009c6c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c6f:	4b                   	dec    ebx
c0009c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c74:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c77:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c7a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c7e:	d8 c9                	fmul   st,st(1)
c0009c80:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c83:	4b                   	dec    ebx
c0009c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c88:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c8b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c92:	d8 c9                	fmul   st,st(1)
c0009c94:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c97:	4b                   	dec    ebx
c0009c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c9c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c9f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ca2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ca6:	d8 c9                	fmul   st,st(1)
c0009ca8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cab:	4b                   	dec    ebx
c0009cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cb0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cb3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cb6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cba:	d8 c9                	fmul   st,st(1)
c0009cbc:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cbf:	4b                   	dec    ebx
c0009cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cc7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cca:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cce:	d8 c9                	fmul   st,st(1)
c0009cd0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cd3:	4b                   	dec    ebx
c0009cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cd8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cdb:	85 db                	test   ebx,ebx
c0009cdd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ce0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ce4:	d8 c9                	fmul   st,st(1)
c0009ce6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ce9:	0f 8f 46 ff ff ff    	jg     c0009c35 <calc_output_multi+0x345>
c0009cef:	dd d8                	fstp   st(0)
c0009cf1:	83 c4 4c             	add    esp,0x4c
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    

c0009cf9 <sinc_reset>:
c0009cf9:	56                   	push   esi
c0009cfa:	53                   	push   ebx
c0009cfb:	51                   	push   ecx
c0009cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d00:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009d03:	85 db                	test   ebx,ebx
c0009d05:	74 51                	je     c0009d58 <sinc_reset+0x5f>
c0009d07:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009d0e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009d15:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009d1c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009d22:	d9 ee                	fldz   
c0009d24:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009d27:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009d2a:	52                   	push   edx
c0009d2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d2e:	c1 e0 02             	shl    eax,0x2
c0009d31:	50                   	push   eax
c0009d32:	6a 00                	push   0x0
c0009d34:	56                   	push   esi
c0009d35:	e8 9e 69 ff ff       	call   c00006d8 <memset>
c0009d3a:	83 c4 0c             	add    esp,0xc
c0009d3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d40:	c1 e0 02             	shl    eax,0x2
c0009d43:	50                   	push   eax
c0009d44:	68 aa 00 00 00       	push   0xaa
c0009d49:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d4c:	8d 04 86             	lea    eax,[esi+eax*4]
c0009d4f:	50                   	push   eax
c0009d50:	e8 83 69 ff ff       	call   c00006d8 <memset>
c0009d55:	83 c4 10             	add    esp,0x10
c0009d58:	58                   	pop    eax
c0009d59:	5b                   	pop    ebx
c0009d5a:	5e                   	pop    esi
c0009d5b:	c3                   	ret    

c0009d5c <double_to_fp>:
c0009d5c:	d9 05 84 87 03 c0    	fld    DWORD PTR ds:0xc0038784
c0009d62:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009d66:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009d6a:	e9 51 4b 01 00       	jmp    c001e8c0 <lrint>

c0009d6f <fmod_one>:
c0009d6f:	83 ec 2c             	sub    esp,0x2c
c0009d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d82:	83 ec 08             	sub    esp,0x8
c0009d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d8d:	e8 2e 4b 01 00       	call   c001e8c0 <lrint>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d99:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009d9d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009da1:	de e1                	fsubrp st(1),st
c0009da3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009da7:	d9 ee                	fldz   
c0009da9:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009dad:	df e0                	fnstsw ax
c0009daf:	f6 c4 45             	test   ah,0x45
c0009db2:	75 0a                	jne    c0009dbe <fmod_one+0x4f>
c0009db4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009db8:	d9 e8                	fld1   
c0009dba:	de c1                	faddp  st(1),st
c0009dbc:	eb 04                	jmp    c0009dc2 <fmod_one+0x53>
c0009dbe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009dc2:	83 c4 2c             	add    esp,0x2c
c0009dc5:	c3                   	ret    

c0009dc6 <prepare_data>:
c0009dc6:	55                   	push   ebp
c0009dc7:	57                   	push   edi
c0009dc8:	56                   	push   esi
c0009dc9:	53                   	push   ebx
c0009dca:	83 ec 1c             	sub    esp,0x1c
c0009dcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009dd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009dd5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009dd9:	0f 89 57 01 00 00    	jns    c0009f36 <prepare_data+0x170>
c0009ddf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009de2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009de5:	85 d2                	test   edx,edx
c0009de7:	75 0d                	jne    c0009df6 <prepare_data+0x30>
c0009de9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009dec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009def:	29 d0                	sub    eax,edx
c0009df1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009df4:	eb 44                	jmp    c0009e3a <prepare_data+0x74>
c0009df6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009df9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009dfc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009dff:	39 c1                	cmp    ecx,eax
c0009e01:	7d 04                	jge    c0009e07 <prepare_data+0x41>
c0009e03:	29 d0                	sub    eax,edx
c0009e05:	eb 2d                	jmp    c0009e34 <prepare_data+0x6e>
c0009e07:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009e0d:	29 d7                	sub    edi,edx
c0009e0f:	01 f7                	add    edi,esi
c0009e11:	51                   	push   ecx
c0009e12:	29 f2                	sub    edx,esi
c0009e14:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009e1b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009e1e:	51                   	push   ecx
c0009e1f:	52                   	push   edx
c0009e20:	50                   	push   eax
c0009e21:	e8 ce 67 ff ff       	call   c00005f4 <memmove>
c0009e26:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009e29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009e2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009e2f:	29 f0                	sub    eax,esi
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	29 f0                	sub    eax,esi
c0009e36:	79 02                	jns    c0009e3a <prepare_data+0x74>
c0009e38:	31 c0                	xor    eax,eax
c0009e3a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009e3d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009e40:	29 ef                	sub    edi,ebp
c0009e42:	39 c7                	cmp    edi,eax
c0009e44:	7e 02                	jle    c0009e48 <prepare_data+0x82>
c0009e46:	89 c7                	mov    edi,eax
c0009e48:	89 f8                	mov    eax,edi
c0009e4a:	99                   	cdq    
c0009e4b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e4e:	b8 15 00 00 00       	mov    eax,0x15
c0009e53:	29 d7                	sub    edi,edx
c0009e55:	0f 88 dd 00 00 00    	js     c0009f38 <prepare_data+0x172>
c0009e5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009e5e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009e61:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009e64:	0f 8f ce 00 00 00    	jg     c0009f38 <prepare_data+0x172>
c0009e6a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009e70:	50                   	push   eax
c0009e71:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009e78:	50                   	push   eax
c0009e79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009e82:	50                   	push   eax
c0009e83:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009e86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009e8a:	50                   	push   eax
c0009e8b:	e8 d1 67 ff ff       	call   c0000661 <memcpy>
c0009e90:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009e93:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009e96:	01 fd                	add    ebp,edi
c0009e98:	01 f9                	add    ecx,edi
c0009e9a:	83 c4 10             	add    esp,0x10
c0009e9d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009ea0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009ea3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009ea6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eaa:	0f 85 86 00 00 00    	jne    c0009f36 <prepare_data+0x170>
c0009eb0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009eb3:	89 e8                	mov    eax,ebp
c0009eb5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009eb8:	29 c8                	sub    eax,ecx
c0009eba:	39 f8                	cmp    eax,edi
c0009ebc:	7d 78                	jge    c0009f36 <prepare_data+0x170>
c0009ebe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ec2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ec6:	74 6e                	je     c0009f36 <prepare_data+0x170>
c0009ec8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009ecb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009ecf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009ed2:	29 ef                	sub    edi,ebp
c0009ed4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009ed8:	7c 29                	jl     c0009f03 <prepare_data+0x13d>
c0009eda:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009edd:	29 f1                	sub    ecx,esi
c0009edf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ee6:	55                   	push   ebp
c0009ee7:	50                   	push   eax
c0009ee8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009eeb:	50                   	push   eax
c0009eec:	52                   	push   edx
c0009eed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ef1:	e8 fe 66 ff ff       	call   c00005f4 <memmove>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009efc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f06:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f09:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009f0c:	83 c6 05             	add    esi,0x5
c0009f0f:	78 07                	js     c0009f18 <prepare_data+0x152>
c0009f11:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009f14:	39 cf                	cmp    edi,ecx
c0009f16:	7e 04                	jle    c0009f1c <prepare_data+0x156>
c0009f18:	89 ce                	mov    esi,ecx
c0009f1a:	29 c6                	sub    esi,eax
c0009f1c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009f1f:	51                   	push   ecx
c0009f20:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009f27:	51                   	push   ecx
c0009f28:	6a 00                	push   0x0
c0009f2a:	50                   	push   eax
c0009f2b:	e8 a8 67 ff ff       	call   c00006d8 <memset>
c0009f30:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	31 c0                	xor    eax,eax
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	5b                   	pop    ebx
c0009f3c:	5e                   	pop    esi
c0009f3d:	5f                   	pop    edi
c0009f3e:	5d                   	pop    ebp
c0009f3f:	c3                   	ret    

c0009f40 <sinc_multichan_vari_process>:
c0009f40:	55                   	push   ebp
c0009f41:	b8 05 00 00 00       	mov    eax,0x5
c0009f46:	57                   	push   edi
c0009f47:	56                   	push   esi
c0009f48:	53                   	push   ebx
c0009f49:	83 ec 3c             	sub    esp,0x3c
c0009f4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f50:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f54:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f57:	85 db                	test   ebx,ebx
c0009f59:	0f 84 5d 02 00 00    	je     c000a1bc <sinc_multichan_vari_process+0x27c>
c0009f5f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f65:	0f af d0             	imul   edx,eax
c0009f68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f6b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f79:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f80:	dd 06                	fld    QWORD PTR [esi]
c0009f82:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f86:	55                   	push   ebp
c0009f87:	55                   	push   ebp
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 d9 f2 ff ff       	call   c0009269 <is_bad_src_ratio>
c0009f90:	89 c2                	mov    edx,eax
c0009f92:	58                   	pop    eax
c0009f93:	85 d2                	test   edx,edx
c0009f95:	59                   	pop    ecx
c0009f96:	b8 16 00 00 00       	mov    eax,0x16
c0009f9b:	0f 85 1b 02 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c0009fa1:	d9 05 88 87 03 c0    	fld    DWORD PTR ds:0xc0038788
c0009fa7:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009faa:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fad:	dd 06                	fld    QWORD PTR [esi]
c0009faf:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb2:	d8 d1                	fcom   st(1)
c0009fb4:	df e0                	fnstsw ax
c0009fb6:	9e                   	sahf   
c0009fb7:	76 0f                	jbe    c0009fc8 <sinc_multichan_vari_process+0x88>
c0009fb9:	dd d8                	fstp   st(0)
c0009fbb:	d9 e8                	fld1   
c0009fbd:	d8 d9                	fcomp  st(1)
c0009fbf:	df e0                	fnstsw ax
c0009fc1:	9e                   	sahf   
c0009fc2:	77 0f                	ja     c0009fd3 <sinc_multichan_vari_process+0x93>
c0009fc4:	dd d8                	fstp   st(0)
c0009fc6:	eb 11                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fc8:	dd d9                	fstp   st(1)
c0009fca:	d9 e8                	fld1   
c0009fcc:	d8 d9                	fcomp  st(1)
c0009fce:	df e0                	fnstsw ax
c0009fd0:	9e                   	sahf   
c0009fd1:	76 04                	jbe    c0009fd7 <sinc_multichan_vari_process+0x97>
c0009fd3:	de f9                	fdivp  st(1),st
c0009fd5:	eb 02                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fd7:	dd d8                	fstp   st(0)
c0009fd9:	83 ec 10             	sub    esp,0x10
c0009fdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe2:	e8 d9 48 01 00       	call   c001e8c0 <lrint>
c0009fe7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fea:	40                   	inc    eax
c0009feb:	dd 14 24             	fst    QWORD PTR [esp]
c0009fee:	0f af c5             	imul   eax,ebp
c0009ff1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff9:	e8 71 fd ff ff       	call   c0009d6f <fmod_one>
c0009ffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a001:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a005:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a008:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a010:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a014:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a017:	e8 a4 48 01 00       	call   c001e8c0 <lrint>
c000a01c:	0f af e8             	imul   ebp,eax
c000a01f:	d9 e8                	fld1   
c000a021:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a025:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a029:	01 e8                	add    eax,ebp
c000a02b:	dc 05 b8 00 02 c0    	fadd   QWORD PTR ds:0xc00200b8
c000a031:	99                   	cdq    
c000a032:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a036:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a042:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a045:	7d 4b                	jge    c000a092 <sinc_multichan_vari_process+0x152>
c000a047:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a04a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04d:	01 c8                	add    eax,ecx
c000a04f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a052:	99                   	cdq    
c000a053:	f7 f9                	idiv   ecx
c000a055:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a059:	7d 09                	jge    c000a064 <sinc_multichan_vari_process+0x124>
c000a05b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05e:	85 c0                	test   eax,eax
c000a060:	79 57                	jns    c000a0b9 <sinc_multichan_vari_process+0x179>
c000a062:	eb 70                	jmp    c000a0d4 <sinc_multichan_vari_process+0x194>
c000a064:	51                   	push   ecx
c000a065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a069:	57                   	push   edi
c000a06a:	53                   	push   ebx
c000a06b:	e8 56 fd ff ff       	call   c0009dc6 <prepare_data>
c000a070:	83 c4 10             	add    esp,0x10
c000a073:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 85 3e 01 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a07e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a081:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a084:	01 c8                	add    eax,ecx
c000a086:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a089:	99                   	cdq    
c000a08a:	f7 f9                	idiv   ecx
c000a08c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a090:	7c c9                	jl     c000a05b <sinc_multichan_vari_process+0x11b>
c000a092:	dd 04 24             	fld    QWORD PTR [esp]
c000a095:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a098:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a09c:	dd 1e                	fstp   QWORD PTR [esi]
c000a09e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0a1:	99                   	cdq    
c000a0a2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0ab:	99                   	cdq    
c000a0ac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0af:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b2:	31 c0                	xor    eax,eax
c000a0b4:	e9 03 01 00 00       	jmp    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a0b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0bd:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0c3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0cb:	d9 c9                	fxch   st(1)
c000a0cd:	de d9                	fcompp 
c000a0cf:	df e0                	fnstsw ax
c000a0d1:	9e                   	sahf   
c000a0d2:	73 be                	jae    c000a092 <sinc_multichan_vari_process+0x152>
c000a0d4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d8:	7e 31                	jle    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0da:	83 ec 10             	sub    esp,0x10
c000a0dd:	dd 06                	fld    QWORD PTR [esi]
c000a0df:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e5:	e8 b6 47 01 00       	call   c001e8a0 <fabs>
c000a0ea:	83 c4 10             	add    esp,0x10
c000a0ed:	dc 1d 78 87 03 c0    	fcomp  QWORD PTR ds:0xc0038778
c000a0f3:	df e0                	fnstsw ax
c000a0f5:	9e                   	sahf   
c000a0f6:	76 13                	jbe    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0f8:	dd 06                	fld    QWORD PTR [esi]
c000a0fa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0fd:	d8 e1                	fsub   st,st(1)
c000a0ff:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a102:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a105:	de c1                	faddp  st(1),st
c000a107:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a10b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a10e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a112:	d9 e8                	fld1   
c000a114:	d8 d9                	fcomp  st(1)
c000a116:	df e0                	fnstsw ax
c000a118:	9e                   	sahf   
c000a119:	77 04                	ja     c000a11f <sinc_multichan_vari_process+0x1df>
c000a11b:	dd d8                	fstp   st(0)
c000a11d:	d9 e8                	fld1   
c000a11f:	de c9                	fmulp  st(1),st
c000a121:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a125:	50                   	push   eax
c000a126:	50                   	push   eax
c000a127:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12f:	e8 28 fc ff ff       	call   c0009d5c <double_to_fp>
c000a134:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a138:	89 c5                	mov    ebp,eax
c000a13a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a13e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a141:	e8 16 fc ff ff       	call   c0009d5c <double_to_fp>
c000a146:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a149:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a14c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14f:	89 c1                	mov    ecx,eax
c000a151:	52                   	push   edx
c000a152:	89 d8                	mov    eax,ebx
c000a154:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a158:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a15b:	52                   	push   edx
c000a15c:	52                   	push   edx
c000a15d:	89 ea                	mov    edx,ebp
c000a15f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a162:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a165:	e8 86 f7 ff ff       	call   c00098f0 <calc_output_multi>
c000a16a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a16d:	d9 e8                	fld1   
c000a16f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a172:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a176:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	dd 14 24             	fst    QWORD PTR [esp]
c000a180:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a184:	e8 e6 fb ff ff       	call   c0009d6f <fmod_one>
c000a189:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a18c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a190:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a193:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a19b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a19f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a2:	e8 19 47 01 00       	call   c001e8c0 <lrint>
c000a1a7:	0f af e8             	imul   ebp,eax
c000a1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ae:	01 e8                	add    eax,ebp
c000a1b0:	99                   	cdq    
c000a1b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1b7:	e9 80 fe ff ff       	jmp    c000a03c <sinc_multichan_vari_process+0xfc>
c000a1bc:	83 c4 3c             	add    esp,0x3c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    

c000a1c4 <sinc_hex_vari_process>:
c000a1c4:	55                   	push   ebp
c000a1c5:	b8 05 00 00 00       	mov    eax,0x5
c000a1ca:	57                   	push   edi
c000a1cb:	56                   	push   esi
c000a1cc:	53                   	push   ebx
c000a1cd:	83 ec 3c             	sub    esp,0x3c
c000a1d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1d8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1db:	85 db                	test   ebx,ebx
c000a1dd:	0f 84 58 02 00 00    	je     c000a43b <sinc_hex_vari_process+0x277>
c000a1e3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e9:	0f af d0             	imul   edx,eax
c000a1ec:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1ef:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20a:	55                   	push   ebp
c000a20b:	55                   	push   ebp
c000a20c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20f:	e8 55 f0 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a214:	89 c2                	mov    edx,eax
c000a216:	58                   	pop    eax
c000a217:	85 d2                	test   edx,edx
c000a219:	59                   	pop    ecx
c000a21a:	b8 16 00 00 00       	mov    eax,0x16
c000a21f:	0f 85 16 02 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a225:	d9 05 88 87 03 c0    	fld    DWORD PTR ds:0xc0038788
c000a22b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a22e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a236:	d8 d1                	fcom   st(1)
c000a238:	df e0                	fnstsw ax
c000a23a:	9e                   	sahf   
c000a23b:	76 0f                	jbe    c000a24c <sinc_hex_vari_process+0x88>
c000a23d:	dd d8                	fstp   st(0)
c000a23f:	d9 e8                	fld1   
c000a241:	d8 d9                	fcomp  st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	77 0f                	ja     c000a257 <sinc_hex_vari_process+0x93>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	eb 11                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a24c:	dd d9                	fstp   st(1)
c000a24e:	d9 e8                	fld1   
c000a250:	d8 d9                	fcomp  st(1)
c000a252:	df e0                	fnstsw ax
c000a254:	9e                   	sahf   
c000a255:	76 04                	jbe    c000a25b <sinc_hex_vari_process+0x97>
c000a257:	de f9                	fdivp  st(1),st
c000a259:	eb 02                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a25b:	dd d8                	fstp   st(0)
c000a25d:	83 ec 10             	sub    esp,0x10
c000a260:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a263:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a266:	e8 55 46 01 00       	call   c001e8c0 <lrint>
c000a26b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a26e:	40                   	inc    eax
c000a26f:	dd 14 24             	fst    QWORD PTR [esp]
c000a272:	0f af c5             	imul   eax,ebp
c000a275:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a27d:	e8 ed fa ff ff       	call   c0009d6f <fmod_one>
c000a282:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a285:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a289:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a28c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a290:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a294:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a298:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a29b:	e8 20 46 01 00       	call   c001e8c0 <lrint>
c000a2a0:	0f af e8             	imul   ebp,eax
c000a2a3:	d9 e8                	fld1   
c000a2a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ad:	01 e8                	add    eax,ebp
c000a2af:	dc 05 b8 00 02 c0    	fadd   QWORD PTR ds:0xc00200b8
c000a2b5:	99                   	cdq    
c000a2b6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ba:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2bd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c9:	7d 4b                	jge    c000a316 <sinc_hex_vari_process+0x152>
c000a2cb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d1:	01 c8                	add    eax,ecx
c000a2d3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2d6:	99                   	cdq    
c000a2d7:	f7 f9                	idiv   ecx
c000a2d9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2dd:	7d 09                	jge    c000a2e8 <sinc_hex_vari_process+0x124>
c000a2df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	79 57                	jns    c000a33d <sinc_hex_vari_process+0x179>
c000a2e6:	eb 70                	jmp    c000a358 <sinc_hex_vari_process+0x194>
c000a2e8:	51                   	push   ecx
c000a2e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2ed:	57                   	push   edi
c000a2ee:	53                   	push   ebx
c000a2ef:	e8 d2 fa ff ff       	call   c0009dc6 <prepare_data>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2fa:	85 c0                	test   eax,eax
c000a2fc:	0f 85 39 01 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a308:	01 c8                	add    eax,ecx
c000a30a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a30d:	99                   	cdq    
c000a30e:	f7 f9                	idiv   ecx
c000a310:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a314:	7c c9                	jl     c000a2df <sinc_hex_vari_process+0x11b>
c000a316:	dd 04 24             	fld    QWORD PTR [esp]
c000a319:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a31c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a320:	dd 1e                	fstp   QWORD PTR [esi]
c000a322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a32c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a32f:	99                   	cdq    
c000a330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a333:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a336:	31 c0                	xor    eax,eax
c000a338:	e9 fe 00 00 00       	jmp    c000a43b <sinc_hex_vari_process+0x277>
c000a33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a341:	dd 04 24             	fld    QWORD PTR [esp]
c000a344:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a347:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a34b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a34f:	d9 c9                	fxch   st(1)
c000a351:	de d9                	fcompp 
c000a353:	df e0                	fnstsw ax
c000a355:	9e                   	sahf   
c000a356:	73 be                	jae    c000a316 <sinc_hex_vari_process+0x152>
c000a358:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a35c:	7e 31                	jle    c000a38f <sinc_hex_vari_process+0x1cb>
c000a35e:	83 ec 10             	sub    esp,0x10
c000a361:	dd 06                	fld    QWORD PTR [esi]
c000a363:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a366:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a369:	e8 32 45 01 00       	call   c001e8a0 <fabs>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	dc 1d 78 87 03 c0    	fcomp  QWORD PTR ds:0xc0038778
c000a377:	df e0                	fnstsw ax
c000a379:	9e                   	sahf   
c000a37a:	76 13                	jbe    c000a38f <sinc_hex_vari_process+0x1cb>
c000a37c:	dd 06                	fld    QWORD PTR [esi]
c000a37e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a381:	d8 e1                	fsub   st,st(1)
c000a383:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a386:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a389:	de c1                	faddp  st(1),st
c000a38b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a38f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a392:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a396:	d9 e8                	fld1   
c000a398:	d8 d9                	fcomp  st(1)
c000a39a:	df e0                	fnstsw ax
c000a39c:	9e                   	sahf   
c000a39d:	77 04                	ja     c000a3a3 <sinc_hex_vari_process+0x1df>
c000a39f:	dd d8                	fstp   st(0)
c000a3a1:	d9 e8                	fld1   
c000a3a3:	de c9                	fmulp  st(1),st
c000a3a5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3a9:	50                   	push   eax
c000a3aa:	50                   	push   eax
c000a3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b3:	e8 a4 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3b8:	89 c5                	mov    ebp,eax
c000a3ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3be:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c5:	e8 92 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3ca:	83 c4 0c             	add    esp,0xc
c000a3cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d6:	89 c1                	mov    ecx,eax
c000a3d8:	52                   	push   edx
c000a3d9:	89 d8                	mov    eax,ebx
c000a3db:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3df:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e2:	52                   	push   edx
c000a3e3:	52                   	push   edx
c000a3e4:	89 ea                	mov    edx,ebp
c000a3e6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e9:	e8 d1 f2 ff ff       	call   c00096bf <calc_output_hex>
c000a3ee:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a3f2:	d9 e8                	fld1   
c000a3f4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3fc:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a403:	e8 67 f9 ff ff       	call   c0009d6f <fmod_one>
c000a408:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a40b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a412:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a416:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a41a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a41e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a421:	e8 9a 44 01 00       	call   c001e8c0 <lrint>
c000a426:	0f af e8             	imul   ebp,eax
c000a429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a42d:	01 e8                	add    eax,ebp
c000a42f:	99                   	cdq    
c000a430:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a433:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a436:	e9 85 fe ff ff       	jmp    c000a2c0 <sinc_hex_vari_process+0xfc>
c000a43b:	83 c4 3c             	add    esp,0x3c
c000a43e:	5b                   	pop    ebx
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	5d                   	pop    ebp
c000a442:	c3                   	ret    

c000a443 <sinc_quad_vari_process>:
c000a443:	55                   	push   ebp
c000a444:	b8 05 00 00 00       	mov    eax,0x5
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 3c             	sub    esp,0x3c
c000a44f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a453:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a457:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a45a:	85 db                	test   ebx,ebx
c000a45c:	0f 84 58 02 00 00    	je     c000a6ba <sinc_quad_vari_process+0x277>
c000a462:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a465:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a468:	0f af d0             	imul   edx,eax
c000a46b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a46e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a472:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a479:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a483:	dd 06                	fld    QWORD PTR [esi]
c000a485:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a489:	55                   	push   ebp
c000a48a:	55                   	push   ebp
c000a48b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a48e:	e8 d6 ed ff ff       	call   c0009269 <is_bad_src_ratio>
c000a493:	89 c2                	mov    edx,eax
c000a495:	58                   	pop    eax
c000a496:	85 d2                	test   edx,edx
c000a498:	59                   	pop    ecx
c000a499:	b8 16 00 00 00       	mov    eax,0x16
c000a49e:	0f 85 16 02 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a4a4:	d9 05 88 87 03 c0    	fld    DWORD PTR ds:0xc0038788
c000a4aa:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ad:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b0:	dd 06                	fld    QWORD PTR [esi]
c000a4b2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b5:	d8 d1                	fcom   st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	76 0f                	jbe    c000a4cb <sinc_quad_vari_process+0x88>
c000a4bc:	dd d8                	fstp   st(0)
c000a4be:	d9 e8                	fld1   
c000a4c0:	d8 d9                	fcomp  st(1)
c000a4c2:	df e0                	fnstsw ax
c000a4c4:	9e                   	sahf   
c000a4c5:	77 0f                	ja     c000a4d6 <sinc_quad_vari_process+0x93>
c000a4c7:	dd d8                	fstp   st(0)
c000a4c9:	eb 11                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4cb:	dd d9                	fstp   st(1)
c000a4cd:	d9 e8                	fld1   
c000a4cf:	d8 d9                	fcomp  st(1)
c000a4d1:	df e0                	fnstsw ax
c000a4d3:	9e                   	sahf   
c000a4d4:	76 04                	jbe    c000a4da <sinc_quad_vari_process+0x97>
c000a4d6:	de f9                	fdivp  st(1),st
c000a4d8:	eb 02                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4da:	dd d8                	fstp   st(0)
c000a4dc:	83 ec 10             	sub    esp,0x10
c000a4df:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e5:	e8 d6 43 01 00       	call   c001e8c0 <lrint>
c000a4ea:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4ed:	40                   	inc    eax
c000a4ee:	dd 14 24             	fst    QWORD PTR [esp]
c000a4f1:	0f af c5             	imul   eax,ebp
c000a4f4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4fc:	e8 6e f8 ff ff       	call   c0009d6f <fmod_one>
c000a501:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a504:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a508:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a50f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a513:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a517:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a51a:	e8 a1 43 01 00       	call   c001e8c0 <lrint>
c000a51f:	0f af e8             	imul   ebp,eax
c000a522:	d9 e8                	fld1   
c000a524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a528:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a52c:	01 e8                	add    eax,ebp
c000a52e:	dc 05 b8 00 02 c0    	fadd   QWORD PTR ds:0xc00200b8
c000a534:	99                   	cdq    
c000a535:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a539:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a53c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a545:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a548:	7d 4b                	jge    c000a595 <sinc_quad_vari_process+0x152>
c000a54a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a54d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a550:	01 c8                	add    eax,ecx
c000a552:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a555:	99                   	cdq    
c000a556:	f7 f9                	idiv   ecx
c000a558:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55c:	7d 09                	jge    c000a567 <sinc_quad_vari_process+0x124>
c000a55e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a561:	85 c0                	test   eax,eax
c000a563:	79 57                	jns    c000a5bc <sinc_quad_vari_process+0x179>
c000a565:	eb 70                	jmp    c000a5d7 <sinc_quad_vari_process+0x194>
c000a567:	51                   	push   ecx
c000a568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56c:	57                   	push   edi
c000a56d:	53                   	push   ebx
c000a56e:	e8 53 f8 ff ff       	call   c0009dc6 <prepare_data>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a579:	85 c0                	test   eax,eax
c000a57b:	0f 85 39 01 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a581:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a584:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a587:	01 c8                	add    eax,ecx
c000a589:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58c:	99                   	cdq    
c000a58d:	f7 f9                	idiv   ecx
c000a58f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a593:	7c c9                	jl     c000a55e <sinc_quad_vari_process+0x11b>
c000a595:	dd 04 24             	fld    QWORD PTR [esp]
c000a598:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a59b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a59f:	dd 1e                	fstp   QWORD PTR [esi]
c000a5a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a4:	99                   	cdq    
c000a5a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ae:	99                   	cdq    
c000a5af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	e9 fe 00 00 00       	jmp    c000a6ba <sinc_quad_vari_process+0x277>
c000a5bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c0:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5ca:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5ce:	d9 c9                	fxch   st(1)
c000a5d0:	de d9                	fcompp 
c000a5d2:	df e0                	fnstsw ax
c000a5d4:	9e                   	sahf   
c000a5d5:	73 be                	jae    c000a595 <sinc_quad_vari_process+0x152>
c000a5d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5db:	7e 31                	jle    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5dd:	83 ec 10             	sub    esp,0x10
c000a5e0:	dd 06                	fld    QWORD PTR [esi]
c000a5e2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5e8:	e8 b3 42 01 00       	call   c001e8a0 <fabs>
c000a5ed:	83 c4 10             	add    esp,0x10
c000a5f0:	dc 1d 78 87 03 c0    	fcomp  QWORD PTR ds:0xc0038778
c000a5f6:	df e0                	fnstsw ax
c000a5f8:	9e                   	sahf   
c000a5f9:	76 13                	jbe    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5fb:	dd 06                	fld    QWORD PTR [esi]
c000a5fd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a600:	d8 e1                	fsub   st,st(1)
c000a602:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a605:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a608:	de c1                	faddp  st(1),st
c000a60a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a611:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a615:	d9 e8                	fld1   
c000a617:	d8 d9                	fcomp  st(1)
c000a619:	df e0                	fnstsw ax
c000a61b:	9e                   	sahf   
c000a61c:	77 04                	ja     c000a622 <sinc_quad_vari_process+0x1df>
c000a61e:	dd d8                	fstp   st(0)
c000a620:	d9 e8                	fld1   
c000a622:	de c9                	fmulp  st(1),st
c000a624:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a628:	50                   	push   eax
c000a629:	50                   	push   eax
c000a62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a632:	e8 25 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a637:	89 c5                	mov    ebp,eax
c000a639:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a63d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 13 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a649:	83 c4 0c             	add    esp,0xc
c000a64c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a64f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a652:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a655:	89 c1                	mov    ecx,eax
c000a657:	52                   	push   edx
c000a658:	89 d8                	mov    eax,ebx
c000a65a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a661:	52                   	push   edx
c000a662:	52                   	push   edx
c000a663:	89 ea                	mov    edx,ebp
c000a665:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a668:	e8 8d ee ff ff       	call   c00094fa <calc_output_quad>
c000a66d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a671:	d9 e8                	fld1   
c000a673:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a677:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a67b:	dd 14 24             	fst    QWORD PTR [esp]
c000a67e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a682:	e8 e8 f6 ff ff       	call   c0009d6f <fmod_one>
c000a687:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a68a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a68e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a691:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a695:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a699:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a69d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a0:	e8 1b 42 01 00       	call   c001e8c0 <lrint>
c000a6a5:	0f af e8             	imul   ebp,eax
c000a6a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ac:	01 e8                	add    eax,ebp
c000a6ae:	99                   	cdq    
c000a6af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b5:	e9 85 fe ff ff       	jmp    c000a53f <sinc_quad_vari_process+0xfc>
c000a6ba:	83 c4 3c             	add    esp,0x3c
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	5d                   	pop    ebp
c000a6c1:	c3                   	ret    

c000a6c2 <sinc_stereo_vari_process>:
c000a6c2:	55                   	push   ebp
c000a6c3:	b8 05 00 00 00       	mov    eax,0x5
c000a6c8:	57                   	push   edi
c000a6c9:	56                   	push   esi
c000a6ca:	53                   	push   ebx
c000a6cb:	83 ec 3c             	sub    esp,0x3c
c000a6ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6d9:	85 db                	test   ebx,ebx
c000a6db:	0f 84 58 02 00 00    	je     c000a939 <sinc_stereo_vari_process+0x277>
c000a6e1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e7:	0f af d0             	imul   edx,eax
c000a6ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6ed:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a702:	dd 06                	fld    QWORD PTR [esi]
c000a704:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a708:	55                   	push   ebp
c000a709:	55                   	push   ebp
c000a70a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a70d:	e8 57 eb ff ff       	call   c0009269 <is_bad_src_ratio>
c000a712:	89 c2                	mov    edx,eax
c000a714:	58                   	pop    eax
c000a715:	85 d2                	test   edx,edx
c000a717:	59                   	pop    ecx
c000a718:	b8 16 00 00 00       	mov    eax,0x16
c000a71d:	0f 85 16 02 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a723:	d9 05 88 87 03 c0    	fld    DWORD PTR ds:0xc0038788
c000a729:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a72c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a72f:	dd 06                	fld    QWORD PTR [esi]
c000a731:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a734:	d8 d1                	fcom   st(1)
c000a736:	df e0                	fnstsw ax
c000a738:	9e                   	sahf   
c000a739:	76 0f                	jbe    c000a74a <sinc_stereo_vari_process+0x88>
c000a73b:	dd d8                	fstp   st(0)
c000a73d:	d9 e8                	fld1   
c000a73f:	d8 d9                	fcomp  st(1)
c000a741:	df e0                	fnstsw ax
c000a743:	9e                   	sahf   
c000a744:	77 0f                	ja     c000a755 <sinc_stereo_vari_process+0x93>
c000a746:	dd d8                	fstp   st(0)
c000a748:	eb 11                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a74a:	dd d9                	fstp   st(1)
c000a74c:	d9 e8                	fld1   
c000a74e:	d8 d9                	fcomp  st(1)
c000a750:	df e0                	fnstsw ax
c000a752:	9e                   	sahf   
c000a753:	76 04                	jbe    c000a759 <sinc_stereo_vari_process+0x97>
c000a755:	de f9                	fdivp  st(1),st
c000a757:	eb 02                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a759:	dd d8                	fstp   st(0)
c000a75b:	83 ec 10             	sub    esp,0x10
c000a75e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a761:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a764:	e8 57 41 01 00       	call   c001e8c0 <lrint>
c000a769:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a76c:	40                   	inc    eax
c000a76d:	dd 14 24             	fst    QWORD PTR [esp]
c000a770:	0f af c5             	imul   eax,ebp
c000a773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a777:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a77b:	e8 ef f5 ff ff       	call   c0009d6f <fmod_one>
c000a780:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a783:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a787:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a78a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a78e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a792:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a796:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a799:	e8 22 41 01 00       	call   c001e8c0 <lrint>
c000a79e:	0f af e8             	imul   ebp,eax
c000a7a1:	d9 e8                	fld1   
c000a7a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a7a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ab:	01 e8                	add    eax,ebp
c000a7ad:	dc 05 b8 00 02 c0    	fadd   QWORD PTR ds:0xc00200b8
c000a7b3:	99                   	cdq    
c000a7b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a7b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c7:	7d 4b                	jge    c000a814 <sinc_stereo_vari_process+0x152>
c000a7c9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7cf:	01 c8                	add    eax,ecx
c000a7d1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d4:	99                   	cdq    
c000a7d5:	f7 f9                	idiv   ecx
c000a7d7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7db:	7d 09                	jge    c000a7e6 <sinc_stereo_vari_process+0x124>
c000a7dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7e0:	85 c0                	test   eax,eax
c000a7e2:	79 57                	jns    c000a83b <sinc_stereo_vari_process+0x179>
c000a7e4:	eb 70                	jmp    c000a856 <sinc_stereo_vari_process+0x194>
c000a7e6:	51                   	push   ecx
c000a7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7eb:	57                   	push   edi
c000a7ec:	53                   	push   ebx
c000a7ed:	e8 d4 f5 ff ff       	call   c0009dc6 <prepare_data>
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7f8:	85 c0                	test   eax,eax
c000a7fa:	0f 85 39 01 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a800:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a803:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a806:	01 c8                	add    eax,ecx
c000a808:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a80b:	99                   	cdq    
c000a80c:	f7 f9                	idiv   ecx
c000a80e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a812:	7c c9                	jl     c000a7dd <sinc_stereo_vari_process+0x11b>
c000a814:	dd 04 24             	fld    QWORD PTR [esp]
c000a817:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a81a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a81e:	dd 1e                	fstp   QWORD PTR [esi]
c000a820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a823:	99                   	cdq    
c000a824:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a827:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a82a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a82d:	99                   	cdq    
c000a82e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a831:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a834:	31 c0                	xor    eax,eax
c000a836:	e9 fe 00 00 00       	jmp    c000a939 <sinc_stereo_vari_process+0x277>
c000a83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a83f:	dd 04 24             	fld    QWORD PTR [esp]
c000a842:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a845:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a849:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a84d:	d9 c9                	fxch   st(1)
c000a84f:	de d9                	fcompp 
c000a851:	df e0                	fnstsw ax
c000a853:	9e                   	sahf   
c000a854:	73 be                	jae    c000a814 <sinc_stereo_vari_process+0x152>
c000a856:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a85a:	7e 31                	jle    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a85c:	83 ec 10             	sub    esp,0x10
c000a85f:	dd 06                	fld    QWORD PTR [esi]
c000a861:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a864:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a867:	e8 34 40 01 00       	call   c001e8a0 <fabs>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	dc 1d 78 87 03 c0    	fcomp  QWORD PTR ds:0xc0038778
c000a875:	df e0                	fnstsw ax
c000a877:	9e                   	sahf   
c000a878:	76 13                	jbe    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a87a:	dd 06                	fld    QWORD PTR [esi]
c000a87c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a87f:	d8 e1                	fsub   st,st(1)
c000a881:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a884:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a887:	de c1                	faddp  st(1),st
c000a889:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a88d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a890:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a894:	d9 e8                	fld1   
c000a896:	d8 d9                	fcomp  st(1)
c000a898:	df e0                	fnstsw ax
c000a89a:	9e                   	sahf   
c000a89b:	77 04                	ja     c000a8a1 <sinc_stereo_vari_process+0x1df>
c000a89d:	dd d8                	fstp   st(0)
c000a89f:	d9 e8                	fld1   
c000a8a1:	de c9                	fmulp  st(1),st
c000a8a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a8a7:	50                   	push   eax
c000a8a8:	50                   	push   eax
c000a8a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b1:	e8 a6 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8b6:	89 c5                	mov    ebp,eax
c000a8b8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8bc:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a8c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8c3:	e8 94 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8c8:	83 c4 0c             	add    esp,0xc
c000a8cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8ce:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a8d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a8d4:	89 c1                	mov    ecx,eax
c000a8d6:	52                   	push   edx
c000a8d7:	89 d8                	mov    eax,ebx
c000a8d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	89 ea                	mov    edx,ebp
c000a8e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8e7:	e8 ce ea ff ff       	call   c00093ba <calc_output_stereo>
c000a8ec:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a8f0:	d9 e8                	fld1   
c000a8f2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a8fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a901:	e8 69 f4 ff ff       	call   c0009d6f <fmod_one>
c000a906:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a909:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a90d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a910:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a918:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a91c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a91f:	e8 9c 3f 01 00       	call   c001e8c0 <lrint>
c000a924:	0f af e8             	imul   ebp,eax
c000a927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a92b:	01 e8                	add    eax,ebp
c000a92d:	99                   	cdq    
c000a92e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a931:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a934:	e9 85 fe ff ff       	jmp    c000a7be <sinc_stereo_vari_process+0xfc>
c000a939:	83 c4 3c             	add    esp,0x3c
c000a93c:	5b                   	pop    ebx
c000a93d:	5e                   	pop    esi
c000a93e:	5f                   	pop    edi
c000a93f:	5d                   	pop    ebp
c000a940:	c3                   	ret    

c000a941 <sinc_mono_vari_process>:
c000a941:	55                   	push   ebp
c000a942:	b8 05 00 00 00       	mov    eax,0x5
c000a947:	57                   	push   edi
c000a948:	56                   	push   esi
c000a949:	53                   	push   ebx
c000a94a:	83 ec 3c             	sub    esp,0x3c
c000a94d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a951:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a955:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a958:	85 db                	test   ebx,ebx
c000a95a:	0f 84 57 02 00 00    	je     c000abb7 <sinc_mono_vari_process+0x276>
c000a960:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a963:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a966:	0f af d0             	imul   edx,eax
c000a969:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a96c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a970:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a977:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a97a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a981:	dd 06                	fld    QWORD PTR [esi]
c000a983:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a987:	51                   	push   ecx
c000a988:	51                   	push   ecx
c000a989:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a98c:	e8 d8 e8 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a991:	5d                   	pop    ebp
c000a992:	89 c2                	mov    edx,eax
c000a994:	58                   	pop    eax
c000a995:	85 d2                	test   edx,edx
c000a997:	b8 16 00 00 00       	mov    eax,0x16
c000a99c:	0f 85 15 02 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000a9a2:	d9 05 88 87 03 c0    	fld    DWORD PTR ds:0xc0038788
c000a9a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a9ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a9ae:	dd 06                	fld    QWORD PTR [esi]
c000a9b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a9b3:	d8 d1                	fcom   st(1)
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	9e                   	sahf   
c000a9b8:	76 0f                	jbe    c000a9c9 <sinc_mono_vari_process+0x88>
c000a9ba:	dd d8                	fstp   st(0)
c000a9bc:	d9 e8                	fld1   
c000a9be:	d8 d9                	fcomp  st(1)
c000a9c0:	df e0                	fnstsw ax
c000a9c2:	9e                   	sahf   
c000a9c3:	77 0f                	ja     c000a9d4 <sinc_mono_vari_process+0x93>
c000a9c5:	dd d8                	fstp   st(0)
c000a9c7:	eb 11                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9c9:	dd d9                	fstp   st(1)
c000a9cb:	d9 e8                	fld1   
c000a9cd:	d8 d9                	fcomp  st(1)
c000a9cf:	df e0                	fnstsw ax
c000a9d1:	9e                   	sahf   
c000a9d2:	76 04                	jbe    c000a9d8 <sinc_mono_vari_process+0x97>
c000a9d4:	de f9                	fdivp  st(1),st
c000a9d6:	eb 02                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9d8:	dd d8                	fstp   st(0)
c000a9da:	83 ec 10             	sub    esp,0x10
c000a9dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a9e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9e3:	e8 d8 3e 01 00       	call   c001e8c0 <lrint>
c000a9e8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a9eb:	40                   	inc    eax
c000a9ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a9ef:	0f af e8             	imul   ebp,eax
c000a9f2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a9f6:	e8 74 f3 ff ff       	call   c0009d6f <fmod_one>
c000a9fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a9fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aa06:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000aa0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa0d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000aa11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa15:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa18:	e8 a3 3e 01 00       	call   c001e8c0 <lrint>
c000aa1d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aa22:	d9 e8                	fld1   
c000aa24:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa28:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000aa2c:	99                   	cdq    
c000aa2d:	dc 05 b8 00 02 c0    	fadd   QWORD PTR ds:0xc00200b8
c000aa33:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aa36:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000aa3a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000aa43:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000aa46:	7d 44                	jge    c000aa8c <sinc_mono_vari_process+0x14b>
c000aa48:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa4e:	01 c8                	add    eax,ecx
c000aa50:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa53:	99                   	cdq    
c000aa54:	f7 f9                	idiv   ecx
c000aa56:	39 d5                	cmp    ebp,edx
c000aa58:	7d 09                	jge    c000aa63 <sinc_mono_vari_process+0x122>
c000aa5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000aa5d:	85 c0                	test   eax,eax
c000aa5f:	79 52                	jns    c000aab3 <sinc_mono_vari_process+0x172>
c000aa61:	eb 6b                	jmp    c000aace <sinc_mono_vari_process+0x18d>
c000aa63:	52                   	push   edx
c000aa64:	55                   	push   ebp
c000aa65:	57                   	push   edi
c000aa66:	53                   	push   ebx
c000aa67:	e8 5a f3 ff ff       	call   c0009dc6 <prepare_data>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000aa72:	85 c0                	test   eax,eax
c000aa74:	0f 85 3d 01 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000aa7a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa7d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa80:	01 c8                	add    eax,ecx
c000aa82:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa85:	99                   	cdq    
c000aa86:	f7 f9                	idiv   ecx
c000aa88:	39 d5                	cmp    ebp,edx
c000aa8a:	7c ce                	jl     c000aa5a <sinc_mono_vari_process+0x119>
c000aa8c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa8f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000aa92:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa96:	dd 1e                	fstp   QWORD PTR [esi]
c000aa98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aa9b:	99                   	cdq    
c000aa9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa9f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000aaa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aaa5:	99                   	cdq    
c000aaa6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aaa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaac:	31 c0                	xor    eax,eax
c000aaae:	e9 04 01 00 00       	jmp    c000abb7 <sinc_mono_vari_process+0x276>
c000aab3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab7:	dd 04 24             	fld    QWORD PTR [esp]
c000aaba:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000aabd:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000aac1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000aac5:	d9 c9                	fxch   st(1)
c000aac7:	de d9                	fcompp 
c000aac9:	df e0                	fnstsw ax
c000aacb:	9e                   	sahf   
c000aacc:	77 be                	ja     c000aa8c <sinc_mono_vari_process+0x14b>
c000aace:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000aad2:	7e 31                	jle    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aad4:	83 ec 10             	sub    esp,0x10
c000aad7:	dd 06                	fld    QWORD PTR [esi]
c000aad9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000aadc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aadf:	e8 bc 3d 01 00       	call   c001e8a0 <fabs>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	dc 1d 78 87 03 c0    	fcomp  QWORD PTR ds:0xc0038778
c000aaed:	df e0                	fnstsw ax
c000aaef:	9e                   	sahf   
c000aaf0:	76 13                	jbe    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aaf2:	dd 06                	fld    QWORD PTR [esi]
c000aaf4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000aaf7:	d8 e1                	fsub   st,st(1)
c000aaf9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000aafc:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000aaff:	de c1                	faddp  st(1),st
c000ab01:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000ab05:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000ab08:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ab0c:	d9 e8                	fld1   
c000ab0e:	d8 d9                	fcomp  st(1)
c000ab10:	df e0                	fnstsw ax
c000ab12:	9e                   	sahf   
c000ab13:	77 04                	ja     c000ab19 <sinc_mono_vari_process+0x1d8>
c000ab15:	dd d8                	fstp   st(0)
c000ab17:	d9 e8                	fld1   
c000ab19:	de c9                	fmulp  st(1),st
c000ab1b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab1f:	50                   	push   eax
c000ab20:	50                   	push   eax
c000ab21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab29:	e8 2e f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab32:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab36:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab3d:	e8 1a f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ab46:	89 c1                	mov    ecx,eax
c000ab48:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000ab4c:	89 d8                	mov    eax,ebx
c000ab4e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000ab51:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000ab55:	e8 7b e7 ff ff       	call   c00092d5 <calc_output_single>
c000ab5a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ab60:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab64:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000ab67:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000ab6a:	d9 e8                	fld1   
c000ab6c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000ab70:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000ab74:	dd 14 24             	fst    QWORD PTR [esp]
c000ab77:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000ab7b:	e8 ef f1 ff ff       	call   c0009d6f <fmod_one>
c000ab80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ab83:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab8b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000ab8f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab92:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000ab96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab9a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab9d:	e8 1e 3d 01 00       	call   c001e8c0 <lrint>
c000aba2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aba7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000abab:	99                   	cdq    
c000abac:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000abaf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000abb2:	e9 86 fe ff ff       	jmp    c000aa3d <sinc_mono_vari_process+0xfc>
c000abb7:	83 c4 3c             	add    esp,0x3c
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	5f                   	pop    edi
c000abbd:	5d                   	pop    ebp
c000abbe:	c3                   	ret    

c000abbf <sinc_get_name>:
c000abbf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc3:	31 c0                	xor    eax,eax
c000abc5:	83 fa 02             	cmp    edx,0x2
c000abc8:	77 07                	ja     c000abd1 <sinc_get_name+0x12>
c000abca:	8b 04 95 20 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfee0]
c000abd1:	c3                   	ret    

c000abd2 <sinc_get_description>:
c000abd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abd6:	31 c0                	xor    eax,eax
c000abd8:	83 fa 02             	cmp    edx,0x2
c000abdb:	77 07                	ja     c000abe4 <sinc_get_description+0x12>
c000abdd:	8b 04 95 14 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfeec]
c000abe4:	c3                   	ret    

c000abe5 <sinc_set_converter>:
c000abe5:	55                   	push   ebp
c000abe6:	57                   	push   edi
c000abe7:	56                   	push   esi
c000abe8:	53                   	push   ebx
c000abe9:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000abef:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000abf6:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000abfd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ac00:	85 c0                	test   eax,eax
c000ac02:	74 13                	je     c000ac17 <sinc_set_converter+0x32>
c000ac04:	83 ec 0c             	sub    esp,0xc
c000ac07:	50                   	push   eax
c000ac08:	e8 5e 28 00 00       	call   c000d46b <free>
c000ac0d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	56                   	push   esi
c000ac18:	68 44 08 00 00       	push   0x844
c000ac1d:	6a 00                	push   0x0
c000ac1f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ac23:	56                   	push   esi
c000ac24:	e8 af 5a ff ff       	call   c00006d8 <memset>
c000ac29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac2c:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ac34:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac38:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ac46:	0f 8f 58 01 00 00    	jg     c000ada4 <sinc_set_converter+0x1bf>
c000ac4c:	83 fa 01             	cmp    edx,0x1
c000ac4f:	75 10                	jne    c000ac61 <sinc_set_converter+0x7c>
c000ac51:	c7 43 24 41 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a941
c000ac58:	c7 43 20 41 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a941
c000ac5f:	eb 4d                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac61:	83 fa 02             	cmp    edx,0x2
c000ac64:	75 10                	jne    c000ac76 <sinc_set_converter+0x91>
c000ac66:	c7 43 24 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c2
c000ac6d:	c7 43 20 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c2
c000ac74:	eb 38                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac76:	83 fa 04             	cmp    edx,0x4
c000ac79:	75 10                	jne    c000ac8b <sinc_set_converter+0xa6>
c000ac7b:	c7 43 24 43 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a443
c000ac82:	c7 43 20 43 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a443
c000ac89:	eb 23                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac8b:	83 fa 06             	cmp    edx,0x6
c000ac8e:	75 10                	jne    c000aca0 <sinc_set_converter+0xbb>
c000ac90:	c7 43 24 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c4
c000ac97:	c7 43 20 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c4
c000ac9e:	eb 0e                	jmp    c000acae <sinc_set_converter+0xc9>
c000aca0:	c7 43 24 40 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f40
c000aca7:	c7 43 20 40 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f40
c000acae:	c7 43 28 f9 9c 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009cf9
c000acb5:	83 fd 01             	cmp    ebp,0x1
c000acb8:	74 28                	je     c000ace2 <sinc_set_converter+0xfd>
c000acba:	b8 0a 00 00 00       	mov    eax,0xa
c000acbf:	83 fd 02             	cmp    ebp,0x2
c000acc2:	0f 85 dc 00 00 00    	jne    c000ada4 <sinc_set_converter+0x1bf>
c000acc8:	c7 44 24 3c e4 5f 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0035fe4
c000acd0:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000acd8:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000ace0:	eb 18                	jmp    c000acfa <sinc_set_converter+0x115>
c000ace2:	c7 44 24 3c 44 01 02 c0 	mov    DWORD PTR [esp+0x3c],0xc0020144
c000acea:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000acf2:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000acfa:	83 ec 10             	sub    esp,0x10
c000acfd:	d9 05 8c 87 03 c0    	fld    DWORD PTR ds:0xc003878c
c000ad03:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000ad07:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000ad0b:	d8 0d 90 87 03 c0    	fmul   DWORD PTR ds:0xc0038790
c000ad11:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ad14:	e8 a7 3b 01 00       	call   c001e8c0 <lrint>
c000ad19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ad1d:	83 c4 10             	add    esp,0x10
c000ad20:	3d 00 10 00 00       	cmp    eax,0x1000
c000ad25:	7d 05                	jge    c000ad2c <sinc_set_converter+0x147>
c000ad27:	b8 00 10 00 00       	mov    eax,0x1000
c000ad2c:	0f af c2             	imul   eax,edx
c000ad2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ad33:	51                   	push   ecx
c000ad34:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ad3b:	51                   	push   ecx
c000ad3c:	c1 e0 02             	shl    eax,0x2
c000ad3f:	50                   	push   eax
c000ad40:	6a 01                	push   0x1
c000ad42:	e8 44 27 00 00       	call   c000d48b <calloc>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	89 c5                	mov    ebp,eax
c000ad4c:	b8 01 00 00 00       	mov    eax,0x1
c000ad51:	85 ed                	test   ebp,ebp
c000ad53:	74 4f                	je     c000ada4 <sinc_set_converter+0x1bf>
c000ad55:	b9 11 02 00 00       	mov    ecx,0x211
c000ad5a:	fc                   	cld    
c000ad5b:	89 ef                	mov    edi,ebp
c000ad5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad5f:	50                   	push   eax
c000ad60:	68 44 08 00 00       	push   0x844
c000ad65:	68 ee 00 00 00       	push   0xee
c000ad6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ad6e:	50                   	push   eax
c000ad6f:	e8 64 59 ff ff       	call   c00006d8 <memset>
c000ad74:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ad77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad7a:	e8 7a ef ff ff       	call   c0009cf9 <sinc_reset>
c000ad7f:	bb 01 00 00 00       	mov    ebx,0x1
c000ad84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	31 c9                	xor    ecx,ecx
c000ad8c:	89 da                	mov    edx,ebx
c000ad8e:	d3 e2                	shl    edx,cl
c000ad90:	39 c2                	cmp    edx,eax
c000ad92:	7d 05                	jge    c000ad99 <sinc_set_converter+0x1b4>
c000ad94:	09 d0                	or     eax,edx
c000ad96:	41                   	inc    ecx
c000ad97:	eb f3                	jmp    c000ad8c <sinc_set_converter+0x1a7>
c000ad99:	31 c0                	xor    eax,eax
c000ad9b:	83 f9 15             	cmp    ecx,0x15
c000ad9e:	0f 9d c0             	setge  al
c000ada1:	8d 04 c0             	lea    eax,[eax+eax*8]
c000ada4:	81 c4 5c 08 00 00    	add    esp,0x85c
c000adaa:	5b                   	pop    ebx
c000adab:	5e                   	pop    esi
c000adac:	5f                   	pop    edi
c000adad:	5d                   	pop    ebp
c000adae:	c3                   	ret    

c000adaf <is_bad_src_ratio>:
c000adaf:	83 ec 0c             	sub    esp,0xc
c000adb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc1:	dd 04 24             	fld    QWORD PTR [esp]
c000adc4:	dd 05 40 00 02 c0    	fld    QWORD PTR ds:0xc0020040
c000adca:	de d9                	fcompp 
c000adcc:	df e0                	fnstsw ax
c000adce:	f6 c4 45             	test   ah,0x45
c000add1:	74 10                	je     c000ade3 <is_bad_src_ratio+0x34>
c000add3:	dd 04 24             	fld    QWORD PTR [esp]
c000add6:	dc 1d 48 00 02 c0    	fcomp  QWORD PTR ds:0xc0020048
c000addc:	df e0                	fnstsw ax
c000adde:	f6 c4 45             	test   ah,0x45
c000ade1:	75 07                	jne    c000adea <is_bad_src_ratio+0x3b>
c000ade3:	b8 01 00 00 00       	mov    eax,0x1
c000ade8:	eb 05                	jmp    c000adef <is_bad_src_ratio+0x40>
c000adea:	b8 00 00 00 00       	mov    eax,0x0
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    

c000adf3 <fmod_one>:
c000adf3:	83 ec 2c             	sub    esp,0x2c
c000adf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ae02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae06:	83 ec 08             	sub    esp,0x8
c000ae09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae11:	e8 aa 3a 01 00       	call   c001e8c0 <lrint>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae1d:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ae21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ae25:	de e1                	fsubrp st(1),st
c000ae27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ae2b:	d9 ee                	fldz   
c000ae2d:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ae31:	df e0                	fnstsw ax
c000ae33:	f6 c4 45             	test   ah,0x45
c000ae36:	75 0a                	jne    c000ae42 <fmod_one+0x4f>
c000ae38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae3c:	d9 e8                	fld1   
c000ae3e:	de c1                	faddp  st(1),st
c000ae40:	eb 04                	jmp    c000ae46 <fmod_one+0x53>
c000ae42:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae46:	83 c4 2c             	add    esp,0x2c
c000ae49:	c3                   	ret    

c000ae4a <zoh_vari_process>:
c000ae4a:	55                   	push   ebp
c000ae4b:	57                   	push   edi
c000ae4c:	56                   	push   esi
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 2c             	sub    esp,0x2c
c000ae51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ae55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ae59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae61:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ae65:	0f 8e 34 02 00 00    	jle    c000b09f <zoh_vari_process+0x255>
c000ae6b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ae6e:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ae76:	85 db                	test   ebx,ebx
c000ae78:	0f 84 21 02 00 00    	je     c000b09f <zoh_vari_process+0x255>
c000ae7e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae81:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ae85:	74 19                	je     c000aea0 <zoh_vari_process+0x56>
c000ae87:	31 d2                	xor    edx,edx
c000ae89:	39 c2                	cmp    edx,eax
c000ae8b:	7d 0c                	jge    c000ae99 <zoh_vari_process+0x4f>
c000ae8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae8f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ae92:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ae96:	42                   	inc    edx
c000ae97:	eb f0                	jmp    c000ae89 <zoh_vari_process+0x3f>
c000ae99:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aea0:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aea3:	0f af d0             	imul   edx,eax
c000aea6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aea9:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aead:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aeb4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aeb7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aebe:	dd 07                	fld    QWORD PTR [edi]
c000aec0:	dd 14 24             	fst    QWORD PTR [esp]
c000aec3:	50                   	push   eax
c000aec4:	50                   	push   eax
c000aec5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aec8:	e8 e2 fe ff ff       	call   c000adaf <is_bad_src_ratio>
c000aecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aed1:	5a                   	pop    edx
c000aed2:	59                   	pop    ecx
c000aed3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aed8:	0f 85 b9 01 00 00    	jne    c000b097 <zoh_vari_process+0x24d>
c000aede:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aee1:	d9 e8                	fld1   
c000aee3:	d8 d1                	fcom   st(1)
c000aee5:	df e0                	fnstsw ax
c000aee7:	9e                   	sahf   
c000aee8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aeec:	0f 86 85 00 00 00    	jbe    c000af77 <zoh_vari_process+0x12d>
c000aef2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aef5:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aef8:	7d 7d                	jge    c000af77 <zoh_vari_process+0x12d>
c000aefa:	d9 c0                	fld    st(0)
c000aefc:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aeff:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000af02:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000af05:	df e0                	fnstsw ax
c000af07:	9e                   	sahf   
c000af08:	73 6d                	jae    c000af77 <zoh_vari_process+0x12d>
c000af0a:	85 d2                	test   edx,edx
c000af0c:	7e 38                	jle    c000af46 <zoh_vari_process+0xfc>
c000af0e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000af12:	83 ec 10             	sub    esp,0x10
c000af15:	dd 07                	fld    QWORD PTR [edi]
c000af17:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000af1a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af1d:	e8 7e 39 01 00       	call   c001e8a0 <fabs>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	dc 1d b8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200b8
c000af2b:	df e0                	fnstsw ax
c000af2d:	9e                   	sahf   
c000af2e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af32:	76 12                	jbe    c000af46 <zoh_vari_process+0xfc>
c000af34:	dd 07                	fld    QWORD PTR [edi]
c000af36:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af39:	d8 e1                	fsub   st,st(1)
c000af3b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af3e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af41:	de c1                	faddp  st(1),st
c000af43:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af46:	31 c0                	xor    eax,eax
c000af48:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000af4b:	7e 13                	jle    c000af60 <zoh_vari_process+0x116>
c000af4d:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000af51:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af54:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000af57:	40                   	inc    eax
c000af58:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000af5b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af5e:	eb e8                	jmp    c000af48 <zoh_vari_process+0xfe>
c000af60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af64:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af67:	de c1                	faddp  st(1),st
c000af69:	e9 73 ff ff ff       	jmp    c000aee1 <zoh_vari_process+0x97>
c000af6e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af72:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af75:	de c1                	faddp  st(1),st
c000af77:	83 ec 10             	sub    esp,0x10
c000af7a:	dd 14 24             	fst    QWORD PTR [esp]
c000af7d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af81:	e8 6d fe ff ff       	call   c000adf3 <fmod_one>
c000af86:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af89:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000af8d:	d8 e1                	fsub   st,st(1)
c000af8f:	d9 c9                	fxch   st(1)
c000af91:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af98:	e8 23 39 01 00       	call   c001e8c0 <lrint>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	0f af e8             	imul   ebp,eax
c000afa3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000afa6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000afa9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000afad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000afb0:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000afb3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000afb6:	0f 8d 82 00 00 00    	jge    c000b03e <zoh_vari_process+0x1f4>
c000afbc:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000afc0:	d9 c0                	fld    st(0)
c000afc2:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000afc5:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000afc9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afcd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000afd1:	de d9                	fcompp 
c000afd3:	df e0                	fnstsw ax
c000afd5:	9e                   	sahf   
c000afd6:	72 66                	jb     c000b03e <zoh_vari_process+0x1f4>
c000afd8:	85 d2                	test   edx,edx
c000afda:	7e 38                	jle    c000b014 <zoh_vari_process+0x1ca>
c000afdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000afe0:	83 ec 10             	sub    esp,0x10
c000afe3:	dd 07                	fld    QWORD PTR [edi]
c000afe5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000afe8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afeb:	e8 b0 38 01 00       	call   c001e8a0 <fabs>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	dc 1d b8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200b8
c000aff9:	df e0                	fnstsw ax
c000affb:	9e                   	sahf   
c000affc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000b000:	76 12                	jbe    c000b014 <zoh_vari_process+0x1ca>
c000b002:	dd 07                	fld    QWORD PTR [edi]
c000b004:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000b007:	d8 e1                	fsub   st,st(1)
c000b009:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000b00c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000b00f:	de c1                	faddp  st(1),st
c000b011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000b014:	31 d2                	xor    edx,edx
c000b016:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b019:	39 d0                	cmp    eax,edx
c000b01b:	0f 8e 4d ff ff ff    	jle    c000af6e <zoh_vari_process+0x124>
c000b021:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000b024:	29 c1                	sub    ecx,eax
c000b026:	89 c8                	mov    eax,ecx
c000b028:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b02a:	01 d0                	add    eax,edx
c000b02c:	42                   	inc    edx
c000b02d:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000b030:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000b033:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b036:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000b039:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000b03c:	eb d8                	jmp    c000b016 <zoh_vari_process+0x1cc>
c000b03e:	39 e9                	cmp    ecx,ebp
c000b040:	7d 13                	jge    c000b055 <zoh_vari_process+0x20b>
c000b042:	89 e8                	mov    eax,ebp
c000b044:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000b047:	29 c8                	sub    eax,ecx
c000b049:	99                   	cdq    
c000b04a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b04d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b051:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000b055:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000b058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b05b:	85 c0                	test   eax,eax
c000b05d:	7f 1b                	jg     c000b07a <zoh_vari_process+0x230>
c000b05f:	dd 04 24             	fld    QWORD PTR [esp]
c000b062:	dd 1f                	fstp   QWORD PTR [edi]
c000b064:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b067:	99                   	cdq    
c000b068:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b06b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b06e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b071:	99                   	cdq    
c000b072:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b075:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b078:	eb 25                	jmp    c000b09f <zoh_vari_process+0x255>
c000b07a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b07d:	31 d2                	xor    edx,edx
c000b07f:	29 e8                	sub    eax,ebp
c000b081:	c1 e0 02             	shl    eax,0x2
c000b084:	39 d5                	cmp    ebp,edx
c000b086:	7e d7                	jle    c000b05f <zoh_vari_process+0x215>
c000b088:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b08a:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000b08d:	83 c0 04             	add    eax,0x4
c000b090:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000b094:	42                   	inc    edx
c000b095:	eb ed                	jmp    c000b084 <zoh_vari_process+0x23a>
c000b097:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	83 c4 2c             	add    esp,0x2c
c000b0a6:	5b                   	pop    ebx
c000b0a7:	5e                   	pop    esi
c000b0a8:	5f                   	pop    edi
c000b0a9:	5d                   	pop    ebp
c000b0aa:	c3                   	ret    

c000b0ab <zoh_reset>:
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000b0b5:	85 c0                	test   eax,eax
c000b0b7:	74 20                	je     c000b0d9 <zoh_reset+0x2e>
c000b0b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000b0bc:	83 c0 1c             	add    eax,0x1c
c000b0bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000b0c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000b0c9:	c1 e2 02             	shl    edx,0x2
c000b0cc:	51                   	push   ecx
c000b0cd:	52                   	push   edx
c000b0ce:	6a 00                	push   0x0
c000b0d0:	50                   	push   eax
c000b0d1:	e8 02 56 ff ff       	call   c00006d8 <memset>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	83 c4 0c             	add    esp,0xc
c000b0dc:	c3                   	ret    

c000b0dd <zoh_get_name>:
c000b0dd:	31 c0                	xor    eax,eax
c000b0df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0e4:	75 05                	jne    c000b0eb <zoh_get_name+0xe>
c000b0e6:	b8 94 87 03 c0       	mov    eax,0xc0038794
c000b0eb:	c3                   	ret    

c000b0ec <zoh_get_description>:
c000b0ec:	31 c0                	xor    eax,eax
c000b0ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0f3:	75 05                	jne    c000b0fa <zoh_get_description+0xe>
c000b0f5:	b8 a5 87 03 c0       	mov    eax,0xc00387a5
c000b0fa:	c3                   	ret    

c000b0fb <zoh_set_converter>:
c000b0fb:	53                   	push   ebx
c000b0fc:	b8 0a 00 00 00       	mov    eax,0xa
c000b101:	83 ec 08             	sub    esp,0x8
c000b104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b108:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b10d:	75 6e                	jne    c000b17d <zoh_set_converter+0x82>
c000b10f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b112:	85 c0                	test   eax,eax
c000b114:	74 13                	je     c000b129 <zoh_set_converter+0x2e>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	50                   	push   eax
c000b11a:	e8 4c 23 00 00       	call   c000d46b <free>
c000b11f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	50                   	push   eax
c000b12a:	50                   	push   eax
c000b12b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b12e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b135:	50                   	push   eax
c000b136:	6a 01                	push   0x1
c000b138:	e8 4e 23 00 00       	call   c000d48b <calloc>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	89 c2                	mov    edx,eax
c000b142:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b145:	85 d2                	test   edx,edx
c000b147:	b8 01 00 00 00       	mov    eax,0x1
c000b14c:	74 2f                	je     c000b17d <zoh_set_converter+0x82>
c000b14e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b15a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b15d:	c7 43 24 4a ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ae4a
c000b164:	c7 43 20 4a ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ae4a
c000b16b:	c7 43 28 ab b0 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000b0ab
c000b172:	53                   	push   ebx
c000b173:	e8 33 ff ff ff       	call   c000b0ab <zoh_reset>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	31 c0                	xor    eax,eax
c000b17d:	83 c4 08             	add    esp,0x8
c000b180:	5b                   	pop    ebx
c000b181:	c3                   	ret    

c000b182 <Computer::close(int, int, void*)>:
c000b182:	57                   	push   edi
c000b183:	56                   	push   esi
c000b184:	53                   	push   ebx
c000b185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b189:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b18d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b191:	83 ec 0c             	sub    esp,0xc
c000b194:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b19a:	e8 f1 86 00 00       	call   c0013890 <Device::closeAll()>
c000b19f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1aa:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b1ae:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b1b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1be:	5b                   	pop    ebx
c000b1bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b1c2:	5e                   	pop    esi
c000b1c3:	5f                   	pop    edi
c000b1c4:	ff e0                	jmp    eax

c000b1c6 <Computer::Computer()>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	83 ec 08             	sub    esp,0x8
c000b1d0:	68 dc 87 03 c0       	push   0xc00387dc
c000b1d5:	50                   	push   eax
c000b1d6:	e8 2f 87 00 00       	call   c001390a <Device::Device(char const*)>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	ba 58 88 03 c0       	mov    edx,0xc0038858
c000b1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e7:	89 10                	mov    DWORD PTR [eax],edx
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b209:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b20f:	83 ca 04             	or     edx,0x4
c000b212:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b222:	0f b6 d0             	movzx  edx,al
c000b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b229:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b234:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b23a:	0f b6 d0             	movzx  edx,al
c000b23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b241:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b24a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b250:	8d 50 01             	lea    edx,[eax+0x1]
c000b253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b257:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b25d:	0f b6 d0             	movzx  edx,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b268:	83 e1 3f             	and    ecx,0x3f
c000b26b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b279:	0f b6 d0             	movzx  edx,al
c000b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b280:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b291:	0f b6 d0             	movzx  edx,al
c000b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b298:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000b2aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b2b4:	0f b6 d0             	movzx  edx,al
c000b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b2bf:	83 e1 3f             	and    ecx,0x3f
c000b2c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2d0:	0f b6 d0             	movzx  edx,al
c000b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2e8:	0f b6 d0             	movzx  edx,al
c000b2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2fe:	8d 50 01             	lea    edx,[eax+0x1]
c000b301:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b305:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b30b:	0f b6 d0             	movzx  edx,al
c000b30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b312:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b316:	83 e1 3f             	and    ecx,0x3f
c000b319:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b31d:	90                   	nop
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <Computer::setBootMessage(char const*)>:
c000b322:	c3                   	ret    
c000b323:	90                   	nop

c000b324 <Computer::start()>:
c000b324:	56                   	push   esi
c000b325:	53                   	push   ebx
c000b326:	50                   	push   eax
c000b327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b32b:	e8 d2 2f 00 00       	call   c000e302 <lockScheduler()>
c000b330:	e8 01 33 00 00       	call   c000e636 <schedule()>
c000b335:	e8 ca 2f 00 00       	call   c000e304 <unlockScheduler()>
c000b33a:	fb                   	sti    
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	68 3b 07 00 00       	push   0x73b
c000b343:	e8 c8 70 00 00       	call   c0012410 <operator new(unsigned long)>
c000b348:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34f:	89 c6                	mov    esi,eax
c000b351:	ff 35 5c bb 03 c0    	push   DWORD PTR ds:0xc003bb5c
c000b357:	68 e5 87 03 c0       	push   0xc00387e5
c000b35c:	6a 01                	push   0x1
c000b35e:	50                   	push   eax
c000b35f:	e8 fe 2d 00 00       	call   c000e162 <Process::Process(bool, char const*, Process*, char**)>
c000b364:	83 c4 20             	add    esp,0x20
c000b367:	68 ff 00 00 00       	push   0xff
c000b36c:	6a 00                	push   0x0
c000b36e:	68 cf c8 00 c0       	push   0xc000c8cf
c000b373:	56                   	push   esi
c000b374:	e8 b3 30 00 00       	call   c000e42c <Process::createThread(void (*)(void*), void*, int)>
c000b379:	6a 7a                	push   0x7a
c000b37b:	6a 00                	push   0x0
c000b37d:	68 72 ee 00 c0       	push   0xc000ee72
c000b382:	ff 35 5c bb 03 c0    	push   DWORD PTR ds:0xc003bb5c
c000b388:	e8 9f 30 00 00       	call   c000e42c <Process::createThread(void (*)(void*), void*, int)>
c000b38d:	83 c4 20             	add    esp,0x20
c000b390:	a3 10 bb 03 c0       	mov    ds:0xc003bb10,eax
c000b395:	c6 05 0d b9 03 c0 01 	mov    BYTE PTR ds:0xc003b90d,0x1
c000b39c:	e8 c9 72 00 00       	call   c001266a <initVFS()>
c000b3a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b3a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3a9:	6a 00                	push   0x0
c000b3ab:	6a 00                	push   0x0
c000b3ad:	6a 00                	push   0x0
c000b3af:	50                   	push   eax
c000b3b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b3b3:	e8 57 48 00 00       	call   c000fc0f <setupSystemCalls()>
c000b3b8:	e8 ab 7d 00 00       	call   c0013168 <loadClockSettings()>
c000b3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c0:	e8 9f 84 00 00       	call   c0013864 <Device::loadDriversForAll()>
c000b3c5:	c7 04 24 f2 87 03 c0 	mov    DWORD PTR [esp],0xc00387f2
c000b3cc:	8b 1d 08 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b908
c000b3d2:	e8 69 12 00 00       	call   c000c640 <loadDLL(char const*)>
c000b3d7:	5a                   	pop    edx
c000b3d8:	59                   	pop    ecx
c000b3d9:	53                   	push   ebx
c000b3da:	50                   	push   eax
c000b3db:	e8 29 13 00 00       	call   c000c709 <executeDLL(unsigned long, void*)>
c000b3e0:	c7 04 24 54 9f 03 c0 	mov    DWORD PTR [esp],0xc0039f54
c000b3e7:	e8 74 1a 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	6a 02                	push   0x2
c000b3f4:	e8 08 35 00 00       	call   c000e901 <blockTask(TaskState)>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	eb f1                	jmp    c000b3ef <Computer::start()+0xcb>

c000b3fe <firstTask()>:
c000b3fe:	83 ec 18             	sub    esp,0x18
c000b401:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c000b407:	e8 18 ff ff ff       	call   c000b324 <Computer::start()>

c000b40c <Computer::detectFeatures()>:
c000b40c:	55                   	push   ebp
c000b40d:	57                   	push   edi
c000b40e:	56                   	push   esi
c000b40f:	53                   	push   ebx
c000b410:	83 ec 1c             	sub    esp,0x1c
c000b413:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b417:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b421:	e8 c6 4e ff ff       	call   c00002ec <detectCPUID>
c000b426:	85 c0                	test   eax,eax
c000b428:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b42e:	0f 95 c2             	setne  dl
c000b431:	83 e0 fd             	and    eax,0xfffffffd
c000b434:	d1 e2                	shl    edx,1
c000b436:	09 d0                	or     eax,edx
c000b438:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b43e:	a8 02                	test   al,0x2
c000b440:	75 46                	jne    c000b488 <Computer::detectFeatures()+0x7c>
c000b442:	f6 05 b5 ba 03 c0 04 	test   BYTE PTR ds:0xc003bab5,0x4
c000b449:	74 07                	je     c000b452 <Computer::detectFeatures()+0x46>
c000b44b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b452:	e8 ef 2e 01 00       	call   c001e346 <x87Detect>
c000b457:	83 e0 01             	and    eax,0x1
c000b45a:	c1 e0 04             	shl    eax,0x4
c000b45d:	88 c2                	mov    dl,al
c000b45f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b465:	83 e0 ef             	and    eax,0xffffffef
c000b468:	09 d0                	or     eax,edx
c000b46a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b470:	a8 10                	test   al,0x10
c000b472:	0f 85 10 01 00 00    	jne    c000b588 <Computer::detectFeatures()+0x17c>
c000b478:	84 c0                	test   al,al
c000b47a:	0f 88 2b 01 00 00    	js     c000b5ab <Computer::detectFeatures()+0x19f>
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	5b                   	pop    ebx
c000b484:	5e                   	pop    esi
c000b485:	5f                   	pop    edi
c000b486:	5d                   	pop    ebp
c000b487:	c3                   	ret    
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	6a 20                	push   0x20
c000b48d:	e8 cd bb 00 00       	call   c001705f <cpuidCheckEDX(unsigned int)>
c000b492:	83 e0 01             	and    eax,0x1
c000b495:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b49c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b4a2:	83 e0 f7             	and    eax,0xfffffff7
c000b4a5:	09 d0                	or     eax,edx
c000b4a7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4ad:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b4b4:	e8 a6 bb 00 00       	call   c001705f <cpuidCheckEDX(unsigned int)>
c000b4b9:	83 e0 01             	and    eax,0x1
c000b4bc:	88 c2                	mov    dl,al
c000b4be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4c4:	83 e0 fe             	and    eax,0xfffffffe
c000b4c7:	09 d0                	or     eax,edx
c000b4c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4cf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b4d6:	e8 84 bb 00 00       	call   c001705f <cpuidCheckEDX(unsigned int)>
c000b4db:	c1 e0 07             	shl    eax,0x7
c000b4de:	88 c2                	mov    dl,al
c000b4e0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4e6:	83 e0 7f             	and    eax,0x7f
c000b4e9:	09 d0                	or     eax,edx
c000b4eb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4f1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b4f8:	e8 62 bb 00 00       	call   c001705f <cpuidCheckEDX(unsigned int)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	83 e0 01             	and    eax,0x1
c000b503:	c1 e0 05             	shl    eax,0x5
c000b506:	88 c2                	mov    dl,al
c000b508:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b50e:	83 e0 df             	and    eax,0xffffffdf
c000b511:	09 d0                	or     eax,edx
c000b513:	f7 05 b4 ba 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bab4,0x401
c000b51d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b523:	0f 84 a8 00 00 00    	je     c000b5d1 <Computer::detectFeatures()+0x1c5>
c000b529:	83 ec 0c             	sub    esp,0xc
c000b52c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b533:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b537:	50                   	push   eax
c000b538:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b53c:	55                   	push   ebp
c000b53d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b541:	57                   	push   edi
c000b542:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b546:	56                   	push   esi
c000b547:	68 00 00 00 80       	push   0x80000000
c000b54c:	e8 8b ba 00 00       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b551:	83 c4 20             	add    esp,0x20
c000b554:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b55b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b55f:	0f 86 dd fe ff ff    	jbe    c000b442 <Computer::detectFeatures()+0x36>
c000b565:	83 ec 0c             	sub    esp,0xc
c000b568:	50                   	push   eax
c000b569:	55                   	push   ebp
c000b56a:	57                   	push   edi
c000b56b:	56                   	push   esi
c000b56c:	68 01 00 00 80       	push   0x80000001
c000b571:	e8 66 ba 00 00       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b576:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b580:	83 c4 20             	add    esp,0x20
c000b583:	e9 ba fe ff ff       	jmp    c000b442 <Computer::detectFeatures()+0x36>
c000b588:	e8 73 2d 01 00       	call   c001e300 <sseDetect>
c000b58d:	88 c2                	mov    dl,al
c000b58f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b595:	c1 e2 07             	shl    edx,0x7
c000b598:	83 e0 7f             	and    eax,0x7f
c000b59b:	09 d0                	or     eax,edx
c000b59d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b5a3:	84 c0                	test   al,al
c000b5a5:	0f 89 d5 fe ff ff    	jns    c000b480 <Computer::detectFeatures()+0x74>
c000b5ab:	e8 40 2d 01 00       	call   c001e2f0 <avxDetect>
c000b5b0:	83 e0 01             	and    eax,0x1
c000b5b3:	c1 e0 05             	shl    eax,0x5
c000b5b6:	88 c2                	mov    dl,al
c000b5b8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b5be:	83 e0 df             	and    eax,0xffffffdf
c000b5c1:	09 d0                	or     eax,edx
c000b5c3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b5c9:	83 c4 1c             	add    esp,0x1c
c000b5cc:	5b                   	pop    ebx
c000b5cd:	5e                   	pop    esi
c000b5ce:	5f                   	pop    edi
c000b5cf:	5d                   	pop    ebp
c000b5d0:	c3                   	ret    
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	68 00 02 00 00       	push   0x200
c000b5d9:	e8 81 ba 00 00       	call   c001705f <cpuidCheckEDX(unsigned int)>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	e9 43 ff ff ff       	jmp    c000b529 <Computer::detectFeatures()+0x11d>

c000b5e6 <Computer::displayFeatures()>:
c000b5e6:	c3                   	ret    
c000b5e7:	90                   	nop

c000b5e8 <Computer::rdmsr(unsigned int)>:
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5f6:	74 0a                	je     c000b602 <Computer::rdmsr(unsigned int)+0x1a>
c000b5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5fc:	0f 32                	rdmsr  
c000b5fe:	83 c4 0c             	add    esp,0xc
c000b601:	c3                   	ret    
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	68 0e 88 03 c0       	push   0xc003880e
c000b60a:	e8 6f 19 00 00       	call   c000cf7e <panic(char const*)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	eb e4                	jmp    c000b5f8 <Computer::rdmsr(unsigned int)+0x10>

c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b614:	57                   	push   edi
c000b615:	56                   	push   esi
c000b616:	52                   	push   edx
c000b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b62a:	74 0e                	je     c000b63a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b62c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b630:	89 f0                	mov    eax,esi
c000b632:	89 fa                	mov    edx,edi
c000b634:	0f 30                	wrmsr  
c000b636:	58                   	pop    eax
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	c3                   	ret    
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	68 14 88 03 c0       	push   0xc0038814
c000b642:	e8 37 19 00 00       	call   c000cf7e <panic(char const*)>
c000b647:	83 c4 10             	add    esp,0x10
c000b64a:	eb e0                	jmp    c000b62c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b64c <Computer::nmiEnabled()>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Computer::readCMOS(unsigned char)>:
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b663:	19 c0                	sbb    eax,eax
c000b665:	83 e0 80             	and    eax,0xffffff80
c000b668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b66c:	e6 70                	out    0x70,al
c000b66e:	e4 71                	in     al,0x71
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <Computer::enableNMI(bool)>:
c000b672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b680:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b688:	eb ce                	jmp    c000b658 <Computer::readCMOS(unsigned char)>

c000b68a <Computer::open(int, int, void*)>:
c000b68a:	56                   	push   esi
c000b68b:	53                   	push   ebx
c000b68c:	83 ec 10             	sub    esp,0x10
c000b68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b693:	f6 05 b4 ba 03 c0 04 	test   BYTE PTR ds:0xc003bab4,0x4
c000b69a:	68 68 22 00 00       	push   0x2268
c000b69f:	0f 94 05 40 ad 03 c0 	sete   BYTE PTR ds:0xc003ad40
c000b6a6:	e8 65 6d 00 00       	call   c0012410 <operator new(unsigned long)>
c000b6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ae:	89 c6                	mov    esi,eax
c000b6b0:	e8 99 b0 00 00       	call   c001674e <ACPI::ACPI()>
c000b6b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6bb:	58                   	pop    eax
c000b6bc:	5a                   	pop    edx
c000b6bd:	56                   	push   esi
c000b6be:	53                   	push   ebx
c000b6bf:	e8 56 80 00 00       	call   c001371a <Device::addChild(Device*)>
c000b6c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6c7:	e8 40 fd ff ff       	call   c000b40c <Computer::detectFeatures()>
c000b6cc:	59                   	pop    ecx
c000b6cd:	5e                   	pop    esi
c000b6ce:	6a 01                	push   0x1
c000b6d0:	53                   	push   ebx
c000b6d1:	e8 9c ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b6d6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6dd:	e8 2e 6d 00 00       	call   c0012410 <operator new(unsigned long)>
c000b6e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6e5:	89 c6                	mov    esi,eax
c000b6e7:	e8 3e ba 00 00       	call   c001712a <CPU::CPU()>
c000b6ec:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6f2:	58                   	pop    eax
c000b6f3:	5a                   	pop    edx
c000b6f4:	56                   	push   esi
c000b6f5:	53                   	push   ebx
c000b6f6:	e8 1f 80 00 00       	call   c001371a <Device::addChild(Device*)>
c000b6fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b701:	8b 10                	mov    edx,DWORD PTR [eax]
c000b703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b707:	6a 00                	push   0x0
c000b709:	6a 00                	push   0x0
c000b70b:	50                   	push   eax
c000b70c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b70f:	83 c4 20             	add    esp,0x20
c000b712:	e8 6b 85 00 00       	call   c0013c82 <setupFPU()>
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b720:	50                   	push   eax
c000b721:	53                   	push   ebx
c000b722:	e8 f3 7f 00 00       	call   c001371a <Device::addChild(Device*)>
c000b727:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b72f:	6a 00                	push   0x0
c000b731:	6a 00                	push   0x0
c000b733:	6a 00                	push   0x0
c000b735:	50                   	push   eax
c000b736:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b739:	83 c4 14             	add    esp,0x14
c000b73c:	68 fe b3 00 c0       	push   0xc000b3fe
c000b741:	e8 e6 2d 00 00       	call   c000e52c <setupMultitasking(void (*)())>
c000b746:	83 c4 14             	add    esp,0x14
c000b749:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b74e:	5b                   	pop    ebx
c000b74f:	5e                   	pop    esi
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Computer::disableNMI()>:
c000b752:	6a 00                	push   0x0
c000b754:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b758:	e8 15 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b75d:	58                   	pop    eax
c000b75e:	5a                   	pop    edx
c000b75f:	c3                   	ret    

c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b764:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b76b:	19 c0                	sbb    eax,eax
c000b76d:	83 e0 80             	and    eax,0xffffff80
c000b770:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b774:	e6 70                	out    0x70,al
c000b776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b77a:	e6 71                	out    0x71,al
c000b77c:	c3                   	ret    
c000b77d:	90                   	nop

c000b77e <Computer::handleNMI()>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	83 ec 10             	sub    esp,0x10
c000b783:	e4 92                	in     al,0x92
c000b785:	89 c6                	mov    esi,eax
c000b787:	e4 61                	in     al,0x61
c000b789:	68 1a 88 03 c0       	push   0xc003881a
c000b78e:	88 c3                	mov    bl,al
c000b790:	e8 cb 16 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 e6 10             	and    esi,0x10
c000b79b:	75 0d                	jne    c000b7aa <Computer::handleNMI()+0x2c>
c000b79d:	f6 c3 40             	test   bl,0x40
c000b7a0:	75 1d                	jne    c000b7bf <Computer::handleNMI()+0x41>
c000b7a2:	84 db                	test   bl,bl
c000b7a4:	78 2d                	js     c000b7d3 <Computer::handleNMI()+0x55>
c000b7a6:	58                   	pop    eax
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	c3                   	ret    
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 2b 88 03 c0       	push   0xc003882b
c000b7b2:	e8 c7 17 00 00       	call   c000cf7e <panic(char const*)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	f6 c3 40             	test   bl,0x40
c000b7bd:	74 e3                	je     c000b7a2 <Computer::handleNMI()+0x24>
c000b7bf:	83 ec 0c             	sub    esp,0xc
c000b7c2:	68 38 88 03 c0       	push   0xc0038838
c000b7c7:	e8 b2 17 00 00       	call   c000cf7e <panic(char const*)>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	84 db                	test   bl,bl
c000b7d1:	79 d3                	jns    c000b7a6 <Computer::handleNMI()+0x28>
c000b7d3:	c7 44 24 10 42 88 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038842
c000b7db:	5a                   	pop    edx
c000b7dc:	5b                   	pop    ebx
c000b7dd:	5e                   	pop    esi
c000b7de:	e9 9b 17 00 00       	jmp    c000cf7e <panic(char const*)>
c000b7e3:	90                   	nop

c000b7e4 <Computer::setDiskActivityLight(int, bool)>:
c000b7e4:	56                   	push   esi
c000b7e5:	53                   	push   ebx
c000b7e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7ea:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7ef:	77 1b                	ja     c000b80c <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7f1:	e4 92                	in     al,0x92
c000b7f3:	bb 40 00 00 00       	mov    ebx,0x40
c000b7f8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7fc:	89 da                	mov    edx,ebx
c000b7fe:	d3 e2                	shl    edx,cl
c000b800:	89 f1                	mov    ecx,esi
c000b802:	f7 d2                	not    edx
c000b804:	d3 e3                	shl    ebx,cl
c000b806:	21 d0                	and    eax,edx
c000b808:	09 d8                	or     eax,ebx
c000b80a:	e6 92                	out    0x92,al
c000b80c:	5b                   	pop    ebx
c000b80d:	5e                   	pop    esi
c000b80e:	c3                   	ret    

c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b80f:	55                   	push   ebp
c000b810:	89 e5                	mov    ebp,esp
c000b812:	57                   	push   edi
c000b813:	56                   	push   esi
c000b814:	53                   	push   ebx
c000b815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b81b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b81e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 95 c1             	setne  cl
c000b826:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b82a:	0f 94 c2             	sete   dl
c000b82d:	84 d1                	test   cl,dl
c000b82f:	74 26                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b831:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b838:	74 1d                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b83a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b83d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b843:	89 d6                	mov    esi,edx
c000b845:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b84b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b851:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b854:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b857:	83 ec 0c             	sub    esp,0xc
c000b85a:	05 ff 0f 00 00       	add    eax,0xfff
c000b85f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b862:	6a 01                	push   0x1
c000b864:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b86a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b870:	e8 0a 5a 00 00       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	89 c6                	mov    esi,eax
c000b87a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b880:	0f 86 21 01 00 00    	jbe    c000b9a7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b886:	c1 eb 0c             	shr    ebx,0xc
c000b889:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b893:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b899:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b89c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b89f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b8a5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b8a8:	29 d8                	sub    eax,ebx
c000b8aa:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b8b0:	0f 83 f4 00 00 00    	jae    c000b9aa <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b8b6:	83 ec 0c             	sub    esp,0xc
c000b8b9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b8bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b8c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000b8c7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b8c9:	52                   	push   edx
c000b8ca:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b8d0:	52                   	push   edx
c000b8d1:	76 05                	jbe    c000b8d8 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b8d3:	b8 00 10 00 00       	mov    eax,0x1000
c000b8d8:	31 d2                	xor    edx,edx
c000b8da:	52                   	push   edx
c000b8db:	50                   	push   eax
c000b8dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b8df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b8e2:	83 c4 20             	add    esp,0x20
c000b8e5:	85 c0                	test   eax,eax
c000b8e7:	74 1f                	je     c000b908 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b8e9:	51                   	push   ecx
c000b8ea:	51                   	push   ecx
c000b8eb:	50                   	push   eax
c000b8ec:	68 7c 88 03 c0       	push   0xc003887c
c000b8f1:	e8 6a 15 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000b8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b8f9:	e8 b7 5c 00 00       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	31 c0                	xor    eax,eax
c000b903:	e9 7c 01 00 00       	jmp    c000ba84 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b908:	e8 f5 29 00 00       	call   c000e302 <lockScheduler()>
c000b90d:	e8 f3 20 00 00       	call   c000da05 <Phys::allocatePage()>
c000b912:	6a 07                	push   0x7
c000b914:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b91a:	56                   	push   esi
c000b91b:	50                   	push   eax
c000b91c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b922:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b925:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b92b:	e8 86 5f 00 00       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b939:	6a 00                	push   0x0
c000b93b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b941:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b944:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b94a:	e8 c5 5d 00 00       	call   c0011714 <VAS::mapOtherVASIn(bool, VAS*)>
c000b94f:	58                   	pop    eax
c000b950:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b956:	5a                   	pop    edx
c000b957:	68 07 04 00 00       	push   0x407
c000b95c:	53                   	push   ebx
c000b95d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b963:	50                   	push   eax
c000b964:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b96a:	6a 00                	push   0x0
c000b96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b974:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b97a:	e8 37 66 00 00       	call   c0011fb6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b97f:	83 c4 1c             	add    esp,0x1c
c000b982:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b988:	68 00 10 00 00       	push   0x1000
c000b98d:	50                   	push   eax
c000b98e:	56                   	push   esi
c000b98f:	e8 cd 4c ff ff       	call   c0000661 <memcpy>
c000b994:	e8 6b 29 00 00       	call   c000e304 <unlockScheduler()>
c000b999:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	e9 f5 fe ff ff       	jmp    c000b89c <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b9a7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b9aa:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b9b4:	0f 86 bc 00 00 00    	jbe    c000ba76 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b9ba:	e8 43 29 00 00       	call   c000e302 <lockScheduler()>
c000b9bf:	51                   	push   ecx
c000b9c0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b9c6:	6a 00                	push   0x0
c000b9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b9cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b9d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b9d6:	e8 39 5d 00 00       	call   c0011714 <VAS::mapOtherVASIn(bool, VAS*)>
c000b9db:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b9e1:	83 c4 10             	add    esp,0x10
c000b9e4:	c1 e8 0c             	shr    eax,0xc
c000b9e7:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b9f1:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b9f7:	e8 09 20 00 00       	call   c000da05 <Phys::allocatePage()>
c000b9fc:	6a 07                	push   0x7
c000b9fe:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000ba04:	56                   	push   esi
c000ba05:	50                   	push   eax
c000ba06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ba0c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000ba0f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000ba15:	e8 9c 5e 00 00       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ba1a:	58                   	pop    eax
c000ba1b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000ba21:	5a                   	pop    edx
c000ba22:	68 07 04 00 00       	push   0x407
c000ba27:	53                   	push   ebx
c000ba28:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba2e:	50                   	push   eax
c000ba2f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000ba35:	6a 00                	push   0x0
c000ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ba3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ba45:	e8 6c 65 00 00       	call   c0011fb6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	68 00 10 00 00       	push   0x1000
c000ba52:	6a 00                	push   0x0
c000ba54:	56                   	push   esi
c000ba55:	e8 7e 4c ff ff       	call   c00006d8 <memset>
c000ba5a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000ba69:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000ba6f:	77 86                	ja     c000b9f7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000ba71:	e8 8e 28 00 00       	call   c000e304 <unlockScheduler()>
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	56                   	push   esi
c000ba7a:	e8 36 5b 00 00       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba7f:	83 c4 10             	add    esp,0x10
c000ba82:	b0 01                	mov    al,0x1
c000ba84:	8d 65 f4             	lea    esp,[ebp-0xc]
c000ba87:	5b                   	pop    ebx
c000ba88:	5e                   	pop    esi
c000ba89:	5f                   	pop    edi
c000ba8a:	5d                   	pop    ebp
c000ba8b:	c3                   	ret    

c000ba8c <loadProgramIntoMemory(Process*, char const*)>:
c000ba8c:	55                   	push   ebp
c000ba8d:	57                   	push   edi
c000ba8e:	56                   	push   esi
c000ba8f:	53                   	push   ebx
c000ba90:	83 ec 48             	sub    esp,0x48
c000ba93:	68 14 01 00 00       	push   0x114
c000ba98:	e8 73 69 00 00       	call   c0012410 <operator new(unsigned long)>
c000ba9d:	83 c4 0c             	add    esp,0xc
c000baa0:	89 c6                	mov    esi,eax
c000baa2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000baa6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000baaa:	50                   	push   eax
c000baab:	e8 8e 6d 00 00       	call   c001283e <File::File(char const*, Process*)>
c000bab0:	58                   	pop    eax
c000bab1:	5a                   	pop    edx
c000bab2:	6a 01                	push   0x1
c000bab4:	56                   	push   esi
c000bab5:	e8 e8 6d 00 00       	call   c00128a2 <File::open(FileOpenMode)>
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 85 47 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bac5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	6a 34                	push   0x34
c000bad2:	e8 84 19 00 00       	call   c000d45b <malloc>
c000bad7:	89 c3                	mov    ebx,eax
c000bad9:	58                   	pop    eax
c000bada:	8b 06                	mov    eax,DWORD PTR [esi]
c000badc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000bae0:	57                   	push   edi
c000bae1:	53                   	push   ebx
c000bae2:	6a 00                	push   0x0
c000bae4:	6a 34                	push   0x34
c000bae6:	56                   	push   esi
c000bae7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baea:	83 c4 20             	add    esp,0x20
c000baed:	85 c0                	test   eax,eax
c000baef:	0f 85 17 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000baf5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000bafb:	0f 85 0b 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000bb04:	85 c0                	test   eax,eax
c000bb06:	0f 84 00 01 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb0c:	31 d2                	xor    edx,edx
c000bb0e:	55                   	push   ebp
c000bb0f:	52                   	push   edx
c000bb10:	50                   	push   eax
c000bb11:	56                   	push   esi
c000bb12:	e8 49 6e 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	85 c0                	test   eax,eax
c000bb1c:	0f 85 ea 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000bb28:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb30:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb34:	0f af c2             	imul   eax,edx
c000bb37:	50                   	push   eax
c000bb38:	e8 1e 19 00 00       	call   c000d45b <malloc>
c000bb3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb4a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb4e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb52:	0f af c2             	imul   eax,edx
c000bb55:	99                   	cdq    
c000bb56:	52                   	push   edx
c000bb57:	50                   	push   eax
c000bb58:	56                   	push   esi
c000bb59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb5c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	85 c0                	test   eax,eax
c000bb64:	0f 84 a2 00 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb6a:	31 d2                	xor    edx,edx
c000bb6c:	51                   	push   ecx
c000bb6d:	52                   	push   edx
c000bb6e:	50                   	push   eax
c000bb6f:	56                   	push   esi
c000bb70:	e8 eb 6d 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 85 8c 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb87:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb8b:	31 ed                	xor    ebp,ebp
c000bb8d:	0f af c2             	imul   eax,edx
c000bb90:	50                   	push   eax
c000bb91:	e8 c5 18 00 00       	call   c000d45b <malloc>
c000bb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bba7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bbab:	0f af c2             	imul   eax,edx
c000bbae:	99                   	cdq    
c000bbaf:	52                   	push   edx
c000bbb0:	50                   	push   eax
c000bbb1:	56                   	push   esi
c000bbb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bbb5:	83 c4 20             	add    esp,0x20
c000bbb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bbc0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bbc4:	0f 86 80 00 00 00    	jbe    c000bc4a <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bbca:	0f b7 fd             	movzx  edi,bp
c000bbcd:	c1 e7 05             	shl    edi,0x5
c000bbd0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bbd4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bbd7:	75 6b                	jne    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bbd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bbdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bbe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe7:	52                   	push   edx
c000bbe8:	31 d2                	xor    edx,edx
c000bbea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbed:	52                   	push   edx
c000bbee:	50                   	push   eax
c000bbef:	56                   	push   esi
c000bbf0:	e8 6b 6d 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000bbf5:	83 c4 10             	add    esp,0x10
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 17                	je     c000bc13 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bbfc:	83 ec 0c             	sub    esp,0xc
c000bbff:	68 a7 88 03 c0       	push   0xc00388a7
c000bc04:	e8 57 12 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	31 c0                	xor    eax,eax
c000bc0e:	e9 87 00 00 00       	jmp    c000bc9a <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bc13:	83 ec 0c             	sub    esp,0xc
c000bc16:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bc19:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bc1c:	50                   	push   eax
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc25:	56                   	push   esi
c000bc26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bc2a:	e8 e0 fb ff ff       	call   c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bc2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc33:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bc37:	83 c4 20             	add    esp,0x20
c000bc3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bc3e:	73 04                	jae    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bc40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc44:	45                   	inc    ebp
c000bc45:	e9 76 ff ff ff       	jmp    c000bbc0 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bc4a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bc4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc56:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bc65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc6a:	05 00 10 00 00       	add    eax,0x1000
c000bc6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc76:	e8 f0 17 00 00       	call   c000d46b <free>
c000bc7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc7e:	e8 e8 17 00 00       	call   c000d46b <free>
c000bc83:	58                   	pop    eax
c000bc84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc88:	e8 de 17 00 00       	call   c000d46b <free>
c000bc8d:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc90:	e8 6b 6c 00 00       	call   c0012900 <File::close()>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	b0 01                	mov    al,0x1
c000bc9a:	83 c4 3c             	add    esp,0x3c
c000bc9d:	5b                   	pop    ebx
c000bc9e:	5e                   	pop    esi
c000bc9f:	5f                   	pop    edi
c000bca0:	5d                   	pop    ebp
c000bca1:	c3                   	ret    

c000bca2 <runtimeReferenceHelper()>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 af 88 03 c0       	push   0xc00388af
c000bcaa:	e8 b1 11 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000bcaf:	fa                   	cli    
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	eb fe                	jmp    c000bcb3 <runtimeReferenceHelper()+0x11>

c000bcb5 <getAddressOfKernelSymbol(char const*)>:
c000bcb5:	57                   	push   edi
c000bcb6:	56                   	push   esi
c000bcb7:	53                   	push   ebx
c000bcb8:	31 db                	xor    ebx,ebx
c000bcba:	39 1d a0 ba 03 c0    	cmp    DWORD PTR ds:0xc003baa0,ebx
c000bcc0:	7e 3c                	jle    c000bcfe <getAddressOfKernelSymbol(char const*)+0x49>
c000bcc2:	8b 34 9d 20 ba 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc45e0]
c000bcc9:	31 ff                	xor    edi,edi
c000bccb:	39 3c 9d 20 b9 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc46e0],edi
c000bcd2:	7e 27                	jle    c000bcfb <getAddressOfKernelSymbol(char const*)+0x46>
c000bcd4:	50                   	push   eax
c000bcd5:	50                   	push   eax
c000bcd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcda:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdc:	03 04 9d a0 b9 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc4660]
c000bce3:	50                   	push   eax
c000bce4:	e8 91 4b ff ff       	call   c000087a <strcmp>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	85 c0                	test   eax,eax
c000bcee:	75 05                	jne    c000bcf5 <getAddressOfKernelSymbol(char const*)+0x40>
c000bcf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bcf3:	eb 0b                	jmp    c000bd00 <getAddressOfKernelSymbol(char const*)+0x4b>
c000bcf5:	83 c6 10             	add    esi,0x10
c000bcf8:	47                   	inc    edi
c000bcf9:	eb d0                	jmp    c000bccb <getAddressOfKernelSymbol(char const*)+0x16>
c000bcfb:	43                   	inc    ebx
c000bcfc:	eb bc                	jmp    c000bcba <getAddressOfKernelSymbol(char const*)+0x5>
c000bcfe:	31 c0                	xor    eax,eax
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	5f                   	pop    edi
c000bd03:	c3                   	ret    

c000bd04 <loadKernelSymbolTable(char const*)>:
c000bd04:	55                   	push   ebp
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	53                   	push   ebx
c000bd08:	83 ec 68             	sub    esp,0x68
c000bd0b:	8b 35 5c bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bb5c
c000bd11:	68 14 01 00 00       	push   0x114
c000bd16:	e8 f5 66 00 00       	call   c0012410 <operator new(unsigned long)>
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	89 c3                	mov    ebx,eax
c000bd20:	56                   	push   esi
c000bd21:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bd25:	50                   	push   eax
c000bd26:	e8 13 6b 00 00       	call   c001283e <File::File(char const*, Process*)>
c000bd2b:	5e                   	pop    esi
c000bd2c:	5f                   	pop    edi
c000bd2d:	6a 01                	push   0x1
c000bd2f:	53                   	push   ebx
c000bd30:	e8 6d 6b 00 00       	call   c00128a2 <File::open(FileOpenMode)>
c000bd35:	83 c4 10             	add    esp,0x10
c000bd38:	31 d2                	xor    edx,edx
c000bd3a:	85 c0                	test   eax,eax
c000bd3c:	0f 85 79 02 00 00    	jne    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd42:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	6a 34                	push   0x34
c000bd4f:	e8 07 17 00 00       	call   c000d45b <malloc>
c000bd54:	59                   	pop    ecx
c000bd55:	89 c7                	mov    edi,eax
c000bd57:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5d:	56                   	push   esi
c000bd5e:	57                   	push   edi
c000bd5f:	6a 00                	push   0x0
c000bd61:	6a 34                	push   0x34
c000bd63:	53                   	push   ebx
c000bd64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd67:	83 c4 20             	add    esp,0x20
c000bd6a:	85 c0                	test   eax,eax
c000bd6c:	74 17                	je     c000bd85 <loadKernelSymbolTable(char const*)+0x81>
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	68 d1 88 03 c0       	push   0xc00388d1
c000bd76:	e8 03 12 00 00       	call   c000cf7e <panic(char const*)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	31 d2                	xor    edx,edx
c000bd80:	e9 36 02 00 00       	jmp    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd8b:	75 e1                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd90:	85 c0                	test   eax,eax
c000bd92:	74 da                	je     c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd94:	52                   	push   edx
c000bd95:	31 d2                	xor    edx,edx
c000bd97:	52                   	push   edx
c000bd98:	50                   	push   eax
c000bd99:	53                   	push   ebx
c000bd9a:	e8 c1 6b 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	85 c0                	test   eax,eax
c000bda4:	75 c8                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdb1:	31 ed                	xor    ebp,ebp
c000bdb3:	0f af c2             	imul   eax,edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 9f 16 00 00       	call   c000d45b <malloc>
c000bdbc:	89 34 24             	mov    DWORD PTR [esp],esi
c000bdbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bdc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bdc9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdd1:	0f af c2             	imul   eax,edx
c000bdd4:	99                   	cdq    
c000bdd5:	52                   	push   edx
c000bdd6:	50                   	push   eax
c000bdd7:	53                   	push   ebx
c000bdd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bddb:	83 c4 20             	add    esp,0x20
c000bdde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bde6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bdfe:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000be02:	0f 86 aa 00 00 00    	jbe    c000beb2 <loadKernelSymbolTable(char const*)+0x1ae>
c000be08:	0f b7 f5             	movzx  esi,bp
c000be0b:	6b f6 28             	imul   esi,esi,0x28
c000be0e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000be12:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000be15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be19:	50                   	push   eax
c000be1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000be1e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000be22:	8b 16                	mov    edx,DWORD PTR [esi]
c000be24:	6b c0 28             	imul   eax,eax,0x28
c000be27:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000be2b:	89 d0                	mov    eax,edx
c000be2d:	31 d2                	xor    edx,edx
c000be2f:	52                   	push   edx
c000be30:	50                   	push   eax
c000be31:	53                   	push   ebx
c000be32:	e8 29 6b 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	6a 20                	push   0x20
c000be3c:	6a 00                	push   0x0
c000be3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be42:	52                   	push   edx
c000be43:	e8 90 48 ff ff       	call   c00006d8 <memset>
c000be48:	58                   	pop    eax
c000be49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000be4f:	51                   	push   ecx
c000be50:	8d 54 24 40          	lea    edx,[esp+0x40]
c000be54:	52                   	push   edx
c000be55:	6a 00                	push   0x0
c000be57:	6a 1f                	push   0x1f
c000be59:	53                   	push   ebx
c000be5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be5d:	83 c4 18             	add    esp,0x18
c000be60:	68 e8 88 03 c0       	push   0xc00388e8
c000be65:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be69:	52                   	push   edx
c000be6a:	e8 0b 4a ff ff       	call   c000087a <strcmp>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	85 c0                	test   eax,eax
c000be74:	75 0f                	jne    c000be85 <loadKernelSymbolTable(char const*)+0x181>
c000be76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be85:	50                   	push   eax
c000be86:	50                   	push   eax
c000be87:	68 f0 88 03 c0       	push   0xc00388f0
c000be8c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000be90:	50                   	push   eax
c000be91:	e8 e4 49 ff ff       	call   c000087a <strcmp>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	85 c0                	test   eax,eax
c000be9b:	75 0f                	jne    c000beac <loadKernelSymbolTable(char const*)+0x1a8>
c000be9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bea0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beac:	45                   	inc    ebp
c000bead:	e9 4c ff ff ff       	jmp    c000bdfe <loadKernelSymbolTable(char const*)+0xfa>
c000beb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000beb7:	75 10                	jne    c000bec9 <loadKernelSymbolTable(char const*)+0x1c5>
c000beb9:	83 ec 0c             	sub    esp,0xc
c000bebc:	68 f8 88 03 c0       	push   0xc00388f8
c000bec1:	e8 b8 10 00 00       	call   c000cf7e <panic(char const*)>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bece:	75 10                	jne    c000bee0 <loadKernelSymbolTable(char const*)+0x1dc>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	68 f8 88 03 c0       	push   0xc00388f8
c000bed8:	e8 a1 10 00 00       	call   c000cf7e <panic(char const*)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	31 d2                	xor    edx,edx
c000bee2:	50                   	push   eax
c000bee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee7:	52                   	push   edx
c000bee8:	50                   	push   eax
c000bee9:	53                   	push   ebx
c000beea:	e8 71 6a 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000beef:	5a                   	pop    edx
c000bef0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef4:	e8 62 15 00 00       	call   c000d45b <malloc>
c000bef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf01:	89 c1                	mov    ecx,eax
c000bf03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf0b:	5e                   	pop    esi
c000bf0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bf12:	55                   	push   ebp
c000bf13:	51                   	push   ecx
c000bf14:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000bf18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf20:	53                   	push   ebx
c000bf21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf24:	83 c4 14             	add    esp,0x14
c000bf27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf2b:	e8 2b 15 00 00       	call   c000d45b <malloc>
c000bf30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf33:	89 c6                	mov    esi,eax
c000bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf37:	56                   	push   esi
c000bf38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf40:	53                   	push   ebx
c000bf41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf48:	8b 15 a0 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa0
c000bf4e:	83 c4 1c             	add    esp,0x1c
c000bf51:	c1 e8 04             	shr    eax,0x4
c000bf54:	89 04 95 20 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc46e0],eax
c000bf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf5f:	31 d2                	xor    edx,edx
c000bf61:	52                   	push   edx
c000bf62:	50                   	push   eax
c000bf63:	53                   	push   ebx
c000bf64:	e8 f7 69 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000bf69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf6c:	31 d2                	xor    edx,edx
c000bf6e:	56                   	push   esi
c000bf6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf73:	52                   	push   edx
c000bf74:	50                   	push   eax
c000bf75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf77:	53                   	push   ebx
c000bf78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	53                   	push   ebx
c000bf7f:	e8 7c 69 00 00       	call   c0012900 <File::close()>
c000bf84:	5d                   	pop    ebp
c000bf85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf89:	e8 dd 14 00 00       	call   c000d46b <free>
c000bf8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf91:	e8 d5 14 00 00       	call   c000d46b <free>
c000bf96:	a1 a0 ba 03 c0       	mov    eax,ds:0xc003baa0
c000bf9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf9f:	8d 50 01             	lea    edx,[eax+0x1]
c000bfa2:	89 0c 85 20 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45e0],ecx
c000bfa9:	89 15 a0 ba 03 c0    	mov    DWORD PTR ds:0xc003baa0,edx
c000bfaf:	89 34 85 a0 b9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4660],esi
c000bfb6:	83 c4 10             	add    esp,0x10
c000bfb9:	b2 01                	mov    dl,0x1
c000bfbb:	83 c4 5c             	add    esp,0x5c
c000bfbe:	88 d0                	mov    al,dl
c000bfc0:	5b                   	pop    ebx
c000bfc1:	5e                   	pop    esi
c000bfc2:	5f                   	pop    edi
c000bfc3:	5d                   	pop    ebp
c000bfc4:	c3                   	ret    

c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bfc5:	55                   	push   ebp
c000bfc6:	57                   	push   edi
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	81 ec 68 05 00 00    	sub    esp,0x568
c000bfcf:	8b 1d 5c bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb5c
c000bfd5:	68 14 01 00 00       	push   0x114
c000bfda:	e8 31 64 00 00       	call   c0012410 <operator new(unsigned long)>
c000bfdf:	83 c4 0c             	add    esp,0xc
c000bfe2:	89 c5                	mov    ebp,eax
c000bfe4:	53                   	push   ebx
c000bfe5:	ff b4 24 78 05 00 00 	push   DWORD PTR [esp+0x578]
c000bfec:	50                   	push   eax
c000bfed:	e8 4c 68 00 00       	call   c001283e <File::File(char const*, Process*)>
c000bff2:	5e                   	pop    esi
c000bff3:	5f                   	pop    edi
c000bff4:	6a 01                	push   0x1
c000bff6:	55                   	push   ebp
c000bff7:	e8 a6 68 00 00       	call   c00128a2 <File::open(FileOpenMode)>
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	85 c0                	test   eax,eax
c000c001:	0f 85 5f 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c007:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	6a 34                	push   0x34
c000c014:	e8 42 14 00 00       	call   c000d45b <malloc>
c000c019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c01d:	5b                   	pop    ebx
c000c01e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c021:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c025:	53                   	push   ebx
c000c026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02a:	6a 00                	push   0x0
c000c02c:	6a 34                	push   0x34
c000c02e:	55                   	push   ebp
c000c02f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c032:	83 c4 20             	add    esp,0x20
c000c035:	85 c0                	test   eax,eax
c000c037:	0f 85 29 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c03d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c041:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c000c047:	0f 85 19 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c04d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c050:	85 c0                	test   eax,eax
c000c052:	0f 84 0e 01 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c058:	31 d2                	xor    edx,edx
c000c05a:	51                   	push   ecx
c000c05b:	52                   	push   edx
c000c05c:	50                   	push   eax
c000c05d:	55                   	push   ebp
c000c05e:	e8 fd 68 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	85 c0                	test   eax,eax
c000c068:	0f 85 f8 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c072:	83 ec 0c             	sub    esp,0xc
c000c075:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000c078:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c07c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c080:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c084:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c088:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c08c:	0f af c2             	imul   eax,edx
c000c08f:	50                   	push   eax
c000c090:	e8 c6 13 00 00       	call   c000d45b <malloc>
c000c095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c098:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c09c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c09f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c0ab:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c0af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c0b3:	0f af c2             	imul   eax,edx
c000c0b6:	99                   	cdq    
c000c0b7:	52                   	push   edx
c000c0b8:	50                   	push   eax
c000c0b9:	55                   	push   ebp
c000c0ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0c1:	83 c4 20             	add    esp,0x20
c000c0c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000c0c7:	85 c0                	test   eax,eax
c000c0c9:	0f 84 97 00 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0cf:	52                   	push   edx
c000c0d0:	31 d2                	xor    edx,edx
c000c0d2:	52                   	push   edx
c000c0d3:	50                   	push   eax
c000c0d4:	55                   	push   ebp
c000c0d5:	e8 86 68 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	0f 85 81 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0f0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c0f4:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c0f8:	0f af c2             	imul   eax,edx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 5a 13 00 00       	call   c000d45b <malloc>
c000c101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c104:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c108:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c10b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c10f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c117:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c11b:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c11f:	31 ff                	xor    edi,edi
c000c121:	0f af c2             	imul   eax,edx
c000c124:	99                   	cdq    
c000c125:	52                   	push   edx
c000c126:	50                   	push   eax
c000c127:	55                   	push   ebp
c000c128:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c12b:	83 c4 20             	add    esp,0x20
c000c12e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c132:	66 39 78 2c          	cmp    WORD PTR [eax+0x2c],di
c000c136:	76 7c                	jbe    c000c1b4 <loadDriverIntoMemory(char const*, unsigned long)+0x1ef>
c000c138:	0f b7 df             	movzx  ebx,di
c000c13b:	c1 e3 05             	shl    ebx,0x5
c000c13e:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c000c142:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c145:	75 67                	jne    c000c1ae <loadDriverIntoMemory(char const*, unsigned long)+0x1e9>
c000c147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c14a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000c14d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c151:	31 d2                	xor    edx,edx
c000c153:	50                   	push   eax
c000c154:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c157:	52                   	push   edx
c000c158:	50                   	push   eax
c000c159:	55                   	push   ebp
c000c15a:	e8 01 68 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	74 07                	je     c000c16d <loadDriverIntoMemory(char const*, unsigned long)+0x1a8>
c000c166:	31 c0                	xor    eax,eax
c000c168:	e9 c8 04 00 00       	jmp    c000c635 <loadDriverIntoMemory(char const*, unsigned long)+0x670>
c000c16d:	8b 84 24 74 05 00 00 	mov    eax,DWORD PTR [esp+0x574]
c000c174:	31 d2                	xor    edx,edx
c000c176:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000c17a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c17d:	83 ec 0c             	sub    esp,0xc
c000c180:	01 c6                	add    esi,eax
c000c182:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c189:	50                   	push   eax
c000c18a:	56                   	push   esi
c000c18b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c18f:	52                   	push   edx
c000c190:	50                   	push   eax
c000c191:	55                   	push   ebp
c000c192:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c195:	83 c4 1c             	add    esp,0x1c
c000c198:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c19b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c19e:	50                   	push   eax
c000c19f:	6a 00                	push   0x0
c000c1a1:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
c000c1a5:	56                   	push   esi
c000c1a6:	e8 2d 45 ff ff       	call   c00006d8 <memset>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	47                   	inc    edi
c000c1af:	e9 7a ff ff ff       	jmp    c000c12e <loadDriverIntoMemory(char const*, unsigned long)+0x169>
c000c1b4:	31 db                	xor    ebx,ebx
c000c1b6:	50                   	push   eax
c000c1b7:	68 00 02 00 00       	push   0x200
c000c1bc:	6a 00                	push   0x0
c000c1be:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c1c5:	50                   	push   eax
c000c1c6:	e8 0d 45 ff ff       	call   c00006d8 <memset>
c000c1cb:	83 c4 0c             	add    esp,0xc
c000c1ce:	68 00 02 00 00       	push   0x200
c000c1d3:	6a 00                	push   0x0
c000c1d5:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 f6 44 ff ff       	call   c00006d8 <memset>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1ed:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000c1f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c205:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c20d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c211:	66 39 58 30          	cmp    WORD PTR [eax+0x30],bx
c000c215:	0f 86 f1 00 00 00    	jbe    c000c30c <loadDriverIntoMemory(char const*, unsigned long)+0x347>
c000c21b:	0f b7 f3             	movzx  esi,bx
c000c21e:	6b f6 28             	imul   esi,esi,0x28
c000c221:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000c225:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000c228:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c22c:	50                   	push   eax
c000c22d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c235:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c000c239:	8b 06                	mov    eax,DWORD PTR [esi]
c000c23b:	6b d2 28             	imul   edx,edx,0x28
c000c23e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c000c242:	31 d2                	xor    edx,edx
c000c244:	52                   	push   edx
c000c245:	50                   	push   eax
c000c246:	55                   	push   ebp
c000c247:	e8 14 67 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c24c:	83 c4 0c             	add    esp,0xc
c000c24f:	6a 20                	push   0x20
c000c251:	6a 00                	push   0x0
c000c253:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c257:	57                   	push   edi
c000c258:	e8 7b 44 ff ff       	call   c00006d8 <memset>
c000c25d:	58                   	pop    eax
c000c25e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c261:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c265:	52                   	push   edx
c000c266:	57                   	push   edi
c000c267:	6a 00                	push   0x0
c000c269:	6a 1f                	push   0x1f
c000c26b:	55                   	push   ebp
c000c26c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c26f:	83 c4 18             	add    esp,0x18
c000c272:	57                   	push   edi
c000c273:	68 12 89 03 c0       	push   0xc0038912
c000c278:	e8 e3 0b 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c27d:	83 c4 0c             	add    esp,0xc
c000c280:	6a 09                	push   0x9
c000c282:	68 1f 89 03 c0       	push   0xc003891f
c000c287:	57                   	push   edi
c000c288:	e8 0f 43 ff ff       	call   c000059c <memcmp>
c000c28d:	83 c4 10             	add    esp,0x10
c000c290:	85 c0                	test   eax,eax
c000c292:	75 24                	jne    c000c2b8 <loadDriverIntoMemory(char const*, unsigned long)+0x2f3>
c000c294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c298:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c29c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000c2a0:	89 bc 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],edi
c000c2a7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2aa:	89 84 8c 50 03 00 00 	mov    DWORD PTR [esp+ecx*4+0x350],eax
c000c2b1:	89 c8                	mov    eax,ecx
c000c2b3:	40                   	inc    eax
c000c2b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2b8:	50                   	push   eax
c000c2b9:	50                   	push   eax
c000c2ba:	68 e8 88 03 c0       	push   0xc00388e8
c000c2bf:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2c3:	50                   	push   eax
c000c2c4:	e8 b1 45 ff ff       	call   c000087a <strcmp>
c000c2c9:	83 c4 10             	add    esp,0x10
c000c2cc:	85 c0                	test   eax,eax
c000c2ce:	75 0f                	jne    c000c2df <loadDriverIntoMemory(char const*, unsigned long)+0x31a>
c000c2d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c2df:	57                   	push   edi
c000c2e0:	57                   	push   edi
c000c2e1:	68 f0 88 03 c0       	push   0xc00388f0
c000c2e6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2ea:	50                   	push   eax
c000c2eb:	e8 8a 45 ff ff       	call   c000087a <strcmp>
c000c2f0:	83 c4 10             	add    esp,0x10
c000c2f3:	85 c0                	test   eax,eax
c000c2f5:	75 0f                	jne    c000c306 <loadDriverIntoMemory(char const*, unsigned long)+0x341>
c000c2f7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c2fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c302:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c306:	43                   	inc    ebx
c000c307:	e9 01 ff ff ff       	jmp    c000c20d <loadDriverIntoMemory(char const*, unsigned long)+0x248>
c000c30c:	31 d2                	xor    edx,edx
c000c30e:	31 ff                	xor    edi,edi
c000c310:	51                   	push   ecx
c000c311:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c315:	52                   	push   edx
c000c316:	50                   	push   eax
c000c317:	55                   	push   ebp
c000c318:	e8 43 66 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c31d:	5b                   	pop    ebx
c000c31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c322:	e8 34 11 00 00       	call   c000d45b <malloc>
c000c327:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c32a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c32e:	31 d2                	xor    edx,edx
c000c330:	5e                   	pop    esi
c000c331:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c335:	53                   	push   ebx
c000c336:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c33a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c33e:	52                   	push   edx
c000c33f:	50                   	push   eax
c000c340:	55                   	push   ebp
c000c341:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c344:	83 c4 14             	add    esp,0x14
c000c347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c34b:	e8 0b 11 00 00       	call   c000d45b <malloc>
c000c350:	31 d2                	xor    edx,edx
c000c352:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c356:	83 c4 0c             	add    esp,0xc
c000c359:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c35d:	52                   	push   edx
c000c35e:	50                   	push   eax
c000c35f:	55                   	push   ebp
c000c360:	e8 fb 65 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c365:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c368:	31 d2                	xor    edx,edx
c000c36a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c36e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c371:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c375:	52                   	push   edx
c000c376:	50                   	push   eax
c000c377:	55                   	push   ebp
c000c378:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c37b:	83 c4 20             	add    esp,0x20
c000c37e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000c382:	0f 84 81 02 00 00    	je     c000c609 <loadDriverIntoMemory(char const*, unsigned long)+0x644>
c000c388:	8b 84 bc 50 03 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x350]
c000c38f:	31 d2                	xor    edx,edx
c000c391:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c395:	c1 e8 03             	shr    eax,0x3
c000c398:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c39c:	50                   	push   eax
c000c39d:	8b 84 bc 54 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x154]
c000c3a4:	52                   	push   edx
c000c3a5:	50                   	push   eax
c000c3a6:	55                   	push   ebp
c000c3a7:	e8 b4 65 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000c3ac:	58                   	pop    eax
c000c3ad:	ff b4 bc 5c 03 00 00 	push   DWORD PTR [esp+edi*4+0x35c]
c000c3b4:	e8 a2 10 00 00       	call   c000d45b <malloc>
c000c3b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c3c0:	5a                   	pop    edx
c000c3c1:	31 d2                	xor    edx,edx
c000c3c3:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c3c7:	50                   	push   eax
c000c3c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c3cc:	8b 84 bc 64 03 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x364]
c000c3d3:	52                   	push   edx
c000c3d4:	50                   	push   eax
c000c3d5:	55                   	push   ebp
c000c3d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3e4:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c3e8:	39 4c 24 20          	cmp    DWORD PTR [esp+0x20],ecx
c000c3ec:	0f 8d 02 02 00 00    	jge    c000c5f4 <loadDriverIntoMemory(char const*, unsigned long)+0x62f>
c000c3f2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c3f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3fa:	83 ec 0c             	sub    esp,0xc
c000c3fd:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c000c400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c404:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c408:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c000c40c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c410:	89 c6                	mov    esi,eax
c000c412:	c1 ee 08             	shr    esi,0x8
c000c415:	c1 e6 04             	shl    esi,0x4
c000c418:	03 74 24 44          	add    esi,DWORD PTR [esp+0x44]
c000c41c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c41f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c427:	53                   	push   ebx
c000c428:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c42c:	03 06                	add    eax,DWORD PTR [esi]
c000c42e:	50                   	push   eax
c000c42f:	68 29 89 03 c0       	push   0xc0038929
c000c434:	e8 27 0a 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c439:	83 c4 20             	add    esp,0x20
c000c43c:	85 db                	test   ebx,ebx
c000c43e:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c000c443:	0f 85 06 01 00 00    	jne    c000c54f <loadDriverIntoMemory(char const*, unsigned long)+0x58a>
c000c449:	83 ec 0c             	sub    esp,0xc
c000c44c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c450:	03 06                	add    eax,DWORD PTR [esi]
c000c452:	50                   	push   eax
c000c453:	e8 5d f8 ff ff       	call   c000bcb5 <getAddressOfKernelSymbol(char const*)>
c000c458:	83 c4 10             	add    esp,0x10
c000c45b:	89 c3                	mov    ebx,eax
c000c45d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c000c462:	85 c0                	test   eax,eax
c000c464:	0f 85 e5 00 00 00    	jne    c000c54f <loadDriverIntoMemory(char const*, unsigned long)+0x58a>
c000c46a:	50                   	push   eax
c000c46b:	50                   	push   eax
c000c46c:	68 5b 89 03 c0       	push   0xc003895b
c000c471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c475:	03 06                	add    eax,DWORD PTR [esi]
c000c477:	50                   	push   eax
c000c478:	e8 fd 43 ff ff       	call   c000087a <strcmp>
c000c47d:	83 c4 10             	add    esp,0x10
c000c480:	85 c0                	test   eax,eax
c000c482:	75 0a                	jne    c000c48e <loadDriverIntoMemory(char const*, unsigned long)+0x4c9>
c000c484:	bb 7c e6 01 c0       	mov    ebx,0xc001e67c
c000c489:	e9 bc 00 00 00       	jmp    c000c54a <loadDriverIntoMemory(char const*, unsigned long)+0x585>
c000c48e:	50                   	push   eax
c000c48f:	50                   	push   eax
c000c490:	68 65 89 03 c0       	push   0xc0038965
c000c495:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c499:	03 06                	add    eax,DWORD PTR [esi]
c000c49b:	50                   	push   eax
c000c49c:	e8 d9 43 ff ff       	call   c000087a <strcmp>
c000c4a1:	83 c4 10             	add    esp,0x10
c000c4a4:	85 c0                	test   eax,eax
c000c4a6:	75 0a                	jne    c000c4b2 <loadDriverIntoMemory(char const*, unsigned long)+0x4ed>
c000c4a8:	bb b0 e3 01 c0       	mov    ebx,0xc001e3b0
c000c4ad:	e9 98 00 00 00       	jmp    c000c54a <loadDriverIntoMemory(char const*, unsigned long)+0x585>
c000c4b2:	50                   	push   eax
c000c4b3:	50                   	push   eax
c000c4b4:	68 6e 89 03 c0       	push   0xc003896e
c000c4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4bd:	03 06                	add    eax,DWORD PTR [esi]
c000c4bf:	50                   	push   eax
c000c4c0:	e8 b5 43 ff ff       	call   c000087a <strcmp>
c000c4c5:	83 c4 10             	add    esp,0x10
c000c4c8:	85 c0                	test   eax,eax
c000c4ca:	75 07                	jne    c000c4d3 <loadDriverIntoMemory(char const*, unsigned long)+0x50e>
c000c4cc:	bb 7c e7 01 c0       	mov    ebx,0xc001e77c
c000c4d1:	eb 77                	jmp    c000c54a <loadDriverIntoMemory(char const*, unsigned long)+0x585>
c000c4d3:	50                   	push   eax
c000c4d4:	50                   	push   eax
c000c4d5:	68 78 89 03 c0       	push   0xc0038978
c000c4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4de:	03 06                	add    eax,DWORD PTR [esi]
c000c4e0:	50                   	push   eax
c000c4e1:	e8 94 43 ff ff       	call   c000087a <strcmp>
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	85 c0                	test   eax,eax
c000c4eb:	74 58                	je     c000c545 <loadDriverIntoMemory(char const*, unsigned long)+0x580>
c000c4ed:	50                   	push   eax
c000c4ee:	50                   	push   eax
c000c4ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4f3:	03 06                	add    eax,DWORD PTR [esi]
c000c4f5:	50                   	push   eax
c000c4f6:	68 81 89 03 c0       	push   0xc0038981
c000c4fb:	e8 60 09 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c500:	58                   	pop    eax
c000c501:	5a                   	pop    edx
c000c502:	68 9b 89 03 c0       	push   0xc003899b
c000c507:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c50b:	50                   	push   eax
c000c50c:	e8 e3 42 ff ff       	call   c00007f4 <strcpy>
c000c511:	59                   	pop    ecx
c000c512:	58                   	pop    eax
c000c513:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c517:	03 06                	add    eax,DWORD PTR [esi]
c000c519:	50                   	push   eax
c000c51a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c51e:	50                   	push   eax
c000c51f:	e8 1d 44 ff ff       	call   c0000941 <strcat>
c000c524:	58                   	pop    eax
c000c525:	5a                   	pop    edx
c000c526:	68 f9 89 03 c0       	push   0xc00389f9
c000c52b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c52f:	50                   	push   eax
c000c530:	e8 0c 44 ff ff       	call   c0000941 <strcat>
c000c535:	59                   	pop    ecx
c000c536:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c53a:	50                   	push   eax
c000c53b:	e8 3e 0a 00 00       	call   c000cf7e <panic(char const*)>
c000c540:	83 c4 10             	add    esp,0x10
c000c543:	eb 0a                	jmp    c000c54f <loadDriverIntoMemory(char const*, unsigned long)+0x58a>
c000c545:	bb fc e4 01 c0       	mov    ebx,0xc001e4fc
c000c54a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c000c54f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000c554:	75 36                	jne    c000c58c <loadDriverIntoMemory(char const*, unsigned long)+0x5c7>
c000c556:	8b 8c 24 74 05 00 00 	mov    ecx,DWORD PTR [esp+0x574]
c000c55d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c561:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000c565:	01 ca                	add    edx,ecx
c000c567:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c000c56c:	8b 02                	mov    eax,DWORD PTR [edx]
c000c56e:	75 16                	jne    c000c586 <loadDriverIntoMemory(char const*, unsigned long)+0x5c1>
c000c570:	01 c8                	add    eax,ecx
c000c572:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c000c57a:	74 0c                	je     c000c588 <loadDriverIntoMemory(char const*, unsigned long)+0x5c3>
c000c57c:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c000c584:	74 02                	je     c000c588 <loadDriverIntoMemory(char const*, unsigned long)+0x5c3>
c000c586:	01 d8                	add    eax,ebx
c000c588:	89 02                	mov    DWORD PTR [edx],eax
c000c58a:	eb 5f                	jmp    c000c5eb <loadDriverIntoMemory(char const*, unsigned long)+0x626>
c000c58c:	80 7c 24 14 02       	cmp    BYTE PTR [esp+0x14],0x2
c000c591:	75 37                	jne    c000c5ca <loadDriverIntoMemory(char const*, unsigned long)+0x605>
c000c593:	8b 94 24 74 05 00 00 	mov    edx,DWORD PTR [esp+0x574]
c000c59a:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c000c59e:	03 54 24 1c          	add    edx,DWORD PTR [esp+0x1c]
c000c5a2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c000c5a7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c5a9:	74 13                	je     c000c5be <loadDriverIntoMemory(char const*, unsigned long)+0x5f9>
c000c5ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5af:	2b 84 24 74 05 00 00 	sub    eax,DWORD PTR [esp+0x574]
c000c5b6:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000c5ba:	01 c8                	add    eax,ecx
c000c5bc:	eb 06                	jmp    c000c5c4 <loadDriverIntoMemory(char const*, unsigned long)+0x5ff>
c000c5be:	89 c8                	mov    eax,ecx
c000c5c0:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c000c5c4:	01 c3                	add    ebx,eax
c000c5c6:	89 1a                	mov    DWORD PTR [edx],ebx
c000c5c8:	eb 21                	jmp    c000c5eb <loadDriverIntoMemory(char const*, unsigned long)+0x626>
c000c5ca:	53                   	push   ebx
c000c5cb:	53                   	push   ebx
c000c5cc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c5d1:	50                   	push   eax
c000c5d2:	68 b2 89 03 c0       	push   0xc00389b2
c000c5d7:	e8 84 08 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c5dc:	c7 04 24 bd 89 03 c0 	mov    DWORD PTR [esp],0xc00389bd
c000c5e3:	e8 96 09 00 00       	call   c000cf7e <panic(char const*)>
c000c5e8:	83 c4 10             	add    esp,0x10
c000c5eb:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c000c5ef:	e9 f0 fd ff ff       	jmp    c000c3e4 <loadDriverIntoMemory(char const*, unsigned long)+0x41f>
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	47                   	inc    edi
c000c5f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5fc:	e8 6a 0e 00 00       	call   c000d46b <free>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	e9 75 fd ff ff       	jmp    c000c37e <loadDriverIntoMemory(char const*, unsigned long)+0x3b9>
c000c609:	83 ec 0c             	sub    esp,0xc
c000c60c:	55                   	push   ebp
c000c60d:	e8 ee 62 00 00       	call   c0012900 <File::close()>
c000c612:	58                   	pop    eax
c000c613:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c617:	e8 4f 0e 00 00       	call   c000d46b <free>
c000c61c:	5a                   	pop    edx
c000c61d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c621:	e8 45 0e 00 00       	call   c000d46b <free>
c000c626:	59                   	pop    ecx
c000c627:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c62b:	e8 3b 0e 00 00       	call   c000d46b <free>
c000c630:	83 c4 10             	add    esp,0x10
c000c633:	b0 01                	mov    al,0x1
c000c635:	81 c4 5c 05 00 00    	add    esp,0x55c
c000c63b:	5b                   	pop    ebx
c000c63c:	5e                   	pop    esi
c000c63d:	5f                   	pop    edi
c000c63e:	5d                   	pop    ebp
c000c63f:	c3                   	ret    

c000c640 <loadDLL(char const*)>:
c000c640:	57                   	push   edi
c000c641:	56                   	push   esi
c000c642:	53                   	push   ebx
c000c643:	81 ec 18 01 00 00    	sub    esp,0x118
c000c649:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c650:	53                   	push   ebx
c000c651:	68 d5 89 03 c0       	push   0xc00389d5
c000c656:	e8 05 08 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c65b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c662:	e8 a9 5d 00 00       	call   c0012410 <operator new(unsigned long)>
c000c667:	83 c4 0c             	add    esp,0xc
c000c66a:	89 c6                	mov    esi,eax
c000c66c:	ff 35 5c bb 03 c0    	push   DWORD PTR ds:0xc003bb5c
c000c672:	53                   	push   ebx
c000c673:	50                   	push   eax
c000c674:	e8 c5 61 00 00       	call   c001283e <File::File(char const*, Process*)>
c000c679:	83 c4 0c             	add    esp,0xc
c000c67c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c680:	50                   	push   eax
c000c681:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c685:	50                   	push   eax
c000c686:	56                   	push   esi
c000c687:	e8 c2 64 00 00       	call   c0012b4e <File::stat(unsigned long long*, bool*)>
c000c68c:	83 c4 10             	add    esp,0x10
c000c68f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c694:	75 0a                	jne    c000c6a0 <loadDLL(char const*)+0x60>
c000c696:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c69a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c69e:	75 32                	jne    c000c6d2 <loadDLL(char const*)+0x92>
c000c6a0:	50                   	push   eax
c000c6a1:	50                   	push   eax
c000c6a2:	68 e6 89 03 c0       	push   0xc00389e6
c000c6a7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c6ab:	57                   	push   edi
c000c6ac:	e8 43 41 ff ff       	call   c00007f4 <strcpy>
c000c6b1:	58                   	pop    eax
c000c6b2:	5a                   	pop    edx
c000c6b3:	53                   	push   ebx
c000c6b4:	57                   	push   edi
c000c6b5:	e8 87 42 ff ff       	call   c0000941 <strcat>
c000c6ba:	59                   	pop    ecx
c000c6bb:	58                   	pop    eax
c000c6bc:	68 f9 89 03 c0       	push   0xc00389f9
c000c6c1:	57                   	push   edi
c000c6c2:	e8 7a 42 ff ff       	call   c0000941 <strcat>
c000c6c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6ca:	e8 af 08 00 00       	call   c000cf7e <panic(char const*)>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	83 ec 0c             	sub    esp,0xc
c000c6d5:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6d7:	56                   	push   esi
c000c6d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c6db:	58                   	pop    eax
c000c6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6e0:	e8 76 0d 00 00       	call   c000d45b <malloc>
c000c6e5:	5a                   	pop    edx
c000c6e6:	89 c6                	mov    esi,eax
c000c6e8:	59                   	pop    ecx
c000c6e9:	50                   	push   eax
c000c6ea:	68 fb 89 03 c0       	push   0xc00389fb
c000c6ef:	e8 6c 07 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c6f4:	5f                   	pop    edi
c000c6f5:	58                   	pop    eax
c000c6f6:	56                   	push   esi
c000c6f7:	53                   	push   ebx
c000c6f8:	e8 c8 f8 ff ff       	call   c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>
c000c6fd:	81 c4 20 01 00 00    	add    esp,0x120
c000c703:	89 f0                	mov    eax,esi
c000c705:	5b                   	pop    ebx
c000c706:	5e                   	pop    esi
c000c707:	5f                   	pop    edi
c000c708:	c3                   	ret    

c000c709 <executeDLL(unsigned long, void*)>:
c000c709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c70d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c711:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c715:	ff e0                	jmp    eax
c000c717:	90                   	nop

c000c718 <GDTEntry::setBase(unsigned int)>:
c000c718:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c71c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c720:	89 c1                	mov    ecx,eax
c000c722:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c726:	c1 e9 10             	shr    ecx,0x10
c000c729:	c1 e8 18             	shr    eax,0x18
c000c72c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c72f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c732:	c3                   	ret    
c000c733:	90                   	nop

c000c734 <GDTEntry::setLimit(unsigned int)>:
c000c734:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c73c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c73f:	66 89 01             	mov    WORD PTR [ecx],ax
c000c742:	83 e2 f0             	and    edx,0xfffffff0
c000c745:	c1 e8 10             	shr    eax,0x10
c000c748:	83 e0 0f             	and    eax,0xf
c000c74b:	09 d0                	or     eax,edx
c000c74d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c750:	c3                   	ret    
c000c751:	90                   	nop

c000c752 <GDT::GDT()>:
c000c752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c756:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c760:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c766:	90                   	nop
c000c767:	c3                   	ret    

c000c768 <GDT::addEntry(GDTEntry)>:
c000c768:	53                   	push   ebx
c000c769:	83 ec 0c             	sub    esp,0xc
c000c76c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c770:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c772:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c779:	52                   	push   edx
c000c77a:	50                   	push   eax
c000c77b:	68 1a 8a 03 c0       	push   0xc0038a1a
c000c780:	e8 db 06 00 00       	call   c000ce60 <kprintf(char const*, ...)>
c000c785:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c787:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c78b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c78f:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c793:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c797:	8d 50 01             	lea    edx,[eax+0x1]
c000c79a:	c1 e0 03             	shl    eax,0x3
c000c79d:	89 13                	mov    DWORD PTR [ebx],edx
c000c79f:	83 c4 18             	add    esp,0x18
c000c7a2:	5b                   	pop    ebx
c000c7a3:	c3                   	ret    

c000c7a4 <GDT::getNumberOfEntries()>:
c000c7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7aa:	c3                   	ret    
c000c7ab:	90                   	nop

c000c7ac <GDT::flush()>:
c000c7ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7b2:	83 c0 04             	add    eax,0x4
c000c7b5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c7bc:	a3 a6 ba 03 c0       	mov    ds:0xc003baa6,eax
c000c7c1:	66 89 15 a4 ba 03 c0 	mov    WORD PTR ds:0xc003baa4,dx
c000c7c8:	e9 93 3b ff ff       	jmp    c0000360 <loadGDT>
c000c7cd:	90                   	nop

c000c7ce <GDT::setup()>:
c000c7ce:	55                   	push   ebp
c000c7cf:	57                   	push   edi
c000c7d0:	56                   	push   esi
c000c7d1:	53                   	push   ebx
c000c7d2:	83 ec 3c             	sub    esp,0x3c
c000c7d5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c7d9:	6a 00                	push   0x0
c000c7db:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c7df:	53                   	push   ebx
c000c7e0:	e8 33 ff ff ff       	call   c000c718 <GDTEntry::setBase(unsigned int)>
c000c7e5:	6a 00                	push   0x0
c000c7e7:	53                   	push   ebx
c000c7e8:	e8 47 ff ff ff       	call   c000c734 <GDTEntry::setLimit(unsigned int)>
c000c7ed:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c7f5:	6a 00                	push   0x0
c000c7f7:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c7fb:	53                   	push   ebx
c000c7fc:	e8 17 ff ff ff       	call   c000c718 <GDTEntry::setBase(unsigned int)>
c000c801:	68 ff ff ff 00       	push   0xffffff
c000c806:	53                   	push   ebx
c000c807:	e8 28 ff ff ff       	call   c000c734 <GDTEntry::setLimit(unsigned int)>
c000c80c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c810:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c815:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c81a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c81e:	83 c4 20             	add    esp,0x20
c000c821:	6a 00                	push   0x0
c000c823:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c827:	53                   	push   ebx
c000c828:	e8 eb fe ff ff       	call   c000c718 <GDTEntry::setBase(unsigned int)>
c000c82d:	68 ff ff ff 00       	push   0xffffff
c000c832:	53                   	push   ebx
c000c833:	e8 fc fe ff ff       	call   c000c734 <GDTEntry::setLimit(unsigned int)>
c000c838:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c83c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c840:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c844:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c848:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c84c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c851:	0d 00 92 c0 00       	or     eax,0xc09200
c000c856:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c85a:	89 d8                	mov    eax,ebx
c000c85c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c860:	80 cc 60             	or     ah,0x60
c000c863:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c867:	83 c4 0c             	add    esp,0xc
c000c86a:	89 f8                	mov    eax,edi
c000c86c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c870:	80 cc 60             	or     ah,0x60
c000c873:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c877:	89 c7                	mov    edi,eax
c000c879:	55                   	push   ebp
c000c87a:	e8 e9 fe ff ff       	call   c000c768 <GDT::addEntry(GDTEntry)>
c000c87f:	83 c4 0c             	add    esp,0xc
c000c882:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c886:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c88a:	55                   	push   ebp
c000c88b:	e8 d8 fe ff ff       	call   c000c768 <GDT::addEntry(GDTEntry)>
c000c890:	83 c4 0c             	add    esp,0xc
c000c893:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c897:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c89b:	55                   	push   ebp
c000c89c:	e8 c7 fe ff ff       	call   c000c768 <GDT::addEntry(GDTEntry)>
c000c8a1:	83 c4 0c             	add    esp,0xc
c000c8a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8ac:	53                   	push   ebx
c000c8ad:	51                   	push   ecx
c000c8ae:	55                   	push   ebp
c000c8af:	e8 b4 fe ff ff       	call   c000c768 <GDT::addEntry(GDTEntry)>
c000c8b4:	83 c4 0c             	add    esp,0xc
c000c8b7:	57                   	push   edi
c000c8b8:	56                   	push   esi
c000c8b9:	55                   	push   ebp
c000c8ba:	e8 a9 fe ff ff       	call   c000c768 <GDT::addEntry(GDTEntry)>
c000c8bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c8c2:	e8 e5 fe ff ff       	call   c000c7ac <GDT::flush()>
c000c8c7:	83 c4 4c             	add    esp,0x4c
c000c8ca:	5b                   	pop    ebx
c000c8cb:	5e                   	pop    esi
c000c8cc:	5f                   	pop    edi
c000c8cd:	5d                   	pop    ebp
c000c8ce:	c3                   	ret    

c000c8cf <idleFunction(void*)>:
c000c8cf:	53                   	push   ebx
c000c8d0:	83 ec 08             	sub    esp,0x8
c000c8d3:	e8 2c 1a 00 00       	call   c000e304 <unlockScheduler()>
c000c8d8:	e8 39 a8 00 00       	call   c0017116 <thisCPU()>
c000c8dd:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c8e4:	74 41                	je     c000c927 <idleFunction(void*)+0x58>
c000c8e6:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c000c8eb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c8f2:	74 33                	je     c000c927 <idleFunction(void*)+0x58>
c000c8f4:	31 db                	xor    ebx,ebx
c000c8f6:	52                   	push   edx
c000c8f7:	52                   	push   edx
c000c8f8:	68 e1 00 00 00       	push   0xe1
c000c8fd:	50                   	push   eax
c000c8fe:	e8 e5 ec ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c000c903:	53                   	push   ebx
c000c904:	83 e0 02             	and    eax,0x2
c000c907:	50                   	push   eax
c000c908:	68 e1 00 00 00       	push   0xe1
c000c90d:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c000c913:	e8 fc ec ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c918:	83 c4 20             	add    esp,0x20
c000c91b:	e8 30 38 ff ff       	call   c0000150 <doTPAUSE>
c000c920:	e8 1b 20 01 00       	call   c001e940 <idleCommon()>
c000c925:	eb f4                	jmp    c000c91b <idleFunction(void*)+0x4c>
c000c927:	fb                   	sti    
c000c928:	f4                   	hlt    
c000c929:	e8 12 20 01 00       	call   c001e940 <idleCommon()>
c000c92e:	eb f7                	jmp    c000c927 <idleFunction(void*)+0x58>

c000c930 <IDTEntry::IDTEntry(bool)>:
c000c930:	83 ec 04             	sub    esp,0x4
c000c933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c937:	88 04 24             	mov    BYTE PTR [esp],al
c000c93a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c93e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c948:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c94c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c950:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c953:	83 e2 f0             	and    edx,0xfffffff0
c000c956:	83 ca 0e             	or     edx,0xe
c000c959:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c95c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c960:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c963:	83 e2 ef             	and    edx,0xffffffef
c000c966:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c969:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000c96d:	74 04                	je     c000c973 <IDTEntry::IDTEntry(bool)+0x43>
c000c96f:	b2 03                	mov    dl,0x3
c000c971:	eb 02                	jmp    c000c975 <IDTEntry::IDTEntry(bool)+0x45>
c000c973:	b2 00                	mov    dl,0x0
c000c975:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c979:	83 e2 03             	and    edx,0x3
c000c97c:	88 d1                	mov    cl,dl
c000c97e:	c1 e1 05             	shl    ecx,0x5
c000c981:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c984:	83 e2 9f             	and    edx,0xffffff9f
c000c987:	09 ca                	or     edx,ecx
c000c989:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c98c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c990:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c993:	83 ca 80             	or     edx,0xffffff80
c000c996:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c999:	90                   	nop
c000c99a:	83 c4 04             	add    esp,0x4
c000c99d:	c3                   	ret    

c000c99e <IDTEntry::setOffset(unsigned int)>:
c000c99e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9a6:	66 89 02             	mov    WORD PTR [edx],ax
c000c9a9:	c1 e8 10             	shr    eax,0x10
c000c9ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000c9b0:	c3                   	ret    
c000c9b1:	90                   	nop

c000c9b2 <IDT::IDT()>:
c000c9b2:	90                   	nop
c000c9b3:	c3                   	ret    

c000c9b4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000c9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9b8:	83 c0 30             	add    eax,0x30
c000c9bb:	c3                   	ret    

c000c9bc <IDT::addEntry(IDTEntry, int)>:
c000c9bc:	53                   	push   ebx
c000c9bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c9c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c9cd:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000c9d0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000c9d4:	5b                   	pop    ebx
c000c9d5:	c3                   	ret    

c000c9d6 <IDT::addEntry(int, void (*)(), bool)>:
c000c9d6:	53                   	push   ebx
c000c9d7:	83 ec 10             	sub    esp,0x10
c000c9da:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c9df:	50                   	push   eax
c000c9e0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c9e4:	53                   	push   ebx
c000c9e5:	e8 46 ff ff ff       	call   c000c930 <IDTEntry::IDTEntry(bool)>
c000c9ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c9ee:	53                   	push   ebx
c000c9ef:	e8 aa ff ff ff       	call   c000c99e <IDTEntry::setOffset(unsigned int)>
c000c9f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c9fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca04:	e8 b3 ff ff ff       	call   c000c9bc <IDT::addEntry(IDTEntry, int)>
c000ca09:	83 c4 30             	add    esp,0x30
c000ca0c:	5b                   	pop    ebx
c000ca0d:	c3                   	ret    

c000ca0e <IDT::flush()>:
c000ca0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca12:	66 c7 05 ac ba 03 c0 ff 07 	mov    WORD PTR ds:0xc003baac,0x7ff
c000ca1b:	a3 ae ba 03 c0       	mov    ds:0xc003baae,eax
c000ca20:	0f 01 1d ac ba 03 c0 	lidtd  ds:0xc003baac
c000ca27:	c3                   	ret    

c000ca28 <IDT::setup()>:
c000ca28:	57                   	push   edi
c000ca29:	56                   	push   esi
c000ca2a:	53                   	push   ebx
c000ca2b:	83 ec 10             	sub    esp,0x10
c000ca2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ca32:	6a 00                	push   0x0
c000ca34:	68 80 03 00 c0       	push   0xc0000380
c000ca39:	6a 00                	push   0x0
c000ca3b:	53                   	push   ebx
c000ca3c:	e8 95 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ca41:	6a 00                	push   0x0
c000ca43:	68 90 03 00 c0       	push   0xc0000390
c000ca48:	6a 01                	push   0x1
c000ca4a:	53                   	push   ebx
c000ca4b:	e8 86 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ca50:	83 c4 20             	add    esp,0x20
c000ca53:	6a 00                	push   0x0
c000ca55:	68 9a 03 00 c0       	push   0xc000039a
c000ca5a:	6a 02                	push   0x2
c000ca5c:	53                   	push   ebx
c000ca5d:	e8 74 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ca62:	6a 00                	push   0x0
c000ca64:	68 a4 03 00 c0       	push   0xc00003a4
c000ca69:	6a 03                	push   0x3
c000ca6b:	53                   	push   ebx
c000ca6c:	e8 65 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ca71:	83 c4 20             	add    esp,0x20
c000ca74:	6a 00                	push   0x0
c000ca76:	68 ae 03 00 c0       	push   0xc00003ae
c000ca7b:	6a 04                	push   0x4
c000ca7d:	53                   	push   ebx
c000ca7e:	e8 53 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ca83:	6a 00                	push   0x0
c000ca85:	68 b8 03 00 c0       	push   0xc00003b8
c000ca8a:	6a 05                	push   0x5
c000ca8c:	53                   	push   ebx
c000ca8d:	e8 44 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ca92:	83 c4 20             	add    esp,0x20
c000ca95:	6a 00                	push   0x0
c000ca97:	68 c2 03 00 c0       	push   0xc00003c2
c000ca9c:	6a 06                	push   0x6
c000ca9e:	53                   	push   ebx
c000ca9f:	e8 32 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000caa4:	6a 00                	push   0x0
c000caa6:	68 cc 03 00 c0       	push   0xc00003cc
c000caab:	6a 07                	push   0x7
c000caad:	53                   	push   ebx
c000caae:	e8 23 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cab3:	83 c4 20             	add    esp,0x20
c000cab6:	6a 00                	push   0x0
c000cab8:	68 d6 03 00 c0       	push   0xc00003d6
c000cabd:	6a 08                	push   0x8
c000cabf:	53                   	push   ebx
c000cac0:	e8 11 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cac5:	6a 00                	push   0x0
c000cac7:	68 de 03 00 c0       	push   0xc00003de
c000cacc:	6a 09                	push   0x9
c000cace:	53                   	push   ebx
c000cacf:	e8 02 ff ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cad4:	83 c4 20             	add    esp,0x20
c000cad7:	6a 00                	push   0x0
c000cad9:	68 e8 03 00 c0       	push   0xc00003e8
c000cade:	6a 0a                	push   0xa
c000cae0:	53                   	push   ebx
c000cae1:	e8 f0 fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cae6:	6a 00                	push   0x0
c000cae8:	68 f0 03 00 c0       	push   0xc00003f0
c000caed:	6a 0b                	push   0xb
c000caef:	53                   	push   ebx
c000caf0:	e8 e1 fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000caf5:	83 c4 20             	add    esp,0x20
c000caf8:	6a 00                	push   0x0
c000cafa:	68 f8 03 00 c0       	push   0xc00003f8
c000caff:	6a 0c                	push   0xc
c000cb01:	53                   	push   ebx
c000cb02:	e8 cf fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb07:	6a 00                	push   0x0
c000cb09:	68 00 04 00 c0       	push   0xc0000400
c000cb0e:	6a 0d                	push   0xd
c000cb10:	53                   	push   ebx
c000cb11:	e8 c0 fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb16:	83 c4 20             	add    esp,0x20
c000cb19:	6a 00                	push   0x0
c000cb1b:	68 08 04 00 c0       	push   0xc0000408
c000cb20:	6a 0e                	push   0xe
c000cb22:	53                   	push   ebx
c000cb23:	e8 ae fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb28:	6a 00                	push   0x0
c000cb2a:	68 10 04 00 c0       	push   0xc0000410
c000cb2f:	6a 0f                	push   0xf
c000cb31:	53                   	push   ebx
c000cb32:	e8 9f fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb37:	83 c4 20             	add    esp,0x20
c000cb3a:	6a 00                	push   0x0
c000cb3c:	68 1a 04 00 c0       	push   0xc000041a
c000cb41:	6a 10                	push   0x10
c000cb43:	53                   	push   ebx
c000cb44:	e8 8d fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb49:	6a 00                	push   0x0
c000cb4b:	68 24 04 00 c0       	push   0xc0000424
c000cb50:	6a 11                	push   0x11
c000cb52:	53                   	push   ebx
c000cb53:	e8 7e fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb58:	83 c4 20             	add    esp,0x20
c000cb5b:	6a 00                	push   0x0
c000cb5d:	68 2e 04 00 c0       	push   0xc000042e
c000cb62:	6a 12                	push   0x12
c000cb64:	53                   	push   ebx
c000cb65:	e8 6c fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb6a:	6a 01                	push   0x1
c000cb6c:	68 38 04 00 c0       	push   0xc0000438
c000cb71:	6a 60                	push   0x60
c000cb73:	53                   	push   ebx
c000cb74:	e8 5d fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb79:	83 c4 20             	add    esp,0x20
c000cb7c:	6a 00                	push   0x0
c000cb7e:	68 42 04 00 c0       	push   0xc0000442
c000cb83:	6a 20                	push   0x20
c000cb85:	53                   	push   ebx
c000cb86:	e8 4b fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb8b:	6a 00                	push   0x0
c000cb8d:	68 4c 04 00 c0       	push   0xc000044c
c000cb92:	6a 21                	push   0x21
c000cb94:	53                   	push   ebx
c000cb95:	e8 3c fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cb9a:	83 c4 20             	add    esp,0x20
c000cb9d:	6a 00                	push   0x0
c000cb9f:	68 56 04 00 c0       	push   0xc0000456
c000cba4:	6a 22                	push   0x22
c000cba6:	53                   	push   ebx
c000cba7:	e8 2a fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cbac:	6a 00                	push   0x0
c000cbae:	68 60 04 00 c0       	push   0xc0000460
c000cbb3:	6a 23                	push   0x23
c000cbb5:	53                   	push   ebx
c000cbb6:	e8 1b fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cbbb:	83 c4 20             	add    esp,0x20
c000cbbe:	6a 00                	push   0x0
c000cbc0:	68 6a 04 00 c0       	push   0xc000046a
c000cbc5:	6a 24                	push   0x24
c000cbc7:	53                   	push   ebx
c000cbc8:	e8 09 fe ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cbcd:	6a 00                	push   0x0
c000cbcf:	68 74 04 00 c0       	push   0xc0000474
c000cbd4:	6a 25                	push   0x25
c000cbd6:	53                   	push   ebx
c000cbd7:	e8 fa fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cbdc:	83 c4 20             	add    esp,0x20
c000cbdf:	6a 00                	push   0x0
c000cbe1:	68 7e 04 00 c0       	push   0xc000047e
c000cbe6:	6a 26                	push   0x26
c000cbe8:	53                   	push   ebx
c000cbe9:	e8 e8 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cbee:	6a 00                	push   0x0
c000cbf0:	68 88 04 00 c0       	push   0xc0000488
c000cbf5:	6a 27                	push   0x27
c000cbf7:	53                   	push   ebx
c000cbf8:	e8 d9 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cbfd:	83 c4 20             	add    esp,0x20
c000cc00:	6a 00                	push   0x0
c000cc02:	68 92 04 00 c0       	push   0xc0000492
c000cc07:	6a 28                	push   0x28
c000cc09:	53                   	push   ebx
c000cc0a:	e8 c7 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc0f:	6a 00                	push   0x0
c000cc11:	68 9c 04 00 c0       	push   0xc000049c
c000cc16:	6a 29                	push   0x29
c000cc18:	53                   	push   ebx
c000cc19:	e8 b8 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc1e:	83 c4 20             	add    esp,0x20
c000cc21:	6a 00                	push   0x0
c000cc23:	68 a6 04 00 c0       	push   0xc00004a6
c000cc28:	6a 2a                	push   0x2a
c000cc2a:	53                   	push   ebx
c000cc2b:	e8 a6 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc30:	6a 00                	push   0x0
c000cc32:	68 b0 04 00 c0       	push   0xc00004b0
c000cc37:	6a 2b                	push   0x2b
c000cc39:	53                   	push   ebx
c000cc3a:	e8 97 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc3f:	83 c4 20             	add    esp,0x20
c000cc42:	6a 00                	push   0x0
c000cc44:	68 ba 04 00 c0       	push   0xc00004ba
c000cc49:	6a 2c                	push   0x2c
c000cc4b:	53                   	push   ebx
c000cc4c:	e8 85 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc51:	6a 00                	push   0x0
c000cc53:	68 c4 04 00 c0       	push   0xc00004c4
c000cc58:	6a 2d                	push   0x2d
c000cc5a:	53                   	push   ebx
c000cc5b:	e8 76 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc60:	83 c4 20             	add    esp,0x20
c000cc63:	6a 00                	push   0x0
c000cc65:	68 ce 04 00 c0       	push   0xc00004ce
c000cc6a:	6a 2e                	push   0x2e
c000cc6c:	53                   	push   ebx
c000cc6d:	e8 64 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc72:	6a 00                	push   0x0
c000cc74:	68 d8 04 00 c0       	push   0xc00004d8
c000cc79:	6a 2f                	push   0x2f
c000cc7b:	53                   	push   ebx
c000cc7c:	e8 55 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc81:	83 c4 20             	add    esp,0x20
c000cc84:	6a 00                	push   0x0
c000cc86:	68 e2 04 00 c0       	push   0xc00004e2
c000cc8b:	6a 30                	push   0x30
c000cc8d:	53                   	push   ebx
c000cc8e:	e8 43 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cc93:	6a 00                	push   0x0
c000cc95:	68 ec 04 00 c0       	push   0xc00004ec
c000cc9a:	6a 31                	push   0x31
c000cc9c:	53                   	push   ebx
c000cc9d:	e8 34 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cca2:	83 c4 20             	add    esp,0x20
c000cca5:	6a 00                	push   0x0
c000cca7:	68 f6 04 00 c0       	push   0xc00004f6
c000ccac:	6a 32                	push   0x32
c000ccae:	53                   	push   ebx
c000ccaf:	e8 22 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ccb4:	6a 00                	push   0x0
c000ccb6:	68 00 05 00 c0       	push   0xc0000500
c000ccbb:	6a 33                	push   0x33
c000ccbd:	53                   	push   ebx
c000ccbe:	e8 13 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ccc3:	83 c4 20             	add    esp,0x20
c000ccc6:	6a 00                	push   0x0
c000ccc8:	68 0a 05 00 c0       	push   0xc000050a
c000cccd:	6a 34                	push   0x34
c000cccf:	53                   	push   ebx
c000ccd0:	e8 01 fd ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ccd5:	6a 00                	push   0x0
c000ccd7:	68 14 05 00 c0       	push   0xc0000514
c000ccdc:	6a 35                	push   0x35
c000ccde:	53                   	push   ebx
c000ccdf:	e8 f2 fc ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cce4:	83 c4 20             	add    esp,0x20
c000cce7:	6a 00                	push   0x0
c000cce9:	68 1e 05 00 c0       	push   0xc000051e
c000ccee:	6a 36                	push   0x36
c000ccf0:	53                   	push   ebx
c000ccf1:	e8 e0 fc ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000ccf6:	6a 00                	push   0x0
c000ccf8:	68 28 05 00 c0       	push   0xc0000528
c000ccfd:	6a 37                	push   0x37
c000ccff:	53                   	push   ebx
c000cd00:	e8 d1 fc ff ff       	call   c000c9d6 <IDT::addEntry(int, void (*)(), bool)>
c000cd05:	83 c4 20             	add    esp,0x20
c000cd08:	e8 02 47 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000cd0d:	52                   	push   edx
c000cd0e:	6a 03                	push   0x3
c000cd10:	6a 02                	push   0x2
c000cd12:	50                   	push   eax
c000cd13:	e8 9e 4c 00 00       	call   c00119b6 <VAS::allocatePages(int, int)>
c000cd18:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cd1f:	89 c6                	mov    esi,eax
c000cd21:	e8 ea 56 00 00       	call   c0012410 <operator new(unsigned long)>
c000cd26:	81 c6 00 20 00 00    	add    esi,0x2000
c000cd2c:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd2f:	89 c7                	mov    edi,eax
c000cd31:	e8 30 40 00 00       	call   c0010d66 <TSS::TSS()>
c000cd36:	83 c4 0c             	add    esp,0xc
c000cd39:	68 d6 03 00 c0       	push   0xc00003d6
c000cd3e:	56                   	push   esi
c000cd3f:	57                   	push   edi
c000cd40:	e8 61 40 00 00       	call   c0010da6 <TSS::setup(unsigned long, unsigned long)>
c000cd45:	59                   	pop    ecx
c000cd46:	89 c6                	mov    esi,eax
c000cd48:	5f                   	pop    edi
c000cd49:	6a 00                	push   0x0
c000cd4b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cd4f:	50                   	push   eax
c000cd50:	e8 db fb ff ff       	call   c000c930 <IDTEntry::IDTEntry(bool)>
c000cd55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd59:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000cd5e:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000cd65:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000cd6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd6f:	80 ce 05             	or     dh,0x5
c000cd72:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000cd75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd7d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000cd80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd83:	e8 86 fc ff ff       	call   c000ca0e <IDT::flush()>
c000cd88:	83 c4 20             	add    esp,0x20
c000cd8b:	5b                   	pop    ebx
c000cd8c:	5e                   	pop    esi
c000cd8d:	5f                   	pop    edi
c000cd8e:	c3                   	ret    

c000cd8f <stringifyxWithBase(unsigned int, char*, int)>:
c000cd8f:	57                   	push   edi
c000cd90:	b9 3f 00 00 00       	mov    ecx,0x3f
c000cd95:	56                   	push   esi
c000cd96:	be 38 8a 03 c0       	mov    esi,0xc0038a38
c000cd9b:	53                   	push   ebx
c000cd9c:	83 ec 40             	sub    esp,0x40
c000cd9f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000cda3:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000cda7:	fc                   	cld    
c000cda8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cdaa:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000cdae:	83 f9 3e             	cmp    ecx,0x3e
c000cdb1:	7e 05                	jle    c000cdb8 <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000cdb3:	b9 3e 00 00 00       	mov    ecx,0x3e
c000cdb8:	89 df                	mov    edi,ebx
c000cdba:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000cdbe:	eb 02                	jmp    c000cdc2 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000cdc0:	89 c7                	mov    edi,eax
c000cdc2:	31 d2                	xor    edx,edx
c000cdc4:	46                   	inc    esi
c000cdc5:	89 f8                	mov    eax,edi
c000cdc7:	f7 f1                	div    ecx
c000cdc9:	39 cf                	cmp    edi,ecx
c000cdcb:	73 f3                	jae    c000cdc0 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000cdcd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cdd0:	eb 02                	jmp    c000cdd4 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000cdd2:	89 c3                	mov    ebx,eax
c000cdd4:	31 d2                	xor    edx,edx
c000cdd6:	4e                   	dec    esi
c000cdd7:	89 d8                	mov    eax,ebx
c000cdd9:	f7 f1                	div    ecx
c000cddb:	39 cb                	cmp    ebx,ecx
c000cddd:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000cde1:	88 16                	mov    BYTE PTR [esi],dl
c000cde3:	73 ed                	jae    c000cdd2 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000cde5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cde9:	83 c4 40             	add    esp,0x40
c000cdec:	5b                   	pop    ebx
c000cded:	5e                   	pop    esi
c000cdee:	5f                   	pop    edi
c000cdef:	c3                   	ret    

c000cdf0 <logc(char)>:
c000cdf0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdf4:	ba fd 03 00 00       	mov    edx,0x3fd
c000cdf9:	ec                   	in     al,dx
c000cdfa:	a8 20                	test   al,0x20
c000cdfc:	74 fb                	je     c000cdf9 <logc(char)+0x9>
c000cdfe:	ba f8 03 00 00       	mov    edx,0x3f8
c000ce03:	88 c8                	mov    al,cl
c000ce05:	ee                   	out    dx,al
c000ce06:	c3                   	ret    

c000ce07 <logs(char*)>:
c000ce07:	53                   	push   ebx
c000ce08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ce0c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce0f:	84 c0                	test   al,al
c000ce11:	74 0f                	je     c000ce22 <logs(char*)+0x1b>
c000ce13:	50                   	push   eax
c000ce14:	43                   	inc    ebx
c000ce15:	e8 d6 ff ff ff       	call   c000cdf0 <logc(char)>
c000ce1a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ce1d:	5a                   	pop    edx
c000ce1e:	84 c0                	test   al,al
c000ce20:	75 f1                	jne    c000ce13 <logs(char*)+0xc>
c000ce22:	5b                   	pop    ebx
c000ce23:	c3                   	ret    

c000ce24 <logWriteInt(unsigned int)>:
c000ce24:	83 ec 10             	sub    esp,0x10
c000ce27:	6a 0a                	push   0xa
c000ce29:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce2d:	50                   	push   eax
c000ce2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce32:	e8 58 ff ff ff       	call   c000cd8f <stringifyxWithBase(unsigned int, char*, int)>
c000ce37:	50                   	push   eax
c000ce38:	e8 ca ff ff ff       	call   c000ce07 <logs(char*)>
c000ce3d:	83 c4 20             	add    esp,0x20
c000ce40:	c3                   	ret    

c000ce41 <logWriteIntBase(unsigned int, int)>:
c000ce41:	83 ec 10             	sub    esp,0x10
c000ce44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce48:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ce4c:	50                   	push   eax
c000ce4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce51:	e8 39 ff ff ff       	call   c000cd8f <stringifyxWithBase(unsigned int, char*, int)>
c000ce56:	50                   	push   eax
c000ce57:	e8 ab ff ff ff       	call   c000ce07 <logs(char*)>
c000ce5c:	83 c4 20             	add    esp,0x20
c000ce5f:	c3                   	ret    

c000ce60 <kprintf(char const*, ...)>:
c000ce60:	55                   	push   ebp
c000ce61:	57                   	push   edi
c000ce62:	56                   	push   esi
c000ce63:	53                   	push   ebx
c000ce64:	83 ec 0c             	sub    esp,0xc
c000ce67:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ce6b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ce6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ce73:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ce76:	84 c0                	test   al,al
c000ce78:	74 4a                	je     c000cec4 <kprintf(char const*, ...)+0x64>
c000ce7a:	31 db                	xor    ebx,ebx
c000ce7c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ce7f:	3c 25                	cmp    al,0x25
c000ce81:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ce84:	0f 85 e4 00 00 00    	jne    c000cf6e <kprintf(char const*, ...)+0x10e>
c000ce8a:	83 c3 02             	add    ebx,0x2
c000ce8d:	8a 07                	mov    al,BYTE PTR [edi]
c000ce8f:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ce92:	83 e8 25             	sub    eax,0x25
c000ce95:	3c 53                	cmp    al,0x53
c000ce97:	0f 87 ba 00 00 00    	ja     c000cf57 <kprintf(char const*, ...)+0xf7>
c000ce9d:	0f b6 c0             	movzx  eax,al
c000cea0:	ff 24 85 8c 8b 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc7474]
c000cea7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ceab:	89 c8                	mov    eax,ecx
c000cead:	83 c1 04             	add    ecx,0x4
c000ceb0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ceb4:	ff 30                	push   DWORD PTR [eax]
c000ceb6:	e8 4c ff ff ff       	call   c000ce07 <logs(char*)>
c000cebb:	58                   	pop    eax
c000cebc:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cec0:	84 c0                	test   al,al
c000cec2:	75 b8                	jne    c000ce7c <kprintf(char const*, ...)+0x1c>
c000cec4:	83 c4 0c             	add    esp,0xc
c000cec7:	5b                   	pop    ebx
c000cec8:	5e                   	pop    esi
c000cec9:	5f                   	pop    edi
c000ceca:	5d                   	pop    ebp
c000cecb:	c3                   	ret    
c000cecc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ced0:	89 d0                	mov    eax,edx
c000ced2:	83 c2 04             	add    edx,0x4
c000ced5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ced9:	ff 30                	push   DWORD PTR [eax]
c000cedb:	e8 44 ff ff ff       	call   c000ce24 <logWriteInt(unsigned int)>
c000cee0:	58                   	pop    eax
c000cee1:	eb d9                	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cee3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cee7:	89 d0                	mov    eax,edx
c000cee9:	83 c2 04             	add    edx,0x4
c000ceec:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ceef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cef3:	50                   	push   eax
c000cef4:	e8 f7 fe ff ff       	call   c000cdf0 <logc(char)>
c000cef9:	58                   	pop    eax
c000cefa:	eb c0                	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cefc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf00:	89 c8                	mov    eax,ecx
c000cf02:	83 c1 04             	add    ecx,0x4
c000cf05:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf09:	ff 30                	push   DWORD PTR [eax]
c000cf0b:	e8 14 ff ff ff       	call   c000ce24 <logWriteInt(unsigned int)>
c000cf10:	5f                   	pop    edi
c000cf11:	eb a9                	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cf13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf17:	89 c8                	mov    eax,ecx
c000cf19:	83 c1 04             	add    ecx,0x4
c000cf1c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf20:	6a 10                	push   0x10
c000cf22:	ff 30                	push   DWORD PTR [eax]
c000cf24:	e8 18 ff ff ff       	call   c000ce41 <logWriteIntBase(unsigned int, int)>
c000cf29:	59                   	pop    ecx
c000cf2a:	5f                   	pop    edi
c000cf2b:	eb 8f                	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cf2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf31:	89 d0                	mov    eax,edx
c000cf33:	83 c2 08             	add    edx,0x8
c000cf36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf3a:	6a 10                	push   0x10
c000cf3c:	ff 30                	push   DWORD PTR [eax]
c000cf3e:	e8 fe fe ff ff       	call   c000ce41 <logWriteIntBase(unsigned int, int)>
c000cf43:	58                   	pop    eax
c000cf44:	5a                   	pop    edx
c000cf45:	e9 72 ff ff ff       	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cf4a:	6a 25                	push   0x25
c000cf4c:	e8 9f fe ff ff       	call   c000cdf0 <logc(char)>
c000cf51:	58                   	pop    eax
c000cf52:	e9 65 ff ff ff       	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cf57:	6a 25                	push   0x25
c000cf59:	e8 92 fe ff ff       	call   c000cdf0 <logc(char)>
c000cf5e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cf61:	50                   	push   eax
c000cf62:	e8 89 fe ff ff       	call   c000cdf0 <logc(char)>
c000cf67:	5a                   	pop    edx
c000cf68:	59                   	pop    ecx
c000cf69:	e9 4e ff ff ff       	jmp    c000cebc <kprintf(char const*, ...)+0x5c>
c000cf6e:	50                   	push   eax
c000cf6f:	89 eb                	mov    ebx,ebp
c000cf71:	e8 7a fe ff ff       	call   c000cdf0 <logc(char)>
c000cf76:	89 fd                	mov    ebp,edi
c000cf78:	58                   	pop    eax
c000cf79:	e9 3e ff ff ff       	jmp    c000cebc <kprintf(char const*, ...)+0x5c>

c000cf7e <panic(char const*)>:
c000cf7e:	55                   	push   ebp
c000cf7f:	89 e5                	mov    ebp,esp
c000cf81:	53                   	push   ebx
c000cf82:	50                   	push   eax
c000cf83:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000cf86:	fa                   	cli    
c000cf87:	c6 05 b2 ba 03 c0 01 	mov    BYTE PTR ds:0xc003bab2,0x1
c000cf8e:	53                   	push   ebx
c000cf8f:	c6 05 40 ad 03 c0 00 	mov    BYTE PTR ds:0xc003ad40,0x0
c000cf96:	68 dc 8c 03 c0       	push   0xc0038cdc
c000cf9b:	e8 c0 fe ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000cfa0:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000cfa5:	52                   	push   edx
c000cfa6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfac:	e8 36 36 00 00       	call   c00105e7 <setActiveTerminal(VgaText*)>
c000cfb1:	83 c4 0c             	add    esp,0xc
c000cfb4:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000cfb9:	6a 01                	push   0x1
c000cfbb:	6a 0f                	push   0xf
c000cfbd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfc3:	e8 5e 30 00 00       	call   c0010026 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000cfc8:	59                   	pop    ecx
c000cfc9:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000cfce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfd4:	e8 af 38 00 00       	call   c0010888 <VgaText::clearScreen()>
c000cfd9:	58                   	pop    eax
c000cfda:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000cfdf:	5a                   	pop    edx
c000cfe0:	68 f5 8c 03 c0       	push   0xc0038cf5
c000cfe5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000cfeb:	e8 16 3a 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000cff0:	59                   	pop    ecx
c000cff1:	58                   	pop    eax
c000cff2:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000cff7:	68 78 8a 03 c0       	push   0xc0038a78
c000cffc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d002:	e8 ff 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d007:	58                   	pop    eax
c000d008:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d00d:	5a                   	pop    edx
c000d00e:	68 11 8d 03 c0       	push   0xc0038d11
c000d013:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d019:	e8 e8 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d01e:	59                   	pop    ecx
c000d01f:	58                   	pop    eax
c000d020:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d025:	53                   	push   ebx
c000d026:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d02c:	e8 d5 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d031:	58                   	pop    eax
c000d032:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d037:	5a                   	pop    edx
c000d038:	68 31 8d 03 c0       	push   0xc0038d31
c000d03d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d043:	e8 be 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d048:	59                   	pop    ecx
c000d049:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d04e:	5b                   	pop    ebx
c000d04f:	68 b4 8a 03 c0       	push   0xc0038ab4
c000d054:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d05a:	e8 a7 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d05f:	58                   	pop    eax
c000d060:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d065:	5a                   	pop    edx
c000d066:	68 11 8d 03 c0       	push   0xc0038d11
c000d06b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d071:	e8 90 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d076:	59                   	pop    ecx
c000d077:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d07c:	5b                   	pop    ebx
c000d07d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d080:	83 c0 0c             	add    eax,0xc
c000d083:	50                   	push   eax
c000d084:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d089:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d08f:	e8 72 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d094:	58                   	pop    eax
c000d095:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d09a:	5a                   	pop    edx
c000d09b:	68 30 8d 03 c0       	push   0xc0038d30
c000d0a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0a6:	e8 5b 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d0ab:	59                   	pop    ecx
c000d0ac:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d0b1:	5b                   	pop    ebx
c000d0b2:	68 e0 8a 03 c0       	push   0xc0038ae0
c000d0b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0bd:	e8 44 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d0c2:	58                   	pop    eax
c000d0c3:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d0c8:	5a                   	pop    edx
c000d0c9:	68 20 8b 03 c0       	push   0xc0038b20
c000d0ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0d4:	e8 2d 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d0d9:	59                   	pop    ecx
c000d0da:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d0df:	5b                   	pop    ebx
c000d0e0:	68 1c 8d 03 c0       	push   0xc0038d1c
c000d0e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0eb:	e8 16 39 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d0f0:	58                   	pop    eax
c000d0f1:	5a                   	pop    edx
c000d0f2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d0f5:	68 34 8d 03 c0       	push   0xc0038d34
c000d0fa:	e8 61 fd ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000d0ff:	59                   	pop    ecx
c000d100:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d103:	5b                   	pop    ebx
c000d104:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d107:	68 3d 8d 03 c0       	push   0xc0038d3d
c000d10c:	e8 4f fd ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000d111:	5a                   	pop    edx
c000d112:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d115:	59                   	pop    ecx
c000d116:	8b 00                	mov    eax,DWORD PTR [eax]
c000d118:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d11b:	68 d9 9b 03 c0       	push   0xc0039bd9
c000d120:	e8 3b fd ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000d125:	5b                   	pop    ebx
c000d126:	58                   	pop    eax
c000d127:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d12c:	68 64 8b 03 c0       	push   0xc0038b64
c000d131:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d137:	e8 ca 38 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d13c:	58                   	pop    eax
c000d13d:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d142:	5a                   	pop    edx
c000d143:	68 46 8d 03 c0       	push   0xc0038d46
c000d148:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d14e:	e8 b3 38 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d153:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d158:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d15e:	e8 f2 17 01 00       	call   c001e955 <CPU::readCR0()>
c000d163:	59                   	pop    ecx
c000d164:	5a                   	pop    edx
c000d165:	50                   	push   eax
c000d166:	53                   	push   ebx
c000d167:	e8 c0 38 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d16c:	59                   	pop    ecx
c000d16d:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d172:	5b                   	pop    ebx
c000d173:	68 50 8d 03 c0       	push   0xc0038d50
c000d178:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d17e:	e8 83 38 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d183:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d188:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d18e:	e8 d4 17 01 00       	call   c001e967 <CPU::readCR2()>
c000d193:	5a                   	pop    edx
c000d194:	59                   	pop    ecx
c000d195:	50                   	push   eax
c000d196:	53                   	push   ebx
c000d197:	e8 90 38 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d19c:	5b                   	pop    ebx
c000d19d:	58                   	pop    eax
c000d19e:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d1a3:	68 5a 8d 03 c0       	push   0xc0038d5a
c000d1a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1ae:	e8 53 38 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d1b3:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d1b8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1be:	e8 b6 17 01 00       	call   c001e979 <CPU::readCR3()>
c000d1c3:	5a                   	pop    edx
c000d1c4:	59                   	pop    ecx
c000d1c5:	50                   	push   eax
c000d1c6:	53                   	push   ebx
c000d1c7:	e8 60 38 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d1cc:	5b                   	pop    ebx
c000d1cd:	58                   	pop    eax
c000d1ce:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d1d3:	68 6d 8d 03 c0       	push   0xc0038d6d
c000d1d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1de:	e8 23 38 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d1e3:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d1e8:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d1ee:	e8 98 17 01 00       	call   c001e98b <CPU::readCR4()>
c000d1f3:	5a                   	pop    edx
c000d1f4:	59                   	pop    ecx
c000d1f5:	50                   	push   eax
c000d1f6:	53                   	push   ebx
c000d1f7:	e8 30 38 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d1fc:	5b                   	pop    ebx
c000d1fd:	58                   	pop    eax
c000d1fe:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d203:	68 77 8d 03 c0       	push   0xc0038d77
c000d208:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d20e:	e8 f3 37 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d213:	5a                   	pop    edx
c000d214:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d219:	59                   	pop    ecx
c000d21a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d220:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d223:	50                   	push   eax
c000d224:	e8 03 38 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d229:	5b                   	pop    ebx
c000d22a:	58                   	pop    eax
c000d22b:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d230:	68 8e 8d 03 c0       	push   0xc0038d8e
c000d235:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d23b:	e8 c6 37 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d240:	5a                   	pop    edx
c000d241:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d246:	59                   	pop    ecx
c000d247:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d24d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d250:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d253:	50                   	push   eax
c000d254:	e8 d3 37 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d259:	5b                   	pop    ebx
c000d25a:	58                   	pop    eax
c000d25b:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d260:	68 8e 8d 03 c0       	push   0xc0038d8e
c000d265:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d26b:	e8 96 37 00 00       	call   c0010a06 <VgaText::puts(char const*)>
c000d270:	59                   	pop    ecx
c000d271:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c000d276:	5b                   	pop    ebx
c000d277:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d27d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d280:	8b 12                	mov    edx,DWORD PTR [edx]
c000d282:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d285:	50                   	push   eax
c000d286:	e8 a1 37 00 00       	call   c0010a2c <VgaText::putx(unsigned int)>
c000d28b:	83 c4 10             	add    esp,0x10
c000d28e:	b2 fe                	mov    dl,0xfe
c000d290:	e4 60                	in     al,0x60
c000d292:	3c 1c                	cmp    al,0x1c
c000d294:	74 04                	je     c000d29a <panic(char const*)+0x31c>
c000d296:	3c 5a                	cmp    al,0x5a
c000d298:	75 f6                	jne    c000d290 <panic(char const*)+0x312>
c000d29a:	e4 64                	in     al,0x64
c000d29c:	a8 02                	test   al,0x2
c000d29e:	75 fa                	jne    c000d29a <panic(char const*)+0x31c>
c000d2a0:	88 d0                	mov    al,dl
c000d2a2:	e6 64                	out    0x64,al
c000d2a4:	fa                   	cli    
c000d2a5:	f4                   	hlt    
c000d2a6:	eb e8                	jmp    c000d290 <panic(char const*)+0x312>

c000d2a8 <sbrk>:
c000d2a8:	55                   	push   ebp
c000d2a9:	57                   	push   edi
c000d2aa:	56                   	push   esi
c000d2ab:	53                   	push   ebx
c000d2ac:	83 ec 1c             	sub    esp,0x1c
c000d2af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d2b3:	85 db                	test   ebx,ebx
c000d2b5:	74 37                	je     c000d2ee <sbrk+0x46>
c000d2b7:	78 3f                	js     c000d2f8 <sbrk+0x50>
c000d2b9:	e8 58 9e 00 00       	call   c0017116 <thisCPU()>
c000d2be:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d2c4:	83 e0 01             	and    eax,0x1
c000d2c7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d2cb:	a1 2c ad 03 c0       	mov    eax,ds:0xc003ad2c
c000d2d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d2da:	89 d8                	mov    eax,ebx
c000d2dc:	78 35                	js     c000d313 <sbrk+0x6b>
c000d2de:	c1 f8 0c             	sar    eax,0xc
c000d2e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d2e5:	89 c7                	mov    edi,eax
c000d2e7:	be 00 00 00 00       	mov    esi,0x0
c000d2ec:	eb 3c                	jmp    c000d32a <sbrk+0x82>
c000d2ee:	a1 2c ad 03 c0       	mov    eax,ds:0xc003ad2c
c000d2f3:	e9 ad 00 00 00       	jmp    c000d3a5 <sbrk+0xfd>
c000d2f8:	83 ec 08             	sub    esp,0x8
c000d2fb:	53                   	push   ebx
c000d2fc:	68 94 8d 03 c0       	push   0xc0038d94
c000d301:	e8 5a fb ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000d306:	83 c4 10             	add    esp,0x10
c000d309:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d30e:	e9 92 00 00 00       	jmp    c000d3a5 <sbrk+0xfd>
c000d313:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d319:	eb c3                	jmp    c000d2de <sbrk+0x36>
c000d31b:	81 05 2c ad 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003ad2c,0x1000
c000d325:	46                   	inc    esi
c000d326:	39 f7                	cmp    edi,esi
c000d328:	74 34                	je     c000d35e <sbrk+0xb6>
c000d32a:	e8 e0 40 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000d32f:	89 c3                	mov    ebx,eax
c000d331:	8b 2d 2c ad 03 c0    	mov    ebp,DWORD PTR ds:0xc003ad2c
c000d337:	e8 c9 06 00 00       	call   c000da05 <Phys::allocatePage()>
c000d33c:	68 01 04 00 00       	push   0x401
c000d341:	55                   	push   ebp
c000d342:	50                   	push   eax
c000d343:	53                   	push   ebx
c000d344:	e8 6d 45 00 00       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d349:	83 c4 10             	add    esp,0x10
c000d34c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d351:	74 c8                	je     c000d31b <sbrk+0x73>
c000d353:	8b 1d 2c ad 03 c0    	mov    ebx,DWORD PTR ds:0xc003ad2c
c000d359:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d35c:	eb bd                	jmp    c000d31b <sbrk+0x73>
c000d35e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d363:	74 48                	je     c000d3ad <sbrk+0x105>
c000d365:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d369:	89 d3                	mov    ebx,edx
c000d36b:	c1 eb 0a             	shr    ebx,0xa
c000d36e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d374:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d37a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d37e:	c1 e0 0c             	shl    eax,0xc
c000d381:	01 d0                	add    eax,edx
c000d383:	c1 e8 0a             	shr    eax,0xa
c000d386:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d38b:	2d 00 00 40 00       	sub    eax,0x400000
c000d390:	39 c3                	cmp    ebx,eax
c000d392:	77 0d                	ja     c000d3a1 <sbrk+0xf9>
c000d394:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d397:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d39d:	39 d8                	cmp    eax,ebx
c000d39f:	73 f3                	jae    c000d394 <sbrk+0xec>
c000d3a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3a5:	83 c4 1c             	add    esp,0x1c
c000d3a8:	5b                   	pop    ebx
c000d3a9:	5e                   	pop    esi
c000d3aa:	5f                   	pop    edi
c000d3ab:	5d                   	pop    ebp
c000d3ac:	c3                   	ret    
c000d3ad:	e8 c7 15 01 00       	call   c001e979 <CPU::readCR3()>
c000d3b2:	83 ec 0c             	sub    esp,0xc
c000d3b5:	50                   	push   eax
c000d3b6:	e8 e2 15 01 00       	call   c001e99d <CPU::writeCR3(unsigned long)>
c000d3bb:	83 c4 10             	add    esp,0x10
c000d3be:	eb e1                	jmp    c000d3a1 <sbrk+0xf9>

c000d3c0 <mmap>:
c000d3c0:	83 ec 18             	sub    esp,0x18
c000d3c3:	68 c4 8d 03 c0       	push   0xc0038dc4
c000d3c8:	e8 b1 fb ff ff       	call   c000cf7e <panic(char const*)>
c000d3cd:	b8 00 00 00 00       	mov    eax,0x0
c000d3d2:	83 c4 1c             	add    esp,0x1c
c000d3d5:	c3                   	ret    

c000d3d6 <munmap>:
c000d3d6:	83 ec 18             	sub    esp,0x18
c000d3d9:	68 c9 8d 03 c0       	push   0xc0038dc9
c000d3de:	e8 9b fb ff ff       	call   c000cf7e <panic(char const*)>
c000d3e3:	b8 00 00 00 00       	mov    eax,0x0
c000d3e8:	83 c4 1c             	add    esp,0x1c
c000d3eb:	c3                   	ret    

c000d3ec <liballoc_lock()>:
c000d3ec:	83 ec 0c             	sub    esp,0xc
c000d3ef:	e8 0e 0f 00 00       	call   c000e302 <lockScheduler()>
c000d3f4:	b8 00 00 00 00       	mov    eax,0x0
c000d3f9:	83 c4 0c             	add    esp,0xc
c000d3fc:	c3                   	ret    

c000d3fd <liballoc_unlock()>:
c000d3fd:	83 ec 0c             	sub    esp,0xc
c000d400:	e8 ff 0e 00 00       	call   c000e304 <unlockScheduler()>
c000d405:	b8 00 00 00 00       	mov    eax,0x0
c000d40a:	83 c4 0c             	add    esp,0xc
c000d40d:	c3                   	ret    

c000d40e <liballoc_alloc(int)>:
c000d40e:	83 ec 0c             	sub    esp,0xc
c000d411:	e8 f9 3f 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000d416:	83 ec 04             	sub    esp,0x4
c000d419:	6a 01                	push   0x1
c000d41b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d41f:	50                   	push   eax
c000d420:	e8 91 45 00 00       	call   c00119b6 <VAS::allocatePages(int, int)>
c000d425:	83 c4 1c             	add    esp,0x1c
c000d428:	c3                   	ret    

c000d429 <liballoc_free(void*, int)>:
c000d429:	83 ec 0c             	sub    esp,0xc
c000d42c:	e8 de 3f 00 00       	call   c001140f <Virt::getAKernelVAS()>
c000d431:	83 ec 08             	sub    esp,0x8
c000d434:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d438:	50                   	push   eax
c000d439:	e8 9a 42 00 00       	call   c00116d8 <VAS::freeAllocatedPages(unsigned long)>
c000d43e:	b8 00 00 00 00       	mov    eax,0x0
c000d443:	83 c4 1c             	add    esp,0x1c
c000d446:	c3                   	ret    

c000d447 <realloc>:
c000d447:	83 ec 14             	sub    esp,0x14
c000d44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d44e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d452:	e8 47 42 ff ff       	call   c000169e <dlrealloc>
c000d457:	83 c4 1c             	add    esp,0x1c
c000d45a:	c3                   	ret    

c000d45b <malloc>:
c000d45b:	83 ec 18             	sub    esp,0x18
c000d45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d462:	e8 fa 3c ff ff       	call   c0001161 <dlmalloc>
c000d467:	83 c4 1c             	add    esp,0x1c
c000d46a:	c3                   	ret    

c000d46b <free>:
c000d46b:	83 ec 18             	sub    esp,0x18
c000d46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d472:	e8 8f 39 ff ff       	call   c0000e06 <dlfree>
c000d477:	83 c4 1c             	add    esp,0x1c
c000d47a:	c3                   	ret    

c000d47b <rfree>:
c000d47b:	83 ec 18             	sub    esp,0x18
c000d47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d482:	e8 e4 ff ff ff       	call   c000d46b <free>
c000d487:	83 c4 1c             	add    esp,0x1c
c000d48a:	c3                   	ret    

c000d48b <calloc>:
c000d48b:	56                   	push   esi
c000d48c:	53                   	push   ebx
c000d48d:	83 ec 10             	sub    esp,0x10
c000d490:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d494:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d499:	53                   	push   ebx
c000d49a:	e8 bc ff ff ff       	call   c000d45b <malloc>
c000d49f:	89 c6                	mov    esi,eax
c000d4a1:	83 c4 0c             	add    esp,0xc
c000d4a4:	53                   	push   ebx
c000d4a5:	6a 00                	push   0x0
c000d4a7:	50                   	push   eax
c000d4a8:	e8 2b 32 ff ff       	call   c00006d8 <memset>
c000d4ad:	89 f0                	mov    eax,esi
c000d4af:	83 c4 14             	add    esp,0x14
c000d4b2:	5b                   	pop    ebx
c000d4b3:	5e                   	pop    esi
c000d4b4:	c3                   	ret    

c000d4b5 <hwTextMode_loadInData(VgaText*)>:
c000d4b5:	57                   	push   edi
c000d4b6:	56                   	push   esi
c000d4b7:	53                   	push   ebx
c000d4b8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d4bc:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d4c2:	85 c0                	test   eax,eax
c000d4c4:	7e 30                	jle    c000d4f6 <hwTextMode_loadInData(VgaText*)+0x41>
c000d4c6:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d4c9:	31 f6                	xor    esi,esi
c000d4cb:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d4ce:	31 c0                	xor    eax,eax
c000d4d0:	c1 e1 05             	shl    ecx,0x5
c000d4d3:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d4d9:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d4dd:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d4e1:	40                   	inc    eax
c000d4e2:	83 f8 50             	cmp    eax,0x50
c000d4e5:	75 f2                	jne    c000d4d9 <hwTextMode_loadInData(VgaText*)+0x24>
c000d4e7:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d4ed:	46                   	inc    esi
c000d4ee:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d4f4:	7f d5                	jg     c000d4cb <hwTextMode_loadInData(VgaText*)+0x16>
c000d4f6:	5b                   	pop    ebx
c000d4f7:	5e                   	pop    esi
c000d4f8:	5f                   	pop    edi
c000d4f9:	c3                   	ret    

c000d4fa <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d4fa:	56                   	push   esi
c000d4fb:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d500:	53                   	push   ebx
c000d501:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d505:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d509:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d50f:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d515:	c1 e0 04             	shl    eax,0x4
c000d518:	83 e6 0f             	and    esi,0xf
c000d51b:	0f b6 c0             	movzx  eax,al
c000d51e:	41                   	inc    ecx
c000d51f:	09 f0                	or     eax,esi
c000d521:	83 c2 02             	add    edx,0x2
c000d524:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d528:	c1 e0 08             	shl    eax,0x8
c000d52b:	09 f0                	or     eax,esi
c000d52d:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d531:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d537:	75 d0                	jne    c000d509 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d539:	5b                   	pop    ebx
c000d53a:	5e                   	pop    esi
c000d53b:	c3                   	ret    

c000d53c <hwTextMode_showCursor(VgaText*, bool)>:
c000d53c:	56                   	push   esi
c000d53d:	53                   	push   ebx
c000d53e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d543:	74 38                	je     c000d57d <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d545:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d54a:	b0 0a                	mov    al,0xa
c000d54c:	89 da                	mov    edx,ebx
c000d54e:	ee                   	out    dx,al
c000d54f:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d554:	89 ca                	mov    edx,ecx
c000d556:	ec                   	in     al,dx
c000d557:	b2 0f                	mov    dl,0xf
c000d559:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d55d:	83 e0 c0             	and    eax,0xffffffc0
c000d560:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d566:	09 d0                	or     eax,edx
c000d568:	89 ca                	mov    edx,ecx
c000d56a:	ee                   	out    dx,al
c000d56b:	b0 0b                	mov    al,0xb
c000d56d:	89 da                	mov    edx,ebx
c000d56f:	ee                   	out    dx,al
c000d570:	89 ca                	mov    edx,ecx
c000d572:	ec                   	in     al,dx
c000d573:	83 e0 e0             	and    eax,0xffffffe0
c000d576:	83 c8 0f             	or     eax,0xf
c000d579:	ee                   	out    dx,al
c000d57a:	5b                   	pop    ebx
c000d57b:	5e                   	pop    esi
c000d57c:	c3                   	ret    
c000d57d:	b0 0a                	mov    al,0xa
c000d57f:	ba d4 03 00 00       	mov    edx,0x3d4
c000d584:	ee                   	out    dx,al
c000d585:	b0 20                	mov    al,0x20
c000d587:	ba d5 03 00 00       	mov    edx,0x3d5
c000d58c:	ee                   	out    dx,al
c000d58d:	5b                   	pop    ebx
c000d58e:	5e                   	pop    esi
c000d58f:	c3                   	ret    

c000d590 <hwTextMode_update(VgaText*)>:
c000d590:	c3                   	ret    

c000d591 <hwTextMode_updateCursor(VgaText*)>:
c000d591:	56                   	push   esi
c000d592:	b9 19 00 00 00       	mov    ecx,0x19
c000d597:	53                   	push   ebx
c000d598:	be d4 03 00 00       	mov    esi,0x3d4
c000d59d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5a1:	89 f2                	mov    edx,esi
c000d5a3:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d5a9:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d5af:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d5b2:	c1 e1 04             	shl    ecx,0x4
c000d5b5:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d5bb:	b0 0f                	mov    al,0xf
c000d5bd:	ee                   	out    dx,al
c000d5be:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d5c3:	88 c8                	mov    al,cl
c000d5c5:	89 da                	mov    edx,ebx
c000d5c7:	ee                   	out    dx,al
c000d5c8:	b0 0e                	mov    al,0xe
c000d5ca:	89 f2                	mov    edx,esi
c000d5cc:	ee                   	out    dx,al
c000d5cd:	89 c8                	mov    eax,ecx
c000d5cf:	89 da                	mov    edx,ebx
c000d5d1:	66 c1 e8 08          	shr    ax,0x8
c000d5d5:	ee                   	out    dx,al
c000d5d6:	5b                   	pop    ebx
c000d5d7:	5e                   	pop    esi
c000d5d8:	c3                   	ret    

c000d5d9 <hwTextMode_disableBlink(VgaText*, bool)>:
c000d5d9:	ba da 03 00 00       	mov    edx,0x3da
c000d5de:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d5e3:	75 18                	jne    c000d5fd <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d5e5:	ec                   	in     al,dx
c000d5e6:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d5eb:	b0 30                	mov    al,0x30
c000d5ed:	89 ca                	mov    edx,ecx
c000d5ef:	ee                   	out    dx,al
c000d5f0:	ba c1 03 00 00       	mov    edx,0x3c1
c000d5f5:	ec                   	in     al,dx
c000d5f6:	83 c8 08             	or     eax,0x8
c000d5f9:	89 ca                	mov    edx,ecx
c000d5fb:	ee                   	out    dx,al
c000d5fc:	c3                   	ret    
c000d5fd:	ec                   	in     al,dx
c000d5fe:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d603:	b0 30                	mov    al,0x30
c000d605:	89 ca                	mov    edx,ecx
c000d607:	ee                   	out    dx,al
c000d608:	ba c1 03 00 00       	mov    edx,0x3c1
c000d60d:	ec                   	in     al,dx
c000d60e:	83 e0 f7             	and    eax,0xfffffff7
c000d611:	89 ca                	mov    edx,ecx
c000d613:	ee                   	out    dx,al
c000d614:	c3                   	ret    

c000d615 <hwTextMode_scrollScreen(VgaText*)>:
c000d615:	55                   	push   ebp
c000d616:	bd 02 00 00 00       	mov    ebp,0x2
c000d61b:	57                   	push   edi
c000d61c:	56                   	push   esi
c000d61d:	53                   	push   ebx
c000d61e:	83 ec 1c             	sub    esp,0x1c
c000d621:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d629:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d62d:	31 c0                	xor    eax,eax
c000d62f:	eb 0b                	jmp    c000d63c <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d631:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d637:	74 57                	je     c000d690 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d639:	43                   	inc    ebx
c000d63a:	89 f0                	mov    eax,esi
c000d63c:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d642:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d648:	88 13                	mov    BYTE PTR [ebx],dl
c000d64a:	8d 70 01             	lea    esi,[eax+0x1]
c000d64d:	83 fd 18             	cmp    ebp,0x18
c000d650:	75 df                	jne    c000d631 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d652:	a8 01                	test   al,0x1
c000d654:	75 13                	jne    c000d669 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d656:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d659:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d65f:	75 d8                	jne    c000d639 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d661:	83 c4 1c             	add    esp,0x1c
c000d664:	5b                   	pop    ebx
c000d665:	5e                   	pop    esi
c000d666:	5f                   	pop    edi
c000d667:	5d                   	pop    ebp
c000d668:	c3                   	ret    
c000d669:	83 ec 08             	sub    esp,0x8
c000d66c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d670:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d677:	50                   	push   eax
c000d678:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d67c:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d683:	50                   	push   eax
c000d684:	e8 bd 29 00 00       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c000d689:	83 c4 10             	add    esp,0x10
c000d68c:	88 07                	mov    BYTE PTR [edi],al
c000d68e:	eb c9                	jmp    c000d659 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d690:	45                   	inc    ebp
c000d691:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d699:	eb 8e                	jmp    c000d629 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d69b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d69b:	56                   	push   esi
c000d69c:	53                   	push   ebx
c000d69d:	83 ec 0c             	sub    esp,0xc
c000d6a0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d6a8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d6ad:	50                   	push   eax
c000d6ae:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d6b3:	50                   	push   eax
c000d6b4:	e8 8d 29 00 00       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c000d6b9:	5a                   	pop    edx
c000d6ba:	0f b6 c0             	movzx  eax,al
c000d6bd:	59                   	pop    ecx
c000d6be:	50                   	push   eax
c000d6bf:	89 f0                	mov    eax,esi
c000d6c1:	0f be f0             	movsx  esi,al
c000d6c4:	56                   	push   esi
c000d6c5:	e8 22 2a 00 00       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c000d6ca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d6ce:	ba 19 00 00 00       	mov    edx,0x19
c000d6d3:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d6d9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d6dc:	8d 14 92             	lea    edx,[edx+edx*4]
c000d6df:	c1 e1 04             	shl    ecx,0x4
c000d6e2:	c1 e2 04             	shl    edx,0x4
c000d6e5:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d6e9:	01 ca                	add    edx,ecx
c000d6eb:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d6f3:	83 c4 14             	add    esp,0x14
c000d6f6:	5b                   	pop    ebx
c000d6f7:	5e                   	pop    esi
c000d6f8:	c3                   	ret    

c000d6f9 <setupTextMode()>:
c000d6f9:	c7 05 98 bd 03 c0 d9 d5 00 c0 	mov    DWORD PTR ds:0xc003bd98,0xc000d5d9
c000d703:	c7 05 84 bd 03 c0 b5 d4 00 c0 	mov    DWORD PTR ds:0xc003bd84,0xc000d4b5
c000d70d:	c7 05 80 bd 03 c0 fa d4 00 c0 	mov    DWORD PTR ds:0xc003bd80,0xc000d4fa
c000d717:	c7 05 8c bd 03 c0 15 d6 00 c0 	mov    DWORD PTR ds:0xc003bd8c,0xc000d615
c000d721:	c7 05 94 bd 03 c0 3c d5 00 c0 	mov    DWORD PTR ds:0xc003bd94,0xc000d53c
c000d72b:	c7 05 88 bd 03 c0 90 d5 00 c0 	mov    DWORD PTR ds:0xc003bd88,0xc000d590
c000d735:	c7 05 90 bd 03 c0 91 d5 00 c0 	mov    DWORD PTR ds:0xc003bd90,0xc000d591
c000d73f:	c7 05 9c bd 03 c0 9b d6 00 c0 	mov    DWORD PTR ds:0xc003bd9c,0xc000d69b
c000d749:	c3                   	ret    

c000d74a <kernel_main>:
c000d74a:	57                   	push   edi
c000d74b:	bf f9 03 00 00       	mov    edi,0x3f9
c000d750:	56                   	push   esi
c000d751:	31 f6                	xor    esi,esi
c000d753:	53                   	push   ebx
c000d754:	83 ec 10             	sub    esp,0x10
c000d757:	e8 44 27 00 00       	call   c000fea0 <installVgaTextImplementation()>
c000d75c:	e8 98 ff ff ff       	call   c000d6f9 <setupTextMode()>
c000d761:	89 f0                	mov    eax,esi
c000d763:	89 fa                	mov    edx,edi
c000d765:	ee                   	out    dx,al
c000d766:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d76b:	b0 80                	mov    al,0x80
c000d76d:	89 da                	mov    edx,ebx
c000d76f:	ee                   	out    dx,al
c000d770:	b1 03                	mov    cl,0x3
c000d772:	ba f8 03 00 00       	mov    edx,0x3f8
c000d777:	88 c8                	mov    al,cl
c000d779:	ee                   	out    dx,al
c000d77a:	89 f0                	mov    eax,esi
c000d77c:	89 fa                	mov    edx,edi
c000d77e:	ee                   	out    dx,al
c000d77f:	88 c8                	mov    al,cl
c000d781:	89 da                	mov    edx,ebx
c000d783:	ee                   	out    dx,al
c000d784:	b0 c7                	mov    al,0xc7
c000d786:	ba fa 03 00 00       	mov    edx,0x3fa
c000d78b:	ee                   	out    dx,al
c000d78c:	b0 0b                	mov    al,0xb
c000d78e:	ba fc 03 00 00       	mov    edx,0x3fc
c000d793:	ee                   	out    dx,al
c000d794:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d799:	83 ec 0c             	sub    esp,0xc
c000d79c:	05 ff 0f 00 00       	add    eax,0xfff
c000d7a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d7a6:	50                   	push   eax
c000d7a7:	e8 4d 03 00 00       	call   c000daf9 <Phys::physicalMemorySetup(unsigned int)>
c000d7ac:	e8 df 3b 00 00       	call   c0011390 <Virt::virtualMemorySetup()>
c000d7b1:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d7c0:	75 0e                	jne    c000d7d0 <kernel_main+0x86>
c000d7c2:	89 d8                	mov    eax,ebx
c000d7c4:	25 48 03 00 00       	and    eax,0x348
c000d7c9:	3d 00 03 00 00       	cmp    eax,0x300
c000d7ce:	74 10                	je     c000d7e0 <kernel_main+0x96>
c000d7d0:	83 ec 0c             	sub    esp,0xc
c000d7d3:	68 33 8d 03 c0       	push   0xc0038d33
c000d7d8:	e8 a1 f7 ff ff       	call   c000cf7e <panic(char const*)>
c000d7dd:	83 c4 10             	add    esp,0x10
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	89 1d b4 ba 03 c0    	mov    DWORD PTR ds:0xc003bab4,ebx
c000d7e9:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d7ed:	53                   	push   ebx
c000d7ee:	e8 47 3d 00 00       	call   c001153a <VAS::VAS()>
c000d7f3:	89 1d bc bd 03 c0    	mov    DWORD PTR ds:0xc003bdbc,ebx
c000d7f9:	e8 22 28 ff ff       	call   c0000020 <callGlobalConstructors>
c000d7fe:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d805:	e8 06 4c 00 00       	call   c0012410 <operator new(unsigned long)>
c000d80a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d80d:	89 c6                	mov    esi,eax
c000d80f:	e8 b2 d9 ff ff       	call   c000b1c6 <Computer::Computer()>
c000d814:	6a 00                	push   0x0
c000d816:	89 35 08 b9 03 c0    	mov    DWORD PTR ds:0xc003b908,esi
c000d81c:	6a 00                	push   0x0
c000d81e:	6a 00                	push   0x0
c000d820:	56                   	push   esi
c000d821:	e8 64 de ff ff       	call   c000b68a <Computer::open(int, int, void*)>
c000d826:	83 c4 14             	add    esp,0x14
c000d829:	53                   	push   ebx
c000d82a:	e8 1b 3f 00 00       	call   c001174a <VAS::~VAS()>
c000d82f:	c7 04 24 d0 8d 03 c0 	mov    DWORD PTR [esp],0xc0038dd0
c000d836:	e8 43 f7 ff ff       	call   c000cf7e <panic(char const*)>
c000d83b:	83 c4 20             	add    esp,0x20
c000d83e:	5b                   	pop    ebx
c000d83f:	5e                   	pop    esi
c000d840:	5f                   	pop    edi
c000d841:	c3                   	ret    

c000d842 <Phys::allocateDMA(unsigned long)>:
c000d842:	55                   	push   ebp
c000d843:	31 d2                	xor    edx,edx
c000d845:	57                   	push   edi
c000d846:	31 ed                	xor    ebp,ebp
c000d848:	56                   	push   esi
c000d849:	31 c9                	xor    ecx,ecx
c000d84b:	53                   	push   ebx
c000d84c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d850:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d856:	31 c0                	xor    eax,eax
c000d858:	c1 ee 0c             	shr    esi,0xc
c000d85b:	eb 17                	jmp    c000d874 <Phys::allocateDMA(unsigned long)+0x32>
c000d85d:	85 c9                	test   ecx,ecx
c000d85f:	75 04                	jne    c000d865 <Phys::allocateDMA(unsigned long)+0x23>
c000d861:	89 d5                	mov    ebp,edx
c000d863:	89 d0                	mov    eax,edx
c000d865:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d868:	39 de                	cmp    esi,ebx
c000d86a:	74 20                	je     c000d88c <Phys::allocateDMA(unsigned long)+0x4a>
c000d86c:	42                   	inc    edx
c000d86d:	89 d9                	mov    ecx,ebx
c000d86f:	83 fa 2f             	cmp    edx,0x2f
c000d872:	7f 11                	jg     c000d885 <Phys::allocateDMA(unsigned long)+0x43>
c000d874:	80 ba e0 ba 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4520],0x0
c000d87b:	74 e0                	je     c000d85d <Phys::allocateDMA(unsigned long)+0x1b>
c000d87d:	31 c9                	xor    ecx,ecx
c000d87f:	42                   	inc    edx
c000d880:	83 fa 2f             	cmp    edx,0x2f
c000d883:	7e ef                	jle    c000d874 <Phys::allocateDMA(unsigned long)+0x32>
c000d885:	5b                   	pop    ebx
c000d886:	31 c0                	xor    eax,eax
c000d888:	5e                   	pop    esi
c000d889:	5f                   	pop    edi
c000d88a:	5d                   	pop    ebp
c000d88b:	c3                   	ret    
c000d88c:	8d 14 30             	lea    edx,[eax+esi*1]
c000d88f:	89 d7                	mov    edi,edx
c000d891:	4f                   	dec    edi
c000d892:	79 03                	jns    c000d897 <Phys::allocateDMA(unsigned long)+0x55>
c000d894:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d897:	c1 ff 04             	sar    edi,0x4
c000d89a:	89 c2                	mov    edx,eax
c000d89c:	c1 fa 04             	sar    edx,0x4
c000d89f:	39 fa                	cmp    edx,edi
c000d8a1:	75 2f                	jne    c000d8d2 <Phys::allocateDMA(unsigned long)+0x90>
c000d8a3:	85 db                	test   ebx,ebx
c000d8a5:	74 1a                	je     c000d8c1 <Phys::allocateDMA(unsigned long)+0x7f>
c000d8a7:	be e0 ba 03 c0       	mov    esi,0xc003bae0
c000d8ac:	8d 90 e0 ba 03 c0    	lea    edx,[eax-0x3ffc4520]
c000d8b2:	f7 d6                	not    esi
c000d8b4:	29 c6                	sub    esi,eax
c000d8b6:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d8b9:	42                   	inc    edx
c000d8ba:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d8bd:	39 d9                	cmp    ecx,ebx
c000d8bf:	7f f5                	jg     c000d8b6 <Phys::allocateDMA(unsigned long)+0x74>
c000d8c1:	85 ff                	test   edi,edi
c000d8c3:	74 13                	je     c000d8d8 <Phys::allocateDMA(unsigned long)+0x96>
c000d8c5:	5b                   	pop    ebx
c000d8c6:	05 50 20 0c 00       	add    eax,0xc2050
c000d8cb:	5e                   	pop    esi
c000d8cc:	c1 e0 0c             	shl    eax,0xc
c000d8cf:	5f                   	pop    edi
c000d8d0:	5d                   	pop    ebp
c000d8d1:	c3                   	ret    
c000d8d2:	89 ea                	mov    edx,ebp
c000d8d4:	31 c9                	xor    ecx,ecx
c000d8d6:	eb a7                	jmp    c000d87f <Phys::allocateDMA(unsigned long)+0x3d>
c000d8d8:	5b                   	pop    ebx
c000d8d9:	c1 e0 0c             	shl    eax,0xc
c000d8dc:	5e                   	pop    esi
c000d8dd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d8e2:	5f                   	pop    edi
c000d8e3:	5d                   	pop    ebp
c000d8e4:	c3                   	ret    

c000d8e5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d8e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8ed:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d8f3:	c1 e9 0c             	shr    ecx,0xc
c000d8f6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d8fb:	76 25                	jbe    c000d922 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d8fd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d902:	c1 e8 0c             	shr    eax,0xc
c000d905:	8d 50 10             	lea    edx,[eax+0x10]
c000d908:	85 c9                	test   ecx,ecx
c000d90a:	74 15                	je     c000d921 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d90c:	8d 82 e0 ba 03 c0    	lea    eax,[edx-0x3ffc4520]
c000d912:	8d 94 11 e0 ba 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4520]
c000d919:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d91c:	40                   	inc    eax
c000d91d:	39 d0                	cmp    eax,edx
c000d91f:	75 f8                	jne    c000d919 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d921:	c3                   	ret    
c000d922:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d928:	c1 ea 0c             	shr    edx,0xc
c000d92b:	eb db                	jmp    c000d908 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d92d <Phys::setPageState(unsigned long, bool)>:
c000d92d:	56                   	push   esi
c000d92e:	ba 01 00 00 00       	mov    edx,0x1
c000d933:	53                   	push   ebx
c000d934:	8b 35 30 ad 03 c0    	mov    esi,DWORD PTR ds:0xc003ad30
c000d93a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d93e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d942:	89 c8                	mov    eax,ecx
c000d944:	83 e1 07             	and    ecx,0x7
c000d947:	c1 e8 03             	shr    eax,0x3
c000d94a:	d3 e3                	shl    ebx,cl
c000d94c:	01 c6                	add    esi,eax
c000d94e:	d3 e2                	shl    edx,cl
c000d950:	f7 d2                	not    edx
c000d952:	20 16                	and    BYTE PTR [esi],dl
c000d954:	03 05 30 ad 03 c0    	add    eax,DWORD PTR ds:0xc003ad30
c000d95a:	08 18                	or     BYTE PTR [eax],bl
c000d95c:	5b                   	pop    ebx
c000d95d:	5e                   	pop    esi
c000d95e:	c3                   	ret    

c000d95f <Phys::getPageState(unsigned long)>:
c000d95f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d963:	8b 15 30 ad 03 c0    	mov    edx,DWORD PTR ds:0xc003ad30
c000d969:	89 c8                	mov    eax,ecx
c000d96b:	83 e1 07             	and    ecx,0x7
c000d96e:	c1 e8 03             	shr    eax,0x3
c000d971:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000d975:	d3 f8                	sar    eax,cl
c000d977:	83 e0 01             	and    eax,0x1
c000d97a:	c3                   	ret    

c000d97b <Phys::freePage(unsigned long)>:
c000d97b:	53                   	push   ebx
c000d97c:	83 ec 08             	sub    esp,0x8
c000d97f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d983:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000d989:	76 57                	jbe    c000d9e2 <Phys::freePage(unsigned long)+0x67>
c000d98b:	c1 eb 0c             	shr    ebx,0xc
c000d98e:	53                   	push   ebx
c000d98f:	e8 cb ff ff ff       	call   c000d95f <Phys::getPageState(unsigned long)>
c000d994:	5a                   	pop    edx
c000d995:	84 c0                	test   al,al
c000d997:	74 5b                	je     c000d9f4 <Phys::freePage(unsigned long)+0x79>
c000d999:	a1 cc ba 03 c0       	mov    eax,ds:0xc003bacc
c000d99e:	48                   	dec    eax
c000d99f:	a3 cc ba 03 c0       	mov    ds:0xc003bacc,eax
c000d9a4:	8d 04 80             	lea    eax,[eax+eax*4]
c000d9a7:	8d 04 80             	lea    eax,[eax+eax*4]
c000d9aa:	c1 e0 02             	shl    eax,0x2
c000d9ad:	99                   	cdq    
c000d9ae:	f7 3d d0 ba 03 c0    	idiv   DWORD PTR ds:0xc003bad0
c000d9b4:	39 05 c8 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac8,eax
c000d9ba:	75 13                	jne    c000d9cf <Phys::freePage(unsigned long)+0x54>
c000d9bc:	83 ec 08             	sub    esp,0x8
c000d9bf:	6a 00                	push   0x0
c000d9c1:	53                   	push   ebx
c000d9c2:	e8 66 ff ff ff       	call   c000d92d <Phys::setPageState(unsigned long, bool)>
c000d9c7:	83 c4 10             	add    esp,0x10
c000d9ca:	83 c4 08             	add    esp,0x8
c000d9cd:	5b                   	pop    ebx
c000d9ce:	c3                   	ret    
c000d9cf:	83 ec 0c             	sub    esp,0xc
c000d9d2:	a3 c8 ba 03 c0       	mov    ds:0xc003bac8,eax
c000d9d7:	50                   	push   eax
c000d9d8:	e8 57 28 00 00       	call   c0010234 <VgaText::updateRAMUsageDisplay(int)>
c000d9dd:	83 c4 10             	add    esp,0x10
c000d9e0:	eb da                	jmp    c000d9bc <Phys::freePage(unsigned long)+0x41>
c000d9e2:	68 00 10 00 00       	push   0x1000
c000d9e7:	53                   	push   ebx
c000d9e8:	e8 f8 fe ff ff       	call   c000d8e5 <Phys::freeDMA(unsigned long, unsigned long)>
c000d9ed:	59                   	pop    ecx
c000d9ee:	5b                   	pop    ebx
c000d9ef:	83 c4 08             	add    esp,0x8
c000d9f2:	5b                   	pop    ebx
c000d9f3:	c3                   	ret    
c000d9f4:	c7 44 24 10 eb 8d 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038deb
c000d9fc:	83 c4 08             	add    esp,0x8
c000d9ff:	5b                   	pop    ebx
c000da00:	e9 79 f5 ff ff       	jmp    c000cf7e <panic(char const*)>

c000da05 <Phys::allocatePage()>:
c000da05:	56                   	push   esi
c000da06:	53                   	push   ebx
c000da07:	51                   	push   ecx
c000da08:	8b 35 c0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bac0
c000da0e:	89 f3                	mov    ebx,esi
c000da10:	eb 0a                	jmp    c000da1c <Phys::allocatePage()+0x17>
c000da12:	89 1d c0 ba 03 c0    	mov    DWORD PTR ds:0xc003bac0,ebx
c000da18:	39 de                	cmp    esi,ebx
c000da1a:	74 24                	je     c000da40 <Phys::allocatePage()+0x3b>
c000da1c:	53                   	push   ebx
c000da1d:	e8 3d ff ff ff       	call   c000d95f <Phys::getPageState(unsigned long)>
c000da22:	5a                   	pop    edx
c000da23:	84 c0                	test   al,al
c000da25:	74 4e                	je     c000da75 <Phys::allocatePage()+0x70>
c000da27:	43                   	inc    ebx
c000da28:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000da2e:	75 e2                	jne    c000da12 <Phys::allocatePage()+0xd>
c000da30:	31 db                	xor    ebx,ebx
c000da32:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c000da3c:	39 de                	cmp    esi,ebx
c000da3e:	75 dc                	jne    c000da1c <Phys::allocatePage()+0x17>
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	68 00 10 00 00       	push   0x1000
c000da48:	e8 f5 fd ff ff       	call   c000d842 <Phys::allocateDMA(unsigned long)>
c000da4d:	83 c4 10             	add    esp,0x10
c000da50:	85 c0                	test   eax,eax
c000da52:	75 56                	jne    c000daaa <Phys::allocatePage()+0xa5>
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	68 01 8e 03 c0       	push   0xc0038e01
c000da5c:	e8 1d f5 ff ff       	call   c000cf7e <panic(char const*)>
c000da61:	83 c4 10             	add    esp,0x10
c000da64:	8b 1d c0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bac0
c000da6a:	53                   	push   ebx
c000da6b:	e8 ef fe ff ff       	call   c000d95f <Phys::getPageState(unsigned long)>
c000da70:	5a                   	pop    edx
c000da71:	84 c0                	test   al,al
c000da73:	75 b2                	jne    c000da27 <Phys::allocatePage()+0x22>
c000da75:	6a 01                	push   0x1
c000da77:	53                   	push   ebx
c000da78:	e8 b0 fe ff ff       	call   c000d92d <Phys::setPageState(unsigned long, bool)>
c000da7d:	a1 cc ba 03 c0       	mov    eax,ds:0xc003bacc
c000da82:	59                   	pop    ecx
c000da83:	40                   	inc    eax
c000da84:	5b                   	pop    ebx
c000da85:	a3 cc ba 03 c0       	mov    ds:0xc003bacc,eax
c000da8a:	8d 04 80             	lea    eax,[eax+eax*4]
c000da8d:	8d 04 80             	lea    eax,[eax+eax*4]
c000da90:	c1 e0 02             	shl    eax,0x2
c000da93:	99                   	cdq    
c000da94:	f7 3d d0 ba 03 c0    	idiv   DWORD PTR ds:0xc003bad0
c000da9a:	39 05 c8 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac8,eax
c000daa0:	75 0c                	jne    c000daae <Phys::allocatePage()+0xa9>
c000daa2:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c000daa7:	c1 e0 0c             	shl    eax,0xc
c000daaa:	5a                   	pop    edx
c000daab:	5b                   	pop    ebx
c000daac:	5e                   	pop    esi
c000daad:	c3                   	ret    
c000daae:	83 ec 0c             	sub    esp,0xc
c000dab1:	a3 c8 ba 03 c0       	mov    ds:0xc003bac8,eax
c000dab6:	50                   	push   eax
c000dab7:	e8 78 27 00 00       	call   c0010234 <VgaText::updateRAMUsageDisplay(int)>
c000dabc:	83 c4 10             	add    esp,0x10
c000dabf:	eb e1                	jmp    c000daa2 <Phys::allocatePage()+0x9d>

c000dac1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000dac1:	56                   	push   esi
c000dac2:	53                   	push   ebx
c000dac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dac7:	39 1d c4 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac4,ebx
c000dacd:	73 06                	jae    c000dad5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000dacf:	89 1d c4 ba 03 c0    	mov    DWORD PTR ds:0xc003bac4,ebx
c000dad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dad9:	c1 eb 0c             	shr    ebx,0xc
c000dadc:	c1 e8 0c             	shr    eax,0xc
c000dadf:	39 d8                	cmp    eax,ebx
c000dae1:	73 13                	jae    c000daf6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000dae3:	6a 00                	push   0x0
c000dae5:	8d 70 01             	lea    esi,[eax+0x1]
c000dae8:	50                   	push   eax
c000dae9:	e8 3f fe ff ff       	call   c000d92d <Phys::setPageState(unsigned long, bool)>
c000daee:	5a                   	pop    edx
c000daef:	89 f0                	mov    eax,esi
c000daf1:	59                   	pop    ecx
c000daf2:	39 f3                	cmp    ebx,esi
c000daf4:	75 ed                	jne    c000dae3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000daf6:	5b                   	pop    ebx
c000daf7:	5e                   	pop    esi
c000daf8:	c3                   	ret    

c000daf9 <Phys::physicalMemorySetup(unsigned int)>:
c000daf9:	55                   	push   ebp
c000dafa:	57                   	push   edi
c000dafb:	56                   	push   esi
c000dafc:	53                   	push   ebx
c000dafd:	31 db                	xor    ebx,ebx
c000daff:	83 ec 30             	sub    esp,0x30
c000db02:	6a 30                	push   0x30
c000db04:	6a 00                	push   0x0
c000db06:	68 e0 ba 03 c0       	push   0xc003bae0
c000db0b:	e8 c8 2b ff ff       	call   c00006d8 <memset>
c000db10:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db14:	25 00 f0 ff ff       	and    eax,0xfffff000
c000db19:	05 00 10 00 00       	add    eax,0x1000
c000db1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	83 ec 08             	sub    esp,0x8
c000db28:	6a 01                	push   0x1
c000db2a:	53                   	push   ebx
c000db2b:	43                   	inc    ebx
c000db2c:	e8 fc fd ff ff       	call   c000d92d <Phys::setPageState(unsigned long, bool)>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000db3a:	75 e9                	jne    c000db25 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000db3c:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000db43:	66 85 c0             	test   ax,ax
c000db46:	0f 84 28 01 00 00    	je     c000dc74 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000db4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db50:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000db56:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000db5b:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000db61:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000db67:	89 f1                	mov    ecx,esi
c000db69:	89 fb                	mov    ebx,edi
c000db6b:	01 c1                	add    ecx,eax
c000db6d:	89 d5                	mov    ebp,edx
c000db6f:	11 d3                	adc    ebx,edx
c000db71:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000db74:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000db78:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000db7c:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000db82:	09 dd                	or     ebp,ebx
c000db84:	0f 85 fa 00 00 00    	jne    c000dc84 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000db8a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db96:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000db9e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dba2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dbaa:	eb 45                	jmp    c000dbf1 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000dbac:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000dbb0:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000dbb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbb9:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000dbbd:	0f 84 c1 00 00 00    	je     c000dc84 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dbc3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dbc7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dbca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dbcd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000dbd0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000dbd3:	89 c1                	mov    ecx,eax
c000dbd5:	89 d3                	mov    ebx,edx
c000dbd7:	01 f1                	add    ecx,esi
c000dbd9:	11 fb                	adc    ebx,edi
c000dbdb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dbde:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dbe2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000dbe5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dbe9:	09 d3                	or     ebx,edx
c000dbeb:	0f 85 93 00 00 00    	jne    c000dc84 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dbf1:	49                   	dec    ecx
c000dbf2:	75 b8                	jne    c000dbac <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dbf4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000dbf7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dbfb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dbff:	39 e9                	cmp    ecx,ebp
c000dc01:	89 d9                	mov    ecx,ebx
c000dc03:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc07:	72 a3                	jb     c000dbac <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc09:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000dc0e:	39 f1                	cmp    ecx,esi
c000dc10:	b9 00 00 00 00       	mov    ecx,0x0
c000dc15:	19 f9                	sbb    ecx,edi
c000dc17:	73 93                	jae    c000dbac <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc19:	39 e8                	cmp    eax,ebp
c000dc1b:	89 d1                	mov    ecx,edx
c000dc1d:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dc21:	73 13                	jae    c000dc36 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dc23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dc2a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dc2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc32:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dc36:	83 ec 08             	sub    esp,0x8
c000dc39:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dc3d:	50                   	push   eax
c000dc3e:	e8 7e fe ff ff       	call   c000dac1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dc43:	83 c4 0c             	add    esp,0xc
c000dc46:	89 fa                	mov    edx,edi
c000dc48:	89 f0                	mov    eax,esi
c000dc4a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dc4e:	03 05 d0 ba 03 c0    	add    eax,DWORD PTR ds:0xc003bad0
c000dc54:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dc5b:	a3 d0 ba 03 c0       	mov    ds:0xc003bad0,eax
c000dc60:	52                   	push   edx
c000dc61:	50                   	push   eax
c000dc62:	68 1d 8e 03 c0       	push   0xc0038e1d
c000dc67:	e8 f4 f1 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	e9 38 ff ff ff       	jmp    c000dbac <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc74:	83 ec 0c             	sub    esp,0xc
c000dc77:	68 0f 8e 03 c0       	push   0xc0038e0f
c000dc7c:	e8 fd f2 ff ff       	call   c000cf7e <panic(char const*)>
c000dc81:	83 c4 10             	add    esp,0x10
c000dc84:	bb 40 01 00 00       	mov    ebx,0x140
c000dc89:	83 ec 08             	sub    esp,0x8
c000dc8c:	6a 00                	push   0x0
c000dc8e:	53                   	push   ebx
c000dc8f:	43                   	inc    ebx
c000dc90:	e8 98 fc ff ff       	call   c000d92d <Phys::setPageState(unsigned long, bool)>
c000dc95:	ff 05 d0 ba 03 c0    	inc    DWORD PTR ds:0xc003bad0
c000dc9b:	83 c4 10             	add    esp,0x10
c000dc9e:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dca4:	75 e3                	jne    c000dc89 <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dca6:	83 c4 2c             	add    esp,0x2c
c000dca9:	5b                   	pop    ebx
c000dcaa:	5e                   	pop    esi
c000dcab:	5f                   	pop    edi
c000dcac:	5d                   	pop    ebp
c000dcad:	c3                   	ret    

c000dcae <Pipe::isAtty()>:
c000dcae:	31 c0                	xor    eax,eax
c000dcb0:	c3                   	ret    
c000dcb1:	90                   	nop

c000dcb2 <Pipe::~Pipe()>:
c000dcb2:	83 ec 0c             	sub    esp,0xc
c000dcb5:	ba 7c 8e 03 c0       	mov    edx,0xc0038e7c
c000dcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcbe:	89 10                	mov    DWORD PTR [eax],edx
c000dcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	50                   	push   eax
c000dcc8:	e8 d3 33 00 00       	call   c00110a0 <UnixFile::~UnixFile()>
c000dccd:	83 c4 10             	add    esp,0x10
c000dcd0:	90                   	nop
c000dcd1:	83 c4 0c             	add    esp,0xc
c000dcd4:	c3                   	ret    
c000dcd5:	90                   	nop

c000dcd6 <Pipe::~Pipe()>:
c000dcd6:	83 ec 0c             	sub    esp,0xc
c000dcd9:	83 ec 0c             	sub    esp,0xc
c000dcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce0:	e8 cd ff ff ff       	call   c000dcb2 <Pipe::~Pipe()>
c000dce5:	83 c4 10             	add    esp,0x10
c000dce8:	83 ec 08             	sub    esp,0x8
c000dceb:	6a 20                	push   0x20
c000dced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf1:	e8 29 47 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	83 c4 0c             	add    esp,0xc
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <Pipe::read(unsigned long long, void*, int*)>:
c000dcfe:	55                   	push   ebp
c000dcff:	57                   	push   edi
c000dd00:	56                   	push   esi
c000dd01:	53                   	push   ebx
c000dd02:	83 ec 1c             	sub    esp,0x1c
c000dd05:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd0d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dd11:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dd14:	89 c8                	mov    eax,ecx
c000dd16:	99                   	cdq    
c000dd17:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000dd1b:	74 19                	je     c000dd36 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd1d:	39 f9                	cmp    ecx,edi
c000dd1f:	89 d1                	mov    ecx,edx
c000dd21:	19 f1                	sbb    ecx,esi
c000dd23:	73 11                	jae    c000dd36 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000dd25:	e8 d8 05 00 00       	call   c000e302 <lockScheduler()>
c000dd2a:	e8 07 09 00 00       	call   c000e636 <schedule()>
c000dd2f:	e8 d0 05 00 00       	call   c000e304 <unlockScheduler()>
c000dd34:	eb db                	jmp    c000dd11 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000dd36:	39 f8                	cmp    eax,edi
c000dd38:	89 d1                	mov    ecx,edx
c000dd3a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dd3e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dd42:	19 f1                	sbb    ecx,esi
c000dd44:	73 08                	jae    c000dd4e <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dd51:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000dd54:	29 c6                	sub    esi,eax
c000dd56:	89 f1                	mov    ecx,esi
c000dd58:	c1 f9 1f             	sar    ecx,0x1f
c000dd5b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000dd5f:	89 ca                	mov    edx,ecx
c000dd61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd65:	19 d1                	sbb    ecx,edx
c000dd67:	73 04                	jae    c000dd6d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000dd69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dd6d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000dd71:	89 fd                	mov    ebp,edi
c000dd73:	29 f5                	sub    ebp,esi
c000dd75:	85 f6                	test   esi,esi
c000dd77:	74 12                	je     c000dd8b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000dd79:	52                   	push   edx
c000dd7a:	56                   	push   esi
c000dd7b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000dd83:	e8 d9 28 ff ff       	call   c0000661 <memcpy>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	85 ed                	test   ebp,ebp
c000dd8d:	74 12                	je     c000dda1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000dd8f:	50                   	push   eax
c000dd90:	55                   	push   ebp
c000dd91:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dd94:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000dd98:	56                   	push   esi
c000dd99:	e8 c3 28 ff ff       	call   c0000661 <memcpy>
c000dd9e:	83 c4 10             	add    esp,0x10
c000dda1:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000dda4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dda7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ddaa:	99                   	cdq    
c000ddab:	89 f7                	mov    edi,esi
c000ddad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ddb1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ddb5:	c1 ff 1f             	sar    edi,0x1f
c000ddb8:	57                   	push   edi
c000ddb9:	56                   	push   esi
c000ddba:	52                   	push   edx
c000ddbb:	50                   	push   eax
c000ddbc:	e8 bb 09 01 00       	call   c001e77c <__umoddi3>
c000ddc1:	83 c4 10             	add    esp,0x10
c000ddc4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ddc7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ddcc:	75 10                	jne    c000ddde <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ddce:	83 ec 0c             	sub    esp,0xc
c000ddd1:	68 39 8e 03 c0       	push   0xc0038e39
c000ddd6:	e8 a3 f1 ff ff       	call   c000cf7e <panic(char const*)>
c000dddb:	83 c4 10             	add    esp,0x10
c000ddde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dde2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dde6:	89 10                	mov    DWORD PTR [eax],edx
c000dde8:	83 c4 1c             	add    esp,0x1c
c000ddeb:	31 c0                	xor    eax,eax
c000dded:	5b                   	pop    ebx
c000ddee:	5e                   	pop    esi
c000ddef:	5f                   	pop    edi
c000ddf0:	5d                   	pop    ebp
c000ddf1:	c3                   	ret    

c000ddf2 <Pipe::write(unsigned long long, void*, int*)>:
c000ddf2:	55                   	push   ebp
c000ddf3:	57                   	push   edi
c000ddf4:	56                   	push   esi
c000ddf5:	53                   	push   ebx
c000ddf6:	83 ec 1c             	sub    esp,0x1c
c000ddf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddfd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000de01:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de05:	89 04 24             	mov    DWORD PTR [esp],eax
c000de08:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000de0b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000de0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de12:	89 de                	mov    esi,ebx
c000de14:	89 df                	mov    edi,ebx
c000de16:	c1 ff 1f             	sar    edi,0x1f
c000de19:	01 c6                	add    esi,eax
c000de1b:	89 c8                	mov    eax,ecx
c000de1d:	11 d7                	adc    edi,edx
c000de1f:	99                   	cdq    
c000de20:	39 f1                	cmp    ecx,esi
c000de22:	89 d0                	mov    eax,edx
c000de24:	19 f8                	sbb    eax,edi
c000de26:	b8 01 00 00 00       	mov    eax,0x1
c000de2b:	0f 82 80 00 00 00    	jb     c000deb1 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000de31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000de34:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de37:	01 d8                	add    eax,ebx
c000de39:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000de3d:	99                   	cdq    
c000de3e:	f7 f9                	idiv   ecx
c000de40:	29 d1                	sub    ecx,edx
c000de42:	89 d7                	mov    edi,edx
c000de44:	89 c8                	mov    eax,ecx
c000de46:	99                   	cdq    
c000de47:	39 ce                	cmp    esi,ecx
c000de49:	19 d3                	sbb    ebx,edx
c000de4b:	bb 00 00 00 00       	mov    ebx,0x0
c000de50:	72 04                	jb     c000de56 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000de52:	89 f3                	mov    ebx,esi
c000de54:	29 cb                	sub    ebx,ecx
c000de56:	89 f1                	mov    ecx,esi
c000de58:	29 d9                	sub    ecx,ebx
c000de5a:	74 1a                	je     c000de76 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000de5c:	52                   	push   edx
c000de5d:	51                   	push   ecx
c000de5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de66:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000de69:	57                   	push   edi
c000de6a:	e8 f2 27 ff ff       	call   c0000661 <memcpy>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de76:	85 db                	test   ebx,ebx
c000de78:	74 12                	je     c000de8c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000de7a:	50                   	push   eax
c000de7b:	53                   	push   ebx
c000de7c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000de80:	51                   	push   ecx
c000de81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000de84:	e8 d8 27 ff ff       	call   c0000661 <memcpy>
c000de89:	83 c4 10             	add    esp,0x10
c000de8c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000de8f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de94:	75 10                	jne    c000dea6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000de96:	83 ec 0c             	sub    esp,0xc
c000de99:	68 55 8e 03 c0       	push   0xc0038e55
c000de9e:	e8 db f0 ff ff       	call   c000cf7e <panic(char const*)>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000deaa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000dead:	89 38                	mov    DWORD PTR [eax],edi
c000deaf:	31 c0                	xor    eax,eax
c000deb1:	83 c4 1c             	add    esp,0x1c
c000deb4:	5b                   	pop    ebx
c000deb5:	5e                   	pop    esi
c000deb6:	5f                   	pop    edi
c000deb7:	5d                   	pop    ebp
c000deb8:	c3                   	ret    
c000deb9:	90                   	nop

c000deba <Pipe::Pipe(int)>:
c000deba:	83 ec 0c             	sub    esp,0xc
c000debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec1:	83 ec 08             	sub    esp,0x8
c000dec4:	6a 00                	push   0x0
c000dec6:	50                   	push   eax
c000dec7:	e8 70 31 00 00       	call   c001103c <UnixFile::UnixFile(int)>
c000decc:	83 c4 10             	add    esp,0x10
c000decf:	ba 7c 8e 03 c0       	mov    edx,0xc0038e7c
c000ded4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded8:	89 10                	mov    DWORD PTR [eax],edx
c000deda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dede:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dee2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000dee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000defb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deff:	83 ec 0c             	sub    esp,0xc
c000df02:	50                   	push   eax
c000df03:	e8 53 f5 ff ff       	call   c000d45b <malloc>
c000df08:	83 c4 10             	add    esp,0x10
c000df0b:	89 c2                	mov    edx,eax
c000df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df18:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000df1c:	90                   	nop
c000df1d:	83 c4 0c             	add    esp,0xc
c000df20:	c3                   	ret    
c000df21:	90                   	nop

c000df22 <changeTSS>:
c000df22:	83 ec 0c             	sub    esp,0xc
c000df25:	e8 ec 91 00 00       	call   c0017116 <thisCPU()>
c000df2a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000df30:	83 ec 08             	sub    esp,0x8
c000df33:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000df36:	05 7c 11 00 00       	add    eax,0x117c
c000df3b:	c1 e1 15             	shl    ecx,0x15
c000df3e:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000df43:	29 ca                	sub    edx,ecx
c000df45:	52                   	push   edx
c000df46:	50                   	push   eax
c000df47:	e8 28 2e 00 00       	call   c0010d74 <TSS::setESP(unsigned long)>
c000df4c:	83 c4 1c             	add    esp,0x1c
c000df4f:	c3                   	ret    

c000df50 <Process::addArgs(char**)>:
c000df50:	57                   	push   edi
c000df51:	56                   	push   esi
c000df52:	53                   	push   ebx
c000df53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df57:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df5b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000df65:	85 ff                	test   edi,edi
c000df67:	74 3d                	je     c000dfa6 <Process::addArgs(char**)+0x56>
c000df69:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6b:	85 c0                	test   eax,eax
c000df6d:	74 37                	je     c000dfa6 <Process::addArgs(char**)+0x56>
c000df6f:	31 db                	xor    ebx,ebx
c000df71:	83 ec 0c             	sub    esp,0xc
c000df74:	50                   	push   eax
c000df75:	e8 87 27 ff ff       	call   c0000701 <strlen>
c000df7a:	40                   	inc    eax
c000df7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000df7e:	e8 d8 f4 ff ff       	call   c000d45b <malloc>
c000df83:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000df8a:	5a                   	pop    edx
c000df8b:	59                   	pop    ecx
c000df8c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000df8f:	43                   	inc    ebx
c000df90:	50                   	push   eax
c000df91:	e8 5e 28 ff ff       	call   c00007f4 <strcpy>
c000df96:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000df9c:	83 c4 10             	add    esp,0x10
c000df9f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000dfa2:	85 c0                	test   eax,eax
c000dfa4:	75 cb                	jne    c000df71 <Process::addArgs(char**)+0x21>
c000dfa6:	5b                   	pop    ebx
c000dfa7:	5e                   	pop    esi
c000dfa8:	5f                   	pop    edi
c000dfa9:	c3                   	ret    

c000dfaa <Process::Process(char const*, Process*, char**)>:
c000dfaa:	56                   	push   esi
c000dfab:	53                   	push   ebx
c000dfac:	83 ec 14             	sub    esp,0x14
c000dfaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb3:	05 0c 02 00 00       	add    eax,0x20c
c000dfb8:	bb 07 00 00 00       	mov    ebx,0x7
c000dfbd:	89 c6                	mov    esi,eax
c000dfbf:	85 db                	test   ebx,ebx
c000dfc1:	78 12                	js     c000dfd5 <Process::Process(char const*, Process*, char**)+0x2b>
c000dfc3:	83 ec 0c             	sub    esp,0xc
c000dfc6:	56                   	push   esi
c000dfc7:	e8 dc 09 01 00       	call   c001e9a8 <ThreadControlBlock::ThreadControlBlock()>
c000dfcc:	83 c4 10             	add    esp,0x10
c000dfcf:	83 c6 63             	add    esi,0x63
c000dfd2:	4b                   	dec    ebx
c000dfd3:	eb ea                	jmp    c000dfbf <Process::Process(char const*, Process*, char**)+0x15>
c000dfd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfd9:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000dfe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfe4:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000dfed:	a1 34 ad 03 c0       	mov    eax,ds:0xc003ad34
c000dff2:	8d 50 01             	lea    edx,[eax+0x1]
c000dff5:	89 15 34 ad 03 c0    	mov    DWORD PTR ds:0xc003ad34,edx
c000dffb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfff:	89 02                	mov    DWORD PTR [edx],eax
c000e001:	83 ec 0c             	sub    esp,0xc
c000e004:	6a 10                	push   0x10
c000e006:	e8 05 44 00 00       	call   c0012410 <operator new(unsigned long)>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	89 c3                	mov    ebx,eax
c000e010:	83 ec 08             	sub    esp,0x8
c000e013:	6a 00                	push   0x0
c000e015:	53                   	push   ebx
c000e016:	e8 89 40 00 00       	call   c00120a4 <VAS::VAS(bool)>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e022:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e02c:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e03a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e03e:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e048:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e04e:	85 c0                	test   eax,eax
c000e050:	74 42                	je     c000e094 <Process::Process(char const*, Process*, char**)+0xea>
c000e052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e056:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e05c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e066:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e06c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e070:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e076:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e07c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e080:	05 0c 01 00 00       	add    eax,0x10c
c000e085:	83 ec 08             	sub    esp,0x8
c000e088:	52                   	push   edx
c000e089:	50                   	push   eax
c000e08a:	e8 65 27 ff ff       	call   c00007f4 <strcpy>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	eb 5c                	jmp    c000e0f0 <Process::Process(char const*, Process*, char**)+0x146>
c000e094:	83 ec 0c             	sub    esp,0xc
c000e097:	68 60 12 00 00       	push   0x1260
c000e09c:	e8 6f 43 00 00       	call   c0012410 <operator new(unsigned long)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	89 c3                	mov    ebx,eax
c000e0a6:	83 ec 08             	sub    esp,0x8
c000e0a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ad:	53                   	push   ebx
c000e0ae:	e8 bf 29 00 00       	call   c0010a72 <VgaText::VgaText(char const*)>
c000e0b3:	83 c4 10             	add    esp,0x10
c000e0b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ba:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	50                   	push   eax
c000e0ce:	e8 a0 1d 00 00       	call   c000fe73 <addToTerminalCycle(VgaText*)>
c000e0d3:	83 c4 10             	add    esp,0x10
c000e0d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0da:	05 0c 01 00 00       	add    eax,0x10c
c000e0df:	83 ec 08             	sub    esp,0x8
c000e0e2:	68 90 8e 03 c0       	push   0xc0038e90
c000e0e7:	50                   	push   eax
c000e0e8:	e8 07 27 ff ff       	call   c00007f4 <strcpy>
c000e0ed:	83 c4 10             	add    esp,0x10
c000e0f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f4:	83 c0 0c             	add    eax,0xc
c000e0f7:	83 ec 08             	sub    esp,0x8
c000e0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fe:	50                   	push   eax
c000e0ff:	e8 f0 26 ff ff       	call   c00007f4 <strcpy>
c000e104:	83 c4 10             	add    esp,0x10
c000e107:	83 ec 08             	sub    esp,0x8
c000e10a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e10e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e112:	e8 39 fe ff ff       	call   c000df50 <Process::addArgs(char**)>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	83 ec 08             	sub    esp,0x8
c000e11d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e125:	e8 62 d9 ff ff       	call   c000ba8c <loadProgramIntoMemory(Process*, char const*)>
c000e12a:	83 c4 10             	add    esp,0x10
c000e12d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e131:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e135:	83 f0 01             	xor    eax,0x1
c000e138:	88 c2                	mov    dl,al
c000e13a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13e:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e144:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e149:	83 ec 08             	sub    esp,0x8
c000e14c:	50                   	push   eax
c000e14d:	68 e4 8e 03 c0       	push   0xc0038ee4
c000e152:	e8 09 ed ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000e157:	83 c4 10             	add    esp,0x10
c000e15a:	90                   	nop
c000e15b:	83 c4 14             	add    esp,0x14
c000e15e:	5b                   	pop    ebx
c000e15f:	5e                   	pop    esi
c000e160:	c3                   	ret    
c000e161:	90                   	nop

c000e162 <Process::Process(bool, char const*, Process*, char**)>:
c000e162:	56                   	push   esi
c000e163:	53                   	push   ebx
c000e164:	83 ec 14             	sub    esp,0x14
c000e167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e16b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e16f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e173:	05 0c 02 00 00       	add    eax,0x20c
c000e178:	bb 07 00 00 00       	mov    ebx,0x7
c000e17d:	89 c6                	mov    esi,eax
c000e17f:	85 db                	test   ebx,ebx
c000e181:	78 12                	js     c000e195 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e183:	83 ec 0c             	sub    esp,0xc
c000e186:	56                   	push   esi
c000e187:	e8 1c 08 01 00       	call   c001e9a8 <ThreadControlBlock::ThreadControlBlock()>
c000e18c:	83 c4 10             	add    esp,0x10
c000e18f:	83 c6 63             	add    esi,0x63
c000e192:	4b                   	dec    ebx
c000e193:	eb ea                	jmp    c000e17f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e199:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e1a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a4:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e1ad:	a1 34 ad 03 c0       	mov    eax,ds:0xc003ad34
c000e1b2:	8d 50 01             	lea    edx,[eax+0x1]
c000e1b5:	89 15 34 ad 03 c0    	mov    DWORD PTR ds:0xc003ad34,edx
c000e1bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e1bf:	89 02                	mov    DWORD PTR [edx],eax
c000e1c1:	83 ec 0c             	sub    esp,0xc
c000e1c4:	6a 10                	push   0x10
c000e1c6:	e8 45 42 00 00       	call   c0012410 <operator new(unsigned long)>
c000e1cb:	83 c4 10             	add    esp,0x10
c000e1ce:	89 c3                	mov    ebx,eax
c000e1d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e1d5:	83 ec 08             	sub    esp,0x8
c000e1d8:	50                   	push   eax
c000e1d9:	53                   	push   ebx
c000e1da:	e8 c5 3e 00 00       	call   c00120a4 <VAS::VAS(bool)>
c000e1df:	83 c4 10             	add    esp,0x10
c000e1e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e6:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e1ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f0:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e1fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e202:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 42                	je     c000e258 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e220:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22a:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e234:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e23a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e244:	05 0c 01 00 00       	add    eax,0x10c
c000e249:	83 ec 08             	sub    esp,0x8
c000e24c:	52                   	push   edx
c000e24d:	50                   	push   eax
c000e24e:	e8 a1 25 ff ff       	call   c00007f4 <strcpy>
c000e253:	83 c4 10             	add    esp,0x10
c000e256:	eb 5c                	jmp    c000e2b4 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e258:	83 ec 0c             	sub    esp,0xc
c000e25b:	68 60 12 00 00       	push   0x1260
c000e260:	e8 ab 41 00 00       	call   c0012410 <operator new(unsigned long)>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 c3                	mov    ebx,eax
c000e26a:	83 ec 08             	sub    esp,0x8
c000e26d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e271:	53                   	push   ebx
c000e272:	e8 fb 27 00 00       	call   c0010a72 <VgaText::VgaText(char const*)>
c000e277:	83 c4 10             	add    esp,0x10
c000e27a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e27e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e288:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e28e:	83 ec 0c             	sub    esp,0xc
c000e291:	50                   	push   eax
c000e292:	e8 dc 1b 00 00       	call   c000fe73 <addToTerminalCycle(VgaText*)>
c000e297:	83 c4 10             	add    esp,0x10
c000e29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29e:	05 0c 01 00 00       	add    eax,0x10c
c000e2a3:	83 ec 08             	sub    esp,0x8
c000e2a6:	68 90 8e 03 c0       	push   0xc0038e90
c000e2ab:	50                   	push   eax
c000e2ac:	e8 43 25 ff ff       	call   c00007f4 <strcpy>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b8:	83 c0 0c             	add    eax,0xc
c000e2bb:	83 ec 08             	sub    esp,0x8
c000e2be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e2c2:	50                   	push   eax
c000e2c3:	e8 2c 25 ff ff       	call   c00007f4 <strcpy>
c000e2c8:	83 c4 10             	add    esp,0x10
c000e2cb:	83 ec 08             	sub    esp,0x8
c000e2ce:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e2d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d6:	e8 75 fc ff ff       	call   c000df50 <Process::addArgs(char**)>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	90                   	nop
c000e2df:	83 c4 14             	add    esp,0x14
c000e2e2:	5b                   	pop    ebx
c000e2e3:	5e                   	pop    esi
c000e2e4:	c3                   	ret    

c000e2e5 <disableIRQs()>:
c000e2e5:	fa                   	cli    
c000e2e6:	ff 05 34 bb 03 c0    	inc    DWORD PTR ds:0xc003bb34
c000e2ec:	c3                   	ret    

c000e2ed <getIRQNestingLevel()>:
c000e2ed:	a1 34 bb 03 c0       	mov    eax,ds:0xc003bb34
c000e2f2:	c3                   	ret    

c000e2f3 <enableIRQs()>:
c000e2f3:	a1 34 bb 03 c0       	mov    eax,ds:0xc003bb34
c000e2f8:	48                   	dec    eax
c000e2f9:	a3 34 bb 03 c0       	mov    ds:0xc003bb34,eax
c000e2fe:	75 01                	jne    c000e301 <enableIRQs()+0xe>
c000e300:	fb                   	sti    
c000e301:	c3                   	ret    

c000e302 <lockScheduler()>:
c000e302:	eb e1                	jmp    c000e2e5 <disableIRQs()>

c000e304 <unlockScheduler()>:
c000e304:	eb ed                	jmp    c000e2f3 <enableIRQs()>

c000e306 <userModeEntryPoint(void*)>:
c000e306:	83 ec 0c             	sub    esp,0xc
c000e309:	e8 f6 ff ff ff       	call   c000e304 <unlockScheduler()>
c000e30e:	fb                   	sti    
c000e30f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e314:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e317:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e31d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e321:	83 c4 0c             	add    esp,0xc
c000e324:	e9 ea 1e ff ff       	jmp    c0000213 <goToUsermode>

c000e329 <lockStuff()>:
c000e329:	e8 b7 ff ff ff       	call   c000e2e5 <disableIRQs()>
c000e32e:	ff 05 30 bb 03 c0    	inc    DWORD PTR ds:0xc003bb30
c000e334:	c3                   	ret    

c000e335 <taskStartupFunction>:
c000e335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e33a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e33d:	c3                   	ret    

c000e33e <updateTimeUsed()>:
c000e33e:	57                   	push   edi
c000e33f:	56                   	push   esi
c000e340:	53                   	push   ebx
c000e341:	e8 d0 8d 00 00       	call   c0017116 <thisCPU()>
c000e346:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e34d:	74 49                	je     c000e398 <updateTimeUsed()+0x5a>
c000e34f:	0f 31                	rdtsc  
c000e351:	89 c1                	mov    ecx,eax
c000e353:	a3 70 bb 03 c0       	mov    ds:0xc003bb70,eax
c000e358:	2b 0d 60 bb 03 c0    	sub    ecx,DWORD PTR ds:0xc003bb60
c000e35e:	89 d3                	mov    ebx,edx
c000e360:	89 0d 68 bb 03 c0    	mov    DWORD PTR ds:0xc003bb68,ecx
c000e366:	1b 1d 64 bb 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bb64
c000e36c:	a3 60 bb 03 c0       	mov    ds:0xc003bb60,eax
c000e371:	89 1d 6c bb 03 c0    	mov    DWORD PTR ds:0xc003bb6c,ebx
c000e377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e37c:	89 15 74 bb 03 c0    	mov    DWORD PTR ds:0xc003bb74,edx
c000e382:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e385:	89 15 64 bb 03 c0    	mov    DWORD PTR ds:0xc003bb64,edx
c000e38b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e38e:	01 f1                	add    ecx,esi
c000e390:	11 fb                	adc    ebx,edi
c000e392:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e395:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e398:	5b                   	pop    ebx
c000e399:	5e                   	pop    esi
c000e39a:	5f                   	pop    edi
c000e39b:	c3                   	ret    

c000e39c <switchToThread(ThreadControlBlock*)>:
c000e39c:	53                   	push   ebx
c000e39d:	83 ec 08             	sub    esp,0x8
c000e3a0:	a1 30 bb 03 c0       	mov    eax,ds:0xc003bb30
c000e3a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3a9:	85 c0                	test   eax,eax
c000e3ab:	75 30                	jne    c000e3dd <switchToThread(ThreadControlBlock*)+0x41>
c000e3ad:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e3b0:	3c ff                	cmp    al,0xff
c000e3b2:	74 25                	je     c000e3d9 <switchToThread(ThreadControlBlock*)+0x3d>
c000e3b4:	0f b6 d0             	movzx  edx,al
c000e3b7:	b8 84 03 00 00       	mov    eax,0x384
c000e3bc:	29 d0                	sub    eax,edx
c000e3be:	c1 e0 10             	shl    eax,0x10
c000e3c1:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e3c4:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e3c7:	e8 72 ff ff ff       	call   c000e33e <updateTimeUsed()>
c000e3cc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e3d0:	83 c4 08             	add    esp,0x8
c000e3d3:	5b                   	pop    ebx
c000e3d4:	e9 73 1e ff ff       	jmp    c000024c <switchToThreadASM>
c000e3d9:	31 c0                	xor    eax,eax
c000e3db:	eb e7                	jmp    c000e3c4 <switchToThread(ThreadControlBlock*)+0x28>
c000e3dd:	c7 05 2c bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bb2c,0x1
c000e3e7:	83 c4 08             	add    esp,0x8
c000e3ea:	5b                   	pop    ebx
c000e3eb:	c3                   	ret    

c000e3ec <Semaphore::Semaphore(int)>:
c000e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3f4:	89 10                	mov    DWORD PTR [eax],edx
c000e3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e405:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e40c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e410:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e417:	90                   	nop
c000e418:	c3                   	ret    
c000e419:	90                   	nop

c000e41a <Mutex::Mutex()>:
c000e41a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41e:	6a 01                	push   0x1
c000e420:	50                   	push   eax
c000e421:	e8 c6 ff ff ff       	call   c000e3ec <Semaphore::Semaphore(int)>
c000e426:	83 c4 08             	add    esp,0x8
c000e429:	90                   	nop
c000e42a:	c3                   	ret    
c000e42b:	90                   	nop

c000e42c <Process::createThread(void (*)(void*), void*, int)>:
c000e42c:	55                   	push   ebp
c000e42d:	31 c9                	xor    ecx,ecx
c000e42f:	57                   	push   edi
c000e430:	56                   	push   esi
c000e431:	53                   	push   ebx
c000e432:	83 ec 1c             	sub    esp,0x1c
c000e435:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e439:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e440:	89 f2                	mov    edx,esi
c000e442:	0f b7 c2             	movzx  eax,dx
c000e445:	83 e2 01             	and    edx,0x1
c000e448:	74 14                	je     c000e45e <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e44a:	d1 f8                	sar    eax,1
c000e44c:	41                   	inc    ecx
c000e44d:	89 c2                	mov    edx,eax
c000e44f:	83 f9 10             	cmp    ecx,0x10
c000e452:	75 ee                	jne    c000e442 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e454:	83 c4 1c             	add    esp,0x1c
c000e457:	31 c0                	xor    eax,eax
c000e459:	5b                   	pop    ebx
c000e45a:	5e                   	pop    esi
c000e45b:	5f                   	pop    edi
c000e45c:	5d                   	pop    ebp
c000e45d:	c3                   	ret    
c000e45e:	83 ec 08             	sub    esp,0x8
c000e461:	b8 01 00 00 00       	mov    eax,0x1
c000e466:	d3 e0                	shl    eax,cl
c000e468:	09 c6                	or     esi,eax
c000e46a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e470:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e477:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e47a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e47d:	01 ce                	add    esi,ecx
c000e47f:	89 f0                	mov    eax,esi
c000e481:	c1 e0 05             	shl    eax,0x5
c000e484:	01 c6                	add    esi,eax
c000e486:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e489:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e48f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e495:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e499:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e49f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e4a5:	89 ca                	mov    edx,ecx
c000e4a7:	f7 da                	neg    edx
c000e4a9:	c1 e2 15             	shl    edx,0x15
c000e4ac:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e4b2:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e4b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e4bc:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e4c6:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e4cc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e4d0:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e4d6:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e4e0:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e4ea:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e4f1:	50                   	push   eax
c000e4f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4f6:	68 50 bb 03 c0       	push   0xc003bb50
c000e4fb:	e8 3e 05 01 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e500:	83 c4 10             	add    esp,0x10
c000e503:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e507:	83 c4 1c             	add    esp,0x1c
c000e50a:	5b                   	pop    ebx
c000e50b:	5e                   	pop    esi
c000e50c:	5f                   	pop    edi
c000e50d:	5d                   	pop    ebp
c000e50e:	c3                   	ret    
c000e50f:	90                   	nop

c000e510 <Process::createUserThread()>:
c000e510:	83 ec 0c             	sub    esp,0xc
c000e513:	68 80 00 00 00       	push   0x80
c000e518:	6a 00                	push   0x0
c000e51a:	68 06 e3 00 c0       	push   0xc000e306
c000e51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e523:	e8 04 ff ff ff       	call   c000e42c <Process::createThread(void (*)(void*), void*, int)>
c000e528:	83 c4 1c             	add    esp,0x1c
c000e52b:	c3                   	ret    

c000e52c <setupMultitasking(void (*)())>:
c000e52c:	56                   	push   esi
c000e52d:	53                   	push   ebx
c000e52e:	53                   	push   ebx
c000e52f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e533:	eb 10                	jmp    c000e545 <setupMultitasking(void (*)())+0x19>
c000e535:	83 ec 0c             	sub    esp,0xc
c000e538:	68 50 bb 03 c0       	push   0xc003bb50
c000e53d:	e8 ec 05 01 00       	call   c001eb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e542:	83 c4 10             	add    esp,0x10
c000e545:	83 ec 0c             	sub    esp,0xc
c000e548:	68 50 bb 03 c0       	push   0xc003bb50
c000e54d:	e8 c0 05 01 00       	call   c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e552:	83 c4 10             	add    esp,0x10
c000e555:	84 c0                	test   al,al
c000e557:	74 dc                	je     c000e535 <setupMultitasking(void (*)())+0x9>
c000e559:	83 ec 0c             	sub    esp,0xc
c000e55c:	68 3b 07 00 00       	push   0x73b
c000e561:	e8 aa 3e 00 00       	call   c0012410 <operator new(unsigned long)>
c000e566:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e56d:	89 c3                	mov    ebx,eax
c000e56f:	6a 00                	push   0x0
c000e571:	68 94 8e 03 c0       	push   0xc0038e94
c000e576:	6a 01                	push   0x1
c000e578:	50                   	push   eax
c000e579:	e8 e4 fb ff ff       	call   c000e162 <Process::Process(bool, char const*, Process*, char**)>
c000e57e:	83 c4 18             	add    esp,0x18
c000e581:	89 1d 5c bb 03 c0    	mov    DWORD PTR ds:0xc003bb5c,ebx
c000e587:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e58d:	68 0c 8f 03 c0       	push   0xc0038f0c
c000e592:	e8 c9 e8 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000e597:	58                   	pop    eax
c000e598:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e59e:	e8 44 20 00 00       	call   c00105e7 <setActiveTerminal(VgaText*)>
c000e5a3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e5ab:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e5b1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5b4:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e5be:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e5c4:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e5ca:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e5d4:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e5de:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e5e8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e5ee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e5f4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e5fe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e604:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e60e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e614:	5a                   	pop    edx
c000e615:	59                   	pop    ecx
c000e616:	68 90 8e 03 c0       	push   0xc0038e90
c000e61b:	50                   	push   eax
c000e61c:	e8 d3 21 ff ff       	call   c00007f4 <strcpy>
c000e621:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e628:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e62c:	83 c4 14             	add    esp,0x14
c000e62f:	5b                   	pop    ebx
c000e630:	5e                   	pop    esi
c000e631:	e9 08 1c ff ff       	jmp    c000023e <switchToThreadASMFirstTime>

c000e636 <schedule()>:
c000e636:	a1 30 bb 03 c0       	mov    eax,ds:0xc003bb30
c000e63b:	85 c0                	test   eax,eax
c000e63d:	74 0b                	je     c000e64a <schedule()+0x14>
c000e63f:	c7 05 2c bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bb2c,0x1
c000e649:	c3                   	ret    
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	68 50 bb 03 c0       	push   0xc003bb50
c000e653:	e8 ba 04 01 00       	call   c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	84 c0                	test   al,al
c000e65d:	75 38                	jne    c000e697 <schedule()+0x61>
c000e65f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e664:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e667:	4a                   	dec    edx
c000e668:	74 32                	je     c000e69c <schedule()+0x66>
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	68 50 bb 03 c0       	push   0xc003bb50
c000e672:	e8 65 05 01 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e677:	c7 04 24 50 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb50
c000e67e:	89 c3                	mov    ebx,eax
c000e680:	e8 a9 04 01 00       	call   c001eb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e685:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e68c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e68f:	e8 08 fd ff ff       	call   c000e39c <switchToThread(ThreadControlBlock*)>
c000e694:	83 c4 10             	add    esp,0x10
c000e697:	83 c4 08             	add    esp,0x8
c000e69a:	5b                   	pop    ebx
c000e69b:	c3                   	ret    
c000e69c:	83 ec 08             	sub    esp,0x8
c000e69f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e6a6:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e6ac:	68 50 bb 03 c0       	push   0xc003bb50
c000e6b1:	e8 88 03 01 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e6b6:	83 c4 10             	add    esp,0x10
c000e6b9:	eb af                	jmp    c000e66a <schedule()+0x34>

c000e6bb <unlockStuff()>:
c000e6bb:	a1 30 bb 03 c0       	mov    eax,ds:0xc003bb30
c000e6c0:	48                   	dec    eax
c000e6c1:	a3 30 bb 03 c0       	mov    ds:0xc003bb30,eax
c000e6c6:	75 09                	jne    c000e6d1 <unlockStuff()+0x16>
c000e6c8:	a1 2c bb 03 c0       	mov    eax,ds:0xc003bb2c
c000e6cd:	85 c0                	test   eax,eax
c000e6cf:	75 05                	jne    c000e6d6 <unlockStuff()+0x1b>
c000e6d1:	e9 1d fc ff ff       	jmp    c000e2f3 <enableIRQs()>
c000e6d6:	83 ec 0c             	sub    esp,0xc
c000e6d9:	c7 05 2c bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bb2c,0x0
c000e6e3:	e8 4e ff ff ff       	call   c000e636 <schedule()>
c000e6e8:	83 c4 0c             	add    esp,0xc
c000e6eb:	e9 03 fc ff ff       	jmp    c000e2f3 <enableIRQs()>

c000e6f0 <forkProcess(regs*)>:
c000e6f0:	56                   	push   esi
c000e6f1:	53                   	push   ebx
c000e6f2:	50                   	push   eax
c000e6f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e6f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6fb:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e703:	0f 85 3e 01 00 00    	jne    c000e847 <forkProcess(regs*)+0x157>
c000e709:	e8 1b fc ff ff       	call   c000e329 <lockStuff()>
c000e70e:	83 ec 0c             	sub    esp,0xc
c000e711:	68 3b 07 00 00       	push   0x73b
c000e716:	e8 f5 3c 00 00       	call   c0012410 <operator new(unsigned long)>
c000e71b:	89 c3                	mov    ebx,eax
c000e71d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e722:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e725:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e72c:	50                   	push   eax
c000e72d:	83 c0 0c             	add    eax,0xc
c000e730:	50                   	push   eax
c000e731:	6a 00                	push   0x0
c000e733:	53                   	push   ebx
c000e734:	e8 29 fa ff ff       	call   c000e162 <Process::Process(bool, char const*, Process*, char**)>
c000e739:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e73f:	83 c4 20             	add    esp,0x20
c000e742:	85 f6                	test   esi,esi
c000e744:	74 16                	je     c000e75c <forkProcess(regs*)+0x6c>
c000e746:	83 ec 0c             	sub    esp,0xc
c000e749:	56                   	push   esi
c000e74a:	e8 fb 2f 00 00       	call   c001174a <VAS::~VAS()>
c000e74f:	59                   	pop    ecx
c000e750:	58                   	pop    eax
c000e751:	6a 10                	push   0x10
c000e753:	56                   	push   esi
c000e754:	e8 c6 3c 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c000e759:	83 c4 10             	add    esp,0x10
c000e75c:	83 ec 0c             	sub    esp,0xc
c000e75f:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e768:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e76d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e770:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e776:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e77c:	6a 10                	push   0x10
c000e77e:	e8 8d 3c 00 00       	call   c0012410 <operator new(unsigned long)>
c000e783:	59                   	pop    ecx
c000e784:	89 c6                	mov    esi,eax
c000e786:	58                   	pop    eax
c000e787:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e78c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e78f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e795:	56                   	push   esi
c000e796:	e8 d1 34 00 00       	call   c0011c6c <VAS::VAS(VAS*)>
c000e79b:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e7a1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e7a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e7a6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e7ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7b4:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e7ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e7c2:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e7c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7cd:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e7d0:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e7da:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e7e0:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e7e6:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e7ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e7f4:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e7fb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e7fe:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e805:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e80c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e818:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e81b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e81e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e823:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e826:	58                   	pop    eax
c000e827:	5a                   	pop    edx
c000e828:	53                   	push   ebx
c000e829:	68 50 bb 03 c0       	push   0xc003bb50
c000e82e:	e8 0b 02 01 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e833:	e8 83 fe ff ff       	call   c000e6bb <unlockStuff()>
c000e838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e843:	5a                   	pop    edx
c000e844:	5b                   	pop    ebx
c000e845:	5e                   	pop    esi
c000e846:	c3                   	ret    
c000e847:	83 ec 0c             	sub    esp,0xc
c000e84a:	68 40 8f 03 c0       	push   0xc0038f40
c000e84f:	e8 0c e6 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000e854:	83 c4 10             	add    esp,0x10
c000e857:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e85c:	eb e5                	jmp    c000e843 <forkProcess(regs*)+0x153>

c000e85e <Semaphore::tryAcquire()>:
c000e85e:	83 ec 0c             	sub    esp,0xc
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	e8 bf fa ff ff       	call   c000e329 <lockStuff()>
c000e86a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e86d:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e86f:	7c 0b                	jl     c000e87c <Semaphore::tryAcquire()+0x1e>
c000e871:	e8 45 fe ff ff       	call   c000e6bb <unlockStuff()>
c000e876:	31 c0                	xor    eax,eax
c000e878:	83 c4 0c             	add    esp,0xc
c000e87b:	c3                   	ret    
c000e87c:	42                   	inc    edx
c000e87d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e880:	e8 36 fe ff ff       	call   c000e6bb <unlockStuff()>
c000e885:	b0 01                	mov    al,0x1
c000e887:	83 c4 0c             	add    esp,0xc
c000e88a:	c3                   	ret    
c000e88b:	90                   	nop

c000e88c <Semaphore::assertLocked(char const*)>:
c000e88c:	83 ec 0c             	sub    esp,0xc
c000e88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e893:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e897:	e8 8d fa ff ff       	call   c000e329 <lockStuff()>
c000e89c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e89e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e8a1:	7c 08                	jl     c000e8ab <Semaphore::assertLocked(char const*)+0x1f>
c000e8a3:	83 c4 0c             	add    esp,0xc
c000e8a6:	e9 10 fe ff ff       	jmp    c000e6bb <unlockStuff()>
c000e8ab:	83 ec 0c             	sub    esp,0xc
c000e8ae:	52                   	push   edx
c000e8af:	e8 ca e6 ff ff       	call   c000cf7e <panic(char const*)>
c000e8b4:	83 c4 10             	add    esp,0x10
c000e8b7:	83 c4 0c             	add    esp,0xc
c000e8ba:	e9 fc fd ff ff       	jmp    c000e6bb <unlockStuff()>

c000e8bf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e8bf:	83 ec 0c             	sub    esp,0xc
c000e8c2:	e8 26 fa ff ff       	call   c000e2ed <getIRQNestingLevel()>
c000e8c7:	83 ec 08             	sub    esp,0x8
c000e8ca:	50                   	push   eax
c000e8cb:	68 6c 8f 03 c0       	push   0xc0038f6c
c000e8d0:	e8 8b e5 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000e8d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e8e1:	e8 50 fd ff ff       	call   c000e636 <schedule()>
c000e8e6:	e8 19 fa ff ff       	call   c000e304 <unlockScheduler()>
c000e8eb:	e8 fd f9 ff ff       	call   c000e2ed <getIRQNestingLevel()>
c000e8f0:	5a                   	pop    edx
c000e8f1:	59                   	pop    ecx
c000e8f2:	50                   	push   eax
c000e8f3:	68 a0 8f 03 c0       	push   0xc0038fa0
c000e8f8:	e8 63 e5 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000e8fd:	83 c4 1c             	add    esp,0x1c
c000e900:	c3                   	ret    

c000e901 <blockTask(TaskState)>:
c000e901:	83 ec 0c             	sub    esp,0xc
c000e904:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e908:	e8 f5 f9 ff ff       	call   c000e302 <lockScheduler()>
c000e90d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e912:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e915:	e8 1c fd ff ff       	call   c000e636 <schedule()>
c000e91a:	83 c4 0c             	add    esp,0xc
c000e91d:	e9 e2 f9 ff ff       	jmp    c000e304 <unlockScheduler()>

c000e922 <waitTask(int, int*, int)>:
c000e922:	83 ec 18             	sub    esp,0x18
c000e925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e92a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e92e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e931:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e93a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e93d:	6a 07                	push   0x7
c000e93f:	e8 bd ff ff ff       	call   c000e901 <blockTask(TaskState)>
c000e944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e949:	83 c4 10             	add    esp,0x10
c000e94c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e94f:	85 d2                	test   edx,edx
c000e951:	74 0a                	je     c000e95d <waitTask(int, int*, int)+0x3b>
c000e953:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e956:	89 02                	mov    DWORD PTR [edx],eax
c000e958:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e95d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000e960:	83 c4 0c             	add    esp,0xc
c000e963:	c3                   	ret    

c000e964 <nanoSleepUntil(unsigned long long)>:
c000e964:	83 ec 0c             	sub    esp,0xc
c000e967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e96f:	3b 05 d0 c2 03 c0    	cmp    eax,DWORD PTR ds:0xc003c2d0
c000e975:	89 d1                	mov    ecx,edx
c000e977:	1b 0d d4 c2 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c2d4
c000e97d:	73 04                	jae    c000e983 <nanoSleepUntil(unsigned long long)+0x1f>
c000e97f:	83 c4 0c             	add    esp,0xc
c000e982:	c3                   	ret    
c000e983:	e8 a1 f9 ff ff       	call   c000e329 <lockStuff()>
c000e988:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000e98e:	83 ec 08             	sub    esp,0x8
c000e991:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000e994:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000e997:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e99d:	68 44 bb 03 c0       	push   0xc003bb44
c000e9a2:	e8 97 00 01 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e9a7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e9ae:	e8 4e ff ff ff       	call   c000e901 <blockTask(TaskState)>
c000e9b3:	83 c4 1c             	add    esp,0x1c
c000e9b6:	e9 00 fd ff ff       	jmp    c000e6bb <unlockStuff()>

c000e9bb <nanoSleep(unsigned long long)>:
c000e9bb:	a1 d0 c2 03 c0       	mov    eax,ds:0xc003c2d0
c000e9c0:	8b 15 d4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2d4
c000e9c6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000e9ca:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000e9ce:	eb 94                	jmp    c000e964 <nanoSleepUntil(unsigned long long)>

c000e9d0 <sleep(unsigned long long)>:
c000e9d0:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000e9d8:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000e9dd:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000e9e1:	01 ca                	add    edx,ecx
c000e9e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e9e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e9eb:	eb ce                	jmp    c000e9bb <nanoSleep(unsigned long long)>
c000e9ed:	90                   	nop

c000e9ee <Semaphore::acquire()>:
c000e9ee:	83 ec 0c             	sub    esp,0xc
c000e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f5:	e8 2f f9 ff ff       	call   c000e329 <lockStuff()>
c000e9fa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e9fd:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e9ff:	7d 0c                	jge    c000ea0d <Semaphore::acquire()+0x1f>
c000ea01:	42                   	inc    edx
c000ea02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ea05:	83 c4 0c             	add    esp,0xc
c000ea08:	e9 ae fc ff ff       	jmp    c000e6bb <unlockStuff()>
c000ea0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea13:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000ea1a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ea1d:	85 d2                	test   edx,edx
c000ea1f:	74 2a                	je     c000ea4b <Semaphore::acquire()+0x5d>
c000ea21:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ea24:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ea2a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000ea2d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea33:	83 ec 0c             	sub    esp,0xc
c000ea36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea39:	6a 05                	push   0x5
c000ea3b:	e8 c1 fe ff ff       	call   c000e901 <blockTask(TaskState)>
c000ea40:	83 c4 10             	add    esp,0x10
c000ea43:	83 c4 0c             	add    esp,0xc
c000ea46:	e9 70 fc ff ff       	jmp    c000e6bb <unlockStuff()>
c000ea4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ea51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea54:	eb d7                	jmp    c000ea2d <Semaphore::acquire()+0x3f>

c000ea56 <execveProcess(char const*, char* const*, char* const*)>:
c000ea56:	56                   	push   esi
c000ea57:	53                   	push   ebx
c000ea58:	50                   	push   eax
c000ea59:	e8 cb f8 ff ff       	call   c000e329 <lockStuff()>
c000ea5e:	83 ec 0c             	sub    esp,0xc
c000ea61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea69:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000ea6f:	68 3b 07 00 00       	push   0x73b
c000ea74:	e8 97 39 00 00       	call   c0012410 <operator new(unsigned long)>
c000ea79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea7d:	89 c3                	mov    ebx,eax
c000ea7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea84:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ea87:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000ea8d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea91:	53                   	push   ebx
c000ea92:	e8 13 f5 ff ff       	call   c000dfaa <Process::Process(char const*, Process*, char**)>
c000ea97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea9c:	83 c4 20             	add    esp,0x20
c000ea9f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eaa2:	85 f6                	test   esi,esi
c000eaa4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaa6:	89 03                	mov    DWORD PTR [ebx],eax
c000eaa8:	74 06                	je     c000eab0 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000eaaa:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000eab0:	83 ec 0c             	sub    esp,0xc
c000eab3:	53                   	push   ebx
c000eab4:	e8 57 fa ff ff       	call   c000e510 <Process::createUserThread()>
c000eab9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eac0:	e8 3c fe ff ff       	call   c000e901 <blockTask(TaskState)>
c000eac5:	e8 f1 fb ff ff       	call   c000e6bb <unlockStuff()>
c000eaca:	e8 33 f8 ff ff       	call   c000e302 <lockScheduler()>
c000eacf:	e8 62 fb ff ff       	call   c000e636 <schedule()>
c000ead4:	e8 2b f8 ff ff       	call   c000e304 <unlockScheduler()>
c000ead9:	83 c4 14             	add    esp,0x14
c000eadc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eae1:	5b                   	pop    ebx
c000eae2:	5e                   	pop    esi
c000eae3:	c3                   	ret    

c000eae4 <taskReturned>:
c000eae4:	83 ec 0c             	sub    esp,0xc
c000eae7:	e8 18 f8 ff ff       	call   c000e304 <unlockScheduler()>
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eaf4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eaf7:	83 c0 0c             	add    eax,0xc
c000eafa:	50                   	push   eax
c000eafb:	68 9b 8e 03 c0       	push   0xc0038e9b
c000eb00:	e8 5b e3 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000eb05:	83 c4 10             	add    esp,0x10
c000eb08:	83 ec 0c             	sub    esp,0xc
c000eb0b:	6a 02                	push   0x2
c000eb0d:	e8 ef fd ff ff       	call   c000e901 <blockTask(TaskState)>
c000eb12:	e8 eb f7 ff ff       	call   c000e302 <lockScheduler()>
c000eb17:	e8 1a fb ff ff       	call   c000e636 <schedule()>
c000eb1c:	e8 e3 f7 ff ff       	call   c000e304 <unlockScheduler()>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	eb e2                	jmp    c000eb08 <taskReturned+0x24>

c000eb26 <unblockTask(ThreadControlBlock*)>:
c000eb26:	53                   	push   ebx
c000eb27:	83 ec 08             	sub    esp,0x8
c000eb2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eb2e:	e8 cf f7 ff ff       	call   c000e302 <lockScheduler()>
c000eb33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb36:	85 c0                	test   eax,eax
c000eb38:	74 5c                	je     c000eb96 <unblockTask(ThreadControlBlock*)+0x70>
c000eb3a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000eb3d:	48                   	dec    eax
c000eb3e:	74 31                	je     c000eb71 <unblockTask(ThreadControlBlock*)+0x4b>
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	68 50 bb 03 c0       	push   0xc003bb50
c000eb48:	e8 8f 00 01 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eb4d:	83 c4 10             	add    esp,0x10
c000eb50:	85 c0                	test   eax,eax
c000eb52:	75 17                	jne    c000eb6b <unblockTask(ThreadControlBlock*)+0x45>
c000eb54:	eb 65                	jmp    c000ebbb <unblockTask(ThreadControlBlock*)+0x95>
c000eb56:	83 ec 08             	sub    esp,0x8
c000eb59:	50                   	push   eax
c000eb5a:	68 50 bb 03 c0       	push   0xc003bb50
c000eb5f:	e8 80 00 01 00       	call   c001ebe4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	85 c0                	test   eax,eax
c000eb69:	74 50                	je     c000ebbb <unblockTask(ThreadControlBlock*)+0x95>
c000eb6b:	39 c3                	cmp    ebx,eax
c000eb6d:	75 e7                	jne    c000eb56 <unblockTask(ThreadControlBlock*)+0x30>
c000eb6f:	eb 1c                	jmp    c000eb8d <unblockTask(ThreadControlBlock*)+0x67>
c000eb71:	83 ec 0c             	sub    esp,0xc
c000eb74:	68 90 90 03 c0       	push   0xc0039090
c000eb79:	e8 e2 e2 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000eb7e:	c7 04 24 1c 90 03 c0 	mov    DWORD PTR [esp],0xc003901c
c000eb85:	e8 d6 e2 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	83 c4 08             	add    esp,0x8
c000eb90:	5b                   	pop    ebx
c000eb91:	e9 6e f7 ff ff       	jmp    c000e304 <unlockScheduler()>
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	68 d4 8f 03 c0       	push   0xc0038fd4
c000eb9e:	e8 bd e2 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000eba3:	c7 04 24 1c 90 03 c0 	mov    DWORD PTR [esp],0xc003901c
c000ebaa:	e8 b1 e2 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	83 c4 08             	add    esp,0x8
c000ebb5:	5b                   	pop    ebx
c000ebb6:	e9 49 f7 ff ff       	jmp    c000e304 <unlockScheduler()>
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	53                   	push   ebx
c000ebbf:	68 50 bb 03 c0       	push   0xc003bb50
c000ebc4:	e8 75 fe 00 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	83 c4 08             	add    esp,0x8
c000ebcf:	5b                   	pop    ebx
c000ebd0:	e9 2f f7 ff ff       	jmp    c000e304 <unlockScheduler()>

c000ebd5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000ebd5:	55                   	push   ebp
c000ebd6:	57                   	push   edi
c000ebd7:	56                   	push   esi
c000ebd8:	53                   	push   ebx
c000ebd9:	83 ec 1c             	sub    esp,0x1c
c000ebdc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ebe0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ebe3:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000ebe9:	85 c9                	test   ecx,ecx
c000ebeb:	7e 20                	jle    c000ec0d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000ebed:	31 f6                	xor    esi,esi
c000ebef:	83 ec 0c             	sub    esp,0xc
c000ebf2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ebf9:	46                   	inc    esi
c000ebfa:	e8 6c e8 ff ff       	call   c000d46b <free>
c000ebff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec02:	83 c4 10             	add    esp,0x10
c000ec05:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ec0b:	7f e2                	jg     c000ebef <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ec0d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000ec17:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ec1c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000ec1f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ec22:	d3 c0                	rol    eax,cl
c000ec24:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000ec2b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ec2e:	89 f7                	mov    edi,esi
c000ec30:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ec38:	0f 85 4f 01 00 00    	jne    c000ed8d <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ec3e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ec44:	85 c0                	test   eax,eax
c000ec46:	0f 84 aa 00 00 00    	je     c000ecf6 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ec4c:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ec4f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ec53:	31 c9                	xor    ecx,ecx
c000ec55:	eb 10                	jmp    c000ec67 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ec57:	41                   	inc    ecx
c000ec58:	83 f9 10             	cmp    ecx,0x10
c000ec5b:	0f 84 95 00 00 00    	je     c000ecf6 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ec61:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ec67:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ec6e:	d3 fa                	sar    edx,cl
c000ec70:	83 e2 01             	and    edx,0x1
c000ec73:	74 e2                	je     c000ec57 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ec75:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ec78:	01 ca                	add    edx,ecx
c000ec7a:	89 d5                	mov    ebp,edx
c000ec7c:	c1 e5 05             	shl    ebp,0x5
c000ec7f:	01 ea                	add    edx,ebp
c000ec81:	01 d0                	add    eax,edx
c000ec83:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ec89:	83 fd 07             	cmp    ebp,0x7
c000ec8c:	75 c9                	jne    c000ec57 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ec8e:	05 40 02 00 00       	add    eax,0x240
c000ec93:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ec96:	83 fd ff             	cmp    ebp,0xffffffff
c000ec99:	0f 8c 01 01 00 00    	jl     c000eda0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ec9f:	0f 84 b2 01 00 00    	je     c000ee57 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000eca5:	85 ed                	test   ebp,ebp
c000eca7:	0f 84 99 01 00 00    	je     c000ee46 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ecad:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ecaf:	75 a6                	jne    c000ec57 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ecb1:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ecb7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ecbb:	01 d0                	add    eax,edx
c000ecbd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ecc1:	83 ec 0c             	sub    esp,0xc
c000ecc4:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ecca:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eccd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ecd3:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ecda:	50                   	push   eax
c000ecdb:	e8 46 fe ff ff       	call   c000eb26 <unblockTask(ThreadControlBlock*)>
c000ece0:	83 c4 10             	add    esp,0x10
c000ece3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ece6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecea:	89 f7                	mov    edi,esi
c000ecec:	41                   	inc    ecx
c000eced:	83 f9 10             	cmp    ecx,0x10
c000ecf0:	0f 85 6b ff ff ff    	jne    c000ec61 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ecf6:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ecfc:	85 c0                	test   eax,eax
c000ecfe:	74 5d                	je     c000ed5d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed00:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000ed06:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000ed0c:	74 4f                	je     c000ed5d <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	68 50 bb 03 c0       	push   0xc003bb50
c000ed16:	e8 c1 fe 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ed1b:	c7 04 24 50 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb50
c000ed22:	89 c7                	mov    edi,eax
c000ed24:	e8 e9 fd 00 00       	call   c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	84 c0                	test   al,al
c000ed2e:	0f 84 dd 00 00 00    	je     c000ee11 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000ed34:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed37:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000ed3d:	85 d2                	test   edx,edx
c000ed3f:	74 0f                	je     c000ed50 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed46:	52                   	push   edx
c000ed47:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ed4a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed4d:	83 c4 10             	add    esp,0x10
c000ed50:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000ed5a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ed5d:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000ed63:	85 f6                	test   esi,esi
c000ed65:	74 16                	je     c000ed7d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000ed67:	83 ec 0c             	sub    esp,0xc
c000ed6a:	56                   	push   esi
c000ed6b:	e8 da 29 00 00       	call   c001174a <VAS::~VAS()>
c000ed70:	58                   	pop    eax
c000ed71:	5a                   	pop    edx
c000ed72:	6a 10                	push   0x10
c000ed74:	56                   	push   esi
c000ed75:	e8 a5 36 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c000ed7a:	83 c4 10             	add    esp,0x10
c000ed7d:	83 ec 0c             	sub    esp,0xc
c000ed80:	68 b7 8e 03 c0       	push   0xc0038eb7
c000ed85:	e8 d6 e0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000ed8a:	83 c4 10             	add    esp,0x10
c000ed8d:	83 ec 08             	sub    esp,0x8
c000ed90:	6a 63                	push   0x63
c000ed92:	53                   	push   ebx
c000ed93:	e8 87 36 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c000ed98:	83 c4 2c             	add    esp,0x2c
c000ed9b:	5b                   	pop    ebx
c000ed9c:	5e                   	pop    esi
c000ed9d:	5f                   	pop    edi
c000ed9e:	5d                   	pop    ebp
c000ed9f:	c3                   	ret    
c000eda0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eda4:	83 ec 0c             	sub    esp,0xc
c000eda7:	68 d4 90 03 c0       	push   0xc00390d4
c000edac:	e8 cd e1 ff ff       	call   c000cf7e <panic(char const*)>
c000edb1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000edb4:	83 c4 10             	add    esp,0x10
c000edb7:	89 f7                	mov    edi,esi
c000edb9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edbd:	e9 95 fe ff ff       	jmp    c000ec57 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000edc2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000edc8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000edce:	75 1c                	jne    c000edec <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000edd0:	83 ec 0c             	sub    esp,0xc
c000edd3:	68 3c 91 03 c0       	push   0xc003913c
c000edd8:	e8 83 e0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000eddd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ede4:	e8 18 fb ff ff       	call   c000e901 <blockTask(TaskState)>
c000ede9:	83 c4 10             	add    esp,0x10
c000edec:	83 ec 08             	sub    esp,0x8
c000edef:	56                   	push   esi
c000edf0:	68 50 bb 03 c0       	push   0xc003bb50
c000edf5:	e8 44 fc 00 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000edfa:	c7 04 24 50 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb50
c000ee01:	e8 d6 fd 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee06:	83 c4 10             	add    esp,0x10
c000ee09:	39 f8                	cmp    eax,edi
c000ee0b:	0f 84 23 ff ff ff    	je     c000ed34 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000ee11:	83 ec 0c             	sub    esp,0xc
c000ee14:	68 50 bb 03 c0       	push   0xc003bb50
c000ee19:	e8 be fd 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ee1e:	c7 04 24 50 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb50
c000ee25:	89 c6                	mov    esi,eax
c000ee27:	e8 02 fd 00 00       	call   c001eb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ee2c:	83 c4 10             	add    esp,0x10
c000ee2f:	39 f3                	cmp    ebx,esi
c000ee31:	74 b9                	je     c000edec <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee33:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000ee36:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ee39:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000ee3f:	75 ab                	jne    c000edec <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee41:	e9 7c ff ff ff       	jmp    c000edc2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000ee46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee4a:	83 ec 0c             	sub    esp,0xc
c000ee4d:	68 08 91 03 c0       	push   0xc0039108
c000ee52:	e9 55 ff ff ff       	jmp    c000edac <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000ee57:	8b 36                	mov    esi,DWORD PTR [esi]
c000ee59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee5d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000ee60:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ee63:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000ee69:	01 d7                	add    edi,edx
c000ee6b:	89 f8                	mov    eax,edi
c000ee6d:	e9 4b fe ff ff       	jmp    c000ecbd <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000ee72 <cleanerTaskFunction(void*)>:
c000ee72:	53                   	push   ebx
c000ee73:	83 ec 08             	sub    esp,0x8
c000ee76:	e8 89 f4 ff ff       	call   c000e304 <unlockScheduler()>
c000ee7b:	e8 82 f4 ff ff       	call   c000e302 <lockScheduler()>
c000ee80:	80 3d 14 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb14,0x0
c000ee87:	75 72                	jne    c000eefb <cleanerTaskFunction(void*)+0x89>
c000ee89:	83 ec 0c             	sub    esp,0xc
c000ee8c:	6a 02                	push   0x2
c000ee8e:	e8 2c fa ff ff       	call   c000e8bf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ee93:	83 c4 10             	add    esp,0x10
c000ee96:	c6 05 14 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bb14,0x0
c000ee9d:	e8 87 f4 ff ff       	call   c000e329 <lockStuff()>
c000eea2:	e8 5b f4 ff ff       	call   c000e302 <lockScheduler()>
c000eea7:	83 ec 0c             	sub    esp,0xc
c000eeaa:	68 38 bb 03 c0       	push   0xc003bb38
c000eeaf:	e8 5e fc 00 00       	call   c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000eeb4:	83 c4 10             	add    esp,0x10
c000eeb7:	84 c0                	test   al,al
c000eeb9:	75 28                	jne    c000eee3 <cleanerTaskFunction(void*)+0x71>
c000eebb:	83 ec 0c             	sub    esp,0xc
c000eebe:	68 38 bb 03 c0       	push   0xc003bb38
c000eec3:	e8 14 fd 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eec8:	c7 04 24 38 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb38
c000eecf:	89 c3                	mov    ebx,eax
c000eed1:	e8 58 fc 00 00       	call   c001eb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000eed6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed9:	e8 f7 fc ff ff       	call   c000ebd5 <cleanupTerminatedTask(ThreadControlBlock*)>
c000eede:	83 c4 10             	add    esp,0x10
c000eee1:	eb c4                	jmp    c000eea7 <cleanerTaskFunction(void*)+0x35>
c000eee3:	e8 1c f4 ff ff       	call   c000e304 <unlockScheduler()>
c000eee8:	e8 ce f7 ff ff       	call   c000e6bb <unlockStuff()>
c000eeed:	e8 10 f4 ff ff       	call   c000e302 <lockScheduler()>
c000eef2:	80 3d 14 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb14,0x0
c000eef9:	74 8e                	je     c000ee89 <cleanerTaskFunction(void*)+0x17>
c000eefb:	e8 04 f4 ff ff       	call   c000e304 <unlockScheduler()>
c000ef00:	eb 94                	jmp    c000ee96 <cleanerTaskFunction(void*)+0x24>

c000ef02 <terminateTask(int)>:
c000ef02:	83 ec 0c             	sub    esp,0xc
c000ef05:	e8 1f f4 ff ff       	call   c000e329 <lockStuff()>
c000ef0a:	e8 f3 f3 ff ff       	call   c000e302 <lockScheduler()>
c000ef0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef18:	83 ec 08             	sub    esp,0x8
c000ef1b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000ef1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef23:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000ef26:	50                   	push   eax
c000ef27:	68 38 bb 03 c0       	push   0xc003bb38
c000ef2c:	e8 0d fb 00 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ef31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef36:	83 c4 10             	add    esp,0x10
c000ef39:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000ef40:	a1 10 bb 03 c0       	mov    eax,ds:0xc003bb10
c000ef45:	85 c0                	test   eax,eax
c000ef47:	74 2e                	je     c000ef77 <terminateTask(int)+0x75>
c000ef49:	83 ec 0c             	sub    esp,0xc
c000ef4c:	c6 05 14 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bb14,0x1
c000ef53:	50                   	push   eax
c000ef54:	e8 cd fb ff ff       	call   c000eb26 <unblockTask(ThreadControlBlock*)>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	e8 a3 f3 ff ff       	call   c000e304 <unlockScheduler()>
c000ef61:	e8 55 f7 ff ff       	call   c000e6bb <unlockStuff()>
c000ef66:	e8 97 f3 ff ff       	call   c000e302 <lockScheduler()>
c000ef6b:	e8 c6 f6 ff ff       	call   c000e636 <schedule()>
c000ef70:	e8 8f f3 ff ff       	call   c000e304 <unlockScheduler()>
c000ef75:	eb ef                	jmp    c000ef66 <terminateTask(int)+0x64>
c000ef77:	83 ec 0c             	sub    esp,0xc
c000ef7a:	68 c5 8e 03 c0       	push   0xc0038ec5
c000ef7f:	e8 dc de ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000ef84:	83 c4 10             	add    esp,0x10
c000ef87:	eb d3                	jmp    c000ef5c <terminateTask(int)+0x5a>
c000ef89:	90                   	nop

c000ef8a <Semaphore::release()>:
c000ef8a:	83 ec 0c             	sub    esp,0xc
c000ef8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef91:	e8 93 f3 ff ff       	call   c000e329 <lockStuff()>
c000ef96:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ef99:	85 d2                	test   edx,edx
c000ef9b:	74 1a                	je     c000efb7 <Semaphore::release()+0x2d>
c000ef9d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000efa0:	83 ec 0c             	sub    esp,0xc
c000efa3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000efa6:	52                   	push   edx
c000efa7:	e8 7a fb ff ff       	call   c000eb26 <unblockTask(ThreadControlBlock*)>
c000efac:	83 c4 10             	add    esp,0x10
c000efaf:	83 c4 0c             	add    esp,0xc
c000efb2:	e9 04 f7 ff ff       	jmp    c000e6bb <unlockStuff()>
c000efb7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000efba:	83 c4 0c             	add    esp,0xc
c000efbd:	e9 f9 f6 ff ff       	jmp    c000e6bb <unlockStuff()>

c000efc2 <__static_initialization_and_destruction_0(int, int)>:
c000efc2:	83 ec 0c             	sub    esp,0xc
c000efc5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efca:	0f 85 88 00 00 00    	jne    c000f058 <__static_initialization_and_destruction_0(int, int)+0x96>
c000efd0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000efd8:	75 7e                	jne    c000f058 <__static_initialization_and_destruction_0(int, int)+0x96>
c000efda:	83 ec 0c             	sub    esp,0xc
c000efdd:	68 50 bb 03 c0       	push   0xc003bb50
c000efe2:	e8 ff f9 00 00       	call   c001e9e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000efe7:	83 c4 10             	add    esp,0x10
c000efea:	83 ec 04             	sub    esp,0x4
c000efed:	68 28 ad 03 c0       	push   0xc003ad28
c000eff2:	68 50 bb 03 c0       	push   0xc003bb50
c000eff7:	68 a6 e9 01 c0       	push   0xc001e9a6
c000effc:	e8 9a 33 00 00       	call   c001239b <__cxa_atexit>
c000f001:	83 c4 10             	add    esp,0x10
c000f004:	83 ec 0c             	sub    esp,0xc
c000f007:	68 44 bb 03 c0       	push   0xc003bb44
c000f00c:	e8 d5 f9 00 00       	call   c001e9e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f011:	83 c4 10             	add    esp,0x10
c000f014:	83 ec 04             	sub    esp,0x4
c000f017:	68 28 ad 03 c0       	push   0xc003ad28
c000f01c:	68 44 bb 03 c0       	push   0xc003bb44
c000f021:	68 a6 e9 01 c0       	push   0xc001e9a6
c000f026:	e8 70 33 00 00       	call   c001239b <__cxa_atexit>
c000f02b:	83 c4 10             	add    esp,0x10
c000f02e:	83 ec 0c             	sub    esp,0xc
c000f031:	68 38 bb 03 c0       	push   0xc003bb38
c000f036:	e8 ab f9 00 00       	call   c001e9e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	83 ec 04             	sub    esp,0x4
c000f041:	68 28 ad 03 c0       	push   0xc003ad28
c000f046:	68 38 bb 03 c0       	push   0xc003bb38
c000f04b:	68 a6 e9 01 c0       	push   0xc001e9a6
c000f050:	e8 46 33 00 00       	call   c001239b <__cxa_atexit>
c000f055:	83 c4 10             	add    esp,0x10
c000f058:	90                   	nop
c000f059:	83 c4 0c             	add    esp,0xc
c000f05c:	c3                   	ret    

c000f05d <_GLOBAL__sub_I_kernelProcess>:
c000f05d:	83 ec 0c             	sub    esp,0xc
c000f060:	83 ec 08             	sub    esp,0x8
c000f063:	68 ff ff 00 00       	push   0xffff
c000f068:	6a 01                	push   0x1
c000f06a:	e8 53 ff ff ff       	call   c000efc2 <__static_initialization_and_destruction_0(int, int)>
c000f06f:	83 c4 10             	add    esp,0x10
c000f072:	83 c4 0c             	add    esp,0xc
c000f075:	c3                   	ret    

c000f076 <sysCallGetPID(regs*)>:
c000f076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f07b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f07e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f080:	99                   	cdq    
c000f081:	c3                   	ret    

c000f082 <sysCallSeekDir(regs*)>:
c000f082:	31 c0                	xor    eax,eax
c000f084:	31 d2                	xor    edx,edx
c000f086:	c3                   	ret    

c000f087 <sysCallTellDir(regs*)>:
c000f087:	31 c0                	xor    eax,eax
c000f089:	31 d2                	xor    edx,edx
c000f08b:	c3                   	ret    

c000f08c <sysCallVerify(regs*)>:
c000f08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f090:	31 d2                	xor    edx,edx
c000f092:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f095:	c3                   	ret    

c000f096 <sysCallGetArgc(regs*)>:
c000f096:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f09b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f09e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f0a4:	99                   	cdq    
c000f0a5:	c3                   	ret    

c000f0a6 <sysFormatDisk(regs*)>:
c000f0a6:	56                   	push   esi
c000f0a7:	53                   	push   ebx
c000f0a8:	53                   	push   ebx
c000f0a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f0ad:	8b 1d c0 bd 03 c0    	mov    ebx,DWORD PTR ds:0xc003bdc0
c000f0b3:	eb 25                	jmp    c000f0da <sysFormatDisk(regs*)+0x34>
c000f0b5:	83 ec 0c             	sub    esp,0xc
c000f0b8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f0bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f0bd:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f0c0:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f0c3:	50                   	push   eax
c000f0c4:	ff 34 85 60 c2 03 c0 	push   DWORD PTR [eax*4-0x3ffc3da0]
c000f0cb:	53                   	push   ebx
c000f0cc:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f0cf:	83 c4 20             	add    esp,0x20
c000f0d2:	83 f8 08             	cmp    eax,0x8
c000f0d5:	75 12                	jne    c000f0e9 <sysFormatDisk(regs*)+0x43>
c000f0d7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f0da:	85 db                	test   ebx,ebx
c000f0dc:	75 d7                	jne    c000f0b5 <sysFormatDisk(regs*)+0xf>
c000f0de:	59                   	pop    ecx
c000f0df:	b8 03 00 00 00       	mov    eax,0x3
c000f0e4:	31 d2                	xor    edx,edx
c000f0e6:	5b                   	pop    ebx
c000f0e7:	5e                   	pop    esi
c000f0e8:	c3                   	ret    
c000f0e9:	85 c0                	test   eax,eax
c000f0eb:	74 1b                	je     c000f108 <sysFormatDisk(regs*)+0x62>
c000f0ed:	83 f8 09             	cmp    eax,0x9
c000f0f0:	74 0b                	je     c000f0fd <sysFormatDisk(regs*)+0x57>
c000f0f2:	59                   	pop    ecx
c000f0f3:	b8 02 00 00 00       	mov    eax,0x2
c000f0f8:	31 d2                	xor    edx,edx
c000f0fa:	5b                   	pop    ebx
c000f0fb:	5e                   	pop    esi
c000f0fc:	c3                   	ret    
c000f0fd:	59                   	pop    ecx
c000f0fe:	b8 01 00 00 00       	mov    eax,0x1
c000f103:	31 d2                	xor    edx,edx
c000f105:	5b                   	pop    ebx
c000f106:	5e                   	pop    esi
c000f107:	c3                   	ret    
c000f108:	59                   	pop    ecx
c000f109:	31 c0                	xor    eax,eax
c000f10b:	31 d2                	xor    edx,edx
c000f10d:	5b                   	pop    ebx
c000f10e:	5e                   	pop    esi
c000f10f:	c3                   	ret    

c000f110 <sysSetDiskVolumeLabel(regs*)>:
c000f110:	56                   	push   esi
c000f111:	53                   	push   ebx
c000f112:	53                   	push   ebx
c000f113:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f117:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f11a:	83 f8 19             	cmp    eax,0x19
c000f11d:	77 29                	ja     c000f148 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f11f:	8b 0c 85 60 c2 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3da0]
c000f126:	85 c9                	test   ecx,ecx
c000f128:	74 1e                	je     c000f148 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f12a:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f12d:	85 d2                	test   edx,edx
c000f12f:	74 17                	je     c000f148 <sysSetDiskVolumeLabel(regs*)+0x38>
c000f131:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f137:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f139:	52                   	push   edx
c000f13a:	50                   	push   eax
c000f13b:	51                   	push   ecx
c000f13c:	53                   	push   ebx
c000f13d:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f140:	83 c4 10             	add    esp,0x10
c000f143:	99                   	cdq    
c000f144:	59                   	pop    ecx
c000f145:	5b                   	pop    ebx
c000f146:	5e                   	pop    esi
c000f147:	c3                   	ret    
c000f148:	59                   	pop    ecx
c000f149:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f14e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f153:	5b                   	pop    ebx
c000f154:	5e                   	pop    esi
c000f155:	c3                   	ret    

c000f156 <sysGetDiskVolumeLabel(regs*)>:
c000f156:	57                   	push   edi
c000f157:	56                   	push   esi
c000f158:	53                   	push   ebx
c000f159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f15d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f160:	83 fa 19             	cmp    edx,0x19
c000f163:	77 34                	ja     c000f199 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f165:	8b 0c 95 60 c2 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3da0]
c000f16c:	85 c9                	test   ecx,ecx
c000f16e:	74 29                	je     c000f199 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f170:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f173:	85 db                	test   ebx,ebx
c000f175:	74 22                	je     c000f199 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f177:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f17a:	85 c0                	test   eax,eax
c000f17c:	74 1b                	je     c000f199 <sysGetDiskVolumeLabel(regs*)+0x43>
c000f17e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f184:	83 ec 0c             	sub    esp,0xc
c000f187:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f189:	50                   	push   eax
c000f18a:	53                   	push   ebx
c000f18b:	52                   	push   edx
c000f18c:	51                   	push   ecx
c000f18d:	56                   	push   esi
c000f18e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f191:	83 c4 20             	add    esp,0x20
c000f194:	99                   	cdq    
c000f195:	5b                   	pop    ebx
c000f196:	5e                   	pop    esi
c000f197:	5f                   	pop    edi
c000f198:	c3                   	ret    
c000f199:	5b                   	pop    ebx
c000f19a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f19f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1a4:	5e                   	pop    esi
c000f1a5:	5f                   	pop    edi
c000f1a6:	c3                   	ret    

c000f1a7 <sysShutdown(regs*)>:
c000f1a7:	83 ec 0c             	sub    esp,0xc
c000f1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f1b1:	85 c0                	test   eax,eax
c000f1b3:	74 24                	je     c000f1d9 <sysShutdown(regs*)+0x32>
c000f1b5:	48                   	dec    eax
c000f1b6:	74 0e                	je     c000f1c6 <sysShutdown(regs*)+0x1f>
c000f1b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	c3                   	ret    
c000f1c6:	a1 e0 c2 03 c0       	mov    eax,ds:0xc003c2e0
c000f1cb:	85 c0                	test   eax,eax
c000f1cd:	74 02                	je     c000f1d1 <sysShutdown(regs*)+0x2a>
c000f1cf:	ff d0                	call   eax
c000f1d1:	31 c0                	xor    eax,eax
c000f1d3:	31 d2                	xor    edx,edx
c000f1d5:	83 c4 0c             	add    esp,0xc
c000f1d8:	c3                   	ret    
c000f1d9:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c000f1de:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1e0:	6a 00                	push   0x0
c000f1e2:	6a 00                	push   0x0
c000f1e4:	6a 00                	push   0x0
c000f1e6:	50                   	push   eax
c000f1e7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f1ea:	83 c4 10             	add    esp,0x10
c000f1ed:	eb c9                	jmp    c000f1b8 <sysShutdown(regs*)+0x11>

c000f1ef <sysCallGetCwd(regs*)>:
c000f1ef:	83 ec 10             	sub    esp,0x10
c000f1f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1f6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f1f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f201:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f204:	e8 a6 39 00 00       	call   c0012baf <getcwd(Process*, char*, int)>
c000f209:	83 c4 1c             	add    esp,0x1c
c000f20c:	99                   	cdq    
c000f20d:	c3                   	ret    

c000f20e <sysCallSetCwd(regs*)>:
c000f20e:	83 ec 14             	sub    esp,0x14
c000f211:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f215:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f21d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f220:	e8 b4 39 00 00       	call   c0012bd9 <setcwd(Process*, char*)>
c000f225:	83 c4 1c             	add    esp,0x1c
c000f228:	99                   	cdq    
c000f229:	c3                   	ret    

c000f22a <sysCallRealpath(regs*)>:
c000f22a:	83 ec 0c             	sub    esp,0xc
c000f22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f231:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f234:	85 d2                	test   edx,edx
c000f236:	74 07                	je     c000f23f <sysCallRealpath(regs*)+0x15>
c000f238:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f23b:	85 c0                	test   eax,eax
c000f23d:	75 0b                	jne    c000f24a <sysCallRealpath(regs*)+0x20>
c000f23f:	b8 01 00 00 00       	mov    eax,0x1
c000f244:	31 d2                	xor    edx,edx
c000f246:	83 c4 0c             	add    esp,0xc
c000f249:	c3                   	ret    
c000f24a:	51                   	push   ecx
c000f24b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f251:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f254:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f25a:	51                   	push   ecx
c000f25b:	52                   	push   edx
c000f25c:	50                   	push   eax
c000f25d:	e8 32 34 00 00       	call   c0012694 <standardiseFiles(char*, char const*, char const*)>
c000f262:	83 c4 10             	add    esp,0x10
c000f265:	31 c0                	xor    eax,eax
c000f267:	31 d2                	xor    edx,edx
c000f269:	83 c4 0c             	add    esp,0xc
c000f26c:	c3                   	ret    

c000f26d <sysCallOpen(regs*)>:
c000f26d:	56                   	push   esi
c000f26e:	53                   	push   ebx
c000f26f:	81 ec 04 01 00 00    	sub    esp,0x104
c000f275:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f27c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f27f:	85 d2                	test   edx,edx
c000f281:	0f 84 c3 00 00 00    	je     c000f34a <sysCallOpen(regs*)+0xdd>
c000f287:	50                   	push   eax
c000f288:	68 0b 92 03 c0       	push   0xc003920b
c000f28d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f290:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f294:	56                   	push   esi
c000f295:	e8 fa 33 00 00       	call   c0012694 <standardiseFiles(char*, char const*, char const*)>
c000f29a:	89 34 24             	mov    DWORD PTR [esp],esi
c000f29d:	e8 5f 14 ff ff       	call   c0000701 <strlen>
c000f2a2:	83 c4 10             	add    esp,0x10
c000f2a5:	48                   	dec    eax
c000f2a6:	74 1d                	je     c000f2c5 <sysCallOpen(regs*)+0x58>
c000f2a8:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f2ab:	eb 0f                	jmp    c000f2bc <sysCallOpen(regs*)+0x4f>
c000f2ad:	80 fa 3a             	cmp    dl,0x3a
c000f2b0:	74 0f                	je     c000f2c1 <sysCallOpen(regs*)+0x54>
c000f2b2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f2b6:	48                   	dec    eax
c000f2b7:	74 0c                	je     c000f2c5 <sysCallOpen(regs*)+0x58>
c000f2b9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f2bc:	80 fa 2e             	cmp    dl,0x2e
c000f2bf:	75 ec                	jne    c000f2ad <sysCallOpen(regs*)+0x40>
c000f2c1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f2c5:	83 ec 0c             	sub    esp,0xc
c000f2c8:	68 14 01 00 00       	push   0x114
c000f2cd:	e8 3e 31 00 00       	call   c0012410 <operator new(unsigned long)>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	89 c6                	mov    esi,eax
c000f2d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2dc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f2df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f2e2:	56                   	push   esi
c000f2e3:	e8 56 35 00 00       	call   c001283e <File::File(char const*, Process*)>
c000f2e8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	0f b6 d0             	movzx  edx,al
c000f2f1:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f2f4:	89 c2                	mov    edx,eax
c000f2f6:	83 e2 01             	and    edx,0x1
c000f2f9:	a8 02                	test   al,0x2
c000f2fb:	74 03                	je     c000f300 <sysCallOpen(regs*)+0x93>
c000f2fd:	83 ca 02             	or     edx,0x2
c000f300:	a8 04                	test   al,0x4
c000f302:	74 03                	je     c000f307 <sysCallOpen(regs*)+0x9a>
c000f304:	83 ca 04             	or     edx,0x4
c000f307:	a8 08                	test   al,0x8
c000f309:	74 03                	je     c000f30e <sysCallOpen(regs*)+0xa1>
c000f30b:	83 ca 0a             	or     edx,0xa
c000f30e:	a8 10                	test   al,0x10
c000f310:	74 03                	je     c000f315 <sysCallOpen(regs*)+0xa8>
c000f312:	83 ca 12             	or     edx,0x12
c000f315:	83 ec 08             	sub    esp,0x8
c000f318:	52                   	push   edx
c000f319:	56                   	push   esi
c000f31a:	e8 83 35 00 00       	call   c00128a2 <File::open(FileOpenMode)>
c000f31f:	83 c4 10             	add    esp,0x10
c000f322:	85 c0                	test   eax,eax
c000f324:	75 24                	jne    c000f34a <sysCallOpen(regs*)+0xdd>
c000f326:	83 ec 0c             	sub    esp,0xc
c000f329:	56                   	push   esi
c000f32a:	e8 05 1d 00 00       	call   c0011034 <UnixFile::getFileDescriptor()>
c000f32f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f332:	83 c4 10             	add    esp,0x10
c000f335:	89 02                	mov    DWORD PTR [edx],eax
c000f337:	c1 f8 1f             	sar    eax,0x1f
c000f33a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f33d:	81 c4 04 01 00 00    	add    esp,0x104
c000f343:	31 c0                	xor    eax,eax
c000f345:	31 d2                	xor    edx,edx
c000f347:	5b                   	pop    ebx
c000f348:	5e                   	pop    esi
c000f349:	c3                   	ret    
c000f34a:	81 c4 04 01 00 00    	add    esp,0x104
c000f350:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f355:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f35a:	5b                   	pop    ebx
c000f35b:	5e                   	pop    esi
c000f35c:	c3                   	ret    

c000f35d <sysCallReadDir(regs*)>:
c000f35d:	53                   	push   ebx
c000f35e:	83 ec 18             	sub    esp,0x18
c000f361:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f365:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f368:	83 f8 02             	cmp    eax,0x2
c000f36b:	77 0c                	ja     c000f379 <sysCallReadDir(regs*)+0x1c>
c000f36d:	b8 01 00 00 00       	mov    eax,0x1
c000f372:	31 d2                	xor    edx,edx
c000f374:	83 c4 18             	add    esp,0x18
c000f377:	5b                   	pop    ebx
c000f378:	c3                   	ret    
c000f379:	83 ec 0c             	sub    esp,0xc
c000f37c:	50                   	push   eax
c000f37d:	e8 17 1e 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f382:	83 c4 10             	add    esp,0x10
c000f385:	85 c0                	test   eax,eax
c000f387:	74 37                	je     c000f3c0 <sysCallReadDir(regs*)+0x63>
c000f389:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f391:	83 ec 0c             	sub    esp,0xc
c000f394:	8b 10                	mov    edx,DWORD PTR [eax]
c000f396:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f39a:	51                   	push   ecx
c000f39b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f39e:	6a 00                	push   0x0
c000f3a0:	68 10 01 00 00       	push   0x110
c000f3a5:	50                   	push   eax
c000f3a6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f3a9:	83 c4 20             	add    esp,0x20
c000f3ac:	85 c0                	test   eax,eax
c000f3ae:	74 0c                	je     c000f3bc <sysCallReadDir(regs*)+0x5f>
c000f3b0:	83 f8 07             	cmp    eax,0x7
c000f3b3:	74 b8                	je     c000f36d <sysCallReadDir(regs*)+0x10>
c000f3b5:	b8 02 00 00 00       	mov    eax,0x2
c000f3ba:	eb b6                	jmp    c000f372 <sysCallReadDir(regs*)+0x15>
c000f3bc:	31 c0                	xor    eax,eax
c000f3be:	eb b2                	jmp    c000f372 <sysCallReadDir(regs*)+0x15>
c000f3c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3ca:	eb a8                	jmp    c000f374 <sysCallReadDir(regs*)+0x17>

c000f3cc <sysCallIsATTY(regs*)>:
c000f3cc:	83 ec 0c             	sub    esp,0xc
c000f3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f3d6:	83 f8 02             	cmp    eax,0x2
c000f3d9:	77 26                	ja     c000f401 <sysCallIsATTY(regs*)+0x35>
c000f3db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f3e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f3e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f3e9:	85 c0                	test   eax,eax
c000f3eb:	74 24                	je     c000f411 <sysCallIsATTY(regs*)+0x45>
c000f3ed:	83 ec 0c             	sub    esp,0xc
c000f3f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3f2:	50                   	push   eax
c000f3f3:	ff 12                	call   DWORD PTR [edx]
c000f3f5:	31 d2                	xor    edx,edx
c000f3f7:	0f b6 c0             	movzx  eax,al
c000f3fa:	83 c4 10             	add    esp,0x10
c000f3fd:	83 c4 0c             	add    esp,0xc
c000f400:	c3                   	ret    
c000f401:	83 ec 0c             	sub    esp,0xc
c000f404:	50                   	push   eax
c000f405:	e8 8f 1d 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f40a:	83 c4 10             	add    esp,0x10
c000f40d:	85 c0                	test   eax,eax
c000f40f:	75 dc                	jne    c000f3ed <sysCallIsATTY(regs*)+0x21>
c000f411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f416:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f41b:	83 c4 0c             	add    esp,0xc
c000f41e:	c3                   	ret    

c000f41f <sysCallSeek(regs*)>:
c000f41f:	53                   	push   ebx
c000f420:	83 ec 08             	sub    esp,0x8
c000f423:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f427:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f42a:	83 f8 02             	cmp    eax,0x2
c000f42d:	76 32                	jbe    c000f461 <sysCallSeek(regs*)+0x42>
c000f42f:	83 ec 0c             	sub    esp,0xc
c000f432:	50                   	push   eax
c000f433:	e8 61 1d 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f438:	83 c4 0c             	add    esp,0xc
c000f43b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f43e:	31 db                	xor    ebx,ebx
c000f440:	53                   	push   ebx
c000f441:	51                   	push   ecx
c000f442:	50                   	push   eax
c000f443:	e8 18 35 00 00       	call   c0012960 <File::seek(unsigned long long)>
c000f448:	83 c4 10             	add    esp,0x10
c000f44b:	85 c0                	test   eax,eax
c000f44d:	0f 95 c0             	setne  al
c000f450:	31 d2                	xor    edx,edx
c000f452:	0f b6 c0             	movzx  eax,al
c000f455:	f7 d8                	neg    eax
c000f457:	83 d2 00             	adc    edx,0x0
c000f45a:	83 c4 08             	add    esp,0x8
c000f45d:	f7 da                	neg    edx
c000f45f:	5b                   	pop    ebx
c000f460:	c3                   	ret    
c000f461:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f466:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f46b:	83 c4 08             	add    esp,0x8
c000f46e:	5b                   	pop    ebx
c000f46f:	c3                   	ret    

c000f470 <sysCallTell(regs*)>:
c000f470:	53                   	push   ebx
c000f471:	83 ec 08             	sub    esp,0x8
c000f474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f478:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f47b:	83 f8 02             	cmp    eax,0x2
c000f47e:	76 2d                	jbe    c000f4ad <sysCallTell(regs*)+0x3d>
c000f480:	83 ec 0c             	sub    esp,0xc
c000f483:	50                   	push   eax
c000f484:	e8 10 1d 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f489:	5a                   	pop    edx
c000f48a:	59                   	pop    ecx
c000f48b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f48e:	50                   	push   eax
c000f48f:	e8 22 35 00 00       	call   c00129b6 <File::tell(unsigned long long*)>
c000f494:	83 c4 10             	add    esp,0x10
c000f497:	85 c0                	test   eax,eax
c000f499:	0f 95 c0             	setne  al
c000f49c:	31 d2                	xor    edx,edx
c000f49e:	0f b6 c0             	movzx  eax,al
c000f4a1:	f7 d8                	neg    eax
c000f4a3:	83 d2 00             	adc    edx,0x0
c000f4a6:	83 c4 08             	add    esp,0x8
c000f4a9:	f7 da                	neg    edx
c000f4ab:	5b                   	pop    ebx
c000f4ac:	c3                   	ret    
c000f4ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4b7:	83 c4 08             	add    esp,0x8
c000f4ba:	5b                   	pop    ebx
c000f4bb:	c3                   	ret    

c000f4bc <sysCallSizeFromFilename(regs*)>:
c000f4bc:	57                   	push   edi
c000f4bd:	56                   	push   esi
c000f4be:	53                   	push   ebx
c000f4bf:	83 ec 10             	sub    esp,0x10
c000f4c2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f4c6:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f4c9:	83 ff 02             	cmp    edi,0x2
c000f4cc:	76 56                	jbe    c000f524 <sysCallSizeFromFilename(regs*)+0x68>
c000f4ce:	83 ec 0c             	sub    esp,0xc
c000f4d1:	68 14 01 00 00       	push   0x114
c000f4d6:	e8 35 2f 00 00       	call   c0012410 <operator new(unsigned long)>
c000f4db:	83 c4 0c             	add    esp,0xc
c000f4de:	89 c3                	mov    ebx,eax
c000f4e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4e5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f4e8:	57                   	push   edi
c000f4e9:	53                   	push   ebx
c000f4ea:	e8 4f 33 00 00       	call   c001283e <File::File(char const*, Process*)>
c000f4ef:	83 c4 0c             	add    esp,0xc
c000f4f2:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f4f6:	50                   	push   eax
c000f4f7:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f4fa:	53                   	push   ebx
c000f4fb:	e8 4e 36 00 00       	call   c0012b4e <File::stat(unsigned long long*, bool*)>
c000f500:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f503:	89 c6                	mov    esi,eax
c000f505:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f507:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f50a:	83 c4 10             	add    esp,0x10
c000f50d:	31 c0                	xor    eax,eax
c000f50f:	85 f6                	test   esi,esi
c000f511:	0f 95 c0             	setne  al
c000f514:	31 d2                	xor    edx,edx
c000f516:	f7 d8                	neg    eax
c000f518:	83 d2 00             	adc    edx,0x0
c000f51b:	83 c4 10             	add    esp,0x10
c000f51e:	f7 da                	neg    edx
c000f520:	5b                   	pop    ebx
c000f521:	5e                   	pop    esi
c000f522:	5f                   	pop    edi
c000f523:	c3                   	ret    
c000f524:	83 c4 10             	add    esp,0x10
c000f527:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f52c:	5b                   	pop    ebx
c000f52d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f532:	5e                   	pop    esi
c000f533:	5f                   	pop    edi
c000f534:	c3                   	ret    

c000f535 <sysCallSize(regs*)>:
c000f535:	53                   	push   ebx
c000f536:	83 ec 18             	sub    esp,0x18
c000f539:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f53d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f540:	83 f8 02             	cmp    eax,0x2
c000f543:	76 33                	jbe    c000f578 <sysCallSize(regs*)+0x43>
c000f545:	83 ec 0c             	sub    esp,0xc
c000f548:	50                   	push   eax
c000f549:	e8 4b 1c 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f54e:	83 c4 0c             	add    esp,0xc
c000f551:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f555:	52                   	push   edx
c000f556:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f559:	50                   	push   eax
c000f55a:	e8 ef 35 00 00       	call   c0012b4e <File::stat(unsigned long long*, bool*)>
c000f55f:	83 c4 10             	add    esp,0x10
c000f562:	85 c0                	test   eax,eax
c000f564:	0f 95 c0             	setne  al
c000f567:	31 d2                	xor    edx,edx
c000f569:	0f b6 c0             	movzx  eax,al
c000f56c:	f7 d8                	neg    eax
c000f56e:	83 d2 00             	adc    edx,0x0
c000f571:	83 c4 18             	add    esp,0x18
c000f574:	f7 da                	neg    edx
c000f576:	5b                   	pop    ebx
c000f577:	c3                   	ret    
c000f578:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f57d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f582:	83 c4 18             	add    esp,0x18
c000f585:	5b                   	pop    ebx
c000f586:	c3                   	ret    

c000f587 <sysCallClose(regs*)>:
c000f587:	53                   	push   ebx
c000f588:	83 ec 08             	sub    esp,0x8
c000f58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f592:	83 f8 02             	cmp    eax,0x2
c000f595:	76 2f                	jbe    c000f5c6 <sysCallClose(regs*)+0x3f>
c000f597:	83 ec 0c             	sub    esp,0xc
c000f59a:	50                   	push   eax
c000f59b:	e8 f9 1b 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f5a0:	89 c3                	mov    ebx,eax
c000f5a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5a5:	e8 56 33 00 00       	call   c0012900 <File::close()>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	85 db                	test   ebx,ebx
c000f5af:	74 0c                	je     c000f5bd <sysCallClose(regs*)+0x36>
c000f5b1:	83 ec 0c             	sub    esp,0xc
c000f5b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f5b6:	53                   	push   ebx
c000f5b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	31 c0                	xor    eax,eax
c000f5bf:	31 d2                	xor    edx,edx
c000f5c1:	83 c4 08             	add    esp,0x8
c000f5c4:	5b                   	pop    ebx
c000f5c5:	c3                   	ret    
c000f5c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5d0:	83 c4 08             	add    esp,0x8
c000f5d3:	5b                   	pop    ebx
c000f5d4:	c3                   	ret    

c000f5d5 <sysCallOpenDir(regs*)>:
c000f5d5:	56                   	push   esi
c000f5d6:	53                   	push   ebx
c000f5d7:	53                   	push   ebx
c000f5d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f5dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f5df:	85 f6                	test   esi,esi
c000f5e1:	74 51                	je     c000f634 <sysCallOpenDir(regs*)+0x5f>
c000f5e3:	83 ec 0c             	sub    esp,0xc
c000f5e6:	68 14 01 00 00       	push   0x114
c000f5eb:	e8 20 2e 00 00       	call   c0012410 <operator new(unsigned long)>
c000f5f0:	83 c4 0c             	add    esp,0xc
c000f5f3:	89 c6                	mov    esi,eax
c000f5f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f5fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f600:	56                   	push   esi
c000f601:	e8 fa 36 00 00       	call   c0012d00 <Directory::Directory(char const*, Process*)>
c000f606:	89 34 24             	mov    DWORD PTR [esp],esi
c000f609:	e8 56 37 00 00       	call   c0012d64 <Directory::open()>
c000f60e:	83 c4 10             	add    esp,0x10
c000f611:	85 c0                	test   eax,eax
c000f613:	75 1f                	jne    c000f634 <sysCallOpenDir(regs*)+0x5f>
c000f615:	83 ec 0c             	sub    esp,0xc
c000f618:	56                   	push   esi
c000f619:	e8 16 1a 00 00       	call   c0011034 <UnixFile::getFileDescriptor()>
c000f61e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	89 02                	mov    DWORD PTR [edx],eax
c000f626:	c1 f8 1f             	sar    eax,0x1f
c000f629:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f62c:	31 c0                	xor    eax,eax
c000f62e:	59                   	pop    ecx
c000f62f:	31 d2                	xor    edx,edx
c000f631:	5b                   	pop    ebx
c000f632:	5e                   	pop    esi
c000f633:	c3                   	ret    
c000f634:	59                   	pop    ecx
c000f635:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f63a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f63f:	5b                   	pop    ebx
c000f640:	5e                   	pop    esi
c000f641:	c3                   	ret    

c000f642 <sysCallMakeDir(regs*)>:
c000f642:	56                   	push   esi
c000f643:	53                   	push   ebx
c000f644:	83 ec 10             	sub    esp,0x10
c000f647:	68 14 01 00 00       	push   0x114
c000f64c:	e8 bf 2d 00 00       	call   c0012410 <operator new(unsigned long)>
c000f651:	83 c4 0c             	add    esp,0xc
c000f654:	89 c3                	mov    ebx,eax
c000f656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f65b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f65e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f662:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f665:	53                   	push   ebx
c000f666:	e8 95 36 00 00       	call   c0012d00 <Directory::Directory(char const*, Process*)>
c000f66b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f66e:	e8 d1 38 00 00       	call   c0012f44 <Directory::create()>
c000f673:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f676:	89 c6                	mov    esi,eax
c000f678:	e8 43 37 00 00       	call   c0012dc0 <Directory::close()>
c000f67d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f67f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f682:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f685:	31 c0                	xor    eax,eax
c000f687:	85 f6                	test   esi,esi
c000f689:	0f 95 c0             	setne  al
c000f68c:	31 d2                	xor    edx,edx
c000f68e:	f7 d8                	neg    eax
c000f690:	83 d2 00             	adc    edx,0x0
c000f693:	83 c4 14             	add    esp,0x14
c000f696:	f7 da                	neg    edx
c000f698:	5b                   	pop    ebx
c000f699:	5e                   	pop    esi
c000f69a:	c3                   	ret    

c000f69b <sysCallCloseDir(regs*)>:
c000f69b:	53                   	push   ebx
c000f69c:	83 ec 08             	sub    esp,0x8
c000f69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f6a6:	83 f8 02             	cmp    eax,0x2
c000f6a9:	76 2f                	jbe    c000f6da <sysCallCloseDir(regs*)+0x3f>
c000f6ab:	83 ec 0c             	sub    esp,0xc
c000f6ae:	50                   	push   eax
c000f6af:	e8 e5 1a 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f6b4:	89 c3                	mov    ebx,eax
c000f6b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6b9:	e8 02 37 00 00       	call   c0012dc0 <Directory::close()>
c000f6be:	83 c4 10             	add    esp,0x10
c000f6c1:	85 db                	test   ebx,ebx
c000f6c3:	74 0c                	je     c000f6d1 <sysCallCloseDir(regs*)+0x36>
c000f6c5:	83 ec 0c             	sub    esp,0xc
c000f6c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f6ca:	53                   	push   ebx
c000f6cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f6ce:	83 c4 10             	add    esp,0x10
c000f6d1:	31 c0                	xor    eax,eax
c000f6d3:	31 d2                	xor    edx,edx
c000f6d5:	83 c4 08             	add    esp,0x8
c000f6d8:	5b                   	pop    ebx
c000f6d9:	c3                   	ret    
c000f6da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6df:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f6e4:	83 c4 08             	add    esp,0x8
c000f6e7:	5b                   	pop    ebx
c000f6e8:	c3                   	ret    

c000f6e9 <sysCallWait(regs*)>:
c000f6e9:	83 ec 10             	sub    esp,0x10
c000f6ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6f0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f6f3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f6f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f6f9:	e8 24 f2 ff ff       	call   c000e922 <waitTask(int, int*, int)>
c000f6fe:	83 c4 1c             	add    esp,0x1c
c000f701:	99                   	cdq    
c000f702:	c3                   	ret    

c000f703 <sysCallFork(regs*)>:
c000f703:	83 ec 18             	sub    esp,0x18
c000f706:	68 0f 92 03 c0       	push   0xc003920f
c000f70b:	e8 50 d7 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000f710:	58                   	pop    eax
c000f711:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f715:	e8 d6 ef ff ff       	call   c000e6f0 <forkProcess(regs*)>
c000f71a:	83 c4 1c             	add    esp,0x1c
c000f71d:	99                   	cdq    
c000f71e:	c3                   	ret    

c000f71f <sysCallExecve(regs*)>:
c000f71f:	53                   	push   ebx
c000f720:	81 ec 24 01 00 00    	sub    esp,0x124
c000f726:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f72d:	68 1d 92 03 c0       	push   0xc003921d
c000f732:	e8 29 d7 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000f737:	83 c4 0c             	add    esp,0xc
c000f73a:	68 00 01 00 00       	push   0x100
c000f73f:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f743:	50                   	push   eax
c000f744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f749:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f74c:	e8 5e 34 00 00       	call   c0012baf <getcwd(Process*, char*, int)>
c000f751:	83 c4 0c             	add    esp,0xc
c000f754:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f757:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f75a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f75d:	e8 f4 f2 ff ff       	call   c000ea56 <execveProcess(char const*, char* const*, char* const*)>
c000f762:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f767:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f76c:	81 c4 28 01 00 00    	add    esp,0x128
c000f772:	5b                   	pop    ebx
c000f773:	c3                   	ret    

c000f774 <sysCallRmdir(regs*)>:
c000f774:	56                   	push   esi
c000f775:	53                   	push   ebx
c000f776:	83 ec 10             	sub    esp,0x10
c000f779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f77d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f780:	68 14 01 00 00       	push   0x114
c000f785:	e8 86 2c 00 00       	call   c0012410 <operator new(unsigned long)>
c000f78a:	83 c4 0c             	add    esp,0xc
c000f78d:	89 c3                	mov    ebx,eax
c000f78f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f794:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f797:	56                   	push   esi
c000f798:	53                   	push   ebx
c000f799:	e8 a0 30 00 00       	call   c001283e <File::File(char const*, Process*)>
c000f79e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7a1:	e8 74 32 00 00       	call   c0012a1a <File::unlink()>
c000f7a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7a9:	89 c6                	mov    esi,eax
c000f7ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f7ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f7b0:	31 c0                	xor    eax,eax
c000f7b2:	85 f6                	test   esi,esi
c000f7b4:	0f 95 c0             	setne  al
c000f7b7:	31 d2                	xor    edx,edx
c000f7b9:	f7 d8                	neg    eax
c000f7bb:	83 d2 00             	adc    edx,0x0
c000f7be:	83 c4 14             	add    esp,0x14
c000f7c1:	f7 da                	neg    edx
c000f7c3:	5b                   	pop    ebx
c000f7c4:	5e                   	pop    esi
c000f7c5:	c3                   	ret    

c000f7c6 <sysCallUnlink(regs*)>:
c000f7c6:	56                   	push   esi
c000f7c7:	53                   	push   ebx
c000f7c8:	83 ec 10             	sub    esp,0x10
c000f7cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7cf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f7d2:	68 14 01 00 00       	push   0x114
c000f7d7:	e8 34 2c 00 00       	call   c0012410 <operator new(unsigned long)>
c000f7dc:	83 c4 0c             	add    esp,0xc
c000f7df:	89 c3                	mov    ebx,eax
c000f7e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7e9:	56                   	push   esi
c000f7ea:	53                   	push   ebx
c000f7eb:	e8 4e 30 00 00       	call   c001283e <File::File(char const*, Process*)>
c000f7f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7f3:	e8 22 32 00 00       	call   c0012a1a <File::unlink()>
c000f7f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f7fb:	89 c6                	mov    esi,eax
c000f7fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f7ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f802:	31 c0                	xor    eax,eax
c000f804:	85 f6                	test   esi,esi
c000f806:	0f 95 c0             	setne  al
c000f809:	31 d2                	xor    edx,edx
c000f80b:	f7 d8                	neg    eax
c000f80d:	83 d2 00             	adc    edx,0x0
c000f810:	83 c4 14             	add    esp,0x14
c000f813:	f7 da                	neg    edx
c000f815:	5b                   	pop    ebx
c000f816:	5e                   	pop    esi
c000f817:	c3                   	ret    

c000f818 <sysCallGetArgv(regs*)>:
c000f818:	83 ec 0c             	sub    esp,0xc
c000f81b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f81f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f822:	85 c0                	test   eax,eax
c000f824:	78 2b                	js     c000f851 <sysCallGetArgv(regs*)+0x39>
c000f826:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f82c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f82f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f835:	7d 1a                	jge    c000f851 <sysCallGetArgv(regs*)+0x39>
c000f837:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f83e:	85 c0                	test   eax,eax
c000f840:	74 17                	je     c000f859 <sysCallGetArgv(regs*)+0x41>
c000f842:	83 ec 08             	sub    esp,0x8
c000f845:	50                   	push   eax
c000f846:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f849:	e8 a6 0f ff ff       	call   c00007f4 <strcpy>
c000f84e:	83 c4 10             	add    esp,0x10
c000f851:	31 c0                	xor    eax,eax
c000f853:	31 d2                	xor    edx,edx
c000f855:	83 c4 0c             	add    esp,0xc
c000f858:	c3                   	ret    
c000f859:	b8 01 00 00 00       	mov    eax,0x1
c000f85e:	31 d2                	xor    edx,edx
c000f860:	83 c4 0c             	add    esp,0xc
c000f863:	c3                   	ret    

c000f864 <sysCallTTYName(regs*)>:
c000f864:	56                   	push   esi
c000f865:	53                   	push   ebx
c000f866:	53                   	push   ebx
c000f867:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f86b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f86e:	85 c0                	test   eax,eax
c000f870:	74 58                	je     c000f8ca <sysCallTTYName(regs*)+0x66>
c000f872:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f875:	83 f8 02             	cmp    eax,0x2
c000f878:	77 3e                	ja     c000f8b8 <sysCallTTYName(regs*)+0x54>
c000f87a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f87f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f882:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f888:	85 db                	test   ebx,ebx
c000f88a:	74 3e                	je     c000f8ca <sysCallTTYName(regs*)+0x66>
c000f88c:	83 ec 0c             	sub    esp,0xc
c000f88f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f891:	53                   	push   ebx
c000f892:	ff 10                	call   DWORD PTR [eax]
c000f894:	83 c4 10             	add    esp,0x10
c000f897:	84 c0                	test   al,al
c000f899:	74 3a                	je     c000f8d5 <sysCallTTYName(regs*)+0x71>
c000f89b:	83 ec 08             	sub    esp,0x8
c000f89e:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f8a4:	53                   	push   ebx
c000f8a5:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f8a8:	e8 47 0f ff ff       	call   c00007f4 <strcpy>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	31 c0                	xor    eax,eax
c000f8b2:	59                   	pop    ecx
c000f8b3:	31 d2                	xor    edx,edx
c000f8b5:	5b                   	pop    ebx
c000f8b6:	5e                   	pop    esi
c000f8b7:	c3                   	ret    
c000f8b8:	83 ec 0c             	sub    esp,0xc
c000f8bb:	50                   	push   eax
c000f8bc:	e8 d8 18 00 00       	call   c0011199 <getFromFileDescriptor(int)>
c000f8c1:	83 c4 10             	add    esp,0x10
c000f8c4:	89 c3                	mov    ebx,eax
c000f8c6:	85 db                	test   ebx,ebx
c000f8c8:	75 c2                	jne    c000f88c <sysCallTTYName(regs*)+0x28>
c000f8ca:	59                   	pop    ecx
c000f8cb:	b8 01 00 00 00       	mov    eax,0x1
c000f8d0:	31 d2                	xor    edx,edx
c000f8d2:	5b                   	pop    ebx
c000f8d3:	5e                   	pop    esi
c000f8d4:	c3                   	ret    
c000f8d5:	59                   	pop    ecx
c000f8d6:	b8 02 00 00 00       	mov    eax,0x2
c000f8db:	31 d2                	xor    edx,edx
c000f8dd:	5b                   	pop    ebx
c000f8de:	5e                   	pop    esi
c000f8df:	c3                   	ret    

c000f8e0 <sysCallGetEnv(regs*)>:
c000f8e0:	83 ec 0c             	sub    esp,0xc
c000f8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8e7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f8ea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f8ed:	85 c9                	test   ecx,ecx
c000f8ef:	75 0c                	jne    c000f8fd <sysCallGetEnv(regs*)+0x1d>
c000f8f1:	85 d2                	test   edx,edx
c000f8f3:	74 14                	je     c000f909 <sysCallGetEnv(regs*)+0x29>
c000f8f5:	31 c0                	xor    eax,eax
c000f8f7:	31 d2                	xor    edx,edx
c000f8f9:	83 c4 0c             	add    esp,0xc
c000f8fc:	c3                   	ret    
c000f8fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f900:	85 d2                	test   edx,edx
c000f902:	74 1b                	je     c000f91f <sysCallGetEnv(regs*)+0x3f>
c000f904:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f907:	eb ec                	jmp    c000f8f5 <sysCallGetEnv(regs*)+0x15>
c000f909:	83 ec 0c             	sub    esp,0xc
c000f90c:	68 68 92 03 c0       	push   0xc0039268
c000f911:	e8 eb 0d ff ff       	call   c0000701 <strlen>
c000f916:	83 c4 10             	add    esp,0x10
c000f919:	31 d2                	xor    edx,edx
c000f91b:	83 c4 0c             	add    esp,0xc
c000f91e:	c3                   	ret    
c000f91f:	83 ec 08             	sub    esp,0x8
c000f922:	68 68 92 03 c0       	push   0xc0039268
c000f927:	50                   	push   eax
c000f928:	e8 c7 0e ff ff       	call   c00007f4 <strcpy>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	eb c3                	jmp    c000f8f5 <sysCallGetEnv(regs*)+0x15>

c000f932 <sysCallUSleep(regs*)>:
c000f932:	83 ec 14             	sub    esp,0x14
c000f935:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f93a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f93e:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f945:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f948:	01 ca                	add    edx,ecx
c000f94a:	52                   	push   edx
c000f94b:	50                   	push   eax
c000f94c:	e8 6a f0 ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c000f951:	31 c0                	xor    eax,eax
c000f953:	31 d2                	xor    edx,edx
c000f955:	83 c4 1c             	add    esp,0x1c
c000f958:	c3                   	ret    

c000f959 <sysCallSpawn(regs*)>:
c000f959:	56                   	push   esi
c000f95a:	53                   	push   ebx
c000f95b:	53                   	push   ebx
c000f95c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f960:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000f963:	85 f6                	test   esi,esi
c000f965:	75 08                	jne    c000f96f <sysCallSpawn(regs*)+0x16>
c000f967:	59                   	pop    ecx
c000f968:	31 c0                	xor    eax,eax
c000f96a:	31 d2                	xor    edx,edx
c000f96c:	5b                   	pop    ebx
c000f96d:	5e                   	pop    esi
c000f96e:	c3                   	ret    
c000f96f:	83 ec 0c             	sub    esp,0xc
c000f972:	68 2d 92 03 c0       	push   0xc003922d
c000f977:	e8 e4 d4 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000f97c:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000f983:	e8 88 2a 00 00       	call   c0012410 <operator new(unsigned long)>
c000f988:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f98b:	89 c6                	mov    esi,eax
c000f98d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f992:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f995:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f998:	56                   	push   esi
c000f999:	e8 0c e6 ff ff       	call   c000dfaa <Process::Process(char const*, Process*, char**)>
c000f99e:	83 c4 20             	add    esp,0x20
c000f9a1:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000f9a8:	75 bd                	jne    c000f967 <sysCallSpawn(regs*)+0xe>
c000f9aa:	83 ec 0c             	sub    esp,0xc
c000f9ad:	68 38 92 03 c0       	push   0xc0039238
c000f9b2:	e8 a9 d4 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000f9b7:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9ba:	e8 51 eb ff ff       	call   c000e510 <Process::createUserThread()>
c000f9bf:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	99                   	cdq    
c000f9c5:	59                   	pop    ecx
c000f9c6:	5b                   	pop    ebx
c000f9c7:	5e                   	pop    esi
c000f9c8:	c3                   	ret    

c000f9c9 <sysAppSettings(regs*)>:
c000f9c9:	53                   	push   ebx
c000f9ca:	83 ec 08             	sub    esp,0x8
c000f9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9d1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f9d4:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000f9da:	25 e0 1f 00 00       	and    eax,0x1fe0
c000f9df:	66 3d c0 09          	cmp    ax,0x9c0
c000f9e3:	75 2f                	jne    c000fa14 <sysAppSettings(regs*)+0x4b>
c000f9e5:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000f9eb:	83 e0 1f             	and    eax,0x1f
c000f9ee:	3c 01                	cmp    al,0x1
c000f9f0:	74 2e                	je     c000fa20 <sysAppSettings(regs*)+0x57>
c000f9f2:	3c 07                	cmp    al,0x7
c000f9f4:	0f 84 bd 00 00 00    	je     c000fab7 <sysAppSettings(regs*)+0xee>
c000f9fa:	84 c0                	test   al,al
c000f9fc:	0f 84 dc 00 00 00    	je     c000fade <sysAppSettings(regs*)+0x115>
c000fa02:	3c 08                	cmp    al,0x8
c000fa04:	74 6d                	je     c000fa73 <sysAppSettings(regs*)+0xaa>
c000fa06:	0f b6 c0             	movzx  eax,al
c000fa09:	83 c4 08             	add    esp,0x8
c000fa0c:	05 e8 03 00 00       	add    eax,0x3e8
c000fa11:	5b                   	pop    ebx
c000fa12:	99                   	cdq    
c000fa13:	c3                   	ret    
c000fa14:	b8 01 00 00 00       	mov    eax,0x1
c000fa19:	31 d2                	xor    edx,edx
c000fa1b:	83 c4 08             	add    esp,0x8
c000fa1e:	5b                   	pop    ebx
c000fa1f:	c3                   	ret    
c000fa20:	51                   	push   ecx
c000fa21:	68 00 01 00 00       	push   0x100
c000fa26:	6a 00                	push   0x0
c000fa28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa2d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa30:	83 c0 0c             	add    eax,0xc
c000fa33:	50                   	push   eax
c000fa34:	e8 9f 0c ff ff       	call   c00006d8 <memset>
c000fa39:	83 c4 0c             	add    esp,0xc
c000fa3c:	68 ff 00 00 00       	push   0xff
c000fa41:	53                   	push   ebx
c000fa42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa4a:	83 c0 0c             	add    eax,0xc
c000fa4d:	50                   	push   eax
c000fa4e:	e8 0e 0c ff ff       	call   c0000661 <memcpy>
c000fa53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa58:	5b                   	pop    ebx
c000fa59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa5c:	5a                   	pop    edx
c000fa5d:	8d 50 0c             	lea    edx,[eax+0xc]
c000fa60:	52                   	push   edx
c000fa61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fa67:	e8 ee 09 00 00       	call   c001045a <VgaText::setTitle(char*)>
c000fa6c:	83 c4 10             	add    esp,0x10
c000fa6f:	31 c0                	xor    eax,eax
c000fa71:	eb a6                	jmp    c000fa19 <sysAppSettings(regs*)+0x50>
c000fa73:	83 ec 08             	sub    esp,0x8
c000fa76:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fa7c:	83 e0 0f             	and    eax,0xf
c000fa7f:	50                   	push   eax
c000fa80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fa88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fa8e:	e8 b7 09 00 00       	call   c001044a <VgaText::setTitleColour(VgaColour)>
c000fa93:	58                   	pop    eax
c000fa94:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fa9a:	5a                   	pop    edx
c000fa9b:	c1 e8 04             	shr    eax,0x4
c000fa9e:	83 e0 0f             	and    eax,0xf
c000faa1:	50                   	push   eax
c000faa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000faa7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000faaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fab0:	e8 85 09 00 00       	call   c001043a <VgaText::setTitleTextColour(VgaColour)>
c000fab5:	eb b5                	jmp    c000fa6c <sysAppSettings(regs*)+0xa3>
c000fab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fabc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fabf:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000fac5:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000facb:	c0 e8 06             	shr    al,0x6
c000face:	83 e0 01             	and    eax,0x1
c000fad1:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fad7:	31 c0                	xor    eax,eax
c000fad9:	e9 3b ff ff ff       	jmp    c000fa19 <sysAppSettings(regs*)+0x50>
c000fade:	b8 02 00 00 00       	mov    eax,0x2
c000fae3:	e9 31 ff ff ff       	jmp    c000fa19 <sysAppSettings(regs*)+0x50>

c000fae8 <sysSetFatAttrib(regs*)>:
c000fae8:	57                   	push   edi
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000faef:	83 ec 0c             	sub    esp,0xc
c000faf2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000faf5:	68 14 01 00 00       	push   0x114
c000fafa:	e8 11 29 00 00       	call   c0012410 <operator new(unsigned long)>
c000faff:	83 c4 0c             	add    esp,0xc
c000fb02:	89 c3                	mov    ebx,eax
c000fb04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb09:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fb0c:	57                   	push   edi
c000fb0d:	53                   	push   ebx
c000fb0e:	e8 2b 2d 00 00       	call   c001283e <File::File(char const*, Process*)>
c000fb13:	83 c4 0c             	add    esp,0xc
c000fb16:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000fb19:	0f b6 d4             	movzx  edx,ah
c000fb1c:	0f b6 c0             	movzx  eax,al
c000fb1f:	52                   	push   edx
c000fb20:	50                   	push   eax
c000fb21:	53                   	push   ebx
c000fb22:	e8 8d 2f 00 00       	call   c0012ab4 <File::chfatattr(unsigned char, unsigned char)>
c000fb27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb2a:	89 c6                	mov    esi,eax
c000fb2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fb31:	83 c4 10             	add    esp,0x10
c000fb34:	31 c0                	xor    eax,eax
c000fb36:	5b                   	pop    ebx
c000fb37:	85 f6                	test   esi,esi
c000fb39:	5e                   	pop    esi
c000fb3a:	0f 95 c0             	setne  al
c000fb3d:	5f                   	pop    edi
c000fb3e:	31 d2                	xor    edx,edx
c000fb40:	f7 d8                	neg    eax
c000fb42:	83 d2 00             	adc    edx,0x0
c000fb45:	f7 da                	neg    edx
c000fb47:	c3                   	ret    

c000fb48 <sysPanic(regs*)>:
c000fb48:	83 ec 18             	sub    esp,0x18
c000fb4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb4f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fb52:	e8 27 d4 ff ff       	call   c000cf7e <panic(char const*)>
c000fb57:	c7 04 24 45 92 03 c0 	mov    DWORD PTR [esp],0xc0039245
c000fb5e:	e8 1b d4 ff ff       	call   c000cf7e <panic(char const*)>
c000fb63:	b8 01 00 00 00       	mov    eax,0x1
c000fb68:	31 d2                	xor    edx,edx
c000fb6a:	83 c4 1c             	add    esp,0x1c
c000fb6d:	c3                   	ret    

c000fb6e <sysPipe(regs*)>:
c000fb6e:	57                   	push   edi
c000fb6f:	56                   	push   esi
c000fb70:	53                   	push   ebx
c000fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb75:	83 ec 0c             	sub    esp,0xc
c000fb78:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fb7b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fb7e:	6a 20                	push   0x20
c000fb80:	e8 8b 28 00 00       	call   c0012410 <operator new(unsigned long)>
c000fb85:	89 c3                	mov    ebx,eax
c000fb87:	58                   	pop    eax
c000fb88:	5a                   	pop    edx
c000fb89:	68 00 50 00 00       	push   0x5000
c000fb8e:	53                   	push   ebx
c000fb8f:	e8 26 e3 ff ff       	call   c000deba <Pipe::Pipe(int)>
c000fb94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb97:	e8 98 14 00 00       	call   c0011034 <UnixFile::getFileDescriptor()>
c000fb9c:	89 07                	mov    DWORD PTR [edi],eax
c000fb9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba1:	e8 8e 14 00 00       	call   c0011034 <UnixFile::getFileDescriptor()>
c000fba6:	83 c4 10             	add    esp,0x10
c000fba9:	89 06                	mov    DWORD PTR [esi],eax
c000fbab:	31 d2                	xor    edx,edx
c000fbad:	5b                   	pop    ebx
c000fbae:	31 c0                	xor    eax,eax
c000fbb0:	5e                   	pop    esi
c000fbb1:	5f                   	pop    edi
c000fbb2:	c3                   	ret    

c000fbb3 <sysGetUnixTime(regs*)>:
c000fbb3:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c000fbb8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fbbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbc2:	e9 3f 36 00 00       	jmp    c0013206 <Clock::timeInSecondsLocal()>

c000fbc7 <string_ends_with(char const*, char const*)>:
c000fbc7:	57                   	push   edi
c000fbc8:	56                   	push   esi
c000fbc9:	53                   	push   ebx
c000fbca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd2:	83 ec 0c             	sub    esp,0xc
c000fbd5:	53                   	push   ebx
c000fbd6:	e8 26 0b ff ff       	call   c0000701 <strlen>
c000fbdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fbde:	89 c6                	mov    esi,eax
c000fbe0:	e8 1c 0b ff ff       	call   c0000701 <strlen>
c000fbe5:	83 c4 10             	add    esp,0x10
c000fbe8:	39 c6                	cmp    esi,eax
c000fbea:	7d 06                	jge    c000fbf2 <string_ends_with(char const*, char const*)+0x2b>
c000fbec:	5b                   	pop    ebx
c000fbed:	31 c0                	xor    eax,eax
c000fbef:	5e                   	pop    esi
c000fbf0:	5f                   	pop    edi
c000fbf1:	c3                   	ret    
c000fbf2:	83 ec 08             	sub    esp,0x8
c000fbf5:	29 c6                	sub    esi,eax
c000fbf7:	57                   	push   edi
c000fbf8:	01 f3                	add    ebx,esi
c000fbfa:	53                   	push   ebx
c000fbfb:	e8 7a 0c ff ff       	call   c000087a <strcmp>
c000fc00:	83 c4 10             	add    esp,0x10
c000fc03:	85 c0                	test   eax,eax
c000fc05:	5b                   	pop    ebx
c000fc06:	0f 94 c0             	sete   al
c000fc09:	5e                   	pop    esi
c000fc0a:	0f b6 c0             	movzx  eax,al
c000fc0d:	5f                   	pop    edi
c000fc0e:	c3                   	ret    

c000fc0f <setupSystemCalls()>:
c000fc0f:	c7 05 80 bb 03 c0 5c 84 01 c0 	mov    DWORD PTR ds:0xc003bb80,0xc001845c
c000fc19:	c7 05 84 bb 03 c0 1f 83 01 c0 	mov    DWORD PTR ds:0xc003bb84,0xc001831f
c000fc23:	c7 05 88 bb 03 c0 9f 83 01 c0 	mov    DWORD PTR ds:0xc003bb88,0xc001839f
c000fc2d:	c7 05 8c bb 03 c0 f4 83 01 c0 	mov    DWORD PTR ds:0xc003bb8c,0xc00183f4
c000fc37:	c7 05 90 bb 03 c0 37 83 01 c0 	mov    DWORD PTR ds:0xc003bb90,0xc0018337
c000fc41:	c7 05 94 bb 03 c0 76 f0 00 c0 	mov    DWORD PTR ds:0xc003bb94,0xc000f076
c000fc4b:	c7 05 98 bb 03 c0 ef f1 00 c0 	mov    DWORD PTR ds:0xc003bb98,0xc000f1ef
c000fc55:	c7 05 9c bb 03 c0 0e f2 00 c0 	mov    DWORD PTR ds:0xc003bb9c,0xc000f20e
c000fc5f:	c7 05 a4 bb 03 c0 87 f5 00 c0 	mov    DWORD PTR ds:0xc003bba4,0xc000f587
c000fc69:	c7 05 a0 bb 03 c0 6d f2 00 c0 	mov    DWORD PTR ds:0xc003bba0,0xc000f26d
c000fc73:	c7 05 a8 bb 03 c0 d5 f5 00 c0 	mov    DWORD PTR ds:0xc003bba8,0xc000f5d5
c000fc7d:	c7 05 ac bb 03 c0 5d f3 00 c0 	mov    DWORD PTR ds:0xc003bbac,0xc000f35d
c000fc87:	c7 05 b0 bb 03 c0 82 f0 00 c0 	mov    DWORD PTR ds:0xc003bbb0,0xc000f082
c000fc91:	c7 05 b4 bb 03 c0 87 f0 00 c0 	mov    DWORD PTR ds:0xc003bbb4,0xc000f087
c000fc9b:	c7 05 b8 bb 03 c0 42 f6 00 c0 	mov    DWORD PTR ds:0xc003bbb8,0xc000f642
c000fca5:	c7 05 bc bb 03 c0 9b f6 00 c0 	mov    DWORD PTR ds:0xc003bbbc,0xc000f69b
c000fcaf:	c7 05 c0 bb 03 c0 1f f4 00 c0 	mov    DWORD PTR ds:0xc003bbc0,0xc000f41f
c000fcb9:	c7 05 c4 bb 03 c0 70 f4 00 c0 	mov    DWORD PTR ds:0xc003bbc4,0xc000f470
c000fcc3:	c7 05 c8 bb 03 c0 35 f5 00 c0 	mov    DWORD PTR ds:0xc003bbc8,0xc000f535
c000fccd:	c7 05 cc bb 03 c0 8c f0 00 c0 	mov    DWORD PTR ds:0xc003bbcc,0xc000f08c
c000fcd7:	c7 05 d0 bb 03 c0 e9 f6 00 c0 	mov    DWORD PTR ds:0xc003bbd0,0xc000f6e9
c000fce1:	c7 05 d4 bb 03 c0 03 f7 00 c0 	mov    DWORD PTR ds:0xc003bbd4,0xc000f703
c000fceb:	c7 05 d8 bb 03 c0 1f f7 00 c0 	mov    DWORD PTR ds:0xc003bbd8,0xc000f71f
c000fcf5:	c7 05 dc bb 03 c0 74 f7 00 c0 	mov    DWORD PTR ds:0xc003bbdc,0xc000f774
c000fcff:	c7 05 e0 bb 03 c0 c6 f7 00 c0 	mov    DWORD PTR ds:0xc003bbe0,0xc000f7c6
c000fd09:	c7 05 e4 bb 03 c0 96 f0 00 c0 	mov    DWORD PTR ds:0xc003bbe4,0xc000f096
c000fd13:	c7 05 e8 bb 03 c0 18 f8 00 c0 	mov    DWORD PTR ds:0xc003bbe8,0xc000f818
c000fd1d:	c7 05 ec bb 03 c0 2a f2 00 c0 	mov    DWORD PTR ds:0xc003bbec,0xc000f22a
c000fd27:	c7 05 f0 bb 03 c0 64 f8 00 c0 	mov    DWORD PTR ds:0xc003bbf0,0xc000f864
c000fd31:	c7 05 f4 bb 03 c0 cc f3 00 c0 	mov    DWORD PTR ds:0xc003bbf4,0xc000f3cc
c000fd3b:	c7 05 f8 bb 03 c0 32 f9 00 c0 	mov    DWORD PTR ds:0xc003bbf8,0xc000f932
c000fd45:	c7 05 fc bb 03 c0 bc f4 00 c0 	mov    DWORD PTR ds:0xc003bbfc,0xc000f4bc
c000fd4f:	c7 05 00 bc 03 c0 59 f9 00 c0 	mov    DWORD PTR ds:0xc003bc00,0xc000f959
c000fd59:	c7 05 04 bc 03 c0 e0 f8 00 c0 	mov    DWORD PTR ds:0xc003bc04,0xc000f8e0
c000fd63:	c7 05 08 bc 03 c0 c9 f9 00 c0 	mov    DWORD PTR ds:0xc003bc08,0xc000f9c9
c000fd6d:	c7 05 0c bc 03 c0 a6 f0 00 c0 	mov    DWORD PTR ds:0xc003bc0c,0xc000f0a6
c000fd77:	c7 05 10 bc 03 c0 10 f1 00 c0 	mov    DWORD PTR ds:0xc003bc10,0xc000f110
c000fd81:	c7 05 14 bc 03 c0 56 f1 00 c0 	mov    DWORD PTR ds:0xc003bc14,0xc000f156
c000fd8b:	c7 05 18 bc 03 c0 e8 fa 00 c0 	mov    DWORD PTR ds:0xc003bc18,0xc000fae8
c000fd95:	c7 05 1c bc 03 c0 48 fb 00 c0 	mov    DWORD PTR ds:0xc003bc1c,0xc000fb48
c000fd9f:	c7 05 20 bc 03 c0 a7 f1 00 c0 	mov    DWORD PTR ds:0xc003bc20,0xc000f1a7
c000fda9:	c7 05 24 bc 03 c0 6e fb 00 c0 	mov    DWORD PTR ds:0xc003bc24,0xc000fb6e
c000fdb3:	c7 05 28 bc 03 c0 b3 fb 00 c0 	mov    DWORD PTR ds:0xc003bc28,0xc000fbb3
c000fdbd:	c3                   	ret    

c000fdbe <systemCall(regs*, void*)>:
c000fdbe:	53                   	push   ebx
c000fdbf:	83 ec 08             	sub    esp,0x8
c000fdc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdc6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fdc9:	83 f8 7f             	cmp    eax,0x7f
c000fdcc:	77 16                	ja     c000fde4 <systemCall(regs*, void*)+0x26>
c000fdce:	8b 14 85 80 bb 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4480]
c000fdd5:	85 d2                	test   edx,edx
c000fdd7:	74 0b                	je     c000fde4 <systemCall(regs*, void*)+0x26>
c000fdd9:	83 ec 0c             	sub    esp,0xc
c000fddc:	53                   	push   ebx
c000fddd:	ff d2                	call   edx
c000fddf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fde2:	eb 0d                	jmp    c000fdf1 <systemCall(regs*, void*)+0x33>
c000fde4:	52                   	push   edx
c000fde5:	52                   	push   edx
c000fde6:	50                   	push   eax
c000fde7:	68 54 92 03 c0       	push   0xc0039254
c000fdec:	e8 6f d0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c000fdf1:	83 c4 10             	add    esp,0x10
c000fdf4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fdf9:	31 d2                	xor    edx,edx
c000fdfb:	83 c4 08             	add    esp,0x8
c000fdfe:	5b                   	pop    ebx
c000fdff:	c3                   	ret    

c000fe00 <VgaText::isAtty()>:
c000fe00:	b0 01                	mov    al,0x1
c000fe02:	c3                   	ret    
c000fe03:	90                   	nop

c000fe04 <VgaText::~VgaText()>:
c000fe04:	83 ec 0c             	sub    esp,0xc
c000fe07:	ba 5c 93 03 c0       	mov    edx,0xc003935c
c000fe0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe10:	89 10                	mov    DWORD PTR [eax],edx
c000fe12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe16:	83 ec 0c             	sub    esp,0xc
c000fe19:	50                   	push   eax
c000fe1a:	e8 81 12 00 00       	call   c00110a0 <UnixFile::~UnixFile()>
c000fe1f:	83 c4 10             	add    esp,0x10
c000fe22:	90                   	nop
c000fe23:	83 c4 0c             	add    esp,0xc
c000fe26:	c3                   	ret    
c000fe27:	90                   	nop

c000fe28 <VgaText::~VgaText()>:
c000fe28:	83 ec 0c             	sub    esp,0xc
c000fe2b:	83 ec 0c             	sub    esp,0xc
c000fe2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe32:	e8 cd ff ff ff       	call   c000fe04 <VgaText::~VgaText()>
c000fe37:	83 c4 10             	add    esp,0x10
c000fe3a:	83 ec 08             	sub    esp,0x8
c000fe3d:	68 60 12 00 00       	push   0x1260
c000fe42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe46:	e8 d4 25 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c000fe4b:	83 c4 10             	add    esp,0x10
c000fe4e:	83 c4 0c             	add    esp,0xc
c000fe51:	c3                   	ret    

c000fe52 <VgaText::read(unsigned long long, void*, int*)>:
c000fe52:	83 ec 10             	sub    esp,0x10
c000fe55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe61:	e8 34 4f 00 00       	call   c0014d9a <readKeyboard(VgaText*, char*, unsigned long)>
c000fe66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fe6a:	89 02                	mov    DWORD PTR [edx],eax
c000fe6c:	31 c0                	xor    eax,eax
c000fe6e:	83 c4 1c             	add    esp,0x1c
c000fe71:	c3                   	ret    

c000fe72 <setTerminalScrollLock(bool)>:
c000fe72:	c3                   	ret    

c000fe73 <addToTerminalCycle(VgaText*)>:
c000fe73:	8b 15 a0 bd 03 c0    	mov    edx,DWORD PTR ds:0xc003bda0
c000fe79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe7d:	85 d2                	test   edx,edx
c000fe7f:	75 0c                	jne    c000fe8d <addToTerminalCycle(VgaText*)+0x1a>
c000fe81:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fe87:	a3 a0 bd 03 c0       	mov    ds:0xc003bda0,eax
c000fe8c:	c3                   	ret    
c000fe8d:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fe93:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fe99:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fe9f:	c3                   	ret    

c000fea0 <installVgaTextImplementation()>:
c000fea0:	83 ec 10             	sub    esp,0x10
c000fea3:	6a 20                	push   0x20
c000fea5:	6a 00                	push   0x0
c000fea7:	68 80 bd 03 c0       	push   0xc003bd80
c000feac:	e8 27 08 ff ff       	call   c00006d8 <memset>
c000feb1:	83 c4 1c             	add    esp,0x1c
c000feb4:	c3                   	ret    

c000feb5 <scrollTerminalScrollLock(int)>:
c000feb5:	c3                   	ret    

c000feb6 <VgaText::load()>:
c000feb6:	53                   	push   ebx
c000feb7:	31 c0                	xor    eax,eax
c000feb9:	83 ec 58             	sub    esp,0x58
c000febc:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fec0:	89 e2                	mov    edx,esp
c000fec2:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fec6:	40                   	inc    eax
c000fec7:	83 f8 50             	cmp    eax,0x50
c000feca:	75 f6                	jne    c000fec2 <VgaText::load()+0xc>
c000fecc:	31 c0                	xor    eax,eax
c000fece:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fed5:	84 c9                	test   cl,cl
c000fed7:	74 06                	je     c000fedf <VgaText::load()+0x29>
c000fed9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fedc:	40                   	inc    eax
c000fedd:	eb ef                	jmp    c000fece <VgaText::load()+0x18>
c000fedf:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fee5:	85 c0                	test   eax,eax
c000fee7:	74 09                	je     c000fef2 <VgaText::load()+0x3c>
c000fee9:	51                   	push   ecx
c000feea:	51                   	push   ecx
c000feeb:	52                   	push   edx
c000feec:	53                   	push   ebx
c000feed:	ff d0                	call   eax
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fef8:	85 c0                	test   eax,eax
c000fefa:	74 09                	je     c000ff05 <VgaText::load()+0x4f>
c000fefc:	83 ec 0c             	sub    esp,0xc
c000feff:	53                   	push   ebx
c000ff00:	ff d0                	call   eax
c000ff02:	83 c4 10             	add    esp,0x10
c000ff05:	83 c4 58             	add    esp,0x58
c000ff08:	5b                   	pop    ebx
c000ff09:	c3                   	ret    

c000ff0a <VgaText::updateCursor()>:
c000ff0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff0e:	39 05 a4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bda4,eax
c000ff14:	75 0c                	jne    c000ff22 <VgaText::updateCursor()+0x18>
c000ff16:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ff1c:	85 c0                	test   eax,eax
c000ff1e:	74 02                	je     c000ff22 <VgaText::updateCursor()+0x18>
c000ff20:	ff e0                	jmp    eax
c000ff22:	c3                   	ret    
c000ff23:	90                   	nop

c000ff24 <VgaText::showCursor(bool)>:
c000ff24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff2c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ff32:	c3                   	ret    
c000ff33:	90                   	nop

c000ff34 <VgaText::disableBlink(bool)>:
c000ff34:	56                   	push   esi
c000ff35:	53                   	push   ebx
c000ff36:	51                   	push   ecx
c000ff37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff3b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ff3f:	39 1d a4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bda4,ebx
c000ff45:	75 18                	jne    c000ff5f <VgaText::disableBlink(bool)+0x2b>
c000ff47:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ff4d:	85 c0                	test   eax,eax
c000ff4f:	74 0e                	je     c000ff5f <VgaText::disableBlink(bool)+0x2b>
c000ff51:	89 f1                	mov    ecx,esi
c000ff53:	52                   	push   edx
c000ff54:	52                   	push   edx
c000ff55:	0f b6 d1             	movzx  edx,cl
c000ff58:	52                   	push   edx
c000ff59:	53                   	push   ebx
c000ff5a:	ff d0                	call   eax
c000ff5c:	83 c4 10             	add    esp,0x10
c000ff5f:	89 f0                	mov    eax,esi
c000ff61:	83 f0 01             	xor    eax,0x1
c000ff64:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ff6a:	58                   	pop    eax
c000ff6b:	5b                   	pop    ebx
c000ff6c:	5e                   	pop    esi
c000ff6d:	c3                   	ret    

c000ff6e <VgaText::doANSI_SGR(int)>:
c000ff6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff76:	85 d2                	test   edx,edx
c000ff78:	75 14                	jne    c000ff8e <VgaText::doANSI_SGR(int)+0x20>
c000ff7a:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ff80:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ff86:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000ff8c:	eb 65                	jmp    c000fff3 <VgaText::doANSI_SGR(int)+0x85>
c000ff8e:	83 fa 07             	cmp    edx,0x7
c000ff91:	75 14                	jne    c000ffa7 <VgaText::doANSI_SGR(int)+0x39>
c000ff93:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ff99:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ff9f:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ffa5:	eb 4c                	jmp    c000fff3 <VgaText::doANSI_SGR(int)+0x85>
c000ffa7:	83 fa 1b             	cmp    edx,0x1b
c000ffaa:	74 ce                	je     c000ff7a <VgaText::doANSI_SGR(int)+0xc>
c000ffac:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ffaf:	83 f9 07             	cmp    ecx,0x7
c000ffb2:	77 09                	ja     c000ffbd <VgaText::doANSI_SGR(int)+0x4f>
c000ffb4:	8b 14 8d 60 ad 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc52a0]
c000ffbb:	eb 20                	jmp    c000ffdd <VgaText::doANSI_SGR(int)+0x6f>
c000ffbd:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ffc0:	83 f9 07             	cmp    ecx,0x7
c000ffc3:	77 09                	ja     c000ffce <VgaText::doANSI_SGR(int)+0x60>
c000ffc5:	8b 14 8d 60 ad 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc52a0]
c000ffcc:	eb 25                	jmp    c000fff3 <VgaText::doANSI_SGR(int)+0x85>
c000ffce:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ffd1:	83 f9 07             	cmp    ecx,0x7
c000ffd4:	77 0e                	ja     c000ffe4 <VgaText::doANSI_SGR(int)+0x76>
c000ffd6:	8b 14 95 18 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc53e8]
c000ffdd:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ffe3:	c3                   	ret    
c000ffe4:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ffe7:	83 f9 07             	cmp    ecx,0x7
c000ffea:	77 0d                	ja     c000fff9 <VgaText::doANSI_SGR(int)+0x8b>
c000ffec:	8b 14 95 f0 ab 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5410]
c000fff3:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fff9:	c3                   	ret    

c000fffa <VgaText::setDefaultBgColour(VgaColour)>:
c000fffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fffe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010002:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010008:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001000e:	c3                   	ret    
c001000f:	90                   	nop

c0010010 <VgaText::setDefaultFgColour(VgaColour)>:
c0010010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010014:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010018:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001001e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010024:	c3                   	ret    
c0010025:	90                   	nop

c0010026 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010026:	53                   	push   ebx
c0010027:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001002b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001002f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010033:	51                   	push   ecx
c0010034:	e8 c1 ff ff ff       	call   c000fffa <VgaText::setDefaultBgColour(VgaColour)>
c0010039:	58                   	pop    eax
c001003a:	5a                   	pop    edx
c001003b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001003f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010043:	5b                   	pop    ebx
c0010044:	eb ca                	jmp    c0010010 <VgaText::setDefaultFgColour(VgaColour)>

c0010046 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010046:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001004a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001004f:	83 e0 0f             	and    eax,0xf
c0010052:	c1 e2 04             	shl    edx,0x4
c0010055:	09 d0                	or     eax,edx
c0010057:	c3                   	ret    

c0010058 <VgaText::scrollScreen()>:
c0010058:	57                   	push   edi
c0010059:	56                   	push   esi
c001005a:	be 01 00 00 00       	mov    esi,0x1
c001005f:	53                   	push   ebx
c0010060:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010064:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001006a:	31 ff                	xor    edi,edi
c001006c:	01 d9                	add    ecx,ebx
c001006e:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010071:	83 fe 17             	cmp    esi,0x17
c0010074:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001007a:	75 28                	jne    c00100a4 <VgaText::scrollScreen()+0x4c>
c001007c:	f7 c7 01 00 00 00    	test   edi,0x1
c0010082:	74 1c                	je     c00100a0 <VgaText::scrollScreen()+0x48>
c0010084:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001008b:	50                   	push   eax
c001008c:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010093:	50                   	push   eax
c0010094:	e8 ad ff ff ff       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c0010099:	5a                   	pop    edx
c001009a:	5a                   	pop    edx
c001009b:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001009e:	eb 04                	jmp    c00100a4 <VgaText::scrollScreen()+0x4c>
c00100a0:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00100a4:	47                   	inc    edi
c00100a5:	41                   	inc    ecx
c00100a6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00100ac:	75 c0                	jne    c001006e <VgaText::scrollScreen()+0x16>
c00100ae:	46                   	inc    esi
c00100af:	83 fe 18             	cmp    esi,0x18
c00100b2:	75 b0                	jne    c0010064 <VgaText::scrollScreen()+0xc>
c00100b4:	39 1d a4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bda4,ebx
c00100ba:	75 24                	jne    c00100e0 <VgaText::scrollScreen()+0x88>
c00100bc:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00100c3:	74 08                	je     c00100cd <VgaText::scrollScreen()+0x75>
c00100c5:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00100cb:	eb 13                	jmp    c00100e0 <VgaText::scrollScreen()+0x88>
c00100cd:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00100d3:	85 c0                	test   eax,eax
c00100d5:	74 09                	je     c00100e0 <VgaText::scrollScreen()+0x88>
c00100d7:	83 ec 0c             	sub    esp,0xc
c00100da:	53                   	push   ebx
c00100db:	ff d0                	call   eax
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100e4:	5b                   	pop    ebx
c00100e5:	5e                   	pop    esi
c00100e6:	5f                   	pop    edi
c00100e7:	e9 1e fe ff ff       	jmp    c000ff0a <VgaText::updateCursor()>

c00100ec <VgaText::combineCharAndColour(char, unsigned char)>:
c00100ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00100f1:	c1 e0 08             	shl    eax,0x8
c00100f4:	89 c2                	mov    edx,eax
c00100f6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00100fb:	09 d0                	or     eax,edx
c00100fd:	c3                   	ret    

c00100fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00100fe:	53                   	push   ebx
c00100ff:	83 ec 08             	sub    esp,0x8
c0010102:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010106:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001010b:	50                   	push   eax
c001010c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010111:	50                   	push   eax
c0010112:	e8 2f ff ff ff       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c0010117:	5a                   	pop    edx
c0010118:	0f b6 c0             	movzx  eax,al
c001011b:	5b                   	pop    ebx
c001011c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010121:	50                   	push   eax
c0010122:	53                   	push   ebx
c0010123:	e8 c4 ff ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010128:	5a                   	pop    edx
c0010129:	5a                   	pop    edx
c001012a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010130:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010134:	0f b7 d2             	movzx  edx,dx
c0010137:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001013c:	39 0d a4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bda4,ecx
c0010142:	75 14                	jne    c0010158 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010144:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001014a:	85 c0                	test   eax,eax
c001014c:	74 0a                	je     c0010158 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001014e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010152:	83 c4 08             	add    esp,0x8
c0010155:	5b                   	pop    ebx
c0010156:	ff e0                	jmp    eax
c0010158:	83 c4 08             	add    esp,0x8
c001015b:	5b                   	pop    ebx
c001015c:	c3                   	ret    
c001015d:	90                   	nop

c001015e <VgaText::getCursorX()>:
c001015e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010162:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010168:	c3                   	ret    
c0010169:	90                   	nop

c001016a <VgaText::getCursorY()>:
c001016a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001016e:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <VgaText::setCursor(int, int)>:
c0010176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001017e:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010184:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010188:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001018e:	e9 77 fd ff ff       	jmp    c000ff0a <VgaText::updateCursor()>
c0010193:	90                   	nop

c0010194 <VgaText::setCursorX(int)>:
c0010194:	83 ec 10             	sub    esp,0x10
c0010197:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019b:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00101a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a5:	50                   	push   eax
c00101a6:	e8 cb ff ff ff       	call   c0010176 <VgaText::setCursor(int, int)>
c00101ab:	83 c4 1c             	add    esp,0x1c
c00101ae:	c3                   	ret    
c00101af:	90                   	nop

c00101b0 <VgaText::setCursorY(int)>:
c00101b0:	83 ec 10             	sub    esp,0x10
c00101b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101bb:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00101c1:	50                   	push   eax
c00101c2:	e8 af ff ff ff       	call   c0010176 <VgaText::setCursor(int, int)>
c00101c7:	83 c4 1c             	add    esp,0x1c
c00101ca:	c3                   	ret    
c00101cb:	90                   	nop

c00101cc <VgaText::incrementCursor(bool)>:
c00101cc:	56                   	push   esi
c00101cd:	53                   	push   ebx
c00101ce:	51                   	push   ecx
c00101cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101d7:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00101dd:	40                   	inc    eax
c00101de:	83 f8 50             	cmp    eax,0x50
c00101e1:	74 08                	je     c00101eb <VgaText::incrementCursor(bool)+0x1f>
c00101e3:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00101e9:	eb 33                	jmp    c001021e <VgaText::incrementCursor(bool)+0x52>
c00101eb:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00101f1:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00101fb:	8d 50 01             	lea    edx,[eax+0x1]
c00101fe:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010204:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001020a:	75 12                	jne    c001021e <VgaText::incrementCursor(bool)+0x52>
c001020c:	83 ec 0c             	sub    esp,0xc
c001020f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010215:	53                   	push   ebx
c0010216:	e8 3d fe ff ff       	call   c0010058 <VgaText::scrollScreen()>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	89 f0                	mov    eax,esi
c0010220:	84 c0                	test   al,al
c0010222:	74 0c                	je     c0010230 <VgaText::incrementCursor(bool)+0x64>
c0010224:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010228:	5a                   	pop    edx
c0010229:	5b                   	pop    ebx
c001022a:	5e                   	pop    esi
c001022b:	e9 da fc ff ff       	jmp    c000ff0a <VgaText::updateCursor()>
c0010230:	58                   	pop    eax
c0010231:	5b                   	pop    ebx
c0010232:	5e                   	pop    esi
c0010233:	c3                   	ret    

c0010234 <VgaText::updateRAMUsageDisplay(int)>:
c0010234:	53                   	push   ebx
c0010235:	bb 0a 00 00 00       	mov    ebx,0xa
c001023a:	6a 0f                	push   0xf
c001023c:	6a 00                	push   0x0
c001023e:	e8 03 fe ff ff       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c0010243:	5a                   	pop    edx
c0010244:	59                   	pop    ecx
c0010245:	0f b6 c8             	movzx  ecx,al
c0010248:	51                   	push   ecx
c0010249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001024d:	99                   	cdq    
c001024e:	f7 fb                	idiv   ebx
c0010250:	89 d3                	mov    ebx,edx
c0010252:	83 c0 30             	add    eax,0x30
c0010255:	83 c3 30             	add    ebx,0x30
c0010258:	0f be c0             	movsx  eax,al
c001025b:	0f b6 db             	movzx  ebx,bl
c001025e:	50                   	push   eax
c001025f:	e8 88 fe ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010264:	5a                   	pop    edx
c0010265:	5a                   	pop    edx
c0010266:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001026c:	51                   	push   ecx
c001026d:	53                   	push   ebx
c001026e:	e8 79 fe ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010273:	5b                   	pop    ebx
c0010274:	5a                   	pop    edx
c0010275:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001027b:	51                   	push   ecx
c001027c:	6a 25                	push   0x25
c001027e:	e8 69 fe ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010283:	59                   	pop    ecx
c0010284:	5b                   	pop    ebx
c0010285:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001028b:	5b                   	pop    ebx
c001028c:	c3                   	ret    
c001028d:	90                   	nop

c001028e <VgaText::updateDiskUsage()>:
c001028e:	55                   	push   ebp
c001028f:	bd 10 27 00 00       	mov    ebp,0x2710
c0010294:	57                   	push   edi
c0010295:	56                   	push   esi
c0010296:	53                   	push   ebx
c0010297:	6a 0f                	push   0xf
c0010299:	6a 00                	push   0x0
c001029b:	e8 a6 fd ff ff       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c00102a0:	5a                   	pop    edx
c00102a1:	0f b6 d8             	movzx  ebx,al
c00102a4:	59                   	pop    ecx
c00102a5:	a1 e8 cf 03 c0       	mov    eax,ds:0xc003cfe8
c00102aa:	53                   	push   ebx
c00102ab:	b9 0a 00 00 00       	mov    ecx,0xa
c00102b0:	99                   	cdq    
c00102b1:	f7 fd                	idiv   ebp
c00102b3:	99                   	cdq    
c00102b4:	f7 f9                	idiv   ecx
c00102b6:	8d 42 30             	lea    eax,[edx+0x30]
c00102b9:	0f b6 c0             	movzx  eax,al
c00102bc:	50                   	push   eax
c00102bd:	e8 2a fe ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c00102c2:	5e                   	pop    esi
c00102c3:	5f                   	pop    edi
c00102c4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c00102ca:	bf e8 03 00 00       	mov    edi,0x3e8
c00102cf:	53                   	push   ebx
c00102d0:	a1 e8 cf 03 c0       	mov    eax,ds:0xc003cfe8
c00102d5:	99                   	cdq    
c00102d6:	f7 ff                	idiv   edi
c00102d8:	99                   	cdq    
c00102d9:	f7 f9                	idiv   ecx
c00102db:	8d 42 30             	lea    eax,[edx+0x30]
c00102de:	0f b6 c0             	movzx  eax,al
c00102e1:	50                   	push   eax
c00102e2:	e8 05 fe ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c00102e7:	5a                   	pop    edx
c00102e8:	5e                   	pop    esi
c00102e9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00102ef:	be 64 00 00 00       	mov    esi,0x64
c00102f4:	53                   	push   ebx
c00102f5:	a1 e8 cf 03 c0       	mov    eax,ds:0xc003cfe8
c00102fa:	99                   	cdq    
c00102fb:	f7 fe                	idiv   esi
c00102fd:	99                   	cdq    
c00102fe:	f7 f9                	idiv   ecx
c0010300:	8d 42 30             	lea    eax,[edx+0x30]
c0010303:	0f b6 c0             	movzx  eax,al
c0010306:	50                   	push   eax
c0010307:	e8 e0 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c001030c:	5a                   	pop    edx
c001030d:	5a                   	pop    edx
c001030e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010314:	53                   	push   ebx
c0010315:	a1 e8 cf 03 c0       	mov    eax,ds:0xc003cfe8
c001031a:	99                   	cdq    
c001031b:	f7 f9                	idiv   ecx
c001031d:	99                   	cdq    
c001031e:	f7 f9                	idiv   ecx
c0010320:	8d 42 30             	lea    eax,[edx+0x30]
c0010323:	0f b6 c0             	movzx  eax,al
c0010326:	50                   	push   eax
c0010327:	e8 c0 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c001032c:	5a                   	pop    edx
c001032d:	5a                   	pop    edx
c001032e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c0010334:	53                   	push   ebx
c0010335:	a1 e8 cf 03 c0       	mov    eax,ds:0xc003cfe8
c001033a:	99                   	cdq    
c001033b:	f7 f9                	idiv   ecx
c001033d:	8d 42 30             	lea    eax,[edx+0x30]
c0010340:	0f b6 c0             	movzx  eax,al
c0010343:	50                   	push   eax
c0010344:	e8 a3 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010349:	5a                   	pop    edx
c001034a:	5a                   	pop    edx
c001034b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010351:	53                   	push   ebx
c0010352:	a1 e4 cf 03 c0       	mov    eax,ds:0xc003cfe4
c0010357:	99                   	cdq    
c0010358:	f7 fd                	idiv   ebp
c001035a:	99                   	cdq    
c001035b:	f7 f9                	idiv   ecx
c001035d:	8d 42 30             	lea    eax,[edx+0x30]
c0010360:	0f b6 c0             	movzx  eax,al
c0010363:	50                   	push   eax
c0010364:	e8 83 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010369:	5d                   	pop    ebp
c001036a:	5a                   	pop    edx
c001036b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010371:	53                   	push   ebx
c0010372:	a1 e4 cf 03 c0       	mov    eax,ds:0xc003cfe4
c0010377:	99                   	cdq    
c0010378:	f7 ff                	idiv   edi
c001037a:	99                   	cdq    
c001037b:	f7 f9                	idiv   ecx
c001037d:	8d 42 30             	lea    eax,[edx+0x30]
c0010380:	0f b6 c0             	movzx  eax,al
c0010383:	50                   	push   eax
c0010384:	e8 63 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c0010389:	5f                   	pop    edi
c001038a:	5d                   	pop    ebp
c001038b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010391:	53                   	push   ebx
c0010392:	a1 e4 cf 03 c0       	mov    eax,ds:0xc003cfe4
c0010397:	99                   	cdq    
c0010398:	f7 fe                	idiv   esi
c001039a:	99                   	cdq    
c001039b:	f7 f9                	idiv   ecx
c001039d:	8d 42 30             	lea    eax,[edx+0x30]
c00103a0:	0f b6 c0             	movzx  eax,al
c00103a3:	50                   	push   eax
c00103a4:	e8 43 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c00103a9:	5a                   	pop    edx
c00103aa:	5e                   	pop    esi
c00103ab:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c00103b1:	53                   	push   ebx
c00103b2:	a1 e4 cf 03 c0       	mov    eax,ds:0xc003cfe4
c00103b7:	99                   	cdq    
c00103b8:	f7 f9                	idiv   ecx
c00103ba:	99                   	cdq    
c00103bb:	f7 f9                	idiv   ecx
c00103bd:	8d 42 30             	lea    eax,[edx+0x30]
c00103c0:	0f b6 c0             	movzx  eax,al
c00103c3:	50                   	push   eax
c00103c4:	e8 23 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c00103c9:	5f                   	pop    edi
c00103ca:	5d                   	pop    ebp
c00103cb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c00103d1:	53                   	push   ebx
c00103d2:	a1 e4 cf 03 c0       	mov    eax,ds:0xc003cfe4
c00103d7:	99                   	cdq    
c00103d8:	f7 f9                	idiv   ecx
c00103da:	83 c2 30             	add    edx,0x30
c00103dd:	0f b6 d2             	movzx  edx,dl
c00103e0:	52                   	push   edx
c00103e1:	e8 06 fd ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c00103e6:	5a                   	pop    edx
c00103e7:	59                   	pop    ecx
c00103e8:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00103ee:	5b                   	pop    ebx
c00103ef:	5e                   	pop    esi
c00103f0:	5f                   	pop    edi
c00103f1:	5d                   	pop    ebp
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <VgaText::updateTitle()>:
c00103f4:	53                   	push   ebx
c00103f5:	31 c0                	xor    eax,eax
c00103f7:	83 ec 58             	sub    esp,0x58
c00103fa:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00103fe:	89 e1                	mov    ecx,esp
c0010400:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010404:	40                   	inc    eax
c0010405:	83 f8 50             	cmp    eax,0x50
c0010408:	75 f6                	jne    c0010400 <VgaText::updateTitle()+0xc>
c001040a:	31 c0                	xor    eax,eax
c001040c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010413:	84 db                	test   bl,bl
c0010415:	74 06                	je     c001041d <VgaText::updateTitle()+0x29>
c0010417:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001041a:	40                   	inc    eax
c001041b:	eb ef                	jmp    c001040c <VgaText::updateTitle()+0x18>
c001041d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010423:	85 c0                	test   eax,eax
c0010425:	74 09                	je     c0010430 <VgaText::updateTitle()+0x3c>
c0010427:	53                   	push   ebx
c0010428:	53                   	push   ebx
c0010429:	51                   	push   ecx
c001042a:	52                   	push   edx
c001042b:	ff d0                	call   eax
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	e8 59 fe ff ff       	call   c001028e <VgaText::updateDiskUsage()>
c0010435:	83 c4 58             	add    esp,0x58
c0010438:	5b                   	pop    ebx
c0010439:	c3                   	ret    

c001043a <VgaText::setTitleTextColour(VgaColour)>:
c001043a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010442:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010448:	eb aa                	jmp    c00103f4 <VgaText::updateTitle()>

c001044a <VgaText::setTitleColour(VgaColour)>:
c001044a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010452:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010458:	eb 9a                	jmp    c00103f4 <VgaText::updateTitle()>

c001045a <VgaText::setTitle(char*)>:
c001045a:	53                   	push   ebx
c001045b:	83 ec 10             	sub    esp,0x10
c001045e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010466:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001046c:	50                   	push   eax
c001046d:	e8 82 03 ff ff       	call   c00007f4 <strcpy>
c0010472:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010476:	83 c4 18             	add    esp,0x18
c0010479:	5b                   	pop    ebx
c001047a:	e9 75 ff ff ff       	jmp    c00103f4 <VgaText::updateTitle()>
c001047f:	90                   	nop

c0010480 <VgaText::decrementCursor(bool)>:
c0010480:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010484:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010488:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001048e:	85 c0                	test   eax,eax
c0010490:	74 07                	je     c0010499 <VgaText::decrementCursor(bool)+0x19>
c0010492:	48                   	dec    eax
c0010493:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010499:	84 c9                	test   cl,cl
c001049b:	74 09                	je     c00104a6 <VgaText::decrementCursor(bool)+0x26>
c001049d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104a1:	e9 64 fa ff ff       	jmp    c000ff0a <VgaText::updateCursor()>
c00104a6:	c3                   	ret    
c00104a7:	90                   	nop

c00104a8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00104a8:	53                   	push   ebx
c00104a9:	83 ec 08             	sub    esp,0x8
c00104ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00104b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00104bc:	3c 07                	cmp    al,0x7
c00104be:	75 2a                	jne    c00104ea <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00104c0:	a1 c4 bd 03 c0       	mov    eax,ds:0xc003bdc4
c00104c5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00104cd:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104d5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104e1:	83 c4 08             	add    esp,0x8
c00104e4:	5b                   	pop    ebx
c00104e5:	e9 10 2c 00 00       	jmp    c00130fa <Buzzer::beep(int, int, bool)>
c00104ea:	3c 0d                	cmp    al,0xd
c00104ec:	75 0c                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00104ee:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00104f8:	eb 3b                	jmp    c0010535 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00104fa:	3c 0a                	cmp    al,0xa
c00104fc:	75 40                	jne    c001053e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00104fe:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010504:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001050e:	8d 50 01             	lea    edx,[eax+0x1]
c0010511:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010517:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001051d:	75 12                	jne    c0010531 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c001051f:	83 ec 0c             	sub    esp,0xc
c0010522:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010528:	53                   	push   ebx
c0010529:	e8 2a fb ff ff       	call   c0010058 <VgaText::scrollScreen()>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010535:	83 c4 08             	add    esp,0x8
c0010538:	5b                   	pop    ebx
c0010539:	e9 cc f9 ff ff       	jmp    c000ff0a <VgaText::updateCursor()>
c001053e:	3c 08                	cmp    al,0x8
c0010540:	75 31                	jne    c0010573 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010542:	50                   	push   eax
c0010543:	50                   	push   eax
c0010544:	6a 01                	push   0x1
c0010546:	53                   	push   ebx
c0010547:	e8 34 ff ff ff       	call   c0010480 <VgaText::decrementCursor(bool)>
c001054c:	5a                   	pop    edx
c001054d:	59                   	pop    ecx
c001054e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010554:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001055a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010560:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010566:	6a 20                	push   0x20
c0010568:	53                   	push   ebx
c0010569:	e8 90 fb ff ff       	call   c00100fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001056e:	83 c4 28             	add    esp,0x28
c0010571:	5b                   	pop    ebx
c0010572:	c3                   	ret    
c0010573:	83 ec 08             	sub    esp,0x8
c0010576:	0f be c0             	movsx  eax,al
c0010579:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001057f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010585:	51                   	push   ecx
c0010586:	52                   	push   edx
c0010587:	50                   	push   eax
c0010588:	53                   	push   ebx
c0010589:	e8 70 fb ff ff       	call   c00100fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001058e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010592:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001059a:	83 c4 28             	add    esp,0x28
c001059d:	5b                   	pop    ebx
c001059e:	e9 29 fc ff ff       	jmp    c00101cc <VgaText::incrementCursor(bool)>
c00105a3:	90                   	nop

c00105a4 <VgaText::isShowingCursor()>:
c00105a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a8:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00105ae:	c3                   	ret    
c00105af:	90                   	nop

c00105b0 <VgaText::isBlinkDisabled()>:
c00105b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b4:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c00105ba:	83 f0 01             	xor    eax,0x1
c00105bd:	c3                   	ret    

c00105be <VgaText::setCursorHeight(int)>:
c00105be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105c6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c00105cc:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c00105d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105d7:	e9 48 f9 ff ff       	jmp    c000ff24 <VgaText::showCursor(bool)>

c00105dc <VgaText::getCursorHeight()>:
c00105dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e0:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c00105e6:	c3                   	ret    

c00105e7 <setActiveTerminal(VgaText*)>:
c00105e7:	53                   	push   ebx
c00105e8:	83 ec 08             	sub    esp,0x8
c00105eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105ef:	85 db                	test   ebx,ebx
c00105f1:	75 11                	jne    c0010604 <setActiveTerminal(VgaText*)+0x1d>
c00105f3:	c7 44 24 10 b4 92 03 c0 	mov    DWORD PTR [esp+0x10],0xc00392b4
c00105fb:	83 c4 08             	add    esp,0x8
c00105fe:	5b                   	pop    ebx
c00105ff:	e9 7a c9 ff ff       	jmp    c000cf7e <panic(char const*)>
c0010604:	50                   	push   eax
c0010605:	50                   	push   eax
c0010606:	53                   	push   ebx
c0010607:	68 c2 92 03 c0       	push   0xc00392c2
c001060c:	e8 4f c8 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0010611:	a1 a4 bd 03 c0       	mov    eax,ds:0xc003bda4
c0010616:	83 c4 10             	add    esp,0x10
c0010619:	85 c0                	test   eax,eax
c001061b:	74 0c                	je     c0010629 <setActiveTerminal(VgaText*)+0x42>
c001061d:	83 ec 0c             	sub    esp,0xc
c0010620:	50                   	push   eax
c0010621:	e8 e4 f8 ff ff       	call   c000ff0a <VgaText::updateCursor()>
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	89 1d a4 bd 03 c0    	mov    DWORD PTR ds:0xc003bda4,ebx
c001062f:	51                   	push   ecx
c0010630:	51                   	push   ecx
c0010631:	53                   	push   ebx
c0010632:	68 da 92 03 c0       	push   0xc00392da
c0010637:	e8 24 c8 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001063c:	83 c4 0c             	add    esp,0xc
c001063f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010645:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001064b:	53                   	push   ebx
c001064c:	e8 25 fb ff ff       	call   c0010176 <VgaText::setCursor(int, int)>
c0010651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010654:	e8 57 ff ff ff       	call   c00105b0 <VgaText::isBlinkDisabled()>
c0010659:	5a                   	pop    edx
c001065a:	0f b6 c0             	movzx  eax,al
c001065d:	59                   	pop    ecx
c001065e:	50                   	push   eax
c001065f:	53                   	push   ebx
c0010660:	e8 cf f8 ff ff       	call   c000ff34 <VgaText::disableBlink(bool)>
c0010665:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010668:	e8 6f ff ff ff       	call   c00105dc <VgaText::getCursorHeight()>
c001066d:	5a                   	pop    edx
c001066e:	59                   	pop    ecx
c001066f:	50                   	push   eax
c0010670:	53                   	push   ebx
c0010671:	e8 48 ff ff ff       	call   c00105be <VgaText::setCursorHeight(int)>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010680:	75 0a                	jne    c001068c <setActiveTerminal(VgaText*)+0xa5>
c0010682:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c001068c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010690:	83 c4 08             	add    esp,0x8
c0010693:	5b                   	pop    ebx
c0010694:	e9 1d f8 ff ff       	jmp    c000feb6 <VgaText::load()>

c0010699 <doTerminalCycle()>:
c0010699:	83 ec 18             	sub    esp,0x18
c001069c:	a1 a0 bd 03 c0       	mov    eax,ds:0xc003bda0
c00106a1:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00106a7:	50                   	push   eax
c00106a8:	a3 a0 bd 03 c0       	mov    ds:0xc003bda0,eax
c00106ad:	e8 35 ff ff ff       	call   c00105e7 <setActiveTerminal(VgaText*)>
c00106b2:	83 c4 1c             	add    esp,0x1c
c00106b5:	c3                   	ret    

c00106b6 <VgaText::doUpdate()>:
c00106b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ba:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c00106c0:	85 c0                	test   eax,eax
c00106c2:	74 02                	je     c00106c6 <VgaText::doUpdate()+0x10>
c00106c4:	ff e0                	jmp    eax
c00106c6:	c3                   	ret    
c00106c7:	90                   	nop

c00106c8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00106c8:	55                   	push   ebp
c00106c9:	57                   	push   edi
c00106ca:	56                   	push   esi
c00106cb:	53                   	push   ebx
c00106cc:	83 ec 1c             	sub    esp,0x1c
c00106cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106d3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00106d8:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c00106df:	8d 7d 0c             	lea    edi,[ebp+0xc]
c00106e2:	50                   	push   eax
c00106e3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00106e8:	50                   	push   eax
c00106e9:	e8 58 f9 ff ff       	call   c0010046 <VgaText::combineColours(unsigned char, unsigned char)>
c00106ee:	59                   	pop    ecx
c00106ef:	0f b6 c0             	movzx  eax,al
c00106f2:	5b                   	pop    ebx
c00106f3:	31 c9                	xor    ecx,ecx
c00106f5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106fd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010701:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010707:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001070b:	0f b7 db             	movzx  ebx,bx
c001070e:	01 db                	add    ebx,ebx
c0010710:	01 fb                	add    ebx,edi
c0010712:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010715:	84 c0                	test   al,al
c0010717:	0f 84 38 01 00 00    	je     c0010855 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c001071d:	3c 0d                	cmp    al,0xd
c001071f:	75 0f                	jne    c0010730 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010721:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001072b:	e9 1f 01 00 00       	jmp    c001084f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010730:	3c 0a                	cmp    al,0xa
c0010732:	75 5b                	jne    c001078f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010734:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c001073a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010744:	8d 48 01             	lea    ecx,[eax+0x1]
c0010747:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c001074d:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010753:	75 12                	jne    c0010767 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010755:	83 ec 0c             	sub    esp,0xc
c0010758:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c001075e:	55                   	push   ebp
c001075f:	e8 f4 f8 ff ff       	call   c0010058 <VgaText::scrollScreen()>
c0010764:	83 c4 10             	add    esp,0x10
c0010767:	83 ec 0c             	sub    esp,0xc
c001076a:	55                   	push   ebp
c001076b:	e8 9a f7 ff ff       	call   c000ff0a <VgaText::updateCursor()>
c0010770:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010778:	83 c4 10             	add    esp,0x10
c001077b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010781:	31 c9                	xor    ecx,ecx
c0010783:	0f b7 db             	movzx  ebx,bx
c0010786:	01 db                	add    ebx,ebx
c0010788:	01 fb                	add    ebx,edi
c001078a:	e9 c0 00 00 00       	jmp    c001084f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c001078f:	3c 08                	cmp    al,0x8
c0010791:	75 4e                	jne    c00107e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010793:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010797:	53                   	push   ebx
c0010798:	53                   	push   ebx
c0010799:	6a 01                	push   0x1
c001079b:	55                   	push   ebp
c001079c:	e8 df fc ff ff       	call   c0010480 <VgaText::decrementCursor(bool)>
c00107a1:	58                   	pop    eax
c00107a2:	5a                   	pop    edx
c00107a3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00107a9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00107af:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c00107b5:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c00107bb:	6a 20                	push   0x20
c00107bd:	55                   	push   ebp
c00107be:	e8 3b f9 ff ff       	call   c00100fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107c3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00107cb:	83 c4 20             	add    esp,0x20
c00107ce:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00107d4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107d8:	0f b7 db             	movzx  ebx,bx
c00107db:	01 db                	add    ebx,ebx
c00107dd:	01 fb                	add    ebx,edi
c00107df:	eb 6e                	jmp    c001084f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00107e1:	51                   	push   ecx
c00107e2:	51                   	push   ecx
c00107e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107e7:	50                   	push   eax
c00107e8:	e8 ff f8 ff ff       	call   c00100ec <VgaText::combineCharAndColour(char, unsigned char)>
c00107ed:	83 c4 10             	add    esp,0x10
c00107f0:	66 89 03             	mov    WORD PTR [ebx],ax
c00107f3:	39 2d a4 bd 03 c0    	cmp    DWORD PTR ds:0xc003bda4,ebp
c00107f9:	75 2a                	jne    c0010825 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00107fb:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010801:	85 c0                	test   eax,eax
c0010803:	74 20                	je     c0010825 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010805:	52                   	push   edx
c0010806:	52                   	push   edx
c0010807:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001080d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010813:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010817:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001081b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c001081e:	51                   	push   ecx
c001081f:	55                   	push   ebp
c0010820:	ff d0                	call   eax
c0010822:	83 c4 20             	add    esp,0x20
c0010825:	83 c3 02             	add    ebx,0x2
c0010828:	50                   	push   eax
c0010829:	50                   	push   eax
c001082a:	6a 00                	push   0x0
c001082c:	55                   	push   ebp
c001082d:	e8 9a f9 ff ff       	call   c00101cc <VgaText::incrementCursor(bool)>
c0010832:	83 c4 10             	add    esp,0x10
c0010835:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c001083c:	75 0f                	jne    c001084d <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c001083e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010846:	0f b7 db             	movzx  ebx,bx
c0010849:	01 db                	add    ebx,ebx
c001084b:	01 fb                	add    ebx,edi
c001084d:	b1 01                	mov    cl,0x1
c001084f:	46                   	inc    esi
c0010850:	e9 bd fe ff ff       	jmp    c0010712 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010855:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010859:	83 ec 0c             	sub    esp,0xc
c001085c:	55                   	push   ebp
c001085d:	e8 a8 f6 ff ff       	call   c000ff0a <VgaText::updateCursor()>
c0010862:	83 c4 10             	add    esp,0x10
c0010865:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010869:	84 c9                	test   cl,cl
c001086b:	74 0c                	je     c0010879 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	55                   	push   ebp
c0010871:	e8 40 fe ff ff       	call   c00106b6 <VgaText::doUpdate()>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010880:	83 c4 1c             	add    esp,0x1c
c0010883:	5b                   	pop    ebx
c0010884:	5e                   	pop    esi
c0010885:	5f                   	pop    edi
c0010886:	5d                   	pop    ebp
c0010887:	c3                   	ret    

c0010888 <VgaText::clearScreen()>:
c0010888:	57                   	push   edi
c0010889:	56                   	push   esi
c001088a:	31 f6                	xor    esi,esi
c001088c:	53                   	push   ebx
c001088d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010891:	52                   	push   edx
c0010892:	6a 00                	push   0x0
c0010894:	6a 00                	push   0x0
c0010896:	53                   	push   ebx
c0010897:	e8 da f8 ff ff       	call   c0010176 <VgaText::setCursor(int, int)>
c001089c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c00108a3:	83 c4 10             	add    esp,0x10
c00108a6:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c00108ac:	7e 26                	jle    c00108d4 <VgaText::clearScreen()+0x4c>
c00108ae:	31 ff                	xor    edi,edi
c00108b0:	50                   	push   eax
c00108b1:	50                   	push   eax
c00108b2:	56                   	push   esi
c00108b3:	57                   	push   edi
c00108b4:	47                   	inc    edi
c00108b5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108bb:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108c1:	6a 20                	push   0x20
c00108c3:	53                   	push   ebx
c00108c4:	e8 35 f8 ff ff       	call   c00100fe <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108c9:	83 c4 20             	add    esp,0x20
c00108cc:	83 ff 50             	cmp    edi,0x50
c00108cf:	75 df                	jne    c00108b0 <VgaText::clearScreen()+0x28>
c00108d1:	46                   	inc    esi
c00108d2:	eb d2                	jmp    c00108a6 <VgaText::clearScreen()+0x1e>
c00108d4:	83 ec 0c             	sub    esp,0xc
c00108d7:	53                   	push   ebx
c00108d8:	e8 d9 fd ff ff       	call   c00106b6 <VgaText::doUpdate()>
c00108dd:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c00108e4:	83 c4 10             	add    esp,0x10
c00108e7:	5b                   	pop    ebx
c00108e8:	5e                   	pop    esi
c00108e9:	5f                   	pop    edi
c00108ea:	c3                   	ret    
c00108eb:	90                   	nop

c00108ec <VgaText::putchar(char)>:
c00108ec:	56                   	push   esi
c00108ed:	53                   	push   ebx
c00108ee:	83 ec 14             	sub    esp,0x14
c00108f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00108f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00108f9:	3c 5b                	cmp    al,0x5b
c00108fb:	75 21                	jne    c001091e <VgaText::putchar(char)+0x32>
c00108fd:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010904:	74 28                	je     c001092e <VgaText::putchar(char)+0x42>
c0010906:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001090f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010919:	e9 e2 00 00 00       	jmp    c0010a00 <VgaText::putchar(char)+0x114>
c001091e:	3c 1b                	cmp    al,0x1b
c0010920:	75 0c                	jne    c001092e <VgaText::putchar(char)+0x42>
c0010922:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010929:	e9 d2 00 00 00       	jmp    c0010a00 <VgaText::putchar(char)+0x114>
c001092e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010934:	84 c9                	test   cl,cl
c0010936:	0f 84 ab 00 00 00    	je     c00109e7 <VgaText::putchar(char)+0xfb>
c001093c:	8d 50 c0             	lea    edx,[eax-0x40]
c001093f:	80 fa 3e             	cmp    dl,0x3e
c0010942:	0f 87 82 00 00 00    	ja     c00109ca <VgaText::putchar(char)+0xde>
c0010948:	3c 6d                	cmp    al,0x6d
c001094a:	75 4d                	jne    c0010999 <VgaText::putchar(char)+0xad>
c001094c:	31 f6                	xor    esi,esi
c001094e:	31 d2                	xor    edx,edx
c0010950:	31 c0                	xor    eax,eax
c0010952:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010958:	7e 30                	jle    c001098a <VgaText::putchar(char)+0x9e>
c001095a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010962:	80 fa 3b             	cmp    dl,0x3b
c0010965:	75 17                	jne    c001097e <VgaText::putchar(char)+0x92>
c0010967:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001096b:	50                   	push   eax
c001096c:	53                   	push   ebx
c001096d:	e8 fc f5 ff ff       	call   c000ff6e <VgaText::doANSI_SGR(int)>
c0010972:	59                   	pop    ecx
c0010973:	31 d2                	xor    edx,edx
c0010975:	58                   	pop    eax
c0010976:	31 c0                	xor    eax,eax
c0010978:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001097c:	eb 09                	jmp    c0010987 <VgaText::putchar(char)+0x9b>
c001097e:	6b c0 0a             	imul   eax,eax,0xa
c0010981:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010985:	88 ca                	mov    dl,cl
c0010987:	46                   	inc    esi
c0010988:	eb c8                	jmp    c0010952 <VgaText::putchar(char)+0x66>
c001098a:	84 d2                	test   dl,dl
c001098c:	74 31                	je     c00109bf <VgaText::putchar(char)+0xd3>
c001098e:	50                   	push   eax
c001098f:	53                   	push   ebx
c0010990:	e8 d9 f5 ff ff       	call   c000ff6e <VgaText::doANSI_SGR(int)>
c0010995:	58                   	pop    eax
c0010996:	5a                   	pop    edx
c0010997:	eb 26                	jmp    c00109bf <VgaText::putchar(char)+0xd3>
c0010999:	3c 4a                	cmp    al,0x4a
c001099b:	75 22                	jne    c00109bf <VgaText::putchar(char)+0xd3>
c001099d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00109a4:	75 19                	jne    c00109bf <VgaText::putchar(char)+0xd3>
c00109a6:	83 ec 0c             	sub    esp,0xc
c00109a9:	53                   	push   ebx
c00109aa:	e8 d9 fe ff ff       	call   c0010888 <VgaText::clearScreen()>
c00109af:	83 c4 0c             	add    esp,0xc
c00109b2:	6a 00                	push   0x0
c00109b4:	6a 00                	push   0x0
c00109b6:	53                   	push   ebx
c00109b7:	e8 ba f7 ff ff       	call   c0010176 <VgaText::setCursor(int, int)>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00109c8:	eb 36                	jmp    c0010a00 <VgaText::putchar(char)+0x114>
c00109ca:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00109d0:	83 fa 0e             	cmp    edx,0xe
c00109d3:	7f 2b                	jg     c0010a00 <VgaText::putchar(char)+0x114>
c00109d5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00109d8:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00109de:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00109e5:	eb 19                	jmp    c0010a00 <VgaText::putchar(char)+0x114>
c00109e7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00109ed:	0f be c0             	movsx  eax,al
c00109f0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00109f6:	50                   	push   eax
c00109f7:	53                   	push   ebx
c00109f8:	e8 ab fa ff ff       	call   c00104a8 <VgaText::putchar(char, VgaColour, VgaColour)>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	83 c4 14             	add    esp,0x14
c0010a03:	5b                   	pop    ebx
c0010a04:	5e                   	pop    esi
c0010a05:	c3                   	ret    

c0010a06 <VgaText::puts(char const*)>:
c0010a06:	53                   	push   ebx
c0010a07:	83 ec 08             	sub    esp,0x8
c0010a0a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010a11:	84 c0                	test   al,al
c0010a13:	74 12                	je     c0010a27 <VgaText::puts(char const*)+0x21>
c0010a15:	43                   	inc    ebx
c0010a16:	51                   	push   ecx
c0010a17:	51                   	push   ecx
c0010a18:	50                   	push   eax
c0010a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a1d:	e8 ca fe ff ff       	call   c00108ec <VgaText::putchar(char)>
c0010a22:	83 c4 10             	add    esp,0x10
c0010a25:	eb e7                	jmp    c0010a0e <VgaText::puts(char const*)+0x8>
c0010a27:	83 c4 08             	add    esp,0x8
c0010a2a:	5b                   	pop    ebx
c0010a2b:	c3                   	ret    

c0010a2c <VgaText::putx(unsigned int)>:
c0010a2c:	57                   	push   edi
c0010a2d:	b9 11 00 00 00       	mov    ecx,0x11
c0010a32:	56                   	push   esi
c0010a33:	be f6 92 03 c0       	mov    esi,0xc00392f6
c0010a38:	53                   	push   ebx
c0010a39:	83 ec 20             	sub    esp,0x20
c0010a3c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a40:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a44:	fc                   	cld    
c0010a45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a47:	be 08 00 00 00       	mov    esi,0x8
c0010a4c:	50                   	push   eax
c0010a4d:	50                   	push   eax
c0010a4e:	89 d8                	mov    eax,ebx
c0010a50:	c1 e3 04             	shl    ebx,0x4
c0010a53:	c1 e8 1c             	shr    eax,0x1c
c0010a56:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010a5b:	50                   	push   eax
c0010a5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a60:	e8 87 fe ff ff       	call   c00108ec <VgaText::putchar(char)>
c0010a65:	83 c4 10             	add    esp,0x10
c0010a68:	4e                   	dec    esi
c0010a69:	75 e1                	jne    c0010a4c <VgaText::putx(unsigned int)+0x20>
c0010a6b:	83 c4 20             	add    esp,0x20
c0010a6e:	5b                   	pop    ebx
c0010a6f:	5e                   	pop    esi
c0010a70:	5f                   	pop    edi
c0010a71:	c3                   	ret    

c0010a72 <VgaText::VgaText(char const*)>:
c0010a72:	57                   	push   edi
c0010a73:	56                   	push   esi
c0010a74:	53                   	push   ebx
c0010a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a79:	83 ec 08             	sub    esp,0x8
c0010a7c:	6a 00                	push   0x0
c0010a7e:	50                   	push   eax
c0010a7f:	e8 b8 05 00 00       	call   c001103c <UnixFile::UnixFile(int)>
c0010a84:	83 c4 10             	add    esp,0x10
c0010a87:	ba 5c 93 03 c0       	mov    edx,0xc003935c
c0010a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a90:	89 10                	mov    DWORD PTR [eax],edx
c0010a92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a96:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa4:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab2:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010abd:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac8:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad6:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae4:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aef:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afa:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010b00:	bb 80 bd 03 c0       	mov    ebx,0xc003bd80
c0010b05:	b8 08 00 00 00       	mov    eax,0x8
c0010b0a:	fc                   	cld    
c0010b0b:	89 d7                	mov    edi,edx
c0010b0d:	89 de                	mov    esi,ebx
c0010b0f:	89 c1                	mov    ecx,eax
c0010b11:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b17:	05 1e 10 00 00       	add    eax,0x101e
c0010b1c:	83 ec 08             	sub    esp,0x8
c0010b1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b23:	50                   	push   eax
c0010b24:	e8 cb fc fe ff       	call   c00007f4 <strcpy>
c0010b29:	83 c4 10             	add    esp,0x10
c0010b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b30:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3e:	83 c0 0c             	add    eax,0xc
c0010b41:	83 ec 04             	sub    esp,0x4
c0010b44:	68 00 0f 00 00       	push   0xf00
c0010b49:	6a 00                	push   0x0
c0010b4b:	50                   	push   eax
c0010b4c:	e8 87 fb fe ff       	call   c00006d8 <memset>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	83 ec 04             	sub    esp,0x4
c0010b57:	6a 00                	push   0x0
c0010b59:	6a 07                	push   0x7
c0010b5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b5f:	e8 c2 f4 ff ff       	call   c0010026 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010b64:	83 c4 10             	add    esp,0x10
c0010b67:	83 ec 08             	sub    esp,0x8
c0010b6a:	6a 02                	push   0x2
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	e8 49 fa ff ff       	call   c00105be <VgaText::setCursorHeight(int)>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	83 ec 04             	sub    esp,0x4
c0010b7b:	6a 00                	push   0x0
c0010b7d:	6a 00                	push   0x0
c0010b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b83:	e8 ee f5 ff ff       	call   c0010176 <VgaText::setCursor(int, int)>
c0010b88:	83 c4 10             	add    esp,0x10
c0010b8b:	83 ec 08             	sub    esp,0x8
c0010b8e:	6a 01                	push   0x1
c0010b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b94:	e8 8b f3 ff ff       	call   c000ff24 <VgaText::showCursor(bool)>
c0010b99:	83 c4 10             	add    esp,0x10
c0010b9c:	83 ec 08             	sub    esp,0x8
c0010b9f:	6a 01                	push   0x1
c0010ba1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba5:	e8 8a f3 ff ff       	call   c000ff34 <VgaText::disableBlink(bool)>
c0010baa:	83 c4 10             	add    esp,0x10
c0010bad:	83 ec 0c             	sub    esp,0xc
c0010bb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb4:	e8 cf fc ff ff       	call   c0010888 <VgaText::clearScreen()>
c0010bb9:	83 c4 10             	add    esp,0x10
c0010bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc0:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bcb:	05 9e 10 00 00       	add    eax,0x109e
c0010bd0:	83 ec 04             	sub    esp,0x4
c0010bd3:	68 96 00 00 00       	push   0x96
c0010bd8:	6a 00                	push   0x0
c0010bda:	50                   	push   eax
c0010bdb:	e8 f8 fa fe ff       	call   c00006d8 <memset>
c0010be0:	83 c4 10             	add    esp,0x10
c0010be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be7:	05 34 11 00 00       	add    eax,0x1134
c0010bec:	83 ec 04             	sub    esp,0x4
c0010bef:	68 2c 01 00 00       	push   0x12c
c0010bf4:	6a 00                	push   0x0
c0010bf6:	50                   	push   eax
c0010bf7:	e8 dc fa fe ff       	call   c00006d8 <memset>
c0010bfc:	83 c4 10             	add    esp,0x10
c0010bff:	90                   	nop
c0010c00:	5b                   	pop    ebx
c0010c01:	5e                   	pop    esi
c0010c02:	5f                   	pop    edi
c0010c03:	c3                   	ret    

c0010c04 <VgaText::receiveKey(unsigned char)>:
c0010c04:	55                   	push   ebp
c0010c05:	57                   	push   edi
c0010c06:	56                   	push   esi
c0010c07:	53                   	push   ebx
c0010c08:	83 ec 1c             	sub    esp,0x1c
c0010c0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c13:	84 db                	test   bl,bl
c0010c15:	0f 84 c9 00 00 00    	je     c0010ce4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c1b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010c21:	80 fb 08             	cmp    bl,0x8
c0010c24:	75 2c                	jne    c0010c52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010c26:	83 ec 0c             	sub    esp,0xc
c0010c29:	57                   	push   edi
c0010c2a:	e8 d2 fa fe ff       	call   c0000701 <strlen>
c0010c2f:	83 c4 10             	add    esp,0x10
c0010c32:	85 c0                	test   eax,eax
c0010c34:	74 41                	je     c0010c77 <VgaText::receiveKey(unsigned char)+0x73>
c0010c36:	50                   	push   eax
c0010c37:	50                   	push   eax
c0010c38:	6a 08                	push   0x8
c0010c3a:	56                   	push   esi
c0010c3b:	e8 ac fc ff ff       	call   c00108ec <VgaText::putchar(char)>
c0010c40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c43:	e8 b9 fa fe ff       	call   c0000701 <strlen>
c0010c48:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010c50:	eb 22                	jmp    c0010c74 <VgaText::receiveKey(unsigned char)+0x70>
c0010c52:	0f be c3             	movsx  eax,bl
c0010c55:	52                   	push   edx
c0010c56:	52                   	push   edx
c0010c57:	50                   	push   eax
c0010c58:	56                   	push   esi
c0010c59:	e8 8e fc ff ff       	call   c00108ec <VgaText::putchar(char)>
c0010c5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010c62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010c67:	59                   	pop    ecx
c0010c68:	5d                   	pop    ebp
c0010c69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010c6d:	50                   	push   eax
c0010c6e:	57                   	push   edi
c0010c6f:	e8 cd fc fe ff       	call   c0000941 <strcat>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010c7e:	75 05                	jne    c0010c85 <VgaText::receiveKey(unsigned char)+0x81>
c0010c80:	80 fb 0a             	cmp    bl,0xa
c0010c83:	75 53                	jne    c0010cd8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010c85:	83 ec 0c             	sub    esp,0xc
c0010c88:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010c8e:	53                   	push   ebx
c0010c8f:	e8 6d fa fe ff       	call   c0000701 <strlen>
c0010c94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c97:	89 c5                	mov    ebp,eax
c0010c99:	e8 63 fa fe ff       	call   c0000701 <strlen>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ca5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010caa:	76 10                	jbe    c0010cbc <VgaText::receiveKey(unsigned char)+0xb8>
c0010cac:	83 ec 0c             	sub    esp,0xc
c0010caf:	68 07 93 03 c0       	push   0xc0039307
c0010cb4:	e8 c5 c2 ff ff       	call   c000cf7e <panic(char const*)>
c0010cb9:	83 c4 10             	add    esp,0x10
c0010cbc:	50                   	push   eax
c0010cbd:	50                   	push   eax
c0010cbe:	57                   	push   edi
c0010cbf:	53                   	push   ebx
c0010cc0:	e8 7c fc fe ff       	call   c0000941 <strcat>
c0010cc5:	83 c4 0c             	add    esp,0xc
c0010cc8:	68 96 00 00 00       	push   0x96
c0010ccd:	6a 00                	push   0x0
c0010ccf:	57                   	push   edi
c0010cd0:	e8 03 fa fe ff       	call   c00006d8 <memset>
c0010cd5:	83 c4 10             	add    esp,0x10
c0010cd8:	83 ec 0c             	sub    esp,0xc
c0010cdb:	56                   	push   esi
c0010cdc:	e8 d5 f9 ff ff       	call   c00106b6 <VgaText::doUpdate()>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	83 c4 1c             	add    esp,0x1c
c0010ce7:	5b                   	pop    ebx
c0010ce8:	5e                   	pop    esi
c0010ce9:	5f                   	pop    edi
c0010cea:	5d                   	pop    ebp
c0010ceb:	c3                   	ret    

c0010cec <VgaText::write(unsigned long long, void*, int*)>:
c0010cec:	55                   	push   ebp
c0010ced:	57                   	push   edi
c0010cee:	56                   	push   esi
c0010cef:	53                   	push   ebx
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010cf7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010cfb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cff:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010d06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d09:	39 eb                	cmp    ebx,ebp
c0010d0b:	74 13                	je     c0010d20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d0d:	43                   	inc    ebx
c0010d0e:	50                   	push   eax
c0010d0f:	50                   	push   eax
c0010d10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d14:	50                   	push   eax
c0010d15:	56                   	push   esi
c0010d16:	e8 d1 fb ff ff       	call   c00108ec <VgaText::putchar(char)>
c0010d1b:	83 c4 10             	add    esp,0x10
c0010d1e:	eb e9                	jmp    c0010d09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010d20:	83 ec 0c             	sub    esp,0xc
c0010d23:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010d2a:	56                   	push   esi
c0010d2b:	e8 86 f9 ff ff       	call   c00106b6 <VgaText::doUpdate()>
c0010d30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d34:	89 38                	mov    DWORD PTR [eax],edi
c0010d36:	83 c4 1c             	add    esp,0x1c
c0010d39:	31 c0                	xor    eax,eax
c0010d3b:	5b                   	pop    ebx
c0010d3c:	5e                   	pop    esi
c0010d3d:	5f                   	pop    edi
c0010d3e:	5d                   	pop    ebp
c0010d3f:	c3                   	ret    

c0010d40 <newTerminal(char*)>:
c0010d40:	83 ec 28             	sub    esp,0x28
c0010d43:	68 60 12 00 00       	push   0x1260
c0010d48:	e8 c3 16 00 00       	call   c0012410 <operator new(unsigned long)>
c0010d4d:	5a                   	pop    edx
c0010d4e:	59                   	pop    ecx
c0010d4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d53:	50                   	push   eax
c0010d54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d58:	e8 15 fd ff ff       	call   c0010a72 <VgaText::VgaText(char const*)>
c0010d5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010d61:	83 c4 2c             	add    esp,0x2c
c0010d64:	c3                   	ret    
c0010d65:	90                   	nop

c0010d66 <TSS::TSS()>:
c0010d66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d71:	90                   	nop
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <TSS::setESP(unsigned long)>:
c0010d74:	55                   	push   ebp
c0010d75:	89 e5                	mov    ebp,esp
c0010d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010d80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d83:	90                   	nop
c0010d84:	5d                   	pop    ebp
c0010d85:	c3                   	ret    

c0010d86 <TSS::flush()>:
c0010d86:	55                   	push   ebp
c0010d87:	89 e5                	mov    ebp,esp
c0010d89:	83 ec 10             	sub    esp,0x10
c0010d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d91:	83 c8 03             	or     eax,0x3
c0010d94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010d98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010d9c:	66 89 d0             	mov    ax,dx
c0010d9f:	0f 00 d8             	ltr    ax
c0010da2:	90                   	nop
c0010da3:	c9                   	leave  
c0010da4:	c3                   	ret    
c0010da5:	90                   	nop

c0010da6 <TSS::setup(unsigned long, unsigned long)>:
c0010da6:	55                   	push   ebp
c0010da7:	89 e5                	mov    ebp,esp
c0010da9:	53                   	push   ebx
c0010daa:	83 ec 14             	sub    esp,0x14
c0010dad:	83 ec 0c             	sub    esp,0xc
c0010db0:	6a 68                	push   0x68
c0010db2:	e8 a4 c6 ff ff       	call   c000d45b <malloc>
c0010db7:	83 c4 10             	add    esp,0x10
c0010dba:	89 c2                	mov    edx,eax
c0010dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dbf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc8:	83 ec 04             	sub    esp,0x4
c0010dcb:	6a 68                	push   0x68
c0010dcd:	6a 00                	push   0x0
c0010dcf:	50                   	push   eax
c0010dd0:	e8 03 f9 fe ff       	call   c00006d8 <memset>
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ddb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dde:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010de7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dea:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010df3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010df6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010df9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e02:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e0e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e26:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e32:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010e35:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010e51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e54:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010e57:	e8 1d db 00 00       	call   c001e979 <CPU::readCR3()>
c0010e5c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e65:	83 ec 08             	sub    esp,0x8
c0010e68:	50                   	push   eax
c0010e69:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010e6c:	50                   	push   eax
c0010e6d:	e8 a6 b8 ff ff       	call   c000c718 <GDTEntry::setBase(unsigned int)>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	83 ec 08             	sub    esp,0x8
c0010e78:	6a 68                	push   0x68
c0010e7a:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010e7d:	50                   	push   eax
c0010e7e:	e8 b1 b8 ff ff       	call   c000c734 <GDTEntry::setLimit(unsigned int)>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010e8a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010e8d:	83 e0 0f             	and    eax,0xf
c0010e90:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010e93:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010e96:	83 c8 40             	or     eax,0x40
c0010e99:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010e9c:	e8 75 62 00 00       	call   c0017116 <thisCPU()>
c0010ea1:	05 78 01 00 00       	add    eax,0x178
c0010ea6:	83 ec 04             	sub    esp,0x4
c0010ea9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010eac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010eaf:	50                   	push   eax
c0010eb0:	e8 b3 b8 ff ff       	call   c000c768 <GDT::addEntry(GDTEntry)>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	89 c2                	mov    edx,eax
c0010eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebd:	89 10                	mov    DWORD PTR [eax],edx
c0010ebf:	e8 52 62 00 00       	call   c0017116 <thisCPU()>
c0010ec4:	05 78 01 00 00       	add    eax,0x178
c0010ec9:	83 ec 0c             	sub    esp,0xc
c0010ecc:	50                   	push   eax
c0010ecd:	e8 da b8 ff ff       	call   c000c7ac <GDT::flush()>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eda:	83 ec 08             	sub    esp,0x8
c0010edd:	50                   	push   eax
c0010ede:	68 70 93 03 c0       	push   0xc0039370
c0010ee3:	e8 78 bf ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eee:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ef0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010ef3:	c9                   	leave  
c0010ef4:	c3                   	ret    
c0010ef5:	90                   	nop

c0010ef6 <ReservedFilename::isAtty()>:
c0010ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010efa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010efd:	31 c0                	xor    eax,eax
c0010eff:	83 fa 08             	cmp    edx,0x8
c0010f02:	74 06                	je     c0010f0a <ReservedFilename::isAtty()+0x14>
c0010f04:	83 fa 06             	cmp    edx,0x6
c0010f07:	0f 94 c0             	sete   al
c0010f0a:	c3                   	ret    
c0010f0b:	90                   	nop

c0010f0c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f0c:	55                   	push   ebp
c0010f0d:	57                   	push   edi
c0010f0e:	56                   	push   esi
c0010f0f:	53                   	push   ebx
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f17:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f22:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010f26:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f2a:	83 f8 08             	cmp    eax,0x8
c0010f2d:	75 08                	jne    c0010f37 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010f2f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f35:	eb 5c                	jmp    c0010f93 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010f37:	83 f8 06             	cmp    eax,0x6
c0010f3a:	75 3d                	jne    c0010f79 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010f3c:	83 ec 0c             	sub    esp,0xc
c0010f3f:	68 8e 93 03 c0       	push   0xc003938e
c0010f44:	e8 17 bf ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0010f49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f51:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010f57:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f59:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010f5d:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010f61:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010f65:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010f69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010f6d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0010f70:	83 c4 1c             	add    esp,0x1c
c0010f73:	5b                   	pop    ebx
c0010f74:	5e                   	pop    esi
c0010f75:	5f                   	pop    edi
c0010f76:	5d                   	pop    ebp
c0010f77:	ff e0                	jmp    eax
c0010f79:	89 c2                	mov    edx,eax
c0010f7b:	83 e2 fd             	and    edx,0xfffffffd
c0010f7e:	83 fa 05             	cmp    edx,0x5
c0010f81:	74 ac                	je     c0010f2f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010f83:	8d 50 f5             	lea    edx,[eax-0xb]
c0010f86:	83 fa 08             	cmp    edx,0x8
c0010f89:	76 a4                	jbe    c0010f2f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010f8b:	83 e8 15             	sub    eax,0x15
c0010f8e:	83 f8 08             	cmp    eax,0x8
c0010f91:	76 9c                	jbe    c0010f2f <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0010f93:	83 c4 0c             	add    esp,0xc
c0010f96:	31 c0                	xor    eax,eax
c0010f98:	5b                   	pop    ebx
c0010f99:	5e                   	pop    esi
c0010f9a:	5f                   	pop    edi
c0010f9b:	5d                   	pop    ebp
c0010f9c:	c3                   	ret    
c0010f9d:	90                   	nop

c0010f9e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010f9e:	55                   	push   ebp
c0010f9f:	57                   	push   edi
c0010fa0:	56                   	push   esi
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 0c             	sub    esp,0xc
c0010fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fb4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010fb8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010fbc:	83 f8 08             	cmp    eax,0x8
c0010fbf:	75 08                	jne    c0010fc9 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0010fc1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010fc7:	eb 60                	jmp    c0011029 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0010fc9:	83 f8 06             	cmp    eax,0x6
c0010fcc:	75 3d                	jne    c001100b <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0010fce:	83 ec 0c             	sub    esp,0xc
c0010fd1:	68 9b 93 03 c0       	push   0xc003939b
c0010fd6:	e8 85 be ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0010fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fe0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fe3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fe9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010feb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010fef:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0010ff3:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0010ff7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0010ffb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010fff:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0011002:	83 c4 1c             	add    esp,0x1c
c0011005:	5b                   	pop    ebx
c0011006:	5e                   	pop    esi
c0011007:	5f                   	pop    edi
c0011008:	5d                   	pop    ebp
c0011009:	ff e0                	jmp    eax
c001100b:	83 f8 05             	cmp    eax,0x5
c001100e:	75 04                	jne    c0011014 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c0011010:	89 33                	mov    DWORD PTR [ebx],esi
c0011012:	eb 15                	jmp    c0011029 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c0011014:	83 f8 07             	cmp    eax,0x7
c0011017:	74 a8                	je     c0010fc1 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011019:	8d 50 f5             	lea    edx,[eax-0xb]
c001101c:	83 fa 08             	cmp    edx,0x8
c001101f:	76 a0                	jbe    c0010fc1 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011021:	83 e8 15             	sub    eax,0x15
c0011024:	83 f8 08             	cmp    eax,0x8
c0011027:	76 98                	jbe    c0010fc1 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c0011029:	83 c4 0c             	add    esp,0xc
c001102c:	31 c0                	xor    eax,eax
c001102e:	5b                   	pop    ebx
c001102f:	5e                   	pop    esi
c0011030:	5f                   	pop    edi
c0011031:	5d                   	pop    ebp
c0011032:	c3                   	ret    
c0011033:	90                   	nop

c0011034 <UnixFile::getFileDescriptor()>:
c0011034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001103b:	c3                   	ret    

c001103c <UnixFile::UnixFile(int)>:
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	ba 00 94 03 c0       	mov    edx,0xc0039400
c0011044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011048:	89 10                	mov    DWORD PTR [eax],edx
c001104a:	a1 a0 ad 03 c0       	mov    eax,ds:0xc003ada0
c001104f:	8d 50 01             	lea    edx,[eax+0x1]
c0011052:	89 15 a0 ad 03 c0    	mov    DWORD PTR ds:0xc003ada0,edx
c0011058:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001105c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001105f:	83 ec 08             	sub    esp,0x8
c0011062:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011066:	68 b0 bd 03 c0       	push   0xc003bdb0
c001106b:	e8 88 dc 00 00       	call   c001ecf8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011070:	83 c4 10             	add    esp,0x10
c0011073:	90                   	nop
c0011074:	83 c4 0c             	add    esp,0xc
c0011077:	c3                   	ret    

c0011078 <ReservedFilename::ReservedFilename(int)>:
c0011078:	83 ec 0c             	sub    esp,0xc
c001107b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107f:	83 ec 08             	sub    esp,0x8
c0011082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011086:	50                   	push   eax
c0011087:	e8 b0 ff ff ff       	call   c001103c <UnixFile::UnixFile(int)>
c001108c:	83 c4 10             	add    esp,0x10
c001108f:	ba 1c 94 03 c0       	mov    edx,0xc003941c
c0011094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011098:	89 10                	mov    DWORD PTR [eax],edx
c001109a:	90                   	nop
c001109b:	83 c4 0c             	add    esp,0xc
c001109e:	c3                   	ret    
c001109f:	90                   	nop

c00110a0 <UnixFile::~UnixFile()>:
c00110a0:	83 ec 1c             	sub    esp,0x1c
c00110a3:	ba 00 94 03 c0       	mov    edx,0xc0039400
c00110a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110ac:	89 10                	mov    DWORD PTR [eax],edx
c00110ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00110b6:	83 ec 0c             	sub    esp,0xc
c00110b9:	68 b0 bd 03 c0       	push   0xc003bdb0
c00110be:	e8 83 db 00 00       	call   c001ec46 <LinkedList<UnixFile>::getFirstElement()>
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110ca:	83 ec 0c             	sub    esp,0xc
c00110cd:	68 b0 bd 03 c0       	push   0xc003bdb0
c00110d2:	e8 77 db 00 00       	call   c001ec4e <LinkedList<UnixFile>::removeFirst()>
c00110d7:	83 c4 10             	add    esp,0x10
c00110da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110de:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00110e2:	74 3d                	je     c0011121 <UnixFile::~UnixFile()+0x81>
c00110e4:	83 ec 08             	sub    esp,0x8
c00110e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00110eb:	68 b0 bd 03 c0       	push   0xc003bdb0
c00110f0:	e8 03 dc 00 00       	call   c001ecf8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110fc:	8d 50 01             	lea    edx,[eax+0x1]
c00110ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011103:	3d 88 13 00 00       	cmp    eax,0x1388
c0011108:	0f 94 c0             	sete   al
c001110b:	84 c0                	test   al,al
c001110d:	74 a7                	je     c00110b6 <UnixFile::~UnixFile()+0x16>
c001110f:	83 ec 0c             	sub    esp,0xc
c0011112:	68 d8 93 03 c0       	push   0xc00393d8
c0011117:	e8 62 be ff ff       	call   c000cf7e <panic(char const*)>
c001111c:	83 c4 10             	add    esp,0x10
c001111f:	eb 95                	jmp    c00110b6 <UnixFile::~UnixFile()+0x16>
c0011121:	90                   	nop
c0011122:	83 c4 1c             	add    esp,0x1c
c0011125:	c3                   	ret    

c0011126 <UnixFile::~UnixFile()>:
c0011126:	83 ec 0c             	sub    esp,0xc
c0011129:	83 ec 0c             	sub    esp,0xc
c001112c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011130:	e8 6b ff ff ff       	call   c00110a0 <UnixFile::~UnixFile()>
c0011135:	83 c4 10             	add    esp,0x10
c0011138:	83 ec 08             	sub    esp,0x8
c001113b:	6a 0c                	push   0xc
c001113d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011141:	e8 d9 12 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c0011146:	83 c4 10             	add    esp,0x10
c0011149:	83 c4 0c             	add    esp,0xc
c001114c:	c3                   	ret    
c001114d:	90                   	nop

c001114e <ReservedFilename::~ReservedFilename()>:
c001114e:	83 ec 0c             	sub    esp,0xc
c0011151:	ba 1c 94 03 c0       	mov    edx,0xc003941c
c0011156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115a:	89 10                	mov    DWORD PTR [eax],edx
c001115c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011160:	83 ec 0c             	sub    esp,0xc
c0011163:	50                   	push   eax
c0011164:	e8 37 ff ff ff       	call   c00110a0 <UnixFile::~UnixFile()>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	90                   	nop
c001116d:	83 c4 0c             	add    esp,0xc
c0011170:	c3                   	ret    
c0011171:	90                   	nop

c0011172 <ReservedFilename::~ReservedFilename()>:
c0011172:	83 ec 0c             	sub    esp,0xc
c0011175:	83 ec 0c             	sub    esp,0xc
c0011178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117c:	e8 cd ff ff ff       	call   c001114e <ReservedFilename::~ReservedFilename()>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	83 ec 08             	sub    esp,0x8
c0011187:	6a 0c                	push   0xc
c0011189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118d:	e8 8d 12 00 00       	call   c001241f <operator delete(void*, unsigned long)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	83 c4 0c             	add    esp,0xc
c0011198:	c3                   	ret    

c0011199 <getFromFileDescriptor(int)>:
c0011199:	83 ec 18             	sub    esp,0x18
c001119c:	68 b0 bd 03 c0       	push   0xc003bdb0
c00111a1:	e8 a0 da 00 00       	call   c001ec46 <LinkedList<UnixFile>::getFirstElement()>
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	85 c0                	test   eax,eax
c00111ab:	74 18                	je     c00111c5 <getFromFileDescriptor(int)+0x2c>
c00111ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111b1:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c00111b4:	74 0f                	je     c00111c5 <getFromFileDescriptor(int)+0x2c>
c00111b6:	52                   	push   edx
c00111b7:	52                   	push   edx
c00111b8:	50                   	push   eax
c00111b9:	68 b0 bd 03 c0       	push   0xc003bdb0
c00111be:	e8 2d db 00 00       	call   c001ecf0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00111c3:	eb e1                	jmp    c00111a6 <getFromFileDescriptor(int)+0xd>
c00111c5:	83 c4 0c             	add    esp,0xc
c00111c8:	c3                   	ret    

c00111c9 <__static_initialization_and_destruction_0(int, int)>:
c00111c9:	83 ec 0c             	sub    esp,0xc
c00111cc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d1:	75 34                	jne    c0011207 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111d3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111db:	75 2a                	jne    c0011207 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111dd:	83 ec 0c             	sub    esp,0xc
c00111e0:	68 b0 bd 03 c0       	push   0xc003bdb0
c00111e5:	e8 04 da 00 00       	call   c001ebee <LinkedList<UnixFile>::LinkedList()>
c00111ea:	83 c4 10             	add    esp,0x10
c00111ed:	83 ec 04             	sub    esp,0x4
c00111f0:	68 28 ad 03 c0       	push   0xc003ad28
c00111f5:	68 b0 bd 03 c0       	push   0xc003bdb0
c00111fa:	68 ec eb 01 c0       	push   0xc001ebec
c00111ff:	e8 97 11 00 00       	call   c001239b <__cxa_atexit>
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	90                   	nop
c0011208:	83 c4 0c             	add    esp,0xc
c001120b:	c3                   	ret    

c001120c <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001120c:	83 ec 0c             	sub    esp,0xc
c001120f:	83 ec 08             	sub    esp,0x8
c0011212:	68 ff ff 00 00       	push   0xffff
c0011217:	6a 01                	push   0x1
c0011219:	e8 ab ff ff ff       	call   c00111c9 <__static_initialization_and_destruction_0(int, int)>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	83 c4 0c             	add    esp,0xc
c0011224:	c3                   	ret    
c0011225:	90                   	nop

c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011226:	53                   	push   ebx
c0011227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001122b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001122f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011235:	89 c8                	mov    eax,ecx
c0011237:	d1 e8                	shr    eax,1
c0011239:	03 05 a8 ad 03 c0    	add    eax,DWORD PTR ds:0xc003ada8
c001123f:	83 e1 01             	and    ecx,0x1
c0011242:	8a 10                	mov    dl,BYTE PTR [eax]
c0011244:	75 09                	jne    c001124f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011246:	83 e2 f0             	and    edx,0xfffffff0
c0011249:	09 da                	or     edx,ebx
c001124b:	88 10                	mov    BYTE PTR [eax],dl
c001124d:	5b                   	pop    ebx
c001124e:	c3                   	ret    
c001124f:	c1 e3 04             	shl    ebx,0x4
c0011252:	83 e2 0f             	and    edx,0xf
c0011255:	09 da                	or     edx,ebx
c0011257:	88 10                	mov    BYTE PTR [eax],dl
c0011259:	5b                   	pop    ebx
c001125a:	c3                   	ret    

c001125b <Virt::getPageState(unsigned long)>:
c001125b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125f:	8b 0d a8 ad 03 c0    	mov    ecx,DWORD PTR ds:0xc003ada8
c0011265:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001126b:	89 d0                	mov    eax,edx
c001126d:	d1 e8                	shr    eax,1
c001126f:	83 e2 01             	and    edx,0x1
c0011272:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011275:	75 04                	jne    c001127b <Virt::getPageState(unsigned long)+0x20>
c0011277:	83 e0 0f             	and    eax,0xf
c001127a:	c3                   	ret    
c001127b:	c0 e8 04             	shr    al,0x4
c001127e:	c3                   	ret    

c001127f <Virt::allocateKernelVirtualPages(int)>:
c001127f:	55                   	push   ebp
c0011280:	31 ed                	xor    ebp,ebp
c0011282:	57                   	push   edi
c0011283:	56                   	push   esi
c0011284:	53                   	push   ebx
c0011285:	31 db                	xor    ebx,ebx
c0011287:	83 ec 1c             	sub    esp,0x1c
c001128a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001128e:	8b 3d a4 ad 03 c0    	mov    edi,DWORD PTR ds:0xc003ada4
c0011294:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011299:	57                   	push   edi
c001129a:	e8 bc ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c001129f:	5a                   	pop    edx
c00112a0:	84 c0                	test   al,al
c00112a2:	75 3a                	jne    c00112de <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112a4:	85 db                	test   ebx,ebx
c00112a6:	75 02                	jne    c00112aa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112a8:	89 fd                	mov    ebp,edi
c00112aa:	43                   	inc    ebx
c00112ab:	39 f3                	cmp    ebx,esi
c00112ad:	74 5a                	je     c0011309 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112af:	47                   	inc    edi
c00112b0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112b6:	76 31                	jbe    c00112e9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112b8:	c7 05 a4 ad 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003ada4,0xc8000
c00112c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112c7:	75 28                	jne    c00112f1 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112c9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112ce:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d3:	57                   	push   edi
c00112d4:	e8 82 ff ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c00112d9:	5a                   	pop    edx
c00112da:	84 c0                	test   al,al
c00112dc:	74 c6                	je     c00112a4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112de:	31 db                	xor    ebx,ebx
c00112e0:	47                   	inc    edi
c00112e1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112e7:	77 cf                	ja     c00112b8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112e9:	89 3d a4 ad 03 c0    	mov    DWORD PTR ds:0xc003ada4,edi
c00112ef:	eb a8                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f1:	83 ec 0c             	sub    esp,0xc
c00112f4:	68 30 94 03 c0       	push   0xc0039430
c00112f9:	e8 80 bc ff ff       	call   c000cf7e <panic(char const*)>
c00112fe:	8b 3d a4 ad 03 c0    	mov    edi,DWORD PTR ds:0xc003ada4
c0011304:	83 c4 10             	add    esp,0x10
c0011307:	eb 90                	jmp    c0011299 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011309:	89 2d a4 ad 03 c0    	mov    DWORD PTR ds:0xc003ada4,ebp
c001130f:	4b                   	dec    ebx
c0011310:	74 5f                	je     c0011371 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011312:	85 f6                	test   esi,esi
c0011314:	74 3d                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011316:	89 e8                	mov    eax,ebp
c0011318:	31 db                	xor    ebx,ebx
c001131a:	8d 7e ff             	lea    edi,[esi-0x1]
c001131d:	eb 14                	jmp    c0011333 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001131f:	6a 01                	push   0x1
c0011321:	43                   	inc    ebx
c0011322:	50                   	push   eax
c0011323:	e8 fe fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011328:	58                   	pop    eax
c0011329:	39 f3                	cmp    ebx,esi
c001132b:	5a                   	pop    edx
c001132c:	74 25                	je     c0011353 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001132e:	a1 a4 ad 03 c0       	mov    eax,ds:0xc003ada4
c0011333:	8d 50 01             	lea    edx,[eax+0x1]
c0011336:	85 db                	test   ebx,ebx
c0011338:	89 15 a4 ad 03 c0    	mov    DWORD PTR ds:0xc003ada4,edx
c001133e:	74 20                	je     c0011360 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011340:	39 df                	cmp    edi,ebx
c0011342:	75 db                	jne    c001131f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011344:	6a 03                	push   0x3
c0011346:	43                   	inc    ebx
c0011347:	50                   	push   eax
c0011348:	e8 d9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134d:	59                   	pop    ecx
c001134e:	39 f3                	cmp    ebx,esi
c0011350:	58                   	pop    eax
c0011351:	75 db                	jne    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011353:	83 c4 1c             	add    esp,0x1c
c0011356:	89 e8                	mov    eax,ebp
c0011358:	5b                   	pop    ebx
c0011359:	c1 e0 0c             	shl    eax,0xc
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	5d                   	pop    ebp
c001135f:	c3                   	ret    
c0011360:	6a 02                	push   0x2
c0011362:	bb 01 00 00 00       	mov    ebx,0x1
c0011367:	50                   	push   eax
c0011368:	e8 b9 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136d:	58                   	pop    eax
c001136e:	5a                   	pop    edx
c001136f:	eb bd                	jmp    c001132e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011371:	6a 04                	push   0x4
c0011373:	8d 45 01             	lea    eax,[ebp+0x1]
c0011376:	55                   	push   ebp
c0011377:	a3 a4 ad 03 c0       	mov    ds:0xc003ada4,eax
c001137c:	e8 a5 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011381:	59                   	pop    ecx
c0011382:	89 e8                	mov    eax,ebp
c0011384:	5b                   	pop    ebx
c0011385:	c1 e0 0c             	shl    eax,0xc
c0011388:	83 c4 1c             	add    esp,0x1c
c001138b:	5b                   	pop    ebx
c001138c:	5e                   	pop    esi
c001138d:	5f                   	pop    edi
c001138e:	5d                   	pop    ebp
c001138f:	c3                   	ret    

c0011390 <Virt::virtualMemorySetup()>:
c0011390:	53                   	push   ebx
c0011391:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011396:	83 ec 08             	sub    esp,0x8
c0011399:	6a 0f                	push   0xf
c001139b:	53                   	push   ebx
c001139c:	43                   	inc    ebx
c001139d:	e8 84 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a2:	59                   	pop    ecx
c00113a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113a9:	58                   	pop    eax
c00113aa:	75 ed                	jne    c0011399 <Virt::virtualMemorySetup()+0x9>
c00113ac:	83 ec 08             	sub    esp,0x8
c00113af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113b4:	68 00 00 00 c8       	push   0xc8000000
c00113b9:	68 db 95 03 c0       	push   0xc00395db
c00113be:	e8 9d ba ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00113c3:	58                   	pop    eax
c00113c4:	5a                   	pop    edx
c00113c5:	68 00 f0 ff ef       	push   0xeffff000
c00113ca:	68 ef 95 03 c0       	push   0xc00395ef
c00113cf:	e8 8c ba ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	6a 00                	push   0x0
c00113dc:	53                   	push   ebx
c00113dd:	43                   	inc    ebx
c00113de:	e8 43 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e3:	83 c4 10             	add    esp,0x10
c00113e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ec:	75 e9                	jne    c00113d7 <Virt::virtualMemorySetup()+0x47>
c00113ee:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	6a 0f                	push   0xf
c00113f8:	53                   	push   ebx
c00113f9:	43                   	inc    ebx
c00113fa:	e8 27 fe ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011408:	75 e9                	jne    c00113f3 <Virt::virtualMemorySetup()+0x63>
c001140a:	83 c4 08             	add    esp,0x8
c001140d:	5b                   	pop    ebx
c001140e:	c3                   	ret    

c001140f <Virt::getAKernelVAS()>:
c001140f:	a1 bc bd 03 c0       	mov    eax,ds:0xc003bdbc
c0011414:	c3                   	ret    

c0011415 <Virt::setupPageSwapping(int)>:
c0011415:	57                   	push   edi
c0011416:	56                   	push   esi
c0011417:	53                   	push   ebx
c0011418:	83 ec 1c             	sub    esp,0x1c
c001141b:	68 14 01 00 00       	push   0x114
c0011420:	e8 eb 0f 00 00       	call   c0012410 <operator new(unsigned long)>
c0011425:	83 c4 0c             	add    esp,0xc
c0011428:	89 c6                	mov    esi,eax
c001142a:	ff 35 5c bb 03 c0    	push   DWORD PTR ds:0xc003bb5c
c0011430:	68 03 96 03 c0       	push   0xc0039603
c0011435:	50                   	push   eax
c0011436:	e8 03 14 00 00       	call   c001283e <File::File(char const*, Process*)>
c001143b:	89 34 24             	mov    DWORD PTR [esp],esi
c001143e:	e8 d7 15 00 00       	call   c0012a1a <File::unlink()>
c0011443:	58                   	pop    eax
c0011444:	5a                   	pop    edx
c0011445:	6a 12                	push   0x12
c0011447:	56                   	push   esi
c0011448:	e8 55 14 00 00       	call   c00128a2 <File::open(FileOpenMode)>
c001144d:	83 c4 10             	add    esp,0x10
c0011450:	85 c0                	test   eax,eax
c0011452:	0f 85 bf 00 00 00    	jne    c0011517 <Virt::setupPageSwapping(int)+0x102>
c0011458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011464:	c1 e3 08             	shl    ebx,0x8
c0011467:	83 ec 0c             	sub    esp,0xc
c001146a:	68 00 00 01 00       	push   0x10000
c001146f:	e8 e7 bf ff ff       	call   c000d45b <malloc>
c0011474:	83 c4 0c             	add    esp,0xc
c0011477:	89 c7                	mov    edi,eax
c0011479:	68 00 00 01 00       	push   0x10000
c001147e:	6a 00                	push   0x0
c0011480:	50                   	push   eax
c0011481:	e8 52 f2 fe ff       	call   c00006d8 <memset>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	85 db                	test   ebx,ebx
c001148b:	79 03                	jns    c0011490 <Virt::setupPageSwapping(int)+0x7b>
c001148d:	83 c3 0f             	add    ebx,0xf
c0011490:	c1 fb 04             	sar    ebx,0x4
c0011493:	4b                   	dec    ebx
c0011494:	83 fb ff             	cmp    ebx,0xffffffff
c0011497:	74 4b                	je     c00114e4 <Virt::setupPageSwapping(int)+0xcf>
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 06                	mov    eax,DWORD PTR [esi]
c001149e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a2:	52                   	push   edx
c00114a3:	57                   	push   edi
c00114a4:	6a 00                	push   0x0
c00114a6:	68 00 00 01 00       	push   0x10000
c00114ab:	56                   	push   esi
c00114ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114af:	83 c4 20             	add    esp,0x20
c00114b2:	85 c0                	test   eax,eax
c00114b4:	75 4e                	jne    c0011504 <Virt::setupPageSwapping(int)+0xef>
c00114b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114ba:	3d 00 00 01 00       	cmp    eax,0x10000
c00114bf:	74 d2                	je     c0011493 <Virt::setupPageSwapping(int)+0x7e>
c00114c1:	83 ec 08             	sub    esp,0x8
c00114c4:	4b                   	dec    ebx
c00114c5:	50                   	push   eax
c00114c6:	68 56 96 03 c0       	push   0xc0039656
c00114cb:	e8 90 b9 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00114d0:	c7 04 24 5f 96 03 c0 	mov    DWORD PTR [esp],0xc003965f
c00114d7:	e8 a2 ba ff ff       	call   c000cf7e <panic(char const*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	83 fb ff             	cmp    ebx,0xffffffff
c00114e2:	75 b5                	jne    c0011499 <Virt::setupPageSwapping(int)+0x84>
c00114e4:	83 ec 0c             	sub    esp,0xc
c00114e7:	56                   	push   esi
c00114e8:	e8 13 14 00 00       	call   c0012900 <File::close()>
c00114ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f0:	e8 86 bf ff ff       	call   c000d47b <rfree>
c00114f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00114f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00114fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fd:	83 c4 20             	add    esp,0x20
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	c3                   	ret    
c0011504:	83 ec 08             	sub    esp,0x8
c0011507:	50                   	push   eax
c0011508:	68 3e 96 03 c0       	push   0xc003963e
c001150d:	e8 4e b9 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011512:	83 c4 10             	add    esp,0x10
c0011515:	eb 9f                	jmp    c00114b6 <Virt::setupPageSwapping(int)+0xa1>
c0011517:	83 ec 08             	sub    esp,0x8
c001151a:	50                   	push   eax
c001151b:	68 1a 96 03 c0       	push   0xc003961a
c0011520:	e8 3b b9 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011525:	c7 04 24 23 96 03 c0 	mov    DWORD PTR [esp],0xc0039623
c001152c:	e8 4d ba ff ff       	call   c000cf7e <panic(char const*)>
c0011531:	83 c4 10             	add    esp,0x10
c0011534:	e9 1f ff ff ff       	jmp    c0011458 <Virt::setupPageSwapping(int)+0x43>
c0011539:	90                   	nop

c001153a <VAS::VAS()>:
c001153a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011549:	a3 bc bd 03 c0       	mov    ds:0xc003bdbc,eax
c001154e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011552:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011561:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011568:	90                   	nop
c0011569:	c3                   	ret    

c001156a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001156a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001156e:	89 c2                	mov    edx,eax
c0011570:	c1 e8 0a             	shr    eax,0xa
c0011573:	c1 ea 16             	shr    edx,0x16
c0011576:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001157b:	19 c9                	sbb    ecx,ecx
c001157d:	c1 e2 0c             	shl    edx,0xc
c0011580:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011586:	25 fc 0f 00 00       	and    eax,0xffc
c001158b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011592:	01 d0                	add    eax,edx
c0011594:	c3                   	ret    
c0011595:	90                   	nop

c0011596 <VAS::getPageTableEntry(unsigned long)>:
c0011596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001159a:	89 ca                	mov    edx,ecx
c001159c:	c1 e9 0a             	shr    ecx,0xa
c001159f:	c1 ea 16             	shr    edx,0x16
c00115a2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115a8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115ae:	c1 e0 0c             	shl    eax,0xc
c00115b1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115b4:	c3                   	ret    

c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115b5:	57                   	push   edi
c00115b6:	56                   	push   esi
c00115b7:	be 01 00 00 00       	mov    esi,0x1
c00115bc:	53                   	push   ebx
c00115bd:	83 ec 10             	sub    esp,0x10
c00115c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115c4:	c1 eb 0c             	shr    ebx,0xc
c00115c7:	eb 3f                	jmp    c0011608 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115c9:	e8 41 fe ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00115ce:	83 ec 08             	sub    esp,0x8
c00115d1:	57                   	push   edi
c00115d2:	50                   	push   eax
c00115d3:	e8 be ff ff ff       	call   c0011596 <VAS::getPageTableEntry(unsigned long)>
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	8b 00                	mov    eax,DWORD PTR [eax]
c00115dd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115e1:	f6 c4 04             	test   ah,0x4
c00115e4:	75 5f                	jne    c0011645 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00115e6:	80 fa 04             	cmp    dl,0x4
c00115e9:	74 78                	je     c0011663 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00115eb:	80 fa 02             	cmp    dl,0x2
c00115ee:	0f 84 88 00 00 00    	je     c001167c <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00115f4:	80 fa 03             	cmp    dl,0x3
c00115f7:	0f 84 ad 00 00 00    	je     c00116aa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00115fd:	fe ca                	dec    dl
c00115ff:	0f 84 92 00 00 00    	je     c0011697 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011605:	43                   	inc    ebx
c0011606:	31 f6                	xor    esi,esi
c0011608:	53                   	push   ebx
c0011609:	e8 4d fc ff ff       	call   c001125b <Virt::getPageState(unsigned long)>
c001160e:	5f                   	pop    edi
c001160f:	89 df                	mov    edi,ebx
c0011611:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011615:	c1 e7 0c             	shl    edi,0xc
c0011618:	84 c0                	test   al,al
c001161a:	75 ad                	jne    c00115c9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001161c:	83 ec 0c             	sub    esp,0xc
c001161f:	68 65 96 03 c0       	push   0xc0039665
c0011624:	e8 55 b9 ff ff       	call   c000cf7e <panic(char const*)>
c0011629:	e8 e1 fd ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001162e:	5a                   	pop    edx
c001162f:	59                   	pop    ecx
c0011630:	57                   	push   edi
c0011631:	50                   	push   eax
c0011632:	e8 5f ff ff ff       	call   c0011596 <VAS::getPageTableEntry(unsigned long)>
c0011637:	83 c4 10             	add    esp,0x10
c001163a:	8b 00                	mov    eax,DWORD PTR [eax]
c001163c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011640:	f6 c4 04             	test   ah,0x4
c0011643:	74 c0                	je     c0011605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011645:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011649:	25 00 f0 ff ff       	and    eax,0xfffff000
c001164e:	83 ec 0c             	sub    esp,0xc
c0011651:	50                   	push   eax
c0011652:	e8 24 c3 ff ff       	call   c000d97b <Phys::freePage(unsigned long)>
c0011657:	83 c4 10             	add    esp,0x10
c001165a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001165e:	80 fa 04             	cmp    dl,0x4
c0011661:	75 88                	jne    c00115eb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011663:	89 f0                	mov    eax,esi
c0011665:	84 c0                	test   al,al
c0011667:	75 47                	jne    c00116b0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011669:	c7 44 24 20 50 94 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039450
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	5b                   	pop    ebx
c0011675:	5e                   	pop    esi
c0011676:	5f                   	pop    edi
c0011677:	e9 02 b9 ff ff       	jmp    c000cf7e <panic(char const*)>
c001167c:	89 f0                	mov    eax,esi
c001167e:	84 c0                	test   al,al
c0011680:	75 15                	jne    c0011697 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	68 81 96 03 c0       	push   0xc0039681
c001168a:	e8 ef b8 ff ff       	call   c000cf7e <panic(char const*)>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	e9 6e ff ff ff       	jmp    c0011605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011697:	83 ec 08             	sub    esp,0x8
c001169a:	6a 00                	push   0x0
c001169c:	53                   	push   ebx
c001169d:	e8 84 fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116a2:	83 c4 10             	add    esp,0x10
c00116a5:	e9 5b ff ff ff       	jmp    c0011605 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116aa:	89 f0                	mov    eax,esi
c00116ac:	84 c0                	test   al,al
c00116ae:	75 15                	jne    c00116c5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116b0:	83 ec 08             	sub    esp,0x8
c00116b3:	6a 00                	push   0x0
c00116b5:	53                   	push   ebx
c00116b6:	e8 6b fb ff ff       	call   c0011226 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	83 c4 10             	add    esp,0x10
c00116c1:	5b                   	pop    ebx
c00116c2:	5e                   	pop    esi
c00116c3:	5f                   	pop    edi
c00116c4:	c3                   	ret    
c00116c5:	c7 44 24 20 9d 96 03 c0 	mov    DWORD PTR [esp+0x20],0xc003969d
c00116cd:	83 c4 10             	add    esp,0x10
c00116d0:	5b                   	pop    ebx
c00116d1:	5e                   	pop    esi
c00116d2:	5f                   	pop    edi
c00116d3:	e9 a6 b8 ff ff       	jmp    c000cf7e <panic(char const*)>

c00116d8 <VAS::freeAllocatedPages(unsigned long)>:
c00116d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116e0:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00116e4:	74 09                	je     c00116ef <VAS::freeAllocatedPages(unsigned long)+0x17>
c00116e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00116ea:	e9 c6 fe ff ff       	jmp    c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00116ef:	c7 44 24 04 74 94 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039474
c00116f7:	e9 64 b7 ff ff       	jmp    c000ce60 <kprintf(char const*, ...)>

c00116fc <VAS::virtualToPhysical(unsigned long)>:
c00116fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011700:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011704:	e8 8d fe ff ff       	call   c0011596 <VAS::getPageTableEntry(unsigned long)>
c0011709:	5a                   	pop    edx
c001170a:	8b 00                	mov    eax,DWORD PTR [eax]
c001170c:	59                   	pop    ecx
c001170d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011712:	c3                   	ret    
c0011713:	90                   	nop

c0011714 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011714:	83 ec 0c             	sub    esp,0xc
c0011717:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001171c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011720:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011727:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001172a:	19 c0                	sbb    eax,eax
c001172c:	83 ca 03             	or     edx,0x3
c001172f:	83 e0 fc             	and    eax,0xfffffffc
c0011732:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011739:	e8 3b d2 00 00       	call   c001e979 <CPU::readCR3()>
c001173e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011742:	83 c4 0c             	add    esp,0xc
c0011745:	e9 53 d2 00 00       	jmp    c001e99d <CPU::writeCR3(unsigned long)>

c001174a <VAS::~VAS()>:
c001174a:	83 ec 2c             	sub    esp,0x2c
c001174d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011755:	e8 a8 cb ff ff       	call   c000e302 <lockScheduler()>
c001175a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001175f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011761:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011764:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001176a:	83 ec 04             	sub    esp,0x4
c001176d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011771:	6a 01                	push   0x1
c0011773:	50                   	push   eax
c0011774:	e8 9b ff ff ff       	call   c0011714 <VAS::mapOtherVASIn(bool, VAS*)>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011784:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001178c:	0f 8f d7 00 00 00    	jg     c0011869 <VAS::~VAS()+0x11f>
c0011792:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011796:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011799:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001179d:	c1 e2 02             	shl    edx,0x2
c00117a0:	01 d0                	add    eax,edx
c00117a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00117a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ac:	83 e0 01             	and    eax,0x1
c00117af:	0f 84 ab 00 00 00    	je     c0011860 <VAS::~VAS()+0x116>
c00117b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00117bd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00117c5:	7f 75                	jg     c001183c <VAS::~VAS()+0xf2>
c00117c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117cb:	c1 e0 0a             	shl    eax,0xa
c00117ce:	89 c2                	mov    edx,eax
c00117d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117d4:	01 d0                	add    eax,edx
c00117d6:	c1 e0 0c             	shl    eax,0xc
c00117d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00117e4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117e7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117ed:	83 ec 04             	sub    esp,0x4
c00117f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117f4:	6a 01                	push   0x1
c00117f6:	50                   	push   eax
c00117f7:	e8 6e fd ff ff       	call   c001156a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00117fc:	83 c4 10             	add    esp,0x10
c00117ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011807:	8b 00                	mov    eax,DWORD PTR [eax]
c0011809:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001180d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011811:	25 01 04 00 00       	and    eax,0x401
c0011816:	3d 01 04 00 00       	cmp    eax,0x401
c001181b:	75 19                	jne    c0011836 <VAS::~VAS()+0xec>
c001181d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011821:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011826:	83 ec 0c             	sub    esp,0xc
c0011829:	50                   	push   eax
c001182a:	e8 4c c1 ff ff       	call   c000d97b <Phys::freePage(unsigned long)>
c001182f:	83 c4 10             	add    esp,0x10
c0011832:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011836:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001183a:	eb 81                	jmp    c00117bd <VAS::~VAS()+0x73>
c001183c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011840:	25 00 04 00 00       	and    eax,0x400
c0011845:	74 19                	je     c0011860 <VAS::~VAS()+0x116>
c0011847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011850:	83 ec 0c             	sub    esp,0xc
c0011853:	50                   	push   eax
c0011854:	e8 22 c1 ff ff       	call   c000d97b <Phys::freePage(unsigned long)>
c0011859:	83 c4 10             	add    esp,0x10
c001185c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011860:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011864:	e9 1b ff ff ff       	jmp    c0011784 <VAS::~VAS()+0x3a>
c0011869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	50                   	push   eax
c0011874:	e8 3c fd ff ff       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011879:	83 c4 10             	add    esp,0x10
c001187c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011880:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011883:	83 ec 0c             	sub    esp,0xc
c0011886:	50                   	push   eax
c0011887:	e8 ef c0 ff ff       	call   c000d97b <Phys::freePage(unsigned long)>
c001188c:	83 c4 10             	add    esp,0x10
c001188f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011897:	c1 e0 02             	shl    eax,0x2
c001189a:	83 ec 08             	sub    esp,0x8
c001189d:	50                   	push   eax
c001189e:	68 98 94 03 c0       	push   0xc0039498
c00118a3:	e8 b8 b5 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00118a8:	83 c4 10             	add    esp,0x10
c00118ab:	e8 54 ca ff ff       	call   c000e304 <unlockScheduler()>
c00118b0:	90                   	nop
c00118b1:	83 c4 2c             	add    esp,0x2c
c00118b4:	c3                   	ret    
c00118b5:	90                   	nop

c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00118b6:	55                   	push   ebp
c00118b7:	57                   	push   edi
c00118b8:	56                   	push   esi
c00118b9:	53                   	push   ebx
c00118ba:	83 ec 1c             	sub    esp,0x1c
c00118bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00118c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00118c5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00118cb:	77 08                	ja     c00118d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00118cd:	0f 20 d8             	mov    eax,cr3
c00118d0:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c00118d3:	75 47                	jne    c001191c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00118d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118d9:	09 d8                	or     eax,ebx
c00118db:	a9 ff 0f 00 00       	test   eax,0xfff
c00118e0:	75 57                	jne    c0011939 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00118e2:	89 de                	mov    esi,ebx
c00118e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00118e7:	c1 ee 16             	shr    esi,0x16
c00118ea:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00118f1:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00118f5:	74 54                	je     c001194b <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00118f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00118fb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011901:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011905:	c1 e6 0c             	shl    esi,0xc
c0011908:	c1 eb 0a             	shr    ebx,0xa
c001190b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011911:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011914:	83 c4 1c             	add    esp,0x1c
c0011917:	5b                   	pop    ebx
c0011918:	5e                   	pop    esi
c0011919:	5f                   	pop    edi
c001191a:	5d                   	pop    ebp
c001191b:	c3                   	ret    
c001191c:	83 ec 0c             	sub    esp,0xc
c001191f:	68 b8 94 03 c0       	push   0xc00394b8
c0011924:	e8 37 b5 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011930:	09 d8                	or     eax,ebx
c0011932:	a9 ff 0f 00 00       	test   eax,0xfff
c0011937:	74 a9                	je     c00118e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011939:	83 ec 0c             	sub    esp,0xc
c001193c:	68 20 95 03 c0       	push   0xc0039520
c0011941:	e8 38 b6 ff ff       	call   c000cf7e <panic(char const*)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	eb 97                	jmp    c00118e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001194b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001194f:	e8 b1 c0 ff ff       	call   c000da05 <Phys::allocatePage()>
c0011954:	89 c5                	mov    ebp,eax
c0011956:	e8 b4 fa ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011962:	6a 01                	push   0x1
c0011964:	e8 16 f9 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011969:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011970:	6a 01                	push   0x1
c0011972:	50                   	push   eax
c0011973:	55                   	push   ebp
c0011974:	81 cd 07 04 00 00    	or     ebp,0x407
c001197a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001197e:	51                   	push   ecx
c001197f:	e8 1e 02 00 00       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011984:	83 c4 1c             	add    esp,0x1c
c0011987:	68 00 10 00 00       	push   0x1000
c001198c:	6a 00                	push   0x0
c001198e:	50                   	push   eax
c001198f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011993:	e8 40 ed fe ff       	call   c00006d8 <memset>
c0011998:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001199c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001199f:	e8 11 fc ff ff       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00119a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00119a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00119ab:	83 c4 10             	add    esp,0x10
c00119ae:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00119b1:	e9 41 ff ff ff       	jmp    c00118f7 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00119b6 <VAS::allocatePages(int, int)>:
c00119b6:	55                   	push   ebp
c00119b7:	57                   	push   edi
c00119b8:	56                   	push   esi
c00119b9:	53                   	push   ebx
c00119ba:	83 ec 1c             	sub    esp,0x1c
c00119bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119c1:	e8 50 57 00 00       	call   c0017116 <thisCPU()>
c00119c6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00119cc:	83 e0 01             	and    eax,0x1
c00119cf:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00119d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00119d7:	0f 85 d7 00 00 00    	jne    c0011ab4 <VAS::allocatePages(int, int)+0xfe>
c00119dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00119e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119e4:	85 c0                	test   eax,eax
c00119e6:	0f 84 ac 00 00 00    	je     c0011a98 <VAS::allocatePages(int, int)+0xe2>
c00119ec:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00119f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119f4:	c1 e6 0c             	shl    esi,0xc
c00119f7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00119fb:	85 c0                	test   eax,eax
c00119fd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a00:	7e 33                	jle    c0011a35 <VAS::allocatePages(int, int)+0x7f>
c0011a02:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a06:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a0a:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a10:	e8 f0 bf ff ff       	call   c000da05 <Phys::allocatePage()>
c0011a15:	55                   	push   ebp
c0011a16:	53                   	push   ebx
c0011a17:	50                   	push   eax
c0011a18:	57                   	push   edi
c0011a19:	e8 98 fe ff ff       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a26:	74 03                	je     c0011a2b <VAS::allocatePages(int, int)+0x75>
c0011a28:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a31:	39 de                	cmp    esi,ebx
c0011a33:	75 db                	jne    c0011a10 <VAS::allocatePages(int, int)+0x5a>
c0011a35:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011a3a:	74 3f                	je     c0011a7b <VAS::allocatePages(int, int)+0xc5>
c0011a3c:	c1 ee 0a             	shr    esi,0xa
c0011a3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a43:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011a49:	c1 eb 0a             	shr    ebx,0xa
c0011a4c:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011a52:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011a58:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011a5e:	39 f3                	cmp    ebx,esi
c0011a60:	77 0d                	ja     c0011a6f <VAS::allocatePages(int, int)+0xb9>
c0011a62:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011a65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011a6b:	39 de                	cmp    esi,ebx
c0011a6d:	73 f3                	jae    c0011a62 <VAS::allocatePages(int, int)+0xac>
c0011a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a73:	83 c4 1c             	add    esp,0x1c
c0011a76:	5b                   	pop    ebx
c0011a77:	5e                   	pop    esi
c0011a78:	5f                   	pop    edi
c0011a79:	5d                   	pop    ebp
c0011a7a:	c3                   	ret    
c0011a7b:	e8 f9 ce 00 00       	call   c001e979 <CPU::readCR3()>
c0011a80:	83 ec 0c             	sub    esp,0xc
c0011a83:	50                   	push   eax
c0011a84:	e8 14 cf 00 00       	call   c001e99d <CPU::writeCR3(unsigned long)>
c0011a89:	83 c4 10             	add    esp,0x10
c0011a8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a90:	83 c4 1c             	add    esp,0x1c
c0011a93:	5b                   	pop    ebx
c0011a94:	5e                   	pop    esi
c0011a95:	5f                   	pop    edi
c0011a96:	5d                   	pop    ebp
c0011a97:	c3                   	ret    
c0011a98:	83 ec 0c             	sub    esp,0xc
c0011a9b:	68 44 95 03 c0       	push   0xc0039544
c0011aa0:	e8 d9 b4 ff ff       	call   c000cf7e <panic(char const*)>
c0011aa5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011aa8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011aac:	83 c4 10             	add    esp,0x10
c0011aaf:	e9 38 ff ff ff       	jmp    c00119ec <VAS::allocatePages(int, int)+0x36>
c0011ab4:	83 ec 0c             	sub    esp,0xc
c0011ab7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011abb:	e8 bf f7 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011ac0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ac4:	83 c4 10             	add    esp,0x10
c0011ac7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011acc:	0f 87 94 00 00 00    	ja     c0011b66 <VAS::allocatePages(int, int)+0x1b0>
c0011ad2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ad6:	85 d2                	test   edx,edx
c0011ad8:	7e 3c                	jle    c0011b16 <VAS::allocatePages(int, int)+0x160>
c0011ada:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ade:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ae2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ae6:	c1 e5 0c             	shl    ebp,0xc
c0011ae9:	81 ce 00 04 00 00    	or     esi,0x400
c0011aef:	01 dd                	add    ebp,ebx
c0011af1:	e8 0f bf ff ff       	call   c000da05 <Phys::allocatePage()>
c0011af6:	56                   	push   esi
c0011af7:	53                   	push   ebx
c0011af8:	50                   	push   eax
c0011af9:	57                   	push   edi
c0011afa:	e8 b7 fd ff ff       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aff:	83 c4 10             	add    esp,0x10
c0011b02:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b07:	74 03                	je     c0011b0c <VAS::allocatePages(int, int)+0x156>
c0011b09:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b0c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b12:	39 dd                	cmp    ebp,ebx
c0011b14:	75 db                	jne    c0011af1 <VAS::allocatePages(int, int)+0x13b>
c0011b16:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b1b:	0f 84 5a ff ff ff    	je     c0011a7b <VAS::allocatePages(int, int)+0xc5>
c0011b21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b29:	89 d3                	mov    ebx,edx
c0011b2b:	c1 e0 0c             	shl    eax,0xc
c0011b2e:	c1 eb 0a             	shr    ebx,0xa
c0011b31:	01 d0                	add    eax,edx
c0011b33:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b39:	c1 e8 0a             	shr    eax,0xa
c0011b3c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b47:	2d 00 00 40 00       	sub    eax,0x400000
c0011b4c:	39 c3                	cmp    ebx,eax
c0011b4e:	0f 87 1b ff ff ff    	ja     c0011a6f <VAS::allocatePages(int, int)+0xb9>
c0011b54:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b57:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b5d:	39 d8                	cmp    eax,ebx
c0011b5f:	73 f3                	jae    c0011b54 <VAS::allocatePages(int, int)+0x19e>
c0011b61:	e9 09 ff ff ff       	jmp    c0011a6f <VAS::allocatePages(int, int)+0xb9>
c0011b66:	e8 ab 55 00 00       	call   c0017116 <thisCPU()>
c0011b6b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011b72:	0f 84 5a ff ff ff    	je     c0011ad2 <VAS::allocatePages(int, int)+0x11c>
c0011b78:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011b80:	e9 4d ff ff ff       	jmp    c0011ad2 <VAS::allocatePages(int, int)+0x11c>
c0011b85:	90                   	nop

c0011b86 <VAS::setCPUSpecific(unsigned long)>:
c0011b86:	83 ec 0c             	sub    esp,0xc
c0011b89:	6a 05                	push   0x5
c0011b8b:	68 00 00 40 c2       	push   0xc2400000
c0011b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b98:	e8 19 fd ff ff       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b9d:	83 c4 1c             	add    esp,0x1c
c0011ba0:	c3                   	ret    
c0011ba1:	90                   	nop

c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011ba2:	55                   	push   ebp
c0011ba3:	57                   	push   edi
c0011ba4:	56                   	push   esi
c0011ba5:	53                   	push   ebx
c0011ba6:	83 ec 1c             	sub    esp,0x1c
c0011ba9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011bad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bb1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011bb5:	e8 5c 55 00 00       	call   c0017116 <thisCPU()>
c0011bba:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011bc0:	83 e0 01             	and    eax,0x1
c0011bc3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011bc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011bcb:	85 c0                	test   eax,eax
c0011bcd:	7e 39                	jle    c0011c08 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011bcf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011bd3:	89 f3                	mov    ebx,esi
c0011bd5:	c1 e0 0c             	shl    eax,0xc
c0011bd8:	01 f0                	add    eax,esi
c0011bda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bde:	55                   	push   ebp
c0011bdf:	53                   	push   ebx
c0011be0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011be4:	29 f0                	sub    eax,esi
c0011be6:	01 d8                	add    eax,ebx
c0011be8:	50                   	push   eax
c0011be9:	57                   	push   edi
c0011bea:	e8 c7 fc ff ff       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bef:	83 c4 10             	add    esp,0x10
c0011bf2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bf7:	74 03                	je     c0011bfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011bf9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bfc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c02:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c06:	75 d6                	jne    c0011bde <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c08:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c0d:	74 42                	je     c0011c51 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011c0f:	89 f3                	mov    ebx,esi
c0011c11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c15:	c1 eb 0a             	shr    ebx,0xa
c0011c18:	c1 e0 0c             	shl    eax,0xc
c0011c1b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c21:	01 f0                	add    eax,esi
c0011c23:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c29:	c1 e8 0a             	shr    eax,0xa
c0011c2c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c31:	2d 00 00 40 00       	sub    eax,0x400000
c0011c36:	39 c3                	cmp    ebx,eax
c0011c38:	77 0d                	ja     c0011c47 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011c3a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c3d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c43:	39 d8                	cmp    eax,ebx
c0011c45:	73 f3                	jae    c0011c3a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011c47:	83 c4 1c             	add    esp,0x1c
c0011c4a:	89 f0                	mov    eax,esi
c0011c4c:	5b                   	pop    ebx
c0011c4d:	5e                   	pop    esi
c0011c4e:	5f                   	pop    edi
c0011c4f:	5d                   	pop    ebp
c0011c50:	c3                   	ret    
c0011c51:	e8 23 cd 00 00       	call   c001e979 <CPU::readCR3()>
c0011c56:	83 ec 0c             	sub    esp,0xc
c0011c59:	50                   	push   eax
c0011c5a:	e8 3e cd 00 00       	call   c001e99d <CPU::writeCR3(unsigned long)>
c0011c5f:	89 f0                	mov    eax,esi
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	83 c4 1c             	add    esp,0x1c
c0011c67:	5b                   	pop    ebx
c0011c68:	5e                   	pop    esi
c0011c69:	5f                   	pop    edi
c0011c6a:	5d                   	pop    ebp
c0011c6b:	c3                   	ret    

c0011c6c <VAS::VAS(VAS*)>:
c0011c6c:	53                   	push   ebx
c0011c6d:	83 ec 38             	sub    esp,0x38
c0011c70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c7b:	e8 a9 c6 ff ff       	call   c000e329 <lockStuff()>
c0011c80:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011c87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011c8e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c92:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011c95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c99:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011c9c:	e8 64 bd ff ff       	call   c000da05 <Phys::allocatePage()>
c0011ca1:	89 c2                	mov    edx,eax
c0011ca3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ca7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011caa:	e8 60 f7 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011caf:	89 c3                	mov    ebx,eax
c0011cb1:	83 ec 0c             	sub    esp,0xc
c0011cb4:	6a 01                	push   0x1
c0011cb6:	e8 c4 f5 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011cbb:	83 c4 10             	add    esp,0x10
c0011cbe:	89 c2                	mov    edx,eax
c0011cc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cc7:	83 ec 0c             	sub    esp,0xc
c0011cca:	6a 03                	push   0x3
c0011ccc:	6a 01                	push   0x1
c0011cce:	52                   	push   edx
c0011ccf:	50                   	push   eax
c0011cd0:	53                   	push   ebx
c0011cd1:	e8 cc fe ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011cd6:	83 c4 20             	add    esp,0x20
c0011cd9:	89 c2                	mov    edx,eax
c0011cdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cdf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011ce2:	83 ec 04             	sub    esp,0x4
c0011ce5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011ce9:	6a 01                	push   0x1
c0011ceb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011cef:	e8 20 fa ff ff       	call   c0011714 <VAS::mapOtherVASIn(bool, VAS*)>
c0011cf4:	83 c4 10             	add    esp,0x10
c0011cf7:	83 ec 0c             	sub    esp,0xc
c0011cfa:	6a 01                	push   0x1
c0011cfc:	e8 7e f5 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011d08:	83 ec 0c             	sub    esp,0xc
c0011d0b:	6a 01                	push   0x1
c0011d0d:	e8 6d f5 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0011d12:	83 c4 10             	add    esp,0x10
c0011d15:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d19:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011d21:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011d29:	0f 8f 5e 02 00 00    	jg     c0011f8d <VAS::VAS(VAS*)+0x321>
c0011d2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d39:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d46:	c1 e2 02             	shl    edx,0x2
c0011d49:	01 d0                	add    eax,edx
c0011d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d51:	83 ec 08             	sub    esp,0x8
c0011d54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d58:	68 b7 96 03 c0       	push   0xc00396b7
c0011d5d:	e8 fe b0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011d62:	83 c4 10             	add    esp,0x10
c0011d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d69:	25 01 04 00 00       	and    eax,0x401
c0011d6e:	3d 01 04 00 00       	cmp    eax,0x401
c0011d73:	0f 85 e5 01 00 00    	jne    c0011f5e <VAS::VAS(VAS*)+0x2f2>
c0011d79:	83 ec 0c             	sub    esp,0xc
c0011d7c:	68 c8 96 03 c0       	push   0xc00396c8
c0011d81:	e8 da b0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	e8 77 bc ff ff       	call   c000da05 <Phys::allocatePage()>
c0011d8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d92:	83 ec 08             	sub    esp,0x8
c0011d95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d99:	68 de 96 03 c0       	push   0xc00396de
c0011d9e:	e8 bd b0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011daa:	25 ff 0f 00 00       	and    eax,0xfff
c0011daf:	89 c1                	mov    ecx,eax
c0011db1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011db5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011db8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011dbc:	c1 e2 02             	shl    edx,0x2
c0011dbf:	01 c2                	add    edx,eax
c0011dc1:	89 c8                	mov    eax,ecx
c0011dc3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011dc7:	89 02                	mov    DWORD PTR [edx],eax
c0011dc9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011dd1:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011dd9:	0f 8f a5 01 00 00    	jg     c0011f84 <VAS::VAS(VAS*)+0x318>
c0011ddf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011de3:	c1 e0 0a             	shl    eax,0xa
c0011de6:	89 c2                	mov    edx,eax
c0011de8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dec:	01 d0                	add    eax,edx
c0011dee:	c1 e0 0c             	shl    eax,0xc
c0011df1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011df5:	83 ec 08             	sub    esp,0x8
c0011df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dfc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e00:	e8 91 f7 ff ff       	call   c0011596 <VAS::getPageTableEntry(unsigned long)>
c0011e05:	83 c4 10             	add    esp,0x10
c0011e08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e0e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e13:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e15:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e18:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e1e:	83 ec 04             	sub    esp,0x4
c0011e21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e25:	6a 01                	push   0x1
c0011e27:	50                   	push   eax
c0011e28:	e8 3d f7 ff ff       	call   c001156a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e34:	83 ec 04             	sub    esp,0x4
c0011e37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e3f:	68 70 95 03 c0       	push   0xc0039570
c0011e44:	e8 17 b0 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011e49:	83 c4 10             	add    esp,0x10
c0011e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e50:	25 01 04 00 00       	and    eax,0x401
c0011e55:	3d 01 04 00 00       	cmp    eax,0x401
c0011e5a:	0f 85 db 00 00 00    	jne    c0011f3b <VAS::VAS(VAS*)+0x2cf>
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	68 ed 96 03 c0       	push   0xc00396ed
c0011e68:	e8 f3 af ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011e6d:	83 c4 10             	add    esp,0x10
c0011e70:	e8 90 bb ff ff       	call   c000da05 <Phys::allocatePage()>
c0011e75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e79:	83 ec 08             	sub    esp,0x8
c0011e7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e80:	68 fc 96 03 c0       	push   0xc00396fc
c0011e85:	e8 d6 af ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011e8a:	83 c4 10             	add    esp,0x10
c0011e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e96:	83 ec 08             	sub    esp,0x8
c0011e99:	50                   	push   eax
c0011e9a:	68 10 97 03 c0       	push   0xc0039710
c0011e9f:	e8 bc af ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011ea4:	83 c4 10             	add    esp,0x10
c0011ea7:	e8 63 f5 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011eac:	83 ec 0c             	sub    esp,0xc
c0011eaf:	6a 03                	push   0x3
c0011eb1:	6a 01                	push   0x1
c0011eb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011eb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ebb:	50                   	push   eax
c0011ebc:	e8 e1 fc ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ec1:	83 c4 20             	add    esp,0x20
c0011ec4:	e8 46 f5 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0011ec9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ecd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011ed3:	83 ec 0c             	sub    esp,0xc
c0011ed6:	6a 03                	push   0x3
c0011ed8:	6a 01                	push   0x1
c0011eda:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ede:	52                   	push   edx
c0011edf:	50                   	push   eax
c0011ee0:	e8 bd fc ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ee5:	83 c4 20             	add    esp,0x20
c0011ee8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef0:	83 ec 04             	sub    esp,0x4
c0011ef3:	68 00 10 00 00       	push   0x1000
c0011ef8:	52                   	push   edx
c0011ef9:	50                   	push   eax
c0011efa:	e8 62 e7 fe ff       	call   c0000661 <memcpy>
c0011eff:	83 c4 10             	add    esp,0x10
c0011f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f06:	25 ff 0f 00 00       	and    eax,0xfff
c0011f0b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f0f:	89 c2                	mov    edx,eax
c0011f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f15:	89 10                	mov    DWORD PTR [eax],edx
c0011f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f1b:	25 ff 0f 00 00       	and    eax,0xfff
c0011f20:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011f24:	83 ec 04             	sub    esp,0x4
c0011f27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f2b:	50                   	push   eax
c0011f2c:	68 94 95 03 c0       	push   0xc0039594
c0011f31:	e8 2a af ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	eb 1a                	jmp    c0011f55 <VAS::VAS(VAS*)+0x2e9>
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	68 24 97 03 c0       	push   0xc0039724
c0011f43:	e8 18 af ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f53:	89 10                	mov    DWORD PTR [eax],edx
c0011f55:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011f59:	e9 73 fe ff ff       	jmp    c0011dd1 <VAS::VAS(VAS*)+0x165>
c0011f5e:	83 ec 0c             	sub    esp,0xc
c0011f61:	68 28 97 03 c0       	push   0xc0039728
c0011f66:	e8 f5 ae ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0011f6b:	83 c4 10             	add    esp,0x10
c0011f6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011f72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f75:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f79:	c1 e2 02             	shl    edx,0x2
c0011f7c:	01 c2                	add    edx,eax
c0011f7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f82:	89 02                	mov    DWORD PTR [edx],eax
c0011f84:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011f88:	e9 94 fd ff ff       	jmp    c0011d21 <VAS::VAS(VAS*)+0xb5>
c0011f8d:	83 ec 0c             	sub    esp,0xc
c0011f90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011f94:	e8 1c f6 ff ff       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f99:	83 c4 10             	add    esp,0x10
c0011f9c:	83 ec 0c             	sub    esp,0xc
c0011f9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011fa3:	e8 0d f6 ff ff       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fa8:	83 c4 10             	add    esp,0x10
c0011fab:	e8 0b c7 ff ff       	call   c000e6bb <unlockStuff()>
c0011fb0:	90                   	nop
c0011fb1:	83 c4 38             	add    esp,0x38
c0011fb4:	5b                   	pop    ebx
c0011fb5:	c3                   	ret    

c0011fb6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011fb6:	55                   	push   ebp
c0011fb7:	57                   	push   edi
c0011fb8:	56                   	push   esi
c0011fb9:	53                   	push   ebx
c0011fba:	83 ec 1c             	sub    esp,0x1c
c0011fbd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fc1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011fc5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011fc9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011fcd:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fd2:	75 4a                	jne    c001201e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011fd4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fd8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fdb:	c1 eb 16             	shr    ebx,0x16
c0011fde:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011fe5:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011fe9:	74 4d                	je     c0012038 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011feb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fef:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011ff3:	c1 e8 0a             	shr    eax,0xa
c0011ff6:	80 fa 01             	cmp    dl,0x1
c0011ff9:	19 d2                	sbb    edx,edx
c0011ffb:	c1 e3 0c             	shl    ebx,0xc
c0011ffe:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012002:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012008:	25 fc 0f 00 00       	and    eax,0xffc
c001200d:	01 d8                	add    eax,ebx
c001200f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012016:	83 c4 1c             	add    esp,0x1c
c0012019:	5b                   	pop    ebx
c001201a:	5e                   	pop    esi
c001201b:	5f                   	pop    edi
c001201c:	5d                   	pop    ebp
c001201d:	c3                   	ret    
c001201e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012022:	83 ec 0c             	sub    esp,0xc
c0012025:	68 b8 95 03 c0       	push   0xc00395b8
c001202a:	e8 4f af ff ff       	call   c000cf7e <panic(char const*)>
c001202f:	83 c4 10             	add    esp,0x10
c0012032:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012036:	eb 9c                	jmp    c0011fd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012038:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001203c:	e8 c4 b9 ff ff       	call   c000da05 <Phys::allocatePage()>
c0012041:	89 c5                	mov    ebp,eax
c0012043:	e8 c7 f3 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c0012048:	83 ec 0c             	sub    esp,0xc
c001204b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001204f:	6a 01                	push   0x1
c0012051:	e8 29 f2 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0012056:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001205d:	6a 01                	push   0x1
c001205f:	50                   	push   eax
c0012060:	55                   	push   ebp
c0012061:	81 cd 07 04 00 00    	or     ebp,0x407
c0012067:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001206b:	51                   	push   ecx
c001206c:	e8 31 fb ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012071:	83 c4 1c             	add    esp,0x1c
c0012074:	68 00 10 00 00       	push   0x1000
c0012079:	6a 00                	push   0x0
c001207b:	50                   	push   eax
c001207c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012080:	e8 53 e6 fe ff       	call   c00006d8 <memset>
c0012085:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012089:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001208c:	e8 24 f5 ff ff       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c0012091:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001209a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001209e:	e9 48 ff ff ff       	jmp    c0011feb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00120a3:	90                   	nop

c00120a4 <VAS::VAS(bool)>:
c00120a4:	53                   	push   ebx
c00120a5:	83 ec 28             	sub    esp,0x28
c00120a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00120b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120bf:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00120c3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00120c6:	e8 3a b9 ff ff       	call   c000da05 <Phys::allocatePage()>
c00120cb:	89 c2                	mov    edx,eax
c00120cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00120d4:	e8 36 f3 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00120d9:	89 c3                	mov    ebx,eax
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	6a 01                	push   0x1
c00120e0:	e8 9a f1 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c00120e5:	83 c4 10             	add    esp,0x10
c00120e8:	89 c2                	mov    edx,eax
c00120ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120ee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120f1:	83 ec 0c             	sub    esp,0xc
c00120f4:	6a 03                	push   0x3
c00120f6:	6a 01                	push   0x1
c00120f8:	52                   	push   edx
c00120f9:	50                   	push   eax
c00120fa:	53                   	push   ebx
c00120fb:	e8 a2 fa ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012100:	83 c4 20             	add    esp,0x20
c0012103:	89 c2                	mov    edx,eax
c0012105:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012109:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001210c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012114:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001211c:	7f 1c                	jg     c001213a <VAS::VAS(bool)+0x96>
c001211e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012122:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012125:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012129:	c1 e2 02             	shl    edx,0x2
c001212c:	01 d0                	add    eax,edx
c001212e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012134:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012138:	eb da                	jmp    c0012114 <VAS::VAS(bool)+0x70>
c001213a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012142:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001214a:	7f 71                	jg     c00121bd <VAS::VAS(bool)+0x119>
c001214c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012150:	2d 00 02 00 00       	sub    eax,0x200
c0012155:	c1 e0 0c             	shl    eax,0xc
c0012158:	83 c8 03             	or     eax,0x3
c001215b:	89 c3                	mov    ebx,eax
c001215d:	e8 b4 4f 00 00       	call   c0017116 <thisCPU()>
c0012162:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012168:	83 e0 10             	and    eax,0x10
c001216b:	84 c0                	test   al,al
c001216d:	74 07                	je     c0012176 <VAS::VAS(bool)+0xd2>
c001216f:	b8 00 01 00 00       	mov    eax,0x100
c0012174:	eb 05                	jmp    c001217b <VAS::VAS(bool)+0xd7>
c0012176:	b8 00 00 00 00       	mov    eax,0x0
c001217b:	09 d8                	or     eax,ebx
c001217d:	89 c1                	mov    ecx,eax
c001217f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012183:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001218a:	c1 e2 02             	shl    edx,0x2
c001218d:	01 d0                	add    eax,edx
c001218f:	89 ca                	mov    edx,ecx
c0012191:	89 10                	mov    DWORD PTR [eax],edx
c0012193:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012197:	2d 40 03 00 00       	sub    eax,0x340
c001219c:	83 f8 7f             	cmp    eax,0x7f
c001219f:	77 16                	ja     c00121b7 <VAS::VAS(bool)+0x113>
c00121a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121ac:	c1 e2 02             	shl    edx,0x2
c00121af:	01 d0                	add    eax,edx
c00121b1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121b7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121bb:	eb 85                	jmp    c0012142 <VAS::VAS(bool)+0x9e>
c00121bd:	e8 54 4f 00 00       	call   c0017116 <thisCPU()>
c00121c2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00121c8:	83 e0 10             	and    eax,0x10
c00121cb:	84 c0                	test   al,al
c00121cd:	74 07                	je     c00121d6 <VAS::VAS(bool)+0x132>
c00121cf:	b8 03 41 00 00       	mov    eax,0x4103
c00121d4:	eb 05                	jmp    c00121db <VAS::VAS(bool)+0x137>
c00121d6:	b8 03 40 00 00       	mov    eax,0x4003
c00121db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00121df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00121e2:	81 c2 20 0c 00 00    	add    edx,0xc20
c00121e8:	89 02                	mov    DWORD PTR [edx],eax
c00121ea:	e8 27 4f 00 00       	call   c0017116 <thisCPU()>
c00121ef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00121f5:	83 ec 08             	sub    esp,0x8
c00121f8:	50                   	push   eax
c00121f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121fd:	e8 84 f9 ff ff       	call   c0011b86 <VAS::setCPUSpecific(unsigned long)>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012209:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c001220c:	e8 05 4f 00 00       	call   c0017116 <thisCPU()>
c0012211:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012217:	83 e0 10             	and    eax,0x10
c001221a:	84 c0                	test   al,al
c001221c:	74 07                	je     c0012225 <VAS::VAS(bool)+0x181>
c001221e:	b8 00 01 00 00       	mov    eax,0x100
c0012223:	eb 05                	jmp    c001222a <VAS::VAS(bool)+0x186>
c0012225:	b8 00 00 00 00       	mov    eax,0x0
c001222a:	09 d8                	or     eax,ebx
c001222c:	89 c2                	mov    edx,eax
c001222e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012232:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012235:	05 fc 0f 00 00       	add    eax,0xffc
c001223a:	83 ca 03             	or     edx,0x3
c001223d:	89 10                	mov    DWORD PTR [eax],edx
c001223f:	e8 d2 4e 00 00       	call   c0017116 <thisCPU()>
c0012244:	83 ec 0c             	sub    esp,0xc
c0012247:	50                   	push   eax
c0012248:	e8 af 17 00 00       	call   c00139fc <Device::getName()>
c001224d:	83 c4 10             	add    esp,0x10
c0012250:	83 ec 08             	sub    esp,0x8
c0012253:	68 38 97 03 c0       	push   0xc0039738
c0012258:	50                   	push   eax
c0012259:	e8 1c e6 fe ff       	call   c000087a <strcmp>
c001225e:	83 c4 10             	add    esp,0x10
c0012261:	85 c0                	test   eax,eax
c0012263:	0f 94 c0             	sete   al
c0012266:	84 c0                	test   al,al
c0012268:	74 64                	je     c00122ce <VAS::VAS(bool)+0x22a>
c001226a:	e8 76 c0 ff ff       	call   c000e2e5 <disableIRQs()>
c001226f:	e8 a2 4e 00 00       	call   c0017116 <thisCPU()>
c0012274:	05 7c 09 00 00       	add    eax,0x97c
c0012279:	83 ec 0c             	sub    esp,0xc
c001227c:	50                   	push   eax
c001227d:	e8 32 a7 ff ff       	call   c000c9b4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012282:	83 c4 10             	add    esp,0x10
c0012285:	25 00 f0 ff ff       	and    eax,0xfffff000
c001228a:	89 c3                	mov    ebx,eax
c001228c:	e8 85 4e 00 00       	call   c0017116 <thisCPU()>
c0012291:	05 7c 09 00 00       	add    eax,0x97c
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	50                   	push   eax
c001229a:	e8 15 a7 ff ff       	call   c000c9b4 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001229f:	83 c4 10             	add    esp,0x10
c00122a2:	83 ec 08             	sub    esp,0x8
c00122a5:	50                   	push   eax
c00122a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122aa:	e8 e7 f2 ff ff       	call   c0011596 <VAS::getPageTableEntry(unsigned long)>
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00122b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122b9:	6a 11                	push   0x11
c00122bb:	53                   	push   ebx
c00122bc:	50                   	push   eax
c00122bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122c1:	e8 f0 f5 ff ff       	call   c00118b6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122c6:	83 c4 10             	add    esp,0x10
c00122c9:	e8 25 c0 ff ff       	call   c000e2f3 <enableIRQs()>
c00122ce:	90                   	nop
c00122cf:	83 c4 28             	add    esp,0x28
c00122d2:	5b                   	pop    ebx
c00122d3:	c3                   	ret    

c00122d4 <mapVASFirstTime>:
c00122d4:	55                   	push   ebp
c00122d5:	57                   	push   edi
c00122d6:	56                   	push   esi
c00122d7:	53                   	push   ebx
c00122d8:	83 ec 0c             	sub    esp,0xc
c00122db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122e0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00122e3:	4a                   	dec    edx
c00122e4:	0f 84 99 00 00 00    	je     c0012383 <mapVASFirstTime+0xaf>
c00122ea:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00122ed:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00122f0:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00122f5:	c1 e5 15             	shl    ebp,0x15
c00122f8:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c00122fd:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012303:	29 eb                	sub    ebx,ebp
c0012305:	29 ee                	sub    esi,ebp
c0012307:	e8 f9 b6 ff ff       	call   c000da05 <Phys::allocatePage()>
c001230c:	83 ec 0c             	sub    esp,0xc
c001230f:	68 03 04 00 00       	push   0x403
c0012314:	6a 01                	push   0x1
c0012316:	53                   	push   ebx
c0012317:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001231d:	50                   	push   eax
c001231e:	57                   	push   edi
c001231f:	e8 7e f8 ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012324:	83 c4 20             	add    esp,0x20
c0012327:	39 f3                	cmp    ebx,esi
c0012329:	75 dc                	jne    c0012307 <mapVASFirstTime+0x33>
c001232b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012330:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012335:	29 ee                	sub    esi,ebp
c0012337:	29 e8                	sub    eax,ebp
c0012339:	89 c5                	mov    ebp,eax
c001233b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001233f:	19 db                	sbb    ebx,ebx
c0012341:	e8 bf b6 ff ff       	call   c000da05 <Phys::allocatePage()>
c0012346:	83 e3 04             	and    ebx,0x4
c0012349:	83 ec 0c             	sub    esp,0xc
c001234c:	81 c3 03 04 00 00    	add    ebx,0x403
c0012352:	53                   	push   ebx
c0012353:	6a 01                	push   0x1
c0012355:	56                   	push   esi
c0012356:	81 ee 00 10 00 00    	sub    esi,0x1000
c001235c:	50                   	push   eax
c001235d:	57                   	push   edi
c001235e:	e8 3f f8 ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012363:	83 c4 20             	add    esp,0x20
c0012366:	39 f5                	cmp    ebp,esi
c0012368:	75 d1                	jne    c001233b <mapVASFirstTime+0x67>
c001236a:	e8 0a c6 00 00       	call   c001e979 <CPU::readCR3()>
c001236f:	83 ec 0c             	sub    esp,0xc
c0012372:	50                   	push   eax
c0012373:	e8 25 c6 00 00       	call   c001e99d <CPU::writeCR3(unsigned long)>
c0012378:	83 c4 10             	add    esp,0x10
c001237b:	83 c4 0c             	add    esp,0xc
c001237e:	5b                   	pop    ebx
c001237f:	5e                   	pop    esi
c0012380:	5f                   	pop    edi
c0012381:	5d                   	pop    ebp
c0012382:	c3                   	ret    
c0012383:	83 ec 0c             	sub    esp,0xc
c0012386:	68 46 97 03 c0       	push   0xc0039746
c001238b:	e8 d0 aa ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0012390:	83 c4 10             	add    esp,0x10
c0012393:	83 c4 0c             	add    esp,0xc
c0012396:	5b                   	pop    ebx
c0012397:	5e                   	pop    esi
c0012398:	5f                   	pop    edi
c0012399:	5d                   	pop    ebp
c001239a:	c3                   	ret    

c001239b <__cxa_atexit>:
c001239b:	31 c0                	xor    eax,eax
c001239d:	c3                   	ret    

c001239e <__cxa_finalize>:
c001239e:	c3                   	ret    

c001239f <__stack_chk_fail>:
c001239f:	55                   	push   ebp
c00123a0:	89 e5                	mov    ebp,esp
c00123a2:	83 ec 10             	sub    esp,0x10
c00123a5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123a8:	68 5f 97 03 c0       	push   0xc003975f
c00123ad:	e8 ae aa ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00123b2:	58                   	pop    eax
c00123b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123b6:	5a                   	pop    edx
c00123b7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123ba:	68 5f 97 03 c0       	push   0xc003975f
c00123bf:	e8 9c aa ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00123c4:	59                   	pop    ecx
c00123c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123c8:	5a                   	pop    edx
c00123c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00123cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123ce:	68 5f 97 03 c0       	push   0xc003975f
c00123d3:	e8 88 aa ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00123d8:	59                   	pop    ecx
c00123d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123dc:	5a                   	pop    edx
c00123dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00123df:	8b 00                	mov    eax,DWORD PTR [eax]
c00123e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00123e4:	68 5f 97 03 c0       	push   0xc003975f
c00123e9:	e8 72 aa ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00123ee:	c7 04 24 67 97 03 c0 	mov    DWORD PTR [esp],0xc0039767
c00123f5:	e8 84 ab ff ff       	call   c000cf7e <panic(char const*)>
c00123fa:	83 c4 10             	add    esp,0x10
c00123fd:	c9                   	leave  
c00123fe:	c3                   	ret    

c00123ff <__cxa_pure_virtual>:
c00123ff:	83 ec 18             	sub    esp,0x18
c0012402:	68 7f 97 03 c0       	push   0xc003977f
c0012407:	e8 72 ab ff ff       	call   c000cf7e <panic(char const*)>
c001240c:	83 c4 1c             	add    esp,0x1c
c001240f:	c3                   	ret    

c0012410 <operator new(unsigned long)>:
c0012410:	e9 46 b0 ff ff       	jmp    c000d45b <malloc>

c0012415 <operator new[](unsigned long)>:
c0012415:	e9 41 b0 ff ff       	jmp    c000d45b <malloc>

c001241a <operator delete(void*)>:
c001241a:	e9 5c b0 ff ff       	jmp    c000d47b <rfree>

c001241f <operator delete(void*, unsigned long)>:
c001241f:	e9 57 b0 ff ff       	jmp    c000d47b <rfree>

c0012424 <operator delete[](void*)>:
c0012424:	e9 52 b0 ff ff       	jmp    c000d47b <rfree>

c0012429 <operator delete[](void*, unsigned long)>:
c0012429:	e9 4d b0 ff ff       	jmp    c000d47b <rfree>

c001242e <File::read(unsigned long long, void*, int*)>:
c001242e:	53                   	push   ebx
c001242f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012433:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012437:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001243e:	3c 19                	cmp    al,0x19
c0012440:	77 35                	ja     c0012477 <File::read(unsigned long long, void*, int*)+0x49>
c0012442:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c0012449:	85 c0                	test   eax,eax
c001244b:	74 2a                	je     c0012477 <File::read(unsigned long long, void*, int*)+0x49>
c001244d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012453:	85 c0                	test   eax,eax
c0012455:	74 20                	je     c0012477 <File::read(unsigned long long, void*, int*)+0x49>
c0012457:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001245b:	74 21                	je     c001247e <File::read(unsigned long long, void*, int*)+0x50>
c001245d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001245f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012463:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012469:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001246d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012471:	5b                   	pop    ebx
c0012472:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012475:	ff e0                	jmp    eax
c0012477:	b8 0b 00 00 00       	mov    eax,0xb
c001247c:	eb 05                	jmp    c0012483 <File::read(unsigned long long, void*, int*)+0x55>
c001247e:	b8 05 00 00 00       	mov    eax,0x5
c0012483:	5b                   	pop    ebx
c0012484:	c3                   	ret    
c0012485:	90                   	nop

c0012486 <File::write(unsigned long long, void*, int*)>:
c0012486:	53                   	push   ebx
c0012487:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001248b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001248f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012496:	3c 19                	cmp    al,0x19
c0012498:	77 35                	ja     c00124cf <File::write(unsigned long long, void*, int*)+0x49>
c001249a:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c00124a1:	85 c0                	test   eax,eax
c00124a3:	74 2a                	je     c00124cf <File::write(unsigned long long, void*, int*)+0x49>
c00124a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00124ab:	85 c0                	test   eax,eax
c00124ad:	74 20                	je     c00124cf <File::write(unsigned long long, void*, int*)+0x49>
c00124af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00124b3:	74 21                	je     c00124d6 <File::write(unsigned long long, void*, int*)+0x50>
c00124b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124bb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00124c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00124c9:	5b                   	pop    ebx
c00124ca:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00124cd:	ff e0                	jmp    eax
c00124cf:	b8 0b 00 00 00       	mov    eax,0xb
c00124d4:	eb 05                	jmp    c00124db <File::write(unsigned long long, void*, int*)+0x55>
c00124d6:	b8 05 00 00 00       	mov    eax,0x5
c00124db:	5b                   	pop    ebx
c00124dc:	c3                   	ret    
c00124dd:	90                   	nop

c00124de <Directory::read(unsigned long long, void*, int*)>:
c00124de:	53                   	push   ebx
c00124df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124e7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00124ee:	3c 19                	cmp    al,0x19
c00124f0:	77 35                	ja     c0012527 <Directory::read(unsigned long long, void*, int*)+0x49>
c00124f2:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c00124f9:	85 c0                	test   eax,eax
c00124fb:	74 2a                	je     c0012527 <Directory::read(unsigned long long, void*, int*)+0x49>
c00124fd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012503:	85 c0                	test   eax,eax
c0012505:	74 20                	je     c0012527 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012507:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001250b:	74 21                	je     c001252e <Directory::read(unsigned long long, void*, int*)+0x50>
c001250d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001250f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012513:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001251d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012521:	5b                   	pop    ebx
c0012522:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012525:	ff e0                	jmp    eax
c0012527:	b8 0b 00 00 00       	mov    eax,0xb
c001252c:	eb 05                	jmp    c0012533 <Directory::read(unsigned long long, void*, int*)+0x55>
c001252e:	b8 05 00 00 00       	mov    eax,0x5
c0012533:	5b                   	pop    ebx
c0012534:	c3                   	ret    
c0012535:	90                   	nop

c0012536 <Directory::write(unsigned long long, void*, int*)>:
c0012536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001253a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012541:	b8 0b 00 00 00       	mov    eax,0xb
c0012546:	80 fa 19             	cmp    dl,0x19
c0012549:	77 18                	ja     c0012563 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001254b:	8b 14 95 60 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3da0]
c0012552:	85 d2                	test   edx,edx
c0012554:	74 0d                	je     c0012563 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012556:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001255d:	19 c0                	sbb    eax,eax
c001255f:	83 e0 0a             	and    eax,0xa
c0012562:	40                   	inc    eax
c0012563:	c3                   	ret    

c0012564 <File::isAtty()>:
c0012564:	31 c0                	xor    eax,eax
c0012566:	c3                   	ret    
c0012567:	90                   	nop

c0012568 <Directory::isAtty()>:
c0012568:	31 c0                	xor    eax,eax
c001256a:	c3                   	ret    
c001256b:	90                   	nop

c001256c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001256c:	b8 0a 00 00 00       	mov    eax,0xa
c0012571:	c3                   	ret    

c0012572 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012572:	b8 0a 00 00 00       	mov    eax,0xa
c0012577:	c3                   	ret    

c0012578 <File::~File()>:
c0012578:	83 ec 0c             	sub    esp,0xc
c001257b:	ba 00 98 03 c0       	mov    edx,0xc0039800
c0012580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012584:	89 10                	mov    DWORD PTR [eax],edx
c0012586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001258a:	83 ec 0c             	sub    esp,0xc
c001258d:	50                   	push   eax
c001258e:	e8 0d eb ff ff       	call   c00110a0 <UnixFile::~UnixFile()>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	90                   	nop
c0012597:	83 c4 0c             	add    esp,0xc
c001259a:	c3                   	ret    
c001259b:	90                   	nop

c001259c <File::~File()>:
c001259c:	83 ec 0c             	sub    esp,0xc
c001259f:	83 ec 0c             	sub    esp,0xc
c00125a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a6:	e8 cd ff ff ff       	call   c0012578 <File::~File()>
c00125ab:	83 c4 10             	add    esp,0x10
c00125ae:	83 ec 08             	sub    esp,0x8
c00125b1:	68 14 01 00 00       	push   0x114
c00125b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ba:	e8 60 fe ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c00125bf:	83 c4 10             	add    esp,0x10
c00125c2:	83 c4 0c             	add    esp,0xc
c00125c5:	c3                   	ret    

c00125c6 <Directory::~Directory()>:
c00125c6:	83 ec 0c             	sub    esp,0xc
c00125c9:	ba 1c 98 03 c0       	mov    edx,0xc003981c
c00125ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d2:	89 10                	mov    DWORD PTR [eax],edx
c00125d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d8:	83 ec 0c             	sub    esp,0xc
c00125db:	50                   	push   eax
c00125dc:	e8 bf ea ff ff       	call   c00110a0 <UnixFile::~UnixFile()>
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	90                   	nop
c00125e5:	83 c4 0c             	add    esp,0xc
c00125e8:	c3                   	ret    
c00125e9:	90                   	nop

c00125ea <Directory::~Directory()>:
c00125ea:	83 ec 0c             	sub    esp,0xc
c00125ed:	83 ec 0c             	sub    esp,0xc
c00125f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125f4:	e8 cd ff ff ff       	call   c00125c6 <Directory::~Directory()>
c00125f9:	83 c4 10             	add    esp,0x10
c00125fc:	83 ec 08             	sub    esp,0x8
c00125ff:	68 14 01 00 00       	push   0x114
c0012604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012608:	e8 12 fe ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001260d:	83 c4 10             	add    esp,0x10
c0012610:	83 c4 0c             	add    esp,0xc
c0012613:	c3                   	ret    

c0012614 <Filesystem::Filesystem()>:
c0012614:	ba 9c 97 03 c0       	mov    edx,0xc003979c
c0012619:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001261d:	89 10                	mov    DWORD PTR [eax],edx
c001261f:	8b 15 c0 bd 03 c0    	mov    edx,DWORD PTR ds:0xc003bdc0
c0012625:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012629:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001262c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012630:	a3 c0 bd 03 c0       	mov    ds:0xc003bdc0,eax
c0012635:	90                   	nop
c0012636:	c3                   	ret    
c0012637:	90                   	nop

c0012638 <Filesystem::~Filesystem()>:
c0012638:	ba 9c 97 03 c0       	mov    edx,0xc003979c
c001263d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012641:	89 10                	mov    DWORD PTR [eax],edx
c0012643:	90                   	nop
c0012644:	c3                   	ret    
c0012645:	90                   	nop

c0012646 <Filesystem::~Filesystem()>:
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001264d:	e8 e6 ff ff ff       	call   c0012638 <Filesystem::~Filesystem()>
c0012652:	83 c4 04             	add    esp,0x4
c0012655:	83 ec 08             	sub    esp,0x8
c0012658:	6a 08                	push   0x8
c001265a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265e:	e8 bc fd ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0012663:	83 c4 10             	add    esp,0x10
c0012666:	83 c4 0c             	add    esp,0xc
c0012669:	c3                   	ret    

c001266a <initVFS()>:
c001266a:	83 ec 18             	sub    esp,0x18
c001266d:	6a 08                	push   0x8
c001266f:	e8 9c fd ff ff       	call   c0012410 <operator new(unsigned long)>
c0012674:	89 04 24             	mov    DWORD PTR [esp],eax
c0012677:	e8 f4 70 00 00       	call   c0019770 <FAT::FAT()>
c001267c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012683:	e8 88 fd ff ff       	call   c0012410 <operator new(unsigned long)>
c0012688:	89 04 24             	mov    DWORD PTR [esp],eax
c001268b:	e8 ea 82 00 00       	call   c001a97a <ISO9660::ISO9660()>
c0012690:	83 c4 1c             	add    esp,0x1c
c0012693:	c3                   	ret    

c0012694 <standardiseFiles(char*, char const*, char const*)>:
c0012694:	55                   	push   ebp
c0012695:	57                   	push   edi
c0012696:	56                   	push   esi
c0012697:	53                   	push   ebx
c0012698:	81 ec 10 04 00 00    	sub    esp,0x410
c001269e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00126a5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00126ac:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00126b3:	68 00 04 00 00       	push   0x400
c00126b8:	6a 00                	push   0x0
c00126ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00126be:	56                   	push   esi
c00126bf:	e8 14 e0 fe ff       	call   c00006d8 <memset>
c00126c4:	83 c4 10             	add    esp,0x10
c00126c7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00126cb:	75 0b                	jne    c00126d8 <standardiseFiles(char*, char const*, char const*)+0x44>
c00126cd:	50                   	push   eax
c00126ce:	50                   	push   eax
c00126cf:	57                   	push   edi
c00126d0:	56                   	push   esi
c00126d1:	e8 1e e1 fe ff       	call   c00007f4 <strcpy>
c00126d6:	eb 41                	jmp    c0012719 <standardiseFiles(char*, char const*, char const*)+0x85>
c00126d8:	8a 07                	mov    al,BYTE PTR [edi]
c00126da:	3c 5c                	cmp    al,0x5c
c00126dc:	74 04                	je     c00126e2 <standardiseFiles(char*, char const*, char const*)+0x4e>
c00126de:	3c 2f                	cmp    al,0x2f
c00126e0:	75 18                	jne    c00126fa <standardiseFiles(char*, char const*, char const*)+0x66>
c00126e2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00126e5:	3c 60                	cmp    al,0x60
c00126e7:	7e 03                	jle    c00126ec <standardiseFiles(char*, char const*, char const*)+0x58>
c00126e9:	83 e8 20             	sub    eax,0x20
c00126ec:	88 04 24             	mov    BYTE PTR [esp],al
c00126ef:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00126f6:	50                   	push   eax
c00126f7:	50                   	push   eax
c00126f8:	eb 18                	jmp    c0012712 <standardiseFiles(char*, char const*, char const*)+0x7e>
c00126fa:	50                   	push   eax
c00126fb:	50                   	push   eax
c00126fc:	55                   	push   ebp
c00126fd:	56                   	push   esi
c00126fe:	e8 f1 e0 fe ff       	call   c00007f4 <strcpy>
c0012703:	5a                   	pop    edx
c0012704:	59                   	pop    ecx
c0012705:	68 92 8e 03 c0       	push   0xc0038e92
c001270a:	56                   	push   esi
c001270b:	e8 31 e2 fe ff       	call   c0000941 <strcat>
c0012710:	5d                   	pop    ebp
c0012711:	58                   	pop    eax
c0012712:	57                   	push   edi
c0012713:	56                   	push   esi
c0012714:	e8 28 e2 fe ff       	call   c0000941 <strcat>
c0012719:	83 c4 10             	add    esp,0x10
c001271c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001271f:	3c 60                	cmp    al,0x60
c0012721:	7e 03                	jle    c0012726 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012723:	83 e8 20             	sub    eax,0x20
c0012726:	88 04 24             	mov    BYTE PTR [esp],al
c0012729:	88 03                	mov    BYTE PTR [ebx],al
c001272b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012732:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012738:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001273c:	bf 03 00 00 00       	mov    edi,0x3
c0012741:	b8 03 00 00 00       	mov    eax,0x3
c0012746:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012749:	84 d2                	test   dl,dl
c001274b:	0f 84 91 00 00 00    	je     c00127e2 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012751:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012754:	80 fa 5c             	cmp    dl,0x5c
c0012757:	74 05                	je     c001275e <standardiseFiles(char*, char const*, char const*)+0xca>
c0012759:	80 fa 2f             	cmp    dl,0x2f
c001275c:	75 12                	jne    c0012770 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001275e:	89 c5                	mov    ebp,eax
c0012760:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012765:	74 09                	je     c0012770 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012767:	40                   	inc    eax
c0012768:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001276c:	89 cf                	mov    edi,ecx
c001276e:	eb d6                	jmp    c0012746 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012770:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012775:	75 5b                	jne    c00127d2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012777:	80 fa 2e             	cmp    dl,0x2e
c001277a:	75 56                	jne    c00127d2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c001277c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012780:	74 19                	je     c001279b <standardiseFiles(char*, char const*, char const*)+0x107>
c0012782:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012787:	74 53                	je     c00127dc <standardiseFiles(char*, char const*, char const*)+0x148>
c0012789:	89 f9                	mov    ecx,edi
c001278b:	41                   	inc    ecx
c001278c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001278f:	80 fa 2f             	cmp    dl,0x2f
c0012792:	74 f7                	je     c001278b <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012794:	80 fa 5c             	cmp    dl,0x5c
c0012797:	74 f2                	je     c001278b <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012799:	eb d1                	jmp    c001276c <standardiseFiles(char*, char const*, char const*)+0xd8>
c001279b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00127a0:	74 3a                	je     c00127dc <standardiseFiles(char*, char const*, char const*)+0x148>
c00127a2:	83 f8 03             	cmp    eax,0x3
c00127a5:	74 c5                	je     c001276c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127a7:	41                   	inc    ecx
c00127a8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00127ab:	80 fa 2f             	cmp    dl,0x2f
c00127ae:	74 f7                	je     c00127a7 <standardiseFiles(char*, char const*, char const*)+0x113>
c00127b0:	80 fa 5c             	cmp    dl,0x5c
c00127b3:	74 f2                	je     c00127a7 <standardiseFiles(char*, char const*, char const*)+0x113>
c00127b5:	48                   	dec    eax
c00127b6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00127ba:	75 06                	jne    c00127c2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00127bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00127c0:	eb f3                	jmp    c00127b5 <standardiseFiles(char*, char const*, char const*)+0x121>
c00127c2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00127c6:	74 07                	je     c00127cf <standardiseFiles(char*, char const*, char const*)+0x13b>
c00127c8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00127cc:	48                   	dec    eax
c00127cd:	eb f3                	jmp    c00127c2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00127cf:	40                   	inc    eax
c00127d0:	eb 9a                	jmp    c001276c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127d2:	80 fa 2f             	cmp    dl,0x2f
c00127d5:	74 95                	je     c001276c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127d7:	80 fa 5c             	cmp    dl,0x5c
c00127da:	74 90                	je     c001276c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127dc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00127df:	40                   	inc    eax
c00127e0:	eb 8a                	jmp    c001276c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00127e2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00127e6:	83 ec 0c             	sub    esp,0xc
c00127e9:	53                   	push   ebx
c00127ea:	e8 12 df fe ff       	call   c0000701 <strlen>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00127f7:	75 26                	jne    c001281f <standardiseFiles(char*, char const*, char const*)+0x18b>
c00127f9:	83 ec 0c             	sub    esp,0xc
c00127fc:	53                   	push   ebx
c00127fd:	e8 ff de fe ff       	call   c0000701 <strlen>
c0012802:	83 c4 10             	add    esp,0x10
c0012805:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001280a:	74 26                	je     c0012832 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001280c:	83 ec 0c             	sub    esp,0xc
c001280f:	53                   	push   ebx
c0012810:	e8 ec de fe ff       	call   c0000701 <strlen>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001281d:	eb c7                	jmp    c00127e6 <standardiseFiles(char*, char const*, char const*)+0x152>
c001281f:	83 ec 0c             	sub    esp,0xc
c0012822:	53                   	push   ebx
c0012823:	e8 d9 de fe ff       	call   c0000701 <strlen>
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012830:	74 c7                	je     c00127f9 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012832:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012838:	5b                   	pop    ebx
c0012839:	5e                   	pop    esi
c001283a:	5f                   	pop    edi
c001283b:	5d                   	pop    ebp
c001283c:	c3                   	ret    
c001283d:	90                   	nop

c001283e <File::File(char const*, Process*)>:
c001283e:	83 ec 0c             	sub    esp,0xc
c0012841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012845:	83 ec 08             	sub    esp,0x8
c0012848:	6a 00                	push   0x0
c001284a:	50                   	push   eax
c001284b:	e8 ec e7 ff ff       	call   c001103c <UnixFile::UnixFile(int)>
c0012850:	83 c4 10             	add    esp,0x10
c0012853:	ba 00 98 03 c0       	mov    edx,0xc0039800
c0012858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001285c:	89 10                	mov    DWORD PTR [eax],edx
c001285e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012862:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286c:	83 c0 0d             	add    eax,0xd
c001286f:	83 ec 04             	sub    esp,0x4
c0012872:	52                   	push   edx
c0012873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012877:	50                   	push   eax
c0012878:	e8 17 fe ff ff       	call   c0012694 <standardiseFiles(char*, char const*, char const*)>
c001287d:	83 c4 10             	add    esp,0x10
c0012880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012884:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012887:	8d 50 bf             	lea    edx,[eax-0x41]
c001288a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001288e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012898:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001289c:	90                   	nop
c001289d:	83 c4 0c             	add    esp,0xc
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <File::open(FileOpenMode)>:
c00128a2:	53                   	push   ebx
c00128a3:	b8 0b 00 00 00       	mov    eax,0xb
c00128a8:	83 ec 08             	sub    esp,0x8
c00128ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128af:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00128b6:	80 fa 19             	cmp    dl,0x19
c00128b9:	77 40                	ja     c00128fb <File::open(FileOpenMode)+0x59>
c00128bb:	8b 14 95 60 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3da0]
c00128c2:	85 d2                	test   edx,edx
c00128c4:	74 35                	je     c00128fb <File::open(FileOpenMode)+0x59>
c00128c6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128cc:	85 d2                	test   edx,edx
c00128ce:	74 2b                	je     c00128fb <File::open(FileOpenMode)+0x59>
c00128d0:	b8 06 00 00 00       	mov    eax,0x6
c00128d5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00128d9:	75 20                	jne    c00128fb <File::open(FileOpenMode)+0x59>
c00128db:	8b 02                	mov    eax,DWORD PTR [edx]
c00128dd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00128e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128e7:	51                   	push   ecx
c00128e8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00128eb:	51                   	push   ecx
c00128ec:	52                   	push   edx
c00128ed:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	85 c0                	test   eax,eax
c00128f5:	75 04                	jne    c00128fb <File::open(FileOpenMode)+0x59>
c00128f7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00128fb:	83 c4 08             	add    esp,0x8
c00128fe:	5b                   	pop    ebx
c00128ff:	c3                   	ret    

c0012900 <File::close()>:
c0012900:	53                   	push   ebx
c0012901:	b8 0b 00 00 00       	mov    eax,0xb
c0012906:	83 ec 08             	sub    esp,0x8
c0012909:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001290d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012914:	80 fa 19             	cmp    dl,0x19
c0012917:	77 41                	ja     c001295a <File::close()+0x5a>
c0012919:	8b 1c 95 60 c2 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3da0]
c0012920:	85 db                	test   ebx,ebx
c0012922:	74 36                	je     c001295a <File::close()+0x5a>
c0012924:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001292b:	74 2d                	je     c001295a <File::close()+0x5a>
c001292d:	b8 05 00 00 00       	mov    eax,0x5
c0012932:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012936:	74 22                	je     c001295a <File::close()+0x5a>
c0012938:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001293c:	8b 04 95 60 c2 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3da0]
c0012943:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012949:	53                   	push   ebx
c001294a:	53                   	push   ebx
c001294b:	8b 10                	mov    edx,DWORD PTR [eax]
c001294d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012953:	50                   	push   eax
c0012954:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	83 c4 08             	add    esp,0x8
c001295d:	5b                   	pop    ebx
c001295e:	c3                   	ret    
c001295f:	90                   	nop

c0012960 <File::seek(unsigned long long)>:
c0012960:	56                   	push   esi
c0012961:	53                   	push   ebx
c0012962:	b8 0b 00 00 00       	mov    eax,0xb
c0012967:	51                   	push   ecx
c0012968:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001296c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012970:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012977:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001297b:	80 fa 19             	cmp    dl,0x19
c001297e:	77 31                	ja     c00129b1 <File::seek(unsigned long long)+0x51>
c0012980:	8b 14 95 60 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3da0]
c0012987:	85 d2                	test   edx,edx
c0012989:	74 26                	je     c00129b1 <File::seek(unsigned long long)+0x51>
c001298b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012991:	85 d2                	test   edx,edx
c0012993:	74 1c                	je     c00129b1 <File::seek(unsigned long long)+0x51>
c0012995:	b8 05 00 00 00       	mov    eax,0x5
c001299a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001299e:	74 11                	je     c00129b1 <File::seek(unsigned long long)+0x51>
c00129a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00129a2:	53                   	push   ebx
c00129a3:	51                   	push   ecx
c00129a4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00129aa:	52                   	push   edx
c00129ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	5a                   	pop    edx
c00129b2:	5b                   	pop    ebx
c00129b3:	5e                   	pop    esi
c00129b4:	c3                   	ret    
c00129b5:	90                   	nop

c00129b6 <File::tell(unsigned long long*)>:
c00129b6:	83 ec 0c             	sub    esp,0xc
c00129b9:	b8 0b 00 00 00       	mov    eax,0xb
c00129be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00129c2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00129c9:	80 fa 19             	cmp    dl,0x19
c00129cc:	77 34                	ja     c0012a02 <File::tell(unsigned long long*)+0x4c>
c00129ce:	8b 14 95 60 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3da0]
c00129d5:	85 d2                	test   edx,edx
c00129d7:	74 29                	je     c0012a02 <File::tell(unsigned long long*)+0x4c>
c00129d9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00129df:	85 d2                	test   edx,edx
c00129e1:	74 1f                	je     c0012a02 <File::tell(unsigned long long*)+0x4c>
c00129e3:	b8 05 00 00 00       	mov    eax,0x5
c00129e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00129ec:	74 14                	je     c0012a02 <File::tell(unsigned long long*)+0x4c>
c00129ee:	50                   	push   eax
c00129ef:	8b 02                	mov    eax,DWORD PTR [edx]
c00129f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00129fb:	52                   	push   edx
c00129fc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	83 c4 0c             	add    esp,0xc
c0012a05:	c3                   	ret    

c0012a06 <File::rewind()>:
c0012a06:	83 ec 10             	sub    esp,0x10
c0012a09:	6a 00                	push   0x0
c0012a0b:	6a 00                	push   0x0
c0012a0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a11:	e8 4a ff ff ff       	call   c0012960 <File::seek(unsigned long long)>
c0012a16:	83 c4 1c             	add    esp,0x1c
c0012a19:	c3                   	ret    

c0012a1a <File::unlink()>:
c0012a1a:	83 ec 0c             	sub    esp,0xc
c0012a1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012a22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a2d:	80 f9 19             	cmp    cl,0x19
c0012a30:	77 2f                	ja     c0012a61 <File::unlink()+0x47>
c0012a32:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012a39:	85 c9                	test   ecx,ecx
c0012a3b:	74 24                	je     c0012a61 <File::unlink()+0x47>
c0012a3d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a43:	85 c9                	test   ecx,ecx
c0012a45:	74 1a                	je     c0012a61 <File::unlink()+0x47>
c0012a47:	b8 06 00 00 00       	mov    eax,0x6
c0012a4c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a50:	75 0f                	jne    c0012a61 <File::unlink()+0x47>
c0012a52:	83 c2 0d             	add    edx,0xd
c0012a55:	50                   	push   eax
c0012a56:	50                   	push   eax
c0012a57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a59:	52                   	push   edx
c0012a5a:	51                   	push   ecx
c0012a5b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012a5e:	83 c4 10             	add    esp,0x10
c0012a61:	83 c4 0c             	add    esp,0xc
c0012a64:	c3                   	ret    
c0012a65:	90                   	nop

c0012a66 <File::rename(char const*)>:
c0012a66:	83 ec 0c             	sub    esp,0xc
c0012a69:	b8 0b 00 00 00       	mov    eax,0xb
c0012a6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a79:	80 f9 19             	cmp    cl,0x19
c0012a7c:	77 32                	ja     c0012ab0 <File::rename(char const*)+0x4a>
c0012a7e:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012a85:	85 c9                	test   ecx,ecx
c0012a87:	74 27                	je     c0012ab0 <File::rename(char const*)+0x4a>
c0012a89:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a8f:	85 c9                	test   ecx,ecx
c0012a91:	74 1d                	je     c0012ab0 <File::rename(char const*)+0x4a>
c0012a93:	b8 06 00 00 00       	mov    eax,0x6
c0012a98:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a9c:	75 12                	jne    c0012ab0 <File::rename(char const*)+0x4a>
c0012a9e:	83 c2 0d             	add    edx,0xd
c0012aa1:	50                   	push   eax
c0012aa2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012aa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012aa8:	52                   	push   edx
c0012aa9:	51                   	push   ecx
c0012aaa:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	83 c4 0c             	add    esp,0xc
c0012ab3:	c3                   	ret    

c0012ab4 <File::chfatattr(unsigned char, unsigned char)>:
c0012ab4:	57                   	push   edi
c0012ab5:	b8 0b 00 00 00       	mov    eax,0xb
c0012aba:	56                   	push   esi
c0012abb:	53                   	push   ebx
c0012abc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ac0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012ac4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012acb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012acf:	80 f9 19             	cmp    cl,0x19
c0012ad2:	77 37                	ja     c0012b0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ad4:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012adb:	85 c9                	test   ecx,ecx
c0012add:	74 2c                	je     c0012b0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012adf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ae5:	85 c9                	test   ecx,ecx
c0012ae7:	74 22                	je     c0012b0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ae9:	b8 06 00 00 00       	mov    eax,0x6
c0012aee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012af2:	75 17                	jne    c0012b0b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012af4:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012af6:	89 f0                	mov    eax,esi
c0012af8:	83 c2 0d             	add    edx,0xd
c0012afb:	0f b6 f0             	movzx  esi,al
c0012afe:	0f b6 db             	movzx  ebx,bl
c0012b01:	56                   	push   esi
c0012b02:	53                   	push   ebx
c0012b03:	52                   	push   edx
c0012b04:	51                   	push   ecx
c0012b05:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012b08:	83 c4 10             	add    esp,0x10
c0012b0b:	5b                   	pop    ebx
c0012b0c:	5e                   	pop    esi
c0012b0d:	5f                   	pop    edi
c0012b0e:	c3                   	ret    
c0012b0f:	90                   	nop

c0012b10 <File::exists()>:
c0012b10:	83 ec 0c             	sub    esp,0xc
c0012b13:	31 c0                	xor    eax,eax
c0012b15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b19:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b20:	80 f9 19             	cmp    cl,0x19
c0012b23:	77 24                	ja     c0012b49 <File::exists()+0x39>
c0012b25:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012b2c:	85 c9                	test   ecx,ecx
c0012b2e:	74 19                	je     c0012b49 <File::exists()+0x39>
c0012b30:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b36:	85 c9                	test   ecx,ecx
c0012b38:	74 0f                	je     c0012b49 <File::exists()+0x39>
c0012b3a:	83 c2 0d             	add    edx,0xd
c0012b3d:	50                   	push   eax
c0012b3e:	50                   	push   eax
c0012b3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b41:	52                   	push   edx
c0012b42:	51                   	push   ecx
c0012b43:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	83 c4 0c             	add    esp,0xc
c0012b4c:	c3                   	ret    
c0012b4d:	90                   	nop

c0012b4e <File::stat(unsigned long long*, bool*)>:
c0012b4e:	56                   	push   esi
c0012b4f:	53                   	push   ebx
c0012b50:	50                   	push   eax
c0012b51:	b8 0b 00 00 00       	mov    eax,0xb
c0012b56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b5a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b5e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b65:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012b69:	80 f9 19             	cmp    cl,0x19
c0012b6c:	77 3d                	ja     c0012bab <File::stat(unsigned long long*, bool*)+0x5d>
c0012b6e:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012b75:	85 c9                	test   ecx,ecx
c0012b77:	74 32                	je     c0012bab <File::stat(unsigned long long*, bool*)+0x5d>
c0012b79:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b7f:	85 c9                	test   ecx,ecx
c0012b81:	74 28                	je     c0012bab <File::stat(unsigned long long*, bool*)+0x5d>
c0012b83:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b85:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b89:	74 13                	je     c0012b9e <File::stat(unsigned long long*, bool*)+0x50>
c0012b8b:	83 ec 04             	sub    esp,0x4
c0012b8e:	56                   	push   esi
c0012b8f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012b95:	51                   	push   ecx
c0012b96:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012b99:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012b9c:	eb 0a                	jmp    c0012ba8 <File::stat(unsigned long long*, bool*)+0x5a>
c0012b9e:	53                   	push   ebx
c0012b9f:	83 c2 0d             	add    edx,0xd
c0012ba2:	56                   	push   esi
c0012ba3:	52                   	push   edx
c0012ba4:	51                   	push   ecx
c0012ba5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	5a                   	pop    edx
c0012bac:	5b                   	pop    ebx
c0012bad:	5e                   	pop    esi
c0012bae:	c3                   	ret    

c0012baf <getcwd(Process*, char*, int)>:
c0012baf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bb3:	31 c0                	xor    eax,eax
c0012bb5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012bb8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012bbc:	7d 15                	jge    c0012bd3 <getcwd(Process*, char*, int)+0x24>
c0012bbe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bc2:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012bc9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012bcc:	84 c9                	test   cl,cl
c0012bce:	74 06                	je     c0012bd6 <getcwd(Process*, char*, int)+0x27>
c0012bd0:	40                   	inc    eax
c0012bd1:	eb e2                	jmp    c0012bb5 <getcwd(Process*, char*, int)+0x6>
c0012bd3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012bd6:	31 c0                	xor    eax,eax
c0012bd8:	c3                   	ret    

c0012bd9 <setcwd(Process*, char*)>:
c0012bd9:	55                   	push   ebp
c0012bda:	57                   	push   edi
c0012bdb:	56                   	push   esi
c0012bdc:	53                   	push   ebx
c0012bdd:	81 ec 20 02 00 00    	sub    esp,0x220
c0012be3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012bea:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012bf0:	57                   	push   edi
c0012bf1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012bf8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012bfc:	56                   	push   esi
c0012bfd:	e8 92 fa ff ff       	call   c0012694 <standardiseFiles(char*, char const*, char const*)>
c0012c02:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c05:	e8 f7 da fe ff       	call   c0000701 <strlen>
c0012c0a:	83 c4 10             	add    esp,0x10
c0012c0d:	83 f8 02             	cmp    eax,0x2
c0012c10:	77 17                	ja     c0012c29 <setcwd(Process*, char*)+0x50>
c0012c12:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012c17:	83 e8 41             	sub    eax,0x41
c0012c1a:	83 f8 19             	cmp    eax,0x19
c0012c1d:	76 24                	jbe    c0012c43 <setcwd(Process*, char*)+0x6a>
c0012c1f:	b8 03 00 00 00       	mov    eax,0x3
c0012c24:	e9 cb 00 00 00       	jmp    c0012cf4 <setcwd(Process*, char*)+0x11b>
c0012c29:	83 ec 0c             	sub    esp,0xc
c0012c2c:	56                   	push   esi
c0012c2d:	e8 cf da fe ff       	call   c0000701 <strlen>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	83 f8 03             	cmp    eax,0x3
c0012c38:	75 33                	jne    c0012c6d <setcwd(Process*, char*)+0x94>
c0012c3a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012c3f:	75 2c                	jne    c0012c6d <setcwd(Process*, char*)+0x94>
c0012c41:	eb cf                	jmp    c0012c12 <setcwd(Process*, char*)+0x39>
c0012c43:	8b 14 85 60 c2 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3da0]
c0012c4a:	b8 05 00 00 00       	mov    eax,0x5
c0012c4f:	85 d2                	test   edx,edx
c0012c51:	0f 84 9d 00 00 00    	je     c0012cf4 <setcwd(Process*, char*)+0x11b>
c0012c57:	b8 06 00 00 00       	mov    eax,0x6
c0012c5c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012c63:	0f 84 8b 00 00 00    	je     c0012cf4 <setcwd(Process*, char*)+0x11b>
c0012c69:	51                   	push   ecx
c0012c6a:	51                   	push   ecx
c0012c6b:	eb 7b                	jmp    c0012ce8 <setcwd(Process*, char*)+0x10f>
c0012c6d:	83 ec 0c             	sub    esp,0xc
c0012c70:	68 14 01 00 00       	push   0x114
c0012c75:	e8 96 f7 ff ff       	call   c0012410 <operator new(unsigned long)>
c0012c7a:	83 c4 0c             	add    esp,0xc
c0012c7d:	89 c3                	mov    ebx,eax
c0012c7f:	55                   	push   ebp
c0012c80:	56                   	push   esi
c0012c81:	50                   	push   eax
c0012c82:	e8 b7 fb ff ff       	call   c001283e <File::File(char const*, Process*)>
c0012c87:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012c8c:	83 c4 0c             	add    esp,0xc
c0012c8f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012c93:	50                   	push   eax
c0012c94:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c98:	50                   	push   eax
c0012c99:	53                   	push   ebx
c0012c9a:	e8 af fe ff ff       	call   c0012b4e <File::stat(unsigned long long*, bool*)>
c0012c9f:	83 c4 10             	add    esp,0x10
c0012ca2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ca4:	83 f8 02             	cmp    eax,0x2
c0012ca7:	75 09                	jne    c0012cb2 <setcwd(Process*, char*)+0xd9>
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	53                   	push   ebx
c0012cad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012cb0:	eb 0d                	jmp    c0012cbf <setcwd(Process*, char*)+0xe6>
c0012cb2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012cb5:	85 c0                	test   eax,eax
c0012cb7:	74 10                	je     c0012cc9 <setcwd(Process*, char*)+0xf0>
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	53                   	push   ebx
c0012cbd:	ff d2                	call   edx
c0012cbf:	83 c4 10             	add    esp,0x10
c0012cc2:	b8 01 00 00 00       	mov    eax,0x1
c0012cc7:	eb 2b                	jmp    c0012cf4 <setcwd(Process*, char*)+0x11b>
c0012cc9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012cce:	75 10                	jne    c0012ce0 <setcwd(Process*, char*)+0x107>
c0012cd0:	83 ec 0c             	sub    esp,0xc
c0012cd3:	53                   	push   ebx
c0012cd4:	ff d2                	call   edx
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	b8 02 00 00 00       	mov    eax,0x2
c0012cde:	eb 14                	jmp    c0012cf4 <setcwd(Process*, char*)+0x11b>
c0012ce0:	83 ec 0c             	sub    esp,0xc
c0012ce3:	53                   	push   ebx
c0012ce4:	ff d2                	call   edx
c0012ce6:	58                   	pop    eax
c0012ce7:	5a                   	pop    edx
c0012ce8:	56                   	push   esi
c0012ce9:	57                   	push   edi
c0012cea:	e8 05 db fe ff       	call   c00007f4 <strcpy>
c0012cef:	83 c4 10             	add    esp,0x10
c0012cf2:	31 c0                	xor    eax,eax
c0012cf4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012cfa:	5b                   	pop    ebx
c0012cfb:	5e                   	pop    esi
c0012cfc:	5f                   	pop    edi
c0012cfd:	5d                   	pop    ebp
c0012cfe:	c3                   	ret    
c0012cff:	90                   	nop

c0012d00 <Directory::Directory(char const*, Process*)>:
c0012d00:	83 ec 0c             	sub    esp,0xc
c0012d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d07:	83 ec 08             	sub    esp,0x8
c0012d0a:	6a 00                	push   0x0
c0012d0c:	50                   	push   eax
c0012d0d:	e8 2a e3 ff ff       	call   c001103c <UnixFile::UnixFile(int)>
c0012d12:	83 c4 10             	add    esp,0x10
c0012d15:	ba 1c 98 03 c0       	mov    edx,0xc003981c
c0012d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1e:	89 10                	mov    DWORD PTR [eax],edx
c0012d20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d24:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2e:	83 c0 0d             	add    eax,0xd
c0012d31:	83 ec 04             	sub    esp,0x4
c0012d34:	52                   	push   edx
c0012d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d39:	50                   	push   eax
c0012d3a:	e8 55 f9 ff ff       	call   c0012694 <standardiseFiles(char*, char const*, char const*)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d46:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d49:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d50:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d5a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d5e:	90                   	nop
c0012d5f:	83 c4 0c             	add    esp,0xc
c0012d62:	c3                   	ret    
c0012d63:	90                   	nop

c0012d64 <Directory::open()>:
c0012d64:	53                   	push   ebx
c0012d65:	b8 0b 00 00 00       	mov    eax,0xb
c0012d6a:	83 ec 08             	sub    esp,0x8
c0012d6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d71:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d78:	80 fa 19             	cmp    dl,0x19
c0012d7b:	77 3d                	ja     c0012dba <Directory::open()+0x56>
c0012d7d:	8b 14 95 60 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3da0]
c0012d84:	85 d2                	test   edx,edx
c0012d86:	74 32                	je     c0012dba <Directory::open()+0x56>
c0012d88:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d8e:	85 d2                	test   edx,edx
c0012d90:	74 28                	je     c0012dba <Directory::open()+0x56>
c0012d92:	b8 06 00 00 00       	mov    eax,0x6
c0012d97:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d9b:	75 1d                	jne    c0012dba <Directory::open()+0x56>
c0012d9d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012da3:	50                   	push   eax
c0012da4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012da6:	51                   	push   ecx
c0012da7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012daa:	51                   	push   ecx
c0012dab:	52                   	push   edx
c0012dac:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	85 c0                	test   eax,eax
c0012db4:	75 04                	jne    c0012dba <Directory::open()+0x56>
c0012db6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012dba:	83 c4 08             	add    esp,0x8
c0012dbd:	5b                   	pop    ebx
c0012dbe:	c3                   	ret    
c0012dbf:	90                   	nop

c0012dc0 <Directory::close()>:
c0012dc0:	53                   	push   ebx
c0012dc1:	b8 0b 00 00 00       	mov    eax,0xb
c0012dc6:	83 ec 08             	sub    esp,0x8
c0012dc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dcd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dd4:	80 fa 19             	cmp    dl,0x19
c0012dd7:	77 41                	ja     c0012e1a <Directory::close()+0x5a>
c0012dd9:	8b 1c 95 60 c2 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3da0]
c0012de0:	85 db                	test   ebx,ebx
c0012de2:	74 36                	je     c0012e1a <Directory::close()+0x5a>
c0012de4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012deb:	74 2d                	je     c0012e1a <Directory::close()+0x5a>
c0012ded:	b8 05 00 00 00       	mov    eax,0x5
c0012df2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012df6:	74 22                	je     c0012e1a <Directory::close()+0x5a>
c0012df8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dfc:	8b 04 95 60 c2 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3da0]
c0012e03:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012e09:	53                   	push   ebx
c0012e0a:	53                   	push   ebx
c0012e0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e0d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e13:	50                   	push   eax
c0012e14:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012e17:	83 c4 10             	add    esp,0x10
c0012e1a:	83 c4 08             	add    esp,0x8
c0012e1d:	5b                   	pop    ebx
c0012e1e:	c3                   	ret    
c0012e1f:	90                   	nop

c0012e20 <Directory::unlink()>:
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	b8 0b 00 00 00       	mov    eax,0xb
c0012e28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e2c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e33:	80 f9 19             	cmp    cl,0x19
c0012e36:	77 2f                	ja     c0012e67 <Directory::unlink()+0x47>
c0012e38:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012e3f:	85 c9                	test   ecx,ecx
c0012e41:	74 24                	je     c0012e67 <Directory::unlink()+0x47>
c0012e43:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e49:	85 c9                	test   ecx,ecx
c0012e4b:	74 1a                	je     c0012e67 <Directory::unlink()+0x47>
c0012e4d:	b8 06 00 00 00       	mov    eax,0x6
c0012e52:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e56:	75 0f                	jne    c0012e67 <Directory::unlink()+0x47>
c0012e58:	83 c2 0d             	add    edx,0xd
c0012e5b:	50                   	push   eax
c0012e5c:	50                   	push   eax
c0012e5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e5f:	52                   	push   edx
c0012e60:	51                   	push   ecx
c0012e61:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e64:	83 c4 10             	add    esp,0x10
c0012e67:	83 c4 0c             	add    esp,0xc
c0012e6a:	c3                   	ret    
c0012e6b:	90                   	nop

c0012e6c <Directory::rename(char const*)>:
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e78:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e7f:	80 f9 19             	cmp    cl,0x19
c0012e82:	77 32                	ja     c0012eb6 <Directory::rename(char const*)+0x4a>
c0012e84:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012e8b:	85 c9                	test   ecx,ecx
c0012e8d:	74 27                	je     c0012eb6 <Directory::rename(char const*)+0x4a>
c0012e8f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e95:	85 c9                	test   ecx,ecx
c0012e97:	74 1d                	je     c0012eb6 <Directory::rename(char const*)+0x4a>
c0012e99:	b8 06 00 00 00       	mov    eax,0x6
c0012e9e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ea2:	75 12                	jne    c0012eb6 <Directory::rename(char const*)+0x4a>
c0012ea4:	83 c2 0d             	add    edx,0xd
c0012ea7:	50                   	push   eax
c0012ea8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012eae:	52                   	push   edx
c0012eaf:	51                   	push   ecx
c0012eb0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012eb3:	83 c4 10             	add    esp,0x10
c0012eb6:	83 c4 0c             	add    esp,0xc
c0012eb9:	c3                   	ret    

c0012eba <Directory::exists()>:
c0012eba:	83 ec 0c             	sub    esp,0xc
c0012ebd:	31 c0                	xor    eax,eax
c0012ebf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ec3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012eca:	80 f9 19             	cmp    cl,0x19
c0012ecd:	77 24                	ja     c0012ef3 <Directory::exists()+0x39>
c0012ecf:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012ed6:	85 c9                	test   ecx,ecx
c0012ed8:	74 19                	je     c0012ef3 <Directory::exists()+0x39>
c0012eda:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ee0:	85 c9                	test   ecx,ecx
c0012ee2:	74 0f                	je     c0012ef3 <Directory::exists()+0x39>
c0012ee4:	83 c2 0d             	add    edx,0xd
c0012ee7:	50                   	push   eax
c0012ee8:	50                   	push   eax
c0012ee9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eeb:	52                   	push   edx
c0012eec:	51                   	push   ecx
c0012eed:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ef0:	83 c4 10             	add    esp,0x10
c0012ef3:	83 c4 0c             	add    esp,0xc
c0012ef6:	c3                   	ret    
c0012ef7:	90                   	nop

c0012ef8 <Directory::read(dirent*)>:
c0012ef8:	83 ec 1c             	sub    esp,0x1c
c0012efb:	b8 0b 00 00 00       	mov    eax,0xb
c0012f00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012f04:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f0b:	80 fa 19             	cmp    dl,0x19
c0012f0e:	77 30                	ja     c0012f40 <Directory::read(dirent*)+0x48>
c0012f10:	8b 14 95 60 c2 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3da0]
c0012f17:	85 d2                	test   edx,edx
c0012f19:	74 25                	je     c0012f40 <Directory::read(dirent*)+0x48>
c0012f1b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f22:	74 1c                	je     c0012f40 <Directory::read(dirent*)+0x48>
c0012f24:	83 ec 0c             	sub    esp,0xc
c0012f27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f29:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012f2d:	52                   	push   edx
c0012f2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012f32:	6a 00                	push   0x0
c0012f34:	68 10 01 00 00       	push   0x110
c0012f39:	51                   	push   ecx
c0012f3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f3d:	83 c4 20             	add    esp,0x20
c0012f40:	83 c4 1c             	add    esp,0x1c
c0012f43:	c3                   	ret    

c0012f44 <Directory::create()>:
c0012f44:	83 ec 0c             	sub    esp,0xc
c0012f47:	b8 0b 00 00 00       	mov    eax,0xb
c0012f4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f57:	80 f9 19             	cmp    cl,0x19
c0012f5a:	77 2f                	ja     c0012f8b <Directory::create()+0x47>
c0012f5c:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c0012f63:	85 c9                	test   ecx,ecx
c0012f65:	74 24                	je     c0012f8b <Directory::create()+0x47>
c0012f67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f6d:	85 c9                	test   ecx,ecx
c0012f6f:	74 1a                	je     c0012f8b <Directory::create()+0x47>
c0012f71:	b8 06 00 00 00       	mov    eax,0x6
c0012f76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f7a:	75 0f                	jne    c0012f8b <Directory::create()+0x47>
c0012f7c:	83 c2 0d             	add    edx,0xd
c0012f7f:	50                   	push   eax
c0012f80:	50                   	push   eax
c0012f81:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f83:	52                   	push   edx
c0012f84:	51                   	push   ecx
c0012f85:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	83 c4 0c             	add    esp,0xc
c0012f8e:	c3                   	ret    
c0012f8f:	90                   	nop

c0012f90 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012f90:	b8 0a 00 00 00       	mov    eax,0xa
c0012f95:	c3                   	ret    

c0012f96 <Bus::Bus(char const*)>:
c0012f96:	83 ec 0c             	sub    esp,0xc
c0012f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9d:	83 ec 08             	sub    esp,0x8
c0012fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa4:	50                   	push   eax
c0012fa5:	e8 60 09 00 00       	call   c001390a <Device::Device(char const*)>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	ba 38 98 03 c0       	mov    edx,0xc0039838
c0012fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb6:	89 10                	mov    DWORD PTR [eax],edx
c0012fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fbc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012fc6:	90                   	nop
c0012fc7:	83 c4 0c             	add    esp,0xc
c0012fca:	c3                   	ret    
c0012fcb:	90                   	nop

c0012fcc <Bus::~Bus()>:
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	ba 38 98 03 c0       	mov    edx,0xc0039838
c0012fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fd8:	89 10                	mov    DWORD PTR [eax],edx
c0012fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fde:	83 ec 0c             	sub    esp,0xc
c0012fe1:	50                   	push   eax
c0012fe2:	e8 d5 05 00 00       	call   c00135bc <Device::~Device()>
c0012fe7:	83 c4 10             	add    esp,0x10
c0012fea:	90                   	nop
c0012feb:	83 c4 0c             	add    esp,0xc
c0012fee:	c3                   	ret    
c0012fef:	90                   	nop

c0012ff0 <Bus::~Bus()>:
c0012ff0:	83 ec 0c             	sub    esp,0xc
c0012ff3:	83 ec 0c             	sub    esp,0xc
c0012ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ffa:	e8 cd ff ff ff       	call   c0012fcc <Bus::~Bus()>
c0012fff:	83 c4 10             	add    esp,0x10
c0013002:	83 ec 08             	sub    esp,0x8
c0013005:	68 58 01 00 00       	push   0x158
c001300a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300e:	e8 0c f4 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	83 c4 0c             	add    esp,0xc
c0013019:	c3                   	ret    

c001301a <Buzzer::Buzzer(char const*)>:
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013021:	83 ec 08             	sub    esp,0x8
c0013024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013028:	50                   	push   eax
c0013029:	e8 dc 08 00 00       	call   c001390a <Device::Device(char const*)>
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	ba 64 98 03 c0       	mov    edx,0xc0039864
c0013036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303a:	89 10                	mov    DWORD PTR [eax],edx
c001303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013040:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013058:	90                   	nop
c0013059:	83 c4 0c             	add    esp,0xc
c001305c:	c3                   	ret    
c001305d:	90                   	nop

c001305e <Buzzer::~Buzzer()>:
c001305e:	83 ec 0c             	sub    esp,0xc
c0013061:	ba 64 98 03 c0       	mov    edx,0xc0039864
c0013066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306a:	89 10                	mov    DWORD PTR [eax],edx
c001306c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013070:	83 ec 0c             	sub    esp,0xc
c0013073:	50                   	push   eax
c0013074:	e8 43 05 00 00       	call   c00135bc <Device::~Device()>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	90                   	nop
c001307d:	83 c4 0c             	add    esp,0xc
c0013080:	c3                   	ret    
c0013081:	90                   	nop

c0013082 <Buzzer::~Buzzer()>:
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	83 ec 0c             	sub    esp,0xc
c0013088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001308c:	e8 cd ff ff ff       	call   c001305e <Buzzer::~Buzzer()>
c0013091:	83 c4 10             	add    esp,0x10
c0013094:	83 ec 08             	sub    esp,0x8
c0013097:	68 5c 01 00 00       	push   0x15c
c001309c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a0:	e8 7a f3 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	83 c4 0c             	add    esp,0xc
c00130ab:	c3                   	ret    

c00130ac <Buzzer::stop()>:
c00130ac:	83 ec 14             	sub    esp,0x14
c00130af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00130b5:	6a 00                	push   0x0
c00130b7:	50                   	push   eax
c00130b8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00130bb:	83 c4 1c             	add    esp,0x1c
c00130be:	c3                   	ret    

c00130bf <beepThread(void*)>:
c00130bf:	53                   	push   ebx
c00130c0:	83 ec 08             	sub    esp,0x8
c00130c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130c7:	e8 38 b2 ff ff       	call   c000e304 <unlockScheduler()>
c00130cc:	b8 40 42 0f 00       	mov    eax,0xf4240
c00130d1:	52                   	push   edx
c00130d2:	52                   	push   edx
c00130d3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00130d9:	52                   	push   edx
c00130da:	50                   	push   eax
c00130db:	e8 db b8 ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c00130e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130e3:	e8 c4 ff ff ff       	call   c00130ac <Buzzer::stop()>
c00130e8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00130f0:	83 c4 18             	add    esp,0x18
c00130f3:	5b                   	pop    ebx
c00130f4:	e9 08 b8 ff ff       	jmp    c000e901 <blockTask(TaskState)>
c00130f9:	90                   	nop

c00130fa <Buzzer::beep(int, int, bool)>:
c00130fa:	57                   	push   edi
c00130fb:	56                   	push   esi
c00130fc:	53                   	push   ebx
c00130fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013101:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013105:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013109:	52                   	push   edx
c001310a:	52                   	push   edx
c001310b:	8b 06                	mov    eax,DWORD PTR [esi]
c001310d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013111:	56                   	push   esi
c0013112:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	89 f8                	mov    eax,edi
c001311a:	84 c0                	test   al,al
c001311c:	74 1f                	je     c001313d <Buzzer::beep(int, int, bool)+0x43>
c001311e:	50                   	push   eax
c001311f:	50                   	push   eax
c0013120:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013126:	99                   	cdq    
c0013127:	52                   	push   edx
c0013128:	50                   	push   eax
c0013129:	e8 8d b8 ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c001312e:	83 c4 10             	add    esp,0x10
c0013131:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013135:	5b                   	pop    ebx
c0013136:	5e                   	pop    esi
c0013137:	5f                   	pop    edi
c0013138:	e9 6f ff ff ff       	jmp    c00130ac <Buzzer::stop()>
c001313d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013143:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0013148:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013150:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013154:	c7 44 24 14 bf 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc00130bf
c001315c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013160:	5b                   	pop    ebx
c0013161:	5e                   	pop    esi
c0013162:	5f                   	pop    edi
c0013163:	e9 c4 b2 ff ff       	jmp    c000e42c <Process::createThread(void (*)(void*), void*, int)>

c0013168 <loadClockSettings()>:
c0013168:	c7 05 cc bd 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003bdcc,0xa
c0013172:	c6 05 c9 bd 03 c0 00 	mov    BYTE PTR ds:0xc003bdc9,0x0
c0013179:	c6 05 c8 bd 03 c0 01 	mov    BYTE PTR ds:0xc003bdc8,0x1
c0013180:	c3                   	ret    
c0013181:	90                   	nop

c0013182 <Clock::Clock(char const*)>:
c0013182:	83 ec 0c             	sub    esp,0xc
c0013185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013189:	83 ec 08             	sub    esp,0x8
c001318c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013190:	50                   	push   eax
c0013191:	e8 74 07 00 00       	call   c001390a <Device::Device(char const*)>
c0013196:	83 c4 10             	add    esp,0x10
c0013199:	ba 94 98 03 c0       	mov    edx,0xc0039894
c001319e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a2:	89 10                	mov    DWORD PTR [eax],edx
c00131a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00131b2:	90                   	nop
c00131b3:	83 c4 0c             	add    esp,0xc
c00131b6:	c3                   	ret    
c00131b7:	90                   	nop

c00131b8 <Clock::~Clock()>:
c00131b8:	83 ec 0c             	sub    esp,0xc
c00131bb:	ba 94 98 03 c0       	mov    edx,0xc0039894
c00131c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c4:	89 10                	mov    DWORD PTR [eax],edx
c00131c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ca:	83 ec 0c             	sub    esp,0xc
c00131cd:	50                   	push   eax
c00131ce:	e8 e9 03 00 00       	call   c00135bc <Device::~Device()>
c00131d3:	83 c4 10             	add    esp,0x10
c00131d6:	90                   	nop
c00131d7:	83 c4 0c             	add    esp,0xc
c00131da:	c3                   	ret    
c00131db:	90                   	nop

c00131dc <Clock::~Clock()>:
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	83 ec 0c             	sub    esp,0xc
c00131e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e6:	e8 cd ff ff ff       	call   c00131b8 <Clock::~Clock()>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	83 ec 08             	sub    esp,0x8
c00131f1:	68 58 01 00 00       	push   0x158
c00131f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131fa:	e8 20 f2 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c00131ff:	83 c4 10             	add    esp,0x10
c0013202:	83 c4 0c             	add    esp,0xc
c0013205:	c3                   	ret    

c0013206 <Clock::timeInSecondsLocal()>:
c0013206:	53                   	push   ebx
c0013207:	83 ec 14             	sub    esp,0x14
c001320a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001320e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013210:	50                   	push   eax
c0013211:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013214:	0f b6 0d c8 bd 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bdc8
c001321b:	03 0d cc bd 03 c0    	add    ecx,DWORD PTR ds:0xc003bdcc
c0013221:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013227:	89 cb                	mov    ebx,ecx
c0013229:	c1 fb 1f             	sar    ebx,0x1f
c001322c:	01 c8                	add    eax,ecx
c001322e:	11 da                	adc    edx,ebx
c0013230:	83 c4 10             	add    esp,0x10
c0013233:	31 c9                	xor    ecx,ecx
c0013235:	80 3d c9 bd 03 c0 00 	cmp    BYTE PTR ds:0xc003bdc9,0x0
c001323c:	74 05                	je     c0013243 <Clock::timeInSecondsLocal()+0x3d>
c001323e:	b9 08 07 00 00       	mov    ecx,0x708
c0013243:	31 db                	xor    ebx,ebx
c0013245:	01 c8                	add    eax,ecx
c0013247:	11 da                	adc    edx,ebx
c0013249:	83 c4 08             	add    esp,0x8
c001324c:	5b                   	pop    ebx
c001324d:	c3                   	ret    

c001324e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001324e:	57                   	push   edi
c001324f:	56                   	push   esi
c0013250:	53                   	push   ebx
c0013251:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013255:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013259:	8b 01                	mov    eax,DWORD PTR [ecx]
c001325b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001325f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013262:	0f b6 05 c8 bd 03 c0 	movzx  eax,BYTE PTR ds:0xc003bdc8
c0013269:	03 05 cc bd 03 c0    	add    eax,DWORD PTR ds:0xc003bdcc
c001326f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013275:	99                   	cdq    
c0013276:	29 c6                	sub    esi,eax
c0013278:	19 d7                	sbb    edi,edx
c001327a:	89 f0                	mov    eax,esi
c001327c:	89 fa                	mov    edx,edi
c001327e:	31 f6                	xor    esi,esi
c0013280:	80 3d c9 bd 03 c0 00 	cmp    BYTE PTR ds:0xc003bdc9,0x0
c0013287:	74 05                	je     c001328e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013289:	be 08 07 00 00       	mov    esi,0x708
c001328e:	31 ff                	xor    edi,edi
c0013290:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013294:	29 f0                	sub    eax,esi
c0013296:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001329a:	19 fa                	sbb    edx,edi
c001329c:	89 d8                	mov    eax,ebx
c001329e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00132a2:	5b                   	pop    ebx
c00132a3:	5e                   	pop    esi
c00132a4:	5f                   	pop    edi
c00132a5:	ff e0                	jmp    eax

c00132a7 <datetimeToSeconds(datetime_t)>:
c00132a7:	55                   	push   ebp
c00132a8:	57                   	push   edi
c00132a9:	56                   	push   esi
c00132aa:	53                   	push   ebx
c00132ab:	83 ec 14             	sub    esp,0x14
c00132ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132b2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00132b6:	89 d3                	mov    ebx,edx
c00132b8:	0f b6 c6             	movzx  eax,dh
c00132bb:	c1 eb 10             	shr    ebx,0x10
c00132be:	48                   	dec    eax
c00132bf:	66 81 eb 6c 07       	sub    bx,0x76c
c00132c4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00132c8:	0f b6 f5             	movzx  esi,ch
c00132cb:	89 cf                	mov    edi,ecx
c00132cd:	6b f6 3c             	imul   esi,esi,0x3c
c00132d0:	c1 ef 10             	shr    edi,0x10
c00132d3:	0f b6 c9             	movzx  ecx,cl
c00132d6:	89 f8                	mov    eax,edi
c00132d8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00132de:	0f b6 f8             	movzx  edi,al
c00132e1:	0f b6 d2             	movzx  edx,dl
c00132e4:	01 fe                	add    esi,edi
c00132e6:	01 f1                	add    ecx,esi
c00132e8:	0f b7 f3             	movzx  esi,bx
c00132eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00132ef:	c1 f9 1f             	sar    ecx,0x1f
c00132f2:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00132f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00132fb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013300:	8b 0c 8d e0 98 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc6720]
c0013307:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001330b:	76 29                	jbe    c0013336 <datetimeToSeconds(datetime_t)+0x8f>
c001330d:	f6 c3 03             	test   bl,0x3
c0013310:	75 24                	jne    c0013336 <datetimeToSeconds(datetime_t)+0x8f>
c0013312:	31 d2                	xor    edx,edx
c0013314:	bf 64 00 00 00       	mov    edi,0x64
c0013319:	89 d8                	mov    eax,ebx
c001331b:	66 f7 f7             	div    di
c001331e:	66 85 d2             	test   dx,dx
c0013321:	75 12                	jne    c0013335 <datetimeToSeconds(datetime_t)+0x8e>
c0013323:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013329:	bf 90 01 00 00       	mov    edi,0x190
c001332e:	99                   	cdq    
c001332f:	f7 ff                	idiv   edi
c0013331:	85 d2                	test   edx,edx
c0013333:	75 01                	jne    c0013336 <datetimeToSeconds(datetime_t)+0x8f>
c0013335:	41                   	inc    ecx
c0013336:	66 83 fb 46          	cmp    bx,0x46
c001333a:	76 45                	jbe    c0013381 <datetimeToSeconds(datetime_t)+0xda>
c001333c:	bb 46 00 00 00       	mov    ebx,0x46
c0013341:	bf 64 00 00 00       	mov    edi,0x64
c0013346:	bd 90 01 00 00       	mov    ebp,0x190
c001334b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013350:	f6 c3 03             	test   bl,0x3
c0013353:	75 23                	jne    c0013378 <datetimeToSeconds(datetime_t)+0xd1>
c0013355:	89 d8                	mov    eax,ebx
c0013357:	99                   	cdq    
c0013358:	f7 ff                	idiv   edi
c001335a:	b8 6e 01 00 00       	mov    eax,0x16e
c001335f:	85 d2                	test   edx,edx
c0013361:	75 15                	jne    c0013378 <datetimeToSeconds(datetime_t)+0xd1>
c0013363:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013369:	99                   	cdq    
c001336a:	f7 fd                	idiv   ebp
c001336c:	83 fa 01             	cmp    edx,0x1
c001336f:	19 c0                	sbb    eax,eax
c0013371:	f7 d0                	not    eax
c0013373:	05 6e 01 00 00       	add    eax,0x16e
c0013378:	01 c1                	add    ecx,eax
c001337a:	43                   	inc    ebx
c001337b:	39 f3                	cmp    ebx,esi
c001337d:	7c cc                	jl     c001334b <datetimeToSeconds(datetime_t)+0xa4>
c001337f:	eb 35                	jmp    c00133b6 <datetimeToSeconds(datetime_t)+0x10f>
c0013381:	74 33                	je     c00133b6 <datetimeToSeconds(datetime_t)+0x10f>
c0013383:	b8 45 00 00 00       	mov    eax,0x45
c0013388:	89 c2                	mov    edx,eax
c001338a:	83 e2 03             	and    edx,0x3
c001338d:	39 f0                	cmp    eax,esi
c001338f:	7e 0f                	jle    c00133a0 <datetimeToSeconds(datetime_t)+0xf9>
c0013391:	83 fa 01             	cmp    edx,0x1
c0013394:	19 d2                	sbb    edx,edx
c0013396:	48                   	dec    eax
c0013397:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001339e:	eb e8                	jmp    c0013388 <datetimeToSeconds(datetime_t)+0xe1>
c00133a0:	b8 6d 01 00 00       	mov    eax,0x16d
c00133a5:	85 d2                	test   edx,edx
c00133a7:	75 0b                	jne    c00133b4 <datetimeToSeconds(datetime_t)+0x10d>
c00133a9:	66 83 fb 01          	cmp    bx,0x1
c00133ad:	19 c0                	sbb    eax,eax
c00133af:	05 6e 01 00 00       	add    eax,0x16e
c00133b4:	29 c1                	sub    ecx,eax
c00133b6:	b8 80 51 01 00       	mov    eax,0x15180
c00133bb:	f7 e9                	imul   ecx
c00133bd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00133c1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00133c5:	83 c4 14             	add    esp,0x14
c00133c8:	5b                   	pop    ebx
c00133c9:	5e                   	pop    esi
c00133ca:	5f                   	pop    edi
c00133cb:	5d                   	pop    ebp
c00133cc:	c3                   	ret    
c00133cd:	90                   	nop

c00133ce <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00133ce:	57                   	push   edi
c00133cf:	56                   	push   esi
c00133d0:	53                   	push   ebx
c00133d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133d5:	8b 06                	mov    eax,DWORD PTR [esi]
c00133d7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00133da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133e2:	e8 c0 fe ff ff       	call   c00132a7 <datetimeToSeconds(datetime_t)>
c00133e7:	59                   	pop    ecx
c00133e8:	0f b6 0d c8 bd 03 c0 	movzx  ecx,BYTE PTR ds:0xc003bdc8
c00133ef:	5b                   	pop    ebx
c00133f0:	03 0d cc bd 03 c0    	add    ecx,DWORD PTR ds:0xc003bdcc
c00133f6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00133fc:	89 cb                	mov    ebx,ecx
c00133fe:	c1 fb 1f             	sar    ebx,0x1f
c0013401:	29 c8                	sub    eax,ecx
c0013403:	19 da                	sbb    edx,ebx
c0013405:	31 c9                	xor    ecx,ecx
c0013407:	80 3d c9 bd 03 c0 00 	cmp    BYTE PTR ds:0xc003bdc9,0x0
c001340e:	74 05                	je     c0013415 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013410:	b9 08 07 00 00       	mov    ecx,0x708
c0013415:	31 db                	xor    ebx,ebx
c0013417:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001341b:	29 c8                	sub    eax,ecx
c001341d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013421:	19 da                	sbb    edx,ebx
c0013423:	89 f8                	mov    eax,edi
c0013425:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013429:	5b                   	pop    ebx
c001342a:	5e                   	pop    esi
c001342b:	5f                   	pop    edi
c001342c:	ff e0                	jmp    eax

c001342e <secondsToDatetime(unsigned long long)>:
c001342e:	55                   	push   ebp
c001342f:	57                   	push   edi
c0013430:	56                   	push   esi
c0013431:	53                   	push   ebx
c0013432:	83 ec 1c             	sub    esp,0x1c
c0013435:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013439:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001343d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013441:	6a 00                	push   0x0
c0013443:	68 80 51 01 00       	push   0x15180
c0013448:	55                   	push   ebp
c0013449:	57                   	push   edi
c001344a:	e8 2d b2 00 00       	call   c001e67c <__udivdi3>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013458:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001345c:	6a 00                	push   0x0
c001345e:	68 80 51 01 00       	push   0x15180
c0013463:	55                   	push   ebp
c0013464:	57                   	push   edi
c0013465:	bf 10 0e 00 00       	mov    edi,0xe10
c001346a:	e8 0d b3 00 00       	call   c001e77c <__umoddi3>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	99                   	cdq    
c0013473:	f7 ff                	idiv   edi
c0013475:	bf 3c 00 00 00       	mov    edi,0x3c
c001347a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001347d:	89 d0                	mov    eax,edx
c001347f:	99                   	cdq    
c0013480:	f7 ff                	idiv   edi
c0013482:	85 db                	test   ebx,ebx
c0013484:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013487:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001348a:	79 11                	jns    c001349d <secondsToDatetime(unsigned long long)+0x6f>
c001348c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013490:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013496:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001349b:	eb 07                	jmp    c00134a4 <secondsToDatetime(unsigned long long)+0x76>
c001349d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00134a2:	89 d8                	mov    eax,ebx
c00134a4:	bf b4 05 00 00       	mov    edi,0x5b4
c00134a9:	99                   	cdq    
c00134aa:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00134af:	f7 f9                	idiv   ecx
c00134b1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00134b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134ba:	31 d2                	xor    edx,edx
c00134bc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00134c4:	01 c3                	add    ebx,eax
c00134c6:	89 d8                	mov    eax,ebx
c00134c8:	f7 f1                	div    ecx
c00134ca:	31 d2                	xor    edx,edx
c00134cc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00134cf:	89 d8                	mov    eax,ebx
c00134d1:	f7 f7                	div    edi
c00134d3:	31 d2                	xor    edx,edx
c00134d5:	29 c1                	sub    ecx,eax
c00134d7:	89 d8                	mov    eax,ebx
c00134d9:	f7 f5                	div    ebp
c00134db:	bd 6d 01 00 00       	mov    ebp,0x16d
c00134e0:	29 c1                	sub    ecx,eax
c00134e2:	31 d2                	xor    edx,edx
c00134e4:	89 c8                	mov    eax,ecx
c00134e6:	f7 f5                	div    ebp
c00134e8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00134ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134f1:	31 d2                	xor    edx,edx
c00134f3:	89 c8                	mov    eax,ecx
c00134f5:	f7 f5                	div    ebp
c00134f7:	31 d2                	xor    edx,edx
c00134f9:	01 c3                	add    ebx,eax
c00134fb:	89 c8                	mov    eax,ecx
c00134fd:	f7 f7                	div    edi
c00134ff:	bf 99 00 00 00       	mov    edi,0x99
c0013504:	29 c3                	sub    ebx,eax
c0013506:	31 d2                	xor    edx,edx
c0013508:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013510:	29 c3                	sub    ebx,eax
c0013512:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013515:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013518:	bb 05 00 00 00       	mov    ebx,0x5
c001351d:	83 c1 02             	add    ecx,0x2
c0013520:	89 c8                	mov    eax,ecx
c0013522:	f7 f7                	div    edi
c0013524:	31 d2                	xor    edx,edx
c0013526:	89 c7                	mov    edi,eax
c0013528:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001352e:	83 c0 02             	add    eax,0x2
c0013531:	f7 f3                	div    ebx
c0013533:	89 eb                	mov    ebx,ebp
c0013535:	29 c3                	sub    ebx,eax
c0013537:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001353d:	88 1e                	mov    BYTE PTR [esi],bl
c001353f:	19 c0                	sbb    eax,eax
c0013541:	31 d2                	xor    edx,edx
c0013543:	83 e0 0c             	and    eax,0xc
c0013546:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001354a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013552:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013556:	83 f9 01             	cmp    ecx,0x1
c0013559:	0f 96 c2             	setbe  dl
c001355c:	41                   	inc    ecx
c001355d:	01 d0                	add    eax,edx
c001355f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013562:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013566:	83 c4 1c             	add    esp,0x1c
c0013569:	89 f0                	mov    eax,esi
c001356b:	5b                   	pop    ebx
c001356c:	5e                   	pop    esi
c001356d:	5f                   	pop    edi
c001356e:	5d                   	pop    ebp
c001356f:	c2 04 00             	ret    0x4

c0013572 <Clock::timeInDatetimeLocal()>:
c0013572:	53                   	push   ebx
c0013573:	83 ec 14             	sub    esp,0x14
c0013576:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001357a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001357e:	e8 83 fc ff ff       	call   c0013206 <Clock::timeInSecondsLocal()>
c0013583:	83 c4 0c             	add    esp,0xc
c0013586:	52                   	push   edx
c0013587:	50                   	push   eax
c0013588:	53                   	push   ebx
c0013589:	e8 a0 fe ff ff       	call   c001342e <secondsToDatetime(unsigned long long)>
c001358e:	89 d8                	mov    eax,ebx
c0013590:	83 c4 14             	add    esp,0x14
c0013593:	5b                   	pop    ebx
c0013594:	c2 04 00             	ret    0x4
c0013597:	90                   	nop

c0013598 <Device::hibernate()>:
c0013598:	c3                   	ret    
c0013599:	90                   	nop

c001359a <Device::wake()>:
c001359a:	c3                   	ret    
c001359b:	90                   	nop

c001359c <Device::detect()>:
c001359c:	c3                   	ret    
c001359d:	90                   	nop

c001359e <Device::disableLegacy()>:
c001359e:	c3                   	ret    
c001359f:	90                   	nop

c00135a0 <Device::powerSaving(PowerSavingLevel)>:
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop

c00135a2 <DriverlessDevice::close(int, int, void*)>:
c00135a2:	31 c0                	xor    eax,eax
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <DriverlessDevice::detect()>:
c00135a6:	c3                   	ret    
c00135a7:	90                   	nop

c00135a8 <DriverlessDevice::open(int, int, void*)>:
c00135a8:	83 ec 18             	sub    esp,0x18
c00135ab:	68 10 99 03 c0       	push   0xc0039910
c00135b0:	e8 c9 99 ff ff       	call   c000cf7e <panic(char const*)>
c00135b5:	83 c8 ff             	or     eax,0xffffffff
c00135b8:	83 c4 1c             	add    esp,0x1c
c00135bb:	c3                   	ret    

c00135bc <Device::~Device()>:
c00135bc:	ba 38 99 03 c0       	mov    edx,0xc0039938
c00135c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135c5:	89 10                	mov    DWORD PTR [eax],edx
c00135c7:	90                   	nop
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <Device::~Device()>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135d1:	e8 e6 ff ff ff       	call   c00135bc <Device::~Device()>
c00135d6:	83 c4 04             	add    esp,0x4
c00135d9:	83 ec 08             	sub    esp,0x8
c00135dc:	68 58 01 00 00       	push   0x158
c00135e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e5:	e8 35 ee ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c00135ea:	83 c4 10             	add    esp,0x10
c00135ed:	83 c4 0c             	add    esp,0xc
c00135f0:	c3                   	ret    
c00135f1:	90                   	nop

c00135f2 <Device::findAndLoadDriver()>:
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <Device::preOpenPCI(PCIDeviceInfo)>:
c00135f4:	57                   	push   edi
c00135f5:	b9 09 00 00 00       	mov    ecx,0x9
c00135fa:	56                   	push   esi
c00135fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00135ff:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013603:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001360d:	81 c7 18 01 00 00    	add    edi,0x118
c0013613:	fc                   	cld    
c0013614:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013616:	5e                   	pop    esi
c0013617:	5f                   	pop    edi
c0013618:	c3                   	ret    
c0013619:	90                   	nop

c001361a <Device::preOpenACPI(void*, char*, char*)>:
c001361a:	56                   	push   esi
c001361b:	53                   	push   ebx
c001361c:	83 ec 08             	sub    esp,0x8
c001361f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013623:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013627:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013631:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013635:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001363b:	6a 1e                	push   0x1e
c001363d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013643:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013647:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001364d:	50                   	push   eax
c001364e:	e8 0e d0 fe ff       	call   c0000661 <memcpy>
c0013653:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013657:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001365b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013663:	83 c4 14             	add    esp,0x14
c0013666:	5b                   	pop    ebx
c0013667:	5e                   	pop    esi
c0013668:	e9 f4 cf fe ff       	jmp    c0000661 <memcpy>
c001366d:	90                   	nop

c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001366e:	55                   	push   ebp
c001366f:	57                   	push   edi
c0013670:	56                   	push   esi
c0013671:	53                   	push   ebx
c0013672:	83 ec 0c             	sub    esp,0xc
c0013675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013679:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001367d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013681:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013685:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001368a:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013691:	75 0b                	jne    c001369e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0013693:	8b 00                	mov    eax,DWORD PTR [eax]
c0013695:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013699:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001369c:	eb 24                	jmp    c00136c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c001369e:	e8 73 3a 00 00       	call   c0017116 <thisCPU()>
c00136a3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00136a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ab:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00136af:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00136b3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00136b7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00136bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00136bf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00136c2:	83 c4 0c             	add    esp,0xc
c00136c5:	5b                   	pop    ebx
c00136c6:	5e                   	pop    esi
c00136c7:	5f                   	pop    edi
c00136c8:	5d                   	pop    ebp
c00136c9:	ff e0                	jmp    eax
c00136cb:	90                   	nop

c00136cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00136cc:	57                   	push   edi
c00136cd:	56                   	push   esi
c00136ce:	53                   	push   ebx
c00136cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136db:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00136e0:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00136e7:	75 0b                	jne    c00136f4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00136e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00136eb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00136ef:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00136f2:	eb 20                	jmp    c0013714 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00136f4:	e8 1d 3a 00 00       	call   c0017116 <thisCPU()>
c00136f9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00136ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0013701:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013705:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013709:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001370d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013711:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013714:	5b                   	pop    ebx
c0013715:	5e                   	pop    esi
c0013716:	5f                   	pop    edi
c0013717:	ff e0                	jmp    eax
c0013719:	90                   	nop

c001371a <Device::addChild(Device*)>:
c001371a:	53                   	push   ebx
c001371b:	83 ec 08             	sub    esp,0x8
c001371e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013726:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001372c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013732:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013734:	85 d2                	test   edx,edx
c0013736:	74 04                	je     c001373c <Device::addChild(Device*)+0x22>
c0013738:	89 d3                	mov    ebx,edx
c001373a:	eb f6                	jmp    c0013732 <Device::addChild(Device*)+0x18>
c001373c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001373f:	83 ec 0c             	sub    esp,0xc
c0013742:	6a 08                	push   0x8
c0013744:	e8 c7 ec ff ff       	call   c0012410 <operator new(unsigned long)>
c0013749:	89 03                	mov    DWORD PTR [ebx],eax
c001374b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013751:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013758:	83 c4 18             	add    esp,0x18
c001375b:	5b                   	pop    ebx
c001375c:	c3                   	ret    
c001375d:	90                   	nop

c001375e <Device::removeAllChildren()>:
c001375e:	56                   	push   esi
c001375f:	53                   	push   ebx
c0013760:	52                   	push   edx
c0013761:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013765:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001376b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001376e:	74 17                	je     c0013787 <Device::removeAllChildren()+0x29>
c0013770:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013773:	85 c0                	test   eax,eax
c0013775:	74 0c                	je     c0013783 <Device::removeAllChildren()+0x25>
c0013777:	83 ec 0c             	sub    esp,0xc
c001377a:	8b 10                	mov    edx,DWORD PTR [eax]
c001377c:	50                   	push   eax
c001377d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013785:	eb e4                	jmp    c001376b <Device::removeAllChildren()+0xd>
c0013787:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001378d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013793:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013799:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137a0:	58                   	pop    eax
c00137a1:	5b                   	pop    ebx
c00137a2:	5e                   	pop    esi
c00137a3:	c3                   	ret    

c00137a4 <Device::hibernateAll()>:
c00137a4:	53                   	push   ebx
c00137a5:	83 ec 14             	sub    esp,0x14
c00137a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ae:	53                   	push   ebx
c00137af:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00137b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137be:	74 0f                	je     c00137cf <Device::hibernateAll()+0x2b>
c00137c0:	83 ec 0c             	sub    esp,0xc
c00137c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137c6:	e8 d9 ff ff ff       	call   c00137a4 <Device::hibernateAll()>
c00137cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137cd:	eb e9                	jmp    c00137b8 <Device::hibernateAll()+0x14>
c00137cf:	83 c4 08             	add    esp,0x8
c00137d2:	5b                   	pop    ebx
c00137d3:	c3                   	ret    

c00137d4 <Device::wakeAll()>:
c00137d4:	53                   	push   ebx
c00137d5:	83 ec 14             	sub    esp,0x14
c00137d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137de:	53                   	push   ebx
c00137df:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00137e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137e8:	83 c4 10             	add    esp,0x10
c00137eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137ee:	74 0f                	je     c00137ff <Device::wakeAll()+0x2b>
c00137f0:	83 ec 0c             	sub    esp,0xc
c00137f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137f6:	e8 d9 ff ff ff       	call   c00137d4 <Device::wakeAll()>
c00137fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137fd:	eb e9                	jmp    c00137e8 <Device::wakeAll()+0x14>
c00137ff:	83 c4 08             	add    esp,0x8
c0013802:	5b                   	pop    ebx
c0013803:	c3                   	ret    

c0013804 <Device::detectAll()>:
c0013804:	53                   	push   ebx
c0013805:	83 ec 14             	sub    esp,0x14
c0013808:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001380c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001380e:	53                   	push   ebx
c001380f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013812:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001381e:	74 0f                	je     c001382f <Device::detectAll()+0x2b>
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013826:	e8 d9 ff ff ff       	call   c0013804 <Device::detectAll()>
c001382b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001382d:	eb e9                	jmp    c0013818 <Device::detectAll()+0x14>
c001382f:	83 c4 08             	add    esp,0x8
c0013832:	5b                   	pop    ebx
c0013833:	c3                   	ret    

c0013834 <Device::disableLegacyAll()>:
c0013834:	53                   	push   ebx
c0013835:	83 ec 14             	sub    esp,0x14
c0013838:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001383c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383e:	53                   	push   ebx
c001383f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013842:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001384e:	74 0f                	je     c001385f <Device::disableLegacyAll()+0x2b>
c0013850:	83 ec 0c             	sub    esp,0xc
c0013853:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013856:	e8 d9 ff ff ff       	call   c0013834 <Device::disableLegacyAll()>
c001385b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001385d:	eb e9                	jmp    c0013848 <Device::disableLegacyAll()+0x14>
c001385f:	83 c4 08             	add    esp,0x8
c0013862:	5b                   	pop    ebx
c0013863:	c3                   	ret    

c0013864 <Device::loadDriversForAll()>:
c0013864:	53                   	push   ebx
c0013865:	83 ec 08             	sub    esp,0x8
c0013868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013872:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013874:	85 db                	test   ebx,ebx
c0013876:	74 12                	je     c001388a <Device::loadDriversForAll()+0x26>
c0013878:	83 ec 0c             	sub    esp,0xc
c001387b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001387e:	e8 e1 ff ff ff       	call   c0013864 <Device::loadDriversForAll()>
c0013883:	83 c4 10             	add    esp,0x10
c0013886:	89 d8                	mov    eax,ebx
c0013888:	eb e8                	jmp    c0013872 <Device::loadDriversForAll()+0xe>
c001388a:	83 c4 08             	add    esp,0x8
c001388d:	5b                   	pop    ebx
c001388e:	c3                   	ret    
c001388f:	90                   	nop

c0013890 <Device::closeAll()>:
c0013890:	53                   	push   ebx
c0013891:	83 ec 08             	sub    esp,0x8
c0013894:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013898:	8b 03                	mov    eax,DWORD PTR [ebx]
c001389a:	6a 00                	push   0x0
c001389c:	6a 00                	push   0x0
c001389e:	6a 00                	push   0x0
c00138a0:	53                   	push   ebx
c00138a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138aa:	83 c4 10             	add    esp,0x10
c00138ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138b0:	74 0f                	je     c00138c1 <Device::closeAll()+0x31>
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138b8:	e8 d3 ff ff ff       	call   c0013890 <Device::closeAll()>
c00138bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138bf:	eb e9                	jmp    c00138aa <Device::closeAll()+0x1a>
c00138c1:	83 c4 08             	add    esp,0x8
c00138c4:	5b                   	pop    ebx
c00138c5:	c3                   	ret    

c00138c6 <Device::powerSavingAll(PowerSavingLevel)>:
c00138c6:	56                   	push   esi
c00138c7:	53                   	push   ebx
c00138c8:	83 ec 0c             	sub    esp,0xc
c00138cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138d5:	56                   	push   esi
c00138d6:	53                   	push   ebx
c00138d7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00138da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138e6:	74 0f                	je     c00138f7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00138e8:	52                   	push   edx
c00138e9:	52                   	push   edx
c00138ea:	56                   	push   esi
c00138eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138ee:	e8 d3 ff ff ff       	call   c00138c6 <Device::powerSavingAll(PowerSavingLevel)>
c00138f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138f5:	eb e9                	jmp    c00138e0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00138f7:	58                   	pop    eax
c00138f8:	5b                   	pop    ebx
c00138f9:	5e                   	pop    esi
c00138fa:	c3                   	ret    
c00138fb:	90                   	nop

c00138fc <Device::setName(char const*)>:
c00138fc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013904:	e9 eb ce fe ff       	jmp    c00007f4 <strcpy>
c0013909:	90                   	nop

c001390a <Device::Device(char const*)>:
c001390a:	83 ec 0c             	sub    esp,0xc
c001390d:	ba 38 99 03 c0       	mov    edx,0xc0039938
c0013912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013916:	89 10                	mov    DWORD PTR [eax],edx
c0013918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013938:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013946:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013950:	83 ec 08             	sub    esp,0x8
c0013953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013957:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001395b:	e8 9c ff ff ff       	call   c00138fc <Device::setName(char const*)>
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	83 ec 0c             	sub    esp,0xc
c0013966:	6a 08                	push   0x8
c0013968:	e8 a3 ea ff ff       	call   c0012410 <operator new(unsigned long)>
c001396d:	83 c4 10             	add    esp,0x10
c0013970:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013976:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001397d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013981:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001398b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013991:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001399b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00139a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00139b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00139be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00139cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00139da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139de:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00139e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00139f6:	90                   	nop
c00139f7:	83 c4 0c             	add    esp,0xc
c00139fa:	c3                   	ret    
c00139fb:	90                   	nop

c00139fc <Device::getName()>:
c00139fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a00:	05 d0 00 00 00       	add    eax,0xd0
c0013a05:	c3                   	ret    

c0013a06 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013a06:	83 ec 0c             	sub    esp,0xc
c0013a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0d:	83 ec 08             	sub    esp,0x8
c0013a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a14:	50                   	push   eax
c0013a15:	e8 f0 fe ff ff       	call   c001390a <Device::Device(char const*)>
c0013a1a:	83 c4 10             	add    esp,0x10
c0013a1d:	ba 64 99 03 c0       	mov    edx,0xc0039964
c0013a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a26:	89 10                	mov    DWORD PTR [eax],edx
c0013a28:	90                   	nop
c0013a29:	83 c4 0c             	add    esp,0xc
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013a2e:	57                   	push   edi
c0013a2f:	56                   	push   esi
c0013a30:	53                   	push   ebx
c0013a31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a35:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a3d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013a43:	75 0c                	jne    c0013a51 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013a45:	52                   	push   edx
c0013a46:	52                   	push   edx
c0013a47:	53                   	push   ebx
c0013a48:	56                   	push   esi
c0013a49:	e8 1e b4 00 00       	call   c001ee6c <LinkedList<Device>::addElement(Device*)>
c0013a4e:	83 c4 10             	add    esp,0x10
c0013a51:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a5a:	74 12                	je     c0013a6e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013a5c:	50                   	push   eax
c0013a5d:	57                   	push   edi
c0013a5e:	56                   	push   esi
c0013a5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a62:	e8 c7 ff ff ff       	call   c0013a2e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013a67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a69:	83 c4 10             	add    esp,0x10
c0013a6c:	eb e9                	jmp    c0013a57 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013a6e:	5b                   	pop    ebx
c0013a6f:	5e                   	pop    esi
c0013a70:	5f                   	pop    edi
c0013a71:	c3                   	ret    

c0013a72 <getDevicesOfType(DeviceType)>:
c0013a72:	53                   	push   ebx
c0013a73:	83 ec 14             	sub    esp,0x14
c0013a76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a7a:	53                   	push   ebx
c0013a7b:	e8 c8 b4 00 00       	call   c001ef48 <LinkedList<Device>::LinkedList()>
c0013a80:	83 c4 0c             	add    esp,0xc
c0013a83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a87:	53                   	push   ebx
c0013a88:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c0013a8e:	e8 9b ff ff ff       	call   c0013a2e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013a93:	89 d8                	mov    eax,ebx
c0013a95:	83 c4 18             	add    esp,0x18
c0013a98:	5b                   	pop    ebx
c0013a99:	c2 04 00             	ret    0x4

c0013a9c <HardDiskController::HardDiskController(char const*)>:
c0013a9c:	83 ec 0c             	sub    esp,0xc
c0013a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa3:	83 ec 08             	sub    esp,0x8
c0013aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aaa:	50                   	push   eax
c0013aab:	e8 5a fe ff ff       	call   c001390a <Device::Device(char const*)>
c0013ab0:	83 c4 10             	add    esp,0x10
c0013ab3:	ba 90 99 03 c0       	mov    edx,0xc0039990
c0013ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013abc:	89 10                	mov    DWORD PTR [eax],edx
c0013abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013acc:	90                   	nop
c0013acd:	83 c4 0c             	add    esp,0xc
c0013ad0:	c3                   	ret    
c0013ad1:	90                   	nop

c0013ad2 <HardDiskController::~HardDiskController()>:
c0013ad2:	83 ec 0c             	sub    esp,0xc
c0013ad5:	ba 90 99 03 c0       	mov    edx,0xc0039990
c0013ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ade:	89 10                	mov    DWORD PTR [eax],edx
c0013ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	50                   	push   eax
c0013ae8:	e8 cf fa ff ff       	call   c00135bc <Device::~Device()>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	90                   	nop
c0013af1:	83 c4 0c             	add    esp,0xc
c0013af4:	c3                   	ret    
c0013af5:	90                   	nop

c0013af6 <HardDiskController::~HardDiskController()>:
c0013af6:	83 ec 0c             	sub    esp,0xc
c0013af9:	83 ec 0c             	sub    esp,0xc
c0013afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b00:	e8 cd ff ff ff       	call   c0013ad2 <HardDiskController::~HardDiskController()>
c0013b05:	83 c4 10             	add    esp,0x10
c0013b08:	83 ec 08             	sub    esp,0x8
c0013b0b:	68 58 01 00 00       	push   0x158
c0013b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b14:	e8 06 e9 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0013b19:	83 c4 10             	add    esp,0x10
c0013b1c:	83 c4 0c             	add    esp,0xc
c0013b1f:	c3                   	ret    

c0013b20 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013b20:	83 ec 0c             	sub    esp,0xc
c0013b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b27:	83 ec 08             	sub    esp,0x8
c0013b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b2e:	50                   	push   eax
c0013b2f:	e8 d6 fd ff ff       	call   c001390a <Device::Device(char const*)>
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	ba bc 99 03 c0       	mov    edx,0xc00399bc
c0013b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b40:	89 10                	mov    DWORD PTR [eax],edx
c0013b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b46:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b51:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b6e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b78:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b82:	90                   	nop
c0013b83:	83 c4 0c             	add    esp,0xc
c0013b86:	c3                   	ret    
c0013b87:	90                   	nop

c0013b88 <PhysicalDisk::startCache()>:
c0013b88:	56                   	push   esi
c0013b89:	53                   	push   ebx
c0013b8a:	83 ec 10             	sub    esp,0x10
c0013b8d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b91:	6a 30                	push   0x30
c0013b93:	e8 78 e8 ff ff       	call   c0012410 <operator new(unsigned long)>
c0013b98:	89 c6                	mov    esi,eax
c0013b9a:	58                   	pop    eax
c0013b9b:	5a                   	pop    edx
c0013b9c:	53                   	push   ebx
c0013b9d:	56                   	push   esi
c0013b9e:	e8 b7 1d 00 00       	call   c001595a <VCache::VCache(PhysicalDisk*)>
c0013ba3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ba9:	83 c4 14             	add    esp,0x14
c0013bac:	5b                   	pop    ebx
c0013bad:	5e                   	pop    esi
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <PhysicalDisk::~PhysicalDisk()>:
c0013bb0:	83 ec 0c             	sub    esp,0xc
c0013bb3:	ba bc 99 03 c0       	mov    edx,0xc00399bc
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	89 10                	mov    DWORD PTR [eax],edx
c0013bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	50                   	push   eax
c0013bc6:	e8 f1 f9 ff ff       	call   c00135bc <Device::~Device()>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	90                   	nop
c0013bcf:	83 c4 0c             	add    esp,0xc
c0013bd2:	c3                   	ret    
c0013bd3:	90                   	nop

c0013bd4 <PhysicalDisk::~PhysicalDisk()>:
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	83 ec 0c             	sub    esp,0xc
c0013bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bde:	e8 cd ff ff ff       	call   c0013bb0 <PhysicalDisk::~PhysicalDisk()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	83 ec 08             	sub    esp,0x8
c0013be9:	68 6c 01 00 00       	push   0x16c
c0013bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf2:	e8 28 e8 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0013bf7:	83 c4 10             	add    esp,0x10
c0013bfa:	83 c4 0c             	add    esp,0xc
c0013bfd:	c3                   	ret    

c0013bfe <FPU::FPU(char const*)>:
c0013bfe:	83 ec 0c             	sub    esp,0xc
c0013c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c05:	83 ec 08             	sub    esp,0x8
c0013c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0c:	50                   	push   eax
c0013c0d:	e8 f8 fc ff ff       	call   c001390a <Device::Device(char const*)>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	ba f8 99 03 c0       	mov    edx,0xc00399f8
c0013c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1e:	89 10                	mov    DWORD PTR [eax],edx
c0013c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c24:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013c2e:	90                   	nop
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <FPU::~FPU()>:
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	ba f8 99 03 c0       	mov    edx,0xc00399f8
c0013c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c40:	89 10                	mov    DWORD PTR [eax],edx
c0013c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c46:	83 ec 0c             	sub    esp,0xc
c0013c49:	50                   	push   eax
c0013c4a:	e8 6d f9 ff ff       	call   c00135bc <Device::~Device()>
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	90                   	nop
c0013c53:	83 c4 0c             	add    esp,0xc
c0013c56:	c3                   	ret    
c0013c57:	90                   	nop

c0013c58 <FPU::~FPU()>:
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	83 ec 0c             	sub    esp,0xc
c0013c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c62:	e8 cd ff ff ff       	call   c0013c34 <FPU::~FPU()>
c0013c67:	83 c4 10             	add    esp,0x10
c0013c6a:	83 ec 08             	sub    esp,0x8
c0013c6d:	68 58 01 00 00       	push   0x158
c0013c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c76:	e8 a4 e7 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0013c7b:	83 c4 10             	add    esp,0x10
c0013c7e:	83 c4 0c             	add    esp,0xc
c0013c81:	c3                   	ret    

c0013c82 <setupFPU()>:
c0013c82:	53                   	push   ebx
c0013c83:	83 ec 08             	sub    esp,0x8
c0013c86:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0013c8b:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013c92:	74 19                	je     c0013cad <setupFPU()+0x2b>
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	68 58 01 00 00       	push   0x158
c0013c9c:	e8 6f e7 ff ff       	call   c0012410 <operator new(unsigned long)>
c0013ca1:	89 c3                	mov    ebx,eax
c0013ca3:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ca6:	e8 a5 96 00 00       	call   c001d350 <AVX::AVX()>
c0013cab:	eb 5b                	jmp    c0013d08 <setupFPU()+0x86>
c0013cad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013cb3:	84 c0                	test   al,al
c0013cb5:	79 19                	jns    c0013cd0 <setupFPU()+0x4e>
c0013cb7:	83 ec 0c             	sub    esp,0xc
c0013cba:	68 58 01 00 00       	push   0x158
c0013cbf:	e8 4c e7 ff ff       	call   c0012410 <operator new(unsigned long)>
c0013cc4:	89 c3                	mov    ebx,eax
c0013cc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013cc9:	e8 a8 97 00 00       	call   c001d476 <SSE::SSE()>
c0013cce:	eb 38                	jmp    c0013d08 <setupFPU()+0x86>
c0013cd0:	a8 20                	test   al,0x20
c0013cd2:	74 19                	je     c0013ced <setupFPU()+0x6b>
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	68 58 01 00 00       	push   0x158
c0013cdc:	e8 2f e7 ff ff       	call   c0012410 <operator new(unsigned long)>
c0013ce1:	89 c3                	mov    ebx,eax
c0013ce3:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ce6:	e8 f5 96 00 00       	call   c001d3e0 <MMX::MMX()>
c0013ceb:	eb 1b                	jmp    c0013d08 <setupFPU()+0x86>
c0013ced:	a8 10                	test   al,0x10
c0013cef:	74 1c                	je     c0013d0d <setupFPU()+0x8b>
c0013cf1:	83 ec 0c             	sub    esp,0xc
c0013cf4:	68 58 01 00 00       	push   0x158
c0013cf9:	e8 12 e7 ff ff       	call   c0012410 <operator new(unsigned long)>
c0013cfe:	89 c3                	mov    ebx,eax
c0013d00:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d03:	e8 fc 97 00 00       	call   c001d504 <x87::x87()>
c0013d08:	83 c4 10             	add    esp,0x10
c0013d0b:	eb 12                	jmp    c0013d1f <setupFPU()+0x9d>
c0013d0d:	83 ec 0c             	sub    esp,0xc
c0013d10:	31 db                	xor    ebx,ebx
c0013d12:	68 e8 99 03 c0       	push   0xc00399e8
c0013d17:	e8 62 92 ff ff       	call   c000cf7e <panic(char const*)>
c0013d1c:	83 c4 10             	add    esp,0x10
c0013d1f:	89 d8                	mov    eax,ebx
c0013d21:	83 c4 08             	add    esp,0x8
c0013d24:	5b                   	pop    ebx
c0013d25:	c3                   	ret    

c0013d26 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013d26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d2e:	c1 e0 04             	shl    eax,0x4
c0013d31:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013d35:	8d 50 10             	lea    edx,[eax+0x10]
c0013d38:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013d3e:	74 08                	je     c0013d48 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013d40:	83 c0 04             	add    eax,0x4
c0013d43:	39 d0                	cmp    eax,edx
c0013d45:	75 f1                	jne    c0013d38 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013d47:	c3                   	ret    
c0013d48:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d52:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013d5c:	eb e2                	jmp    c0013d40 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013d5e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013d5e:	57                   	push   edi
c0013d5f:	31 c0                	xor    eax,eax
c0013d61:	56                   	push   esi
c0013d62:	53                   	push   ebx
c0013d63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013d6f:	89 da                	mov    edx,ebx
c0013d71:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d75:	c1 e2 04             	shl    edx,0x4
c0013d78:	01 ca                	add    edx,ecx
c0013d7a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013d82:	74 16                	je     c0013d9a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013d84:	40                   	inc    eax
c0013d85:	83 f8 04             	cmp    eax,0x4
c0013d88:	75 f0                	jne    c0013d7a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013d8a:	c7 44 24 10 28 9a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039a28
c0013d92:	5b                   	pop    ebx
c0013d93:	5e                   	pop    esi
c0013d94:	5f                   	pop    edi
c0013d95:	e9 e4 91 ff ff       	jmp    c000cf7e <panic(char const*)>
c0013d9a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d9d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013da0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013da6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013dac:	5b                   	pop    ebx
c0013dad:	5e                   	pop    esi
c0013dae:	5f                   	pop    edi
c0013daf:	c3                   	ret    

c0013db0 <doubleFault(regs*, void*)>:
c0013db0:	c7 44 24 04 58 9b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039b58
c0013db8:	e9 c1 91 ff ff       	jmp    c000cf7e <panic(char const*)>
c0013dbd:	90                   	nop

c0013dbe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013dbe:	56                   	push   esi
c0013dbf:	53                   	push   ebx
c0013dc0:	50                   	push   eax
c0013dc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dc5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013dc9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013dce:	75 35                	jne    c0013e05 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013dd0:	8d 43 20             	lea    eax,[ebx+0x20]
c0013dd3:	31 d2                	xor    edx,edx
c0013dd5:	89 c1                	mov    ecx,eax
c0013dd7:	c1 e1 04             	shl    ecx,0x4
c0013dda:	01 f1                	add    ecx,esi
c0013ddc:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013de4:	74 3e                	je     c0013e24 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013de6:	42                   	inc    edx
c0013de7:	83 fa 04             	cmp    edx,0x4
c0013dea:	75 f0                	jne    c0013ddc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	68 9c 9a 03 c0       	push   0xc0039a9c
c0013df4:	e8 85 91 ff ff       	call   c000cf7e <panic(char const*)>
c0013df9:	83 c4 10             	add    esp,0x10
c0013dfc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013e01:	5a                   	pop    edx
c0013e02:	5b                   	pop    ebx
c0013e03:	5e                   	pop    esi
c0013e04:	c3                   	ret    
c0013e05:	83 ec 0c             	sub    esp,0xc
c0013e08:	56                   	push   esi
c0013e09:	e8 ee fb ff ff       	call   c00139fc <Device::getName()>
c0013e0e:	83 c4 10             	add    esp,0x10
c0013e11:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e14:	75 ba                	jne    c0013dd0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e16:	83 fb 0f             	cmp    ebx,0xf
c0013e19:	7f 29                	jg     c0013e44 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013e1b:	0f b6 9b 60 b0 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4fa0]
c0013e22:	eb ac                	jmp    c0013dd0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e24:	8d 04 82             	lea    eax,[edx+eax*4]
c0013e27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e2b:	8d 04 86             	lea    eax,[esi+eax*4]
c0013e2e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013e34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e38:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013e3e:	89 d8                	mov    eax,ebx
c0013e40:	5a                   	pop    edx
c0013e41:	5b                   	pop    ebx
c0013e42:	5e                   	pop    esi
c0013e43:	c3                   	ret    
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	68 64 9a 03 c0       	push   0xc0039a64
c0013e4c:	e8 2d 91 ff ff       	call   c000cf7e <panic(char const*)>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	e9 77 ff ff ff       	jmp    c0013dd0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013e59:	90                   	nop

c0013e5a <InterruptController::clearAllHandlers(int, bool)>:
c0013e5a:	56                   	push   esi
c0013e5b:	53                   	push   ebx
c0013e5c:	52                   	push   edx
c0013e5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e65:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013e6a:	75 61                	jne    c0013ecd <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013e6c:	8d 46 20             	lea    eax,[esi+0x20]
c0013e6f:	c1 e6 04             	shl    esi,0x4
c0013e72:	c1 e0 04             	shl    eax,0x4
c0013e75:	01 de                	add    esi,ebx
c0013e77:	01 d8                	add    eax,ebx
c0013e79:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013e83:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013e8d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e97:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013ea1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013eab:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013eb5:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013ebf:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013ec9:	58                   	pop    eax
c0013eca:	5b                   	pop    ebx
c0013ecb:	5e                   	pop    esi
c0013ecc:	c3                   	ret    
c0013ecd:	83 ec 0c             	sub    esp,0xc
c0013ed0:	53                   	push   ebx
c0013ed1:	e8 26 fb ff ff       	call   c00139fc <Device::getName()>
c0013ed6:	83 c4 10             	add    esp,0x10
c0013ed9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013edc:	75 8e                	jne    c0013e6c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013ede:	83 fe 0f             	cmp    esi,0xf
c0013ee1:	7f 09                	jg     c0013eec <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013ee3:	0f b6 b6 60 b0 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4fa0]
c0013eea:	eb 80                	jmp    c0013e6c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013eec:	83 ec 0c             	sub    esp,0xc
c0013eef:	68 d8 9a 03 c0       	push   0xc0039ad8
c0013ef4:	e8 85 90 ff ff       	call   c000cf7e <panic(char const*)>
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	e9 6b ff ff ff       	jmp    c0013e6c <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f01:	90                   	nop

c0013f02 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f02:	56                   	push   esi
c0013f03:	53                   	push   ebx
c0013f04:	52                   	push   edx
c0013f05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f0d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013f12:	75 3a                	jne    c0013f4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013f14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f18:	8d 50 20             	lea    edx,[eax+0x20]
c0013f1b:	c1 e2 04             	shl    edx,0x4
c0013f1e:	8d 04 16             	lea    eax,[esi+edx*1]
c0013f21:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013f25:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013f2b:	74 0b                	je     c0013f38 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013f2d:	83 c0 04             	add    eax,0x4
c0013f30:	39 d0                	cmp    eax,edx
c0013f32:	75 f1                	jne    c0013f25 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013f34:	58                   	pop    eax
c0013f35:	5b                   	pop    ebx
c0013f36:	5e                   	pop    esi
c0013f37:	c3                   	ret    
c0013f38:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f42:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013f4c:	eb df                	jmp    c0013f2d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	56                   	push   esi
c0013f52:	e8 a5 fa ff ff       	call   c00139fc <Device::getName()>
c0013f57:	83 c4 10             	add    esp,0x10
c0013f5a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f5d:	75 b5                	jne    c0013f14 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f5f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013f64:	7f 11                	jg     c0013f77 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013f66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f6a:	0f b6 80 60 b0 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4fa0]
c0013f71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f75:	eb 9d                	jmp    c0013f14 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013f77:	83 ec 0c             	sub    esp,0xc
c0013f7a:	68 d8 9a 03 c0       	push   0xc0039ad8
c0013f7f:	e8 fa 8f ff ff       	call   c000cf7e <panic(char const*)>
c0013f84:	83 c4 10             	add    esp,0x10
c0013f87:	eb 8b                	jmp    c0013f14 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013f89 <nmiHandler(regs*, void*)>:
c0013f89:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0013f8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f92:	e9 e7 77 ff ff       	jmp    c000b77e <Computer::handleNMI()>

c0013f97 <int_handler>:
c0013f97:	55                   	push   ebp
c0013f98:	57                   	push   edi
c0013f99:	56                   	push   esi
c0013f9a:	53                   	push   ebx
c0013f9b:	83 ec 0c             	sub    esp,0xc
c0013f9e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013fa2:	80 3d b2 ba 03 c0 00 	cmp    BYTE PTR ds:0xc003bab2,0x0
c0013fa9:	74 0b                	je     c0013fb6 <int_handler+0x1f>
c0013fab:	fa                   	cli    
c0013fac:	f4                   	hlt    
c0013fad:	80 3d b2 ba 03 c0 00 	cmp    BYTE PTR ds:0xc003bab2,0x0
c0013fb4:	75 f5                	jne    c0013fab <int_handler+0x14>
c0013fb6:	e8 5b 31 00 00       	call   c0017116 <thisCPU()>
c0013fbb:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013fbe:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013fc4:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013fc7:	83 f8 17             	cmp    eax,0x17
c0013fca:	77 13                	ja     c0013fdf <int_handler+0x48>
c0013fcc:	83 ec 08             	sub    esp,0x8
c0013fcf:	8b 17                	mov    edx,DWORD PTR [edi]
c0013fd1:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013fd4:	0f b6 c0             	movzx  eax,al
c0013fd7:	50                   	push   eax
c0013fd8:	57                   	push   edi
c0013fd9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	83 c3 15             	add    ebx,0x15
c0013fe2:	c1 e3 04             	shl    ebx,0x4
c0013fe5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013fe9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013ff0:	31 db                	xor    ebx,ebx
c0013ff2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013ff6:	85 c0                	test   eax,eax
c0013ff8:	74 13                	je     c001400d <int_handler+0x76>
c0013ffa:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013ffd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014001:	74 1c                	je     c001401f <int_handler+0x88>
c0014003:	83 ec 08             	sub    esp,0x8
c0014006:	52                   	push   edx
c0014007:	56                   	push   esi
c0014008:	ff d0                	call   eax
c001400a:	83 c4 10             	add    esp,0x10
c001400d:	43                   	inc    ebx
c001400e:	83 fb 04             	cmp    ebx,0x4
c0014011:	75 df                	jne    c0013ff2 <int_handler+0x5b>
c0014013:	83 c4 0c             	add    esp,0xc
c0014016:	31 c0                	xor    eax,eax
c0014018:	5b                   	pop    ebx
c0014019:	31 d2                	xor    edx,edx
c001401b:	5e                   	pop    esi
c001401c:	5f                   	pop    edi
c001401d:	5d                   	pop    ebp
c001401e:	c3                   	ret    
c001401f:	83 ec 08             	sub    esp,0x8
c0014022:	52                   	push   edx
c0014023:	56                   	push   esi
c0014024:	ff d0                	call   eax
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	83 c4 0c             	add    esp,0xc
c001402c:	5b                   	pop    ebx
c001402d:	5e                   	pop    esi
c001402e:	5f                   	pop    edi
c001402f:	5d                   	pop    ebp
c0014030:	c3                   	ret    
c0014031:	90                   	nop

c0014032 <InterruptController::InterruptController(char const*)>:
c0014032:	83 ec 1c             	sub    esp,0x1c
c0014035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014039:	83 ec 08             	sub    esp,0x8
c001403c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014040:	50                   	push   eax
c0014041:	e8 c4 f8 ff ff       	call   c001390a <Device::Device(char const*)>
c0014046:	83 c4 10             	add    esp,0x10
c0014049:	ba d0 9c 03 c0       	mov    edx,0xc0039cd0
c001404e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014052:	89 10                	mov    DWORD PTR [eax],edx
c0014054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014058:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014062:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001406a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014072:	7f 5e                	jg     c00140d2 <InterruptController::InterruptController(char const*)+0xa0>
c0014074:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001407c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014081:	7f 49                	jg     c00140cc <InterruptController::InterruptController(char const*)+0x9a>
c0014083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014087:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001408b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014092:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014096:	01 ca                	add    edx,ecx
c0014098:	83 c2 54             	add    edx,0x54
c001409b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00140a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140ab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00140b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140b6:	01 ca                	add    edx,ecx
c00140b8:	81 c2 54 04 00 00    	add    edx,0x454
c00140be:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00140c6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00140ca:	eb b0                	jmp    c001407c <InterruptController::InterruptController(char const*)+0x4a>
c00140cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00140d0:	eb 98                	jmp    c001406a <InterruptController::InterruptController(char const*)+0x38>
c00140d2:	90                   	nop
c00140d3:	83 c4 1c             	add    esp,0x1c
c00140d6:	c3                   	ret    
c00140d7:	90                   	nop

c00140d8 <InterruptController::~InterruptController()>:
c00140d8:	83 ec 0c             	sub    esp,0xc
c00140db:	ba d0 9c 03 c0       	mov    edx,0xc0039cd0
c00140e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e4:	89 10                	mov    DWORD PTR [eax],edx
c00140e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	50                   	push   eax
c00140ee:	e8 c9 f4 ff ff       	call   c00135bc <Device::~Device()>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	90                   	nop
c00140f7:	83 c4 0c             	add    esp,0xc
c00140fa:	c3                   	ret    
c00140fb:	90                   	nop

c00140fc <InterruptController::~InterruptController()>:
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	83 ec 0c             	sub    esp,0xc
c0014102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014106:	e8 cd ff ff ff       	call   c00140d8 <InterruptController::~InterruptController()>
c001410b:	83 c4 10             	add    esp,0x10
c001410e:	83 ec 08             	sub    esp,0x8
c0014111:	68 58 21 00 00       	push   0x2158
c0014116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411a:	e8 00 e3 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	83 c4 0c             	add    esp,0xc
c0014125:	c3                   	ret    

c0014126 <displayDebugInfo(regs*)>:
c0014126:	55                   	push   ebp
c0014127:	57                   	push   edi
c0014128:	56                   	push   esi
c0014129:	53                   	push   ebx
c001412a:	83 ec 24             	sub    esp,0x24
c001412d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014131:	0f 20 c2             	mov    edx,cr0
c0014134:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014138:	0f 20 d7             	mov    edi,cr2
c001413b:	0f 20 de             	mov    esi,cr3
c001413e:	0f 20 e5             	mov    ebp,cr4
c0014141:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014144:	68 65 9b 03 c0       	push   0xc0039b65
c0014149:	e8 12 8d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001414e:	58                   	pop    eax
c001414f:	5a                   	pop    edx
c0014150:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014153:	68 70 9b 03 c0       	push   0xc0039b70
c0014158:	e8 03 8d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001415d:	59                   	pop    ecx
c001415e:	58                   	pop    eax
c001415f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014162:	68 7b 9b 03 c0       	push   0xc0039b7b
c0014167:	e8 f4 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001416c:	58                   	pop    eax
c001416d:	5a                   	pop    edx
c001416e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014171:	68 86 9b 03 c0       	push   0xc0039b86
c0014176:	e8 e5 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001417b:	59                   	pop    ecx
c001417c:	58                   	pop    eax
c001417d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014180:	68 91 9b 03 c0       	push   0xc0039b91
c0014185:	e8 d6 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001418a:	58                   	pop    eax
c001418b:	5a                   	pop    edx
c001418c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001418f:	68 9c 9b 03 c0       	push   0xc0039b9c
c0014194:	e8 c7 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0014199:	59                   	pop    ecx
c001419a:	58                   	pop    eax
c001419b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001419e:	68 b6 9b 03 c0       	push   0xc0039bb6
c00141a3:	e8 b8 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141a8:	58                   	pop    eax
c00141a9:	5a                   	pop    edx
c00141aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00141ad:	68 a7 9b 03 c0       	push   0xc0039ba7
c00141b2:	e8 a9 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141b7:	59                   	pop    ecx
c00141b8:	58                   	pop    eax
c00141b9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00141bc:	68 b2 9b 03 c0       	push   0xc0039bb2
c00141c1:	e8 9a 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141c6:	58                   	pop    eax
c00141c7:	5a                   	pop    edx
c00141c8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141cb:	68 c1 9b 03 c0       	push   0xc0039bc1
c00141d0:	e8 8b 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141d5:	59                   	pop    ecx
c00141d6:	58                   	pop    eax
c00141d7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00141da:	68 cc 9b 03 c0       	push   0xc0039bcc
c00141df:	e8 7c 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141e4:	58                   	pop    eax
c00141e5:	5a                   	pop    edx
c00141e6:	57                   	push   edi
c00141e7:	68 d7 9b 03 c0       	push   0xc0039bd7
c00141ec:	e8 6f 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141f1:	59                   	pop    ecx
c00141f2:	58                   	pop    eax
c00141f3:	56                   	push   esi
c00141f4:	68 e2 9b 03 c0       	push   0xc0039be2
c00141f9:	e8 62 8c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00141fe:	58                   	pop    eax
c00141ff:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001420a:	e8 d8 c3 ff ff       	call   c00105e7 <setActiveTerminal(VgaText*)>
c001420f:	58                   	pop    eax
c0014210:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014213:	5a                   	pop    edx
c0014214:	c1 e0 05             	shl    eax,0x5
c0014217:	05 c0 ad 03 c0       	add    eax,0xc003adc0
c001421c:	50                   	push   eax
c001421d:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014222:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014228:	e8 d9 c7 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c001422d:	59                   	pop    ecx
c001422e:	58                   	pop    eax
c001422f:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014234:	68 ed 9b 03 c0       	push   0xc0039bed
c0014239:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001423f:	e8 c2 c7 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c0014244:	58                   	pop    eax
c0014245:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c001424a:	5a                   	pop    edx
c001424b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001424e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014254:	e8 d3 c7 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014259:	59                   	pop    ecx
c001425a:	58                   	pop    eax
c001425b:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014260:	68 f5 9b 03 c0       	push   0xc0039bf5
c0014265:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001426b:	e8 96 c7 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c0014270:	58                   	pop    eax
c0014271:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014276:	5a                   	pop    edx
c0014277:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001427a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014280:	e8 a7 c7 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014285:	59                   	pop    ecx
c0014286:	58                   	pop    eax
c0014287:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c001428c:	68 fd 9b 03 c0       	push   0xc0039bfd
c0014291:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014297:	e8 6a c7 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c001429c:	58                   	pop    eax
c001429d:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00142a2:	5a                   	pop    edx
c00142a3:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00142a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ac:	e8 7b c7 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c00142b1:	59                   	pop    ecx
c00142b2:	58                   	pop    eax
c00142b3:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00142b8:	68 05 9c 03 c0       	push   0xc0039c05
c00142bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c3:	e8 3e c7 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00142c8:	58                   	pop    eax
c00142c9:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00142ce:	5a                   	pop    edx
c00142cf:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00142d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d8:	e8 4f c7 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c00142dd:	59                   	pop    ecx
c00142de:	58                   	pop    eax
c00142df:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00142e4:	68 0d 9c 03 c0       	push   0xc0039c0d
c00142e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ef:	e8 12 c7 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00142f4:	58                   	pop    eax
c00142f5:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00142fa:	5a                   	pop    edx
c00142fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014304:	e8 23 c7 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014309:	59                   	pop    ecx
c001430a:	58                   	pop    eax
c001430b:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014310:	68 15 9c 03 c0       	push   0xc0039c15
c0014315:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001431b:	e8 e6 c6 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c0014320:	58                   	pop    eax
c0014321:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014326:	5a                   	pop    edx
c0014327:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001432a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014330:	e8 f7 c6 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014335:	59                   	pop    ecx
c0014336:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c001433b:	5b                   	pop    ebx
c001433c:	68 1d 9c 03 c0       	push   0xc0039c1d
c0014341:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014347:	e8 ba c6 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c001434c:	58                   	pop    eax
c001434d:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014352:	5a                   	pop    edx
c0014353:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014357:	52                   	push   edx
c0014358:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001435e:	e8 c9 c6 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014363:	59                   	pop    ecx
c0014364:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014369:	5b                   	pop    ebx
c001436a:	68 26 9c 03 c0       	push   0xc0039c26
c001436f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014375:	e8 8c c6 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c001437a:	58                   	pop    eax
c001437b:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014380:	5a                   	pop    edx
c0014381:	57                   	push   edi
c0014382:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014388:	e8 9f c6 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c001438d:	59                   	pop    ecx
c001438e:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014393:	5b                   	pop    ebx
c0014394:	68 2e 9c 03 c0       	push   0xc0039c2e
c0014399:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001439f:	e8 62 c6 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00143a4:	5f                   	pop    edi
c00143a5:	58                   	pop    eax
c00143a6:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00143ab:	56                   	push   esi
c00143ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143b2:	e8 75 c6 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c00143b7:	58                   	pop    eax
c00143b8:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00143bd:	5a                   	pop    edx
c00143be:	68 36 9c 03 c0       	push   0xc0039c36
c00143c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c9:	e8 38 c6 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00143ce:	59                   	pop    ecx
c00143cf:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00143d4:	5b                   	pop    ebx
c00143d5:	55                   	push   ebp
c00143d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143dc:	e8 4b c6 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c00143e1:	5e                   	pop    esi
c00143e2:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00143e7:	5f                   	pop    edi
c00143e8:	68 3e 9c 03 c0       	push   0xc0039c3e
c00143ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f3:	e8 0e c6 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00143f8:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00143fd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014403:	e8 98 ab 00 00       	call   c001efa0 <CPU::readDR0()>
c0014408:	5d                   	pop    ebp
c0014409:	5a                   	pop    edx
c001440a:	50                   	push   eax
c001440b:	53                   	push   ebx
c001440c:	e8 1b c6 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014411:	59                   	pop    ecx
c0014412:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014417:	5b                   	pop    ebx
c0014418:	68 47 9c 03 c0       	push   0xc0039c47
c001441d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014423:	e8 de c5 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c0014428:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c001442d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014433:	e8 7a ab 00 00       	call   c001efb2 <CPU::readDR1()>
c0014438:	5e                   	pop    esi
c0014439:	5f                   	pop    edi
c001443a:	50                   	push   eax
c001443b:	53                   	push   ebx
c001443c:	e8 eb c5 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014441:	5d                   	pop    ebp
c0014442:	58                   	pop    eax
c0014443:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014448:	68 4f 9c 03 c0       	push   0xc0039c4f
c001444d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014453:	e8 ae c5 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c0014458:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c001445d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014463:	e8 5c ab 00 00       	call   c001efc4 <CPU::readDR2()>
c0014468:	5a                   	pop    edx
c0014469:	59                   	pop    ecx
c001446a:	50                   	push   eax
c001446b:	53                   	push   ebx
c001446c:	e8 bb c5 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014471:	5b                   	pop    ebx
c0014472:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014477:	5e                   	pop    esi
c0014478:	68 57 9c 03 c0       	push   0xc0039c57
c001447d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014483:	e8 7e c5 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c0014488:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c001448d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014493:	e8 3e ab 00 00       	call   c001efd6 <CPU::readDR3()>
c0014498:	5f                   	pop    edi
c0014499:	5d                   	pop    ebp
c001449a:	50                   	push   eax
c001449b:	53                   	push   ebx
c001449c:	e8 8b c5 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c00144a1:	58                   	pop    eax
c00144a2:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00144a7:	5a                   	pop    edx
c00144a8:	68 5f 9c 03 c0       	push   0xc0039c5f
c00144ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b3:	e8 4e c5 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00144b8:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00144bd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144c3:	e8 20 ab 00 00       	call   c001efe8 <CPU::readDR6()>
c00144c8:	59                   	pop    ecx
c00144c9:	5e                   	pop    esi
c00144ca:	50                   	push   eax
c00144cb:	53                   	push   ebx
c00144cc:	e8 5b c5 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c00144d1:	5f                   	pop    edi
c00144d2:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00144d7:	5d                   	pop    ebp
c00144d8:	68 67 9c 03 c0       	push   0xc0039c67
c00144dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144e3:	e8 1e c5 ff ff       	call   c0010a06 <VgaText::puts(char const*)>
c00144e8:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c00144ed:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144f3:	e8 02 ab 00 00       	call   c001effa <CPU::readDR7()>
c00144f8:	5a                   	pop    edx
c00144f9:	59                   	pop    ecx
c00144fa:	50                   	push   eax
c00144fb:	53                   	push   ebx
c00144fc:	e8 2b c5 ff ff       	call   c0010a2c <VgaText::putx(unsigned int)>
c0014501:	fa                   	cli    
c0014502:	f4                   	hlt    
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	eb fe                	jmp    c0014506 <displayDebugInfo(regs*)+0x3e0>

c0014508 <gpFault(regs*, void*)>:
c0014508:	53                   	push   ebx
c0014509:	83 ec 14             	sub    esp,0x14
c001450c:	c7 05 e8 bd 03 c0 fb 86 01 c0 	mov    DWORD PTR ds:0xc003bde8,0xc00186fb
c0014516:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001451a:	53                   	push   ebx
c001451b:	e8 db 41 00 00       	call   c00186fb <vm8086FaultHandler(regs*)>
c0014520:	83 c4 10             	add    esp,0x10
c0014523:	84 c0                	test   al,al
c0014525:	74 05                	je     c001452c <gpFault(regs*, void*)+0x24>
c0014527:	83 c4 08             	add    esp,0x8
c001452a:	5b                   	pop    ebx
c001452b:	c3                   	ret    
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	68 6f 9c 03 c0       	push   0xc0039c6f
c0014534:	e8 27 89 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0014539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001453c:	e8 e5 fb ff ff       	call   c0014126 <displayDebugInfo(regs*)>

c0014541 <pgFault(regs*, void*)>:
c0014541:	83 ec 18             	sub    esp,0x18
c0014544:	68 8a 9c 03 c0       	push   0xc0039c8a
c0014549:	e8 12 89 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001454e:	58                   	pop    eax
c001454f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014553:	e8 ce fb ff ff       	call   c0014126 <displayDebugInfo(regs*)>

c0014558 <otherISRHandler(regs*, void*)>:
c0014558:	53                   	push   ebx
c0014559:	83 ec 0c             	sub    esp,0xc
c001455c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014560:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014563:	50                   	push   eax
c0014564:	50                   	push   eax
c0014565:	68 97 9c 03 c0       	push   0xc0039c97
c001456a:	e8 f1 88 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001456f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014572:	e8 af fb ff ff       	call   c0014126 <displayDebugInfo(regs*)>

c0014577 <opcodeFault(regs*, void*)>:
c0014577:	53                   	push   ebx
c0014578:	83 ec 08             	sub    esp,0x8
c001457b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001457f:	e8 92 2b 00 00       	call   c0017116 <thisCPU()>
c0014584:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001458b:	74 16                	je     c00145a3 <opcodeFault(regs*, void*)+0x2c>
c001458d:	83 ec 0c             	sub    esp,0xc
c0014590:	68 14 9b 03 c0       	push   0xc0039b14
c0014595:	e8 c6 88 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001459a:	83 43 38 40          	add    DWORD PTR [ebx+0x38],0x40
c001459e:	83 c4 18             	add    esp,0x18
c00145a1:	5b                   	pop    ebx
c00145a2:	c3                   	ret    
c00145a3:	83 ec 0c             	sub    esp,0xc
c00145a6:	68 b4 9c 03 c0       	push   0xc0039cb4
c00145ab:	e8 b0 88 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00145b0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00145b3:	c1 e0 04             	shl    eax,0x4
c00145b6:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00145b9:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00145bd:	89 14 24             	mov    DWORD PTR [esp],edx
c00145c0:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00145c4:	52                   	push   edx
c00145c5:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00145c9:	52                   	push   edx
c00145ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00145cd:	50                   	push   eax
c00145ce:	68 38 9b 03 c0       	push   0xc0039b38
c00145d3:	e8 88 88 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00145d8:	83 c4 14             	add    esp,0x14
c00145db:	53                   	push   ebx
c00145dc:	e8 45 fb ff ff       	call   c0014126 <displayDebugInfo(regs*)>

c00145e1 <displayProgramFault(char const*)>:
c00145e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145e9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00145ef:	85 c0                	test   eax,eax
c00145f1:	74 15                	je     c0014608 <displayProgramFault(char const*)+0x27>
c00145f3:	83 ec 0c             	sub    esp,0xc
c00145f6:	6a 04                	push   0x4
c00145f8:	6a 0f                	push   0xf
c00145fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145fe:	50                   	push   eax
c00145ff:	e8 c4 c0 ff ff       	call   c00106c8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014604:	83 c4 1c             	add    esp,0x1c
c0014607:	c3                   	ret    
c0014608:	c3                   	ret    
c0014609:	90                   	nop

c001460a <InterruptController::convertLegacyIRQNumber(int)>:
c001460a:	53                   	push   ebx
c001460b:	83 ec 14             	sub    esp,0x14
c001460e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014616:	e8 e1 f3 ff ff       	call   c00139fc <Device::getName()>
c001461b:	83 c4 10             	add    esp,0x10
c001461e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014621:	74 07                	je     c001462a <InterruptController::convertLegacyIRQNumber(int)+0x20>
c0014623:	89 d8                	mov    eax,ebx
c0014625:	83 c4 08             	add    esp,0x8
c0014628:	5b                   	pop    ebx
c0014629:	c3                   	ret    
c001462a:	83 fb 0f             	cmp    ebx,0xf
c001462d:	7f 0e                	jg     c001463d <InterruptController::convertLegacyIRQNumber(int)+0x33>
c001462f:	0f b6 9b 60 b0 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4fa0]
c0014636:	83 c4 08             	add    esp,0x8
c0014639:	89 d8                	mov    eax,ebx
c001463b:	5b                   	pop    ebx
c001463c:	c3                   	ret    
c001463d:	83 ec 0c             	sub    esp,0xc
c0014640:	68 64 9a 03 c0       	push   0xc0039a64
c0014645:	e8 34 89 ff ff       	call   c000cf7e <panic(char const*)>
c001464a:	89 d8                	mov    eax,ebx
c001464c:	83 c4 10             	add    esp,0x10
c001464f:	83 c4 08             	add    esp,0x8
c0014652:	5b                   	pop    ebx
c0014653:	c3                   	ret    

c0014654 <setupInterruptController()>:
c0014654:	56                   	push   esi
c0014655:	53                   	push   ebx
c0014656:	51                   	push   ecx
c0014657:	e8 b7 2a 00 00       	call   c0017113 <getCPUNumber()>
c001465c:	85 c0                	test   eax,eax
c001465e:	0f 85 10 02 00 00    	jne    c0014874 <setupInterruptController()+0x220>
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001466c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014672:	68 58 21 00 00       	push   0x2158
c0014677:	83 e0 01             	and    eax,0x1
c001467a:	89 c6                	mov    esi,eax
c001467c:	e8 8f dd ff ff       	call   c0012410 <operator new(unsigned long)>
c0014681:	89 04 24             	mov    DWORD PTR [esp],eax
c0014684:	89 c3                	mov    ebx,eax
c0014686:	e8 e5 94 00 00       	call   c001db70 <PIC::PIC()>
c001468b:	6a 00                	push   0x0
c001468d:	6a 00                	push   0x0
c001468f:	6a 00                	push   0x0
c0014691:	53                   	push   ebx
c0014692:	e8 1d 98 00 00       	call   c001deb4 <PIC::open(int, int, void*)>
c0014697:	83 c4 20             	add    esp,0x20
c001469a:	89 f0                	mov    eax,esi
c001469c:	84 c0                	test   al,al
c001469e:	0f 85 92 01 00 00    	jne    c0014836 <setupInterruptController()+0x1e2>
c00146a4:	83 ec 08             	sub    esp,0x8
c00146a7:	53                   	push   ebx
c00146a8:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c00146ae:	e8 67 f0 ff ff       	call   c001371a <Device::addChild(Device*)>
c00146b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146b5:	6a 00                	push   0x0
c00146b7:	68 58 45 01 c0       	push   0xc0014558
c00146bc:	6a 00                	push   0x0
c00146be:	53                   	push   ebx
c00146bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146c2:	83 c4 20             	add    esp,0x20
c00146c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146c7:	6a 00                	push   0x0
c00146c9:	68 58 45 01 c0       	push   0xc0014558
c00146ce:	6a 01                	push   0x1
c00146d0:	53                   	push   ebx
c00146d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146d6:	6a 00                	push   0x0
c00146d8:	68 89 3f 01 c0       	push   0xc0013f89
c00146dd:	6a 02                	push   0x2
c00146df:	53                   	push   ebx
c00146e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146e3:	83 c4 20             	add    esp,0x20
c00146e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146e8:	6a 00                	push   0x0
c00146ea:	68 58 45 01 c0       	push   0xc0014558
c00146ef:	6a 03                	push   0x3
c00146f1:	53                   	push   ebx
c00146f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00146f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146f7:	6a 00                	push   0x0
c00146f9:	68 58 45 01 c0       	push   0xc0014558
c00146fe:	6a 04                	push   0x4
c0014700:	53                   	push   ebx
c0014701:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014704:	83 c4 20             	add    esp,0x20
c0014707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014709:	6a 00                	push   0x0
c001470b:	68 58 45 01 c0       	push   0xc0014558
c0014710:	6a 05                	push   0x5
c0014712:	53                   	push   ebx
c0014713:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014716:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014718:	6a 00                	push   0x0
c001471a:	68 77 45 01 c0       	push   0xc0014577
c001471f:	6a 06                	push   0x6
c0014721:	53                   	push   ebx
c0014722:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014725:	83 c4 20             	add    esp,0x20
c0014728:	8b 03                	mov    eax,DWORD PTR [ebx]
c001472a:	6a 00                	push   0x0
c001472c:	68 58 45 01 c0       	push   0xc0014558
c0014731:	6a 07                	push   0x7
c0014733:	53                   	push   ebx
c0014734:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014737:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014739:	6a 00                	push   0x0
c001473b:	68 b0 3d 01 c0       	push   0xc0013db0
c0014740:	6a 08                	push   0x8
c0014742:	53                   	push   ebx
c0014743:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014746:	83 c4 20             	add    esp,0x20
c0014749:	8b 03                	mov    eax,DWORD PTR [ebx]
c001474b:	6a 00                	push   0x0
c001474d:	68 58 45 01 c0       	push   0xc0014558
c0014752:	6a 09                	push   0x9
c0014754:	53                   	push   ebx
c0014755:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014758:	8b 03                	mov    eax,DWORD PTR [ebx]
c001475a:	6a 00                	push   0x0
c001475c:	68 58 45 01 c0       	push   0xc0014558
c0014761:	6a 0a                	push   0xa
c0014763:	53                   	push   ebx
c0014764:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014767:	83 c4 20             	add    esp,0x20
c001476a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001476c:	6a 00                	push   0x0
c001476e:	68 58 45 01 c0       	push   0xc0014558
c0014773:	6a 0b                	push   0xb
c0014775:	53                   	push   ebx
c0014776:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014779:	8b 03                	mov    eax,DWORD PTR [ebx]
c001477b:	6a 00                	push   0x0
c001477d:	68 58 45 01 c0       	push   0xc0014558
c0014782:	6a 0c                	push   0xc
c0014784:	53                   	push   ebx
c0014785:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014788:	83 c4 20             	add    esp,0x20
c001478b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001478d:	6a 00                	push   0x0
c001478f:	68 08 45 01 c0       	push   0xc0014508
c0014794:	6a 0d                	push   0xd
c0014796:	53                   	push   ebx
c0014797:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001479a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001479c:	6a 00                	push   0x0
c001479e:	68 41 45 01 c0       	push   0xc0014541
c00147a3:	6a 0e                	push   0xe
c00147a5:	53                   	push   ebx
c00147a6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147a9:	83 c4 20             	add    esp,0x20
c00147ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ae:	6a 00                	push   0x0
c00147b0:	68 58 45 01 c0       	push   0xc0014558
c00147b5:	6a 0f                	push   0xf
c00147b7:	53                   	push   ebx
c00147b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147bd:	6a 00                	push   0x0
c00147bf:	68 58 45 01 c0       	push   0xc0014558
c00147c4:	6a 10                	push   0x10
c00147c6:	53                   	push   ebx
c00147c7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147ca:	83 c4 20             	add    esp,0x20
c00147cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147cf:	6a 00                	push   0x0
c00147d1:	68 58 45 01 c0       	push   0xc0014558
c00147d6:	6a 11                	push   0x11
c00147d8:	53                   	push   ebx
c00147d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147de:	6a 00                	push   0x0
c00147e0:	68 58 45 01 c0       	push   0xc0014558
c00147e5:	6a 12                	push   0x12
c00147e7:	53                   	push   ebx
c00147e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147eb:	83 c4 20             	add    esp,0x20
c00147ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147f0:	6a 00                	push   0x0
c00147f2:	68 58 45 01 c0       	push   0xc0014558
c00147f7:	6a 13                	push   0x13
c00147f9:	53                   	push   ebx
c00147fa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ff:	6a 00                	push   0x0
c0014801:	68 58 45 01 c0       	push   0xc0014558
c0014806:	6a 14                	push   0x14
c0014808:	53                   	push   ebx
c0014809:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001480c:	83 c4 20             	add    esp,0x20
c001480f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014811:	6a 00                	push   0x0
c0014813:	68 58 45 01 c0       	push   0xc0014558
c0014818:	6a 1e                	push   0x1e
c001481a:	53                   	push   ebx
c001481b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001481e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014820:	6a 00                	push   0x0
c0014822:	68 be fd 00 c0       	push   0xc000fdbe
c0014827:	6a 60                	push   0x60
c0014829:	53                   	push   ebx
c001482a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001482d:	83 c4 20             	add    esp,0x20
c0014830:	89 d8                	mov    eax,ebx
c0014832:	5a                   	pop    edx
c0014833:	5b                   	pop    ebx
c0014834:	5e                   	pop    esi
c0014835:	c3                   	ret    
c0014836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014838:	6a 00                	push   0x0
c001483a:	6a 00                	push   0x0
c001483c:	6a 00                	push   0x0
c001483e:	53                   	push   ebx
c001483f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014842:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014844:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014847:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001484a:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0014851:	e8 ba db ff ff       	call   c0012410 <operator new(unsigned long)>
c0014856:	89 04 24             	mov    DWORD PTR [esp],eax
c0014859:	89 c3                	mov    ebx,eax
c001485b:	e8 4e 8e 00 00       	call   c001d6ae <APIC::APIC()>
c0014860:	6a 00                	push   0x0
c0014862:	6a 00                	push   0x0
c0014864:	6a 00                	push   0x0
c0014866:	53                   	push   ebx
c0014867:	e8 60 8d 00 00       	call   c001d5cc <APIC::open(int, int, void*)>
c001486c:	83 c4 20             	add    esp,0x20
c001486f:	e9 30 fe ff ff       	jmp    c00146a4 <setupInterruptController()+0x50>
c0014874:	83 ec 0c             	sub    esp,0xc
c0014877:	68 58 21 00 00       	push   0x2158
c001487c:	e8 8f db ff ff       	call   c0012410 <operator new(unsigned long)>
c0014881:	89 04 24             	mov    DWORD PTR [esp],eax
c0014884:	89 c3                	mov    ebx,eax
c0014886:	e8 23 8e 00 00       	call   c001d6ae <APIC::APIC()>
c001488b:	6a 00                	push   0x0
c001488d:	6a 00                	push   0x0
c001488f:	6a 00                	push   0x0
c0014891:	53                   	push   ebx
c0014892:	e8 35 8d 00 00       	call   c001d5cc <APIC::open(int, int, void*)>
c0014897:	83 c4 18             	add    esp,0x18
c001489a:	53                   	push   ebx
c001489b:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c00148a1:	e8 74 ee ff ff       	call   c001371a <Device::addChild(Device*)>
c00148a6:	83 c4 10             	add    esp,0x10
c00148a9:	89 d8                	mov    eax,ebx
c00148ab:	5a                   	pop    edx
c00148ac:	5b                   	pop    ebx
c00148ad:	5e                   	pop    esi
c00148ae:	c3                   	ret    
c00148af:	90                   	nop

c00148b0 <startGUI(void*)>:
c00148b0:	55                   	push   ebp
c00148b1:	89 e5                	mov    ebp,esp
c00148b3:	53                   	push   ebx
c00148b4:	83 ec 04             	sub    esp,0x4
c00148b7:	e8 48 9a ff ff       	call   c000e304 <unlockScheduler()>
c00148bc:	e8 2c 9a ff ff       	call   c000e2ed <getIRQNestingLevel()>
c00148c1:	83 ec 08             	sub    esp,0x8
c00148c4:	50                   	push   eax
c00148c5:	68 10 9d 03 c0       	push   0xc0039d10
c00148ca:	e8 91 85 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00148cf:	83 c4 10             	add    esp,0x10
c00148d2:	8b 1d 08 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b908
c00148d8:	83 ec 0c             	sub    esp,0xc
c00148db:	68 2a 9d 03 c0       	push   0xc0039d2a
c00148e0:	e8 5b 7d ff ff       	call   c000c640 <loadDLL(char const*)>
c00148e5:	83 c4 10             	add    esp,0x10
c00148e8:	83 ec 08             	sub    esp,0x8
c00148eb:	53                   	push   ebx
c00148ec:	50                   	push   eax
c00148ed:	e8 17 7e ff ff       	call   c000c709 <executeDLL(unsigned long, void*)>
c00148f2:	83 c4 10             	add    esp,0x10
c00148f5:	8b 1d 08 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b908
c00148fb:	83 ec 0c             	sub    esp,0xc
c00148fe:	68 44 9d 03 c0       	push   0xc0039d44
c0014903:	e8 38 7d ff ff       	call   c000c640 <loadDLL(char const*)>
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	83 ec 08             	sub    esp,0x8
c001490e:	53                   	push   ebx
c001490f:	50                   	push   eax
c0014910:	e8 f4 7d ff ff       	call   c000c709 <executeDLL(unsigned long, void*)>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	90                   	nop
c0014919:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001491c:	c9                   	leave  
c001491d:	c3                   	ret    

c001491e <sendKeyToTerminal(unsigned char)>:
c001491e:	55                   	push   ebp
c001491f:	89 e5                	mov    ebp,esp
c0014921:	83 ec 28             	sub    esp,0x28
c0014924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014927:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001492a:	a1 a4 bd 03 c0       	mov    eax,ds:0xc003bda4
c001492f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014933:	83 ec 08             	sub    esp,0x8
c0014936:	52                   	push   edx
c0014937:	50                   	push   eax
c0014938:	e8 c7 c2 ff ff       	call   c0010c04 <VgaText::receiveKey(unsigned char)>
c001493d:	83 c4 10             	add    esp,0x10
c0014940:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014944:	75 41                	jne    c0014987 <sendKeyToTerminal(unsigned char)+0x69>
c0014946:	e8 de 99 ff ff       	call   c000e329 <lockStuff()>
c001494b:	a1 00 be 03 c0       	mov    eax,ds:0xc003be00
c0014950:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014953:	c7 05 00 be 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003be00,0x0
c001495d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014961:	74 1f                	je     c0014982 <sendKeyToTerminal(unsigned char)+0x64>
c0014963:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014966:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014969:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001496c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001496f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014972:	83 ec 0c             	sub    esp,0xc
c0014975:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014978:	e8 a9 a1 ff ff       	call   c000eb26 <unblockTask(ThreadControlBlock*)>
c001497d:	83 c4 10             	add    esp,0x10
c0014980:	eb db                	jmp    c001495d <sendKeyToTerminal(unsigned char)+0x3f>
c0014982:	e8 34 9d ff ff       	call   c000e6bb <unlockStuff()>
c0014987:	90                   	nop
c0014988:	c9                   	leave  
c0014989:	c3                   	ret    

c001498a <sendKeyboardToken(KeyboardToken)>:
c001498a:	55                   	push   ebp
c001498b:	89 e5                	mov    ebp,esp
c001498d:	83 ec 18             	sub    esp,0x18
c0014990:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014996:	0f b7 c0             	movzx  eax,ax
c0014999:	83 f2 01             	xor    edx,0x1
c001499c:	88 90 20 be 03 c0    	mov    BYTE PTR [eax-0x3ffc41e0],dl
c00149a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a5:	66 3d 03 02          	cmp    ax,0x203
c00149a9:	75 07                	jne    c00149b2 <sendKeyboardToken(KeyboardToken)+0x28>
c00149ab:	a0 20 bf 03 c0       	mov    al,ds:0xc003bf20
c00149b0:	84 c0                	test   al,al
c00149b2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00149b6:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00149b9:	a0 28 c2 03 c0       	mov    al,ds:0xc003c228
c00149be:	38 c2                	cmp    dl,al
c00149c0:	74 1c                	je     c00149de <sendKeyboardToken(KeyboardToken)+0x54>
c00149c2:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00149c5:	a2 28 c2 03 c0       	mov    ds:0xc003c228,al
c00149ca:	a0 28 c2 03 c0       	mov    al,ds:0xc003c228
c00149cf:	0f b6 c0             	movzx  eax,al
c00149d2:	83 ec 0c             	sub    esp,0xc
c00149d5:	50                   	push   eax
c00149d6:	e8 97 b4 ff ff       	call   c000fe72 <setTerminalScrollLock(bool)>
c00149db:	83 c4 10             	add    esp,0x10
c00149de:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00149e1:	84 c0                	test   al,al
c00149e3:	0f 84 ae 00 00 00    	je     c0014a97 <sendKeyboardToken(KeyboardToken)+0x10d>
c00149e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ec:	66 3d 10 03          	cmp    ax,0x310
c00149f0:	75 06                	jne    c00149f8 <sendKeyboardToken(KeyboardToken)+0x6e>
c00149f2:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00149f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fb:	66 3d 11 03          	cmp    ax,0x311
c00149ff:	75 06                	jne    c0014a07 <sendKeyboardToken(KeyboardToken)+0x7d>
c0014a01:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a0a:	66 3d 12 03          	cmp    ax,0x312
c0014a0e:	75 06                	jne    c0014a16 <sendKeyboardToken(KeyboardToken)+0x8c>
c0014a10:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a19:	66 3d 13 03          	cmp    ax,0x313
c0014a1d:	75 06                	jne    c0014a25 <sendKeyboardToken(KeyboardToken)+0x9b>
c0014a1f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a28:	66 3d 14 03          	cmp    ax,0x314
c0014a2c:	75 06                	jne    c0014a34 <sendKeyboardToken(KeyboardToken)+0xaa>
c0014a2e:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a37:	66 3d 15 03          	cmp    ax,0x315
c0014a3b:	75 06                	jne    c0014a43 <sendKeyboardToken(KeyboardToken)+0xb9>
c0014a3d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a46:	66 3d 16 03          	cmp    ax,0x316
c0014a4a:	75 06                	jne    c0014a52 <sendKeyboardToken(KeyboardToken)+0xc8>
c0014a4c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a55:	66 3d 17 03          	cmp    ax,0x317
c0014a59:	75 06                	jne    c0014a61 <sendKeyboardToken(KeyboardToken)+0xd7>
c0014a5b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014a61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a64:	66 3d 18 03          	cmp    ax,0x318
c0014a68:	75 06                	jne    c0014a70 <sendKeyboardToken(KeyboardToken)+0xe6>
c0014a6a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a73:	66 3d 19 03          	cmp    ax,0x319
c0014a77:	75 06                	jne    c0014a7f <sendKeyboardToken(KeyboardToken)+0xf5>
c0014a79:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a82:	66 3d 1a 03          	cmp    ax,0x31a
c0014a86:	0f 85 c9 00 00 00    	jne    c0014b55 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014a8c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014a92:	e9 be 00 00 00       	jmp    c0014b55 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9a:	66 3d 10 03          	cmp    ax,0x310
c0014a9e:	75 0a                	jne    c0014aaa <sendKeyboardToken(KeyboardToken)+0x120>
c0014aa0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014aa6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aad:	66 3d 11 03          	cmp    ax,0x311
c0014ab1:	75 0a                	jne    c0014abd <sendKeyboardToken(KeyboardToken)+0x133>
c0014ab3:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014ab9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014abd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac0:	66 3d 12 03          	cmp    ax,0x312
c0014ac4:	75 0a                	jne    c0014ad0 <sendKeyboardToken(KeyboardToken)+0x146>
c0014ac6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014acc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad3:	66 3d 13 03          	cmp    ax,0x313
c0014ad7:	75 0a                	jne    c0014ae3 <sendKeyboardToken(KeyboardToken)+0x159>
c0014ad9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014adf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae6:	66 3d 14 03          	cmp    ax,0x314
c0014aea:	75 0a                	jne    c0014af6 <sendKeyboardToken(KeyboardToken)+0x16c>
c0014aec:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014af2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af9:	66 3d 15 03          	cmp    ax,0x315
c0014afd:	75 0a                	jne    c0014b09 <sendKeyboardToken(KeyboardToken)+0x17f>
c0014aff:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014b05:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b0c:	66 3d 16 03          	cmp    ax,0x316
c0014b10:	75 0a                	jne    c0014b1c <sendKeyboardToken(KeyboardToken)+0x192>
c0014b12:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014b18:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1f:	66 3d 17 03          	cmp    ax,0x317
c0014b23:	75 0a                	jne    c0014b2f <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014b25:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014b2b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b32:	66 3d 18 03          	cmp    ax,0x318
c0014b36:	75 0a                	jne    c0014b42 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014b38:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014b3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b45:	66 3d 19 03          	cmp    ax,0x319
c0014b49:	75 0a                	jne    c0014b55 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b4b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014b51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b58:	66 3d 00 02          	cmp    ax,0x200
c0014b5c:	75 2a                	jne    c0014b88 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014b5e:	a0 20 c2 03 c0       	mov    al,ds:0xc003c220
c0014b63:	83 f0 01             	xor    eax,0x1
c0014b66:	84 c0                	test   al,al
c0014b68:	74 1e                	je     c0014b88 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014b6a:	a1 5c bb 03 c0       	mov    eax,ds:0xc003bb5c
c0014b6f:	6a 01                	push   0x1
c0014b71:	6a 00                	push   0x0
c0014b73:	68 b0 48 01 c0       	push   0xc00148b0
c0014b78:	50                   	push   eax
c0014b79:	e8 ae 98 ff ff       	call   c000e42c <Process::createThread(void (*)(void*), void*, int)>
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	c6 05 20 c2 03 c0 01 	mov    BYTE PTR ds:0xc003c220,0x1
c0014b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8b:	66 3d 1d 03          	cmp    ax,0x31d
c0014b8f:	75 06                	jne    c0014b97 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014b91:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9a:	66 3d 1c 03          	cmp    ax,0x31c
c0014b9e:	75 06                	jne    c0014ba6 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014ba0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba9:	66 3d 1b 03          	cmp    ax,0x31b
c0014bad:	75 06                	jne    c0014bb5 <sendKeyboardToken(KeyboardToken)+0x22b>
c0014baf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb8:	66 3d 1e 03          	cmp    ax,0x31e
c0014bbc:	75 06                	jne    c0014bc4 <sendKeyboardToken(KeyboardToken)+0x23a>
c0014bbe:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc7:	66 3d 1f 03          	cmp    ax,0x31f
c0014bcb:	75 06                	jne    c0014bd3 <sendKeyboardToken(KeyboardToken)+0x249>
c0014bcd:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014bd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd6:	66 3d 1a 03          	cmp    ax,0x31a
c0014bda:	75 06                	jne    c0014be2 <sendKeyboardToken(KeyboardToken)+0x258>
c0014bdc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014be2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014be6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014be9:	83 f0 01             	xor    eax,0x1
c0014bec:	84 c0                	test   al,al
c0014bee:	74 77                	je     c0014c67 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014bf0:	a0 21 bf 03 c0       	mov    al,ds:0xc003bf21
c0014bf5:	84 c0                	test   al,al
c0014bf7:	74 41                	je     c0014c3a <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014bf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014bfd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014c01:	74 2b                	je     c0014c2e <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014c03:	8b 15 24 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c224
c0014c09:	89 d0                	mov    eax,edx
c0014c0b:	c1 e0 02             	shl    eax,0x2
c0014c0e:	01 d0                	add    eax,edx
c0014c10:	01 c0                	add    eax,eax
c0014c12:	a3 24 c2 03 c0       	mov    ds:0xc003c224,eax
c0014c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1a:	0f b7 c0             	movzx  eax,ax
c0014c1d:	8d 50 d0             	lea    edx,[eax-0x30]
c0014c20:	a1 24 c2 03 c0       	mov    eax,ds:0xc003c224
c0014c25:	01 d0                	add    eax,edx
c0014c27:	a3 24 c2 03 c0       	mov    ds:0xc003c224,eax
c0014c2c:	eb 6d                	jmp    c0014c9b <sendKeyboardToken(KeyboardToken)+0x311>
c0014c2e:	c7 05 24 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c224,0x0
c0014c38:	eb 61                	jmp    c0014c9b <sendKeyboardToken(KeyboardToken)+0x311>
c0014c3a:	a1 24 c2 03 c0       	mov    eax,ds:0xc003c224
c0014c3f:	85 c0                	test   eax,eax
c0014c41:	74 18                	je     c0014c5b <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014c43:	a1 24 c2 03 c0       	mov    eax,ds:0xc003c224
c0014c48:	0f b6 c0             	movzx  eax,al
c0014c4b:	83 ec 0c             	sub    esp,0xc
c0014c4e:	50                   	push   eax
c0014c4f:	e8 ca fc ff ff       	call   c001491e <sendKeyToTerminal(unsigned char)>
c0014c54:	83 c4 10             	add    esp,0x10
c0014c57:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c5b:	c7 05 24 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c224,0x0
c0014c65:	eb 34                	jmp    c0014c9b <sendKeyboardToken(KeyboardToken)+0x311>
c0014c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c6a:	66 3d 01 01          	cmp    ax,0x101
c0014c6e:	75 2b                	jne    c0014c9b <sendKeyboardToken(KeyboardToken)+0x311>
c0014c70:	a1 24 c2 03 c0       	mov    eax,ds:0xc003c224
c0014c75:	85 c0                	test   eax,eax
c0014c77:	74 18                	je     c0014c91 <sendKeyboardToken(KeyboardToken)+0x307>
c0014c79:	a1 24 c2 03 c0       	mov    eax,ds:0xc003c224
c0014c7e:	0f b6 c0             	movzx  eax,al
c0014c81:	83 ec 0c             	sub    esp,0xc
c0014c84:	50                   	push   eax
c0014c85:	e8 94 fc ff ff       	call   c001491e <sendKeyToTerminal(unsigned char)>
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c91:	c7 05 24 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c224,0x0
c0014c9b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014c9e:	83 f0 01             	xor    eax,0x1
c0014ca1:	84 c0                	test   al,al
c0014ca3:	74 4c                	je     c0014cf1 <sendKeyboardToken(KeyboardToken)+0x367>
c0014ca5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014ca8:	83 f0 01             	xor    eax,0x1
c0014cab:	84 c0                	test   al,al
c0014cad:	74 42                	je     c0014cf1 <sendKeyboardToken(KeyboardToken)+0x367>
c0014caf:	a0 20 bf 03 c0       	mov    al,ds:0xc003bf20
c0014cb4:	83 f0 01             	xor    eax,0x1
c0014cb7:	84 c0                	test   al,al
c0014cb9:	74 36                	je     c0014cf1 <sendKeyboardToken(KeyboardToken)+0x367>
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	66 83 f8 1f          	cmp    ax,0x1f
c0014cc2:	76 09                	jbe    c0014ccd <sendKeyboardToken(KeyboardToken)+0x343>
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	66 83 f8 7e          	cmp    ax,0x7e
c0014ccb:	76 12                	jbe    c0014cdf <sendKeyboardToken(KeyboardToken)+0x355>
c0014ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd0:	66 83 f8 0a          	cmp    ax,0xa
c0014cd4:	74 09                	je     c0014cdf <sendKeyboardToken(KeyboardToken)+0x355>
c0014cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd9:	66 83 f8 08          	cmp    ax,0x8
c0014cdd:	75 12                	jne    c0014cf1 <sendKeyboardToken(KeyboardToken)+0x367>
c0014cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce2:	0f b6 c0             	movzx  eax,al
c0014ce5:	83 ec 0c             	sub    esp,0xc
c0014ce8:	50                   	push   eax
c0014ce9:	e8 30 fc ff ff       	call   c001491e <sendKeyToTerminal(unsigned char)>
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014cf4:	83 f0 01             	xor    eax,0x1
c0014cf7:	84 c0                	test   al,al
c0014cf9:	74 4f                	je     c0014d4a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014cfb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014cfe:	83 f0 01             	xor    eax,0x1
c0014d01:	84 c0                	test   al,al
c0014d03:	74 45                	je     c0014d4a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d05:	a0 20 bf 03 c0       	mov    al,ds:0xc003bf20
c0014d0a:	84 c0                	test   al,al
c0014d0c:	74 3c                	je     c0014d4a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d11:	66 83 f8 3f          	cmp    ax,0x3f
c0014d15:	76 33                	jbe    c0014d4a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1a:	66 83 f8 7f          	cmp    ax,0x7f
c0014d1e:	77 2a                	ja     c0014d4a <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d23:	88 c2                	mov    dl,al
c0014d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d28:	66 83 f8 5f          	cmp    ax,0x5f
c0014d2c:	76 04                	jbe    c0014d32 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014d2e:	b0 20                	mov    al,0x20
c0014d30:	eb 02                	jmp    c0014d34 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014d32:	b0 00                	mov    al,0x0
c0014d34:	29 c2                	sub    edx,eax
c0014d36:	88 d0                	mov    al,dl
c0014d38:	83 e8 40             	sub    eax,0x40
c0014d3b:	0f b6 c0             	movzx  eax,al
c0014d3e:	83 ec 0c             	sub    esp,0xc
c0014d41:	50                   	push   eax
c0014d42:	e8 d7 fb ff ff       	call   c001491e <sendKeyToTerminal(unsigned char)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4d:	66 3d 00 03          	cmp    ax,0x300
c0014d51:	75 0f                	jne    c0014d62 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014d53:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d56:	83 f0 01             	xor    eax,0x1
c0014d59:	84 c0                	test   al,al
c0014d5b:	74 05                	je     c0014d62 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014d5d:	e8 37 b9 ff ff       	call   c0010699 <doTerminalCycle()>
c0014d62:	90                   	nop
c0014d63:	c9                   	leave  
c0014d64:	c3                   	ret    

c0014d65 <clearInternalKeybuffer(VgaText*)>:
c0014d65:	55                   	push   ebp
c0014d66:	89 e5                	mov    ebp,esp
c0014d68:	83 ec 08             	sub    esp,0x8
c0014d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d6e:	05 34 11 00 00       	add    eax,0x1134
c0014d73:	83 ec 0c             	sub    esp,0xc
c0014d76:	50                   	push   eax
c0014d77:	e8 85 b9 fe ff       	call   c0000701 <strlen>
c0014d7c:	83 c4 10             	add    esp,0x10
c0014d7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014d82:	81 c2 34 11 00 00    	add    edx,0x1134
c0014d88:	83 ec 04             	sub    esp,0x4
c0014d8b:	50                   	push   eax
c0014d8c:	6a 00                	push   0x0
c0014d8e:	52                   	push   edx
c0014d8f:	e8 44 b9 fe ff       	call   c00006d8 <memset>
c0014d94:	83 c4 10             	add    esp,0x10
c0014d97:	90                   	nop
c0014d98:	c9                   	leave  
c0014d99:	c3                   	ret    

c0014d9a <readKeyboard(VgaText*, char*, unsigned long)>:
c0014d9a:	55                   	push   ebp
c0014d9b:	89 e5                	mov    ebp,esp
c0014d9d:	83 ec 18             	sub    esp,0x18
c0014da0:	fb                   	sti    
c0014da1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014da8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014dac:	74 77                	je     c0014e25 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db1:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014db7:	84 c0                	test   al,al
c0014db9:	75 02                	jne    c0014dbd <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014dbb:	eb f1                	jmp    c0014dae <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014dbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014dc0:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014dc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014dc9:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014dcf:	88 10                	mov    BYTE PTR [eax],dl
c0014dd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd4:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014dda:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de0:	05 34 11 00 00       	add    eax,0x1134
c0014de5:	83 ec 0c             	sub    esp,0xc
c0014de8:	50                   	push   eax
c0014de9:	e8 13 b9 fe ff       	call   c0000701 <strlen>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014df4:	81 c2 34 11 00 00    	add    edx,0x1134
c0014dfa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014dfd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e00:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e06:	83 ec 04             	sub    esp,0x4
c0014e09:	50                   	push   eax
c0014e0a:	51                   	push   ecx
c0014e0b:	52                   	push   edx
c0014e0c:	e8 e3 b7 fe ff       	call   c00005f4 <memmove>
c0014e11:	83 c4 10             	add    esp,0x10
c0014e14:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014e17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e1a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014e1e:	75 88                	jne    c0014da8 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014e20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e23:	eb 03                	jmp    c0014e28 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014e25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e28:	c9                   	leave  
c0014e29:	c3                   	ret    

c0014e2a <Keyboard::Keyboard(char const*)>:
c0014e2a:	83 ec 0c             	sub    esp,0xc
c0014e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e31:	83 ec 08             	sub    esp,0x8
c0014e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e38:	50                   	push   eax
c0014e39:	e8 cc ea ff ff       	call   c001390a <Device::Device(char const*)>
c0014e3e:	83 c4 10             	add    esp,0x10
c0014e41:	ba 68 9d 03 c0       	mov    edx,0xc0039d68
c0014e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e4a:	89 10                	mov    DWORD PTR [eax],edx
c0014e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e50:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014e5a:	c6 05 04 be 03 c0 01 	mov    BYTE PTR ds:0xc003be04,0x1
c0014e61:	90                   	nop
c0014e62:	83 c4 0c             	add    esp,0xc
c0014e65:	c3                   	ret    

c0014e66 <Keyboard::~Keyboard()>:
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	ba 68 9d 03 c0       	mov    edx,0xc0039d68
c0014e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e72:	89 10                	mov    DWORD PTR [eax],edx
c0014e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e78:	83 ec 0c             	sub    esp,0xc
c0014e7b:	50                   	push   eax
c0014e7c:	e8 3b e7 ff ff       	call   c00135bc <Device::~Device()>
c0014e81:	83 c4 10             	add    esp,0x10
c0014e84:	90                   	nop
c0014e85:	83 c4 0c             	add    esp,0xc
c0014e88:	c3                   	ret    
c0014e89:	90                   	nop

c0014e8a <Keyboard::~Keyboard()>:
c0014e8a:	83 ec 0c             	sub    esp,0xc
c0014e8d:	83 ec 0c             	sub    esp,0xc
c0014e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e94:	e8 cd ff ff ff       	call   c0014e66 <Keyboard::~Keyboard()>
c0014e99:	83 c4 10             	add    esp,0x10
c0014e9c:	83 ec 08             	sub    esp,0x8
c0014e9f:	68 5c 01 00 00       	push   0x15c
c0014ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea8:	e8 72 d5 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0014ead:	83 c4 10             	add    esp,0x10
c0014eb0:	83 c4 0c             	add    esp,0xc
c0014eb3:	c3                   	ret    

c0014eb4 <LogicalDisk::close(int, int, void*)>:
c0014eb4:	83 c8 ff             	or     eax,0xffffffff
c0014eb7:	c3                   	ret    

c0014eb8 <LogicalDisk::~LogicalDisk()>:
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	ba 18 9e 03 c0       	mov    edx,0xc0039e18
c0014ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ec4:	89 10                	mov    DWORD PTR [eax],edx
c0014ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	50                   	push   eax
c0014ece:	e8 e9 e6 ff ff       	call   c00135bc <Device::~Device()>
c0014ed3:	83 c4 10             	add    esp,0x10
c0014ed6:	90                   	nop
c0014ed7:	83 c4 0c             	add    esp,0xc
c0014eda:	c3                   	ret    
c0014edb:	90                   	nop

c0014edc <LogicalDisk::~LogicalDisk()>:
c0014edc:	83 ec 0c             	sub    esp,0xc
c0014edf:	83 ec 0c             	sub    esp,0xc
c0014ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ee6:	e8 cd ff ff ff       	call   c0014eb8 <LogicalDisk::~LogicalDisk()>
c0014eeb:	83 c4 10             	add    esp,0x10
c0014eee:	83 ec 08             	sub    esp,0x8
c0014ef1:	68 74 01 00 00       	push   0x174
c0014ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014efa:	e8 20 d5 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0014eff:	83 c4 10             	add    esp,0x10
c0014f02:	83 c4 0c             	add    esp,0xc
c0014f05:	c3                   	ret    

c0014f06 <LogicalDisk::open(int, int, void*)>:
c0014f06:	83 ec 18             	sub    esp,0x18
c0014f09:	68 94 9d 03 c0       	push   0xc0039d94
c0014f0e:	e8 6b 80 ff ff       	call   c000cf7e <panic(char const*)>
c0014f13:	83 c8 ff             	or     eax,0xffffffff
c0014f16:	83 c4 1c             	add    esp,0x1c
c0014f19:	c3                   	ret    

c0014f1a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014f1a:	53                   	push   ebx
c0014f1b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f27:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014f2d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014f33:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014f39:	77 10                	ja     c0014f4b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014f3b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014f41:	89 d3                	mov    ebx,edx
c0014f43:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014f49:	72 05                	jb     c0014f50 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014f4b:	83 c8 ff             	or     eax,0xffffffff
c0014f4e:	89 c2                	mov    edx,eax
c0014f50:	5b                   	pop    ebx
c0014f51:	c3                   	ret    

c0014f52 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014f52:	56                   	push   esi
c0014f53:	83 c8 ff             	or     eax,0xffffffff
c0014f56:	53                   	push   ebx
c0014f57:	89 c2                	mov    edx,eax
c0014f59:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f5d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0014f61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014f65:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0014f6b:	77 27                	ja     c0014f94 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014f6d:	89 d8                	mov    eax,ebx
c0014f6f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0014f75:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0014f7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014f80:	89 c2                	mov    edx,eax
c0014f82:	73 10                	jae    c0014f94 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0014f84:	89 c8                	mov    eax,ecx
c0014f86:	89 da                	mov    edx,ebx
c0014f88:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0014f8e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0014f94:	5b                   	pop    ebx
c0014f95:	5e                   	pop    esi
c0014f96:	c3                   	ret    
c0014f97:	90                   	nop

c0014f98 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0014f98:	83 ec 1c             	sub    esp,0x1c
c0014f9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014f9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014fa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0014fb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014fb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fbe:	83 ec 08             	sub    esp,0x8
c0014fc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fc5:	50                   	push   eax
c0014fc6:	e8 3f e9 ff ff       	call   c001390a <Device::Device(char const*)>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	ba 18 9e 03 c0       	mov    edx,0xc0039e18
c0014fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd7:	89 10                	mov    DWORD PTR [eax],edx
c0014fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fdd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0014ffd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015001:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015005:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015009:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001500f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015015:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015019:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001501c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015020:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015026:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001502c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015030:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015034:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001503a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001503e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015048:	90                   	nop
c0015049:	83 c4 1c             	add    esp,0x1c
c001504c:	c3                   	ret    
c001504d:	90                   	nop

c001504e <LogicalDisk::assignDriveLetter()>:
c001504e:	55                   	push   ebp
c001504f:	57                   	push   edi
c0015050:	56                   	push   esi
c0015051:	53                   	push   ebx
c0015052:	83 ec 14             	sub    esp,0x14
c0015055:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015059:	8b 3d 40 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c240
c001505f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015065:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015069:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001506f:	8b 3d 44 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c244
c0015075:	3c 01                	cmp    al,0x1
c0015077:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001507b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001507f:	19 c0                	sbb    eax,eax
c0015081:	83 e0 02             	and    eax,0x2
c0015084:	83 c0 41             	add    eax,0x41
c0015087:	0f be e8             	movsx  ebp,al
c001508a:	3c 43                	cmp    al,0x43
c001508c:	75 10                	jne    c001509e <LogicalDisk::assignDriveLetter()+0x50>
c001508e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015095:	75 5d                	jne    c00150f4 <LogicalDisk::assignDriveLetter()+0xa6>
c0015097:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001509c:	75 56                	jne    c00150f4 <LogicalDisk::assignDriveLetter()+0xa6>
c001509e:	8d 75 bf             	lea    esi,[ebp-0x41]
c00150a1:	ba 01 00 00 00       	mov    edx,0x1
c00150a6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00150aa:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00150ae:	d3 e2                	shl    edx,cl
c00150b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150b4:	89 d7                	mov    edi,edx
c00150b6:	89 d6                	mov    esi,edx
c00150b8:	c1 ff 1f             	sar    edi,0x1f
c00150bb:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00150bf:	21 f9                	and    ecx,edi
c00150c1:	09 d1                	or     ecx,edx
c00150c3:	75 2f                	jne    c00150f4 <LogicalDisk::assignDriveLetter()+0xa6>
c00150c5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00150c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00150cd:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00150d3:	09 f2                	or     edx,esi
c00150d5:	89 15 40 c2 03 c0    	mov    DWORD PTR ds:0xc003c240,edx
c00150db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150df:	09 fa                	or     edx,edi
c00150e1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00150e5:	89 15 44 c2 03 c0    	mov    DWORD PTR ds:0xc003c244,edx
c00150eb:	89 1c bd 60 c2 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3da0],ebx
c00150f2:	eb 08                	jmp    c00150fc <LogicalDisk::assignDriveLetter()+0xae>
c00150f4:	45                   	inc    ebp
c00150f5:	40                   	inc    eax
c00150f6:	3c 5b                	cmp    al,0x5b
c00150f8:	75 90                	jne    c001508a <LogicalDisk::assignDriveLetter()+0x3c>
c00150fa:	31 c0                	xor    eax,eax
c00150fc:	83 c4 14             	add    esp,0x14
c00150ff:	5b                   	pop    ebx
c0015100:	5e                   	pop    esi
c0015101:	5f                   	pop    edi
c0015102:	5d                   	pop    ebp
c0015103:	c3                   	ret    

c0015104 <LogicalDisk::mount()>:
c0015104:	56                   	push   esi
c0015105:	53                   	push   ebx
c0015106:	51                   	push   ecx
c0015107:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001510b:	8b 1d c0 bd 03 c0    	mov    ebx,DWORD PTR ds:0xc003bdc0
c0015111:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001511b:	85 db                	test   ebx,ebx
c001511d:	74 50                	je     c001516f <LogicalDisk::mount()+0x6b>
c001511f:	e8 c9 91 ff ff       	call   c000e2ed <getIRQNestingLevel()>
c0015124:	52                   	push   edx
c0015125:	52                   	push   edx
c0015126:	50                   	push   eax
c0015127:	68 b8 9d 03 c0       	push   0xc0039db8
c001512c:	e8 2f 7d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0015131:	83 c4 0c             	add    esp,0xc
c0015134:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001513b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001513d:	83 e8 41             	sub    eax,0x41
c0015140:	50                   	push   eax
c0015141:	56                   	push   esi
c0015142:	53                   	push   ebx
c0015143:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	84 c0                	test   al,al
c001514b:	74 08                	je     c0015155 <LogicalDisk::mount()+0x51>
c001514d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015153:	eb 1c                	jmp    c0015171 <LogicalDisk::mount()+0x6d>
c0015155:	e8 93 91 ff ff       	call   c000e2ed <getIRQNestingLevel()>
c001515a:	51                   	push   ecx
c001515b:	51                   	push   ecx
c001515c:	50                   	push   eax
c001515d:	68 d3 9d 03 c0       	push   0xc0039dd3
c0015162:	e8 f9 7c ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0015167:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	eb ac                	jmp    c001511b <LogicalDisk::mount()+0x17>
c001516f:	31 c0                	xor    eax,eax
c0015171:	5a                   	pop    edx
c0015172:	5b                   	pop    ebx
c0015173:	5e                   	pop    esi
c0015174:	c3                   	ret    
c0015175:	90                   	nop

c0015176 <LogicalDisk::unmount()>:
c0015176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001517a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015184:	c3                   	ret    
c0015185:	90                   	nop

c0015186 <LogicalDisk::unassignDriveLetter()>:
c0015186:	57                   	push   edi
c0015187:	56                   	push   esi
c0015188:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001518c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015193:	84 c9                	test   cl,cl
c0015195:	75 0f                	jne    c00151a6 <LogicalDisk::unassignDriveLetter()+0x20>
c0015197:	c7 44 24 0c ee 9d 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039dee
c001519f:	5e                   	pop    esi
c00151a0:	5f                   	pop    edi
c00151a1:	e9 d8 7d ff ff       	jmp    c000cf7e <panic(char const*)>
c00151a6:	83 e9 41             	sub    ecx,0x41
c00151a9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00151b0:	b8 01 00 00 00       	mov    eax,0x1
c00151b5:	c7 04 8d 60 c2 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3da0],0x0
c00151c0:	d3 e0                	shl    eax,cl
c00151c2:	89 c7                	mov    edi,eax
c00151c4:	f7 d0                	not    eax
c00151c6:	c1 ff 1f             	sar    edi,0x1f
c00151c9:	21 05 40 c2 03 c0    	and    DWORD PTR ds:0xc003c240,eax
c00151cf:	89 fe                	mov    esi,edi
c00151d1:	f7 d6                	not    esi
c00151d3:	21 35 44 c2 03 c0    	and    DWORD PTR ds:0xc003c244,esi
c00151d9:	5e                   	pop    esi
c00151da:	5f                   	pop    edi
c00151db:	c3                   	ret    

c00151dc <LogicalDisk::read(unsigned long long, int, void*)>:
c00151dc:	57                   	push   edi
c00151dd:	56                   	push   esi
c00151de:	53                   	push   ebx
c00151df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00151e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00151e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00151eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00151f5:	77 41                	ja     c0015238 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00151f7:	99                   	cdq    
c00151f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00151fe:	01 c8                	add    eax,ecx
c0015200:	11 da                	adc    edx,ebx
c0015202:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015208:	19 d7                	sbb    edi,edx
c001520a:	72 33                	jb     c001523f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001520c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015212:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015218:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001521c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015220:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015226:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001522c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015230:	5b                   	pop    ebx
c0015231:	5e                   	pop    esi
c0015232:	5f                   	pop    edi
c0015233:	e9 9a 09 00 00       	jmp    c0015bd2 <VCache::read(unsigned long long, int, void*)>
c0015238:	b8 05 00 00 00       	mov    eax,0x5
c001523d:	eb 05                	jmp    c0015244 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001523f:	b8 07 00 00 00       	mov    eax,0x7
c0015244:	5b                   	pop    ebx
c0015245:	5e                   	pop    esi
c0015246:	5f                   	pop    edi
c0015247:	c3                   	ret    

c0015248 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015248:	57                   	push   edi
c0015249:	56                   	push   esi
c001524a:	53                   	push   ebx
c001524b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001524f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015253:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001525b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015261:	77 41                	ja     c00152a4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015263:	99                   	cdq    
c0015264:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001526a:	01 c8                	add    eax,ecx
c001526c:	11 da                	adc    edx,ebx
c001526e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015274:	19 d7                	sbb    edi,edx
c0015276:	72 33                	jb     c00152ab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015278:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001527e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015284:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015288:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001528c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015292:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001529c:	5b                   	pop    ebx
c001529d:	5e                   	pop    esi
c001529e:	5f                   	pop    edi
c001529f:	e9 4a 08 00 00       	jmp    c0015aee <VCache::write(unsigned long long, int, void*)>
c00152a4:	b8 05 00 00 00       	mov    eax,0x5
c00152a9:	eb 05                	jmp    c00152b0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00152ab:	b8 07 00 00 00       	mov    eax,0x7
c00152b0:	5b                   	pop    ebx
c00152b1:	5e                   	pop    esi
c00152b2:	5f                   	pop    edi
c00152b3:	c3                   	ret    

c00152b4 <Mouse::Mouse(char const*)>:
c00152b4:	83 ec 0c             	sub    esp,0xc
c00152b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152bb:	83 ec 08             	sub    esp,0x8
c00152be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152c2:	50                   	push   eax
c00152c3:	e8 42 e6 ff ff       	call   c001390a <Device::Device(char const*)>
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	ba 44 9e 03 c0       	mov    edx,0xc0039e44
c00152d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152d4:	89 10                	mov    DWORD PTR [eax],edx
c00152d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152da:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00152e4:	90                   	nop
c00152e5:	83 c4 0c             	add    esp,0xc
c00152e8:	c3                   	ret    
c00152e9:	90                   	nop

c00152ea <Mouse::~Mouse()>:
c00152ea:	83 ec 0c             	sub    esp,0xc
c00152ed:	ba 44 9e 03 c0       	mov    edx,0xc0039e44
c00152f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152f6:	89 10                	mov    DWORD PTR [eax],edx
c00152f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152fc:	83 ec 0c             	sub    esp,0xc
c00152ff:	50                   	push   eax
c0015300:	e8 b7 e2 ff ff       	call   c00135bc <Device::~Device()>
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	90                   	nop
c0015309:	83 c4 0c             	add    esp,0xc
c001530c:	c3                   	ret    
c001530d:	90                   	nop

c001530e <Mouse::~Mouse()>:
c001530e:	83 ec 0c             	sub    esp,0xc
c0015311:	83 ec 0c             	sub    esp,0xc
c0015314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015318:	e8 cd ff ff ff       	call   c00152ea <Mouse::~Mouse()>
c001531d:	83 c4 10             	add    esp,0x10
c0015320:	83 ec 08             	sub    esp,0x8
c0015323:	68 58 01 00 00       	push   0x158
c0015328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001532c:	e8 ee d0 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0015331:	83 c4 10             	add    esp,0x10
c0015334:	83 c4 0c             	add    esp,0xc
c0015337:	c3                   	ret    

c0015338 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015338:	55                   	push   ebp
c0015339:	57                   	push   edi
c001533a:	56                   	push   esi
c001533b:	53                   	push   ebx
c001533c:	81 ec 28 01 00 00    	sub    esp,0x128
c0015342:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015349:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015350:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015357:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001535e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015362:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015366:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001536d:	e8 8a e6 ff ff       	call   c00139fc <Device::getName()>
c0015372:	5a                   	pop    edx
c0015373:	59                   	pop    ecx
c0015374:	50                   	push   eax
c0015375:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015379:	55                   	push   ebp
c001537a:	e8 75 b4 fe ff       	call   c00007f4 <strcpy>
c001537f:	5b                   	pop    ebx
c0015380:	58                   	pop    eax
c0015381:	68 68 9e 03 c0       	push   0xc0039e68
c0015386:	55                   	push   ebp
c0015387:	e8 b5 b5 fe ff       	call   c0000941 <strcat>
c001538c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015393:	e8 78 d0 ff ff       	call   c0012410 <operator new(unsigned long)>
c0015398:	83 c4 0c             	add    esp,0xc
c001539b:	89 c3                	mov    ebx,eax
c001539d:	57                   	push   edi
c001539e:	56                   	push   esi
c001539f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153a7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00153ae:	55                   	push   ebp
c00153af:	50                   	push   eax
c00153b0:	e8 e3 fb ff ff       	call   c0014f98 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00153b5:	83 c4 14             	add    esp,0x14
c00153b8:	53                   	push   ebx
c00153b9:	e8 90 fc ff ff       	call   c001504e <LogicalDisk::assignDriveLetter()>
c00153be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153c1:	e8 3e fd ff ff       	call   c0015104 <LogicalDisk::mount()>
c00153c6:	58                   	pop    eax
c00153c7:	5a                   	pop    edx
c00153c8:	53                   	push   ebx
c00153c9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00153d0:	e8 45 e3 ff ff       	call   c001371a <Device::addChild(Device*)>
c00153d5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00153db:	5b                   	pop    ebx
c00153dc:	5e                   	pop    esi
c00153dd:	5f                   	pop    edi
c00153de:	5d                   	pop    ebp
c00153df:	c3                   	ret    

c00153e0 <createPartitionsForDisk(PhysicalDisk*)>:
c00153e0:	55                   	push   ebp
c00153e1:	57                   	push   edi
c00153e2:	56                   	push   esi
c00153e3:	53                   	push   ebx
c00153e4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00153ea:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00153f1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00153f7:	3d 00 02 00 00       	cmp    eax,0x200
c00153fc:	74 27                	je     c0015425 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00153fe:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015404:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001540a:	83 ec 10             	sub    esp,0x10
c001540d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015411:	99                   	cdq    
c0015412:	c1 e6 0a             	shl    esi,0xa
c0015415:	52                   	push   edx
c0015416:	89 fd                	mov    ebp,edi
c0015418:	50                   	push   eax
c0015419:	55                   	push   ebp
c001541a:	56                   	push   esi
c001541b:	e8 5c 92 00 00       	call   c001e67c <__udivdi3>
c0015420:	e9 b1 00 00 00       	jmp    c00154d6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015425:	83 ec 0c             	sub    esp,0xc
c0015428:	8b 03                	mov    eax,DWORD PTR [ebx]
c001542a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001542e:	56                   	push   esi
c001542f:	6a 01                	push   0x1
c0015431:	6a 00                	push   0x0
c0015433:	6a 00                	push   0x0
c0015435:	53                   	push   ebx
c0015436:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015439:	83 c4 20             	add    esp,0x20
c001543c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015444:	75 0a                	jne    c0015450 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015446:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001544e:	74 2c                	je     c001547c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015450:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015456:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001545c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015462:	83 ec 10             	sub    esp,0x10
c0015465:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015469:	89 f7                	mov    edi,esi
c001546b:	c1 e0 0a             	shl    eax,0xa
c001546e:	c1 ff 1f             	sar    edi,0x1f
c0015471:	57                   	push   edi
c0015472:	56                   	push   esi
c0015473:	52                   	push   edx
c0015474:	50                   	push   eax
c0015475:	e8 02 92 00 00       	call   c001e67c <__udivdi3>
c001547a:	eb 5a                	jmp    c00154d6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001547c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015483:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001548a:	83 e1 7f             	and    ecx,0x7f
c001548d:	83 e0 7f             	and    eax,0x7f
c0015490:	01 c1                	add    ecx,eax
c0015492:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015499:	83 e0 7f             	and    eax,0x7f
c001549c:	01 c1                	add    ecx,eax
c001549e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00154a5:	83 e0 7f             	and    eax,0x7f
c00154a8:	00 c1                	add    cl,al
c00154aa:	74 41                	je     c00154ed <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00154ac:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00154b2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00154b8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00154be:	83 ec 10             	sub    esp,0x10
c00154c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00154c5:	89 f7                	mov    edi,esi
c00154c7:	c1 e0 0a             	shl    eax,0xa
c00154ca:	c1 ff 1f             	sar    edi,0x1f
c00154cd:	57                   	push   edi
c00154ce:	56                   	push   esi
c00154cf:	52                   	push   edx
c00154d0:	50                   	push   eax
c00154d1:	e8 a6 91 00 00       	call   c001e67c <__udivdi3>
c00154d6:	83 c4 14             	add    esp,0x14
c00154d9:	52                   	push   edx
c00154da:	50                   	push   eax
c00154db:	6a 00                	push   0x0
c00154dd:	6a 00                	push   0x0
c00154df:	53                   	push   ebx
c00154e0:	e8 53 fe ff ff       	call   c0015338 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00154e5:	83 c4 20             	add    esp,0x20
c00154e8:	e9 79 01 00 00       	jmp    c0015666 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00154ed:	89 f0                	mov    eax,esi
c00154ef:	31 f6                	xor    esi,esi
c00154f1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00154f8:	75 02                	jne    c00154fc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00154fa:	89 f1                	mov    ecx,esi
c00154fc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015503:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001550a:	c1 e2 08             	shl    edx,0x8
c001550d:	c1 e7 10             	shl    edi,0x10
c0015510:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015518:	09 fa                	or     edx,edi
c001551a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015522:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015529:	83 c0 10             	add    eax,0x10
c001552c:	09 fa                	or     edx,edi
c001552e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015535:	c1 e7 18             	shl    edi,0x18
c0015538:	09 fa                	or     edx,edi
c001553a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015541:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015545:	c1 e7 10             	shl    edi,0x10
c0015548:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001554f:	c1 e2 08             	shl    edx,0x8
c0015552:	09 fa                	or     edx,edi
c0015554:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001555b:	09 fa                	or     edx,edi
c001555d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015564:	c1 e7 18             	shl    edi,0x18
c0015567:	09 fa                	or     edx,edi
c0015569:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001556d:	46                   	inc    esi
c001556e:	83 fe 04             	cmp    esi,0x4
c0015571:	0f 85 7a ff ff ff    	jne    c00154f1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001557b:	83 f0 01             	xor    eax,0x1
c001557e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015582:	75 57                	jne    c00155db <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015584:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015588:	83 f0 01             	xor    eax,0x1
c001558b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001558f:	75 4a                	jne    c00155db <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015591:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015595:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001559d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00155a5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00155ab:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00155b1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00155b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00155bb:	89 f7                	mov    edi,esi
c00155bd:	c1 e0 0a             	shl    eax,0xa
c00155c0:	c1 ff 1f             	sar    edi,0x1f
c00155c3:	57                   	push   edi
c00155c4:	56                   	push   esi
c00155c5:	52                   	push   edx
c00155c6:	50                   	push   eax
c00155c7:	e8 b0 90 00 00       	call   c001e67c <__udivdi3>
c00155cc:	83 c4 10             	add    esp,0x10
c00155cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00155d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00155d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00155db:	84 c9                	test   cl,cl
c00155dd:	74 53                	je     c0015632 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00155df:	0f b6 c9             	movzx  ecx,cl
c00155e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00155ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00155ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00155f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00155f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155fa:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00155fe:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015606:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001560a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001560e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015612:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015616:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001561a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001561e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015622:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015626:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001562a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001562e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015632:	31 ed                	xor    ebp,ebp
c0015634:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015638:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001563c:	89 f8                	mov    eax,edi
c001563e:	09 f0                	or     eax,esi
c0015640:	74 1e                	je     c0015660 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015642:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015646:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001564a:	89 d1                	mov    ecx,edx
c001564c:	09 c1                	or     ecx,eax
c001564e:	74 10                	je     c0015660 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015650:	83 ec 0c             	sub    esp,0xc
c0015653:	57                   	push   edi
c0015654:	56                   	push   esi
c0015655:	52                   	push   edx
c0015656:	50                   	push   eax
c0015657:	53                   	push   ebx
c0015658:	e8 db fc ff ff       	call   c0015338 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001565d:	83 c4 20             	add    esp,0x20
c0015660:	45                   	inc    ebp
c0015661:	83 fd 04             	cmp    ebp,0x4
c0015664:	75 ce                	jne    c0015634 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015666:	81 c4 5c 02 00 00    	add    esp,0x25c
c001566c:	5b                   	pop    ebx
c001566d:	5e                   	pop    esi
c001566e:	5f                   	pop    edi
c001566f:	5d                   	pop    ebp
c0015670:	c3                   	ret    
c0015671:	90                   	nop

c0015672 <Timer::Timer(char const*)>:
c0015672:	83 ec 0c             	sub    esp,0xc
c0015675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015679:	83 ec 08             	sub    esp,0x8
c001567c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015680:	50                   	push   eax
c0015681:	e8 84 e2 ff ff       	call   c001390a <Device::Device(char const*)>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	ba 7c 9e 03 c0       	mov    edx,0xc0039e7c
c001568e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015692:	89 10                	mov    DWORD PTR [eax],edx
c0015694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015698:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00156a2:	90                   	nop
c00156a3:	83 c4 0c             	add    esp,0xc
c00156a6:	c3                   	ret    
c00156a7:	90                   	nop

c00156a8 <Timer::~Timer()>:
c00156a8:	83 ec 0c             	sub    esp,0xc
c00156ab:	ba 7c 9e 03 c0       	mov    edx,0xc0039e7c
c00156b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156b4:	89 10                	mov    DWORD PTR [eax],edx
c00156b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ba:	83 ec 0c             	sub    esp,0xc
c00156bd:	50                   	push   eax
c00156be:	e8 f9 de ff ff       	call   c00135bc <Device::~Device()>
c00156c3:	83 c4 10             	add    esp,0x10
c00156c6:	90                   	nop
c00156c7:	83 c4 0c             	add    esp,0xc
c00156ca:	c3                   	ret    
c00156cb:	90                   	nop

c00156cc <Timer::~Timer()>:
c00156cc:	83 ec 0c             	sub    esp,0xc
c00156cf:	83 ec 0c             	sub    esp,0xc
c00156d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156d6:	e8 cd ff ff ff       	call   c00156a8 <Timer::~Timer()>
c00156db:	83 c4 10             	add    esp,0x10
c00156de:	83 ec 08             	sub    esp,0x8
c00156e1:	68 5c 01 00 00       	push   0x15c
c00156e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156ea:	e8 30 cd ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	83 c4 0c             	add    esp,0xc
c00156f5:	c3                   	ret    

c00156f6 <Timer::read()>:
c00156f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015700:	c3                   	ret    

c0015701 <timerHandler(unsigned long long)>:
c0015701:	55                   	push   ebp
c0015702:	57                   	push   edi
c0015703:	56                   	push   esi
c0015704:	53                   	push   ebx
c0015705:	83 ec 0c             	sub    esp,0xc
c0015708:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001570c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015710:	01 35 d0 c2 03 c0    	add    DWORD PTR ds:0xc003c2d0,esi
c0015716:	11 3d d4 c2 03 c0    	adc    DWORD PTR ds:0xc003c2d4,edi
c001571c:	80 3d 0d b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b90d,0x0
c0015723:	0f 84 07 01 00 00    	je     c0015830 <timerHandler(unsigned long long)+0x12f>
c0015729:	e8 fb 8b ff ff       	call   c000e329 <lockStuff()>
c001572e:	83 ec 0c             	sub    esp,0xc
c0015731:	68 44 bb 03 c0       	push   0xc003bb44
c0015736:	e8 a1 94 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001573b:	c7 04 24 44 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb44
c0015742:	89 c3                	mov    ebx,eax
c0015744:	e8 c9 93 00 00       	call   c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	84 c0                	test   al,al
c001574e:	74 60                	je     c00157b0 <timerHandler(unsigned long long)+0xaf>
c0015750:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015756:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015759:	85 c0                	test   eax,eax
c001575b:	0f 85 91 00 00 00    	jne    c00157f2 <timerHandler(unsigned long long)+0xf1>
c0015761:	e9 be 00 00 00       	jmp    c0015824 <timerHandler(unsigned long long)+0x123>
c0015766:	83 ec 0c             	sub    esp,0xc
c0015769:	55                   	push   ebp
c001576a:	e8 b7 93 ff ff       	call   c000eb26 <unblockTask(ThreadControlBlock*)>
c001576f:	83 c4 10             	add    esp,0x10
c0015772:	39 eb                	cmp    ebx,ebp
c0015774:	75 12                	jne    c0015788 <timerHandler(unsigned long long)+0x87>
c0015776:	83 ec 0c             	sub    esp,0xc
c0015779:	68 44 bb 03 c0       	push   0xc003bb44
c001577e:	e8 59 94 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015783:	89 c3                	mov    ebx,eax
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	83 ec 0c             	sub    esp,0xc
c001578b:	68 44 bb 03 c0       	push   0xc003bb44
c0015790:	e8 7d 93 00 00       	call   c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015795:	83 c4 10             	add    esp,0x10
c0015798:	84 c0                	test   al,al
c001579a:	75 b4                	jne    c0015750 <timerHandler(unsigned long long)+0x4f>
c001579c:	83 ec 0c             	sub    esp,0xc
c001579f:	68 44 bb 03 c0       	push   0xc003bb44
c00157a4:	e8 33 94 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	39 d8                	cmp    eax,ebx
c00157ae:	74 a0                	je     c0015750 <timerHandler(unsigned long long)+0x4f>
c00157b0:	83 ec 0c             	sub    esp,0xc
c00157b3:	68 44 bb 03 c0       	push   0xc003bb44
c00157b8:	e8 1f 94 00 00       	call   c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157bd:	c7 04 24 44 bb 03 c0 	mov    DWORD PTR [esp],0xc003bb44
c00157c4:	89 c5                	mov    ebp,eax
c00157c6:	e8 63 93 00 00       	call   c001eb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157cb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00157d4:	39 15 d0 c2 03 c0    	cmp    DWORD PTR ds:0xc003c2d0,edx
c00157da:	a1 d4 c2 03 c0       	mov    eax,ds:0xc003c2d4
c00157df:	19 c8                	sbb    eax,ecx
c00157e1:	73 83                	jae    c0015766 <timerHandler(unsigned long long)+0x65>
c00157e3:	50                   	push   eax
c00157e4:	50                   	push   eax
c00157e5:	55                   	push   ebp
c00157e6:	68 44 bb 03 c0       	push   0xc003bb44
c00157eb:	e8 4e 92 00 00       	call   c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157f0:	eb 93                	jmp    c0015785 <timerHandler(unsigned long long)+0x84>
c00157f2:	80 3d 0c b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b90c,0x0
c00157f9:	74 29                	je     c0015824 <timerHandler(unsigned long long)+0x123>
c00157fb:	39 c6                	cmp    esi,eax
c00157fd:	bb 00 00 00 00       	mov    ebx,0x0
c0015802:	19 df                	sbb    edi,ebx
c0015804:	72 19                	jb     c001581f <timerHandler(unsigned long long)+0x11e>
c0015806:	e8 f7 8a ff ff       	call   c000e302 <lockScheduler()>
c001580b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015810:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015813:	e8 1e 8e ff ff       	call   c000e636 <schedule()>
c0015818:	e8 e7 8a ff ff       	call   c000e304 <unlockScheduler()>
c001581d:	eb 05                	jmp    c0015824 <timerHandler(unsigned long long)+0x123>
c001581f:	29 f0                	sub    eax,esi
c0015821:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015824:	83 c4 0c             	add    esp,0xc
c0015827:	5b                   	pop    ebx
c0015828:	5e                   	pop    esi
c0015829:	5f                   	pop    edi
c001582a:	5d                   	pop    ebp
c001582b:	e9 8b 8e ff ff       	jmp    c000e6bb <unlockStuff()>
c0015830:	83 c4 0c             	add    esp,0xc
c0015833:	5b                   	pop    ebx
c0015834:	5e                   	pop    esi
c0015835:	5f                   	pop    edi
c0015836:	5d                   	pop    ebp
c0015837:	c3                   	ret    

c0015838 <setupTimer(int)>:
c0015838:	57                   	push   edi
c0015839:	56                   	push   esi
c001583a:	53                   	push   ebx
c001583b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001583f:	e8 cf 18 00 00       	call   c0017113 <getCPUNumber()>
c0015844:	85 c0                	test   eax,eax
c0015846:	74 32                	je     c001587a <setupTimer(int)+0x42>
c0015848:	83 ec 0c             	sub    esp,0xc
c001584b:	68 60 01 00 00       	push   0x160
c0015850:	e8 bb cb ff ff       	call   c0012410 <operator new(unsigned long)>
c0015855:	89 04 24             	mov    DWORD PTR [esp],eax
c0015858:	89 c3                	mov    ebx,eax
c001585a:	e8 bf 88 00 00       	call   c001e11e <APICTimer::APICTimer()>
c001585f:	6a 00                	push   0x0
c0015861:	6a 00                	push   0x0
c0015863:	56                   	push   esi
c0015864:	53                   	push   ebx
c0015865:	e8 bc 87 00 00       	call   c001e026 <APICTimer::open(int, int, void*)>
c001586a:	83 c4 20             	add    esp,0x20
c001586d:	e8 a4 18 00 00       	call   c0017116 <thisCPU()>
c0015872:	56                   	push   esi
c0015873:	56                   	push   esi
c0015874:	53                   	push   ebx
c0015875:	e9 96 00 00 00       	jmp    c0015910 <setupTimer(int)+0xd8>
c001587a:	e8 97 18 00 00       	call   c0017116 <thisCPU()>
c001587f:	83 ec 0c             	sub    esp,0xc
c0015882:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015888:	e8 6f e1 ff ff       	call   c00139fc <Device::getName()>
c001588d:	83 c4 10             	add    esp,0x10
c0015890:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015893:	0f 85 87 00 00 00    	jne    c0015920 <setupTimer(int)+0xe8>
c0015899:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001589e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00158a5:	74 79                	je     c0015920 <setupTimer(int)+0xe8>
c00158a7:	83 ec 0c             	sub    esp,0xc
c00158aa:	68 5c 01 00 00       	push   0x15c
c00158af:	e8 5c cb ff ff       	call   c0012410 <operator new(unsigned long)>
c00158b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00158b7:	89 c3                	mov    ebx,eax
c00158b9:	e8 b0 89 00 00       	call   c001e26e <PIT::PIT()>
c00158be:	59                   	pop    ecx
c00158bf:	5f                   	pop    edi
c00158c0:	53                   	push   ebx
c00158c1:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c00158c7:	e8 4e de ff ff       	call   c001371a <Device::addChild(Device*)>
c00158cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158ce:	6a 00                	push   0x0
c00158d0:	6a 00                	push   0x0
c00158d2:	56                   	push   esi
c00158d3:	53                   	push   ebx
c00158d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158d7:	83 c4 14             	add    esp,0x14
c00158da:	68 60 01 00 00       	push   0x160
c00158df:	e8 2c cb ff ff       	call   c0012410 <operator new(unsigned long)>
c00158e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00158e7:	89 c7                	mov    edi,eax
c00158e9:	e8 30 88 00 00       	call   c001e11e <APICTimer::APICTimer()>
c00158ee:	6a 00                	push   0x0
c00158f0:	6a 00                	push   0x0
c00158f2:	56                   	push   esi
c00158f3:	57                   	push   edi
c00158f4:	e8 2d 87 00 00       	call   c001e026 <APICTimer::open(int, int, void*)>
c00158f9:	83 c4 20             	add    esp,0x20
c00158fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158fe:	6a 00                	push   0x0
c0015900:	6a 00                	push   0x0
c0015902:	6a 00                	push   0x0
c0015904:	53                   	push   ebx
c0015905:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015908:	e8 09 18 00 00       	call   c0017116 <thisCPU()>
c001590d:	5a                   	pop    edx
c001590e:	59                   	pop    ecx
c001590f:	57                   	push   edi
c0015910:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015916:	e8 ff dd ff ff       	call   c001371a <Device::addChild(Device*)>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	eb 33                	jmp    c0015953 <setupTimer(int)+0x11b>
c0015920:	83 ec 0c             	sub    esp,0xc
c0015923:	68 5c 01 00 00       	push   0x15c
c0015928:	e8 e3 ca ff ff       	call   c0012410 <operator new(unsigned long)>
c001592d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015930:	89 c3                	mov    ebx,eax
c0015932:	e8 37 89 00 00       	call   c001e26e <PIT::PIT()>
c0015937:	58                   	pop    eax
c0015938:	5a                   	pop    edx
c0015939:	53                   	push   ebx
c001593a:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c0015940:	e8 d5 dd ff ff       	call   c001371a <Device::addChild(Device*)>
c0015945:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015947:	6a 00                	push   0x0
c0015949:	6a 00                	push   0x0
c001594b:	56                   	push   esi
c001594c:	53                   	push   ebx
c001594d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015950:	83 c4 20             	add    esp,0x20
c0015953:	89 d8                	mov    eax,ebx
c0015955:	5b                   	pop    ebx
c0015956:	5e                   	pop    esi
c0015957:	5f                   	pop    edi
c0015958:	c3                   	ret    
c0015959:	90                   	nop

c001595a <VCache::VCache(PhysicalDisk*)>:
c001595a:	53                   	push   ebx
c001595b:	83 ec 08             	sub    esp,0x8
c001595e:	ba ac 9e 03 c0       	mov    edx,0xc0039eac
c0015963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015967:	89 10                	mov    DWORD PTR [eax],edx
c0015969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001596d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0015974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015978:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001597f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015983:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001598a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015995:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001599c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00159a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00159ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00159b6:	83 ec 0c             	sub    esp,0xc
c00159b9:	6a 10                	push   0x10
c00159bb:	e8 50 ca ff ff       	call   c0012410 <operator new(unsigned long)>
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	89 c3                	mov    ebx,eax
c00159c5:	83 ec 0c             	sub    esp,0xc
c00159c8:	53                   	push   ebx
c00159c9:	e8 4c 8a ff ff       	call   c000e41a <Mutex::Mutex()>
c00159ce:	83 c4 10             	add    esp,0x10
c00159d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00159d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159e0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00159e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e7:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00159ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159f2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00159f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00159ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a03:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015a09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a13:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015a16:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a25:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015a2b:	c1 e0 06             	shl    eax,0x6
c0015a2e:	83 ec 0c             	sub    esp,0xc
c0015a31:	50                   	push   eax
c0015a32:	e8 24 7a ff ff       	call   c000d45b <malloc>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	89 c2                	mov    edx,eax
c0015a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a40:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015a43:	90                   	nop
c0015a44:	83 c4 08             	add    esp,0x8
c0015a47:	5b                   	pop    ebx
c0015a48:	c3                   	ret    
c0015a49:	90                   	nop

c0015a4a <VCache::writeWriteBuffer()>:
c0015a4a:	53                   	push   ebx
c0015a4b:	83 ec 14             	sub    esp,0x14
c0015a4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015a52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015a55:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a57:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a5d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a60:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015a63:	50                   	push   eax
c0015a64:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015a67:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015a6e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0015a75:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015a79:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015a80:	83 c4 28             	add    esp,0x28
c0015a83:	5b                   	pop    ebx
c0015a84:	c3                   	ret    
c0015a85:	90                   	nop

c0015a86 <VCache::~VCache()>:
c0015a86:	83 ec 0c             	sub    esp,0xc
c0015a89:	ba ac 9e 03 c0       	mov    edx,0xc0039eac
c0015a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a92:	89 10                	mov    DWORD PTR [eax],edx
c0015a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a98:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015a9b:	84 c0                	test   al,al
c0015a9d:	74 0f                	je     c0015aae <VCache::~VCache()+0x28>
c0015a9f:	83 ec 0c             	sub    esp,0xc
c0015aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aa6:	e8 9f ff ff ff       	call   c0015a4a <VCache::writeWriteBuffer()>
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015ab5:	83 ec 0c             	sub    esp,0xc
c0015ab8:	50                   	push   eax
c0015ab9:	e8 ad 79 ff ff       	call   c000d46b <free>
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	90                   	nop
c0015ac2:	83 c4 0c             	add    esp,0xc
c0015ac5:	c3                   	ret    

c0015ac6 <VCache::~VCache()>:
c0015ac6:	83 ec 0c             	sub    esp,0xc
c0015ac9:	83 ec 0c             	sub    esp,0xc
c0015acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ad0:	e8 b1 ff ff ff       	call   c0015a86 <VCache::~VCache()>
c0015ad5:	83 c4 10             	add    esp,0x10
c0015ad8:	83 ec 08             	sub    esp,0x8
c0015adb:	6a 30                	push   0x30
c0015add:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ae1:	e8 39 c9 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	83 c4 0c             	add    esp,0xc
c0015aec:	c3                   	ret    
c0015aed:	90                   	nop

c0015aee <VCache::write(unsigned long long, int, void*)>:
c0015aee:	55                   	push   ebp
c0015aef:	57                   	push   edi
c0015af0:	56                   	push   esi
c0015af1:	53                   	push   ebx
c0015af2:	83 ec 28             	sub    esp,0x28
c0015af5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015af9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015afd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015b01:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015b05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015b08:	e8 e1 8e ff ff       	call   c000e9ee <Semaphore::acquire()>
c0015b0d:	83 c4 10             	add    esp,0x10
c0015b10:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015b14:	74 66                	je     c0015b7c <VCache::write(unsigned long long, int, void*)+0x8e>
c0015b16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b19:	99                   	cdq    
c0015b1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b1e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015b21:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015b24:	89 c1                	mov    ecx,eax
c0015b26:	89 d0                	mov    eax,edx
c0015b28:	31 f1                	xor    ecx,esi
c0015b2a:	31 f8                	xor    eax,edi
c0015b2c:	89 ca                	mov    edx,ecx
c0015b2e:	09 c2                	or     edx,eax
c0015b30:	75 3e                	jne    c0015b70 <VCache::write(unsigned long long, int, void*)+0x82>
c0015b32:	83 fd 01             	cmp    ebp,0x1
c0015b35:	75 39                	jne    c0015b70 <VCache::write(unsigned long long, int, void*)+0x82>
c0015b37:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015b40:	51                   	push   ecx
c0015b41:	50                   	push   eax
c0015b42:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015b46:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015b4a:	0f af c8             	imul   ecx,eax
c0015b4d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015b50:	51                   	push   ecx
c0015b51:	e8 0b ab fe ff       	call   c0000661 <memcpy>
c0015b56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015b59:	83 c4 10             	add    esp,0x10
c0015b5c:	40                   	inc    eax
c0015b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015b60:	83 f8 40             	cmp    eax,0x40
c0015b63:	75 57                	jne    c0015bbc <VCache::write(unsigned long long, int, void*)+0xce>
c0015b65:	83 ec 0c             	sub    esp,0xc
c0015b68:	53                   	push   ebx
c0015b69:	e8 dc fe ff ff       	call   c0015a4a <VCache::writeWriteBuffer()>
c0015b6e:	eb 34                	jmp    c0015ba4 <VCache::write(unsigned long long, int, void*)+0xb6>
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	53                   	push   ebx
c0015b74:	e8 d1 fe ff ff       	call   c0015a4a <VCache::writeWriteBuffer()>
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015b7f:	83 fd 3f             	cmp    ebp,0x3f
c0015b82:	7f 25                	jg     c0015ba9 <VCache::write(unsigned long long, int, void*)+0xbb>
c0015b84:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015b87:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015b8a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015b8d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015b91:	52                   	push   edx
c0015b92:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015b98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015b9c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015b9f:	e8 bd aa fe ff       	call   c0000661 <memcpy>
c0015ba4:	83 c4 10             	add    esp,0x10
c0015ba7:	eb 13                	jmp    c0015bbc <VCache::write(unsigned long long, int, void*)+0xce>
c0015ba9:	83 ec 0c             	sub    esp,0xc
c0015bac:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015bb2:	55                   	push   ebp
c0015bb3:	57                   	push   edi
c0015bb4:	56                   	push   esi
c0015bb5:	50                   	push   eax
c0015bb6:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015bb9:	83 c4 20             	add    esp,0x20
c0015bbc:	83 ec 0c             	sub    esp,0xc
c0015bbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015bc2:	e8 c3 93 ff ff       	call   c000ef8a <Semaphore::release()>
c0015bc7:	83 c4 2c             	add    esp,0x2c
c0015bca:	31 c0                	xor    eax,eax
c0015bcc:	5b                   	pop    ebx
c0015bcd:	5e                   	pop    esi
c0015bce:	5f                   	pop    edi
c0015bcf:	5d                   	pop    ebp
c0015bd0:	c3                   	ret    
c0015bd1:	90                   	nop

c0015bd2 <VCache::read(unsigned long long, int, void*)>:
c0015bd2:	57                   	push   edi
c0015bd3:	56                   	push   esi
c0015bd4:	53                   	push   ebx
c0015bd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bd9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015bdd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015be1:	83 ec 0c             	sub    esp,0xc
c0015be4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015be7:	e8 02 8e ff ff       	call   c000e9ee <Semaphore::acquire()>
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015bf3:	74 0c                	je     c0015c01 <VCache::read(unsigned long long, int, void*)+0x2f>
c0015bf5:	83 ec 0c             	sub    esp,0xc
c0015bf8:	53                   	push   ebx
c0015bf9:	e8 4c fe ff ff       	call   c0015a4a <VCache::writeWriteBuffer()>
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c04:	83 ec 0c             	sub    esp,0xc
c0015c07:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c11:	57                   	push   edi
c0015c12:	56                   	push   esi
c0015c13:	50                   	push   eax
c0015c14:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c17:	83 c4 14             	add    esp,0x14
c0015c1a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c1d:	e8 68 93 ff ff       	call   c000ef8a <Semaphore::release()>
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	31 c0                	xor    eax,eax
c0015c27:	5b                   	pop    ebx
c0015c28:	5e                   	pop    esi
c0015c29:	5f                   	pop    edi
c0015c2a:	c3                   	ret    
c0015c2b:	90                   	nop

c0015c2c <Video::putrect(int, int, int, int, unsigned int)>:
c0015c2c:	55                   	push   ebp
c0015c2d:	57                   	push   edi
c0015c2e:	56                   	push   esi
c0015c2f:	53                   	push   ebx
c0015c30:	83 ec 1c             	sub    esp,0x1c
c0015c33:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015c37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015c3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c3f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015c43:	01 e8                	add    eax,ebp
c0015c45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c4d:	01 df                	add    edi,ebx
c0015c4f:	39 fb                	cmp    ebx,edi
c0015c51:	7d 1b                	jge    c0015c6e <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015c53:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015c57:	7d 12                	jge    c0015c6b <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015c59:	8b 16                	mov    edx,DWORD PTR [esi]
c0015c5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015c5f:	53                   	push   ebx
c0015c60:	55                   	push   ebp
c0015c61:	45                   	inc    ebp
c0015c62:	56                   	push   esi
c0015c63:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	eb e8                	jmp    c0015c53 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015c6b:	43                   	inc    ebx
c0015c6c:	eb e1                	jmp    c0015c4f <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015c6e:	83 c4 1c             	add    esp,0x1c
c0015c71:	5b                   	pop    ebx
c0015c72:	5e                   	pop    esi
c0015c73:	5f                   	pop    edi
c0015c74:	5d                   	pop    ebp
c0015c75:	c3                   	ret    

c0015c76 <Video::blit(unsigned int*, int, int, int, int)>:
c0015c76:	55                   	push   ebp
c0015c77:	57                   	push   edi
c0015c78:	56                   	push   esi
c0015c79:	53                   	push   ebx
c0015c7a:	83 ec 1c             	sub    esp,0x1c
c0015c7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015c81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c85:	85 c0                	test   eax,eax
c0015c87:	79 02                	jns    c0015c8b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015c89:	31 c0                	xor    eax,eax
c0015c8b:	c1 e0 02             	shl    eax,0x2
c0015c8e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015c92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c96:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c9a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015c9e:	39 d8                	cmp    eax,ebx
c0015ca0:	7e 49                	jle    c0015ceb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015ca2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015ca8:	7c 41                	jl     c0015ceb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015caa:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015cae:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015cb2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015cb6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015cba:	39 f9                	cmp    ecx,edi
c0015cbc:	7e 22                	jle    c0015ce0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015cbe:	83 c5 04             	add    ebp,0x4
c0015cc1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015cc7:	7c 14                	jl     c0015cdd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015cc9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015ccb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015cce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cd6:	56                   	push   esi
c0015cd7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	47                   	inc    edi
c0015cde:	eb d2                	jmp    c0015cb2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce4:	43                   	inc    ebx
c0015ce5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015ce9:	eb ab                	jmp    c0015c96 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015ceb:	83 c4 1c             	add    esp,0x1c
c0015cee:	5b                   	pop    ebx
c0015cef:	5e                   	pop    esi
c0015cf0:	5f                   	pop    edi
c0015cf1:	5d                   	pop    ebp
c0015cf2:	c3                   	ret    
c0015cf3:	90                   	nop

c0015cf4 <Video::clearScreen(unsigned int)>:
c0015cf4:	57                   	push   edi
c0015cf5:	56                   	push   esi
c0015cf6:	53                   	push   ebx
c0015cf7:	31 db                	xor    ebx,ebx
c0015cf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cfd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d03:	7e 1f                	jle    c0015d24 <Video::clearScreen(unsigned int)+0x30>
c0015d05:	31 ff                	xor    edi,edi
c0015d07:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d0d:	7e 12                	jle    c0015d21 <Video::clearScreen(unsigned int)+0x2d>
c0015d0f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015d11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015d15:	53                   	push   ebx
c0015d16:	57                   	push   edi
c0015d17:	47                   	inc    edi
c0015d18:	56                   	push   esi
c0015d19:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015d1c:	83 c4 10             	add    esp,0x10
c0015d1f:	eb e6                	jmp    c0015d07 <Video::clearScreen(unsigned int)+0x13>
c0015d21:	43                   	inc    ebx
c0015d22:	eb d9                	jmp    c0015cfd <Video::clearScreen(unsigned int)+0x9>
c0015d24:	5b                   	pop    ebx
c0015d25:	5e                   	pop    esi
c0015d26:	5f                   	pop    edi
c0015d27:	c3                   	ret    

c0015d28 <Video::putpixel(int, int, unsigned int)>:
c0015d28:	c7 44 24 04 b4 9e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039eb4
c0015d30:	e9 2b 71 ff ff       	jmp    c000ce60 <kprintf(char const*, ...)>
c0015d35:	90                   	nop

c0015d36 <Video::Video(char const*)>:
c0015d36:	83 ec 0c             	sub    esp,0xc
c0015d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d3d:	83 ec 08             	sub    esp,0x8
c0015d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d44:	50                   	push   eax
c0015d45:	e8 c0 db ff ff       	call   c001390a <Device::Device(char const*)>
c0015d4a:	83 c4 10             	add    esp,0x10
c0015d4d:	ba cc 9e 03 c0       	mov    edx,0xc0039ecc
c0015d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d56:	89 10                	mov    DWORD PTR [eax],edx
c0015d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d5c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015d66:	90                   	nop
c0015d67:	83 c4 0c             	add    esp,0xc
c0015d6a:	c3                   	ret    
c0015d6b:	90                   	nop

c0015d6c <Video::~Video()>:
c0015d6c:	83 ec 0c             	sub    esp,0xc
c0015d6f:	ba cc 9e 03 c0       	mov    edx,0xc0039ecc
c0015d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d78:	89 10                	mov    DWORD PTR [eax],edx
c0015d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7e:	83 ec 0c             	sub    esp,0xc
c0015d81:	50                   	push   eax
c0015d82:	e8 35 d8 ff ff       	call   c00135bc <Device::~Device()>
c0015d87:	83 c4 10             	add    esp,0x10
c0015d8a:	90                   	nop
c0015d8b:	83 c4 0c             	add    esp,0xc
c0015d8e:	c3                   	ret    
c0015d8f:	90                   	nop

c0015d90 <Video::~Video()>:
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	83 ec 0c             	sub    esp,0xc
c0015d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d9a:	e8 cd ff ff ff       	call   c0015d6c <Video::~Video()>
c0015d9f:	83 c4 10             	add    esp,0x10
c0015da2:	83 ec 08             	sub    esp,0x8
c0015da5:	68 64 01 00 00       	push   0x164
c0015daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dae:	e8 6c c6 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	83 c4 0c             	add    esp,0xc
c0015db9:	c3                   	ret    

c0015dba <Video::isMonochrome()>:
c0015dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dbe:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015dc4:	c3                   	ret    
c0015dc5:	90                   	nop

c0015dc6 <Video::getWidth()>:
c0015dc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dd0:	c3                   	ret    
c0015dd1:	90                   	nop

c0015dd2 <Video::getHeight()>:
c0015dd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dd6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <Video::drawCursor(int, int, unsigned char*, int)>:
c0015dde:	55                   	push   ebp
c0015ddf:	57                   	push   edi
c0015de0:	56                   	push   esi
c0015de1:	53                   	push   ebx
c0015de2:	83 ec 2c             	sub    esp,0x2c
c0015de5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015de9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015ded:	83 f8 01             	cmp    eax,0x1
c0015df0:	19 c9                	sbb    ecx,ecx
c0015df2:	31 db                	xor    ebx,ebx
c0015df4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015df8:	89 cd                	mov    ebp,ecx
c0015dfa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015e02:	f7 d5                	not    ebp
c0015e04:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015e0a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015e0e:	01 d8                	add    eax,ebx
c0015e10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e14:	56                   	push   esi
c0015e15:	e8 b8 ff ff ff       	call   c0015dd2 <Video::getHeight()>
c0015e1a:	59                   	pop    ecx
c0015e1b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015e1f:	7e 70                	jle    c0015e91 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015e21:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e25:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015e29:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015e2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e30:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015e34:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015e3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e3f:	89 f8                	mov    eax,edi
c0015e41:	83 c0 20             	add    eax,0x20
c0015e44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015e48:	56                   	push   esi
c0015e49:	e8 78 ff ff ff       	call   c0015dc6 <Video::getWidth()>
c0015e4e:	5a                   	pop    edx
c0015e4f:	39 c7                	cmp    edi,eax
c0015e51:	7d 34                	jge    c0015e87 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015e53:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015e58:	74 05                	je     c0015e5f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015e5a:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e5c:	55                   	push   ebp
c0015e5d:	eb 0d                	jmp    c0015e6c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015e5f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015e64:	74 12                	je     c0015e78 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015e66:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e6c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015e70:	57                   	push   edi
c0015e71:	56                   	push   esi
c0015e72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015e75:	83 c4 10             	add    esp,0x10
c0015e78:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015e7c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015e80:	47                   	inc    edi
c0015e81:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015e85:	75 c1                	jne    c0015e48 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015e87:	43                   	inc    ebx
c0015e88:	83 fb 20             	cmp    ebx,0x20
c0015e8b:	0f 85 79 ff ff ff    	jne    c0015e0a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015e91:	83 c4 2c             	add    esp,0x2c
c0015e94:	5b                   	pop    ebx
c0015e95:	5e                   	pop    esi
c0015e96:	5f                   	pop    edi
c0015e97:	5d                   	pop    ebp
c0015e98:	c3                   	ret    
c0015e99:	90                   	nop

c0015e9a <ACPI::close(int, int, void*)>:
c0015e9a:	83 ec 1c             	sub    esp,0x1c
c0015e9d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015ea5:	74 0a                	je     c0015eb1 <ACPI::close(int, int, void*)+0x17>
c0015ea7:	b8 00 00 00 00       	mov    eax,0x0
c0015eac:	e9 9a 00 00 00       	jmp    c0015f4b <ACPI::close(int, int, void*)+0xb1>
c0015eb1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015eb6:	75 37                	jne    c0015eef <ACPI::close(int, int, void*)+0x55>
c0015eb8:	83 ec 0c             	sub    esp,0xc
c0015ebb:	68 04 9f 03 c0       	push   0xc0039f04
c0015ec0:	e8 9b 6f ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0015ec5:	83 c4 10             	add    esp,0x10
c0015ec8:	a1 e8 c2 03 c0       	mov    eax,ds:0xc003c2e8
c0015ecd:	85 c0                	test   eax,eax
c0015ecf:	74 07                	je     c0015ed8 <ACPI::close(int, int, void*)+0x3e>
c0015ed1:	a1 e8 c2 03 c0       	mov    eax,ds:0xc003c2e8
c0015ed6:	ff d0                	call   eax
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	68 b8 9f 03 c0       	push   0xc0039fb8
c0015ee0:	e8 99 70 ff ff       	call   c000cf7e <panic(char const*)>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015eed:	eb 5c                	jmp    c0015f4b <ACPI::close(int, int, void*)+0xb1>
c0015eef:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015ef4:	75 50                	jne    c0015f46 <ACPI::close(int, int, void*)+0xac>
c0015ef6:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0015efb:	85 c0                	test   eax,eax
c0015efd:	74 07                	je     c0015f06 <ACPI::close(int, int, void*)+0x6c>
c0015eff:	a1 e4 c2 03 c0       	mov    eax,ds:0xc003c2e4
c0015f04:	ff d0                	call   eax
c0015f06:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015f0b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015f10:	83 e0 02             	and    eax,0x2
c0015f13:	74 1c                	je     c0015f31 <ACPI::close(int, int, void*)+0x97>
c0015f15:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015f1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f20:	89 c2                	mov    edx,eax
c0015f22:	ec                   	in     al,dx
c0015f23:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015f27:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015f2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015f2f:	eb da                	jmp    c0015f0b <ACPI::close(int, int, void*)+0x71>
c0015f31:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015f38:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015f3d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015f41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f45:	ee                   	out    dx,al
c0015f46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f4b:	83 c4 1c             	add    esp,0x1c
c0015f4e:	c3                   	ret    

c0015f4f <findRSDP()>:
c0015f4f:	83 ec 1c             	sub    esp,0x1c
c0015f52:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0015f57:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015f5d:	83 e0 04             	and    eax,0x4
c0015f60:	84 c0                	test   al,al
c0015f62:	75 07                	jne    c0015f6b <findRSDP()+0x1c>
c0015f64:	b8 00 00 00 00       	mov    eax,0x0
c0015f69:	eb 6a                	jmp    c0015fd5 <findRSDP()+0x86>
c0015f6b:	a1 d0 ba 03 c0       	mov    eax,ds:0xc003bad0
c0015f70:	3d ff 07 00 00       	cmp    eax,0x7ff
c0015f75:	7f 1b                	jg     c0015f92 <findRSDP()+0x43>
c0015f77:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0015f7c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015f82:	83 e2 fb             	and    edx,0xfffffffb
c0015f85:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015f8b:	b8 00 00 00 00       	mov    eax,0x0
c0015f90:	eb 43                	jmp    c0015fd5 <findRSDP()+0x86>
c0015f92:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0015f9a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0015fa2:	77 2c                	ja     c0015fd0 <findRSDP()+0x81>
c0015fa4:	83 ec 04             	sub    esp,0x4
c0015fa7:	6a 08                	push   0x8
c0015fa9:	68 11 9f 03 c0       	push   0xc0039f11
c0015fae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fb2:	e8 e5 a5 fe ff       	call   c000059c <memcmp>
c0015fb7:	83 c4 10             	add    esp,0x10
c0015fba:	85 c0                	test   eax,eax
c0015fbc:	0f 94 c0             	sete   al
c0015fbf:	84 c0                	test   al,al
c0015fc1:	74 06                	je     c0015fc9 <findRSDP()+0x7a>
c0015fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fc7:	eb 0c                	jmp    c0015fd5 <findRSDP()+0x86>
c0015fc9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0015fce:	eb ca                	jmp    c0015f9a <findRSDP()+0x4b>
c0015fd0:	b8 00 00 00 00       	mov    eax,0x0
c0015fd5:	83 c4 1c             	add    esp,0x1c
c0015fd8:	c3                   	ret    

c0015fd9 <loadACPITables(unsigned char*)>:
c0015fd9:	56                   	push   esi
c0015fda:	53                   	push   ebx
c0015fdb:	83 ec 44             	sub    esp,0x44
c0015fde:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0015fe3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015fe9:	83 e0 04             	and    eax,0x4
c0015fec:	84 c0                	test   al,al
c0015fee:	0f 84 05 02 00 00    	je     c00161f9 <loadACPITables(unsigned char*)+0x220>
c0015ff4:	a0 00 c5 03 c0       	mov    al,ds:0xc003c500
c0015ff9:	84 c0                	test   al,al
c0015ffb:	74 75                	je     c0016072 <loadACPITables(unsigned char*)+0x99>
c0015ffd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016001:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016005:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016009:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001600c:	83 e8 24             	sub    eax,0x24
c001600f:	c1 e8 03             	shr    eax,0x3
c0016012:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016016:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001601e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016022:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016026:	0f 8d b2 00 00 00    	jge    c00160de <loadACPITables(unsigned char*)+0x105>
c001602c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016030:	83 c0 24             	add    eax,0x24
c0016033:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001603b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001603f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016043:	c1 e0 03             	shl    eax,0x3
c0016046:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001604a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001604e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016051:	8b 00                	mov    eax,DWORD PTR [eax]
c0016053:	89 c1                	mov    ecx,eax
c0016055:	a1 ec c2 03 c0       	mov    eax,ds:0xc003c2ec
c001605a:	8d 50 01             	lea    edx,[eax+0x1]
c001605d:	89 15 ec c2 03 c0    	mov    DWORD PTR ds:0xc003c2ec,edx
c0016063:	89 ca                	mov    edx,ecx
c0016065:	89 14 c5 04 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3cfc],edx
c001606c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016070:	eb ac                	jmp    c001601e <loadACPITables(unsigned char*)+0x45>
c0016072:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016076:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001607a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001607e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016081:	83 e8 24             	sub    eax,0x24
c0016084:	c1 e8 02             	shr    eax,0x2
c0016087:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001608b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016093:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016097:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001609b:	7d 41                	jge    c00160de <loadACPITables(unsigned char*)+0x105>
c001609d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160a1:	83 c0 24             	add    eax,0x24
c00160a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00160b4:	c1 e0 02             	shl    eax,0x2
c00160b7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00160bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00160c1:	a1 ec c2 03 c0       	mov    eax,ds:0xc003c2ec
c00160c6:	8d 50 01             	lea    edx,[eax+0x1]
c00160c9:	89 15 ec c2 03 c0    	mov    DWORD PTR ds:0xc003c2ec,edx
c00160cf:	89 ca                	mov    edx,ecx
c00160d1:	89 14 c5 04 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3cfc],edx
c00160d8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00160dc:	eb b5                	jmp    c0016093 <loadACPITables(unsigned char*)+0xba>
c00160de:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00160e6:	a1 ec c2 03 c0       	mov    eax,ds:0xc003c2ec
c00160eb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00160ef:	0f 8d 05 01 00 00    	jge    c00161fa <loadACPITables(unsigned char*)+0x221>
c00160f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00160f9:	8b 04 c5 04 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3cfc]
c0016100:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001610c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016110:	25 ff 0f 00 00       	and    eax,0xfff
c0016115:	89 c6                	mov    esi,eax
c0016117:	e8 f3 b2 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001611c:	89 c3                	mov    ebx,eax
c001611e:	83 ec 0c             	sub    esp,0xc
c0016121:	6a 01                	push   0x1
c0016123:	e8 57 b1 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016128:	83 c4 10             	add    esp,0x10
c001612b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001612f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016135:	83 ec 0c             	sub    esp,0xc
c0016138:	6a 01                	push   0x1
c001613a:	6a 01                	push   0x1
c001613c:	50                   	push   eax
c001613d:	52                   	push   edx
c001613e:	53                   	push   ebx
c001613f:	e8 5e ba ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016144:	83 c4 20             	add    esp,0x20
c0016147:	09 f0                	or     eax,esi
c0016149:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001614d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016151:	c1 e0 03             	shl    eax,0x3
c0016154:	05 00 c3 03 c0       	add    eax,0xc003c300
c0016159:	83 ec 04             	sub    esp,0x4
c001615c:	6a 04                	push   0x4
c001615e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016162:	50                   	push   eax
c0016163:	e8 f9 a4 fe ff       	call   c0000661 <memcpy>
c0016168:	83 c4 10             	add    esp,0x10
c001616b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001616f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016172:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016176:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001617a:	05 00 10 00 00       	add    eax,0x1000
c001617f:	c1 e8 0c             	shr    eax,0xc
c0016182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001618a:	89 04 24             	mov    DWORD PTR [esp],eax
c001618d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016191:	25 ff 0f 00 00       	and    eax,0xfff
c0016196:	89 c6                	mov    esi,eax
c0016198:	e8 72 b2 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001619d:	89 c3                	mov    ebx,eax
c001619f:	83 ec 0c             	sub    esp,0xc
c00161a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161a6:	e8 d4 b0 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161b2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00161b8:	83 ec 0c             	sub    esp,0xc
c00161bb:	6a 01                	push   0x1
c00161bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00161c1:	50                   	push   eax
c00161c2:	52                   	push   edx
c00161c3:	53                   	push   ebx
c00161c4:	e8 d9 b9 ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161c9:	83 c4 20             	add    esp,0x20
c00161cc:	09 f0                	or     eax,esi
c00161ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00161d5:	83 ec 0c             	sub    esp,0xc
c00161d8:	50                   	push   eax
c00161d9:	e8 d7 b3 ff ff       	call   c00115b5 <Virt::freeKernelVirtualPages(unsigned long)>
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00161e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161e9:	89 14 c5 04 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3cfc],edx
c00161f0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00161f4:	e9 ed fe ff ff       	jmp    c00160e6 <loadACPITables(unsigned char*)+0x10d>
c00161f9:	90                   	nop
c00161fa:	83 c4 44             	add    esp,0x44
c00161fd:	5b                   	pop    ebx
c00161fe:	5e                   	pop    esi
c00161ff:	c3                   	ret    

c0016200 <findRSDT(unsigned char*)>:
c0016200:	56                   	push   esi
c0016201:	53                   	push   ebx
c0016202:	83 ec 44             	sub    esp,0x44
c0016205:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001620a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016210:	83 e0 04             	and    eax,0x4
c0016213:	84 c0                	test   al,al
c0016215:	75 0a                	jne    c0016221 <findRSDT(unsigned char*)+0x21>
c0016217:	b8 00 00 00 00       	mov    eax,0x0
c001621c:	e9 f7 00 00 00       	jmp    c0016318 <findRSDT(unsigned char*)+0x118>
c0016221:	83 ec 04             	sub    esp,0x4
c0016224:	6a 24                	push   0x24
c0016226:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001622a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001622e:	50                   	push   eax
c001622f:	e8 2d a4 fe ff       	call   c0000661 <memcpy>
c0016234:	83 c4 10             	add    esp,0x10
c0016237:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001623b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001623f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016247:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001624b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001624f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016257:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001625b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001625f:	25 ff 0f 00 00       	and    eax,0xfff
c0016264:	89 c6                	mov    esi,eax
c0016266:	e8 a4 b1 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c001626b:	89 c3                	mov    ebx,eax
c001626d:	83 ec 0c             	sub    esp,0xc
c0016270:	6a 02                	push   0x2
c0016272:	e8 08 b0 ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c0016277:	83 c4 10             	add    esp,0x10
c001627a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001627e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016284:	83 ec 0c             	sub    esp,0xc
c0016287:	6a 01                	push   0x1
c0016289:	6a 02                	push   0x2
c001628b:	50                   	push   eax
c001628c:	52                   	push   edx
c001628d:	53                   	push   ebx
c001628e:	e8 0f b9 ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016293:	83 c4 20             	add    esp,0x20
c0016296:	09 f0                	or     eax,esi
c0016298:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001629c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162a0:	25 ff 0f 00 00       	and    eax,0xfff
c00162a5:	89 c6                	mov    esi,eax
c00162a7:	e8 63 b1 ff ff       	call   c001140f <Virt::getAKernelVAS()>
c00162ac:	89 c3                	mov    ebx,eax
c00162ae:	83 ec 0c             	sub    esp,0xc
c00162b1:	6a 02                	push   0x2
c00162b3:	e8 c7 af ff ff       	call   c001127f <Virt::allocateKernelVirtualPages(int)>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00162bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00162c5:	83 ec 0c             	sub    esp,0xc
c00162c8:	6a 01                	push   0x1
c00162ca:	6a 02                	push   0x2
c00162cc:	50                   	push   eax
c00162cd:	52                   	push   edx
c00162ce:	53                   	push   ebx
c00162cf:	e8 ce b8 ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00162d4:	83 c4 20             	add    esp,0x20
c00162d7:	09 f0                	or     eax,esi
c00162d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162dd:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00162e2:	75 11                	jne    c00162f5 <findRSDT(unsigned char*)+0xf5>
c00162e4:	c6 05 00 c5 03 c0 00 	mov    BYTE PTR ds:0xc003c500,0x0
c00162eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00162f3:	eb 1f                	jmp    c0016314 <findRSDT(unsigned char*)+0x114>
c00162f5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00162fa:	75 11                	jne    c001630d <findRSDT(unsigned char*)+0x10d>
c00162fc:	c6 05 00 c5 03 c0 01 	mov    BYTE PTR ds:0xc003c500,0x1
c0016303:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016307:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001630b:	eb 07                	jmp    c0016314 <findRSDT(unsigned char*)+0x114>
c001630d:	b8 00 00 00 00       	mov    eax,0x0
c0016312:	eb 04                	jmp    c0016318 <findRSDT(unsigned char*)+0x118>
c0016314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016318:	83 c4 44             	add    esp,0x44
c001631b:	5b                   	pop    ebx
c001631c:	5e                   	pop    esi
c001631d:	c3                   	ret    

c001631e <findDataTable(unsigned char*, char*)>:
c001631e:	83 ec 1c             	sub    esp,0x1c
c0016321:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0016326:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001632c:	83 e0 04             	and    eax,0x4
c001632f:	84 c0                	test   al,al
c0016331:	75 07                	jne    c001633a <findDataTable(unsigned char*, char*)+0x1c>
c0016333:	b8 00 00 00 00       	mov    eax,0x0
c0016338:	eb 7c                	jmp    c00163b6 <findDataTable(unsigned char*, char*)+0x98>
c001633a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016342:	a1 ec c2 03 c0       	mov    eax,ds:0xc003c2ec
c0016347:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001634b:	7d 3a                	jge    c0016387 <findDataTable(unsigned char*, char*)+0x69>
c001634d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016351:	c1 e0 03             	shl    eax,0x3
c0016354:	05 00 c3 03 c0       	add    eax,0xc003c300
c0016359:	83 ec 04             	sub    esp,0x4
c001635c:	6a 04                	push   0x4
c001635e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016362:	50                   	push   eax
c0016363:	e8 34 a2 fe ff       	call   c000059c <memcmp>
c0016368:	83 c4 10             	add    esp,0x10
c001636b:	85 c0                	test   eax,eax
c001636d:	0f 94 c0             	sete   al
c0016370:	84 c0                	test   al,al
c0016372:	74 0d                	je     c0016381 <findDataTable(unsigned char*, char*)+0x63>
c0016374:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016378:	8b 04 c5 04 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3cfc]
c001637f:	eb 35                	jmp    c00163b6 <findDataTable(unsigned char*, char*)+0x98>
c0016381:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016385:	eb bb                	jmp    c0016342 <findDataTable(unsigned char*, char*)+0x24>
c0016387:	a0 00 c5 03 c0       	mov    al,ds:0xc003c500
c001638c:	84 c0                	test   al,al
c001638e:	74 07                	je     c0016397 <findDataTable(unsigned char*, char*)+0x79>
c0016390:	b8 58 00 00 00       	mov    eax,0x58
c0016395:	eb 05                	jmp    c001639c <findDataTable(unsigned char*, char*)+0x7e>
c0016397:	b8 52 00 00 00       	mov    eax,0x52
c001639c:	83 ec 04             	sub    esp,0x4
c001639f:	50                   	push   eax
c00163a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163a4:	68 dc 9f 03 c0       	push   0xc0039fdc
c00163a9:	e8 b2 6a ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	b8 00 00 00 00       	mov    eax,0x0
c00163b6:	83 c4 1c             	add    esp,0x1c
c00163b9:	c3                   	ret    

c00163ba <scanMADT()>:
c00163ba:	83 ec 2c             	sub    esp,0x2c
c00163bd:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c00163c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00163c8:	83 e0 04             	and    eax,0x4
c00163cb:	84 c0                	test   al,al
c00163cd:	0f 84 73 03 00 00    	je     c0016746 <scanMADT()+0x38c>
c00163d3:	e8 77 fb ff ff       	call   c0015f4f <findRSDP()>
c00163d8:	a3 0c c5 03 c0       	mov    ds:0xc003c50c,eax
c00163dd:	a1 0c c5 03 c0       	mov    eax,ds:0xc003c50c
c00163e2:	85 c0                	test   eax,eax
c00163e4:	75 19                	jne    c00163ff <scanMADT()+0x45>
c00163e6:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c00163eb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00163f1:	83 e2 fb             	and    edx,0xfffffffb
c00163f4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00163fa:	e9 4b 03 00 00       	jmp    c001674a <scanMADT()+0x390>
c00163ff:	a1 0c c5 03 c0       	mov    eax,ds:0xc003c50c
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	50                   	push   eax
c0016408:	e8 f3 fd ff ff       	call   c0016200 <findRSDT(unsigned char*)>
c001640d:	83 c4 10             	add    esp,0x10
c0016410:	a3 08 c5 03 c0       	mov    ds:0xc003c508,eax
c0016415:	a1 08 c5 03 c0       	mov    eax,ds:0xc003c508
c001641a:	85 c0                	test   eax,eax
c001641c:	75 19                	jne    c0016437 <scanMADT()+0x7d>
c001641e:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0016423:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016429:	83 e2 fb             	and    edx,0xfffffffb
c001642c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016432:	e9 13 03 00 00       	jmp    c001674a <scanMADT()+0x390>
c0016437:	a1 08 c5 03 c0       	mov    eax,ds:0xc003c508
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	50                   	push   eax
c0016440:	e8 94 fb ff ff       	call   c0015fd9 <loadACPITables(unsigned char*)>
c0016445:	83 c4 10             	add    esp,0x10
c0016448:	a1 08 c5 03 c0       	mov    eax,ds:0xc003c508
c001644d:	83 ec 08             	sub    esp,0x8
c0016450:	68 1a 9f 03 c0       	push   0xc0039f1a
c0016455:	50                   	push   eax
c0016456:	e8 c3 fe ff ff       	call   c001631e <findDataTable(unsigned char*, char*)>
c001645b:	83 c4 10             	add    esp,0x10
c001645e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016462:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016467:	75 19                	jne    c0016482 <scanMADT()+0xc8>
c0016469:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001646e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016474:	83 e2 fe             	and    edx,0xfffffffe
c0016477:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001647d:	e9 c8 02 00 00       	jmp    c001674a <scanMADT()+0x390>
c0016482:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001648a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001648e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016491:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016495:	0f 87 af 02 00 00    	ja     c001674a <scanMADT()+0x390>
c001649b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00164a3:	0f 87 a1 02 00 00    	ja     c001674a <scanMADT()+0x390>
c00164a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164b5:	8d 50 01             	lea    edx,[eax+0x1]
c00164b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164c0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00164c4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00164c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164cc:	8d 50 01             	lea    edx,[eax+0x1]
c00164cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164d7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00164db:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c00164df:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c00164e4:	0f 86 5f 02 00 00    	jbe    c0016749 <scanMADT()+0x38f>
c00164ea:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00164ef:	75 57                	jne    c0016548 <scanMADT()+0x18e>
c00164f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164f5:	8d 50 01             	lea    edx,[eax+0x1]
c00164f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164fc:	8a 15 40 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c640
c0016502:	0f b6 d2             	movzx  edx,dl
c0016505:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016509:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001650d:	88 82 80 c6 03 c0    	mov    BYTE PTR [edx-0x3ffc3980],al
c0016513:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016517:	8d 50 01             	lea    edx,[eax+0x1]
c001651a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001651e:	8a 15 40 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c640
c0016524:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016527:	88 0d 40 c6 03 c0    	mov    BYTE PTR ds:0xc003c640,cl
c001652d:	0f b6 d2             	movzx  edx,dl
c0016530:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016534:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016538:	88 82 60 c6 03 c0    	mov    BYTE PTR [edx-0x3ffc39a0],al
c001653e:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016543:	e9 ea 01 00 00       	jmp    c0016732 <scanMADT()+0x378>
c0016548:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c001654d:	0f 85 14 01 00 00    	jne    c0016667 <scanMADT()+0x2ad>
c0016553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016557:	8d 50 01             	lea    edx,[eax+0x1]
c001655a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001655e:	8a 15 10 c5 03 c0    	mov    dl,BYTE PTR ds:0xc003c510
c0016564:	0f b6 d2             	movzx  edx,dl
c0016567:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001656b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001656f:	88 82 20 c5 03 c0    	mov    BYTE PTR [edx-0x3ffc3ae0],al
c0016575:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016579:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001657d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016581:	01 d0                	add    eax,edx
c0016583:	83 c0 2c             	add    eax,0x2c
c0016586:	8a 00                	mov    al,BYTE PTR [eax]
c0016588:	0f b6 d0             	movzx  edx,al
c001658b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001658f:	8d 48 01             	lea    ecx,[eax+0x1]
c0016592:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016596:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001659a:	0f b6 c0             	movzx  eax,al
c001659d:	c1 e0 08             	shl    eax,0x8
c00165a0:	89 d1                	mov    ecx,edx
c00165a2:	09 c1                	or     ecx,eax
c00165a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165a8:	8d 50 02             	lea    edx,[eax+0x2]
c00165ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165b3:	0f b6 c0             	movzx  eax,al
c00165b6:	c1 e0 10             	shl    eax,0x10
c00165b9:	09 c1                	or     ecx,eax
c00165bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165bf:	8d 50 03             	lea    edx,[eax+0x3]
c00165c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00165ca:	0f b6 c0             	movzx  eax,al
c00165cd:	c1 e0 18             	shl    eax,0x18
c00165d0:	09 c1                	or     ecx,eax
c00165d2:	89 ca                	mov    edx,ecx
c00165d4:	a0 10 c5 03 c0       	mov    al,ds:0xc003c510
c00165d9:	0f b6 c0             	movzx  eax,al
c00165dc:	89 14 85 40 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3ac0],edx
c00165e3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00165e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00165ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165f0:	01 d0                	add    eax,edx
c00165f2:	83 c0 2c             	add    eax,0x2c
c00165f5:	8a 00                	mov    al,BYTE PTR [eax]
c00165f7:	0f b6 d0             	movzx  edx,al
c00165fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165fe:	8d 48 01             	lea    ecx,[eax+0x1]
c0016601:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016605:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016609:	0f b6 c0             	movzx  eax,al
c001660c:	c1 e0 08             	shl    eax,0x8
c001660f:	89 d1                	mov    ecx,edx
c0016611:	09 c1                	or     ecx,eax
c0016613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016617:	8d 50 02             	lea    edx,[eax+0x2]
c001661a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001661e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016622:	0f b6 c0             	movzx  eax,al
c0016625:	c1 e0 10             	shl    eax,0x10
c0016628:	09 c1                	or     ecx,eax
c001662a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001662e:	8d 50 03             	lea    edx,[eax+0x3]
c0016631:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016635:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016639:	0f b6 c0             	movzx  eax,al
c001663c:	c1 e0 18             	shl    eax,0x18
c001663f:	09 c1                	or     ecx,eax
c0016641:	89 ca                	mov    edx,ecx
c0016643:	a0 10 c5 03 c0       	mov    al,ds:0xc003c510
c0016648:	0f b6 c0             	movzx  eax,al
c001664b:	89 14 85 c0 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3a40],edx
c0016652:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016657:	a0 10 c5 03 c0       	mov    al,ds:0xc003c510
c001665c:	40                   	inc    eax
c001665d:	a2 10 c5 03 c0       	mov    ds:0xc003c510,al
c0016662:	e9 cb 00 00 00       	jmp    c0016732 <scanMADT()+0x378>
c0016667:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c001666c:	0f 85 a6 00 00 00    	jne    c0016718 <scanMADT()+0x35e>
c0016672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016676:	8d 50 01             	lea    edx,[eax+0x1]
c0016679:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001667d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016681:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016685:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016689:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001668d:	8d 50 01             	lea    edx,[eax+0x1]
c0016690:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016694:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016698:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001669c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00166a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00166a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166a8:	01 d0                	add    eax,edx
c00166aa:	83 c0 2c             	add    eax,0x2c
c00166ad:	8a 00                	mov    al,BYTE PTR [eax]
c00166af:	0f b6 d0             	movzx  edx,al
c00166b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166b6:	8d 48 01             	lea    ecx,[eax+0x1]
c00166b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166bd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00166c1:	0f b6 c0             	movzx  eax,al
c00166c4:	c1 e0 08             	shl    eax,0x8
c00166c7:	89 d1                	mov    ecx,edx
c00166c9:	09 c1                	or     ecx,eax
c00166cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166cf:	8d 50 02             	lea    edx,[eax+0x2]
c00166d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00166da:	0f b6 c0             	movzx  eax,al
c00166dd:	c1 e0 10             	shl    eax,0x10
c00166e0:	09 c1                	or     ecx,eax
c00166e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166e6:	8d 50 03             	lea    edx,[eax+0x3]
c00166e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00166f1:	0f b6 c0             	movzx  eax,al
c00166f4:	c1 e0 18             	shl    eax,0x18
c00166f7:	09 c8                	or     eax,ecx
c00166f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166fd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016702:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016707:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001670c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016710:	88 90 60 b0 03 c0    	mov    BYTE PTR [eax-0x3ffc4fa0],dl
c0016716:	eb 1a                	jmp    c0016732 <scanMADT()+0x378>
c0016718:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c001671d:	75 07                	jne    c0016726 <scanMADT()+0x36c>
c001671f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016724:	eb 0c                	jmp    c0016732 <scanMADT()+0x378>
c0016726:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c001672b:	75 05                	jne    c0016732 <scanMADT()+0x378>
c001672d:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016732:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001673b:	01 d0                	add    eax,edx
c001673d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016741:	e9 44 fd ff ff       	jmp    c001648a <scanMADT()+0xd0>
c0016746:	90                   	nop
c0016747:	eb 01                	jmp    c001674a <scanMADT()+0x390>
c0016749:	90                   	nop
c001674a:	83 c4 2c             	add    esp,0x2c
c001674d:	c3                   	ret    

c001674e <ACPI::ACPI()>:
c001674e:	83 ec 0c             	sub    esp,0xc
c0016751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016755:	83 ec 08             	sub    esp,0x8
c0016758:	68 1f 9f 03 c0       	push   0xc0039f1f
c001675d:	50                   	push   eax
c001675e:	e8 a7 d1 ff ff       	call   c001390a <Device::Device(char const*)>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	ba 44 a0 03 c0       	mov    edx,0xc003a044
c001676b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676f:	89 10                	mov    DWORD PTR [eax],edx
c0016771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016775:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001677c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016780:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001678a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00167a3:	e8 12 fc ff ff       	call   c00163ba <scanMADT()>
c00167a8:	90                   	nop
c00167a9:	83 c4 0c             	add    esp,0xc
c00167ac:	c3                   	ret    
c00167ad:	90                   	nop

c00167ae <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00167ae:	83 ec 2c             	sub    esp,0x2c
c00167b1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00167b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00167b9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00167bd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00167c1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00167c6:	88 d0                	mov    al,dl
c00167c8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00167cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00167d1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00167d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167dd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00167e3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00167e7:	0f 8d 97 00 00 00    	jge    c0016884 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00167ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00167f5:	83 c2 2a             	add    edx,0x2a
c00167f8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00167fc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016801:	75 78                	jne    c001687b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016803:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001680b:	83 c2 2a             	add    edx,0x2a
c001680e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016812:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016816:	75 63                	jne    c001687b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016818:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001681d:	74 3a                	je     c0016859 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001681f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016823:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016827:	83 c2 2a             	add    edx,0x2a
c001682a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001682e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016832:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016835:	39 c2                	cmp    edx,eax
c0016837:	74 10                	je     c0016849 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016839:	83 ec 0c             	sub    esp,0xc
c001683c:	68 0c a0 03 c0       	push   0xc003a00c
c0016841:	e8 38 67 ff ff       	call   c000cf7e <panic(char const*)>
c0016846:	83 c4 10             	add    esp,0x10
c0016849:	83 ec 0c             	sub    esp,0xc
c001684c:	68 24 9f 03 c0       	push   0xc0039f24
c0016851:	e8 28 67 ff ff       	call   c000cf7e <panic(char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001685d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016861:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016865:	83 c2 2a             	add    edx,0x2a
c0016868:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001686c:	8b 02                	mov    eax,DWORD PTR [edx]
c001686e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016871:	89 01                	mov    DWORD PTR [ecx],eax
c0016873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016876:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001687b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001687f:	e9 55 ff ff ff       	jmp    c00167d9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016884:	90                   	nop
c0016885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016889:	83 c4 2c             	add    esp,0x2c
c001688c:	c2 04 00             	ret    0x4
c001688f:	90                   	nop

c0016890 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016890:	83 ec 1c             	sub    esp,0x1c
c0016893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016897:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001689b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001689f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00168a4:	88 c8                	mov    al,cl
c00168a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00168aa:	88 d0                	mov    al,dl
c00168ac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00168b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b4:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00168ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168be:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00168c1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00168c5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00168c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168cd:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00168d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168d7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00168da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168de:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00168e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e7:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00168ed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00168f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00168f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f8:	83 c2 2a             	add    edx,0x2a
c00168fb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00168ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016903:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001690d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016910:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016914:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016922:	8d 50 01             	lea    edx,[eax+0x1]
c0016925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016929:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001692f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016933:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016939:	3d 00 08 00 00       	cmp    eax,0x800
c001693e:	75 10                	jne    c0016950 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	68 33 9f 03 c0       	push   0xc0039f33
c0016948:	e8 31 66 ff ff       	call   c000cf7e <panic(char const*)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	90                   	nop
c0016951:	83 c4 1c             	add    esp,0x1c
c0016954:	c3                   	ret    
c0016955:	90                   	nop

c0016956 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0016956:	b8 00 00 00 00       	mov    eax,0x0
c001695b:	c3                   	ret    

c001695c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001695c:	83 ec 1c             	sub    esp,0x1c
c001695f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016963:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0016966:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001696a:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001696f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016974:	83 ec 08             	sub    esp,0x8
c0016977:	52                   	push   edx
c0016978:	50                   	push   eax
c0016979:	e8 da 4c ff ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001697e:	83 c4 10             	add    esp,0x10
c0016981:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0016985:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001698a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001698f:	83 ec 04             	sub    esp,0x4
c0016992:	6a 01                	push   0x1
c0016994:	52                   	push   edx
c0016995:	50                   	push   eax
c0016996:	e8 c5 4d ff ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	90                   	nop
c001699f:	83 c4 1c             	add    esp,0x1c
c00169a2:	c3                   	ret    
c00169a3:	90                   	nop

c00169a4 <ACPI::open(int, int, void*)>:
c00169a4:	53                   	push   ebx
c00169a5:	83 ec 18             	sub    esp,0x18
c00169a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ac:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00169b2:	83 f0 01             	xor    eax,0x1
c00169b5:	84 c0                	test   al,al
c00169b7:	74 0b                	je     c00169c4 <ACPI::open(int, int, void*)+0x20>
c00169b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169bd:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00169c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c8:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00169ce:	84 c0                	test   al,al
c00169d0:	74 60                	je     c0016a32 <ACPI::open(int, int, void*)+0x8e>
c00169d2:	83 ec 0c             	sub    esp,0xc
c00169d5:	68 58 01 00 00       	push   0x158
c00169da:	e8 31 ba ff ff       	call   c0012410 <operator new(unsigned long)>
c00169df:	83 c4 10             	add    esp,0x10
c00169e2:	89 c3                	mov    ebx,eax
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	53                   	push   ebx
c00169e8:	e8 25 45 00 00       	call   c001af12 <PCI::PCI()>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00169f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f8:	83 ec 08             	sub    esp,0x8
c00169fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00169ff:	50                   	push   eax
c0016a00:	e8 15 cd ff ff       	call   c001371a <Device::addChild(Device*)>
c0016a05:	83 c4 10             	add    esp,0x10
c0016a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a0e:	83 c0 08             	add    eax,0x8
c0016a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a13:	6a 00                	push   0x0
c0016a15:	6a 00                	push   0x0
c0016a17:	6a 00                	push   0x0
c0016a19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a1d:	ff d0                	call   eax
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	83 ec 0c             	sub    esp,0xc
c0016a25:	68 50 9f 03 c0       	push   0xc0039f50
c0016a2a:	e8 31 64 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	83 ec 0c             	sub    esp,0xc
c0016a35:	68 5b 9f 03 c0       	push   0xc0039f5b
c0016a3a:	e8 c5 52 ff ff       	call   c000bd04 <loadKernelSymbolTable(char const*)>
c0016a3f:	83 c4 10             	add    esp,0x10
c0016a42:	8b 1d 08 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b908
c0016a48:	83 ec 0c             	sub    esp,0xc
c0016a4b:	68 79 9f 03 c0       	push   0xc0039f79
c0016a50:	e8 eb 5b ff ff       	call   c000c640 <loadDLL(char const*)>
c0016a55:	83 c4 10             	add    esp,0x10
c0016a58:	83 ec 08             	sub    esp,0x8
c0016a5b:	53                   	push   ebx
c0016a5c:	50                   	push   eax
c0016a5d:	e8 a7 5c ff ff       	call   c000c709 <executeDLL(unsigned long, void*)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0016a6a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a70:	83 e0 04             	and    eax,0x4
c0016a73:	84 c0                	test   al,al
c0016a75:	74 23                	je     c0016a9a <ACPI::open(int, int, void*)+0xf6>
c0016a77:	8b 1d 08 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b908
c0016a7d:	83 ec 0c             	sub    esp,0xc
c0016a80:	68 96 9f 03 c0       	push   0xc0039f96
c0016a85:	e8 b6 5b ff ff       	call   c000c640 <loadDLL(char const*)>
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	83 ec 08             	sub    esp,0x8
c0016a90:	53                   	push   ebx
c0016a91:	50                   	push   eax
c0016a92:	e8 72 5c ff ff       	call   c000c709 <executeDLL(unsigned long, void*)>
c0016a97:	83 c4 10             	add    esp,0x10
c0016a9a:	a1 08 c5 03 c0       	mov    eax,ds:0xc003c508
c0016a9f:	83 ec 08             	sub    esp,0x8
c0016aa2:	68 b3 9f 03 c0       	push   0xc0039fb3
c0016aa7:	50                   	push   eax
c0016aa8:	e8 71 f8 ff ff       	call   c001631e <findDataTable(unsigned char*, char*)>
c0016aad:	83 c4 10             	add    esp,0x10
c0016ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ab4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016ab9:	74 13                	je     c0016ace <ACPI::open(int, int, void*)+0x12a>
c0016abb:	83 ec 08             	sub    esp,0x8
c0016abe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ac6:	e8 91 fe ff ff       	call   c001695c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	b8 00 00 00 00       	mov    eax,0x0
c0016ad3:	83 c4 18             	add    esp,0x18
c0016ad6:	5b                   	pop    ebx
c0016ad7:	c3                   	ret    

c0016ad8 <ACPI::sleep()>:
c0016ad8:	83 ec 0c             	sub    esp,0xc
c0016adb:	a1 e0 c2 03 c0       	mov    eax,ds:0xc003c2e0
c0016ae0:	85 c0                	test   eax,eax
c0016ae2:	74 07                	je     c0016aeb <ACPI::sleep()+0x13>
c0016ae4:	a1 e0 c2 03 c0       	mov    eax,ds:0xc003c2e0
c0016ae9:	ff d0                	call   eax
c0016aeb:	90                   	nop
c0016aec:	83 c4 0c             	add    esp,0xc
c0016aef:	c3                   	ret    

c0016af0 <CPU::close(int, int, void*)>:
c0016af0:	31 c0                	xor    eax,eax
c0016af2:	c3                   	ret    

c0016af3 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016af3:	55                   	push   ebp
c0016af4:	57                   	push   edi
c0016af5:	56                   	push   esi
c0016af6:	53                   	push   ebx
c0016af7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016afb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016aff:	89 ce                	mov    esi,ecx
c0016b01:	89 d5                	mov    ebp,edx
c0016b03:	80 f9 04             	cmp    cl,0x4
c0016b06:	75 28                	jne    c0016b30 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016b08:	8d 42 f9             	lea    eax,[edx-0x7]
c0016b0b:	3c 03                	cmp    al,0x3
c0016b0d:	0f 86 63 01 00 00    	jbe    c0016c76 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016b13:	80 fa 03             	cmp    dl,0x3
c0016b16:	0f 84 5a 01 00 00    	je     c0016c76 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016b1c:	8d 7a f2             	lea    edi,[edx-0xe]
c0016b1f:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016b24:	89 fb                	mov    ebx,edi
c0016b26:	80 fb 01             	cmp    bl,0x1
c0016b29:	77 4e                	ja     c0016b79 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016b2b:	e9 52 01 00 00       	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b30:	80 f9 05             	cmp    cl,0x5
c0016b33:	75 4d                	jne    c0016b82 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016b35:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016b3a:	80 fa 03             	cmp    dl,0x3
c0016b3d:	0f 86 3f 01 00 00    	jbe    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b43:	8d 7a fa             	lea    edi,[edx-0x6]
c0016b46:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016b4b:	89 fb                	mov    ebx,edi
c0016b4d:	80 fb 01             	cmp    bl,0x1
c0016b50:	0f 86 2c 01 00 00    	jbe    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b56:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016b5b:	80 fa 08             	cmp    dl,0x8
c0016b5e:	0f 84 1e 01 00 00    	je     c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b64:	89 d7                	mov    edi,edx
c0016b66:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016b6b:	83 e7 fb             	and    edi,0xfffffffb
c0016b6e:	89 fb                	mov    ebx,edi
c0016b70:	80 fb 09             	cmp    bl,0x9
c0016b73:	0f 84 09 01 00 00    	je     c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016b79:	31 c0                	xor    eax,eax
c0016b7b:	89 eb                	mov    ebx,ebp
c0016b7d:	0f b6 fb             	movzx  edi,bl
c0016b80:	eb 30                	jmp    c0016bb2 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016b82:	31 c0                	xor    eax,eax
c0016b84:	80 f9 06             	cmp    cl,0x6
c0016b87:	75 f2                	jne    c0016b7b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016b89:	80 fa 0a             	cmp    dl,0xa
c0016b8c:	77 ed                	ja     c0016b7b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016b8e:	bf de 05 00 00       	mov    edi,0x5de
c0016b93:	0f a3 d7             	bt     edi,edx
c0016b96:	73 e3                	jae    c0016b7b <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016b98:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016b9d:	e9 e0 00 00 00       	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ba2:	39 c7                	cmp    edi,eax
c0016ba4:	0f 84 d3 00 00 00    	je     c0016c7d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016baa:	40                   	inc    eax
c0016bab:	3d d0 00 00 00       	cmp    eax,0xd0
c0016bb0:	74 09                	je     c0016bbb <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016bb2:	89 f3                	mov    ebx,esi
c0016bb4:	80 fb 0f             	cmp    bl,0xf
c0016bb7:	75 f1                	jne    c0016baa <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016bb9:	eb e7                	jmp    c0016ba2 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016bbb:	80 f9 10             	cmp    cl,0x10
c0016bbe:	75 14                	jne    c0016bd4 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016bc0:	8d 42 fc             	lea    eax,[edx-0x4]
c0016bc3:	83 e0 fb             	and    eax,0xfffffffb
c0016bc6:	3c 02                	cmp    al,0x2
c0016bc8:	76 34                	jbe    c0016bfe <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016bca:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016bcf:	80 fa 02             	cmp    dl,0x2
c0016bd2:	eb 24                	jmp    c0016bf8 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016bd4:	80 f9 11             	cmp    cl,0x11
c0016bd7:	75 13                	jne    c0016bec <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016bd9:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016bde:	80 fa 03             	cmp    dl,0x3
c0016be1:	0f 85 9b 00 00 00    	jne    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016be7:	e9 91 00 00 00       	jmp    c0016c7d <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016bec:	80 f9 12             	cmp    cl,0x12
c0016bef:	75 14                	jne    c0016c05 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016bf1:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016bf6:	fe ca                	dec    dl
c0016bf8:	0f 85 84 00 00 00    	jne    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bfe:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016c03:	eb 7d                	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c05:	80 f9 14             	cmp    cl,0x14
c0016c08:	75 12                	jne    c0016c1c <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016c0a:	4a                   	dec    edx
c0016c0b:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016c10:	80 fa 01             	cmp    dl,0x1
c0016c13:	77 6d                	ja     c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c15:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016c1a:	eb 66                	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c1c:	80 f9 15             	cmp    cl,0x15
c0016c1f:	75 31                	jne    c0016c52 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016c21:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016c26:	80 fa 01             	cmp    dl,0x1
c0016c29:	74 57                	je     c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c2b:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016c30:	80 fa 13             	cmp    dl,0x13
c0016c33:	76 0c                	jbe    c0016c41 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016c35:	80 fa 30             	cmp    dl,0x30
c0016c38:	75 48                	jne    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c3a:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016c3f:	eb 41                	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c41:	b9 04 00 09 00       	mov    ecx,0x90004
c0016c46:	0f a3 d1             	bt     ecx,edx
c0016c49:	73 37                	jae    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c4b:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016c50:	eb 30                	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c52:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016c57:	80 f9 16             	cmp    cl,0x16
c0016c5a:	75 26                	jne    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c5c:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016c61:	84 d2                	test   dl,dl
c0016c63:	74 1d                	je     c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c65:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016c6a:	80 fa 30             	cmp    dl,0x30
c0016c6d:	75 13                	jne    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c6f:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016c74:	eb 0c                	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c76:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016c7b:	eb 05                	jmp    c0016c82 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c7d:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016c82:	5b                   	pop    ebx
c0016c83:	5e                   	pop    esi
c0016c84:	5f                   	pop    edi
c0016c85:	5d                   	pop    ebp
c0016c86:	c3                   	ret    

c0016c87 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016c87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016c8f:	80 f9 04             	cmp    cl,0x4
c0016c92:	75 6b                	jne    c0016cff <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016c94:	b8 80 b0 03 c0       	mov    eax,0xc003b080
c0016c99:	80 fa 01             	cmp    dl,0x1
c0016c9c:	0f 86 92 02 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ca2:	b8 90 b0 03 c0       	mov    eax,0xc003b090
c0016ca7:	80 fa 02             	cmp    dl,0x2
c0016caa:	0f 84 84 02 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cb0:	b8 a0 b0 03 c0       	mov    eax,0xc003b0a0
c0016cb5:	80 fa 03             	cmp    dl,0x3
c0016cb8:	0f 84 76 02 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cbe:	b8 b0 b0 03 c0       	mov    eax,0xc003b0b0
c0016cc3:	80 fa 04             	cmp    dl,0x4
c0016cc6:	0f 84 68 02 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ccc:	b8 c0 b0 03 c0       	mov    eax,0xc003b0c0
c0016cd1:	80 fa 05             	cmp    dl,0x5
c0016cd4:	0f 84 5a 02 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cda:	b8 a0 b0 03 c0       	mov    eax,0xc003b0a0
c0016cdf:	80 fa 07             	cmp    dl,0x7
c0016ce2:	0f 84 4c 02 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ce8:	83 ea 08             	sub    edx,0x8
c0016ceb:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016cf0:	80 fa 01             	cmp    dl,0x1
c0016cf3:	0f 87 3b 02 00 00    	ja     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016cf9:	b8 d0 b0 03 c0       	mov    eax,0xc003b0d0
c0016cfe:	c3                   	ret    
c0016cff:	80 f9 05             	cmp    cl,0x5
c0016d02:	75 45                	jne    c0016d49 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016d04:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016d07:	b8 e0 b0 03 c0       	mov    eax,0xc003b0e0
c0016d0c:	80 f9 02             	cmp    cl,0x2
c0016d0f:	0f 86 1f 02 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d15:	80 fa 04             	cmp    dl,0x4
c0016d18:	0f 84 f3 01 00 00    	je     c0016f11 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016d1e:	80 fa 07             	cmp    dl,0x7
c0016d21:	0f 84 0d 02 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d27:	b8 f0 b0 03 c0       	mov    eax,0xc003b0f0
c0016d2c:	80 fa 08             	cmp    dl,0x8
c0016d2f:	0f 84 ff 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d35:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016d3a:	80 fa 09             	cmp    dl,0x9
c0016d3d:	0f 85 f1 01 00 00    	jne    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d43:	b8 00 b1 03 c0       	mov    eax,0xc003b100
c0016d48:	c3                   	ret    
c0016d49:	80 f9 06             	cmp    cl,0x6
c0016d4c:	0f 85 85 01 00 00    	jne    c0016ed7 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016d52:	b8 10 b1 03 c0       	mov    eax,0xc003b110
c0016d57:	80 fa 01             	cmp    dl,0x1
c0016d5a:	0f 84 d4 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d60:	8d 42 fb             	lea    eax,[edx-0x5]
c0016d63:	3c 01                	cmp    al,0x1
c0016d65:	0f 86 ac 01 00 00    	jbe    c0016f17 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016d6b:	80 fa 03             	cmp    dl,0x3
c0016d6e:	0f 84 a3 01 00 00    	je     c0016f17 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016d74:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016d77:	b8 30 b1 03 c0       	mov    eax,0xc003b130
c0016d7c:	80 f9 01             	cmp    cl,0x1
c0016d7f:	0f 86 af 01 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d85:	80 fa 09             	cmp    dl,0x9
c0016d88:	0f 84 8f 01 00 00    	je     c0016f1d <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016d8e:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016d91:	80 f9 01             	cmp    cl,0x1
c0016d94:	0f 86 9a 01 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d9a:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016d9f:	80 fa 0d             	cmp    dl,0xd
c0016da2:	0f 84 8c 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016da8:	b8 50 b1 03 c0       	mov    eax,0xc003b150
c0016dad:	80 fa 0e             	cmp    dl,0xe
c0016db0:	0f 84 7e 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016db6:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016dbb:	80 fa 0f             	cmp    dl,0xf
c0016dbe:	0f 84 70 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dc4:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016dc9:	80 fa 15             	cmp    dl,0x15
c0016dcc:	0f 84 62 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dd2:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016dd5:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016dda:	80 f9 01             	cmp    cl,0x1
c0016ddd:	0f 86 51 01 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016de3:	80 fa 1a             	cmp    dl,0x1a
c0016de6:	0f 84 37 01 00 00    	je     c0016f23 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016dec:	80 fa 1c             	cmp    dl,0x1c
c0016def:	0f 84 34 01 00 00    	je     c0016f29 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016df5:	80 fa 1d             	cmp    dl,0x1d
c0016df8:	0f 84 36 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dfe:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016e03:	80 fa 25             	cmp    dl,0x25
c0016e06:	0f 84 28 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e0c:	8d 4a da             	lea    ecx,[edx-0x26]
c0016e0f:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016e14:	80 f9 01             	cmp    cl,0x1
c0016e17:	0f 86 17 01 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e1d:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016e22:	80 fa 2a             	cmp    dl,0x2a
c0016e25:	0f 84 09 01 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e2b:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016e30:	80 fa 2c             	cmp    dl,0x2c
c0016e33:	0f 84 fb 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e39:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016e3e:	80 fa 2d             	cmp    dl,0x2d
c0016e41:	0f 84 ed 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e47:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016e4c:	80 fa 2e             	cmp    dl,0x2e
c0016e4f:	0f 84 df 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e55:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016e5a:	80 fa 2f             	cmp    dl,0x2f
c0016e5d:	0f 84 d1 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e63:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016e66:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016e6b:	80 f9 01             	cmp    cl,0x1
c0016e6e:	0f 86 c0 00 00 00    	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e74:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016e79:	80 fa 37             	cmp    dl,0x37
c0016e7c:	0f 84 b2 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e82:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016e87:	80 fa 3a             	cmp    dl,0x3a
c0016e8a:	0f 84 a4 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e90:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016e95:	80 fa 3c             	cmp    dl,0x3c
c0016e98:	0f 84 96 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e9e:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016ea3:	80 fa 3d             	cmp    dl,0x3d
c0016ea6:	0f 84 88 00 00 00    	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eac:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016eb1:	80 fa 3e             	cmp    dl,0x3e
c0016eb4:	74 7e                	je     c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eb6:	8d 42 bb             	lea    eax,[edx-0x45]
c0016eb9:	3c 01                	cmp    al,0x1
c0016ebb:	76 72                	jbe    c0016f2f <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016ebd:	80 fa 3f             	cmp    dl,0x3f
c0016ec0:	74 6d                	je     c0016f2f <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016ec2:	80 fa 4a             	cmp    dl,0x4a
c0016ec5:	74 0a                	je     c0016ed1 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016ec7:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016ecc:	80 fa 4d             	cmp    dl,0x4d
c0016ecf:	75 63                	jne    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ed1:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016ed6:	c3                   	ret    
c0016ed7:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016edc:	80 f9 0b             	cmp    cl,0xb
c0016edf:	75 0a                	jne    c0016eeb <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016ee1:	fe ca                	dec    dl
c0016ee3:	75 4f                	jne    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ee5:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016eea:	c3                   	ret    
c0016eeb:	80 f9 0f             	cmp    cl,0xf
c0016eee:	75 44                	jne    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ef0:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016ef5:	80 fa 02             	cmp    dl,0x2
c0016ef8:	76 3a                	jbe    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016efa:	8d 42 fd             	lea    eax,[edx-0x3]
c0016efd:	3c 01                	cmp    al,0x1
c0016eff:	76 0a                	jbe    c0016f0b <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016f01:	b8 bd a1 03 c0       	mov    eax,0xc003a1bd
c0016f06:	80 fa 06             	cmp    dl,0x6
c0016f09:	75 29                	jne    c0016f34 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f0b:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016f10:	c3                   	ret    
c0016f11:	b8 f0 b0 03 c0       	mov    eax,0xc003b0f0
c0016f16:	c3                   	ret    
c0016f17:	b8 20 b1 03 c0       	mov    eax,0xc003b120
c0016f1c:	c3                   	ret    
c0016f1d:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016f22:	c3                   	ret    
c0016f23:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016f28:	c3                   	ret    
c0016f29:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016f2e:	c3                   	ret    
c0016f2f:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016f34:	c3                   	ret    

c0016f35 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016f35:	60                   	pusha  
c0016f36:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f42:	9c                   	pushf  
c0016f43:	fa                   	cli    
c0016f44:	0f 09                	wbinvd 
c0016f46:	0f 30                	wrmsr  
c0016f48:	9d                   	popf   
c0016f49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f4d:	89 02                	mov    DWORD PTR [edx],eax
c0016f4f:	61                   	popa   
c0016f50:	c3                   	ret    

c0016f51 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016f51:	60                   	pusha  
c0016f52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016f56:	9c                   	pushf  
c0016f57:	fa                   	cli    
c0016f58:	0f 09                	wbinvd 
c0016f5a:	31 c0                	xor    eax,eax
c0016f5c:	31 d2                	xor    edx,edx
c0016f5e:	0f 32                	rdmsr  
c0016f60:	9d                   	popf   
c0016f61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f65:	89 02                	mov    DWORD PTR [edx],eax
c0016f67:	61                   	popa   
c0016f68:	c3                   	ret    

c0016f69 <AMD_K6_writeback(int, int, int)>:
c0016f69:	56                   	push   esi
c0016f6a:	53                   	push   ebx
c0016f6b:	83 ec 10             	sub    esp,0x10
c0016f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f72:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0016f77:	75 5d                	jne    c0016fd6 <AMD_K6_writeback(int, int, int)+0x6d>
c0016f79:	83 f8 08             	cmp    eax,0x8
c0016f7c:	75 09                	jne    c0016f87 <AMD_K6_writeback(int, int, int)+0x1e>
c0016f7e:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0016f83:	7e 13                	jle    c0016f98 <AMD_K6_writeback(int, int, int)+0x2f>
c0016f85:	eb 30                	jmp    c0016fb7 <AMD_K6_writeback(int, int, int)+0x4e>
c0016f87:	83 f8 06             	cmp    eax,0x6
c0016f8a:	7c 4a                	jl     c0016fd6 <AMD_K6_writeback(int, int, int)+0x6d>
c0016f8c:	83 f8 07             	cmp    eax,0x7
c0016f8f:	7e 07                	jle    c0016f98 <AMD_K6_writeback(int, int, int)+0x2f>
c0016f91:	83 f8 09             	cmp    eax,0x9
c0016f94:	74 21                	je     c0016fb7 <AMD_K6_writeback(int, int, int)+0x4e>
c0016f96:	eb 3e                	jmp    c0016fd6 <AMD_K6_writeback(int, int, int)+0x6d>
c0016f98:	89 e6                	mov    esi,esp
c0016f9a:	8b 1d c4 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bac4
c0016fa0:	56                   	push   esi
c0016fa1:	c1 eb 15             	shr    ebx,0x15
c0016fa4:	68 82 00 00 c0       	push   0xc0000082
c0016fa9:	83 e3 7e             	and    ebx,0x7e
c0016fac:	e8 a0 ff ff ff       	call   c0016f51 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016fb1:	56                   	push   esi
c0016fb2:	6a 00                	push   0x0
c0016fb4:	53                   	push   ebx
c0016fb5:	eb 12                	jmp    c0016fc9 <AMD_K6_writeback(int, int, int)+0x60>
c0016fb7:	89 e3                	mov    ebx,esp
c0016fb9:	53                   	push   ebx
c0016fba:	68 82 00 00 c0       	push   0xc0000082
c0016fbf:	e8 8d ff ff ff       	call   c0016f51 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016fc4:	53                   	push   ebx
c0016fc5:	6a 00                	push   0x0
c0016fc7:	6a 00                	push   0x0
c0016fc9:	68 82 00 00 c0       	push   0xc0000082
c0016fce:	e8 62 ff ff ff       	call   c0016f35 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016fd3:	83 c4 18             	add    esp,0x18
c0016fd6:	83 c4 10             	add    esp,0x10
c0016fd9:	5b                   	pop    ebx
c0016fda:	5e                   	pop    esi
c0016fdb:	c3                   	ret    

c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016fdc:	55                   	push   ebp
c0016fdd:	57                   	push   edi
c0016fde:	56                   	push   esi
c0016fdf:	53                   	push   ebx
c0016fe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fe4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016fe8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0016fec:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0016ff0:	39 05 20 b3 03 c0    	cmp    DWORD PTR ds:0xc003b320,eax
c0016ff6:	75 23                	jne    c001701b <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016ff8:	a1 ac c6 03 c0       	mov    eax,ds:0xc003c6ac
c0016ffd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017001:	89 06                	mov    DWORD PTR [esi],eax
c0017003:	a1 a8 c6 03 c0       	mov    eax,ds:0xc003c6a8
c0017008:	89 07                	mov    DWORD PTR [edi],eax
c001700a:	a1 a4 c6 03 c0       	mov    eax,ds:0xc003c6a4
c001700f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017012:	a1 a0 c6 03 c0       	mov    eax,ds:0xc003c6a0
c0017017:	89 02                	mov    DWORD PTR [edx],eax
c0017019:	eb 3f                	jmp    c001705a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001701b:	31 c9                	xor    ecx,ecx
c001701d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017021:	0f a2                	cpuid  
c0017023:	89 06                	mov    DWORD PTR [esi],eax
c0017025:	89 1f                	mov    DWORD PTR [edi],ebx
c0017027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001702b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001702e:	89 10                	mov    DWORD PTR [eax],edx
c0017030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017034:	a3 20 b3 03 c0       	mov    ds:0xc003b320,eax
c0017039:	8b 06                	mov    eax,DWORD PTR [esi]
c001703b:	a3 ac c6 03 c0       	mov    ds:0xc003c6ac,eax
c0017040:	8b 07                	mov    eax,DWORD PTR [edi]
c0017042:	a3 a8 c6 03 c0       	mov    ds:0xc003c6a8,eax
c0017047:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001704a:	a3 a4 c6 03 c0       	mov    ds:0xc003c6a4,eax
c001704f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017053:	8b 00                	mov    eax,DWORD PTR [eax]
c0017055:	a3 a0 c6 03 c0       	mov    ds:0xc003c6a0,eax
c001705a:	5b                   	pop    ebx
c001705b:	5e                   	pop    esi
c001705c:	5f                   	pop    edi
c001705d:	5d                   	pop    ebp
c001705e:	c3                   	ret    

c001705f <cpuidCheckEDX(unsigned int)>:
c001705f:	83 ec 10             	sub    esp,0x10
c0017062:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017066:	50                   	push   eax
c0017067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001706b:	50                   	push   eax
c001706c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017070:	50                   	push   eax
c0017071:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017075:	50                   	push   eax
c0017076:	6a 01                	push   0x1
c0017078:	e8 5f ff ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001707d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017081:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017085:	0f 95 c0             	setne  al
c0017088:	83 c4 24             	add    esp,0x24
c001708b:	c3                   	ret    

c001708c <cpuidCheckECX(unsigned int)>:
c001708c:	83 ec 10             	sub    esp,0x10
c001708f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017093:	50                   	push   eax
c0017094:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017098:	50                   	push   eax
c0017099:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001709d:	50                   	push   eax
c001709e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170a2:	50                   	push   eax
c00170a3:	6a 01                	push   0x1
c00170a5:	e8 32 ff ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170ae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00170b2:	0f 95 c0             	setne  al
c00170b5:	83 c4 24             	add    esp,0x24
c00170b8:	c3                   	ret    

c00170b9 <cpuidCheckExtendedEBX(unsigned int)>:
c00170b9:	83 ec 10             	sub    esp,0x10
c00170bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170c0:	50                   	push   eax
c00170c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170c5:	50                   	push   eax
c00170c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170ca:	50                   	push   eax
c00170cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170cf:	50                   	push   eax
c00170d0:	6a 07                	push   0x7
c00170d2:	e8 05 ff ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170db:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00170df:	0f 95 c0             	setne  al
c00170e2:	83 c4 24             	add    esp,0x24
c00170e5:	c3                   	ret    

c00170e6 <cpuidCheckExtendedECX(unsigned int)>:
c00170e6:	83 ec 10             	sub    esp,0x10
c00170e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170ed:	50                   	push   eax
c00170ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170f2:	50                   	push   eax
c00170f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170f7:	50                   	push   eax
c00170f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00170fc:	50                   	push   eax
c00170fd:	6a 07                	push   0x7
c00170ff:	e8 d8 fe ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017104:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017108:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001710c:	0f 95 c0             	setne  al
c001710f:	83 c4 24             	add    esp,0x24
c0017112:	c3                   	ret    

c0017113 <getCPUNumber()>:
c0017113:	31 c0                	xor    eax,eax
c0017115:	c3                   	ret    

c0017116 <thisCPU()>:
c0017116:	e8 f8 ff ff ff       	call   c0017113 <getCPUNumber()>
c001711b:	8b 15 08 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b908
c0017121:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017128:	c3                   	ret    
c0017129:	90                   	nop

c001712a <CPU::CPU()>:
c001712a:	83 ec 0c             	sub    esp,0xc
c001712d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017131:	83 ec 08             	sub    esp,0x8
c0017134:	68 bd a1 03 c0       	push   0xc003a1bd
c0017139:	50                   	push   eax
c001713a:	e8 cb c7 ff ff       	call   c001390a <Device::Device(char const*)>
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	ba 94 a2 03 c0       	mov    edx,0xc003a294
c0017147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001714b:	89 10                	mov    DWORD PTR [eax],edx
c001714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017151:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001715b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001715f:	05 78 01 00 00       	add    eax,0x178
c0017164:	83 ec 0c             	sub    esp,0xc
c0017167:	50                   	push   eax
c0017168:	e8 e5 55 ff ff       	call   c000c752 <GDT::GDT()>
c001716d:	83 c4 10             	add    esp,0x10
c0017170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017174:	05 7c 09 00 00       	add    eax,0x97c
c0017179:	83 ec 0c             	sub    esp,0xc
c001717c:	50                   	push   eax
c001717d:	e8 30 58 ff ff       	call   c000c9b2 <IDT::IDT()>
c0017182:	83 c4 10             	add    esp,0x10
c0017185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017189:	05 7c 11 00 00       	add    eax,0x117c
c001718e:	83 ec 0c             	sub    esp,0xc
c0017191:	50                   	push   eax
c0017192:	e8 cf 9b ff ff       	call   c0010d66 <TSS::TSS()>
c0017197:	83 c4 10             	add    esp,0x10
c001719a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001719e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00171a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00171b3:	90                   	nop
c00171b4:	83 c4 0c             	add    esp,0xc
c00171b7:	c3                   	ret    

c00171b8 <CPU::displayFeatures()>:
c00171b8:	c3                   	ret    
c00171b9:	90                   	nop

c00171ba <CPU::detectFeatures()>:
c00171ba:	55                   	push   ebp
c00171bb:	57                   	push   edi
c00171bc:	56                   	push   esi
c00171bd:	53                   	push   ebx
c00171be:	83 ec 50             	sub    esp,0x50
c00171c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00171c5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00171cf:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00171d6:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00171dc:	6a 0d                	push   0xd
c00171de:	6a 00                	push   0x0
c00171e0:	57                   	push   edi
c00171e1:	e8 f2 94 fe ff       	call   c00006d8 <memset>
c00171e6:	83 c4 10             	add    esp,0x10
c00171e9:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c00171ee:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00171f5:	0f 84 20 09 00 00    	je     c0017b1b <CPU::detectFeatures()+0x961>
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	6a 10                	push   0x10
c0017200:	e8 5a fe ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c0017205:	83 e0 01             	and    eax,0x1
c0017208:	8d 14 00             	lea    edx,[eax+eax*1]
c001720b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017211:	83 e0 fd             	and    eax,0xfffffffd
c0017214:	09 d0                	or     eax,edx
c0017216:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001721c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017223:	e8 37 fe ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c0017228:	83 e0 01             	and    eax,0x1
c001722b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017232:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017238:	83 e0 fb             	and    eax,0xfffffffb
c001723b:	09 d0                	or     eax,edx
c001723d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017243:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001724a:	e8 10 fe ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c001724f:	83 e0 01             	and    eax,0x1
c0017252:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017259:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001725f:	83 e0 f7             	and    eax,0xfffffff7
c0017262:	09 d0                	or     eax,edx
c0017264:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001726a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017271:	e8 e9 fd ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c0017276:	83 e0 01             	and    eax,0x1
c0017279:	c1 e0 04             	shl    eax,0x4
c001727c:	88 c2                	mov    dl,al
c001727e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017284:	83 e0 ef             	and    eax,0xffffffef
c0017287:	09 d0                	or     eax,edx
c0017289:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001728f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017296:	e8 c4 fd ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c001729b:	83 e0 01             	and    eax,0x1
c001729e:	c1 e0 05             	shl    eax,0x5
c00172a1:	88 c2                	mov    dl,al
c00172a3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172a9:	83 e0 df             	and    eax,0xffffffdf
c00172ac:	09 d0                	or     eax,edx
c00172ae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00172bb:	e8 9f fd ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c00172c0:	83 e0 01             	and    eax,0x1
c00172c3:	8d 14 00             	lea    edx,[eax+eax*1]
c00172c6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00172cc:	83 e0 fd             	and    eax,0xfffffffd
c00172cf:	09 d0                	or     eax,edx
c00172d1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00172d7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00172de:	e8 7c fd ff ff       	call   c001705f <cpuidCheckEDX(unsigned int)>
c00172e3:	83 e0 01             	and    eax,0x1
c00172e6:	c1 e0 06             	shl    eax,0x6
c00172e9:	88 c2                	mov    dl,al
c00172eb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00172f1:	83 e0 bf             	and    eax,0xffffffbf
c00172f4:	09 d0                	or     eax,edx
c00172f6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00172fc:	58                   	pop    eax
c00172fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017301:	56                   	push   esi
c0017302:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017306:	55                   	push   ebp
c0017307:	8d 44 24 28          	lea    eax,[esp+0x28]
c001730b:	50                   	push   eax
c001730c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017310:	52                   	push   edx
c0017311:	6a 00                	push   0x0
c0017313:	e8 c4 fc ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017318:	83 c4 1c             	add    esp,0x1c
c001731b:	6a 04                	push   0x4
c001731d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017321:	50                   	push   eax
c0017322:	57                   	push   edi
c0017323:	e8 39 93 fe ff       	call   c0000661 <memcpy>
c0017328:	83 c4 0c             	add    esp,0xc
c001732b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017331:	6a 04                	push   0x4
c0017333:	56                   	push   esi
c0017334:	50                   	push   eax
c0017335:	e8 27 93 fe ff       	call   c0000661 <memcpy>
c001733a:	83 c4 0c             	add    esp,0xc
c001733d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017343:	6a 04                	push   0x4
c0017345:	55                   	push   ebp
c0017346:	50                   	push   eax
c0017347:	e8 15 93 fe ff       	call   c0000661 <memcpy>
c001734c:	58                   	pop    eax
c001734d:	5a                   	pop    edx
c001734e:	68 68 a0 03 c0       	push   0xc003a068
c0017353:	57                   	push   edi
c0017354:	e8 21 95 fe ff       	call   c000087a <strcmp>
c0017359:	83 c4 10             	add    esp,0x10
c001735c:	85 c0                	test   eax,eax
c001735e:	75 0f                	jne    c001736f <CPU::detectFeatures()+0x1b5>
c0017360:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001736a:	e9 22 02 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c001736f:	50                   	push   eax
c0017370:	50                   	push   eax
c0017371:	68 75 a0 03 c0       	push   0xc003a075
c0017376:	57                   	push   edi
c0017377:	e8 fe 94 fe ff       	call   c000087a <strcmp>
c001737c:	83 c4 10             	add    esp,0x10
c001737f:	85 c0                	test   eax,eax
c0017381:	74 dd                	je     c0017360 <CPU::detectFeatures()+0x1a6>
c0017383:	51                   	push   ecx
c0017384:	51                   	push   ecx
c0017385:	68 82 a0 03 c0       	push   0xc003a082
c001738a:	57                   	push   edi
c001738b:	e8 ea 94 fe ff       	call   c000087a <strcmp>
c0017390:	83 c4 10             	add    esp,0x10
c0017393:	85 c0                	test   eax,eax
c0017395:	74 2a                	je     c00173c1 <CPU::detectFeatures()+0x207>
c0017397:	52                   	push   edx
c0017398:	52                   	push   edx
c0017399:	68 8f a0 03 c0       	push   0xc003a08f
c001739e:	57                   	push   edi
c001739f:	e8 d6 94 fe ff       	call   c000087a <strcmp>
c00173a4:	83 c4 10             	add    esp,0x10
c00173a7:	85 c0                	test   eax,eax
c00173a9:	74 16                	je     c00173c1 <CPU::detectFeatures()+0x207>
c00173ab:	50                   	push   eax
c00173ac:	50                   	push   eax
c00173ad:	68 9c a0 03 c0       	push   0xc003a09c
c00173b2:	57                   	push   edi
c00173b3:	e8 c2 94 fe ff       	call   c000087a <strcmp>
c00173b8:	83 c4 10             	add    esp,0x10
c00173bb:	85 c0                	test   eax,eax
c00173bd:	74 48                	je     c0017407 <CPU::detectFeatures()+0x24d>
c00173bf:	eb 0f                	jmp    c00173d0 <CPU::detectFeatures()+0x216>
c00173c1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00173cb:	e9 c1 01 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c00173d0:	50                   	push   eax
c00173d1:	50                   	push   eax
c00173d2:	68 a9 a0 03 c0       	push   0xc003a0a9
c00173d7:	57                   	push   edi
c00173d8:	e8 9d 94 fe ff       	call   c000087a <strcmp>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	85 c0                	test   eax,eax
c00173e2:	74 23                	je     c0017407 <CPU::detectFeatures()+0x24d>
c00173e4:	50                   	push   eax
c00173e5:	50                   	push   eax
c00173e6:	68 b6 a0 03 c0       	push   0xc003a0b6
c00173eb:	57                   	push   edi
c00173ec:	e8 89 94 fe ff       	call   c000087a <strcmp>
c00173f1:	83 c4 10             	add    esp,0x10
c00173f4:	85 c0                	test   eax,eax
c00173f6:	75 1e                	jne    c0017416 <CPU::detectFeatures()+0x25c>
c00173f8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017402:	e9 8a 01 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c0017407:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017411:	e9 7b 01 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c0017416:	50                   	push   eax
c0017417:	50                   	push   eax
c0017418:	68 c3 a0 03 c0       	push   0xc003a0c3
c001741d:	57                   	push   edi
c001741e:	e8 57 94 fe ff       	call   c000087a <strcmp>
c0017423:	83 c4 10             	add    esp,0x10
c0017426:	85 c0                	test   eax,eax
c0017428:	75 0f                	jne    c0017439 <CPU::detectFeatures()+0x27f>
c001742a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017434:	e9 58 01 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c0017439:	50                   	push   eax
c001743a:	50                   	push   eax
c001743b:	68 82 a0 03 c0       	push   0xc003a082
c0017440:	57                   	push   edi
c0017441:	e8 34 94 fe ff       	call   c000087a <strcmp>
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	85 c0                	test   eax,eax
c001744b:	75 0f                	jne    c001745c <CPU::detectFeatures()+0x2a2>
c001744d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017457:	e9 35 01 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c001745c:	50                   	push   eax
c001745d:	50                   	push   eax
c001745e:	68 d0 a0 03 c0       	push   0xc003a0d0
c0017463:	57                   	push   edi
c0017464:	e8 11 94 fe ff       	call   c000087a <strcmp>
c0017469:	83 c4 10             	add    esp,0x10
c001746c:	85 c0                	test   eax,eax
c001746e:	75 0f                	jne    c001747f <CPU::detectFeatures()+0x2c5>
c0017470:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001747a:	e9 12 01 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c001747f:	51                   	push   ecx
c0017480:	51                   	push   ecx
c0017481:	68 dd a0 03 c0       	push   0xc003a0dd
c0017486:	57                   	push   edi
c0017487:	e8 ee 93 fe ff       	call   c000087a <strcmp>
c001748c:	83 c4 10             	add    esp,0x10
c001748f:	85 c0                	test   eax,eax
c0017491:	75 0f                	jne    c00174a2 <CPU::detectFeatures()+0x2e8>
c0017493:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001749d:	e9 ef 00 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c00174a2:	52                   	push   edx
c00174a3:	52                   	push   edx
c00174a4:	68 ea a0 03 c0       	push   0xc003a0ea
c00174a9:	57                   	push   edi
c00174aa:	e8 cb 93 fe ff       	call   c000087a <strcmp>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	85 c0                	test   eax,eax
c00174b4:	75 0f                	jne    c00174c5 <CPU::detectFeatures()+0x30b>
c00174b6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00174c0:	e9 cc 00 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c00174c5:	50                   	push   eax
c00174c6:	50                   	push   eax
c00174c7:	68 f7 a0 03 c0       	push   0xc003a0f7
c00174cc:	57                   	push   edi
c00174cd:	e8 a8 93 fe ff       	call   c000087a <strcmp>
c00174d2:	83 c4 10             	add    esp,0x10
c00174d5:	85 c0                	test   eax,eax
c00174d7:	75 0f                	jne    c00174e8 <CPU::detectFeatures()+0x32e>
c00174d9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00174e3:	e9 a9 00 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c00174e8:	50                   	push   eax
c00174e9:	50                   	push   eax
c00174ea:	68 04 a1 03 c0       	push   0xc003a104
c00174ef:	57                   	push   edi
c00174f0:	e8 85 93 fe ff       	call   c000087a <strcmp>
c00174f5:	83 c4 10             	add    esp,0x10
c00174f8:	85 c0                	test   eax,eax
c00174fa:	75 0f                	jne    c001750b <CPU::detectFeatures()+0x351>
c00174fc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017506:	e9 86 00 00 00       	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c001750b:	50                   	push   eax
c001750c:	50                   	push   eax
c001750d:	68 11 a1 03 c0       	push   0xc003a111
c0017512:	57                   	push   edi
c0017513:	e8 62 93 fe ff       	call   c000087a <strcmp>
c0017518:	83 c4 10             	add    esp,0x10
c001751b:	85 c0                	test   eax,eax
c001751d:	75 0c                	jne    c001752b <CPU::detectFeatures()+0x371>
c001751f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017529:	eb 66                	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c001752b:	50                   	push   eax
c001752c:	50                   	push   eax
c001752d:	68 1e a1 03 c0       	push   0xc003a11e
c0017532:	57                   	push   edi
c0017533:	e8 42 93 fe ff       	call   c000087a <strcmp>
c0017538:	83 c4 10             	add    esp,0x10
c001753b:	85 c0                	test   eax,eax
c001753d:	75 0c                	jne    c001754b <CPU::detectFeatures()+0x391>
c001753f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017549:	eb 46                	jmp    c0017591 <CPU::detectFeatures()+0x3d7>
c001754b:	50                   	push   eax
c001754c:	50                   	push   eax
c001754d:	68 2b a1 03 c0       	push   0xc003a12b
c0017552:	57                   	push   edi
c0017553:	e8 22 93 fe ff       	call   c000087a <strcmp>
c0017558:	83 c4 10             	add    esp,0x10
c001755b:	85 c0                	test   eax,eax
c001755d:	74 e0                	je     c001753f <CPU::detectFeatures()+0x385>
c001755f:	50                   	push   eax
c0017560:	50                   	push   eax
c0017561:	68 38 a1 03 c0       	push   0xc003a138
c0017566:	57                   	push   edi
c0017567:	e8 0e 93 fe ff       	call   c000087a <strcmp>
c001756c:	83 c4 10             	add    esp,0x10
c001756f:	85 c0                	test   eax,eax
c0017571:	74 cc                	je     c001753f <CPU::detectFeatures()+0x385>
c0017573:	51                   	push   ecx
c0017574:	51                   	push   ecx
c0017575:	68 45 a1 03 c0       	push   0xc003a145
c001757a:	57                   	push   edi
c001757b:	e8 fa 92 fe ff       	call   c000087a <strcmp>
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	85 c0                	test   eax,eax
c0017585:	74 b8                	je     c001753f <CPU::detectFeatures()+0x385>
c0017587:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017591:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017596:	0f 86 be 00 00 00    	jbe    c001765a <CPU::detectFeatures()+0x4a0>
c001759c:	83 ec 0c             	sub    esp,0xc
c001759f:	68 80 00 00 00       	push   0x80
c00175a4:	e8 10 fb ff ff       	call   c00170b9 <cpuidCheckExtendedEBX(unsigned int)>
c00175a9:	83 e0 01             	and    eax,0x1
c00175ac:	c1 e0 06             	shl    eax,0x6
c00175af:	88 c2                	mov    dl,al
c00175b1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00175b7:	83 e0 bf             	and    eax,0xffffffbf
c00175ba:	09 d0                	or     eax,edx
c00175bc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00175c2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00175c9:	e8 eb fa ff ff       	call   c00170b9 <cpuidCheckExtendedEBX(unsigned int)>
c00175ce:	83 e0 01             	and    eax,0x1
c00175d1:	c1 e0 04             	shl    eax,0x4
c00175d4:	88 c2                	mov    dl,al
c00175d6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00175dc:	83 e0 ef             	and    eax,0xffffffef
c00175df:	09 d0                	or     eax,edx
c00175e1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00175e7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00175ee:	e8 c6 fa ff ff       	call   c00170b9 <cpuidCheckExtendedEBX(unsigned int)>
c00175f3:	c1 e0 07             	shl    eax,0x7
c00175f6:	88 c2                	mov    dl,al
c00175f8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00175fe:	83 e0 7f             	and    eax,0x7f
c0017601:	09 d0                	or     eax,edx
c0017603:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017609:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017610:	e8 d1 fa ff ff       	call   c00170e6 <cpuidCheckExtendedECX(unsigned int)>
c0017615:	83 e0 01             	and    eax,0x1
c0017618:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001761f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017625:	83 e0 f7             	and    eax,0xfffffff7
c0017628:	09 d0                	or     eax,edx
c001762a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017630:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0017637:	e8 aa fa ff ff       	call   c00170e6 <cpuidCheckExtendedECX(unsigned int)>
c001763c:	83 c4 10             	add    esp,0x10
c001763f:	83 e0 01             	and    eax,0x1
c0017642:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017649:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001764f:	83 e0 fb             	and    eax,0xfffffffb
c0017652:	09 d0                	or     eax,edx
c0017654:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001765a:	83 ec 0c             	sub    esp,0xc
c001765d:	56                   	push   esi
c001765e:	55                   	push   ebp
c001765f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0017663:	57                   	push   edi
c0017664:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017668:	50                   	push   eax
c0017669:	6a 01                	push   0x1
c001766b:	e8 6c f9 ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017670:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017674:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001767a:	88 ca                	mov    dl,cl
c001767c:	83 e0 f0             	and    eax,0xfffffff0
c001767f:	83 e2 0f             	and    edx,0xf
c0017682:	09 d0                	or     eax,edx
c0017684:	88 ca                	mov    dl,cl
c0017686:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001768c:	c0 ea 04             	shr    dl,0x4
c001768f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0017693:	0f b6 c2             	movzx  eax,dl
c0017696:	83 c4 20             	add    esp,0x20
c0017699:	c1 e0 06             	shl    eax,0x6
c001769c:	89 c5                	mov    ebp,eax
c001769e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00176a4:	66 25 3f c0          	and    ax,0xc03f
c00176a8:	09 e8                	or     eax,ebp
c00176aa:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00176b1:	89 c8                	mov    eax,ecx
c00176b3:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00176b9:	c1 e8 08             	shr    eax,0x8
c00176bc:	83 e2 3f             	and    edx,0x3f
c00176bf:	83 e0 0f             	and    eax,0xf
c00176c2:	89 c5                	mov    ebp,eax
c00176c4:	c1 e5 06             	shl    ebp,0x6
c00176c7:	09 d5                	or     ebp,edx
c00176c9:	89 ea                	mov    edx,ebp
c00176cb:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00176d1:	88 c2                	mov    dl,al
c00176d3:	c0 ea 02             	shr    dl,0x2
c00176d6:	89 d5                	mov    ebp,edx
c00176d8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00176de:	83 e2 c0             	and    edx,0xffffffc0
c00176e1:	09 d5                	or     ebp,edx
c00176e3:	89 ea                	mov    edx,ebp
c00176e5:	89 cd                	mov    ebp,ecx
c00176e7:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00176ed:	c1 ed 0c             	shr    ebp,0xc
c00176f0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00176f6:	83 e5 03             	and    ebp,0x3
c00176f9:	83 e2 cf             	and    edx,0xffffffcf
c00176fc:	c1 e5 04             	shl    ebp,0x4
c00176ff:	09 d5                	or     ebp,edx
c0017701:	3c 06                	cmp    al,0x6
c0017703:	89 ea                	mov    edx,ebp
c0017705:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001770b:	74 04                	je     c0017711 <CPU::detectFeatures()+0x557>
c001770d:	3c 0f                	cmp    al,0xf
c001770f:	75 5c                	jne    c001776d <CPU::detectFeatures()+0x5b3>
c0017711:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017715:	89 cd                	mov    ebp,ecx
c0017717:	c1 ed 10             	shr    ebp,0x10
c001771a:	c1 e5 04             	shl    ebp,0x4
c001771d:	09 ea                	or     edx,ebp
c001771f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0017725:	0f b6 d2             	movzx  edx,dl
c0017728:	66 81 e5 3f c0       	and    bp,0xc03f
c001772d:	c1 e2 06             	shl    edx,0x6
c0017730:	09 ea                	or     edx,ebp
c0017732:	3c 0f                	cmp    al,0xf
c0017734:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001773b:	75 30                	jne    c001776d <CPU::detectFeatures()+0x5b3>
c001773d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0017743:	c1 e9 14             	shr    ecx,0x14
c0017746:	83 e0 3f             	and    eax,0x3f
c0017749:	83 c1 0f             	add    ecx,0xf
c001774c:	88 ca                	mov    dl,cl
c001774e:	c0 e9 02             	shr    cl,0x2
c0017751:	c1 e2 06             	shl    edx,0x6
c0017754:	09 d0                	or     eax,edx
c0017756:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001775c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0017762:	83 e0 c0             	and    eax,0xffffffc0
c0017765:	09 c1                	or     ecx,eax
c0017767:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001776d:	83 ec 0c             	sub    esp,0xc
c0017770:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017777:	56                   	push   esi
c0017778:	8d 44 24 28          	lea    eax,[esp+0x28]
c001777c:	50                   	push   eax
c001777d:	57                   	push   edi
c001777e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017782:	55                   	push   ebp
c0017783:	68 00 00 00 80       	push   0x80000000
c0017788:	e8 4f f8 ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001778d:	83 c4 20             	add    esp,0x20
c0017790:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0017798:	8d 44 24 18          	lea    eax,[esp+0x18]
c001779c:	76 1e                	jbe    c00177bc <CPU::detectFeatures()+0x602>
c001779e:	83 ec 0c             	sub    esp,0xc
c00177a1:	56                   	push   esi
c00177a2:	50                   	push   eax
c00177a3:	57                   	push   edi
c00177a4:	55                   	push   ebp
c00177a5:	68 01 00 00 80       	push   0x80000001
c00177aa:	e8 2d f8 ff ff       	call   c0016fdc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177af:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00177b9:	83 c4 20             	add    esp,0x20
c00177bc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00177c2:	83 f8 01             	cmp    eax,0x1
c00177c5:	75 6f                	jne    c0017836 <CPU::detectFeatures()+0x67c>
c00177c7:	51                   	push   ecx
c00177c8:	51                   	push   ecx
c00177c9:	68 51 a1 03 c0       	push   0xc003a151
c00177ce:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00177d2:	56                   	push   esi
c00177d3:	e8 1c 90 fe ff       	call   c00007f4 <strcpy>
c00177d8:	5f                   	pop    edi
c00177d9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00177df:	5d                   	pop    ebp
c00177e0:	66 c1 e8 06          	shr    ax,0x6
c00177e4:	0f b6 c0             	movzx  eax,al
c00177e7:	50                   	push   eax
c00177e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00177ee:	c1 e8 0e             	shr    eax,0xe
c00177f1:	0f b6 c0             	movzx  eax,al
c00177f4:	50                   	push   eax
c00177f5:	e8 8d f4 ff ff       	call   c0016c87 <lookupIntelCPUName(unsigned char, unsigned char)>
c00177fa:	5a                   	pop    edx
c00177fb:	59                   	pop    ecx
c00177fc:	50                   	push   eax
c00177fd:	56                   	push   esi
c00177fe:	e8 3e 91 fe ff       	call   c0000941 <strcat>
c0017803:	5f                   	pop    edi
c0017804:	5d                   	pop    ebp
c0017805:	56                   	push   esi
c0017806:	53                   	push   ebx
c0017807:	e8 f0 c0 ff ff       	call   c00138fc <Device::setName(char const*)>
c001780c:	58                   	pop    eax
c001780d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0017813:	5a                   	pop    edx
c0017814:	68 58 a1 03 c0       	push   0xc003a158
c0017819:	50                   	push   eax
c001781a:	e8 5b 90 fe ff       	call   c000087a <strcmp>
c001781f:	83 c4 10             	add    esp,0x10
c0017822:	85 c0                	test   eax,eax
c0017824:	0f 85 73 03 00 00    	jne    c0017b9d <CPU::detectFeatures()+0x9e3>
c001782a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0017831:	e9 67 03 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x9e3>
c0017836:	83 f8 02             	cmp    eax,0x2
c0017839:	0f 85 b5 00 00 00    	jne    c00178f4 <CPU::detectFeatures()+0x73a>
c001783f:	57                   	push   edi
c0017840:	57                   	push   edi
c0017841:	68 6a a1 03 c0       	push   0xc003a16a
c0017846:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001784a:	56                   	push   esi
c001784b:	e8 a4 8f fe ff       	call   c00007f4 <strcpy>
c0017850:	5d                   	pop    ebp
c0017851:	58                   	pop    eax
c0017852:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017858:	66 c1 e8 06          	shr    ax,0x6
c001785c:	0f b6 c0             	movzx  eax,al
c001785f:	50                   	push   eax
c0017860:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017866:	c1 e8 0e             	shr    eax,0xe
c0017869:	0f b6 c0             	movzx  eax,al
c001786c:	50                   	push   eax
c001786d:	e8 81 f2 ff ff       	call   c0016af3 <lookupAMDCPUName(unsigned char, unsigned char)>
c0017872:	5a                   	pop    edx
c0017873:	59                   	pop    ecx
c0017874:	50                   	push   eax
c0017875:	56                   	push   esi
c0017876:	e8 c6 90 fe ff       	call   c0000941 <strcat>
c001787b:	5f                   	pop    edi
c001787c:	5d                   	pop    ebp
c001787d:	56                   	push   esi
c001787e:	53                   	push   ebx
c001787f:	e8 78 c0 ff ff       	call   c00138fc <Device::setName(char const*)>
c0017884:	58                   	pop    eax
c0017885:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001788b:	5a                   	pop    edx
c001788c:	68 6f a1 03 c0       	push   0xc003a16f
c0017891:	50                   	push   eax
c0017892:	e8 e3 8f fe ff       	call   c000087a <strcmp>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	85 c0                	test   eax,eax
c001789c:	75 20                	jne    c00178be <CPU::detectFeatures()+0x704>
c001789e:	8b 15 08 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b908
c00178a4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00178aa:	a8 01                	test   al,0x1
c00178ac:	74 10                	je     c00178be <CPU::detectFeatures()+0x704>
c00178ae:	83 e0 fe             	and    eax,0xfffffffe
c00178b1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00178b7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00178be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178c4:	c1 e8 0e             	shr    eax,0xe
c00178c7:	3c 05                	cmp    al,0x5
c00178c9:	0f 85 ce 02 00 00    	jne    c0017b9d <CPU::detectFeatures()+0x9e3>
c00178cf:	56                   	push   esi
c00178d0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00178d6:	83 e0 0f             	and    eax,0xf
c00178d9:	50                   	push   eax
c00178da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178e0:	66 c1 e8 06          	shr    ax,0x6
c00178e4:	0f b6 c0             	movzx  eax,al
c00178e7:	50                   	push   eax
c00178e8:	6a 05                	push   0x5
c00178ea:	e8 7a f6 ff ff       	call   c0016f69 <AMD_K6_writeback(int, int, int)>
c00178ef:	e9 1f 02 00 00       	jmp    c0017b13 <CPU::detectFeatures()+0x959>
c00178f4:	8d 50 fd             	lea    edx,[eax-0x3]
c00178f7:	83 fa 01             	cmp    edx,0x1
c00178fa:	76 09                	jbe    c0017905 <CPU::detectFeatures()+0x74b>
c00178fc:	83 f8 06             	cmp    eax,0x6
c00178ff:	0f 85 91 01 00 00    	jne    c0017a96 <CPU::detectFeatures()+0x8dc>
c0017905:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001790b:	c1 ea 0e             	shr    edx,0xe
c001790e:	80 fa 05             	cmp    dl,0x5
c0017911:	75 7b                	jne    c001798e <CPU::detectFeatures()+0x7d4>
c0017913:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017919:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001791e:	66 81 fa 00 01       	cmp    dx,0x100
c0017923:	75 0c                	jne    c0017931 <CPU::detectFeatures()+0x777>
c0017925:	51                   	push   ecx
c0017926:	51                   	push   ecx
c0017927:	68 76 a1 03 c0       	push   0xc003a176
c001792c:	e9 dc 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017931:	66 81 fa 00 02       	cmp    dx,0x200
c0017936:	75 0c                	jne    c0017944 <CPU::detectFeatures()+0x78a>
c0017938:	52                   	push   edx
c0017939:	52                   	push   edx
c001793a:	68 89 a1 03 c0       	push   0xc003a189
c001793f:	e9 c9 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017944:	66 81 fa 40 02       	cmp    dx,0x240
c0017949:	75 0c                	jne    c0017957 <CPU::detectFeatures()+0x79d>
c001794b:	50                   	push   eax
c001794c:	50                   	push   eax
c001794d:	68 9b a1 03 c0       	push   0xc003a19b
c0017952:	e9 b6 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017957:	83 f8 06             	cmp    eax,0x6
c001795a:	75 0c                	jne    c0017968 <CPU::detectFeatures()+0x7ae>
c001795c:	50                   	push   eax
c001795d:	50                   	push   eax
c001795e:	68 ad a1 03 c0       	push   0xc003a1ad
c0017963:	e9 a5 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017968:	83 f8 04             	cmp    eax,0x4
c001796b:	75 0c                	jne    c0017979 <CPU::detectFeatures()+0x7bf>
c001796d:	50                   	push   eax
c001796e:	50                   	push   eax
c001796f:	68 b9 a1 03 c0       	push   0xc003a1b9
c0017974:	e9 94 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017979:	83 f8 03             	cmp    eax,0x3
c001797c:	0f 85 1b 02 00 00    	jne    c0017b9d <CPU::detectFeatures()+0x9e3>
c0017982:	50                   	push   eax
c0017983:	50                   	push   eax
c0017984:	68 c1 a1 03 c0       	push   0xc003a1c1
c0017989:	e9 7f 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c001798e:	80 fa 06             	cmp    dl,0x6
c0017991:	0f 85 db 00 00 00    	jne    c0017a72 <CPU::detectFeatures()+0x8b8>
c0017997:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001799d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00179a2:	66 81 fa 80 01       	cmp    dx,0x180
c00179a7:	75 0c                	jne    c00179b5 <CPU::detectFeatures()+0x7fb>
c00179a9:	50                   	push   eax
c00179aa:	50                   	push   eax
c00179ab:	68 cc a1 03 c0       	push   0xc003a1cc
c00179b0:	e9 58 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c00179b5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00179bb:	66 f7 c1 80 ff       	test   cx,0xff80
c00179c0:	75 0c                	jne    c00179ce <CPU::detectFeatures()+0x814>
c00179c2:	50                   	push   eax
c00179c3:	50                   	push   eax
c00179c4:	68 dc a1 03 c0       	push   0xc003a1dc
c00179c9:	e9 3f 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c00179ce:	66 81 fa 40 02       	cmp    dx,0x240
c00179d3:	75 0c                	jne    c00179e1 <CPU::detectFeatures()+0x827>
c00179d5:	55                   	push   ebp
c00179d6:	55                   	push   ebp
c00179d7:	68 e3 a1 03 c0       	push   0xc003a1e3
c00179dc:	e9 2c 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c00179e1:	66 81 fa 80 02       	cmp    dx,0x280
c00179e6:	75 0c                	jne    c00179f4 <CPU::detectFeatures()+0x83a>
c00179e8:	57                   	push   edi
c00179e9:	57                   	push   edi
c00179ea:	68 ec a1 03 c0       	push   0xc003a1ec
c00179ef:	e9 19 01 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c00179f4:	66 81 fa 40 03       	cmp    dx,0x340
c00179f9:	74 ed                	je     c00179e8 <CPU::detectFeatures()+0x82e>
c00179fb:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017a00:	75 0c                	jne    c0017a0e <CPU::detectFeatures()+0x854>
c0017a02:	56                   	push   esi
c0017a03:	56                   	push   esi
c0017a04:	68 f3 a1 03 c0       	push   0xc003a1f3
c0017a09:	e9 ff 00 00 00       	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017a0e:	83 f8 06             	cmp    eax,0x6
c0017a11:	0f 84 45 ff ff ff    	je     c001795c <CPU::detectFeatures()+0x7a2>
c0017a17:	83 f8 04             	cmp    eax,0x4
c0017a1a:	0f 84 4d ff ff ff    	je     c001796d <CPU::detectFeatures()+0x7b3>
c0017a20:	83 f8 03             	cmp    eax,0x3
c0017a23:	0f 85 74 01 00 00    	jne    c0017b9d <CPU::detectFeatures()+0x9e3>
c0017a29:	51                   	push   ecx
c0017a2a:	51                   	push   ecx
c0017a2b:	68 fc a1 03 c0       	push   0xc003a1fc
c0017a30:	53                   	push   ebx
c0017a31:	e8 c6 be ff ff       	call   c00138fc <Device::setName(char const*)>
c0017a36:	b1 c1                	mov    cl,0xc1
c0017a38:	88 c8                	mov    al,cl
c0017a3a:	e6 22                	out    0x22,al
c0017a3c:	e4 23                	in     al,0x23
c0017a3e:	88 c2                	mov    dl,al
c0017a40:	88 c8                	mov    al,cl
c0017a42:	e6 22                	out    0x22,al
c0017a44:	88 d0                	mov    al,dl
c0017a46:	83 c8 10             	or     eax,0x10
c0017a49:	e6 23                	out    0x23,al
c0017a4b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017a52:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017a55:	89 d0                	mov    eax,edx
c0017a57:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017a5d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017a61:	40                   	inc    eax
c0017a62:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017a68:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017a6d:	e9 a1 00 00 00       	jmp    c0017b13 <CPU::detectFeatures()+0x959>
c0017a72:	83 f8 06             	cmp    eax,0x6
c0017a75:	0f 84 e1 fe ff ff    	je     c001795c <CPU::detectFeatures()+0x7a2>
c0017a7b:	83 f8 04             	cmp    eax,0x4
c0017a7e:	0f 84 e9 fe ff ff    	je     c001796d <CPU::detectFeatures()+0x7b3>
c0017a84:	83 f8 03             	cmp    eax,0x3
c0017a87:	0f 85 10 01 00 00    	jne    c0017b9d <CPU::detectFeatures()+0x9e3>
c0017a8d:	52                   	push   edx
c0017a8e:	52                   	push   edx
c0017a8f:	68 07 a2 03 c0       	push   0xc003a207
c0017a94:	eb 77                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017a96:	83 f8 07             	cmp    eax,0x7
c0017a99:	75 09                	jne    c0017aa4 <CPU::detectFeatures()+0x8ea>
c0017a9b:	50                   	push   eax
c0017a9c:	50                   	push   eax
c0017a9d:	68 11 a2 03 c0       	push   0xc003a211
c0017aa2:	eb 69                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017aa4:	83 f8 0a             	cmp    eax,0xa
c0017aa7:	75 09                	jne    c0017ab2 <CPU::detectFeatures()+0x8f8>
c0017aa9:	50                   	push   eax
c0017aaa:	50                   	push   eax
c0017aab:	68 1c a2 03 c0       	push   0xc003a21c
c0017ab0:	eb 5b                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017ab2:	83 f8 0b             	cmp    eax,0xb
c0017ab5:	75 09                	jne    c0017ac0 <CPU::detectFeatures()+0x906>
c0017ab7:	50                   	push   eax
c0017ab8:	50                   	push   eax
c0017ab9:	68 24 a2 03 c0       	push   0xc003a224
c0017abe:	eb 4d                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017ac0:	83 f8 08             	cmp    eax,0x8
c0017ac3:	75 09                	jne    c0017ace <CPU::detectFeatures()+0x914>
c0017ac5:	50                   	push   eax
c0017ac6:	50                   	push   eax
c0017ac7:	68 2d a2 03 c0       	push   0xc003a22d
c0017acc:	eb 3f                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017ace:	83 f8 09             	cmp    eax,0x9
c0017ad1:	75 09                	jne    c0017adc <CPU::detectFeatures()+0x922>
c0017ad3:	50                   	push   eax
c0017ad4:	50                   	push   eax
c0017ad5:	68 35 a2 03 c0       	push   0xc003a235
c0017ada:	eb 31                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017adc:	83 f8 05             	cmp    eax,0x5
c0017adf:	75 09                	jne    c0017aea <CPU::detectFeatures()+0x930>
c0017ae1:	50                   	push   eax
c0017ae2:	50                   	push   eax
c0017ae3:	68 3d a2 03 c0       	push   0xc003a23d
c0017ae8:	eb 23                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017aea:	83 f8 0c             	cmp    eax,0xc
c0017aed:	75 09                	jne    c0017af8 <CPU::detectFeatures()+0x93e>
c0017aef:	55                   	push   ebp
c0017af0:	55                   	push   ebp
c0017af1:	68 4b a2 03 c0       	push   0xc003a24b
c0017af6:	eb 15                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017af8:	83 f8 0d             	cmp    eax,0xd
c0017afb:	75 09                	jne    c0017b06 <CPU::detectFeatures()+0x94c>
c0017afd:	57                   	push   edi
c0017afe:	57                   	push   edi
c0017aff:	68 56 a2 03 c0       	push   0xc003a256
c0017b04:	eb 07                	jmp    c0017b0d <CPU::detectFeatures()+0x953>
c0017b06:	56                   	push   esi
c0017b07:	56                   	push   esi
c0017b08:	68 6a a2 03 c0       	push   0xc003a26a
c0017b0d:	53                   	push   ebx
c0017b0e:	e8 e9 bd ff ff       	call   c00138fc <Device::setName(char const*)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	e9 82 00 00 00       	jmp    c0017b9d <CPU::detectFeatures()+0x9e3>
c0017b1b:	51                   	push   ecx
c0017b1c:	51                   	push   ecx
c0017b1d:	68 b6 a0 03 c0       	push   0xc003a0b6
c0017b22:	57                   	push   edi
c0017b23:	e8 cc 8c fe ff       	call   c00007f4 <strcpy>
c0017b28:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017b32:	e8 48 86 fe ff       	call   c000017f <is486>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	85 c0                	test   eax,eax
c0017b3c:	74 2d                	je     c0017b6b <CPU::detectFeatures()+0x9b1>
c0017b3e:	52                   	push   edx
c0017b3f:	52                   	push   edx
c0017b40:	68 76 a2 03 c0       	push   0xc003a276
c0017b45:	53                   	push   ebx
c0017b46:	e8 b1 bd ff ff       	call   c00138fc <Device::setName(char const*)>
c0017b4b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017b52:	e8 fe 6d 00 00       	call   c001e955 <CPU::readCR0()>
c0017b57:	83 c4 10             	add    esp,0x10
c0017b5a:	83 e0 14             	and    eax,0x14
c0017b5d:	83 f8 04             	cmp    eax,0x4
c0017b60:	75 1f                	jne    c0017b81 <CPU::detectFeatures()+0x9c7>
c0017b62:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017b69:	eb 32                	jmp    c0017b9d <CPU::detectFeatures()+0x9e3>
c0017b6b:	50                   	push   eax
c0017b6c:	50                   	push   eax
c0017b6d:	68 81 a2 03 c0       	push   0xc003a281
c0017b72:	53                   	push   ebx
c0017b73:	e8 84 bd ff ff       	call   c00138fc <Device::setName(char const*)>
c0017b78:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017b7f:	eb d1                	jmp    c0017b52 <CPU::detectFeatures()+0x998>
c0017b81:	e8 d4 85 fe ff       	call   c000015a <hasLegacyFPU>
c0017b86:	83 e0 01             	and    eax,0x1
c0017b89:	8d 14 00             	lea    edx,[eax+eax*1]
c0017b8c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017b92:	83 e0 fd             	and    eax,0xfffffffd
c0017b95:	09 d0                	or     eax,edx
c0017b97:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017b9d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017ba4:	83 c4 4c             	add    esp,0x4c
c0017ba7:	5b                   	pop    ebx
c0017ba8:	5e                   	pop    esi
c0017ba9:	5f                   	pop    edi
c0017baa:	5d                   	pop    ebp
c0017bab:	c3                   	ret    

c0017bac <CPU::setupSMEP()>:
c0017bac:	83 ec 0c             	sub    esp,0xc
c0017baf:	e8 d7 6d 00 00       	call   c001e98b <CPU::readCR4()>
c0017bb4:	0d 00 00 10 00       	or     eax,0x100000
c0017bb9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bbd:	83 c4 0c             	add    esp,0xc
c0017bc0:	e9 ec 74 00 00       	jmp    c001f0b1 <CPU::writeCR4(unsigned long)>
c0017bc5:	90                   	nop

c0017bc6 <CPU::setupUMIP()>:
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	e8 bd 6d 00 00       	call   c001e98b <CPU::readCR4()>
c0017bce:	80 cc 08             	or     ah,0x8
c0017bd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bd5:	83 c4 0c             	add    esp,0xc
c0017bd8:	e9 d4 74 00 00       	jmp    c001f0b1 <CPU::writeCR4(unsigned long)>
c0017bdd:	90                   	nop

c0017bde <CPU::setupTSC()>:
c0017bde:	83 ec 0c             	sub    esp,0xc
c0017be1:	e8 a5 6d 00 00       	call   c001e98b <CPU::readCR4()>
c0017be6:	83 c8 04             	or     eax,0x4
c0017be9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bed:	83 c4 0c             	add    esp,0xc
c0017bf0:	e9 bc 74 00 00       	jmp    c001f0b1 <CPU::writeCR4(unsigned long)>
c0017bf5:	90                   	nop

c0017bf6 <CPU::setupLargePages()>:
c0017bf6:	83 ec 0c             	sub    esp,0xc
c0017bf9:	e8 8d 6d 00 00       	call   c001e98b <CPU::readCR4()>
c0017bfe:	83 c8 10             	or     eax,0x10
c0017c01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c05:	83 c4 0c             	add    esp,0xc
c0017c08:	e9 a4 74 00 00       	jmp    c001f0b1 <CPU::writeCR4(unsigned long)>
c0017c0d:	90                   	nop

c0017c0e <CPU::setupPAT()>:
c0017c0e:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0017c13:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017c1a:	74 2c                	je     c0017c48 <CPU::setupPAT()+0x3a>
c0017c1c:	53                   	push   ebx
c0017c1d:	83 ec 10             	sub    esp,0x10
c0017c20:	68 77 02 00 00       	push   0x277
c0017c25:	50                   	push   eax
c0017c26:	e8 bd 39 ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c0017c2b:	83 e2 f8             	and    edx,0xfffffff8
c0017c2e:	83 ca 01             	or     edx,0x1
c0017c31:	52                   	push   edx
c0017c32:	50                   	push   eax
c0017c33:	68 77 02 00 00       	push   0x277
c0017c38:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c0017c3e:	e8 d1 39 ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017c43:	83 c4 28             	add    esp,0x28
c0017c46:	5b                   	pop    ebx
c0017c47:	c3                   	ret    
c0017c48:	c3                   	ret    
c0017c49:	90                   	nop

c0017c4a <CPU::setupMTRR()>:
c0017c4a:	c3                   	ret    
c0017c4b:	90                   	nop

c0017c4c <CPU::setupGlobalPages()>:
c0017c4c:	83 ec 0c             	sub    esp,0xc
c0017c4f:	e8 37 6d 00 00       	call   c001e98b <CPU::readCR4()>
c0017c54:	0c 80                	or     al,0x80
c0017c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c5a:	83 c4 0c             	add    esp,0xc
c0017c5d:	e9 4f 74 00 00       	jmp    c001f0b1 <CPU::writeCR4(unsigned long)>

c0017c62 <CPU::allowUsermodeDataAccess()>:
c0017c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c66:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017c6d:	74 03                	je     c0017c72 <CPU::allowUsermodeDataAccess()+0x10>
c0017c6f:	0f 01 cb             	stac   
c0017c72:	c3                   	ret    
c0017c73:	90                   	nop

c0017c74 <CPU::prohibitUsermodeDataAccess()>:
c0017c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c78:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017c7f:	74 03                	je     c0017c84 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017c81:	0f 01 ca             	clac   
c0017c84:	c3                   	ret    
c0017c85:	90                   	nop

c0017c86 <CPU::setupSMAP()>:
c0017c86:	53                   	push   ebx
c0017c87:	83 ec 08             	sub    esp,0x8
c0017c8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c8e:	e8 f8 6c 00 00       	call   c001e98b <CPU::readCR4()>
c0017c93:	83 ec 0c             	sub    esp,0xc
c0017c96:	0d 00 00 20 00       	or     eax,0x200000
c0017c9b:	50                   	push   eax
c0017c9c:	e8 10 74 00 00       	call   c001f0b1 <CPU::writeCR4(unsigned long)>
c0017ca1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017ca5:	83 c4 18             	add    esp,0x18
c0017ca8:	5b                   	pop    ebx
c0017ca9:	eb c9                	jmp    c0017c74 <CPU::prohibitUsermodeDataAccess()>
c0017cab:	90                   	nop

c0017cac <CPU::setupFeatures()>:
c0017cac:	53                   	push   ebx
c0017cad:	83 ec 08             	sub    esp,0x8
c0017cb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cb4:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017cbb:	74 0c                	je     c0017cc9 <CPU::setupFeatures()+0x1d>
c0017cbd:	83 ec 0c             	sub    esp,0xc
c0017cc0:	53                   	push   ebx
c0017cc1:	e8 e6 fe ff ff       	call   c0017bac <CPU::setupSMEP()>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017cd0:	74 0c                	je     c0017cde <CPU::setupFeatures()+0x32>
c0017cd2:	83 ec 0c             	sub    esp,0xc
c0017cd5:	53                   	push   ebx
c0017cd6:	e8 ab ff ff ff       	call   c0017c86 <CPU::setupSMAP()>
c0017cdb:	83 c4 10             	add    esp,0x10
c0017cde:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017ce5:	74 0c                	je     c0017cf3 <CPU::setupFeatures()+0x47>
c0017ce7:	83 ec 0c             	sub    esp,0xc
c0017cea:	53                   	push   ebx
c0017ceb:	e8 d6 fe ff ff       	call   c0017bc6 <CPU::setupUMIP()>
c0017cf0:	83 c4 10             	add    esp,0x10
c0017cf3:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017cfa:	74 0c                	je     c0017d08 <CPU::setupFeatures()+0x5c>
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	53                   	push   ebx
c0017d00:	e8 d9 fe ff ff       	call   c0017bde <CPU::setupTSC()>
c0017d05:	83 c4 10             	add    esp,0x10
c0017d08:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017d0f:	74 0c                	je     c0017d1d <CPU::setupFeatures()+0x71>
c0017d11:	83 ec 0c             	sub    esp,0xc
c0017d14:	53                   	push   ebx
c0017d15:	e8 dc fe ff ff       	call   c0017bf6 <CPU::setupLargePages()>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017d24:	74 0c                	je     c0017d32 <CPU::setupFeatures()+0x86>
c0017d26:	83 ec 0c             	sub    esp,0xc
c0017d29:	53                   	push   ebx
c0017d2a:	e8 1d ff ff ff       	call   c0017c4c <CPU::setupGlobalPages()>
c0017d2f:	83 c4 10             	add    esp,0x10
c0017d32:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017d39:	74 0d                	je     c0017d48 <CPU::setupFeatures()+0x9c>
c0017d3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017d3f:	83 c4 08             	add    esp,0x8
c0017d42:	5b                   	pop    ebx
c0017d43:	e9 c6 fe ff ff       	jmp    c0017c0e <CPU::setupPAT()>
c0017d48:	83 c4 08             	add    esp,0x8
c0017d4b:	5b                   	pop    ebx
c0017d4c:	c3                   	ret    
c0017d4d:	90                   	nop

c0017d4e <CPU::open(int, int, void*)>:
c0017d4e:	57                   	push   edi
c0017d4f:	56                   	push   esi
c0017d50:	53                   	push   ebx
c0017d51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d55:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017d59:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017d68:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017d6e:	50                   	push   eax
c0017d6f:	e8 5a 4a ff ff       	call   c000c7ce <GDT::setup()>
c0017d74:	83 c4 0c             	add    esp,0xc
c0017d77:	6a 00                	push   0x0
c0017d79:	68 ef be ad de       	push   0xdeadbeef
c0017d7e:	57                   	push   edi
c0017d7f:	e8 22 90 ff ff       	call   c0010da6 <TSS::setup(unsigned long, unsigned long)>
c0017d84:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d87:	e8 fa 8f ff ff       	call   c0010d86 <TSS::flush()>
c0017d8c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017d92:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d95:	e8 8e 4c ff ff       	call   c000ca28 <IDT::setup()>
c0017d9a:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017da1:	e8 02 73 00 00       	call   c001f0a8 <CPU::writeDR7(unsigned long)>
c0017da6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017db0:	e8 50 5c ff ff       	call   c000da05 <Phys::allocatePage()>
c0017db5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017dbb:	89 30                	mov    DWORD PTR [eax],esi
c0017dbd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017dc3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017dc6:	58                   	pop    eax
c0017dc7:	5a                   	pop    edx
c0017dc8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017dce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017dd2:	e8 af 9d ff ff       	call   c0011b86 <VAS::setCPUSpecific(unsigned long)>
c0017dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017dda:	e8 db f3 ff ff       	call   c00171ba <CPU::detectFeatures()>
c0017ddf:	e8 70 c8 ff ff       	call   c0014654 <setupInterruptController()>
c0017de4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017dea:	a1 b4 ba 03 c0       	mov    eax,ds:0xc003bab4
c0017def:	83 e0 10             	and    eax,0x10
c0017df2:	83 f8 01             	cmp    eax,0x1
c0017df5:	19 c0                	sbb    eax,eax
c0017df7:	83 e0 46             	and    eax,0x46
c0017dfa:	83 c0 1e             	add    eax,0x1e
c0017dfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e00:	e8 33 da ff ff       	call   c0015838 <setupTimer(int)>
c0017e05:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017e0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e0e:	e8 99 fe ff ff       	call   c0017cac <CPU::setupFeatures()>
c0017e13:	83 c4 10             	add    esp,0x10
c0017e16:	31 c0                	xor    eax,eax
c0017e18:	5b                   	pop    ebx
c0017e19:	5e                   	pop    esi
c0017e1a:	5f                   	pop    edi
c0017e1b:	c3                   	ret    

c0017e1c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017e1c:	55                   	push   ebp
c0017e1d:	57                   	push   edi
c0017e1e:	56                   	push   esi
c0017e1f:	53                   	push   ebx
c0017e20:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017e26:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017e2d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017e2f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017e32:	80 fb 40             	cmp    bl,0x40
c0017e35:	75 1b                	jne    c0017e52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017e37:	8a 16                	mov    dl,BYTE PTR [esi]
c0017e39:	84 d2                	test   dl,dl
c0017e3b:	0f 84 f1 00 00 00    	je     c0017f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e41:	8d 46 01             	lea    eax,[esi+0x1]
c0017e44:	80 fa 3a             	cmp    dl,0x3a
c0017e47:	74 04                	je     c0017e4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017e49:	89 c6                	mov    esi,eax
c0017e4b:	eb ea                	jmp    c0017e37 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017e4d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017e50:	89 c6                	mov    esi,eax
c0017e52:	50                   	push   eax
c0017e53:	6a 40                	push   0x40
c0017e55:	6a 00                	push   0x0
c0017e57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e5b:	50                   	push   eax
c0017e5c:	e8 77 88 fe ff       	call   c00006d8 <memset>
c0017e61:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017e68:	31 c0                	xor    eax,eax
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017e6f:	84 c9                	test   cl,cl
c0017e71:	0f 84 bb 00 00 00    	je     c0017f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e77:	3d c7 00 00 00       	cmp    eax,0xc7
c0017e7c:	0f 8f b0 00 00 00    	jg     c0017f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017e82:	80 f9 0a             	cmp    cl,0xa
c0017e85:	0f 85 98 00 00 00    	jne    c0017f23 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017e8b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017e90:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017e94:	a8 df                	test   al,0xdf
c0017e96:	0f 94 c1             	sete   cl
c0017e99:	3c 23                	cmp    al,0x23
c0017e9b:	0f 94 c2             	sete   dl
c0017e9e:	08 d1                	or     cl,dl
c0017ea0:	75 4a                	jne    c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ea2:	8d 50 f7             	lea    edx,[eax-0x9]
c0017ea5:	80 fa 01             	cmp    dl,0x1
c0017ea8:	76 42                	jbe    c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017eaa:	3c 5b                	cmp    al,0x5b
c0017eac:	75 42                	jne    c0017ef0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017eae:	80 fb 40             	cmp    bl,0x40
c0017eb1:	75 39                	jne    c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017eb3:	83 ec 0c             	sub    esp,0xc
c0017eb6:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017eba:	52                   	push   edx
c0017ebb:	e8 41 88 fe ff       	call   c0000701 <strlen>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	83 f8 3f             	cmp    eax,0x3f
c0017ec6:	77 6a                	ja     c0017f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017ec8:	50                   	push   eax
c0017ec9:	50                   	push   eax
c0017eca:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017ece:	52                   	push   edx
c0017ecf:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017ed3:	52                   	push   edx
c0017ed4:	e8 1b 89 fe ff       	call   c00007f4 <strcpy>
c0017ed9:	58                   	pop    eax
c0017eda:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017ede:	52                   	push   edx
c0017edf:	e8 1d 88 fe ff       	call   c0000701 <strlen>
c0017ee4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017ee9:	83 c4 10             	add    esp,0x10
c0017eec:	31 d2                	xor    edx,edx
c0017eee:	eb 3a                	jmp    c0017f2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017ef0:	80 fb 40             	cmp    bl,0x40
c0017ef3:	74 06                	je     c0017efb <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017ef5:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017ef9:	eb 20                	jmp    c0017f1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017efb:	50                   	push   eax
c0017efc:	50                   	push   eax
c0017efd:	55                   	push   ebp
c0017efe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017f02:	50                   	push   eax
c0017f03:	e8 72 89 fe ff       	call   c000087a <strcmp>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	85 c0                	test   eax,eax
c0017f0d:	75 dd                	jne    c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f0f:	eb e4                	jmp    c0017ef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017f11:	8d 50 01             	lea    edx,[eax+0x1]
c0017f14:	80 f9 3d             	cmp    cl,0x3d
c0017f17:	74 1d                	je     c0017f36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017f19:	89 d0                	mov    eax,edx
c0017f1b:	8a 08                	mov    cl,BYTE PTR [eax]
c0017f1d:	84 c9                	test   cl,cl
c0017f1f:	75 f0                	jne    c0017f11 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017f21:	eb 0f                	jmp    c0017f32 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f23:	8d 50 01             	lea    edx,[eax+0x1]
c0017f26:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017f2a:	47                   	inc    edi
c0017f2b:	89 d0                	mov    eax,edx
c0017f2d:	e9 3b ff ff ff       	jmp    c0017e6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017f32:	31 c0                	xor    eax,eax
c0017f34:	eb 33                	jmp    c0017f69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017f36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f3a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017f3d:	50                   	push   eax
c0017f3e:	50                   	push   eax
c0017f3f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017f43:	50                   	push   eax
c0017f44:	56                   	push   esi
c0017f45:	e8 30 89 fe ff       	call   c000087a <strcmp>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	85 c0                	test   eax,eax
c0017f4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f53:	75 97                	jne    c0017eec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f55:	51                   	push   ecx
c0017f56:	51                   	push   ecx
c0017f57:	52                   	push   edx
c0017f58:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0017f5f:	e8 90 88 fe ff       	call   c00007f4 <strcpy>
c0017f64:	83 c4 10             	add    esp,0x10
c0017f67:	b0 01                	mov    al,0x1
c0017f69:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f6f:	5b                   	pop    ebx
c0017f70:	5e                   	pop    esi
c0017f71:	5f                   	pop    edi
c0017f72:	5d                   	pop    ebp
c0017f73:	c3                   	ret    

c0017f74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0017f74:	57                   	push   edi
c0017f75:	56                   	push   esi
c0017f76:	53                   	push   ebx
c0017f77:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017f7d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0017f84:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0017f8b:	53                   	push   ebx
c0017f8c:	e8 70 87 fe ff       	call   c0000701 <strlen>
c0017f91:	89 34 24             	mov    DWORD PTR [esp],esi
c0017f94:	89 c7                	mov    edi,eax
c0017f96:	e8 66 87 fe ff       	call   c0000701 <strlen>
c0017f9b:	83 c4 10             	add    esp,0x10
c0017f9e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0017fa2:	31 ff                	xor    edi,edi
c0017fa4:	3d ff 00 00 00       	cmp    eax,0xff
c0017fa9:	0f 87 18 01 00 00    	ja     c00180c7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0017faf:	51                   	push   ecx
c0017fb0:	51                   	push   ecx
c0017fb1:	56                   	push   esi
c0017fb2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0017fb6:	56                   	push   esi
c0017fb7:	e8 38 88 fe ff       	call   c00007f4 <strcpy>
c0017fbc:	58                   	pop    eax
c0017fbd:	5a                   	pop    edx
c0017fbe:	68 92 8e 03 c0       	push   0xc0038e92
c0017fc3:	56                   	push   esi
c0017fc4:	e8 78 89 fe ff       	call   c0000941 <strcat>
c0017fc9:	59                   	pop    ecx
c0017fca:	58                   	pop    eax
c0017fcb:	53                   	push   ebx
c0017fcc:	56                   	push   esi
c0017fcd:	e8 6f 89 fe ff       	call   c0000941 <strcat>
c0017fd2:	58                   	pop    eax
c0017fd3:	5a                   	pop    edx
c0017fd4:	68 b8 a2 03 c0       	push   0xc003a2b8
c0017fd9:	56                   	push   esi
c0017fda:	e8 62 89 fe ff       	call   c0000941 <strcat>
c0017fdf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017fe6:	e8 25 a4 ff ff       	call   c0012410 <operator new(unsigned long)>
c0017feb:	83 c4 0c             	add    esp,0xc
c0017fee:	89 c3                	mov    ebx,eax
c0017ff0:	ff 35 5c bb 03 c0    	push   DWORD PTR ds:0xc003bb5c
c0017ff6:	56                   	push   esi
c0017ff7:	50                   	push   eax
c0017ff8:	e8 41 a8 ff ff       	call   c001283e <File::File(char const*, Process*)>
c0017ffd:	59                   	pop    ecx
c0017ffe:	5e                   	pop    esi
c0017fff:	6a 01                	push   0x1
c0018001:	53                   	push   ebx
c0018002:	e8 9b a8 ff ff       	call   c00128a2 <File::open(FileOpenMode)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	85 c0                	test   eax,eax
c001800c:	74 08                	je     c0018016 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c001800e:	83 ec 0c             	sub    esp,0xc
c0018011:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018013:	53                   	push   ebx
c0018014:	eb 2e                	jmp    c0018044 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018016:	52                   	push   edx
c0018017:	8d 44 24 07          	lea    eax,[esp+0x7]
c001801b:	50                   	push   eax
c001801c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018020:	50                   	push   eax
c0018021:	53                   	push   ebx
c0018022:	e8 27 ab ff ff       	call   c0012b4e <File::stat(unsigned long long*, bool*)>
c0018027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	89 c1                	mov    ecx,eax
c0018030:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018034:	75 13                	jne    c0018049 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018036:	83 ec 0c             	sub    esp,0xc
c0018039:	53                   	push   ebx
c001803a:	e8 c1 a8 ff ff       	call   c0012900 <File::close()>
c001803f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018041:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018044:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018047:	eb 7b                	jmp    c00180c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018049:	83 ec 0c             	sub    esp,0xc
c001804c:	50                   	push   eax
c001804d:	e8 09 54 ff ff       	call   c000d45b <malloc>
c0018052:	89 c6                	mov    esi,eax
c0018054:	58                   	pop    eax
c0018055:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018057:	8d 54 24 10          	lea    edx,[esp+0x10]
c001805b:	52                   	push   edx
c001805c:	56                   	push   esi
c001805d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018061:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018065:	53                   	push   ebx
c0018066:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018069:	83 c4 20             	add    esp,0x20
c001806c:	85 c0                	test   eax,eax
c001806e:	75 0a                	jne    c001807a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018074:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018078:	74 18                	je     c0018092 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001807a:	83 ec 0c             	sub    esp,0xc
c001807d:	31 ff                	xor    edi,edi
c001807f:	53                   	push   ebx
c0018080:	e8 7b a8 ff ff       	call   c0012900 <File::close()>
c0018085:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018087:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001808a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	eb 35                	jmp    c00180c7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018092:	83 ec 0c             	sub    esp,0xc
c0018095:	53                   	push   ebx
c0018096:	e8 65 a8 ff ff       	call   c0012900 <File::close()>
c001809b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001809d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180a3:	83 c4 0c             	add    esp,0xc
c00180a6:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00180ad:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00180b4:	56                   	push   esi
c00180b5:	e8 62 fd ff ff       	call   c0017e1c <Reg::findLineFromLoadedData(char*, char*, char*)>
c00180ba:	89 34 24             	mov    DWORD PTR [esp],esi
c00180bd:	89 c7                	mov    edi,eax
c00180bf:	e8 a7 53 ff ff       	call   c000d46b <free>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	81 c4 10 01 00 00    	add    esp,0x110
c00180cd:	89 f8                	mov    eax,edi
c00180cf:	5b                   	pop    ebx
c00180d0:	5e                   	pop    esi
c00180d1:	5f                   	pop    edi
c00180d2:	c3                   	ret    

c00180d3 <Reg::getLine(char*, char*, char*)>:
c00180d3:	57                   	push   edi
c00180d4:	56                   	push   esi
c00180d5:	53                   	push   ebx
c00180d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00180da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00180de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00180e2:	57                   	push   edi
c00180e3:	56                   	push   esi
c00180e4:	53                   	push   ebx
c00180e5:	68 bd a2 03 c0       	push   0xc003a2bd
c00180ea:	e8 85 fe ff ff       	call   c0017f74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	84 c0                	test   al,al
c00180f4:	75 10                	jne    c0018106 <Reg::getLine(char*, char*, char*)+0x33>
c00180f6:	57                   	push   edi
c00180f7:	56                   	push   esi
c00180f8:	53                   	push   ebx
c00180f9:	68 e2 a2 03 c0       	push   0xc003a2e2
c00180fe:	e8 71 fe ff ff       	call   c0017f74 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018103:	83 c4 10             	add    esp,0x10
c0018106:	5b                   	pop    ebx
c0018107:	5e                   	pop    esi
c0018108:	5f                   	pop    edi
c0018109:	c3                   	ret    

c001810a <Reg::readInt(char*, char*, int*)>:
c001810a:	55                   	push   ebp
c001810b:	57                   	push   edi
c001810c:	56                   	push   esi
c001810d:	53                   	push   ebx
c001810e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0018114:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0018118:	57                   	push   edi
c0018119:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0018120:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0018127:	e8 a7 ff ff ff       	call   c00180d3 <Reg::getLine(char*, char*, char*)>
c001812c:	83 c4 10             	add    esp,0x10
c001812f:	84 c0                	test   al,al
c0018131:	0f 84 b3 00 00 00    	je     c00181ea <Reg::readInt(char*, char*, int*)+0xe0>
c0018137:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001813b:	80 fa 2b             	cmp    dl,0x2b
c001813e:	74 0c                	je     c001814c <Reg::readInt(char*, char*, int*)+0x42>
c0018140:	80 fa 2d             	cmp    dl,0x2d
c0018143:	75 0e                	jne    c0018153 <Reg::readInt(char*, char*, int*)+0x49>
c0018145:	ba 01 00 00 00       	mov    edx,0x1
c001814a:	eb 0b                	jmp    c0018157 <Reg::readInt(char*, char*, int*)+0x4d>
c001814c:	ba 01 00 00 00       	mov    edx,0x1
c0018151:	eb 02                	jmp    c0018155 <Reg::readInt(char*, char*, int*)+0x4b>
c0018153:	31 d2                	xor    edx,edx
c0018155:	31 c0                	xor    eax,eax
c0018157:	be 0a 00 00 00       	mov    esi,0xa
c001815c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0018161:	75 20                	jne    c0018183 <Reg::readInt(char*, char*, int*)+0x79>
c0018163:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0018167:	80 f9 78             	cmp    cl,0x78
c001816a:	75 0a                	jne    c0018176 <Reg::readInt(char*, char*, int*)+0x6c>
c001816c:	83 c2 02             	add    edx,0x2
c001816f:	be 10 00 00 00       	mov    esi,0x10
c0018174:	eb 0d                	jmp    c0018183 <Reg::readInt(char*, char*, int*)+0x79>
c0018176:	80 f9 62             	cmp    cl,0x62
c0018179:	75 08                	jne    c0018183 <Reg::readInt(char*, char*, int*)+0x79>
c001817b:	83 c2 02             	add    edx,0x2
c001817e:	be 02 00 00 00       	mov    esi,0x2
c0018183:	01 d7                	add    edi,edx
c0018185:	31 d2                	xor    edx,edx
c0018187:	8a 1f                	mov    bl,BYTE PTR [edi]
c0018189:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001818d:	80 fb 0d             	cmp    bl,0xd
c0018190:	0f 94 c3             	sete   bl
c0018193:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018198:	0f 94 c1             	sete   cl
c001819b:	08 cb                	or     bl,cl
c001819d:	75 3a                	jne    c00181d9 <Reg::readInt(char*, char*, int*)+0xcf>
c001819f:	0f af d6             	imul   edx,esi
c00181a2:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00181a7:	83 fe 10             	cmp    esi,0x10
c00181aa:	75 26                	jne    c00181d2 <Reg::readInt(char*, char*, int*)+0xc8>
c00181ac:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00181b0:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00181b3:	89 e9                	mov    ecx,ebp
c00181b5:	80 f9 05             	cmp    cl,0x5
c00181b8:	77 06                	ja     c00181c0 <Reg::readInt(char*, char*, int*)+0xb6>
c00181ba:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00181be:	eb 16                	jmp    c00181d6 <Reg::readInt(char*, char*, int*)+0xcc>
c00181c0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00181c4:	83 e9 61             	sub    ecx,0x61
c00181c7:	80 f9 05             	cmp    cl,0x5
c00181ca:	77 06                	ja     c00181d2 <Reg::readInt(char*, char*, int*)+0xc8>
c00181cc:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00181d0:	eb 04                	jmp    c00181d6 <Reg::readInt(char*, char*, int*)+0xcc>
c00181d2:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00181d6:	47                   	inc    edi
c00181d7:	eb ae                	jmp    c0018187 <Reg::readInt(char*, char*, int*)+0x7d>
c00181d9:	84 c0                	test   al,al
c00181db:	74 02                	je     c00181df <Reg::readInt(char*, char*, int*)+0xd5>
c00181dd:	f7 da                	neg    edx
c00181df:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00181e6:	89 10                	mov    DWORD PTR [eax],edx
c00181e8:	88 d8                	mov    al,bl
c00181ea:	81 c4 ec 00 00 00    	add    esp,0xec
c00181f0:	5b                   	pop    ebx
c00181f1:	5e                   	pop    esi
c00181f2:	5f                   	pop    edi
c00181f3:	5d                   	pop    ebp
c00181f4:	c3                   	ret    

c00181f5 <Reg::readString(char*, char*, char*, int)>:
c00181f5:	57                   	push   edi
c00181f6:	56                   	push   esi
c00181f7:	53                   	push   ebx
c00181f8:	81 ec d4 00 00 00    	sub    esp,0xd4
c00181fe:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0018205:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0018209:	57                   	push   edi
c001820a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0018211:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0018218:	e8 b6 fe ff ff       	call   c00180d3 <Reg::getLine(char*, char*, char*)>
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	89 c6                	mov    esi,eax
c0018222:	84 c0                	test   al,al
c0018224:	74 44                	je     c001826a <Reg::readString(char*, char*, char*, int)+0x75>
c0018226:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001822d:	31 c0                	xor    eax,eax
c001822f:	4a                   	dec    edx
c0018230:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0018233:	84 c9                	test   cl,cl
c0018235:	74 0f                	je     c0018246 <Reg::readString(char*, char*, char*, int)+0x51>
c0018237:	39 c2                	cmp    edx,eax
c0018239:	7e 0b                	jle    c0018246 <Reg::readString(char*, char*, char*, int)+0x51>
c001823b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001823e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0018243:	40                   	inc    eax
c0018244:	eb ea                	jmp    c0018230 <Reg::readString(char*, char*, char*, int)+0x3b>
c0018246:	83 ec 0c             	sub    esp,0xc
c0018249:	53                   	push   ebx
c001824a:	e8 b2 84 fe ff       	call   c0000701 <strlen>
c001824f:	83 c4 10             	add    esp,0x10
c0018252:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0018257:	75 11                	jne    c001826a <Reg::readString(char*, char*, char*, int)+0x75>
c0018259:	83 ec 0c             	sub    esp,0xc
c001825c:	53                   	push   ebx
c001825d:	e8 9f 84 fe ff       	call   c0000701 <strlen>
c0018262:	83 c4 10             	add    esp,0x10
c0018265:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001826a:	81 c4 d0 00 00 00    	add    esp,0xd0
c0018270:	89 f0                	mov    eax,esi
c0018272:	5b                   	pop    ebx
c0018273:	5e                   	pop    esi
c0018274:	5f                   	pop    edi
c0018275:	c3                   	ret    

c0018276 <Reg::readBool(char*, char*, bool*)>:
c0018276:	83 ec 20             	sub    esp,0x20
c0018279:	8d 44 24 10          	lea    eax,[esp+0x10]
c001827d:	50                   	push   eax
c001827e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018286:	e8 7f fe ff ff       	call   c001810a <Reg::readInt(char*, char*, int*)>
c001828b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018290:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018294:	0f 95 02             	setne  BYTE PTR [edx]
c0018297:	83 c4 2c             	add    esp,0x2c
c001829a:	c3                   	ret    

c001829b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001829b:	53                   	push   ebx
c001829c:	83 ec 1c             	sub    esp,0x1c
c001829f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00182a3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00182a7:	50                   	push   eax
c00182a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b0:	e8 c1 ff ff ff       	call   c0018276 <Reg::readBool(char*, char*, bool*)>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	84 c0                	test   al,al
c00182ba:	74 04                	je     c00182c0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00182bc:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00182c0:	88 d8                	mov    al,bl
c00182c2:	83 c4 18             	add    esp,0x18
c00182c5:	5b                   	pop    ebx
c00182c6:	c3                   	ret    

c00182c7 <Reg::readIntWithDefault(char*, char*, int)>:
c00182c7:	53                   	push   ebx
c00182c8:	83 ec 1c             	sub    esp,0x1c
c00182cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00182cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00182d3:	50                   	push   eax
c00182d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182dc:	e8 29 fe ff ff       	call   c001810a <Reg::readInt(char*, char*, int*)>
c00182e1:	83 c4 10             	add    esp,0x10
c00182e4:	84 c0                	test   al,al
c00182e6:	74 04                	je     c00182ec <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00182e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00182ec:	89 d8                	mov    eax,ebx
c00182ee:	83 c4 18             	add    esp,0x18
c00182f1:	5b                   	pop    ebx
c00182f2:	c3                   	ret    

c00182f3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00182f3:	56                   	push   esi
c00182f4:	53                   	push   ebx
c00182f5:	51                   	push   ecx
c00182f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00182fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00182fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018302:	56                   	push   esi
c0018303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001830b:	e8 e5 fe ff ff       	call   c00181f5 <Reg::readString(char*, char*, char*, int)>
c0018310:	83 c4 10             	add    esp,0x10
c0018313:	84 c0                	test   al,al
c0018315:	74 02                	je     c0018319 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0018317:	89 f3                	mov    ebx,esi
c0018319:	89 d8                	mov    eax,ebx
c001831b:	5a                   	pop    edx
c001831c:	5b                   	pop    ebx
c001831d:	5e                   	pop    esi
c001831e:	c3                   	ret    

c001831f <Sys::exit(regs*)>:
c001831f:	83 ec 18             	sub    esp,0x18
c0018322:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018326:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0018329:	e8 d4 6b ff ff       	call   c000ef02 <terminateTask(int)>
c001832e:	83 c8 ff             	or     eax,0xffffffff
c0018331:	83 c4 1c             	add    esp,0x1c
c0018334:	89 c2                	mov    edx,eax
c0018336:	c3                   	ret    

c0018337 <Sys::read(regs*)>:
c0018337:	57                   	push   edi
c0018338:	56                   	push   esi
c0018339:	53                   	push   ebx
c001833a:	83 ec 10             	sub    esp,0x10
c001833d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018341:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018344:	83 f8 02             	cmp    eax,0x2
c0018347:	77 10                	ja     c0018359 <Sys::read(regs*)+0x22>
c0018349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001834e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018351:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018357:	eb 0e                	jmp    c0018367 <Sys::read(regs*)+0x30>
c0018359:	83 ec 0c             	sub    esp,0xc
c001835c:	50                   	push   eax
c001835d:	e8 37 8e ff ff       	call   c0011199 <getFromFileDescriptor(int)>
c0018362:	83 c4 10             	add    esp,0x10
c0018365:	89 c1                	mov    ecx,eax
c0018367:	83 c8 ff             	or     eax,0xffffffff
c001836a:	85 c9                	test   ecx,ecx
c001836c:	89 c2                	mov    edx,eax
c001836e:	74 28                	je     c0018398 <Sys::read(regs*)+0x61>
c0018370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018378:	31 ff                	xor    edi,edi
c001837a:	83 ec 0c             	sub    esp,0xc
c001837d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001837f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018383:	52                   	push   edx
c0018384:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018387:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001838a:	57                   	push   edi
c001838b:	56                   	push   esi
c001838c:	51                   	push   ecx
c001838d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018394:	83 c4 20             	add    esp,0x20
c0018397:	99                   	cdq    
c0018398:	83 c4 10             	add    esp,0x10
c001839b:	5b                   	pop    ebx
c001839c:	5e                   	pop    esi
c001839d:	5f                   	pop    edi
c001839e:	c3                   	ret    

c001839f <Sys::sbrk(regs*)>:
c001839f:	56                   	push   esi
c00183a0:	53                   	push   ebx
c00183a1:	50                   	push   eax
c00183a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183ae:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00183b1:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00183b7:	85 db                	test   ebx,ebx
c00183b9:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00183bc:	74 02                	je     c00183c0 <Sys::sbrk(regs*)+0x21>
c00183be:	79 06                	jns    c00183c6 <Sys::sbrk(regs*)+0x27>
c00183c0:	89 f0                	mov    eax,esi
c00183c2:	31 d2                	xor    edx,edx
c00183c4:	eb 2a                	jmp    c00183f0 <Sys::sbrk(regs*)+0x51>
c00183c6:	83 c8 ff             	or     eax,0xffffffff
c00183c9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00183cf:	89 c2                	mov    edx,eax
c00183d1:	77 1d                	ja     c00183f0 <Sys::sbrk(regs*)+0x51>
c00183d3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00183d9:	50                   	push   eax
c00183da:	c1 ea 0c             	shr    edx,0xc
c00183dd:	68 07 04 00 00       	push   0x407
c00183e2:	52                   	push   edx
c00183e3:	51                   	push   ecx
c00183e4:	e8 cd 95 ff ff       	call   c00119b6 <VAS::allocatePages(int, int)>
c00183e9:	89 f0                	mov    eax,esi
c00183eb:	31 d2                	xor    edx,edx
c00183ed:	83 c4 10             	add    esp,0x10
c00183f0:	59                   	pop    ecx
c00183f1:	5b                   	pop    ebx
c00183f2:	5e                   	pop    esi
c00183f3:	c3                   	ret    

c00183f4 <Sys::write(regs*)>:
c00183f4:	57                   	push   edi
c00183f5:	56                   	push   esi
c00183f6:	53                   	push   ebx
c00183f7:	83 ec 10             	sub    esp,0x10
c00183fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183fe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0018401:	83 f8 02             	cmp    eax,0x2
c0018404:	77 10                	ja     c0018416 <Sys::write(regs*)+0x22>
c0018406:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001840b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001840e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0018414:	eb 0e                	jmp    c0018424 <Sys::write(regs*)+0x30>
c0018416:	83 ec 0c             	sub    esp,0xc
c0018419:	50                   	push   eax
c001841a:	e8 7a 8d ff ff       	call   c0011199 <getFromFileDescriptor(int)>
c001841f:	83 c4 10             	add    esp,0x10
c0018422:	89 c1                	mov    ecx,eax
c0018424:	83 c8 ff             	or     eax,0xffffffff
c0018427:	85 c9                	test   ecx,ecx
c0018429:	89 c2                	mov    edx,eax
c001842b:	74 28                	je     c0018455 <Sys::write(regs*)+0x61>
c001842d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018435:	31 ff                	xor    edi,edi
c0018437:	83 ec 0c             	sub    esp,0xc
c001843a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001843c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018440:	52                   	push   edx
c0018441:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018444:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0018447:	57                   	push   edi
c0018448:	56                   	push   esi
c0018449:	51                   	push   ecx
c001844a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001844d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018451:	83 c4 20             	add    esp,0x20
c0018454:	99                   	cdq    
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	5b                   	pop    ebx
c0018459:	5e                   	pop    esi
c001845a:	5f                   	pop    edi
c001845b:	c3                   	ret    

c001845c <Sys::yield(regs*)>:
c001845c:	83 ec 0c             	sub    esp,0xc
c001845f:	e8 9e 5e ff ff       	call   c000e302 <lockScheduler()>
c0018464:	e8 cd 61 ff ff       	call   c000e636 <schedule()>
c0018469:	e8 96 5e ff ff       	call   c000e304 <unlockScheduler()>
c001846e:	31 c0                	xor    eax,eax
c0018470:	31 d2                	xor    edx,edx
c0018472:	83 c4 0c             	add    esp,0xc
c0018475:	c3                   	ret    

c0018476 <vm8086EntryPoint(void*)>:
c0018476:	83 ec 0c             	sub    esp,0xc
c0018479:	e8 86 5e ff ff       	call   c000e304 <unlockScheduler()>
c001847e:	fb                   	sti    
c001847f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018484:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0018488:	52                   	push   edx
c0018489:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001848d:	52                   	push   edx
c001848e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018492:	52                   	push   edx
c0018493:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018497:	50                   	push   eax
c0018498:	e8 45 7d fe ff       	call   c00001e2 <goToVM86>
c001849d:	83 c4 1c             	add    esp,0x1c
c00184a0:	c3                   	ret    

c00184a1 <inbv(unsigned short)>:
c00184a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184a5:	ec                   	in     al,dx
c00184a6:	c3                   	ret    

c00184a7 <outbv(unsigned short, unsigned char)>:
c00184a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00184ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184af:	ee                   	out    dx,al
c00184b0:	c3                   	ret    

c00184b1 <realToLinear(unsigned short, unsigned short)>:
c00184b1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00184b6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00184bb:	c1 e0 04             	shl    eax,0x4
c00184be:	01 d0                	add    eax,edx
c00184c0:	c3                   	ret    

c00184c1 <getSegment(unsigned int)>:
c00184c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184c5:	c1 e8 10             	shr    eax,0x10
c00184c8:	c3                   	ret    

c00184c9 <getOffset(unsigned int)>:
c00184c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184cd:	c3                   	ret    

c00184ce <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00184ce:	55                   	push   ebp
c00184cf:	57                   	push   edi
c00184d0:	56                   	push   esi
c00184d1:	53                   	push   ebx
c00184d2:	83 ec 2c             	sub    esp,0x2c
c00184d5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00184d9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00184dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184e1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00184e5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00184e9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00184ed:	e8 10 5e ff ff       	call   c000e302 <lockScheduler()>
c00184f2:	68 80 00 00 00       	push   0x80
c00184f7:	6a 00                	push   0x0
c00184f9:	68 76 84 01 c0       	push   0xc0018476
c00184fe:	55                   	push   ebp
c00184ff:	e8 28 5f ff ff       	call   c000e42c <Process::createThread(void (*)(void*), void*, int)>
c0018504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018508:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001850c:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018510:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0018514:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c0018518:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001851c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018523:	e8 e8 9e ff ff       	call   c0012410 <operator new(unsigned long)>
c0018528:	83 c4 0c             	add    esp,0xc
c001852b:	89 c3                	mov    ebx,eax
c001852d:	55                   	push   ebp
c001852e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018532:	50                   	push   eax
c0018533:	e8 06 a3 ff ff       	call   c001283e <File::File(char const*, Process*)>
c0018538:	83 c4 0c             	add    esp,0xc
c001853b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001853f:	50                   	push   eax
c0018540:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018544:	50                   	push   eax
c0018545:	53                   	push   ebx
c0018546:	e8 03 a6 ff ff       	call   c0012b4e <File::stat(unsigned long long*, bool*)>
c001854b:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001854f:	83 c4 10             	add    esp,0x10
c0018552:	84 d2                	test   dl,dl
c0018554:	74 1c                	je     c0018572 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0018556:	83 ec 0c             	sub    esp,0xc
c0018559:	68 fd a2 03 c0       	push   0xc003a2fd
c001855e:	e8 1b 4a ff ff       	call   c000cf7e <panic(char const*)>
c0018563:	e8 9c 5d ff ff       	call   c000e304 <unlockScheduler()>
c0018568:	83 c4 10             	add    esp,0x10
c001856b:	31 d2                	xor    edx,edx
c001856d:	e9 81 00 00 00       	jmp    c00185f3 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018572:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018576:	51                   	push   ecx
c0018577:	51                   	push   ecx
c0018578:	6a 01                	push   0x1
c001857a:	53                   	push   ebx
c001857b:	e8 22 a3 ff ff       	call   c00128a2 <File::open(FileOpenMode)>
c0018580:	83 c4 10             	add    esp,0x10
c0018583:	85 c0                	test   eax,eax
c0018585:	74 1b                	je     c00185a2 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018587:	83 ec 0c             	sub    esp,0xc
c001858a:	68 16 a3 03 c0       	push   0xc003a316
c001858f:	e8 ea 49 ff ff       	call   c000cf7e <panic(char const*)>
c0018594:	e8 6b 5d ff ff       	call   c000e304 <unlockScheduler()>
c0018599:	83 c4 10             	add    esp,0x10
c001859c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00185a0:	eb 51                	jmp    c00185f3 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00185a2:	83 ec 0c             	sub    esp,0xc
c00185a5:	0f b7 ff             	movzx  edi,di
c00185a8:	6a 07                	push   0x7
c00185aa:	0f b7 f6             	movzx  esi,si
c00185ad:	68 00 01 00 00       	push   0x100
c00185b2:	6a 00                	push   0x0
c00185b4:	6a 00                	push   0x0
c00185b6:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00185bc:	e8 e1 95 ff ff       	call   c0011ba2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00185c1:	83 c4 18             	add    esp,0x18
c00185c4:	57                   	push   edi
c00185c5:	56                   	push   esi
c00185c6:	e8 e6 fe ff ff       	call   c00184b1 <realToLinear(unsigned short, unsigned short)>
c00185cb:	5a                   	pop    edx
c00185cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00185ce:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00185d2:	51                   	push   ecx
c00185d3:	50                   	push   eax
c00185d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00185d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00185dc:	53                   	push   ebx
c00185dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00185e0:	83 c4 14             	add    esp,0x14
c00185e3:	53                   	push   ebx
c00185e4:	e8 17 a3 ff ff       	call   c0012900 <File::close()>
c00185e9:	e8 16 5d ff ff       	call   c000e304 <unlockScheduler()>
c00185ee:	83 c4 10             	add    esp,0x10
c00185f1:	b2 01                	mov    dl,0x1
c00185f3:	83 c4 2c             	add    esp,0x2c
c00185f6:	88 d0                	mov    al,dl
c00185f8:	5b                   	pop    ebx
c00185f9:	5e                   	pop    esi
c00185fa:	5f                   	pop    edi
c00185fb:	5d                   	pop    ebp
c00185fc:	c3                   	ret    

c00185fd <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00185fd:	57                   	push   edi
c00185fe:	56                   	push   esi
c00185ff:	53                   	push   ebx
c0018600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018604:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018608:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001860c:	83 e8 06             	sub    eax,0x6
c001860f:	0f b7 c0             	movzx  eax,ax
c0018612:	50                   	push   eax
c0018613:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018618:	50                   	push   eax
c0018619:	e8 93 fe ff ff       	call   c00184b1 <realToLinear(unsigned short, unsigned short)>
c001861e:	5a                   	pop    edx
c001861f:	5e                   	pop    esi
c0018620:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018623:	8d 56 fa             	lea    edx,[esi-0x6]
c0018626:	81 e2 ff ff 00 00    	and    edx,0xffff
c001862c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001862f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018632:	83 c2 02             	add    edx,0x2
c0018635:	66 89 10             	mov    WORD PTR [eax],dx
c0018638:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001863b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001863f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018642:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018646:	89 d6                	mov    esi,edx
c0018648:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001864e:	66 81 e6 ff fd       	and    si,0xfdff
c0018653:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0018657:	74 07                	je     c0018660 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018659:	89 d6                	mov    esi,edx
c001865b:	66 81 ce 00 02       	or     si,0x200
c0018660:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018664:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018669:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001866d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018675:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018678:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018680:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018683:	5b                   	pop    ebx
c0018684:	5e                   	pop    esi
c0018685:	5f                   	pop    edi
c0018686:	c3                   	ret    

c0018687 <readByteFromReal(unsigned short, unsigned short)>:
c0018687:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001868c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018691:	c1 e0 04             	shl    eax,0x4
c0018694:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018697:	c3                   	ret    

c0018698 <readWordFromReal(unsigned short, unsigned short)>:
c0018698:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001869d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186a2:	c1 e0 04             	shl    eax,0x4
c00186a5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00186a9:	c3                   	ret    

c00186aa <readDwordFromReal(unsigned short, unsigned short)>:
c00186aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186af:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186b4:	c1 e0 04             	shl    eax,0x4
c00186b7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00186ba:	c3                   	ret    

c00186bb <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00186bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186c0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186c5:	c1 e0 04             	shl    eax,0x4
c00186c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186cc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00186cf:	c3                   	ret    

c00186d0 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00186d0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186d5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186da:	c1 e0 04             	shl    eax,0x4
c00186dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186e1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00186e5:	c3                   	ret    

c00186e6 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00186e6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00186eb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00186f0:	c1 e0 04             	shl    eax,0x4
c00186f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186f7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00186fa:	c3                   	ret    

c00186fb <vm8086FaultHandler(regs*)>:
c00186fb:	55                   	push   ebp
c00186fc:	57                   	push   edi
c00186fd:	56                   	push   esi
c00186fe:	53                   	push   ebx
c00186ff:	83 ec 1c             	sub    esp,0x1c
c0018702:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018706:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018709:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001870d:	0f b7 f0             	movzx  esi,ax
c0018710:	52                   	push   edx
c0018711:	0f b7 c0             	movzx  eax,ax
c0018714:	50                   	push   eax
c0018715:	e8 97 fd ff ff       	call   c00184b1 <realToLinear(unsigned short, unsigned short)>
c001871a:	5a                   	pop    edx
c001871b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001871e:	59                   	pop    ecx
c001871f:	89 c7                	mov    edi,eax
c0018721:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018724:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018728:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001872d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018731:	0f b7 c5             	movzx  eax,bp
c0018734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018738:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001873c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018740:	e8 6c fd ff ff       	call   c00184b1 <realToLinear(unsigned short, unsigned short)>
c0018745:	5a                   	pop    edx
c0018746:	59                   	pop    ecx
c0018747:	b1 06                	mov    cl,0x6
c0018749:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001874e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018753:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0018756:	80 fa 9d             	cmp    dl,0x9d
c0018759:	0f 84 1d 02 00 00    	je     c001897c <vm8086FaultHandler(regs*)+0x281>
c001875f:	0f 87 8e 00 00 00    	ja     c00187f3 <vm8086FaultHandler(regs*)+0xf8>
c0018765:	80 fa 66             	cmp    dl,0x66
c0018768:	0f 84 89 01 00 00    	je     c00188f7 <vm8086FaultHandler(regs*)+0x1fc>
c001876e:	77 44                	ja     c00187b4 <vm8086FaultHandler(regs*)+0xb9>
c0018770:	80 fa 36             	cmp    dl,0x36
c0018773:	0f 84 74 01 00 00    	je     c00188ed <vm8086FaultHandler(regs*)+0x1f2>
c0018779:	77 1a                	ja     c0018795 <vm8086FaultHandler(regs*)+0x9a>
c001877b:	80 fa 26             	cmp    dl,0x26
c001877e:	0f 84 4b 01 00 00    	je     c00188cf <vm8086FaultHandler(regs*)+0x1d4>
c0018784:	80 fa 2e             	cmp    dl,0x2e
c0018787:	0f 85 4a 05 00 00    	jne    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c001878d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018790:	31 c9                	xor    ecx,ecx
c0018792:	47                   	inc    edi
c0018793:	eb be                	jmp    c0018753 <vm8086FaultHandler(regs*)+0x58>
c0018795:	80 fa 64             	cmp    dl,0x64
c0018798:	0f 84 3b 01 00 00    	je     c00188d9 <vm8086FaultHandler(regs*)+0x1de>
c001879e:	0f 87 3f 01 00 00    	ja     c00188e3 <vm8086FaultHandler(regs*)+0x1e8>
c00187a4:	80 fa 3e             	cmp    dl,0x3e
c00187a7:	0f 85 2a 05 00 00    	jne    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c00187ad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187b0:	b1 01                	mov    cl,0x1
c00187b2:	eb de                	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c00187b4:	80 fa 6d             	cmp    dl,0x6d
c00187b7:	0f 84 bf 02 00 00    	je     c0018a7c <vm8086FaultHandler(regs*)+0x381>
c00187bd:	77 17                	ja     c00187d6 <vm8086FaultHandler(regs*)+0xdb>
c00187bf:	80 fa 67             	cmp    dl,0x67
c00187c2:	0f 84 3c 01 00 00    	je     c0018904 <vm8086FaultHandler(regs*)+0x209>
c00187c8:	80 fa 6c             	cmp    dl,0x6c
c00187cb:	0f 84 5d 02 00 00    	je     c0018a2e <vm8086FaultHandler(regs*)+0x333>
c00187d1:	e9 01 05 00 00       	jmp    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c00187d6:	80 fa 6f             	cmp    dl,0x6f
c00187d9:	0f 84 8b 03 00 00    	je     c0018b6a <vm8086FaultHandler(regs*)+0x46f>
c00187df:	0f 82 0f 03 00 00    	jb     c0018af4 <vm8086FaultHandler(regs*)+0x3f9>
c00187e5:	80 fa 9c             	cmp    dl,0x9c
c00187e8:	0f 84 23 01 00 00    	je     c0018911 <vm8086FaultHandler(regs*)+0x216>
c00187ee:	e9 e4 04 00 00       	jmp    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c00187f3:	80 fa ec             	cmp    dl,0xec
c00187f6:	0f 84 7f 04 00 00    	je     c0018c7b <vm8086FaultHandler(regs*)+0x580>
c00187fc:	77 7b                	ja     c0018879 <vm8086FaultHandler(regs*)+0x17e>
c00187fe:	80 fa e4             	cmp    dl,0xe4
c0018801:	0f 84 fe 03 00 00    	je     c0018c05 <vm8086FaultHandler(regs*)+0x50a>
c0018807:	77 53                	ja     c001885c <vm8086FaultHandler(regs*)+0x161>
c0018809:	80 fa cd             	cmp    dl,0xcd
c001880c:	0f 84 cd 01 00 00    	je     c00189df <vm8086FaultHandler(regs*)+0x2e4>
c0018812:	80 fa cf             	cmp    dl,0xcf
c0018815:	0f 85 bc 04 00 00    	jne    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c001881b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001881e:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018821:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018825:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018828:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001882c:	81 ca 00 02 02 00    	or     edx,0x20200
c0018832:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018835:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018839:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001883f:	66 c1 e8 09          	shr    ax,0x9
c0018843:	83 e0 01             	and    eax,0x1
c0018846:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018849:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001884c:	83 c0 06             	add    eax,0x6
c001884f:	25 ff ff 00 00       	and    eax,0xffff
c0018854:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018857:	e9 77 04 00 00       	jmp    c0018cd3 <vm8086FaultHandler(regs*)+0x5d8>
c001885c:	80 fa e6             	cmp    dl,0xe6
c001885f:	0f 84 ea 03 00 00    	je     c0018c4f <vm8086FaultHandler(regs*)+0x554>
c0018865:	0f 82 b6 03 00 00    	jb     c0018c21 <vm8086FaultHandler(regs*)+0x526>
c001886b:	80 fa e7             	cmp    dl,0xe7
c001886e:	0f 84 f2 03 00 00    	je     c0018c66 <vm8086FaultHandler(regs*)+0x56b>
c0018874:	e9 5e 04 00 00       	jmp    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c0018879:	80 fa ef             	cmp    dl,0xef
c001887c:	0f 84 3c 04 00 00    	je     c0018cbe <vm8086FaultHandler(regs*)+0x5c3>
c0018882:	77 28                	ja     c00188ac <vm8086FaultHandler(regs*)+0x1b1>
c0018884:	80 fa ed             	cmp    dl,0xed
c0018887:	0f 84 0a 04 00 00    	je     c0018c97 <vm8086FaultHandler(regs*)+0x59c>
c001888d:	80 fa ee             	cmp    dl,0xee
c0018890:	0f 85 41 04 00 00    	jne    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c0018896:	50                   	push   eax
c0018897:	50                   	push   eax
c0018898:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001889c:	50                   	push   eax
c001889d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00188a1:	50                   	push   eax
c00188a2:	e8 00 fc ff ff       	call   c00184a7 <outbv(unsigned short, unsigned char)>
c00188a7:	e9 0a 04 00 00       	jmp    c0018cb6 <vm8086FaultHandler(regs*)+0x5bb>
c00188ac:	80 fa fa             	cmp    dl,0xfa
c00188af:	0f 84 5d 01 00 00    	je     c0018a12 <vm8086FaultHandler(regs*)+0x317>
c00188b5:	80 fa fb             	cmp    dl,0xfb
c00188b8:	0f 84 62 01 00 00    	je     c0018a20 <vm8086FaultHandler(regs*)+0x325>
c00188be:	80 fa f3             	cmp    dl,0xf3
c00188c1:	0f 85 10 04 00 00    	jne    c0018cd7 <vm8086FaultHandler(regs*)+0x5dc>
c00188c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188ca:	e9 c3 fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c00188cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188d2:	b1 02                	mov    cl,0x2
c00188d4:	e9 b9 fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c00188d9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188dc:	b1 03                	mov    cl,0x3
c00188de:	e9 af fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c00188e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188e6:	b1 04                	mov    cl,0x4
c00188e8:	e9 a5 fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c00188ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188f0:	b1 05                	mov    cl,0x5
c00188f2:	e9 9b fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c00188f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00188fa:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00188ff:	e9 8e fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c0018904:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018907:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001890c:	e9 81 fe ff ff       	jmp    c0018792 <vm8086FaultHandler(regs*)+0x97>
c0018911:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018914:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018918:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001891d:	74 30                	je     c001894f <vm8086FaultHandler(regs*)+0x254>
c001891f:	83 e9 04             	sub    ecx,0x4
c0018922:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018928:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001892e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018931:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018934:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001893a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001893e:	0f 84 8c 03 00 00    	je     c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018944:	80 ce 02             	or     dh,0x2
c0018947:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001894a:	e9 81 03 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c001894f:	83 e9 02             	sub    ecx,0x2
c0018952:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018958:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001895b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001895f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018965:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018969:	74 05                	je     c0018970 <vm8086FaultHandler(regs*)+0x275>
c001896b:	80 ce 02             	or     dh,0x2
c001896e:	eb 03                	jmp    c0018973 <vm8086FaultHandler(regs*)+0x278>
c0018970:	80 e6 fd             	and    dh,0xfd
c0018973:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018977:	e9 54 03 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c001897c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018981:	74 2a                	je     c00189ad <vm8086FaultHandler(regs*)+0x2b2>
c0018983:	8b 10                	mov    edx,DWORD PTR [eax]
c0018985:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001898b:	81 ca 00 02 02 00    	or     edx,0x20200
c0018991:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018994:	8b 00                	mov    eax,DWORD PTR [eax]
c0018996:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001899c:	c1 e8 09             	shr    eax,0x9
c001899f:	83 e0 01             	and    eax,0x1
c00189a2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00189a5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00189a8:	83 c0 04             	add    eax,0x4
c00189ab:	eb 25                	jmp    c00189d2 <vm8086FaultHandler(regs*)+0x2d7>
c00189ad:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00189b0:	81 ca 00 02 02 00    	or     edx,0x20200
c00189b6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00189b9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00189bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189c2:	66 c1 e8 09          	shr    ax,0x9
c00189c6:	83 e0 01             	and    eax,0x1
c00189c9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00189cc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00189cf:	83 c0 02             	add    eax,0x2
c00189d2:	25 ff ff 00 00       	and    eax,0xffff
c00189d7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00189da:	e9 f1 02 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c00189df:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00189e3:	3c ff                	cmp    al,0xff
c00189e5:	75 10                	jne    c00189f7 <vm8086FaultHandler(regs*)+0x2fc>
c00189e7:	83 ec 0c             	sub    esp,0xc
c00189ea:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00189ed:	e8 10 65 ff ff       	call   c000ef02 <terminateTask(int)>
c00189f2:	e9 c2 02 00 00       	jmp    c0018cb9 <vm8086FaultHandler(regs*)+0x5be>
c00189f7:	83 ec 0c             	sub    esp,0xc
c00189fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00189fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a02:	57                   	push   edi
c0018a03:	50                   	push   eax
c0018a04:	53                   	push   ebx
c0018a05:	e8 f3 fb ff ff       	call   c00185fd <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018a0a:	83 c4 20             	add    esp,0x20
c0018a0d:	e9 c1 02 00 00       	jmp    c0018cd3 <vm8086FaultHandler(regs*)+0x5d8>
c0018a12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a17:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018a1b:	e9 b0 02 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018a20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a25:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018a29:	e9 a2 02 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018a2e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a33:	74 0d                	je     c0018a42 <vm8086FaultHandler(regs*)+0x347>
c0018a35:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018a3c:	0f 87 e9 02 00 00    	ja     c0018d2b <vm8086FaultHandler(regs*)+0x630>
c0018a42:	83 ec 0c             	sub    esp,0xc
c0018a45:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018a48:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a4c:	50                   	push   eax
c0018a4d:	e8 4f fa ff ff       	call   c00184a1 <inbv(unsigned short)>
c0018a52:	83 c4 0c             	add    esp,0xc
c0018a55:	0f b6 c0             	movzx  eax,al
c0018a58:	0f b7 c9             	movzx  ecx,cx
c0018a5b:	50                   	push   eax
c0018a5c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018a60:	50                   	push   eax
c0018a61:	51                   	push   ecx
c0018a62:	e8 54 fc ff ff       	call   c00186bb <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018a6d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a71:	74 03                	je     c0018a76 <vm8086FaultHandler(regs*)+0x37b>
c0018a73:	48                   	dec    eax
c0018a74:	eb 01                	jmp    c0018a77 <vm8086FaultHandler(regs*)+0x37c>
c0018a76:	40                   	inc    eax
c0018a77:	0f b7 c0             	movzx  eax,ax
c0018a7a:	eb 70                	jmp    c0018aec <vm8086FaultHandler(regs*)+0x3f1>
c0018a7c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018a7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018a82:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a87:	74 0c                	je     c0018a95 <vm8086FaultHandler(regs*)+0x39a>
c0018a89:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018a8f:	0f 87 96 02 00 00    	ja     c0018d2b <vm8086FaultHandler(regs*)+0x630>
c0018a95:	0f b7 c9             	movzx  ecx,cx
c0018a98:	0f b7 f6             	movzx  esi,si
c0018a9b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a9e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018aa3:	74 20                	je     c0018ac5 <vm8086FaultHandler(regs*)+0x3ca>
c0018aa5:	ed                   	in     eax,dx
c0018aa6:	55                   	push   ebp
c0018aa7:	50                   	push   eax
c0018aa8:	51                   	push   ecx
c0018aa9:	56                   	push   esi
c0018aaa:	e8 37 fc ff ff       	call   c00186e6 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018aaf:	83 c4 10             	add    esp,0x10
c0018ab2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018ab5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018ab9:	74 05                	je     c0018ac0 <vm8086FaultHandler(regs*)+0x3c5>
c0018abb:	83 e8 04             	sub    eax,0x4
c0018abe:	eb 27                	jmp    c0018ae7 <vm8086FaultHandler(regs*)+0x3ec>
c0018ac0:	83 c0 04             	add    eax,0x4
c0018ac3:	eb 22                	jmp    c0018ae7 <vm8086FaultHandler(regs*)+0x3ec>
c0018ac5:	66 ed                	in     ax,dx
c0018ac7:	0f b7 c0             	movzx  eax,ax
c0018aca:	57                   	push   edi
c0018acb:	50                   	push   eax
c0018acc:	51                   	push   ecx
c0018acd:	56                   	push   esi
c0018ace:	e8 fd fb ff ff       	call   c00186d0 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018ad3:	83 c4 10             	add    esp,0x10
c0018ad6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018ad9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018add:	74 05                	je     c0018ae4 <vm8086FaultHandler(regs*)+0x3e9>
c0018adf:	83 e8 02             	sub    eax,0x2
c0018ae2:	eb 03                	jmp    c0018ae7 <vm8086FaultHandler(regs*)+0x3ec>
c0018ae4:	83 c0 02             	add    eax,0x2
c0018ae7:	25 ff ff 00 00       	and    eax,0xffff
c0018aec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018aef:	e9 dc 01 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018af4:	49                   	dec    ecx
c0018af5:	80 f9 05             	cmp    cl,0x5
c0018af8:	77 24                	ja     c0018b1e <vm8086FaultHandler(regs*)+0x423>
c0018afa:	0f b6 c9             	movzx  ecx,cl
c0018afd:	ff 24 8d 5c a3 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5ca4]
c0018b04:	0f b7 f5             	movzx  esi,bp
c0018b07:	eb 15                	jmp    c0018b1e <vm8086FaultHandler(regs*)+0x423>
c0018b09:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018b0d:	eb 0f                	jmp    c0018b1e <vm8086FaultHandler(regs*)+0x423>
c0018b0f:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018b13:	eb 09                	jmp    c0018b1e <vm8086FaultHandler(regs*)+0x423>
c0018b15:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018b19:	eb 03                	jmp    c0018b1e <vm8086FaultHandler(regs*)+0x423>
c0018b1b:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018b1e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b21:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b26:	74 0b                	je     c0018b33 <vm8086FaultHandler(regs*)+0x438>
c0018b28:	3d ff ff 00 00       	cmp    eax,0xffff
c0018b2d:	0f 87 f8 01 00 00    	ja     c0018d2b <vm8086FaultHandler(regs*)+0x630>
c0018b33:	0f b7 c0             	movzx  eax,ax
c0018b36:	52                   	push   edx
c0018b37:	52                   	push   edx
c0018b38:	50                   	push   eax
c0018b39:	56                   	push   esi
c0018b3a:	e8 48 fb ff ff       	call   c0018687 <readByteFromReal(unsigned short, unsigned short)>
c0018b3f:	59                   	pop    ecx
c0018b40:	0f b6 c0             	movzx  eax,al
c0018b43:	5e                   	pop    esi
c0018b44:	50                   	push   eax
c0018b45:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b49:	50                   	push   eax
c0018b4a:	e8 58 f9 ff ff       	call   c00184a7 <outbv(unsigned short, unsigned char)>
c0018b4f:	83 c4 10             	add    esp,0x10
c0018b52:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018b55:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b59:	74 03                	je     c0018b5e <vm8086FaultHandler(regs*)+0x463>
c0018b5b:	48                   	dec    eax
c0018b5c:	eb 01                	jmp    c0018b5f <vm8086FaultHandler(regs*)+0x464>
c0018b5e:	40                   	inc    eax
c0018b5f:	0f b7 c0             	movzx  eax,ax
c0018b62:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018b65:	e9 66 01 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018b6a:	49                   	dec    ecx
c0018b6b:	80 f9 05             	cmp    cl,0x5
c0018b6e:	77 1f                	ja     c0018b8f <vm8086FaultHandler(regs*)+0x494>
c0018b70:	0f b6 c9             	movzx  ecx,cl
c0018b73:	ff 24 8d 74 a3 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5c8c]
c0018b7a:	89 ee                	mov    esi,ebp
c0018b7c:	eb 11                	jmp    c0018b8f <vm8086FaultHandler(regs*)+0x494>
c0018b7e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018b81:	eb 0c                	jmp    c0018b8f <vm8086FaultHandler(regs*)+0x494>
c0018b83:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b86:	eb 07                	jmp    c0018b8f <vm8086FaultHandler(regs*)+0x494>
c0018b88:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018b8b:	eb 02                	jmp    c0018b8f <vm8086FaultHandler(regs*)+0x494>
c0018b8d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018b8f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018b92:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b97:	74 0c                	je     c0018ba5 <vm8086FaultHandler(regs*)+0x4aa>
c0018b99:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b9f:	0f 87 86 01 00 00    	ja     c0018d2b <vm8086FaultHandler(regs*)+0x630>
c0018ba5:	0f b7 d6             	movzx  edx,si
c0018ba8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018bab:	0f b7 c1             	movzx  eax,cx
c0018bae:	81 e7 00 04 00 00    	and    edi,0x400
c0018bb4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018bb7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bbc:	74 1d                	je     c0018bdb <vm8086FaultHandler(regs*)+0x4e0>
c0018bbe:	55                   	push   ebp
c0018bbf:	55                   	push   ebp
c0018bc0:	50                   	push   eax
c0018bc1:	52                   	push   edx
c0018bc2:	e8 e3 fa ff ff       	call   c00186aa <readDwordFromReal(unsigned short, unsigned short)>
c0018bc7:	83 c4 10             	add    esp,0x10
c0018bca:	89 f2                	mov    edx,esi
c0018bcc:	ef                   	out    dx,eax
c0018bcd:	85 ff                	test   edi,edi
c0018bcf:	74 05                	je     c0018bd6 <vm8086FaultHandler(regs*)+0x4db>
c0018bd1:	83 e9 04             	sub    ecx,0x4
c0018bd4:	eb 21                	jmp    c0018bf7 <vm8086FaultHandler(regs*)+0x4fc>
c0018bd6:	83 c1 04             	add    ecx,0x4
c0018bd9:	eb 1c                	jmp    c0018bf7 <vm8086FaultHandler(regs*)+0x4fc>
c0018bdb:	55                   	push   ebp
c0018bdc:	55                   	push   ebp
c0018bdd:	50                   	push   eax
c0018bde:	52                   	push   edx
c0018bdf:	e8 b4 fa ff ff       	call   c0018698 <readWordFromReal(unsigned short, unsigned short)>
c0018be4:	83 c4 10             	add    esp,0x10
c0018be7:	89 f2                	mov    edx,esi
c0018be9:	66 ef                	out    dx,ax
c0018beb:	85 ff                	test   edi,edi
c0018bed:	74 05                	je     c0018bf4 <vm8086FaultHandler(regs*)+0x4f9>
c0018bef:	83 e9 02             	sub    ecx,0x2
c0018bf2:	eb 03                	jmp    c0018bf7 <vm8086FaultHandler(regs*)+0x4fc>
c0018bf4:	83 c1 02             	add    ecx,0x2
c0018bf7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018bfd:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018c00:	e9 cb 00 00 00       	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018c05:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c0c:	83 ec 0c             	sub    esp,0xc
c0018c0f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c13:	50                   	push   eax
c0018c14:	e8 88 f8 ff ff       	call   c00184a1 <inbv(unsigned short)>
c0018c19:	0f b6 c0             	movzx  eax,al
c0018c1c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c1f:	eb 3f                	jmp    c0018c60 <vm8086FaultHandler(regs*)+0x565>
c0018c21:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c26:	74 07                	je     c0018c2f <vm8086FaultHandler(regs*)+0x534>
c0018c28:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c2c:	ed                   	in     eax,dx
c0018c2d:	eb 14                	jmp    c0018c43 <vm8086FaultHandler(regs*)+0x548>
c0018c2f:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018c32:	66 31 c9             	xor    cx,cx
c0018c35:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018c38:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c3c:	66 ed                	in     ax,dx
c0018c3e:	0f b7 c0             	movzx  eax,ax
c0018c41:	09 c8                	or     eax,ecx
c0018c43:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018c46:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c4a:	e9 84 00 00 00       	jmp    c0018cd3 <vm8086FaultHandler(regs*)+0x5d8>
c0018c4f:	52                   	push   edx
c0018c50:	52                   	push   edx
c0018c51:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018c55:	50                   	push   eax
c0018c56:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018c5a:	50                   	push   eax
c0018c5b:	e8 47 f8 ff ff       	call   c00184a7 <outbv(unsigned short, unsigned char)>
c0018c60:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c64:	eb 53                	jmp    c0018cb9 <vm8086FaultHandler(regs*)+0x5be>
c0018c66:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018c69:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018c6d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c72:	74 03                	je     c0018c77 <vm8086FaultHandler(regs*)+0x57c>
c0018c74:	ef                   	out    dx,eax
c0018c75:	eb cf                	jmp    c0018c46 <vm8086FaultHandler(regs*)+0x54b>
c0018c77:	66 ef                	out    dx,ax
c0018c79:	eb cb                	jmp    c0018c46 <vm8086FaultHandler(regs*)+0x54b>
c0018c7b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018c82:	83 ec 0c             	sub    esp,0xc
c0018c85:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018c89:	50                   	push   eax
c0018c8a:	e8 12 f8 ff ff       	call   c00184a1 <inbv(unsigned short)>
c0018c8f:	0f b6 c0             	movzx  eax,al
c0018c92:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018c95:	eb 1f                	jmp    c0018cb6 <vm8086FaultHandler(regs*)+0x5bb>
c0018c97:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018c9a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c9f:	74 03                	je     c0018ca4 <vm8086FaultHandler(regs*)+0x5a9>
c0018ca1:	ed                   	in     eax,dx
c0018ca2:	eb 0d                	jmp    c0018cb1 <vm8086FaultHandler(regs*)+0x5b6>
c0018ca4:	66 ed                	in     ax,dx
c0018ca6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018ca9:	0f b7 c0             	movzx  eax,ax
c0018cac:	66 31 d2             	xor    dx,dx
c0018caf:	09 d0                	or     eax,edx
c0018cb1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018cb4:	eb 1a                	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018cb6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cb9:	83 c4 10             	add    esp,0x10
c0018cbc:	eb 15                	jmp    c0018cd3 <vm8086FaultHandler(regs*)+0x5d8>
c0018cbe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018cc1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018cc4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cc9:	74 03                	je     c0018cce <vm8086FaultHandler(regs*)+0x5d3>
c0018ccb:	ef                   	out    dx,eax
c0018ccc:	eb 02                	jmp    c0018cd0 <vm8086FaultHandler(regs*)+0x5d5>
c0018cce:	66 ef                	out    dx,ax
c0018cd0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018cd3:	b0 01                	mov    al,0x1
c0018cd5:	eb 56                	jmp    c0018d2d <vm8086FaultHandler(regs*)+0x632>
c0018cd7:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018cdb:	50                   	push   eax
c0018cdc:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018ce0:	50                   	push   eax
c0018ce1:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018ce5:	50                   	push   eax
c0018ce6:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018cea:	50                   	push   eax
c0018ceb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018cef:	50                   	push   eax
c0018cf0:	52                   	push   edx
c0018cf1:	52                   	push   edx
c0018cf2:	68 2f a3 03 c0       	push   0xc003a32f
c0018cf7:	e8 64 41 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0018cfc:	83 c4 20             	add    esp,0x20
c0018cff:	83 ec 0c             	sub    esp,0xc
c0018d02:	6a 60                	push   0x60
c0018d04:	e8 98 f7 ff ff       	call   c00184a1 <inbv(unsigned short)>
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	3c 1c                	cmp    al,0x1c
c0018d0e:	74 04                	je     c0018d14 <vm8086FaultHandler(regs*)+0x619>
c0018d10:	3c 5a                	cmp    al,0x5a
c0018d12:	75 eb                	jne    c0018cff <vm8086FaultHandler(regs*)+0x604>
c0018d14:	3c 5a                	cmp    al,0x5a
c0018d16:	74 04                	je     c0018d1c <vm8086FaultHandler(regs*)+0x621>
c0018d18:	3c 1c                	cmp    al,0x1c
c0018d1a:	75 0f                	jne    c0018d2b <vm8086FaultHandler(regs*)+0x630>
c0018d1c:	83 ec 0c             	sub    esp,0xc
c0018d1f:	6a 60                	push   0x60
c0018d21:	e8 7b f7 ff ff       	call   c00184a1 <inbv(unsigned short)>
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	eb e9                	jmp    c0018d14 <vm8086FaultHandler(regs*)+0x619>
c0018d2b:	31 c0                	xor    eax,eax
c0018d2d:	83 c4 1c             	add    esp,0x1c
c0018d30:	5b                   	pop    ebx
c0018d31:	5e                   	pop    esi
c0018d32:	5f                   	pop    edi
c0018d33:	5d                   	pop    ebp
c0018d34:	c3                   	ret    
c0018d35:	90                   	nop

c0018d36 <FAT::getName()>:
c0018d36:	b8 8c a3 03 c0       	mov    eax,0xc003a38c
c0018d3b:	c3                   	ret    

c0018d3c <FAT::tell(void*, unsigned long long*)>:
c0018d3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d41:	75 06                	jne    c0018d49 <FAT::tell(void*, unsigned long long*)+0xd>
c0018d43:	b8 04 00 00 00       	mov    eax,0x4
c0018d48:	c3                   	ret    
c0018d49:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d4e:	75 06                	jne    c0018d56 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018d50:	b8 04 00 00 00       	mov    eax,0x4
c0018d55:	c3                   	ret    
c0018d56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d5a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018d5d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018d60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d64:	89 01                	mov    DWORD PTR [ecx],eax
c0018d66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d69:	b8 00 00 00 00       	mov    eax,0x0
c0018d6e:	c3                   	ret    
c0018d6f:	90                   	nop

c0018d70 <FAT::stat(void*, unsigned long long*)>:
c0018d70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018d75:	75 06                	jne    c0018d7d <FAT::stat(void*, unsigned long long*)+0xd>
c0018d77:	b8 04 00 00 00       	mov    eax,0x4
c0018d7c:	c3                   	ret    
c0018d7d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d82:	75 06                	jne    c0018d8a <FAT::stat(void*, unsigned long long*)+0x1a>
c0018d84:	b8 04 00 00 00       	mov    eax,0x4
c0018d89:	c3                   	ret    
c0018d8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d91:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d98:	89 01                	mov    DWORD PTR [ecx],eax
c0018d9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018d9d:	b8 00 00 00 00       	mov    eax,0x0
c0018da2:	c3                   	ret    
c0018da3:	90                   	nop

c0018da4 <FAT::exists(char const*)>:
c0018da4:	b0 00                	mov    al,0x0
c0018da6:	c3                   	ret    
c0018da7:	90                   	nop

c0018da8 <FAT::~FAT()>:
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	ba 10 a4 03 c0       	mov    edx,0xc003a410
c0018db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018db4:	89 10                	mov    DWORD PTR [eax],edx
c0018db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018dba:	83 ec 0c             	sub    esp,0xc
c0018dbd:	50                   	push   eax
c0018dbe:	e8 75 98 ff ff       	call   c0012638 <Filesystem::~Filesystem()>
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	90                   	nop
c0018dc7:	83 c4 0c             	add    esp,0xc
c0018dca:	c3                   	ret    
c0018dcb:	90                   	nop

c0018dcc <FAT::~FAT()>:
c0018dcc:	83 ec 0c             	sub    esp,0xc
c0018dcf:	83 ec 0c             	sub    esp,0xc
c0018dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dd6:	e8 cd ff ff ff       	call   c0018da8 <FAT::~FAT()>
c0018ddb:	83 c4 10             	add    esp,0x10
c0018dde:	83 ec 08             	sub    esp,0x8
c0018de1:	6a 08                	push   0x8
c0018de3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018de7:	e8 33 96 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0018dec:	83 c4 10             	add    esp,0x10
c0018def:	83 c4 0c             	add    esp,0xc
c0018df2:	c3                   	ret    
c0018df3:	90                   	nop

c0018df4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018df4:	83 ec 1c             	sub    esp,0x1c
c0018df7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018dfe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018e03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e07:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c0018e0e:	83 f8 ff             	cmp    eax,0xffffffff
c0018e11:	75 34                	jne    c0018e47 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018e13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e17:	88 c2                	mov    dl,al
c0018e19:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c0018e1e:	01 d0                	add    eax,edx
c0018e20:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e24:	8b 15 c0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6c0
c0018e2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e2e:	89 14 85 e0 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3920],edx
c0018e35:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c0018e3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e3e:	89 14 85 60 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc38a0],edx
c0018e45:	eb 17                	jmp    c0018e5e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018e47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e4b:	88 c2                	mov    dl,al
c0018e4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e51:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c0018e58:	01 d0                	add    eax,edx
c0018e5a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018e5e:	83 ec 04             	sub    esp,0x4
c0018e61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018e69:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018e6d:	50                   	push   eax
c0018e6e:	e8 0f df fe ff       	call   c0006d82 <f_getlabel>
c0018e73:	83 c4 10             	add    esp,0x10
c0018e76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e7a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e7f:	75 07                	jne    c0018e88 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018e81:	b8 00 00 00 00       	mov    eax,0x0
c0018e86:	eb 05                	jmp    c0018e8d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018e88:	b8 01 00 00 00       	mov    eax,0x1
c0018e8d:	83 c4 1c             	add    esp,0x1c
c0018e90:	c3                   	ret    
c0018e91:	90                   	nop

c0018e92 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018e92:	57                   	push   edi
c0018e93:	83 ec 58             	sub    esp,0x58
c0018e96:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018e9e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018ea2:	b9 0f 00 00 00       	mov    ecx,0xf
c0018ea7:	b8 00 00 00 00       	mov    eax,0x0
c0018eac:	fc                   	cld    
c0018ead:	89 d7                	mov    edi,edx
c0018eaf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018eb1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018eb5:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c0018ebc:	83 f8 ff             	cmp    eax,0xffffffff
c0018ebf:	75 34                	jne    c0018ef5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018ec1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ec5:	88 c2                	mov    dl,al
c0018ec7:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c0018ecc:	01 d0                	add    eax,edx
c0018ece:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ed2:	8b 15 c0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6c0
c0018ed8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018edc:	89 14 85 e0 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3920],edx
c0018ee3:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c0018ee8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018eec:	89 14 85 60 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc38a0],edx
c0018ef3:	eb 17                	jmp    c0018f0c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018ef5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ef9:	88 c2                	mov    dl,al
c0018efb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018eff:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c0018f06:	01 d0                	add    eax,edx
c0018f08:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f0c:	83 ec 08             	sub    esp,0x8
c0018f0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018f13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f17:	50                   	push   eax
c0018f18:	e8 24 7a fe ff       	call   c0000941 <strcat>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	83 ec 0c             	sub    esp,0xc
c0018f23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f27:	50                   	push   eax
c0018f28:	e8 43 e0 fe ff       	call   c0006f70 <f_setlabel>
c0018f2d:	83 c4 10             	add    esp,0x10
c0018f30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018f34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018f39:	75 07                	jne    c0018f42 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018f3b:	b8 00 00 00 00       	mov    eax,0x0
c0018f40:	eb 05                	jmp    c0018f47 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018f42:	b8 01 00 00 00       	mov    eax,0x1
c0018f47:	83 c4 58             	add    esp,0x58
c0018f4a:	5f                   	pop    edi
c0018f4b:	c3                   	ret    

c0018f4c <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018f4c:	83 ec 2c             	sub    esp,0x2c
c0018f4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018f57:	83 ec 08             	sub    esp,0x8
c0018f5a:	68 b0 a3 03 c0       	push   0xc003a3b0
c0018f5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f63:	e8 12 79 fe ff       	call   c000087a <strcmp>
c0018f68:	83 c4 10             	add    esp,0x10
c0018f6b:	85 c0                	test   eax,eax
c0018f6d:	0f 94 c0             	sete   al
c0018f70:	84 c0                	test   al,al
c0018f72:	74 0d                	je     c0018f81 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018f74:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018f7c:	e9 a6 00 00 00       	jmp    c0019027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f81:	83 ec 08             	sub    esp,0x8
c0018f84:	68 a2 a3 03 c0       	push   0xc003a3a2
c0018f89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f8d:	e8 e8 78 fe ff       	call   c000087a <strcmp>
c0018f92:	83 c4 10             	add    esp,0x10
c0018f95:	85 c0                	test   eax,eax
c0018f97:	0f 94 c0             	sete   al
c0018f9a:	84 c0                	test   al,al
c0018f9c:	74 0a                	je     c0018fa8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018f9e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fa6:	eb 7f                	jmp    c0019027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fa8:	83 ec 08             	sub    esp,0x8
c0018fab:	68 a8 a3 03 c0       	push   0xc003a3a8
c0018fb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fb4:	e8 c1 78 fe ff       	call   c000087a <strcmp>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	85 c0                	test   eax,eax
c0018fbe:	0f 94 c0             	sete   al
c0018fc1:	84 c0                	test   al,al
c0018fc3:	74 0a                	je     c0018fcf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018fc5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018fcd:	eb 58                	jmp    c0019027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018fcf:	83 ec 08             	sub    esp,0x8
c0018fd2:	68 2c f7 01 c0       	push   0xc001f72c
c0018fd7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018fdb:	e8 9a 78 fe ff       	call   c000087a <strcmp>
c0018fe0:	83 c4 10             	add    esp,0x10
c0018fe3:	85 c0                	test   eax,eax
c0018fe5:	0f 94 c0             	sete   al
c0018fe8:	84 c0                	test   al,al
c0018fea:	74 0a                	je     c0018ff6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018fec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018ff4:	eb 31                	jmp    c0019027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018ff6:	83 ec 08             	sub    esp,0x8
c0018ff9:	68 ae a3 03 c0       	push   0xc003a3ae
c0018ffe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019002:	e8 73 78 fe ff       	call   c000087a <strcmp>
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	85 c0                	test   eax,eax
c001900c:	0f 94 c0             	sete   al
c001900f:	84 c0                	test   al,al
c0019011:	74 0a                	je     c001901d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019013:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001901b:	eb 0a                	jmp    c0019027 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001901d:	b8 08 00 00 00       	mov    eax,0x8
c0019022:	e9 04 01 00 00       	jmp    c001912b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019027:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001902e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019033:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019037:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c001903e:	83 f8 ff             	cmp    eax,0xffffffff
c0019041:	75 34                	jne    c0019077 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019043:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019047:	88 c2                	mov    dl,al
c0019049:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c001904e:	01 d0                	add    eax,edx
c0019050:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019054:	8b 15 c0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6c0
c001905a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001905e:	89 14 85 e0 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3920],edx
c0019065:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c001906a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001906e:	89 14 85 60 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc38a0],edx
c0019075:	eb 17                	jmp    c001908e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019077:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001907b:	88 c2                	mov    dl,al
c001907d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019081:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c0019088:	01 d0                	add    eax,edx
c001908a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001908e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019092:	88 04 24             	mov    BYTE PTR [esp],al
c0019095:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001909d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00190a5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00190aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00190b2:	83 ec 0c             	sub    esp,0xc
c00190b5:	68 00 20 00 00       	push   0x2000
c00190ba:	e8 9c 43 ff ff       	call   c000d45b <malloc>
c00190bf:	83 c4 10             	add    esp,0x10
c00190c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190c6:	68 00 20 00 00       	push   0x2000
c00190cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00190d3:	50                   	push   eax
c00190d4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00190d8:	50                   	push   eax
c00190d9:	e8 dd e2 fe ff       	call   c00073bb <f_mkfs>
c00190de:	83 c4 10             	add    esp,0x10
c00190e1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00190e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00190ea:	75 07                	jne    c00190f3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00190ec:	b8 00 00 00 00       	mov    eax,0x0
c00190f1:	eb 38                	jmp    c001912b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190f3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00190f8:	75 17                	jne    c0019111 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00190fa:	83 ec 0c             	sub    esp,0xc
c00190fd:	68 e0 a3 03 c0       	push   0xc003a3e0
c0019102:	e8 59 3d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0019107:	83 c4 10             	add    esp,0x10
c001910a:	b8 09 00 00 00       	mov    eax,0x9
c001910f:	eb 1a                	jmp    c001912b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019111:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019115:	83 ec 08             	sub    esp,0x8
c0019118:	50                   	push   eax
c0019119:	68 b4 a3 03 c0       	push   0xc003a3b4
c001911e:	e8 3d 3d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	b8 01 00 00 00       	mov    eax,0x1
c001912b:	83 c4 2c             	add    esp,0x2c
c001912e:	c3                   	ret    
c001912f:	90                   	nop

c0019130 <FAT::tryMount(LogicalDisk*, int)>:
c0019130:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019136:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c001913b:	83 f8 14             	cmp    eax,0x14
c001913e:	75 17                	jne    c0019157 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	68 c6 a3 03 c0       	push   0xc003a3c6
c0019148:	e8 31 3e ff ff       	call   c000cf7e <panic(char const*)>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	b0 00                	mov    al,0x0
c0019152:	e9 d7 01 00 00       	jmp    c001932e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019157:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001915e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019164:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001916a:	3d 00 02 00 00       	cmp    eax,0x200
c001916f:	74 07                	je     c0019178 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019171:	b0 00                	mov    al,0x0
c0019173:	e9 b6 01 00 00       	jmp    c001932e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019178:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019180:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019187:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c001918e:	83 f8 ff             	cmp    eax,0xffffffff
c0019191:	74 07                	je     c001919a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019193:	b0 01                	mov    al,0x1
c0019195:	e9 94 01 00 00       	jmp    c001932e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001919a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00191a4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00191ac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00191b3:	88 c2                	mov    dl,al
c00191b5:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c00191ba:	01 d0                	add    eax,edx
c00191bc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00191c3:	8b 15 c0 c6 03 c0    	mov    edx,DWORD PTR ds:0xc003c6c0
c00191c9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00191d0:	89 14 85 e0 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3920],edx
c00191d7:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c00191dc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00191e3:	89 14 85 60 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc38a0],edx
c00191ea:	83 ec 0c             	sub    esp,0xc
c00191ed:	68 54 02 00 00       	push   0x254
c00191f2:	e8 64 42 ff ff       	call   c000d45b <malloc>
c00191f7:	83 c4 10             	add    esp,0x10
c00191fa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019201:	83 ec 04             	sub    esp,0x4
c0019204:	6a 00                	push   0x0
c0019206:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001920d:	50                   	push   eax
c001920e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019215:	e8 5f bd fe ff       	call   c0004f79 <f_mount>
c001921a:	83 c4 10             	add    esp,0x10
c001921d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019224:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001922c:	74 19                	je     c0019247 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001922e:	83 ec 0c             	sub    esp,0xc
c0019231:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019238:	e8 3e 42 ff ff       	call   c000d47b <rfree>
c001923d:	83 c4 10             	add    esp,0x10
c0019240:	b0 00                	mov    al,0x0
c0019242:	e9 e7 00 00 00       	jmp    c001932e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019247:	83 ec 04             	sub    esp,0x4
c001924a:	68 00 01 00 00       	push   0x100
c001924f:	6a 00                	push   0x0
c0019251:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019258:	50                   	push   eax
c0019259:	e8 7a 74 fe ff       	call   c00006d8 <memset>
c001925e:	83 c4 10             	add    esp,0x10
c0019261:	83 ec 08             	sub    esp,0x8
c0019264:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001926b:	50                   	push   eax
c001926c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019273:	50                   	push   eax
c0019274:	e8 c8 76 fe ff       	call   c0000941 <strcat>
c0019279:	83 c4 10             	add    esp,0x10
c001927c:	83 ec 08             	sub    esp,0x8
c001927f:	68 d4 a3 03 c0       	push   0xc003a3d4
c0019284:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001928b:	50                   	push   eax
c001928c:	e8 b0 76 fe ff       	call   c0000941 <strcat>
c0019291:	83 c4 10             	add    esp,0x10
c0019294:	83 ec 04             	sub    esp,0x4
c0019297:	6a 01                	push   0x1
c0019299:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00192a0:	50                   	push   eax
c00192a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192a5:	50                   	push   eax
c00192a6:	e8 30 bd fe ff       	call   c0004fdb <f_open>
c00192ab:	83 c4 10             	add    esp,0x10
c00192ae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192b5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00192bc:	85 c0                	test   eax,eax
c00192be:	74 0a                	je     c00192ca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00192c0:	78 2d                	js     c00192ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00192c2:	83 e8 04             	sub    eax,0x4
c00192c5:	83 f8 01             	cmp    eax,0x1
c00192c8:	77 25                	ja     c00192ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00192ca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00192d2:	83 ec 0c             	sub    esp,0xc
c00192d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192d9:	50                   	push   eax
c00192da:	e8 4e c8 fe ff       	call   c0005b2d <f_close>
c00192df:	83 c4 10             	add    esp,0x10
c00192e2:	90                   	nop
c00192e3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00192eb:	74 3a                	je     c0019327 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00192ed:	eb 2d                	jmp    c001931c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00192ef:	83 ec 0c             	sub    esp,0xc
c00192f2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192f9:	e8 7d 41 ff ff       	call   c000d47b <rfree>
c00192fe:	83 c4 10             	add    esp,0x10
c0019301:	83 ec 04             	sub    esp,0x4
c0019304:	6a 00                	push   0x0
c0019306:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001930d:	50                   	push   eax
c001930e:	6a 00                	push   0x0
c0019310:	e8 64 bc fe ff       	call   c0004f79 <f_mount>
c0019315:	83 c4 10             	add    esp,0x10
c0019318:	b0 00                	mov    al,0x0
c001931a:	eb 12                	jmp    c001932e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001931c:	a1 c0 c6 03 c0       	mov    eax,ds:0xc003c6c0
c0019321:	40                   	inc    eax
c0019322:	a3 c0 c6 03 c0       	mov    ds:0xc003c6c0,eax
c0019327:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001932e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019334:	c3                   	ret    
c0019335:	90                   	nop

c0019336 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019336:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001933c:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019344:	74 0a                	je     c0019350 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019346:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001934e:	75 0a                	jne    c001935a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019350:	b8 04 00 00 00       	mov    eax,0x4
c0019355:	e9 dc 00 00 00       	jmp    c0019436 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001935a:	83 ec 08             	sub    esp,0x8
c001935d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019364:	50                   	push   eax
c0019365:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001936c:	e8 c6 cd fe ff       	call   c0006137 <f_readdir>
c0019371:	83 c4 10             	add    esp,0x10
c0019374:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001937b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019382:	83 ec 0c             	sub    esp,0xc
c0019385:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001938c:	83 c0 1a             	add    eax,0x1a
c001938f:	50                   	push   eax
c0019390:	e8 6c 73 fe ff       	call   c0000701 <strlen>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	ba 00 00 00 00       	mov    edx,0x0
c001939d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193a1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00193a5:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00193ac:	0f b6 c0             	movzx  eax,al
c00193af:	83 e0 10             	and    eax,0x10
c00193b2:	74 07                	je     c00193bb <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c00193b4:	b8 02 00 00 00       	mov    eax,0x2
c00193b9:	eb 05                	jmp    c00193c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c00193bb:	b8 01 00 00 00       	mov    eax,0x1
c00193c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193c4:	83 ec 08             	sub    esp,0x8
c00193c7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00193ce:	83 c0 1a             	add    eax,0x1a
c00193d1:	50                   	push   eax
c00193d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00193d6:	83 c0 10             	add    eax,0x10
c00193d9:	50                   	push   eax
c00193da:	e8 15 74 fe ff       	call   c00007f4 <strcpy>
c00193df:	83 c4 10             	add    esp,0x10
c00193e2:	83 ec 04             	sub    esp,0x4
c00193e5:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00193ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193f0:	50                   	push   eax
c00193f1:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00193f8:	e8 64 72 fe ff       	call   c0000661 <memcpy>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019407:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001940d:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019414:	84 c0                	test   al,al
c0019416:	75 07                	jne    c001941f <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c0019418:	b8 07 00 00 00       	mov    eax,0x7
c001941d:	eb 17                	jmp    c0019436 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c001941f:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019426:	85 c0                	test   eax,eax
c0019428:	75 07                	jne    c0019431 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c001942a:	b8 00 00 00 00       	mov    eax,0x0
c001942f:	eb 05                	jmp    c0019436 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019431:	b8 01 00 00 00       	mov    eax,0x1
c0019436:	81 c4 3c 02 00 00    	add    esp,0x23c
c001943c:	c3                   	ret    
c001943d:	90                   	nop

c001943e <FAT::read(void*, unsigned long, void*, int*)>:
c001943e:	83 ec 1c             	sub    esp,0x1c
c0019441:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019446:	74 07                	je     c001944f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019448:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001944d:	75 07                	jne    c0019456 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001944f:	b8 04 00 00 00       	mov    eax,0x4
c0019454:	eb 3d                	jmp    c0019493 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019456:	8d 44 24 08          	lea    eax,[esp+0x8]
c001945a:	50                   	push   eax
c001945b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001945f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019463:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019467:	e8 ab bf fe ff       	call   c0005417 <f_read>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019477:	89 c2                	mov    edx,eax
c0019479:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001947d:	89 10                	mov    DWORD PTR [eax],edx
c001947f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019483:	85 c0                	test   eax,eax
c0019485:	75 07                	jne    c001948e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019487:	b8 00 00 00 00       	mov    eax,0x0
c001948c:	eb 05                	jmp    c0019493 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001948e:	b8 01 00 00 00       	mov    eax,0x1
c0019493:	83 c4 1c             	add    esp,0x1c
c0019496:	c3                   	ret    
c0019497:	90                   	nop

c0019498 <FAT::write(void*, unsigned long, void*, int*)>:
c0019498:	83 ec 1c             	sub    esp,0x1c
c001949b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194a0:	74 07                	je     c00194a9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00194a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194a7:	75 07                	jne    c00194b0 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00194a9:	b8 04 00 00 00       	mov    eax,0x4
c00194ae:	eb 3d                	jmp    c00194ed <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00194b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194b4:	50                   	push   eax
c00194b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00194bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194c1:	e8 d1 c1 fe ff       	call   c0005697 <f_write>
c00194c6:	83 c4 10             	add    esp,0x10
c00194c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194d1:	89 c2                	mov    edx,eax
c00194d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00194d7:	89 10                	mov    DWORD PTR [eax],edx
c00194d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194dd:	85 c0                	test   eax,eax
c00194df:	75 07                	jne    c00194e8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00194e1:	b8 00 00 00 00       	mov    eax,0x0
c00194e6:	eb 05                	jmp    c00194ed <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00194e8:	b8 01 00 00 00       	mov    eax,0x1
c00194ed:	83 c4 1c             	add    esp,0x1c
c00194f0:	c3                   	ret    
c00194f1:	90                   	nop

c00194f2 <FAT::close(void*)>:
c00194f2:	83 ec 1c             	sub    esp,0x1c
c00194f5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194fa:	75 07                	jne    c0019503 <FAT::close(void*)+0x11>
c00194fc:	b8 04 00 00 00       	mov    eax,0x4
c0019501:	eb 36                	jmp    c0019539 <FAT::close(void*)+0x47>
c0019503:	83 ec 0c             	sub    esp,0xc
c0019506:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001950a:	e8 1e c6 fe ff       	call   c0005b2d <f_close>
c001950f:	83 c4 10             	add    esp,0x10
c0019512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019516:	83 ec 0c             	sub    esp,0xc
c0019519:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001951d:	e8 49 3f ff ff       	call   c000d46b <free>
c0019522:	83 c4 10             	add    esp,0x10
c0019525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019529:	85 c0                	test   eax,eax
c001952b:	75 07                	jne    c0019534 <FAT::close(void*)+0x42>
c001952d:	b8 00 00 00 00       	mov    eax,0x0
c0019532:	eb 05                	jmp    c0019539 <FAT::close(void*)+0x47>
c0019534:	b8 01 00 00 00       	mov    eax,0x1
c0019539:	83 c4 1c             	add    esp,0x1c
c001953c:	c3                   	ret    
c001953d:	90                   	nop

c001953e <FAT::closeDir(void*)>:
c001953e:	83 ec 1c             	sub    esp,0x1c
c0019541:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019546:	75 07                	jne    c001954f <FAT::closeDir(void*)+0x11>
c0019548:	b8 04 00 00 00       	mov    eax,0x4
c001954d:	eb 36                	jmp    c0019585 <FAT::closeDir(void*)+0x47>
c001954f:	83 ec 0c             	sub    esp,0xc
c0019552:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019556:	e8 ba cb fe ff       	call   c0006115 <f_closedir>
c001955b:	83 c4 10             	add    esp,0x10
c001955e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019562:	83 ec 0c             	sub    esp,0xc
c0019565:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019569:	e8 fd 3e ff ff       	call   c000d46b <free>
c001956e:	83 c4 10             	add    esp,0x10
c0019571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019575:	85 c0                	test   eax,eax
c0019577:	75 07                	jne    c0019580 <FAT::closeDir(void*)+0x42>
c0019579:	b8 00 00 00 00       	mov    eax,0x0
c001957e:	eb 05                	jmp    c0019585 <FAT::closeDir(void*)+0x47>
c0019580:	b8 01 00 00 00       	mov    eax,0x1
c0019585:	83 c4 1c             	add    esp,0x1c
c0019588:	c3                   	ret    
c0019589:	90                   	nop

c001958a <FAT::seek(void*, unsigned long long)>:
c001958a:	83 ec 2c             	sub    esp,0x2c
c001958d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001959d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00195a2:	75 07                	jne    c00195ab <FAT::seek(void*, unsigned long long)+0x21>
c00195a4:	b8 04 00 00 00       	mov    eax,0x4
c00195a9:	eb 2f                	jmp    c00195da <FAT::seek(void*, unsigned long long)+0x50>
c00195ab:	83 ec 04             	sub    esp,0x4
c00195ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00195ba:	e8 9d c5 fe ff       	call   c0005b5c <f_lseek>
c00195bf:	83 c4 10             	add    esp,0x10
c00195c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ca:	85 c0                	test   eax,eax
c00195cc:	75 07                	jne    c00195d5 <FAT::seek(void*, unsigned long long)+0x4b>
c00195ce:	b8 00 00 00 00       	mov    eax,0x0
c00195d3:	eb 05                	jmp    c00195da <FAT::seek(void*, unsigned long long)+0x50>
c00195d5:	b8 01 00 00 00       	mov    eax,0x1
c00195da:	83 c4 2c             	add    esp,0x2c
c00195dd:	c3                   	ret    

c00195de <fatWrapperReadDisk>:
c00195de:	83 ec 1c             	sub    esp,0x1c
c00195e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195e5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00195f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00195f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195fd:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c0019604:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001960f:	52                   	push   edx
c0019610:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019614:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019618:	50                   	push   eax
c0019619:	e8 be bb ff ff       	call   c00151dc <LogicalDisk::read(unsigned long long, int, void*)>
c001961e:	83 c4 20             	add    esp,0x20
c0019621:	83 c4 1c             	add    esp,0x1c
c0019624:	c3                   	ret    

c0019625 <fatWrapperWriteDisk>:
c0019625:	83 ec 1c             	sub    esp,0x1c
c0019628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001962c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019630:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019634:	89 04 24             	mov    DWORD PTR [esp],eax
c0019637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001963b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001963f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019644:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c001964b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001964f:	83 ec 0c             	sub    esp,0xc
c0019652:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019656:	52                   	push   edx
c0019657:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001965b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001965f:	50                   	push   eax
c0019660:	e8 e3 bb ff ff       	call   c0015248 <LogicalDisk::write(unsigned long long, int, void*)>
c0019665:	83 c4 20             	add    esp,0x20
c0019668:	83 c4 1c             	add    esp,0x1c
c001966b:	c3                   	ret    

c001966c <fatWrapperIoctl>:
c001966c:	53                   	push   ebx
c001966d:	83 ec 28             	sub    esp,0x28
c0019670:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019674:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019678:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001967c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019680:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019685:	75 31                	jne    c00196b8 <fatWrapperIoctl+0x4c>
c0019687:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001968b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001968f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019694:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c001969b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00196a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196ab:	66 89 02             	mov    WORD PTR [edx],ax
c00196ae:	b8 00 00 00 00       	mov    eax,0x0
c00196b3:	e9 b2 00 00 00       	jmp    c001976a <fatWrapperIoctl+0xfe>
c00196b8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00196bd:	75 6a                	jne    c0019729 <fatWrapperIoctl+0xbd>
c00196bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00196c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196cc:	8b 04 85 60 c2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3da0]
c00196d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00196d9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00196df:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00196e5:	89 c8                	mov    eax,ecx
c00196e7:	89 da                	mov    edx,ebx
c00196e9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00196ed:	c1 e0 0a             	shl    eax,0xa
c00196f0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00196f5:	8b 0c 8d 60 c2 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3da0]
c00196fc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019702:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019708:	89 cb                	mov    ebx,ecx
c001970a:	c1 fb 1f             	sar    ebx,0x1f
c001970d:	53                   	push   ebx
c001970e:	51                   	push   ecx
c001970f:	52                   	push   edx
c0019710:	50                   	push   eax
c0019711:	e8 66 4f 00 00       	call   c001e67c <__udivdi3>
c0019716:	83 c4 10             	add    esp,0x10
c0019719:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001971d:	89 01                	mov    DWORD PTR [ecx],eax
c001971f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019722:	b8 00 00 00 00       	mov    eax,0x0
c0019727:	eb 41                	jmp    c001976a <fatWrapperIoctl+0xfe>
c0019729:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001972e:	75 07                	jne    c0019737 <fatWrapperIoctl+0xcb>
c0019730:	b8 00 00 00 00       	mov    eax,0x0
c0019735:	eb 33                	jmp    c001976a <fatWrapperIoctl+0xfe>
c0019737:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001973c:	75 19                	jne    c0019757 <fatWrapperIoctl+0xeb>
c001973e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019742:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001974a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019750:	b8 00 00 00 00       	mov    eax,0x0
c0019755:	eb 13                	jmp    c001976a <fatWrapperIoctl+0xfe>
c0019757:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001975c:	75 07                	jne    c0019765 <fatWrapperIoctl+0xf9>
c001975e:	b8 00 00 00 00       	mov    eax,0x0
c0019763:	eb 05                	jmp    c001976a <fatWrapperIoctl+0xfe>
c0019765:	b8 04 00 00 00       	mov    eax,0x4
c001976a:	83 c4 28             	add    esp,0x28
c001976d:	5b                   	pop    ebx
c001976e:	c3                   	ret    
c001976f:	90                   	nop

c0019770 <FAT::FAT()>:
c0019770:	83 ec 1c             	sub    esp,0x1c
c0019773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	50                   	push   eax
c001977b:	e8 94 8e ff ff       	call   c0012614 <Filesystem::Filesystem()>
c0019780:	83 c4 10             	add    esp,0x10
c0019783:	ba 10 a4 03 c0       	mov    edx,0xc003a410
c0019788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001978c:	89 10                	mov    DWORD PTR [eax],edx
c001978e:	c7 05 c0 c6 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c6c0,0x0
c0019798:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00197a0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00197a5:	7f 15                	jg     c00197bc <FAT::FAT()+0x4c>
c00197a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197ab:	c7 04 85 e0 c6 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3920],0xffffffff
c00197b6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00197ba:	eb e4                	jmp    c00197a0 <FAT::FAT()+0x30>
c00197bc:	90                   	nop
c00197bd:	83 c4 1c             	add    esp,0x1c
c00197c0:	c3                   	ret    
c00197c1:	90                   	nop

c00197c2 <FAT::fixFilepath(char*)>:
c00197c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197c6:	8a 00                	mov    al,BYTE PTR [eax]
c00197c8:	3c 40                	cmp    al,0x40
c00197ca:	7e 2c                	jle    c00197f8 <FAT::fixFilepath(char*)+0x36>
c00197cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197d0:	8a 00                	mov    al,BYTE PTR [eax]
c00197d2:	83 e8 41             	sub    eax,0x41
c00197d5:	88 c2                	mov    dl,al
c00197d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197db:	88 10                	mov    BYTE PTR [eax],dl
c00197dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197e1:	8a 00                	mov    al,BYTE PTR [eax]
c00197e3:	0f be c0             	movsx  eax,al
c00197e6:	8b 04 85 e0 c6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3920]
c00197ed:	83 c0 30             	add    eax,0x30
c00197f0:	88 c2                	mov    dl,al
c00197f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f6:	88 10                	mov    BYTE PTR [eax],dl
c00197f8:	90                   	nop
c00197f9:	c3                   	ret    

c00197fa <FAT::open(char const*, void**, FileOpenMode)>:
c00197fa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019800:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019808:	74 0a                	je     c0019814 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001980a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019812:	75 0a                	jne    c001981e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0019814:	b8 04 00 00 00       	mov    eax,0x4
c0019819:	e9 fd 00 00 00       	jmp    c001991b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001981e:	83 ec 08             	sub    esp,0x8
c0019821:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019828:	8d 44 24 14          	lea    eax,[esp+0x14]
c001982c:	50                   	push   eax
c001982d:	e8 c2 6f fe ff       	call   c00007f4 <strcpy>
c0019832:	83 c4 10             	add    esp,0x10
c0019835:	83 ec 08             	sub    esp,0x8
c0019838:	8d 44 24 10          	lea    eax,[esp+0x10]
c001983c:	50                   	push   eax
c001983d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019844:	e8 79 ff ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019849:	83 c4 10             	add    esp,0x10
c001984c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019854:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001985b:	83 e0 01             	and    eax,0x1
c001985e:	74 08                	je     c0019868 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019860:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0019868:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001986f:	83 e0 04             	and    eax,0x4
c0019872:	74 10                	je     c0019884 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019874:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001987c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019884:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001988b:	83 e0 02             	and    eax,0x2
c001988e:	74 08                	je     c0019898 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019890:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019898:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001989f:	83 e0 08             	and    eax,0x8
c00198a2:	74 08                	je     c00198ac <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00198a4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00198ac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198b3:	83 e0 10             	and    eax,0x10
c00198b6:	74 08                	je     c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00198b8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	68 50 02 00 00       	push   0x250
c00198c8:	e8 8e 3b ff ff       	call   c000d45b <malloc>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	89 c2                	mov    edx,eax
c00198d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198d9:	89 10                	mov    DWORD PTR [eax],edx
c00198db:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00198e3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ec:	83 ec 04             	sub    esp,0x4
c00198ef:	52                   	push   edx
c00198f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00198f4:	52                   	push   edx
c00198f5:	50                   	push   eax
c00198f6:	e8 e0 b6 fe ff       	call   c0004fdb <f_open>
c00198fb:	83 c4 10             	add    esp,0x10
c00198fe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019905:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001990d:	74 07                	je     c0019916 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001990f:	b8 01 00 00 00       	mov    eax,0x1
c0019914:	eb 05                	jmp    c001991b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019916:	b8 00 00 00 00       	mov    eax,0x0
c001991b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019921:	c3                   	ret    

c0019922 <FAT::openDir(char const*, void**)>:
c0019922:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019928:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019930:	74 0a                	je     c001993c <FAT::openDir(char const*, void**)+0x1a>
c0019932:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001993a:	75 07                	jne    c0019943 <FAT::openDir(char const*, void**)+0x21>
c001993c:	b8 04 00 00 00       	mov    eax,0x4
c0019941:	eb 7d                	jmp    c00199c0 <FAT::openDir(char const*, void**)+0x9e>
c0019943:	83 ec 08             	sub    esp,0x8
c0019946:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001994d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019951:	50                   	push   eax
c0019952:	e8 9d 6e fe ff       	call   c00007f4 <strcpy>
c0019957:	83 c4 10             	add    esp,0x10
c001995a:	83 ec 08             	sub    esp,0x8
c001995d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019961:	50                   	push   eax
c0019962:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019969:	e8 54 fe ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	83 ec 0c             	sub    esp,0xc
c0019974:	6a 4c                	push   0x4c
c0019976:	e8 e0 3a ff ff       	call   c000d45b <malloc>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	89 c2                	mov    edx,eax
c0019980:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019987:	89 10                	mov    DWORD PTR [eax],edx
c0019989:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019990:	8b 00                	mov    eax,DWORD PTR [eax]
c0019992:	83 ec 08             	sub    esp,0x8
c0019995:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019999:	52                   	push   edx
c001999a:	50                   	push   eax
c001999b:	e8 73 c6 fe ff       	call   c0006013 <f_opendir>
c00199a0:	83 c4 10             	add    esp,0x10
c00199a3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199aa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199b2:	74 07                	je     c00199bb <FAT::openDir(char const*, void**)+0x99>
c00199b4:	b8 01 00 00 00       	mov    eax,0x1
c00199b9:	eb 05                	jmp    c00199c0 <FAT::openDir(char const*, void**)+0x9e>
c00199bb:	b8 00 00 00 00       	mov    eax,0x0
c00199c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199c6:	c3                   	ret    
c00199c7:	90                   	nop

c00199c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00199c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00199ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00199d6:	75 0a                	jne    c00199e2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00199d8:	b8 04 00 00 00       	mov    eax,0x4
c00199dd:	e9 c9 00 00 00       	jmp    c0019aab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199e2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00199ea:	75 0a                	jne    c00199f6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00199ec:	b8 04 00 00 00       	mov    eax,0x4
c00199f1:	e9 b5 00 00 00       	jmp    c0019aab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199f6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00199fe:	75 0a                	jne    c0019a0a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019a00:	b8 04 00 00 00       	mov    eax,0x4
c0019a05:	e9 a1 00 00 00       	jmp    c0019aab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a0a:	83 ec 08             	sub    esp,0x8
c0019a0d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a14:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a1b:	50                   	push   eax
c0019a1c:	e8 d3 6d fe ff       	call   c00007f4 <strcpy>
c0019a21:	83 c4 10             	add    esp,0x10
c0019a24:	83 ec 08             	sub    esp,0x8
c0019a27:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a2e:	50                   	push   eax
c0019a2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a36:	e8 87 fd ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019a3b:	83 c4 10             	add    esp,0x10
c0019a3e:	83 ec 08             	sub    esp,0x8
c0019a41:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a45:	50                   	push   eax
c0019a46:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a4d:	50                   	push   eax
c0019a4e:	e8 7f c7 fe ff       	call   c00061d2 <f_stat>
c0019a53:	83 c4 10             	add    esp,0x10
c0019a56:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a5d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a64:	85 c0                	test   eax,eax
c0019a66:	74 07                	je     c0019a6f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019a68:	83 f8 04             	cmp    eax,0x4
c0019a6b:	74 32                	je     c0019a9f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019a6d:	eb 37                	jmp    c0019aa6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019a6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a73:	0f b6 c0             	movzx  eax,al
c0019a76:	83 e0 10             	and    eax,0x10
c0019a79:	0f 95 c2             	setne  dl
c0019a7c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a83:	88 10                	mov    BYTE PTR [eax],dl
c0019a85:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019a88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a8c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a93:	89 01                	mov    DWORD PTR [ecx],eax
c0019a95:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a98:	b8 00 00 00 00       	mov    eax,0x0
c0019a9d:	eb 0c                	jmp    c0019aab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a9f:	b8 02 00 00 00       	mov    eax,0x2
c0019aa4:	eb 05                	jmp    c0019aab <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019aa6:	b8 01 00 00 00       	mov    eax,0x1
c0019aab:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019ab1:	c3                   	ret    

c0019ab2 <FAT::unlink(char const*)>:
c0019ab2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ab8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ac0:	75 07                	jne    c0019ac9 <FAT::unlink(char const*)+0x17>
c0019ac2:	b8 04 00 00 00       	mov    eax,0x4
c0019ac7:	eb 5c                	jmp    c0019b25 <FAT::unlink(char const*)+0x73>
c0019ac9:	83 ec 08             	sub    esp,0x8
c0019acc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ad3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ad7:	50                   	push   eax
c0019ad8:	e8 17 6d fe ff       	call   c00007f4 <strcpy>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	83 ec 08             	sub    esp,0x8
c0019ae3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019ae7:	50                   	push   eax
c0019ae8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019aef:	e8 ce fc ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	83 ec 0c             	sub    esp,0xc
c0019afa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019afe:	50                   	push   eax
c0019aff:	e8 20 ca fe ff       	call   c0006524 <f_unlink>
c0019b04:	83 c4 10             	add    esp,0x10
c0019b07:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b0e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b15:	85 c0                	test   eax,eax
c0019b17:	75 07                	jne    c0019b20 <FAT::unlink(char const*)+0x6e>
c0019b19:	b8 00 00 00 00       	mov    eax,0x0
c0019b1e:	eb 05                	jmp    c0019b25 <FAT::unlink(char const*)+0x73>
c0019b20:	b8 01 00 00 00       	mov    eax,0x1
c0019b25:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b2b:	c3                   	ret    

c0019b2c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b2c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b32:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019b39:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019b40:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b48:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b50:	75 0a                	jne    c0019b5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019b52:	b8 04 00 00 00       	mov    eax,0x4
c0019b57:	e9 1c 01 00 00       	jmp    c0019c78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b5c:	83 ec 08             	sub    esp,0x8
c0019b5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b6a:	50                   	push   eax
c0019b6b:	e8 84 6c fe ff       	call   c00007f4 <strcpy>
c0019b70:	83 c4 10             	add    esp,0x10
c0019b73:	83 ec 08             	sub    esp,0x8
c0019b76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b7a:	50                   	push   eax
c0019b7b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b82:	e8 3b fc ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019b87:	83 c4 10             	add    esp,0x10
c0019b8a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b92:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b9f:	83 e0 01             	and    eax,0x1
c0019ba2:	74 08                	je     c0019bac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019ba4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019bac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bb1:	83 e0 02             	and    eax,0x2
c0019bb4:	74 08                	je     c0019bbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019bb6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019bbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bc3:	83 e0 04             	and    eax,0x4
c0019bc6:	74 08                	je     c0019bd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019bc8:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019bd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bd5:	83 e0 08             	and    eax,0x8
c0019bd8:	74 08                	je     c0019be2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019bda:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019be2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019be7:	83 e0 01             	and    eax,0x1
c0019bea:	74 08                	je     c0019bf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019bec:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019bf4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bf9:	83 e0 02             	and    eax,0x2
c0019bfc:	74 08                	je     c0019c06 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019bfe:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019c06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c0b:	83 e0 04             	and    eax,0x4
c0019c0e:	74 08                	je     c0019c18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019c10:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019c18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c1d:	83 e0 08             	and    eax,0x8
c0019c20:	74 08                	je     c0019c2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019c22:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019c2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c31:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019c38:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c40:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c48:	83 ec 04             	sub    esp,0x4
c0019c4b:	52                   	push   edx
c0019c4c:	50                   	push   eax
c0019c4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c51:	50                   	push   eax
c0019c52:	e8 6f cf fe ff       	call   c0006bc6 <f_chmod>
c0019c57:	83 c4 10             	add    esp,0x10
c0019c5a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c61:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c68:	85 c0                	test   eax,eax
c0019c6a:	75 07                	jne    c0019c73 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019c6c:	b8 00 00 00 00       	mov    eax,0x0
c0019c71:	eb 05                	jmp    c0019c78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019c73:	b8 01 00 00 00       	mov    eax,0x1
c0019c78:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c7e:	c3                   	ret    
c0019c7f:	90                   	nop

c0019c80 <FAT::rename(char const*, char const*)>:
c0019c80:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c86:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c8e:	74 0a                	je     c0019c9a <FAT::rename(char const*, char const*)+0x1a>
c0019c90:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c98:	75 0a                	jne    c0019ca4 <FAT::rename(char const*, char const*)+0x24>
c0019c9a:	b8 04 00 00 00       	mov    eax,0x4
c0019c9f:	e9 98 00 00 00       	jmp    c0019d3c <FAT::rename(char const*, char const*)+0xbc>
c0019ca4:	83 ec 08             	sub    esp,0x8
c0019ca7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cb5:	50                   	push   eax
c0019cb6:	e8 39 6b fe ff       	call   c00007f4 <strcpy>
c0019cbb:	83 c4 10             	add    esp,0x10
c0019cbe:	83 ec 08             	sub    esp,0x8
c0019cc1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019cc8:	50                   	push   eax
c0019cc9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cd0:	e8 ed fa ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019cd5:	83 c4 10             	add    esp,0x10
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019ce2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ce6:	50                   	push   eax
c0019ce7:	e8 08 6b fe ff       	call   c00007f4 <strcpy>
c0019cec:	83 c4 10             	add    esp,0x10
c0019cef:	83 ec 08             	sub    esp,0x8
c0019cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cf6:	50                   	push   eax
c0019cf7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cfe:	e8 bf fa ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019d03:	83 c4 10             	add    esp,0x10
c0019d06:	83 ec 08             	sub    esp,0x8
c0019d09:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d0d:	50                   	push   eax
c0019d0e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d15:	50                   	push   eax
c0019d16:	e8 b8 cb fe ff       	call   c00068d3 <f_rename>
c0019d1b:	83 c4 10             	add    esp,0x10
c0019d1e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d25:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d2c:	85 c0                	test   eax,eax
c0019d2e:	75 07                	jne    c0019d37 <FAT::rename(char const*, char const*)+0xb7>
c0019d30:	b8 00 00 00 00       	mov    eax,0x0
c0019d35:	eb 05                	jmp    c0019d3c <FAT::rename(char const*, char const*)+0xbc>
c0019d37:	b8 01 00 00 00       	mov    eax,0x1
c0019d3c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d42:	c3                   	ret    
c0019d43:	90                   	nop

c0019d44 <FAT::mkdir(char const*)>:
c0019d44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d4a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d52:	75 07                	jne    c0019d5b <FAT::mkdir(char const*)+0x17>
c0019d54:	b8 04 00 00 00       	mov    eax,0x4
c0019d59:	eb 5c                	jmp    c0019db7 <FAT::mkdir(char const*)+0x73>
c0019d5b:	83 ec 08             	sub    esp,0x8
c0019d5e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d69:	50                   	push   eax
c0019d6a:	e8 85 6a fe ff       	call   c00007f4 <strcpy>
c0019d6f:	83 c4 10             	add    esp,0x10
c0019d72:	83 ec 08             	sub    esp,0x8
c0019d75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d79:	50                   	push   eax
c0019d7a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d81:	e8 3c fa ff ff       	call   c00197c2 <FAT::fixFilepath(char*)>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	83 ec 0c             	sub    esp,0xc
c0019d8c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d90:	50                   	push   eax
c0019d91:	e8 11 c9 fe ff       	call   c00066a7 <f_mkdir>
c0019d96:	83 c4 10             	add    esp,0x10
c0019d99:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019da0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019da7:	85 c0                	test   eax,eax
c0019da9:	75 07                	jne    c0019db2 <FAT::mkdir(char const*)+0x6e>
c0019dab:	b8 00 00 00 00       	mov    eax,0x0
c0019db0:	eb 05                	jmp    c0019db7 <FAT::mkdir(char const*)+0x73>
c0019db2:	b8 01 00 00 00       	mov    eax,0x1
c0019db7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dbd:	c3                   	ret    

c0019dbe <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019dbe:	b8 08 00 00 00       	mov    eax,0x8
c0019dc3:	c3                   	ret    

c0019dc4 <ISO9660::seek(void*, unsigned long long)>:
c0019dc4:	53                   	push   ebx
c0019dc5:	b8 04 00 00 00       	mov    eax,0x4
c0019dca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019dce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dd2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019dd6:	85 d2                	test   edx,edx
c0019dd8:	74 17                	je     c0019df1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019dda:	89 c8                	mov    eax,ecx
c0019ddc:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019ddf:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019de2:	b8 01 00 00 00       	mov    eax,0x1
c0019de7:	73 08                	jae    c0019df1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019de9:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019dec:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019def:	31 c0                	xor    eax,eax
c0019df1:	5b                   	pop    ebx
c0019df2:	c3                   	ret    
c0019df3:	90                   	nop

c0019df4 <ISO9660::tell(void*, unsigned long long*)>:
c0019df4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019dfc:	85 d2                	test   edx,edx
c0019dfe:	74 12                	je     c0019e12 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e00:	85 c0                	test   eax,eax
c0019e02:	74 0e                	je     c0019e12 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019e04:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e07:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019e0a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e0d:	89 10                	mov    DWORD PTR [eax],edx
c0019e0f:	31 c0                	xor    eax,eax
c0019e11:	c3                   	ret    
c0019e12:	b8 04 00 00 00       	mov    eax,0x4
c0019e17:	c3                   	ret    

c0019e18 <ISO9660::getName()>:
c0019e18:	b8 6c a4 03 c0       	mov    eax,0xc003a46c
c0019e1d:	c3                   	ret    

c0019e1e <ISO9660::stat(void*, unsigned long long*)>:
c0019e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e26:	85 d2                	test   edx,edx
c0019e28:	74 12                	je     c0019e3c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e2a:	85 c0                	test   eax,eax
c0019e2c:	74 0e                	je     c0019e3c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019e2e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019e31:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019e34:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019e37:	89 10                	mov    DWORD PTR [eax],edx
c0019e39:	31 c0                	xor    eax,eax
c0019e3b:	c3                   	ret    
c0019e3c:	b8 04 00 00 00       	mov    eax,0x4
c0019e41:	c3                   	ret    

c0019e42 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e42:	b8 01 00 00 00       	mov    eax,0x1
c0019e47:	c3                   	ret    

c0019e48 <ISO9660::unlink(char const*)>:
c0019e48:	b8 01 00 00 00       	mov    eax,0x1
c0019e4d:	c3                   	ret    

c0019e4e <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e4e:	b8 01 00 00 00       	mov    eax,0x1
c0019e53:	c3                   	ret    

c0019e54 <ISO9660::rename(char const*, char const*)>:
c0019e54:	b8 01 00 00 00       	mov    eax,0x1
c0019e59:	c3                   	ret    

c0019e5a <ISO9660::mkdir(char const*)>:
c0019e5a:	b8 01 00 00 00       	mov    eax,0x1
c0019e5f:	c3                   	ret    

c0019e60 <ISO9660::close(void*)>:
c0019e60:	83 ec 0c             	sub    esp,0xc
c0019e63:	b8 04 00 00 00       	mov    eax,0x4
c0019e68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e6c:	85 d2                	test   edx,edx
c0019e6e:	74 0e                	je     c0019e7e <ISO9660::close(void*)+0x1e>
c0019e70:	83 ec 0c             	sub    esp,0xc
c0019e73:	52                   	push   edx
c0019e74:	e8 f2 35 ff ff       	call   c000d46b <free>
c0019e79:	83 c4 10             	add    esp,0x10
c0019e7c:	31 c0                	xor    eax,eax
c0019e7e:	83 c4 0c             	add    esp,0xc
c0019e81:	c3                   	ret    

c0019e82 <ISO9660::closeDir(void*)>:
c0019e82:	83 ec 0c             	sub    esp,0xc
c0019e85:	b8 04 00 00 00       	mov    eax,0x4
c0019e8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019e8e:	85 d2                	test   edx,edx
c0019e90:	74 0e                	je     c0019ea0 <ISO9660::closeDir(void*)+0x1e>
c0019e92:	83 ec 0c             	sub    esp,0xc
c0019e95:	52                   	push   edx
c0019e96:	e8 d0 35 ff ff       	call   c000d46b <free>
c0019e9b:	83 c4 10             	add    esp,0x10
c0019e9e:	31 c0                	xor    eax,eax
c0019ea0:	83 c4 0c             	add    esp,0xc
c0019ea3:	c3                   	ret    

c0019ea4 <ISO9660::~ISO9660()>:
c0019ea4:	83 ec 0c             	sub    esp,0xc
c0019ea7:	ba c0 a4 03 c0       	mov    edx,0xc003a4c0
c0019eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb0:	89 10                	mov    DWORD PTR [eax],edx
c0019eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb6:	83 ec 0c             	sub    esp,0xc
c0019eb9:	50                   	push   eax
c0019eba:	e8 79 87 ff ff       	call   c0012638 <Filesystem::~Filesystem()>
c0019ebf:	83 c4 10             	add    esp,0x10
c0019ec2:	90                   	nop
c0019ec3:	83 c4 0c             	add    esp,0xc
c0019ec6:	c3                   	ret    
c0019ec7:	90                   	nop

c0019ec8 <ISO9660::~ISO9660()>:
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	83 ec 0c             	sub    esp,0xc
c0019ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ed2:	e8 cd ff ff ff       	call   c0019ea4 <ISO9660::~ISO9660()>
c0019ed7:	83 c4 10             	add    esp,0x10
c0019eda:	83 ec 08             	sub    esp,0x8
c0019edd:	6a 08                	push   0x8
c0019edf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ee3:	e8 37 85 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c0019ee8:	83 c4 10             	add    esp,0x10
c0019eeb:	83 c4 0c             	add    esp,0xc
c0019eee:	c3                   	ret    

c0019eef <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019eef:	55                   	push   ebp
c0019ef0:	31 c9                	xor    ecx,ecx
c0019ef2:	57                   	push   edi
c0019ef3:	56                   	push   esi
c0019ef4:	53                   	push   ebx
c0019ef5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019ef9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019efd:	89 eb                	mov    ebx,ebp
c0019eff:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019f03:	39 ce                	cmp    esi,ecx
c0019f05:	7e 17                	jle    c0019f1e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019f07:	31 d2                	xor    edx,edx
c0019f09:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019f0d:	7d 13                	jge    c0019f22 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019f0f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f13:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019f16:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019f19:	75 0d                	jne    c0019f28 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019f1b:	42                   	inc    edx
c0019f1c:	eb eb                	jmp    c0019f09 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019f1e:	31 c0                	xor    eax,eax
c0019f20:	eb 0a                	jmp    c0019f2c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f22:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019f26:	eb 04                	jmp    c0019f2c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019f28:	41                   	inc    ecx
c0019f29:	43                   	inc    ebx
c0019f2a:	eb d7                	jmp    c0019f03 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019f2c:	5b                   	pop    ebx
c0019f2d:	5e                   	pop    esi
c0019f2e:	5f                   	pop    edi
c0019f2f:	5d                   	pop    ebp
c0019f30:	c3                   	ret    

c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019f31:	56                   	push   esi
c0019f32:	53                   	push   ebx
c0019f33:	52                   	push   edx
c0019f34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f40:	39 0d c0 c7 03 c0    	cmp    DWORD PTR ds:0xc003c7c0,ecx
c0019f46:	75 08                	jne    c0019f50 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019f48:	38 05 24 b3 03 c0    	cmp    BYTE PTR ds:0xc003b324,al
c0019f4e:	74 2b                	je     c0019f7b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019f50:	83 ec 0c             	sub    esp,0xc
c0019f53:	a2 24 b3 03 c0       	mov    ds:0xc003b324,al
c0019f58:	68 e0 c7 03 c0       	push   0xc003c7e0
c0019f5d:	0f be c0             	movsx  eax,al
c0019f60:	6a 01                	push   0x1
c0019f62:	89 0d c0 c7 03 c0    	mov    DWORD PTR ds:0xc003c7c0,ecx
c0019f68:	31 db                	xor    ebx,ebx
c0019f6a:	53                   	push   ebx
c0019f6b:	51                   	push   ecx
c0019f6c:	ff 34 85 5c c1 03 c0 	push   DWORD PTR [eax*4-0x3ffc3ea4]
c0019f73:	e8 64 b2 ff ff       	call   c00151dc <LogicalDisk::read(unsigned long long, int, void*)>
c0019f78:	83 c4 20             	add    esp,0x20
c0019f7b:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019f83:	c7 44 24 14 e0 c7 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c7e0
c0019f8b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019f8f:	58                   	pop    eax
c0019f90:	5b                   	pop    ebx
c0019f91:	5e                   	pop    esi
c0019f92:	e9 ca 66 fe ff       	jmp    c0000661 <memcpy>
c0019f97:	90                   	nop

c0019f98 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019f98:	81 ec 10 08 00 00    	sub    esp,0x810
c0019f9e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019fa5:	83 c0 41             	add    eax,0x41
c0019fa8:	0f be c0             	movsx  eax,al
c0019fab:	50                   	push   eax
c0019fac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fb0:	50                   	push   eax
c0019fb1:	6a 10                	push   0x10
c0019fb3:	e8 79 ff ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019fb8:	83 c4 10             	add    esp,0x10
c0019fbb:	31 c0                	xor    eax,eax
c0019fbd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019fc2:	75 1d                	jne    c0019fe1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019fc4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019fc9:	75 16                	jne    c0019fe1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019fcb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019fd0:	75 0f                	jne    c0019fe1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019fd2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019fd7:	75 08                	jne    c0019fe1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019fd9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019fde:	0f 94 c0             	sete   al
c0019fe1:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019fe7:	c3                   	ret    

c0019fe8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019fe8:	55                   	push   ebp
c0019fe9:	57                   	push   edi
c0019fea:	56                   	push   esi
c0019feb:	53                   	push   ebx
c0019fec:	81 ec 34 08 00 00    	sub    esp,0x834
c0019ff2:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019ff9:	55                   	push   ebp
c0019ffa:	68 87 a4 03 c0       	push   0xc003a487
c0019fff:	e8 5c 2e ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001a004:	83 c4 10             	add    esp,0x10
c001a007:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a00f:	0f 84 06 02 00 00    	je     c001a21b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a015:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a01d:	0f 84 f8 01 00 00    	je     c001a21b <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a023:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a02a:	b8 01 00 00 00       	mov    eax,0x1
c001a02f:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a033:	0f 85 e7 01 00 00    	jne    c001a220 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a039:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a03c:	31 d2                	xor    edx,edx
c001a03e:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a041:	89 e9                	mov    ecx,ebp
c001a043:	89 d3                	mov    ebx,edx
c001a045:	01 f1                	add    ecx,esi
c001a047:	11 fb                	adc    ebx,edi
c001a049:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a04d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a051:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a058:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a05b:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a05e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a062:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a06a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a06e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a072:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a076:	72 19                	jb     c001a091 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a078:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a080:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a084:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a087:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a08b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a08f:	eb 13                	jmp    c001a0a4 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a091:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a095:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a099:	29 f0                	sub    eax,esi
c001a09b:	19 fa                	sbb    edx,edi
c001a09d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a0a4:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a0ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0b0:	53                   	push   ebx
c001a0b1:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a0b5:	c1 e0 0b             	shl    eax,0xb
c001a0b8:	01 c6                	add    esi,eax
c001a0ba:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a0c1:	11 d7                	adc    edi,edx
c001a0c3:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a0c7:	89 fa                	mov    edx,edi
c001a0c9:	50                   	push   eax
c001a0ca:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a0ce:	50                   	push   eax
c001a0cf:	89 f0                	mov    eax,esi
c001a0d1:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a0d5:	50                   	push   eax
c001a0d6:	e8 56 fe ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0db:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a0e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0e6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a0e9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a0ed:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a0f3:	83 c4 10             	add    esp,0x10
c001a0f6:	b8 00 08 00 00       	mov    eax,0x800
c001a0fb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a0ff:	29 d0                	sub    eax,edx
c001a101:	39 c1                	cmp    ecx,eax
c001a103:	83 db 00             	sbb    ebx,0x0
c001a106:	7d 19                	jge    c001a121 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a108:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a10d:	75 16                	jne    c001a125 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a10f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a116:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a11c:	e9 f6 00 00 00       	jmp    c001a217 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a121:	89 c5                	mov    ebp,eax
c001a123:	eb 03                	jmp    c001a128 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a125:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a128:	51                   	push   ecx
c001a129:	55                   	push   ebp
c001a12a:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a12e:	50                   	push   eax
c001a12f:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a136:	e8 26 65 fe ff       	call   c0000661 <memcpy>
c001a13b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a13f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a143:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a14a:	01 e8                	add    eax,ebp
c001a14c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a150:	89 e8                	mov    eax,ebp
c001a152:	99                   	cdq    
c001a153:	01 ee                	add    esi,ebp
c001a155:	11 d7                	adc    edi,edx
c001a157:	29 e9                	sub    ecx,ebp
c001a159:	19 d3                	sbb    ebx,edx
c001a15b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a15f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a163:	83 c4 10             	add    esp,0x10
c001a166:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a16b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a16e:	b8 00 00 00 00       	mov    eax,0x0
c001a173:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a177:	7d 3f                	jge    c001a1b8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a179:	52                   	push   edx
c001a17a:	89 fa                	mov    edx,edi
c001a17c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a183:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a187:	50                   	push   eax
c001a188:	89 f0                	mov    eax,esi
c001a18a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a18e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a192:	50                   	push   eax
c001a193:	e8 99 fd ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a198:	81 c6 00 08 00 00    	add    esi,0x800
c001a19e:	83 d7 00             	adc    edi,0x0
c001a1a1:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a1a9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a1b1:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a1b6:	eb ab                	jmp    c001a163 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1bc:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a1bf:	74 34                	je     c001a1f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a1c1:	89 fa                	mov    edx,edi
c001a1c3:	50                   	push   eax
c001a1c4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a1cb:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a1cf:	50                   	push   eax
c001a1d0:	89 f0                	mov    eax,esi
c001a1d2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a1d6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a1da:	55                   	push   ebp
c001a1db:	50                   	push   eax
c001a1dc:	e8 50 fd ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a1e1:	83 c4 0c             	add    esp,0xc
c001a1e4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a1e8:	55                   	push   ebp
c001a1e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1ed:	e8 6f 64 fe ff       	call   c0000661 <memcpy>
c001a1f2:	83 c4 10             	add    esp,0x10
c001a1f5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a1fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a200:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a204:	89 38                	mov    DWORD PTR [eax],edi
c001a206:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a20d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a211:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a214:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a217:	31 c0                	xor    eax,eax
c001a219:	eb 05                	jmp    c001a220 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a21b:	b8 04 00 00 00       	mov    eax,0x4
c001a220:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a226:	5b                   	pop    ebx
c001a227:	5e                   	pop    esi
c001a228:	5f                   	pop    edi
c001a229:	5d                   	pop    ebp
c001a22a:	c3                   	ret    
c001a22b:	90                   	nop

c001a22c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a22c:	55                   	push   ebp
c001a22d:	57                   	push   edi
c001a22e:	56                   	push   esi
c001a22f:	53                   	push   ebx
c001a230:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a236:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a23d:	85 f6                	test   esi,esi
c001a23f:	0f 84 65 02 00 00    	je     c001a4aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a245:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a24d:	0f 84 57 02 00 00    	je     c001a4aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a253:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a256:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a259:	75 0a                	jne    c001a265 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a25b:	b8 07 00 00 00       	mov    eax,0x7
c001a260:	e9 4a 02 00 00       	jmp    c001a4af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a265:	50                   	push   eax
c001a266:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a26a:	50                   	push   eax
c001a26b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a272:	53                   	push   ebx
c001a273:	8b 06                	mov    eax,DWORD PTR [esi]
c001a275:	c1 e0 0b             	shl    eax,0xb
c001a278:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a27b:	c1 e8 0b             	shr    eax,0xb
c001a27e:	50                   	push   eax
c001a27f:	e8 ad fc ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a284:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	89 c1                	mov    ecx,eax
c001a28c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a28f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a295:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a298:	84 db                	test   bl,bl
c001a29a:	0f 85 90 00 00 00    	jne    c001a330 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a2a0:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a2a6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a2ac:	29 c7                	sub    edi,eax
c001a2ae:	89 fb                	mov    ebx,edi
c001a2b0:	c1 fb 1f             	sar    ebx,0x1f
c001a2b3:	01 f8                	add    eax,edi
c001a2b5:	11 da                	adc    edx,ebx
c001a2b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a2bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a2bf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a2c2:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a2c5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a2c8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a2cb:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a2d2:	89 d8                	mov    eax,ebx
c001a2d4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a2d7:	ba 00 00 00 00       	mov    edx,0x0
c001a2dc:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a2e0:	b8 00 00 00 00       	mov    eax,0x0
c001a2e5:	73 0b                	jae    c001a2f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a2e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a2ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2ee:	29 f8                	sub    eax,edi
c001a2f0:	19 da                	sbb    edx,ebx
c001a2f2:	89 d3                	mov    ebx,edx
c001a2f4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a2f7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a2fa:	09 c3                	or     ebx,eax
c001a2fc:	0f 84 59 ff ff ff    	je     c001a25b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a302:	55                   	push   ebp
c001a303:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a307:	50                   	push   eax
c001a308:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a30f:	53                   	push   ebx
c001a310:	8b 06                	mov    eax,DWORD PTR [esi]
c001a312:	c1 e0 0b             	shl    eax,0xb
c001a315:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a319:	c1 e8 0b             	shr    eax,0xb
c001a31c:	50                   	push   eax
c001a31d:	e8 0f fc ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a322:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a325:	83 c4 10             	add    esp,0x10
c001a328:	25 ff 07 00 00       	and    eax,0x7ff
c001a32d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a330:	57                   	push   edi
c001a331:	6a 28                	push   0x28
c001a333:	6a 00                	push   0x0
c001a335:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a339:	50                   	push   eax
c001a33a:	e8 99 63 fe ff       	call   c00006d8 <memset>
c001a33f:	31 d2                	xor    edx,edx
c001a341:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a344:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a34a:	89 f8                	mov    eax,edi
c001a34c:	83 c0 21             	add    eax,0x21
c001a34f:	83 d2 00             	adc    edx,0x0
c001a352:	89 c7                	mov    edi,eax
c001a354:	89 d5                	mov    ebp,edx
c001a356:	83 c4 10             	add    esp,0x10
c001a359:	31 c9                	xor    ecx,ecx
c001a35b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a362:	83 f9 28             	cmp    ecx,0x28
c001a365:	88 04 24             	mov    BYTE PTR [esp],al
c001a368:	0f 94 c2             	sete   dl
c001a36b:	88 d0                	mov    al,dl
c001a36d:	ba ff 07 00 00       	mov    edx,0x7ff
c001a372:	39 fa                	cmp    edx,edi
c001a374:	ba 00 00 00 00       	mov    edx,0x0
c001a379:	19 ea                	sbb    edx,ebp
c001a37b:	0f 92 c2             	setb   dl
c001a37e:	09 c2                	or     edx,eax
c001a380:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a384:	0f 94 c0             	sete   al
c001a387:	08 d0                	or     al,dl
c001a389:	75 16                	jne    c001a3a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a38b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a38f:	74 10                	je     c001a3a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a391:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a394:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a398:	41                   	inc    ecx
c001a399:	83 c7 01             	add    edi,0x1
c001a39c:	83 d5 00             	adc    ebp,0x0
c001a39f:	eb ba                	jmp    c001a35b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a3a1:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a3a9:	83 ec 0c             	sub    esp,0xc
c001a3ac:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a3b0:	57                   	push   edi
c001a3b1:	e8 4b 63 fe ff       	call   c0000701 <strlen>
c001a3b6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a3be:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a3c2:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a3c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a3cc:	5a                   	pop    edx
c001a3cd:	25 ff 07 00 00       	and    eax,0x7ff
c001a3d2:	01 c8                	add    eax,ecx
c001a3d4:	59                   	pop    ecx
c001a3d5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a3db:	83 e0 02             	and    eax,0x2
c001a3de:	3c 01                	cmp    al,0x1
c001a3e0:	19 c0                	sbb    eax,eax
c001a3e2:	83 c0 02             	add    eax,0x2
c001a3e5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a3e9:	57                   	push   edi
c001a3ea:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a3ee:	50                   	push   eax
c001a3ef:	e8 00 64 fe ff       	call   c00007f4 <strcpy>
c001a3f4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	84 c0                	test   al,al
c001a3fd:	75 21                	jne    c001a420 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a3ff:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a407:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a40f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a417:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a41e:	eb 28                	jmp    c001a448 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a420:	fe c8                	dec    al
c001a422:	75 24                	jne    c001a448 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a424:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a42c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a434:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a43c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a443:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a448:	0f b6 fb             	movzx  edi,bl
c001a44b:	31 db                	xor    ebx,ebx
c001a44d:	50                   	push   eax
c001a44e:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a455:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a459:	50                   	push   eax
c001a45a:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a461:	e8 fb 61 fe ff       	call   c0000661 <memcpy>
c001a466:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a46d:	89 f9                	mov    ecx,edi
c001a46f:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a475:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a478:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a47b:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a47e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	39 c7                	cmp    edi,eax
c001a486:	89 df                	mov    edi,ebx
c001a488:	19 d7                	sbb    edi,edx
c001a48a:	72 10                	jb     c001a49c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a48c:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a493:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a49a:	eb 0a                	jmp    c001a4a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a49c:	29 c8                	sub    eax,ecx
c001a49e:	19 da                	sbb    edx,ebx
c001a4a0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a4a3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a4a6:	31 c0                	xor    eax,eax
c001a4a8:	eb 05                	jmp    c001a4af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a4aa:	b8 04 00 00 00       	mov    eax,0x4
c001a4af:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a4b5:	5b                   	pop    ebx
c001a4b6:	5e                   	pop    esi
c001a4b7:	5f                   	pop    edi
c001a4b8:	5d                   	pop    ebp
c001a4b9:	c3                   	ret    

c001a4ba <readRoot(unsigned int*, unsigned int*, char)>:
c001a4ba:	81 ec 40 08 00 00    	sub    esp,0x840
c001a4c0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a4c8:	50                   	push   eax
c001a4c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a4cd:	50                   	push   eax
c001a4ce:	6a 10                	push   0x10
c001a4d0:	e8 5c fa ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	6a 22                	push   0x22
c001a4da:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a4e1:	50                   	push   eax
c001a4e2:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a4e6:	50                   	push   eax
c001a4e7:	e8 75 61 fe ff       	call   c0000661 <memcpy>
c001a4ec:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a4f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a4f7:	89 10                	mov    DWORD PTR [eax],edx
c001a4f9:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a500:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a504:	89 10                	mov    DWORD PTR [eax],edx
c001a506:	b0 01                	mov    al,0x1
c001a508:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a50e:	c3                   	ret    

c001a50f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a50f:	55                   	push   ebp
c001a510:	57                   	push   edi
c001a511:	56                   	push   esi
c001a512:	53                   	push   ebx
c001a513:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a519:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a520:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a527:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a52b:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a52f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a533:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a537:	75 03                	jne    c001a53c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a539:	83 c3 02             	add    ebx,0x2
c001a53c:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a53f:	75 03                	jne    c001a544 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a541:	43                   	inc    ebx
c001a542:	eb f8                	jmp    c001a53c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a544:	51                   	push   ecx
c001a545:	68 00 01 00 00       	push   0x100
c001a54a:	6a 00                	push   0x0
c001a54c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a550:	50                   	push   eax
c001a551:	e8 82 61 fe ff       	call   c00006d8 <memset>
c001a556:	83 c4 10             	add    esp,0x10
c001a559:	31 d2                	xor    edx,edx
c001a55b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a55e:	84 c0                	test   al,al
c001a560:	74 21                	je     c001a583 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a562:	3c 2f                	cmp    al,0x2f
c001a564:	75 0b                	jne    c001a571 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a566:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a56a:	bd 01 00 00 00       	mov    ebp,0x1
c001a56f:	eb 14                	jmp    c001a585 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a571:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a574:	80 f9 19             	cmp    cl,0x19
c001a577:	77 03                	ja     c001a57c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a579:	83 e8 20             	sub    eax,0x20
c001a57c:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a580:	42                   	inc    edx
c001a581:	eb d8                	jmp    c001a55b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a583:	31 ed                	xor    ebp,ebp
c001a585:	83 ec 0c             	sub    esp,0xc
c001a588:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a58f:	e8 c7 2e ff ff       	call   c000d45b <malloc>
c001a594:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a59b:	89 c6                	mov    esi,eax
c001a59d:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a5a3:	c1 ef 0b             	shr    edi,0xb
c001a5a6:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a5ad:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a5b1:	83 c4 10             	add    esp,0x10
c001a5b4:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a5b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a5bd:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a5c4:	74 28                	je     c001a5ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a5c6:	52                   	push   edx
c001a5c7:	57                   	push   edi
c001a5c8:	50                   	push   eax
c001a5c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a5cd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a5d4:	e8 58 f9 ff ff       	call   c0019f31 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a5d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5dd:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a5e4:	05 00 08 00 00       	add    eax,0x800
c001a5e9:	83 c4 10             	add    esp,0x10
c001a5ec:	eb cb                	jmp    c001a5b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a5ee:	83 ec 0c             	sub    esp,0xc
c001a5f1:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a5f5:	57                   	push   edi
c001a5f6:	e8 06 61 fe ff       	call   c0000701 <strlen>
c001a5fb:	50                   	push   eax
c001a5fc:	57                   	push   edi
c001a5fd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a604:	56                   	push   esi
c001a605:	e8 e5 f8 ff ff       	call   c0019eef <__memmem(unsigned char*, int, unsigned char*, int)>
c001a60a:	83 c4 20             	add    esp,0x20
c001a60d:	85 c0                	test   eax,eax
c001a60f:	75 13                	jne    c001a624 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a611:	83 ec 0c             	sub    esp,0xc
c001a614:	56                   	push   esi
c001a615:	e8 51 2e ff ff       	call   c000d46b <free>
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	31 c0                	xor    eax,eax
c001a61f:	e9 b3 00 00 00       	jmp    c001a6d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a624:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a628:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a62c:	c1 e7 08             	shl    edi,0x8
c001a62f:	c1 e2 10             	shl    edx,0x10
c001a632:	09 d7                	or     edi,edx
c001a634:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a638:	09 d7                	or     edi,edx
c001a63a:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a63e:	c1 e2 18             	shl    edx,0x18
c001a641:	09 d7                	or     edi,edx
c001a643:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a647:	89 d1                	mov    ecx,edx
c001a649:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a64d:	c1 e1 08             	shl    ecx,0x8
c001a650:	c1 e2 10             	shl    edx,0x10
c001a653:	09 ca                	or     edx,ecx
c001a655:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a659:	09 ca                	or     edx,ecx
c001a65b:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a65f:	c1 e1 18             	shl    ecx,0x18
c001a662:	09 ca                	or     edx,ecx
c001a664:	89 e9                	mov    ecx,ebp
c001a666:	84 c9                	test   cl,cl
c001a668:	74 3c                	je     c001a6a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a66a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a66e:	83 ec 0c             	sub    esp,0xc
c001a671:	56                   	push   esi
c001a672:	e8 f4 2d ff ff       	call   c000d46b <free>
c001a677:	83 c4 0c             	add    esp,0xc
c001a67a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a681:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a686:	50                   	push   eax
c001a687:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a68e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a695:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a699:	52                   	push   edx
c001a69a:	57                   	push   edi
c001a69b:	53                   	push   ebx
c001a69c:	e8 6e fe ff ff       	call   c001a50f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a6a1:	83 c4 20             	add    esp,0x20
c001a6a4:	eb 31                	jmp    c001a6d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6a6:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a6a9:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a6b0:	d0 e8                	shr    al,1
c001a6b2:	89 3b                	mov    DWORD PTR [ebx],edi
c001a6b4:	83 e0 01             	and    eax,0x1
c001a6b7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a6be:	83 ec 0c             	sub    esp,0xc
c001a6c1:	89 13                	mov    DWORD PTR [ebx],edx
c001a6c3:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a6ca:	89 03                	mov    DWORD PTR [ebx],eax
c001a6cc:	56                   	push   esi
c001a6cd:	e8 99 2d ff ff       	call   c000d46b <free>
c001a6d2:	83 c4 10             	add    esp,0x10
c001a6d5:	b0 01                	mov    al,0x1
c001a6d7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6dd:	5b                   	pop    ebx
c001a6de:	5e                   	pop    esi
c001a6df:	5f                   	pop    edi
c001a6e0:	5d                   	pop    ebp
c001a6e1:	c3                   	ret    

c001a6e2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a6e2:	55                   	push   ebp
c001a6e3:	57                   	push   edi
c001a6e4:	56                   	push   esi
c001a6e5:	53                   	push   ebx
c001a6e6:	83 ec 20             	sub    esp,0x20
c001a6e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a6ed:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a6f1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a6f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a705:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a70a:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a710:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a716:	57                   	push   edi
c001a717:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a71b:	50                   	push   eax
c001a71c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a720:	50                   	push   eax
c001a721:	e8 94 fd ff ff       	call   c001a4ba <readRoot(unsigned int*, unsigned int*, char)>
c001a726:	5a                   	pop    edx
c001a727:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a72b:	e8 d1 5f fe ff       	call   c0000701 <strlen>
c001a730:	83 c4 10             	add    esp,0x10
c001a733:	83 f8 03             	cmp    eax,0x3
c001a736:	77 17                	ja     c001a74f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a73c:	89 03                	mov    DWORD PTR [ebx],eax
c001a73e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a742:	89 06                	mov    DWORD PTR [esi],eax
c001a744:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a74b:	b0 01                	mov    al,0x1
c001a74d:	eb 19                	jmp    c001a768 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a74f:	50                   	push   eax
c001a750:	55                   	push   ebp
c001a751:	57                   	push   edi
c001a752:	56                   	push   esi
c001a753:	53                   	push   ebx
c001a754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a758:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a75c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a760:	e8 aa fd ff ff       	call   c001a50f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a765:	83 c4 20             	add    esp,0x20
c001a768:	83 c4 1c             	add    esp,0x1c
c001a76b:	5b                   	pop    ebx
c001a76c:	5e                   	pop    esi
c001a76d:	5f                   	pop    edi
c001a76e:	5d                   	pop    ebp
c001a76f:	c3                   	ret    

c001a770 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a770:	57                   	push   edi
c001a771:	56                   	push   esi
c001a772:	53                   	push   ebx
c001a773:	83 ec 10             	sub    esp,0x10
c001a776:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a77a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a77e:	85 ff                	test   edi,edi
c001a780:	74 7b                	je     c001a7fd <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a782:	85 f6                	test   esi,esi
c001a784:	74 77                	je     c001a7fd <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a786:	83 ec 0c             	sub    esp,0xc
c001a789:	6a 1c                	push   0x1c
c001a78b:	e8 cb 2c ff ff       	call   c000d45b <malloc>
c001a790:	89 07                	mov    DWORD PTR [edi],eax
c001a792:	89 c3                	mov    ebx,eax
c001a794:	58                   	pop    eax
c001a795:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a799:	50                   	push   eax
c001a79a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a79d:	50                   	push   eax
c001a79e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7a2:	50                   	push   eax
c001a7a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7a7:	50                   	push   eax
c001a7a8:	56                   	push   esi
c001a7a9:	e8 34 ff ff ff       	call   c001a6e2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a7ae:	83 c4 20             	add    esp,0x20
c001a7b1:	84 c0                	test   al,al
c001a7b3:	74 07                	je     c001a7bc <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a7b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a7ba:	74 0b                	je     c001a7c7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a7bc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a7c0:	b8 01 00 00 00       	mov    eax,0x1
c001a7c5:	eb 3b                	jmp    c001a802 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a7c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7cb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a7cf:	89 03                	mov    DWORD PTR [ebx],eax
c001a7d1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a7e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7ea:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a7ed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a7f4:	8a 06                	mov    al,BYTE PTR [esi]
c001a7f6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a7f9:	31 c0                	xor    eax,eax
c001a7fb:	eb 05                	jmp    c001a802 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a7fd:	b8 04 00 00 00       	mov    eax,0x4
c001a802:	83 c4 10             	add    esp,0x10
c001a805:	5b                   	pop    ebx
c001a806:	5e                   	pop    esi
c001a807:	5f                   	pop    edi
c001a808:	c3                   	ret    
c001a809:	90                   	nop

c001a80a <ISO9660::exists(char const*)>:
c001a80a:	83 ec 28             	sub    esp,0x28
c001a80d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a811:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a815:	52                   	push   edx
c001a816:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a819:	52                   	push   edx
c001a81a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a81e:	52                   	push   edx
c001a81f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a823:	52                   	push   edx
c001a824:	50                   	push   eax
c001a825:	e8 b8 fe ff ff       	call   c001a6e2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a82a:	83 c4 3c             	add    esp,0x3c
c001a82d:	c3                   	ret    

c001a82e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a82e:	56                   	push   esi
c001a82f:	53                   	push   ebx
c001a830:	83 ec 14             	sub    esp,0x14
c001a833:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a837:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a83b:	85 db                	test   ebx,ebx
c001a83d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a841:	0f 94 c2             	sete   dl
c001a844:	85 f6                	test   esi,esi
c001a846:	0f 94 c0             	sete   al
c001a849:	08 c2                	or     dl,al
c001a84b:	75 68                	jne    c001a8b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a84d:	85 c9                	test   ecx,ecx
c001a84f:	74 64                	je     c001a8b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a851:	83 ec 0c             	sub    esp,0xc
c001a854:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a857:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a85b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a861:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a868:	50                   	push   eax
c001a869:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a86c:	50                   	push   eax
c001a86d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a871:	50                   	push   eax
c001a872:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a876:	50                   	push   eax
c001a877:	51                   	push   ecx
c001a878:	e8 65 fe ff ff       	call   c001a6e2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a87d:	83 c4 20             	add    esp,0x20
c001a880:	ba 01 00 00 00       	mov    edx,0x1
c001a885:	84 c0                	test   al,al
c001a887:	74 31                	je     c001a8ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a889:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a88d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a894:	89 03                	mov    DWORD PTR [ebx],eax
c001a896:	ba 00 00 00 00       	mov    edx,0x0
c001a89b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a89f:	85 c0                	test   eax,eax
c001a8a1:	0f 95 06             	setne  BYTE PTR [esi]
c001a8a4:	74 14                	je     c001a8ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a8ac:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a8b3:	eb 05                	jmp    c001a8ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a8b5:	ba 04 00 00 00       	mov    edx,0x4
c001a8ba:	83 c4 14             	add    esp,0x14
c001a8bd:	89 d0                	mov    eax,edx
c001a8bf:	5b                   	pop    ebx
c001a8c0:	5e                   	pop    esi
c001a8c1:	c3                   	ret    

c001a8c2 <ISO9660::openDir(char const*, void**)>:
c001a8c2:	57                   	push   edi
c001a8c3:	56                   	push   esi
c001a8c4:	53                   	push   ebx
c001a8c5:	83 ec 10             	sub    esp,0x10
c001a8c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a8cc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a8d0:	85 ff                	test   edi,edi
c001a8d2:	0f 84 95 00 00 00    	je     c001a96d <ISO9660::openDir(char const*, void**)+0xab>
c001a8d8:	85 f6                	test   esi,esi
c001a8da:	0f 84 8d 00 00 00    	je     c001a96d <ISO9660::openDir(char const*, void**)+0xab>
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	6a 1c                	push   0x1c
c001a8e5:	e8 71 2b ff ff       	call   c000d45b <malloc>
c001a8ea:	89 07                	mov    DWORD PTR [edi],eax
c001a8ec:	89 c3                	mov    ebx,eax
c001a8ee:	59                   	pop    ecx
c001a8ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8f3:	50                   	push   eax
c001a8f4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a8f7:	50                   	push   eax
c001a8f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8fc:	50                   	push   eax
c001a8fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a901:	50                   	push   eax
c001a902:	56                   	push   esi
c001a903:	e8 da fd ff ff       	call   c001a6e2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a908:	83 c4 20             	add    esp,0x20
c001a90b:	84 c0                	test   al,al
c001a90d:	74 07                	je     c001a916 <ISO9660::openDir(char const*, void**)+0x54>
c001a90f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a914:	75 21                	jne    c001a937 <ISO9660::openDir(char const*, void**)+0x75>
c001a916:	0f b6 c0             	movzx  eax,al
c001a919:	52                   	push   edx
c001a91a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a91e:	50                   	push   eax
c001a91f:	68 9a a4 03 c0       	push   0xc003a49a
c001a924:	e8 37 25 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001a929:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	b8 01 00 00 00       	mov    eax,0x1
c001a935:	eb 3b                	jmp    c001a972 <ISO9660::openDir(char const*, void**)+0xb0>
c001a937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a93b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a93f:	89 03                	mov    DWORD PTR [ebx],eax
c001a941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a948:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a94c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a953:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a95a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a95d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a964:	8a 06                	mov    al,BYTE PTR [esi]
c001a966:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a969:	31 c0                	xor    eax,eax
c001a96b:	eb 05                	jmp    c001a972 <ISO9660::openDir(char const*, void**)+0xb0>
c001a96d:	b8 04 00 00 00       	mov    eax,0x4
c001a972:	83 c4 10             	add    esp,0x10
c001a975:	5b                   	pop    ebx
c001a976:	5e                   	pop    esi
c001a977:	5f                   	pop    edi
c001a978:	c3                   	ret    
c001a979:	90                   	nop

c001a97a <ISO9660::ISO9660()>:
c001a97a:	83 ec 0c             	sub    esp,0xc
c001a97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a981:	83 ec 0c             	sub    esp,0xc
c001a984:	50                   	push   eax
c001a985:	e8 8a 7c ff ff       	call   c0012614 <Filesystem::Filesystem()>
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	ba c0 a4 03 c0       	mov    edx,0xc003a4c0
c001a992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a996:	89 10                	mov    DWORD PTR [eax],edx
c001a998:	90                   	nop
c001a999:	83 c4 0c             	add    esp,0xc
c001a99c:	c3                   	ret    
c001a99d:	90                   	nop

c001a99e <SoundChannel::~SoundChannel()>:
c001a99e:	83 ec 0c             	sub    esp,0xc
c001a9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	50                   	push   eax
c001a9ac:	e8 ba 2a ff ff       	call   c000d46b <free>
c001a9b1:	83 c4 10             	add    esp,0x10
c001a9b4:	90                   	nop
c001a9b5:	83 c4 0c             	add    esp,0xc
c001a9b8:	c3                   	ret    
c001a9b9:	90                   	nop

c001a9ba <SoundChannel::setSpeed(float)>:
c001a9ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9be:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a9c2:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a9c5:	c3                   	ret    

c001a9c6 <SoundChannel::getSpeed()>:
c001a9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ca:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a9cd:	c3                   	ret    

c001a9ce <SoundChannel::setVolume(int)>:
c001a9ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d2:	83 f8 64             	cmp    eax,0x64
c001a9d5:	7e 05                	jle    c001a9dc <SoundChannel::setVolume(int)+0xe>
c001a9d7:	b8 64 00 00 00       	mov    eax,0x64
c001a9dc:	85 c0                	test   eax,eax
c001a9de:	79 02                	jns    c001a9e2 <SoundChannel::setVolume(int)+0x14>
c001a9e0:	31 c0                	xor    eax,eax
c001a9e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9e6:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a9e9:	c3                   	ret    

c001a9ea <SoundChannel::getVolume()>:
c001a9ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ee:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a9f1:	c3                   	ret    

c001a9f2 <SoundChannel::pause()>:
c001a9f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f6:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <SoundChannel::SoundChannel(int, int, int, int)>:
c001a9fc:	83 ec 1c             	sub    esp,0x1c
c001a9ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa03:	e8 ea ff ff ff       	call   c001a9f2 <SoundChannel::pause()>
c001aa08:	83 c4 04             	add    esp,0x4
c001aa0b:	6a 50                	push   0x50
c001aa0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa11:	e8 b8 ff ff ff       	call   c001a9ce <SoundChannel::setVolume(int)>
c001aa16:	83 c4 08             	add    esp,0x8
c001aa19:	d9 e8                	fld1   
c001aa1b:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aa1f:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aa22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aa26:	e8 8f ff ff ff       	call   c001a9ba <SoundChannel::setSpeed(float)>
c001aa2b:	83 c4 08             	add    esp,0x8
c001aa2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa36:	89 10                	mov    DWORD PTR [eax],edx
c001aa38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aa43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa47:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa4b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aa4e:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aa53:	75 23                	jne    c001aa78 <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aa55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa59:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aa62:	0f af c2             	imul   eax,edx
c001aa65:	85 c0                	test   eax,eax
c001aa67:	79 03                	jns    c001aa6c <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001aa69:	83 c0 03             	add    eax,0x3
c001aa6c:	c1 f8 02             	sar    eax,0x2
c001aa6f:	05 a0 0f 00 00       	add    eax,0xfa0
c001aa74:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aa78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aa80:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001aa83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa87:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001aa8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa92:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001aa99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa9d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaa0:	c1 e0 02             	shl    eax,0x2
c001aaa3:	83 ec 0c             	sub    esp,0xc
c001aaa6:	50                   	push   eax
c001aaa7:	e8 af 29 ff ff       	call   c000d45b <malloc>
c001aaac:	83 c4 10             	add    esp,0x10
c001aaaf:	89 c2                	mov    edx,eax
c001aab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aab5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001aab8:	83 ec 04             	sub    esp,0x4
c001aabb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aabf:	50                   	push   eax
c001aac0:	6a 01                	push   0x1
c001aac2:	6a 04                	push   0x4
c001aac4:	e8 9f e0 fe ff       	call   c0008b68 <src_new>
c001aac9:	83 c4 10             	add    esp,0x10
c001aacc:	89 c2                	mov    edx,eax
c001aace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001aad5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aad9:	85 c0                	test   eax,eax
c001aadb:	74 10                	je     c001aaed <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001aadd:	83 ec 0c             	sub    esp,0xc
c001aae0:	68 1c a5 03 c0       	push   0xc003a51c
c001aae5:	e8 94 24 ff ff       	call   c000cf7e <panic(char const*)>
c001aaea:	83 c4 10             	add    esp,0x10
c001aaed:	90                   	nop
c001aaee:	83 c4 1c             	add    esp,0x1c
c001aaf1:	c3                   	ret    

c001aaf2 <SoundChannel::play()>:
c001aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf6:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001aafa:	c3                   	ret    
c001aafb:	90                   	nop

c001aafc <SoundChannel::paused()>:
c001aafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab00:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001ab03:	c3                   	ret    

c001ab04 <SoundChannel::getSampleRate()>:
c001ab04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab08:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab0a:	c3                   	ret    
c001ab0b:	90                   	nop

c001ab0c <SoundChannel::getBits()>:
c001ab0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab13:	c3                   	ret    

c001ab14 <SoundChannel::getBufferUsed()>:
c001ab14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab18:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ab1b:	c3                   	ret    

c001ab1c <SoundChannel::getBufferSize()>:
c001ab1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab20:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab23:	c3                   	ret    

c001ab24 <SoundChannel::unbuffer(float*, int, int)>:
c001ab24:	53                   	push   ebx
c001ab25:	83 ec 40             	sub    esp,0x40
c001ab28:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ab2c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ab34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab37:	db 03                	fild   DWORD PTR [ebx]
c001ab39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab3d:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001ab41:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ab44:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001ab47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab4b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001ab4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab57:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab5f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab63:	50                   	push   eax
c001ab64:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ab67:	e8 b6 dc fe ff       	call   c0008822 <src_process>
c001ab6c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab70:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ab73:	83 c4 0c             	add    esp,0xc
c001ab76:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab79:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ab7c:	29 d0                	sub    eax,edx
c001ab7e:	c1 e0 02             	shl    eax,0x2
c001ab81:	50                   	push   eax
c001ab82:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ab85:	50                   	push   eax
c001ab86:	51                   	push   ecx
c001ab87:	e8 68 5a fe ff       	call   c00005f4 <memmove>
c001ab8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab90:	83 c4 48             	add    esp,0x48
c001ab93:	5b                   	pop    ebx
c001ab94:	c3                   	ret    
c001ab95:	90                   	nop

c001ab96 <SoundChannel::buffer8(unsigned char*, int)>:
c001ab96:	53                   	push   ebx
c001ab97:	31 c0                	xor    eax,eax
c001ab99:	83 ec 08             	sub    esp,0x8
c001ab9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aba0:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001aba3:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001aba6:	74 35                	je     c001abdd <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aba8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001abac:	7d 2f                	jge    c001abdd <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001abae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001abb2:	d9 05 38 a5 03 c0    	fld    DWORD PTR ds:0xc003a538
c001abb8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001abbc:	40                   	inc    eax
c001abbd:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001abc2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001abc5:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001abc9:	8d 59 01             	lea    ebx,[ecx+0x1]
c001abcc:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001abcf:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001abd2:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001abd5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001abd8:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001abdb:	eb c9                	jmp    c001aba6 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001abdd:	83 c4 08             	add    esp,0x8
c001abe0:	5b                   	pop    ebx
c001abe1:	c3                   	ret    

c001abe2 <SoundDevice::SoundDevice(char const*)>:
c001abe2:	83 ec 1c             	sub    esp,0x1c
c001abe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe9:	83 ec 08             	sub    esp,0x8
c001abec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abf0:	50                   	push   eax
c001abf1:	e8 14 8d ff ff       	call   c001390a <Device::Device(char const*)>
c001abf6:	83 c4 10             	add    esp,0x10
c001abf9:	ba 44 a5 03 c0       	mov    edx,0xc003a544
c001abfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac02:	89 10                	mov    DWORD PTR [eax],edx
c001ac04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac08:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ac12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ac20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac28:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac2d:	7f 19                	jg     c001ac48 <SoundDevice::SoundDevice(char const*)+0x66>
c001ac2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac37:	83 c2 54             	add    edx,0x54
c001ac3a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ac42:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac46:	eb e0                	jmp    c001ac28 <SoundDevice::SoundDevice(char const*)+0x46>
c001ac48:	90                   	nop
c001ac49:	83 c4 1c             	add    esp,0x1c
c001ac4c:	c3                   	ret    
c001ac4d:	90                   	nop

c001ac4e <SoundDevice::~SoundDevice()>:
c001ac4e:	53                   	push   ebx
c001ac4f:	83 ec 18             	sub    esp,0x18
c001ac52:	ba 44 a5 03 c0       	mov    edx,0xc003a544
c001ac57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac5b:	89 10                	mov    DWORD PTR [eax],edx
c001ac5d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac65:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ac6a:	7f 46                	jg     c001acb2 <SoundDevice::~SoundDevice()+0x64>
c001ac6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac74:	83 c2 54             	add    edx,0x54
c001ac77:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ac7b:	85 c0                	test   eax,eax
c001ac7d:	74 2d                	je     c001acac <SoundDevice::~SoundDevice()+0x5e>
c001ac7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ac87:	83 c2 54             	add    edx,0x54
c001ac8a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ac8e:	85 db                	test   ebx,ebx
c001ac90:	74 1a                	je     c001acac <SoundDevice::~SoundDevice()+0x5e>
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	53                   	push   ebx
c001ac96:	e8 03 fd ff ff       	call   c001a99e <SoundChannel::~SoundChannel()>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	83 ec 08             	sub    esp,0x8
c001aca1:	6a 2c                	push   0x2c
c001aca3:	53                   	push   ebx
c001aca4:	e8 76 77 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001acb0:	eb b3                	jmp    c001ac65 <SoundDevice::~SoundDevice()+0x17>
c001acb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	50                   	push   eax
c001acba:	e8 fd 88 ff ff       	call   c00135bc <Device::~Device()>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	90                   	nop
c001acc3:	83 c4 18             	add    esp,0x18
c001acc6:	5b                   	pop    ebx
c001acc7:	c3                   	ret    

c001acc8 <SoundDevice::~SoundDevice()>:
c001acc8:	83 ec 0c             	sub    esp,0xc
c001accb:	83 ec 0c             	sub    esp,0xc
c001acce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acd2:	e8 77 ff ff ff       	call   c001ac4e <SoundDevice::~SoundDevice()>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	83 ec 08             	sub    esp,0x8
c001acdd:	68 e4 01 00 00       	push   0x1e4
c001ace2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ace6:	e8 34 77 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	83 c4 0c             	add    esp,0xc
c001acf1:	c3                   	ret    

c001acf2 <SoundDevice::getFreeChannelNum()>:
c001acf2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001acf6:	31 c0                	xor    eax,eax
c001acf8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ad00:	74 09                	je     c001ad0b <SoundDevice::getFreeChannelNum()+0x19>
c001ad02:	40                   	inc    eax
c001ad03:	83 f8 20             	cmp    eax,0x20
c001ad06:	75 f0                	jne    c001acf8 <SoundDevice::getFreeChannelNum()+0x6>
c001ad08:	83 c8 ff             	or     eax,0xffffffff
c001ad0b:	c3                   	ret    

c001ad0c <SoundDevice::addChannel(SoundChannel*)>:
c001ad0c:	56                   	push   esi
c001ad0d:	53                   	push   ebx
c001ad0e:	51                   	push   ecx
c001ad0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad17:	53                   	push   ebx
c001ad18:	e8 d5 ff ff ff       	call   c001acf2 <SoundDevice::getFreeChannelNum()>
c001ad1d:	5a                   	pop    edx
c001ad1e:	83 f8 ff             	cmp    eax,0xffffffff
c001ad21:	74 51                	je     c001ad74 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad23:	85 f6                	test   esi,esi
c001ad25:	74 4d                	je     c001ad74 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ad27:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ad2e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ad35:	75 30                	jne    c001ad67 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ad37:	83 ec 0c             	sub    esp,0xc
c001ad3a:	56                   	push   esi
c001ad3b:	e8 c4 fd ff ff       	call   c001ab04 <SoundChannel::getSampleRate()>
c001ad40:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ad46:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad49:	e8 be fd ff ff       	call   c001ab0c <SoundChannel::getBits()>
c001ad4e:	83 c4 0c             	add    esp,0xc
c001ad51:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ad57:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ad59:	50                   	push   eax
c001ad5a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ad60:	53                   	push   ebx
c001ad61:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ad6d:	b8 01 00 00 00       	mov    eax,0x1
c001ad72:	eb 03                	jmp    c001ad77 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ad74:	83 c8 ff             	or     eax,0xffffffff
c001ad77:	5a                   	pop    edx
c001ad78:	5b                   	pop    ebx
c001ad79:	5e                   	pop    esi
c001ad7a:	c3                   	ret    
c001ad7b:	90                   	nop

c001ad7c <SoundDevice::removeChannel(int)>:
c001ad7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad84:	83 fa 1f             	cmp    edx,0x1f
c001ad87:	77 23                	ja     c001adac <SoundDevice::removeChannel(int)+0x30>
c001ad89:	8d 14 90             	lea    edx,[eax+edx*4]
c001ad8c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ad93:	74 17                	je     c001adac <SoundDevice::removeChannel(int)+0x30>
c001ad95:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ad9f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ada5:	75 05                	jne    c001adac <SoundDevice::removeChannel(int)+0x30>
c001ada7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ada9:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001adac:	c3                   	ret    
c001adad:	90                   	nop

c001adae <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001adae:	56                   	push   esi
c001adaf:	53                   	push   ebx
c001adb0:	31 db                	xor    ebx,ebx
c001adb2:	83 ec 14             	sub    esp,0x14
c001adb5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001adb9:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001adbd:	7d 55                	jge    c001ae14 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001adbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adc3:	d9 e8                	fld1   
c001adc5:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001adc8:	d8 0d 74 a5 03 c0    	fmul   DWORD PTR ds:0xc003a574
c001adce:	d8 0d 78 a5 03 c0    	fmul   DWORD PTR ds:0xc003a578
c001add4:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001add8:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001addc:	d8 15 7c a5 03 c0    	fcom   DWORD PTR ds:0xc003a57c
c001ade2:	df e0                	fnstsw ax
c001ade4:	9e                   	sahf   
c001ade5:	72 08                	jb     c001adef <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ade7:	dd d8                	fstp   st(0)
c001ade9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001aded:	eb 22                	jmp    c001ae11 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001adef:	d9 ee                	fldz   
c001adf1:	d8 d9                	fcomp  st(1)
c001adf3:	df e0                	fnstsw ax
c001adf5:	9e                   	sahf   
c001adf6:	72 08                	jb     c001ae00 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001adf8:	dd d8                	fstp   st(0)
c001adfa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001adfe:	eb 11                	jmp    c001ae11 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae00:	83 ec 10             	sub    esp,0x10
c001ae03:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ae06:	e8 c1 3a 00 00       	call   c001e8cc <lrintf>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ae11:	43                   	inc    ebx
c001ae12:	eb a5                	jmp    c001adb9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ae14:	83 c4 14             	add    esp,0x14
c001ae17:	5b                   	pop    ebx
c001ae18:	5e                   	pop    esi
c001ae19:	c3                   	ret    

c001ae1a <SoundDevice::getAudio(int, float*, float*)>:
c001ae1a:	55                   	push   ebp
c001ae1b:	57                   	push   edi
c001ae1c:	56                   	push   esi
c001ae1d:	53                   	push   ebx
c001ae1e:	31 db                	xor    ebx,ebx
c001ae20:	83 ec 20             	sub    esp,0x20
c001ae23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae27:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ae2b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ae2f:	c1 e0 02             	shl    eax,0x2
c001ae32:	50                   	push   eax
c001ae33:	6a 00                	push   0x0
c001ae35:	55                   	push   ebp
c001ae36:	e8 9d 58 fe ff       	call   c00006d8 <memset>
c001ae3b:	83 c4 10             	add    esp,0x10
c001ae3e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae42:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ae49:	85 c0                	test   eax,eax
c001ae4b:	0f 84 94 00 00 00    	je     c001aee5 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae51:	83 ec 0c             	sub    esp,0xc
c001ae54:	50                   	push   eax
c001ae55:	e8 a2 fc ff ff       	call   c001aafc <SoundChannel::paused()>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	84 c0                	test   al,al
c001ae5f:	0f 85 80 00 00 00    	jne    c001aee5 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae65:	83 ec 0c             	sub    esp,0xc
c001ae68:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ae6f:	e8 76 fb ff ff       	call   c001a9ea <SoundChannel::getVolume()>
c001ae74:	83 c4 10             	add    esp,0x10
c001ae77:	85 c0                	test   eax,eax
c001ae79:	74 6a                	je     c001aee5 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ae7b:	83 ec 0c             	sub    esp,0xc
c001ae7e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ae85:	e8 60 fb ff ff       	call   c001a9ea <SoundChannel::getVolume()>
c001ae8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae8e:	d9 05 80 a5 03 c0    	fld    DWORD PTR ds:0xc003a580
c001ae94:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ae98:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ae9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aea0:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001aea6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001aeaa:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001aeb1:	e8 6e fc ff ff       	call   c001ab24 <SoundChannel::unbuffer(float*, int, int)>
c001aeb6:	83 c4 20             	add    esp,0x20
c001aeb9:	31 d2                	xor    edx,edx
c001aebb:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001aebf:	39 c2                	cmp    edx,eax
c001aec1:	7d 1a                	jge    c001aedd <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001aec3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001aec7:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001aeca:	d8 c9                	fmul   st,st(1)
c001aecc:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001aed2:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001aed6:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001aeda:	42                   	inc    edx
c001aedb:	eb e2                	jmp    c001aebf <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001aedd:	dd d8                	fstp   st(0)
c001aedf:	39 c7                	cmp    edi,eax
c001aee1:	7e 02                	jle    c001aee5 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aee3:	89 c7                	mov    edi,eax
c001aee5:	43                   	inc    ebx
c001aee6:	83 fb 20             	cmp    ebx,0x20
c001aee9:	0f 85 53 ff ff ff    	jne    c001ae42 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001aeef:	83 c4 1c             	add    esp,0x1c
c001aef2:	89 f8                	mov    eax,edi
c001aef4:	5b                   	pop    ebx
c001aef5:	5e                   	pop    esi
c001aef6:	5f                   	pop    edi
c001aef7:	5d                   	pop    ebp
c001aef8:	c3                   	ret    
c001aef9:	90                   	nop

c001aefa <PCI::open(int, int, void*)>:
c001aefa:	83 ec 18             	sub    esp,0x18
c001aefd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af01:	8b 10                	mov    edx,DWORD PTR [eax]
c001af03:	50                   	push   eax
c001af04:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001af07:	31 c0                	xor    eax,eax
c001af09:	83 c4 1c             	add    esp,0x1c
c001af0c:	c3                   	ret    
c001af0d:	90                   	nop

c001af0e <PCI::close(int, int, void*)>:
c001af0e:	31 c0                	xor    eax,eax
c001af10:	c3                   	ret    
c001af11:	90                   	nop

c001af12 <PCI::PCI()>:
c001af12:	83 ec 0c             	sub    esp,0xc
c001af15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af19:	83 ec 08             	sub    esp,0x8
c001af1c:	68 84 a5 03 c0       	push   0xc003a584
c001af21:	50                   	push   eax
c001af22:	e8 6f 80 ff ff       	call   c0012f96 <Bus::Bus(char const*)>
c001af27:	83 c4 10             	add    esp,0x10
c001af2a:	ba 30 a6 03 c0       	mov    edx,0xc003a630
c001af2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af33:	89 10                	mov    DWORD PTR [eax],edx
c001af35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af3f:	0f b6 d0             	movzx  edx,al
c001af42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af46:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001af4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af57:	0f b6 d0             	movzx  edx,al
c001af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001af63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af6d:	8d 50 01             	lea    edx,[eax+0x1]
c001af70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af74:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001af7a:	0f b6 d0             	movzx  edx,al
c001af7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af81:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001af85:	83 c9 c0             	or     ecx,0xffffffc0
c001af88:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001af8c:	90                   	nop
c001af8d:	83 c4 0c             	add    esp,0xc
c001af90:	c3                   	ret    
c001af91:	90                   	nop

c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001af96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001af9b:	89 ca                	mov    edx,ecx
c001af9d:	c1 e0 10             	shl    eax,0x10
c001afa0:	81 e2 fc 00 00 00    	and    edx,0xfc
c001afa6:	09 d0                	or     eax,edx
c001afa8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001afad:	c1 e2 08             	shl    edx,0x8
c001afb0:	09 d0                	or     eax,edx
c001afb2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001afb7:	c1 e2 0b             	shl    edx,0xb
c001afba:	09 d0                	or     eax,edx
c001afbc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afc1:	0d 00 00 00 80       	or     eax,0x80000000
c001afc6:	ef                   	out    dx,eax
c001afc7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afcc:	ed                   	in     eax,dx
c001afcd:	83 e1 02             	and    ecx,0x2
c001afd0:	0f b6 c9             	movzx  ecx,cl
c001afd3:	c1 e1 03             	shl    ecx,0x3
c001afd6:	d3 e8                	shr    eax,cl
c001afd8:	c3                   	ret    
c001afd9:	90                   	nop

c001afda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001afda:	6a 00                	push   0x0
c001afdc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afe1:	50                   	push   eax
c001afe2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afe7:	50                   	push   eax
c001afe8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afed:	50                   	push   eax
c001afee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aff2:	e8 9b ff ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aff7:	83 c4 14             	add    esp,0x14
c001affa:	c3                   	ret    
c001affb:	90                   	nop

c001affc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001affc:	6a 0e                	push   0xe
c001affe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b003:	50                   	push   eax
c001b004:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b009:	50                   	push   eax
c001b00a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b00f:	50                   	push   eax
c001b010:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b014:	e8 79 ff ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b019:	83 c4 14             	add    esp,0x14
c001b01c:	0f b6 c0             	movzx  eax,al
c001b01f:	c3                   	ret    

c001b020 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b020:	55                   	push   ebp
c001b021:	57                   	push   edi
c001b022:	56                   	push   esi
c001b023:	53                   	push   ebx
c001b024:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b029:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b02e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b033:	6a 0a                	push   0xa
c001b035:	56                   	push   esi
c001b036:	55                   	push   ebp
c001b037:	57                   	push   edi
c001b038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b03c:	e8 51 ff ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b041:	6a 0a                	push   0xa
c001b043:	89 c3                	mov    ebx,eax
c001b045:	56                   	push   esi
c001b046:	0f b6 db             	movzx  ebx,bl
c001b049:	55                   	push   ebp
c001b04a:	57                   	push   edi
c001b04b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b04f:	e8 3e ff ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b054:	83 c4 28             	add    esp,0x28
c001b057:	25 00 ff 00 00       	and    eax,0xff00
c001b05c:	09 d8                	or     eax,ebx
c001b05e:	5b                   	pop    ebx
c001b05f:	5e                   	pop    esi
c001b060:	5f                   	pop    edi
c001b061:	5d                   	pop    ebp
c001b062:	c3                   	ret    
c001b063:	90                   	nop

c001b064 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b064:	6a 08                	push   0x8
c001b066:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b06b:	50                   	push   eax
c001b06c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b071:	50                   	push   eax
c001b072:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b077:	50                   	push   eax
c001b078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b07c:	e8 11 ff ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b081:	83 c4 14             	add    esp,0x14
c001b084:	0f b6 c4             	movzx  eax,ah
c001b087:	c3                   	ret    

c001b088 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b088:	6a 08                	push   0x8
c001b08a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b08f:	50                   	push   eax
c001b090:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b095:	50                   	push   eax
c001b096:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b09b:	50                   	push   eax
c001b09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0a0:	e8 ed fe ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0a5:	83 c4 14             	add    esp,0x14
c001b0a8:	c3                   	ret    
c001b0a9:	90                   	nop

c001b0aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b0aa:	6a 3c                	push   0x3c
c001b0ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0b1:	50                   	push   eax
c001b0b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0b7:	50                   	push   eax
c001b0b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0bd:	50                   	push   eax
c001b0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0c2:	e8 cb fe ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0c7:	83 c4 14             	add    esp,0x14
c001b0ca:	c3                   	ret    
c001b0cb:	90                   	nop

c001b0cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b0cc:	6a 18                	push   0x18
c001b0ce:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0d3:	50                   	push   eax
c001b0d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0d9:	50                   	push   eax
c001b0da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0df:	50                   	push   eax
c001b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0e4:	e8 a9 fe ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0e9:	83 c4 14             	add    esp,0x14
c001b0ec:	0f b6 c4             	movzx  eax,ah
c001b0ef:	c3                   	ret    

c001b0f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b0f0:	55                   	push   ebp
c001b0f1:	57                   	push   edi
c001b0f2:	56                   	push   esi
c001b0f3:	53                   	push   ebx
c001b0f4:	50                   	push   eax
c001b0f5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b0f9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b0fe:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b103:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b108:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b10f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b112:	83 c3 10             	add    ebx,0x10
c001b115:	0f b6 c0             	movzx  eax,al
c001b118:	0f b6 db             	movzx  ebx,bl
c001b11b:	50                   	push   eax
c001b11c:	51                   	push   ecx
c001b11d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b121:	57                   	push   edi
c001b122:	55                   	push   ebp
c001b123:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b127:	e8 66 fe ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b12c:	53                   	push   ebx
c001b12d:	89 c6                	mov    esi,eax
c001b12f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b133:	c1 e6 10             	shl    esi,0x10
c001b136:	51                   	push   ecx
c001b137:	57                   	push   edi
c001b138:	55                   	push   ebp
c001b139:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b13d:	e8 50 fe ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b142:	83 c4 2c             	add    esp,0x2c
c001b145:	0f b7 c0             	movzx  eax,ax
c001b148:	5b                   	pop    ebx
c001b149:	09 f0                	or     eax,esi
c001b14b:	5e                   	pop    esi
c001b14c:	5f                   	pop    edi
c001b14d:	5d                   	pop    ebp
c001b14e:	c3                   	ret    
c001b14f:	90                   	nop

c001b150 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b150:	53                   	push   ebx
c001b151:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b156:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b15b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b15f:	c1 e1 10             	shl    ecx,0x10
c001b162:	25 fc 00 00 00       	and    eax,0xfc
c001b167:	09 c1                	or     ecx,eax
c001b169:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b16e:	c1 e0 08             	shl    eax,0x8
c001b171:	09 c1                	or     ecx,eax
c001b173:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b178:	c1 e0 0b             	shl    eax,0xb
c001b17b:	09 c1                	or     ecx,eax
c001b17d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b183:	89 c8                	mov    eax,ecx
c001b185:	ef                   	out    dx,eax
c001b186:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b18b:	ed                   	in     eax,dx
c001b18c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b191:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b196:	74 0a                	je     c001b1a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b198:	0f b7 d8             	movzx  ebx,ax
c001b19b:	89 d0                	mov    eax,edx
c001b19d:	c1 e0 10             	shl    eax,0x10
c001b1a0:	eb 05                	jmp    c001b1a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b1a2:	66 31 c0             	xor    ax,ax
c001b1a5:	89 d3                	mov    ebx,edx
c001b1a7:	09 c3                	or     ebx,eax
c001b1a9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1ae:	89 c8                	mov    eax,ecx
c001b1b0:	ef                   	out    dx,eax
c001b1b1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b1b6:	89 d8                	mov    eax,ebx
c001b1b8:	ef                   	out    dx,eax
c001b1b9:	5b                   	pop    ebx
c001b1ba:	c3                   	ret    
c001b1bb:	90                   	nop

c001b1bc <PCI::checkBus(unsigned char)>:
c001b1bc:	56                   	push   esi
c001b1bd:	53                   	push   ebx
c001b1be:	31 db                	xor    ebx,ebx
c001b1c0:	51                   	push   ecx
c001b1c1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b1c6:	52                   	push   edx
c001b1c7:	53                   	push   ebx
c001b1c8:	43                   	inc    ebx
c001b1c9:	56                   	push   esi
c001b1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1ce:	e8 4d 03 00 00       	call   c001b520 <PCI::checkDevice(unsigned char, unsigned char)>
c001b1d3:	83 c4 10             	add    esp,0x10
c001b1d6:	83 fb 20             	cmp    ebx,0x20
c001b1d9:	75 eb                	jne    c001b1c6 <PCI::checkBus(unsigned char)+0xa>
c001b1db:	58                   	pop    eax
c001b1dc:	5b                   	pop    ebx
c001b1dd:	5e                   	pop    esi
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <PCI::foundDevice(PCIDeviceInfo)>:
c001b1e0:	55                   	push   ebp
c001b1e1:	57                   	push   edi
c001b1e2:	56                   	push   esi
c001b1e3:	53                   	push   ebx
c001b1e4:	83 ec 1c             	sub    esp,0x1c
c001b1e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1eb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b1f1:	0f 84 51 01 00 00    	je     c001b348 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b1f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b1fb:	66 81 f9 06 04       	cmp    cx,0x406
c001b200:	75 2c                	jne    c001b22e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b202:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b207:	50                   	push   eax
c001b208:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b20d:	50                   	push   eax
c001b20e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b213:	50                   	push   eax
c001b214:	56                   	push   esi
c001b215:	e8 b2 fe ff ff       	call   c001b0cc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b21a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b21e:	0f b6 c0             	movzx  eax,al
c001b221:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b225:	83 c4 2c             	add    esp,0x2c
c001b228:	5b                   	pop    ebx
c001b229:	5e                   	pop    esi
c001b22a:	5f                   	pop    edi
c001b22b:	5d                   	pop    ebp
c001b22c:	eb 8e                	jmp    c001b1bc <PCI::checkBus(unsigned char)>
c001b22e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b232:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b238:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b23c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b240:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b244:	88 d3                	mov    bl,dl
c001b246:	85 c0                	test   eax,eax
c001b248:	74 33                	je     c001b27d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b24a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b24d:	85 d2                	test   edx,edx
c001b24f:	74 28                	je     c001b279 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b251:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b257:	31 ef                	xor    edi,ebp
c001b259:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b25f:	75 18                	jne    c001b279 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b261:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b265:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b26b:	75 0c                	jne    c001b279 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b26d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b273:	0f 84 cf 00 00 00    	je     c001b348 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b279:	8b 00                	mov    eax,DWORD PTR [eax]
c001b27b:	eb c9                	jmp    c001b246 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b27d:	66 81 f9 01 06       	cmp    cx,0x601
c001b282:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b286:	75 18                	jne    c001b2a0 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	68 58 01 00 00       	push   0x158
c001b290:	e8 7b 71 ff ff       	call   c0012410 <operator new(unsigned long)>
c001b295:	59                   	pop    ecx
c001b296:	89 c5                	mov    ebp,eax
c001b298:	5f                   	pop    edi
c001b299:	68 8c a5 03 c0       	push   0xc003a58c
c001b29e:	eb 7d                	jmp    c001b31d <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b2a0:	66 81 f9 01 01       	cmp    cx,0x101
c001b2a5:	75 60                	jne    c001b307 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	68 70 02 00 00       	push   0x270
c001b2af:	e8 5c 71 ff ff       	call   c0012410 <operator new(unsigned long)>
c001b2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2b7:	89 c5                	mov    ebp,eax
c001b2b9:	e8 e0 07 00 00       	call   c001ba9e <IDE::IDE()>
c001b2be:	58                   	pop    eax
c001b2bf:	5a                   	pop    edx
c001b2c0:	55                   	push   ebp
c001b2c1:	56                   	push   esi
c001b2c2:	e8 53 84 ff ff       	call   c001371a <Device::addChild(Device*)>
c001b2c7:	83 ec 1c             	sub    esp,0x1c
c001b2ca:	b9 09 00 00 00       	mov    ecx,0x9
c001b2cf:	fc                   	cld    
c001b2d0:	89 e7                	mov    edi,esp
c001b2d2:	89 de                	mov    esi,ebx
c001b2d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2d6:	55                   	push   ebp
c001b2d7:	e8 18 83 ff ff       	call   c00135f4 <Device::preOpenPCI(PCIDeviceInfo)>
c001b2dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b2df:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b2e3:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b2eb:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b2f3:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b2fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b2fe:	83 c4 4c             	add    esp,0x4c
c001b301:	5b                   	pop    ebx
c001b302:	5e                   	pop    esi
c001b303:	5f                   	pop    edi
c001b304:	5d                   	pop    ebp
c001b305:	ff e0                	jmp    eax
c001b307:	83 ec 0c             	sub    esp,0xc
c001b30a:	68 58 01 00 00       	push   0x158
c001b30f:	e8 fc 70 ff ff       	call   c0012410 <operator new(unsigned long)>
c001b314:	59                   	pop    ecx
c001b315:	89 c5                	mov    ebp,eax
c001b317:	5f                   	pop    edi
c001b318:	68 ab a5 03 c0       	push   0xc003a5ab
c001b31d:	55                   	push   ebp
c001b31e:	e8 e3 86 ff ff       	call   c0013a06 <DriverlessDevice::DriverlessDevice(char const*)>
c001b323:	58                   	pop    eax
c001b324:	5a                   	pop    edx
c001b325:	55                   	push   ebp
c001b326:	56                   	push   esi
c001b327:	e8 ee 83 ff ff       	call   c001371a <Device::addChild(Device*)>
c001b32c:	b9 09 00 00 00       	mov    ecx,0x9
c001b331:	fc                   	cld    
c001b332:	89 df                	mov    edi,ebx
c001b334:	89 de                	mov    esi,ebx
c001b336:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b338:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b33c:	83 c4 2c             	add    esp,0x2c
c001b33f:	5b                   	pop    ebx
c001b340:	5e                   	pop    esi
c001b341:	5f                   	pop    edi
c001b342:	5d                   	pop    ebp
c001b343:	e9 ac 82 ff ff       	jmp    c00135f4 <Device::preOpenPCI(PCIDeviceInfo)>
c001b348:	83 c4 1c             	add    esp,0x1c
c001b34b:	5b                   	pop    ebx
c001b34c:	5e                   	pop    esi
c001b34d:	5f                   	pop    edi
c001b34e:	5d                   	pop    ebp
c001b34f:	c3                   	ret    

c001b350 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b350:	55                   	push   ebp
c001b351:	57                   	push   edi
c001b352:	56                   	push   esi
c001b353:	53                   	push   ebx
c001b354:	83 ec 5c             	sub    esp,0x5c
c001b357:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b35b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b35f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b363:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b368:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b36c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b370:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b379:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b37e:	6a 0c                	push   0xc
c001b380:	55                   	push   ebp
c001b381:	53                   	push   ebx
c001b382:	57                   	push   edi
c001b383:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b38a:	e8 03 fc ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b38f:	83 c4 0c             	add    esp,0xc
c001b392:	6a 00                	push   0x0
c001b394:	68 c5 a5 03 c0       	push   0xc003a5c5
c001b399:	e8 c2 1a ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001b39e:	55                   	push   ebp
c001b39f:	53                   	push   ebx
c001b3a0:	57                   	push   edi
c001b3a1:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3a8:	e8 73 fc ff ff       	call   c001b020 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b3ad:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b3b2:	83 c4 20             	add    esp,0x20
c001b3b5:	55                   	push   ebp
c001b3b6:	53                   	push   ebx
c001b3b7:	57                   	push   edi
c001b3b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b3bc:	e8 e9 fc ff ff       	call   c001b0aa <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b3c1:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b3c8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b3cc:	55                   	push   ebp
c001b3cd:	53                   	push   ebx
c001b3ce:	57                   	push   edi
c001b3cf:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3d6:	e8 b7 fb ff ff       	call   c001af92 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3db:	0f b6 c4             	movzx  eax,ah
c001b3de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b3e2:	83 c4 18             	add    esp,0x18
c001b3e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b3e9:	68 d9 a5 03 c0       	push   0xc003a5d9
c001b3ee:	e8 6d 1a ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001b3f3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b3f7:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b3fb:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001b400:	83 c4 10             	add    esp,0x10
c001b403:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b409:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b410:	74 6c                	je     c001b47e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b412:	31 f6                	xor    esi,esi
c001b414:	8b 15 08 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b908
c001b41a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b420:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b426:	7e 56                	jle    c001b47e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b428:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b42b:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b432:	39 cb                	cmp    ebx,ecx
c001b434:	75 45                	jne    c001b47b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b436:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b43d:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b441:	75 38                	jne    c001b47b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b443:	83 ec 0c             	sub    esp,0xc
c001b446:	68 e8 a5 03 c0       	push   0xc003a5e8
c001b44b:	e8 10 1a ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001b450:	8b 15 08 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b908
c001b456:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b45c:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b464:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b468:	52                   	push   edx
c001b469:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b46d:	53                   	push   ebx
c001b46e:	68 0d a6 03 c0       	push   0xc003a60d
c001b473:	e8 e8 19 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001b478:	83 c4 20             	add    esp,0x20
c001b47b:	46                   	inc    esi
c001b47c:	eb 96                	jmp    c001b414 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b47e:	31 d2                	xor    edx,edx
c001b480:	83 ec 0c             	sub    esp,0xc
c001b483:	55                   	push   ebp
c001b484:	53                   	push   ebx
c001b485:	57                   	push   edi
c001b486:	52                   	push   edx
c001b487:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b48b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b492:	e8 59 fc ff ff       	call   c001b0f0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b497:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b49b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b49f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b4a3:	42                   	inc    edx
c001b4a4:	83 c4 20             	add    esp,0x20
c001b4a7:	83 fa 06             	cmp    edx,0x6
c001b4aa:	75 d4                	jne    c001b480 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b4ac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b4b0:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b4b4:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b4b8:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b4bc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b4c0:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b4c4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b4c9:	86 e0                	xchg   al,ah
c001b4cb:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b4d0:	55                   	push   ebp
c001b4d1:	53                   	push   ebx
c001b4d2:	57                   	push   edi
c001b4d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b4d7:	e8 88 fb ff ff       	call   c001b064 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b4dc:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b4e0:	55                   	push   ebp
c001b4e1:	53                   	push   ebx
c001b4e2:	57                   	push   edi
c001b4e3:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b4ea:	e8 eb fa ff ff       	call   c001afda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b4ef:	83 ec 0c             	sub    esp,0xc
c001b4f2:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b4f7:	b9 09 00 00 00       	mov    ecx,0x9
c001b4fc:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b500:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b504:	fc                   	cld    
c001b505:	89 e7                	mov    edi,esp
c001b507:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b509:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b510:	e8 cb fc ff ff       	call   c001b1e0 <PCI::foundDevice(PCIDeviceInfo)>
c001b515:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b51b:	5b                   	pop    ebx
c001b51c:	5e                   	pop    esi
c001b51d:	5f                   	pop    edi
c001b51e:	5d                   	pop    ebp
c001b51f:	c3                   	ret    

c001b520 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b520:	55                   	push   ebp
c001b521:	57                   	push   edi
c001b522:	56                   	push   esi
c001b523:	53                   	push   ebx
c001b524:	83 ec 0c             	sub    esp,0xc
c001b527:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b52b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b530:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b535:	6a 00                	push   0x0
c001b537:	56                   	push   esi
c001b538:	57                   	push   edi
c001b539:	55                   	push   ebp
c001b53a:	e8 9b fa ff ff       	call   c001afda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b53f:	6a 00                	push   0x0
c001b541:	56                   	push   esi
c001b542:	57                   	push   edi
c001b543:	55                   	push   ebp
c001b544:	e8 07 fe ff ff       	call   c001b350 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b549:	83 c4 20             	add    esp,0x20
c001b54c:	6a 00                	push   0x0
c001b54e:	56                   	push   esi
c001b54f:	57                   	push   edi
c001b550:	55                   	push   ebp
c001b551:	e8 a6 fa ff ff       	call   c001affc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b556:	83 c4 10             	add    esp,0x10
c001b559:	84 c0                	test   al,al
c001b55b:	79 27                	jns    c001b584 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b55d:	bb 01 00 00 00       	mov    ebx,0x1
c001b562:	53                   	push   ebx
c001b563:	56                   	push   esi
c001b564:	57                   	push   edi
c001b565:	55                   	push   ebp
c001b566:	e8 6f fa ff ff       	call   c001afda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b56b:	83 c4 10             	add    esp,0x10
c001b56e:	66 40                	inc    ax
c001b570:	74 0c                	je     c001b57e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b572:	53                   	push   ebx
c001b573:	56                   	push   esi
c001b574:	57                   	push   edi
c001b575:	55                   	push   ebp
c001b576:	e8 d5 fd ff ff       	call   c001b350 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b57b:	83 c4 10             	add    esp,0x10
c001b57e:	43                   	inc    ebx
c001b57f:	83 fb 08             	cmp    ebx,0x8
c001b582:	75 de                	jne    c001b562 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b584:	83 c4 0c             	add    esp,0xc
c001b587:	5b                   	pop    ebx
c001b588:	5e                   	pop    esi
c001b589:	5f                   	pop    edi
c001b58a:	5d                   	pop    ebp
c001b58b:	c3                   	ret    

c001b58c <PCI::detect()>:
c001b58c:	56                   	push   esi
c001b58d:	53                   	push   ebx
c001b58e:	53                   	push   ebx
c001b58f:	31 db                	xor    ebx,ebx
c001b591:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b595:	6a 00                	push   0x0
c001b597:	6a 00                	push   0x0
c001b599:	6a 00                	push   0x0
c001b59b:	56                   	push   esi
c001b59c:	e8 5b fa ff ff       	call   c001affc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5a1:	83 c4 10             	add    esp,0x10
c001b5a4:	a8 80                	test   al,0x80
c001b5a6:	75 21                	jne    c001b5c9 <PCI::detect()+0x3d>
c001b5a8:	51                   	push   ecx
c001b5a9:	51                   	push   ecx
c001b5aa:	6a 00                	push   0x0
c001b5ac:	56                   	push   esi
c001b5ad:	e8 0a fc ff ff       	call   c001b1bc <PCI::checkBus(unsigned char)>
c001b5b2:	83 c4 10             	add    esp,0x10
c001b5b5:	eb 24                	jmp    c001b5db <PCI::detect()+0x4f>
c001b5b7:	52                   	push   edx
c001b5b8:	52                   	push   edx
c001b5b9:	53                   	push   ebx
c001b5ba:	43                   	inc    ebx
c001b5bb:	56                   	push   esi
c001b5bc:	e8 fb fb ff ff       	call   c001b1bc <PCI::checkBus(unsigned char)>
c001b5c1:	83 c4 10             	add    esp,0x10
c001b5c4:	83 fb 08             	cmp    ebx,0x8
c001b5c7:	74 12                	je     c001b5db <PCI::detect()+0x4f>
c001b5c9:	53                   	push   ebx
c001b5ca:	6a 00                	push   0x0
c001b5cc:	6a 00                	push   0x0
c001b5ce:	56                   	push   esi
c001b5cf:	e8 06 fa ff ff       	call   c001afda <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5d4:	83 c4 10             	add    esp,0x10
c001b5d7:	66 40                	inc    ax
c001b5d9:	74 dc                	je     c001b5b7 <PCI::detect()+0x2b>
c001b5db:	58                   	pop    eax
c001b5dc:	5b                   	pop    ebx
c001b5dd:	5e                   	pop    esi
c001b5de:	c3                   	ret    
c001b5df:	90                   	nop

c001b5e0 <RTC::open(int, int, void*)>:
c001b5e0:	31 c0                	xor    eax,eax
c001b5e2:	c3                   	ret    
c001b5e3:	90                   	nop

c001b5e4 <RTC::close(int, int, void*)>:
c001b5e4:	31 c0                	xor    eax,eax
c001b5e6:	c3                   	ret    
c001b5e7:	90                   	nop

c001b5e8 <RTC::timeInSecondsUTC()>:
c001b5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b5f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5f8:	c3                   	ret    
c001b5f9:	90                   	nop

c001b5fa <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b5fa:	31 c0                	xor    eax,eax
c001b5fc:	c3                   	ret    
c001b5fd:	90                   	nop

c001b5fe <RTC::timeInDatetimeUTC()>:
c001b5fe:	53                   	push   ebx
c001b5ff:	83 ec 14             	sub    esp,0x14
c001b602:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b60a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b60c:	50                   	push   eax
c001b60d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b610:	83 c4 0c             	add    esp,0xc
c001b613:	52                   	push   edx
c001b614:	50                   	push   eax
c001b615:	53                   	push   ebx
c001b616:	e8 13 7e ff ff       	call   c001342e <secondsToDatetime(unsigned long long)>
c001b61b:	89 d8                	mov    eax,ebx
c001b61d:	83 c4 14             	add    esp,0x14
c001b620:	5b                   	pop    ebx
c001b621:	c2 04 00             	ret    0x4

c001b624 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b624:	56                   	push   esi
c001b625:	53                   	push   ebx
c001b626:	83 ec 14             	sub    esp,0x14
c001b629:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b62d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b62f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b632:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b636:	52                   	push   edx
c001b637:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b63b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b63f:	50                   	push   eax
c001b640:	e8 e9 7d ff ff       	call   c001342e <secondsToDatetime(unsigned long long)>
c001b645:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b649:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b64d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b651:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b655:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b659:	89 f0                	mov    eax,esi
c001b65b:	83 c4 20             	add    esp,0x20
c001b65e:	5b                   	pop    ebx
c001b65f:	5e                   	pop    esi
c001b660:	ff e0                	jmp    eax

c001b662 <RTC::~RTC()>:
c001b662:	83 ec 0c             	sub    esp,0xc
c001b665:	ba 88 a6 03 c0       	mov    edx,0xc003a688
c001b66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66e:	89 10                	mov    DWORD PTR [eax],edx
c001b670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b674:	83 ec 0c             	sub    esp,0xc
c001b677:	50                   	push   eax
c001b678:	e8 3b 7b ff ff       	call   c00131b8 <Clock::~Clock()>
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	90                   	nop
c001b681:	83 c4 0c             	add    esp,0xc
c001b684:	c3                   	ret    
c001b685:	90                   	nop

c001b686 <RTC::~RTC()>:
c001b686:	83 ec 0c             	sub    esp,0xc
c001b689:	83 ec 0c             	sub    esp,0xc
c001b68c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b690:	e8 cd ff ff ff       	call   c001b662 <RTC::~RTC()>
c001b695:	83 c4 10             	add    esp,0x10
c001b698:	83 ec 08             	sub    esp,0x8
c001b69b:	68 60 01 00 00       	push   0x160
c001b6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6a4:	e8 76 6d ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001b6a9:	83 c4 10             	add    esp,0x10
c001b6ac:	83 c4 0c             	add    esp,0xc
c001b6af:	c3                   	ret    

c001b6b0 <RTC::get_update_in_progress_flag()>:
c001b6b0:	83 ec 14             	sub    esp,0x14
c001b6b3:	6a 0a                	push   0xa
c001b6b5:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b6bb:	e8 98 ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b6c0:	83 c4 1c             	add    esp,0x1c
c001b6c3:	c0 e8 07             	shr    al,0x7
c001b6c6:	c3                   	ret    
c001b6c7:	90                   	nop

c001b6c8 <RTC::completeRTCRefresh()>:
c001b6c8:	55                   	push   ebp
c001b6c9:	57                   	push   edi
c001b6ca:	56                   	push   esi
c001b6cb:	53                   	push   ebx
c001b6cc:	83 ec 2c             	sub    esp,0x2c
c001b6cf:	8b 35 d0 c2 03 c0    	mov    esi,DWORD PTR ds:0xc003c2d0
c001b6d5:	8b 3d d4 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c2d4
c001b6db:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b6e1:	83 d7 00             	adc    edi,0x0
c001b6e4:	83 ec 0c             	sub    esp,0xc
c001b6e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b6eb:	e8 c0 ff ff ff       	call   c001b6b0 <RTC::get_update_in_progress_flag()>
c001b6f0:	83 c4 10             	add    esp,0x10
c001b6f3:	84 c0                	test   al,al
c001b6f5:	74 10                	je     c001b707 <RTC::completeRTCRefresh()+0x3f>
c001b6f7:	3b 35 d0 c2 03 c0    	cmp    esi,DWORD PTR ds:0xc003c2d0
c001b6fd:	89 f8                	mov    eax,edi
c001b6ff:	1b 05 d4 c2 03 c0    	sbb    eax,DWORD PTR ds:0xc003c2d4
c001b705:	73 dd                	jae    c001b6e4 <RTC::completeRTCRefresh()+0x1c>
c001b707:	55                   	push   ebp
c001b708:	55                   	push   ebp
c001b709:	6a 00                	push   0x0
c001b70b:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b711:	e8 42 ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b716:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b71a:	58                   	pop    eax
c001b71b:	5a                   	pop    edx
c001b71c:	6a 02                	push   0x2
c001b71e:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b724:	e8 2f ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b729:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b72d:	59                   	pop    ecx
c001b72e:	5b                   	pop    ebx
c001b72f:	6a 04                	push   0x4
c001b731:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b737:	e8 1c ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b73c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b740:	5e                   	pop    esi
c001b741:	5f                   	pop    edi
c001b742:	6a 07                	push   0x7
c001b744:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b74a:	e8 09 ff fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b74f:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b753:	5d                   	pop    ebp
c001b754:	58                   	pop    eax
c001b755:	6a 08                	push   0x8
c001b757:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b75d:	e8 f6 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b762:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b766:	58                   	pop    eax
c001b767:	5a                   	pop    edx
c001b768:	6a 09                	push   0x9
c001b76a:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b770:	e8 e3 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b775:	83 c4 10             	add    esp,0x10
c001b778:	0f b6 e8             	movzx  ebp,al
c001b77b:	8b 35 d0 c2 03 c0    	mov    esi,DWORD PTR ds:0xc003c2d0
c001b781:	8b 3d d4 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c2d4
c001b787:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b78d:	83 d7 00             	adc    edi,0x0
c001b790:	83 ec 0c             	sub    esp,0xc
c001b793:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b797:	e8 14 ff ff ff       	call   c001b6b0 <RTC::get_update_in_progress_flag()>
c001b79c:	83 c4 10             	add    esp,0x10
c001b79f:	84 c0                	test   al,al
c001b7a1:	74 10                	je     c001b7b3 <RTC::completeRTCRefresh()+0xeb>
c001b7a3:	3b 35 d0 c2 03 c0    	cmp    esi,DWORD PTR ds:0xc003c2d0
c001b7a9:	89 f8                	mov    eax,edi
c001b7ab:	1b 05 d4 c2 03 c0    	sbb    eax,DWORD PTR ds:0xc003c2d4
c001b7b1:	73 dd                	jae    c001b790 <RTC::completeRTCRefresh()+0xc8>
c001b7b3:	50                   	push   eax
c001b7b4:	50                   	push   eax
c001b7b5:	6a 00                	push   0x0
c001b7b7:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b7bd:	e8 96 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7c2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b7c6:	58                   	pop    eax
c001b7c7:	5a                   	pop    edx
c001b7c8:	6a 02                	push   0x2
c001b7ca:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b7d0:	e8 83 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b7d9:	59                   	pop    ecx
c001b7da:	5b                   	pop    ebx
c001b7db:	6a 04                	push   0x4
c001b7dd:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b7e3:	e8 70 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7e8:	5e                   	pop    esi
c001b7e9:	88 c3                	mov    bl,al
c001b7eb:	5f                   	pop    edi
c001b7ec:	6a 07                	push   0x7
c001b7ee:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b7f4:	e8 5f fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7f9:	89 c6                	mov    esi,eax
c001b7fb:	58                   	pop    eax
c001b7fc:	5a                   	pop    edx
c001b7fd:	6a 08                	push   0x8
c001b7ff:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b805:	e8 4e fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b80a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b80e:	59                   	pop    ecx
c001b80f:	5f                   	pop    edi
c001b810:	6a 09                	push   0x9
c001b812:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b818:	e8 3b fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b81d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b821:	0f b6 f8             	movzx  edi,al
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b82a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b82e:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b832:	89 f1                	mov    ecx,esi
c001b834:	0f 94 c0             	sete   al
c001b837:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b83b:	0f 94 c2             	sete   dl
c001b83e:	21 d0                	and    eax,edx
c001b840:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b844:	0f 94 c2             	sete   dl
c001b847:	21 c2                	and    edx,eax
c001b849:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b84d:	0f 94 c0             	sete   al
c001b850:	21 d0                	and    eax,edx
c001b852:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b856:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b85a:	0f 94 c1             	sete   cl
c001b85d:	84 c8                	test   al,cl
c001b85f:	75 28                	jne    c001b889 <RTC::completeRTCRefresh()+0x1c1>
c001b861:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b865:	89 fd                	mov    ebp,edi
c001b867:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b86b:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b86f:	89 f0                	mov    eax,esi
c001b871:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b875:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b879:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b87d:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b880:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b884:	e9 f2 fe ff ff       	jmp    c001b77b <RTC::completeRTCRefresh()+0xb3>
c001b889:	39 fd                	cmp    ebp,edi
c001b88b:	75 d4                	jne    c001b861 <RTC::completeRTCRefresh()+0x199>
c001b88d:	55                   	push   ebp
c001b88e:	55                   	push   ebp
c001b88f:	6a 0b                	push   0xb
c001b891:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b897:	e8 bc fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b89c:	83 c4 10             	add    esp,0x10
c001b89f:	89 c5                	mov    ebp,eax
c001b8a1:	a8 04                	test   al,0x4
c001b8a3:	75 75                	jne    c001b91a <RTC::completeRTCRefresh()+0x252>
c001b8a5:	b1 0a                	mov    cl,0xa
c001b8a7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b8aa:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b8ad:	83 e2 0f             	and    edx,0xf
c001b8b0:	c0 e8 04             	shr    al,0x4
c001b8b3:	c1 ef 04             	shr    edi,0x4
c001b8b6:	f6 e1                	mul    cl
c001b8b8:	6b ff 0a             	imul   edi,edi,0xa
c001b8bb:	01 d0                	add    eax,edx
c001b8bd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b8c1:	88 04 24             	mov    BYTE PTR [esp],al
c001b8c4:	83 e2 0f             	and    edx,0xf
c001b8c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b8cb:	c0 e8 04             	shr    al,0x4
c001b8ce:	f6 e1                	mul    cl
c001b8d0:	01 d0                	add    eax,edx
c001b8d2:	88 da                	mov    dl,bl
c001b8d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b8d8:	83 e2 0f             	and    edx,0xf
c001b8db:	88 d8                	mov    al,bl
c001b8dd:	83 e3 80             	and    ebx,0xffffff80
c001b8e0:	c0 e8 04             	shr    al,0x4
c001b8e3:	83 e0 07             	and    eax,0x7
c001b8e6:	f6 e1                	mul    cl
c001b8e8:	01 d0                	add    eax,edx
c001b8ea:	89 f2                	mov    edx,esi
c001b8ec:	09 c3                	or     ebx,eax
c001b8ee:	83 e2 0f             	and    edx,0xf
c001b8f1:	89 f0                	mov    eax,esi
c001b8f3:	c0 e8 04             	shr    al,0x4
c001b8f6:	f6 e1                	mul    cl
c001b8f8:	8d 34 02             	lea    esi,[edx+eax*1]
c001b8fb:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b8ff:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b903:	83 e2 0f             	and    edx,0xf
c001b906:	c0 e8 04             	shr    al,0x4
c001b909:	f6 e1                	mul    cl
c001b90b:	01 d0                	add    eax,edx
c001b90d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b911:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b915:	83 e0 0f             	and    eax,0xf
c001b918:	01 c7                	add    edi,eax
c001b91a:	83 e5 02             	and    ebp,0x2
c001b91d:	75 14                	jne    c001b933 <RTC::completeRTCRefresh()+0x26b>
c001b91f:	84 db                	test   bl,bl
c001b921:	79 10                	jns    c001b933 <RTC::completeRTCRefresh()+0x26b>
c001b923:	83 e3 7f             	and    ebx,0x7f
c001b926:	b9 18 00 00 00       	mov    ecx,0x18
c001b92b:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b92e:	99                   	cdq    
c001b92f:	f7 f9                	idiv   ecx
c001b931:	88 d3                	mov    bl,dl
c001b933:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b939:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b93f:	77 06                	ja     c001b947 <RTC::completeRTCRefresh()+0x27f>
c001b941:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b947:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b94b:	31 d2                	xor    edx,edx
c001b94d:	c1 e1 10             	shl    ecx,0x10
c001b950:	89 d7                	mov    edi,edx
c001b952:	c1 e5 10             	shl    ebp,0x10
c001b955:	31 c0                	xor    eax,eax
c001b957:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b95d:	09 cf                	or     edi,ecx
c001b95f:	89 f1                	mov    ecx,esi
c001b961:	89 fa                	mov    edx,edi
c001b963:	88 c8                	mov    al,cl
c001b965:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001b969:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001b96d:	88 da                	mov    dl,bl
c001b96f:	0f b7 c8             	movzx  ecx,ax
c001b972:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b976:	09 e9                	or     ecx,ebp
c001b978:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b97b:	0f b6 db             	movzx  ebx,bl
c001b97e:	50                   	push   eax
c001b97f:	50                   	push   eax
c001b980:	53                   	push   ebx
c001b981:	68 54 a6 03 c0       	push   0xc003a654
c001b986:	e8 d5 14 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001b98b:	5a                   	pop    edx
c001b98c:	59                   	pop    ecx
c001b98d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b991:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b995:	52                   	push   edx
c001b996:	50                   	push   eax
c001b997:	e8 0b 79 ff ff       	call   c00132a7 <datetimeToSeconds(datetime_t)>
c001b99c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001b9a0:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001b9a6:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001b9ac:	83 c4 3c             	add    esp,0x3c
c001b9af:	5b                   	pop    ebx
c001b9b0:	5e                   	pop    esi
c001b9b1:	5f                   	pop    edi
c001b9b2:	5d                   	pop    ebp
c001b9b3:	c3                   	ret    

c001b9b4 <rtcIRQHandler(regs*, void*)>:
c001b9b4:	53                   	push   ebx
c001b9b5:	83 ec 10             	sub    esp,0x10
c001b9b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9bc:	6a 0c                	push   0xc
c001b9be:	ff 35 08 b9 03 c0    	push   DWORD PTR ds:0xc003b908
c001b9c4:	e8 8f fc fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	84 c0                	test   al,al
c001b9ce:	79 24                	jns    c001b9f4 <rtcIRQHandler(regs*, void*)+0x40>
c001b9d0:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b9d7:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b9de:	66 ff 05 e0 cf 03 c0 	inc    WORD PTR ds:0xc003cfe0
c001b9e5:	75 0d                	jne    c001b9f4 <rtcIRQHandler(regs*, void*)+0x40>
c001b9e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b9eb:	83 c4 08             	add    esp,0x8
c001b9ee:	5b                   	pop    ebx
c001b9ef:	e9 d4 fc ff ff       	jmp    c001b6c8 <RTC::completeRTCRefresh()>
c001b9f4:	83 c4 08             	add    esp,0x8
c001b9f7:	5b                   	pop    ebx
c001b9f8:	c3                   	ret    
c001b9f9:	90                   	nop

c001b9fa <RTC::RTC()>:
c001b9fa:	83 ec 1c             	sub    esp,0x1c
c001b9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba01:	83 ec 08             	sub    esp,0x8
c001ba04:	68 6a a6 03 c0       	push   0xc003a66a
c001ba09:	50                   	push   eax
c001ba0a:	e8 73 77 ff ff       	call   c0013182 <Clock::Clock(char const*)>
c001ba0f:	83 c4 10             	add    esp,0x10
c001ba12:	ba 88 a6 03 c0       	mov    edx,0xc003a688
c001ba17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba1b:	89 10                	mov    DWORD PTR [eax],edx
c001ba1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba21:	83 ec 0c             	sub    esp,0xc
c001ba24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba28:	6a 01                	push   0x1
c001ba2a:	68 b4 b9 01 c0       	push   0xc001b9b4
c001ba2f:	6a 08                	push   0x8
c001ba31:	50                   	push   eax
c001ba32:	e8 37 7c ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba37:	83 c4 20             	add    esp,0x20
c001ba3a:	89 c2                	mov    edx,eax
c001ba3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba40:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba46:	e8 9a 28 ff ff       	call   c000e2e5 <disableIRQs()>
c001ba4b:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001ba50:	83 ec 08             	sub    esp,0x8
c001ba53:	6a 0b                	push   0xb
c001ba55:	50                   	push   eax
c001ba56:	e8 fd fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ba62:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001ba67:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ba6b:	83 ca 10             	or     edx,0x10
c001ba6e:	0f b6 d2             	movzx  edx,dl
c001ba71:	83 ec 04             	sub    esp,0x4
c001ba74:	52                   	push   edx
c001ba75:	6a 0b                	push   0xb
c001ba77:	50                   	push   eax
c001ba78:	e8 e3 fc fe ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ba87:	e8 3c fc ff ff       	call   c001b6c8 <RTC::completeRTCRefresh()>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	e8 5f 28 ff ff       	call   c000e2f3 <enableIRQs()>
c001ba94:	90                   	nop
c001ba95:	83 c4 1c             	add    esp,0x1c
c001ba98:	c3                   	ret    
c001ba99:	90                   	nop

c001ba9a <IDE::close(int, int, void*)>:
c001ba9a:	83 c8 ff             	or     eax,0xffffffff
c001ba9d:	c3                   	ret    

c001ba9e <IDE::IDE()>:
c001ba9e:	83 ec 0c             	sub    esp,0xc
c001baa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa5:	83 ec 08             	sub    esp,0x8
c001baa8:	68 bc a6 03 c0       	push   0xc003a6bc
c001baad:	50                   	push   eax
c001baae:	e8 e9 7f ff ff       	call   c0013a9c <HardDiskController::HardDiskController(char const*)>
c001bab3:	83 c4 10             	add    esp,0x10
c001bab6:	ba fc a8 03 c0       	mov    edx,0xc003a8fc
c001babb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001babf:	89 10                	mov    DWORD PTR [eax],edx
c001bac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bacc:	90                   	nop
c001bacd:	83 c4 0c             	add    esp,0xc
c001bad0:	c3                   	ret    
c001bad1:	90                   	nop

c001bad2 <IDE::prepareInterrupt(unsigned char)>:
c001bad2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bad7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001badb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bae3:	c3                   	ret    

c001bae4 <selectDrive(unsigned char, unsigned char)>:
c001bae4:	c3                   	ret    
c001bae5:	90                   	nop

c001bae6 <IDE::getBase(unsigned char)>:
c001bae6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001baeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baef:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001baf7:	c3                   	ret    

c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001baf8:	55                   	push   ebp
c001baf9:	57                   	push   edi
c001bafa:	56                   	push   esi
c001bafb:	53                   	push   ebx
c001bafc:	83 ec 1c             	sub    esp,0x1c
c001baff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb07:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bb0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bb0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bb12:	80 f9 03             	cmp    cl,0x3
c001bb15:	77 51                	ja     c001bb68 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bb17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb1b:	0f b6 f2             	movzx  esi,dl
c001bb1e:	0f b6 db             	movzx  ebx,bl
c001bb21:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bb24:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bb28:	83 ca 80             	or     edx,0xffffff80
c001bb2b:	0f b6 d2             	movzx  edx,dl
c001bb2e:	52                   	push   edx
c001bb2f:	6a 0c                	push   0xc
c001bb31:	56                   	push   esi
c001bb32:	57                   	push   edi
c001bb33:	e8 c0 ff ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb38:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bb3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb41:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bb45:	ee                   	out    dx,al
c001bb46:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bb4b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bb4f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bb53:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bb57:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bb5f:	83 c4 2c             	add    esp,0x2c
c001bb62:	5b                   	pop    ebx
c001bb63:	5e                   	pop    esi
c001bb64:	5f                   	pop    edi
c001bb65:	5d                   	pop    ebp
c001bb66:	eb 90                	jmp    c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb68:	80 fb 07             	cmp    bl,0x7
c001bb6b:	77 12                	ja     c001bb7f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bb6d:	0f b6 d2             	movzx  edx,dl
c001bb70:	0f b6 db             	movzx  ebx,bl
c001bb73:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bb7b:	89 da                	mov    edx,ebx
c001bb7d:	eb 2f                	jmp    c001bbae <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bb7f:	80 fb 0d             	cmp    bl,0xd
c001bb82:	77 13                	ja     c001bb97 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bb84:	0f b6 d2             	movzx  edx,dl
c001bb87:	0f b6 db             	movzx  ebx,bl
c001bb8a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bb91:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bb95:	eb 17                	jmp    c001bbae <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bb97:	80 fb 15             	cmp    bl,0x15
c001bb9a:	77 13                	ja     c001bbaf <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bb9c:	0f b6 d2             	movzx  edx,dl
c001bb9f:	0f b6 db             	movzx  ebx,bl
c001bba2:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bbaa:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bbae:	ee                   	out    dx,al
c001bbaf:	83 c4 1c             	add    esp,0x1c
c001bbb2:	5b                   	pop    ebx
c001bbb3:	5e                   	pop    esi
c001bbb4:	5f                   	pop    edi
c001bbb5:	5d                   	pop    ebp
c001bbb6:	c3                   	ret    
c001bbb7:	90                   	nop

c001bbb8 <IDE::read(unsigned char, unsigned char)>:
c001bbb8:	55                   	push   ebp
c001bbb9:	57                   	push   edi
c001bbba:	56                   	push   esi
c001bbbb:	53                   	push   ebx
c001bbbc:	83 ec 1c             	sub    esp,0x1c
c001bbbf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bbc3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbc7:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bbca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbce:	3c 03                	cmp    al,0x3
c001bbd0:	77 43                	ja     c001bc15 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bbd2:	0f b6 f2             	movzx  esi,dl
c001bbd5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bbd8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bbdc:	83 c8 80             	or     eax,0xffffff80
c001bbdf:	0f b6 c0             	movzx  eax,al
c001bbe2:	50                   	push   eax
c001bbe3:	6a 0c                	push   0xc
c001bbe5:	56                   	push   esi
c001bbe6:	57                   	push   edi
c001bbe7:	e8 0c ff ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbec:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bbf1:	0f b6 c3             	movzx  eax,bl
c001bbf4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bbf8:	ec                   	in     al,dx
c001bbf9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bbfd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bc02:	52                   	push   edx
c001bc03:	6a 0c                	push   0xc
c001bc05:	56                   	push   esi
c001bc06:	57                   	push   edi
c001bc07:	e8 ec fe ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc0c:	83 c4 20             	add    esp,0x20
c001bc0f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bc13:	eb 49                	jmp    c001bc5e <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc15:	80 fb 07             	cmp    bl,0x7
c001bc18:	77 12                	ja     c001bc2c <IDE::read(unsigned char, unsigned char)+0x74>
c001bc1a:	0f b6 d2             	movzx  edx,dl
c001bc1d:	0f b6 c3             	movzx  eax,bl
c001bc20:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bc28:	89 c2                	mov    edx,eax
c001bc2a:	eb 31                	jmp    c001bc5d <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc2c:	80 fb 0d             	cmp    bl,0xd
c001bc2f:	77 13                	ja     c001bc44 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bc31:	0f b6 d2             	movzx  edx,dl
c001bc34:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bc3b:	0f b6 d3             	movzx  edx,bl
c001bc3e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bc42:	eb 19                	jmp    c001bc5d <IDE::read(unsigned char, unsigned char)+0xa5>
c001bc44:	31 c0                	xor    eax,eax
c001bc46:	80 fb 15             	cmp    bl,0x15
c001bc49:	77 13                	ja     c001bc5e <IDE::read(unsigned char, unsigned char)+0xa6>
c001bc4b:	0f b6 d2             	movzx  edx,dl
c001bc4e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bc56:	0f b6 d3             	movzx  edx,bl
c001bc59:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bc5d:	ec                   	in     al,dx
c001bc5e:	83 c4 1c             	add    esp,0x1c
c001bc61:	5b                   	pop    ebx
c001bc62:	5e                   	pop    esi
c001bc63:	5f                   	pop    edi
c001bc64:	5d                   	pop    ebp
c001bc65:	c3                   	ret    

c001bc66 <IDE::waitInterrupt(unsigned char)>:
c001bc66:	55                   	push   ebp
c001bc67:	57                   	push   edi
c001bc68:	56                   	push   esi
c001bc69:	53                   	push   ebx
c001bc6a:	31 db                	xor    ebx,ebx
c001bc6c:	83 ec 0c             	sub    esp,0xc
c001bc6f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bc73:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bc78:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bc80:	89 e8                	mov    eax,ebp
c001bc82:	84 c0                	test   al,al
c001bc84:	75 34                	jne    c001bcba <IDE::waitInterrupt(unsigned char)+0x54>
c001bc86:	52                   	push   edx
c001bc87:	6a 0c                	push   0xc
c001bc89:	56                   	push   esi
c001bc8a:	57                   	push   edi
c001bc8b:	e8 28 ff ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	a8 01                	test   al,0x1
c001bc95:	75 2b                	jne    c001bcc2 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bc97:	f6 c3 04             	test   bl,0x4
c001bc9a:	75 16                	jne    c001bcb2 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bc9c:	83 fb 32             	cmp    ebx,0x32
c001bc9f:	7e 11                	jle    c001bcb2 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bca1:	50                   	push   eax
c001bca2:	50                   	push   eax
c001bca3:	6a 00                	push   0x0
c001bca5:	68 80 96 98 00       	push   0x989680
c001bcaa:	e8 0c 2d ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c001bcaf:	83 c4 10             	add    esp,0x10
c001bcb2:	83 fb 3c             	cmp    ebx,0x3c
c001bcb5:	74 0b                	je     c001bcc2 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bcb7:	43                   	inc    ebx
c001bcb8:	eb be                	jmp    c001bc78 <IDE::waitInterrupt(unsigned char)+0x12>
c001bcba:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bcc2:	83 c4 0c             	add    esp,0xc
c001bcc5:	89 e8                	mov    eax,ebp
c001bcc7:	5b                   	pop    ebx
c001bcc8:	5e                   	pop    esi
c001bcc9:	5f                   	pop    edi
c001bcca:	5d                   	pop    ebp
c001bccb:	c3                   	ret    

c001bccc <ideChannel0IRQHandler(regs*, void*)>:
c001bccc:	83 ec 10             	sub    esp,0x10
c001bccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcd3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bcda:	6a 07                	push   0x7
c001bcdc:	6a 00                	push   0x0
c001bcde:	50                   	push   eax
c001bcdf:	e8 d4 fe ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001bce4:	83 c4 1c             	add    esp,0x1c
c001bce7:	c3                   	ret    

c001bce8 <ideChannel1IRQHandler(regs*, void*)>:
c001bce8:	83 ec 10             	sub    esp,0x10
c001bceb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcef:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bcf6:	6a 07                	push   0x7
c001bcf8:	6a 01                	push   0x1
c001bcfa:	50                   	push   eax
c001bcfb:	e8 b8 fe ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001bd00:	83 c4 1c             	add    esp,0x1c
c001bd03:	c3                   	ret    

c001bd04 <IDE::enableIRQs(unsigned char, bool)>:
c001bd04:	57                   	push   edi
c001bd05:	56                   	push   esi
c001bd06:	be 04 00 00 00       	mov    esi,0x4
c001bd0b:	53                   	push   ebx
c001bd0c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd15:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bd1a:	0f 94 c0             	sete   al
c001bd1d:	d1 e0                	shl    eax,1
c001bd1f:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bd26:	0f b6 c0             	movzx  eax,al
c001bd29:	50                   	push   eax
c001bd2a:	6a 0c                	push   0xc
c001bd2c:	57                   	push   edi
c001bd2d:	53                   	push   ebx
c001bd2e:	e8 c5 fd ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	50                   	push   eax
c001bd37:	6a 0c                	push   0xc
c001bd39:	57                   	push   edi
c001bd3a:	53                   	push   ebx
c001bd3b:	e8 78 fe ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	4e                   	dec    esi
c001bd44:	75 f0                	jne    c001bd36 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bd46:	5b                   	pop    ebx
c001bd47:	5e                   	pop    esi
c001bd48:	5f                   	pop    edi
c001bd49:	c3                   	ret    

c001bd4a <IDE::open(int, int, void*)>:
c001bd4a:	55                   	push   ebp
c001bd4b:	57                   	push   edi
c001bd4c:	56                   	push   esi
c001bd4d:	53                   	push   ebx
c001bd4e:	83 ec 1c             	sub    esp,0x1c
c001bd51:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bd55:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bd5e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bd67:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bd6e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bd75:	0f 85 b0 02 00 00    	jne    c001c02b <IDE::open(int, int, void*)+0x2e1>
c001bd7b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bd81:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001bd85:	83 e0 7f             	and    eax,0x7f
c001bd88:	3c 05                	cmp    al,0x5
c001bd8a:	74 04                	je     c001bd90 <IDE::open(int, int, void*)+0x46>
c001bd8c:	3c 0f                	cmp    al,0xf
c001bd8e:	75 32                	jne    c001bdc2 <IDE::open(int, int, void*)+0x78>
c001bd90:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bd96:	83 e0 fc             	and    eax,0xfffffffc
c001bd99:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bda0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bda6:	83 e0 fc             	and    eax,0xfffffffc
c001bda9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bdb0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bdb6:	83 e0 fc             	and    eax,0xfffffffc
c001bdb9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdc0:	eb 14                	jmp    c001bdd6 <IDE::open(int, int, void*)+0x8c>
c001bdc2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bdcc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bdd6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bddd:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bde4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bde8:	89 c6                	mov    esi,eax
c001bdea:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bdef:	c1 e6 10             	shl    esi,0x10
c001bdf2:	89 e8                	mov    eax,ebp
c001bdf4:	89 fa                	mov    edx,edi
c001bdf6:	c1 e0 0b             	shl    eax,0xb
c001bdf9:	09 f0                	or     eax,esi
c001bdfb:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001be02:	c1 e6 08             	shl    esi,0x8
c001be05:	09 c6                	or     esi,eax
c001be07:	89 f0                	mov    eax,esi
c001be09:	0d 08 00 00 80       	or     eax,0x80000008
c001be0e:	ef                   	out    dx,eax
c001be0f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001be14:	89 ca                	mov    edx,ecx
c001be16:	ed                   	in     eax,dx
c001be17:	c1 e8 10             	shr    eax,0x10
c001be1a:	3d ff ff 00 00       	cmp    eax,0xffff
c001be1f:	0f 84 f5 00 00 00    	je     c001bf1a <IDE::open(int, int, void*)+0x1d0>
c001be25:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001be2b:	89 fa                	mov    edx,edi
c001be2d:	89 f0                	mov    eax,esi
c001be2f:	ef                   	out    dx,eax
c001be30:	b0 fe                	mov    al,0xfe
c001be32:	89 ca                	mov    edx,ecx
c001be34:	ee                   	out    dx,al
c001be35:	89 f0                	mov    eax,esi
c001be37:	89 fa                	mov    edx,edi
c001be39:	ef                   	out    dx,eax
c001be3a:	89 ca                	mov    edx,ecx
c001be3c:	ed                   	in     eax,dx
c001be3d:	3c fe                	cmp    al,0xfe
c001be3f:	0f 85 a9 00 00 00    	jne    c001beee <IDE::open(int, int, void*)+0x1a4>
c001be45:	8b 15 08 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b908
c001be4b:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001be52:	74 33                	je     c001be87 <IDE::open(int, int, void*)+0x13d>
c001be54:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001be5a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001be5e:	40                   	inc    eax
c001be5f:	83 ec 0c             	sub    esp,0xc
c001be62:	0f b6 c0             	movzx  eax,al
c001be65:	50                   	push   eax
c001be66:	55                   	push   ebp
c001be67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be6b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001be71:	51                   	push   ecx
c001be72:	e8 37 a9 ff ff       	call   c00167ae <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001be77:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001be7c:	83 c4 1c             	add    esp,0x1c
c001be7f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be85:	eb 0a                	jmp    c001be91 <IDE::open(int, int, void*)+0x147>
c001be87:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001be91:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001be98:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001be9f:	c1 e1 10             	shl    ecx,0x10
c001bea2:	c1 e0 08             	shl    eax,0x8
c001bea5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001beaa:	09 c1                	or     ecx,eax
c001beac:	89 fa                	mov    edx,edi
c001beae:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001beb5:	c1 e0 0b             	shl    eax,0xb
c001beb8:	09 c1                	or     ecx,eax
c001beba:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bec0:	89 c8                	mov    eax,ecx
c001bec2:	ef                   	out    dx,eax
c001bec3:	be fc 0c 00 00       	mov    esi,0xcfc
c001bec8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bece:	89 f2                	mov    edx,esi
c001bed0:	ee                   	out    dx,al
c001bed1:	89 c8                	mov    eax,ecx
c001bed3:	89 fa                	mov    edx,edi
c001bed5:	ef                   	out    dx,eax
c001bed6:	89 f2                	mov    edx,esi
c001bed8:	ed                   	in     eax,dx
c001bed9:	0f b6 c0             	movzx  eax,al
c001bedc:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bee2:	74 46                	je     c001bf2a <IDE::open(int, int, void*)+0x1e0>
c001bee4:	83 ec 0c             	sub    esp,0xc
c001bee7:	68 d4 a6 03 c0       	push   0xc003a6d4
c001beec:	eb 34                	jmp    c001bf22 <IDE::open(int, int, void*)+0x1d8>
c001beee:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bef7:	75 17                	jne    c001bf10 <IDE::open(int, int, void*)+0x1c6>
c001bef9:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001befe:	74 07                	je     c001bf07 <IDE::open(int, int, void*)+0x1bd>
c001bf00:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bf05:	75 09                	jne    c001bf10 <IDE::open(int, int, void*)+0x1c6>
c001bf07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bf0e:	eb 1a                	jmp    c001bf2a <IDE::open(int, int, void*)+0x1e0>
c001bf10:	83 ec 0c             	sub    esp,0xc
c001bf13:	68 dc a6 03 c0       	push   0xc003a6dc
c001bf18:	eb 08                	jmp    c001bf22 <IDE::open(int, int, void*)+0x1d8>
c001bf1a:	83 ec 0c             	sub    esp,0xc
c001bf1d:	68 0d a7 03 c0       	push   0xc003a70d
c001bf22:	e8 57 10 ff ff       	call   c000cf7e <panic(char const*)>
c001bf27:	83 c4 10             	add    esp,0x10
c001bf2a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bf31:	79 1a                	jns    c001bf4d <IDE::open(int, int, void*)+0x203>
c001bf33:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bf39:	83 e0 fc             	and    eax,0xfffffffc
c001bf3c:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bf43:	83 c0 08             	add    eax,0x8
c001bf46:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bf4d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bf53:	89 c2                	mov    edx,eax
c001bf55:	83 e2 0f             	and    edx,0xf
c001bf58:	66 83 fa 08          	cmp    dx,0x8
c001bf5c:	75 0a                	jne    c001bf68 <IDE::open(int, int, void*)+0x21e>
c001bf5e:	83 e8 02             	sub    eax,0x2
c001bf61:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf68:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bf6e:	89 c2                	mov    edx,eax
c001bf70:	83 e2 0f             	and    edx,0xf
c001bf73:	66 83 fa 08          	cmp    dx,0x8
c001bf77:	75 0a                	jne    c001bf83 <IDE::open(int, int, void*)+0x239>
c001bf79:	83 e8 02             	sub    eax,0x2
c001bf7c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bf83:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bf8a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bf91:	89 d0                	mov    eax,edx
c001bf93:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf96:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf9a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bf9e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001bfa1:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bfa6:	0f b6 c9             	movzx  ecx,cl
c001bfa9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bfb0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bfb3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bfb7:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bfbb:	8d 50 02             	lea    edx,[eax+0x2]
c001bfbe:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001bfc3:	0f b6 d2             	movzx  edx,dl
c001bfc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bfcc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bfcf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bfd3:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bfd7:	8d 48 03             	lea    ecx,[eax+0x3]
c001bfda:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001bfdf:	0f b6 c9             	movzx  ecx,cl
c001bfe2:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bfe8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bfeb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bfef:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bff3:	8d 50 04             	lea    edx,[eax+0x4]
c001bff6:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bffc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c001:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c008:	66 85 f6             	test   si,si
c001c00b:	74 3e                	je     c001c04b <IDE::open(int, int, void*)+0x301>
c001c00d:	0f b6 d2             	movzx  edx,dl
c001c010:	83 c0 05             	add    eax,0x5
c001c013:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c016:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c01a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c01e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c024:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c029:	eb 20                	jmp    c001c04b <IDE::open(int, int, void*)+0x301>
c001c02b:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c035:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c03f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c046:	e9 02 ff ff ff       	jmp    c001bf4d <IDE::open(int, int, void*)+0x203>
c001c04b:	52                   	push   edx
c001c04c:	52                   	push   edx
c001c04d:	6a 00                	push   0x0
c001c04f:	53                   	push   ebx
c001c050:	e8 7d fa ff ff       	call   c001bad2 <IDE::prepareInterrupt(unsigned char)>
c001c055:	59                   	pop    ecx
c001c056:	5e                   	pop    esi
c001c057:	6a 01                	push   0x1
c001c059:	53                   	push   ebx
c001c05a:	e8 73 fa ff ff       	call   c001bad2 <IDE::prepareInterrupt(unsigned char)>
c001c05f:	83 c4 0c             	add    esp,0xc
c001c062:	6a 00                	push   0x0
c001c064:	6a 00                	push   0x0
c001c066:	53                   	push   ebx
c001c067:	e8 98 fc ff ff       	call   c001bd04 <IDE::enableIRQs(unsigned char, bool)>
c001c06c:	83 c4 0c             	add    esp,0xc
c001c06f:	6a 00                	push   0x0
c001c071:	6a 01                	push   0x1
c001c073:	53                   	push   ebx
c001c074:	e8 8b fc ff ff       	call   c001bd04 <IDE::enableIRQs(unsigned char, bool)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c083:	74 40                	je     c001c0c5 <IDE::open(int, int, void*)+0x37b>
c001c085:	83 ec 0c             	sub    esp,0xc
c001c088:	68 37 a7 03 c0       	push   0xc003a737
c001c08d:	e8 ce 0d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c092:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c095:	6a 01                	push   0x1
c001c097:	68 cc bc 01 c0       	push   0xc001bccc
c001c09c:	6a 0e                	push   0xe
c001c09e:	53                   	push   ebx
c001c09f:	e8 ca 75 ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0a4:	83 c4 14             	add    esp,0x14
c001c0a7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0ad:	53                   	push   ebx
c001c0ae:	6a 01                	push   0x1
c001c0b0:	68 e8 bc 01 c0       	push   0xc001bce8
c001c0b5:	6a 0f                	push   0xf
c001c0b7:	53                   	push   ebx
c001c0b8:	e8 b1 75 ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0bd:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c0c3:	eb 4a                	jmp    c001c10f <IDE::open(int, int, void*)+0x3c5>
c001c0c5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c0cf:	50                   	push   eax
c001c0d0:	6a 0f                	push   0xf
c001c0d2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c0d8:	68 53 a7 03 c0       	push   0xc003a753
c001c0dd:	e8 7e 0d ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c0e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0e5:	6a 00                	push   0x0
c001c0e7:	68 cc bc 01 c0       	push   0xc001bccc
c001c0ec:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c0f2:	53                   	push   ebx
c001c0f3:	e8 76 75 ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0f8:	83 c4 14             	add    esp,0x14
c001c0fb:	53                   	push   ebx
c001c0fc:	6a 00                	push   0x0
c001c0fe:	68 e8 bc 01 c0       	push   0xc001bce8
c001c103:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c109:	53                   	push   ebx
c001c10a:	e8 5f 75 ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c10f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c111:	83 c4 20             	add    esp,0x20
c001c114:	83 ec 0c             	sub    esp,0xc
c001c117:	53                   	push   ebx
c001c118:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c11b:	83 c4 0c             	add    esp,0xc
c001c11e:	6a 07                	push   0x7
c001c120:	6a 00                	push   0x0
c001c122:	53                   	push   ebx
c001c123:	e8 90 fa ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c128:	83 c4 0c             	add    esp,0xc
c001c12b:	6a 07                	push   0x7
c001c12d:	6a 01                	push   0x1
c001c12f:	53                   	push   ebx
c001c130:	e8 83 fa ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c135:	83 c4 0c             	add    esp,0xc
c001c138:	6a 01                	push   0x1
c001c13a:	6a 00                	push   0x0
c001c13c:	53                   	push   ebx
c001c13d:	e8 c2 fb ff ff       	call   c001bd04 <IDE::enableIRQs(unsigned char, bool)>
c001c142:	83 c4 0c             	add    esp,0xc
c001c145:	6a 01                	push   0x1
c001c147:	6a 01                	push   0x1
c001c149:	53                   	push   ebx
c001c14a:	e8 b5 fb ff ff       	call   c001bd04 <IDE::enableIRQs(unsigned char, bool)>
c001c14f:	83 c4 2c             	add    esp,0x2c
c001c152:	31 c0                	xor    eax,eax
c001c154:	5b                   	pop    ebx
c001c155:	5e                   	pop    esi
c001c156:	5f                   	pop    edi
c001c157:	5d                   	pop    ebp
c001c158:	c3                   	ret    
c001c159:	90                   	nop

c001c15a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c15a:	55                   	push   ebp
c001c15b:	57                   	push   edi
c001c15c:	56                   	push   esi
c001c15d:	53                   	push   ebx
c001c15e:	83 ec 1c             	sub    esp,0x1c
c001c161:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c165:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c169:	8d 50 f8             	lea    edx,[eax-0x8]
c001c16c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c170:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c174:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c178:	80 fa 03             	cmp    dl,0x3
c001c17b:	77 5d                	ja     c001c1da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c17d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c181:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c185:	0f b6 db             	movzx  ebx,bl
c001c188:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c18b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c18f:	83 ca 80             	or     edx,0xffffff80
c001c192:	0f b6 d2             	movzx  edx,dl
c001c195:	52                   	push   edx
c001c196:	6a 0c                	push   0xc
c001c198:	53                   	push   ebx
c001c199:	56                   	push   esi
c001c19a:	e8 59 f9 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c19f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c1a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c1ac:	0f b6 c0             	movzx  eax,al
c001c1af:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c1b3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c1b5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c1ba:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c1be:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c1c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c1c6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c1ce:	83 c4 2c             	add    esp,0x2c
c001c1d1:	5b                   	pop    ebx
c001c1d2:	5e                   	pop    esi
c001c1d3:	5f                   	pop    edi
c001c1d4:	5d                   	pop    ebp
c001c1d5:	e9 1e f9 ff ff       	jmp    c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1da:	3c 07                	cmp    al,0x7
c001c1dc:	77 10                	ja     c001c1ee <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c1de:	0f b6 db             	movzx  ebx,bl
c001c1e1:	0f b6 d0             	movzx  edx,al
c001c1e4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c1ec:	eb 2d                	jmp    c001c21b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c1ee:	3c 0d                	cmp    al,0xd
c001c1f0:	77 13                	ja     c001c205 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c1f2:	0f b6 db             	movzx  ebx,bl
c001c1f5:	0f b6 c0             	movzx  eax,al
c001c1f8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c1ff:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c203:	eb 16                	jmp    c001c21b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c205:	3c 15                	cmp    al,0x15
c001c207:	77 14                	ja     c001c21d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c209:	0f b6 db             	movzx  ebx,bl
c001c20c:	0f b6 c0             	movzx  eax,al
c001c20f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c217:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c21b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c21d:	83 c4 1c             	add    esp,0x1c
c001c220:	5b                   	pop    ebx
c001c221:	5e                   	pop    esi
c001c222:	5f                   	pop    edi
c001c223:	5d                   	pop    ebp
c001c224:	c3                   	ret    
c001c225:	90                   	nop

c001c226 <IDE::detect()>:
c001c226:	55                   	push   ebp
c001c227:	57                   	push   edi
c001c228:	56                   	push   esi
c001c229:	53                   	push   ebx
c001c22a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c230:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c237:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c23e:	0f 85 be 02 00 00    	jne    c001c502 <IDE::detect()+0x2dc>
c001c244:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c24b:	31 f6                	xor    esi,esi
c001c24d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c255:	31 ed                	xor    ebp,ebp
c001c257:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c25b:	c1 e0 06             	shl    eax,0x6
c001c25e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c266:	89 e8                	mov    eax,ebp
c001c268:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c26c:	c1 e0 04             	shl    eax,0x4
c001c26f:	83 c8 a0             	or     eax,0xffffffa0
c001c272:	0f b6 c0             	movzx  eax,al
c001c275:	50                   	push   eax
c001c276:	6a 06                	push   0x6
c001c278:	56                   	push   esi
c001c279:	53                   	push   ebx
c001c27a:	e8 79 f8 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c27f:	83 c4 0c             	add    esp,0xc
c001c282:	6a 0c                	push   0xc
c001c284:	56                   	push   esi
c001c285:	53                   	push   ebx
c001c286:	e8 2d f9 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c28b:	83 c4 0c             	add    esp,0xc
c001c28e:	6a 0c                	push   0xc
c001c290:	56                   	push   esi
c001c291:	53                   	push   ebx
c001c292:	e8 21 f9 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c297:	83 c4 0c             	add    esp,0xc
c001c29a:	6a 0c                	push   0xc
c001c29c:	56                   	push   esi
c001c29d:	53                   	push   ebx
c001c29e:	e8 15 f9 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2a3:	83 c4 0c             	add    esp,0xc
c001c2a6:	6a 0c                	push   0xc
c001c2a8:	56                   	push   esi
c001c2a9:	53                   	push   ebx
c001c2aa:	e8 09 f9 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2af:	68 ec 00 00 00       	push   0xec
c001c2b4:	6a 07                	push   0x7
c001c2b6:	56                   	push   esi
c001c2b7:	53                   	push   ebx
c001c2b8:	e8 3b f8 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2bd:	83 c4 1c             	add    esp,0x1c
c001c2c0:	6a 0c                	push   0xc
c001c2c2:	56                   	push   esi
c001c2c3:	53                   	push   ebx
c001c2c4:	e8 ef f8 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2c9:	83 c4 0c             	add    esp,0xc
c001c2cc:	6a 0c                	push   0xc
c001c2ce:	56                   	push   esi
c001c2cf:	53                   	push   ebx
c001c2d0:	e8 e3 f8 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2d5:	83 c4 0c             	add    esp,0xc
c001c2d8:	6a 0c                	push   0xc
c001c2da:	56                   	push   esi
c001c2db:	53                   	push   ebx
c001c2dc:	e8 d7 f8 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2e1:	83 c4 0c             	add    esp,0xc
c001c2e4:	6a 0c                	push   0xc
c001c2e6:	56                   	push   esi
c001c2e7:	53                   	push   ebx
c001c2e8:	e8 cb f8 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2ed:	83 c4 0c             	add    esp,0xc
c001c2f0:	6a 0c                	push   0xc
c001c2f2:	56                   	push   esi
c001c2f3:	53                   	push   ebx
c001c2f4:	e8 bf f8 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c2f9:	83 c4 10             	add    esp,0x10
c001c2fc:	84 c0                	test   al,al
c001c2fe:	0f 84 8b 01 00 00    	je     c001c48f <IDE::detect()+0x269>
c001c304:	31 ff                	xor    edi,edi
c001c306:	50                   	push   eax
c001c307:	6a 0c                	push   0xc
c001c309:	56                   	push   esi
c001c30a:	53                   	push   ebx
c001c30b:	e8 a8 f8 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c310:	83 c4 10             	add    esp,0x10
c001c313:	a8 01                	test   al,0x1
c001c315:	0f 85 8e 01 00 00    	jne    c001c4a9 <IDE::detect()+0x283>
c001c31b:	84 c0                	test   al,al
c001c31d:	78 04                	js     c001c323 <IDE::detect()+0xfd>
c001c31f:	a8 08                	test   al,0x8
c001c321:	75 27                	jne    c001c34a <IDE::detect()+0x124>
c001c323:	47                   	inc    edi
c001c324:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c32a:	7e da                	jle    c001c306 <IDE::detect()+0xe0>
c001c32c:	50                   	push   eax
c001c32d:	50                   	push   eax
c001c32e:	6a 00                	push   0x0
c001c330:	68 40 4b 4c 00       	push   0x4c4b40
c001c335:	e8 81 26 ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c001c33a:	83 c4 10             	add    esp,0x10
c001c33d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c343:	75 c1                	jne    c001c306 <IDE::detect()+0xe0>
c001c345:	e9 5f 01 00 00       	jmp    c001c4a9 <IDE::detect()+0x283>
c001c34a:	31 c9                	xor    ecx,ecx
c001c34c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c350:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c354:	83 ec 0c             	sub    esp,0xc
c001c357:	68 80 00 00 00       	push   0x80
c001c35c:	57                   	push   edi
c001c35d:	6a 00                	push   0x0
c001c35f:	56                   	push   esi
c001c360:	53                   	push   ebx
c001c361:	e8 f4 fd ff ff       	call   c001c15a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c366:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c36b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c36f:	89 d1                	mov    ecx,edx
c001c371:	c1 e0 06             	shl    eax,0x6
c001c374:	01 d8                	add    eax,ebx
c001c376:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c37d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c384:	89 f2                	mov    edx,esi
c001c386:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c38c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c390:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c396:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c39a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c3a1:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c3a9:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c3b0:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c3b8:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c3be:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c3c5:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c3cb:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c3cf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c3d3:	83 c4 20             	add    esp,0x20
c001c3d6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c3d9:	83 c0 02             	add    eax,0x2
c001c3dc:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c3e2:	83 c7 02             	add    edi,0x2
c001c3e5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c3e8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c3ee:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c3f2:	75 e2                	jne    c001c3d6 <IDE::detect()+0x1b0>
c001c3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f8:	c1 e0 06             	shl    eax,0x6
c001c3fb:	01 d8                	add    eax,ebx
c001c3fd:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c403:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c40a:	66 c1 ea 09          	shr    dx,0x9
c001c40e:	83 e2 01             	and    edx,0x1
c001c411:	84 c9                	test   cl,cl
c001c413:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c419:	75 2f                	jne    c001c44a <IDE::detect()+0x224>
c001c41b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c421:	85 c0                	test   eax,eax
c001c423:	74 66                	je     c001c48b <IDE::detect()+0x265>
c001c425:	50                   	push   eax
c001c426:	55                   	push   ebp
c001c427:	56                   	push   esi
c001c428:	68 6f a7 03 c0       	push   0xc003a76f
c001c42d:	e8 2e 0a ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c432:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c439:	e8 d2 5f ff ff       	call   c0012410 <operator new(unsigned long)>
c001c43e:	89 c7                	mov    edi,eax
c001c440:	89 04 24             	mov    DWORD PTR [esp],eax
c001c443:	e8 e8 02 00 00       	call   c001c730 <ATA::ATA()>
c001c448:	eb 28                	jmp    c001c472 <IDE::detect()+0x24c>
c001c44a:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c450:	55                   	push   ebp
c001c451:	56                   	push   esi
c001c452:	68 9e a7 03 c0       	push   0xc003a79e
c001c457:	e8 04 0a ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c45c:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c463:	e8 a8 5f ff ff       	call   c0012410 <operator new(unsigned long)>
c001c468:	89 c7                	mov    edi,eax
c001c46a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c46d:	e8 ee 08 00 00       	call   c001cd60 <ATAPI::ATAPI()>
c001c472:	5a                   	pop    edx
c001c473:	59                   	pop    ecx
c001c474:	57                   	push   edi
c001c475:	53                   	push   ebx
c001c476:	e8 9f 72 ff ff       	call   c001371a <Device::addChild(Device*)>
c001c47b:	8b 07                	mov    eax,DWORD PTR [edi]
c001c47d:	53                   	push   ebx
c001c47e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c482:	6a 00                	push   0x0
c001c484:	57                   	push   edi
c001c485:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c488:	83 c4 20             	add    esp,0x20
c001c48b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c48f:	4d                   	dec    ebp
c001c490:	74 0a                	je     c001c49c <IDE::detect()+0x276>
c001c492:	bd 01 00 00 00       	mov    ebp,0x1
c001c497:	e9 bb fd ff ff       	jmp    c001c257 <IDE::detect()+0x31>
c001c49c:	4e                   	dec    esi
c001c49d:	74 63                	je     c001c502 <IDE::detect()+0x2dc>
c001c49f:	be 01 00 00 00       	mov    esi,0x1
c001c4a4:	e9 ac fd ff ff       	jmp    c001c255 <IDE::detect()+0x2f>
c001c4a9:	50                   	push   eax
c001c4aa:	6a 04                	push   0x4
c001c4ac:	56                   	push   esi
c001c4ad:	53                   	push   ebx
c001c4ae:	e8 05 f7 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c4b3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c4b7:	83 c4 0c             	add    esp,0xc
c001c4ba:	6a 05                	push   0x5
c001c4bc:	56                   	push   esi
c001c4bd:	53                   	push   ebx
c001c4be:	e8 f5 f6 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c4ca:	80 fa 14             	cmp    dl,0x14
c001c4cd:	75 04                	jne    c001c4d3 <IDE::detect()+0x2ad>
c001c4cf:	3c eb                	cmp    al,0xeb
c001c4d1:	eb 07                	jmp    c001c4da <IDE::detect()+0x2b4>
c001c4d3:	3c 96                	cmp    al,0x96
c001c4d5:	75 b8                	jne    c001c48f <IDE::detect()+0x269>
c001c4d7:	80 fa 69             	cmp    dl,0x69
c001c4da:	75 b3                	jne    c001c48f <IDE::detect()+0x269>
c001c4dc:	68 a1 00 00 00       	push   0xa1
c001c4e1:	6a 07                	push   0x7
c001c4e3:	56                   	push   esi
c001c4e4:	53                   	push   ebx
c001c4e5:	e8 0e f6 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4ea:	5f                   	pop    edi
c001c4eb:	58                   	pop    eax
c001c4ec:	6a 00                	push   0x0
c001c4ee:	68 40 42 0f 00       	push   0xf4240
c001c4f3:	e8 c3 24 ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c001c4f8:	83 c4 10             	add    esp,0x10
c001c4fb:	b1 01                	mov    cl,0x1
c001c4fd:	e9 4a fe ff ff       	jmp    c001c34c <IDE::detect()+0x126>
c001c502:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c508:	5b                   	pop    ebx
c001c509:	5e                   	pop    esi
c001c50a:	5f                   	pop    edi
c001c50b:	5d                   	pop    ebp
c001c50c:	c3                   	ret    
c001c50d:	90                   	nop

c001c50e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c50e:	55                   	push   ebp
c001c50f:	57                   	push   edi
c001c510:	56                   	push   esi
c001c511:	53                   	push   ebx
c001c512:	83 ec 1c             	sub    esp,0x1c
c001c515:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c519:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c51d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c521:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c525:	88 c3                	mov    bl,al
c001c527:	84 c0                	test   al,al
c001c529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c52d:	0f 84 67 01 00 00    	je     c001c69a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c533:	83 ec 0c             	sub    esp,0xc
c001c536:	68 cf a7 03 c0       	push   0xc003a7cf
c001c53b:	e8 20 09 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c540:	83 c4 10             	add    esp,0x10
c001c543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c547:	3c 01                	cmp    al,0x1
c001c549:	75 17                	jne    c001c562 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c54b:	83 ec 0c             	sub    esp,0xc
c001c54e:	b3 13                	mov    bl,0x13
c001c550:	68 db a7 03 c0       	push   0xc003a7db
c001c555:	e8 06 09 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c55a:	83 c4 10             	add    esp,0x10
c001c55d:	e9 25 01 00 00       	jmp    c001c687 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c562:	3c 02                	cmp    al,0x2
c001c564:	0f 85 ef 00 00 00    	jne    c001c659 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c56a:	d1 e6                	shl    esi,1
c001c56c:	09 ee                	or     esi,ebp
c001c56e:	52                   	push   edx
c001c56f:	89 f0                	mov    eax,esi
c001c571:	6a 01                	push   0x1
c001c573:	0f b6 f0             	movzx  esi,al
c001c576:	c1 e6 06             	shl    esi,0x6
c001c579:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c581:	50                   	push   eax
c001c582:	57                   	push   edi
c001c583:	e8 30 f6 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c588:	83 c4 10             	add    esp,0x10
c001c58b:	89 c6                	mov    esi,eax
c001c58d:	a8 01                	test   al,0x1
c001c58f:	74 12                	je     c001c5a3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c591:	83 ec 0c             	sub    esp,0xc
c001c594:	b3 07                	mov    bl,0x7
c001c596:	68 f0 a7 03 c0       	push   0xc003a7f0
c001c59b:	e8 c0 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	f7 c6 02 00 00 00    	test   esi,0x2
c001c5a9:	74 12                	je     c001c5bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c5ab:	83 ec 0c             	sub    esp,0xc
c001c5ae:	b3 03                	mov    bl,0x3
c001c5b0:	68 0e a8 03 c0       	push   0xc003a80e
c001c5b5:	e8 a6 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c5ba:	83 c4 10             	add    esp,0x10
c001c5bd:	f7 c6 04 00 00 00    	test   esi,0x4
c001c5c3:	74 12                	je     c001c5d7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c5c5:	83 ec 0c             	sub    esp,0xc
c001c5c8:	b3 14                	mov    bl,0x14
c001c5ca:	68 2e a8 03 c0       	push   0xc003a82e
c001c5cf:	e8 8c 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c5d4:	83 c4 10             	add    esp,0x10
c001c5d7:	f7 c6 08 00 00 00    	test   esi,0x8
c001c5dd:	74 12                	je     c001c5f1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c5df:	83 ec 0c             	sub    esp,0xc
c001c5e2:	b3 03                	mov    bl,0x3
c001c5e4:	68 0e a8 03 c0       	push   0xc003a80e
c001c5e9:	e8 72 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	f7 c6 10 00 00 00    	test   esi,0x10
c001c5f7:	74 12                	je     c001c60b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c5f9:	83 ec 0c             	sub    esp,0xc
c001c5fc:	b3 15                	mov    bl,0x15
c001c5fe:	68 46 a8 03 c0       	push   0xc003a846
c001c603:	e8 58 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c608:	83 c4 10             	add    esp,0x10
c001c60b:	f7 c6 20 00 00 00    	test   esi,0x20
c001c611:	74 12                	je     c001c625 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c613:	83 ec 0c             	sub    esp,0xc
c001c616:	b3 03                	mov    bl,0x3
c001c618:	68 0e a8 03 c0       	push   0xc003a80e
c001c61d:	e8 3e 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c622:	83 c4 10             	add    esp,0x10
c001c625:	f7 c6 40 00 00 00    	test   esi,0x40
c001c62b:	74 12                	je     c001c63f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c62d:	83 ec 0c             	sub    esp,0xc
c001c630:	b3 16                	mov    bl,0x16
c001c632:	68 60 a8 03 c0       	push   0xc003a860
c001c637:	e8 24 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c63c:	83 c4 10             	add    esp,0x10
c001c63f:	89 f0                	mov    eax,esi
c001c641:	84 c0                	test   al,al
c001c643:	79 42                	jns    c001c687 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c645:	83 ec 0c             	sub    esp,0xc
c001c648:	b3 0d                	mov    bl,0xd
c001c64a:	68 81 a8 03 c0       	push   0xc003a881
c001c64f:	e8 0c 08 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c654:	83 c4 10             	add    esp,0x10
c001c657:	eb 2e                	jmp    c001c687 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c659:	3c 03                	cmp    al,0x3
c001c65b:	75 14                	jne    c001c671 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c65d:	83 ec 0c             	sub    esp,0xc
c001c660:	b3 17                	mov    bl,0x17
c001c662:	68 95 a8 03 c0       	push   0xc003a895
c001c667:	e8 f4 07 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c66c:	83 c4 10             	add    esp,0x10
c001c66f:	eb 16                	jmp    c001c687 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c671:	3c 04                	cmp    al,0x4
c001c673:	75 12                	jne    c001c687 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c675:	83 ec 0c             	sub    esp,0xc
c001c678:	b3 08                	mov    bl,0x8
c001c67a:	68 ab a8 03 c0       	push   0xc003a8ab
c001c67f:	e8 dc 07 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c684:	83 c4 10             	add    esp,0x10
c001c687:	50                   	push   eax
c001c688:	50                   	push   eax
c001c689:	0f b6 c3             	movzx  eax,bl
c001c68c:	50                   	push   eax
c001c68d:	68 c3 a8 03 c0       	push   0xc003a8c3
c001c692:	e8 c9 07 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	83 c4 1c             	add    esp,0x1c
c001c69d:	88 d8                	mov    al,bl
c001c69f:	5b                   	pop    ebx
c001c6a0:	5e                   	pop    esi
c001c6a1:	5f                   	pop    edi
c001c6a2:	5d                   	pop    ebp
c001c6a3:	c3                   	ret    

c001c6a4 <IDE::polling(unsigned char, unsigned int)>:
c001c6a4:	57                   	push   edi
c001c6a5:	56                   	push   esi
c001c6a6:	53                   	push   ebx
c001c6a7:	bb 04 00 00 00       	mov    ebx,0x4
c001c6ac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c6b0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c6b5:	52                   	push   edx
c001c6b6:	6a 0c                	push   0xc
c001c6b8:	56                   	push   esi
c001c6b9:	57                   	push   edi
c001c6ba:	e8 f9 f4 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c6bf:	83 c4 10             	add    esp,0x10
c001c6c2:	4b                   	dec    ebx
c001c6c3:	75 f0                	jne    c001c6b5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c6c5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6ca:	50                   	push   eax
c001c6cb:	6a 0c                	push   0xc
c001c6cd:	56                   	push   esi
c001c6ce:	57                   	push   edi
c001c6cf:	e8 e4 f4 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c6d4:	83 c4 10             	add    esp,0x10
c001c6d7:	a8 01                	test   al,0x1
c001c6d9:	74 12                	je     c001c6ed <IDE::polling(unsigned char, unsigned int)+0x49>
c001c6db:	83 ec 0c             	sub    esp,0xc
c001c6de:	68 dd a8 03 c0       	push   0xc003a8dd
c001c6e3:	e8 78 07 ff ff       	call   c000ce60 <kprintf(char const*, ...)>
c001c6e8:	83 c4 10             	add    esp,0x10
c001c6eb:	eb 17                	jmp    c001c704 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c6ed:	a8 20                	test   al,0x20
c001c6ef:	75 0f                	jne    c001c700 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c6f1:	4b                   	dec    ebx
c001c6f2:	74 10                	je     c001c704 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c6f4:	84 c0                	test   al,al
c001c6f6:	78 d2                	js     c001c6ca <IDE::polling(unsigned char, unsigned int)+0x26>
c001c6f8:	a8 08                	test   al,0x8
c001c6fa:	74 ce                	je     c001c6ca <IDE::polling(unsigned char, unsigned int)+0x26>
c001c6fc:	31 c0                	xor    eax,eax
c001c6fe:	eb 06                	jmp    c001c706 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c700:	b0 01                	mov    al,0x1
c001c702:	eb 02                	jmp    c001c706 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c704:	b0 02                	mov    al,0x2
c001c706:	5b                   	pop    ebx
c001c707:	5e                   	pop    esi
c001c708:	5f                   	pop    edi
c001c709:	c3                   	ret    

c001c70a <ATA::close(int, int, void*)>:
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c711:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c717:	85 c0                	test   eax,eax
c001c719:	74 0c                	je     c001c727 <ATA::close(int, int, void*)+0x1d>
c001c71b:	83 ec 0c             	sub    esp,0xc
c001c71e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c720:	50                   	push   eax
c001c721:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c724:	83 c4 10             	add    esp,0x10
c001c727:	31 c0                	xor    eax,eax
c001c729:	83 c4 0c             	add    esp,0xc
c001c72c:	c3                   	ret    
c001c72d:	90                   	nop

c001c72e <ATA::powerSaving(PowerSavingLevel)>:
c001c72e:	c3                   	ret    
c001c72f:	90                   	nop

c001c730 <ATA::ATA()>:
c001c730:	83 ec 0c             	sub    esp,0xc
c001c733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c737:	83 ec 04             	sub    esp,0x4
c001c73a:	68 00 02 00 00       	push   0x200
c001c73f:	68 20 a9 03 c0       	push   0xc003a920
c001c744:	50                   	push   eax
c001c745:	e8 d6 73 ff ff       	call   c0013b20 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c74a:	83 c4 10             	add    esp,0x10
c001c74d:	ba 4c a9 03 c0       	mov    edx,0xc003a94c
c001c752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c756:	89 10                	mov    DWORD PTR [eax],edx
c001c758:	90                   	nop
c001c759:	83 c4 0c             	add    esp,0xc
c001c75c:	c3                   	ret    
c001c75d:	90                   	nop

c001c75e <ATA::flush(bool)>:
c001c75e:	53                   	push   ebx
c001c75f:	83 ec 08             	sub    esp,0x8
c001c762:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c76b:	19 c0                	sbb    eax,eax
c001c76d:	83 e0 fd             	and    eax,0xfffffffd
c001c770:	05 ea 00 00 00       	add    eax,0xea
c001c775:	50                   	push   eax
c001c776:	6a 07                	push   0x7
c001c778:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c77f:	50                   	push   eax
c001c780:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c786:	e8 6d f3 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c78b:	83 c4 0c             	add    esp,0xc
c001c78e:	6a 00                	push   0x0
c001c790:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c797:	50                   	push   eax
c001c798:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c79e:	e8 01 ff ff ff       	call   c001c6a4 <IDE::polling(unsigned char, unsigned int)>
c001c7a3:	83 c4 18             	add    esp,0x18
c001c7a6:	5b                   	pop    ebx
c001c7a7:	c3                   	ret    

c001c7a8 <ATA::readyForCommand()>:
c001c7a8:	56                   	push   esi
c001c7a9:	53                   	push   ebx
c001c7aa:	31 db                	xor    ebx,ebx
c001c7ac:	50                   	push   eax
c001c7ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7b1:	50                   	push   eax
c001c7b2:	6a 0c                	push   0xc
c001c7b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7bb:	50                   	push   eax
c001c7bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7c2:	e8 f1 f3 ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001c7c7:	83 c4 10             	add    esp,0x10
c001c7ca:	a8 88                	test   al,0x88
c001c7cc:	74 23                	je     c001c7f1 <ATA::readyForCommand()+0x49>
c001c7ce:	43                   	inc    ebx
c001c7cf:	83 fb 63             	cmp    ebx,0x63
c001c7d2:	7e dd                	jle    c001c7b1 <ATA::readyForCommand()+0x9>
c001c7d4:	51                   	push   ecx
c001c7d5:	51                   	push   ecx
c001c7d6:	6a 00                	push   0x0
c001c7d8:	68 40 42 0f 00       	push   0xf4240
c001c7dd:	e8 d9 21 ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c001c7e2:	83 c4 10             	add    esp,0x10
c001c7e5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c7eb:	75 c4                	jne    c001c7b1 <ATA::readyForCommand()+0x9>
c001c7ed:	31 c0                	xor    eax,eax
c001c7ef:	eb 02                	jmp    c001c7f3 <ATA::readyForCommand()+0x4b>
c001c7f1:	b0 01                	mov    al,0x1
c001c7f3:	5a                   	pop    edx
c001c7f4:	5b                   	pop    ebx
c001c7f5:	5e                   	pop    esi
c001c7f6:	c3                   	ret    
c001c7f7:	90                   	nop

c001c7f8 <ATA::access(unsigned long long, int, void*, bool)>:
c001c7f8:	55                   	push   ebp
c001c7f9:	57                   	push   edi
c001c7fa:	56                   	push   esi
c001c7fb:	53                   	push   ebx
c001c7fc:	83 ec 2c             	sub    esp,0x2c
c001c7ff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c803:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c807:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c80b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c80f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c813:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c817:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c81b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c821:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c825:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c82b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c82f:	c1 e0 06             	shl    eax,0x6
c001c832:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c83a:	74 5d                	je     c001c899 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c83c:	89 fa                	mov    edx,edi
c001c83e:	89 f0                	mov    eax,esi
c001c840:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c844:	c1 ea 1c             	shr    edx,0x1c
c001c847:	89 d1                	mov    ecx,edx
c001c849:	09 c1                	or     ecx,eax
c001c84b:	74 25                	je     c001c872 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c84d:	31 ed                	xor    ebp,ebp
c001c84f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c856:	89 fa                	mov    edx,edi
c001c858:	89 f0                	mov    eax,esi
c001c85a:	0f ad d0             	shrd   eax,edx,cl
c001c85d:	d3 ea                	shr    edx,cl
c001c85f:	f6 c1 20             	test   cl,0x20
c001c862:	74 02                	je     c001c866 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c864:	89 d0                	mov    eax,edx
c001c866:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c86a:	45                   	inc    ebp
c001c86b:	83 fd 06             	cmp    ebp,0x6
c001c86e:	75 df                	jne    c001c84f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c870:	eb 76                	jmp    c001c8e8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c872:	89 f0                	mov    eax,esi
c001c874:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c879:	89 fa                	mov    edx,edi
c001c87b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c882:	0f ac d0 10          	shrd   eax,edx,0x10
c001c886:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c88b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c88f:	c1 ee 18             	shr    esi,0x18
c001c892:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c897:	eb 56                	jmp    c001c8ef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c899:	6a 00                	push   0x0
c001c89b:	6a 3f                	push   0x3f
c001c89d:	57                   	push   edi
c001c89e:	56                   	push   esi
c001c89f:	e8 d8 1e 00 00       	call   c001e77c <__umoddi3>
c001c8a4:	83 c4 10             	add    esp,0x10
c001c8a7:	40                   	inc    eax
c001c8a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c8ac:	6a 00                	push   0x0
c001c8ae:	68 f0 03 00 00       	push   0x3f0
c001c8b3:	57                   	push   edi
c001c8b4:	56                   	push   esi
c001c8b5:	e8 c2 1d 00 00       	call   c001e67c <__udivdi3>
c001c8ba:	83 c4 10             	add    esp,0x10
c001c8bd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c8c2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8c9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8ce:	6a 00                	push   0x0
c001c8d0:	6a 3f                	push   0x3f
c001c8d2:	57                   	push   edi
c001c8d3:	56                   	push   esi
c001c8d4:	e8 a3 1d 00 00       	call   c001e67c <__udivdi3>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	89 c6                	mov    esi,eax
c001c8de:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c8e3:	83 e6 0f             	and    esi,0xf
c001c8e6:	eb 07                	jmp    c001c8ef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c8e8:	31 f6                	xor    esi,esi
c001c8ea:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c8ef:	bf 01 00 00 00       	mov    edi,0x1
c001c8f4:	50                   	push   eax
c001c8f5:	6a 00                	push   0x0
c001c8f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8fe:	50                   	push   eax
c001c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c903:	e8 fc f3 ff ff       	call   c001bd04 <IDE::enableIRQs(unsigned char, bool)>
c001c908:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c90b:	e8 98 fe ff ff       	call   c001c7a8 <ATA::readyForCommand()>
c001c910:	83 c4 10             	add    esp,0x10
c001c913:	84 c0                	test   al,al
c001c915:	0f 84 50 02 00 00    	je     c001cb6b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c91b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c921:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c927:	c1 e0 04             	shl    eax,0x4
c001c92a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c931:	09 c6                	or     esi,eax
c001c933:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c938:	75 05                	jne    c001c93f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c93a:	83 ce a0             	or     esi,0xffffffa0
c001c93d:	eb 03                	jmp    c001c942 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c93f:	83 ce e0             	or     esi,0xffffffe0
c001c942:	89 f0                	mov    eax,esi
c001c944:	0f b6 f0             	movzx  esi,al
c001c947:	56                   	push   esi
c001c948:	6a 06                	push   0x6
c001c94a:	51                   	push   ecx
c001c94b:	52                   	push   edx
c001c94c:	e8 a7 f1 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c951:	83 c4 10             	add    esp,0x10
c001c954:	6a 00                	push   0x0
c001c956:	6a 01                	push   0x1
c001c958:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c95f:	50                   	push   eax
c001c960:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c966:	e8 8d f1 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c96b:	83 c4 10             	add    esp,0x10
c001c96e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c973:	75 6e                	jne    c001c9e3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c975:	6a 00                	push   0x0
c001c977:	6a 08                	push   0x8
c001c979:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c980:	50                   	push   eax
c001c981:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c987:	e8 6c f1 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c98c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c991:	50                   	push   eax
c001c992:	6a 09                	push   0x9
c001c994:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c99b:	50                   	push   eax
c001c99c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9a2:	e8 51 f1 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a7:	83 c4 20             	add    esp,0x20
c001c9aa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c9af:	50                   	push   eax
c001c9b0:	6a 0a                	push   0xa
c001c9b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9b9:	50                   	push   eax
c001c9ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9c0:	e8 33 f1 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9c5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9ca:	50                   	push   eax
c001c9cb:	6a 0b                	push   0xb
c001c9cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9d4:	50                   	push   eax
c001c9d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9db:	e8 18 f1 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9e0:	83 c4 20             	add    esp,0x20
c001c9e3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c9e8:	50                   	push   eax
c001c9e9:	6a 02                	push   0x2
c001c9eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9f2:	50                   	push   eax
c001c9f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f9:	e8 fa f0 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9fe:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ca03:	50                   	push   eax
c001ca04:	6a 03                	push   0x3
c001ca06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca0d:	50                   	push   eax
c001ca0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca14:	e8 df f0 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca19:	83 c4 20             	add    esp,0x20
c001ca1c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ca21:	50                   	push   eax
c001ca22:	6a 04                	push   0x4
c001ca24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca2b:	50                   	push   eax
c001ca2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca32:	e8 c1 f0 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca3c:	50                   	push   eax
c001ca3d:	6a 05                	push   0x5
c001ca3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca46:	50                   	push   eax
c001ca47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca4d:	e8 a6 f0 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca52:	83 c4 20             	add    esp,0x20
c001ca55:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca5a:	0f 94 c0             	sete   al
c001ca5d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca62:	74 09                	je     c001ca6d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca64:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001ca6b:	eb 07                	jmp    c001ca74 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001ca6d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001ca74:	0f b6 c0             	movzx  eax,al
c001ca77:	50                   	push   eax
c001ca78:	6a 07                	push   0x7
c001ca7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca81:	50                   	push   eax
c001ca82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca88:	e8 6b f0 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca8d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ca91:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca95:	83 c4 10             	add    esp,0x10
c001ca98:	85 f6                	test   esi,esi
c001ca9a:	0f 84 ac 00 00 00    	je     c001cb4c <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001caa0:	50                   	push   eax
c001caa1:	6a 01                	push   0x1
c001caa3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caaa:	50                   	push   eax
c001caab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab1:	e8 ee fb ff ff       	call   c001c6a4 <IDE::polling(unsigned char, unsigned int)>
c001cab6:	83 c4 10             	add    esp,0x10
c001cab9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cabf:	84 c0                	test   al,al
c001cac1:	74 20                	je     c001cae3 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cac3:	0f b6 f8             	movzx  edi,al
c001cac6:	0f b6 d2             	movzx  edx,dl
c001cac9:	57                   	push   edi
c001caca:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cad1:	50                   	push   eax
c001cad2:	52                   	push   edx
c001cad3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad9:	e8 30 fa ff ff       	call   c001c50e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cade:	e9 85 00 00 00       	jmp    c001cb68 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cae3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cae8:	74 41                	je     c001cb2b <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001caea:	31 c9                	xor    ecx,ecx
c001caec:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001caf0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001caf4:	50                   	push   eax
c001caf5:	50                   	push   eax
c001caf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cafd:	50                   	push   eax
c001cafe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb04:	e8 dd ef ff ff       	call   c001bae6 <IDE::getBase(unsigned char)>
c001cb09:	89 c2                	mov    edx,eax
c001cb0b:	89 e8                	mov    eax,ebp
c001cb0d:	66 ef                	out    dx,ax
c001cb0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	41                   	inc    ecx
c001cb17:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cb1d:	75 cd                	jne    c001caec <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cb1f:	4e                   	dec    esi
c001cb20:	81 c7 00 02 00 00    	add    edi,0x200
c001cb26:	e9 6d ff ff ff       	jmp    c001ca98 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cb2b:	0f b6 d2             	movzx  edx,dl
c001cb2e:	51                   	push   ecx
c001cb2f:	51                   	push   ecx
c001cb30:	52                   	push   edx
c001cb31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb37:	e8 aa ef ff ff       	call   c001bae6 <IDE::getBase(unsigned char)>
c001cb3c:	b9 00 01 00 00       	mov    ecx,0x100
c001cb41:	89 c2                	mov    edx,eax
c001cb43:	fc                   	cld    
c001cb44:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	eb d3                	jmp    c001cb1f <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cb4c:	31 ff                	xor    edi,edi
c001cb4e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb53:	74 16                	je     c001cb6b <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cb55:	50                   	push   eax
c001cb56:	50                   	push   eax
c001cb57:	31 c0                	xor    eax,eax
c001cb59:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cb5e:	0f 94 c0             	sete   al
c001cb61:	50                   	push   eax
c001cb62:	53                   	push   ebx
c001cb63:	e8 f6 fb ff ff       	call   c001c75e <ATA::flush(bool)>
c001cb68:	83 c4 10             	add    esp,0x10
c001cb6b:	83 c4 2c             	add    esp,0x2c
c001cb6e:	89 f8                	mov    eax,edi
c001cb70:	5b                   	pop    ebx
c001cb71:	5e                   	pop    esi
c001cb72:	5f                   	pop    edi
c001cb73:	5d                   	pop    ebp
c001cb74:	c3                   	ret    
c001cb75:	90                   	nop

c001cb76 <ATA::read(unsigned long long, int, void*)>:
c001cb76:	57                   	push   edi
c001cb77:	b8 04 00 00 00       	mov    eax,0x4
c001cb7c:	56                   	push   esi
c001cb7d:	53                   	push   ebx
c001cb7e:	83 ec 10             	sub    esp,0x10
c001cb81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb89:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cb8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb94:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cb9a:	77 3b                	ja     c001cbd7 <ATA::read(unsigned long long, int, void*)+0x61>
c001cb9c:	b8 06 00 00 00       	mov    eax,0x6
c001cba1:	85 d2                	test   edx,edx
c001cba3:	74 32                	je     c001cbd7 <ATA::read(unsigned long long, int, void*)+0x61>
c001cba5:	50                   	push   eax
c001cba6:	50                   	push   eax
c001cba7:	6a 00                	push   0x0
c001cba9:	52                   	push   edx
c001cbaa:	53                   	push   ebx
c001cbab:	57                   	push   edi
c001cbac:	56                   	push   esi
c001cbad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbb1:	e8 42 fc ff ff       	call   c001c7f8 <ATA::access(unsigned long long, int, void*, bool)>
c001cbb6:	83 c4 20             	add    esp,0x20
c001cbb9:	85 c0                	test   eax,eax
c001cbbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbbf:	75 11                	jne    c001cbd2 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cbc1:	01 1d e8 cf 03 c0    	add    DWORD PTR ds:0xc003cfe8,ebx
c001cbc7:	e8 c2 36 ff ff       	call   c001028e <VgaText::updateDiskUsage()>
c001cbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbd0:	eb 05                	jmp    c001cbd7 <ATA::read(unsigned long long, int, void*)+0x61>
c001cbd2:	b8 01 00 00 00       	mov    eax,0x1
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	5b                   	pop    ebx
c001cbdb:	5e                   	pop    esi
c001cbdc:	5f                   	pop    edi
c001cbdd:	c3                   	ret    

c001cbde <ATA::write(unsigned long long, int, void*)>:
c001cbde:	57                   	push   edi
c001cbdf:	b8 04 00 00 00       	mov    eax,0x4
c001cbe4:	56                   	push   esi
c001cbe5:	53                   	push   ebx
c001cbe6:	83 ec 10             	sub    esp,0x10
c001cbe9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cbed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cbf1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cbf4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cbf8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbfc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc02:	77 3b                	ja     c001cc3f <ATA::write(unsigned long long, int, void*)+0x61>
c001cc04:	b8 06 00 00 00       	mov    eax,0x6
c001cc09:	85 d2                	test   edx,edx
c001cc0b:	74 32                	je     c001cc3f <ATA::write(unsigned long long, int, void*)+0x61>
c001cc0d:	50                   	push   eax
c001cc0e:	50                   	push   eax
c001cc0f:	6a 01                	push   0x1
c001cc11:	52                   	push   edx
c001cc12:	53                   	push   ebx
c001cc13:	57                   	push   edi
c001cc14:	56                   	push   esi
c001cc15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc19:	e8 da fb ff ff       	call   c001c7f8 <ATA::access(unsigned long long, int, void*, bool)>
c001cc1e:	83 c4 20             	add    esp,0x20
c001cc21:	85 c0                	test   eax,eax
c001cc23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc27:	75 11                	jne    c001cc3a <ATA::write(unsigned long long, int, void*)+0x5c>
c001cc29:	01 1d e4 cf 03 c0    	add    DWORD PTR ds:0xc003cfe4,ebx
c001cc2f:	e8 5a 36 ff ff       	call   c001028e <VgaText::updateDiskUsage()>
c001cc34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc38:	eb 05                	jmp    c001cc3f <ATA::write(unsigned long long, int, void*)+0x61>
c001cc3a:	b8 01 00 00 00       	mov    eax,0x1
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	5b                   	pop    ebx
c001cc43:	5e                   	pop    esi
c001cc44:	5f                   	pop    edi
c001cc45:	c3                   	ret    

c001cc46 <ATA::detectCHS()>:
c001cc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc4a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cc50:	c1 e0 06             	shl    eax,0x6
c001cc53:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cc59:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cc63:	c7 44 24 04 2f a9 03 c0 	mov    DWORD PTR [esp+0x4],0xc003a92f
c001cc6b:	e9 0e 03 ff ff       	jmp    c000cf7e <panic(char const*)>

c001cc70 <ATA::open(int, int, void*)>:
c001cc70:	53                   	push   ebx
c001cc71:	83 ec 08             	sub    esp,0x8
c001cc74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc80:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc86:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc8c:	c1 e0 06             	shl    eax,0x6
c001cc8f:	01 d0                	add    eax,edx
c001cc91:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cc98:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cc9e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cca5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ccaf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ccb5:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ccbc:	75 0c                	jne    c001ccca <ATA::open(int, int, void*)+0x5a>
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	53                   	push   ebx
c001ccc2:	e8 7f ff ff ff       	call   c001cc46 <ATA::detectCHS()>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ccd0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ccd6:	c1 e0 06             	shl    eax,0x6
c001ccd9:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cce0:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ccea:	d1 e8                	shr    eax,1
c001ccec:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ccf2:	6a 04                	push   0x4
c001ccf4:	6a 0c                	push   0xc
c001ccf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccfd:	50                   	push   eax
c001ccfe:	52                   	push   edx
c001ccff:	e8 f4 ed ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd04:	90                   	nop
c001cd05:	90                   	nop
c001cd06:	6a 00                	push   0x0
c001cd08:	6a 0c                	push   0xc
c001cd0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd11:	50                   	push   eax
c001cd12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd18:	e8 db ed ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd1d:	83 c4 14             	add    esp,0x14
c001cd20:	53                   	push   ebx
c001cd21:	e8 62 6e ff ff       	call   c0013b88 <PhysicalDisk::startCache()>
c001cd26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd29:	e8 b2 86 ff ff       	call   c00153e0 <createPartitionsForDisk(PhysicalDisk*)>
c001cd2e:	31 c0                	xor    eax,eax
c001cd30:	83 c4 18             	add    esp,0x18
c001cd33:	5b                   	pop    ebx
c001cd34:	c3                   	ret    
c001cd35:	90                   	nop

c001cd36 <ATAPI::write(unsigned long long, int, void*)>:
c001cd36:	b8 03 00 00 00       	mov    eax,0x3
c001cd3b:	c3                   	ret    

c001cd3c <ATAPI::close(int, int, void*)>:
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd49:	85 c0                	test   eax,eax
c001cd4b:	74 0c                	je     c001cd59 <ATAPI::close(int, int, void*)+0x1d>
c001cd4d:	83 ec 0c             	sub    esp,0xc
c001cd50:	8b 10                	mov    edx,DWORD PTR [eax]
c001cd52:	50                   	push   eax
c001cd53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cd56:	83 c4 10             	add    esp,0x10
c001cd59:	31 c0                	xor    eax,eax
c001cd5b:	83 c4 0c             	add    esp,0xc
c001cd5e:	c3                   	ret    
c001cd5f:	90                   	nop

c001cd60 <ATAPI::ATAPI()>:
c001cd60:	83 ec 0c             	sub    esp,0xc
c001cd63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd67:	83 ec 04             	sub    esp,0x4
c001cd6a:	68 00 08 00 00       	push   0x800
c001cd6f:	68 78 a9 03 c0       	push   0xc003a978
c001cd74:	50                   	push   eax
c001cd75:	e8 a6 6d ff ff       	call   c0013b20 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd7a:	83 c4 10             	add    esp,0x10
c001cd7d:	ba b8 a9 03 c0       	mov    edx,0xc003a9b8
c001cd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd86:	89 10                	mov    DWORD PTR [eax],edx
c001cd88:	90                   	nop
c001cd89:	83 c4 0c             	add    esp,0xc
c001cd8c:	c3                   	ret    
c001cd8d:	90                   	nop

c001cd8e <ATAPI::readyForCommand()>:
c001cd8e:	56                   	push   esi
c001cd8f:	53                   	push   ebx
c001cd90:	31 db                	xor    ebx,ebx
c001cd92:	50                   	push   eax
c001cd93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd97:	50                   	push   eax
c001cd98:	6a 0c                	push   0xc
c001cd9a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cda1:	50                   	push   eax
c001cda2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cda8:	e8 0b ee ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001cdad:	83 c4 10             	add    esp,0x10
c001cdb0:	a8 88                	test   al,0x88
c001cdb2:	74 23                	je     c001cdd7 <ATAPI::readyForCommand()+0x49>
c001cdb4:	43                   	inc    ebx
c001cdb5:	83 fb 63             	cmp    ebx,0x63
c001cdb8:	7e dd                	jle    c001cd97 <ATAPI::readyForCommand()+0x9>
c001cdba:	51                   	push   ecx
c001cdbb:	51                   	push   ecx
c001cdbc:	6a 00                	push   0x0
c001cdbe:	68 40 42 0f 00       	push   0xf4240
c001cdc3:	e8 f3 1b ff ff       	call   c000e9bb <nanoSleep(unsigned long long)>
c001cdc8:	83 c4 10             	add    esp,0x10
c001cdcb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cdd1:	75 c4                	jne    c001cd97 <ATAPI::readyForCommand()+0x9>
c001cdd3:	31 c0                	xor    eax,eax
c001cdd5:	eb 02                	jmp    c001cdd9 <ATAPI::readyForCommand()+0x4b>
c001cdd7:	b0 01                	mov    al,0x1
c001cdd9:	5a                   	pop    edx
c001cdda:	5b                   	pop    ebx
c001cddb:	5e                   	pop    esi
c001cddc:	c3                   	ret    
c001cddd:	90                   	nop

c001cdde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cdde:	55                   	push   ebp
c001cddf:	57                   	push   edi
c001cde0:	56                   	push   esi
c001cde1:	53                   	push   ebx
c001cde2:	83 ec 20             	sub    esp,0x20
c001cde5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cde9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cded:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cdf1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cdf5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cdf9:	6a 01                	push   0x1
c001cdfb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce02:	50                   	push   eax
c001ce03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce09:	e8 f6 ee ff ff       	call   c001bd04 <IDE::enableIRQs(unsigned char, bool)>
c001ce0e:	5e                   	pop    esi
c001ce0f:	58                   	pop    eax
c001ce10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce17:	50                   	push   eax
c001ce18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce1e:	e8 af ec ff ff       	call   c001bad2 <IDE::prepareInterrupt(unsigned char)>
c001ce23:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce26:	e8 63 ff ff ff       	call   c001cd8e <ATAPI::readyForCommand()>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	84 c0                	test   al,al
c001ce30:	75 0a                	jne    c001ce3c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ce32:	bb 01 00 00 00       	mov    ebx,0x1
c001ce37:	e9 57 02 00 00       	jmp    c001d093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ce3c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ce42:	c1 e0 04             	shl    eax,0x4
c001ce45:	0f b6 c0             	movzx  eax,al
c001ce48:	50                   	push   eax
c001ce49:	6a 06                	push   0x6
c001ce4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce52:	50                   	push   eax
c001ce53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce59:	e8 9a ec ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5e:	6a 00                	push   0x0
c001ce60:	6a 01                	push   0x1
c001ce62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce69:	50                   	push   eax
c001ce6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce70:	e8 83 ec ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce75:	83 c4 20             	add    esp,0x20
c001ce78:	0f b6 c3             	movzx  eax,bl
c001ce7b:	0f b6 df             	movzx  ebx,bh
c001ce7e:	50                   	push   eax
c001ce7f:	6a 04                	push   0x4
c001ce81:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce88:	50                   	push   eax
c001ce89:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ce8f:	e8 64 ec ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce94:	53                   	push   ebx
c001ce95:	6a 05                	push   0x5
c001ce97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ce9e:	50                   	push   eax
c001ce9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cea5:	e8 4e ec ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceaa:	83 c4 20             	add    esp,0x20
c001cead:	68 a0 00 00 00       	push   0xa0
c001ceb2:	6a 07                	push   0x7
c001ceb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cebb:	50                   	push   eax
c001cebc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cec2:	e8 31 ec ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cec7:	83 c4 0c             	add    esp,0xc
c001ceca:	6a 01                	push   0x1
c001cecc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ced3:	50                   	push   eax
c001ced4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ceda:	e8 c5 f7 ff ff       	call   c001c6a4 <IDE::polling(unsigned char, unsigned int)>
c001cedf:	83 c4 10             	add    esp,0x10
c001cee2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cee8:	84 c0                	test   al,al
c001ceea:	74 23                	je     c001cf0f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ceec:	0f b6 d8             	movzx  ebx,al
c001ceef:	0f b6 d2             	movzx  edx,dl
c001cef2:	53                   	push   ebx
c001cef3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cefa:	50                   	push   eax
c001cefb:	52                   	push   edx
c001cefc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf02:	e8 07 f6 ff ff       	call   c001c50e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf07:	83 c4 10             	add    esp,0x10
c001cf0a:	e9 84 01 00 00       	jmp    c001d093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cf0f:	0f b6 d2             	movzx  edx,dl
c001cf12:	53                   	push   ebx
c001cf13:	53                   	push   ebx
c001cf14:	52                   	push   edx
c001cf15:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf1b:	e8 c6 eb ff ff       	call   c001bae6 <IDE::getBase(unsigned char)>
c001cf20:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cf24:	b9 06 00 00 00       	mov    ecx,0x6
c001cf29:	89 c2                	mov    edx,eax
c001cf2b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cf2e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cf32:	83 c4 10             	add    esp,0x10
c001cf35:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cf3b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cf42:	85 db                	test   ebx,ebx
c001cf44:	0f 84 ec 00 00 00    	je     c001d036 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cf4a:	51                   	push   ecx
c001cf4b:	51                   	push   ecx
c001cf4c:	52                   	push   edx
c001cf4d:	50                   	push   eax
c001cf4e:	e8 13 ed ff ff       	call   c001bc66 <IDE::waitInterrupt(unsigned char)>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	84 c0                	test   al,al
c001cf58:	0f 84 d4 fe ff ff    	je     c001ce32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001cf5e:	56                   	push   esi
c001cf5f:	56                   	push   esi
c001cf60:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf67:	50                   	push   eax
c001cf68:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf6e:	e8 5f eb ff ff       	call   c001bad2 <IDE::prepareInterrupt(unsigned char)>
c001cf73:	83 c4 0c             	add    esp,0xc
c001cf76:	6a 04                	push   0x4
c001cf78:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf7f:	50                   	push   eax
c001cf80:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf86:	e8 2d ec ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001cf8b:	83 c4 0c             	add    esp,0xc
c001cf8e:	89 c6                	mov    esi,eax
c001cf90:	6a 05                	push   0x5
c001cf92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf99:	50                   	push   eax
c001cf9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfa0:	e8 13 ec ff ff       	call   c001bbb8 <IDE::read(unsigned char, unsigned char)>
c001cfa5:	89 f1                	mov    ecx,esi
c001cfa7:	0f b6 c0             	movzx  eax,al
c001cfaa:	0f b6 f1             	movzx  esi,cl
c001cfad:	c1 e0 08             	shl    eax,0x8
c001cfb0:	09 c6                	or     esi,eax
c001cfb2:	d1 fe                	sar    esi,1
c001cfb4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001cfb8:	83 c4 10             	add    esp,0x10
c001cfbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cfc0:	74 41                	je     c001d003 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001cfc2:	31 c9                	xor    ecx,ecx
c001cfc4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cfca:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cfd1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001cfd5:	75 0a                	jne    c001cfe1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001cfd7:	01 c9                	add    ecx,ecx
c001cfd9:	01 cd                	add    ebp,ecx
c001cfdb:	4b                   	dec    ebx
c001cfdc:	e9 54 ff ff ff       	jmp    c001cf35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001cfe1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001cfe6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cfea:	51                   	push   ecx
c001cfeb:	51                   	push   ecx
c001cfec:	52                   	push   edx
c001cfed:	50                   	push   eax
c001cfee:	e8 f3 ea ff ff       	call   c001bae6 <IDE::getBase(unsigned char)>
c001cff3:	89 c2                	mov    edx,eax
c001cff5:	89 f0                	mov    eax,esi
c001cff7:	66 ef                	out    dx,ax
c001cff9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	41                   	inc    ecx
c001d001:	eb c1                	jmp    c001cfc4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d003:	31 f6                	xor    esi,esi
c001d005:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d00b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d012:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d016:	75 06                	jne    c001d01e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d018:	01 f6                	add    esi,esi
c001d01a:	01 f5                	add    ebp,esi
c001d01c:	eb bd                	jmp    c001cfdb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d01e:	51                   	push   ecx
c001d01f:	51                   	push   ecx
c001d020:	52                   	push   edx
c001d021:	50                   	push   eax
c001d022:	e8 bf ea ff ff       	call   c001bae6 <IDE::getBase(unsigned char)>
c001d027:	89 c2                	mov    edx,eax
c001d029:	66 ed                	in     ax,dx
c001d02b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d030:	83 c4 10             	add    esp,0x10
c001d033:	46                   	inc    esi
c001d034:	eb cf                	jmp    c001d005 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d036:	51                   	push   ecx
c001d037:	51                   	push   ecx
c001d038:	52                   	push   edx
c001d039:	50                   	push   eax
c001d03a:	e8 27 ec ff ff       	call   c001bc66 <IDE::waitInterrupt(unsigned char)>
c001d03f:	83 c4 10             	add    esp,0x10
c001d042:	84 c0                	test   al,al
c001d044:	0f 84 e8 fd ff ff    	je     c001ce32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d04a:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d04f:	52                   	push   edx
c001d050:	52                   	push   edx
c001d051:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d058:	50                   	push   eax
c001d059:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d05f:	e8 6e ea ff ff       	call   c001bad2 <IDE::prepareInterrupt(unsigned char)>
c001d064:	83 c4 10             	add    esp,0x10
c001d067:	50                   	push   eax
c001d068:	50                   	push   eax
c001d069:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d070:	50                   	push   eax
c001d071:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d077:	e8 6a ea ff ff       	call   c001bae6 <IDE::getBase(unsigned char)>
c001d07c:	8d 50 07             	lea    edx,[eax+0x7]
c001d07f:	ec                   	in     al,dx
c001d080:	83 c4 10             	add    esp,0x10
c001d083:	a8 88                	test   al,0x88
c001d085:	74 0a                	je     c001d091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d087:	4b                   	dec    ebx
c001d088:	75 dd                	jne    c001d067 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d08a:	bb 02 00 00 00       	mov    ebx,0x2
c001d08f:	eb 02                	jmp    c001d093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d091:	31 db                	xor    ebx,ebx
c001d093:	83 c4 1c             	add    esp,0x1c
c001d096:	89 d8                	mov    eax,ebx
c001d098:	5b                   	pop    ebx
c001d099:	5e                   	pop    esi
c001d09a:	5f                   	pop    edi
c001d09b:	5d                   	pop    ebp
c001d09c:	c3                   	ret    
c001d09d:	90                   	nop

c001d09e <ATAPI::diskRemoved()>:
c001d09e:	83 ec 18             	sub    esp,0x18
c001d0a1:	68 83 a9 03 c0       	push   0xc003a983
c001d0a6:	e8 b5 fd fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001d0ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0af:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d0b6:	83 c4 1c             	add    esp,0x1c
c001d0b9:	c3                   	ret    

c001d0ba <ATAPI::eject()>:
c001d0ba:	57                   	push   edi
c001d0bb:	b9 03 00 00 00       	mov    ecx,0x3
c001d0c0:	53                   	push   ebx
c001d0c1:	83 ec 14             	sub    esp,0x14
c001d0c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d0c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d0cc:	fc                   	cld    
c001d0cd:	31 c0                	xor    eax,eax
c001d0cf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d0d1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d0d6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d0db:	50                   	push   eax
c001d0dc:	50                   	push   eax
c001d0dd:	6a 00                	push   0x0
c001d0df:	6a 00                	push   0x0
c001d0e1:	6a 00                	push   0x0
c001d0e3:	6a 02                	push   0x2
c001d0e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d0e9:	50                   	push   eax
c001d0ea:	53                   	push   ebx
c001d0eb:	e8 ee fc ff ff       	call   c001cdde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d0f0:	83 c4 14             	add    esp,0x14
c001d0f3:	53                   	push   ebx
c001d0f4:	e8 a5 ff ff ff       	call   c001d09e <ATAPI::diskRemoved()>
c001d0f9:	83 c4 24             	add    esp,0x24
c001d0fc:	5b                   	pop    ebx
c001d0fd:	5f                   	pop    edi
c001d0fe:	c3                   	ret    
c001d0ff:	90                   	nop

c001d100 <ATAPI::diskInserted()>:
c001d100:	53                   	push   ebx
c001d101:	83 ec 14             	sub    esp,0x14
c001d104:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d108:	68 99 a9 03 c0       	push   0xc003a999
c001d10d:	e8 4e fd fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001d112:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d119:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d11c:	e8 67 6a ff ff       	call   c0013b88 <PhysicalDisk::startCache()>
c001d121:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d125:	83 c4 18             	add    esp,0x18
c001d128:	5b                   	pop    ebx
c001d129:	e9 b2 82 ff ff       	jmp    c00153e0 <createPartitionsForDisk(PhysicalDisk*)>

c001d12e <ATAPI::detectMedia()>:
c001d12e:	56                   	push   esi
c001d12f:	53                   	push   ebx
c001d130:	83 ec 28             	sub    esp,0x28
c001d133:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d137:	6a 0c                	push   0xc
c001d139:	6a 00                	push   0x0
c001d13b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d13f:	56                   	push   esi
c001d140:	e8 93 35 fe ff       	call   c00006d8 <memset>
c001d145:	58                   	pop    eax
c001d146:	5a                   	pop    edx
c001d147:	6a 00                	push   0x0
c001d149:	6a 00                	push   0x0
c001d14b:	6a 00                	push   0x0
c001d14d:	6a 00                	push   0x0
c001d14f:	56                   	push   esi
c001d150:	53                   	push   ebx
c001d151:	e8 88 fc ff ff       	call   c001cdde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d156:	83 c4 1c             	add    esp,0x1c
c001d159:	6a 0c                	push   0xc
c001d15b:	6a 00                	push   0x0
c001d15d:	56                   	push   esi
c001d15e:	e8 75 35 fe ff       	call   c00006d8 <memset>
c001d163:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d168:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d16d:	59                   	pop    ecx
c001d16e:	58                   	pop    eax
c001d16f:	6a 01                	push   0x1
c001d171:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d175:	50                   	push   eax
c001d176:	6a 00                	push   0x0
c001d178:	6a 12                	push   0x12
c001d17a:	56                   	push   esi
c001d17b:	53                   	push   ebx
c001d17c:	e8 5d fc ff ff       	call   c001cdde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d181:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d185:	83 c4 20             	add    esp,0x20
c001d188:	83 e0 7f             	and    eax,0x7f
c001d18b:	3c 70                	cmp    al,0x70
c001d18d:	74 15                	je     c001d1a4 <ATAPI::detectMedia()+0x76>
c001d18f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d196:	75 0c                	jne    c001d1a4 <ATAPI::detectMedia()+0x76>
c001d198:	83 ec 0c             	sub    esp,0xc
c001d19b:	53                   	push   ebx
c001d19c:	e8 5f ff ff ff       	call   c001d100 <ATAPI::diskInserted()>
c001d1a1:	83 c4 10             	add    esp,0x10
c001d1a4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d1a8:	83 e0 0f             	and    eax,0xf
c001d1ab:	3c 02                	cmp    al,0x2
c001d1ad:	75 1b                	jne    c001d1ca <ATAPI::detectMedia()+0x9c>
c001d1af:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d1b4:	75 2d                	jne    c001d1e3 <ATAPI::detectMedia()+0xb5>
c001d1b6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d1bd:	74 24                	je     c001d1e3 <ATAPI::detectMedia()+0xb5>
c001d1bf:	83 ec 0c             	sub    esp,0xc
c001d1c2:	53                   	push   ebx
c001d1c3:	e8 d6 fe ff ff       	call   c001d09e <ATAPI::diskRemoved()>
c001d1c8:	eb 16                	jmp    c001d1e0 <ATAPI::detectMedia()+0xb2>
c001d1ca:	84 c0                	test   al,al
c001d1cc:	75 15                	jne    c001d1e3 <ATAPI::detectMedia()+0xb5>
c001d1ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d1d5:	75 0c                	jne    c001d1e3 <ATAPI::detectMedia()+0xb5>
c001d1d7:	83 ec 0c             	sub    esp,0xc
c001d1da:	53                   	push   ebx
c001d1db:	e8 20 ff ff ff       	call   c001d100 <ATAPI::diskInserted()>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	83 c4 24             	add    esp,0x24
c001d1e6:	5b                   	pop    ebx
c001d1e7:	5e                   	pop    esi
c001d1e8:	c3                   	ret    
c001d1e9:	90                   	nop

c001d1ea <ATAPI::open(int, int, void*)>:
c001d1ea:	53                   	push   ebx
c001d1eb:	83 ec 08             	sub    esp,0x8
c001d1ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1fa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d200:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d206:	c1 e0 06             	shl    eax,0x6
c001d209:	01 d0                	add    eax,edx
c001d20b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d212:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d218:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d21f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d229:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d22f:	6a 04                	push   0x4
c001d231:	6a 0c                	push   0xc
c001d233:	51                   	push   ecx
c001d234:	52                   	push   edx
c001d235:	e8 be e8 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d23a:	90                   	nop
c001d23b:	90                   	nop
c001d23c:	6a 00                	push   0x0
c001d23e:	6a 0c                	push   0xc
c001d240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d247:	50                   	push   eax
c001d248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d24e:	e8 a5 e8 ff ff       	call   c001baf8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d253:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d25a:	83 c4 14             	add    esp,0x14
c001d25d:	53                   	push   ebx
c001d25e:	e8 cb fe ff ff       	call   c001d12e <ATAPI::detectMedia()>
c001d263:	31 c0                	xor    eax,eax
c001d265:	83 c4 18             	add    esp,0x18
c001d268:	5b                   	pop    ebx
c001d269:	c3                   	ret    

c001d26a <ATAPI::read(unsigned long long, int, void*)>:
c001d26a:	55                   	push   ebp
c001d26b:	57                   	push   edi
c001d26c:	56                   	push   esi
c001d26d:	53                   	push   ebx
c001d26e:	83 ec 1c             	sub    esp,0x1c
c001d271:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d275:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d279:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d27d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d284:	74 41                	je     c001d2c7 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d286:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d28a:	b9 03 00 00 00       	mov    ecx,0x3
c001d28f:	fc                   	cld    
c001d290:	31 c0                	xor    eax,eax
c001d292:	86 fb                	xchg   bl,bh
c001d294:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d296:	c1 c3 10             	rol    ebx,0x10
c001d299:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d29e:	89 e8                	mov    eax,ebp
c001d2a0:	86 fb                	xchg   bl,bh
c001d2a2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d2a6:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d2aa:	50                   	push   eax
c001d2ab:	50                   	push   eax
c001d2ac:	55                   	push   ebp
c001d2ad:	c1 e5 0b             	shl    ebp,0xb
c001d2b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d2b4:	6a 00                	push   0x0
c001d2b6:	55                   	push   ebp
c001d2b7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2bb:	50                   	push   eax
c001d2bc:	56                   	push   esi
c001d2bd:	e8 1c fb ff ff       	call   c001cdde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d2c2:	83 c4 20             	add    esp,0x20
c001d2c5:	eb 1a                	jmp    c001d2e1 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d2c7:	83 ec 0c             	sub    esp,0xc
c001d2ca:	56                   	push   esi
c001d2cb:	e8 5e fe ff ff       	call   c001d12e <ATAPI::detectMedia()>
c001d2d0:	83 c4 10             	add    esp,0x10
c001d2d3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d2da:	75 aa                	jne    c001d286 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d2dc:	b8 02 00 00 00       	mov    eax,0x2
c001d2e1:	83 c4 1c             	add    esp,0x1c
c001d2e4:	5b                   	pop    ebx
c001d2e5:	5e                   	pop    esi
c001d2e6:	5f                   	pop    edi
c001d2e7:	5d                   	pop    ebp
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <AVX::open(int, int, void*)>:
c001d2ea:	83 ec 0c             	sub    esp,0xc
c001d2ed:	e8 06 10 00 00       	call   c001e2f8 <avxInit>
c001d2f2:	b8 00 00 00 00       	mov    eax,0x0
c001d2f7:	83 c4 0c             	add    esp,0xc
c001d2fa:	c3                   	ret    
c001d2fb:	90                   	nop

c001d2fc <AVX::close(int, int, void*)>:
c001d2fc:	83 ec 0c             	sub    esp,0xc
c001d2ff:	e8 f5 0f 00 00       	call   c001e2f9 <avxClose>
c001d304:	b8 00 00 00 00       	mov    eax,0x0
c001d309:	83 c4 0c             	add    esp,0xc
c001d30c:	c3                   	ret    
c001d30d:	90                   	nop

c001d30e <AVX::available()>:
c001d30e:	83 ec 0c             	sub    esp,0xc
c001d311:	e8 da 0f 00 00       	call   c001e2f0 <avxDetect>
c001d316:	85 c0                	test   eax,eax
c001d318:	0f 95 c0             	setne  al
c001d31b:	83 c4 0c             	add    esp,0xc
c001d31e:	c3                   	ret    
c001d31f:	90                   	nop

c001d320 <AVX::save(void*)>:
c001d320:	83 ec 0c             	sub    esp,0xc
c001d323:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d327:	83 ec 0c             	sub    esp,0xc
c001d32a:	50                   	push   eax
c001d32b:	e8 c6 0f 00 00       	call   c001e2f6 <avxSave>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	90                   	nop
c001d334:	83 c4 0c             	add    esp,0xc
c001d337:	c3                   	ret    

c001d338 <AVX::load(void*)>:
c001d338:	83 ec 0c             	sub    esp,0xc
c001d33b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d33f:	83 ec 0c             	sub    esp,0xc
c001d342:	50                   	push   eax
c001d343:	e8 af 0f 00 00       	call   c001e2f7 <avxLoad>
c001d348:	83 c4 10             	add    esp,0x10
c001d34b:	90                   	nop
c001d34c:	83 c4 0c             	add    esp,0xc
c001d34f:	c3                   	ret    

c001d350 <AVX::AVX()>:
c001d350:	83 ec 0c             	sub    esp,0xc
c001d353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d357:	83 ec 08             	sub    esp,0x8
c001d35a:	68 e4 a9 03 c0       	push   0xc003a9e4
c001d35f:	50                   	push   eax
c001d360:	e8 99 68 ff ff       	call   c0013bfe <FPU::FPU(char const*)>
c001d365:	83 c4 10             	add    esp,0x10
c001d368:	ba f4 a9 03 c0       	mov    edx,0xc003a9f4
c001d36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d371:	89 10                	mov    DWORD PTR [eax],edx
c001d373:	90                   	nop
c001d374:	83 c4 0c             	add    esp,0xc
c001d377:	c3                   	ret    

c001d378 <MMX::available()>:
c001d378:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001d37d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d383:	83 e0 20             	and    eax,0x20
c001d386:	84 c0                	test   al,al
c001d388:	0f 95 c0             	setne  al
c001d38b:	c3                   	ret    

c001d38c <MMX::open(int, int, void*)>:
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	e8 d8 0f 00 00       	call   c001e36c <x87Init>
c001d394:	b8 00 00 00 00       	mov    eax,0x0
c001d399:	83 c4 0c             	add    esp,0xc
c001d39c:	c3                   	ret    
c001d39d:	90                   	nop

c001d39e <MMX::close(int, int, void*)>:
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	e8 e0 0f 00 00       	call   c001e386 <x87Close>
c001d3a6:	b8 00 00 00 00       	mov    eax,0x0
c001d3ab:	83 c4 0c             	add    esp,0xc
c001d3ae:	c3                   	ret    
c001d3af:	90                   	nop

c001d3b0 <MMX::save(void*)>:
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3b7:	83 ec 0c             	sub    esp,0xc
c001d3ba:	50                   	push   eax
c001d3bb:	e8 a1 0f 00 00       	call   c001e361 <x87Save>
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	90                   	nop
c001d3c4:	83 c4 0c             	add    esp,0xc
c001d3c7:	c3                   	ret    

c001d3c8 <MMX::load(void*)>:
c001d3c8:	83 ec 0c             	sub    esp,0xc
c001d3cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3cf:	83 ec 0c             	sub    esp,0xc
c001d3d2:	50                   	push   eax
c001d3d3:	e8 8f 0f 00 00       	call   c001e367 <x87Load>
c001d3d8:	83 c4 10             	add    esp,0x10
c001d3db:	90                   	nop
c001d3dc:	83 c4 0c             	add    esp,0xc
c001d3df:	c3                   	ret    

c001d3e0 <MMX::MMX()>:
c001d3e0:	83 ec 0c             	sub    esp,0xc
c001d3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e7:	83 ec 08             	sub    esp,0x8
c001d3ea:	68 24 aa 03 c0       	push   0xc003aa24
c001d3ef:	50                   	push   eax
c001d3f0:	e8 09 68 ff ff       	call   c0013bfe <FPU::FPU(char const*)>
c001d3f5:	83 c4 10             	add    esp,0x10
c001d3f8:	ba 34 aa 03 c0       	mov    edx,0xc003aa34
c001d3fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d401:	89 10                	mov    DWORD PTR [eax],edx
c001d403:	90                   	nop
c001d404:	83 c4 0c             	add    esp,0xc
c001d407:	c3                   	ret    

c001d408 <SSE::open(int, int, void*)>:
c001d408:	83 ec 0c             	sub    esp,0xc
c001d40b:	e8 17 0f 00 00       	call   c001e327 <sseInit>
c001d410:	b8 00 00 00 00       	mov    eax,0x0
c001d415:	83 c4 0c             	add    esp,0xc
c001d418:	c3                   	ret    
c001d419:	90                   	nop

c001d41a <SSE::close(int, int, void*)>:
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	e8 15 0f 00 00       	call   c001e337 <sseClose>
c001d422:	b8 00 00 00 00       	mov    eax,0x0
c001d427:	83 c4 0c             	add    esp,0xc
c001d42a:	c3                   	ret    
c001d42b:	90                   	nop

c001d42c <SSE::available()>:
c001d42c:	83 ec 1c             	sub    esp,0x1c
c001d42f:	e8 cc 0e 00 00       	call   c001e300 <sseDetect>
c001d434:	85 c0                	test   eax,eax
c001d436:	0f 95 c0             	setne  al
c001d439:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d43d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d441:	83 c4 1c             	add    esp,0x1c
c001d444:	c3                   	ret    
c001d445:	90                   	nop

c001d446 <SSE::save(void*)>:
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d44d:	83 ec 0c             	sub    esp,0xc
c001d450:	50                   	push   eax
c001d451:	e8 c5 0e 00 00       	call   c001e31b <sseSave>
c001d456:	83 c4 10             	add    esp,0x10
c001d459:	90                   	nop
c001d45a:	83 c4 0c             	add    esp,0xc
c001d45d:	c3                   	ret    

c001d45e <SSE::load(void*)>:
c001d45e:	83 ec 0c             	sub    esp,0xc
c001d461:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d465:	83 ec 0c             	sub    esp,0xc
c001d468:	50                   	push   eax
c001d469:	e8 b3 0e 00 00       	call   c001e321 <sseLoad>
c001d46e:	83 c4 10             	add    esp,0x10
c001d471:	90                   	nop
c001d472:	83 c4 0c             	add    esp,0xc
c001d475:	c3                   	ret    

c001d476 <SSE::SSE()>:
c001d476:	83 ec 0c             	sub    esp,0xc
c001d479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d47d:	83 ec 08             	sub    esp,0x8
c001d480:	68 64 aa 03 c0       	push   0xc003aa64
c001d485:	50                   	push   eax
c001d486:	e8 73 67 ff ff       	call   c0013bfe <FPU::FPU(char const*)>
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	ba 74 aa 03 c0       	mov    edx,0xc003aa74
c001d493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d497:	89 10                	mov    DWORD PTR [eax],edx
c001d499:	90                   	nop
c001d49a:	83 c4 0c             	add    esp,0xc
c001d49d:	c3                   	ret    

c001d49e <x87::open(int, int, void*)>:
c001d49e:	83 ec 0c             	sub    esp,0xc
c001d4a1:	e8 c6 0e 00 00       	call   c001e36c <x87Init>
c001d4a6:	b8 00 00 00 00       	mov    eax,0x0
c001d4ab:	83 c4 0c             	add    esp,0xc
c001d4ae:	c3                   	ret    
c001d4af:	90                   	nop

c001d4b0 <x87::close(int, int, void*)>:
c001d4b0:	83 ec 0c             	sub    esp,0xc
c001d4b3:	e8 ce 0e 00 00       	call   c001e386 <x87Close>
c001d4b8:	b8 00 00 00 00       	mov    eax,0x0
c001d4bd:	83 c4 0c             	add    esp,0xc
c001d4c0:	c3                   	ret    
c001d4c1:	90                   	nop

c001d4c2 <x87::available()>:
c001d4c2:	83 ec 0c             	sub    esp,0xc
c001d4c5:	e8 7c 0e 00 00       	call   c001e346 <x87Detect>
c001d4ca:	85 c0                	test   eax,eax
c001d4cc:	0f 95 c0             	setne  al
c001d4cf:	83 c4 0c             	add    esp,0xc
c001d4d2:	c3                   	ret    
c001d4d3:	90                   	nop

c001d4d4 <x87::save(void*)>:
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4db:	83 ec 0c             	sub    esp,0xc
c001d4de:	50                   	push   eax
c001d4df:	e8 7d 0e 00 00       	call   c001e361 <x87Save>
c001d4e4:	83 c4 10             	add    esp,0x10
c001d4e7:	90                   	nop
c001d4e8:	83 c4 0c             	add    esp,0xc
c001d4eb:	c3                   	ret    

c001d4ec <x87::load(void*)>:
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4f3:	83 ec 0c             	sub    esp,0xc
c001d4f6:	50                   	push   eax
c001d4f7:	e8 6b 0e 00 00       	call   c001e367 <x87Load>
c001d4fc:	83 c4 10             	add    esp,0x10
c001d4ff:	90                   	nop
c001d500:	83 c4 0c             	add    esp,0xc
c001d503:	c3                   	ret    

c001d504 <x87::x87()>:
c001d504:	83 ec 0c             	sub    esp,0xc
c001d507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50b:	83 ec 08             	sub    esp,0x8
c001d50e:	68 a4 aa 03 c0       	push   0xc003aaa4
c001d513:	50                   	push   eax
c001d514:	e8 e5 66 ff ff       	call   c0013bfe <FPU::FPU(char const*)>
c001d519:	83 c4 10             	add    esp,0x10
c001d51c:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001d521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d525:	89 10                	mov    DWORD PTR [eax],edx
c001d527:	90                   	nop
c001d528:	83 c4 0c             	add    esp,0xc
c001d52b:	c3                   	ret    

c001d52c <APIC::disable()>:
c001d52c:	90                   	nop
c001d52d:	c3                   	ret    

c001d52e <APIC::close(int, int, void*)>:
c001d52e:	55                   	push   ebp
c001d52f:	89 e5                	mov    ebp,esp
c001d531:	83 ec 08             	sub    esp,0x8
c001d534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d537:	8b 00                	mov    eax,DWORD PTR [eax]
c001d539:	83 c0 3c             	add    eax,0x3c
c001d53c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d53e:	83 ec 0c             	sub    esp,0xc
c001d541:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d544:	ff d0                	call   eax
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	b8 00 00 00 00       	mov    eax,0x0
c001d54e:	c9                   	leave  
c001d54f:	c3                   	ret    

c001d550 <IOAPIC::close(int, int, void*)>:
c001d550:	b8 00 00 00 00       	mov    eax,0x0
c001d555:	c3                   	ret    

c001d556 <APIC::io_wait()>:
c001d556:	eb 00                	jmp    c001d558 <APIC::io_wait()+0x2>
c001d558:	eb 00                	jmp    c001d55a <APIC::io_wait()+0x4>
c001d55a:	90                   	nop
c001d55b:	c3                   	ret    

c001d55c <APIC::getBase()>:
c001d55c:	55                   	push   ebp
c001d55d:	89 e5                	mov    ebp,esp
c001d55f:	83 ec 18             	sub    esp,0x18
c001d562:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001d567:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d56d:	83 e0 08             	and    eax,0x8
c001d570:	84 c0                	test   al,al
c001d572:	75 07                	jne    c001d57b <APIC::getBase()+0x1f>
c001d574:	b8 00 00 00 00       	mov    eax,0x0
c001d579:	eb 21                	jmp    c001d59c <APIC::getBase()+0x40>
c001d57b:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001d580:	83 ec 08             	sub    esp,0x8
c001d583:	6a 1b                	push   0x1b
c001d585:	50                   	push   eax
c001d586:	e8 5d e0 fe ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001d58b:	83 c4 10             	add    esp,0x10
c001d58e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d591:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d594:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d597:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d59c:	c9                   	leave  
c001d59d:	c3                   	ret    

c001d59e <APIC::eoi(unsigned char)>:
c001d59e:	55                   	push   ebp
c001d59f:	89 e5                	mov    ebp,esp
c001d5a1:	83 ec 28             	sub    esp,0x28
c001d5a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d5a7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d5aa:	83 ec 0c             	sub    esp,0xc
c001d5ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5b0:	e8 a7 ff ff ff       	call   c001d55c <APIC::getBase()>
c001d5b5:	83 c4 10             	add    esp,0x10
c001d5b8:	05 b0 00 00 00       	add    eax,0xb0
c001d5bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d5c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d5c3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d5c9:	90                   	nop
c001d5ca:	c9                   	leave  
c001d5cb:	c3                   	ret    

c001d5cc <APIC::open(int, int, void*)>:
c001d5cc:	55                   	push   ebp
c001d5cd:	89 e5                	mov    ebp,esp
c001d5cf:	57                   	push   edi
c001d5d0:	56                   	push   esi
c001d5d1:	53                   	push   ebx
c001d5d2:	83 ec 1c             	sub    esp,0x1c
c001d5d5:	83 ec 0c             	sub    esp,0xc
c001d5d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5db:	e8 7c ff ff ff       	call   c001d55c <APIC::getBase()>
c001d5e0:	83 c4 10             	add    esp,0x10
c001d5e3:	05 f0 00 00 00       	add    eax,0xf0
c001d5e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d5eb:	83 ec 0c             	sub    esp,0xc
c001d5ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5f1:	e8 66 ff ff ff       	call   c001d55c <APIC::getBase()>
c001d5f6:	83 c4 10             	add    esp,0x10
c001d5f9:	89 c2                	mov    edx,eax
c001d5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5fe:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d604:	0f b6 f8             	movzx  edi,al
c001d607:	89 d0                	mov    eax,edx
c001d609:	ba 00 00 00 00       	mov    edx,0x0
c001d60e:	89 c1                	mov    ecx,eax
c001d610:	80 e5 ff             	and    ch,0xff
c001d613:	89 cb                	mov    ebx,ecx
c001d615:	0f b6 f2             	movzx  esi,dl
c001d618:	89 d8                	mov    eax,ebx
c001d61a:	89 f2                	mov    edx,esi
c001d61c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d61f:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d622:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d626:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d62a:	83 e0 00             	and    eax,0x0
c001d62d:	09 d0                	or     eax,edx
c001d62f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d636:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d63c:	8d 50 01             	lea    edx,[eax+0x1]
c001d63f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d642:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d648:	0f b6 d0             	movzx  edx,al
c001d64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d64e:	83 c2 08             	add    edx,0x8
c001d651:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d655:	0f b6 c9             	movzx  ecx,cl
c001d658:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d65e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d662:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d665:	8b 00                	mov    eax,DWORD PTR [eax]
c001d667:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d66a:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d671:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d674:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d677:	89 10                	mov    DWORD PTR [eax],edx
c001d679:	b8 00 00 00 00       	mov    eax,0x0
c001d67e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d681:	5b                   	pop    ebx
c001d682:	5e                   	pop    esi
c001d683:	5f                   	pop    edi
c001d684:	5d                   	pop    ebp
c001d685:	c3                   	ret    

c001d686 <IOAPIC::IOAPIC()>:
c001d686:	83 ec 0c             	sub    esp,0xc
c001d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d68d:	83 ec 08             	sub    esp,0x8
c001d690:	68 e4 aa 03 c0       	push   0xc003aae4
c001d695:	50                   	push   eax
c001d696:	e8 6f 62 ff ff       	call   c001390a <Device::Device(char const*)>
c001d69b:	83 c4 10             	add    esp,0x10
c001d69e:	ba 0c ac 03 c0       	mov    edx,0xc003ac0c
c001d6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a7:	89 10                	mov    DWORD PTR [eax],edx
c001d6a9:	90                   	nop
c001d6aa:	83 c4 0c             	add    esp,0xc
c001d6ad:	c3                   	ret    

c001d6ae <APIC::APIC()>:
c001d6ae:	53                   	push   ebx
c001d6af:	83 ec 18             	sub    esp,0x18
c001d6b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b6:	83 ec 08             	sub    esp,0x8
c001d6b9:	68 ec aa 03 c0       	push   0xc003aaec
c001d6be:	50                   	push   eax
c001d6bf:	e8 6e 69 ff ff       	call   c0014032 <InterruptController::InterruptController(char const*)>
c001d6c4:	83 c4 10             	add    esp,0x10
c001d6c7:	ba c4 ab 03 c0       	mov    edx,0xc003abc4
c001d6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6d0:	89 10                	mov    DWORD PTR [eax],edx
c001d6d2:	a0 40 d0 03 c0       	mov    al,ds:0xc003d040
c001d6d7:	83 f0 01             	xor    eax,0x1
c001d6da:	84 c0                	test   al,al
c001d6dc:	0f 84 96 00 00 00    	je     c001d778 <APIC::APIC()+0xca>
c001d6e2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d6e7:	a0 10 c5 03 c0       	mov    al,ds:0xc003c510
c001d6ec:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d6f0:	73 7f                	jae    c001d771 <APIC::APIC()+0xc3>
c001d6f2:	83 ec 0c             	sub    esp,0xc
c001d6f5:	68 68 01 00 00       	push   0x168
c001d6fa:	e8 11 4d ff ff       	call   c0012410 <operator new(unsigned long)>
c001d6ff:	83 c4 10             	add    esp,0x10
c001d702:	89 c3                	mov    ebx,eax
c001d704:	83 ec 0c             	sub    esp,0xc
c001d707:	53                   	push   ebx
c001d708:	e8 79 ff ff ff       	call   c001d686 <IOAPIC::IOAPIC()>
c001d70d:	83 c4 10             	add    esp,0x10
c001d710:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d714:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d719:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d71d:	89 14 85 20 d0 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2fe0],edx
c001d724:	a1 00 d0 03 c0       	mov    eax,ds:0xc003d000
c001d729:	40                   	inc    eax
c001d72a:	a3 00 d0 03 c0       	mov    ds:0xc003d000,eax
c001d72f:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c001d734:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d73a:	83 ec 08             	sub    esp,0x8
c001d73d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d741:	50                   	push   eax
c001d742:	e8 d3 5f ff ff       	call   c001371a <Device::addChild(Device*)>
c001d747:	83 c4 10             	add    esp,0x10
c001d74a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d74e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d750:	83 c0 08             	add    eax,0x8
c001d753:	8b 00                	mov    eax,DWORD PTR [eax]
c001d755:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d75a:	6a 00                	push   0x0
c001d75c:	6a 00                	push   0x0
c001d75e:	52                   	push   edx
c001d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d763:	ff d0                	call   eax
c001d765:	83 c4 10             	add    esp,0x10
c001d768:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d76c:	e9 76 ff ff ff       	jmp    c001d6e7 <APIC::APIC()+0x39>
c001d771:	c6 05 40 d0 03 c0 01 	mov    BYTE PTR ds:0xc003d040,0x1
c001d778:	90                   	nop
c001d779:	83 c4 18             	add    esp,0x18
c001d77c:	5b                   	pop    ebx
c001d77d:	c3                   	ret    

c001d77e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d77e:	55                   	push   ebp
c001d77f:	89 e5                	mov    ebp,esp
c001d781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d784:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d78a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d78d:	72 1d                	jb     c001d7ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d78f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d792:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d79b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d7a1:	01 d0                	add    eax,edx
c001d7a3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d7a6:	73 04                	jae    c001d7ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d7a8:	b0 01                	mov    al,0x1
c001d7aa:	eb 02                	jmp    c001d7ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d7ac:	b0 00                	mov    al,0x0
c001d7ae:	5d                   	pop    ebp
c001d7af:	c3                   	ret    

c001d7b0 <IOAPIC::read(int)>:
c001d7b0:	55                   	push   ebp
c001d7b1:	89 e5                	mov    ebp,esp
c001d7b3:	83 ec 10             	sub    esp,0x10
c001d7b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d7bf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d7c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d7c5:	0f b6 d0             	movzx  edx,al
c001d7c8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d7cb:	89 10                	mov    DWORD PTR [eax],edx
c001d7cd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d7d0:	83 c0 10             	add    eax,0x10
c001d7d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7d5:	c9                   	leave  
c001d7d6:	c3                   	ret    
c001d7d7:	90                   	nop

c001d7d8 <IOAPIC::open(int, int, void*)>:
c001d7d8:	55                   	push   ebp
c001d7d9:	89 e5                	mov    ebp,esp
c001d7db:	57                   	push   edi
c001d7dc:	56                   	push   esi
c001d7dd:	53                   	push   ebx
c001d7de:	83 ec 0c             	sub    esp,0xc
c001d7e1:	83 ec 0c             	sub    esp,0xc
c001d7e4:	68 17 ab 03 c0       	push   0xc003ab17
c001d7e9:	e8 72 f6 fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001d7ee:	83 c4 10             	add    esp,0x10
c001d7f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d7f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d7fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d800:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d806:	8b 14 85 40 c5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3ac0]
c001d80d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d810:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d819:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d81f:	8b 14 85 c0 c5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3a40]
c001d826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d829:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d82f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d832:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d83b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d841:	0f b6 f8             	movzx  edi,al
c001d844:	89 d0                	mov    eax,edx
c001d846:	ba 00 00 00 00       	mov    edx,0x0
c001d84b:	89 c1                	mov    ecx,eax
c001d84d:	80 e5 ff             	and    ch,0xff
c001d850:	89 cb                	mov    ebx,ecx
c001d852:	0f b6 f2             	movzx  esi,dl
c001d855:	89 d8                	mov    eax,ebx
c001d857:	89 f2                	mov    edx,esi
c001d859:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d85c:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d85f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d863:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d867:	83 e0 00             	and    eax,0x0
c001d86a:	09 d0                	or     eax,edx
c001d86c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d873:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d879:	8d 50 01             	lea    edx,[eax+0x1]
c001d87c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d87f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d885:	0f b6 d0             	movzx  edx,al
c001d888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d88b:	83 c2 08             	add    edx,0x8
c001d88e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d892:	0f b6 c9             	movzx  ecx,cl
c001d895:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d89b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d89f:	83 ec 08             	sub    esp,0x8
c001d8a2:	6a 01                	push   0x1
c001d8a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8a7:	e8 04 ff ff ff       	call   c001d7b0 <IOAPIC::read(int)>
c001d8ac:	83 c4 10             	add    esp,0x10
c001d8af:	c1 f8 10             	sar    eax,0x10
c001d8b2:	0f b6 c0             	movzx  eax,al
c001d8b5:	8d 50 01             	lea    edx,[eax+0x1]
c001d8b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8bb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d8c1:	b8 00 00 00 00       	mov    eax,0x0
c001d8c6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d8c9:	5b                   	pop    ebx
c001d8ca:	5e                   	pop    esi
c001d8cb:	5f                   	pop    edi
c001d8cc:	5d                   	pop    ebp
c001d8cd:	c3                   	ret    

c001d8ce <IOAPIC::write(int, int)>:
c001d8ce:	55                   	push   ebp
c001d8cf:	89 e5                	mov    ebp,esp
c001d8d1:	83 ec 10             	sub    esp,0x10
c001d8d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d8dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d8e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d8e3:	0f b6 d0             	movzx  edx,al
c001d8e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8e9:	89 10                	mov    DWORD PTR [eax],edx
c001d8eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d8ee:	8d 50 10             	lea    edx,[eax+0x10]
c001d8f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d8f4:	89 02                	mov    DWORD PTR [edx],eax
c001d8f6:	90                   	nop
c001d8f7:	c9                   	leave  
c001d8f8:	c3                   	ret    
c001d8f9:	90                   	nop

c001d8fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d8fa:	55                   	push   ebp
c001d8fb:	89 e5                	mov    ebp,esp
c001d8fd:	83 ec 20             	sub    esp,0x20
c001d900:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d903:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d906:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d909:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d90c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d90f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d912:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d915:	88 d0                	mov    al,dl
c001d917:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d91a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d91e:	83 c0 08             	add    eax,0x8
c001d921:	01 c0                	add    eax,eax
c001d923:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d926:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d92a:	83 c0 08             	add    eax,0x8
c001d92d:	01 c0                	add    eax,eax
c001d92f:	40                   	inc    eax
c001d930:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d933:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d936:	50                   	push   eax
c001d937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d93a:	e8 71 fe ff ff       	call   c001d7b0 <IOAPIC::read(int)>
c001d93f:	83 c4 08             	add    esp,0x8
c001d942:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d945:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d94c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d94f:	c1 e0 18             	shl    eax,0x18
c001d952:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d955:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d958:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d95b:	52                   	push   edx
c001d95c:	50                   	push   eax
c001d95d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d960:	e8 69 ff ff ff       	call   c001d8ce <IOAPIC::write(int, int)>
c001d965:	83 c4 0c             	add    esp,0xc
c001d968:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d96b:	50                   	push   eax
c001d96c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d96f:	e8 3c fe ff ff       	call   c001d7b0 <IOAPIC::read(int)>
c001d974:	83 c4 08             	add    esp,0x8
c001d977:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d97a:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d981:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d988:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d98f:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d996:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d99a:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d99d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d9a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9a3:	52                   	push   edx
c001d9a4:	50                   	push   eax
c001d9a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9a8:	e8 21 ff ff ff       	call   c001d8ce <IOAPIC::write(int, int)>
c001d9ad:	83 c4 0c             	add    esp,0xc
c001d9b0:	90                   	nop
c001d9b1:	c9                   	leave  
c001d9b2:	c3                   	ret    
c001d9b3:	90                   	nop

c001d9b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d9b4:	55                   	push   ebp
c001d9b5:	89 e5                	mov    ebp,esp
c001d9b7:	56                   	push   esi
c001d9b8:	53                   	push   ebx
c001d9b9:	83 ec 20             	sub    esp,0x20
c001d9bc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9bf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d9c2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d9c6:	74 28                	je     c001d9f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d9c8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d9cc:	7f 12                	jg     c001d9e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d9ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9d1:	05 60 b0 03 c0       	add    eax,0xc003b060
c001d9d6:	8a 00                	mov    al,BYTE PTR [eax]
c001d9d8:	0f b6 c0             	movzx  eax,al
c001d9db:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d9de:	eb 10                	jmp    c001d9f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	68 28 ab 03 c0       	push   0xc003ab28
c001d9e8:	e8 91 f5 fe ff       	call   c000cf7e <panic(char const*)>
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d9f4:	a1 00 d0 03 c0       	mov    eax,ds:0xc003d000
c001d9f9:	83 ec 08             	sub    esp,0x8
c001d9fc:	50                   	push   eax
c001d9fd:	68 60 ab 03 c0       	push   0xc003ab60
c001da02:	e8 59 f4 fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001da07:	83 c4 10             	add    esp,0x10
c001da0a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001da11:	a1 00 d0 03 c0       	mov    eax,ds:0xc003d000
c001da16:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001da19:	7d 58                	jge    c001da73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001da1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da1e:	8b 04 85 20 d0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2fe0]
c001da25:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da28:	83 ec 08             	sub    esp,0x8
c001da2b:	52                   	push   edx
c001da2c:	50                   	push   eax
c001da2d:	e8 4c fd ff ff       	call   c001d77e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001da32:	83 c4 10             	add    esp,0x10
c001da35:	84 c0                	test   al,al
c001da37:	74 35                	je     c001da6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001da39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da3c:	8b 1c 85 20 d0 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2fe0]
c001da43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da46:	83 c0 20             	add    eax,0x20
c001da49:	0f b6 f0             	movzx  esi,al
c001da4c:	e8 c2 96 ff ff       	call   c0017113 <getCPUNumber()>
c001da51:	99                   	cdq    
c001da52:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001da55:	0f b6 c9             	movzx  ecx,cl
c001da58:	83 ec 0c             	sub    esp,0xc
c001da5b:	56                   	push   esi
c001da5c:	52                   	push   edx
c001da5d:	50                   	push   eax
c001da5e:	51                   	push   ecx
c001da5f:	53                   	push   ebx
c001da60:	e8 95 fe ff ff       	call   c001d8fa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001da65:	83 c4 20             	add    esp,0x20
c001da68:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001da6c:	eb 05                	jmp    c001da73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001da6e:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001da71:	eb 9e                	jmp    c001da11 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001da73:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001da76:	83 f0 01             	xor    eax,0x1
c001da79:	84 c0                	test   al,al
c001da7b:	74 10                	je     c001da8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001da7d:	83 ec 0c             	sub    esp,0xc
c001da80:	68 77 ab 03 c0       	push   0xc003ab77
c001da85:	e8 f4 f4 fe ff       	call   c000cf7e <panic(char const*)>
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001da91:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001da98:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001da9c:	7f 65                	jg     c001db03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001da9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daa4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001daab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001daae:	01 ca                	add    edx,ecx
c001dab0:	83 c2 54             	add    edx,0x54
c001dab3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001dab7:	85 c0                	test   eax,eax
c001dab9:	75 43                	jne    c001dafe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001dabb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dabe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dac1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dac8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dacb:	01 ca                	add    edx,ecx
c001dacd:	8d 4a 54             	lea    ecx,[edx+0x54]
c001dad0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001dad3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001dad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dada:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dadd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001dae4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dae7:	01 ca                	add    edx,ecx
c001dae9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001daef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001daf2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001daf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001daf9:	83 e8 20             	sub    eax,0x20
c001dafc:	eb 1a                	jmp    c001db18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dafe:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001db01:	eb 95                	jmp    c001da98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001db03:	83 ec 0c             	sub    esp,0xc
c001db06:	68 84 ab 03 c0       	push   0xc003ab84
c001db0b:	e8 6e f4 fe ff       	call   c000cf7e <panic(char const*)>
c001db10:	83 c4 10             	add    esp,0x10
c001db13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db18:	8d 65 f8             	lea    esp,[ebp-0x8]
c001db1b:	5b                   	pop    ebx
c001db1c:	5e                   	pop    esi
c001db1d:	5d                   	pop    ebp
c001db1e:	c3                   	ret    
c001db1f:	90                   	nop

c001db20 <PIC::disable()>:
c001db20:	55                   	push   ebp
c001db21:	89 e5                	mov    ebp,esp
c001db23:	83 ec 10             	sub    esp,0x10
c001db26:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001db2c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001db30:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001db33:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001db37:	ee                   	out    dx,al
c001db38:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001db3e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001db42:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001db45:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001db49:	ee                   	out    dx,al
c001db4a:	90                   	nop
c001db4b:	c9                   	leave  
c001db4c:	c3                   	ret    
c001db4d:	90                   	nop

c001db4e <PIC::close(int, int, void*)>:
c001db4e:	55                   	push   ebp
c001db4f:	89 e5                	mov    ebp,esp
c001db51:	83 ec 08             	sub    esp,0x8
c001db54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db57:	8b 00                	mov    eax,DWORD PTR [eax]
c001db59:	83 c0 3c             	add    eax,0x3c
c001db5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001db5e:	83 ec 0c             	sub    esp,0xc
c001db61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db64:	ff d0                	call   eax
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	b8 00 00 00 00       	mov    eax,0x0
c001db6e:	c9                   	leave  
c001db6f:	c3                   	ret    

c001db70 <PIC::PIC()>:
c001db70:	83 ec 0c             	sub    esp,0xc
c001db73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db77:	83 ec 08             	sub    esp,0x8
c001db7a:	68 30 ac 03 c0       	push   0xc003ac30
c001db7f:	50                   	push   eax
c001db80:	e8 ad 64 ff ff       	call   c0014032 <InterruptController::InterruptController(char const*)>
c001db85:	83 c4 10             	add    esp,0x10
c001db88:	ba 5c ac 03 c0       	mov    edx,0xc003ac5c
c001db8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db91:	89 10                	mov    DWORD PTR [eax],edx
c001db93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db9d:	0f b6 d0             	movzx  edx,al
c001dba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbaf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbb5:	0f b6 d0             	movzx  edx,al
c001dbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbc5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbcb:	8d 50 01             	lea    edx,[eax+0x1]
c001dbce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dbd2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dbd8:	0f b6 d0             	movzx  edx,al
c001dbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbdf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dbe3:	83 e1 3f             	and    ecx,0x3f
c001dbe6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dbf4:	0f b6 d0             	movzx  edx,al
c001dbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbfb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc0c:	0f b6 d0             	movzx  edx,al
c001dc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc13:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc1c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc22:	8d 50 01             	lea    edx,[eax+0x1]
c001dc25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc29:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc2f:	0f b6 d0             	movzx  edx,al
c001dc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc36:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc3a:	83 e1 3f             	and    ecx,0x3f
c001dc3d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc41:	90                   	nop
c001dc42:	83 c4 0c             	add    esp,0xc
c001dc45:	c3                   	ret    

c001dc46 <PIC::ioWait()>:
c001dc46:	eb 00                	jmp    c001dc48 <PIC::ioWait()+0x2>
c001dc48:	eb 00                	jmp    c001dc4a <PIC::ioWait()+0x4>
c001dc4a:	90                   	nop
c001dc4b:	c3                   	ret    

c001dc4c <PIC::getIRQReg(int)>:
c001dc4c:	55                   	push   ebp
c001dc4d:	89 e5                	mov    ebp,esp
c001dc4f:	83 ec 10             	sub    esp,0x10
c001dc52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc55:	0f b6 c0             	movzx  eax,al
c001dc58:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dc5e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dc61:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dc64:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dc68:	ee                   	out    dx,al
c001dc69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dc6c:	0f b6 c0             	movzx  eax,al
c001dc6f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dc75:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dc78:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dc7b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dc7f:	ee                   	out    dx,al
c001dc80:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dc86:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dc8a:	89 c2                	mov    edx,eax
c001dc8c:	ec                   	in     al,dx
c001dc8d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dc90:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dc93:	0f b6 c0             	movzx  eax,al
c001dc96:	c1 e0 08             	shl    eax,0x8
c001dc99:	89 c1                	mov    ecx,eax
c001dc9b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dca1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dca5:	89 c2                	mov    edx,eax
c001dca7:	ec                   	in     al,dx
c001dca8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dcab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dcae:	0f b6 c0             	movzx  eax,al
c001dcb1:	09 c8                	or     eax,ecx
c001dcb3:	c9                   	leave  
c001dcb4:	c3                   	ret    
c001dcb5:	90                   	nop

c001dcb6 <PIC::eoi(unsigned char)>:
c001dcb6:	55                   	push   ebp
c001dcb7:	89 e5                	mov    ebp,esp
c001dcb9:	83 ec 14             	sub    esp,0x14
c001dcbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcbf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dcc2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dcc6:	75 1e                	jne    c001dce6 <PIC::eoi(unsigned char)+0x30>
c001dcc8:	6a 0b                	push   0xb
c001dcca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dccd:	e8 7a ff ff ff       	call   c001dc4c <PIC::getIRQReg(int)>
c001dcd2:	83 c4 08             	add    esp,0x8
c001dcd5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dcd9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dcdd:	25 80 00 00 00       	and    eax,0x80
c001dce2:	85 c0                	test   eax,eax
c001dce4:	74 5f                	je     c001dd45 <PIC::eoi(unsigned char)+0x8f>
c001dce6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dcea:	75 2d                	jne    c001dd19 <PIC::eoi(unsigned char)+0x63>
c001dcec:	6a 0b                	push   0xb
c001dcee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dcf1:	e8 56 ff ff ff       	call   c001dc4c <PIC::getIRQReg(int)>
c001dcf6:	83 c4 08             	add    esp,0x8
c001dcf9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dcfd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dd00:	66 85 c0             	test   ax,ax
c001dd03:	78 14                	js     c001dd19 <PIC::eoi(unsigned char)+0x63>
c001dd05:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001dd0b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001dd0f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd12:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dd16:	ee                   	out    dx,al
c001dd17:	eb 2d                	jmp    c001dd46 <PIC::eoi(unsigned char)+0x90>
c001dd19:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd1d:	76 12                	jbe    c001dd31 <PIC::eoi(unsigned char)+0x7b>
c001dd1f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd25:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001dd29:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd2c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd30:	ee                   	out    dx,al
c001dd31:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd37:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dd3b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd3e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd42:	ee                   	out    dx,al
c001dd43:	eb 01                	jmp    c001dd46 <PIC::eoi(unsigned char)+0x90>
c001dd45:	90                   	nop
c001dd46:	c9                   	leave  
c001dd47:	c3                   	ret    

c001dd48 <PIC::remap()>:
c001dd48:	55                   	push   ebp
c001dd49:	89 e5                	mov    ebp,esp
c001dd4b:	83 ec 48             	sub    esp,0x48
c001dd4e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001dd55:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001dd5c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001dd62:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001dd65:	89 c2                	mov    edx,eax
c001dd67:	ec                   	in     al,dx
c001dd68:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001dd6b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001dd6e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001dd71:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001dd77:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001dd7a:	89 c2                	mov    edx,eax
c001dd7c:	ec                   	in     al,dx
c001dd7d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001dd80:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001dd83:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001dd86:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001dd8c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001dd90:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001dd93:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001dd96:	ee                   	out    dx,al
c001dd97:	83 ec 0c             	sub    esp,0xc
c001dd9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd9d:	e8 a4 fe ff ff       	call   c001dc46 <PIC::ioWait()>
c001dda2:	83 c4 10             	add    esp,0x10
c001dda5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ddab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ddaf:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ddb2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ddb5:	ee                   	out    dx,al
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ddbc:	e8 85 fe ff ff       	call   c001dc46 <PIC::ioWait()>
c001ddc1:	83 c4 10             	add    esp,0x10
c001ddc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ddc7:	0f b6 c0             	movzx  eax,al
c001ddca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ddd0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ddd3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ddd6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ddd9:	ee                   	out    dx,al
c001ddda:	83 ec 0c             	sub    esp,0xc
c001dddd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dde0:	e8 61 fe ff ff       	call   c001dc46 <PIC::ioWait()>
c001dde5:	83 c4 10             	add    esp,0x10
c001dde8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ddeb:	0f b6 c0             	movzx  eax,al
c001ddee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ddf4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ddf7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ddfa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ddfd:	ee                   	out    dx,al
c001ddfe:	83 ec 0c             	sub    esp,0xc
c001de01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de04:	e8 3d fe ff ff       	call   c001dc46 <PIC::ioWait()>
c001de09:	83 c4 10             	add    esp,0x10
c001de0c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001de12:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001de16:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001de19:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001de1c:	ee                   	out    dx,al
c001de1d:	83 ec 0c             	sub    esp,0xc
c001de20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de23:	e8 1e fe ff ff       	call   c001dc46 <PIC::ioWait()>
c001de28:	83 c4 10             	add    esp,0x10
c001de2b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001de31:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001de35:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001de38:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001de3b:	ee                   	out    dx,al
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de42:	e8 ff fd ff ff       	call   c001dc46 <PIC::ioWait()>
c001de47:	83 c4 10             	add    esp,0x10
c001de4a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001de50:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001de54:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001de57:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001de5a:	ee                   	out    dx,al
c001de5b:	83 ec 0c             	sub    esp,0xc
c001de5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de61:	e8 e0 fd ff ff       	call   c001dc46 <PIC::ioWait()>
c001de66:	83 c4 10             	add    esp,0x10
c001de69:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001de6f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001de73:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001de76:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001de79:	ee                   	out    dx,al
c001de7a:	83 ec 0c             	sub    esp,0xc
c001de7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de80:	e8 c1 fd ff ff       	call   c001dc46 <PIC::ioWait()>
c001de85:	83 c4 10             	add    esp,0x10
c001de88:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001de8c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001de92:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001de95:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001de98:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001de9b:	ee                   	out    dx,al
c001de9c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001dea0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001dea6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001dea9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001deac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001deaf:	ee                   	out    dx,al
c001deb0:	90                   	nop
c001deb1:	c9                   	leave  
c001deb2:	c3                   	ret    
c001deb3:	90                   	nop

c001deb4 <PIC::open(int, int, void*)>:
c001deb4:	55                   	push   ebp
c001deb5:	89 e5                	mov    ebp,esp
c001deb7:	83 ec 18             	sub    esp,0x18
c001deba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001dec0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001dec4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dec7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001decb:	ee                   	out    dx,al
c001decc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ded2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ded6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ded9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dedd:	ee                   	out    dx,al
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dee4:	e8 5f fe ff ff       	call   c001dd48 <PIC::remap()>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	b8 00 00 00 00       	mov    eax,0x0
c001def1:	c9                   	leave  
c001def2:	c3                   	ret    
c001def3:	90                   	nop

c001def4 <APICTimer::close(int, int, void*)>:
c001def4:	b8 00 00 00 00       	mov    eax,0x0
c001def9:	c3                   	ret    

c001defa <apicTimerHandler(regs*, void*)>:
c001defa:	83 ec 0c             	sub    esp,0xc
c001defd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df01:	8b 00                	mov    eax,DWORD PTR [eax]
c001df03:	99                   	cdq    
c001df04:	52                   	push   edx
c001df05:	50                   	push   eax
c001df06:	6a 00                	push   0x0
c001df08:	68 00 ca 9a 3b       	push   0x3b9aca00
c001df0d:	e8 6a 07 00 00       	call   c001e67c <__udivdi3>
c001df12:	83 c4 10             	add    esp,0x10
c001df15:	83 ec 08             	sub    esp,0x8
c001df18:	52                   	push   edx
c001df19:	50                   	push   eax
c001df1a:	e8 e2 77 ff ff       	call   c0015701 <timerHandler(unsigned long long)>
c001df1f:	83 c4 10             	add    esp,0x10
c001df22:	90                   	nop
c001df23:	83 c4 0c             	add    esp,0xc
c001df26:	c3                   	ret    
c001df27:	90                   	nop

c001df28 <APICTimer::write(int)>:
c001df28:	53                   	push   ebx
c001df29:	83 ec 28             	sub    esp,0x28
c001df2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001df34:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001df3a:	e8 d7 91 ff ff       	call   c0017116 <thisCPU()>
c001df3f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001df45:	83 ec 0c             	sub    esp,0xc
c001df48:	50                   	push   eax
c001df49:	e8 0e f6 ff ff       	call   c001d55c <APIC::getBase()>
c001df4e:	83 c4 10             	add    esp,0x10
c001df51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df55:	a1 d0 c2 03 c0       	mov    eax,ds:0xc003c2d0
c001df5a:	8b 15 d4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2d4
c001df60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001df68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df6c:	05 e0 03 00 00       	add    eax,0x3e0
c001df71:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001df77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df7b:	05 80 03 00 00       	add    eax,0x380
c001df80:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001df86:	fb                   	sti    
c001df87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df8f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001df94:	83 d2 00             	adc    edx,0x0
c001df97:	89 c1                	mov    ecx,eax
c001df99:	89 d3                	mov    ebx,edx
c001df9b:	a1 d0 c2 03 c0       	mov    eax,ds:0xc003c2d0
c001dfa0:	8b 15 d4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2d4
c001dfa6:	39 c8                	cmp    eax,ecx
c001dfa8:	89 d0                	mov    eax,edx
c001dfaa:	19 d8                	sbb    eax,ebx
c001dfac:	73 02                	jae    c001dfb0 <APICTimer::write(int)+0x88>
c001dfae:	eb d7                	jmp    c001df87 <APICTimer::write(int)+0x5f>
c001dfb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfb4:	05 20 03 00 00       	add    eax,0x320
c001dfb9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001dfbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dfc3:	05 90 03 00 00       	add    eax,0x390
c001dfc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfca:	f7 d0                	not    eax
c001dfcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfd0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfd8:	ba 00 00 00 00       	mov    edx,0x0
c001dfdd:	f7 f3                	div    ebx
c001dfdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dfe3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfe7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dfed:	0d 00 00 02 00       	or     eax,0x20000
c001dff2:	89 c2                	mov    edx,eax
c001dff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dff8:	05 20 03 00 00       	add    eax,0x320
c001dffd:	89 10                	mov    DWORD PTR [eax],edx
c001dfff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e003:	05 e0 03 00 00       	add    eax,0x3e0
c001e008:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e00e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e012:	05 80 03 00 00       	add    eax,0x380
c001e017:	89 c2                	mov    edx,eax
c001e019:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e01d:	89 02                	mov    DWORD PTR [edx],eax
c001e01f:	90                   	nop
c001e020:	83 c4 28             	add    esp,0x28
c001e023:	5b                   	pop    ebx
c001e024:	c3                   	ret    
c001e025:	90                   	nop

c001e026 <APICTimer::open(int, int, void*)>:
c001e026:	57                   	push   edi
c001e027:	56                   	push   esi
c001e028:	53                   	push   ebx
c001e029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e02f:	83 c0 24             	add    eax,0x24
c001e032:	8b 00                	mov    eax,DWORD PTR [eax]
c001e034:	83 ec 08             	sub    esp,0x8
c001e037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e03b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e03f:	ff d0                	call   eax
c001e041:	83 c4 10             	add    esp,0x10
c001e044:	e8 cd 90 ff ff       	call   c0017116 <thisCPU()>
c001e049:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e04f:	83 ec 0c             	sub    esp,0xc
c001e052:	50                   	push   eax
c001e053:	e8 04 f5 ff ff       	call   c001d55c <APIC::getBase()>
c001e058:	83 c4 10             	add    esp,0x10
c001e05b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e065:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e06b:	0f b6 f8             	movzx  edi,al
c001e06e:	89 d0                	mov    eax,edx
c001e070:	ba 00 00 00 00       	mov    edx,0x0
c001e075:	89 c1                	mov    ecx,eax
c001e077:	80 e5 ff             	and    ch,0xff
c001e07a:	89 cb                	mov    ebx,ecx
c001e07c:	0f b6 f2             	movzx  esi,dl
c001e07f:	89 d8                	mov    eax,ebx
c001e081:	89 f2                	mov    edx,esi
c001e083:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e087:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e08a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e08e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e092:	83 e0 00             	and    eax,0x0
c001e095:	09 d0                	or     eax,edx
c001e097:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e09b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e0a5:	8d 50 01             	lea    edx,[eax+0x1]
c001e0a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0ac:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e0b2:	0f b6 d0             	movzx  edx,al
c001e0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b9:	83 c2 08             	add    edx,0x8
c001e0bc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e0c0:	0f b6 c9             	movzx  ecx,cl
c001e0c3:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e0c9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0d5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0e3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e0e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0ed:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	51                   	push   ecx
c001e0f7:	6a 01                	push   0x1
c001e0f9:	68 fa de 01 c0       	push   0xc001defa
c001e0fe:	52                   	push   edx
c001e0ff:	50                   	push   eax
c001e100:	e8 69 55 ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e105:	83 c4 20             	add    esp,0x20
c001e108:	89 c2                	mov    edx,eax
c001e10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e10e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e114:	b8 00 00 00 00       	mov    eax,0x0
c001e119:	5b                   	pop    ebx
c001e11a:	5e                   	pop    esi
c001e11b:	5f                   	pop    edi
c001e11c:	c3                   	ret    
c001e11d:	90                   	nop

c001e11e <APICTimer::APICTimer()>:
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e125:	83 ec 08             	sub    esp,0x8
c001e128:	68 9c ac 03 c0       	push   0xc003ac9c
c001e12d:	50                   	push   eax
c001e12e:	e8 3f 75 ff ff       	call   c0015672 <Timer::Timer(char const*)>
c001e133:	83 c4 10             	add    esp,0x10
c001e136:	ba b0 ac 03 c0       	mov    edx,0xc003acb0
c001e13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e13f:	89 10                	mov    DWORD PTR [eax],edx
c001e141:	90                   	nop
c001e142:	83 c4 0c             	add    esp,0xc
c001e145:	c3                   	ret    

c001e146 <PIT::write(int)>:
c001e146:	83 ec 10             	sub    esp,0x10
c001e149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e14d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e151:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e15b:	a3 44 d0 03 c0       	mov    ds:0xc003d044,eax
c001e160:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e165:	99                   	cdq    
c001e166:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e16a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e16e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e175:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e17a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e17e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e183:	ee                   	out    dx,al
c001e184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e188:	0f b6 c0             	movzx  eax,al
c001e18b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e192:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e196:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e19a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e19f:	ee                   	out    dx,al
c001e1a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1a4:	c1 f8 08             	sar    eax,0x8
c001e1a7:	0f b6 c0             	movzx  eax,al
c001e1aa:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e1b1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e1b5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e1b9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e1be:	ee                   	out    dx,al
c001e1bf:	90                   	nop
c001e1c0:	83 c4 10             	add    esp,0x10
c001e1c3:	c3                   	ret    

c001e1c4 <pitHandler(regs*, void*)>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	a1 44 d0 03 c0       	mov    eax,ds:0xc003d044
c001e1cc:	99                   	cdq    
c001e1cd:	52                   	push   edx
c001e1ce:	50                   	push   eax
c001e1cf:	6a 00                	push   0x0
c001e1d1:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e1d6:	e8 a1 04 00 00       	call   c001e67c <__udivdi3>
c001e1db:	83 c4 10             	add    esp,0x10
c001e1de:	83 ec 08             	sub    esp,0x8
c001e1e1:	52                   	push   edx
c001e1e2:	50                   	push   eax
c001e1e3:	e8 19 75 ff ff       	call   c0015701 <timerHandler(unsigned long long)>
c001e1e8:	83 c4 10             	add    esp,0x10
c001e1eb:	90                   	nop
c001e1ec:	83 c4 0c             	add    esp,0xc
c001e1ef:	c3                   	ret    

c001e1f0 <PIT::open(int, int, void*)>:
c001e1f0:	83 ec 0c             	sub    esp,0xc
c001e1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1f9:	83 c0 24             	add    eax,0x24
c001e1fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1fe:	83 ec 08             	sub    esp,0x8
c001e201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e209:	ff d0                	call   eax
c001e20b:	83 c4 10             	add    esp,0x10
c001e20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e212:	83 ec 0c             	sub    esp,0xc
c001e215:	6a 00                	push   0x0
c001e217:	6a 01                	push   0x1
c001e219:	68 c4 e1 01 c0       	push   0xc001e1c4
c001e21e:	6a 00                	push   0x0
c001e220:	50                   	push   eax
c001e221:	e8 48 54 ff ff       	call   c001366e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e226:	83 c4 20             	add    esp,0x20
c001e229:	89 c2                	mov    edx,eax
c001e22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e235:	b8 00 00 00 00       	mov    eax,0x0
c001e23a:	83 c4 0c             	add    esp,0xc
c001e23d:	c3                   	ret    

c001e23e <PIT::close(int, int, void*)>:
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e253:	6a 01                	push   0x1
c001e255:	68 c4 e1 01 c0       	push   0xc001e1c4
c001e25a:	6a 00                	push   0x0
c001e25c:	50                   	push   eax
c001e25d:	e8 6a 54 ff ff       	call   c00136cc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e262:	83 c4 10             	add    esp,0x10
c001e265:	b8 00 00 00 00       	mov    eax,0x0
c001e26a:	83 c4 0c             	add    esp,0xc
c001e26d:	c3                   	ret    

c001e26e <PIT::PIT()>:
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e275:	83 ec 08             	sub    esp,0x8
c001e278:	68 d8 ac 03 c0       	push   0xc003acd8
c001e27d:	50                   	push   eax
c001e27e:	e8 ef 73 ff ff       	call   c0015672 <Timer::Timer(char const*)>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	ba 00 ad 03 c0       	mov    edx,0xc003ad00
c001e28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28f:	89 10                	mov    DWORD PTR [eax],edx
c001e291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e295:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e29b:	0f b6 d0             	movzx  edx,al
c001e29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2b3:	0f b6 d0             	movzx  edx,al
c001e2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ba:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e2c9:	8d 50 01             	lea    edx,[eax+0x1]
c001e2cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e2d0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e2d6:	0f b6 d0             	movzx  edx,al
c001e2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2dd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e2e1:	83 e1 3f             	and    ecx,0x3f
c001e2e4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e2e8:	90                   	nop
c001e2e9:	83 c4 0c             	add    esp,0xc
c001e2ec:	c3                   	ret    
c001e2ed:	66 90                	xchg   ax,ax
c001e2ef:	90                   	nop

c001e2f0 <avxDetect>:
c001e2f0:	b8 00 00 00 00       	mov    eax,0x0
c001e2f5:	c3                   	ret    

c001e2f6 <avxSave>:
c001e2f6:	c3                   	ret    

c001e2f7 <avxLoad>:
c001e2f7:	c3                   	ret    

c001e2f8 <avxInit>:
c001e2f8:	c3                   	ret    

c001e2f9 <avxClose>:
c001e2f9:	c3                   	ret    
c001e2fa:	66 90                	xchg   ax,ax
c001e2fc:	66 90                	xchg   ax,ax
c001e2fe:	66 90                	xchg   ax,ax

c001e300 <sseDetect>:
c001e300:	b8 01 00 00 00       	mov    eax,0x1
c001e305:	0f a2                	cpuid  
c001e307:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e30d:	74 06                	je     c001e315 <sseDetect.noSSE>
c001e30f:	b8 01 00 00 00       	mov    eax,0x1
c001e314:	c3                   	ret    

c001e315 <sseDetect.noSSE>:
c001e315:	b8 00 00 00 00       	mov    eax,0x0
c001e31a:	c3                   	ret    

c001e31b <sseSave>:
c001e31b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e320:	c3                   	ret    

c001e321 <sseLoad>:
c001e321:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e326:	c3                   	ret    

c001e327 <sseInit>:
c001e327:	e8 40 00 00 00       	call   c001e36c <x87Init>
c001e32c:	0f 20 e0             	mov    eax,cr4
c001e32f:	66 0d 00 06          	or     ax,0x600
c001e333:	0f 22 e0             	mov    cr4,eax
c001e336:	c3                   	ret    

c001e337 <sseClose>:
c001e337:	c3                   	ret    
c001e338:	66 90                	xchg   ax,ax
c001e33a:	66 90                	xchg   ax,ax
c001e33c:	66 90                	xchg   ax,ax
c001e33e:	66 90                	xchg   ax,ax

c001e340 <value_37F>:
c001e340:	7f 03                	jg     c001e345 <value_37A+0x1>

c001e342 <value_37E>:
c001e342:	7e 03                	jle    c001e347 <x87Detect+0x1>

c001e344 <value_37A>:
c001e344:	7a 03                	jp     c001e349 <x87Detect+0x3>

c001e346 <x87Detect>:
c001e346:	b8 01 00 00 00       	mov    eax,0x1
c001e34b:	0f a2                	cpuid  
c001e34d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e353:	74 06                	je     c001e35b <x87Detect.nox87>
c001e355:	b8 01 00 00 00       	mov    eax,0x1
c001e35a:	c3                   	ret    

c001e35b <x87Detect.nox87>:
c001e35b:	b8 00 00 00 00       	mov    eax,0x0
c001e360:	c3                   	ret    

c001e361 <x87Save>:
c001e361:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e366:	c3                   	ret    

c001e367 <x87Load>:
c001e367:	dd 64 24 08          	frstor [esp+0x8]
c001e36b:	c3                   	ret    

c001e36c <x87Init>:
c001e36c:	9b db e3             	finit  
c001e36f:	0f 20 c0             	mov    eax,cr0
c001e372:	66 25 fb ff          	and    ax,0xfffb
c001e376:	66 0d 22 00          	or     ax,0x22
c001e37a:	0f 22 c0             	mov    cr0,eax
c001e37d:	0f 06                	clts   
c001e37f:	d9 2d 44 e3 01 c0    	fldcw  WORD PTR ds:0xc001e344
c001e385:	c3                   	ret    

c001e386 <x87Close>:
c001e386:	c3                   	ret    
c001e387:	90                   	nop

c001e388 <__do_global_ctors_aux>:
c001e388:	a1 b8 f4 01 c0       	mov    eax,ds:0xc001f4b8
c001e38d:	83 f8 ff             	cmp    eax,0xffffffff
c001e390:	74 1a                	je     c001e3ac <__do_global_ctors_aux+0x24>
c001e392:	55                   	push   ebp
c001e393:	89 e5                	mov    ebp,esp
c001e395:	53                   	push   ebx
c001e396:	52                   	push   edx
c001e397:	bb b8 f4 01 c0       	mov    ebx,0xc001f4b8
c001e39c:	ff d0                	call   eax
c001e39e:	83 eb 04             	sub    ebx,0x4
c001e3a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3a3:	83 f8 ff             	cmp    eax,0xffffffff
c001e3a6:	75 f4                	jne    c001e39c <__do_global_ctors_aux+0x14>
c001e3a8:	58                   	pop    eax
c001e3a9:	5b                   	pop    ebx
c001e3aa:	5d                   	pop    ebp
c001e3ab:	c3                   	ret    
c001e3ac:	c3                   	ret    
c001e3ad:	66 90                	xchg   ax,ax
c001e3af:	90                   	nop

c001e3b0 <__divdi3>:
c001e3b0:	55                   	push   ebp
c001e3b1:	57                   	push   edi
c001e3b2:	56                   	push   esi
c001e3b3:	53                   	push   ebx
c001e3b4:	83 ec 1c             	sub    esp,0x1c
c001e3b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e3bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e3bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e3ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e3ce:	85 db                	test   ebx,ebx
c001e3d0:	0f 88 8e 00 00 00    	js     c001e464 <__divdi3+0xb4>
c001e3d6:	89 dd                	mov    ebp,ebx
c001e3d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e3e0:	89 d3                	mov    ebx,edx
c001e3e2:	85 d2                	test   edx,edx
c001e3e4:	79 0d                	jns    c001e3f3 <__divdi3+0x43>
c001e3e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e3ea:	f7 d8                	neg    eax
c001e3ec:	83 d2 00             	adc    edx,0x0
c001e3ef:	f7 da                	neg    edx
c001e3f1:	89 d3                	mov    ebx,edx
c001e3f3:	89 c7                	mov    edi,eax
c001e3f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e3f8:	85 db                	test   ebx,ebx
c001e3fa:	75 48                	jne    c001e444 <__divdi3+0x94>
c001e3fc:	39 ef                	cmp    edi,ebp
c001e3fe:	76 24                	jbe    c001e424 <__divdi3+0x74>
c001e400:	89 ea                	mov    edx,ebp
c001e402:	f7 f7                	div    edi
c001e404:	89 c1                	mov    ecx,eax
c001e406:	31 f6                	xor    esi,esi
c001e408:	89 c8                	mov    eax,ecx
c001e40a:	89 f2                	mov    edx,esi
c001e40c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e410:	85 c9                	test   ecx,ecx
c001e412:	74 07                	je     c001e41b <__divdi3+0x6b>
c001e414:	f7 d8                	neg    eax
c001e416:	83 d2 00             	adc    edx,0x0
c001e419:	f7 da                	neg    edx
c001e41b:	83 c4 1c             	add    esp,0x1c
c001e41e:	5b                   	pop    ebx
c001e41f:	5e                   	pop    esi
c001e420:	5f                   	pop    edi
c001e421:	5d                   	pop    ebp
c001e422:	c3                   	ret    
c001e423:	90                   	nop
c001e424:	85 ff                	test   edi,edi
c001e426:	75 0b                	jne    c001e433 <__divdi3+0x83>
c001e428:	b8 01 00 00 00       	mov    eax,0x1
c001e42d:	31 d2                	xor    edx,edx
c001e42f:	f7 f3                	div    ebx
c001e431:	89 c7                	mov    edi,eax
c001e433:	31 d2                	xor    edx,edx
c001e435:	89 e8                	mov    eax,ebp
c001e437:	f7 f7                	div    edi
c001e439:	89 c6                	mov    esi,eax
c001e43b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e43e:	f7 f7                	div    edi
c001e440:	89 c1                	mov    ecx,eax
c001e442:	eb c4                	jmp    c001e408 <__divdi3+0x58>
c001e444:	39 eb                	cmp    ebx,ebp
c001e446:	77 3c                	ja     c001e484 <__divdi3+0xd4>
c001e448:	0f bd f3             	bsr    esi,ebx
c001e44b:	83 f6 1f             	xor    esi,0x1f
c001e44e:	75 40                	jne    c001e490 <__divdi3+0xe0>
c001e450:	39 eb                	cmp    ebx,ebp
c001e452:	72 09                	jb     c001e45d <__divdi3+0xad>
c001e454:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e457:	0f 87 97 00 00 00    	ja     c001e4f4 <__divdi3+0x144>
c001e45d:	b9 01 00 00 00       	mov    ecx,0x1
c001e462:	eb a4                	jmp    c001e408 <__divdi3+0x58>
c001e464:	f7 d9                	neg    ecx
c001e466:	83 d3 00             	adc    ebx,0x0
c001e469:	f7 db                	neg    ebx
c001e46b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e46e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e472:	89 dd                	mov    ebp,ebx
c001e474:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e47c:	e9 5f ff ff ff       	jmp    c001e3e0 <__divdi3+0x30>
c001e481:	8d 76 00             	lea    esi,[esi+0x0]
c001e484:	31 f6                	xor    esi,esi
c001e486:	31 c9                	xor    ecx,ecx
c001e488:	e9 7b ff ff ff       	jmp    c001e408 <__divdi3+0x58>
c001e48d:	8d 76 00             	lea    esi,[esi+0x0]
c001e490:	b8 20 00 00 00       	mov    eax,0x20
c001e495:	29 f0                	sub    eax,esi
c001e497:	89 f1                	mov    ecx,esi
c001e499:	d3 e3                	shl    ebx,cl
c001e49b:	89 fa                	mov    edx,edi
c001e49d:	88 c1                	mov    cl,al
c001e49f:	d3 ea                	shr    edx,cl
c001e4a1:	09 da                	or     edx,ebx
c001e4a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e4a7:	89 f1                	mov    ecx,esi
c001e4a9:	d3 e7                	shl    edi,cl
c001e4ab:	89 eb                	mov    ebx,ebp
c001e4ad:	88 c1                	mov    cl,al
c001e4af:	d3 eb                	shr    ebx,cl
c001e4b1:	89 f1                	mov    ecx,esi
c001e4b3:	d3 e5                	shl    ebp,cl
c001e4b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e4b8:	88 c1                	mov    cl,al
c001e4ba:	d3 ea                	shr    edx,cl
c001e4bc:	09 d5                	or     ebp,edx
c001e4be:	89 e8                	mov    eax,ebp
c001e4c0:	89 da                	mov    edx,ebx
c001e4c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e4c6:	89 d3                	mov    ebx,edx
c001e4c8:	89 c5                	mov    ebp,eax
c001e4ca:	f7 e7                	mul    edi
c001e4cc:	39 d3                	cmp    ebx,edx
c001e4ce:	72 18                	jb     c001e4e8 <__divdi3+0x138>
c001e4d0:	74 0a                	je     c001e4dc <__divdi3+0x12c>
c001e4d2:	89 e9                	mov    ecx,ebp
c001e4d4:	31 f6                	xor    esi,esi
c001e4d6:	e9 2d ff ff ff       	jmp    c001e408 <__divdi3+0x58>
c001e4db:	90                   	nop
c001e4dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e4df:	89 f1                	mov    ecx,esi
c001e4e1:	d3 e7                	shl    edi,cl
c001e4e3:	39 c7                	cmp    edi,eax
c001e4e5:	73 eb                	jae    c001e4d2 <__divdi3+0x122>
c001e4e7:	90                   	nop
c001e4e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e4eb:	31 f6                	xor    esi,esi
c001e4ed:	e9 16 ff ff ff       	jmp    c001e408 <__divdi3+0x58>
c001e4f2:	66 90                	xchg   ax,ax
c001e4f4:	31 c9                	xor    ecx,ecx
c001e4f6:	e9 0d ff ff ff       	jmp    c001e408 <__divdi3+0x58>
c001e4fb:	90                   	nop

c001e4fc <__moddi3>:
c001e4fc:	55                   	push   ebp
c001e4fd:	57                   	push   edi
c001e4fe:	56                   	push   esi
c001e4ff:	53                   	push   ebx
c001e500:	83 ec 2c             	sub    esp,0x2c
c001e503:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e507:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e50b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e50f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e513:	85 db                	test   ebx,ebx
c001e515:	0f 88 85 00 00 00    	js     c001e5a0 <__moddi3+0xa4>
c001e51b:	89 de                	mov    esi,ebx
c001e51d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e525:	89 d7                	mov    edi,edx
c001e527:	85 d2                	test   edx,edx
c001e529:	79 09                	jns    c001e534 <__moddi3+0x38>
c001e52b:	f7 d8                	neg    eax
c001e52d:	83 d2 00             	adc    edx,0x0
c001e530:	f7 da                	neg    edx
c001e532:	89 d7                	mov    edi,edx
c001e534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e538:	89 cd                	mov    ebp,ecx
c001e53a:	85 ff                	test   edi,edi
c001e53c:	75 52                	jne    c001e590 <__moddi3+0x94>
c001e53e:	89 c3                	mov    ebx,eax
c001e540:	39 f0                	cmp    eax,esi
c001e542:	76 24                	jbe    c001e568 <__moddi3+0x6c>
c001e544:	89 c8                	mov    eax,ecx
c001e546:	89 f2                	mov    edx,esi
c001e548:	f7 f3                	div    ebx
c001e54a:	89 d6                	mov    esi,edx
c001e54c:	89 f0                	mov    eax,esi
c001e54e:	31 d2                	xor    edx,edx
c001e550:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e554:	85 c9                	test   ecx,ecx
c001e556:	74 07                	je     c001e55f <__moddi3+0x63>
c001e558:	f7 d8                	neg    eax
c001e55a:	83 d2 00             	adc    edx,0x0
c001e55d:	f7 da                	neg    edx
c001e55f:	83 c4 2c             	add    esp,0x2c
c001e562:	5b                   	pop    ebx
c001e563:	5e                   	pop    esi
c001e564:	5f                   	pop    edi
c001e565:	5d                   	pop    ebp
c001e566:	c3                   	ret    
c001e567:	90                   	nop
c001e568:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e56c:	85 db                	test   ebx,ebx
c001e56e:	75 0d                	jne    c001e57d <__moddi3+0x81>
c001e570:	b8 01 00 00 00       	mov    eax,0x1
c001e575:	31 d2                	xor    edx,edx
c001e577:	f7 f7                	div    edi
c001e579:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e57d:	89 f0                	mov    eax,esi
c001e57f:	31 d2                	xor    edx,edx
c001e581:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e585:	f7 f7                	div    edi
c001e587:	89 e8                	mov    eax,ebp
c001e589:	f7 f7                	div    edi
c001e58b:	89 d6                	mov    esi,edx
c001e58d:	eb bd                	jmp    c001e54c <__moddi3+0x50>
c001e58f:	90                   	nop
c001e590:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e594:	39 f7                	cmp    edi,esi
c001e596:	76 20                	jbe    c001e5b8 <__moddi3+0xbc>
c001e598:	89 c8                	mov    eax,ecx
c001e59a:	89 f2                	mov    edx,esi
c001e59c:	eb b2                	jmp    c001e550 <__moddi3+0x54>
c001e59e:	66 90                	xchg   ax,ax
c001e5a0:	f7 d9                	neg    ecx
c001e5a2:	83 d3 00             	adc    ebx,0x0
c001e5a5:	f7 db                	neg    ebx
c001e5a7:	89 de                	mov    esi,ebx
c001e5a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e5b1:	e9 6f ff ff ff       	jmp    c001e525 <__moddi3+0x29>
c001e5b6:	66 90                	xchg   ax,ax
c001e5b8:	0f bd c7             	bsr    eax,edi
c001e5bb:	83 f0 1f             	xor    eax,0x1f
c001e5be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e5c2:	75 24                	jne    c001e5e8 <__moddi3+0xec>
c001e5c4:	39 f7                	cmp    edi,esi
c001e5c6:	72 06                	jb     c001e5ce <__moddi3+0xd2>
c001e5c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e5cc:	77 0c                	ja     c001e5da <__moddi3+0xde>
c001e5ce:	89 e9                	mov    ecx,ebp
c001e5d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e5d4:	19 fe                	sbb    esi,edi
c001e5d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e5da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e5de:	89 f2                	mov    edx,esi
c001e5e0:	e9 6b ff ff ff       	jmp    c001e550 <__moddi3+0x54>
c001e5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e5e8:	b8 20 00 00 00       	mov    eax,0x20
c001e5ed:	89 c2                	mov    edx,eax
c001e5ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e5f3:	29 da                	sub    edx,ebx
c001e5f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e5f9:	88 d9                	mov    cl,bl
c001e5fb:	d3 e7                	shl    edi,cl
c001e5fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e601:	88 d1                	mov    cl,dl
c001e603:	d3 e8                	shr    eax,cl
c001e605:	09 c7                	or     edi,eax
c001e607:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e60b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e60f:	89 d8                	mov    eax,ebx
c001e611:	88 d9                	mov    cl,bl
c001e613:	d3 e7                	shl    edi,cl
c001e615:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e619:	89 f3                	mov    ebx,esi
c001e61b:	88 d1                	mov    cl,dl
c001e61d:	d3 eb                	shr    ebx,cl
c001e61f:	89 c7                	mov    edi,eax
c001e621:	88 c1                	mov    cl,al
c001e623:	d3 e6                	shl    esi,cl
c001e625:	89 e8                	mov    eax,ebp
c001e627:	88 d1                	mov    cl,dl
c001e629:	d3 e8                	shr    eax,cl
c001e62b:	09 f0                	or     eax,esi
c001e62d:	89 f9                	mov    ecx,edi
c001e62f:	d3 e5                	shl    ebp,cl
c001e631:	89 da                	mov    edx,ebx
c001e633:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e637:	89 d3                	mov    ebx,edx
c001e639:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e63d:	89 c6                	mov    esi,eax
c001e63f:	89 d1                	mov    ecx,edx
c001e641:	39 d3                	cmp    ebx,edx
c001e643:	72 27                	jb     c001e66c <__moddi3+0x170>
c001e645:	74 21                	je     c001e668 <__moddi3+0x16c>
c001e647:	29 f5                	sub    ebp,esi
c001e649:	19 cb                	sbb    ebx,ecx
c001e64b:	89 de                	mov    esi,ebx
c001e64d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e651:	d3 e6                	shl    esi,cl
c001e653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e657:	89 f9                	mov    ecx,edi
c001e659:	d3 ed                	shr    ebp,cl
c001e65b:	09 ee                	or     esi,ebp
c001e65d:	89 f0                	mov    eax,esi
c001e65f:	d3 eb                	shr    ebx,cl
c001e661:	89 da                	mov    edx,ebx
c001e663:	e9 e8 fe ff ff       	jmp    c001e550 <__moddi3+0x54>
c001e668:	39 c5                	cmp    ebp,eax
c001e66a:	73 db                	jae    c001e647 <__moddi3+0x14b>
c001e66c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e670:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e674:	89 d1                	mov    ecx,edx
c001e676:	89 c6                	mov    esi,eax
c001e678:	eb cd                	jmp    c001e647 <__moddi3+0x14b>
c001e67a:	66 90                	xchg   ax,ax

c001e67c <__udivdi3>:
c001e67c:	55                   	push   ebp
c001e67d:	57                   	push   edi
c001e67e:	56                   	push   esi
c001e67f:	53                   	push   ebx
c001e680:	83 ec 1c             	sub    esp,0x1c
c001e683:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e687:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e68b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e68f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e693:	85 d2                	test   edx,edx
c001e695:	75 41                	jne    c001e6d8 <__udivdi3+0x5c>
c001e697:	39 f7                	cmp    edi,esi
c001e699:	76 15                	jbe    c001e6b0 <__udivdi3+0x34>
c001e69b:	89 e8                	mov    eax,ebp
c001e69d:	89 f2                	mov    edx,esi
c001e69f:	f7 f7                	div    edi
c001e6a1:	31 db                	xor    ebx,ebx
c001e6a3:	89 da                	mov    edx,ebx
c001e6a5:	83 c4 1c             	add    esp,0x1c
c001e6a8:	5b                   	pop    ebx
c001e6a9:	5e                   	pop    esi
c001e6aa:	5f                   	pop    edi
c001e6ab:	5d                   	pop    ebp
c001e6ac:	c3                   	ret    
c001e6ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e6b0:	89 f9                	mov    ecx,edi
c001e6b2:	85 ff                	test   edi,edi
c001e6b4:	75 0b                	jne    c001e6c1 <__udivdi3+0x45>
c001e6b6:	b8 01 00 00 00       	mov    eax,0x1
c001e6bb:	31 d2                	xor    edx,edx
c001e6bd:	f7 f7                	div    edi
c001e6bf:	89 c1                	mov    ecx,eax
c001e6c1:	31 d2                	xor    edx,edx
c001e6c3:	89 f0                	mov    eax,esi
c001e6c5:	f7 f1                	div    ecx
c001e6c7:	89 c3                	mov    ebx,eax
c001e6c9:	89 e8                	mov    eax,ebp
c001e6cb:	f7 f1                	div    ecx
c001e6cd:	89 da                	mov    edx,ebx
c001e6cf:	83 c4 1c             	add    esp,0x1c
c001e6d2:	5b                   	pop    ebx
c001e6d3:	5e                   	pop    esi
c001e6d4:	5f                   	pop    edi
c001e6d5:	5d                   	pop    ebp
c001e6d6:	c3                   	ret    
c001e6d7:	90                   	nop
c001e6d8:	39 f2                	cmp    edx,esi
c001e6da:	77 1c                	ja     c001e6f8 <__udivdi3+0x7c>
c001e6dc:	0f bd da             	bsr    ebx,edx
c001e6df:	83 f3 1f             	xor    ebx,0x1f
c001e6e2:	75 24                	jne    c001e708 <__udivdi3+0x8c>
c001e6e4:	39 f2                	cmp    edx,esi
c001e6e6:	72 08                	jb     c001e6f0 <__udivdi3+0x74>
c001e6e8:	39 ef                	cmp    edi,ebp
c001e6ea:	0f 87 84 00 00 00    	ja     c001e774 <__udivdi3+0xf8>
c001e6f0:	b8 01 00 00 00       	mov    eax,0x1
c001e6f5:	eb ac                	jmp    c001e6a3 <__udivdi3+0x27>
c001e6f7:	90                   	nop
c001e6f8:	31 db                	xor    ebx,ebx
c001e6fa:	31 c0                	xor    eax,eax
c001e6fc:	89 da                	mov    edx,ebx
c001e6fe:	83 c4 1c             	add    esp,0x1c
c001e701:	5b                   	pop    ebx
c001e702:	5e                   	pop    esi
c001e703:	5f                   	pop    edi
c001e704:	5d                   	pop    ebp
c001e705:	c3                   	ret    
c001e706:	66 90                	xchg   ax,ax
c001e708:	b8 20 00 00 00       	mov    eax,0x20
c001e70d:	29 d8                	sub    eax,ebx
c001e70f:	88 d9                	mov    cl,bl
c001e711:	d3 e2                	shl    edx,cl
c001e713:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e717:	89 fa                	mov    edx,edi
c001e719:	88 c1                	mov    cl,al
c001e71b:	d3 ea                	shr    edx,cl
c001e71d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e721:	09 d1                	or     ecx,edx
c001e723:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e727:	88 d9                	mov    cl,bl
c001e729:	d3 e7                	shl    edi,cl
c001e72b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e72f:	89 f7                	mov    edi,esi
c001e731:	88 c1                	mov    cl,al
c001e733:	d3 ef                	shr    edi,cl
c001e735:	88 d9                	mov    cl,bl
c001e737:	d3 e6                	shl    esi,cl
c001e739:	89 ea                	mov    edx,ebp
c001e73b:	88 c1                	mov    cl,al
c001e73d:	d3 ea                	shr    edx,cl
c001e73f:	09 d6                	or     esi,edx
c001e741:	89 f0                	mov    eax,esi
c001e743:	89 fa                	mov    edx,edi
c001e745:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e749:	89 d7                	mov    edi,edx
c001e74b:	89 c6                	mov    esi,eax
c001e74d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e751:	39 d7                	cmp    edi,edx
c001e753:	72 13                	jb     c001e768 <__udivdi3+0xec>
c001e755:	74 09                	je     c001e760 <__udivdi3+0xe4>
c001e757:	89 f0                	mov    eax,esi
c001e759:	31 db                	xor    ebx,ebx
c001e75b:	e9 43 ff ff ff       	jmp    c001e6a3 <__udivdi3+0x27>
c001e760:	88 d9                	mov    cl,bl
c001e762:	d3 e5                	shl    ebp,cl
c001e764:	39 c5                	cmp    ebp,eax
c001e766:	73 ef                	jae    c001e757 <__udivdi3+0xdb>
c001e768:	8d 46 ff             	lea    eax,[esi-0x1]
c001e76b:	31 db                	xor    ebx,ebx
c001e76d:	e9 31 ff ff ff       	jmp    c001e6a3 <__udivdi3+0x27>
c001e772:	66 90                	xchg   ax,ax
c001e774:	31 c0                	xor    eax,eax
c001e776:	e9 28 ff ff ff       	jmp    c001e6a3 <__udivdi3+0x27>
c001e77b:	90                   	nop

c001e77c <__umoddi3>:
c001e77c:	55                   	push   ebp
c001e77d:	57                   	push   edi
c001e77e:	56                   	push   esi
c001e77f:	53                   	push   ebx
c001e780:	83 ec 1c             	sub    esp,0x1c
c001e783:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e787:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e78b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e78f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e793:	89 da                	mov    edx,ebx
c001e795:	85 c0                	test   eax,eax
c001e797:	75 37                	jne    c001e7d0 <__umoddi3+0x54>
c001e799:	39 df                	cmp    edi,ebx
c001e79b:	76 13                	jbe    c001e7b0 <__umoddi3+0x34>
c001e79d:	89 f0                	mov    eax,esi
c001e79f:	f7 f7                	div    edi
c001e7a1:	89 d0                	mov    eax,edx
c001e7a3:	31 d2                	xor    edx,edx
c001e7a5:	83 c4 1c             	add    esp,0x1c
c001e7a8:	5b                   	pop    ebx
c001e7a9:	5e                   	pop    esi
c001e7aa:	5f                   	pop    edi
c001e7ab:	5d                   	pop    ebp
c001e7ac:	c3                   	ret    
c001e7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001e7b0:	89 fd                	mov    ebp,edi
c001e7b2:	85 ff                	test   edi,edi
c001e7b4:	75 0b                	jne    c001e7c1 <__umoddi3+0x45>
c001e7b6:	b8 01 00 00 00       	mov    eax,0x1
c001e7bb:	31 d2                	xor    edx,edx
c001e7bd:	f7 f7                	div    edi
c001e7bf:	89 c5                	mov    ebp,eax
c001e7c1:	89 d8                	mov    eax,ebx
c001e7c3:	31 d2                	xor    edx,edx
c001e7c5:	f7 f5                	div    ebp
c001e7c7:	89 f0                	mov    eax,esi
c001e7c9:	f7 f5                	div    ebp
c001e7cb:	89 d0                	mov    eax,edx
c001e7cd:	eb d4                	jmp    c001e7a3 <__umoddi3+0x27>
c001e7cf:	90                   	nop
c001e7d0:	89 f1                	mov    ecx,esi
c001e7d2:	39 d8                	cmp    eax,ebx
c001e7d4:	76 0a                	jbe    c001e7e0 <__umoddi3+0x64>
c001e7d6:	89 f0                	mov    eax,esi
c001e7d8:	83 c4 1c             	add    esp,0x1c
c001e7db:	5b                   	pop    ebx
c001e7dc:	5e                   	pop    esi
c001e7dd:	5f                   	pop    edi
c001e7de:	5d                   	pop    ebp
c001e7df:	c3                   	ret    
c001e7e0:	0f bd e8             	bsr    ebp,eax
c001e7e3:	83 f5 1f             	xor    ebp,0x1f
c001e7e6:	75 1c                	jne    c001e804 <__umoddi3+0x88>
c001e7e8:	39 d8                	cmp    eax,ebx
c001e7ea:	72 04                	jb     c001e7f0 <__umoddi3+0x74>
c001e7ec:	39 f7                	cmp    edi,esi
c001e7ee:	77 08                	ja     c001e7f8 <__umoddi3+0x7c>
c001e7f0:	89 da                	mov    edx,ebx
c001e7f2:	29 fe                	sub    esi,edi
c001e7f4:	19 c2                	sbb    edx,eax
c001e7f6:	89 f1                	mov    ecx,esi
c001e7f8:	89 c8                	mov    eax,ecx
c001e7fa:	83 c4 1c             	add    esp,0x1c
c001e7fd:	5b                   	pop    ebx
c001e7fe:	5e                   	pop    esi
c001e7ff:	5f                   	pop    edi
c001e800:	5d                   	pop    ebp
c001e801:	c3                   	ret    
c001e802:	66 90                	xchg   ax,ax
c001e804:	ba 20 00 00 00       	mov    edx,0x20
c001e809:	29 ea                	sub    edx,ebp
c001e80b:	89 e9                	mov    ecx,ebp
c001e80d:	d3 e0                	shl    eax,cl
c001e80f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e813:	89 f8                	mov    eax,edi
c001e815:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e819:	88 d1                	mov    cl,dl
c001e81b:	d3 e8                	shr    eax,cl
c001e81d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e821:	09 c1                	or     ecx,eax
c001e823:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e827:	89 e9                	mov    ecx,ebp
c001e829:	d3 e7                	shl    edi,cl
c001e82b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e82f:	89 d8                	mov    eax,ebx
c001e831:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e835:	88 d1                	mov    cl,dl
c001e837:	d3 e8                	shr    eax,cl
c001e839:	89 c7                	mov    edi,eax
c001e83b:	89 e9                	mov    ecx,ebp
c001e83d:	d3 e3                	shl    ebx,cl
c001e83f:	89 f0                	mov    eax,esi
c001e841:	88 d1                	mov    cl,dl
c001e843:	d3 e8                	shr    eax,cl
c001e845:	09 d8                	or     eax,ebx
c001e847:	89 e9                	mov    ecx,ebp
c001e849:	d3 e6                	shl    esi,cl
c001e84b:	89 f3                	mov    ebx,esi
c001e84d:	89 fa                	mov    edx,edi
c001e84f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e853:	89 d1                	mov    ecx,edx
c001e855:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e859:	89 c6                	mov    esi,eax
c001e85b:	89 d7                	mov    edi,edx
c001e85d:	39 d1                	cmp    ecx,edx
c001e85f:	72 27                	jb     c001e888 <__umoddi3+0x10c>
c001e861:	74 21                	je     c001e884 <__umoddi3+0x108>
c001e863:	89 ca                	mov    edx,ecx
c001e865:	29 f3                	sub    ebx,esi
c001e867:	19 fa                	sbb    edx,edi
c001e869:	89 d0                	mov    eax,edx
c001e86b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e86f:	d3 e0                	shl    eax,cl
c001e871:	89 e9                	mov    ecx,ebp
c001e873:	d3 eb                	shr    ebx,cl
c001e875:	09 d8                	or     eax,ebx
c001e877:	d3 ea                	shr    edx,cl
c001e879:	83 c4 1c             	add    esp,0x1c
c001e87c:	5b                   	pop    ebx
c001e87d:	5e                   	pop    esi
c001e87e:	5f                   	pop    edi
c001e87f:	5d                   	pop    ebp
c001e880:	c3                   	ret    
c001e881:	8d 76 00             	lea    esi,[esi+0x0]
c001e884:	39 c3                	cmp    ebx,eax
c001e886:	73 db                	jae    c001e863 <__umoddi3+0xe7>
c001e888:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e88c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e890:	89 d7                	mov    edi,edx
c001e892:	89 c6                	mov    esi,eax
c001e894:	eb cd                	jmp    c001e863 <__umoddi3+0xe7>
c001e896:	66 90                	xchg   ax,ax
c001e898:	66 90                	xchg   ax,ax
c001e89a:	66 90                	xchg   ax,ax
c001e89c:	66 90                	xchg   ax,ax
c001e89e:	66 90                	xchg   ax,ax

c001e8a0 <fabs>:
c001e8a0:	83 ec 0c             	sub    esp,0xc
c001e8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e8b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8b7:	dd 04 24             	fld    QWORD PTR [esp]
c001e8ba:	83 c4 0c             	add    esp,0xc
c001e8bd:	c3                   	ret    
c001e8be:	66 90                	xchg   ax,ax

c001e8c0 <lrint>:
c001e8c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e8c4:	83 ec 04             	sub    esp,0x4
c001e8c7:	db 1c 24             	fistp  DWORD PTR [esp]
c001e8ca:	58                   	pop    eax
c001e8cb:	c3                   	ret    

c001e8cc <lrintf>:
c001e8cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e8d0:	83 ec 04             	sub    esp,0x4
c001e8d3:	db 1c 24             	fistp  DWORD PTR [esp]
c001e8d6:	58                   	pop    eax
c001e8d7:	c3                   	ret    

Disassembly of section .init:

c001e8d8 <_init>:
c001e8d8:	55                   	push   ebp
c001e8d9:	89 e5                	mov    ebp,esp
c001e8db:	e8 38 18 fe ff       	call   c0000118 <frame_dummy>
c001e8e0:	e8 a3 fa ff ff       	call   c001e388 <__do_global_ctors_aux>
c001e8e5:	5d                   	pop    ebp
c001e8e6:	c3                   	ret    

Disassembly of section .fini:

c001e8e7 <_fini>:
c001e8e7:	55                   	push   ebp
c001e8e8:	89 e5                	mov    ebp,esp
c001e8ea:	e8 b9 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e8ef:	5d                   	pop    ebp
c001e8f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e8f2 <Computer::~Computer()>:
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	ba 58 88 03 c0       	mov    edx,0xc0038858
c001e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fe:	89 10                	mov    DWORD PTR [eax],edx
c001e900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e904:	83 ec 0c             	sub    esp,0xc
c001e907:	50                   	push   eax
c001e908:	e8 af 4c ff ff       	call   c00135bc <Device::~Device()>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	90                   	nop
c001e911:	83 c4 0c             	add    esp,0xc
c001e914:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e916 <Computer::~Computer()>:
c001e916:	83 ec 0c             	sub    esp,0xc
c001e919:	83 ec 0c             	sub    esp,0xc
c001e91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e920:	e8 cd ff ff ff       	call   c001e8f2 <Computer::~Computer()>
c001e925:	83 c4 10             	add    esp,0x10
c001e928:	83 ec 08             	sub    esp,0x8
c001e92b:	68 ec 01 00 00       	push   0x1ec
c001e930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e934:	e8 e6 3a ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001e939:	83 c4 10             	add    esp,0x10
c001e93c:	83 c4 0c             	add    esp,0xc
c001e93f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e940 <idleCommon()>:
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	e8 ba f9 fe ff       	call   c000e302 <lockScheduler()>
c001e948:	e8 e9 fc fe ff       	call   c000e636 <schedule()>
c001e94d:	83 c4 0c             	add    esp,0xc
c001e950:	e9 af f9 fe ff       	jmp    c000e304 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e955 <CPU::readCR0()>:
c001e955:	83 ec 10             	sub    esp,0x10
c001e958:	0f 20 c0             	mov    eax,cr0
c001e95b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e95f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e967 <CPU::readCR2()>:
c001e967:	83 ec 10             	sub    esp,0x10
c001e96a:	0f 20 d0             	mov    eax,cr2
c001e96d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e979 <CPU::readCR3()>:
c001e979:	83 ec 10             	sub    esp,0x10
c001e97c:	0f 20 d8             	mov    eax,cr3
c001e97f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e987:	83 c4 10             	add    esp,0x10
c001e98a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e98b <CPU::readCR4()>:
c001e98b:	83 ec 10             	sub    esp,0x10
c001e98e:	0f 20 e0             	mov    eax,cr4
c001e991:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e99d <CPU::writeCR3(unsigned long)>:
c001e99d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9a1:	0f 22 d8             	mov    cr3,eax
c001e9a4:	90                   	nop
c001e9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e9a6 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e9a6:	90                   	nop
c001e9a7:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e9a8 <ThreadControlBlock::ThreadControlBlock()>:
c001e9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9b7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9c2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e9c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9cd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001e9d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9d8:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e0:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001e9e4:	90                   	nop
c001e9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e9e6 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e9e6:	83 ec 0c             	sub    esp,0xc
c001e9e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea22:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ea29:	83 ec 0c             	sub    esp,0xc
c001ea2c:	68 64 91 03 c0       	push   0xc0039164
c001ea31:	e8 2a e4 fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001ea36:	83 c4 10             	add    esp,0x10
c001ea39:	90                   	nop
c001ea3a:	83 c4 0c             	add    esp,0xc
c001ea3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ea3e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ea3e:	83 ec 0c             	sub    esp,0xc
c001ea41:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea46:	75 10                	jne    c001ea58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	68 80 91 03 c0       	push   0xc0039180
c001ea50:	e8 29 e5 fe ff       	call   c000cf7e <panic(char const*)>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5e:	85 c0                	test   eax,eax
c001ea60:	74 34                	je     c001ea96 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ea62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea69:	85 c0                	test   eax,eax
c001ea6b:	74 29                	je     c001ea96 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001ea6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea78:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ea7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea94:	eb 65                	jmp    c001eafb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ea96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9c:	85 c0                	test   eax,eax
c001ea9e:	75 4b                	jne    c001eaeb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa7:	85 c0                	test   eax,eax
c001eaa9:	75 40                	jne    c001eaeb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eab3:	89 10                	mov    DWORD PTR [eax],edx
c001eab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eac7:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ead5:	85 c0                	test   eax,eax
c001ead7:	74 22                	je     c001eafb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001ead9:	83 ec 0c             	sub    esp,0xc
c001eadc:	68 a2 91 03 c0       	push   0xc00391a2
c001eae1:	e8 98 e4 fe ff       	call   c000cf7e <panic(char const*)>
c001eae6:	83 c4 10             	add    esp,0x10
c001eae9:	eb 10                	jmp    c001eafb <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eaeb:	83 ec 0c             	sub    esp,0xc
c001eaee:	68 ac 91 03 c0       	push   0xc00391ac
c001eaf3:	e8 86 e4 fe ff       	call   c000cf7e <panic(char const*)>
c001eaf8:	83 c4 10             	add    esp,0x10
c001eafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb02:	8d 50 01             	lea    edx,[eax+0x1]
c001eb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb09:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb0c:	90                   	nop
c001eb0d:	83 c4 0c             	add    esp,0xc
c001eb10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb12 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb16:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb18:	85 c0                	test   eax,eax
c001eb1a:	75 0e                	jne    c001eb2a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb23:	85 c0                	test   eax,eax
c001eb25:	75 03                	jne    c001eb2a <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb27:	b0 01                	mov    al,0x1
c001eb29:	c3                   	ret    
c001eb2a:	b0 00                	mov    al,0x0
c001eb2c:	90                   	nop
c001eb2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb2e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb2e:	83 ec 0c             	sub    esp,0xc
c001eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb35:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb37:	85 c0                	test   eax,eax
c001eb39:	75 15                	jne    c001eb50 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001eb3b:	83 ec 0c             	sub    esp,0xc
c001eb3e:	68 b8 91 03 c0       	push   0xc00391b8
c001eb43:	e8 36 e4 fe ff       	call   c000cf7e <panic(char const*)>
c001eb48:	83 c4 10             	add    esp,0x10
c001eb4b:	e9 88 00 00 00       	jmp    c001ebd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001eb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb5a:	85 c0                	test   eax,eax
c001eb5c:	0f 95 c0             	setne  al
c001eb5f:	84 c0                	test   al,al
c001eb61:	74 10                	je     c001eb73 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001eb63:	83 ec 0c             	sub    esp,0xc
c001eb66:	68 03 92 03 c0       	push   0xc0039203
c001eb6b:	e8 0e e4 fe ff       	call   c000cf7e <panic(char const*)>
c001eb70:	83 c4 10             	add    esp,0x10
c001eb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb77:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb7c:	85 c0                	test   eax,eax
c001eb7e:	0f 94 c0             	sete   al
c001eb81:	84 c0                	test   al,al
c001eb83:	74 33                	je     c001ebb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eba1:	83 f8 01             	cmp    eax,0x1
c001eba4:	74 21                	je     c001ebc7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001eba6:	83 ec 0c             	sub    esp,0xc
c001eba9:	68 dc 91 03 c0       	push   0xc00391dc
c001ebae:	e8 cb e3 fe ff       	call   c000cf7e <panic(char const*)>
c001ebb3:	83 c4 10             	add    esp,0x10
c001ebb6:	eb 0f                	jmp    c001ebc7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ebb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebbc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebbe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ebc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc5:	89 10                	mov    DWORD PTR [eax],edx
c001ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebce:	8d 50 ff             	lea    edx,[eax-0x1]
c001ebd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebd8:	83 c4 0c             	add    esp,0xc
c001ebdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ebdc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ebdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebe2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ebe4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ebe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebe8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ebec <LinkedList<UnixFile>::~LinkedList()>:
c001ebec:	90                   	nop
c001ebed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ebee <LinkedList<UnixFile>::LinkedList()>:
c001ebee:	83 ec 0c             	sub    esp,0xc
c001ebf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec31:	83 ec 0c             	sub    esp,0xc
c001ec34:	68 64 91 03 c0       	push   0xc0039164
c001ec39:	e8 22 e2 fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001ec3e:	83 c4 10             	add    esp,0x10
c001ec41:	90                   	nop
c001ec42:	83 c4 0c             	add    esp,0xc
c001ec45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ec46 <LinkedList<UnixFile>::getFirstElement()>:
c001ec46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec4c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ec4e <LinkedList<UnixFile>::removeFirst()>:
c001ec4e:	83 ec 0c             	sub    esp,0xc
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec57:	85 c0                	test   eax,eax
c001ec59:	75 12                	jne    c001ec6d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ec5b:	83 ec 0c             	sub    esp,0xc
c001ec5e:	68 b8 91 03 c0       	push   0xc00391b8
c001ec63:	e8 16 e3 fe ff       	call   c000cf7e <panic(char const*)>
c001ec68:	83 c4 10             	add    esp,0x10
c001ec6b:	eb 7e                	jmp    c001eceb <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ec6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec77:	85 c0                	test   eax,eax
c001ec79:	74 10                	je     c001ec8b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ec7b:	83 ec 0c             	sub    esp,0xc
c001ec7e:	68 03 92 03 c0       	push   0xc0039203
c001ec83:	e8 f6 e2 fe ff       	call   c000cf7e <panic(char const*)>
c001ec88:	83 c4 10             	add    esp,0x10
c001ec8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec94:	85 c0                	test   eax,eax
c001ec96:	75 33                	jne    c001eccb <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ec98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecb4:	83 f8 01             	cmp    eax,0x1
c001ecb7:	74 21                	je     c001ecda <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ecb9:	83 ec 0c             	sub    esp,0xc
c001ecbc:	68 dc 91 03 c0       	push   0xc00391dc
c001ecc1:	e8 b8 e2 fe ff       	call   c000cf7e <panic(char const*)>
c001ecc6:	83 c4 10             	add    esp,0x10
c001ecc9:	eb 0f                	jmp    c001ecda <LinkedList<UnixFile>::removeFirst()+0x8c>
c001eccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eccf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ecd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd8:	89 10                	mov    DWORD PTR [eax],edx
c001ecda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ece1:	8d 50 ff             	lea    edx,[eax-0x1]
c001ece4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eceb:	83 c4 0c             	add    esp,0xc
c001ecee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ecf0 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ecf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecf4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecf7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ecf8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ecf8:	83 ec 1c             	sub    esp,0x1c
c001ecfb:	83 ec 0c             	sub    esp,0xc
c001ecfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed02:	e8 3f ff ff ff       	call   c001ec46 <LinkedList<UnixFile>::getFirstElement()>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed0e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ed13:	74 43                	je     c001ed58 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001ed15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed19:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001ed1d:	75 20                	jne    c001ed3f <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 a8 93 03 c0       	push   0xc00393a8
c001ed27:	e8 34 e1 fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	83 ec 0c             	sub    esp,0xc
c001ed32:	68 bf 93 03 c0       	push   0xc00393bf
c001ed37:	e8 42 e2 fe ff       	call   c000cf7e <panic(char const*)>
c001ed3c:	83 c4 10             	add    esp,0x10
c001ed3f:	83 ec 08             	sub    esp,0x8
c001ed42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ed46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed4a:	e8 a1 ff ff ff       	call   c001ecf0 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed56:	eb b6                	jmp    c001ed0e <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001ed58:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed5d:	75 10                	jne    c001ed6f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001ed5f:	83 ec 0c             	sub    esp,0xc
c001ed62:	68 80 91 03 c0       	push   0xc0039180
c001ed67:	e8 12 e2 fe ff       	call   c000cf7e <panic(char const*)>
c001ed6c:	83 c4 10             	add    esp,0x10
c001ed6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed73:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed75:	85 c0                	test   eax,eax
c001ed77:	74 34                	je     c001edad <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ed79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed80:	85 c0                	test   eax,eax
c001ed82:	74 29                	je     c001edad <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed8f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ed9a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eda1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eda4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001edab:	eb 65                	jmp    c001ee12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001edad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb3:	85 c0                	test   eax,eax
c001edb5:	75 4b                	jne    c001ee02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001edb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edbe:	85 c0                	test   eax,eax
c001edc0:	75 40                	jne    c001ee02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001edc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edca:	89 10                	mov    DWORD PTR [eax],edx
c001edcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001edd4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001edd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eddb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edde:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ede5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edec:	85 c0                	test   eax,eax
c001edee:	74 22                	je     c001ee12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	68 a2 91 03 c0       	push   0xc00391a2
c001edf8:	e8 81 e1 fe ff       	call   c000cf7e <panic(char const*)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	eb 10                	jmp    c001ee12 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee02:	83 ec 0c             	sub    esp,0xc
c001ee05:	68 ac 91 03 c0       	push   0xc00391ac
c001ee0a:	e8 6f e1 fe ff       	call   c000cf7e <panic(char const*)>
c001ee0f:	83 c4 10             	add    esp,0x10
c001ee12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee16:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee19:	8d 50 01             	lea    edx,[eax+0x1]
c001ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee20:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee23:	90                   	nop
c001ee24:	83 c4 1c             	add    esp,0x1c
c001ee27:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee28 <DriverlessDevice::~DriverlessDevice()>:
c001ee28:	ba 64 99 03 c0       	mov    edx,0xc0039964
c001ee2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee31:	89 10                	mov    DWORD PTR [eax],edx
c001ee33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee37:	50                   	push   eax
c001ee38:	e8 7f 47 ff ff       	call   c00135bc <Device::~Device()>
c001ee3d:	83 c4 04             	add    esp,0x4
c001ee40:	90                   	nop
c001ee41:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee42 <DriverlessDevice::~DriverlessDevice()>:
c001ee42:	83 ec 0c             	sub    esp,0xc
c001ee45:	83 ec 0c             	sub    esp,0xc
c001ee48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee4c:	e8 d7 ff ff ff       	call   c001ee28 <DriverlessDevice::~DriverlessDevice()>
c001ee51:	83 c4 10             	add    esp,0x10
c001ee54:	83 ec 08             	sub    esp,0x8
c001ee57:	68 58 01 00 00       	push   0x158
c001ee5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee60:	e8 ba 35 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001ee65:	83 c4 10             	add    esp,0x10
c001ee68:	83 c4 0c             	add    esp,0xc
c001ee6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ee6c <LinkedList<Device>::addElement(Device*)>:
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee74:	75 10                	jne    c001ee86 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ee76:	83 ec 0c             	sub    esp,0xc
c001ee79:	68 80 91 03 c0       	push   0xc0039180
c001ee7e:	e8 fb e0 fe ff       	call   c000cf7e <panic(char const*)>
c001ee83:	83 c4 10             	add    esp,0x10
c001ee86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee8a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee8c:	85 c0                	test   eax,eax
c001ee8e:	74 3a                	je     c001eeca <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee97:	85 c0                	test   eax,eax
c001ee99:	74 2f                	je     c001eeca <LinkedList<Device>::addElement(Device*)+0x5e>
c001ee9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eea2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eeac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eeb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eebb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eebe:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eec8:	eb 68                	jmp    c001ef32 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eece:	8b 00                	mov    eax,DWORD PTR [eax]
c001eed0:	85 c0                	test   eax,eax
c001eed2:	75 4e                	jne    c001ef22 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eedb:	85 c0                	test   eax,eax
c001eedd:	75 43                	jne    c001ef22 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eee7:	89 10                	mov    DWORD PTR [eax],edx
c001eee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eef1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eefb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef0c:	85 c0                	test   eax,eax
c001ef0e:	74 22                	je     c001ef32 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef10:	83 ec 0c             	sub    esp,0xc
c001ef13:	68 a2 91 03 c0       	push   0xc00391a2
c001ef18:	e8 61 e0 fe ff       	call   c000cf7e <panic(char const*)>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	eb 10                	jmp    c001ef32 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef22:	83 ec 0c             	sub    esp,0xc
c001ef25:	68 ac 91 03 c0       	push   0xc00391ac
c001ef2a:	e8 4f e0 fe ff       	call   c000cf7e <panic(char const*)>
c001ef2f:	83 c4 10             	add    esp,0x10
c001ef32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef39:	8d 50 01             	lea    edx,[eax+0x1]
c001ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef40:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef43:	90                   	nop
c001ef44:	83 c4 0c             	add    esp,0xc
c001ef47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef48 <LinkedList<Device>::LinkedList()>:
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	68 64 91 03 c0       	push   0xc0039164
c001ef93:	e8 c8 de fe ff       	call   c000ce60 <kprintf(char const*, ...)>
c001ef98:	83 c4 10             	add    esp,0x10
c001ef9b:	90                   	nop
c001ef9c:	83 c4 0c             	add    esp,0xc
c001ef9f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001efa0 <CPU::readDR0()>:
c001efa0:	83 ec 10             	sub    esp,0x10
c001efa3:	0f 21 c0             	mov    eax,db0
c001efa6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efae:	83 c4 10             	add    esp,0x10
c001efb1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001efb2 <CPU::readDR1()>:
c001efb2:	83 ec 10             	sub    esp,0x10
c001efb5:	0f 21 c8             	mov    eax,db1
c001efb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efc0:	83 c4 10             	add    esp,0x10
c001efc3:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001efc4 <CPU::readDR2()>:
c001efc4:	83 ec 10             	sub    esp,0x10
c001efc7:	0f 21 d0             	mov    eax,db2
c001efca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efd2:	83 c4 10             	add    esp,0x10
c001efd5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001efd6 <CPU::readDR3()>:
c001efd6:	83 ec 10             	sub    esp,0x10
c001efd9:	0f 21 d8             	mov    eax,db3
c001efdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001efe8 <CPU::readDR6()>:
c001efe8:	83 ec 10             	sub    esp,0x10
c001efeb:	0f 21 f0             	mov    eax,db6
c001efee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eff6:	83 c4 10             	add    esp,0x10
c001eff9:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001effa <CPU::readDR7()>:
c001effa:	83 ec 10             	sub    esp,0x10
c001effd:	0f 21 f8             	mov    eax,db7
c001f000:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f008:	83 c4 10             	add    esp,0x10
c001f00b:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f00c <ACPI::~ACPI()>:
c001f00c:	83 ec 0c             	sub    esp,0xc
c001f00f:	ba 44 a0 03 c0       	mov    edx,0xc003a044
c001f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f018:	89 10                	mov    DWORD PTR [eax],edx
c001f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01e:	83 ec 0c             	sub    esp,0xc
c001f021:	50                   	push   eax
c001f022:	e8 95 45 ff ff       	call   c00135bc <Device::~Device()>
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	90                   	nop
c001f02b:	83 c4 0c             	add    esp,0xc
c001f02e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f030 <ACPI::~ACPI()>:
c001f030:	83 ec 0c             	sub    esp,0xc
c001f033:	83 ec 0c             	sub    esp,0xc
c001f036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f03a:	e8 cd ff ff ff       	call   c001f00c <ACPI::~ACPI()>
c001f03f:	83 c4 10             	add    esp,0x10
c001f042:	83 ec 08             	sub    esp,0x8
c001f045:	68 68 22 00 00       	push   0x2268
c001f04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f04e:	e8 cc 33 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	83 c4 0c             	add    esp,0xc
c001f059:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f05a <CPU::~CPU()>:
c001f05a:	83 ec 0c             	sub    esp,0xc
c001f05d:	ba 94 a2 03 c0       	mov    edx,0xc003a294
c001f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f066:	89 10                	mov    DWORD PTR [eax],edx
c001f068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	50                   	push   eax
c001f070:	e8 47 45 ff ff       	call   c00135bc <Device::~Device()>
c001f075:	83 c4 10             	add    esp,0x10
c001f078:	90                   	nop
c001f079:	83 c4 0c             	add    esp,0xc
c001f07c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f07e <CPU::~CPU()>:
c001f07e:	83 ec 0c             	sub    esp,0xc
c001f081:	83 ec 0c             	sub    esp,0xc
c001f084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f088:	e8 cd ff ff ff       	call   c001f05a <CPU::~CPU()>
c001f08d:	83 c4 10             	add    esp,0x10
c001f090:	83 ec 08             	sub    esp,0x8
c001f093:	68 98 11 00 00       	push   0x1198
c001f098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09c:	e8 7e 33 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	83 c4 0c             	add    esp,0xc
c001f0a7:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f0a8 <CPU::writeDR7(unsigned long)>:
c001f0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ac:	0f 23 f8             	mov    db7,eax
c001f0af:	90                   	nop
c001f0b0:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f0b1 <CPU::writeCR4(unsigned long)>:
c001f0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b5:	0f 22 e0             	mov    cr4,eax
c001f0b8:	90                   	nop
c001f0b9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f0ba <PCI::~PCI()>:
c001f0ba:	83 ec 0c             	sub    esp,0xc
c001f0bd:	ba 30 a6 03 c0       	mov    edx,0xc003a630
c001f0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c6:	89 10                	mov    DWORD PTR [eax],edx
c001f0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cc:	83 ec 0c             	sub    esp,0xc
c001f0cf:	50                   	push   eax
c001f0d0:	e8 f7 3e ff ff       	call   c0012fcc <Bus::~Bus()>
c001f0d5:	83 c4 10             	add    esp,0x10
c001f0d8:	90                   	nop
c001f0d9:	83 c4 0c             	add    esp,0xc
c001f0dc:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f0de <PCI::~PCI()>:
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	83 ec 0c             	sub    esp,0xc
c001f0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0e8:	e8 cd ff ff ff       	call   c001f0ba <PCI::~PCI()>
c001f0ed:	83 c4 10             	add    esp,0x10
c001f0f0:	83 ec 08             	sub    esp,0x8
c001f0f3:	68 58 01 00 00       	push   0x158
c001f0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fc:	e8 1e 33 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f101:	83 c4 10             	add    esp,0x10
c001f104:	83 c4 0c             	add    esp,0xc
c001f107:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f108 <IDE::~IDE()>:
c001f108:	83 ec 0c             	sub    esp,0xc
c001f10b:	ba fc a8 03 c0       	mov    edx,0xc003a8fc
c001f110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f114:	89 10                	mov    DWORD PTR [eax],edx
c001f116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11a:	83 ec 0c             	sub    esp,0xc
c001f11d:	50                   	push   eax
c001f11e:	e8 af 49 ff ff       	call   c0013ad2 <HardDiskController::~HardDiskController()>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	90                   	nop
c001f127:	83 c4 0c             	add    esp,0xc
c001f12a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f12c <IDE::~IDE()>:
c001f12c:	83 ec 0c             	sub    esp,0xc
c001f12f:	83 ec 0c             	sub    esp,0xc
c001f132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f136:	e8 cd ff ff ff       	call   c001f108 <IDE::~IDE()>
c001f13b:	83 c4 10             	add    esp,0x10
c001f13e:	83 ec 08             	sub    esp,0x8
c001f141:	68 70 02 00 00       	push   0x270
c001f146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14a:	e8 d0 32 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f14f:	83 c4 10             	add    esp,0x10
c001f152:	83 c4 0c             	add    esp,0xc
c001f155:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f156 <ATA::~ATA()>:
c001f156:	83 ec 0c             	sub    esp,0xc
c001f159:	ba 4c a9 03 c0       	mov    edx,0xc003a94c
c001f15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f162:	89 10                	mov    DWORD PTR [eax],edx
c001f164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f168:	83 ec 0c             	sub    esp,0xc
c001f16b:	50                   	push   eax
c001f16c:	e8 3f 4a ff ff       	call   c0013bb0 <PhysicalDisk::~PhysicalDisk()>
c001f171:	83 c4 10             	add    esp,0x10
c001f174:	90                   	nop
c001f175:	83 c4 0c             	add    esp,0xc
c001f178:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f17a <ATA::~ATA()>:
c001f17a:	83 ec 0c             	sub    esp,0xc
c001f17d:	83 ec 0c             	sub    esp,0xc
c001f180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f184:	e8 cd ff ff ff       	call   c001f156 <ATA::~ATA()>
c001f189:	83 c4 10             	add    esp,0x10
c001f18c:	83 ec 08             	sub    esp,0x8
c001f18f:	68 7c 01 00 00       	push   0x17c
c001f194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f198:	e8 82 32 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f19d:	83 c4 10             	add    esp,0x10
c001f1a0:	83 c4 0c             	add    esp,0xc
c001f1a3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f1a4 <ATAPI::~ATAPI()>:
c001f1a4:	83 ec 0c             	sub    esp,0xc
c001f1a7:	ba b8 a9 03 c0       	mov    edx,0xc003a9b8
c001f1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b0:	89 10                	mov    DWORD PTR [eax],edx
c001f1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b6:	83 ec 0c             	sub    esp,0xc
c001f1b9:	50                   	push   eax
c001f1ba:	e8 f1 49 ff ff       	call   c0013bb0 <PhysicalDisk::~PhysicalDisk()>
c001f1bf:	83 c4 10             	add    esp,0x10
c001f1c2:	90                   	nop
c001f1c3:	83 c4 0c             	add    esp,0xc
c001f1c6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f1c8 <ATAPI::~ATAPI()>:
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	83 ec 0c             	sub    esp,0xc
c001f1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d2:	e8 cd ff ff ff       	call   c001f1a4 <ATAPI::~ATAPI()>
c001f1d7:	83 c4 10             	add    esp,0x10
c001f1da:	83 ec 08             	sub    esp,0x8
c001f1dd:	68 80 01 00 00       	push   0x180
c001f1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1e6:	e8 34 32 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f1eb:	83 c4 10             	add    esp,0x10
c001f1ee:	83 c4 0c             	add    esp,0xc
c001f1f1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f1f2 <AVX::~AVX()>:
c001f1f2:	83 ec 0c             	sub    esp,0xc
c001f1f5:	ba f4 a9 03 c0       	mov    edx,0xc003a9f4
c001f1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fe:	89 10                	mov    DWORD PTR [eax],edx
c001f200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f204:	83 ec 0c             	sub    esp,0xc
c001f207:	50                   	push   eax
c001f208:	e8 27 4a ff ff       	call   c0013c34 <FPU::~FPU()>
c001f20d:	83 c4 10             	add    esp,0x10
c001f210:	90                   	nop
c001f211:	83 c4 0c             	add    esp,0xc
c001f214:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f216 <AVX::~AVX()>:
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	83 ec 0c             	sub    esp,0xc
c001f21c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f220:	e8 cd ff ff ff       	call   c001f1f2 <AVX::~AVX()>
c001f225:	83 c4 10             	add    esp,0x10
c001f228:	83 ec 08             	sub    esp,0x8
c001f22b:	68 58 01 00 00       	push   0x158
c001f230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f234:	e8 e6 31 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f239:	83 c4 10             	add    esp,0x10
c001f23c:	83 c4 0c             	add    esp,0xc
c001f23f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f240 <MMX::~MMX()>:
c001f240:	83 ec 0c             	sub    esp,0xc
c001f243:	ba 34 aa 03 c0       	mov    edx,0xc003aa34
c001f248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24c:	89 10                	mov    DWORD PTR [eax],edx
c001f24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f252:	83 ec 0c             	sub    esp,0xc
c001f255:	50                   	push   eax
c001f256:	e8 d9 49 ff ff       	call   c0013c34 <FPU::~FPU()>
c001f25b:	83 c4 10             	add    esp,0x10
c001f25e:	90                   	nop
c001f25f:	83 c4 0c             	add    esp,0xc
c001f262:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f264 <MMX::~MMX()>:
c001f264:	83 ec 0c             	sub    esp,0xc
c001f267:	83 ec 0c             	sub    esp,0xc
c001f26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f26e:	e8 cd ff ff ff       	call   c001f240 <MMX::~MMX()>
c001f273:	83 c4 10             	add    esp,0x10
c001f276:	83 ec 08             	sub    esp,0x8
c001f279:	68 58 01 00 00       	push   0x158
c001f27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f282:	e8 98 31 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f287:	83 c4 10             	add    esp,0x10
c001f28a:	83 c4 0c             	add    esp,0xc
c001f28d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f28e <SSE::~SSE()>:
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	ba 74 aa 03 c0       	mov    edx,0xc003aa74
c001f296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29a:	89 10                	mov    DWORD PTR [eax],edx
c001f29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a0:	83 ec 0c             	sub    esp,0xc
c001f2a3:	50                   	push   eax
c001f2a4:	e8 8b 49 ff ff       	call   c0013c34 <FPU::~FPU()>
c001f2a9:	83 c4 10             	add    esp,0x10
c001f2ac:	90                   	nop
c001f2ad:	83 c4 0c             	add    esp,0xc
c001f2b0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f2b2 <SSE::~SSE()>:
c001f2b2:	83 ec 0c             	sub    esp,0xc
c001f2b5:	83 ec 0c             	sub    esp,0xc
c001f2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2bc:	e8 cd ff ff ff       	call   c001f28e <SSE::~SSE()>
c001f2c1:	83 c4 10             	add    esp,0x10
c001f2c4:	83 ec 08             	sub    esp,0x8
c001f2c7:	68 58 01 00 00       	push   0x158
c001f2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2d0:	e8 4a 31 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f2d5:	83 c4 10             	add    esp,0x10
c001f2d8:	83 c4 0c             	add    esp,0xc
c001f2db:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f2dc <x87::~x87()>:
c001f2dc:	83 ec 0c             	sub    esp,0xc
c001f2df:	ba b4 aa 03 c0       	mov    edx,0xc003aab4
c001f2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2e8:	89 10                	mov    DWORD PTR [eax],edx
c001f2ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ee:	83 ec 0c             	sub    esp,0xc
c001f2f1:	50                   	push   eax
c001f2f2:	e8 3d 49 ff ff       	call   c0013c34 <FPU::~FPU()>
c001f2f7:	83 c4 10             	add    esp,0x10
c001f2fa:	90                   	nop
c001f2fb:	83 c4 0c             	add    esp,0xc
c001f2fe:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f300 <x87::~x87()>:
c001f300:	83 ec 0c             	sub    esp,0xc
c001f303:	83 ec 0c             	sub    esp,0xc
c001f306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f30a:	e8 cd ff ff ff       	call   c001f2dc <x87::~x87()>
c001f30f:	83 c4 10             	add    esp,0x10
c001f312:	83 ec 08             	sub    esp,0x8
c001f315:	68 58 01 00 00       	push   0x158
c001f31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f31e:	e8 fc 30 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f323:	83 c4 10             	add    esp,0x10
c001f326:	83 c4 0c             	add    esp,0xc
c001f329:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f32a <IOAPIC::~IOAPIC()>:
c001f32a:	83 ec 0c             	sub    esp,0xc
c001f32d:	ba 0c ac 03 c0       	mov    edx,0xc003ac0c
c001f332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f336:	89 10                	mov    DWORD PTR [eax],edx
c001f338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33c:	83 ec 0c             	sub    esp,0xc
c001f33f:	50                   	push   eax
c001f340:	e8 77 42 ff ff       	call   c00135bc <Device::~Device()>
c001f345:	83 c4 10             	add    esp,0x10
c001f348:	90                   	nop
c001f349:	83 c4 0c             	add    esp,0xc
c001f34c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f34e <IOAPIC::~IOAPIC()>:
c001f34e:	83 ec 0c             	sub    esp,0xc
c001f351:	83 ec 0c             	sub    esp,0xc
c001f354:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f358:	e8 cd ff ff ff       	call   c001f32a <IOAPIC::~IOAPIC()>
c001f35d:	83 c4 10             	add    esp,0x10
c001f360:	83 ec 08             	sub    esp,0x8
c001f363:	68 68 01 00 00       	push   0x168
c001f368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f36c:	e8 ae 30 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f371:	83 c4 10             	add    esp,0x10
c001f374:	83 c4 0c             	add    esp,0xc
c001f377:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f378 <APIC::~APIC()>:
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	ba c4 ab 03 c0       	mov    edx,0xc003abc4
c001f380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f384:	89 10                	mov    DWORD PTR [eax],edx
c001f386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f38a:	83 ec 0c             	sub    esp,0xc
c001f38d:	50                   	push   eax
c001f38e:	e8 45 4d ff ff       	call   c00140d8 <InterruptController::~InterruptController()>
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	90                   	nop
c001f397:	83 c4 0c             	add    esp,0xc
c001f39a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f39c <APIC::~APIC()>:
c001f39c:	83 ec 0c             	sub    esp,0xc
c001f39f:	83 ec 0c             	sub    esp,0xc
c001f3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a6:	e8 cd ff ff ff       	call   c001f378 <APIC::~APIC()>
c001f3ab:	83 c4 10             	add    esp,0x10
c001f3ae:	83 ec 08             	sub    esp,0x8
c001f3b1:	68 58 21 00 00       	push   0x2158
c001f3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3ba:	e8 60 30 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f3bf:	83 c4 10             	add    esp,0x10
c001f3c2:	83 c4 0c             	add    esp,0xc
c001f3c5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f3c6 <PIC::~PIC()>:
c001f3c6:	83 ec 0c             	sub    esp,0xc
c001f3c9:	ba 5c ac 03 c0       	mov    edx,0xc003ac5c
c001f3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d2:	89 10                	mov    DWORD PTR [eax],edx
c001f3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d8:	83 ec 0c             	sub    esp,0xc
c001f3db:	50                   	push   eax
c001f3dc:	e8 f7 4c ff ff       	call   c00140d8 <InterruptController::~InterruptController()>
c001f3e1:	83 c4 10             	add    esp,0x10
c001f3e4:	90                   	nop
c001f3e5:	83 c4 0c             	add    esp,0xc
c001f3e8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f3ea <PIC::~PIC()>:
c001f3ea:	83 ec 0c             	sub    esp,0xc
c001f3ed:	83 ec 0c             	sub    esp,0xc
c001f3f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f4:	e8 cd ff ff ff       	call   c001f3c6 <PIC::~PIC()>
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	83 ec 08             	sub    esp,0x8
c001f3ff:	68 58 21 00 00       	push   0x2158
c001f404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f408:	e8 12 30 ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f40d:	83 c4 10             	add    esp,0x10
c001f410:	83 c4 0c             	add    esp,0xc
c001f413:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f414 <APICTimer::~APICTimer()>:
c001f414:	83 ec 0c             	sub    esp,0xc
c001f417:	ba b0 ac 03 c0       	mov    edx,0xc003acb0
c001f41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f420:	89 10                	mov    DWORD PTR [eax],edx
c001f422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f426:	83 ec 0c             	sub    esp,0xc
c001f429:	50                   	push   eax
c001f42a:	e8 79 62 ff ff       	call   c00156a8 <Timer::~Timer()>
c001f42f:	83 c4 10             	add    esp,0x10
c001f432:	90                   	nop
c001f433:	83 c4 0c             	add    esp,0xc
c001f436:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f438 <APICTimer::~APICTimer()>:
c001f438:	83 ec 0c             	sub    esp,0xc
c001f43b:	83 ec 0c             	sub    esp,0xc
c001f43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f442:	e8 cd ff ff ff       	call   c001f414 <APICTimer::~APICTimer()>
c001f447:	83 c4 10             	add    esp,0x10
c001f44a:	83 ec 08             	sub    esp,0x8
c001f44d:	68 60 01 00 00       	push   0x160
c001f452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f456:	e8 c4 2f ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f45b:	83 c4 10             	add    esp,0x10
c001f45e:	83 c4 0c             	add    esp,0xc
c001f461:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f462 <PIT::~PIT()>:
c001f462:	83 ec 0c             	sub    esp,0xc
c001f465:	ba 00 ad 03 c0       	mov    edx,0xc003ad00
c001f46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46e:	89 10                	mov    DWORD PTR [eax],edx
c001f470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f474:	83 ec 0c             	sub    esp,0xc
c001f477:	50                   	push   eax
c001f478:	e8 2b 62 ff ff       	call   c00156a8 <Timer::~Timer()>
c001f47d:	83 c4 10             	add    esp,0x10
c001f480:	90                   	nop
c001f481:	83 c4 0c             	add    esp,0xc
c001f484:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f486 <PIT::~PIT()>:
c001f486:	83 ec 0c             	sub    esp,0xc
c001f489:	83 ec 0c             	sub    esp,0xc
c001f48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f490:	e8 cd ff ff ff       	call   c001f462 <PIT::~PIT()>
c001f495:	83 c4 10             	add    esp,0x10
c001f498:	83 ec 08             	sub    esp,0x8
c001f49b:	68 5c 01 00 00       	push   0x15c
c001f4a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4a4:	e8 76 2f ff ff       	call   c001241f <operator delete(void*, unsigned long)>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	83 c4 0c             	add    esp,0xc
c001f4af:	c3                   	ret    
